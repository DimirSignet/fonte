{"sha": "46ae47736536afc3772425fe6101978fb4ab7158", "log": "Use term \"binary\" instead of \"boolArray\" in Conversion. Improve Javadoc of class.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/Conversion.java\n+++ b/src/main/java/org/apache/commons/lang3/Conversion.java\n  * Static methods to convert a type into another, with endianness and bit ordering awareness.\n  * </p>\n  * <p>\n- * The methods names follow a naming rule:\n+ * The methods names follow a naming rule:</br>\n+ * {@code <source type>[source endianness][source bit ordering]To<destination type>[destination endianness][destination bit ordering]}\n  * </p>\n- * \n- * <pre>\n- * &ltsource type&gt[source endianness][source bit ordering]To&ltdestination type&gt[destination endianness][destination bit ordering]\n- * Source/Destination type fields: either of the following. An 's' added at the end indicate an array\n- *  - \"bool\"\n- *  - \"byte\"\n- *  - \"int\"\n- *  - \"long\"\n- *  - \"Hex\": a String containing hexadecimal digits\n- *  - \"HexDigit\": a Char containing a hexadecimal digit\n- * Endianness field: little endian is the default, in this case the field is absent. In case of big endian, the field is \"Be\".\n- * Bit ordering: Lsb0 is the default, in this case the field is absent. In case of Msb0, the field is \"Msb0\".\n- * \n- * Example: intBeMsb0ToHex convert an int with big endian byte order and Msb0 bit order into its hexadecimal string representation\n- * </pre>\n+ * <p>\n+ * Source/destination type fields is one of the following:\n+ * <ul>\n+ * <li>binary: an array of booleans</li>\n+ * <li>byte or byteArray</li>\n+ * <li>int or intArray</li>\n+ * <li>long or longArray</li>\n+ * <li>hex: a String containing hexadecimal digits (lowercase in destination)</li>\n+ * <li>hexDigit: a Char containing a hexadecimal digit (lowercase in destination)</li>\n+ * <li>uuid</li>\n+ * </ul>\n+ * Endianness field: little endian is the default, in this case the field is absent. In case of\n+ * big endian, the field is \"Be\".</br> Bit ordering: Lsb0 is the default, in this case the field\n+ * is absent. In case of Msb0, the field is \"Msb0\".\n+ * </p>\n+ * <p>\n+ * Example: intBeMsb0ToHex convert an int with big endian byte order and Msb0 bit order into its\n+ * hexadecimal string representation\n+ * </p>\n  * <p>\n  * Most of the methods provide only default encoding for destination, this limits the number of\n  * ways to do one thing. Unless you are dealing with data from/to outside of the JVM platform,\n \n     /**\n      * <p>\n-     * Converts a hexadecimal digit into binary (represented as boolean array) using the default (Lsb0) bit ordering.\n+     * Converts a hexadecimal digit into binary (represented as boolean array) using the default\n+     * (Lsb0) bit ordering.\n      * </p>\n      * <p>\n      * '1' is converted as follow: (1, 0, 0, 0)\n      * @return a boolean array with the binary representation of {@code hexDigit}\n      * @throws IllegalArgumentException if {@code hexDigit} is not a hexadecimal digit\n      */\n-    public static boolean[] hexDigitToBoolArray(char hexDigit) {\n+    public static boolean[] hexDigitToBinary(char hexDigit) {\n         switch (hexDigit) {\n         case '0':\n             return new boolean[]{false, false, false, false};\n \n     /**\n      * <p>\n-     * Converts a hexadecimal digit into binary (represented as boolean array) using the Msb0 bit ordering.\n+     * Converts a hexadecimal digit into binary (represented as boolean array) using the Msb0\n+     * bit ordering.\n      * </p>\n      * <p>\n      * '1' is converted as follow: (0, 0, 0, 1)\n      * @return a boolean array with the binary representation of {@code hexDigit}\n      * @throws IllegalArgumentException if {@code hexDigit} is not a hexadecimal digit\n      */\n-    public static boolean[] hexDigitMsb0ToBoolArray(char hexDigit) {\n+    public static boolean[] hexDigitMsb0ToBinary(char hexDigit) {\n         switch (hexDigit) {\n         case '0':\n             return new boolean[]{false, false, false, false};\n \n     /**\n      * <p>\n-     * Converts binary (represented as boolean array) to a hexadecimal digit using the default (Lsb0) bit ordering.\n+     * Converts binary (represented as boolean array) to a hexadecimal digit using the default\n+     * (Lsb0) bit ordering.\n      * </p>\n      * <p>\n      * (1, 0, 0, 0) is converted as follow: '1'\n      * @throws IllegalArgumentException if {@code src} is empty\n      * @throws NullPointerException if {@code src} is {@code null}\n      */\n-    public static char boolArrayToHexDigit(boolean[] src) {\n-        return boolArrayToHexDigit(src, 0);\n-    }\n-\n-    /**\n-     * <p>\n-     * Converts binary (represented as boolean array) to a hexadecimal digit using the default (Lsb0) bit ordering.\n+    public static char binaryToHexDigit(boolean[] src) {\n+        return binaryToHexDigit(src, 0);\n+    }\n+\n+    /**\n+     * <p>\n+     * Converts binary (represented as boolean array) to a hexadecimal digit using the default\n+     * (Lsb0) bit ordering.\n      * </p>\n      * <p>\n      * (1, 0, 0, 0) is converted as follow: '1'\n      * @throws IllegalArgumentException if {@code src} is empty\n      * @throws NullPointerException if {@code src} is {@code null}\n      */\n-    public static char boolArrayToHexDigit(boolean[] src, int srcPos) {\n+    public static char binaryToHexDigit(boolean[] src, int srcPos) {\n         if (src.length == 0) {\n             throw new IllegalArgumentException(\"Cannot convert an empty array.\");\n         }\n \n     /**\n      * <p>\n-     * Converts binary (represented as boolean array) to a hexadecimal digit using the Msb0 bit ordering.\n+     * Converts binary (represented as boolean array) to a hexadecimal digit using the Msb0 bit\n+     * ordering.\n      * </p>\n      * <p>\n      * (1, 0, 0, 0) is converted as follow: '8'\n      *             {@code src.length > 8}\n      * @throws NullPointerException if {@code src} is {@code null}\n      */\n-    public static char boolArrayToHexDigitMsb0_4bits(boolean[] src) {\n-        return boolArrayToHexDigitMsb0_4bits(src, 0);\n-    }\n-\n-    /**\n-     * <p>\n-     * Converts binary (represented as boolean array) to a hexadecimal digit using the Msb0 bit ordering.\n+    public static char binaryToHexDigitMsb0_4bits(boolean[] src) {\n+        return binaryToHexDigitMsb0_4bits(src, 0);\n+    }\n+\n+    /**\n+     * <p>\n+     * Converts binary (represented as boolean array) to a hexadecimal digit using the Msb0 bit\n+     * ordering.\n      * </p>\n      * <p>\n      * (1, 0, 0, 0) is converted as follow: '8' (1,0,0,1,1,0,1,0) with srcPos = 3 is converted\n      *             {@code src.length - srcPos < 4}\n      * @throws NullPointerException if {@code src} is {@code null}\n      */\n-    public static char boolArrayToHexDigitMsb0_4bits(boolean[] src, int srcPos) {\n+    public static char binaryToHexDigitMsb0_4bits(boolean[] src, int srcPos) {\n         if (src.length > 8) {\n             throw new IllegalArgumentException(\"src.length>8: src.length=\" + src.length);\n         }\n \n     /**\n      * <p>\n-     * Converts the first 4 bits of a binary (represented as boolean array) in big endian Msb0 bit ordering to a\n-     * hexadecimal digit.\n+     * Converts the first 4 bits of a binary (represented as boolean array) in big endian Msb0\n+     * bit ordering to a hexadecimal digit.\n      * </p>\n      * <p>\n      * (1, 0, 0, 0) is converted as follow: '8' (1,0,0,0,0,0,0,0, 0,0,0,0,0,1,0,0) is converted\n      * @throws IllegalArgumentException if {@code src} is empty\n      * @throws NullPointerException if {@code src} is {@code null}\n      */\n-    public static char boolArrayBeMsb0ToHexDigit(boolean[] src) {\n-        return boolArrayBeMsb0ToHexDigit(src, 0);\n-    }\n-\n-    /**\n-     * <p>\n-     * Converts a binary (represented as boolean array) in big endian Msb0 bit ordering to a hexadecimal\n-     * digit.\n+    public static char binaryBeMsb0ToHexDigit(boolean[] src) {\n+        return binaryBeMsb0ToHexDigit(src, 0);\n+    }\n+\n+    /**\n+     * <p>\n+     * Converts a binary (represented as boolean array) in big endian Msb0 bit ordering to a\n+     * hexadecimal digit.\n      * </p>\n      * <p>\n      * (1, 0, 0, 0) with srcPos = 0 is converted as follow: '8' (1,0,0,0,0,0,0,0,\n      * @throws IllegalArgumentException if {@code src} is empty\n      * @throws NullPointerException if {@code src} is {@code null}\n      */\n-    public static char boolArrayBeMsb0ToHexDigit(boolean[] src, int srcPos) {\n+    public static char binaryBeMsb0ToHexDigit(boolean[] src, int srcPos) {\n         if (src.length == 0) {\n             throw new IllegalArgumentException(\"Cannot convert an empty array.\");\n         }\n \n     /**\n      * <p>\n-     * Converts binary (represented as boolean array) into a long using the default (little endian, Lsb0) byte and\n-     * bit ordering.\n+     * Converts binary (represented as boolean array) into a long using the default (little\n+     * endian, Lsb0) byte and bit ordering.\n      * </p>\n      * \n      * @param src the binary to convert\n      * @throws IllegalArgumentException if {@code nBools-1+dstPos >= 64}\n      * @throws ArrayIndexOutOfBoundsException if {@code srcPos + nBools > src.length}\n      */\n-    public static long boolArrayToLong(boolean[] src, int srcPos, long dstInit, int dstPos,\n+    public static long binaryToLong(boolean[] src, int srcPos, long dstInit, int dstPos,\n         int nBools) {\n         if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n             return dstInit;\n \n     /**\n      * <p>\n-     * Converts binary (represented as boolean array) into a int using the default (little endian, Lsb0) byte and\n-     * bit ordering.\n+     * Converts binary (represented as boolean array) into a int using the default (little\n+     * endian, Lsb0) byte and bit ordering.\n      * </p>\n      * \n      * @param src the binary to convert\n      * @throws IllegalArgumentException if {@code nBools-1+dstPos >= 32}\n      * @throws ArrayIndexOutOfBoundsException if {@code srcPos + nBools > src.length}\n      */\n-    public static int boolArrayToInt(boolean[] src, int srcPos, int dstInit, int dstPos,\n-        int nBools) {\n+    public static int binaryToInt(boolean[] src, int srcPos, int dstInit, int dstPos, int nBools) {\n         if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n             return dstInit;\n         }\n \n     /**\n      * <p>\n-     * Converts binary (represented as boolean array) into a short using the default (little endian, Lsb0) byte\n-     * and bit ordering.\n+     * Converts binary (represented as boolean array) into a short using the default (little\n+     * endian, Lsb0) byte and bit ordering.\n      * </p>\n      * \n      * @param src the binary to convert\n      * @throws IllegalArgumentException if {@code nBools-1+dstPos >= 16}\n      * @throws ArrayIndexOutOfBoundsException if {@code srcPos + nBools > src.length}\n      */\n-    public static short boolArrayToShort(boolean[] src, int srcPos, short dstInit, int dstPos,\n+    public static short binaryToShort(boolean[] src, int srcPos, short dstInit, int dstPos,\n         int nBools) {\n         if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n             return dstInit;\n \n     /**\n      * <p>\n-     * Converts binary (represented as boolean array) into a byte using the default (little endian, Lsb0) byte and\n-     * bit ordering.\n+     * Converts binary (represented as boolean array) into a byte using the default (little\n+     * endian, Lsb0) byte and bit ordering.\n      * </p>\n      * \n      * @param src the binary to convert\n      * @throws IllegalArgumentException if {@code nBools-1+dstPos >= 8}\n      * @throws ArrayIndexOutOfBoundsException if {@code srcPos + nBools > src.length}\n      */\n-    public static byte boolArrayToByte(boolean[] src, int srcPos, byte dstInit, int dstPos,\n+    public static byte binaryToByte(boolean[] src, int srcPos, byte dstInit, int dstPos,\n         int nBools) {\n         if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n             return dstInit;\n      * @throws IllegalArgumentException if {@code nBools-1+srcPos >= 64}\n      * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nBools > dst.length}\n      */\n-    public static boolean[] longToBoolArray(long src, int srcPos, boolean[] dst, int dstPos,\n+    public static boolean[] longToBinary(long src, int srcPos, boolean[] dst, int dstPos,\n         int nBools) {\n         if (0 == nBools) {\n             return dst;\n      * @throws IllegalArgumentException if {@code nBools-1+srcPos >= 32}\n      * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nBools > dst.length}\n      */\n-    public static boolean[] intToBoolArray(int src, int srcPos, boolean[] dst, int dstPos,\n+    public static boolean[] intToBinary(int src, int srcPos, boolean[] dst, int dstPos,\n         int nBools) {\n         if (0 == nBools) {\n             return dst;\n      * @throws IllegalArgumentException if {@code nBools-1+srcPos >= 16}\n      * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nBools > dst.length}\n      */\n-    public static boolean[] shortToBoolArray(short src, int srcPos, boolean[] dst, int dstPos,\n+    public static boolean[] shortToBinary(short src, int srcPos, boolean[] dst, int dstPos,\n         int nBools) {\n         if (0 == nBools) {\n             return dst;\n      * @throws IllegalArgumentException if {@code nBools-1+srcPos >= 8}\n      * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nBools > dst.length}\n      */\n-    public static boolean[] byteToBoolArray(byte src, int srcPos, boolean[] dst, int dstPos,\n+    public static boolean[] byteToBinary(byte src, int srcPos, boolean[] dst, int dstPos,\n         int nBools) {\n         if (0 == nBools) {\n             return dst;\n--- a/src/test/java/org/apache/commons/lang3/ConversionTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ConversionTest.java\n     }\n \n     /**\n-     * Tests {@link Conversion#hexDigitToBoolArray(char)}.\n-     */\n-    @Test\n-    public void testHexDigitToBoolArray() {\n-        assertBoolArrayEquals(\n-            new boolean[]{false, false, false, false}, Conversion.hexDigitToBoolArray('0'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, false, false, false}, Conversion.hexDigitToBoolArray('1'));\n-        assertBoolArrayEquals(\n-            new boolean[]{false, true, false, false}, Conversion.hexDigitToBoolArray('2'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, true, false, false}, Conversion.hexDigitToBoolArray('3'));\n-        assertBoolArrayEquals(\n-            new boolean[]{false, false, true, false}, Conversion.hexDigitToBoolArray('4'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, false, true, false}, Conversion.hexDigitToBoolArray('5'));\n-        assertBoolArrayEquals(\n-            new boolean[]{false, true, true, false}, Conversion.hexDigitToBoolArray('6'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, true, true, false}, Conversion.hexDigitToBoolArray('7'));\n-        assertBoolArrayEquals(\n-            new boolean[]{false, false, false, true}, Conversion.hexDigitToBoolArray('8'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, false, false, true}, Conversion.hexDigitToBoolArray('9'));\n-        assertBoolArrayEquals(\n-            new boolean[]{false, true, false, true}, Conversion.hexDigitToBoolArray('A'));\n-        assertBoolArrayEquals(\n-            new boolean[]{false, true, false, true}, Conversion.hexDigitToBoolArray('a'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, true, false, true}, Conversion.hexDigitToBoolArray('B'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, true, false, true}, Conversion.hexDigitToBoolArray('b'));\n-        assertBoolArrayEquals(\n-            new boolean[]{false, false, true, true}, Conversion.hexDigitToBoolArray('C'));\n-        assertBoolArrayEquals(\n-            new boolean[]{false, false, true, true}, Conversion.hexDigitToBoolArray('c'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, false, true, true}, Conversion.hexDigitToBoolArray('D'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, false, true, true}, Conversion.hexDigitToBoolArray('d'));\n-        assertBoolArrayEquals(\n-            new boolean[]{false, true, true, true}, Conversion.hexDigitToBoolArray('E'));\n-        assertBoolArrayEquals(\n-            new boolean[]{false, true, true, true}, Conversion.hexDigitToBoolArray('e'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, true, true, true}, Conversion.hexDigitToBoolArray('F'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, true, true, true}, Conversion.hexDigitToBoolArray('f'));\n+     * Tests {@link Conversion#hexDigitToBinary(char)}.\n+     */\n+    @Test\n+    public void testHexDigitToBinary() {\n+        assertBinaryEquals(\n+            new boolean[]{false, false, false, false}, Conversion.hexDigitToBinary('0'));\n+        assertBinaryEquals(\n+            new boolean[]{true, false, false, false}, Conversion.hexDigitToBinary('1'));\n+        assertBinaryEquals(\n+            new boolean[]{false, true, false, false}, Conversion.hexDigitToBinary('2'));\n+        assertBinaryEquals(\n+            new boolean[]{true, true, false, false}, Conversion.hexDigitToBinary('3'));\n+        assertBinaryEquals(\n+            new boolean[]{false, false, true, false}, Conversion.hexDigitToBinary('4'));\n+        assertBinaryEquals(\n+            new boolean[]{true, false, true, false}, Conversion.hexDigitToBinary('5'));\n+        assertBinaryEquals(\n+            new boolean[]{false, true, true, false}, Conversion.hexDigitToBinary('6'));\n+        assertBinaryEquals(\n+            new boolean[]{true, true, true, false}, Conversion.hexDigitToBinary('7'));\n+        assertBinaryEquals(\n+            new boolean[]{false, false, false, true}, Conversion.hexDigitToBinary('8'));\n+        assertBinaryEquals(\n+            new boolean[]{true, false, false, true}, Conversion.hexDigitToBinary('9'));\n+        assertBinaryEquals(\n+            new boolean[]{false, true, false, true}, Conversion.hexDigitToBinary('A'));\n+        assertBinaryEquals(\n+            new boolean[]{false, true, false, true}, Conversion.hexDigitToBinary('a'));\n+        assertBinaryEquals(\n+            new boolean[]{true, true, false, true}, Conversion.hexDigitToBinary('B'));\n+        assertBinaryEquals(\n+            new boolean[]{true, true, false, true}, Conversion.hexDigitToBinary('b'));\n+        assertBinaryEquals(\n+            new boolean[]{false, false, true, true}, Conversion.hexDigitToBinary('C'));\n+        assertBinaryEquals(\n+            new boolean[]{false, false, true, true}, Conversion.hexDigitToBinary('c'));\n+        assertBinaryEquals(\n+            new boolean[]{true, false, true, true}, Conversion.hexDigitToBinary('D'));\n+        assertBinaryEquals(\n+            new boolean[]{true, false, true, true}, Conversion.hexDigitToBinary('d'));\n+        assertBinaryEquals(\n+            new boolean[]{false, true, true, true}, Conversion.hexDigitToBinary('E'));\n+        assertBinaryEquals(\n+            new boolean[]{false, true, true, true}, Conversion.hexDigitToBinary('e'));\n+        assertBinaryEquals(\n+            new boolean[]{true, true, true, true}, Conversion.hexDigitToBinary('F'));\n+        assertBinaryEquals(\n+            new boolean[]{true, true, true, true}, Conversion.hexDigitToBinary('f'));\n         try {\n-            Conversion.hexDigitToBoolArray('G');\n+            Conversion.hexDigitToBinary('G');\n             fail(\"Thrown \" + IllegalArgumentException.class.getName() + \" expected\");\n         } catch (final IllegalArgumentException e) {\n             // OK\n     }\n \n     /**\n-     * Tests {@link Conversion#hexDigitMsb0ToBoolArray(char)}.\n-     */\n-    @Test\n-    public void testHexDigitMsb0ToBoolArray() {\n-        assertBoolArrayEquals(\n-            new boolean[]{false, false, false, false}, Conversion.hexDigitMsb0ToBoolArray('0'));\n-        assertBoolArrayEquals(\n-            new boolean[]{false, false, false, true}, Conversion.hexDigitMsb0ToBoolArray('1'));\n-        assertBoolArrayEquals(\n-            new boolean[]{false, false, true, false}, Conversion.hexDigitMsb0ToBoolArray('2'));\n-        assertBoolArrayEquals(\n-            new boolean[]{false, false, true, true}, Conversion.hexDigitMsb0ToBoolArray('3'));\n-        assertBoolArrayEquals(\n-            new boolean[]{false, true, false, false}, Conversion.hexDigitMsb0ToBoolArray('4'));\n-        assertBoolArrayEquals(\n-            new boolean[]{false, true, false, true}, Conversion.hexDigitMsb0ToBoolArray('5'));\n-        assertBoolArrayEquals(\n-            new boolean[]{false, true, true, false}, Conversion.hexDigitMsb0ToBoolArray('6'));\n-        assertBoolArrayEquals(\n-            new boolean[]{false, true, true, true}, Conversion.hexDigitMsb0ToBoolArray('7'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, false, false, false}, Conversion.hexDigitMsb0ToBoolArray('8'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, false, false, true}, Conversion.hexDigitMsb0ToBoolArray('9'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, false, true, false}, Conversion.hexDigitMsb0ToBoolArray('A'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, false, true, false}, Conversion.hexDigitMsb0ToBoolArray('a'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, false, true, true}, Conversion.hexDigitMsb0ToBoolArray('B'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, false, true, true}, Conversion.hexDigitMsb0ToBoolArray('b'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, true, false, false}, Conversion.hexDigitMsb0ToBoolArray('C'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, true, false, false}, Conversion.hexDigitMsb0ToBoolArray('c'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, true, false, true}, Conversion.hexDigitMsb0ToBoolArray('D'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, true, false, true}, Conversion.hexDigitMsb0ToBoolArray('d'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, true, true, false}, Conversion.hexDigitMsb0ToBoolArray('E'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, true, true, false}, Conversion.hexDigitMsb0ToBoolArray('e'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, true, true, true}, Conversion.hexDigitMsb0ToBoolArray('F'));\n-        assertBoolArrayEquals(\n-            new boolean[]{true, true, true, true}, Conversion.hexDigitMsb0ToBoolArray('f'));\n+     * Tests {@link Conversion#hexDigitMsb0ToBinary(char)}.\n+     */\n+    @Test\n+    public void testHexDigitMsb0ToBinary() {\n+        assertBinaryEquals(\n+            new boolean[]{false, false, false, false}, Conversion.hexDigitMsb0ToBinary('0'));\n+        assertBinaryEquals(\n+            new boolean[]{false, false, false, true}, Conversion.hexDigitMsb0ToBinary('1'));\n+        assertBinaryEquals(\n+            new boolean[]{false, false, true, false}, Conversion.hexDigitMsb0ToBinary('2'));\n+        assertBinaryEquals(\n+            new boolean[]{false, false, true, true}, Conversion.hexDigitMsb0ToBinary('3'));\n+        assertBinaryEquals(\n+            new boolean[]{false, true, false, false}, Conversion.hexDigitMsb0ToBinary('4'));\n+        assertBinaryEquals(\n+            new boolean[]{false, true, false, true}, Conversion.hexDigitMsb0ToBinary('5'));\n+        assertBinaryEquals(\n+            new boolean[]{false, true, true, false}, Conversion.hexDigitMsb0ToBinary('6'));\n+        assertBinaryEquals(\n+            new boolean[]{false, true, true, true}, Conversion.hexDigitMsb0ToBinary('7'));\n+        assertBinaryEquals(\n+            new boolean[]{true, false, false, false}, Conversion.hexDigitMsb0ToBinary('8'));\n+        assertBinaryEquals(\n+            new boolean[]{true, false, false, true}, Conversion.hexDigitMsb0ToBinary('9'));\n+        assertBinaryEquals(\n+            new boolean[]{true, false, true, false}, Conversion.hexDigitMsb0ToBinary('A'));\n+        assertBinaryEquals(\n+            new boolean[]{true, false, true, false}, Conversion.hexDigitMsb0ToBinary('a'));\n+        assertBinaryEquals(\n+            new boolean[]{true, false, true, true}, Conversion.hexDigitMsb0ToBinary('B'));\n+        assertBinaryEquals(\n+            new boolean[]{true, false, true, true}, Conversion.hexDigitMsb0ToBinary('b'));\n+        assertBinaryEquals(\n+            new boolean[]{true, true, false, false}, Conversion.hexDigitMsb0ToBinary('C'));\n+        assertBinaryEquals(\n+            new boolean[]{true, true, false, false}, Conversion.hexDigitMsb0ToBinary('c'));\n+        assertBinaryEquals(\n+            new boolean[]{true, true, false, true}, Conversion.hexDigitMsb0ToBinary('D'));\n+        assertBinaryEquals(\n+            new boolean[]{true, true, false, true}, Conversion.hexDigitMsb0ToBinary('d'));\n+        assertBinaryEquals(\n+            new boolean[]{true, true, true, false}, Conversion.hexDigitMsb0ToBinary('E'));\n+        assertBinaryEquals(\n+            new boolean[]{true, true, true, false}, Conversion.hexDigitMsb0ToBinary('e'));\n+        assertBinaryEquals(\n+            new boolean[]{true, true, true, true}, Conversion.hexDigitMsb0ToBinary('F'));\n+        assertBinaryEquals(\n+            new boolean[]{true, true, true, true}, Conversion.hexDigitMsb0ToBinary('f'));\n         try {\n-            Conversion.hexDigitMsb0ToBoolArray('G');\n+            Conversion.hexDigitMsb0ToBinary('G');\n             fail(\"Thrown \" + IllegalArgumentException.class.getName() + \" expected\");\n         } catch (final IllegalArgumentException e) {\n             // OK\n     }\n \n     /**\n-     * Tests {@link Conversion#boolArrayToHexDigit(boolean[])}.\n-     */\n-    @Test\n-    public void testBoolArrayToHexDigit() {\n-        assertEquals(\n-            '0', Conversion.boolArrayToHexDigit(new boolean[]{false, false, false, false}));\n-        assertEquals(\n-            '1', Conversion.boolArrayToHexDigit(new boolean[]{true, false, false, false}));\n-        assertEquals(\n-            '2', Conversion.boolArrayToHexDigit(new boolean[]{false, true, false, false}));\n-        assertEquals(\n-            '3', Conversion.boolArrayToHexDigit(new boolean[]{true, true, false, false}));\n-        assertEquals(\n-            '4', Conversion.boolArrayToHexDigit(new boolean[]{false, false, true, false}));\n-        assertEquals(\n-            '5', Conversion.boolArrayToHexDigit(new boolean[]{true, false, true, false}));\n-        assertEquals(\n-            '6', Conversion.boolArrayToHexDigit(new boolean[]{false, true, true, false}));\n-        assertEquals(\n-            '7', Conversion.boolArrayToHexDigit(new boolean[]{true, true, true, false}));\n-        assertEquals(\n-            '8', Conversion.boolArrayToHexDigit(new boolean[]{false, false, false, true}));\n-        assertEquals(\n-            '9', Conversion.boolArrayToHexDigit(new boolean[]{true, false, false, true}));\n-        assertEquals(\n-            'a', Conversion.boolArrayToHexDigit(new boolean[]{false, true, false, true}));\n-        assertEquals(\n-            'b', Conversion.boolArrayToHexDigit(new boolean[]{true, true, false, true}));\n-        assertEquals(\n-            'c', Conversion.boolArrayToHexDigit(new boolean[]{false, false, true, true}));\n-        assertEquals(\n-            'd', Conversion.boolArrayToHexDigit(new boolean[]{true, false, true, true}));\n-        assertEquals(\n-            'e', Conversion.boolArrayToHexDigit(new boolean[]{false, true, true, true}));\n-        assertEquals('f', Conversion.boolArrayToHexDigit(new boolean[]{true, true, true, true}));\n-        assertEquals('1', Conversion.boolArrayToHexDigit(new boolean[]{true}));\n-        assertEquals(\n-            'f', Conversion.boolArrayToHexDigit(new boolean[]{true, true, true, true, true}));\n+     * Tests {@link Conversion#binaryToHexDigit(boolean[])}.\n+     */\n+    @Test\n+    public void testBinaryToHexDigit() {\n+        assertEquals(\n+            '0', Conversion.binaryToHexDigit(new boolean[]{false, false, false, false}));\n+        assertEquals('1', Conversion.binaryToHexDigit(new boolean[]{true, false, false, false}));\n+        assertEquals('2', Conversion.binaryToHexDigit(new boolean[]{false, true, false, false}));\n+        assertEquals('3', Conversion.binaryToHexDigit(new boolean[]{true, true, false, false}));\n+        assertEquals('4', Conversion.binaryToHexDigit(new boolean[]{false, false, true, false}));\n+        assertEquals('5', Conversion.binaryToHexDigit(new boolean[]{true, false, true, false}));\n+        assertEquals('6', Conversion.binaryToHexDigit(new boolean[]{false, true, true, false}));\n+        assertEquals('7', Conversion.binaryToHexDigit(new boolean[]{true, true, true, false}));\n+        assertEquals('8', Conversion.binaryToHexDigit(new boolean[]{false, false, false, true}));\n+        assertEquals('9', Conversion.binaryToHexDigit(new boolean[]{true, false, false, true}));\n+        assertEquals('a', Conversion.binaryToHexDigit(new boolean[]{false, true, false, true}));\n+        assertEquals('b', Conversion.binaryToHexDigit(new boolean[]{true, true, false, true}));\n+        assertEquals('c', Conversion.binaryToHexDigit(new boolean[]{false, false, true, true}));\n+        assertEquals('d', Conversion.binaryToHexDigit(new boolean[]{true, false, true, true}));\n+        assertEquals('e', Conversion.binaryToHexDigit(new boolean[]{false, true, true, true}));\n+        assertEquals('f', Conversion.binaryToHexDigit(new boolean[]{true, true, true, true}));\n+        assertEquals('1', Conversion.binaryToHexDigit(new boolean[]{true}));\n+        assertEquals(\n+            'f', Conversion.binaryToHexDigit(new boolean[]{true, true, true, true, true}));\n         try {\n-            Conversion.boolArrayToHexDigit(new boolean[]{});\n+            Conversion.binaryToHexDigit(new boolean[]{});\n             fail(\"Thrown \" + IllegalArgumentException.class.getName() + \" expected\");\n         } catch (final IllegalArgumentException e) {\n             // OK\n     }\n \n     /**\n-     * Tests {@link Conversion#boolArrayBeMsb0ToHexDigit(boolean[], int)}.\n-     */\n-    @Test\n-    public void testBoolArrayToHexDigit_2args() {\n+     * Tests {@link Conversion#binaryBeMsb0ToHexDigit(boolean[], int)}.\n+     */\n+    @Test\n+    public void testBinaryToHexDigit_2args() {\n         boolean[] shortArray = new boolean[]{false, true, true};\n-        assertEquals('6', Conversion.boolArrayToHexDigit(shortArray, 0));\n-        assertEquals('3', Conversion.boolArrayToHexDigit(shortArray, 1));\n-        assertEquals('1', Conversion.boolArrayToHexDigit(shortArray, 2));\n+        assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0));\n+        assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1));\n+        assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2));\n         boolean[] longArray = new boolean[]{true, false, true, false, false, true, true};\n-        assertEquals('5', Conversion.boolArrayToHexDigit(longArray, 0));\n-        assertEquals('2', Conversion.boolArrayToHexDigit(longArray, 1));\n-        assertEquals('9', Conversion.boolArrayToHexDigit(longArray, 2));\n-        assertEquals('c', Conversion.boolArrayToHexDigit(longArray, 3));\n-        assertEquals('6', Conversion.boolArrayToHexDigit(longArray, 4));\n-        assertEquals('3', Conversion.boolArrayToHexDigit(longArray, 5));\n-        assertEquals('1', Conversion.boolArrayToHexDigit(longArray, 6));\n-    }\n-\n-    /**\n-     * Tests {@link Conversion#boolArrayToHexDigitMsb0_4bits(boolean[])}.\n-     */\n-    @Test\n-    public void testBoolArrayToHexDigitMsb0_bits() {\n+        assertEquals('5', Conversion.binaryToHexDigit(longArray, 0));\n+        assertEquals('2', Conversion.binaryToHexDigit(longArray, 1));\n+        assertEquals('9', Conversion.binaryToHexDigit(longArray, 2));\n+        assertEquals('c', Conversion.binaryToHexDigit(longArray, 3));\n+        assertEquals('6', Conversion.binaryToHexDigit(longArray, 4));\n+        assertEquals('3', Conversion.binaryToHexDigit(longArray, 5));\n+        assertEquals('1', Conversion.binaryToHexDigit(longArray, 6));\n+    }\n+\n+    /**\n+     * Tests {@link Conversion#binaryToHexDigitMsb0_4bits(boolean[])}.\n+     */\n+    @Test\n+    public void testBinaryToHexDigitMsb0_bits() {\n         assertEquals(\n             '0',\n-            Conversion.boolArrayToHexDigitMsb0_4bits(new boolean[]{false, false, false, false}));\n+            Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, false}));\n         assertEquals(\n             '1',\n-            Conversion.boolArrayToHexDigitMsb0_4bits(new boolean[]{false, false, false, true}));\n+            Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, true}));\n         assertEquals(\n             '2',\n-            Conversion.boolArrayToHexDigitMsb0_4bits(new boolean[]{false, false, true, false}));\n-        assertEquals(\n-            '3',\n-            Conversion.boolArrayToHexDigitMsb0_4bits(new boolean[]{false, false, true, true}));\n+            Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, true, false}));\n+        assertEquals(\n+            '3', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, true, true}));\n         assertEquals(\n             '4',\n-            Conversion.boolArrayToHexDigitMsb0_4bits(new boolean[]{false, true, false, false}));\n-        assertEquals(\n-            '5',\n-            Conversion.boolArrayToHexDigitMsb0_4bits(new boolean[]{false, true, false, true}));\n-        assertEquals(\n-            '6',\n-            Conversion.boolArrayToHexDigitMsb0_4bits(new boolean[]{false, true, true, false}));\n-        assertEquals(\n-            '7',\n-            Conversion.boolArrayToHexDigitMsb0_4bits(new boolean[]{false, true, true, true}));\n+            Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, false, false}));\n+        assertEquals(\n+            '5', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, false, true}));\n+        assertEquals(\n+            '6', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, true, false}));\n+        assertEquals(\n+            '7', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, true, true}));\n         assertEquals(\n             '8',\n-            Conversion.boolArrayToHexDigitMsb0_4bits(new boolean[]{true, false, false, false}));\n-        assertEquals(\n-            '9',\n-            Conversion.boolArrayToHexDigitMsb0_4bits(new boolean[]{true, false, false, true}));\n-        assertEquals(\n-            'a',\n-            Conversion.boolArrayToHexDigitMsb0_4bits(new boolean[]{true, false, true, false}));\n-        assertEquals(\n-            'b',\n-            Conversion.boolArrayToHexDigitMsb0_4bits(new boolean[]{true, false, true, true}));\n-        assertEquals(\n-            'c',\n-            Conversion.boolArrayToHexDigitMsb0_4bits(new boolean[]{true, true, false, false}));\n-        assertEquals(\n-            'd',\n-            Conversion.boolArrayToHexDigitMsb0_4bits(new boolean[]{true, true, false, true}));\n-        assertEquals(\n-            'e',\n-            Conversion.boolArrayToHexDigitMsb0_4bits(new boolean[]{true, true, true, false}));\n-        assertEquals(\n-            'f',\n-            Conversion.boolArrayToHexDigitMsb0_4bits(new boolean[]{true, true, true, true}));\n+            Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, false, false, false}));\n+        assertEquals(\n+            '9', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, false, false, true}));\n+        assertEquals(\n+            'a', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, false, true, false}));\n+        assertEquals(\n+            'b', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, false, true, true}));\n+        assertEquals(\n+            'c', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, true, false, false}));\n+        assertEquals(\n+            'd', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, true, false, true}));\n+        assertEquals(\n+            'e', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, true, true, false}));\n+        assertEquals(\n+            'f', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, true, true, true}));\n         try {\n-            Conversion.boolArrayToHexDigitMsb0_4bits(new boolean[]{});\n+            Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{});\n             fail(\"Thrown \" + IllegalArgumentException.class.getName() + \" expected\");\n         } catch (final IllegalArgumentException e) {\n             // OK\n     }\n \n     /**\n-     * Tests {@link Conversion#boolArrayToHexDigitMsb0_4bits(boolean[], int)}.\n-     */\n-    @Test\n-    public void testBoolArrayToHexDigitMsb0_4bits_2args() {\n+     * Tests {@link Conversion#binaryToHexDigitMsb0_4bits(boolean[], int)}.\n+     */\n+    @Test\n+    public void testBinaryToHexDigitMsb0_4bits_2args() {\n         // boolean[] shortArray = new boolean[]{true,true,false};\n-        // assertEquals('6', Conversion.BoolArrayToHexDigitMsb0(shortArray,0));\n-        // assertEquals('3', Conversion.BoolArrayToHexDigitMsb0(shortArray,1));\n-        // assertEquals('1', Conversion.BoolArrayToHexDigitMsb0(shortArray,2));\n+        // assertEquals('6', Conversion.BinaryToHexDigitMsb0(shortArray,0));\n+        // assertEquals('3', Conversion.BinaryToHexDigitMsb0(shortArray,1));\n+        // assertEquals('1', Conversion.BinaryToHexDigitMsb0(shortArray,2));\n         boolean[] shortArray = new boolean[]{true, true, false, true};\n-        assertEquals('d', Conversion.boolArrayToHexDigitMsb0_4bits(shortArray, 0));\n+        assertEquals('d', Conversion.binaryToHexDigitMsb0_4bits(shortArray, 0));\n         boolean[] longArray = new boolean[]{true, false, true, false, false, true, true};\n-        assertEquals('a', Conversion.boolArrayToHexDigitMsb0_4bits(longArray, 0));\n-        assertEquals('4', Conversion.boolArrayToHexDigitMsb0_4bits(longArray, 1));\n-        assertEquals('9', Conversion.boolArrayToHexDigitMsb0_4bits(longArray, 2));\n-        assertEquals('3', Conversion.boolArrayToHexDigitMsb0_4bits(longArray, 3));\n-        // assertEquals('6', Conversion.BoolArrayToHexDigitMsb0(longArray,4));\n-        // assertEquals('3', Conversion.BoolArrayToHexDigitMsb0(longArray,5));\n-        // assertEquals('1', Conversion.BoolArrayToHexDigitMsb0(longArray,6));\n+        assertEquals('a', Conversion.binaryToHexDigitMsb0_4bits(longArray, 0));\n+        assertEquals('4', Conversion.binaryToHexDigitMsb0_4bits(longArray, 1));\n+        assertEquals('9', Conversion.binaryToHexDigitMsb0_4bits(longArray, 2));\n+        assertEquals('3', Conversion.binaryToHexDigitMsb0_4bits(longArray, 3));\n+        // assertEquals('6', Conversion.BinaryToHexDigitMsb0(longArray,4));\n+        // assertEquals('3', Conversion.BinaryToHexDigitMsb0(longArray,5));\n+        // assertEquals('1', Conversion.BinaryToHexDigitMsb0(longArray,6));\n         boolean[] maxLengthArray = new boolean[]{\n             true, false, true, false, false, true, true, true};\n-        assertEquals('a', Conversion.boolArrayToHexDigitMsb0_4bits(maxLengthArray, 0));\n-        assertEquals('4', Conversion.boolArrayToHexDigitMsb0_4bits(maxLengthArray, 1));\n-        assertEquals('9', Conversion.boolArrayToHexDigitMsb0_4bits(maxLengthArray, 2));\n-        assertEquals('3', Conversion.boolArrayToHexDigitMsb0_4bits(maxLengthArray, 3));\n-        assertEquals('7', Conversion.boolArrayToHexDigitMsb0_4bits(maxLengthArray, 4));\n-        // assertEquals('7', Conversion.BoolArrayToHexDigitMsb0(longArray,5));\n-        // assertEquals('3', Conversion.BoolArrayToHexDigitMsb0(longArray,6));\n-        // assertEquals('1', Conversion.BoolArrayToHexDigitMsb0(longArray,7));\n+        assertEquals('a', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 0));\n+        assertEquals('4', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 1));\n+        assertEquals('9', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 2));\n+        assertEquals('3', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 3));\n+        assertEquals('7', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 4));\n+        // assertEquals('7', Conversion.BinaryToHexDigitMsb0(longArray,5));\n+        // assertEquals('3', Conversion.BinaryToHexDigitMsb0(longArray,6));\n+        // assertEquals('1', Conversion.BinaryToHexDigitMsb0(longArray,7));\n         boolean[] javaDocCheck = new boolean[]{\n             true, false, false, true, true, false, true, false};\n-        assertEquals('d', Conversion.boolArrayToHexDigitMsb0_4bits(javaDocCheck, 3));\n-\n-    }\n-\n-    /**\n-     * Tests {@link Conversion#boolArrayToHexDigit(boolean[])}.\n-     */\n-    @Test\n-    public void testBoolArrayBeMsb0ToHexDigit() {\n-        assertEquals(\n-            '0',\n-            Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{false, false, false, false}));\n-        assertEquals(\n-            '1', Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{false, false, false, true}));\n-        assertEquals(\n-            '2', Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{false, false, true, false}));\n-        assertEquals(\n-            '3', Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{false, false, true, true}));\n-        assertEquals(\n-            '4', Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{false, true, false, false}));\n-        assertEquals(\n-            '5', Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{false, true, false, true}));\n-        assertEquals(\n-            '6', Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{false, true, true, false}));\n-        assertEquals(\n-            '7', Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{false, true, true, true}));\n-        assertEquals(\n-            '8', Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{true, false, false, false}));\n-        assertEquals(\n-            '9', Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{true, false, false, true}));\n-        assertEquals(\n-            'a', Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{true, false, true, false}));\n-        assertEquals(\n-            'b', Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{true, false, true, true}));\n-        assertEquals(\n-            'c', Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{true, true, false, false}));\n-        assertEquals(\n-            'd', Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{true, true, false, true}));\n-        assertEquals(\n-            'e', Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{true, true, true, false}));\n-        assertEquals(\n-            'f', Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{true, true, true, true}));\n+        assertEquals('d', Conversion.binaryToHexDigitMsb0_4bits(javaDocCheck, 3));\n+\n+    }\n+\n+    /**\n+     * Tests {@link Conversion#binaryToHexDigit(boolean[])}.\n+     */\n+    @Test\n+    public void testBinaryBeMsb0ToHexDigit() {\n+        assertEquals(\n+            '0', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, false, false, false}));\n+        assertEquals(\n+            '1', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, false, false, true}));\n+        assertEquals(\n+            '2', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, false, true, false}));\n+        assertEquals(\n+            '3', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, false, true, true}));\n+        assertEquals(\n+            '4', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, true, false, false}));\n+        assertEquals(\n+            '5', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, true, false, true}));\n+        assertEquals(\n+            '6', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, true, true, false}));\n+        assertEquals(\n+            '7', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, true, true, true}));\n+        assertEquals(\n+            '8', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, false, false, false}));\n+        assertEquals(\n+            '9', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, false, false, true}));\n+        assertEquals(\n+            'a', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, false, true, false}));\n+        assertEquals(\n+            'b', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, false, true, true}));\n+        assertEquals(\n+            'c', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, true, false, false}));\n+        assertEquals(\n+            'd', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, true, false, true}));\n+        assertEquals(\n+            'e', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, true, true, false}));\n+        assertEquals(\n+            'f', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, true, true, true}));\n         assertEquals(\n             '4',\n-            Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{\n+            Conversion.binaryBeMsb0ToHexDigit(new boolean[]{\n                 true, false, false, false, false, false, false, false, false, false, false,\n                 false, false, true, false, false}));\n         try {\n-            Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{});\n+            Conversion.binaryBeMsb0ToHexDigit(new boolean[]{});\n             fail(\"Thrown \" + IllegalArgumentException.class.getName() + \" expected\");\n         } catch (final IllegalArgumentException e) {\n             // OK\n     }\n \n     /**\n-     * Tests {@link Conversion#boolArrayToHexDigit(boolean[], int)}.\n-     */\n-    @Test\n-    public void testBoolArrayBeMsb0ToHexDigit_2args() {\n+     * Tests {@link Conversion#binaryToHexDigit(boolean[], int)}.\n+     */\n+    @Test\n+    public void testBinaryBeMsb0ToHexDigit_2args() {\n         assertEquals(\n             '5',\n-            Conversion.boolArrayBeMsb0ToHexDigit(new boolean[]{\n+            Conversion.binaryBeMsb0ToHexDigit(new boolean[]{\n                 true, false, false, false, false, false, false, false, false, false, false,\n                 true, false, true, false, false}, 2));\n \n         boolean[] shortArray = new boolean[]{true, true, false};\n-        assertEquals('6', Conversion.boolArrayBeMsb0ToHexDigit(shortArray, 0));\n-        assertEquals('3', Conversion.boolArrayBeMsb0ToHexDigit(shortArray, 1));\n-        assertEquals('1', Conversion.boolArrayBeMsb0ToHexDigit(shortArray, 2));\n+        assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(shortArray, 0));\n+        assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray, 1));\n+        assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray, 2));\n         boolean[] shortArray2 = new boolean[]{true, true, true, false, false, true, false, true};\n-        assertEquals('5', Conversion.boolArrayBeMsb0ToHexDigit(shortArray2, 0));\n-        assertEquals('2', Conversion.boolArrayBeMsb0ToHexDigit(shortArray2, 1));\n-        assertEquals('9', Conversion.boolArrayBeMsb0ToHexDigit(shortArray2, 2));\n-        assertEquals('c', Conversion.boolArrayBeMsb0ToHexDigit(shortArray2, 3));\n-        assertEquals('e', Conversion.boolArrayBeMsb0ToHexDigit(shortArray2, 4));\n-        assertEquals('7', Conversion.boolArrayBeMsb0ToHexDigit(shortArray2, 5));\n-        assertEquals('3', Conversion.boolArrayBeMsb0ToHexDigit(shortArray2, 6));\n-        assertEquals('1', Conversion.boolArrayBeMsb0ToHexDigit(shortArray2, 7));\n+        assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 0));\n+        assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 1));\n+        assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 2));\n+        assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 3));\n+        assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 4));\n+        assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 5));\n+        assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 6));\n+        assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 7));\n         boolean[] multiBytesArray = new boolean[]{\n             true, true, false, false, true, false, true, false, true, true, true, false, false,\n             true, false, true};\n-        assertEquals('5', Conversion.boolArrayBeMsb0ToHexDigit(multiBytesArray, 0));\n-        assertEquals('2', Conversion.boolArrayBeMsb0ToHexDigit(multiBytesArray, 1));\n-        assertEquals('9', Conversion.boolArrayBeMsb0ToHexDigit(multiBytesArray, 2));\n-        assertEquals('c', Conversion.boolArrayBeMsb0ToHexDigit(multiBytesArray, 3));\n-        assertEquals('e', Conversion.boolArrayBeMsb0ToHexDigit(multiBytesArray, 4));\n-        assertEquals('7', Conversion.boolArrayBeMsb0ToHexDigit(multiBytesArray, 5));\n-        assertEquals('b', Conversion.boolArrayBeMsb0ToHexDigit(multiBytesArray, 6));\n-        assertEquals('5', Conversion.boolArrayBeMsb0ToHexDigit(multiBytesArray, 7));\n-\n-        assertEquals('a', Conversion.boolArrayBeMsb0ToHexDigit(multiBytesArray, 8));\n-        assertEquals('5', Conversion.boolArrayBeMsb0ToHexDigit(multiBytesArray, 9));\n-        assertEquals('2', Conversion.boolArrayBeMsb0ToHexDigit(multiBytesArray, 10));\n-        assertEquals('9', Conversion.boolArrayBeMsb0ToHexDigit(multiBytesArray, 11));\n-        assertEquals('c', Conversion.boolArrayBeMsb0ToHexDigit(multiBytesArray, 12));\n-        assertEquals('6', Conversion.boolArrayBeMsb0ToHexDigit(multiBytesArray, 13));\n-        assertEquals('3', Conversion.boolArrayBeMsb0ToHexDigit(multiBytesArray, 14));\n-        assertEquals('1', Conversion.boolArrayBeMsb0ToHexDigit(multiBytesArray, 15));\n+        assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 0));\n+        assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 1));\n+        assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 2));\n+        assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 3));\n+        assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 4));\n+        assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 5));\n+        assertEquals('b', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 6));\n+        assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 7));\n+\n+        assertEquals('a', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 8));\n+        assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 9));\n+        assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 10));\n+        assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 11));\n+        assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 12));\n+        assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 13));\n+        assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 14));\n+        assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 15));\n \n     }\n \n     }\n \n     // org.junit.Assert(boolean[], boolean[]) does not exist in JUnit 4.2\n-    static void assertBoolArrayEquals(boolean[] expected, boolean[] actual) {\n+    static void assertBinaryEquals(boolean[] expected, boolean[] actual) {\n         assertEquals(expected.length, actual.length);\n         for (int i = 0; i < expected.length; i++ ) {\n             try {\n     }\n \n     /**\n-     * Tests {@link Conversion#boolArrayToLong(boolean[], int, long, int, int)}.\n-     */\n-    @Test\n-    public void testBoolArrayToLong() {\n+     * Tests {@link Conversion#binaryToLong(boolean[], int, long, int, int)}.\n+     */\n+    @Test\n+    public void testBinaryToLong() {\n         boolean[] src = new boolean[]{\n             false, false, true, true, true, false, true, true, true, true, true, true, true,\n             false, false, false, true, true, true, true, false, false, false, false, false,\n             true, true, true, true, false, false, false, false, true, false, false, true, true,\n             false, false, false, false, true, false, true, false, true, false, false, true,\n             true, false, true, true, true, false, false, false, false, true};\n-        // conversion of \"CDF1F0C10F12345678\" by HexToBoolArray\n-        assertEquals(0x0000000000000000L, Conversion.boolArrayToLong(src, 0, 0L, 0, 0));\n-        assertEquals(0x000000000000000CL, Conversion.boolArrayToLong(src, 0, 0L, 0, 1 * 4));\n-        assertEquals(0x000000001C0F1FDCL, Conversion.boolArrayToLong(src, 0, 0L, 0, 8 * 4));\n-        assertEquals(0x0000000001C0F1FDL, Conversion.boolArrayToLong(src, 1 * 4, 0L, 0, 8 * 4));\n-        assertEquals(\n-            0x123456798ABCDEF0L, Conversion.boolArrayToLong(src, 0, 0x123456798ABCDEF0L, 0, 0));\n+        // conversion of \"CDF1F0C10F12345678\" by HexToBinary\n+        assertEquals(0x0000000000000000L, Conversion.binaryToLong(src, 0, 0L, 0, 0));\n+        assertEquals(0x000000000000000CL, Conversion.binaryToLong(src, 0, 0L, 0, 1 * 4));\n+        assertEquals(0x000000001C0F1FDCL, Conversion.binaryToLong(src, 0, 0L, 0, 8 * 4));\n+        assertEquals(0x0000000001C0F1FDL, Conversion.binaryToLong(src, 1 * 4, 0L, 0, 8 * 4));\n+        assertEquals(\n+            0x123456798ABCDEF0L, Conversion.binaryToLong(src, 0, 0x123456798ABCDEF0L, 0, 0));\n         assertEquals(\n             0x1234567876BCDEF0L,\n-            Conversion.boolArrayToLong(src, 15 * 4, 0x123456798ABCDEF0L, 24, 3 * 4));\n-    }\n-\n-    /**\n-     * Tests {@link Conversion#boolArrayToInt(boolean[], int, int, int, int)}.\n-     */\n-    @Test\n-    public void testBoolArrayToInt() {\n+            Conversion.binaryToLong(src, 15 * 4, 0x123456798ABCDEF0L, 24, 3 * 4));\n+    }\n+\n+    /**\n+     * Tests {@link Conversion#binaryToInt(boolean[], int, int, int, int)}.\n+     */\n+    @Test\n+    public void testBinaryToInt() {\n         boolean[] src = new boolean[]{\n             false, false, true, true, true, false, true, true, true, true, true, true, true,\n             false, false, false, true, true, true, true, false, false, false, false, false,\n             true, true, true, true, false, false, false, false, true, false, false, true, true,\n             false, false, false, false, true, false, true, false, true, false, false, true,\n             true, false, true, true, true, false, false, false, false, true};\n-        // conversion of \"CDF1F0C10F12345678\" by HexToBoolArray\n-        assertEquals(0x00000000, Conversion.boolArrayToInt(src, 0 * 4, 0, 0, 0 * 4));\n-        assertEquals(0x0000000C, Conversion.boolArrayToInt(src, 0 * 4, 0, 0, 1 * 4));\n-        assertEquals(0x1C0F1FDC, Conversion.boolArrayToInt(src, 0 * 4, 0, 0, 8 * 4));\n-        assertEquals(0x01C0F1FD, Conversion.boolArrayToInt(src, 1 * 4, 0, 0, 8 * 4));\n-        assertEquals(0x12345679, Conversion.boolArrayToInt(src, 0 * 4, 0x12345679, 0, 0 * 4));\n-        assertEquals(0x87645679, Conversion.boolArrayToInt(src, 15 * 4, 0x12345679, 20, 3 * 4));\n-    }\n-\n-    /**\n-     * Tests {@link Conversion#boolArrayToShort(boolean[], int, short, int, int)}.\n-     */\n-    @Test\n-    public void testBoolArrayToShort() {\n+        // conversion of \"CDF1F0C10F12345678\" by HexToBinary\n+        assertEquals(0x00000000, Conversion.binaryToInt(src, 0 * 4, 0, 0, 0 * 4));\n+        assertEquals(0x0000000C, Conversion.binaryToInt(src, 0 * 4, 0, 0, 1 * 4));\n+        assertEquals(0x1C0F1FDC, Conversion.binaryToInt(src, 0 * 4, 0, 0, 8 * 4));\n+        assertEquals(0x01C0F1FD, Conversion.binaryToInt(src, 1 * 4, 0, 0, 8 * 4));\n+        assertEquals(0x12345679, Conversion.binaryToInt(src, 0 * 4, 0x12345679, 0, 0 * 4));\n+        assertEquals(0x87645679, Conversion.binaryToInt(src, 15 * 4, 0x12345679, 20, 3 * 4));\n+    }\n+\n+    /**\n+     * Tests {@link Conversion#binaryToShort(boolean[], int, short, int, int)}.\n+     */\n+    @Test\n+    public void testBinaryToShort() {\n         boolean[] src = new boolean[]{\n             false, false, true, true, true, false, true, true, true, true, true, true, true,\n             false, false, false, true, true, true, true, false, false, false, false, false,\n             true, true, true, true, false, false, false, false, true, false, false, true, true,\n             false, false, false, false, true, false, true, false, true, false, false, true,\n             true, false, true, true, true, false, false, false, false, true};\n-        // conversion of \"CDF1F0C10F12345678\" by HexToBoolArray\n-        assertEquals((short)0x0000, Conversion.boolArrayToShort(src, 0 * 4, (short)0, 0, 0 * 4));\n-        assertEquals((short)0x000C, Conversion.boolArrayToShort(src, 0 * 4, (short)0, 0, 1 * 4));\n-        assertEquals((short)0x1FDC, Conversion.boolArrayToShort(src, 0 * 4, (short)0, 0, 4 * 4));\n-        assertEquals((short)0xF1FD, Conversion.boolArrayToShort(src, 1 * 4, (short)0, 0, 4 * 4));\n-        assertEquals(\n-            (short)0x1234, Conversion.boolArrayToShort(src, 0 * 4, (short)0x1234, 0, 0 * 4));\n-        assertEquals(\n-            (short)0x8764, Conversion.boolArrayToShort(src, 15 * 4, (short)0x1234, 4, 3 * 4));\n-    }\n-\n-    /**\n-     * Tests {@link Conversion#boolArrayToByte(boolean[], int, byte, int, int)}.\n-     */\n-    @Test\n-    public void testBoolArrayToByte() {\n+        // conversion of \"CDF1F0C10F12345678\" by HexToBinary\n+        assertEquals((short)0x0000, Conversion.binaryToShort(src, 0 * 4, (short)0, 0, 0 * 4));\n+        assertEquals((short)0x000C, Conversion.binaryToShort(src, 0 * 4, (short)0, 0, 1 * 4));\n+        assertEquals((short)0x1FDC, Conversion.binaryToShort(src, 0 * 4, (short)0, 0, 4 * 4));\n+        assertEquals((short)0xF1FD, Conversion.binaryToShort(src, 1 * 4, (short)0, 0, 4 * 4));\n+        assertEquals(\n+            (short)0x1234, Conversion.binaryToShort(src, 0 * 4, (short)0x1234, 0, 0 * 4));\n+        assertEquals(\n+            (short)0x8764, Conversion.binaryToShort(src, 15 * 4, (short)0x1234, 4, 3 * 4));\n+    }\n+\n+    /**\n+     * Tests {@link Conversion#binaryToByte(boolean[], int, byte, int, int)}.\n+     */\n+    @Test\n+    public void testBinaryToByte() {\n         boolean[] src = new boolean[]{\n             false, false, true, true, true, false, true, true, true, true, true, true, true,\n             false, false, false, true, true, true, true, false, false, false, false, false,\n             true, true, true, true, false, false, false, false, true, false, false, true, true,\n             false, false, false, false, true, false, true, false, true, false, false, true,\n             true, false, true, true, true, false, false, false, false, true};\n-        // conversion of \"CDF1F0C10F12345678\" by HexToBoolArray\n-        assertEquals((byte)0x00, Conversion.boolArrayToByte(src, 0 * 4, (byte)0, 0, 0 * 4));\n-        assertEquals((byte)0x0C, Conversion.boolArrayToByte(src, 0 * 4, (byte)0, 0, 1 * 4));\n-        assertEquals((byte)0xDC, Conversion.boolArrayToByte(src, 0 * 4, (byte)0, 0, 2 * 4));\n-        assertEquals((byte)0xFD, Conversion.boolArrayToByte(src, 1 * 4, (byte)0, 0, 2 * 4));\n-        assertEquals((byte)0x34, Conversion.boolArrayToByte(src, 0 * 4, (byte)0x34, 0, 0 * 4));\n-        assertEquals((byte)0x84, Conversion.boolArrayToByte(src, 17 * 4, (byte)0x34, 4, 1 * 4));\n+        // conversion of \"CDF1F0C10F12345678\" by HexToBinary\n+        assertEquals((byte)0x00, Conversion.binaryToByte(src, 0 * 4, (byte)0, 0, 0 * 4));\n+        assertEquals((byte)0x0C, Conversion.binaryToByte(src, 0 * 4, (byte)0, 0, 1 * 4));\n+        assertEquals((byte)0xDC, Conversion.binaryToByte(src, 0 * 4, (byte)0, 0, 2 * 4));\n+        assertEquals((byte)0xFD, Conversion.binaryToByte(src, 1 * 4, (byte)0, 0, 2 * 4));\n+        assertEquals((byte)0x34, Conversion.binaryToByte(src, 0 * 4, (byte)0x34, 0, 0 * 4));\n+        assertEquals((byte)0x84, Conversion.binaryToByte(src, 17 * 4, (byte)0x34, 4, 1 * 4));\n     }\n \n     /**\n     }\n \n     /**\n-     * Tests {@link Conversion#longToBoolArray(long, int, boolean[], int, int)}.\n-     */\n-    @Test\n-    public void testLongToBoolArray() {\n-        assertBoolArrayEquals(\n+     * Tests {@link Conversion#longToBinary(long, int, boolean[], int, int)}.\n+     */\n+    @Test\n+    public void testLongToBinary() {\n+        assertBinaryEquals(\n             new boolean[]{},\n-            Conversion.longToBoolArray(0x0000000000000000L, 0, new boolean[]{}, 0, 0));\n-        assertBoolArrayEquals(\n+            Conversion.longToBinary(0x0000000000000000L, 0, new boolean[]{}, 0, 0));\n+        assertBinaryEquals(\n             new boolean[]{},\n-            Conversion.longToBoolArray(0x0000000000000000L, 100, new boolean[]{}, 0, 0));\n-        assertBoolArrayEquals(\n+            Conversion.longToBinary(0x0000000000000000L, 100, new boolean[]{}, 0, 0));\n+        assertBinaryEquals(\n             new boolean[]{},\n-            Conversion.longToBoolArray(0x0000000000000000L, 0, new boolean[]{}, 100, 0));\n-        assertBoolArrayEquals(\n+            Conversion.longToBinary(0x0000000000000000L, 0, new boolean[]{}, 100, 0));\n+        assertBinaryEquals(\n             new boolean[69],\n-            Conversion.longToBoolArray(0x1234567890ABCDEFL, 0, new boolean[69], 0, 0));\n-\n-        assertBoolArrayEquals(\n+            Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 0));\n+\n+        assertBinaryEquals(\n             new boolean[]{\n                 true, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false},\n-            Conversion.longToBoolArray(0x1234567890ABCDEFL, 0, new boolean[69], 0, 1));\n-        assertBoolArrayEquals(\n+            Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 1));\n+        assertBinaryEquals(\n             new boolean[]{\n                 true, true, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false},\n-            Conversion.longToBoolArray(0x1234567890ABCDEFL, 0, new boolean[69], 0, 2));\n-        assertBoolArrayEquals(\n+            Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 2));\n+        assertBinaryEquals(\n             new boolean[]{\n                 true, true, true, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false},\n-            Conversion.longToBoolArray(0x1234567890ABCDEFL, 0, new boolean[69], 0, 3));\n-        assertBoolArrayEquals(\n+            Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 3));\n+        assertBinaryEquals(\n             new boolean[]{\n                 true, true, true, true, false, true, true, true, true, false, true, true,\n                 false, false, true, true, true, true, false, true, false, true, false, true,\n                 true, true, true, true, false, false, true, true, false, true, false, true,\n                 false, false, false, true, false, true, true, false, false, false, true, false,\n                 false, true, false, false, false, false, false, false, false, false},\n-            Conversion.longToBoolArray(0x1234567890ABCDEFL, 0, new boolean[69], 0, 63));\n-        assertBoolArrayEquals(\n+            Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 63));\n+        assertBinaryEquals(\n             new boolean[]{\n                 true, true, true, true, false, true, true, true, true, false, true, true,\n                 false, false, true, true, true, true, false, true, false, true, false, true,\n                 true, true, true, true, false, false, true, true, false, true, false, true,\n                 false, false, false, true, false, true, true, false, false, false, true, false,\n                 false, true, false, false, false, false, false, false, false, false},\n-            Conversion.longToBoolArray(0x1234567890ABCDEFL, 0, new boolean[69], 0, 64));\n-        assertBoolArrayEquals(\n+            Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 64));\n+        assertBinaryEquals(\n             new boolean[]{\n                 false, false, true, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false},\n-            Conversion.longToBoolArray(0x1234567890ABCDEFL, 0, new boolean[69], 2, 1));\n-        assertBoolArrayEquals(\n+            Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 2, 1));\n+        assertBinaryEquals(\n             new boolean[]{\n                 false, false, true, true, true, true, false, true, true, true, true, false,\n                 true, true, false, false, true, true, true, true, false, true, false, true,\n                 false, false, true, true, true, true, false, false, true, true, false, true,\n                 false, true, false, false, false, true, false, true, true, false, false, false,\n                 true, false, false, true, false, false, false, false, false, false},\n-            Conversion.longToBoolArray(0x1234567890ABCDEFL, 0, new boolean[69], 2, 64));\n-        assertBoolArrayEquals(\n+            Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 2, 64));\n+        assertBinaryEquals(\n             new boolean[]{\n                 true, true, true, false, true, true, true, true, false, true, true, false,\n                 false, true, true, true, true, false, true, false, true, false, true, false,\n                 true, true, false, false, true, true, false, true, false, true, false, false,\n                 false, true, false, true, true, false, false, false, true, false, false, true,\n                 false, false, false, false, false, false, false, false, false},\n-            Conversion.longToBoolArray(0x1234567890ABCDEFL, 1, new boolean[69], 0, 63));\n-        assertBoolArrayEquals(\n+            Conversion.longToBinary(0x1234567890ABCDEFL, 1, new boolean[69], 0, 63));\n+        assertBinaryEquals(\n             new boolean[]{\n                 true, true, false, true, true, true, true, false, true, true, false, false,\n                 true, true, true, true, false, true, false, true, false, true, false, false,\n                 true, false, false, true, true, false, true, false, true, false, false, false,\n                 true, false, true, true, false, false, false, true, false, false, true, false,\n                 false, false, false, false, false, false, false, false, false},\n-            Conversion.longToBoolArray(0x1234567890ABCDEFL, 2, new boolean[69], 0, 62));\n-\n-        // assertBoolArrayEquals(new boolean[]{false,false,false, true, true, false, true, true,\n+            Conversion.longToBinary(0x1234567890ABCDEFL, 2, new boolean[69], 0, 62));\n+\n+        // assertBinaryEquals(new boolean[]{false,false,false, true, true, false, true, true,\n         // true, true, false, true, true, false, false, true, true, true, true, false, true,\n         // false, true, false, true, false, false, false, false, true, false, false, true,\n         // false, false, false, true, true, true, true, false, false, true, true, false, true,\n         // false, true, false, false, false, true, false, true, true, false, false, false, true,\n         // false, false, true, false, false, false\n-        // ,false,false,false,false},Conversion.longToBoolArray(0x1234567890ABCDEFL, 2,new\n+        // ,false,false,false,false},Conversion.longToBinary(0x1234567890ABCDEFL, 2,new\n         // boolean[69], 3, 63));//rejected by assertion\n-        assertBoolArrayEquals(\n+        assertBinaryEquals(\n             new boolean[]{\n                 false, false, false, true, true, false, true, true, true, true, false, true,\n                 true, false, false, true, true, true, true, false, true, false, true, false,\n                 false, true, true, true, true, false, false, true, true, false, true, false,\n                 true, false, false, false, true, false, true, true, false, false, false, true,\n                 false, false, true, false, false, false, false, false, false, false},\n-            Conversion.longToBoolArray(0x1234567890ABCDEFL, 2, new boolean[69], 3, 62));\n-    }\n-\n-    /**\n-     * Tests {@link Conversion#intToBoolArray(int, int, boolean[], int, int)}.\n-     */\n-    @Test\n-    public void testIntToBoolArray() {\n-        assertBoolArrayEquals(\n-            new boolean[]{}, Conversion.intToBoolArray(0x00000000, 0, new boolean[]{}, 0, 0));\n-        assertBoolArrayEquals(\n-            new boolean[]{}, Conversion.intToBoolArray(0x00000000, 100, new boolean[]{}, 0, 0));\n-        assertBoolArrayEquals(\n-            new boolean[]{}, Conversion.intToBoolArray(0x00000000, 0, new boolean[]{}, 100, 0));\n-        assertBoolArrayEquals(\n-            new boolean[69], Conversion.intToBoolArray(0x90ABCDEF, 0, new boolean[69], 0, 0));\n-        assertBoolArrayEquals(new boolean[]{\n+            Conversion.longToBinary(0x1234567890ABCDEFL, 2, new boolean[69], 3, 62));\n+    }\n+\n+    /**\n+     * Tests {@link Conversion#intToBinary(int, int, boolean[], int, int)}.\n+     */\n+    @Test\n+    public void testIntToBinary() {\n+        assertBinaryEquals(\n+            new boolean[]{}, Conversion.intToBinary(0x00000000, 0, new boolean[]{}, 0, 0));\n+        assertBinaryEquals(\n+            new boolean[]{}, Conversion.intToBinary(0x00000000, 100, new boolean[]{}, 0, 0));\n+        assertBinaryEquals(\n+            new boolean[]{}, Conversion.intToBinary(0x00000000, 0, new boolean[]{}, 100, 0));\n+        assertBinaryEquals(\n+            new boolean[69], Conversion.intToBinary(0x90ABCDEF, 0, new boolean[69], 0, 0));\n+        assertBinaryEquals(new boolean[]{\n             true, false, false, false, false, false, false, false, false, false, false, false,\n             false, false, false, false, false, false, false, false, false, false, false, false,\n             false, false, false, false, false, false, false, false, false, false, false, false,\n-            false}, Conversion.intToBoolArray(0x90ABCDEF, 0, new boolean[37], 0, 1));\n-        assertBoolArrayEquals(new boolean[]{\n+            false}, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 1));\n+        assertBinaryEquals(new boolean[]{\n             true, true, false, false, false, false, false, false, false, false, false, false,\n             false, false, false, false, false, false, false, false, false, false, false, false,\n             false, false, false, false, false, false, false, false, false, false, false, false,\n-            false}, Conversion.intToBoolArray(0x90ABCDEF, 0, new boolean[37], 0, 2));\n-        assertBoolArrayEquals(new boolean[]{\n+            false}, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 2));\n+        assertBinaryEquals(new boolean[]{\n             true, true, true, false, false, false, false, false, false, false, false, false,\n             false, false, false, false, false, false, false, false, false, false, false, false,\n             false, false, false, false, false, false, false, false, false, false, false, false,\n-            false}, Conversion.intToBoolArray(0x90ABCDEF, 0, new boolean[37], 0, 3));\n-        assertBoolArrayEquals(\n+            false}, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 3));\n+        assertBinaryEquals(\n             new boolean[]{\n                 true, true, true, true, false, true, true, true, true, false, true, true,\n                 false, false, true, true, true, true, false, true, false, true, false, true,\n                 false, false, false, false, true, false, false, false, false, false, false,\n-                false, false}, Conversion.intToBoolArray(0x90ABCDEF, 0, new boolean[37], 0, 31));\n-        assertBoolArrayEquals(\n+                false, false}, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 31));\n+        assertBinaryEquals(\n             new boolean[]{\n                 true, true, true, true, false, true, true, true, true, false, true, true,\n                 false, false, true, true, true, true, false, true, false, true, false, true,\n                 false, false, false, false, true, false, false, true, false, false, false,\n-                false, false}, Conversion.intToBoolArray(0x90ABCDEF, 0, new boolean[37], 0, 32));\n-        assertBoolArrayEquals(new boolean[]{\n+                false, false}, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 32));\n+        assertBinaryEquals(new boolean[]{\n             false, false, true, false, false, false, false, false, false, false, false, false,\n             false, false, false, false, false, false, false, false, false, false, false, false,\n             false, false, false, false, false, false, false, false, false, false, false, false,\n-            false}, Conversion.intToBoolArray(0x90ABCDEF, 0, new boolean[37], 2, 1));\n-        assertBoolArrayEquals(\n+            false}, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 2, 1));\n+        assertBinaryEquals(\n             new boolean[]{\n                 false, false, true, true, true, true, false, true, true, true, true, false,\n                 true, true, false, false, true, true, true, true, false, true, false, true,\n                 false, true, false, false, false, false, true, false, false, true, false,\n-                false, false}, Conversion.intToBoolArray(0x90ABCDEF, 0, new boolean[37], 2, 32));\n-        assertBoolArrayEquals(\n+                false, false}, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 2, 32));\n+        assertBinaryEquals(\n             new boolean[]{\n                 true, true, true, false, true, true, true, true, false, true, true, false,\n                 false, true, true, true, true, false, true, false, true, false, true, false,\n                 false, false, false, true, false, false, true, false, false, false, false,\n-                false, false}, Conversion.intToBoolArray(0x90ABCDEF, 1, new boolean[37], 0, 31));\n-        assertBoolArrayEquals(\n+                false, false}, Conversion.intToBinary(0x90ABCDEF, 1, new boolean[37], 0, 31));\n+        assertBinaryEquals(\n             new boolean[]{\n                 true, true, false, true, true, true, true, false, true, true, false, false,\n                 true, true, true, true, false, true, false, true, false, true, false, false,\n                 false, false, true, false, false, true, false, false, false, false, false,\n-                false, false}, Conversion.intToBoolArray(0x90ABCDEF, 2, new boolean[37], 0, 30));\n-        // assertBoolArrayEquals(new boolean[]{false, false, false, true, true, false, true,\n+                false, false}, Conversion.intToBinary(0x90ABCDEF, 2, new boolean[37], 0, 30));\n+        // assertBinaryEquals(new boolean[]{false, false, false, true, true, false, true,\n         // true,\n         // true, true, false, true, true, false, false, true, true, true, true, false, true,\n         // false, true, false, true, false, false, false, false, true, false, false, false,\n-        // false, false, false, false},Conversion.intToBoolArray(0x90ABCDEF, 2,new boolean[37],\n+        // false, false, false, false},Conversion.intToBinary(0x90ABCDEF, 2,new boolean[37],\n         // 3,31));//rejected by assertion\n-        assertBoolArrayEquals(\n+        assertBinaryEquals(\n             new boolean[]{\n                 false, false, false, true, true, false, true, true, true, true, false, true,\n                 true, false, false, true, true, true, true, false, true, false, true, false,\n                 true, false, false, false, false, true, false, false, true, false, false,\n-                false, false}, Conversion.intToBoolArray(0x90ABCDEF, 2, new boolean[37], 3, 30));\n-    }\n-\n-    /**\n-     * Tests {@link Conversion#shortToBoolArray(short, int, boolean[], int, int)}.\n-     */\n-    @Test\n-    public void testShortToBoolArray() {\n-        assertBoolArrayEquals(\n+                false, false}, Conversion.intToBinary(0x90ABCDEF, 2, new boolean[37], 3, 30));\n+    }\n+\n+    /**\n+     * Tests {@link Conversion#shortToBinary(short, int, boolean[], int, int)}.\n+     */\n+    @Test\n+    public void testShortToBinary() {\n+        assertBinaryEquals(\n+            new boolean[]{}, Conversion.shortToBinary((short)0x0000, 0, new boolean[]{}, 0, 0));\n+        assertBinaryEquals(\n             new boolean[]{},\n-            Conversion.shortToBoolArray((short)0x0000, 0, new boolean[]{}, 0, 0));\n-        assertBoolArrayEquals(\n+            Conversion.shortToBinary((short)0x0000, 100, new boolean[]{}, 0, 0));\n+        assertBinaryEquals(\n             new boolean[]{},\n-            Conversion.shortToBoolArray((short)0x0000, 100, new boolean[]{}, 0, 0));\n-        assertBoolArrayEquals(\n-            new boolean[]{},\n-            Conversion.shortToBoolArray((short)0x0000, 0, new boolean[]{}, 100, 0));\n-        assertBoolArrayEquals(\n-            new boolean[69],\n-            Conversion.shortToBoolArray((short)0xCDEF, 0, new boolean[69], 0, 0));\n-        assertBoolArrayEquals(\n+            Conversion.shortToBinary((short)0x0000, 0, new boolean[]{}, 100, 0));\n+        assertBinaryEquals(\n+            new boolean[69], Conversion.shortToBinary((short)0xCDEF, 0, new boolean[69], 0, 0));\n+        assertBinaryEquals(\n             new boolean[]{\n                 true, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false},\n-            Conversion.shortToBoolArray((short)0xCDEF, 0, new boolean[21], 0, 1));\n-        assertBoolArrayEquals(\n+            Conversion.shortToBinary((short)0xCDEF, 0, new boolean[21], 0, 1));\n+        assertBinaryEquals(\n             new boolean[]{\n                 true, true, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false},\n-            Conversion.shortToBoolArray((short)0xCDEF, 0, new boolean[21], 0, 2));\n-        assertBoolArrayEquals(\n+            Conversion.shortToBinary((short)0xCDEF, 0, new boolean[21], 0, 2));\n+        assertBinaryEquals(\n             new boolean[]{\n                 true, true, true, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false},\n-            Conversion.shortToBoolArray((short)0xCDEF, 0, new boolean[21], 0, 3));\n-        assertBoolArrayEquals(\n+            Conversion.shortToBinary((short)0xCDEF, 0, new boolean[21], 0, 3));\n+        assertBinaryEquals(\n             new boolean[]{\n                 true, true, true, true, false, true, true, true, true, false, true, true,\n                 false, false, true, false, false, false, false, false, false},\n-            Conversion.shortToBoolArray((short)0xCDEF, 0, new boolean[21], 0, 15));\n-        assertBoolArrayEquals(\n+            Conversion.shortToBinary((short)0xCDEF, 0, new boolean[21], 0, 15));\n+        assertBinaryEquals(\n             new boolean[]{\n                 true, true, true, true, false, true, true, true, true, false, true, true,\n                 false, false, true, true, false, false, false, false, false},\n-            Conversion.shortToBoolArray((short)0xCDEF, 0, new boolean[21], 0, 16));\n-        assertBoolArrayEquals(\n+            Conversion.shortToBinary((short)0xCDEF, 0, new boolean[21], 0, 16));\n+        assertBinaryEquals(\n             new boolean[]{\n                 false, false, true, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false},\n-            Conversion.shortToBoolArray((short)0xCDEF, 0, new boolean[21], 2, 1));\n-        assertBoolArrayEquals(\n+            Conversion.shortToBinary((short)0xCDEF, 0, new boolean[21], 2, 1));\n+        assertBinaryEquals(\n             new boolean[]{\n                 false, false, true, true, true, true, false, true, true, true, true, false,\n                 true, true, false, false, true, true, false, false, false},\n-            Conversion.shortToBoolArray((short)0xCDEF, 0, new boolean[21], 2, 16));\n-        assertBoolArrayEquals(\n+            Conversion.shortToBinary((short)0xCDEF, 0, new boolean[21], 2, 16));\n+        assertBinaryEquals(\n             new boolean[]{\n                 true, true, true, false, true, true, true, true, false, true, true, false,\n                 false, true, true, false, false, false, false, false, false},\n-            Conversion.shortToBoolArray((short)0xCDEF, 1, new boolean[21], 0, 15));\n-        assertBoolArrayEquals(\n+            Conversion.shortToBinary((short)0xCDEF, 1, new boolean[21], 0, 15));\n+        assertBinaryEquals(\n             new boolean[]{\n                 true, true, false, true, true, true, true, false, true, true, false, false,\n                 true, true, false, false, false, false, false, false, false},\n-            Conversion.shortToBoolArray((short)0xCDEF, 2, new boolean[21], 0, 14));\n+            Conversion.shortToBinary((short)0xCDEF, 2, new boolean[21], 0, 14));\n         // assertArrayEquals(new boolean[]{false, false, false, true, true, false, true, true,\n         // true, true, false, true, true, false, false, true, false, false, false, false,\n-        // false},Conversion.shortToBoolArray((short)0xCDEF, 2,new boolean[21],\n+        // false},Conversion.shortToBinary((short)0xCDEF, 2,new boolean[21],\n         // 3,15));//rejected by\n         // assertion\n-        assertBoolArrayEquals(\n+        assertBinaryEquals(\n             new boolean[]{\n                 false, false, false, true, true, false, true, true, true, true, false, true,\n                 true, false, false, true, true, false, false, false, false},\n-            Conversion.shortToBoolArray((short)0xCDEF, 2, new boolean[21], 3, 14));\n-    }\n-\n-    /**\n-     * Tests {@link Conversion#byteToBoolArray(byte, int, boolean[], int, int)}.\n-     */\n-    @Test\n-    public void testByteToBoolArray() {\n-        assertBoolArrayEquals(\n-            new boolean[]{}, Conversion.byteToBoolArray((byte)0x00, 0, new boolean[]{}, 0, 0));\n-        assertBoolArrayEquals(\n-            new boolean[]{}, Conversion.byteToBoolArray((byte)0x00, 100, new boolean[]{}, 0, 0));\n-        assertBoolArrayEquals(\n-            new boolean[]{}, Conversion.byteToBoolArray((byte)0x00, 0, new boolean[]{}, 100, 0));\n-        assertBoolArrayEquals(\n-            new boolean[69], Conversion.byteToBoolArray((byte)0xEF, 0, new boolean[69], 0, 0));\n-        assertBoolArrayEquals(new boolean[]{\n+            Conversion.shortToBinary((short)0xCDEF, 2, new boolean[21], 3, 14));\n+    }\n+\n+    /**\n+     * Tests {@link Conversion#byteToBinary(byte, int, boolean[], int, int)}.\n+     */\n+    @Test\n+    public void testByteToBinary() {\n+        assertBinaryEquals(\n+            new boolean[]{}, Conversion.byteToBinary((byte)0x00, 0, new boolean[]{}, 0, 0));\n+        assertBinaryEquals(\n+            new boolean[]{}, Conversion.byteToBinary((byte)0x00, 100, new boolean[]{}, 0, 0));\n+        assertBinaryEquals(\n+            new boolean[]{}, Conversion.byteToBinary((byte)0x00, 0, new boolean[]{}, 100, 0));\n+        assertBinaryEquals(\n+            new boolean[69], Conversion.byteToBinary((byte)0xEF, 0, new boolean[69], 0, 0));\n+        assertBinaryEquals(new boolean[]{\n             true, false, false, false, false, false, false, false, false, false, false, false,\n-            false}, Conversion.byteToBoolArray((byte)0x95, 0, new boolean[13], 0, 1));\n-        assertBoolArrayEquals(new boolean[]{\n+            false}, Conversion.byteToBinary((byte)0x95, 0, new boolean[13], 0, 1));\n+        assertBinaryEquals(new boolean[]{\n             true, false, false, false, false, false, false, false, false, false, false, false,\n-            false}, Conversion.byteToBoolArray((byte)0x95, 0, new boolean[13], 0, 2));\n-        assertBoolArrayEquals(new boolean[]{\n+            false}, Conversion.byteToBinary((byte)0x95, 0, new boolean[13], 0, 2));\n+        assertBinaryEquals(new boolean[]{\n             true, false, true, false, false, false, false, false, false, false, false, false,\n-            false}, Conversion.byteToBoolArray((byte)0x95, 0, new boolean[13], 0, 3));\n-        assertBoolArrayEquals(new boolean[]{\n+            false}, Conversion.byteToBinary((byte)0x95, 0, new boolean[13], 0, 3));\n+        assertBinaryEquals(new boolean[]{\n             true, false, true, false, true, false, false, false, false, false, false, false,\n-            false}, Conversion.byteToBoolArray((byte)0x95, 0, new boolean[13], 0, 7));\n-        assertBoolArrayEquals(new boolean[]{\n+            false}, Conversion.byteToBinary((byte)0x95, 0, new boolean[13], 0, 7));\n+        assertBinaryEquals(new boolean[]{\n             true, false, true, false, true, false, false, true, false, false, false, false,\n-            false}, Conversion.byteToBoolArray((byte)0x95, 0, new boolean[13], 0, 8));\n-        assertBoolArrayEquals(new boolean[]{\n+            false}, Conversion.byteToBinary((byte)0x95, 0, new boolean[13], 0, 8));\n+        assertBinaryEquals(new boolean[]{\n             false, false, true, false, false, false, false, false, false, false, false, false,\n-            false}, Conversion.byteToBoolArray((byte)0x95, 0, new boolean[13], 2, 1));\n-        assertBoolArrayEquals(new boolean[]{\n+            false}, Conversion.byteToBinary((byte)0x95, 0, new boolean[13], 2, 1));\n+        assertBinaryEquals(new boolean[]{\n             false, false, true, false, true, false, true, false, false, true, false, false,\n-            false}, Conversion.byteToBoolArray((byte)0x95, 0, new boolean[13], 2, 8));\n-        assertBoolArrayEquals(new boolean[]{\n+            false}, Conversion.byteToBinary((byte)0x95, 0, new boolean[13], 2, 8));\n+        assertBinaryEquals(new boolean[]{\n             false, true, false, true, false, false, true, false, false, false, false, false,\n-            false}, Conversion.byteToBoolArray((byte)0x95, 1, new boolean[13], 0, 7));\n-        assertBoolArrayEquals(new boolean[]{\n+            false}, Conversion.byteToBinary((byte)0x95, 1, new boolean[13], 0, 7));\n+        assertBinaryEquals(new boolean[]{\n             true, false, true, false, false, true, false, false, false, false, false, false,\n-            false}, Conversion.byteToBoolArray((byte)0x95, 2, new boolean[13], 0, 6));\n+            false}, Conversion.byteToBinary((byte)0x95, 2, new boolean[13], 0, 6));\n         // assertArrayEquals(new boolean[]{false, false, false, true, true, false, true, true,\n-        // false, false, false, false, false},Conversion.byteToBoolArray((byte)0x95, 2,new\n+        // false, false, false, false, false},Conversion.byteToBinary((byte)0x95, 2,new\n         // boolean[13], 3, 7));//rejected by assertion\n-        assertBoolArrayEquals(new boolean[]{\n+        assertBinaryEquals(new boolean[]{\n             false, false, false, true, false, true, false, false, true, false, false, false,\n-            false}, Conversion.byteToBoolArray((byte)0x95, 2, new boolean[13], 3, 6));\n+            false}, Conversion.byteToBinary((byte)0x95, 2, new boolean[13], 3, 6));\n     }\n \n     /**", "timestamp": 1349303451, "metainfo": ""}