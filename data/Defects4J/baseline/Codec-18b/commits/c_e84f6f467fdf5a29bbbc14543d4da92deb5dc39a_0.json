{"sha": "e84f6f467fdf5a29bbbc14543d4da92deb5dc39a", "log": "Refactor test for less test fixture construction noise.  ", "commit": "\n--- a/src/test/java/org/apache/commons/codec/language/NysiisTest.java\n+++ b/src/test/java/org/apache/commons/codec/language/NysiisTest.java\n \n     private final Nysiis fullNysiis = new Nysiis(false);\n     \n+    /**\n+     * Takes an array of String pairs where each pair's first element is the input and the second element the expected\n+     * encoding.\n+     * \n+     * @param testValues\n+     *            an array of String pairs where each pair's first element is the input and the second element the\n+     *            expected encoding.\n+     * @throws EncoderException\n+     */\n+    private void assertEncodings(String[]... testValues) throws EncoderException {\n+        for (String[] arr : testValues) {\n+            Assert.assertEquals(\"Problem with \" + arr[0], arr[1], this.fullNysiis.encode(arr[0]));\n+        }\n+    }\n+\n     @Override\n     protected StringEncoder createStringEncoder() {\n         return new Nysiis();\n      */\n     @Test\n     public void testOthers() throws EncoderException {\n-        List<String[]> testValues =\n-                Arrays.asList(\n-                        new String[] { \"O'Daniel\", \"ODANAL\" },\n-                        new String[] { \"O'Donnel\", \"ODANAL\" },\n-                        new String[] { \"Cory\", \"CARY\" },\n-                        new String[] { \"Corey\", \"CARY\" },\n-                        new String[] { \"Kory\", \"CARY\" },\n-                        //\n-                        new String[] { \"FUZZY\", \"FASY\" });\n-\n-        for (String[] arr : testValues) {\n-            Assert.assertEquals(\"Problem with \" + arr[0], arr[1], this.fullNysiis.encode(arr[0]));\n-        }\n+        this.assertEncodings(\n+                new String[] { \"O'Daniel\", \"ODANAL\" },\n+                new String[] { \"O'Donnel\", \"ODANAL\" },\n+                new String[] { \"Cory\", \"CARY\" },\n+                new String[] { \"Corey\", \"CARY\" },\n+                new String[] { \"Kory\", \"CARY\" },\n+                //\n+                new String[] { \"FUZZY\", \"FASY\" });\n     }\n \n     /**\n      */\n     @Test\n     public void testRule1() throws EncoderException {\n-        List<String[]> testValues =\n-                Arrays.asList(\n-                        new String[] { \"MACX\", \"MCX\" },\n-                        new String[] { \"KNX\", \"NX\" },\n-                        new String[] { \"KX\", \"CX\" },\n-                        new String[] { \"PHX\", \"FX\" },\n-                        new String[] { \"PFX\", \"FX\" },\n-                        new String[] { \"SCHX\", \"SX\" });\n-        for (String[] arr : testValues) {\n-            Assert.assertEquals(\"Problem with \" + arr[0], arr[1], this.fullNysiis.encode(arr[0]));\n-        }\n+        this.assertEncodings(\n+                new String[] { \"MACX\", \"MCX\" },\n+                new String[] { \"KNX\", \"NX\" },\n+                new String[] { \"KX\", \"CX\" },\n+                new String[] { \"PHX\", \"FX\" },\n+                new String[] { \"PFX\", \"FX\" },\n+                new String[] { \"SCHX\", \"SX\" });\n     }\n \n     /**\n      */\n     @Test\n     public void testRule2() throws EncoderException {\n-        List<String[]> testValues =\n-                Arrays.asList(\n-                        new String[] { \"XEE\", \"XY\" },\n-                        new String[] { \"XIE\", \"XY\" },\n-                        new String[] { \"XDT\", \"XD\" },\n-                        new String[] { \"XRT\", \"XD\" },\n-                        new String[] { \"XRD\", \"XD\" },\n-                        new String[] { \"XNT\", \"XD\" },\n-                        new String[] { \"XND\", \"XD\" });\n-        for (String[] arr : testValues) {\n-            Assert.assertEquals(\"Problem with \" + arr[0], arr[1], this.fullNysiis.encode(arr[0]));\n-        }\n+        this.assertEncodings(\n+                new String[] { \"XEE\", \"XY\" },\n+                new String[] { \"XIE\", \"XY\" },\n+                new String[] { \"XDT\", \"XD\" },\n+                new String[] { \"XRT\", \"XD\" },\n+                new String[] { \"XRD\", \"XD\" },\n+                new String[] { \"XNT\", \"XD\" },\n+                new String[] { \"XND\", \"XD\" });\n     }\n \n     /**\n      */\n     @Test\n     public void testRule4Dot1() throws EncoderException {\n-        List<String[]> testValues =\n-                Arrays.asList(\n-                        new String[] { \"XEV\", \"XAF\" },\n-                        new String[] { \"XAX\", \"XAX\" },\n-                        new String[] { \"XEX\", \"XAX\" },\n-                        new String[] { \"XIX\", \"XAX\" },\n-                        new String[] { \"XOX\", \"XAX\" },\n-                        new String[] { \"XUX\", \"XAX\" });\n-        for (String[] arr : testValues) {\n-            Assert.assertEquals(\"Problem with \" + arr[0], arr[1], this.fullNysiis.encode(arr[0]));\n-        }\n+        this.assertEncodings(\n+                new String[] { \"XEV\", \"XAF\" },\n+                new String[] { \"XAX\", \"XAX\" },\n+                new String[] { \"XEX\", \"XAX\" },\n+                new String[] { \"XIX\", \"XAX\" },\n+                new String[] { \"XOX\", \"XAX\" },\n+                new String[] { \"XUX\", \"XAX\" });\n     }\n \n     /**\n      */\n     @Test\n     public void testRule4Dot2() throws EncoderException {\n-        List<String[]> testValues =\n-                Arrays.asList(\n-                        new String[] { \"XQ\", \"XG\" },\n-                        new String[] { \"XZ\", \"X\" },\n-                        new String[] { \"XM\", \"XN\" });\n-        for (String[] arr : testValues) {\n-            Assert.assertEquals(\"Problem with \" + arr[0], arr[1], this.fullNysiis.encode(arr[0]));\n-        }\n+        this.assertEncodings(\n+                new String[] { \"XQ\", \"XG\" },\n+                new String[] { \"XZ\", \"X\" },\n+                new String[] { \"XM\", \"XN\" });\n     }\n \n     /**\n      */\n     @Test\n     public void testRule5() throws EncoderException {\n-        List<String[]> testValues =\n-                Arrays.asList(\n-                        new String[] { \"XS\", \"X\" },\n-                        new String[] { \"XSS\", \"X\" });\n-        for (String[] arr : testValues) {\n-            Assert.assertEquals(\"Problem with \" + arr[0], arr[1], this.fullNysiis.encode(arr[0]));\n-        }\n+        this.assertEncodings(\n+                new String[] { \"XS\", \"X\" },\n+                new String[] { \"XSS\", \"X\" });\n     }\n \n     /**\n      */\n     @Test\n     public void testRule6() throws EncoderException {\n-        List<String[]> testValues =\n-                Arrays.asList(\n-                        new String[] { \"XAY\", \"XY\" },\n-                        new String[] { \"XAYS\", \"XY\" }); // Rules 5, 6\n-        for (String[] arr : testValues) {\n-            Assert.assertEquals(\"Problem with \" + arr[0], arr[1], this.fullNysiis.encode(arr[0]));\n-        }\n+        this.assertEncodings(\n+                new String[] { \"XAY\", \"XY\" },\n+                new String[] { \"XAYS\", \"XY\" }); // Rules 5, 6\n     }\n \n     /**\n      */\n     @Test\n     public void testRule7() throws EncoderException {\n-        List<String[]> testValues =\n-                Arrays.asList(\n-                        new String[] { \"XA\", \"X\" },\n-                        new String[] { \"XAS\", \"X\" }); // Rules 5, 7\n-        for (String[] arr : testValues) {\n-            Assert.assertEquals(\"Problem with \" + arr[0], arr[1], this.fullNysiis.encode(arr[0]));\n-        }\n+        this.assertEncodings(\n+                new String[] { \"XA\", \"X\" },\n+                new String[] { \"XAS\", \"X\" }); // Rules 5, 7\n     }\n     @Test\n     public void testSnad() throws EncoderException {", "timestamp": 1331248087, "metainfo": ""}