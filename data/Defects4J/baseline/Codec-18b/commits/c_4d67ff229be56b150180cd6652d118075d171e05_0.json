{"sha": "4d67ff229be56b150180cd6652d118075d171e05", "log": "Moved package private class CharsetEncodingNames to the main package under the name RequiredCharsetNames. \"Charset\" reflects the name used in the JRE instead of \"encoding\". Updated string literals for required charset names (\"UTF-8\", \"US-ASCII\", etc) with references to new class static constants. Also created the new class StringBytesUtils (need a better name?) to wrap calls to String#getBytes(String) and String#String(byte[],String) for required charset names, such that it is not required for call sites to catch or re-throw UnsupportedEncodingException since Java requires 6 charsets to be present.  ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/codec/RequiredCharsetNames.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.codec;\n+\n+/**\n+ * Character encoding names required of every implementation of the Java platform.\n+ * \n+ * From the Java documentation <a\n+ * href=\"http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc\">JRE character encoding names\n+ * </a>:\n+ * <p>\n+ * <cite>Every implementation of the Java platform is required to support the following character encodings. Consult the\n+ * release documentation for your implementation to see if any other encodings are supported. Consult the release\n+ * documentation for your implementation to see if any other encodings are supported. </cite>\n+ * </p>\n+ * \n+ * <ul>\n+ * <li><code>US-ASCII</code><br/>\n+ * Seven-bit ASCII, a.k.a. ISO646-US, a.k.a. the Basic Latin block of the Unicode character set.</li>\n+ * <li><code>ISO-8859-1</code><br/>\n+ * ISO Latin Alphabet No. 1, a.k.a. ISO-LATIN-1.</li>\n+ * <li><code>UTF-8</code><br/>\n+ * Eight-bit Unicode Transformation Format.</li>\n+ * <li><code>UTF-16BE</code><br/>\n+ * Sixteen-bit Unicode Transformation Format, big-endian byte order.</li>\n+ * <li><code>UTF-16LE</code><br/>\n+ * Sixteen-bit Unicode Transformation Format, little-endian byte order.</li>\n+ * <li><code>UTF-16</code><br/>\n+ * Sixteen-bit Unicode Transformation Format, byte order specified by a mandatory initial byte-order mark (either order\n+ * accepted on input, big-endian used on output.)</li>\n+ * </ul>\n+ * \n+ * This perhaps would best belong in the [lang] project. Even if a similar interface is defined in [lang], it is not\n+ * forseen that [codec] would be made to depend on [lang].\n+ * \n+ * @see <a href=\"http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc\">JRE character encoding\n+ *      names </a>\n+ * @author Apache Software Foundation\n+ * @since 1.4\n+ * @version $Id$\n+ */\n+public class RequiredCharsetNames {\n+    /**\n+     * <p>\n+     * ISO Latin Alphabet No. 1, a.k.a. ISO-LATIN-1.\n+     * </p>\n+     * <p>\n+     * Every implementation of the Java platform is required to support this character encoding.\n+     * </p>\n+     * \n+     * @see <a href=\"http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc\">JRE character\n+     *      encoding names </a>\n+     */\n+    public static final String ISO_8859_1 = \"ISO-8859-1\";\n+\n+    /**\n+     * <p>\n+     * Seven-bit ASCII, also known as ISO646-US, also known as the Basic Latin block of the Unicode character set.\n+     * </p>\n+     * <p>\n+     * Every implementation of the Java platform is required to support this character encoding.\n+     * </p>\n+     * \n+     * @see <a href=\"http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc\">JRE character\n+     *      encoding names </a>\n+     */\n+    public static final String US_ASCII = \"US-ASCII\";\n+\n+    /**\n+     * <p>\n+     * Sixteen-bit Unicode Transformation Format, The byte order specified by a mandatory initial byte-order mark\n+     * (either order accepted on input, big-endian used on output)\n+     * </p>\n+     * <p>\n+     * Every implementation of the Java platform is required to support this character encoding.\n+     * </p>\n+     * \n+     * @see <a href=\"http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc\">JRE character\n+     *      encoding names </a>\n+     */\n+    public static final String UTF_16 = \"UTF-16\";\n+\n+    /**\n+     * <p>\n+     * Sixteen-bit Unicode Transformation Format, big-endian byte order.\n+     * </p>\n+     * <p>\n+     * Every implementation of the Java platform is required to support this character encoding.\n+     * </p>\n+     * \n+     * @see <a href=\"http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc\">JRE character\n+     *      encoding names </a>\n+     */\n+    public static final String UTF_16BE = \"UTF-16BE\";\n+\n+    /**\n+     * <p>\n+     * Sixteen-bit Unicode Transformation Format, little-endian byte order.\n+     * </p>\n+     * <p>\n+     * Every implementation of the Java platform is required to support this character encoding.\n+     * </p>\n+     * \n+     * @see <a href=\"http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc\">JRE character\n+     *      encoding names </a>\n+     */\n+    public static final String UTF_16LE = \"UTF-16LE\";\n+\n+    /**\n+     * <p>\n+     * Eight-bit Unicode Transformation Format.\n+     * </p>\n+     * <p>\n+     * Every implementation of the Java platform is required to support this character encoding.\n+     * </p>\n+     * \n+     * @see <a href=\"http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc\">JRE character\n+     *      encoding names </a>\n+     */\n+    public static final String UTF_8 = \"UTF-8\";\n+}\n--- a/src/java/org/apache/commons/codec/binary/Base64.java\n+++ b/src/java/org/apache/commons/codec/binary/Base64.java\n \n package org.apache.commons.codec.binary;\n \n-import java.io.UnsupportedEncodingException;\n import java.math.BigInteger;\n \n import org.apache.commons.codec.BinaryDecoder;\n         }\n         this.decodeSize = this.encodeSize - 1;\n         if (containsBase64Byte(lineSeparator)) {\n-            String sep;\n-            try {\n-                sep = new String(lineSeparator, \"UTF-8\");\n-            } catch (UnsupportedEncodingException uee) {\n-                sep = new String(lineSeparator);\n-            }\n+            String sep = StringBytesUtils.newStringUtf8(lineSeparator);\n             throw new IllegalArgumentException(\"lineSeperator must not contain base64 characters: [\" + sep + \"]\");\n         }\n         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;\n             len += (1 + (len / CHUNK_SIZE)) * CHUNK_SEPARATOR.length;\n         }\n         if (len > Integer.MAX_VALUE) {\n-            throw new IllegalArgumentException(\"Input array too big, output array would be bigger than Integer.MAX_VALUE=\"\n-                + Integer.MAX_VALUE);\n+            throw new IllegalArgumentException(\"Input array too big, output array would be bigger than Integer.MAX_VALUE=\" + \n+                    Integer.MAX_VALUE);\n         }\n         byte[] buf = new byte[(int) len];\n         b64.setInitialBuffer(buf, 0, buf.length);\n--- /dev/null\n+++ b/src/java/org/apache/commons/codec/binary/StringBytesUtils.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.codec.binary;\n+\n+import java.io.UnsupportedEncodingException;\n+\n+import org.apache.commons.codec.RequiredCharsetNames;\n+\n+/**\n+ * Converts String to bytes using the encodings required by the Java specification.\n+ * \n+ * @see RequiredCharsetNames\n+ * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n+ * @version $Id: $\n+ */\n+public class StringBytesUtils {\n+\n+    /**\n+     * Encodes the given string into a sequence of bytes using the ISO-8859-1 charset, storing the result into a new\n+     * byte array.\n+     * \n+     * @param string\n+     *            the String to encode\n+     * @return encoded bytes\n+     * @throws IllegalStateException\n+     *             Thrown when the charset is missing, which should be never according the the Java specification.\n+     * @see <a href=\"http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc\">JRE character\n+     *      encoding names </a>\n+     * @see #getSupportedBytes(String, String)\n+     */\n+    public static byte[] getBytesIso8859_1(String string) {\n+        return StringBytesUtils.getSupportedBytes(string, RequiredCharsetNames.ISO_8859_1);\n+    }\n+\n+    /**\n+     * Encodes the given string into a sequence of bytes using the US-ASCII charset, storing the result into a new byte\n+     * array.\n+     * \n+     * @param string\n+     *            the String to encode\n+     * @return encoded bytes\n+     * @throws IllegalStateException\n+     *             Thrown when the charset is missing, which should be never according the the Java specification.\n+     * @see <a href=\"http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc\">JRE character\n+     *      encoding names </a>\n+     * @see #getSupportedBytes(String, String)\n+     */\n+    public static byte[] getBytesUsAscii(String string) {\n+        return StringBytesUtils.getSupportedBytes(string, RequiredCharsetNames.US_ASCII);\n+    }\n+\n+    /**\n+     * Encodes the given string into a sequence of bytes using the UTF-16 charset, storing the result into a new byte\n+     * array.\n+     * \n+     * @param string\n+     *            the String to encode\n+     * @return encoded bytes\n+     * @throws IllegalStateException\n+     *             Thrown when the charset is missing, which should be never according the the Java specification.\n+     * @see <a href=\"http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc\">JRE character\n+     *      encoding names </a>\n+     * @see #getSupportedBytes(String, String)\n+     */\n+    public static byte[] getBytesUtf16(String string) {\n+        return StringBytesUtils.getSupportedBytes(string, RequiredCharsetNames.UTF_16);\n+    }\n+\n+    /**\n+     * Encodes the given string into a sequence of bytes using the UTF-16BE charset, storing the result into a new byte\n+     * array.\n+     * \n+     * @param string\n+     *            the String to encode\n+     * @return encoded bytes\n+     * @throws IllegalStateException\n+     *             Thrown when the charset is missing, which should be never according the the Java specification.\n+     * @see <a href=\"http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc\">JRE character\n+     *      encoding names </a>\n+     * @see #getSupportedBytes(String, String)\n+     */\n+    public static byte[] getBytesUtf16Be(String string) {\n+        return StringBytesUtils.getSupportedBytes(string, RequiredCharsetNames.UTF_16BE);\n+    }\n+\n+    /**\n+     * Encodes the given string into a sequence of bytes using the UTF-16LE charset, storing the result into a new byte\n+     * array.\n+     * \n+     * @param string\n+     *            the String to encode\n+     * @return encoded bytes\n+     * @throws IllegalStateException\n+     *             Thrown when the charset is missing, which should be never according the the Java specification.\n+     * @see <a href=\"http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc\">JRE character\n+     *      encoding names </a>\n+     * @see #getSupportedBytes(String, String)\n+     */\n+    public static byte[] getBytesUtf16Le(String string) {\n+        return StringBytesUtils.getSupportedBytes(string, RequiredCharsetNames.UTF_16LE);\n+    }\n+\n+    /**\n+     * Encodes the given string into a sequence of bytes using the UTF-8 charset, storing the result into a new byte\n+     * array.\n+     * \n+     * @param string\n+     *            the String to encode\n+     * @return encoded bytes\n+     * @throws IllegalStateException\n+     *             Thrown when the charset is missing, which should be never according the the Java specification.\n+     * @see <a href=\"http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc\">JRE character\n+     *      encoding names </a>\n+     * @see #getSupportedBytes(String, String)\n+     */\n+    public static byte[] getBytesUtf8(String string) {\n+        return StringBytesUtils.getSupportedBytes(string, RequiredCharsetNames.UTF_8);\n+    }\n+\n+    /**\n+     * Encodes the given string into a sequence of bytes using the named charset, storing the result into a new byte\n+     * array.\n+     * <p>\n+     * This method catches {@link UnsupportedEncodingException} and rethrows it as {@link IllegalStateException}, which\n+     * should never happen for a required charset name. Use this method when the encoding is required to be in the JRE.\n+     * </p>\n+     * \n+     * @param string\n+     *            the String to encode\n+     * @param charsetName\n+     *            The name of a required {@link java.nio.charset.Charset}\n+     * @return encoded bytes\n+     * @throws IllegalStateException\n+     *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen for a\n+     *             required charset name.\n+     * @see RequiredCharsetNames\n+     * @see String#getBytes(String)\n+     */\n+    public static byte[] getSupportedBytes(String string, String charsetName) {\n+        try {\n+            return string.getBytes(charsetName);\n+        } catch (UnsupportedEncodingException e) {\n+            throw StringBytesUtils.newIllegalStateException(charsetName, e);\n+        }\n+    }\n+\n+    private static IllegalStateException newIllegalStateException(String charsetName, UnsupportedEncodingException e) {\n+        return new IllegalStateException(charsetName + \": \" + e);\n+    }\n+\n+    /**\n+     * Constructs a new <code>String</code> by decoding the specified array of bytes using the given charset.\n+     * <p>\n+     * This method catches {@link UnsupportedEncodingException} and re-throws it as {@link IllegalStateException}, which\n+     * should never happen for a required charset name. Use this method when the encoding is required to be in the JRE.\n+     * </p>\n+     * \n+     * @param bytes\n+     *            The bytes to be decoded into characters\n+     * @param charsetName\n+     *            The name of a required {@link java.nio.charset.Charset}\n+     * @throws IllegalStateException\n+     *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen for a\n+     *             required charset name.\n+     * @see RequiredCharsetNames\n+     * @see String#String(byte[], String)\n+     */\n+    public static String newString(byte[] bytes, String charsetName) {\n+        try {\n+            return new String(bytes, charsetName);\n+        } catch (UnsupportedEncodingException e) {\n+            throw StringBytesUtils.newIllegalStateException(charsetName, e);\n+        }\n+    }\n+\n+    /**\n+     * Constructs a new <code>String</code> by decoding the specified array of bytes using the ISO-8859-1 charset.\n+     * \n+     * @param bytes\n+     *            The bytes to be decoded into characters\n+     * @throws IllegalStateException\n+     *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen since the\n+     *             charset is required.\n+     */\n+    public static String newStringIso8859_1(byte[] bytes) {\n+        return StringBytesUtils.newString(bytes, RequiredCharsetNames.ISO_8859_1);\n+    }\n+\n+    /**\n+     * Constructs a new <code>String</code> by decoding the specified array of bytes using the US-ASCII charset.\n+     * \n+     * @param bytes\n+     *            The bytes to be decoded into characters\n+     * @throws IllegalStateException\n+     *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen since the\n+     *             charset is required.\n+     */\n+    public static String newStringUsAscii(byte[] bytes) {\n+        return StringBytesUtils.newString(bytes, RequiredCharsetNames.US_ASCII);\n+    }\n+\n+    /**\n+     * Constructs a new <code>String</code> by decoding the specified array of bytes using the UTF-16 charset.\n+     * \n+     * @param bytes\n+     *            The bytes to be decoded into characters\n+     * @throws IllegalStateException\n+     *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen since the\n+     *             charset is required.\n+     */\n+    public static String newStringUtf16(byte[] bytes) {\n+        return StringBytesUtils.newString(bytes, RequiredCharsetNames.UTF_16);\n+    }\n+\n+    /**\n+     * Constructs a new <code>String</code> by decoding the specified array of bytes using the UTF-16BE charset.\n+     * \n+     * @param bytes\n+     *            The bytes to be decoded into characters\n+     * @throws IllegalStateException\n+     *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen since the\n+     *             charset is required.\n+     */\n+    public static String newStringUtf16Be(byte[] bytes) {\n+        return StringBytesUtils.newString(bytes, RequiredCharsetNames.UTF_16BE);\n+    }\n+\n+    /**\n+     * Constructs a new <code>String</code> by decoding the specified array of bytes using the UTF-16LE charset.\n+     * \n+     * @param bytes\n+     *            The bytes to be decoded into characters\n+     * @throws IllegalStateException\n+     *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen since the\n+     *             charset is required.\n+     */\n+    public static String newStringUtf16Le(byte[] bytes) {\n+        return StringBytesUtils.newString(bytes, RequiredCharsetNames.UTF_16LE);\n+    }\n+\n+    /**\n+     * Constructs a new <code>String</code> by decoding the specified array of bytes using the UTF-8 charset.\n+     * \n+     * @param bytes\n+     *            The bytes to be decoded into characters\n+     * @throws IllegalStateException\n+     *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen since the\n+     *             charset is required.\n+     */\n+    public static String newStringUtf8(byte[] bytes) {\n+        return StringBytesUtils.newString(bytes, RequiredCharsetNames.UTF_8);\n+    }\n+\n+    private StringBytesUtils() {\n+        // noop, cannot instantiate.\n+    }\n+}\n--- a/src/java/org/apache/commons/codec/net/BCodec.java\n+++ b/src/java/org/apache/commons/codec/net/BCodec.java\n \n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n+import org.apache.commons.codec.RequiredCharsetNames;\n import org.apache.commons.codec.StringDecoder;\n import org.apache.commons.codec.StringEncoder;\n import org.apache.commons.codec.binary.Base64;\n      * Default constructor.\n      */\n     public BCodec() {\n-        this(CharacterEncodingNames.UTF8);\n+        this(RequiredCharsetNames.UTF_8);\n     }\n \n     /**\n--- a/src/java/org/apache/commons/codec/net/QCodec.java\n+++ b/src/java/org/apache/commons/codec/net/QCodec.java\n \n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n+import org.apache.commons.codec.RequiredCharsetNames;\n import org.apache.commons.codec.StringDecoder;\n import org.apache.commons.codec.StringEncoder;\n \n      * Default constructor.\n      */\n     public QCodec() {\n-        this(CharacterEncodingNames.UTF8);\n+        this(RequiredCharsetNames.UTF_8);\n     }\n \n     /**\n--- a/src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java\n+++ b/src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java\n import org.apache.commons.codec.BinaryEncoder;\n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n+import org.apache.commons.codec.RequiredCharsetNames;\n import org.apache.commons.codec.StringDecoder;\n import org.apache.commons.codec.StringEncoder;\n+import org.apache.commons.codec.binary.StringBytesUtils;\n \n /**\n  * <p>\n      * Default constructor.\n      */\n     public QuotedPrintableCodec() {\n-        this(CharacterEncodingNames.UTF8);\n+        this(RequiredCharsetNames.UTF_8);\n     }\n \n     /**\n         if (pString == null) {\n             return null;\n         }\n-        return new String(decode(pString.getBytes(CharacterEncodingNames.US_ASCII)), charset);\n+        return new String(decode(StringBytesUtils.getBytesUsAscii(pString)), charset);\n     }\n \n     /**\n         if (pString == null) {\n             return null;\n         }\n-        return new String(encode(pString.getBytes(charset)), CharacterEncodingNames.US_ASCII);\n+        return StringBytesUtils.newStringUsAscii(encode(pString.getBytes(charset)));\n     }\n }\n--- a/src/java/org/apache/commons/codec/net/RFC1522Codec.java\n+++ b/src/java/org/apache/commons/codec/net/RFC1522Codec.java\n \n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n+import org.apache.commons.codec.binary.StringBytesUtils;\n \n /**\n  * <p>\n         buffer.append(getEncoding()); \n         buffer.append('?');\n         byte [] rawdata = doEncoding(text.getBytes(charset)); \n-        buffer.append(new String(rawdata, CharacterEncodingNames.US_ASCII));\n+        buffer.append(StringBytesUtils.newStringUsAscii(rawdata));\n         buffer.append(\"?=\"); \n         return buffer.toString();\n     }\n         }\n         from = to + 1;\n         to = text.indexOf(\"?\", from);\n-        byte[] data = text.substring(from, to).getBytes(CharacterEncodingNames.US_ASCII);\n+        byte[] data = StringBytesUtils.getBytesUsAscii(text.substring(from, to));\n         data = doDecoding(data); \n         return new String(data, charset);\n     }\n--- a/src/java/org/apache/commons/codec/net/URLCodec.java\n+++ b/src/java/org/apache/commons/codec/net/URLCodec.java\n import org.apache.commons.codec.BinaryEncoder;\n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n+import org.apache.commons.codec.RequiredCharsetNames;\n import org.apache.commons.codec.StringDecoder;\n import org.apache.commons.codec.StringEncoder;\n+import org.apache.commons.codec.binary.StringBytesUtils;\n \n /**\n  * <p>Implements the 'www-form-urlencoded' encoding scheme, \n      * Default constructor.\n      */\n     public URLCodec() {\n-        this(CharacterEncodingNames.UTF8);\n+        this(RequiredCharsetNames.UTF_8);\n     }\n \n     /**\n         return decodeUrl(bytes);\n     }\n \n-\n-    /**\n-     * Encodes a string into its URL safe form using the specified\n-     * string charset. Unsafe characters are escaped.\n-     *\n-     * @param pString string to convert to a URL safe form\n-     * @param charset the charset for pString\n+    /**\n+     * Encodes a string into its URL safe form using the specified string charset. Unsafe characters are escaped.\n+     * \n+     * @param pString\n+     *            string to convert to a URL safe form\n+     * @param charset\n+     *            the charset for pString\n      * @return URL safe string\n-     * @throws UnsupportedEncodingException Thrown if charset is not\n-     *                                      supported \n-     */\n-    public String encode(String pString, String charset) \n-        throws UnsupportedEncodingException  \n-    {\n+     * @throws UnsupportedEncodingException\n+     *             Thrown if charset is not supported\n+     */\n+    public String encode(String pString, String charset) throws UnsupportedEncodingException {\n         if (pString == null) {\n             return null;\n         }\n-        return new String(encode(pString.getBytes(charset)), CharacterEncodingNames.US_ASCII);\n-    }\n-\n+        return StringBytesUtils.newStringUsAscii(encode(pString.getBytes(charset)));\n+    }\n \n     /**\n      * Encodes a string into its URL safe form using the default string \n      * @throws UnsupportedEncodingException Thrown if charset is not\n      *                                      supported \n      */\n-    public String decode(String pString, String charset) \n-        throws DecoderException, UnsupportedEncodingException \n-    {\n+    public String decode(String pString, String charset) throws DecoderException, UnsupportedEncodingException {\n         if (pString == null) {\n             return null;\n         }\n-        return new String(decode(pString.getBytes(CharacterEncodingNames.US_ASCII)), charset);\n-    }\n-\n+        return new String(decode(StringBytesUtils.getBytesUsAscii(pString)), charset);\n+    }\n \n     /**\n      * Decodes a URL safe string into its original form using the default\n--- /dev/null\n+++ b/src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java\n+/*\n+ * Copyright (C) 1993-2003 SEAGULL\n+ * \n+ * RequiredCharsetNamesTest.java\n+ * Created on Jul 20, 2009, 6:08:58 PM\n+ * \n+ */\n+\n+package org.apache.commons.codec;\n+\n+import junit.framework.Assert;\n+import junit.framework.TestCase;\n+\n+/**\n+ * Sanity checks.\n+ * \n+ * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n+ * @version $Id: $\n+ */\n+public class RequiredCharsetNamesTest extends TestCase {\n+\n+    public void testIso8859_1() {\n+        Assert.assertEquals(\"ISO-8859-1\", RequiredCharsetNames.ISO_8859_1);\n+    }\n+\n+    public void testUsAscii() {\n+        Assert.assertEquals(\"US-ASCII\", RequiredCharsetNames.US_ASCII);\n+    }\n+\n+    public void testUtf16() {\n+        Assert.assertEquals(\"UTF-16\", RequiredCharsetNames.UTF_16);\n+    }\n+\n+    public void testUtf16Be() {\n+        Assert.assertEquals(\"UTF-16BE\", RequiredCharsetNames.UTF_16BE);\n+    }\n+\n+    public void testUtf16Le() {\n+        Assert.assertEquals(\"UTF-16LE\", RequiredCharsetNames.UTF_16LE);\n+    }\n+\n+    public void testUtf8() {\n+        Assert.assertEquals(\"UTF-8\", RequiredCharsetNames.UTF_8);\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java\n+++ b/src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java\n \n     private static final String STRING_FIXTURE = \"Hello World\";\n \n-    private static final String UTF_8_NAME = \"UTF-8\";\n-\n     /**\n      * Construct a new instance of this test case.\n      * \n      */\n     public void testBase64InputStreamByChunk() throws Exception {\n         // Hello World test.\n-        byte[] encoded = \"SGVsbG8gV29ybGQ=\\r\\n\".getBytes(UTF_8_NAME);\n-        byte[] decoded = STRING_FIXTURE.getBytes(UTF_8_NAME);\n+        byte[] encoded = StringBytesUtils.getBytesUtf8(\"SGVsbG8gV29ybGQ=\\r\\n\");\n+        byte[] decoded = StringBytesUtils.getBytesUtf8(STRING_FIXTURE);\n         testByChunk(encoded, decoded, 76, CRLF);\n \n         // Single Byte test.\n-        encoded = \"AA==\\r\\n\".getBytes(UTF_8_NAME);\n+        encoded = StringBytesUtils.getBytesUtf8(\"AA==\\r\\n\");\n         decoded = new byte[]{(byte) 0};\n         testByChunk(encoded, decoded, 76, CRLF);\n \n         // OpenSSL interop test.\n-        encoded = Base64TestData.ENCODED.getBytes(UTF_8_NAME);\n+        encoded = StringBytesUtils.getBytesUtf8(Base64TestData.ENCODED);\n         decoded = Base64TestData.DECODED;\n         testByChunk(encoded, decoded, 64, LF);\n \n         // Single Line test.\n         String singleLine = Base64TestData.ENCODED.replaceAll(\"\\n\", \"\");\n-        encoded = singleLine.getBytes(UTF_8_NAME);\n+        encoded = StringBytesUtils.getBytesUtf8(singleLine);\n         decoded = Base64TestData.DECODED;\n         testByChunk(encoded, decoded, 0, LF);\n \n      */\n     public void testBase64InputStreamByteByByte() throws Exception {\n         // Hello World test.\n-        byte[] encoded = \"SGVsbG8gV29ybGQ=\\r\\n\".getBytes(UTF_8_NAME);\n-        byte[] decoded = STRING_FIXTURE.getBytes(UTF_8_NAME);\n+        byte[] encoded = StringBytesUtils.getBytesUtf8(\"SGVsbG8gV29ybGQ=\\r\\n\");\n+        byte[] decoded = StringBytesUtils.getBytesUtf8(STRING_FIXTURE);\n         testByteByByte(encoded, decoded, 76, CRLF);\n \n         // Single Byte test.\n-        encoded = \"AA==\\r\\n\".getBytes(UTF_8_NAME);\n+        encoded = StringBytesUtils.getBytesUtf8(\"AA==\\r\\n\");\n         decoded = new byte[]{(byte) 0};\n         testByteByByte(encoded, decoded, 76, CRLF);\n \n         // OpenSSL interop test.\n-        encoded = Base64TestData.ENCODED.getBytes(UTF_8_NAME);\n+        encoded = StringBytesUtils.getBytesUtf8(Base64TestData.ENCODED);\n         decoded = Base64TestData.DECODED;\n         testByteByByte(encoded, decoded, 64, LF);\n \n         // Single Line test.\n         String singleLine = Base64TestData.ENCODED.replaceAll(\"\\n\", \"\");\n-        encoded = singleLine.getBytes(UTF_8_NAME);\n+        encoded = StringBytesUtils.getBytesUtf8(singleLine);\n         decoded = Base64TestData.DECODED;\n         testByteByByte(encoded, decoded, 0, LF);\n \n      * @throws Exception\n      */\n     public void testMarkSupported() throws Exception {\n-        byte[] decoded = STRING_FIXTURE.getBytes(UTF_8_NAME);\n+        byte[] decoded = StringBytesUtils.getBytesUtf8(STRING_FIXTURE);\n         ByteArrayInputStream bin = new ByteArrayInputStream(decoded);\n         Base64InputStream in = new Base64InputStream(bin, true, 4, new byte[]{0, 0, 0});\n         // Always returns false for now.\n      * @throws Exception\n      */\n     public void testRead0() throws Exception {\n-        byte[] decoded = STRING_FIXTURE.getBytes(UTF_8_NAME);\n+        byte[] decoded = StringBytesUtils.getBytesUtf8(STRING_FIXTURE);\n         byte[] buf = new byte[1024];\n         int bytesRead = 0;\n         ByteArrayInputStream bin = new ByteArrayInputStream(decoded);\n      *             for some failure scenarios.\n      */\n     public void testReadNull() throws Exception {\n-        byte[] decoded = STRING_FIXTURE.getBytes(UTF_8_NAME);\n+        byte[] decoded = StringBytesUtils.getBytesUtf8(STRING_FIXTURE);\n         ByteArrayInputStream bin = new ByteArrayInputStream(decoded);\n         Base64InputStream in = new Base64InputStream(bin, true, 4, new byte[]{0, 0, 0});\n         try {\n      * @throws Exception\n      */\n     public void testReadOutOfBounds() throws Exception {\n-        byte[] decoded = STRING_FIXTURE.getBytes(UTF_8_NAME);\n+        byte[] decoded = StringBytesUtils.getBytesUtf8(STRING_FIXTURE);\n         byte[] buf = new byte[1024];\n         ByteArrayInputStream bin = new ByteArrayInputStream(decoded);\n         Base64InputStream in = new Base64InputStream(bin, true, 4, new byte[]{0, 0, 0});\n             fail(\"Base64InputStream.read(buf, buf.length - 1, 2) throws IndexOutOfBoundsException\");\n         } catch (IndexOutOfBoundsException e) {\n             // Expected\n-        }        \n+        }\n     }\n }\n--- a/src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java\n+++ b/src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java\n \n     private static final String STRING_FIXTURE = \"Hello World\";\n \n-    private static final String UTF_8_NAME = \"UTF-8\";\n-\n     /**\n      * Construct a new instance of this test case.\n      * \n      */\n     public void testBase64OutputStreamByChunk() throws Exception {\n         // Hello World test.\n-        byte[] encoded = \"SGVsbG8gV29ybGQ=\\r\\n\".getBytes(UTF_8_NAME);\n-        byte[] decoded = STRING_FIXTURE.getBytes(UTF_8_NAME);\n+        byte[] encoded = StringBytesUtils.getBytesUtf8(\"SGVsbG8gV29ybGQ=\\r\\n\");\n+        byte[] decoded = StringBytesUtils.getBytesUtf8(STRING_FIXTURE);\n         testByChunk(encoded, decoded, 76, CRLF);\n \n         // Single Byte test.\n-        encoded = \"AA==\\r\\n\".getBytes(UTF_8_NAME);\n+        encoded = StringBytesUtils.getBytesUtf8(\"AA==\\r\\n\");\n         decoded = new byte[]{(byte) 0};\n         testByChunk(encoded, decoded, 76, CRLF);\n \n         // OpenSSL interop test.\n-        encoded = Base64TestData.ENCODED.getBytes(UTF_8_NAME);\n+        encoded = StringBytesUtils.getBytesUtf8(Base64TestData.ENCODED);\n         decoded = Base64TestData.DECODED;\n         testByChunk(encoded, decoded, 64, LF);\n \n         // Single Line test.\n         String singleLine = Base64TestData.ENCODED.replaceAll(\"\\n\", \"\");\n-        encoded = singleLine.getBytes(UTF_8_NAME);\n+        encoded = StringBytesUtils.getBytesUtf8(singleLine);\n         decoded = Base64TestData.DECODED;\n         testByChunk(encoded, decoded, 0, LF);\n \n      */\n     public void testBase64OutputStreamByteByByte() throws Exception {\n         // Hello World test.\n-        byte[] encoded = \"SGVsbG8gV29ybGQ=\\r\\n\".getBytes(UTF_8_NAME);\n-        byte[] decoded = STRING_FIXTURE.getBytes(UTF_8_NAME);\n+        byte[] encoded = StringBytesUtils.getBytesUtf8(\"SGVsbG8gV29ybGQ=\\r\\n\");\n+        byte[] decoded = StringBytesUtils.getBytesUtf8(STRING_FIXTURE);\n         testByteByByte(encoded, decoded, 76, CRLF);\n \n         // Single Byte test.\n-        encoded = \"AA==\\r\\n\".getBytes(\"UTF-8\");\n+        encoded = StringBytesUtils.getBytesUtf8(\"AA==\\r\\n\");\n         decoded = new byte[]{(byte) 0};\n         testByteByByte(encoded, decoded, 76, CRLF);\n \n         // OpenSSL interop test.\n-        encoded = Base64TestData.ENCODED.getBytes(UTF_8_NAME);\n+        encoded = StringBytesUtils.getBytesUtf8(Base64TestData.ENCODED);\n         decoded = Base64TestData.DECODED;\n         testByteByByte(encoded, decoded, 64, LF);\n \n         // Single Line test.\n         String singleLine = Base64TestData.ENCODED.replaceAll(\"\\n\", \"\");\n-        encoded = singleLine.getBytes(UTF_8_NAME);\n+        encoded = StringBytesUtils.getBytesUtf8(singleLine);\n         decoded = Base64TestData.DECODED;\n         testByteByByte(encoded, decoded, 0, LF);\n \n         for (int i = 0; i < encoded.length; i++) {\n             out.write(encoded[i]);\n             out.flush();\n-        }                      \n-        out.close();\n-        output = byteOut.toByteArray();\n-        assertTrue(\"Streaming byte-by-byte flush() base64 decode\", Arrays.equals(output, decoded));        \n+        }\n+        out.close();\n+        output = byteOut.toByteArray();\n+        assertTrue(\"Streaming byte-by-byte flush() base64 decode\", Arrays.equals(output, decoded));\n \n         // I always wanted to do this! (wrap encoder with decoder etc etc).\n         byteOut = new ByteArrayOutputStream();\n             fail(\"Expected Base64OutputStream.write(buf, buf.length - 1, 2) to throw a IndexOutOfBoundsException\");\n         } catch (IndexOutOfBoundsException ioobe) {\n             // Expected\n-        }        \n+        }\n     }\n \n     /**\n--- a/src/test/org/apache/commons/codec/binary/Base64Test.java\n+++ b/src/test/org/apache/commons/codec/binary/Base64Test.java\n \n package org.apache.commons.codec.binary;\n \n-\n import java.io.UnsupportedEncodingException;\n import java.math.BigInteger;\n import java.util.Arrays;\n \n     /**\n      * Construct a new instance of this test case.\n-     *\n-     * @param name Name of the test case\n+     * \n+     * @param name\n+     *            Name of the test case\n      */\n     public Base64Test(String name) {\n         super(name);\n     }\n \n-\n-    /**\n-     *  Test the Base64 implementation\n+    /**\n+     * Test the Base64 implementation\n      */\n     public void testBase64() {\n         String content = \"Hello World\";\n     public void testDecodePadMarkerIndex2() {\n         assertEquals(\"A\", new String(Base64.decodeBase64(\"QQ==\".getBytes())));\n     }\n-    \n+\n     /**\n      * Tests conditional branches for \"marker1\" test.\n      */\n         assertEquals(\"AA\", new String(Base64.decodeBase64(\"QUE=\".getBytes())));\n         assertEquals(\"AAA\", new String(Base64.decodeBase64(\"QUFB\".getBytes())));\n     }\n-    \n+\n     public void testDecodePadOnly() {\n         assertTrue(Base64.decodeBase64(\"====\".getBytes()).length == 0);\n         assertEquals(\"\", new String(Base64.decodeBase64(\"====\".getBytes())));\n         assertTrue(Base64.decodeBase64(\"=\".getBytes()).length == 0);\n         assertTrue(Base64.decodeBase64(\"\".getBytes()).length == 0);\n     }\n-    \n+\n     public void testDecodePadOnlyChunked() {\n         assertTrue(Base64.decodeBase64(\"====\\n\".getBytes()).length == 0);\n         assertEquals(\"\", new String(Base64.decodeBase64(\"====\\n\".getBytes())));\n         assertTrue(Base64.decodeBase64(\"=\\n\".getBytes()).length == 0);\n         assertTrue(Base64.decodeBase64(\"\\n\".getBytes()).length == 0);\n     }\n-    \n+\n     // encode/decode random arrays from size 0 to size 11\n     public void testEncodeDecodeSmall() {\n-        for(int i=0;i<12;i++) {\n+        for (int i = 0; i < 12; i++) {\n             byte[] data = new byte[i];\n             this.getRandom().nextBytes(data);\n-            byte[] enc =  Base64.encodeBase64(data);\n-            assertTrue(\"\\\"\" + (new String(enc)) + \"\\\" is Base64 data.\",Base64.isArrayByteBase64(enc) );\n+            byte[] enc = Base64.encodeBase64(data);\n+            assertTrue(\"\\\"\" + (new String(enc)) + \"\\\" is Base64 data.\", Base64.isArrayByteBase64(enc));\n             byte[] data2 = Base64.decodeBase64(enc);\n-            assertTrue(toString(data) + \" equals \" + toString(data2), Arrays.equals(data,data2));\n+            assertTrue(toString(data) + \" equals \" + toString(data2), Arrays.equals(data, data2));\n         }\n     }\n \n     // encode/decode a large random array\n     public void testEncodeDecodeRandom() {\n-        for(int i=1;i<5;i++) {\n-            byte[] data = new byte[this.getRandom().nextInt(10000)+1];\n+        for (int i = 1; i < 5; i++) {\n+            byte[] data = new byte[this.getRandom().nextInt(10000) + 1];\n             this.getRandom().nextBytes(data);\n-            byte[] enc =  Base64.encodeBase64(data);\n+            byte[] enc = Base64.encodeBase64(data);\n             assertTrue(Base64.isArrayByteBase64(enc));\n             byte[] data2 = Base64.decodeBase64(enc);\n-            assertTrue(Arrays.equals(data,data2));\n+            assertTrue(Arrays.equals(data, data2));\n         }\n     }\n \n      * Tests RFC 2045 section 2.1 CRLF definition.\n      */\n     public void testRfc2045Section2Dot1CrLfDefinition() {\n-        assertTrue(Arrays.equals(new byte[] {13, 10}, Base64.CHUNK_SEPARATOR));\n+        assertTrue(Arrays.equals(new byte[]{13, 10}, Base64.CHUNK_SEPARATOR));\n     }\n \n     /**\n     }\n \n     public void testSingletons() {\n-        assertEquals(\"AA==\",new String(Base64.encodeBase64(new byte[] { (byte)0 })));\n-        assertEquals(\"AQ==\",new String(Base64.encodeBase64(new byte[] { (byte)1 })));\n-        assertEquals(\"Ag==\",new String(Base64.encodeBase64(new byte[] { (byte)2 })));\n-        assertEquals(\"Aw==\",new String(Base64.encodeBase64(new byte[] { (byte)3 })));\n-        assertEquals(\"BA==\",new String(Base64.encodeBase64(new byte[] { (byte)4 })));\n-        assertEquals(\"BQ==\",new String(Base64.encodeBase64(new byte[] { (byte)5 })));\n-        assertEquals(\"Bg==\",new String(Base64.encodeBase64(new byte[] { (byte)6 })));\n-        assertEquals(\"Bw==\",new String(Base64.encodeBase64(new byte[] { (byte)7 })));\n-        assertEquals(\"CA==\",new String(Base64.encodeBase64(new byte[] { (byte)8 })));\n-        assertEquals(\"CQ==\",new String(Base64.encodeBase64(new byte[] { (byte)9 })));\n-        assertEquals(\"Cg==\",new String(Base64.encodeBase64(new byte[] { (byte)10 })));\n-        assertEquals(\"Cw==\",new String(Base64.encodeBase64(new byte[] { (byte)11 })));\n-        assertEquals(\"DA==\",new String(Base64.encodeBase64(new byte[] { (byte)12 })));\n-        assertEquals(\"DQ==\",new String(Base64.encodeBase64(new byte[] { (byte)13 })));\n-        assertEquals(\"Dg==\",new String(Base64.encodeBase64(new byte[] { (byte)14 })));\n-        assertEquals(\"Dw==\",new String(Base64.encodeBase64(new byte[] { (byte)15 })));\n-        assertEquals(\"EA==\",new String(Base64.encodeBase64(new byte[] { (byte)16 })));\n-        assertEquals(\"EQ==\",new String(Base64.encodeBase64(new byte[] { (byte)17 })));\n-        assertEquals(\"Eg==\",new String(Base64.encodeBase64(new byte[] { (byte)18 })));\n-        assertEquals(\"Ew==\",new String(Base64.encodeBase64(new byte[] { (byte)19 })));\n-        assertEquals(\"FA==\",new String(Base64.encodeBase64(new byte[] { (byte)20 })));\n-        assertEquals(\"FQ==\",new String(Base64.encodeBase64(new byte[] { (byte)21 })));\n-        assertEquals(\"Fg==\",new String(Base64.encodeBase64(new byte[] { (byte)22 })));\n-        assertEquals(\"Fw==\",new String(Base64.encodeBase64(new byte[] { (byte)23 })));\n-        assertEquals(\"GA==\",new String(Base64.encodeBase64(new byte[] { (byte)24 })));\n-        assertEquals(\"GQ==\",new String(Base64.encodeBase64(new byte[] { (byte)25 })));\n-        assertEquals(\"Gg==\",new String(Base64.encodeBase64(new byte[] { (byte)26 })));\n-        assertEquals(\"Gw==\",new String(Base64.encodeBase64(new byte[] { (byte)27 })));\n-        assertEquals(\"HA==\",new String(Base64.encodeBase64(new byte[] { (byte)28 })));\n-        assertEquals(\"HQ==\",new String(Base64.encodeBase64(new byte[] { (byte)29 })));\n-        assertEquals(\"Hg==\",new String(Base64.encodeBase64(new byte[] { (byte)30 })));\n-        assertEquals(\"Hw==\",new String(Base64.encodeBase64(new byte[] { (byte)31 })));\n-        assertEquals(\"IA==\",new String(Base64.encodeBase64(new byte[] { (byte)32 })));\n-        assertEquals(\"IQ==\",new String(Base64.encodeBase64(new byte[] { (byte)33 })));\n-        assertEquals(\"Ig==\",new String(Base64.encodeBase64(new byte[] { (byte)34 })));\n-        assertEquals(\"Iw==\",new String(Base64.encodeBase64(new byte[] { (byte)35 })));\n-        assertEquals(\"JA==\",new String(Base64.encodeBase64(new byte[] { (byte)36 })));\n-        assertEquals(\"JQ==\",new String(Base64.encodeBase64(new byte[] { (byte)37 })));\n-        assertEquals(\"Jg==\",new String(Base64.encodeBase64(new byte[] { (byte)38 })));\n-        assertEquals(\"Jw==\",new String(Base64.encodeBase64(new byte[] { (byte)39 })));\n-        assertEquals(\"KA==\",new String(Base64.encodeBase64(new byte[] { (byte)40 })));\n-        assertEquals(\"KQ==\",new String(Base64.encodeBase64(new byte[] { (byte)41 })));\n-        assertEquals(\"Kg==\",new String(Base64.encodeBase64(new byte[] { (byte)42 })));\n-        assertEquals(\"Kw==\",new String(Base64.encodeBase64(new byte[] { (byte)43 })));\n-        assertEquals(\"LA==\",new String(Base64.encodeBase64(new byte[] { (byte)44 })));\n-        assertEquals(\"LQ==\",new String(Base64.encodeBase64(new byte[] { (byte)45 })));\n-        assertEquals(\"Lg==\",new String(Base64.encodeBase64(new byte[] { (byte)46 })));\n-        assertEquals(\"Lw==\",new String(Base64.encodeBase64(new byte[] { (byte)47 })));\n-        assertEquals(\"MA==\",new String(Base64.encodeBase64(new byte[] { (byte)48 })));\n-        assertEquals(\"MQ==\",new String(Base64.encodeBase64(new byte[] { (byte)49 })));\n-        assertEquals(\"Mg==\",new String(Base64.encodeBase64(new byte[] { (byte)50 })));\n-        assertEquals(\"Mw==\",new String(Base64.encodeBase64(new byte[] { (byte)51 })));\n-        assertEquals(\"NA==\",new String(Base64.encodeBase64(new byte[] { (byte)52 })));\n-        assertEquals(\"NQ==\",new String(Base64.encodeBase64(new byte[] { (byte)53 })));\n-        assertEquals(\"Ng==\",new String(Base64.encodeBase64(new byte[] { (byte)54 })));\n-        assertEquals(\"Nw==\",new String(Base64.encodeBase64(new byte[] { (byte)55 })));\n-        assertEquals(\"OA==\",new String(Base64.encodeBase64(new byte[] { (byte)56 })));\n-        assertEquals(\"OQ==\",new String(Base64.encodeBase64(new byte[] { (byte)57 })));\n-        assertEquals(\"Og==\",new String(Base64.encodeBase64(new byte[] { (byte)58 })));\n-        assertEquals(\"Ow==\",new String(Base64.encodeBase64(new byte[] { (byte)59 })));\n-        assertEquals(\"PA==\",new String(Base64.encodeBase64(new byte[] { (byte)60 })));\n-        assertEquals(\"PQ==\",new String(Base64.encodeBase64(new byte[] { (byte)61 })));\n-        assertEquals(\"Pg==\",new String(Base64.encodeBase64(new byte[] { (byte)62 })));\n-        assertEquals(\"Pw==\",new String(Base64.encodeBase64(new byte[] { (byte)63 })));\n-        assertEquals(\"QA==\",new String(Base64.encodeBase64(new byte[] { (byte)64 })));\n-        assertEquals(\"QQ==\",new String(Base64.encodeBase64(new byte[] { (byte)65 })));\n-        assertEquals(\"Qg==\",new String(Base64.encodeBase64(new byte[] { (byte)66 })));\n-        assertEquals(\"Qw==\",new String(Base64.encodeBase64(new byte[] { (byte)67 })));\n-        assertEquals(\"RA==\",new String(Base64.encodeBase64(new byte[] { (byte)68 })));\n-        assertEquals(\"RQ==\",new String(Base64.encodeBase64(new byte[] { (byte)69 })));\n-        assertEquals(\"Rg==\",new String(Base64.encodeBase64(new byte[] { (byte)70 })));\n-        assertEquals(\"Rw==\",new String(Base64.encodeBase64(new byte[] { (byte)71 })));\n-        assertEquals(\"SA==\",new String(Base64.encodeBase64(new byte[] { (byte)72 })));\n-        assertEquals(\"SQ==\",new String(Base64.encodeBase64(new byte[] { (byte)73 })));\n-        assertEquals(\"Sg==\",new String(Base64.encodeBase64(new byte[] { (byte)74 })));\n-        assertEquals(\"Sw==\",new String(Base64.encodeBase64(new byte[] { (byte)75 })));\n-        assertEquals(\"TA==\",new String(Base64.encodeBase64(new byte[] { (byte)76 })));\n-        assertEquals(\"TQ==\",new String(Base64.encodeBase64(new byte[] { (byte)77 })));\n-        assertEquals(\"Tg==\",new String(Base64.encodeBase64(new byte[] { (byte)78 })));\n-        assertEquals(\"Tw==\",new String(Base64.encodeBase64(new byte[] { (byte)79 })));\n-        assertEquals(\"UA==\",new String(Base64.encodeBase64(new byte[] { (byte)80 })));\n-        assertEquals(\"UQ==\",new String(Base64.encodeBase64(new byte[] { (byte)81 })));\n-        assertEquals(\"Ug==\",new String(Base64.encodeBase64(new byte[] { (byte)82 })));\n-        assertEquals(\"Uw==\",new String(Base64.encodeBase64(new byte[] { (byte)83 })));\n-        assertEquals(\"VA==\",new String(Base64.encodeBase64(new byte[] { (byte)84 })));\n-        assertEquals(\"VQ==\",new String(Base64.encodeBase64(new byte[] { (byte)85 })));\n-        assertEquals(\"Vg==\",new String(Base64.encodeBase64(new byte[] { (byte)86 })));\n-        assertEquals(\"Vw==\",new String(Base64.encodeBase64(new byte[] { (byte)87 })));\n-        assertEquals(\"WA==\",new String(Base64.encodeBase64(new byte[] { (byte)88 })));\n-        assertEquals(\"WQ==\",new String(Base64.encodeBase64(new byte[] { (byte)89 })));\n-        assertEquals(\"Wg==\",new String(Base64.encodeBase64(new byte[] { (byte)90 })));\n-        assertEquals(\"Ww==\",new String(Base64.encodeBase64(new byte[] { (byte)91 })));\n-        assertEquals(\"XA==\",new String(Base64.encodeBase64(new byte[] { (byte)92 })));\n-        assertEquals(\"XQ==\",new String(Base64.encodeBase64(new byte[] { (byte)93 })));\n-        assertEquals(\"Xg==\",new String(Base64.encodeBase64(new byte[] { (byte)94 })));\n-        assertEquals(\"Xw==\",new String(Base64.encodeBase64(new byte[] { (byte)95 })));\n-        assertEquals(\"YA==\",new String(Base64.encodeBase64(new byte[] { (byte)96 })));\n-        assertEquals(\"YQ==\",new String(Base64.encodeBase64(new byte[] { (byte)97 })));\n-        assertEquals(\"Yg==\",new String(Base64.encodeBase64(new byte[] { (byte)98 })));\n-        assertEquals(\"Yw==\",new String(Base64.encodeBase64(new byte[] { (byte)99 })));\n-        assertEquals(\"ZA==\",new String(Base64.encodeBase64(new byte[] { (byte)100 })));\n-        assertEquals(\"ZQ==\",new String(Base64.encodeBase64(new byte[] { (byte)101 })));\n-        assertEquals(\"Zg==\",new String(Base64.encodeBase64(new byte[] { (byte)102 })));\n-        assertEquals(\"Zw==\",new String(Base64.encodeBase64(new byte[] { (byte)103 })));\n-        assertEquals(\"aA==\",new String(Base64.encodeBase64(new byte[] { (byte)104 })));\n-        for (int i = -128; i<=127; i++){\n-            byte test[]= {(byte)i};\n-            assertTrue(Arrays.equals(test,Base64.decodeBase64(Base64.encodeBase64(test))));\n+        assertEquals(\"AA==\", new String(Base64.encodeBase64(new byte[]{(byte) 0})));\n+        assertEquals(\"AQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 1})));\n+        assertEquals(\"Ag==\", new String(Base64.encodeBase64(new byte[]{(byte) 2})));\n+        assertEquals(\"Aw==\", new String(Base64.encodeBase64(new byte[]{(byte) 3})));\n+        assertEquals(\"BA==\", new String(Base64.encodeBase64(new byte[]{(byte) 4})));\n+        assertEquals(\"BQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 5})));\n+        assertEquals(\"Bg==\", new String(Base64.encodeBase64(new byte[]{(byte) 6})));\n+        assertEquals(\"Bw==\", new String(Base64.encodeBase64(new byte[]{(byte) 7})));\n+        assertEquals(\"CA==\", new String(Base64.encodeBase64(new byte[]{(byte) 8})));\n+        assertEquals(\"CQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 9})));\n+        assertEquals(\"Cg==\", new String(Base64.encodeBase64(new byte[]{(byte) 10})));\n+        assertEquals(\"Cw==\", new String(Base64.encodeBase64(new byte[]{(byte) 11})));\n+        assertEquals(\"DA==\", new String(Base64.encodeBase64(new byte[]{(byte) 12})));\n+        assertEquals(\"DQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 13})));\n+        assertEquals(\"Dg==\", new String(Base64.encodeBase64(new byte[]{(byte) 14})));\n+        assertEquals(\"Dw==\", new String(Base64.encodeBase64(new byte[]{(byte) 15})));\n+        assertEquals(\"EA==\", new String(Base64.encodeBase64(new byte[]{(byte) 16})));\n+        assertEquals(\"EQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 17})));\n+        assertEquals(\"Eg==\", new String(Base64.encodeBase64(new byte[]{(byte) 18})));\n+        assertEquals(\"Ew==\", new String(Base64.encodeBase64(new byte[]{(byte) 19})));\n+        assertEquals(\"FA==\", new String(Base64.encodeBase64(new byte[]{(byte) 20})));\n+        assertEquals(\"FQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 21})));\n+        assertEquals(\"Fg==\", new String(Base64.encodeBase64(new byte[]{(byte) 22})));\n+        assertEquals(\"Fw==\", new String(Base64.encodeBase64(new byte[]{(byte) 23})));\n+        assertEquals(\"GA==\", new String(Base64.encodeBase64(new byte[]{(byte) 24})));\n+        assertEquals(\"GQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 25})));\n+        assertEquals(\"Gg==\", new String(Base64.encodeBase64(new byte[]{(byte) 26})));\n+        assertEquals(\"Gw==\", new String(Base64.encodeBase64(new byte[]{(byte) 27})));\n+        assertEquals(\"HA==\", new String(Base64.encodeBase64(new byte[]{(byte) 28})));\n+        assertEquals(\"HQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 29})));\n+        assertEquals(\"Hg==\", new String(Base64.encodeBase64(new byte[]{(byte) 30})));\n+        assertEquals(\"Hw==\", new String(Base64.encodeBase64(new byte[]{(byte) 31})));\n+        assertEquals(\"IA==\", new String(Base64.encodeBase64(new byte[]{(byte) 32})));\n+        assertEquals(\"IQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 33})));\n+        assertEquals(\"Ig==\", new String(Base64.encodeBase64(new byte[]{(byte) 34})));\n+        assertEquals(\"Iw==\", new String(Base64.encodeBase64(new byte[]{(byte) 35})));\n+        assertEquals(\"JA==\", new String(Base64.encodeBase64(new byte[]{(byte) 36})));\n+        assertEquals(\"JQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 37})));\n+        assertEquals(\"Jg==\", new String(Base64.encodeBase64(new byte[]{(byte) 38})));\n+        assertEquals(\"Jw==\", new String(Base64.encodeBase64(new byte[]{(byte) 39})));\n+        assertEquals(\"KA==\", new String(Base64.encodeBase64(new byte[]{(byte) 40})));\n+        assertEquals(\"KQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 41})));\n+        assertEquals(\"Kg==\", new String(Base64.encodeBase64(new byte[]{(byte) 42})));\n+        assertEquals(\"Kw==\", new String(Base64.encodeBase64(new byte[]{(byte) 43})));\n+        assertEquals(\"LA==\", new String(Base64.encodeBase64(new byte[]{(byte) 44})));\n+        assertEquals(\"LQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 45})));\n+        assertEquals(\"Lg==\", new String(Base64.encodeBase64(new byte[]{(byte) 46})));\n+        assertEquals(\"Lw==\", new String(Base64.encodeBase64(new byte[]{(byte) 47})));\n+        assertEquals(\"MA==\", new String(Base64.encodeBase64(new byte[]{(byte) 48})));\n+        assertEquals(\"MQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 49})));\n+        assertEquals(\"Mg==\", new String(Base64.encodeBase64(new byte[]{(byte) 50})));\n+        assertEquals(\"Mw==\", new String(Base64.encodeBase64(new byte[]{(byte) 51})));\n+        assertEquals(\"NA==\", new String(Base64.encodeBase64(new byte[]{(byte) 52})));\n+        assertEquals(\"NQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 53})));\n+        assertEquals(\"Ng==\", new String(Base64.encodeBase64(new byte[]{(byte) 54})));\n+        assertEquals(\"Nw==\", new String(Base64.encodeBase64(new byte[]{(byte) 55})));\n+        assertEquals(\"OA==\", new String(Base64.encodeBase64(new byte[]{(byte) 56})));\n+        assertEquals(\"OQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 57})));\n+        assertEquals(\"Og==\", new String(Base64.encodeBase64(new byte[]{(byte) 58})));\n+        assertEquals(\"Ow==\", new String(Base64.encodeBase64(new byte[]{(byte) 59})));\n+        assertEquals(\"PA==\", new String(Base64.encodeBase64(new byte[]{(byte) 60})));\n+        assertEquals(\"PQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 61})));\n+        assertEquals(\"Pg==\", new String(Base64.encodeBase64(new byte[]{(byte) 62})));\n+        assertEquals(\"Pw==\", new String(Base64.encodeBase64(new byte[]{(byte) 63})));\n+        assertEquals(\"QA==\", new String(Base64.encodeBase64(new byte[]{(byte) 64})));\n+        assertEquals(\"QQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 65})));\n+        assertEquals(\"Qg==\", new String(Base64.encodeBase64(new byte[]{(byte) 66})));\n+        assertEquals(\"Qw==\", new String(Base64.encodeBase64(new byte[]{(byte) 67})));\n+        assertEquals(\"RA==\", new String(Base64.encodeBase64(new byte[]{(byte) 68})));\n+        assertEquals(\"RQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 69})));\n+        assertEquals(\"Rg==\", new String(Base64.encodeBase64(new byte[]{(byte) 70})));\n+        assertEquals(\"Rw==\", new String(Base64.encodeBase64(new byte[]{(byte) 71})));\n+        assertEquals(\"SA==\", new String(Base64.encodeBase64(new byte[]{(byte) 72})));\n+        assertEquals(\"SQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 73})));\n+        assertEquals(\"Sg==\", new String(Base64.encodeBase64(new byte[]{(byte) 74})));\n+        assertEquals(\"Sw==\", new String(Base64.encodeBase64(new byte[]{(byte) 75})));\n+        assertEquals(\"TA==\", new String(Base64.encodeBase64(new byte[]{(byte) 76})));\n+        assertEquals(\"TQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 77})));\n+        assertEquals(\"Tg==\", new String(Base64.encodeBase64(new byte[]{(byte) 78})));\n+        assertEquals(\"Tw==\", new String(Base64.encodeBase64(new byte[]{(byte) 79})));\n+        assertEquals(\"UA==\", new String(Base64.encodeBase64(new byte[]{(byte) 80})));\n+        assertEquals(\"UQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 81})));\n+        assertEquals(\"Ug==\", new String(Base64.encodeBase64(new byte[]{(byte) 82})));\n+        assertEquals(\"Uw==\", new String(Base64.encodeBase64(new byte[]{(byte) 83})));\n+        assertEquals(\"VA==\", new String(Base64.encodeBase64(new byte[]{(byte) 84})));\n+        assertEquals(\"VQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 85})));\n+        assertEquals(\"Vg==\", new String(Base64.encodeBase64(new byte[]{(byte) 86})));\n+        assertEquals(\"Vw==\", new String(Base64.encodeBase64(new byte[]{(byte) 87})));\n+        assertEquals(\"WA==\", new String(Base64.encodeBase64(new byte[]{(byte) 88})));\n+        assertEquals(\"WQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 89})));\n+        assertEquals(\"Wg==\", new String(Base64.encodeBase64(new byte[]{(byte) 90})));\n+        assertEquals(\"Ww==\", new String(Base64.encodeBase64(new byte[]{(byte) 91})));\n+        assertEquals(\"XA==\", new String(Base64.encodeBase64(new byte[]{(byte) 92})));\n+        assertEquals(\"XQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 93})));\n+        assertEquals(\"Xg==\", new String(Base64.encodeBase64(new byte[]{(byte) 94})));\n+        assertEquals(\"Xw==\", new String(Base64.encodeBase64(new byte[]{(byte) 95})));\n+        assertEquals(\"YA==\", new String(Base64.encodeBase64(new byte[]{(byte) 96})));\n+        assertEquals(\"YQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 97})));\n+        assertEquals(\"Yg==\", new String(Base64.encodeBase64(new byte[]{(byte) 98})));\n+        assertEquals(\"Yw==\", new String(Base64.encodeBase64(new byte[]{(byte) 99})));\n+        assertEquals(\"ZA==\", new String(Base64.encodeBase64(new byte[]{(byte) 100})));\n+        assertEquals(\"ZQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 101})));\n+        assertEquals(\"Zg==\", new String(Base64.encodeBase64(new byte[]{(byte) 102})));\n+        assertEquals(\"Zw==\", new String(Base64.encodeBase64(new byte[]{(byte) 103})));\n+        assertEquals(\"aA==\", new String(Base64.encodeBase64(new byte[]{(byte) 104})));\n+        for (int i = -128; i <= 127; i++) {\n+            byte test[] = {(byte) i};\n+            assertTrue(Arrays.equals(test, Base64.decodeBase64(Base64.encodeBase64(test))));\n         }\n     }\n \n     public void testSingletonsChunked() {\n-        assertEquals(\"AA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0 })));\n-        assertEquals(\"AQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)1 })));\n-        assertEquals(\"Ag==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)2 })));\n-        assertEquals(\"Aw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)3 })));\n-        assertEquals(\"BA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)4 })));\n-        assertEquals(\"BQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)5 })));\n-        assertEquals(\"Bg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)6 })));\n-        assertEquals(\"Bw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)7 })));\n-        assertEquals(\"CA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)8 })));\n-        assertEquals(\"CQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)9 })));\n-        assertEquals(\"Cg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)10 })));\n-        assertEquals(\"Cw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)11 })));\n-        assertEquals(\"DA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)12 })));\n-        assertEquals(\"DQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)13 })));\n-        assertEquals(\"Dg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)14 })));\n-        assertEquals(\"Dw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)15 })));\n-        assertEquals(\"EA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)16 })));\n-        assertEquals(\"EQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)17 })));\n-        assertEquals(\"Eg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)18 })));\n-        assertEquals(\"Ew==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)19 })));\n-        assertEquals(\"FA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)20 })));\n-        assertEquals(\"FQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)21 })));\n-        assertEquals(\"Fg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)22 })));\n-        assertEquals(\"Fw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)23 })));\n-        assertEquals(\"GA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)24 })));\n-        assertEquals(\"GQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)25 })));\n-        assertEquals(\"Gg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)26 })));\n-        assertEquals(\"Gw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)27 })));\n-        assertEquals(\"HA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)28 })));\n-        assertEquals(\"HQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)29 })));\n-        assertEquals(\"Hg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)30 })));\n-        assertEquals(\"Hw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)31 })));\n-        assertEquals(\"IA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)32 })));\n-        assertEquals(\"IQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)33 })));\n-        assertEquals(\"Ig==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)34 })));\n-        assertEquals(\"Iw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)35 })));\n-        assertEquals(\"JA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)36 })));\n-        assertEquals(\"JQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)37 })));\n-        assertEquals(\"Jg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)38 })));\n-        assertEquals(\"Jw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)39 })));\n-        assertEquals(\"KA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)40 })));\n-        assertEquals(\"KQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)41 })));\n-        assertEquals(\"Kg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)42 })));\n-        assertEquals(\"Kw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)43 })));\n-        assertEquals(\"LA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)44 })));\n-        assertEquals(\"LQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)45 })));\n-        assertEquals(\"Lg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)46 })));\n-        assertEquals(\"Lw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)47 })));\n-        assertEquals(\"MA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)48 })));\n-        assertEquals(\"MQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)49 })));\n-        assertEquals(\"Mg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)50 })));\n-        assertEquals(\"Mw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)51 })));\n-        assertEquals(\"NA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)52 })));\n-        assertEquals(\"NQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)53 })));\n-        assertEquals(\"Ng==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)54 })));\n-        assertEquals(\"Nw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)55 })));\n-        assertEquals(\"OA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)56 })));\n-        assertEquals(\"OQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)57 })));\n-        assertEquals(\"Og==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)58 })));\n-        assertEquals(\"Ow==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)59 })));\n-        assertEquals(\"PA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)60 })));\n-        assertEquals(\"PQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)61 })));\n-        assertEquals(\"Pg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)62 })));\n-        assertEquals(\"Pw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)63 })));\n-        assertEquals(\"QA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)64 })));\n-        assertEquals(\"QQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)65 })));\n-        assertEquals(\"Qg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)66 })));\n-        assertEquals(\"Qw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)67 })));\n-        assertEquals(\"RA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)68 })));\n-        assertEquals(\"RQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)69 })));\n-        assertEquals(\"Rg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)70 })));\n-        assertEquals(\"Rw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)71 })));\n-        assertEquals(\"SA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)72 })));\n-        assertEquals(\"SQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)73 })));\n-        assertEquals(\"Sg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)74 })));\n-        assertEquals(\"Sw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)75 })));\n-        assertEquals(\"TA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)76 })));\n-        assertEquals(\"TQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)77 })));\n-        assertEquals(\"Tg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)78 })));\n-        assertEquals(\"Tw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)79 })));\n-        assertEquals(\"UA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)80 })));\n-        assertEquals(\"UQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)81 })));\n-        assertEquals(\"Ug==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)82 })));\n-        assertEquals(\"Uw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)83 })));\n-        assertEquals(\"VA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)84 })));\n-        assertEquals(\"VQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)85 })));\n-        assertEquals(\"Vg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)86 })));\n-        assertEquals(\"Vw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)87 })));\n-        assertEquals(\"WA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)88 })));\n-        assertEquals(\"WQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)89 })));\n-        assertEquals(\"Wg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)90 })));\n-        assertEquals(\"Ww==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)91 })));\n-        assertEquals(\"XA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)92 })));\n-        assertEquals(\"XQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)93 })));\n-        assertEquals(\"Xg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)94 })));\n-        assertEquals(\"Xw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)95 })));\n-        assertEquals(\"YA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)96 })));\n-        assertEquals(\"YQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)97 })));\n-        assertEquals(\"Yg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)98 })));\n-        assertEquals(\"Yw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)99 })));\n-        assertEquals(\"ZA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)100 })));\n-        assertEquals(\"ZQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)101 })));\n-        assertEquals(\"Zg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)102 })));\n-        assertEquals(\"Zw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)103 })));\n-        assertEquals(\"aA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)104 })));\n-    }\n-\n-    public void testPairs(){\n-        assertEquals(\"AAA=\",new String(Base64.encodeBase64(new byte[] { 0, 0 })));\n-        for (int i = -128; i<=127; i++){\n-            byte test[]= {(byte)i, (byte)i};\n-            assertTrue(Arrays.equals(test,Base64.decodeBase64(Base64.encodeBase64(test))));\n+        assertEquals(\"AA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0})));\n+        assertEquals(\"AQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 1})));\n+        assertEquals(\"Ag==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 2})));\n+        assertEquals(\"Aw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 3})));\n+        assertEquals(\"BA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 4})));\n+        assertEquals(\"BQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 5})));\n+        assertEquals(\"Bg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 6})));\n+        assertEquals(\"Bw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 7})));\n+        assertEquals(\"CA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 8})));\n+        assertEquals(\"CQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 9})));\n+        assertEquals(\"Cg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 10})));\n+        assertEquals(\"Cw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 11})));\n+        assertEquals(\"DA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 12})));\n+        assertEquals(\"DQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 13})));\n+        assertEquals(\"Dg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 14})));\n+        assertEquals(\"Dw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 15})));\n+        assertEquals(\"EA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 16})));\n+        assertEquals(\"EQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 17})));\n+        assertEquals(\"Eg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 18})));\n+        assertEquals(\"Ew==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 19})));\n+        assertEquals(\"FA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 20})));\n+        assertEquals(\"FQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 21})));\n+        assertEquals(\"Fg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 22})));\n+        assertEquals(\"Fw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 23})));\n+        assertEquals(\"GA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 24})));\n+        assertEquals(\"GQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 25})));\n+        assertEquals(\"Gg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 26})));\n+        assertEquals(\"Gw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 27})));\n+        assertEquals(\"HA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 28})));\n+        assertEquals(\"HQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 29})));\n+        assertEquals(\"Hg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 30})));\n+        assertEquals(\"Hw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 31})));\n+        assertEquals(\"IA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 32})));\n+        assertEquals(\"IQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 33})));\n+        assertEquals(\"Ig==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 34})));\n+        assertEquals(\"Iw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 35})));\n+        assertEquals(\"JA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 36})));\n+        assertEquals(\"JQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 37})));\n+        assertEquals(\"Jg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 38})));\n+        assertEquals(\"Jw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 39})));\n+        assertEquals(\"KA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 40})));\n+        assertEquals(\"KQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 41})));\n+        assertEquals(\"Kg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 42})));\n+        assertEquals(\"Kw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 43})));\n+        assertEquals(\"LA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 44})));\n+        assertEquals(\"LQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 45})));\n+        assertEquals(\"Lg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 46})));\n+        assertEquals(\"Lw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 47})));\n+        assertEquals(\"MA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 48})));\n+        assertEquals(\"MQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 49})));\n+        assertEquals(\"Mg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 50})));\n+        assertEquals(\"Mw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 51})));\n+        assertEquals(\"NA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 52})));\n+        assertEquals(\"NQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 53})));\n+        assertEquals(\"Ng==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 54})));\n+        assertEquals(\"Nw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 55})));\n+        assertEquals(\"OA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 56})));\n+        assertEquals(\"OQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 57})));\n+        assertEquals(\"Og==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 58})));\n+        assertEquals(\"Ow==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 59})));\n+        assertEquals(\"PA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 60})));\n+        assertEquals(\"PQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 61})));\n+        assertEquals(\"Pg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 62})));\n+        assertEquals(\"Pw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 63})));\n+        assertEquals(\"QA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 64})));\n+        assertEquals(\"QQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 65})));\n+        assertEquals(\"Qg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 66})));\n+        assertEquals(\"Qw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 67})));\n+        assertEquals(\"RA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 68})));\n+        assertEquals(\"RQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 69})));\n+        assertEquals(\"Rg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 70})));\n+        assertEquals(\"Rw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 71})));\n+        assertEquals(\"SA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 72})));\n+        assertEquals(\"SQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 73})));\n+        assertEquals(\"Sg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 74})));\n+        assertEquals(\"Sw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 75})));\n+        assertEquals(\"TA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 76})));\n+        assertEquals(\"TQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 77})));\n+        assertEquals(\"Tg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 78})));\n+        assertEquals(\"Tw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 79})));\n+        assertEquals(\"UA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 80})));\n+        assertEquals(\"UQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 81})));\n+        assertEquals(\"Ug==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 82})));\n+        assertEquals(\"Uw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 83})));\n+        assertEquals(\"VA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 84})));\n+        assertEquals(\"VQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 85})));\n+        assertEquals(\"Vg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 86})));\n+        assertEquals(\"Vw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 87})));\n+        assertEquals(\"WA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 88})));\n+        assertEquals(\"WQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 89})));\n+        assertEquals(\"Wg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 90})));\n+        assertEquals(\"Ww==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 91})));\n+        assertEquals(\"XA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 92})));\n+        assertEquals(\"XQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 93})));\n+        assertEquals(\"Xg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 94})));\n+        assertEquals(\"Xw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 95})));\n+        assertEquals(\"YA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 96})));\n+        assertEquals(\"YQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 97})));\n+        assertEquals(\"Yg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 98})));\n+        assertEquals(\"Yw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 99})));\n+        assertEquals(\"ZA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 100})));\n+        assertEquals(\"ZQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 101})));\n+        assertEquals(\"Zg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 102})));\n+        assertEquals(\"Zw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 103})));\n+        assertEquals(\"aA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 104})));\n+    }\n+\n+    public void testPairs() {\n+        assertEquals(\"AAA=\", new String(Base64.encodeBase64(new byte[]{0, 0})));\n+        for (int i = -128; i <= 127; i++) {\n+            byte test[] = {(byte) i, (byte) i};\n+            assertTrue(Arrays.equals(test, Base64.decodeBase64(Base64.encodeBase64(test))));\n         }\n     }\n \n     public void testTriplets() {\n-        assertEquals(\"AAAA\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)0 })));\n-        assertEquals(\"AAAB\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)1 })));\n-        assertEquals(\"AAAC\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)2 })));\n-        assertEquals(\"AAAD\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)3 })));\n-        assertEquals(\"AAAE\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)4 })));\n-        assertEquals(\"AAAF\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)5 })));\n-        assertEquals(\"AAAG\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)6 })));\n-        assertEquals(\"AAAH\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)7 })));\n-        assertEquals(\"AAAI\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)8 })));\n-        assertEquals(\"AAAJ\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)9 })));\n-        assertEquals(\"AAAK\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)10 })));\n-        assertEquals(\"AAAL\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)11 })));\n-        assertEquals(\"AAAM\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)12 })));\n-        assertEquals(\"AAAN\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)13 })));\n-        assertEquals(\"AAAO\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)14 })));\n-        assertEquals(\"AAAP\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)15 })));\n-        assertEquals(\"AAAQ\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)16 })));\n-        assertEquals(\"AAAR\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)17 })));\n-        assertEquals(\"AAAS\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)18 })));\n-        assertEquals(\"AAAT\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)19 })));\n-        assertEquals(\"AAAU\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)20 })));\n-        assertEquals(\"AAAV\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)21 })));\n-        assertEquals(\"AAAW\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)22 })));\n-        assertEquals(\"AAAX\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)23 })));\n-        assertEquals(\"AAAY\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)24 })));\n-        assertEquals(\"AAAZ\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)25 })));\n-        assertEquals(\"AAAa\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)26 })));\n-        assertEquals(\"AAAb\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)27 })));\n-        assertEquals(\"AAAc\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)28 })));\n-        assertEquals(\"AAAd\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)29 })));\n-        assertEquals(\"AAAe\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)30 })));\n-        assertEquals(\"AAAf\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)31 })));\n-        assertEquals(\"AAAg\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)32 })));\n-        assertEquals(\"AAAh\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)33 })));\n-        assertEquals(\"AAAi\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)34 })));\n-        assertEquals(\"AAAj\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)35 })));\n-        assertEquals(\"AAAk\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)36 })));\n-        assertEquals(\"AAAl\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)37 })));\n-        assertEquals(\"AAAm\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)38 })));\n-        assertEquals(\"AAAn\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)39 })));\n-        assertEquals(\"AAAo\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)40 })));\n-        assertEquals(\"AAAp\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)41 })));\n-        assertEquals(\"AAAq\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)42 })));\n-        assertEquals(\"AAAr\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)43 })));\n-        assertEquals(\"AAAs\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)44 })));\n-        assertEquals(\"AAAt\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)45 })));\n-        assertEquals(\"AAAu\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)46 })));\n-        assertEquals(\"AAAv\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)47 })));\n-        assertEquals(\"AAAw\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)48 })));\n-        assertEquals(\"AAAx\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)49 })));\n-        assertEquals(\"AAAy\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)50 })));\n-        assertEquals(\"AAAz\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)51 })));\n-        assertEquals(\"AAA0\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)52 })));\n-        assertEquals(\"AAA1\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)53 })));\n-        assertEquals(\"AAA2\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)54 })));\n-        assertEquals(\"AAA3\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)55 })));\n-        assertEquals(\"AAA4\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)56 })));\n-        assertEquals(\"AAA5\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)57 })));\n-        assertEquals(\"AAA6\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)58 })));\n-        assertEquals(\"AAA7\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)59 })));\n-        assertEquals(\"AAA8\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)60 })));\n-        assertEquals(\"AAA9\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)61 })));\n-        assertEquals(\"AAA+\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)62 })));\n-        assertEquals(\"AAA/\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)63 })));\n+        assertEquals(\"AAAA\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 0})));\n+        assertEquals(\"AAAB\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 1})));\n+        assertEquals(\"AAAC\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 2})));\n+        assertEquals(\"AAAD\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 3})));\n+        assertEquals(\"AAAE\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 4})));\n+        assertEquals(\"AAAF\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 5})));\n+        assertEquals(\"AAAG\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 6})));\n+        assertEquals(\"AAAH\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 7})));\n+        assertEquals(\"AAAI\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 8})));\n+        assertEquals(\"AAAJ\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 9})));\n+        assertEquals(\"AAAK\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 10})));\n+        assertEquals(\"AAAL\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 11})));\n+        assertEquals(\"AAAM\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 12})));\n+        assertEquals(\"AAAN\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 13})));\n+        assertEquals(\"AAAO\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 14})));\n+        assertEquals(\"AAAP\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 15})));\n+        assertEquals(\"AAAQ\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 16})));\n+        assertEquals(\"AAAR\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 17})));\n+        assertEquals(\"AAAS\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 18})));\n+        assertEquals(\"AAAT\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 19})));\n+        assertEquals(\"AAAU\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 20})));\n+        assertEquals(\"AAAV\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 21})));\n+        assertEquals(\"AAAW\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 22})));\n+        assertEquals(\"AAAX\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 23})));\n+        assertEquals(\"AAAY\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 24})));\n+        assertEquals(\"AAAZ\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 25})));\n+        assertEquals(\"AAAa\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 26})));\n+        assertEquals(\"AAAb\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 27})));\n+        assertEquals(\"AAAc\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 28})));\n+        assertEquals(\"AAAd\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 29})));\n+        assertEquals(\"AAAe\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 30})));\n+        assertEquals(\"AAAf\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 31})));\n+        assertEquals(\"AAAg\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 32})));\n+        assertEquals(\"AAAh\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 33})));\n+        assertEquals(\"AAAi\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 34})));\n+        assertEquals(\"AAAj\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 35})));\n+        assertEquals(\"AAAk\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 36})));\n+        assertEquals(\"AAAl\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 37})));\n+        assertEquals(\"AAAm\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 38})));\n+        assertEquals(\"AAAn\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 39})));\n+        assertEquals(\"AAAo\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 40})));\n+        assertEquals(\"AAAp\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 41})));\n+        assertEquals(\"AAAq\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 42})));\n+        assertEquals(\"AAAr\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 43})));\n+        assertEquals(\"AAAs\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 44})));\n+        assertEquals(\"AAAt\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 45})));\n+        assertEquals(\"AAAu\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 46})));\n+        assertEquals(\"AAAv\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 47})));\n+        assertEquals(\"AAAw\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 48})));\n+        assertEquals(\"AAAx\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 49})));\n+        assertEquals(\"AAAy\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 50})));\n+        assertEquals(\"AAAz\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 51})));\n+        assertEquals(\"AAA0\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 52})));\n+        assertEquals(\"AAA1\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 53})));\n+        assertEquals(\"AAA2\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 54})));\n+        assertEquals(\"AAA3\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 55})));\n+        assertEquals(\"AAA4\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 56})));\n+        assertEquals(\"AAA5\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 57})));\n+        assertEquals(\"AAA6\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 58})));\n+        assertEquals(\"AAA7\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 59})));\n+        assertEquals(\"AAA8\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 60})));\n+        assertEquals(\"AAA9\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 61})));\n+        assertEquals(\"AAA+\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 62})));\n+        assertEquals(\"AAA/\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 63})));\n     }\n \n     public void testTripletsChunked() {\n-        assertEquals(\"AAAA\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)0 })));\n-        assertEquals(\"AAAB\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)1 })));\n-        assertEquals(\"AAAC\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)2 })));\n-        assertEquals(\"AAAD\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)3 })));\n-        assertEquals(\"AAAE\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)4 })));\n-        assertEquals(\"AAAF\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)5 })));\n-        assertEquals(\"AAAG\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)6 })));\n-        assertEquals(\"AAAH\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)7 })));\n-        assertEquals(\"AAAI\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)8 })));\n-        assertEquals(\"AAAJ\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)9 })));\n-        assertEquals(\"AAAK\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)10 })));\n-        assertEquals(\"AAAL\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)11 })));\n-        assertEquals(\"AAAM\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)12 })));\n-        assertEquals(\"AAAN\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)13 })));\n-        assertEquals(\"AAAO\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)14 })));\n-        assertEquals(\"AAAP\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)15 })));\n-        assertEquals(\"AAAQ\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)16 })));\n-        assertEquals(\"AAAR\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)17 })));\n-        assertEquals(\"AAAS\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)18 })));\n-        assertEquals(\"AAAT\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)19 })));\n-        assertEquals(\"AAAU\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)20 })));\n-        assertEquals(\"AAAV\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)21 })));\n-        assertEquals(\"AAAW\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)22 })));\n-        assertEquals(\"AAAX\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)23 })));\n-        assertEquals(\"AAAY\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)24 })));\n-        assertEquals(\"AAAZ\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)25 })));\n-        assertEquals(\"AAAa\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)26 })));\n-        assertEquals(\"AAAb\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)27 })));\n-        assertEquals(\"AAAc\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)28 })));\n-        assertEquals(\"AAAd\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)29 })));\n-        assertEquals(\"AAAe\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)30 })));\n-        assertEquals(\"AAAf\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)31 })));\n-        assertEquals(\"AAAg\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)32 })));\n-        assertEquals(\"AAAh\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)33 })));\n-        assertEquals(\"AAAi\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)34 })));\n-        assertEquals(\"AAAj\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)35 })));\n-        assertEquals(\"AAAk\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)36 })));\n-        assertEquals(\"AAAl\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)37 })));\n-        assertEquals(\"AAAm\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)38 })));\n-        assertEquals(\"AAAn\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)39 })));\n-        assertEquals(\"AAAo\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)40 })));\n-        assertEquals(\"AAAp\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)41 })));\n-        assertEquals(\"AAAq\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)42 })));\n-        assertEquals(\"AAAr\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)43 })));\n-        assertEquals(\"AAAs\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)44 })));\n-        assertEquals(\"AAAt\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)45 })));\n-        assertEquals(\"AAAu\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)46 })));\n-        assertEquals(\"AAAv\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)47 })));\n-        assertEquals(\"AAAw\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)48 })));\n-        assertEquals(\"AAAx\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)49 })));\n-        assertEquals(\"AAAy\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)50 })));\n-        assertEquals(\"AAAz\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)51 })));\n-        assertEquals(\"AAA0\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)52 })));\n-        assertEquals(\"AAA1\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)53 })));\n-        assertEquals(\"AAA2\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)54 })));\n-        assertEquals(\"AAA3\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)55 })));\n-        assertEquals(\"AAA4\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)56 })));\n-        assertEquals(\"AAA5\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)57 })));\n-        assertEquals(\"AAA6\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)58 })));\n-        assertEquals(\"AAA7\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)59 })));\n-        assertEquals(\"AAA8\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)60 })));\n-        assertEquals(\"AAA9\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)61 })));\n-        assertEquals(\"AAA+\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)62 })));\n-        assertEquals(\"AAA/\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)63 })));\n+        assertEquals(\"AAAA\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 0})));\n+        assertEquals(\"AAAB\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 1})));\n+        assertEquals(\"AAAC\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 2})));\n+        assertEquals(\"AAAD\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 3})));\n+        assertEquals(\"AAAE\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 4})));\n+        assertEquals(\"AAAF\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 5})));\n+        assertEquals(\"AAAG\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 6})));\n+        assertEquals(\"AAAH\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 7})));\n+        assertEquals(\"AAAI\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 8})));\n+        assertEquals(\"AAAJ\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 9})));\n+        assertEquals(\"AAAK\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 10})));\n+        assertEquals(\"AAAL\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 11})));\n+        assertEquals(\"AAAM\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 12})));\n+        assertEquals(\"AAAN\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 13})));\n+        assertEquals(\"AAAO\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 14})));\n+        assertEquals(\"AAAP\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 15})));\n+        assertEquals(\"AAAQ\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 16})));\n+        assertEquals(\"AAAR\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 17})));\n+        assertEquals(\"AAAS\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 18})));\n+        assertEquals(\"AAAT\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 19})));\n+        assertEquals(\"AAAU\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 20})));\n+        assertEquals(\"AAAV\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 21})));\n+        assertEquals(\"AAAW\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 22})));\n+        assertEquals(\"AAAX\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 23})));\n+        assertEquals(\"AAAY\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 24})));\n+        assertEquals(\"AAAZ\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 25})));\n+        assertEquals(\"AAAa\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 26})));\n+        assertEquals(\"AAAb\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 27})));\n+        assertEquals(\"AAAc\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 28})));\n+        assertEquals(\"AAAd\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 29})));\n+        assertEquals(\"AAAe\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 30})));\n+        assertEquals(\"AAAf\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 31})));\n+        assertEquals(\"AAAg\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 32})));\n+        assertEquals(\"AAAh\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 33})));\n+        assertEquals(\"AAAi\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 34})));\n+        assertEquals(\"AAAj\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 35})));\n+        assertEquals(\"AAAk\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 36})));\n+        assertEquals(\"AAAl\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 37})));\n+        assertEquals(\"AAAm\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 38})));\n+        assertEquals(\"AAAn\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 39})));\n+        assertEquals(\"AAAo\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 40})));\n+        assertEquals(\"AAAp\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 41})));\n+        assertEquals(\"AAAq\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 42})));\n+        assertEquals(\"AAAr\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 43})));\n+        assertEquals(\"AAAs\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 44})));\n+        assertEquals(\"AAAt\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 45})));\n+        assertEquals(\"AAAu\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 46})));\n+        assertEquals(\"AAAv\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 47})));\n+        assertEquals(\"AAAw\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 48})));\n+        assertEquals(\"AAAx\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 49})));\n+        assertEquals(\"AAAy\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 50})));\n+        assertEquals(\"AAAz\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 51})));\n+        assertEquals(\"AAA0\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 52})));\n+        assertEquals(\"AAA1\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 53})));\n+        assertEquals(\"AAA2\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 54})));\n+        assertEquals(\"AAA3\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 55})));\n+        assertEquals(\"AAA4\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 56})));\n+        assertEquals(\"AAA5\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 57})));\n+        assertEquals(\"AAA6\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 58})));\n+        assertEquals(\"AAA7\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 59})));\n+        assertEquals(\"AAA8\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 60})));\n+        assertEquals(\"AAA9\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 61})));\n+        assertEquals(\"AAA+\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 62})));\n+        assertEquals(\"AAA/\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 63})));\n     }\n \n     public void testKnownEncodings() {\n-        assertEquals(\"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\",new String(Base64.encodeBase64(\"The quick brown fox jumped over the lazy dogs.\".getBytes())));\n-        assertEquals(\"YmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJs\\r\\nYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFo\\r\\nIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBi\\r\\nbGFoIGJsYWg=\\r\\n\",new String(Base64.encodeBase64Chunked(\"blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah\".getBytes())));\n-        assertEquals(\"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==\",new String(Base64.encodeBase64(\"It was the best of times, it was the worst of times.\".getBytes())));\n-        assertEquals(\"aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==\",new String(Base64.encodeBase64(\"http://jakarta.apache.org/commmons\".getBytes())));\n-        assertEquals(\"QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==\",new String(Base64.encodeBase64(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\".getBytes())));\n-        assertEquals(\"eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0=\",new String(Base64.encodeBase64(\"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\".getBytes())));\n-        assertEquals(\"eHl6enkh\",new String(Base64.encodeBase64(\"xyzzy!\".getBytes())));\n+        assertEquals(\"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\", new String(Base64\n+                .encodeBase64(\"The quick brown fox jumped over the lazy dogs.\".getBytes())));\n+        assertEquals(\n+                \"YmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJs\\r\\nYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFo\\r\\nIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBi\\r\\nbGFoIGJsYWg=\\r\\n\",\n+                new String(\n+                        Base64\n+                                .encodeBase64Chunked(\"blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah\"\n+                                        .getBytes())));\n+        assertEquals(\"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==\", new String(Base64\n+                .encodeBase64(\"It was the best of times, it was the worst of times.\".getBytes())));\n+        assertEquals(\"aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==\", new String(Base64\n+                .encodeBase64(\"http://jakarta.apache.org/commmons\".getBytes())));\n+        assertEquals(\"QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==\", new String(Base64\n+                .encodeBase64(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\".getBytes())));\n+        assertEquals(\"eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0=\", new String(Base64.encodeBase64(\"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\"\n+                .getBytes())));\n+        assertEquals(\"eHl6enkh\", new String(Base64.encodeBase64(\"xyzzy!\".getBytes())));\n     }\n \n     public void testKnownDecodings() {\n-        assertEquals(\"The quick brown fox jumped over the lazy dogs.\",new String(Base64.decodeBase64(\"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\".getBytes())));\n-        assertEquals(\"It was the best of times, it was the worst of times.\",new String(Base64.decodeBase64(\"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==\".getBytes())));\n-        assertEquals(\"http://jakarta.apache.org/commmons\",new String(Base64.decodeBase64(\"aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==\".getBytes())));\n-        assertEquals(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\",new String(Base64.decodeBase64(\"QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==\".getBytes())));\n-        assertEquals(\"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\",new String(Base64.decodeBase64(\"eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0=\".getBytes())));\n-        assertEquals(\"xyzzy!\",new String(Base64.decodeBase64(\"eHl6enkh\".getBytes())));\n-        } \n+        assertEquals(\"The quick brown fox jumped over the lazy dogs.\", new String(Base64\n+                .decodeBase64(\"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\".getBytes())));\n+        assertEquals(\"It was the best of times, it was the worst of times.\", new String(Base64\n+                .decodeBase64(\"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==\".getBytes())));\n+        assertEquals(\"http://jakarta.apache.org/commmons\", new String(Base64\n+                .decodeBase64(\"aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==\".getBytes())));\n+        assertEquals(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\", new String(Base64\n+                .decodeBase64(\"QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==\".getBytes())));\n+        assertEquals(\"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\", new String(Base64.decodeBase64(\"eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0=\"\n+                .getBytes())));\n+        assertEquals(\"xyzzy!\", new String(Base64.decodeBase64(\"eHl6enkh\".getBytes())));\n+    }\n \n     public void testNonBase64Test() throws Exception {\n \n-        byte[] bArray = { '%' };\n-\n-        assertFalse( \"Invalid Base64 array was incorrectly validated as \" +\n-                     \"an array of Base64 encoded data\", \n-                     Base64.isArrayByteBase64( bArray ) );\n-        \n+        byte[] bArray = {'%'};\n+\n+        assertFalse(\"Invalid Base64 array was incorrectly validated as \" + \"an array of Base64 encoded data\", Base64\n+                .isArrayByteBase64(bArray));\n+\n         try {\n             Base64 b64 = new Base64();\n-            byte[] result = b64.decode( bArray );\n-            \n-            assertTrue( \"The result should be empty as the test encoded content did \" +\n-                \"not contain any valid base 64 characters\", result.length == 0);\n-        } \n-        catch( Exception e ) {\n-            fail( \"Exception was thrown when trying to decode \" +\n-                    \"invalid base64 encoded data - RFC 2045 requires that all \" +\n-                    \"non base64 character be discarded, an exception should not\" +\n-                    \" have been thrown\");\n-        }\n-    }\n-    \n+            byte[] result = b64.decode(bArray);\n+\n+            assertTrue(\"The result should be empty as the test encoded content did \" + \"not contain any valid base 64 characters\",\n+                    result.length == 0);\n+        } catch (Exception e) {\n+            fail(\"Exception was thrown when trying to decode \"\n+                + \"invalid base64 encoded data - RFC 2045 requires that all \"\n+                + \"non base64 character be discarded, an exception should not\"\n+                + \" have been thrown\");\n+        }\n+    }\n+\n     public void testIgnoringNonBase64InDecode() throws Exception {\n-        assertEquals(\"The quick brown fox jumped over the lazy dogs.\",new String(Base64.decodeBase64(\"VGhlIH@$#$@%F1aWN@#@#@@rIGJyb3duIGZve\\n\\r\\t%#%#%#%CBqd##$#$W1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\".getBytes())));\n-    }\n-\n-    public void testIsArrayByteBase64() {        \n-        assertFalse(Base64.isArrayByteBase64(new byte[] {Byte.MIN_VALUE}));\n-        assertFalse(Base64.isArrayByteBase64(new byte[] {-125}));\n-        assertFalse(Base64.isArrayByteBase64(new byte[] {-10}));\n-        assertFalse(Base64.isArrayByteBase64(new byte[] {0}));\n-        assertFalse(Base64.isArrayByteBase64(new byte[] {64, Byte.MAX_VALUE}));\n-        assertFalse(Base64.isArrayByteBase64(new byte[] {Byte.MAX_VALUE}));\n-        assertTrue(Base64.isArrayByteBase64(new byte[] {'A'}));\n-        assertFalse(Base64.isArrayByteBase64(new byte[] {'A', Byte.MIN_VALUE}));\n-        assertTrue(Base64.isArrayByteBase64(new byte[] {'A', 'Z', 'a'}));\n-        assertTrue(Base64.isArrayByteBase64(new byte[] {'/','=','+'}));\n-        assertFalse(Base64.isArrayByteBase64(new byte[] {'$'}));\n+        assertEquals(\"The quick brown fox jumped over the lazy dogs.\", new String(Base64\n+                .decodeBase64(\"VGhlIH@$#$@%F1aWN@#@#@@rIGJyb3duIGZve\\n\\r\\t%#%#%#%CBqd##$#$W1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\".getBytes())));\n+    }\n+\n+    public void testIsArrayByteBase64() {\n+        assertFalse(Base64.isArrayByteBase64(new byte[]{Byte.MIN_VALUE}));\n+        assertFalse(Base64.isArrayByteBase64(new byte[]{-125}));\n+        assertFalse(Base64.isArrayByteBase64(new byte[]{-10}));\n+        assertFalse(Base64.isArrayByteBase64(new byte[]{0}));\n+        assertFalse(Base64.isArrayByteBase64(new byte[]{64, Byte.MAX_VALUE}));\n+        assertFalse(Base64.isArrayByteBase64(new byte[]{Byte.MAX_VALUE}));\n+        assertTrue(Base64.isArrayByteBase64(new byte[]{'A'}));\n+        assertFalse(Base64.isArrayByteBase64(new byte[]{'A', Byte.MIN_VALUE}));\n+        assertTrue(Base64.isArrayByteBase64(new byte[]{'A', 'Z', 'a'}));\n+        assertTrue(Base64.isArrayByteBase64(new byte[]{'/', '=', '+'}));\n+        assertFalse(Base64.isArrayByteBase64(new byte[]{'$'}));\n     }\n \n     public void testObjectDecodeWithInvalidParameter() throws Exception {\n         Base64 b64 = new Base64();\n \n         try {\n-            b64.decode( \"Yadayadayada\");\n-            fail( \"decode(Object) didn't throw an exception when passed a String object\");\n-        } catch( DecoderException e ) {\n+            b64.decode(\"Yadayadayada\");\n+            fail(\"decode(Object) didn't throw an exception when passed a String object\");\n+        } catch (DecoderException e) {\n             // ignored\n         }\n \n     public void testObjectDecodeWithValidParameter() throws Exception {\n \n         String original = \"Hello World!\";\n-        byte[] bArray = \n-            Base64.encodeBase64(original.getBytes() );\n+        byte[] bArray = Base64.encodeBase64(original.getBytes());\n         Object o = bArray;\n-        \n+\n         Base64 b64 = new Base64();\n-        Object oDecoded = b64.decode( o );\n+        Object oDecoded = b64.decode(o);\n         byte[] baDecoded = (byte[]) oDecoded;\n-        String dest = new String( baDecoded );\n-\n-        assertTrue( \"dest string does not equal original\",\n-                    dest.equals( original ) );\n+        String dest = new String(baDecoded);\n+\n+        assertTrue(\"dest string does not equal original\", dest.equals(original));\n     }\n \n     public void testObjectEncodeWithInvalidParameter() throws Exception {\n         Base64 b64 = new Base64();\n \n         try {\n-            b64.encode( \"Yadayadayada\" );\n-            fail( \"encode(Object) didn't throw an exception when passed a String object\");\n-        } catch( EncoderException e ) {\n+            b64.encode(\"Yadayadayada\");\n+            fail(\"encode(Object) didn't throw an exception when passed a String object\");\n+        } catch (EncoderException e) {\n         }\n     }\n \n         Object origObj = origBytes;\n \n         Base64 b64 = new Base64();\n-        Object oEncoded = b64.encode( origObj );\n-        byte[] bArray = \n-            Base64.decodeBase64( (byte[]) oEncoded );\n-        String dest = new String( bArray );\n-\n-        assertTrue( \"dest string does not equal original\",\n-                    dest.equals( original ) );\n+        Object oEncoded = b64.encode(origObj);\n+        byte[] bArray = Base64.decodeBase64((byte[]) oEncoded);\n+        String dest = new String(bArray);\n+\n+        assertTrue(\"dest string does not equal original\", dest.equals(original));\n     }\n \n     public void testDecodeWithWhitespace() throws Exception {\n \n         String orig = \"I am a late night coder.\";\n \n-        byte[] encodedArray = Base64.encodeBase64( orig.getBytes() );\n-        StringBuffer intermediate = \n-            new StringBuffer( new String(encodedArray) );\n-\n-        intermediate.insert( 2, ' ' );\n-        intermediate.insert( 5, '\\t' );\n-        intermediate.insert( 10, '\\r' );\n-        intermediate.insert( 15, '\\n' );\n+        byte[] encodedArray = Base64.encodeBase64(orig.getBytes());\n+        StringBuffer intermediate = new StringBuffer(new String(encodedArray));\n+\n+        intermediate.insert(2, ' ');\n+        intermediate.insert(5, '\\t');\n+        intermediate.insert(10, '\\r');\n+        intermediate.insert(15, '\\n');\n \n         byte[] encodedWithWS = intermediate.toString().getBytes();\n-        byte[] decodedWithWS = Base64.decodeBase64( encodedWithWS );\n-\n-        String dest = new String( decodedWithWS );\n-\n-        assertTrue( \"Dest string doesn't equal the original\", \n-                    dest.equals( orig ) );\n+        byte[] decodedWithWS = Base64.decodeBase64(encodedWithWS);\n+\n+        String dest = new String(decodedWithWS);\n+\n+        assertTrue(\"Dest string doesn't equal the original\", dest.equals(orig));\n     }\n \n     public void testDiscardWhitespace() throws Exception {\n \n         String orig = \"I am a late night coder.\";\n \n-        byte[] encodedArray = Base64.encodeBase64( orig.getBytes() );\n-        StringBuffer intermediate = \n-            new StringBuffer( new String(encodedArray) );\n-\n-        intermediate.insert( 2, ' ' );\n-        intermediate.insert( 5, '\\t' );\n-        intermediate.insert( 10, '\\r' );\n-        intermediate.insert( 15, '\\n' );\n+        byte[] encodedArray = Base64.encodeBase64(orig.getBytes());\n+        StringBuffer intermediate = new StringBuffer(new String(encodedArray));\n+\n+        intermediate.insert(2, ' ');\n+        intermediate.insert(5, '\\t');\n+        intermediate.insert(10, '\\r');\n+        intermediate.insert(15, '\\n');\n \n         byte[] encodedWithWS = intermediate.toString().getBytes();\n-        byte[] encodedNoWS = Base64.discardWhitespace( encodedWithWS );\n-        byte[] decodedWithWS = Base64.decodeBase64( encodedWithWS );\n-        byte[] decodedNoWS = Base64.decodeBase64( encodedNoWS );\n-\n-        String destFromWS = new String( decodedWithWS );\n-        String destFromNoWS = new String( decodedNoWS );\n-\n-        assertTrue( \"Dest string doesn't equal original\", \n-                destFromWS.equals( orig ) );\n-        assertTrue( \"Dest string doesn't equal original\", \n-                destFromNoWS.equals( orig ) );\n+        byte[] encodedNoWS = Base64.discardWhitespace(encodedWithWS);\n+        byte[] decodedWithWS = Base64.decodeBase64(encodedWithWS);\n+        byte[] decodedNoWS = Base64.decodeBase64(encodedNoWS);\n+\n+        String destFromWS = new String(decodedWithWS);\n+        String destFromNoWS = new String(decodedNoWS);\n+\n+        assertTrue(\"Dest string doesn't equal original\", destFromWS.equals(orig));\n+        assertTrue(\"Dest string doesn't equal original\", destFromNoWS.equals(orig));\n     }\n \n     public void testCodeInteger1() {\n         String encodedInt1 = \"li7dzDacuo67Jg7mtqEm2TRuOMU=\";\n-        BigInteger bigInt1 = new BigInteger(\"85739377120809420210425962799\" +\n-            \"0318636601332086981\");\n+        BigInteger bigInt1 = new BigInteger(\"85739377120809420210425962799\" + \"0318636601332086981\");\n \n         assertEquals(encodedInt1, new String(Base64.encodeInteger(bigInt1)));\n         assertEquals(bigInt1, Base64.decodeInteger(encodedInt1.getBytes()));\n \n     public void testCodeInteger2() {\n         String encodedInt2 = \"9B5ypLY9pMOmtxCeTDHgwdNFeGs=\";\n-        BigInteger bigInt2 = new BigInteger(\"13936727572861167254666467268\" +\n-            \"91466679477132949611\");\n+        BigInteger bigInt2 = new BigInteger(\"13936727572861167254666467268\" + \"91466679477132949611\");\n \n         assertEquals(encodedInt2, new String(Base64.encodeInteger(bigInt2)));\n         assertEquals(bigInt2, Base64.decodeInteger(encodedInt2.getBytes()));\n     }\n \n     public void testCodeInteger3() {\n-        String encodedInt3 = \"FKIhdgaG5LGKiEtF1vHy4f3y700zaD6QwDS3IrNVGzNp2\" +\n-            \"rY+1LFWTK6D44AyiC1n8uWz1itkYMZF0/aKDK0Yjg==\";\n-        BigInteger bigInt3 = new BigInteger(\"10806548154093873461951748545\" +\n-            \"1196989136416448805819079363524309897749044958112417136240557\" +\n-            \"4495062430572478766856090958495998158114332651671116876320938126\");\n+        String encodedInt3 = \"FKIhdgaG5LGKiEtF1vHy4f3y700zaD6QwDS3IrNVGzNp2\" + \"rY+1LFWTK6D44AyiC1n8uWz1itkYMZF0/aKDK0Yjg==\";\n+        BigInteger bigInt3 = new BigInteger(\"10806548154093873461951748545\"\n+            + \"1196989136416448805819079363524309897749044958112417136240557\"\n+            + \"4495062430572478766856090958495998158114332651671116876320938126\");\n \n         assertEquals(encodedInt3, new String(Base64.encodeInteger(bigInt3)));\n         assertEquals(bigInt3, Base64.decodeInteger(encodedInt3.getBytes()));\n     }\n \n     public void testCodeInteger4() {\n-        String encodedInt4 = \"ctA8YGxrtngg/zKVvqEOefnwmViFztcnPBYPlJsvh6yKI\" +\n-            \"4iDm68fnp4Mi3RrJ6bZAygFrUIQLxLjV+OJtgJAEto0xAs+Mehuq1DkSFEpP3o\" +\n-            \"DzCTOsrOiS1DwQe4oIb7zVk/9l7aPtJMHW0LVlMdwZNFNNJoqMcT2ZfCPrfvYv\" +\n-            \"Q0=\";\n-        BigInteger bigInt4 = new BigInteger(\"80624726256040348115552042320\" +\n-            \"6968135001872753709424419772586693950232350200555646471175944\" +\n-             \"519297087885987040810778908507262272892702303774422853675597\" +\n-             \"748008534040890923814202286633163248086055216976551456088015\" +\n-             \"338880713818192088877057717530169381044092839402438015097654\" +\n-             \"53542091716518238707344493641683483917\");\n+        String encodedInt4 = \"ctA8YGxrtngg/zKVvqEOefnwmViFztcnPBYPlJsvh6yKI\"\n+            + \"4iDm68fnp4Mi3RrJ6bZAygFrUIQLxLjV+OJtgJAEto0xAs+Mehuq1DkSFEpP3o\"\n+            + \"DzCTOsrOiS1DwQe4oIb7zVk/9l7aPtJMHW0LVlMdwZNFNNJoqMcT2ZfCPrfvYv\"\n+            + \"Q0=\";\n+        BigInteger bigInt4 = new BigInteger(\"80624726256040348115552042320\"\n+            + \"6968135001872753709424419772586693950232350200555646471175944\"\n+            + \"519297087885987040810778908507262272892702303774422853675597\"\n+            + \"748008534040890923814202286633163248086055216976551456088015\"\n+            + \"338880713818192088877057717530169381044092839402438015097654\"\n+            + \"53542091716518238707344493641683483917\");\n \n         assertEquals(encodedInt4, new String(Base64.encodeInteger(bigInt4)));\n         assertEquals(bigInt4, Base64.decodeInteger(encodedInt4.getBytes()));\n         try {\n             Base64.encodeInteger(null);\n             fail(\"Exception not thrown when passing in null to encodeInteger(BigInteger)\");\n-        } catch(NullPointerException npe) {\n+        } catch (NullPointerException npe) {\n             // expected\n-        } catch(Exception e) {\n+        } catch (Exception e) {\n             fail(\"Incorrect Exception caught when passing in null to encodeInteger(BigInteger)\");\n         }\n     }\n         // TODO\n     }\n \n-    public void testConstructors(){\n+    public void testConstructors() {\n         Base64 base64;\n         base64 = new Base64();\n         base64 = new Base64(-1);\n-        base64 = new Base64(-1,new byte[]{});\n-        base64 = new Base64(64,new byte[]{});\n+        base64 = new Base64(-1, new byte[]{});\n+        base64 = new Base64(64, new byte[]{});\n         try {\n-            base64 = new Base64(-1,new byte[]{'A'});\n+            base64 = new Base64(-1, new byte[]{'A'});\n             fail(\"Should have rejected attempt to use 'A' as a line separator\");\n         } catch (IllegalArgumentException ignored) {\n             // Expected\n         }\n         try {\n-            base64 = new Base64(64,new byte[]{'A'});\n+            base64 = new Base64(64, new byte[]{'A'});\n             fail(\"Should have rejected attempt to use 'A' as a line separator\");\n         } catch (IllegalArgumentException ignored) {\n-            // Expected            \n+            // Expected\n         }\n         try {\n-            base64 = new Base64(64,new byte[]{'='});\n+            base64 = new Base64(64, new byte[]{'='});\n             fail(\"Should have rejected attempt to use '=' as a line separator\");\n         } catch (IllegalArgumentException ignored) {\n             // Expected\n         }\n-        base64 = new Base64(64,new byte[]{'$'}); // OK\n+        base64 = new Base64(64, new byte[]{'$'}); // OK\n         try {\n-            base64 = new Base64(64,new byte[]{'A','$'});\n+            base64 = new Base64(64, new byte[]{'A', '$'});\n             fail(\"Should have rejected attempt to use 'A$' as a line separator\");\n         } catch (IllegalArgumentException ignored) {\n             // Expected\n         }\n-        base64 = new Base64(64,new byte[]{' ','$','\\n','\\r','\\t'}); // OK\n-    }\n-\n-    /**\n-     * Base64 encoding of UUID's is a common use-case, especially in URL-SAFE\n-     * mode.  This test case ends up being the \"URL-SAFE\" JUnit's.\n-     *\n-     * @throws DecoderException if Hex.decode() fails - a serious problem since\n-     * Hex comes from our own commons-codec!\n-     *\n-     * @throws UnsupportedEncodingException if \"UTF-8\" character set is not\n-     * available.  Unlikely.\n-     */\n-    public void testUUID() throws DecoderException, UnsupportedEncodingException {\n+        base64 = new Base64(64, new byte[]{' ', '$', '\\n', '\\r', '\\t'}); // OK\n+    }\n+\n+    /**\n+     * Base64 encoding of UUID's is a common use-case, especially in URL-SAFE mode. This test case ends up being the\n+     * \"URL-SAFE\" JUnit's.\n+     * \n+     * @throws DecoderException\n+     *             if Hex.decode() fails - a serious problem since Hex comes from our own commons-codec!\n+     * @throws UnsupportedEncodingException\n+     *             Thrown if \"UTF-8\" character set is not available, not possible according to Java documentation.\n+     */\n+    public void testUUID() throws DecoderException {\n         // The 4 UUID's below contains mixtures of + and / to help us test the\n         // URL-SAFE encoding mode.\n         byte[][] ids = new byte[4][];\n         ids[3] = Hex.decodeHex(\"ff7f8fc01cdb471a8c8b5a9306183fe8\".toCharArray());\n \n         byte[][] standard = new byte[4][];\n-        standard[0] = \"lO2NAxnkSTOZVg+2dATTcA==\".getBytes(\"UTF-8\");\n-        standard[1] = \"K/fMJwH+Q5e0nr7tWsxwkA==\".getBytes(\"UTF-8\");\n-        standard[2] = \"ZL4VS2/6QCWNGgEojnwxyg==\".getBytes(\"UTF-8\");\n-        standard[3] = \"/3+PwBzbRxqMi1qTBhg/6A==\".getBytes(\"UTF-8\");\n+        standard[0] = StringBytesUtils.getBytesUtf8(\"lO2NAxnkSTOZVg+2dATTcA==\");\n+        standard[1] = StringBytesUtils.getBytesUtf8(\"K/fMJwH+Q5e0nr7tWsxwkA==\");\n+        standard[2] = StringBytesUtils.getBytesUtf8(\"ZL4VS2/6QCWNGgEojnwxyg==\");\n+        standard[3] = StringBytesUtils.getBytesUtf8(\"/3+PwBzbRxqMi1qTBhg/6A==\");\n \n         byte[][] urlSafe1 = new byte[4][];\n         // regular padding (two '==' signs).\n-        urlSafe1[0] = \"lO2NAxnkSTOZVg-2dATTcA==\".getBytes(\"UTF-8\");\n-        urlSafe1[1] = \"K_fMJwH-Q5e0nr7tWsxwkA==\".getBytes(\"UTF-8\");\n-        urlSafe1[2] = \"ZL4VS2_6QCWNGgEojnwxyg==\".getBytes(\"UTF-8\");\n-        urlSafe1[3] = \"_3-PwBzbRxqMi1qTBhg_6A==\".getBytes(\"UTF-8\");\n+        urlSafe1[0] = StringBytesUtils.getBytesUtf8(\"lO2NAxnkSTOZVg-2dATTcA==\");\n+        urlSafe1[1] = StringBytesUtils.getBytesUtf8(\"K_fMJwH-Q5e0nr7tWsxwkA==\");\n+        urlSafe1[2] = StringBytesUtils.getBytesUtf8(\"ZL4VS2_6QCWNGgEojnwxyg==\");\n+        urlSafe1[3] = StringBytesUtils.getBytesUtf8(\"_3-PwBzbRxqMi1qTBhg_6A==\");\n \n         byte[][] urlSafe2 = new byte[4][];\n         // single padding (only one '=' sign).\n-        urlSafe2[0] = \"lO2NAxnkSTOZVg-2dATTcA=\".getBytes(\"UTF-8\");\n-        urlSafe2[1] = \"K_fMJwH-Q5e0nr7tWsxwkA=\".getBytes(\"UTF-8\");\n-        urlSafe2[2] = \"ZL4VS2_6QCWNGgEojnwxyg=\".getBytes(\"UTF-8\");\n-        urlSafe2[3] = \"_3-PwBzbRxqMi1qTBhg_6A=\".getBytes(\"UTF-8\");\n+        urlSafe2[0] = StringBytesUtils.getBytesUtf8(\"lO2NAxnkSTOZVg-2dATTcA=\");\n+        urlSafe2[1] = StringBytesUtils.getBytesUtf8(\"K_fMJwH-Q5e0nr7tWsxwkA=\");\n+        urlSafe2[2] = StringBytesUtils.getBytesUtf8(\"ZL4VS2_6QCWNGgEojnwxyg=\");\n+        urlSafe2[3] = StringBytesUtils.getBytesUtf8(\"_3-PwBzbRxqMi1qTBhg_6A=\");\n \n         byte[][] urlSafe3 = new byte[4][];\n-        // no padding (no '=' signs).        \n-        urlSafe3[0] = \"lO2NAxnkSTOZVg-2dATTcA\".getBytes(\"UTF-8\");\n-        urlSafe3[1] = \"K_fMJwH-Q5e0nr7tWsxwkA\".getBytes(\"UTF-8\");\n-        urlSafe3[2] = \"ZL4VS2_6QCWNGgEojnwxyg\".getBytes(\"UTF-8\");\n-        urlSafe3[3] = \"_3-PwBzbRxqMi1qTBhg_6A\".getBytes(\"UTF-8\");\n+        // no padding (no '=' signs).\n+        urlSafe3[0] = StringBytesUtils.getBytesUtf8(\"lO2NAxnkSTOZVg-2dATTcA\");\n+        urlSafe3[1] = StringBytesUtils.getBytesUtf8(\"K_fMJwH-Q5e0nr7tWsxwkA\");\n+        urlSafe3[2] = StringBytesUtils.getBytesUtf8(\"ZL4VS2_6QCWNGgEojnwxyg\");\n+        urlSafe3[3] = StringBytesUtils.getBytesUtf8(\"_3-PwBzbRxqMi1qTBhg_6A\");\n \n         for (int i = 0; i < 4; i++) {\n             byte[] encodedStandard = Base64.encodeBase64(ids[i]);\n             byte[] encodedUrlSafe = Base64.encodeBase64URLSafe(ids[i]);\n             byte[] decodedStandard = Base64.decodeBase64(standard[i]);\n             byte[] decodedUrlSafe1 = Base64.decodeBase64(urlSafe1[i]);\n-            byte[] decodedUrlSafe2 =Base64.decodeBase64(urlSafe2[i]);\n-            byte[] decodedUrlSafe3 =Base64.decodeBase64(urlSafe3[i]);             \n+            byte[] decodedUrlSafe2 = Base64.decodeBase64(urlSafe2[i]);\n+            byte[] decodedUrlSafe3 = Base64.decodeBase64(urlSafe3[i]);\n \n             // Very important debugging output should anyone\n             // ever need to delve closely into this stuff.\n             if (false) {\n                 System.out.println(\"reference: [\" + new String(Hex.encodeHex(ids[i])) + \"]\");\n-                System.out.println(\"standard:  [\" + new String(Hex.encodeHex(decodedStandard)) + \"] From: [\" + new String(standard[i], \"UTF-8\") + \"]\");\n-                System.out.println(\"safe1:     [\" + new String(Hex.encodeHex(decodedUrlSafe1)) + \"] From: [\" + new String(urlSafe1[i], \"UTF-8\") + \"]\");\n-                System.out.println(\"safe2:     [\" + new String(Hex.encodeHex(decodedUrlSafe2)) + \"] From: [\" + new String(urlSafe2[i], \"UTF-8\") + \"]\");\n-                System.out.println(\"safe3:     [\" + new String(Hex.encodeHex(decodedUrlSafe3)) + \"] From: [\" + new String(urlSafe3[i], \"UTF-8\") + \"]\");\n+                System.out.println(\"standard:  [\"\n+                    + new String(Hex.encodeHex(decodedStandard))\n+                    + \"] From: [\"\n+                    + StringBytesUtils.newStringUtf8(standard[i])\n+                    + \"]\");\n+                System.out.println(\"safe1:     [\"\n+                    + new String(Hex.encodeHex(decodedUrlSafe1))\n+                    + \"] From: [\"\n+                    + StringBytesUtils.newStringUtf8(urlSafe1[i])\n+                    + \"]\");\n+                System.out.println(\"safe2:     [\"\n+                    + new String(Hex.encodeHex(decodedUrlSafe2))\n+                    + \"] From: [\"\n+                    + StringBytesUtils.newStringUtf8(urlSafe2[i])\n+                    + \"]\");\n+                System.out.println(\"safe3:     [\"\n+                    + new String(Hex.encodeHex(decodedUrlSafe3))\n+                    + \"] From: [\"\n+                    + StringBytesUtils.newStringUtf8(urlSafe3[i])\n+                    + \"]\");\n             }\n \n             assertTrue(\"standard encode uuid\", Arrays.equals(encodedStandard, standard[i]));\n             assertTrue(\"url-safe i=\" + i, Arrays.equals(decoded, result));\n             assertFalse(\"url-safe i=\" + i + \" no '='\", Base64TestData.bytesContain(encoded, (byte) '='));\n             assertFalse(\"url-safe i=\" + i + \" no '\\\\'\", Base64TestData.bytesContain(encoded, (byte) '\\\\'));\n-            assertFalse(\"url-safe i=\" + i + \" no '+'\", Base64TestData.bytesContain(encoded, (byte) '+'));            \n+            assertFalse(\"url-safe i=\" + i + \" no '+'\", Base64TestData.bytesContain(encoded, (byte) '+'));\n         }\n \n     }\n \n     /**\n      * Tests isUrlSafe.\n-     */    \n+     */\n     public void testIsUrlSafe() {\n-        Base64 base64Standard = new Base64(false);        \n+        Base64 base64Standard = new Base64(false);\n         Base64 base64URLSafe = new Base64(true);\n \n         assertFalse(\"Base64.isUrlSafe=false\", base64Standard.isUrlSafe());\n         assertTrue(\"Base64.isUrlSafe=true\", base64URLSafe.isUrlSafe());\n \n         byte[] whiteSpace = {' ', '\\n', '\\r', '\\t'};\n-        assertTrue(\"Base64.isArrayByteBase64(whiteSpace)=true\", Base64.isArrayByteBase64(whiteSpace)); \n+        assertTrue(\"Base64.isArrayByteBase64(whiteSpace)=true\", Base64.isArrayByteBase64(whiteSpace));\n     }\n \n     /**\n         byte[] result = Base64.encodeBase64(empty);\n         assertEquals(\"empty base64 encode\", 0, result.length);\n         assertEquals(\"empty base64 encode\", null, Base64.encodeBase64(null));\n-        \n+\n         empty = new byte[0];\n-        result = Base64.decodeBase64(empty);        \n-        assertEquals(\"empty base64 decode\", 0, result.length);        \n+        result = Base64.decodeBase64(empty);\n+        assertEquals(\"empty base64 decode\", 0, result.length);\n         assertEquals(\"empty base64 encode\", null, Base64.decodeBase64(null));\n     }\n \n \n     private String toString(byte[] data) {\n         StringBuffer buf = new StringBuffer();\n-        for(int i=0;i<data.length;i++) {\n+        for (int i = 0; i < data.length; i++) {\n             buf.append(data[i]);\n-            if(i != data.length-1) {\n+            if (i != data.length - 1) {\n                 buf.append(\",\");\n             }\n         }\n      * CODEC-68: isBase64 throws ArrayIndexOutOfBoundsException on some non-BASE64 bytes\n      */\n     public void testCodec68() {\n-        byte[] x = new byte[] { 'n', 'A', '=', '=', (byte) 0x9c };\n+        byte[] x = new byte[]{'n', 'A', '=', '=', (byte) 0x9c};\n         Base64.decodeBase64(x);\n     }\n \n--- /dev/null\n+++ b/src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.codec.binary;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.util.Arrays;\n+\n+import junit.framework.Assert;\n+import junit.framework.TestCase;\n+\n+/**\n+ * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n+ * @version $Id: $\n+ */\n+public class StringBytesUtilsTest extends TestCase {\n+\n+    private static byte[] BYTES_FIXTURE;\n+\n+    private static final String STRING_FIXTURE = \"ABC\";\n+    {\n+        try {\n+            BYTES_FIXTURE = \"abc\".getBytes(\"US-ASCII\");\n+        } catch (UnsupportedEncodingException e) {\n+            throw new IllegalArgumentException(e.toString());\n+        }\n+    }\n+\n+    public void testGetBytesIso8859_1() throws UnsupportedEncodingException {\n+        String charsetName = \"ISO-8859-1\";\n+        testGetSupportedBytes(charsetName);\n+        byte[] expected = STRING_FIXTURE.getBytes(charsetName);\n+        byte[] actual = StringBytesUtils.getBytesIso8859_1(STRING_FIXTURE);\n+        Assert.assertTrue(Arrays.equals(expected, actual));\n+    }\n+\n+    public void testGetBytesUsAscii() throws UnsupportedEncodingException {\n+        String charsetName = \"US-ASCII\";\n+        testGetSupportedBytes(charsetName);\n+        byte[] expected = STRING_FIXTURE.getBytes(charsetName);\n+        byte[] actual = StringBytesUtils.getBytesUsAscii(STRING_FIXTURE);\n+        Assert.assertTrue(Arrays.equals(expected, actual));\n+    }\n+\n+    public void testGetBytesUtf16() throws UnsupportedEncodingException {\n+        String charsetName = \"UTF-16\";\n+        testGetSupportedBytes(charsetName);\n+        byte[] expected = STRING_FIXTURE.getBytes(charsetName);\n+        byte[] actual = StringBytesUtils.getBytesUtf16(STRING_FIXTURE);\n+        Assert.assertTrue(Arrays.equals(expected, actual));\n+    }\n+\n+    public void testGetBytesUtf16Be() throws UnsupportedEncodingException {\n+        String charsetName = \"UTF-16BE\";\n+        testGetSupportedBytes(charsetName);\n+        byte[] expected = STRING_FIXTURE.getBytes(charsetName);\n+        byte[] actual = StringBytesUtils.getBytesUtf16Be(STRING_FIXTURE);\n+        Assert.assertTrue(Arrays.equals(expected, actual));\n+    }\n+\n+    public void testGetBytesUtf16Le() throws UnsupportedEncodingException {\n+        String charsetName = \"UTF-16LE\";\n+        testGetSupportedBytes(charsetName);\n+        byte[] expected = STRING_FIXTURE.getBytes(charsetName);\n+        byte[] actual = StringBytesUtils.getBytesUtf16Le(STRING_FIXTURE);\n+        Assert.assertTrue(Arrays.equals(expected, actual));\n+    }\n+\n+    public void testGetBytesUtf8() throws UnsupportedEncodingException {\n+        String charsetName = \"UTF-8\";\n+        testGetSupportedBytes(charsetName);\n+        byte[] expected = STRING_FIXTURE.getBytes(charsetName);\n+        byte[] actual = StringBytesUtils.getBytesUtf8(STRING_FIXTURE);\n+        Assert.assertTrue(Arrays.equals(expected, actual));\n+    }\n+\n+    private void testGetSupportedBytes(String charsetName) throws UnsupportedEncodingException {\n+        byte[] expected = STRING_FIXTURE.getBytes(charsetName);\n+        byte[] actual = StringBytesUtils.getSupportedBytes(STRING_FIXTURE, charsetName);\n+        Assert.assertTrue(Arrays.equals(expected, actual));\n+    }\n+\n+    public void testGetSupportedBytesBadEnc() {\n+        try {\n+            StringBytesUtils.getSupportedBytes(STRING_FIXTURE, \"UNKNOWN\");\n+            Assert.fail(\"Expected \" + IllegalStateException.class.getName());\n+        } catch (IllegalStateException e) {\n+            // Expected\n+        }\n+    }\n+\n+    private void testNewString(String charsetName) throws UnsupportedEncodingException {\n+        String expected = new String(BYTES_FIXTURE, charsetName);\n+        String actual = StringBytesUtils.newString(BYTES_FIXTURE, charsetName);\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+    public void testNewStringBadEnc() {\n+        try {\n+            StringBytesUtils.newString(BYTES_FIXTURE, \"UNKNOWN\");\n+            Assert.fail(\"Expected \" + IllegalStateException.class.getName());\n+        } catch (IllegalStateException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void testNewStringIso8859_1() throws UnsupportedEncodingException {\n+        String charsetName = \"ISO-8859-1\";\n+        testNewString(charsetName);\n+        String expected = new String(BYTES_FIXTURE, charsetName);\n+        String actual = StringBytesUtils.newStringIso8859_1(BYTES_FIXTURE);\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+    public void testNewStringUsAscii() throws UnsupportedEncodingException {\n+        String charsetName = \"US-ASCII\";\n+        testNewString(charsetName);\n+        String expected = new String(BYTES_FIXTURE, charsetName);\n+        String actual = StringBytesUtils.newStringUsAscii(BYTES_FIXTURE);\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+    public void testNewStringUtf16() throws UnsupportedEncodingException {\n+        String charsetName = \"UTF-16\";\n+        testNewString(charsetName);\n+        String expected = new String(BYTES_FIXTURE, charsetName);\n+        String actual = StringBytesUtils.newStringUtf16(BYTES_FIXTURE);\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+    public void testNewStringUtf16Be() throws UnsupportedEncodingException {\n+        String charsetName = \"UTF-16BE\";\n+        testNewString(charsetName);\n+        String expected = new String(BYTES_FIXTURE, charsetName);\n+        String actual = StringBytesUtils.newStringUtf16Be(BYTES_FIXTURE);\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+    public void testNewStringUtf16Le() throws UnsupportedEncodingException {\n+        String charsetName = \"UTF-16LE\";\n+        testNewString(charsetName);\n+        String expected = new String(BYTES_FIXTURE, charsetName);\n+        String actual = StringBytesUtils.newStringUtf16Le(BYTES_FIXTURE);\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+    public void testNewStringUtf8() throws UnsupportedEncodingException {\n+        String charsetName = \"UTF-8\";\n+        testNewString(charsetName);\n+        String expected = new String(BYTES_FIXTURE, charsetName);\n+        String actual = StringBytesUtils.newStringUtf8(BYTES_FIXTURE);\n+        Assert.assertEquals(expected, actual);\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/codec/net/BCodecTest.java\n+++ b/src/test/org/apache/commons/codec/net/BCodecTest.java\n \n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n+import org.apache.commons.codec.RequiredCharsetNames;\n \n /**\n  * Quoted-printable codec test cases\n         String ru_msg = constructString(RUSSIAN_STUFF_UNICODE);\n         String ch_msg = constructString(SWISS_GERMAN_STUFF_UNICODE);\n \n-        BCodec bcodec = new BCodec(\"UTF-8\");\n+        BCodec bcodec = new BCodec(RequiredCharsetNames.UTF_8);\n \n         assertEquals(\"=?UTF-8?B?0JLRgdC10Lxf0L/RgNC40LLQtdGC?=\", bcodec.encode(ru_msg));\n         assertEquals(\"=?UTF-8?B?R3LDvGV6aV96w6Rtw6Q=?=\", bcodec.encode(ch_msg));\n--- a/src/test/org/apache/commons/codec/net/QCodecTest.java\n+++ b/src/test/org/apache/commons/codec/net/QCodecTest.java\n \n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n+import org.apache.commons.codec.RequiredCharsetNames;\n \n /**\n  * Quoted-printable codec test cases\n         String ru_msg = constructString(RUSSIAN_STUFF_UNICODE); \n         String ch_msg = constructString(SWISS_GERMAN_STUFF_UNICODE); \n         \n-        QCodec qcodec = new QCodec(\"UTF-8\");\n+        QCodec qcodec = new QCodec(RequiredCharsetNames.UTF_8);\n         \n         assertEquals(\n             \"=?UTF-8?Q?=D0=92=D1=81=D0=B5=D0=BC=5F=D0=BF=D1=80=D0=B8=D0=B2=D0=B5=D1=82?=\", \n--- a/src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java\n+++ b/src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java\n \n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n+import org.apache.commons.codec.RequiredCharsetNames;\n \n /**\n  * Quoted-printable codec test cases\n         \n         assertEquals(\n             \"=D0=92=D1=81=D0=B5=D0=BC_=D0=BF=D1=80=D0=B8=D0=B2=D0=B5=D1=82\", \n-        qpcodec.encode(ru_msg, \"UTF-8\")\n+        qpcodec.encode(ru_msg, RequiredCharsetNames.UTF_8)\n         );\n-        assertEquals(\"Gr=C3=BCezi_z=C3=A4m=C3=A4\", qpcodec.encode(ch_msg, \"UTF-8\"));\n-        \n-        assertEquals(ru_msg, qpcodec.decode(qpcodec.encode(ru_msg, \"UTF-8\"), \"UTF-8\"));\n-        assertEquals(ch_msg, qpcodec.decode(qpcodec.encode(ch_msg, \"UTF-8\"), \"UTF-8\"));\n+        assertEquals(\"Gr=C3=BCezi_z=C3=A4m=C3=A4\", qpcodec.encode(ch_msg, RequiredCharsetNames.UTF_8));\n+        \n+        assertEquals(ru_msg, qpcodec.decode(qpcodec.encode(ru_msg, RequiredCharsetNames.UTF_8), RequiredCharsetNames.UTF_8));\n+        assertEquals(ch_msg, qpcodec.decode(qpcodec.encode(ch_msg, RequiredCharsetNames.UTF_8), RequiredCharsetNames.UTF_8));\n     }\n \n     public void testBasicEncodeDecode() throws Exception {\n--- a/src/test/org/apache/commons/codec/net/RFC1522CodecTest.java\n+++ b/src/test/org/apache/commons/codec/net/RFC1522CodecTest.java\n import junit.framework.TestCase;\n \n import org.apache.commons.codec.DecoderException;\n+import org.apache.commons.codec.RequiredCharsetNames;\n \n /**\n  * RFC 1522 compliant codec test cases\n     public void testNullInput() throws Exception {\n         RFC1522TestCodec testcodec = new RFC1522TestCodec();\n         assertNull(testcodec.decodeText(null));\n-        assertNull(testcodec.encodeText(null, \"UTF-8\"));\n+        assertNull(testcodec.encodeText(null, RequiredCharsetNames.UTF_8));\n     }\n \n     public void testDecodeInvalid() throws Exception {\n--- a/src/test/org/apache/commons/codec/net/URLCodecTest.java\n+++ b/src/test/org/apache/commons/codec/net/URLCodecTest.java\n \n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n+import org.apache.commons.codec.RequiredCharsetNames;\n \n /**\n  * URL codec test cases\n         \n         assertEquals(\n             \"%D0%92%D1%81%D0%B5%D0%BC_%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D1%82\", \n-            urlCodec.encode(ru_msg, \"UTF-8\")\n+            urlCodec.encode(ru_msg, RequiredCharsetNames.UTF_8)\n         );\n-        assertEquals(\"Gr%C3%BCezi_z%C3%A4m%C3%A4\", urlCodec.encode(ch_msg, \"UTF-8\"));\n-        \n-        assertEquals(ru_msg, urlCodec.decode(urlCodec.encode(ru_msg, \"UTF-8\"), \"UTF-8\"));\n-        assertEquals(ch_msg, urlCodec.decode(urlCodec.encode(ch_msg, \"UTF-8\"), \"UTF-8\"));\n+        assertEquals(\"Gr%C3%BCezi_z%C3%A4m%C3%A4\", urlCodec.encode(ch_msg, RequiredCharsetNames.UTF_8));\n+        \n+        assertEquals(ru_msg, urlCodec.decode(urlCodec.encode(ru_msg, RequiredCharsetNames.UTF_8), RequiredCharsetNames.UTF_8));\n+        assertEquals(ch_msg, urlCodec.decode(urlCodec.encode(ch_msg, RequiredCharsetNames.UTF_8), RequiredCharsetNames.UTF_8));\n         this.validateState(urlCodec);\n     }\n ", "timestamp": 1248163252, "metainfo": ""}