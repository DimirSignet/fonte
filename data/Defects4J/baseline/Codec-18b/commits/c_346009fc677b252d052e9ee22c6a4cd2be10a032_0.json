{"sha": "346009fc677b252d052e9ee22c6a4cd2be10a032", "log": "CODEC-220 Fluent interface for DigestUtils  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/digest/DigestUtils.java\n+++ b/src/main/java/org/apache/commons/codec/digest/DigestUtils.java\n  * <pre>\n  * import static org.apache.commons.codec.digest.MessageDigestAlgorithms.SHA_224;\n  * ...\n- * byte [] digest = DigestUtils.digest(SHA_224, dataToDigest);\n- * byte [] pommed = DigestUtils.digest(SHA_224, new File(\"pom.xml\"));\n+ * byte [] digest = DigestUtils.with(SHA_224).update(dataToDigest).done();\n+ * String hdigest = DigestUtils.with(SHA_224).update(new File(\"pom.xml\")).asHex();\n  * </pre>\n  * </code>\n  * @see MessageDigestAlgorithms\n      * @param data\n      *            Data to digest\n      * @return the digest\n-     * @throws IOException\n-     *             On error reading from the stream\n+     *\n      * @since 1.11\n      */\n     public static byte[] digest(final MessageDigest messageDigest, final ByteBuffer data) {\n      */\n     public static byte[] digest(final MessageDigest messageDigest, final InputStream data) throws IOException {\n         return updateDigest(messageDigest, data).digest();\n-    }\n-\n-    /**\n-     * Reads through a byte array and returns the digest for the data.\n-     *\n-     * @param digestName\n-     *            The name of the algorithm to use (e.g. MessageDigestAlgoriths.MD5 or \"MD5\")\n-     * @param data\n-     *            Data to digest\n-     * @return the digest\n-     * @throws IOException\n-     *             On error reading from the stream\n-     * @since 1.11\n-     */\n-    public static byte[] digest(final String digestName, final byte[] data) {\n-        return digest(getDigest(digestName), data);\n-    }\n-\n-    /**\n-     * Reads through a ByteBuffer and returns the digest for the data\n-     *\n-     * @param digestName\n-     *            The name of the algorithm to use (e.g. MessageDigestAlgoriths.MD5 or \"MD5\")\n-     * @param data\n-     *            Data to digest\n-     * @return the digest\n-     * @throws IOException\n-     *             On error reading from the stream\n-     * @since 1.11\n-     */\n-    public static byte[] digest(final String digestName, final ByteBuffer data) {\n-        MessageDigest messageDigest = getDigest(digestName);\n-        messageDigest .update(data);\n-        return messageDigest.digest();\n-    }\n-\n-    /**\n-     * Reads through a File and returns the digest for the data\n-     *\n-     * @param digestName\n-     *            The name of the algorithm to use (e.g. MessageDigestAlgoriths.MD5 or \"MD5\")\n-     * @param data\n-     *            Data to digest\n-     * @return the digest\n-     * @throws IOException\n-     *             On error reading from the stream\n-     * @since 1.11\n-     */\n-    public static byte[] digest(final String digestName, final File data) throws IOException {\n-        return updateDigest(getDigest(digestName), data).digest();\n-    }\n-\n-    /**\n-     * Reads through an InputStream and returns the digest for the data\n-     *\n-     * @param digestName\n-     *            The name of the algorithm to use (e.g. MessageDigestAlgoriths.MD5 or \"MD5\")\n-     * @param data\n-     *            Data to digest\n-     * @return the digest\n-     * @throws IOException\n-     *             On error reading from the stream\n-     * @since 1.11\n-     */\n-    public static byte[] digest(final String digestName, final InputStream data) throws IOException {\n-        return updateDigest(getDigest(digestName), data).digest();\n     }\n \n     /**\n         return getDigest(messageDigestAlgorithm, null) != null;\n     }\n \n+    // Fluent interface\n+    \n+    private final MessageDigest messageDigest;\n+\n+    DigestUtils() {\n+        this.messageDigest = null;\n+    }\n+\n+    private DigestUtils(MessageDigest digest) {\n+        this.messageDigest = digest;\n+    }\n+\n+    /**\n+     * Returns a fluent instance for the digest algorithm.\n+     * Does not reset the digest before use.\n+     * @param digest the digest instance to use\n+     * @return\n+     */\n+    public static DigestUtils with(MessageDigest digest) {\n+        return new DigestUtils(digest);\n+    }\n+\n+    /**\n+     * Creates a {@link MessageDigest} and returns a fluent instance.\n+     *\n+     * @param name the name of digest algorithm to create, e.g. {@link MessageDigestAlgorithms#MD5}\n+     * @return\n+     */\n+    public static DigestUtils with(String name) {\n+        return new DigestUtils(getDigest(name));\n+    }\n+\n+    /**\n+     * Returns the message digest instance.\n+     * @return the message digest instance\n+     */\n+    public MessageDigest getMessageDigest() {\n+        return messageDigest;\n+    }\n+\n+    /**\n+     * Completes the hash computation and returns the hash\n+     * accumulated by one or more invocations of an update method.\n+     *\n+     * @return the hash as a byte array\n+     *\n+     * @since 1.11\n+     */\n+    public byte[] done() {\n+        return messageDigest.digest();\n+    }\n+\n+    /**\n+     * Completes the hash computation and returns the hash\n+     * accumulated by one or more invocations of an update method.\n+     *\n+     * @return the hash as a hex String\n+     *\n+     * @since 1.11\n+     */\n+    public String asHex() {\n+        return Hex.encodeHexString(messageDigest.digest());\n+    }\n+\n+    /**\n+     * Updates the {@link MessageDigest} in the {@link DigestUtils} instance\n+     *\n+     * @param valueToDigest\n+     *            the value to update the {@link MessageDigest} with\n+     * @return the updated {@link DigestUtils}\n+     * @since 1.11\n+     */\n+    public DigestUtils update(final byte[] data) throws IOException {\n+        messageDigest.update(data);\n+        return this;\n+    }\n+\n+    /**\n+     * Updates the {@link MessageDigest} in the {@link DigestUtils} instance\n+     *\n+     * @param valueToDigest\n+     *            the value to update the {@link MessageDigest} with\n+     * @return the updated {@link DigestUtils}\n+     * @since 1.11\n+     */\n+    public DigestUtils update(final ByteBuffer data) throws IOException {\n+        messageDigest.update(data);\n+        return this;\n+    }\n+\n+    /**\n+     * Updates the {@link MessageDigest} in the {@link DigestUtils} instance\n+     *\n+     * @param valueToDigest\n+     *            the value to update the {@link MessageDigest} with\n+     * @return the updated {@link DigestUtils}\n+     * @since 1.11\n+     */\n+    public DigestUtils update(final String data) throws IOException {\n+        messageDigest.update(StringUtils.getBytesUtf8(data));\n+        return this;\n+    }\n+\n+    /**\n+     * Updates the {@link MessageDigest} in the {@link DigestUtils} instance\n+     *\n+     * @param valueToDigest\n+     *            the value to update the {@link MessageDigest} with\n+     * @return the updated {@link DigestUtils}\n+     * @since 1.11\n+     */\n+    public DigestUtils update(final InputStream data) throws IOException {\n+        final byte[] buffer = new byte[STREAM_BUFFER_LENGTH];\n+        int read = data.read(buffer, 0, STREAM_BUFFER_LENGTH);\n+\n+        while (read > -1) {\n+            messageDigest.update(buffer, 0, read);\n+            read = data.read(buffer, 0, STREAM_BUFFER_LENGTH);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Updates the {@link MessageDigest} in the {@link DigestUtils} instance\n+     *\n+     * @param valueToDigest\n+     *            the value to update the {@link MessageDigest} with\n+     * @return the updated {@link DigestUtils}\n+     * @since 1.11\n+     */\n+    public DigestUtils update(final File data) throws IOException {\n+        final BufferedInputStream stream = new BufferedInputStream(new FileInputStream(data));\n+        try {\n+            return update(stream);\n+        } finally {\n+            stream.close();\n+        }\n+    }\n }\n--- a/src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java\n+++ b/src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java\n \n     @Test\n     public void testSha224() throws IOException {\n-        assumeJava8();        assertEquals(\"d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f\",\n-                Hex.encodeHexString(DigestUtils.digest(MessageDigestAlgorithms.SHA_224,StringUtils.getBytesUtf8(\"\"))));\n+        assumeJava8();\n+        assertEquals(\"d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f\",\n+                DigestUtils.with(MessageDigestAlgorithms.SHA_224).update((\"\")).asHex());\n         assertEquals(\"730e109bd7a8a32b1cb9d9a09aa2325d2430587ddbc0c38bad911525\",\n-                Hex.encodeHexString(DigestUtils.digest(MessageDigestAlgorithms.SHA_224,StringUtils.getBytesUtf8(\"The quick brown fox jumps over the lazy dog\"))));\n+                DigestUtils.with(MessageDigestAlgorithms.SHA_224).update(\"The quick brown fox jumps over the lazy dog\").asHex());\n \n         // Examples from FIPS 180-4?\n     }", "timestamp": 1463614608, "metainfo": ""}