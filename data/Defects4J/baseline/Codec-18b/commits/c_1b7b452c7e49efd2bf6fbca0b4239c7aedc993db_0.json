{"sha": "1b7b452c7e49efd2bf6fbca0b4239c7aedc993db", "log": "[CODEC-203] Add convenience method decodeHex(String).  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/binary/Hex.java\n+++ b/src/main/java/org/apache/commons/codec/binary/Hex.java\n         {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};\n \n     /**\n+     * Converts a String representing hexadecimal values into an array of bytes of those same values. The\n+     * returned array will be half the length of the passed String, as it takes two characters to represent any given\n+     * byte. An exception is thrown if the passed String has an odd number of elements.\n+     *\n+     * @param data\n+     *            A String containing hexadecimal digits\n+     * @return A byte array containing binary data decoded from the supplied char array.\n+     * @throws DecoderException\n+     *             Thrown if an odd number or illegal of characters is supplied\n+     * @since 1.11\n+     */\n+    public static byte[] decodeHex(String data) throws DecoderException {\n+        return decodeHex(data.toCharArray());\n+    }\n+\n+    /**\n      * Converts an array of characters representing hexadecimal values into an array of bytes of those same values. The\n      * returned array will be half the length of the passed array, as it takes two characters to represent any given\n      * byte. An exception is thrown if the passed char array has an odd number of elements.\n--- a/src/test/java/org/apache/commons/codec/binary/Base64Test.java\n+++ b/src/test/java/org/apache/commons/codec/binary/Base64Test.java\n \t\tfinal byte[][] ids = new byte[4][];\n \n \t\t// ids[0] was chosen so that it encodes with at least one +.\n-\t\tids[0] = Hex.decodeHex(\"94ed8d0319e4493399560fb67404d370\".toCharArray());\n+\t\tids[0] = Hex.decodeHex(\"94ed8d0319e4493399560fb67404d370\");\n \n \t\t// ids[1] was chosen so that it encodes with both / and +.\n-\t\tids[1] = Hex.decodeHex(\"2bf7cc2701fe4397b49ebeed5acc7090\".toCharArray());\n+\t\tids[1] = Hex.decodeHex(\"2bf7cc2701fe4397b49ebeed5acc7090\");\n \n \t\t// ids[2] was chosen so that it encodes with at least one /.\n-\t\tids[2] = Hex.decodeHex(\"64be154b6ffa40258d1a01288e7c31ca\".toCharArray());\n+\t\tids[2] = Hex.decodeHex(\"64be154b6ffa40258d1a01288e7c31ca\");\n \n \t\t// ids[3] was chosen so that it encodes with both / and +, with /\n \t\t// right at the beginning.\n-\t\tids[3] = Hex.decodeHex(\"ff7f8fc01cdb471a8c8b5a9306183fe8\".toCharArray());\n+\t\tids[3] = Hex.decodeHex(\"ff7f8fc01cdb471a8c8b5a9306183fe8\");\n \n \t\tfinal byte[][] standard = new byte[4][];\n \t\tstandard[0] = StringUtils.getBytesUtf8(\"lO2NAxnkSTOZVg+2dATTcA==\");\n--- a/src/test/java/org/apache/commons/codec/binary/HexTest.java\n+++ b/src/test/java/org/apache/commons/codec/binary/HexTest.java\n         }\n     }\n \n-    /**\n-     * @param data\n-     */\n     private void checkDecodeHexCharArrayOddCharacters(final char[] data) {\n+        try {\n+            Hex.decodeHex(data);\n+            fail(\"An exception wasn't thrown when trying to decode an odd number of characters\");\n+        } catch (final DecoderException e) {\n+            // Expected exception\n+        }\n+    }\n+\n+    private void checkDecodeHexCharArrayOddCharacters(String data) {\n         try {\n             Hex.decodeHex(data);\n             fail(\"An exception wasn't thrown when trying to decode an odd number of characters\");\n     }\n \n     @Test\n-    public void testDecodeCharArrayEmpty() throws DecoderException {\n+    public void testDecodeHexCharArrayEmpty() throws DecoderException {\n         assertTrue(Arrays.equals(new byte[0], Hex.decodeHex(new char[0])));\n+    }\n+\n+    @Test\n+    public void testDecodeHexStringEmpty() throws DecoderException {\n+        assertTrue(Arrays.equals(new byte[0], Hex.decodeHex(\"\")));\n     }\n \n     @Test\n     @Test\n     public void testDecodeHexCharArrayOddCharacters1() {\n         checkDecodeHexCharArrayOddCharacters(new char[] { 'A' });\n+    }\n+\n+    @Test\n+    public void testDecodeHexStringOddCharacters1() {\n+        checkDecodeHexCharArrayOddCharacters(\"A\");\n     }\n \n     @Test\n     }\n \n     @Test\n-    public void testEncodeDecodeRandom() throws DecoderException, EncoderException {\n+    public void testEncodeDecodeHexCharArrayRandom() throws DecoderException, EncoderException {\n         final Random random = new Random();\n \n         final Hex hex = new Hex();", "timestamp": 1441311371, "metainfo": ""}