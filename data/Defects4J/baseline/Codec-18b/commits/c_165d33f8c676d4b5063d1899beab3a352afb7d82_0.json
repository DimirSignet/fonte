{"sha": "165d33f8c676d4b5063d1899beab3a352afb7d82", "log": "[#CODEC-80] Regression: Base64.encode(chunk=true) has bug when input length is multiple of 76.  ", "commit": "\n--- a/src/java/org/apache/commons/codec/binary/Base64.java\n+++ b/src/java/org/apache/commons/codec/binary/Base64.java\n             len += 4 - mod;\n         }\n         if (isChunked) {\n-            len += (1 + (len / CHUNK_SIZE)) * CHUNK_SEPARATOR.length;\n+            boolean lenChunksPerfectly = len % CHUNK_SIZE == 0;\n+            len += (len / CHUNK_SIZE) * CHUNK_SEPARATOR.length;\n+            if (!lenChunksPerfectly) {\n+                len += CHUNK_SEPARATOR.length;\n+            }\n         }\n         if (len > Integer.MAX_VALUE) {\n             throw new IllegalArgumentException(\"Input array too big, output array would be bigger than Integer.MAX_VALUE=\" + \n--- a/src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java\n+++ b/src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java\n         testByChunk(encoded, decoded, 76, CRLF);\n \n         // OpenSSL interop test.\n-        encoded = StringBytesUtils.getBytesUtf8(Base64TestData.ENCODED);\n+        encoded = StringBytesUtils.getBytesUtf8(Base64TestData.ENCODED_64_CHARS_PER_LINE);\n         decoded = Base64TestData.DECODED;\n         testByChunk(encoded, decoded, 64, LF);\n \n         // Single Line test.\n-        String singleLine = Base64TestData.ENCODED.replaceAll(\"\\n\", \"\");\n+        String singleLine = Base64TestData.ENCODED_64_CHARS_PER_LINE.replaceAll(\"\\n\", \"\");\n         encoded = StringBytesUtils.getBytesUtf8(singleLine);\n         decoded = Base64TestData.DECODED;\n         testByChunk(encoded, decoded, 0, LF);\n         testByteByByte(encoded, decoded, 76, CRLF);\n \n         // OpenSSL interop test.\n-        encoded = StringBytesUtils.getBytesUtf8(Base64TestData.ENCODED);\n+        encoded = StringBytesUtils.getBytesUtf8(Base64TestData.ENCODED_64_CHARS_PER_LINE);\n         decoded = Base64TestData.DECODED;\n         testByteByByte(encoded, decoded, 64, LF);\n \n         // Single Line test.\n-        String singleLine = Base64TestData.ENCODED.replaceAll(\"\\n\", \"\");\n+        String singleLine = Base64TestData.ENCODED_64_CHARS_PER_LINE.replaceAll(\"\\n\", \"\");\n         encoded = StringBytesUtils.getBytesUtf8(singleLine);\n         decoded = Base64TestData.DECODED;\n         testByteByByte(encoded, decoded, 0, LF);\n--- a/src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java\n+++ b/src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java\n         testByChunk(encoded, decoded, 76, CRLF);\n \n         // OpenSSL interop test.\n-        encoded = StringBytesUtils.getBytesUtf8(Base64TestData.ENCODED);\n+        encoded = StringBytesUtils.getBytesUtf8(Base64TestData.ENCODED_64_CHARS_PER_LINE);\n         decoded = Base64TestData.DECODED;\n         testByChunk(encoded, decoded, 64, LF);\n \n         // Single Line test.\n-        String singleLine = Base64TestData.ENCODED.replaceAll(\"\\n\", \"\");\n+        String singleLine = Base64TestData.ENCODED_64_CHARS_PER_LINE.replaceAll(\"\\n\", \"\");\n         encoded = StringBytesUtils.getBytesUtf8(singleLine);\n         decoded = Base64TestData.DECODED;\n         testByChunk(encoded, decoded, 0, LF);\n         testByteByByte(encoded, decoded, 76, CRLF);\n \n         // OpenSSL interop test.\n-        encoded = StringBytesUtils.getBytesUtf8(Base64TestData.ENCODED);\n+        encoded = StringBytesUtils.getBytesUtf8(Base64TestData.ENCODED_64_CHARS_PER_LINE);\n         decoded = Base64TestData.DECODED;\n         testByteByByte(encoded, decoded, 64, LF);\n \n         // Single Line test.\n-        String singleLine = Base64TestData.ENCODED.replaceAll(\"\\n\", \"\");\n+        String singleLine = Base64TestData.ENCODED_64_CHARS_PER_LINE.replaceAll(\"\\n\", \"\");\n         encoded = StringBytesUtils.getBytesUtf8(singleLine);\n         decoded = Base64TestData.DECODED;\n         testByteByByte(encoded, decoded, 0, LF);\n--- a/src/test/org/apache/commons/codec/binary/Base64Test.java\n+++ b/src/test/org/apache/commons/codec/binary/Base64Test.java\n \n     public void testObjectEncodeWithInvalidParameter() throws Exception {\n         Base64 b64 = new Base64();\n-\n         try {\n             b64.encode(\"Yadayadayada\");\n             fail(\"encode(Object) didn't throw an exception when passed a String object\");\n         } catch (EncoderException e) {\n+            // Expected\n         }\n     }\n \n         assertEquals(\"empty base64 encode\", null, Base64.decodeBase64(null));\n     }\n \n+    /**\n+     * Tests Base64.encodeToString() and Base64.decodeFromString() methods.\n+     * \n+     * @throws Exception\n+     */\n+    public void testChunkedEncodeMultipleOf76() throws Exception {\n+        byte[] expectedEncode = Base64.encodeBase64(Base64TestData.DECODED, true);\n+        // convert to \"\\n\" so we're 100% equal to the old openssl encoding test stored\n+        // in Base64TestData.ENCODED_76_CHARS_PER_LINE:\n+        String actualResult = Base64TestData.ENCODED_76_CHARS_PER_LINE.replaceAll(\"\\n\", \"\\r\\n\");\n+        byte[] actualEncode = actualResult.getBytes(\"UTF-8\");\n+        assertTrue(\"chunkedEncodeMultipleOf76\", Arrays.equals(expectedEncode, actualEncode));\n+    }\n+\n     // -------------------------------------------------------- Private Methods\n \n     private String toString(byte[] data) {\n--- a/src/test/org/apache/commons/codec/binary/Base64TestData.java\n+++ b/src/test/org/apache/commons/codec/binary/Base64TestData.java\n \n     // OpenSSL doesn't include the final \\n, but it would be annoying beyond belief\n     // to further parameterize commons-codec to support this pointless variation.\n-    final static String ENCODED\n+    final static String ENCODED_64_CHARS_PER_LINE\n             = \"9IPNKwUvdLiIAp6ctz12SiQmOGstWyYvSPeevufDhrzaws65voykKjbIj33YWTa9\\n\"\n             + \"xA7c/FHypWclrZhQ7onfc3JE93BJ5fT4R9zAEdjbjy1hv4ZYNnET4WJeXMLJ/5p+\\n\"\n             + \"qBpTsPpepW8DNVYy1c02/1wyC+kgA6CvRUd9cSr/lt88AEdsTV4GMCn1+EwuAiYd\\n\"\n             + \"rb1KAo6wifengxVfIsa2b5ljXzAqXs7JkPvmC6fa7X4ZZndRokaxYlu3cg8OV+uG\\n\"\n             + \"/6YAHZilo8at0OpkkNdNFuhwuGlkBqrZKNUj/gSiYYc06gF/r/z6iWAjpXJRW1qq\\n\"\n             + \"3CLZXdZFZ/VrqXeVjtOAu2A=\\n\";\n+\n+    final static String ENCODED_76_CHARS_PER_LINE\n+            = \"9IPNKwUvdLiIAp6ctz12SiQmOGstWyYvSPeevufDhrzaws65voykKjbIj33YWTa9xA7c/FHypWcl\\n\"\n+            + \"rZhQ7onfc3JE93BJ5fT4R9zAEdjbjy1hv4ZYNnET4WJeXMLJ/5p+qBpTsPpepW8DNVYy1c02/1wy\\n\"\n+            + \"C+kgA6CvRUd9cSr/lt88AEdsTV4GMCn1+EwuAiYdivxuzn+cLM8q2jewqlI52tP9J7Cs8vqG71s6\\n\"\n+            + \"+WAELKvm/UovvyaOi+OdMUfjQ0JLiLkHu6p9OwUgvQqiDKzEv/Augo0dTPZzYGEyCP5GVrle3QQd\\n\"\n+            + \"gciIHnpdd4VUTPGRUbXeKbh++U3fbJIng/sQXM3IYByMZ7xt9HWS1LUcRdQ7Prwn/IlQWxOMeq+K\\n\"\n+            + \"ZJSoAviWtdserXyHbIEa//hmr4p/j80k0g9q35hq1ayGM9984ALTSaZ8WeyFbZx1CxC/Qoqf92UH\\n\"\n+            + \"/ylBRnSJNn4sS0oa3uUbNvOnpkB4D9V7Ut9atinCJrw+wiJcMl+9kp251IUxBGA4cUxh0eaxk3OD\\n\"\n+            + \"WnwI95EktmWOKwCSP0xjWwIMxDjygwAG5R8fk9H9bVi1thMavm4nDc4vaNoSE1RnZNYwbiUVlVPM\\n\"\n+            + \"9EclvJWTWd6igWeA0MxHAA8iOM5Vnmqp/WGM7UDq59rBIdNQCoeTJaAkEtAuLL5zogOa5e+MzVjv\\n\"\n+            + \"B5MYQlOlaaTtQrRApXa5Z4VfEanu9UK2fi1T8jJPFC2PmXebxp0bnO+VW+bgyEdIIkIQCaZq1MKW\\n\"\n+            + \"C3KuiOS9BJ1t7O0A2JKJKvoE4UNulzV2TGCC+KAnmjRqQBqXlJmgjHQAoHNZKOma/uIQOsvfDnqi\\n\"\n+            + \"cYdDmfyCYuV89HjA1H8tiDJ85VfsrFHdcbPAoNCpi65awJSHfdPO1NDONOK++S7Y0VXUgoYYrBV4\\n\"\n+            + \"Y7YbC8wg/nqcimr3lm3tRyp+QsgKzdREbfNRk0F5PLyLfsUElepjs1QdV3fEV1LJtiywA3ubVNQJ\\n\"\n+            + \"RxhbYxa/C/Xy2qxpm6vvdL92l3q1ccev35IcaOiSx7Im+/GxV2lVKdaOvYVGDD1zBRe6Y2CwQb9p\\n\"\n+            + \"088l3/93qGR5593NCiuPPWcsDWwUShM1EyW0FNX1F8bnzHnYijoyE/jf4s/l9bBd7yJdRWRCyih2\\n\"\n+            + \"WcypAiOIEkBsH+dCTgalu8sRDoMh4ZIBBdgHfoZUycLqReQFLZZ4Sl4zSmzt5vQxQFhEKb9+ff/4\\n\"\n+            + \"rb1KAo6wifengxVfIsa2b5ljXzAqXs7JkPvmC6fa7X4ZZndRokaxYlu3cg8OV+uG/6YAHZilo8at\\n\"\n+            + \"0OpkkNdNFuhwuGlkBqrZKNUj/gSiYYc06gF/r/z6iWAjpXJRW1qq3CLZXdZFZ/VrqXeVjtOAu2A=\\n\";\n \n     final static byte[] DECODED\n             = {-12, -125, -51, 43, 5, 47, 116, -72, -120, 2, -98, -100, -73, 61, 118, 74, 36, 38, 56, 107, 45, 91, 38,", "timestamp": 1248396155, "metainfo": ""}