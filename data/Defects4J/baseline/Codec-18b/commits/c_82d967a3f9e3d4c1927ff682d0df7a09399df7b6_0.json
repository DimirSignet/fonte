{"sha": "82d967a3f9e3d4c1927ff682d0df7a09399df7b6", "log": "[CODEC-212] Create a minimal Digest command line utility: org.apache.commons.codec.digest.Digest.  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/codec/digest/Digest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.codec.digest;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.security.MessageDigest;\n+\n+import org.apache.commons.codec.binary.Hex;\n+\n+/**\n+ * A minimal command line to run digest over files.\n+ *\n+ * @see #main(String[])\n+ */\n+public class Digest {\n+\n+    /**\n+     * Runs the digest algorithm in {@code args[0]} on the file in {@code args[1]}. If there is no {@code args[1]}, use\n+     * standard input.\n+     * \n+     * <p>\n+     * The algorithm can also be {@code ALL} or {@code *} to output one line for each known algorithm.\n+     * </p>\n+     * \n+     * @param args\n+     *            {@code args[0]} is one of {@link MessageDigestAlgorithm} name, {@link MessageDigest} name, {@code ALL}\n+     *            , or {@code *}. {@code args[1]} is a FILE.\n+     * @throws IOException\n+     */\n+    public static void main(String[] args) throws IOException {\n+        new Digest(args).run();\n+    }\n+\n+    private final String algorithm;\n+    private final String[] args;\n+    private final String source;\n+\n+    private Digest(final String[] args) {\n+        if (args == null) {\n+            throw new IllegalArgumentException(\"args\");\n+        }\n+        if (args.length == 0) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Usage: java %s [algorithm] [FILE|DIRECTORY]\", Digest.class.getName()));\n+        }\n+        this.args = args;\n+        algorithm = args[0];\n+        source = args.length == 1 ? null : args[1];\n+    }\n+\n+    private void println(String prefix, final byte[] digest) {\n+        final String sourceDesc = source == null ? \"-\" : source;\n+        System.out.println(prefix + Hex.encodeHexString(digest) + \" \" + sourceDesc);\n+    }\n+\n+    private void run() throws IOException {\n+        if (algorithm.equalsIgnoreCase(\"ALL\") || algorithm.equals(\"*\")) {\n+            run(MessageDigestAlgorithm.values());\n+            return;\n+        }\n+        final MessageDigest messageDigest = DigestUtils.getDigest(algorithm, null);\n+        if (messageDigest != null) {\n+            run(\"\", messageDigest);\n+        } else {\n+            run(\"\", MessageDigestAlgorithm.valueOf(algorithm).getMessageDigest());\n+        }\n+    }\n+\n+    private void run(MessageDigestAlgorithm[] digestAlgorithms) throws IOException {\n+        for (int i = 0; i < digestAlgorithms.length; i++) {\n+            final MessageDigestAlgorithm messageDigestAlgorithm = digestAlgorithms[i];\n+            if (messageDigestAlgorithm.isAvailable()) {\n+                run(messageDigestAlgorithm.getAlgorithm() + \" \", messageDigestAlgorithm);\n+            }\n+        }\n+    }\n+\n+    private void run(String prefix, final MessageDigest messageDigest) throws IOException {\n+        if (source == null) {\n+            println(prefix, DigestUtils.digest(messageDigest, System.in));\n+            return;\n+        }\n+        final File file = new File(source);\n+        if (file.isFile()) {\n+            println(prefix, DigestUtils.digest(messageDigest, file));\n+        } else if (file.isDirectory()) {\n+            run(prefix, messageDigest, file.listFiles());\n+        }\n+    }\n+\n+    private void run(String prefix, MessageDigest messageDigest, File[] files) throws IOException {\n+        for (int i = 0; i < files.length; i++) {\n+            println(prefix, DigestUtils.digest(messageDigest, files[i]));\n+        }\n+    }\n+\n+    private void run(String prefix, final MessageDigestAlgorithm messageDigestAlgorithm) throws IOException {\n+        run(prefix, messageDigestAlgorithm.getMessageDigest());\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"%s[%s]\", super.toString(), args);\n+    }\n+}", "timestamp": 1463190455, "metainfo": ""}