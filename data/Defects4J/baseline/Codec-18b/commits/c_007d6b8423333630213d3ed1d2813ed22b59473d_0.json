{"sha": "007d6b8423333630213d3ed1d2813ed22b59473d", "log": "[CODEC-139] DigestUtils: add updateDigest methods and make methods public.  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/digest/DigestUtils.java\n+++ b/src/main/java/org/apache/commons/codec/digest/DigestUtils.java\n      * @throws RuntimeException\n      *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n      */\n-    static MessageDigest getDigest(String algorithm) {\n+    public static MessageDigest getDigest(String algorithm) {\n         try {\n             return MessageDigest.getInstance(algorithm);\n         } catch (NoSuchAlgorithmException e) {\n      * @throws RuntimeException\n      *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n      */\n-    private static MessageDigest getMd5Digest() {\n+    public static MessageDigest getMd5Digest() {\n         return getDigest(\"MD5\");\n     }\n \n      * @throws RuntimeException\n      *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n      */\n-    private static MessageDigest getSha256Digest() {\n+    public static MessageDigest getSha256Digest() {\n         return getDigest(\"SHA-256\");\n     }\n \n      * @throws RuntimeException\n      *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n      */\n-    private static MessageDigest getSha384Digest() {\n+    public static MessageDigest getSha384Digest() {\n         return getDigest(\"SHA-384\");\n     }\n \n      * @throws RuntimeException\n      *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n      */\n-    private static MessageDigest getSha512Digest() {\n+    public static MessageDigest getSha512Digest() {\n         return getDigest(\"SHA-512\");\n     }\n \n      * @throws RuntimeException\n      *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n      */\n-    private static MessageDigest getShaDigest() {\n+    public static MessageDigest getShaDigest() {\n         return getDigest(\"SHA\");\n     }\n \n     public static String shaHex(String data) {\n         return Hex.encodeHexString(sha(data));\n     }\n+\n+    /**\n+     * Updates the given {@link MessageDigest}.\n+     * \n+     * @param messageDigest\n+     *            the {@link MessageDigest} to update\n+     * @param valueToDigest\n+     *            the value to update the {@link MessageDigest} with\n+     * @return the updated {@link MessageDigest}\n+     * @since 1.7\n+     */\n+    public static MessageDigest updateDigest(final MessageDigest messageDigest, final String valueToDigest) {\n+        messageDigest.update(getBytesUtf8(valueToDigest));\n+        return messageDigest;\n+    }\n+\n+    /**\n+     * Updates the given {@link MessageDigest}.\n+     * \n+     * @param messageDigest\n+     *            the {@link MessageDigest} to update\n+     * @param valueToDigest\n+     *            the value to update the {@link MessageDigest} with\n+     * @return the updated {@link MessageDigest}\n+     * @since 1.7\n+     */\n+    public static MessageDigest updateDigest(final MessageDigest messageDigest, byte[] valueToDigest) {\n+        messageDigest.update(valueToDigest);\n+        return messageDigest;\n+    }\n }\n--- a/src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java\n+++ b/src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java\n \n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n+import java.security.MessageDigest;\n import java.util.Random;\n \n+import org.apache.commons.codec.binary.Hex;\n import org.apache.commons.codec.binary.StringUtils;\n import org.junit.Test;\n \n                 DigestUtils.shaHex(new ByteArrayInputStream(testData)));\n \n     }\n+    \n+    @Test\n+    public void testUpdateWithByteArray(){\n+        final String d1 = \"C'est un homme qui rentre dans un caf\u00e9, et plouf\";\n+        final String d2 = \"C'est un homme, c'est qu'une t\u00eate, on lui offre un cadeau: 'oh... encore un chapeau!'\";\n+\n+        MessageDigest messageDigest = DigestUtils.getShaDigest();\n+        messageDigest.update(d1.getBytes());\n+        messageDigest.update(d2.getBytes());\n+        final String expectedResult = Hex.encodeHexString(messageDigest.digest());\n+\n+        messageDigest = DigestUtils.getShaDigest();\n+        DigestUtils.updateDigest(messageDigest, d1.getBytes());\n+        DigestUtils.updateDigest(messageDigest, d2.getBytes());\n+        final String actualResult = Hex.encodeHexString(messageDigest.digest());\n+\n+        assertEquals(expectedResult, actualResult);\n+    }\n+\n+    @Test\n+    public void testUpdateWithString(){\n+        final String d1 = \"C'est un homme qui rentre dans un caf\u00e9, et plouf\";\n+        final String d2 = \"C'est un homme, c'est qu'une t\u00eate, on lui offre un cadeau: 'oh... encore un chapeau!'\";\n+        \n+        MessageDigest messageDigest = DigestUtils.getShaDigest();\n+        messageDigest.update(StringUtils.getBytesUtf8(d1));\n+        messageDigest.update(StringUtils.getBytesUtf8(d2));\n+        final String expectedResult = Hex.encodeHexString(messageDigest.digest());\n+\n+        messageDigest = DigestUtils.getShaDigest();\n+        DigestUtils.updateDigest(messageDigest, d1);\n+        DigestUtils.updateDigest(messageDigest, d2);\n+        final String actualResult = Hex.encodeHexString(messageDigest.digest());\n+\n+        assertEquals(expectedResult, actualResult);\n+    }\n+\n }", "timestamp": 1334970979, "metainfo": ""}