{"sha": "08f16c137ec17058350c03fa7eb9068377644c6a", "log": "Javadoc.  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/digest/Crypt.java\n+++ b/src/main/java/org/apache/commons/codec/digest/Crypt.java\n     /**\n      * Encrypts a password in a crypt(3) compatible way.\n      * <p>\n-     * A random salt and the default algorithm (currently SHA-512) are used. See\n-     * {@link #crypt(String, String)} for details.\n+     * A random salt and the default algorithm (currently SHA-512) are used. See {@link #crypt(String, String)} for\n+     * details.\n      *\n      * @param keyBytes\n      *            plaintext password\n      * @return hash value\n      * @throws RuntimeException\n-     *            when a {@link java.security.NoSuchAlgorithmException} is caught.\n+     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n      */\n     public static String crypt(byte[] keyBytes) {\n         return crypt(keyBytes, null);\n     /**\n      * Encrypts a password in a crypt(3) compatible way.\n      * <p>\n-     * If no salt is provided, a random salt and the default algorithm (currently SHA-512) will be used.\n-     * See {@link #crypt(String, String)} for details.\n+     * If no salt is provided, a random salt and the default algorithm (currently SHA-512) will be used. See\n+     * {@link #crypt(String, String)} for details.\n      *\n      * @param keyBytes\n      *            plaintext password\n      *            salt value\n      * @return hash value\n      * @throws IllegalArgumentException\n-     *              if the salt does not match the allowed pattern\n+     *             if the salt does not match the allowed pattern\n      * @throws RuntimeException\n-     *              when a {@link java.security.NoSuchAlgorithmException} is caught.\n+     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n      */\n     public static String crypt(byte[] keyBytes, String salt) {\n         if (salt == null) {\n      *            plaintext password\n      * @return hash value\n      * @throws RuntimeException\n-     *              when a {@link java.security.NoSuchAlgorithmException} is caught.\n+     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n      */\n     public static String crypt(String key) {\n         return crypt(key, null);\n      * <li>DES, the traditional UnixCrypt algorithm is used else with only 2 chars\n      * <li>Only the first 8 chars of the passwords are used in the DES algorithm!\n      * </ul>\n-     * The magic strings \"$apr1$\" and \"$2a$\" are not recognised by this method as its\n-     * output should be identical with that of the libc implementation.\n+     * The magic strings \"$apr1$\" and \"$2a$\" are not recognised by this method as its output should be identical with\n+     * that of the libc implementation.\n      * <p>\n-     * The rest of the salt string is drawn from the set [a-zA-Z0-9./] and is cut at the\n-     * maximum length of if a \"$\" sign is encountered. It is therefore valid to enter a\n-     * complete hash value as salt to e.g. verify a password with:\n+     * The rest of the salt string is drawn from the set [a-zA-Z0-9./] and is cut at the maximum length of if a \"$\"\n+     * sign is encountered. It is therefore valid to enter a complete hash value as salt to e.g. verify a password\n+     * with:\n+     *\n      * <pre>\n-     *      storedPwd.equals(crypt(enteredPwd, storedPwd))\n+     * storedPwd.equals(crypt(enteredPwd, storedPwd))\n      * </pre>\n      * <p>\n-     * The resulting string starts with the marker string ($6$), continues with the salt\n-     * value and ends with a \"$\" sign followed by the actual hash value. For DES the string\n-     * only contains the salt and actual hash. It's total length is dependent on the algorithm used:\n+     * The resulting string starts with the marker string ($6$), continues with the salt value and ends with a \"$\" sign\n+     * followed by the actual hash value. For DES the string only contains the salt and actual hash. It's total length\n+     * is dependent on the algorithm used:\n      * <ul>\n      * <li>SHA-512: 106 chars\n      * <li>SHA-256: 63 chars\n      * </ul>\n      * <p>\n      * Example:\n+     *\n      * <pre>\n      *      crypt(\"secret\", \"$1$xxxx\") => \"$1$xxxx$aMkevjfEIpa35Bh3G4bAc.\"\n      *      crypt(\"secret\", \"xx\") => \"xxWAum7tHdIUw\"\n      * </pre>\n      * <p>\n-     * This method comes in a variation that accepts a byte[] array to support input strings that\n-     * are not encoded in UTF-8 but e.g. in ISO-8859-1 where equal characters result in different byte values.\n+     * This method comes in a variation that accepts a byte[] array to support input strings that are not encoded in\n+     * UTF-8 but e.g. in ISO-8859-1 where equal characters result in different byte values.\n      *\n      * @see \"The man page of the libc crypt (3) function.\"\n      * @param key\n      *            salt value\n      * @return hash value, i.e. encrypted password including the salt string\n      * @throws IllegalArgumentException\n-     *              if the salt does not match the allowed pattern\n+     *             if the salt does not match the allowed pattern\n      * @throws RuntimeException\n-     *              when a {@link java.security.NoSuchAlgorithmException} is caught.     *\n+     *             when a {@link java.security.NoSuchAlgorithmException} is caught. *\n      */\n     public static String crypt(String key, String salt) {\n         return crypt(key.getBytes(Charsets.UTF_8), salt);", "timestamp": 1346518608, "metainfo": ""}