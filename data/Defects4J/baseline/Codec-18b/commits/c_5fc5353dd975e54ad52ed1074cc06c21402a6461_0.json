{"sha": "5fc5353dd975e54ad52ed1074cc06c21402a6461", "log": "PR: 24360 Submitted by:\tGary Gregory [codec] ClassCastException in Hex.decode(Object) fixed. Javadoc.   ", "commit": "\n--- a/src/java/org/apache/commons/codec/binary/Hex.java\n+++ b/src/java/org/apache/commons/codec/binary/Hex.java\n import org.apache.commons.codec.EncoderException;\n \n /**\n- * Hex encoder/decoder.\n+ * Hex encoder and decoder.\n  * \n  * @author <a href=\"mailto:siege@preoccupied.net\">Christopher O'Brien</a>\n  * @author Tim O'Brien\n- * @version $Id: Hex.java,v 1.8 2003/10/05 21:45:49 tobrien Exp $\n+ * @author Gary Gregory\n+ * @version $Id: Hex.java,v 1.9 2003/11/03 19:03:17 ggregory Exp $\n  */\n public class Hex implements BinaryEncoder, BinaryDecoder {\n \n-\n-    /** for building output as Hex */\n+    /** \n+     * Used building output as Hex \n+     */\n     private static char[] digits = {\n         '0', '1', '2', '3', '4', '5', '6', '7',\n            '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'\n     };\n-\n-\tpublic Object encode(Object pObject) throws EncoderException {\n-\t\tif(pObject instanceof String) {\n-\t\t    pObject = ((String) pObject).getBytes();\n-\t\t}\n-\t\n-\t\ttry {\n-\t\t\treturn encodeHex((byte[]) pObject);\n-\t\t} catch(Exception e) {\n-\t\t\tthrow new EncoderException(e.getMessage());\n-\t\t}\n-\t}\n-\t\n-\tpublic byte[] encode(byte[] pArray) {\n-\t\treturn new String(encodeHex(pArray)).getBytes();\n-\t}\n-\t\n-\tpublic Object decode(Object pObject) throws DecoderException {\n-\t\tif(pObject instanceof String) {\n-\t\t    pObject = ((String) pObject).getBytes();\n-\t\t}\n-\t\n-\t\ttry {\n-\t\t    return decodeHex((char[]) pObject);\n-\t\t} catch(Exception e) {\n-\t\t    throw new DecoderException(e.getMessage());\n-\t\t}\n-\t}\n-\t\n-\t\n-\t\n-\tpublic byte[] decode(byte[] pArray) throws DecoderException {\n-\t\treturn decodeHex(new String(pArray).toCharArray());\n-\t}\n-\n-    /**\n-     * Converts an array of bytes into an array of characters representing the\n-     * hexidecimal values of each byte in order. The returned array will be\n-     * double the length of the passed array, as it takes two characters to\n-     * represent any given byte.\n-     *\n-     * @param data array of byte to convert to Hex characters\n-     * @return A char[] containing hexidecimal characters\n-     */\n-    public static char[] encodeHex(byte[] data) {\n-\n-        int l = data.length;\n-\n-           char[] out = new char[l << 1];\n-\n-           // two characters form the hex value.\n-           for (int i = 0, j = 0; i < l; i++) {\n-               out[j++] = digits[(0xF0 & data[i]) >>> 4 ];\n-               out[j++] = digits[ 0x0F & data[i] ];\n-           }\n-\n-           return out;\n-    }\n-\n-\n \n     /**\n      * Converts an array of characters representing hexidecimal values into an\n      * number of elements.\n      * \n      * @param data An array of characters containing hexidecimal digits\n-     * @return A byte array array containing binary data decoded from\n+     * @return A byte array containing binary data decoded from\n      *         the supplied char array.\n-     * @throws Exception Thrown if an odd number of characters is supplied\n+     * @throws DecoderException Thrown if an odd number of characters is supplied\n      *                   to this function\n      */\n     public static byte[] decodeHex(char[] data) throws DecoderException {\n         int l = data.length;\n \n            if ((l & 0x01) != 0) {\n-               throw new DecoderException(\"odd number of characters.\");\n+               throw new DecoderException(\"Odd number of characters.\");\n            }\n \n            byte[] out = new byte[l >> 1];\n            return out;\n     }\n \n+    /**\n+     * Converts an array of bytes into an array of characters representing the\n+     * hexidecimal values of each byte in order. The returned array will be\n+     * double the length of the passed array, as it takes two characters to\n+     * represent any given byte.\n+     *\n+     * @param data a byte[] to convert to Hex characters\n+     * @return A char[] containing hexidecimal characters\n+     */\n+    public static char[] encodeHex(byte[] data) {\n+\n+        int l = data.length;\n+\n+           char[] out = new char[l << 1];\n+\n+           // two characters form the hex value.\n+           for (int i = 0, j = 0; i < l; i++) {\n+               out[j++] = digits[(0xF0 & data[i]) >>> 4 ];\n+               out[j++] = digits[ 0x0F & data[i] ];\n+           }\n+\n+           return out;\n+    }\n+\t\n+    /**\n+     * Converts an array of character bytes representing hexidecimal values into an\n+     * array of bytes of those same values. The returned array will be half the\n+     * length of the passed array, as it takes two characters to represent any\n+     * given byte. An exception is thrown if the passed char array has an odd\n+     * number of elements.\n+     * \n+     * @param array An array of character bytes containing hexidecimal digits\n+     * @return A byte array containing binary data decoded from\n+     *         the supplied byte array (representing characters).\n+     * @throws DecoderException Thrown if an odd number of characters is supplied\n+     *                   to this function\n+     * @see #decodeHex(char[])\n+     */\n+\tpublic byte[] decode(byte[] array) throws DecoderException {\n+\t\treturn decodeHex(new String(array).toCharArray());\n+\t}\n+\t\n+    /**\n+     * Converts a String or an array of character bytes representing hexidecimal values into an\n+     * array of bytes of those same values. The returned array will be half the\n+     * length of the passed String or array, as it takes two characters to represent any\n+     * given byte. An exception is thrown if the passed char array has an odd\n+     * number of elements.\n+     * \n+     * @param object A String or, an array of character bytes containing hexidecimal digits\n+     * @return A byte array containing binary data decoded from\n+     *         the supplied byte array (representing characters).\n+     * @throws DecoderException Thrown if an odd number of characters is supplied\n+     *                   to this function or the object is not a String or char[]\n+     * @see #decodeHex(char[])\n+     */\n+\tpublic Object decode(Object object) throws DecoderException {\n+\t\ttry {\n+            char[] charArray = object instanceof String ? ((String) object).toCharArray() : (char[]) object;\n+\t\t    return decodeHex(charArray);\n+\t\t} catch (ClassCastException e) {\n+\t\t    throw new DecoderException(e.getMessage());\n+\t\t}\n+\t}\n+\t\n+    /**\n+     * Converts an array of bytes into an array of bytes for the characters representing the\n+     * hexidecimal values of each byte in order. The returned array will be\n+     * double the length of the passed array, as it takes two characters to\n+     * represent any given byte.\n+     *\n+     * @param array a byte[] to convert to Hex characters\n+     * @return A byte[] containing the bytes of the hexidecimal characters\n+     * @see #encodeHex(byte[])\n+     */\n+\tpublic byte[] encode(byte[] array) {\n+\t\treturn new String(encodeHex(array)).getBytes();\n+\t}\n+\n+    /**\n+     * Converts a String or an array of bytes into an array of characters representing the\n+     * hexidecimal values of each byte in order. The returned array will be\n+     * double the length of the passed String or array, as it takes two characters to\n+     * represent any given byte.\n+     *\n+     * @param object a String, or byte[] to convert to Hex characters\n+     * @return A char[] containing hexidecimal characters\n+     * @throws EncoderException Thrown if the given object is not a String or byte[]\n+     * @see #encodeHex(byte[])\n+     */\n+\tpublic Object encode(Object object) throws EncoderException {\t\n+\t\ttry {\n+            byte[] byteArray = object instanceof String ? ((String) object).getBytes() : (byte[]) object;\n+\t\t\treturn encodeHex(byteArray);\n+\t\t} catch (ClassCastException e) {\n+\t\t\tthrow new EncoderException(e.getMessage());\n+\t\t}\n+\t}\n+\n }\n ", "timestamp": 1067886197, "metainfo": ""}