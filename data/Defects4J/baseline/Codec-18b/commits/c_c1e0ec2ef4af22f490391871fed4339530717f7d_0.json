{"sha": "c1e0ec2ef4af22f490391871fed4339530717f7d", "log": "Refactor tests to use generics.  ", "commit": "\n--- a/src/test/java/org/apache/commons/codec/StringEncoderAbstractTest.java\n+++ b/src/test/java/org/apache/commons/codec/StringEncoderAbstractTest.java\n /**\n  * @version $Id$\n  */\n-public abstract class StringEncoderAbstractTest {\n+public abstract class StringEncoderAbstractTest<T extends StringEncoder> {\n \n-    protected StringEncoder stringEncoder = this.createStringEncoder();\n+    protected T stringEncoder = this.createStringEncoder();\n \n     public void checkEncoding(String expected, String source) throws EncoderException {\n         Assert.assertEquals(\"Source: \" + source, expected, this.getStringEncoder().encode(source));\n         }\n     }\n \n-    protected abstract StringEncoder createStringEncoder();\n+    protected abstract T createStringEncoder();\n \n-    public StringEncoder getStringEncoder() {\n+    public T getStringEncoder() {\n         return this.stringEncoder;\n     }\n \n--- a/src/test/java/org/apache/commons/codec/language/Caverphone1Test.java\n+++ b/src/test/java/org/apache/commons/codec/language/Caverphone1Test.java\n import junit.framework.Assert;\n \n import org.apache.commons.codec.EncoderException;\n-import org.apache.commons.codec.StringEncoder;\n import org.apache.commons.codec.StringEncoderAbstractTest;\n import org.junit.Test;\n \n  * @version $Id: CaverphoneTest.java 1075947 2011-03-01 17:56:14Z ggregory $\n  * @since 1.5\n  */\n-public class Caverphone1Test extends StringEncoderAbstractTest {\n+public class Caverphone1Test extends StringEncoderAbstractTest<Caverphone1> {\n \n     @Override\n-    protected StringEncoder createStringEncoder() {\n+    protected Caverphone1 createStringEncoder() {\n         return new Caverphone1();\n     }\n \n--- a/src/test/java/org/apache/commons/codec/language/Caverphone2Test.java\n+++ b/src/test/java/org/apache/commons/codec/language/Caverphone2Test.java\n import junit.framework.Assert;\n \n import org.apache.commons.codec.EncoderException;\n-import org.apache.commons.codec.StringEncoder;\n import org.apache.commons.codec.StringEncoderAbstractTest;\n import org.junit.Test;\n \n  * @version $Id$\n  * @since 1.5\n  */\n-public class Caverphone2Test extends StringEncoderAbstractTest {\n+public class Caverphone2Test extends StringEncoderAbstractTest<Caverphone2> {\n \n     @Override\n-    protected StringEncoder createStringEncoder() {\n+    protected Caverphone2 createStringEncoder() {\n         return new Caverphone2();\n     }\n \n--- a/src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java\n+++ b/src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java\n package org.apache.commons.codec.language;\n \n import org.apache.commons.codec.EncoderException;\n-import org.apache.commons.codec.StringEncoder;\n import org.apache.commons.codec.StringEncoderAbstractTest;\n import org.junit.Test;\n \n  * <p>Keep this file in UTF-8 encoding for proper Javadoc processing.</p>\n  *\n  */\n-public class ColognePhoneticTest extends StringEncoderAbstractTest {\n+public class ColognePhoneticTest extends StringEncoderAbstractTest<ColognePhonetic> {\n \n     @Override\n-    protected StringEncoder createStringEncoder() {\n+    protected ColognePhonetic createStringEncoder() {\n         return new ColognePhonetic();\n     }\n \n--- a/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java\n+++ b/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java\n \n import static org.junit.Assert.assertEquals;\n \n-import org.apache.commons.codec.StringEncoder;\n import org.apache.commons.codec.StringEncoderAbstractTest;\n import org.junit.Test;\n \n  * @see <a href=\"http://swoodbridge.com/DoubleMetaPhone/surnames.txt\">PHP test program</a>\n  * @version $Id$\n  */\n-public class DoubleMetaphone2Test extends StringEncoderAbstractTest {\n+public class DoubleMetaphone2Test extends StringEncoderAbstractTest<DoubleMetaphone> {\n \n     private static final int ALTERNATE_INDEX = 2;\n \n     private void checkDoubleMetaphone(int typeIndex, boolean alternate) {\n         for (int i = 0; i < TEST_DATA.length; i++) {\n             String value = TEST_DATA[i][0];\n-            assertEquals(\"Test [\" + i + \"]=\" + value, TEST_DATA[i][typeIndex], this.getDoubleMetaphone().doubleMetaphone(value, alternate));\n+            assertEquals(\"Test [\" + i + \"]=\" + value, TEST_DATA[i][typeIndex], this.getStringEncoder().doubleMetaphone(value, alternate));\n         }\n     }\n \n     @Override\n-    protected StringEncoder createStringEncoder() {\n+    protected DoubleMetaphone createStringEncoder() {\n         return new DoubleMetaphone();\n-    }\n-\n-    /**\n-     * @return Returns the metaphone.\n-     */\n-    private DoubleMetaphone getDoubleMetaphone() {\n-        return (DoubleMetaphone) this.getStringEncoder();\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java\n+++ b/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java\n import static org.junit.Assert.fail;\n \n import org.apache.commons.codec.EncoderException;\n-import org.apache.commons.codec.StringEncoder;\n import org.apache.commons.codec.StringEncoderAbstractTest;\n import org.junit.Test;\n \n  * @see \"http://www.cuj.com/documents/s=8038/cuj0006philips/\"\n  * @version $Id$\n  */\n-public class DoubleMetaphoneTest extends StringEncoderAbstractTest {\n+public class DoubleMetaphoneTest extends StringEncoderAbstractTest<DoubleMetaphone> {\n \n     /**\n      * Test data from http://aspell.sourceforge.net/test/batch0.tab.\n      * Tests encoding APIs in one place.\n      */\n     private void assertDoubleMetaphone(String expected, String source) {\n-        assertEquals(expected, this.getDoubleMetaphone().encode(source));\n+        assertEquals(expected, this.getStringEncoder().encode(source));\n         try {\n-            assertEquals(expected, this.getDoubleMetaphone().encode((Object) source));\n+            assertEquals(expected, this.getStringEncoder().encode((Object) source));\n         } catch (EncoderException e) {\n             fail(\"Unexpected expection: \" + e);\n         }\n-        assertEquals(expected, this.getDoubleMetaphone().doubleMetaphone(source));\n-        assertEquals(expected, this.getDoubleMetaphone().doubleMetaphone(source, false));\n+        assertEquals(expected, this.getStringEncoder().doubleMetaphone(source));\n+        assertEquals(expected, this.getStringEncoder().doubleMetaphone(source, false));\n     }\n \n     /**\n      * Tests encoding APIs in one place.\n      */\n     public void assertDoubleMetaphoneAlt(String expected, String source) {\n-        assertEquals(expected, this.getDoubleMetaphone().doubleMetaphone(source, true));\n+        assertEquals(expected, this.getStringEncoder().doubleMetaphone(source, true));\n     }\n \n     public void doubleMetaphoneEqualTest(String[][] pairs, boolean useAlternate) {\n             String name0 = pair[0];\n             String name1 = pair[1];\n             String failMsg = \"Expected match between \" + name0 + \" and \" + name1 + \" (use alternate: \" + useAlternate + \")\";\n-            assertTrue(failMsg, this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0, name1, useAlternate));\n-            assertTrue(failMsg, this.getDoubleMetaphone().isDoubleMetaphoneEqual(name1, name0, useAlternate));\n+            assertTrue(failMsg, this.getStringEncoder().isDoubleMetaphoneEqual(name0, name1, useAlternate));\n+            assertTrue(failMsg, this.getStringEncoder().isDoubleMetaphoneEqual(name1, name0, useAlternate));\n             if (!useAlternate) {\n-                assertTrue(failMsg, this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0, name1));\n-                assertTrue(failMsg, this.getDoubleMetaphone().isDoubleMetaphoneEqual(name1, name0));\n+                assertTrue(failMsg, this.getStringEncoder().isDoubleMetaphoneEqual(name0, name1));\n+                assertTrue(failMsg, this.getStringEncoder().isDoubleMetaphoneEqual(name1, name0));\n             }\n         }\n     }\n \n     public void doubleMetaphoneNotEqualTest(boolean alternate) {\n-        assertFalse(this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"Brain\", \"Band\", alternate));\n-        assertFalse(this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"Band\", \"Brain\", alternate));\n+        assertFalse(this.getStringEncoder().isDoubleMetaphoneEqual(\"Brain\", \"Band\", alternate));\n+        assertFalse(this.getStringEncoder().isDoubleMetaphoneEqual(\"Band\", \"Brain\", alternate));\n \n         if (!alternate) {\n-            assertFalse(this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"Brain\", \"Band\"));\n-            assertFalse(this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"Band\", \"Brain\"));\n+            assertFalse(this.getStringEncoder().isDoubleMetaphoneEqual(\"Brain\", \"Band\"));\n+            assertFalse(this.getStringEncoder().isDoubleMetaphoneEqual(\"Band\", \"Brain\"));\n         }\n     }\n \n-    private DoubleMetaphone getDoubleMetaphone() {\n-        return (DoubleMetaphone) this.getStringEncoder();\n-    }\n-\n     @Override\n-    protected StringEncoder createStringEncoder() {\n+    protected DoubleMetaphone createStringEncoder() {\n         return new DoubleMetaphone();\n     }\n \n \n     @Test\n     public void testEmpty() {\n-        assertEquals(null, this.getDoubleMetaphone().doubleMetaphone(null));\n-        assertEquals(null, this.getDoubleMetaphone().doubleMetaphone(\"\"));\n-        assertEquals(null, this.getDoubleMetaphone().doubleMetaphone(\" \"));\n-        assertEquals(null, this.getDoubleMetaphone().doubleMetaphone(\"\\t\\n\\r \"));\n+        assertEquals(null, this.getStringEncoder().doubleMetaphone(null));\n+        assertEquals(null, this.getStringEncoder().doubleMetaphone(\"\"));\n+        assertEquals(null, this.getStringEncoder().doubleMetaphone(\" \"));\n+        assertEquals(null, this.getStringEncoder().doubleMetaphone(\"\\t\\n\\r \"));\n     }\n \n     /**\n         for (int i = 0; i < FIXTURE.length; i++) {\n             String name0 = FIXTURE[i][0];\n             String name1 = FIXTURE[i][1];\n-            boolean match1 = this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0, name1, false);\n-            boolean match2 = this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0, name1, true);\n+            boolean match1 = this.getStringEncoder().isDoubleMetaphoneEqual(name0, name1, false);\n+            boolean match2 = this.getStringEncoder().isDoubleMetaphoneEqual(name0, name1, true);\n             if (match1 == false && match2 == false) {\n                 String failMsg = \"[\" + i + \"] \" + name0 + \" and \" + name1 + cr;\n                 failures.append(failMsg);\n         for (int i = 0; i < MATCHES.length; i++) {\n             String name0 = MATCHES[i][0];\n             String name1 = MATCHES[i][1];\n-            boolean match1 = this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0, name1, false);\n-            boolean match2 = this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0, name1, true);\n+            boolean match1 = this.getStringEncoder().isDoubleMetaphoneEqual(name0, name1, false);\n+            boolean match2 = this.getStringEncoder().isDoubleMetaphoneEqual(name0, name1, true);\n             if (match1 == false && match2 == false) {\n                 fail(\"Expected match [\" + i + \"] \" + name0 + \" and \" + name1);\n             }\n \n     @Test\n     public void testCCedilla() {\n-        assertTrue(this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"\\u00e7\", \"S\")); // c-cedilla\n+        assertTrue(this.getStringEncoder().isDoubleMetaphoneEqual(\"\\u00e7\", \"S\")); // c-cedilla\n     }\n \n     @Test\n     public void testNTilde() {\n-        assertTrue(this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"\\u00f1\", \"N\")); // n-tilde\n+        assertTrue(this.getStringEncoder().isDoubleMetaphoneEqual(\"\\u00f1\", \"N\")); // n-tilde\n     }\n \n     public void validateFixture(String[][] pairs) {\n--- a/src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java\n+++ b/src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n \n-import org.apache.commons.codec.StringEncoder;\n import org.apache.commons.codec.StringEncoderAbstractTest;\n import org.junit.Test;\n \n  * \n  * An unusual value is indicated by the term \"corner case\"\n  */\n-public class MatchRatingApproachEncoderTest extends StringEncoderAbstractTest {\n-\n-    private MatchRatingApproachEncoder getMatchRatingApproachEncoder() {\n-        return (MatchRatingApproachEncoder) this.getStringEncoder();\n-    }\n+public class MatchRatingApproachEncoderTest extends StringEncoderAbstractTest<MatchRatingApproachEncoder> {\n+\n+    \n \n     // ********** BEGIN REGION - TEST SUPPORT METHODS\n \n     @Test\n     public final void testAccentRemoval_AllLower_SuccessfullyRemoved() {\n-        assertEquals(\"aeiou\", getMatchRatingApproachEncoder().removeAccents(\"\u00e1\u00e9\u00ed\u00f3\u00fa\"));\n+        assertEquals(\"aeiou\", this.getStringEncoder().removeAccents(\"\u00e1\u00e9\u00ed\u00f3\u00fa\"));\n     }\n \n     @Test\n     public final void testAccentRemoval_WithSpaces_SuccessfullyRemovedAndSpacesInvariant() {\n-        assertEquals(\"ae io  u\", getMatchRatingApproachEncoder().removeAccents(\"\u00e1\u00e9 \u00ed\u00f3  \u00fa\"));\n+        assertEquals(\"ae io  u\", this.getStringEncoder().removeAccents(\"\u00e1\u00e9 \u00ed\u00f3  \u00fa\"));\n     }\n \n     @Test\n     public final void testAccentRemoval_UpperandLower_SuccessfullyRemovedAndCaseInvariant() {\n-        assertEquals(\"AeiOuu\", getMatchRatingApproachEncoder().removeAccents(\"\u00c1e\u00ed\u00d3uu\"));\n+        assertEquals(\"AeiOuu\", this.getStringEncoder().removeAccents(\"\u00c1e\u00ed\u00d3uu\"));\n     }\n \n     @Test\n     public final void testAccentRemoval_MixedWithUnusualChars_SuccessfullyRemovedAndUnusualcharactersInvariant() {\n-        assertEquals(\"A-e'i.,o&u\", getMatchRatingApproachEncoder().removeAccents(\"\u00c1-e'\u00ed.,\u00f3&\u00fa\"));\n+        assertEquals(\"A-e'i.,o&u\", this.getStringEncoder().removeAccents(\"\u00c1-e'\u00ed.,\u00f3&\u00fa\"));\n     }\n \n     @Test\n     public final void testAccentRemoval_GerSpanFrenMix_SuccessfullyRemoved() {\n-        assertEquals(\"aeou\u00dfAEOUnNa\", getMatchRatingApproachEncoder().removeAccents(\"\u00e4\u00eb\u00f6\u00fc\u00df\u00c4\u00cb\u00d6\u00dc\u00f1\u00d1\u00e0\"));\n+        assertEquals(\"aeou\u00dfAEOUnNa\", this.getStringEncoder().removeAccents(\"\u00e4\u00eb\u00f6\u00fc\u00df\u00c4\u00cb\u00d6\u00dc\u00f1\u00d1\u00e0\"));\n     }\n \n     @Test\n     public final void testAccentRemoval_ComprehensiveAccentMix_AllSuccessfullyRemoved() {\n         assertEquals(\"E,E,E,E,U,U,I,I,A,A,O,e,e,e,e,u,u,i,i,a,a,o,c\",\n-                getMatchRatingApproachEncoder().removeAccents(\"\u00c8,\u00c9,\u00ca,\u00cb,\u00db,\u00d9,\u00cf,\u00ce,\u00c0,\u00c2,\u00d4,\u00e8,\u00e9,\u00ea,\u00eb,\u00fb,\u00f9,\u00ef,\u00ee,\u00e0,\u00e2,\u00f4,\u00e7\"));\n+                this.getStringEncoder().removeAccents(\"\u00c8,\u00c9,\u00ca,\u00cb,\u00db,\u00d9,\u00cf,\u00ce,\u00c0,\u00c2,\u00d4,\u00e8,\u00e9,\u00ea,\u00eb,\u00fb,\u00f9,\u00ef,\u00ee,\u00e0,\u00e2,\u00f4,\u00e7\"));\n     }\n \n     @Test\n     public final void testAccentRemovalNormalString_NoChange() {\n-        assertEquals(\"Colorless green ideas sleep furiously\", getMatchRatingApproachEncoder().removeAccents(\"Colorless green ideas sleep furiously\"));\n+        assertEquals(\"Colorless green ideas sleep furiously\", this.getStringEncoder().removeAccents(\"Colorless green ideas sleep furiously\"));\n     }\n \n     @Test\n     public final void testAccentRemoval_NINO_NoChange() {\n-        assertEquals(\"\", getMatchRatingApproachEncoder().removeAccents(\"\"));\n+        assertEquals(\"\", this.getStringEncoder().removeAccents(\"\"));\n     }\n \n     @Test\n     public final void testRemoveSingleDoubleConsonants_BUBLE_RemovedSuccessfully() {\n-        assertEquals(\"BUBLE\", getMatchRatingApproachEncoder().removeDoubleConsonants(\"BUBBLE\"));\n+        assertEquals(\"BUBLE\", this.getStringEncoder().removeDoubleConsonants(\"BUBBLE\"));\n     }\n \n     @Test\n     public final void testRemoveDoubleConsonants_MISSISSIPPI_RemovedSuccessfully() {\n-        assertEquals(\"MISISIPI\", getMatchRatingApproachEncoder().removeDoubleConsonants(\"MISSISSIPPI\"));\n+        assertEquals(\"MISISIPI\", this.getStringEncoder().removeDoubleConsonants(\"MISSISSIPPI\"));\n     }\n \n     @Test\n     public final void testRemoveDoubleDoubleVowel_BEETLE_NotRemoved() {\n-        assertEquals(\"BEETLE\", getMatchRatingApproachEncoder().removeDoubleConsonants(\"BEETLE\"));\n+        assertEquals(\"BEETLE\", this.getStringEncoder().removeDoubleConsonants(\"BEETLE\"));\n     }\n \n     @Test\n     public final void testIsVowel_CapitalA_ReturnsTrue() {\n-        assertEquals(true, getMatchRatingApproachEncoder().isVowel(\"A\"));\n+        assertEquals(true, this.getStringEncoder().isVowel(\"A\"));\n     }\n \n     @Test\n     public final void testIsVowel_SmallD_ReturnsFalse() {\n-        assertFalse(getMatchRatingApproachEncoder().isVowel(\"d\"));\n+        assertFalse(this.getStringEncoder().isVowel(\"d\"));\n     }\n \n     @Test\n     public final void testRemoveVowel_ALESSANDRA_Returns_ALSSNDR() {\n-        assertEquals(\"ALSSNDR\", getMatchRatingApproachEncoder().removeVowels(\"ALESSANDRA\"));\n+        assertEquals(\"ALSSNDR\", this.getStringEncoder().removeVowels(\"ALESSANDRA\"));\n     }\n \n     @Test\n     public final void testRemoveVowel__AIDAN_Returns_ADN() {\n-        assertEquals(\"ADN\", getMatchRatingApproachEncoder().removeVowels(\"AIDAN\"));\n+        assertEquals(\"ADN\", this.getStringEncoder().removeVowels(\"AIDAN\"));\n     }\n \n     @Test\n     public final void testRemoveVowel__DECLAN_Returns_DCLN() {\n-        assertEquals(\"DCLN\", getMatchRatingApproachEncoder().removeVowels(\"DECLAN\"));\n+        assertEquals(\"DCLN\", this.getStringEncoder().removeVowels(\"DECLAN\"));\n     }\n \n     @Test\n     public final void testGetFirstLast3__ALEXANDER_Returns_Aleder() {\n-        assertEquals(\"Aleder\", getMatchRatingApproachEncoder().getFirst3Last3(\"Alexzander\"));\n+        assertEquals(\"Aleder\", this.getStringEncoder().getFirst3Last3(\"Alexzander\"));\n     }\n \n     @Test\n     public final void testGetFirstLast3_PETE_Returns_PETE() {\n-        assertEquals(\"PETE\", getMatchRatingApproachEncoder().getFirst3Last3(\"PETE\"));\n+        assertEquals(\"PETE\", this.getStringEncoder().getFirst3Last3(\"PETE\"));\n     }\n \n     @Test\n     public final void testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4() {\n-        assertEquals(4, getMatchRatingApproachEncoder().leftToRightThenRightToLeftProcessing(\"ALEXANDER\", \"ALEXANDRA\"));\n+        assertEquals(4, this.getStringEncoder().leftToRightThenRightToLeftProcessing(\"ALEXANDER\", \"ALEXANDRA\"));\n     }\n \n     @Test\n     public final void testleftTorightThenRightToLeft_EINSTEIN_MICHAELA_Returns0() {\n-        assertEquals(0, getMatchRatingApproachEncoder().leftToRightThenRightToLeftProcessing(\"EINSTEIN\", \"MICHAELA\"));\n+        assertEquals(0, this.getStringEncoder().leftToRightThenRightToLeftProcessing(\"EINSTEIN\", \"MICHAELA\"));\n     }\n \n     @Test\n     public final void testGetMinRating_7_Return4_Successfully() {\n-        assertEquals(4, getMatchRatingApproachEncoder().getMinRating(7));\n+        assertEquals(4, this.getStringEncoder().getMinRating(7));\n     }\n \n     @Test\n     public final void testGetMinRating_2_Returns5_Successfully() {\n-        assertEquals(5, getMatchRatingApproachEncoder().getMinRating(2));\n+        assertEquals(5, this.getStringEncoder().getMinRating(2));\n     }\n \n     @Test\n     public final void testGetMinRating_2_Return1_Successfully() {\n-        assertEquals(1, getMatchRatingApproachEncoder().getMinRating(13));\n+        assertEquals(1, this.getStringEncoder().getMinRating(13));\n     }\n \n     @Test\n     public final void testcleanName_SuccessfullyClean() {\n-        assertEquals(\"THISISATEST\", getMatchRatingApproachEncoder().cleanName(\"This-\u00eds   a t.,es &t\"));\n+        assertEquals(\"THISISATEST\", this.getStringEncoder().cleanName(\"This-\u00eds   a t.,es &t\"));\n     }\n \n     // ***** END REGION - TEST SUPPORT METHODS\n \n     @Test\n     public final void testGetEncoding_HARPER_HRPR() {\n-        assertEquals(\"HRPR\", getMatchRatingApproachEncoder().encode(\"HARPER\"));\n+        assertEquals(\"HRPR\", this.getStringEncoder().encode(\"HARPER\"));\n     }\n \n     @Test\n     public final void testGetEncoding_SMITH_to_SMTH() {\n-        assertEquals(\"SMTH\", getMatchRatingApproachEncoder().encode(\"Smith\"));\n+        assertEquals(\"SMTH\", this.getStringEncoder().encode(\"Smith\"));\n     }\n \n     @Test\n     public final void testGetEncoding_SMYTH_to_SMYTH() {\n-        assertEquals(\"SMYTH\", getMatchRatingApproachEncoder().encode(\"Smyth\"));\n+        assertEquals(\"SMYTH\", this.getStringEncoder().encode(\"Smyth\"));\n     }\n \n     @Test\n     public final void testGetEncoding_Space_to_Nothing() {\n-        assertEquals(\"\", getMatchRatingApproachEncoder().encode(\" \"));\n+        assertEquals(\"\", this.getStringEncoder().encode(\" \"));\n     }\n \n     @Test\n     public final void testGetEncoding_NoSpace_to_Nothing() {\n-        assertEquals(\"\", getMatchRatingApproachEncoder().encode(\"\"));\n+        assertEquals(\"\", this.getStringEncoder().encode(\"\"));\n     }\n \n     @Test\n     public final void testGetEncoding_Null_to_Nothing() {\n-        assertEquals(\"\", getMatchRatingApproachEncoder().encode(null));\n+        assertEquals(\"\", this.getStringEncoder().encode(null));\n     }\n \n     @Test\n     public final void testGetEncoding_One_Letter_to_Nothing() {\n-        assertEquals(\"\", getMatchRatingApproachEncoder().encode(\"E\"));\n+        assertEquals(\"\", this.getStringEncoder().encode(\"E\"));\n     }\n \n     // ***** END REGION - TEST GET MRA ENCODING\n \n     @Test\n     public final void testCompare_SMITH_SMYTH_SuccessfullyMatched() {\n-        assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(\"smith\", \"smyth\"));\n+        assertTrue(this.getStringEncoder().isEncodeEquals(\"smith\", \"smyth\"));\n     }\n \n     @Test\n     public final void testCompare_BURNS_BOURNE_SuccessfullyMatched() {\n-        assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(\"Burns\", \"Bourne\"));\n+        assertTrue(this.getStringEncoder().isEncodeEquals(\"Burns\", \"Bourne\"));\n     }\n \n     @Test\n     public final void testCompare_ShortNames_AL_ED_WorksButNoMatch() {\n-        assertFalse(getMatchRatingApproachEncoder().isEncodeEquals(\"Al\", \"Ed\"));\n+        assertFalse(this.getStringEncoder().isEncodeEquals(\"Al\", \"Ed\"));\n     }\n \n     @Test\n     public final void testCompare_CATHERINE_KATHRYN_SuccessfullyMatched() {\n-        assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(\"Catherine\", \"Kathryn\"));\n+        assertTrue(this.getStringEncoder().isEncodeEquals(\"Catherine\", \"Kathryn\"));\n     }\n \n     @Test\n     public final void testCompare_BRIAN_BRYAN_SuccessfullyMatched() {\n-        assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(\"Brian\", \"Bryan\"));\n+        assertTrue(this.getStringEncoder().isEncodeEquals(\"Brian\", \"Bryan\"));\n     }\n \n     @Test\n     public final void testCompare_SEAN_SHAUN_SuccessfullyMatched() {\n-        assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(\"S\u00e9an\", \"Shaun\"));\n+        assertTrue(this.getStringEncoder().isEncodeEquals(\"S\u00e9an\", \"Shaun\"));\n     }\n \n     @Test\n     public final void testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched() {\n-        assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(\"C\u00f3lm.   \", \"C-ol\u00edn\"));\n+        assertTrue(this.getStringEncoder().isEncodeEquals(\"C\u00f3lm.   \", \"C-ol\u00edn\"));\n     }\n \n     @Test\n     public final void testCompare_STEPHEN_STEVEN_SuccessfullyMatched() {\n-        assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(\"Stephen\", \"Steven\"));\n+        assertTrue(this.getStringEncoder().isEncodeEquals(\"Stephen\", \"Steven\"));\n     }\n \n     @Test\n     public final void testCompare_STEVEN_STEFAN_SuccessfullyMatched() {\n-        assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(\"Steven\", \"Stefan\"));\n+        assertTrue(this.getStringEncoder().isEncodeEquals(\"Steven\", \"Stefan\"));\n     }\n \n     @Test\n     public final void testCompare_STEPHEN_STEFAN_SuccessfullyMatched() {\n-        assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(\"Stephen\", \"Stefan\"));\n+        assertTrue(this.getStringEncoder().isEncodeEquals(\"Stephen\", \"Stefan\"));\n     }\n \n     @Test\n     public final void testCompare_SAM_SAMUEL_SuccessfullyMatched() {\n-        assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(\"Sam\", \"Samuel\"));\n+        assertTrue(this.getStringEncoder().isEncodeEquals(\"Sam\", \"Samuel\"));\n     }\n \n     @Test\n     public final void testCompare_MICKY_MICHAEL_SuccessfullyMatched() {\n-        assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(\"Micky\", \"Michael\"));\n+        assertTrue(this.getStringEncoder().isEncodeEquals(\"Micky\", \"Michael\"));\n     }\n \n     @Test\n     public final void testCompare_OONA_OONAGH_SuccessfullyMatched() {\n-        assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(\"Oona\", \"Oonagh\"));\n+        assertTrue(this.getStringEncoder().isEncodeEquals(\"Oona\", \"Oonagh\"));\n     }\n \n     @Test\n     public final void testCompare_SOPHIE_SOFIA_SuccessfullyMatched() {\n-        assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(\"Sophie\", \"Sofia\"));\n+        assertTrue(this.getStringEncoder().isEncodeEquals(\"Sophie\", \"Sofia\"));\n     }\n \n     @Test\n     public final void testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched() {\n-        assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(\"Franciszek\", \"Frances\"));\n+        assertTrue(this.getStringEncoder().isEncodeEquals(\"Franciszek\", \"Frances\"));\n     }\n \n     @Test\n     public final void testCompare_TOMASZ_TOM_SuccessfullyMatched() {\n-        assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(\"Tomasz\", \"tom\"));\n+        assertTrue(this.getStringEncoder().isEncodeEquals(\"Tomasz\", \"tom\"));\n     }\n \n     @Test\n     public final void testCompare_SmallInput_CARK_Kl_SuccessfullyMatched() {\n-        assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(\"Kl\", \"Karl\"));\n+        assertTrue(this.getStringEncoder().isEncodeEquals(\"Kl\", \"Karl\"));\n     }\n \n     @Test\n     public final void testCompareNameToSingleLetter_KARL_C_DoesNotMatch() {\n-        assertFalse(getMatchRatingApproachEncoder().isEncodeEquals(\"Karl\", \"C\"));\n+        assertFalse(this.getStringEncoder().isEncodeEquals(\"Karl\", \"C\"));\n     }\n \n     @Test\n     public final void testCompare_ZACH_ZAKARIA_SuccessfullyMatched() {\n-        assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(\"Zach\", \"Zacharia\"));\n+        assertTrue(this.getStringEncoder().isEncodeEquals(\"Zach\", \"Zacharia\"));\n     }\n \n     @Test\n     public final void testCompare_KARL_ALESSANDRO_DoesNotMatch() {\n-        assertFalse(getMatchRatingApproachEncoder().isEncodeEquals(\"Karl\", \"Alessandro\"));\n+        assertFalse(this.getStringEncoder().isEncodeEquals(\"Karl\", \"Alessandro\"));\n     }\n \n     @Test\n     public final void testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot() {\n-        assertFalse(getMatchRatingApproachEncoder().isEncodeEquals(\"\u00dana\", \"Oonagh\")); // Disappointing\n+        assertFalse(this.getStringEncoder().isEncodeEquals(\"\u00dana\", \"Oonagh\")); // Disappointing\n     }\n \n     // ***** Begin Region - Test Get Encoding - Surnames\n \n     @Test\n     public final void testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch() {\n-        assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(\"O'Sullivan\", \"\u00d3 ' S\u00failleabh\u00e1in\"));\n+        assertTrue(this.getStringEncoder().isEncodeEquals(\"O'Sullivan\", \"\u00d3 ' S\u00failleabh\u00e1in\"));\n     }\n \n     @Test\n     public final void testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch() {\n-        assertFalse(getMatchRatingApproachEncoder().isEncodeEquals(\"Moriarty\", \"OMuircheartaigh\"));\n+        assertFalse(this.getStringEncoder().isEncodeEquals(\"Moriarty\", \"OMuircheartaigh\"));\n     }\n \n     @Test\n     public final void testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch() {\n-        assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(\"o'muireadhaigh\", \"\u00d3 'Muircheartaigh \"));\n+        assertTrue(this.getStringEncoder().isEncodeEquals(\"o'muireadhaigh\", \"\u00d3 'Muircheartaigh \"));\n     }\n \n     @Test\n     public final void testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched() {\n-        assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(\"Cooper-Flynn\", \"Super-Lyn\"));\n+        assertTrue(this.getStringEncoder().isEncodeEquals(\"Cooper-Flynn\", \"Super-Lyn\"));\n     }\n \n     @Test\n     public final void testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched() {\n-        assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(\"Hailey\", \"Halley\"));\n+        assertTrue(this.getStringEncoder().isEncodeEquals(\"Hailey\", \"Halley\"));\n     }\n \n     // **** BEGIN YIDDISH/SLAVIC SECTION ****\n \n     @Test\n     public final void testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched() {\n-        assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(\"Auerbach\", \"Uhrbach\"));\n+        assertTrue(this.getStringEncoder().isEncodeEquals(\"Auerbach\", \"Uhrbach\"));\n     }\n \n     @Test\n     public final void testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched() {\n-        assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(\"Moskowitz\", \"Moskovitz\"));\n+        assertTrue(this.getStringEncoder().isEncodeEquals(\"Moskowitz\", \"Moskovitz\"));\n     }\n \n     @Test\n     public final void testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched() {\n-        assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(\"LIPSHITZ\", \"LIPPSZYC\"));\n+        assertTrue(this.getStringEncoder().isEncodeEquals(\"LIPSHITZ\", \"LIPPSZYC\"));\n     }\n \n     @Test\n     public final void testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched() {\n-        assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(\"LEWINSKY\", \"LEVINSKI\"));\n+        assertTrue(this.getStringEncoder().isEncodeEquals(\"LEWINSKY\", \"LEVINSKI\"));\n     }\n \n     @Test\n     public final void testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched() {\n-        assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(\"SZLAMAWICZ\", \"SHLAMOVITZ\"));\n+        assertTrue(this.getStringEncoder().isEncodeEquals(\"SZLAMAWICZ\", \"SHLAMOVITZ\"));\n     }\n \n     @Test\n     public final void testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched() {\n-        assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(\"R o s o ch o w a c ie c\", \" R o s o k ho v a ts e ts\"));\n+        assertTrue(this.getStringEncoder().isEncodeEquals(\"R o s o ch o w a c ie c\", \" R o s o k ho v a ts e ts\"));\n     }\n \n     @Test\n     public final void testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched() {\n-        assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(\" P rz e m y s l\", \" P sh e m e sh i l\"));\n+        assertTrue(this.getStringEncoder().isEncodeEquals(\" P rz e m y s l\", \" P sh e m e sh i l\"));\n     }\n \n     // **** END YIDDISH/SLAVIC SECTION ****\n \n     @Test\n     public final void testCompare_PETERSON_PETERS_SuccessfullyMatched() {\n-        assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(\"Peterson\", \"Peters\"));\n+        assertTrue(this.getStringEncoder().isEncodeEquals(\"Peterson\", \"Peters\"));\n     }\n \n     @Test\n     public final void testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched() {\n-        assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(\"McGowan\", \"Mc Geoghegan\"));\n+        assertTrue(this.getStringEncoder().isEncodeEquals(\"McGowan\", \"Mc Geoghegan\"));\n     }\n \n     @Test\n     public final void testCompare_SurnamesCornerCase_MURPHY_Space_NoMatch() {\n-        assertFalse(getMatchRatingApproachEncoder().isEncodeEquals(\"Murphy\", \" \"));\n+        assertFalse(this.getStringEncoder().isEncodeEquals(\"Murphy\", \" \"));\n     }\n \n     @Test\n     public final void testCompare_SurnamesCornerCase_MURPHY_NoSpace_NoMatch() {\n-        assertFalse(getMatchRatingApproachEncoder().isEncodeEquals(\"Murphy\", \"\"));\n+        assertFalse(this.getStringEncoder().isEncodeEquals(\"Murphy\", \"\"));\n     }\n \n     @Test\n     public final void testCompare_SurnameCornerCase_Nulls_NoMatch() {\n-        assertFalse(getMatchRatingApproachEncoder().isEncodeEquals(null, null));\n+        assertFalse(this.getStringEncoder().isEncodeEquals(null, null));\n     }\n \n     @Test\n     public final void testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected() {\n-        assertFalse(getMatchRatingApproachEncoder().isEncodeEquals(\"Murphy\", \"Lynch\"));\n+        assertFalse(this.getStringEncoder().isEncodeEquals(\"Murphy\", \"Lynch\"));\n     }\n \n     @Test\n     public final void testCompare_Forenames_SEAN_JOHN_MatchExpected() {\n-        assertTrue(getMatchRatingApproachEncoder().isEncodeEquals(\"Sean\", \"John\"));\n+        assertTrue(this.getStringEncoder().isEncodeEquals(\"Sean\", \"John\"));\n     }\n \n     @Test\n     public final void testCompare_Forenames_SEAN_PETE_NoMatchExpected() {\n-        assertFalse(getMatchRatingApproachEncoder().isEncodeEquals(\"Sean\", \"Pete\"));\n+        assertFalse(this.getStringEncoder().isEncodeEquals(\"Sean\", \"Pete\"));\n     }\n \n     @Override\n-    protected StringEncoder createStringEncoder() {\n+    protected MatchRatingApproachEncoder createStringEncoder() {\n         return new MatchRatingApproachEncoder();\n     }\n \n--- a/src/test/java/org/apache/commons/codec/language/MetaphoneTest.java\n+++ b/src/test/java/org/apache/commons/codec/language/MetaphoneTest.java\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n-import org.apache.commons.codec.StringEncoder;\n import org.apache.commons.codec.StringEncoderAbstractTest;\n import org.junit.Test;\n \n /**\n  * @version $Id$\n  */\n-public class MetaphoneTest extends StringEncoderAbstractTest {\n+public class MetaphoneTest extends StringEncoderAbstractTest<Metaphone> {\n \n     public void assertIsMetaphoneEqual(String source, String[] matches) {\n         // match source to all matches\n         for (String matche : matches) {\n             assertTrue(\"Source: \" + source + \", should have same Metaphone as: \" + matche,\n-                       this.getMetaphone().isMetaphoneEqual(source, matche));\n+                       this.getStringEncoder().isMetaphoneEqual(source, matche));\n         }\n         // match to each other\n         for (String matche : matches) {\n             for (String matche2 : matches) {\n-                assertTrue(this.getMetaphone().isMetaphoneEqual(matche, matche2));\n+                assertTrue(this.getStringEncoder().isMetaphoneEqual(matche, matche2));\n             }\n         }\n     }\n             String name0 = pair[0];\n             String name1 = pair[1];\n             String failMsg = \"Expected match between \" + name0 + \" and \" + name1;\n-            assertTrue(failMsg, this.getMetaphone().isMetaphoneEqual(name0, name1));\n-            assertTrue(failMsg, this.getMetaphone().isMetaphoneEqual(name1, name0));\n+            assertTrue(failMsg, this.getStringEncoder().isMetaphoneEqual(name0, name1));\n+            assertTrue(failMsg, this.getStringEncoder().isMetaphoneEqual(name1, name0));\n         }\n     }\n \n-    /**\n-     * @return Returns the metaphone.\n-     */\n-    private Metaphone getMetaphone() {\n-        return (Metaphone) this.getStringEncoder();\n-    }\n-\n     @Override\n-    protected StringEncoder createStringEncoder() {\n+    protected Metaphone createStringEncoder() {\n         return new Metaphone();\n     }\n \n \n     @Test\n     public void testMetaphone() {\n-        assertEquals(\"HL\", this.getMetaphone().metaphone(\"howl\"));\n-        assertEquals(\"TSTN\", this.getMetaphone().metaphone(\"testing\"));\n-        assertEquals(\"0\", this.getMetaphone().metaphone(\"The\"));\n-        assertEquals(\"KK\", this.getMetaphone().metaphone(\"quick\"));\n-        assertEquals(\"BRN\", this.getMetaphone().metaphone(\"brown\"));\n-        assertEquals(\"FKS\", this.getMetaphone().metaphone(\"fox\"));\n-        assertEquals(\"JMPT\", this.getMetaphone().metaphone(\"jumped\"));\n-        assertEquals(\"OFR\", this.getMetaphone().metaphone(\"over\"));\n-        assertEquals(\"0\", this.getMetaphone().metaphone(\"the\"));\n-        assertEquals(\"LS\", this.getMetaphone().metaphone(\"lazy\"));\n-        assertEquals(\"TKS\", this.getMetaphone().metaphone(\"dogs\"));\n+        assertEquals(\"HL\", this.getStringEncoder().metaphone(\"howl\"));\n+        assertEquals(\"TSTN\", this.getStringEncoder().metaphone(\"testing\"));\n+        assertEquals(\"0\", this.getStringEncoder().metaphone(\"The\"));\n+        assertEquals(\"KK\", this.getStringEncoder().metaphone(\"quick\"));\n+        assertEquals(\"BRN\", this.getStringEncoder().metaphone(\"brown\"));\n+        assertEquals(\"FKS\", this.getStringEncoder().metaphone(\"fox\"));\n+        assertEquals(\"JMPT\", this.getStringEncoder().metaphone(\"jumped\"));\n+        assertEquals(\"OFR\", this.getStringEncoder().metaphone(\"over\"));\n+        assertEquals(\"0\", this.getStringEncoder().metaphone(\"the\"));\n+        assertEquals(\"LS\", this.getStringEncoder().metaphone(\"lazy\"));\n+        assertEquals(\"TKS\", this.getStringEncoder().metaphone(\"dogs\"));\n     }\n \n     @Test\n     public void testWordEndingInMB() {\n-        assertEquals( \"KM\", this.getMetaphone().metaphone(\"COMB\") );\n-        assertEquals( \"TM\", this.getMetaphone().metaphone(\"TOMB\") );\n-        assertEquals( \"WM\", this.getMetaphone().metaphone(\"WOMB\") );\n+        assertEquals( \"KM\", this.getStringEncoder().metaphone(\"COMB\") );\n+        assertEquals( \"TM\", this.getStringEncoder().metaphone(\"TOMB\") );\n+        assertEquals( \"WM\", this.getStringEncoder().metaphone(\"WOMB\") );\n     }\n \n     @Test\n     public void testDiscardOfSCEOrSCIOrSCY() {\n-        assertEquals( \"SNS\", this.getMetaphone().metaphone(\"SCIENCE\") );\n-        assertEquals( \"SN\", this.getMetaphone().metaphone(\"SCENE\") );\n-        assertEquals( \"S\", this.getMetaphone().metaphone(\"SCY\") );\n+        assertEquals( \"SNS\", this.getStringEncoder().metaphone(\"SCIENCE\") );\n+        assertEquals( \"SN\", this.getStringEncoder().metaphone(\"SCENE\") );\n+        assertEquals( \"S\", this.getStringEncoder().metaphone(\"SCY\") );\n     }\n \n     /**\n     @Test\n     public void testWhy() {\n         // PHP returns \"H\". The original metaphone returns an empty string.\n-        assertEquals(\"\", this.getMetaphone().metaphone(\"WHY\"));\n+        assertEquals(\"\", this.getStringEncoder().metaphone(\"WHY\"));\n     }\n \n     @Test\n     public void testWordsWithCIA() {\n-        assertEquals( \"XP\", this.getMetaphone().metaphone(\"CIAPO\") );\n+        assertEquals( \"XP\", this.getStringEncoder().metaphone(\"CIAPO\") );\n     }\n \n     @Test\n     public void testTranslateOfSCHAndCH() {\n-        assertEquals( \"SKTL\", this.getMetaphone().metaphone(\"SCHEDULE\") );\n-        assertEquals( \"SKMT\", this.getMetaphone().metaphone(\"SCHEMATIC\") );\n-\n-        assertEquals( \"KRKT\", this.getMetaphone().metaphone(\"CHARACTER\") );\n-        assertEquals( \"TX\", this.getMetaphone().metaphone(\"TEACH\") );\n+        assertEquals( \"SKTL\", this.getStringEncoder().metaphone(\"SCHEDULE\") );\n+        assertEquals( \"SKMT\", this.getStringEncoder().metaphone(\"SCHEMATIC\") );\n+\n+        assertEquals( \"KRKT\", this.getStringEncoder().metaphone(\"CHARACTER\") );\n+        assertEquals( \"TX\", this.getStringEncoder().metaphone(\"TEACH\") );\n     }\n \n     @Test\n     public void testTranslateToJOfDGEOrDGIOrDGY() {\n-        assertEquals( \"TJ\", this.getMetaphone().metaphone(\"DODGY\") );\n-        assertEquals( \"TJ\", this.getMetaphone().metaphone(\"DODGE\") );\n-        assertEquals( \"AJMT\", this.getMetaphone().metaphone(\"ADGIEMTI\") );\n+        assertEquals( \"TJ\", this.getStringEncoder().metaphone(\"DODGY\") );\n+        assertEquals( \"TJ\", this.getStringEncoder().metaphone(\"DODGE\") );\n+        assertEquals( \"AJMT\", this.getStringEncoder().metaphone(\"ADGIEMTI\") );\n     }\n \n     @Test\n     public void testDiscardOfSilentHAfterG() {\n-        assertEquals( \"KNT\", this.getMetaphone().metaphone(\"GHENT\") );\n-        assertEquals( \"B\", this.getMetaphone().metaphone(\"BAUGH\") );\n+        assertEquals( \"KNT\", this.getStringEncoder().metaphone(\"GHENT\") );\n+        assertEquals( \"B\", this.getStringEncoder().metaphone(\"BAUGH\") );\n     }\n \n     @Test\n     public void testDiscardOfSilentGN() {\n         // NOTE: This does not test for silent GN, but for starting with GN\n-        assertEquals( \"N\", this.getMetaphone().metaphone(\"GNU\") );\n+        assertEquals( \"N\", this.getStringEncoder().metaphone(\"GNU\") );\n \n         // NOTE: Trying to test for GNED, but expected code does not appear to execute\n-        assertEquals( \"SNT\", this.getMetaphone().metaphone(\"SIGNED\") );\n+        assertEquals( \"SNT\", this.getStringEncoder().metaphone(\"SIGNED\") );\n     }\n \n     @Test\n     public void testPHTOF() {\n-        assertEquals( \"FX\", this.getMetaphone().metaphone(\"PHISH\") );\n+        assertEquals( \"FX\", this.getStringEncoder().metaphone(\"PHISH\") );\n     }\n \n     @Test\n     public void testSHAndSIOAndSIAToX() {\n-        assertEquals( \"XT\", this.getMetaphone().metaphone(\"SHOT\") );\n-        assertEquals( \"OTXN\", this.getMetaphone().metaphone(\"ODSIAN\") );\n-        assertEquals( \"PLXN\", this.getMetaphone().metaphone(\"PULSION\") );\n+        assertEquals( \"XT\", this.getStringEncoder().metaphone(\"SHOT\") );\n+        assertEquals( \"OTXN\", this.getStringEncoder().metaphone(\"ODSIAN\") );\n+        assertEquals( \"PLXN\", this.getStringEncoder().metaphone(\"PULSION\") );\n     }\n \n     @Test\n     public void testTIOAndTIAToX() {\n-        assertEquals( \"OX\", this.getMetaphone().metaphone(\"OTIA\") );\n-        assertEquals( \"PRXN\", this.getMetaphone().metaphone(\"PORTION\") );\n+        assertEquals( \"OX\", this.getStringEncoder().metaphone(\"OTIA\") );\n+        assertEquals( \"PRXN\", this.getStringEncoder().metaphone(\"PORTION\") );\n     }\n \n     @Test\n     public void testTCH() {\n-        assertEquals( \"RX\", this.getMetaphone().metaphone(\"RETCH\") );\n-        assertEquals( \"WX\", this.getMetaphone().metaphone(\"WATCH\") );\n+        assertEquals( \"RX\", this.getStringEncoder().metaphone(\"RETCH\") );\n+        assertEquals( \"WX\", this.getStringEncoder().metaphone(\"WATCH\") );\n     }\n \n     @Test\n     public void testExceedLength() {\n         // should be AKSKS, but istruncated by Max Code Length\n-        assertEquals( \"AKSK\", this.getMetaphone().metaphone(\"AXEAXE\") );\n+        assertEquals( \"AKSK\", this.getStringEncoder().metaphone(\"AXEAXE\") );\n     }\n \n     @Test\n     public void testSetMaxLengthWithTruncation() {\n         // should be AKSKS, but istruncated by Max Code Length\n-        this.getMetaphone().setMaxCodeLen( 6 );\n-        assertEquals( \"AKSKSK\", this.getMetaphone().metaphone(\"AXEAXEAXE\") );\n+        this.getStringEncoder().setMaxCodeLen( 6 );\n+        assertEquals( \"AKSKSK\", this.getStringEncoder().metaphone(\"AXEAXEAXE\") );\n     }\n \n     public void validateFixture(String[][] pairs) {\n--- a/src/test/java/org/apache/commons/codec/language/NysiisTest.java\n+++ b/src/test/java/org/apache/commons/codec/language/NysiisTest.java\n package org.apache.commons.codec.language;\n \n import org.apache.commons.codec.EncoderException;\n-import org.apache.commons.codec.StringEncoder;\n import org.apache.commons.codec.StringEncoderAbstractTest;\n import org.junit.Assert;\n import org.junit.Test;\n  * @since 1.7\n  * @version $Id$\n  */\n-public class NysiisTest extends StringEncoderAbstractTest {\n+public class NysiisTest extends StringEncoderAbstractTest<Nysiis> {\n \n     private final Nysiis fullNysiis = new Nysiis(false);\n \n     }\n \n     @Override\n-    protected StringEncoder createStringEncoder() {\n+    protected Nysiis createStringEncoder() {\n         return new Nysiis();\n     }\n \n--- a/src/test/java/org/apache/commons/codec/language/RefinedSoundexTest.java\n+++ b/src/test/java/org/apache/commons/codec/language/RefinedSoundexTest.java\n import static org.junit.Assert.assertEquals;\n \n import org.apache.commons.codec.EncoderException;\n-import org.apache.commons.codec.StringEncoder;\n import org.apache.commons.codec.StringEncoderAbstractTest;\n import org.junit.Test;\n \n  *\n  * @version $Id$\n  */\n-public class RefinedSoundexTest extends StringEncoderAbstractTest {\n+public class RefinedSoundexTest extends StringEncoderAbstractTest<RefinedSoundex> {\n \n     @Override\n-    protected StringEncoder createStringEncoder() {\n+    protected RefinedSoundex createStringEncoder() {\n         return new RefinedSoundex();\n-    }\n-\n-    /**\n-     * @return Returns the encoder.\n-     */\n-    private RefinedSoundex getRefinedSoundex() {\n-        return (RefinedSoundex)this.getStringEncoder();\n     }\n \n     @Test\n     public void testDifference() throws EncoderException {\n         // Edge cases\n-        assertEquals(0, this.getRefinedSoundex().difference(null, null));\n-        assertEquals(0, this.getRefinedSoundex().difference(\"\", \"\"));\n-        assertEquals(0, this.getRefinedSoundex().difference(\" \", \" \"));\n+        assertEquals(0, this.getStringEncoder().difference(null, null));\n+        assertEquals(0, this.getStringEncoder().difference(\"\", \"\"));\n+        assertEquals(0, this.getStringEncoder().difference(\" \", \" \"));\n         // Normal cases\n-        assertEquals(6, this.getRefinedSoundex().difference(\"Smith\", \"Smythe\"));\n-        assertEquals(3, this.getRefinedSoundex().difference(\"Ann\", \"Andrew\"));\n-        assertEquals(1, this.getRefinedSoundex().difference(\"Margaret\", \"Andrew\"));\n-        assertEquals(1, this.getRefinedSoundex().difference(\"Janet\", \"Margaret\"));\n+        assertEquals(6, this.getStringEncoder().difference(\"Smith\", \"Smythe\"));\n+        assertEquals(3, this.getStringEncoder().difference(\"Ann\", \"Andrew\"));\n+        assertEquals(1, this.getStringEncoder().difference(\"Margaret\", \"Andrew\"));\n+        assertEquals(1, this.getStringEncoder().difference(\"Janet\", \"Margaret\"));\n         // Examples from\n         // http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_de-dz_8co5.asp\n-        assertEquals(5, this.getRefinedSoundex().difference(\"Green\", \"Greene\"));\n-        assertEquals(1, this.getRefinedSoundex().difference(\"Blotchet-Halls\", \"Greene\"));\n+        assertEquals(5, this.getStringEncoder().difference(\"Green\", \"Greene\"));\n+        assertEquals(1, this.getStringEncoder().difference(\"Blotchet-Halls\", \"Greene\"));\n         // Examples from\n         // http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_setu-sus_3o6w.asp\n-        assertEquals(6, this.getRefinedSoundex().difference(\"Smith\", \"Smythe\"));\n-        assertEquals(8, this.getRefinedSoundex().difference(\"Smithers\", \"Smythers\"));\n-        assertEquals(5, this.getRefinedSoundex().difference(\"Anothers\", \"Brothers\"));\n+        assertEquals(6, this.getStringEncoder().difference(\"Smith\", \"Smythe\"));\n+        assertEquals(8, this.getStringEncoder().difference(\"Smithers\", \"Smythers\"));\n+        assertEquals(5, this.getStringEncoder().difference(\"Anothers\", \"Brothers\"));\n     }\n \n     @Test\n     public void testEncode() {\n-        assertEquals(\"T6036084\", this.getRefinedSoundex().encode(\"testing\"));\n-        assertEquals(\"T6036084\", this.getRefinedSoundex().encode(\"TESTING\"));\n-        assertEquals(\"T60\", this.getRefinedSoundex().encode(\"The\"));\n-        assertEquals(\"Q503\", this.getRefinedSoundex().encode(\"quick\"));\n-        assertEquals(\"B1908\", this.getRefinedSoundex().encode(\"brown\"));\n-        assertEquals(\"F205\", this.getRefinedSoundex().encode(\"fox\"));\n-        assertEquals(\"J408106\", this.getRefinedSoundex().encode(\"jumped\"));\n-        assertEquals(\"O0209\", this.getRefinedSoundex().encode(\"over\"));\n-        assertEquals(\"T60\", this.getRefinedSoundex().encode(\"the\"));\n-        assertEquals(\"L7050\", this.getRefinedSoundex().encode(\"lazy\"));\n-        assertEquals(\"D6043\", this.getRefinedSoundex().encode(\"dogs\"));\n+        assertEquals(\"T6036084\", this.getStringEncoder().encode(\"testing\"));\n+        assertEquals(\"T6036084\", this.getStringEncoder().encode(\"TESTING\"));\n+        assertEquals(\"T60\", this.getStringEncoder().encode(\"The\"));\n+        assertEquals(\"Q503\", this.getStringEncoder().encode(\"quick\"));\n+        assertEquals(\"B1908\", this.getStringEncoder().encode(\"brown\"));\n+        assertEquals(\"F205\", this.getStringEncoder().encode(\"fox\"));\n+        assertEquals(\"J408106\", this.getStringEncoder().encode(\"jumped\"));\n+        assertEquals(\"O0209\", this.getStringEncoder().encode(\"over\"));\n+        assertEquals(\"T60\", this.getStringEncoder().encode(\"the\"));\n+        assertEquals(\"L7050\", this.getStringEncoder().encode(\"lazy\"));\n+        assertEquals(\"D6043\", this.getStringEncoder().encode(\"dogs\"));\n \n         // Testing CODEC-56\n         assertEquals(\"D6043\", RefinedSoundex.US_ENGLISH.encode(\"dogs\"));\n \n     @Test\n     public void testGetMappingCodeNonLetter() {\n-        char code = this.getRefinedSoundex().getMappingCode('#');\n+        char code = this.getStringEncoder().getMappingCode('#');\n         assertEquals(\"Code does not equals zero\", 0, code);\n     }\n \n--- a/src/test/java/org/apache/commons/codec/language/SoundexTest.java\n+++ b/src/test/java/org/apache/commons/codec/language/SoundexTest.java\n import junit.framework.Assert;\n \n import org.apache.commons.codec.EncoderException;\n-import org.apache.commons.codec.StringEncoder;\n import org.apache.commons.codec.StringEncoderAbstractTest;\n import org.junit.Test;\n \n  *\n  * @version $Id$\n  */\n-public class SoundexTest extends StringEncoderAbstractTest {\n+public class SoundexTest extends StringEncoderAbstractTest<Soundex> {\n \n     @Override\n-    protected StringEncoder createStringEncoder() {\n+    protected Soundex createStringEncoder() {\n         return new Soundex();\n-    }\n-\n-    /**\n-     * @return Returns the encoder.\n-     */\n-    public Soundex getSoundexEncoder() {\n-        return (Soundex)this.getStringEncoder();\n     }\n \n     @Test\n \n     @Test\n     public void testBadCharacters() {\n-        Assert.assertEquals(\"H452\", this.getSoundexEncoder().encode(\"HOL>MES\"));\n+        Assert.assertEquals(\"H452\", this.getStringEncoder().encode(\"HOL>MES\"));\n \n     }\n \n     @Test\n     public void testDifference() throws EncoderException {\n         // Edge cases\n-        Assert.assertEquals(0, this.getSoundexEncoder().difference(null, null));\n-        Assert.assertEquals(0, this.getSoundexEncoder().difference(\"\", \"\"));\n-        Assert.assertEquals(0, this.getSoundexEncoder().difference(\" \", \" \"));\n+        Assert.assertEquals(0, this.getStringEncoder().difference(null, null));\n+        Assert.assertEquals(0, this.getStringEncoder().difference(\"\", \"\"));\n+        Assert.assertEquals(0, this.getStringEncoder().difference(\" \", \" \"));\n         // Normal cases\n-        Assert.assertEquals(4, this.getSoundexEncoder().difference(\"Smith\", \"Smythe\"));\n-        Assert.assertEquals(2, this.getSoundexEncoder().difference(\"Ann\", \"Andrew\"));\n-        Assert.assertEquals(1, this.getSoundexEncoder().difference(\"Margaret\", \"Andrew\"));\n-        Assert.assertEquals(0, this.getSoundexEncoder().difference(\"Janet\", \"Margaret\"));\n+        Assert.assertEquals(4, this.getStringEncoder().difference(\"Smith\", \"Smythe\"));\n+        Assert.assertEquals(2, this.getStringEncoder().difference(\"Ann\", \"Andrew\"));\n+        Assert.assertEquals(1, this.getStringEncoder().difference(\"Margaret\", \"Andrew\"));\n+        Assert.assertEquals(0, this.getStringEncoder().difference(\"Janet\", \"Margaret\"));\n         // Examples from http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_de-dz_8co5.asp\n-        Assert.assertEquals(4, this.getSoundexEncoder().difference(\"Green\", \"Greene\"));\n-        Assert.assertEquals(0, this.getSoundexEncoder().difference(\"Blotchet-Halls\", \"Greene\"));\n+        Assert.assertEquals(4, this.getStringEncoder().difference(\"Green\", \"Greene\"));\n+        Assert.assertEquals(0, this.getStringEncoder().difference(\"Blotchet-Halls\", \"Greene\"));\n         // Examples from http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_setu-sus_3o6w.asp\n-        Assert.assertEquals(4, this.getSoundexEncoder().difference(\"Smith\", \"Smythe\"));\n-        Assert.assertEquals(4, this.getSoundexEncoder().difference(\"Smithers\", \"Smythers\"));\n-        Assert.assertEquals(2, this.getSoundexEncoder().difference(\"Anothers\", \"Brothers\"));\n+        Assert.assertEquals(4, this.getStringEncoder().difference(\"Smith\", \"Smythe\"));\n+        Assert.assertEquals(4, this.getStringEncoder().difference(\"Smithers\", \"Smythers\"));\n+        Assert.assertEquals(2, this.getStringEncoder().difference(\"Anothers\", \"Brothers\"));\n     }\n \n     @Test\n     public void testEncodeBasic() {\n-        Assert.assertEquals(\"T235\", this.getSoundexEncoder().encode(\"testing\"));\n-        Assert.assertEquals(\"T000\", this.getSoundexEncoder().encode(\"The\"));\n-        Assert.assertEquals(\"Q200\", this.getSoundexEncoder().encode(\"quick\"));\n-        Assert.assertEquals(\"B650\", this.getSoundexEncoder().encode(\"brown\"));\n-        Assert.assertEquals(\"F200\", this.getSoundexEncoder().encode(\"fox\"));\n-        Assert.assertEquals(\"J513\", this.getSoundexEncoder().encode(\"jumped\"));\n-        Assert.assertEquals(\"O160\", this.getSoundexEncoder().encode(\"over\"));\n-        Assert.assertEquals(\"T000\", this.getSoundexEncoder().encode(\"the\"));\n-        Assert.assertEquals(\"L200\", this.getSoundexEncoder().encode(\"lazy\"));\n-        Assert.assertEquals(\"D200\", this.getSoundexEncoder().encode(\"dogs\"));\n+        Assert.assertEquals(\"T235\", this.getStringEncoder().encode(\"testing\"));\n+        Assert.assertEquals(\"T000\", this.getStringEncoder().encode(\"The\"));\n+        Assert.assertEquals(\"Q200\", this.getStringEncoder().encode(\"quick\"));\n+        Assert.assertEquals(\"B650\", this.getStringEncoder().encode(\"brown\"));\n+        Assert.assertEquals(\"F200\", this.getStringEncoder().encode(\"fox\"));\n+        Assert.assertEquals(\"J513\", this.getStringEncoder().encode(\"jumped\"));\n+        Assert.assertEquals(\"O160\", this.getStringEncoder().encode(\"over\"));\n+        Assert.assertEquals(\"T000\", this.getStringEncoder().encode(\"the\"));\n+        Assert.assertEquals(\"L200\", this.getStringEncoder().encode(\"lazy\"));\n+        Assert.assertEquals(\"D200\", this.getStringEncoder().encode(\"dogs\"));\n     }\n \n     /**\n      */\n     @Test\n     public void testEncodeBatch2() {\n-        Assert.assertEquals(\"A462\", this.getSoundexEncoder().encode(\"Allricht\"));\n-        Assert.assertEquals(\"E166\", this.getSoundexEncoder().encode(\"Eberhard\"));\n-        Assert.assertEquals(\"E521\", this.getSoundexEncoder().encode(\"Engebrethson\"));\n-        Assert.assertEquals(\"H512\", this.getSoundexEncoder().encode(\"Heimbach\"));\n-        Assert.assertEquals(\"H524\", this.getSoundexEncoder().encode(\"Hanselmann\"));\n-        Assert.assertEquals(\"H431\", this.getSoundexEncoder().encode(\"Hildebrand\"));\n-        Assert.assertEquals(\"K152\", this.getSoundexEncoder().encode(\"Kavanagh\"));\n-        Assert.assertEquals(\"L530\", this.getSoundexEncoder().encode(\"Lind\"));\n-        Assert.assertEquals(\"L222\", this.getSoundexEncoder().encode(\"Lukaschowsky\"));\n-        Assert.assertEquals(\"M235\", this.getSoundexEncoder().encode(\"McDonnell\"));\n-        Assert.assertEquals(\"M200\", this.getSoundexEncoder().encode(\"McGee\"));\n-        Assert.assertEquals(\"O155\", this.getSoundexEncoder().encode(\"Opnian\"));\n-        Assert.assertEquals(\"O155\", this.getSoundexEncoder().encode(\"Oppenheimer\"));\n-        Assert.assertEquals(\"R355\", this.getSoundexEncoder().encode(\"Riedemanas\"));\n-        Assert.assertEquals(\"Z300\", this.getSoundexEncoder().encode(\"Zita\"));\n-        Assert.assertEquals(\"Z325\", this.getSoundexEncoder().encode(\"Zitzmeinn\"));\n+        Assert.assertEquals(\"A462\", this.getStringEncoder().encode(\"Allricht\"));\n+        Assert.assertEquals(\"E166\", this.getStringEncoder().encode(\"Eberhard\"));\n+        Assert.assertEquals(\"E521\", this.getStringEncoder().encode(\"Engebrethson\"));\n+        Assert.assertEquals(\"H512\", this.getStringEncoder().encode(\"Heimbach\"));\n+        Assert.assertEquals(\"H524\", this.getStringEncoder().encode(\"Hanselmann\"));\n+        Assert.assertEquals(\"H431\", this.getStringEncoder().encode(\"Hildebrand\"));\n+        Assert.assertEquals(\"K152\", this.getStringEncoder().encode(\"Kavanagh\"));\n+        Assert.assertEquals(\"L530\", this.getStringEncoder().encode(\"Lind\"));\n+        Assert.assertEquals(\"L222\", this.getStringEncoder().encode(\"Lukaschowsky\"));\n+        Assert.assertEquals(\"M235\", this.getStringEncoder().encode(\"McDonnell\"));\n+        Assert.assertEquals(\"M200\", this.getStringEncoder().encode(\"McGee\"));\n+        Assert.assertEquals(\"O155\", this.getStringEncoder().encode(\"Opnian\"));\n+        Assert.assertEquals(\"O155\", this.getStringEncoder().encode(\"Oppenheimer\"));\n+        Assert.assertEquals(\"R355\", this.getStringEncoder().encode(\"Riedemanas\"));\n+        Assert.assertEquals(\"Z300\", this.getStringEncoder().encode(\"Zita\"));\n+        Assert.assertEquals(\"Z325\", this.getStringEncoder().encode(\"Zitzmeinn\"));\n     }\n \n     /**\n      */\n     @Test\n     public void testEncodeBatch3() {\n-        Assert.assertEquals(\"W252\", this.getSoundexEncoder().encode(\"Washington\"));\n-        Assert.assertEquals(\"L000\", this.getSoundexEncoder().encode(\"Lee\"));\n-        Assert.assertEquals(\"G362\", this.getSoundexEncoder().encode(\"Gutierrez\"));\n-        Assert.assertEquals(\"P236\", this.getSoundexEncoder().encode(\"Pfister\"));\n-        Assert.assertEquals(\"J250\", this.getSoundexEncoder().encode(\"Jackson\"));\n-        Assert.assertEquals(\"T522\", this.getSoundexEncoder().encode(\"Tymczak\"));\n+        Assert.assertEquals(\"W252\", this.getStringEncoder().encode(\"Washington\"));\n+        Assert.assertEquals(\"L000\", this.getStringEncoder().encode(\"Lee\"));\n+        Assert.assertEquals(\"G362\", this.getStringEncoder().encode(\"Gutierrez\"));\n+        Assert.assertEquals(\"P236\", this.getStringEncoder().encode(\"Pfister\"));\n+        Assert.assertEquals(\"J250\", this.getStringEncoder().encode(\"Jackson\"));\n+        Assert.assertEquals(\"T522\", this.getStringEncoder().encode(\"Tymczak\"));\n         // For VanDeusen: D-250 (D, 2 for the S, 5 for the N, 0 added) is also\n         // possible.\n-        Assert.assertEquals(\"V532\", this.getSoundexEncoder().encode(\"VanDeusen\"));\n+        Assert.assertEquals(\"V532\", this.getStringEncoder().encode(\"VanDeusen\"));\n     }\n \n     /**\n      */\n     @Test\n     public void testEncodeBatch4() {\n-        Assert.assertEquals(\"H452\", this.getSoundexEncoder().encode(\"HOLMES\"));\n-        Assert.assertEquals(\"A355\", this.getSoundexEncoder().encode(\"ADOMOMI\"));\n-        Assert.assertEquals(\"V536\", this.getSoundexEncoder().encode(\"VONDERLEHR\"));\n-        Assert.assertEquals(\"B400\", this.getSoundexEncoder().encode(\"BALL\"));\n-        Assert.assertEquals(\"S000\", this.getSoundexEncoder().encode(\"SHAW\"));\n-        Assert.assertEquals(\"J250\", this.getSoundexEncoder().encode(\"JACKSON\"));\n-        Assert.assertEquals(\"S545\", this.getSoundexEncoder().encode(\"SCANLON\"));\n-        Assert.assertEquals(\"S532\", this.getSoundexEncoder().encode(\"SAINTJOHN\"));\n+        Assert.assertEquals(\"H452\", this.getStringEncoder().encode(\"HOLMES\"));\n+        Assert.assertEquals(\"A355\", this.getStringEncoder().encode(\"ADOMOMI\"));\n+        Assert.assertEquals(\"V536\", this.getStringEncoder().encode(\"VONDERLEHR\"));\n+        Assert.assertEquals(\"B400\", this.getStringEncoder().encode(\"BALL\"));\n+        Assert.assertEquals(\"S000\", this.getStringEncoder().encode(\"SHAW\"));\n+        Assert.assertEquals(\"J250\", this.getStringEncoder().encode(\"JACKSON\"));\n+        Assert.assertEquals(\"S545\", this.getStringEncoder().encode(\"SCANLON\"));\n+        Assert.assertEquals(\"S532\", this.getStringEncoder().encode(\"SAINTJOHN\"));\n \n     }\n \n \n     @Test\n     public void testEncodeIgnoreTrimmable() {\n-        Assert.assertEquals(\"W252\", this.getSoundexEncoder().encode(\" \\t\\n\\r Washington \\t\\n\\r \"));\n+        Assert.assertEquals(\"W252\", this.getStringEncoder().encode(\" \\t\\n\\r Washington \\t\\n\\r \"));\n     }\n \n     /**\n         // http://www.archives.gov/research_room/genealogy/census/soundex.html:\n         // Ashcraft is coded A-261 (A, 2 for the S, C ignored, 6 for the R, 1\n         // for the F). It is not coded A-226.\n-        Assert.assertEquals(\"A261\", this.getSoundexEncoder().encode(\"Ashcraft\"));\n+        Assert.assertEquals(\"A261\", this.getStringEncoder().encode(\"Ashcraft\"));\n     }\n \n     /**\n      */\n     @Test\n     public void testHWRuleEx2() {\n-        Assert.assertEquals(\"B312\", this.getSoundexEncoder().encode(\"BOOTHDAVIS\"));\n-        Assert.assertEquals(\"B312\", this.getSoundexEncoder().encode(\"BOOTH-DAVIS\"));\n+        Assert.assertEquals(\"B312\", this.getStringEncoder().encode(\"BOOTHDAVIS\"));\n+        Assert.assertEquals(\"B312\", this.getStringEncoder().encode(\"BOOTH-DAVIS\"));\n     }\n \n     /**\n      */\n     @Test\n     public void testHWRuleEx3() throws EncoderException {\n-        Assert.assertEquals(\"S460\", this.getSoundexEncoder().encode(\"Sgler\"));\n-        Assert.assertEquals(\"S460\", this.getSoundexEncoder().encode(\"Swhgler\"));\n+        Assert.assertEquals(\"S460\", this.getStringEncoder().encode(\"Sgler\"));\n+        Assert.assertEquals(\"S460\", this.getStringEncoder().encode(\"Swhgler\"));\n         // Also S460:\n         this.checkEncodingVariations(\"S460\", new String[]{\n             \"SAILOR\",\n      */\n     @Test\n     public void testMsSqlServer1() {\n-        Assert.assertEquals(\"S530\", this.getSoundexEncoder().encode(\"Smith\"));\n-        Assert.assertEquals(\"S530\", this.getSoundexEncoder().encode(\"Smythe\"));\n+        Assert.assertEquals(\"S530\", this.getStringEncoder().encode(\"Smith\"));\n+        Assert.assertEquals(\"S530\", this.getStringEncoder().encode(\"Smythe\"));\n     }\n \n     /**\n      */\n     @Test\n     public void testMsSqlServer3() {\n-        Assert.assertEquals(\"A500\", this.getSoundexEncoder().encode(\"Ann\"));\n-        Assert.assertEquals(\"A536\", this.getSoundexEncoder().encode(\"Andrew\"));\n-        Assert.assertEquals(\"J530\", this.getSoundexEncoder().encode(\"Janet\"));\n-        Assert.assertEquals(\"M626\", this.getSoundexEncoder().encode(\"Margaret\"));\n-        Assert.assertEquals(\"S315\", this.getSoundexEncoder().encode(\"Steven\"));\n-        Assert.assertEquals(\"M240\", this.getSoundexEncoder().encode(\"Michael\"));\n-        Assert.assertEquals(\"R163\", this.getSoundexEncoder().encode(\"Robert\"));\n-        Assert.assertEquals(\"L600\", this.getSoundexEncoder().encode(\"Laura\"));\n-        Assert.assertEquals(\"A500\", this.getSoundexEncoder().encode(\"Anne\"));\n+        Assert.assertEquals(\"A500\", this.getStringEncoder().encode(\"Ann\"));\n+        Assert.assertEquals(\"A536\", this.getStringEncoder().encode(\"Andrew\"));\n+        Assert.assertEquals(\"J530\", this.getStringEncoder().encode(\"Janet\"));\n+        Assert.assertEquals(\"M626\", this.getStringEncoder().encode(\"Margaret\"));\n+        Assert.assertEquals(\"S315\", this.getStringEncoder().encode(\"Steven\"));\n+        Assert.assertEquals(\"M240\", this.getStringEncoder().encode(\"Michael\"));\n+        Assert.assertEquals(\"R163\", this.getStringEncoder().encode(\"Robert\"));\n+        Assert.assertEquals(\"L600\", this.getStringEncoder().encode(\"Laura\"));\n+        Assert.assertEquals(\"A500\", this.getStringEncoder().encode(\"Anne\"));\n     }\n \n     /**\n      */\n     @Test\n     public void testUsMappingEWithAcute() {\n-        Assert.assertEquals(\"E000\", this.getSoundexEncoder().encode(\"e\"));\n+        Assert.assertEquals(\"E000\", this.getStringEncoder().encode(\"e\"));\n         if (Character.isLetter('\\u00e9')) { // e-acute\n             try {\n                 //         uppercase E-acute\n-                Assert.assertEquals(\"\\u00c9000\", this.getSoundexEncoder().encode(\"\\u00e9\"));\n+                Assert.assertEquals(\"\\u00c9000\", this.getStringEncoder().encode(\"\\u00e9\"));\n                 Assert.fail(\"Expected IllegalArgumentException not thrown\");\n             } catch (IllegalArgumentException e) {\n                 // expected\n             }\n         } else {\n-            Assert.assertEquals(\"\", this.getSoundexEncoder().encode(\"\\u00e9\"));\n+            Assert.assertEquals(\"\", this.getStringEncoder().encode(\"\\u00e9\"));\n         }\n     }\n \n      */\n     @Test\n     public void testUsMappingOWithDiaeresis() {\n-        Assert.assertEquals(\"O000\", this.getSoundexEncoder().encode(\"o\"));\n+        Assert.assertEquals(\"O000\", this.getStringEncoder().encode(\"o\"));\n         if (Character.isLetter('\\u00f6')) { // o-umlaut\n             try {\n                 //         uppercase O-umlaut\n-                Assert.assertEquals(\"\\u00d6000\", this.getSoundexEncoder().encode(\"\\u00f6\"));\n+                Assert.assertEquals(\"\\u00d6000\", this.getStringEncoder().encode(\"\\u00f6\"));\n                 Assert.fail(\"Expected IllegalArgumentException not thrown\");\n             } catch (IllegalArgumentException e) {\n                 // expected\n             }\n         } else {\n-            Assert.assertEquals(\"\", this.getSoundexEncoder().encode(\"\\u00f6\"));\n+            Assert.assertEquals(\"\", this.getStringEncoder().encode(\"\\u00f6\"));\n         }\n     }\n }", "timestamp": 1354137181, "metainfo": ""}