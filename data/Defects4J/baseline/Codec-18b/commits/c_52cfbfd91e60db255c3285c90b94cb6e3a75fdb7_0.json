{"sha": "52cfbfd91e60db255c3285c90b94cb6e3a75fdb7", "log": "Simplify; merge update() and doFinal() methods so code looks more like original static methods.  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/digest/HmacUtils.java\n+++ b/src/main/java/org/apache/commons/codec/digest/HmacUtils.java\n  * Sample usage:\n  * <pre>\n  * import static HmacAlgorithms.*;\n- * byte[] key = {1,2,3,4}; // don't use this!\n+ * byte[] key = {1,2,3,4}; // don't use this actual key!\n  * String valueToDigest = \"The quick brown fox jumps over the lazy dog\";\n- * byte[] hmac = HmacUtils.use(HMAC_SHA_224, key).update(valueToDigest).doFinal();\n+ * byte[] hmac = HmacUtils.use(HMAC_SHA_224, key).hmac(valueToDigest);\n  * // Mac re-use\n  * HmacUtils hm1 = HmacUtils.use(\"HmacAlgoName\", key); // use a valid name here!\n- * String hexPom = hm1.update(new File(\"pom.xml\")).doFinalHex();\n- * String hexNot = hm1.update(new File(\"NOTICE.txt\")).doFinalHex();\n+ * String hexPom = hm1.hmacHex(new File(\"pom.xml\"));\n+ * String hexNot = hm1.hmacHex(new File(\"NOTICE.txt\"));\n  * </pre>\n  * @since 1.10\n  * @version $Id$\n     }\n \n     /**\n-     * Updates the stored {@link Mac} with the value.\n-     *\n-     * @param valueToDigest\n-     *            the value to update the {@link Mac} with (maybe null or empty)\n-     * @return the updated instance\n-     * @throws IllegalStateException\n-     *             if the Mac was not initialized\n-     * @since 1.11\n-     */\n-    public HmacUtils update(final byte[] valueToDigest) {\n+     * Returns the digest for the input data.\n+     *\n+     * @param valueToDigest the input to use\n+     * @return the digest as a byte[]\n+     * @throws IOException\n+     *             If an I/O error occurs.\n+     * @since 1.11\n+     */\n+    public byte[] hmac(byte[] valueToDigest) {\n+        return mac.doFinal(valueToDigest);\n+    }\n+\n+    /**\n+     * Returns the digest for the input data.\n+     *\n+     * @param valueToDigest the input to use\n+     * @return the digest as a hex String\n+     * @throws IOException\n+     *             If an I/O error occurs.\n+     * @since 1.11\n+     */\n+    public String hmacHex(byte[] valueToDigest) {\n+        return Hex.encodeHexString(hmac(valueToDigest));\n+    }\n+\n+    /**\n+     * Returns the digest for the input data.\n+     *\n+     * @param valueToDigest the input to use, treated as UTF-8\n+     * @return the digest as a byte[]\n+     * @throws IOException\n+     *             If an I/O error occurs.\n+     * @since 1.11\n+     */\n+    public byte[] hmac(String valueToDigest) {\n+        return mac.doFinal(StringUtils.getBytesUtf8(valueToDigest));\n+    }\n+\n+    /**\n+     * Returns the digest for the input data.\n+     *\n+     * @param valueToDigest the input to use, treated as UTF-8\n+     * @return the digest as a hex String\n+     * @throws IOException\n+     *             If an I/O error occurs.\n+     * @since 1.11\n+     */\n+    public String hmacHex(String valueToDigest) {\n+        return Hex.encodeHexString(hmac(valueToDigest));\n+    }\n+\n+    /**\n+     * Returns the digest for the input data.\n+     *\n+     * @param valueToDigest the input to use\n+     * @return the digest as a byte[]\n+     * @throws IOException\n+     *             If an I/O error occurs.\n+     * @since 1.11\n+     */\n+    public byte[] hmac(ByteBuffer valueToDigest) {\n         mac.update(valueToDigest);\n-        return this;\n-    }\n-\n-    /**\n-     * Updates the stored {@link Mac} with the value.\n-     *\n-     * @param valueToDigest\n-     *            the value to update the {@link Mac} with (maybe null or empty)\n-     * @return the updated instance\n-     * @throws IllegalStateException\n-     *             if the Mac was not initialized\n-     * @since 1.11\n-     */\n-    public HmacUtils update(final ByteBuffer valueToDigest) {\n-        mac.update(valueToDigest);\n-        return this;\n-    }\n-\n-    /**\n-     * Updates the stored {@link Mac} with the value.\n-     * String is converted to bytes using the UTF-8 charset.\n-     * @param valueToDigest\n-     *            the value to update the {@link Mac} with.\n-     * @return the updated instance\n-     * @throws IllegalStateException\n-     *             if the Mac was not initialized\n-     * @since 1.11\n-     */\n-    public HmacUtils update(final String valueToDigest) {\n-        mac.update(StringUtils.getBytesUtf8(valueToDigest));\n-        return this;\n-    }\n-\n-    /**\n-     * Updates the stored {@link Mac} with the value.\n-     *\n-     * @param valueToDigest\n-     *            the value to update the {@link Mac} with\n-     *            <p>\n-     *            The InputStream must not be null and will not be closed\n-     *            </p>\n-     * @return the updated instance\n-     * @throws IOException\n-     *             If an I/O error occurs.\n-     * @throws IllegalStateException\n-     *             If the Mac was not initialized\n-     * @since 1.11\n-     */\n-    public HmacUtils update(final InputStream valueToDigest) throws IOException {\n+        return mac.doFinal();\n+    }\n+\n+    /**\n+     * Returns the digest for the input data.\n+     *\n+     * @param valueToDigest the input to use\n+     * @return the digest as a hex String\n+     * @throws IOException\n+     *             If an I/O error occurs.\n+     * @since 1.11\n+     */\n+    public String hmacHex(ByteBuffer valueToDigest) {\n+        return Hex.encodeHexString(hmac(valueToDigest));\n+    }\n+\n+    /**\n+     * Returns the digest for the stream.\n+     *\n+     * @param valueToDigest\n+     *            the data to use\n+     *            <p>\n+     *            The InputStream must not be null and will not be closed\n+     *            </p>\n+     * @return the digest\n+     * @throws IOException\n+     *             If an I/O error occurs.\n+     * @since 1.11\n+     */\n+    public byte[] hmac(InputStream valueToDigest) throws IOException {\n         final byte[] buffer = new byte[STREAM_BUFFER_LENGTH];\n         int read;\n \n         while ((read = valueToDigest.read(buffer, 0, STREAM_BUFFER_LENGTH) ) > -1) {\n             mac.update(buffer, 0, read);\n         }\n-        return this;\n-    }\n-\n-    /**\n-     * Updates the stored {@link Mac} with the value.\n-     *\n-     * @param valueToDigest\n-     *            the value to update the {@link Mac} with\n-     *            <p>\n-     *            The InputStream must not be null and will not be closed\n-     *            </p>\n-     * @return the updated instance\n-     * @throws IOException\n-     *             If an I/O error occurs.\n-     * @throws IllegalStateException\n-     *             If the Mac was not initialized\n-     * @since 1.11\n-     */\n-    public HmacUtils update(final File valueToDigest) throws IOException {\n+        return mac.doFinal();\n+    }\n+\n+    /**\n+     * Returns the digest for the stream.\n+     *\n+     * @param valueToDigest\n+     *            the data to use\n+     *            <p>\n+     *            The InputStream must not be null and will not be closed\n+     *            </p>\n+     * @return the digest as a hex String\n+     * @throws IOException\n+     *             If an I/O error occurs.\n+     * @since 1.11\n+     */\n+    public String hmacHex(InputStream valueToDigest) throws IOException {\n+        return Hex.encodeHexString(hmac(valueToDigest));\n+    }\n+\n+    /**\n+     * Returns the digest for the file.\n+     *\n+     * @param valueToDigest the file to use\n+     * @return the digest\n+     * @throws IOException\n+     *             If an I/O error occurs.\n+     * @since 1.11\n+     */\n+    public byte[] hmac(final File valueToDigest) throws IOException {\n         final BufferedInputStream stream = new BufferedInputStream(new FileInputStream(valueToDigest));\n         try {\n-            return update(stream);\n+            return hmac(stream);\n         } finally {\n             stream.close();\n         }\n     }\n \n     /**\n-     * Finishes the MAC operation and returns the result.\n-     * The Mac can be re-used to produce further results from the same key.\n-     *\n-     * @return the result as a byte array\n-     * @since 1.11\n-     */\n-    public byte[] doFinal() {\n-        return mac.doFinal();\n-    }\n-\n-    /**\n-     * Finishes the MAC operation and returns the result.\n-     * The Mac can be re-used to produce further results from the same key.\n-     *\n-     * @return the result as a Hex String\n-     * @since 1.11\n-     */\n-    public String doFinalHex() {\n-        return Hex.encodeHexString(mac.doFinal());\n+     * Returns the digest for the file.\n+     *\n+     * @param valueToDigest the file to use\n+     * @return the digest as a hex String\n+     * @throws IOException\n+     *             If an I/O error occurs.\n+     * @since 1.11\n+     */\n+    public String hmacHex(File valueToDigest) throws IOException {\n+        return Hex.encodeHexString(hmac(valueToDigest));\n     }\n \n }", "timestamp": 1463928610, "metainfo": ""}