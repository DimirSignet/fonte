{"sha": "fdb6743af113595cde1a722305ca571f27d03d41", "log": "[CODEC-157] DigestUtils: Add MD2 APIs.  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/digest/DigestUtils.java\n+++ b/src/main/java/org/apache/commons/codec/digest/DigestUtils.java\n     }\n \n     /**\n+     * Returns an MD2 MessageDigest.\n+     *\n+     * @return An MD2 digest instance.\n+     * @throws IllegalArgumentException\n+     *             when a {@link NoSuchAlgorithmException} is caught, which should never happen because MD2 is a\n+     *             built-in algorithm\n+     * @see MessageDigestAlgorithms#MD2\n+     */\n+    public static MessageDigest getMd2Digest() {\n+        return getDigest(MessageDigestAlgorithms.MD2);\n+    }\n+\n+    /**\n      * Returns an MD5 MessageDigest.\n      *\n      * @return An MD5 digest instance.\n     }\n \n     /**\n+     * Calculates the MD2 digest and returns the value as a 16 element <code>byte[]</code>.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return MD2 digest\n+     * @since 1.7\n+     */\n+    public static byte[] md2(byte[] data) {\n+        return getMd2Digest().digest(data);\n+    }\n+\n+    /**\n+     * Calculates the MD2 digest and returns the value as a 16 element <code>byte[]</code>.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return MD2 digest\n+     * @throws IOException\n+     *             On error reading from the stream\n+     * @since 1.7\n+     */\n+    public static byte[] md2(InputStream data) throws IOException {\n+        return digest(getMd2Digest(), data);\n+    }\n+\n+    /**\n+     * Calculates the MD2 digest and returns the value as a 16 element <code>byte[]</code>.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return MD2 digest\n+     * @since 1.7\n+     */\n+    public static byte[] md2(String data) {\n+        return md2(getBytesUtf8(data));\n+    }\n+\n+    /**\n+     * Calculates the MD2 digest and returns the value as a 32 character hex string.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return MD2 digest as a hex string\n+     * @since 1.7\n+     */\n+    public static String md2Hex(byte[] data) {\n+        return Hex.encodeHexString(md2(data));\n+    }\n+\n+    /**\n+     * Calculates the MD2 digest and returns the value as a 32 character hex string.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return MD2 digest as a hex string\n+     * @throws IOException\n+     *             On error reading from the stream\n+     * @since 1.7\n+     */\n+    public static String md2Hex(InputStream data) throws IOException {\n+        return Hex.encodeHexString(md2(data));\n+    }\n+\n+    /**\n+     * Calculates the MD2 digest and returns the value as a 32 character hex string.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return MD2 digest as a hex string\n+     * @since 1.7\n+     */\n+    public static String md2Hex(String data) {\n+        return Hex.encodeHexString(md2(data));\n+    }\n+\n+    /**\n      * Calculates the MD5 digest and returns the value as a 16 element <code>byte[]</code>.\n      *\n      * @param data\n      * @param data\n      *            Data to digest\n      * @return SHA-1 digest\n+     * @throws IOException\n+     *             On error reading from the stream\n+     * @since 1.4\n+     */\n+    public static byte[] sha(InputStream data) throws IOException {\n+        return digest(getShaDigest(), data);\n+    }\n+\n+    /**\n+     * Calculates the SHA-1 digest and returns the value as a <code>byte[]</code>.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return SHA-1 digest\n+     */\n+    public static byte[] sha(String data) {\n+        return sha(getBytesUtf8(data));\n+    }\n+\n+    /**\n+     * Calculates the SHA-1 digest and returns the value as a <code>byte[]</code>.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return SHA-1 digest\n      * @since 1.7\n      */\n     public static byte[] sha1(byte[] data) {\n      * @return SHA-1 digest\n      * @throws IOException\n      *             On error reading from the stream\n-     * @since 1.4\n-     */\n-    public static byte[] sha(InputStream data) throws IOException {\n-        return digest(getShaDigest(), data);\n-    }\n-\n-    /**\n-     * Calculates the SHA-1 digest and returns the value as a <code>byte[]</code>.\n-     *\n-     * @param data\n-     *            Data to digest\n-     * @return SHA-1 digest\n-     * @throws IOException\n-     *             On error reading from the stream\n      * @since 1.7\n      */\n     public static byte[] sha1(InputStream data) throws IOException {\n         return digest(getSha1Digest(), data);\n-    }\n-\n-    /**\n-     * Calculates the SHA-1 digest and returns the value as a <code>byte[]</code>.\n-     *\n-     * @param data\n-     *            Data to digest\n-     * @return SHA-1 digest\n-     */\n-    public static byte[] sha(String data) {\n-        return sha(getBytesUtf8(data));\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java\n+++ b/src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java\n     }\n \n     @Test\n+    public void testMd2Hex() throws IOException {\n+        // Examples from RFC 1319\n+        assertEquals(\"8350e5a3e24c153df2275c9f80692773\", DigestUtils.md2Hex(\"\"));\n+\n+        assertEquals(\"32ec01ec4a6dac72c0ab96fb34c0b5d1\", DigestUtils.md2Hex(\"a\"));\n+\n+        assertEquals(\"da853b0d3f88d99b30283a69e6ded6bb\", DigestUtils.md2Hex(\"abc\"));\n+\n+        assertEquals(\"ab4f496bfb2a530b219ff33031fe06b0\", DigestUtils.md2Hex(\"message digest\"));\n+\n+        assertEquals(\"4e8ddff3650292ab5a4108c3aa47940b\", DigestUtils.md2Hex(\"abcdefghijklmnopqrstuvwxyz\"));\n+\n+        assertEquals(\n+            \"da33def2a42df13975352846c30338cd\",\n+            DigestUtils.md2Hex(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" + \"abcdefghijklmnopqrstuvwxyz\" + \"0123456789\"));\n+\n+        assertEquals(\n+            \"d5976f79d83d3a0dc9806c3c66f3efd8\",\n+            DigestUtils.md2Hex(\"1234567890123456789012345678901234567890\" + \"1234567890123456789012345678901234567890\"));\n+\n+        assertEquals(DigestUtils.md2Hex(testData),\n+                DigestUtils.md2Hex(new ByteArrayInputStream(testData)));\n+    }\n+\n+    @Test\n     public void testMd5Hex() throws IOException {\n         // Examples from RFC 1321\n         assertEquals(\"d41d8cd98f00b204e9800998ecf8427e\", DigestUtils.md5Hex(\"\"));\n \n         assertEquals(DigestUtils.md5Hex(testData),\n                 DigestUtils.md5Hex(new ByteArrayInputStream(testData)));\n+    }\n+\n+    /**\n+     * An MD2 hash converted to hex should always be 32 characters.\n+     */\n+    @Test\n+    public void testMd2HexLength() {\n+        String hashMe = \"this is some string that is longer than 32 characters\";\n+        String hash = DigestUtils.md2Hex(getBytesUtf8(hashMe));\n+        assertEquals(32, hash.length());\n+\n+        hashMe = \"length < 32\";\n+        hash = DigestUtils.md2Hex(getBytesUtf8(hashMe));\n+        assertEquals(32, hash.length());\n     }\n \n     /**\n         hashMe = \"length < 32\";\n         hash = DigestUtils.md5Hex(getBytesUtf8(hashMe));\n         assertEquals(32, hash.length());\n+    }\n+\n+    /**\n+     * An MD2 hash should always be a 16 element byte[].\n+     */\n+    @Test\n+    public void testMd2Length() {\n+        String hashMe = \"this is some string that is longer than 16 characters\";\n+        byte[] hash = DigestUtils.md2(getBytesUtf8(hashMe));\n+        assertEquals(16, hash.length);\n+\n+        hashMe = \"length < 16\";\n+        hash = DigestUtils.md2(getBytesUtf8(hashMe));\n+        assertEquals(16, hash.length);\n     }\n \n     /**", "timestamp": 1346610422, "metainfo": ""}