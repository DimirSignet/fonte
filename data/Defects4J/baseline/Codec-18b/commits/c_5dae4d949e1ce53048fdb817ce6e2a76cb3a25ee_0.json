{"sha": "5dae4d949e1ce53048fdb817ce6e2a76cb3a25ee", "log": "", "commit": "\n--- a/src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java\n+++ b/src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java\n \n import java.io.ByteArrayOutputStream;\n import java.io.UnsupportedEncodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.UnsupportedCharsetException;\n import java.util.BitSet;\n \n import org.apache.commons.codec.BinaryDecoder;\n import org.apache.commons.codec.BinaryEncoder;\n import org.apache.commons.codec.CharEncoding;\n+import org.apache.commons.codec.Charsets;\n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n import org.apache.commons.codec.StringDecoder;\n     /**\n      * The default charset used for string decoding and encoding.\n      */\n-    private final String charset;\n+    private final Charset charset;\n \n     /**\n      * BitSet of printable characters as defined in RFC 1521.\n      * Default constructor.\n      */\n     public QuotedPrintableCodec() {\n-        this(CharEncoding.UTF_8);\n+        this(Charsets.UTF_8);\n     }\n \n     /**\n      * \n      * @param charset\n      *                  the default string charset to use.\n-     */\n-    public QuotedPrintableCodec(String charset) {\n-        super();\n+     * @throws UnsupportedCharsetException\n+     *             If the named charset is unavailable\n+     * @since 1.7 throws UnsupportedCharsetException if the named charset is unavailable\n+     */\n+    public QuotedPrintableCodec(Charset charset) {\n         this.charset = charset;\n+    }\n+\n+    /**\n+     * Constructor which allows for the selection of a default charset\n+     * \n+     * @param charsetName\n+     *            the default string charset to use.\n+     * @throws UnsupportedCharsetException\n+     *             If the named charset is unavailable\n+     * @since 1.7 throws UnsupportedCharsetException if the named charset is unavailable\n+     */\n+    public QuotedPrintableCodec(String charsetName) {\n+        this(Charset.forName(charsetName));\n     }\n \n     /**\n      * @throws EncoderException\n      *                  Thrown if quoted-printable encoding is unsuccessful\n      * \n-     * @see #getDefaultCharset()\n+     * @see #getCharset()\n      */\n     public String encode(String pString) throws EncoderException {\n-        if (pString == null) {\n-            return null;\n-        }\n-        try {\n-            return encode(pString, getDefaultCharset());\n-        } catch (UnsupportedEncodingException e) {\n-            throw new EncoderException(e.getMessage(), e);\n-        }\n+        return this.encode(pString, getCharset());\n     }\n \n     /**\n      * @return original string\n      * @throws DecoderException\n      *                  Thrown if quoted-printable decoding is unsuccessful\n+     */\n+    public String decode(String pString, Charset charset) throws DecoderException {\n+        if (pString == null) {\n+            return null;\n+        }\n+        return new String(this.decode(StringUtils.getBytesUsAscii(pString)), charset);\n+    }\n+\n+    /**\n+     * Decodes a quoted-printable string into its original form using the specified string charset. Escaped characters\n+     * are converted back to their original representation.\n+     * \n+     * @param pString\n+     *                  quoted-printable string to convert into its original form\n+     * @param charset\n+     *                  the original string charset\n+     * @return original string\n+     * @throws DecoderException\n+     *                  Thrown if quoted-printable decoding is unsuccessful\n      * @throws UnsupportedEncodingException\n      *                  Thrown if charset is not supported\n      */\n      * @throws DecoderException\n      *                  Thrown if quoted-printable decoding is unsuccessful.\n      *                  Thrown if charset is not supported.\n-     * @see #getDefaultCharset()\n+     * @see #getCharset()\n      */\n     public String decode(String pString) throws DecoderException {\n-        if (pString == null) {\n-            return null;\n-        }\n-        try {\n-            return decode(pString, getDefaultCharset());\n-        } catch (UnsupportedEncodingException e) {\n-            throw new DecoderException(e.getMessage(), e);\n-        }\n+        return this.decode(pString, this.getCharset());\n     }\n \n     /**\n     }\n \n     /**\n-     * Returns the default charset used for string decoding and encoding.\n-     * \n-     * @return the default string charset.\n+     * Gets the default charset name used for string decoding and encoding.\n+     * \n+     * @return the default charset name\n+     * @since 1.7\n+     */\n+    public Charset getCharset() {\n+        return this.charset;\n+    }\n+\n+    /**\n+     * Gets the default charset name used for string decoding and encoding.\n+     * \n+     * @return the default charset name\n      */\n     public String getDefaultCharset() {\n-        return this.charset;\n+        return this.charset.name();\n     }\n \n     /**\n      * @param charset\n      *                  the charset for pString\n      * @return quoted-printable string\n+     */\n+    public String encode(String pString, Charset charset) {\n+        if (pString == null) {\n+            return null;\n+        }\n+        return StringUtils.newStringUsAscii(this.encode(pString.getBytes(charset)));\n+    }\n+\n+    /**\n+     * Encodes a string into its quoted-printable form using the specified charset. Unsafe characters are escaped.\n+     * \n+     * <p>\n+     * This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in\n+     * RFC 1521 and is suitable for encoding binary data and unformatted text.\n+     * </p>\n+     * \n+     * @param pString\n+     *                  string to convert to quoted-printable form\n+     * @param charset\n+     *                  the charset for pString\n+     * @return quoted-printable string\n      * \n      * @throws UnsupportedEncodingException\n      *                  Thrown if the charset is not supported\n--- a/src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java\n+++ b/src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.fail;\n \n+import java.nio.charset.UnsupportedCharsetException;\n+\n import org.apache.commons.codec.CharEncoding;\n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n         }\n     }\n     \n-    @Test\n+    @Test(expected=UnsupportedCharsetException.class)\n     public void testInvalidEncoding() {\n-        QuotedPrintableCodec qpcodec = new QuotedPrintableCodec(\"NONSENSE\");\n-           String plain = \"Hello there!\";\n-            try {\n-               qpcodec.encode(plain);\n-                fail( \"We set the encoding to a bogus NONSENSE vlaue, this shouldn't have worked.\");\n-            } catch (EncoderException ee) {\n-                // Exception expected, test segment passes.\n-            }\n-            try {\n-               qpcodec.decode(plain);\n-                fail( \"We set the encoding to a bogus NONSENSE vlaue, this shouldn't have worked.\");\n-            } catch (DecoderException ee) {\n-                // Exception expected, test segment passes.\n-            }\n+        new QuotedPrintableCodec(\"NONSENSE\");\n     }\n \n     @Test", "timestamp": 1332949435, "metainfo": ""}