{"sha": "b88b3870a996b61ae6a1f865586c97794a1f3038", "log": "Sort new methods from previous commit.  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/digest/DigestUtils.java\n+++ b/src/main/java/org/apache/commons/codec/digest/DigestUtils.java\n  */\n public class DigestUtils {\n \n+    private static final int STREAM_BUFFER_LENGTH = 1024;\n+\n     /**\n      * Read through an ByteBuffer and returns the digest for the data\n      *\n      * @param data\n      *            Data to digest\n      * @return MD2 digest\n+     * @since 1.11\n+     */\n+    public static byte[] md2(final ByteBuffer data) {\n+        return digest(getMd2Digest(), data);\n+    }\n+\n+    /**\n+     * Calculates the MD2 digest and returns the value as a 16 element <code>byte[]</code>.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return MD2 digest\n      * @throws IOException\n      *             On error reading from the stream\n      * @since 1.7\n     }\n \n     /**\n-     * Calculates the MD2 digest and returns the value as a 16 element <code>byte[]</code>.\n-     *\n-     * @param data\n-     *            Data to digest\n-     * @return MD2 digest\n-     * @since 1.11\n-     */\n-    public static byte[] md2(final ByteBuffer data) {\n-        return digest(getMd2Digest(), data);\n-    }\n-\n-    /**\n-     * Calculates the SHA-1 digest and returns the value as a <code>byte[]</code>.\n-     *\n-     * @param data\n-     *            Data to digest\n-     * @return SHA-1 digest\n-     * @since 1.11\n-     */\n-    public static byte[] sha1(final ByteBuffer data) {\n-        return digest(getSha1Digest(), data);\n-    }\n-\n-    /**\n-     * Calculates the SHA-256 digest and returns the value as a <code>byte[]</code>.\n-     *\n-     * @param data\n-     *            Data to digest\n-     * @return SHA-256 digest\n-     * @since 1.11\n-     */\n-    public static byte[] sha256(final ByteBuffer data) {\n-        return digest(getSha256Digest(), data);\n-    }\n-\n-    /**\n-     * Calculates the SHA-384 digest and returns the value as a <code>byte[]</code>.\n-     *\n-     * @param data\n-     *            Data to digest\n-     * @return SHA-384 digest\n-     * @since 1.11\n-     */\n-    public static byte[] sha384(final ByteBuffer data) {\n-        return digest(getSha384Digest(), data);\n-    }\n-\n-    /**\n-     * Calculates the SHA-512 digest and returns the value as a <code>byte[]</code>.\n-     *\n-     * @param data\n-     *            Data to digest\n-     * @return SHA-512 digest\n-     * @since 1.11\n-     */\n-    public static byte[] sha512(final ByteBuffer data) {\n-        return digest(getSha512Digest(), data);\n-    }\n-\n-    /**\n      * Calculates the MD5 digest and returns the value as a 16 element <code>byte[]</code>.\n      *\n      * @param data\n         return Hex.encodeHexString(md5(data));\n     }\n \n-/**\n-     * Calculates the MD5 digest and returns the value as a 32 character hex string.\n-     *\n-     * @param data\n-     *            Data to digest\n-     * @return MD5 digest as a hex string\n-     * @throws IOException\n-     *             On error reading from the stream\n-     * @since 1.4\n-     */\n-    public static String md5Hex(final InputStream data) throws IOException {\n-        return Hex.encodeHexString(md5(data));\n-    }\n+    /**\n+         * Calculates the MD5 digest and returns the value as a 32 character hex string.\n+         *\n+         * @param data\n+         *            Data to digest\n+         * @return MD5 digest as a hex string\n+         * @throws IOException\n+         *             On error reading from the stream\n+         * @since 1.4\n+         */\n+        public static String md5Hex(final InputStream data) throws IOException {\n+            return Hex.encodeHexString(md5(data));\n+        }\n \n     /**\n      * Calculates the MD5 digest and returns the value as a 32 character hex string.\n         return sha1(data);\n     }\n \n-    /**\n-     * Calculates the SHA-1 digest and returns the value as a <code>byte[]</code>.\n-     *\n-     * @param data\n-     *            Data to digest\n-     * @return SHA-1 digest\n-     * @throws IOException\n-     *             On error reading from the stream\n-     * @since 1.4\n-     * @deprecated Use {@link #sha1(InputStream)}\n-     */\n-    @Deprecated\n-    public static byte[] sha(final InputStream data) throws IOException {\n-        return sha1(data);\n-    }\n+/**\n+ * Calculates the SHA-1 digest and returns the value as a <code>byte[]</code>.\n+ *\n+ * @param data\n+ *            Data to digest\n+ * @return SHA-1 digest\n+ * @throws IOException\n+ *             On error reading from the stream\n+ * @since 1.4\n+ * @deprecated Use {@link #sha1(InputStream)}\n+ */\n+@Deprecated\n+public static byte[] sha(final InputStream data) throws IOException {\n+    return sha1(data);\n+}\n \n     /**\n      * Calculates the SHA-1 digest and returns the value as a <code>byte[]</code>.\n      * @param data\n      *            Data to digest\n      * @return SHA-1 digest\n+     * @since 1.11\n+     */\n+    public static byte[] sha1(final ByteBuffer data) {\n+        return digest(getSha1Digest(), data);\n+    }\n+\n+    /**\n+     * Calculates the SHA-1 digest and returns the value as a <code>byte[]</code>.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return SHA-1 digest\n      * @throws IOException\n      *             On error reading from the stream\n      * @since 1.7\n \n     /**\n      * Calculates the SHA-256 digest and returns the value as a <code>byte[]</code>.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return SHA-256 digest\n+     * @since 1.11\n+     */\n+    public static byte[] sha256(final ByteBuffer data) {\n+        return digest(getSha256Digest(), data);\n+    }\n+\n+    /**\n+     * Calculates the SHA-256 digest and returns the value as a <code>byte[]</code>.\n      * <p>\n      * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n      * </p>\n \n     /**\n      * Calculates the SHA-384 digest and returns the value as a <code>byte[]</code>.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return SHA-384 digest\n+     * @since 1.11\n+     */\n+    public static byte[] sha384(final ByteBuffer data) {\n+        return digest(getSha384Digest(), data);\n+    }\n+\n+    /**\n+     * Calculates the SHA-384 digest and returns the value as a <code>byte[]</code>.\n      * <p>\n      * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n      * </p>\n      */\n     public static byte[] sha512(final byte[] data) {\n         return getSha512Digest().digest(data);\n+    }\n+\n+    /**\n+     * Calculates the SHA-512 digest and returns the value as a <code>byte[]</code>.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return SHA-512 digest\n+     * @since 1.11\n+     */\n+    public static byte[] sha512(final ByteBuffer data) {\n+        return digest(getSha512Digest(), data);\n     }\n \n     /**\n         messageDigest.update(StringUtils.getBytesUtf8(valueToDigest));\n         return messageDigest;\n     }\n-\n-    private static final int STREAM_BUFFER_LENGTH = 1024;\n }", "timestamp": 1415636003, "metainfo": ""}