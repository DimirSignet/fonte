{"sha": "efe3699122699151984e8499da9d42673a42851a", "log": "PR: CODEC-225  Fix minor resource leaks. GitHub PR  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java\n+++ b/src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java\n         }\n \n         final Scanner scanner = new Scanner(rulesIS, CharEncoding.UTF_8);\n-        parseRules(scanner, RESOURCE_FILE, RULES, FOLDINGS);\n-        scanner.close();\n+        try {\n+            parseRules(scanner, RESOURCE_FILE, RULES, FOLDINGS);\n+        } finally {\n+            scanner.close();\n+        }\n \n         // sort RULES by pattern length in descending order\n         for (final Map.Entry<Character, List<Rule>> rule : RULES.entrySet()) {\n--- a/src/main/java/org/apache/commons/codec/language/bm/Rule.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/Rule.java\n \n                 final Languages ls = Languages.getInstance(s);\n                 for (final String l : ls.getLanguages()) {\n+                    final Scanner scanner = createScanner(s, rt, l);\n                     try {\n-                        rs.put(l, parseRules(createScanner(s, rt, l), createResourceName(s, rt, l)));\n+                        rs.put(l, parseRules(scanner, createResourceName(s, rt, l)));\n                     } catch (final IllegalStateException e) {\n                         throw new IllegalStateException(\"Problem processing \" + createResourceName(s, rt, l), e);\n+                    } finally {\n+                        scanner.close();\n                     }\n                 }\n                 if (!rt.equals(RuleType.RULES)) {\n-                    rs.put(\"common\", parseRules(createScanner(s, rt, \"common\"), createResourceName(s, rt, \"common\")));\n+                    final Scanner scanner = createScanner(s, rt, \"common\");\n+                    try {\n+                        rs.put(\"common\", parseRules(scanner, createResourceName(s, rt, \"common\")));\n+                    } finally {\n+                        scanner.close();\n+                    }\n                 }\n \n                 rts.put(rt, Collections.unmodifiableMap(rs));\n                             throw new IllegalArgumentException(\"Malformed import statement '\" + rawLine + \"' in \" +\n                                                                location);\n                         }\n-                        lines.putAll(parseRules(createScanner(incl), location + \"->\" + incl));\n+                        final Scanner hashIncludeScanner = createScanner(incl);\n+                        try {\n+                            lines.putAll(parseRules(hashIncludeScanner, location + \"->\" + incl));\n+                        } finally {\n+                            hashIncludeScanner.close();\n+                        }\n                     } else {\n                         // rule\n                         final String[] parts = line.split(\"\\\\s+\");", "timestamp": 1473855266, "metainfo": ""}