{"sha": "a82070e546d2c2f871895d32cd2f6629480c02bc", "log": "[CODEC-211] Create enum MessageDigestAlgorithm and deprecate class MessageDigestAlgorithms  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/digest/DigestUtils.java\n+++ b/src/main/java/org/apache/commons/codec/digest/DigestUtils.java\n     private static final int STREAM_BUFFER_LENGTH = 1024;\n \n     /**\n+     * Read through an ByteBuffer and returns the digest for the data. Provided for symmetry with other methods.\n+     *\n+     * @param messageDigest\n+     *            The MessageDigest to use (e.g. MD5)\n+     * @param data\n+     *            Data to digest\n+     * @return the digest\n+     * @throws IOException\n+     *             On error reading from the stream\n+     * @since 1.11\n+     */\n+    public static byte[] digest(final MessageDigest messageDigest, final byte[] data) {\n+        return messageDigest.digest(data);\n+    }\n+\n+    /**\n      * Read through an ByteBuffer and returns the digest for the data\n      *\n      * @param messageDigest\n     }\n \n     /**\n-     * Returns a <code>MessageDigest</code> for the given <code>algorithm</code> or a default if there is a problem getting the algorithm.\n+     * Returns a <code>MessageDigest</code> for the given <code>algorithm</code> or a default if there is a problem\n+     * getting the algorithm.\n      *\n      * @param algorithm\n-     *            the name of the algorithm requested. See <a\n-     *            href=\"http://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html#AppA\"\n-     *            >Appendix A in the Java Cryptography Architecture Reference Guide</a> for information about standard\n+     *            the name of the algorithm requested. See\n+     *            <a href=\"http://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html#AppA\" >\n+     *            Appendix A in the Java Cryptography Architecture Reference Guide</a> for information about standard\n      *            algorithm names.\n-     * @param defaultMessageDigest The default MessageDigest.\n+     * @param defaultMessageDigest\n+     *            The default MessageDigest.\n      * @return A digest instance.\n      * @see MessageDigest#getInstance(String)\n      * @throws IllegalArgumentException\n      * @since 1.7\n      */\n     public static MessageDigest getMd2Digest() {\n-        return getDigest(MessageDigestAlgorithms.MD2);\n+        return MessageDigestAlgorithm.MD2.getMessageDigest();\n     }\n \n     /**\n      * @see MessageDigestAlgorithms#MD5\n      */\n     public static MessageDigest getMd5Digest() {\n-        return getDigest(MessageDigestAlgorithms.MD5);\n+        return MessageDigestAlgorithm.MD5.getMessageDigest();\n     }\n \n     /**\n      * @since 1.7\n      */\n     public static MessageDigest getSha1Digest() {\n-        return getDigest(MessageDigestAlgorithms.SHA_1);\n+        return MessageDigestAlgorithm.SHA_1.getMessageDigest();\n     }\n \n     /**\n      * @see MessageDigestAlgorithms#SHA_224\n      */\n     public static MessageDigest getSha224Digest() {\n-        return getDigest(MessageDigestAlgorithms.SHA_224);\n+        return MessageDigestAlgorithm.SHA_224.getMessageDigest();\n     }\n \n     /**\n      * @see MessageDigestAlgorithms#SHA_256\n      */\n     public static MessageDigest getSha256Digest() {\n-        return getDigest(MessageDigestAlgorithms.SHA_256);\n+        return MessageDigestAlgorithm.SHA_256.getMessageDigest();\n     }\n \n     /**\n      * @see MessageDigestAlgorithms#SHA_384\n      */\n     public static MessageDigest getSha384Digest() {\n-        return getDigest(MessageDigestAlgorithms.SHA_384);\n+        return MessageDigestAlgorithm.SHA_384.getMessageDigest();\n     }\n \n     /**\n      * @see MessageDigestAlgorithms#SHA_512\n      */\n     public static MessageDigest getSha512Digest() {\n-        return getDigest(MessageDigestAlgorithms.SHA_512);\n+        return MessageDigestAlgorithm.SHA_512.getMessageDigest();\n     }\n \n     /**\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/codec/digest/MessageDigestAlgorithm.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.codec.digest;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+/**\n+ * Standard {@link MessageDigest} algorithm names from the <cite>Java Cryptography Architecture Standard Algorithm Name\n+ * Documentation</cite>.\n+ * <p>\n+ * This enum is immutable and thread-safe.\n+ * </p>\n+ *\n+ * @see <a href=\"http://docs.oracle.com/javase/6/docs/technotes/guides/security/StandardNames.html\">Java Cryptography\n+ *      Architecture Standard Algorithm Name Documentation</a>\n+ * @since 1.11\n+ * @version $Id: MessageDigestAlgorithm.java 1637936 2014-11-10 16:47:29Z ggregory $\n+ */\n+public enum MessageDigestAlgorithm {\n+\n+    /**\n+     * The MD2 message digest algorithm defined in RFC 1319.\n+     */\n+    MD2(\"MD2\"),\n+\n+    /**\n+     * The MD5 message digest algorithm defined in RFC 1321.\n+     */\n+    MD5(\"MD5\"),\n+\n+    /**\n+     * The SHA-1 hash algorithm defined in the FIPS PUB 180-2.\n+     */\n+    SHA_1(\"SHA-1\"),\n+\n+    /**\n+     * The SHA-224 hash algorithm defined in the FIPS PUB 180-4.\n+     * <p>\n+     * Java 8 only.\n+     * </p>\n+     */\n+    SHA_224(\"SHA-224\"),\n+\n+    /**\n+     * The SHA-256 hash algorithm defined in the FIPS PUB 180-2.\n+     */\n+    SHA_256(\"SHA-256\"),\n+\n+    /**\n+     * The SHA-384 hash algorithm defined in the FIPS PUB 180-2.\n+     */\n+    SHA_384(\"SHA-384\"),\n+\n+    /**\n+     * The SHA-512 hash algorithm defined in the FIPS PUB 180-2.\n+     */\n+    SHA_512(\"SHA-512\");\n+\n+    private final String algorithm;\n+\n+    private MessageDigestAlgorithm(String algorithm) {\n+        this.algorithm = algorithm;\n+    }\n+\n+    /**\n+     * Read through a byte[] and returns the digest for the data\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return the digest\n+     * @throws IOException\n+     *             On error reading from the stream\n+     */\n+    public byte[] digest(byte[] data) throws IOException {\n+        return getMessageDigest().digest(data);\n+    }\n+\n+    /**\n+     * Read through a ByteBuffer and returns the digest for the data\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return the digest\n+     * @throws IOException\n+     *             On error reading from the stream\n+     */\n+    public byte[] digest(ByteBuffer data) throws IOException {\n+        return DigestUtils.digest(getMessageDigest(), data);\n+    }\n+\n+    /**\n+     * Read through a File and returns the digest for the data\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return the digest\n+     * @throws IOException\n+     *             On error reading from the stream\n+     */\n+    public byte[] digest(File data) throws IOException {\n+        return DigestUtils.digest(getMessageDigest(), data);\n+    }\n+\n+    /**\n+     * Read through an InputStream and returns the digest for the data\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return the digest\n+     * @throws IOException\n+     *             On error reading from the stream\n+     */\n+    public byte[] digest(InputStream data) throws IOException {\n+        return DigestUtils.digest(getMessageDigest(), data);\n+    }\n+\n+    /**\n+     * Gets the algorithm name.\n+     *\n+     * @return the algorithm name.\n+     */\n+    public String getAlgorithm() {\n+        return algorithm;\n+    }\n+\n+    /**\n+     * Returns a <code>MessageDigest</code> for this <code>algorithm</code>.\n+     *\n+     * @return A digest instance.\n+     * @see MessageDigest#getInstance(String)\n+     * @throws IllegalArgumentException\n+     *             when a {@link NoSuchAlgorithmException} is caught.\n+     */\n+    public MessageDigest getMessageDigest() {\n+        return DigestUtils.getDigest(algorithm);\n+    }\n+\n+    /**\n+     * Whether a MessageDigest for this algorithm can be created.\n+     *\n+     * @return Whether a MessageDigest for this algorithm can be created.\n+     */\n+    public boolean isAvailable() {\n+        return DigestUtils.getDigest(algorithm, null) != null;\n+    }\n+\n+}\n--- a/src/main/java/org/apache/commons/codec/digest/MessageDigestAlgorithms.java\n+++ b/src/main/java/org/apache/commons/codec/digest/MessageDigestAlgorithms.java\n  * <p>\n  * This class is immutable and thread-safe.\n  * </p>\n- * TODO 2.0 This should be an enum.\n  *\n  * @see <a href=\"http://docs.oracle.com/javase/6/docs/technotes/guides/security/StandardNames.html\">Java Cryptography\n  *      Architecture Standard Algorithm Name Documentation</a>\n  * @since 1.7\n+ * @deprecated Use the enum {@link MessageDigestAlgorithm}.\n  * @version $Id$\n  */\n+@Deprecated\n public class MessageDigestAlgorithms {\n \n     private MessageDigestAlgorithms() {\n     public static final String SHA_1 = \"SHA-1\";\n \n     /**\n-     * The SHA-224 hash algorithm defined in the FIPS PUB 180-4. \n+     * The SHA-224 hash algorithm defined in the FIPS PUB 180-4.\n      * <p>\n      * Java 8 only.\n      * </p>\n-     * \n+     *\n      * @since 1.11\n      */\n     public static final String SHA_224 = \"SHA-224\";\n--- a/src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java\n+++ b/src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java\n     \n     private File testFile;\n \n+    private void assumeJava8() {\n+        Assume.assumeTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_8));\n+    }\n+\n+    byte[] getTestData() {\n+        return testData;\n+    }\n+\n+    File getTestFile() {\n+        return testFile;\n+    }\n+\n     @Before\n     public void setUp() throws Exception {\n         new Random().nextBytes(testData);\n                 DigestUtils.sha224Hex(\"The quick brown fox jumps over the lazy dog\"));\n \n         // Examples from FIPS 180-4?\n-    }\n-\n-    private void assumeJava8() {\n-        Assume.assumeTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_8));\n     }\n \n     @Test\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.codec.digest;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Assume;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+/**\n+ * Tests {@link MessageDigestAlgorithm}.\n+ *\n+ * @since 1.11\n+ */\n+@RunWith(Parameterized.class)\n+public class MessageDigestAlgorithmTest {\n+\n+    @Parameters(name = \"{0}\")\n+    public static Object[] data() {\n+        return MessageDigestAlgorithm.values();\n+    }\n+\n+    private DigestUtilsTest digestUtilsTest;\n+\n+    private final MessageDigestAlgorithm messageDigestAlgorithm;\n+\n+    public MessageDigestAlgorithmTest(MessageDigestAlgorithm messageDigestAlgorithm) {\n+        this.messageDigestAlgorithm = messageDigestAlgorithm;\n+    }\n+\n+    private byte[] digestTestData() throws IOException {\n+        return messageDigestAlgorithm.digest(getTestData());\n+    }\n+\n+    private byte[] getTestData() {\n+        return digestUtilsTest.getTestData();\n+    }\n+\n+    private File getTestFile() {\n+        return digestUtilsTest.getTestFile();\n+    }\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        digestUtilsTest = new DigestUtilsTest();\n+        digestUtilsTest.setUp();\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        digestUtilsTest.tearDown();\n+        digestUtilsTest = null;\n+    }\n+\n+    @Test\n+    public void testAlgorithm() throws IOException, NoSuchAlgorithmException {\n+        final String algorithm = messageDigestAlgorithm.getAlgorithm();\n+        Assert.assertNotNull(algorithm);\n+        Assert.assertFalse(algorithm.isEmpty());\n+        Assume.assumeTrue(messageDigestAlgorithm.isAvailable());\n+        MessageDigest.getInstance(algorithm);\n+    }\n+\n+    @Test\n+    public void testDigestByteArray() throws IOException {\n+        Assume.assumeTrue(messageDigestAlgorithm.isAvailable());\n+        Assert.assertArrayEquals(digestTestData(),\n+                DigestUtils.digest(messageDigestAlgorithm.getMessageDigest(), getTestData()));\n+        Assert.assertArrayEquals(digestTestData(), messageDigestAlgorithm.digest(getTestData()));\n+    }\n+\n+    @Test\n+    public void testDigestByteBuffer() throws IOException {\n+        Assume.assumeTrue(messageDigestAlgorithm.isAvailable());\n+        Assert.assertArrayEquals(digestTestData(),\n+                DigestUtils.digest(messageDigestAlgorithm.getMessageDigest(), ByteBuffer.wrap(getTestData())));\n+        Assert.assertArrayEquals(digestTestData(), messageDigestAlgorithm.digest(ByteBuffer.wrap(getTestData())));\n+    }\n+\n+    @Test\n+    public void testDigestFile() throws IOException {\n+        Assume.assumeTrue(messageDigestAlgorithm.isAvailable());\n+        Assert.assertArrayEquals(digestTestData(),\n+                DigestUtils.digest(messageDigestAlgorithm.getMessageDigest(), getTestFile()));\n+        Assert.assertArrayEquals(digestTestData(), messageDigestAlgorithm.digest(getTestFile()));\n+    }\n+\n+    @Test\n+    public void testDigestInputStream() throws IOException {\n+        Assume.assumeTrue(messageDigestAlgorithm.isAvailable());\n+        Assert.assertArrayEquals(digestTestData(),\n+                DigestUtils.digest(messageDigestAlgorithm.getMessageDigest(), new ByteArrayInputStream(getTestData())));\n+        Assert.assertArrayEquals(digestTestData(), messageDigestAlgorithm.digest(new ByteArrayInputStream(getTestData())));\n+    }\n+\n+    @Test\n+    public void testGetMessageDigest() throws IOException, NoSuchAlgorithmException {\n+        Assume.assumeTrue(messageDigestAlgorithm.isAvailable());\n+        final MessageDigest messageDigest = messageDigestAlgorithm.getMessageDigest();\n+        Assert.assertEquals(messageDigestAlgorithm.getAlgorithm(), messageDigest.getAlgorithm());\n+    }\n+\n+}", "timestamp": 1463189603, "metainfo": ""}