{"sha": "76c125c3b74a390a39cdcd6666cf7e9cea0e5c1d", "log": "Checkstyle, javadoc and formatting fixes.  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java\n+++ b/src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java\n      * Prefixes when present which are not pronounced\n      */\n     private static final String[] SILENT_START =\n-    { \"GN\", \"KN\", \"PN\", \"WR\", \"PS\" };\n+        { \"GN\", \"KN\", \"PN\", \"WR\", \"PS\" };\n     private static final String[] L_R_N_M_B_H_F_V_W_SPACE =\n-    { \"L\", \"R\", \"N\", \"M\", \"B\", \"H\", \"F\", \"V\", \"W\", \" \" };\n+        { \"L\", \"R\", \"N\", \"M\", \"B\", \"H\", \"F\", \"V\", \"W\", \" \" };\n     private static final String[] ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER =\n-    { \"ES\", \"EP\", \"EB\", \"EL\", \"EY\", \"IB\", \"IL\", \"IN\", \"IE\", \"EI\", \"ER\" };\n+        { \"ES\", \"EP\", \"EB\", \"EL\", \"EY\", \"IB\", \"IL\", \"IN\", \"IE\", \"EI\", \"ER\" };\n     private static final String[] L_T_K_S_N_M_B_Z =\n-    { \"L\", \"T\", \"K\", \"S\", \"N\", \"M\", \"B\", \"Z\" };\n+        { \"L\", \"T\", \"K\", \"S\", \"N\", \"M\", \"B\", \"Z\" };\n \n     /**\n      * Maximum length of an encoding, default is 4\n     }\n \n     /**\n-     * Encode a value with Double Metaphone\n+     * Encode a value with Double Metaphone.\n      *\n      * @param value String to encode\n      * @return an encoded string\n     }\n \n     /**\n-     * Encode a value with Double Metaphone, optionally using the alternate\n-     * encoding.\n+     * Encode a value with Double Metaphone, optionally using the alternate encoding.\n      *\n      * @param value String to encode\n      * @param alternate use alternate encode\n      * @return {@code true} if the encoded <code>String</code>s are equal;\n      *          {@code false} otherwise.\n      */\n-    public boolean isDoubleMetaphoneEqual(String value1,\n-                                          String value2,\n-                                          boolean alternate) {\n-        return doubleMetaphone(value1, alternate).equals(doubleMetaphone\n-                                                         (value2, alternate));\n+    public boolean isDoubleMetaphoneEqual(String value1, String value2, boolean alternate) {\n+        return doubleMetaphone(value1, alternate).equals(doubleMetaphone(value2, alternate));\n     }\n \n     /**\n     //-- BEGIN HANDLERS --//\n \n     /**\n-     * Handles 'A', 'E', 'I', 'O', 'U', and 'Y' cases\n-     */\n-    private int handleAEIOUY(DoubleMetaphoneResult result, int\n-                             index) {\n+     * Handles 'A', 'E', 'I', 'O', 'U', and 'Y' cases.\n+     */\n+    private int handleAEIOUY(DoubleMetaphoneResult result, int index) {\n         if (index == 0) {\n             result.append('A');\n         }\n     }\n \n     /**\n-     * Handles 'C' cases\n-     */\n-    private int handleC(String value,\n-                        DoubleMetaphoneResult result,\n-                        int index) {\n+     * Handles 'C' cases.\n+     */\n+    private int handleC(String value, DoubleMetaphoneResult result, int index) {\n         if (conditionC0(value, index)) {  // very confusing, moved out\n             result.append('K');\n             index += 2;\n     }\n \n     /**\n-     * Handles 'CC' cases\n-     */\n-    private int handleCC(String value,\n-                         DoubleMetaphoneResult result,\n-                         int index) {\n+     * Handles 'CC' cases.\n+     */\n+    private int handleCC(String value, DoubleMetaphoneResult result, int index) {\n         if (contains(value, index + 2, 1, \"I\", \"E\", \"H\") &&\n             !contains(value, index + 2, 2, \"HU\")) {\n             //-- \"bellocchio\" but not \"bacchus\" --//\n     }\n \n     /**\n-     * Handles 'CH' cases\n-     */\n-    private int handleCH(String value,\n-                         DoubleMetaphoneResult result,\n-                         int index) {\n+     * Handles 'CH' cases.\n+     */\n+    private int handleCH(String value, DoubleMetaphoneResult result, int index) {\n         if (index > 0 && contains(value, index, 4, \"CHAE\")) {   // Michael\n             result.append('K', 'X');\n             return index + 2;\n     }\n \n     /**\n-     * Handles 'D' cases\n-     */\n-    private int handleD(String value,\n-                        DoubleMetaphoneResult result,\n-                        int index) {\n+     * Handles 'D' cases.\n+     */\n+    private int handleD(String value, DoubleMetaphoneResult result, int index) {\n         if (contains(value, index, 2, \"DG\")) {\n             //-- \"Edge\" --//\n             if (contains(value, index + 2, 1, \"I\", \"E\", \"Y\")) {\n     }\n \n     /**\n-     * Handles 'G' cases\n-     */\n-    private int handleG(String value,\n-                        DoubleMetaphoneResult result,\n-                        int index,\n-                        boolean slavoGermanic) {\n+     * Handles 'G' cases.\n+     */\n+    private int handleG(String value, DoubleMetaphoneResult result, int index, boolean slavoGermanic) {\n         if (charAt(value, index + 1) == 'H') {\n             index = handleGH(value, result, index);\n         } else if (charAt(value, index + 1) == 'N') {\n         } else if (contains(value, index + 1, 2, \"LI\") && !slavoGermanic) {\n             result.append(\"KL\", \"L\");\n             index += 2;\n-        } else if (index == 0 && (charAt(value, index + 1) == 'Y' || contains(value, index + 1, 2, ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER))) {\n+        } else if (index == 0 &&\n+                   (charAt(value, index + 1) == 'Y' ||\n+                    contains(value, index + 1, 2, ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER))) {\n             //-- -ges-, -gep-, -gel-, -gie- at beginning --//\n             result.append('K', 'J');\n             index += 2;\n         } else if (contains(value, index + 1, 1, \"E\", \"I\", \"Y\") ||\n                    contains(value, index - 1, 4, \"AGGI\", \"OGGI\")) {\n             //-- Italian \"biaggi\" --//\n-            if ((contains(value, 0 ,4, \"VAN \", \"VON \") || contains(value, 0, 3, \"SCH\")) || contains(value, index + 1, 2, \"ET\")) {\n+            if (contains(value, 0 ,4, \"VAN \", \"VON \") ||\n+                contains(value, 0, 3, \"SCH\") ||\n+                contains(value, index + 1, 2, \"ET\")) {\n                 //-- obvious germanic --//\n                 result.append('K');\n             } else if (contains(value, index + 1, 3, \"IER\")) {\n     }\n \n     /**\n-     * Handles 'GH' cases\n-     */\n-    private int handleGH(String value,\n-                         DoubleMetaphoneResult result,\n-                         int index) {\n+     * Handles 'GH' cases.\n+     */\n+    private int handleGH(String value, DoubleMetaphoneResult result, int index) {\n         if (index > 0 && !isVowel(charAt(value, index - 1))) {\n             result.append('K');\n             index += 2;\n     }\n \n     /**\n-     * Handles 'H' cases\n-     */\n-    private int handleH(String value,\n-                        DoubleMetaphoneResult result,\n-                        int index) {\n+     * Handles 'H' cases.\n+     */\n+    private int handleH(String value, DoubleMetaphoneResult result, int index) {\n         //-- only keep if first & before vowel or between 2 vowels --//\n         if ((index == 0 || isVowel(charAt(value, index - 1))) &&\n             isVowel(charAt(value, index + 1))) {\n     }\n \n     /**\n-     * Handles 'J' cases\n-     */\n-    private int handleJ(String value, DoubleMetaphoneResult result, int index,\n-                        boolean slavoGermanic) {\n+     * Handles 'J' cases.\n+     */\n+    private int handleJ(String value, DoubleMetaphoneResult result, int index, boolean slavoGermanic) {\n         if (contains(value, index, 4, \"JOSE\") || contains(value, 0, 4, \"SAN \")) {\n                 //-- obvious Spanish, \"Jose\", \"San Jacinto\" --//\n                 if ((index == 0 && (charAt(value, index + 4) == ' ') ||\n                 if (index == 0 && !contains(value, index, 4, \"JOSE\")) {\n                     result.append('J', 'A');\n                 } else if (isVowel(charAt(value, index - 1)) && !slavoGermanic &&\n-                              (charAt(value, index + 1) == 'A' || charAt(value, index + 1) == 'O')) {\n+                           (charAt(value, index + 1) == 'A' || charAt(value, index + 1) == 'O')) {\n                     result.append('J', 'H');\n                 } else if (index == value.length() - 1) {\n                     result.append('J', ' ');\n-                } else if (!contains(value, index + 1, 1, L_T_K_S_N_M_B_Z) && !contains(value, index - 1, 1, \"S\", \"K\", \"L\")) {\n+                } else if (!contains(value, index + 1, 1, L_T_K_S_N_M_B_Z) &&\n+                           !contains(value, index - 1, 1, \"S\", \"K\", \"L\")) {\n                     result.append('J');\n                 }\n \n     }\n \n     /**\n-     * Handles 'L' cases\n-     */\n-    private int handleL(String value,\n-                        DoubleMetaphoneResult result,\n-                        int index) {\n+     * Handles 'L' cases.\n+     */\n+    private int handleL(String value, DoubleMetaphoneResult result, int index) {\n         if (charAt(value, index + 1) == 'L') {\n             if (conditionL0(value, index)) {\n                 result.appendPrimary('L');\n     }\n \n     /**\n-     * Handles 'P' cases\n-     */\n-    private int handleP(String value,\n-                        DoubleMetaphoneResult result,\n-                        int index) {\n+     * Handles 'P' cases.\n+     */\n+    private int handleP(String value, DoubleMetaphoneResult result, int index) {\n         if (charAt(value, index + 1) == 'H') {\n             result.append('F');\n             index += 2;\n     }\n \n     /**\n-     * Handles 'R' cases\n-     */\n-    private int handleR(String value,\n-                        DoubleMetaphoneResult result,\n-                        int index,\n-                        boolean slavoGermanic) {\n+     * Handles 'R' cases.\n+     */\n+    private int handleR(String value, DoubleMetaphoneResult result, int index, boolean slavoGermanic) {\n         if (index == value.length() - 1 && !slavoGermanic &&\n             contains(value, index - 2, 2, \"IE\") &&\n             !contains(value, index - 4, 2, \"ME\", \"MA\")) {\n     }\n \n     /**\n-     * Handles 'S' cases\n-     */\n-    private int handleS(String value,\n-                        DoubleMetaphoneResult result,\n-                        int index,\n-                        boolean slavoGermanic) {\n+     * Handles 'S' cases.\n+     */\n+    private int handleS(String value, DoubleMetaphoneResult result, int index, boolean slavoGermanic) {\n         if (contains(value, index - 1, 3, \"ISL\", \"YSL\")) {\n             //-- special cases \"island\", \"isle\", \"carlisle\", \"carlysle\" --//\n             index++;\n             result.append('X', 'S');\n             index++;\n         } else if (contains(value, index, 2, \"SH\")) {\n-            if (contains(value, index + 1, 4,\n-                         \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n+            if (contains(value, index + 1, 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n                 //-- germanic --//\n                 result.append('S');\n             } else {\n                 result.append('S', 'X');\n             }\n             index += 3;\n-        } else if ((index == 0 && contains(value, index + 1, 1, \"M\", \"N\", \"L\", \"W\")) || contains(value, index + 1, 1, \"Z\")) {\n+        } else if ((index == 0 && contains(value, index + 1, 1, \"M\", \"N\", \"L\", \"W\")) ||\n+                   contains(value, index + 1, 1, \"Z\")) {\n             //-- german & anglicisations, e.g. \"smith\" match \"schmidt\" //\n             // \"snider\" match \"schneider\" --//\n             //-- also, -sz- in slavic language altho in hungarian it //\n         } else if (contains(value, index, 2, \"SC\")) {\n             index = handleSC(value, result, index);\n         } else {\n-            if (index == value.length() - 1 && contains(value, index - 2,\n-                                                        2, \"AI\", \"OI\")){\n+            if (index == value.length() - 1 && contains(value, index - 2, 2, \"AI\", \"OI\")) {\n                 //-- french e.g. \"resnais\", \"artois\" --//\n                 result.appendAlternate('S');\n             } else {\n     }\n \n     /**\n-     * Handles 'SC' cases\n-     */\n-    private int handleSC(String value,\n-                         DoubleMetaphoneResult result,\n-                         int index) {\n+     * Handles 'SC' cases.\n+     */\n+    private int handleSC(String value, DoubleMetaphoneResult result, int index) {\n         if (charAt(value, index + 2) == 'H') {\n             //-- Schlesinger's rule --//\n-            if (contains(value, index + 3,\n-                         2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\")) {\n+            if (contains(value, index + 3, 2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\")) {\n                 //-- Dutch origin, e.g. \"school\", \"schooner\" --//\n                 if (contains(value, index + 3, 2, \"ER\", \"EN\")) {\n                     //-- \"schermerhorn\", \"schenker\" --//\n     }\n \n     /**\n-     * Handles 'T' cases\n-     */\n-    private int handleT(String value,\n-                        DoubleMetaphoneResult result,\n-                        int index) {\n+     * Handles 'T' cases.\n+     */\n+    private int handleT(String value, DoubleMetaphoneResult result, int index) {\n         if (contains(value, index, 4, \"TION\")) {\n             result.append('X');\n             index += 3;\n         } else if (contains(value, index, 3, \"TIA\", \"TCH\")) {\n             result.append('X');\n             index += 3;\n-        } else if (contains(value, index, 2, \"TH\") || contains(value, index,\n-                                                               3, \"TTH\")) {\n+        } else if (contains(value, index, 2, \"TH\") || contains(value, index, 3, \"TTH\")) {\n             if (contains(value, index + 2, 2, \"OM\", \"AM\") ||\n                 //-- special case \"thomas\", \"thames\" or germanic --//\n                 contains(value, 0, 4, \"VAN \", \"VON \") ||\n     }\n \n     /**\n-     * Handles 'W' cases\n-     */\n-    private int handleW(String value,\n-                        DoubleMetaphoneResult result,\n-                        int index) {\n+     * Handles 'W' cases.\n+     */\n+    private int handleW(String value, DoubleMetaphoneResult result, int index) {\n         if (contains(value, index, 2, \"WR\")) {\n             //-- can also be in middle of word --//\n             result.append('R');\n                 }\n                 index++;\n             } else if ((index == value.length() - 1 && isVowel(charAt(value, index - 1))) ||\n-                       contains(value, index - 1,\n-                                5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\") ||\n+                       contains(value, index - 1, 5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\") ||\n                        contains(value, 0, 3, \"SCH\")) {\n                 //-- Arnow should match Arnoff --//\n                 result.appendAlternate('F');\n     }\n \n     /**\n-     * Handles 'X' cases\n-     */\n-    private int handleX(String value,\n-                        DoubleMetaphoneResult result,\n-                        int index) {\n+     * Handles 'X' cases.\n+     */\n+    private int handleX(String value, DoubleMetaphoneResult result, int index) {\n         if (index == 0) {\n             result.append('S');\n             index++;\n     }\n \n     /**\n-     * Handles 'Z' cases\n-     */\n-    private int handleZ(String value, DoubleMetaphoneResult result, int index,\n-                        boolean slavoGermanic) {\n+     * Handles 'Z' cases.\n+     */\n+    private int handleZ(String value, DoubleMetaphoneResult result, int index, boolean slavoGermanic) {\n         if (charAt(value, index + 1) == 'H') {\n             //-- Chinese pinyin e.g. \"zhao\" or Angelina \"Zhang\" --//\n             result.append('J');\n             index += 2;\n         } else {\n-            if (contains(value, index + 1, 2, \"ZO\", \"ZI\", \"ZA\") || (slavoGermanic && (index > 0 && charAt(value, index - 1) != 'T'))) {\n+            if (contains(value, index + 1, 2, \"ZO\", \"ZI\", \"ZA\") ||\n+                (slavoGermanic && (index > 0 && charAt(value, index - 1) != 'T'))) {\n                 result.append(\"S\", \"TS\");\n             } else {\n                 result.append('S');\n     //-- BEGIN CONDITIONS --//\n \n     /**\n-     * Complex condition 0 for 'C'\n+     * Complex condition 0 for 'C'.\n      */\n     private boolean conditionC0(String value, int index) {\n         if (contains(value, index, 4, \"CHIA\")) {\n     }\n \n     /**\n-     * Complex condition 0 for 'CH'\n+     * Complex condition 0 for 'CH'.\n      */\n     private boolean conditionCH0(String value, int index) {\n         if (index != 0) {\n     }\n \n     /**\n-     * Complex condition 1 for 'CH'\n+     * Complex condition 1 for 'CH'.\n      */\n     private boolean conditionCH1(String value, int index) {\n-        return ((contains(value, 0, 4, \"VAN \", \"VON \") || contains(value, 0,\n-                                                                   3, \"SCH\")) ||\n+        return ((contains(value, 0, 4, \"VAN \", \"VON \") || contains(value, 0, 3, \"SCH\")) ||\n                 contains(value, index - 2, 6, \"ORCHES\", \"ARCHIT\", \"ORCHID\") ||\n                 contains(value, index + 2, 1, \"T\", \"S\") ||\n                 ((contains(value, index - 1, 1, \"A\", \"O\", \"U\", \"E\") || index == 0) &&\n     }\n \n     /**\n-     * Complex condition 0 for 'L'\n+     * Complex condition 0 for 'L'.\n      */\n     private boolean conditionL0(String value, int index) {\n         if (index == value.length() - 3 &&\n     }\n \n     /**\n-     * Complex condition 0 for 'M'\n+     * Complex condition 0 for 'M'.\n      */\n     private boolean conditionM0(String value, int index) {\n         if (charAt(value, index + 1) == 'M') {\n             return true;\n         }\n         return contains(value, index - 1, 3, \"UMB\") &&\n-                ((index + 1) == value.length() - 1 || contains(value,\n-                        index + 2, 2, \"ER\"));\n+               ((index + 1) == value.length() - 1 || contains(value, index + 2, 2, \"ER\"));\n     }\n \n     //-- BEGIN HELPER FUNCTIONS --//\n     }\n \n     /**\n-     * Cleans the input\n+     * Cleans the input.\n      */\n     private String cleanInput(String input) {\n         if (input == null) {\n     /**\n      * Gets the character at index <code>index</code> if available, otherwise\n      * it returns <code>Character.MIN_VALUE</code> so that there is some sort\n-     * of a default\n+     * of a default.\n      */\n     protected char charAt(String value, int index) {\n         if (index < 0 || index >= value.length()) {\n     }\n \n     /**\n-     * Shortcut method with 1 criteria\n-     */\n-    private static boolean contains(String value, int start, int length,\n-                                    String criteria) {\n-        return contains(value, start, length,\n-                        new String[] { criteria });\n-    }\n-\n-    /**\n-     * Shortcut method with 2 criteria\n+     * Shortcut method with 1 criteria.\n+     */\n+    private static boolean contains(String value, int start, int length, String criteria) {\n+        return contains(value, start, length, new String[] { criteria });\n+    }\n+\n+    /**\n+     * Shortcut method with 2 criteria.\n      */\n     private static boolean contains(String value, int start, int length,\n                                     String criteria1, String criteria2) {\n-        return contains(value, start, length,\n-                        new String[] { criteria1, criteria2 });\n-    }\n-\n-    /**\n-     * Shortcut method with 3 criteria\n+        return contains(value, start, length, new String[] { criteria1, criteria2 });\n+    }\n+\n+    /**\n+     * Shortcut method with 3 criteria.\n      */\n     private static boolean contains(String value, int start, int length,\n-                                    String criteria1, String criteria2,\n-                                    String criteria3) {\n-        return contains(value, start, length,\n-                        new String[] { criteria1, criteria2, criteria3 });\n-    }\n-\n-    /**\n-     * Shortcut method with 4 criteria\n+                                    String criteria1, String criteria2, String criteria3) {\n+        return contains(value, start, length, new String[] { criteria1, criteria2, criteria3 });\n+    }\n+\n+    /**\n+     * Shortcut method with 4 criteria.\n      */\n     private static boolean contains(String value, int start, int length,\n                                     String criteria1, String criteria2,\n                                     String criteria3, String criteria4) {\n         return contains(value, start, length,\n-                        new String[] { criteria1, criteria2, criteria3,\n-                                       criteria4 });\n-    }\n-\n-    /**\n-     * Shortcut method with 5 criteria\n+                        new String[] { criteria1, criteria2, criteria3, criteria4 });\n+    }\n+\n+    /**\n+     * Shortcut method with 5 criteria.\n      */\n     private static boolean contains(String value, int start, int length,\n                                     String criteria1, String criteria2,\n     }\n \n     /**\n-     * Shortcut method with 6 criteria\n+     * Shortcut method with 6 criteria.\n      */\n     private static boolean contains(String value, int start, int length,\n                                     String criteria1, String criteria2,\n \n     /**\n      * Determines whether <code>value</code> contains any of the criteria starting at index <code>start</code> and\n-     * matching up to length <code>length</code>\n+     * matching up to length <code>length</code>.\n      */\n     protected static boolean contains(String value, int start, int length,\n                                       String[] criteria) {\n     //-- BEGIN INNER CLASSES --//\n \n     /**\n-     * Inner class for storing results, since there is the optional alternate\n-     * encoding.\n+     * Inner class for storing results, since there is the optional alternate encoding.\n      */\n     public class DoubleMetaphoneResult {\n \n \n         public boolean isComplete() {\n             return this.primary.length() >= this.maxLength &&\n-                this.alternate.length() >= this.maxLength;\n+                   this.alternate.length() >= this.maxLength;\n         }\n     }\n }", "timestamp": 1346274167, "metainfo": ""}