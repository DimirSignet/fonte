{"sha": "a3a31a19b6478800a0a71273012492385f6ab4ce", "log": "Javadoc.  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/digest/Md5Crypt.java\n+++ b/src/main/java/org/apache/commons/codec/digest/Md5Crypt.java\n /**\n  * The libc crypt() \"$1$\" and Apache \"$apr1$\" MD5-based hash algorithm.\n  * <p>\n- * Based on the public domain (\"beer-ware\") C implementation from Poul-Henning Kamp which was found at:\n- * <a href=\"http://www.freebsd.org/cgi/cvsweb.cgi/src/lib/libcrypt/crypt-md5.c?rev=1.1;content-type=text%2Fplain\">\n+ * Based on the public domain (\"beer-ware\") C implementation from Poul-Henning Kamp which was found at: <a\n+ * href=\"http://www.freebsd.org/cgi/cvsweb.cgi/src/lib/libcrypt/crypt-md5.c?rev=1.1;content-type=text%2Fplain\">\n  * crypt-md5.c @ freebsd.org</a><br/>\n  * <p>\n  * Source:\n- * <pre>$FreeBSD: src/lib/libcrypt/crypt-md5.c,v 1.1 1999/01/21 13:50:09 brandon Exp $</pre>\n+ *\n+ * <pre>\n+ * $FreeBSD: src/lib/libcrypt/crypt-md5.c,v 1.1 1999/01/21 13:50:09 brandon Exp $\n+ * </pre>\n  * <p>\n  * Conversion to Kotlin and from there to Java in 2012.\n  * <p>\n      * See {@link #apr1Crypt(String, String)} for details.\n      *\n      * @throws RuntimeException\n-     *              when a {@link java.security.NoSuchAlgorithmException} is caught.     *\n+     *             when a {@link java.security.NoSuchAlgorithmException} is caught. *\n      */\n     public static String apr1Crypt(byte[] keyBytes) {\n         return apr1Crypt(keyBytes, APR1_PREFIX + B64.getRandomSalt(8));\n     /**\n      * See {@link #apr1Crypt(String, String)} for details.\n      *\n-     * @throws IllegalArgumentException if the salt does not match the allowed pattern\n-     * @throws RuntimeException\n-     *              when a {@link java.security.NoSuchAlgorithmException} is caught.\n+     * @throws IllegalArgumentException\n+     *             if the salt does not match the allowed pattern\n+     * @throws RuntimeException\n+     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n      */\n     public static String apr1Crypt(byte[] keyBytes, String salt) {\n         // to make the md5Crypt regex happy\n      * See {@link #apr1Crypt(String, String)} for details.\n      *\n      * @throws RuntimeException\n-     *              when a {@link java.security.NoSuchAlgorithmException} is caught.\n+     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n      */\n     public static String apr1Crypt(String keyBytes) {\n         return apr1Crypt(keyBytes.getBytes(Charsets.UTF_8));\n     /**\n      * Generates an Apache htpasswd compatible \"$apr1$\" MD5 based hash value.\n      * <p>\n-     * The algorithm is identical to the crypt(3) \"$1$\" one but produces different\n-     * outputs due to the different salt prefix.\n+     * The algorithm is identical to the crypt(3) \"$1$\" one but produces different outputs due to the different salt\n+     * prefix.\n      *\n      * @param keyBytes\n      *            plaintext string that should be hashed.\n      * @param salt\n-     *            salt string including the prefix and optionally garbage at the end.\n-     *            Will be generated randomly if null.\n+     *            salt string including the prefix and optionally garbage at the end. Will be generated randomly if\n+     *            null.\n      * @return computed hash value\n      * @throws IllegalArgumentException\n-     *              if the salt does not match the allowed pattern\n-     * @throws RuntimeException\n-     *              when a {@link java.security.NoSuchAlgorithmException} is caught.\n+     *             if the salt does not match the allowed pattern\n+     * @throws RuntimeException\n+     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n      */\n     public static String apr1Crypt(String keyBytes, String salt) {\n         return apr1Crypt(keyBytes.getBytes(Charsets.UTF_8), salt);\n      * See {@link Crypt#crypt(String, String)} for details.\n      *\n      * @throws RuntimeException\n-     *              when a {@link java.security.NoSuchAlgorithmException} is caught.\n+     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n      */\n     public static String md5Crypt(final byte[] keyBytes) {\n         return md5Crypt(keyBytes, MD5_PREFIX + B64.getRandomSalt(8));\n      * @param keyBytes\n      *            plaintext string that should be hashed.\n      * @param salt\n-     *            salt string including the prefix and optionally garbage at the end.\n-     *            Will be generated randomly if null.\n+     *            salt string including the prefix and optionally garbage at the end. Will be generated randomly if\n+     *            null.\n      * @return computed hash value\n      * @throws IllegalArgumentException\n-     *              if the salt does not match the allowed pattern\n-     * @throws RuntimeException\n-     *              when a {@link java.security.NoSuchAlgorithmException} is caught.\n+     *             if the salt does not match the allowed pattern\n+     * @throws RuntimeException\n+     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n      */\n     public static String md5Crypt(byte[] keyBytes, String salt) {\n         return md5Crypt(keyBytes, salt, MD5_PREFIX);\n      * See {@link Crypt#crypt(String, String)} or {@link #apr1Crypt(String, String)} for details.\n      *\n      * @throws IllegalArgumentException\n-     *              if the salt does not match the allowed pattern\n-     * @throws RuntimeException\n-     *              when a {@link java.security.NoSuchAlgorithmException} is caught.\n-     */\n-    public static String md5Crypt(final byte[] keyBytes, final String salt, final String prefix)\n-            {\n+     *             if the salt does not match the allowed pattern\n+     * @throws RuntimeException\n+     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n+     */\n+    public static String md5Crypt(final byte[] keyBytes, final String salt, final String prefix) {\n         int keyLen = keyBytes.length;\n \n         // Extract the real salt from the given string which can be a complete hash string.", "timestamp": 1346518673, "metainfo": ""}