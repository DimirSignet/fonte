{"sha": "1a3a1b306faec5e317c8be2ebb9e54244f6ab57d", "log": "Refactor: Use byte[] from ensureBufferSize() instead of always deferencing it from the context. Use final on lvars to clarify intent and avoid potential bugs.  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/binary/Base64.java\n+++ b/src/main/java/org/apache/commons/codec/binary/Base64.java\n             switch (context.modulus) { // 0-2\n                 case 1 : // 8 bits = 6 + 2\n                     // top 6 bits:\n-                    context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 2) & MASK_6BITS];\n+                    buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 2) & MASK_6BITS];\n                     // remaining 2:\n-                    context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea << 4) & MASK_6BITS];\n+                    buffer[context.pos++] = encodeTable[(context.ibitWorkArea << 4) & MASK_6BITS];\n                     // URL-SAFE skips the padding to further reduce size.\n                     if (encodeTable == STANDARD_ENCODE_TABLE) {\n-                        context.buffer[context.pos++] = PAD;\n-                        context.buffer[context.pos++] = PAD;\n+                        buffer[context.pos++] = PAD;\n+                        buffer[context.pos++] = PAD;\n                     }\n                     break;\n \n                 case 2 : // 16 bits = 6 + 6 + 4\n-                    context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 10) & MASK_6BITS];\n-                    context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 4) & MASK_6BITS];\n-                    context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea << 2) & MASK_6BITS];\n+                    buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 10) & MASK_6BITS];\n+                    buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 4) & MASK_6BITS];\n+                    buffer[context.pos++] = encodeTable[(context.ibitWorkArea << 2) & MASK_6BITS];\n                     // URL-SAFE skips the padding to further reduce size.\n                     if (encodeTable == STANDARD_ENCODE_TABLE) {\n-                        context.buffer[context.pos++] = PAD;\n+                        buffer[context.pos++] = PAD;\n                     }\n                     break;\n             }\n             context.currentLinePos += context.pos - savedPos; // keep track of current line position\n             // if currentPos == 0 we are at the start of a line, so don't add CRLF\n             if (lineLength > 0 && context.currentLinePos > 0) {\n-                System.arraycopy(lineSeparator, 0, context.buffer, context.pos, lineSeparator.length);\n+                System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);\n                 context.pos += lineSeparator.length;\n             }\n         } else {\n                 }\n                 context.ibitWorkArea = (context.ibitWorkArea << 8) + b; //  BITS_PER_BYTE\n                 if (0 == context.modulus) { // 3 bytes = 24 bits = 4 * 6 bits to extract\n-                    context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 18) & MASK_6BITS];\n-                    context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 12) & MASK_6BITS];\n-                    context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 6) & MASK_6BITS];\n-                    context.buffer[context.pos++] = encodeTable[context.ibitWorkArea & MASK_6BITS];\n+                    buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 18) & MASK_6BITS];\n+                    buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 12) & MASK_6BITS];\n+                    buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 6) & MASK_6BITS];\n+                    buffer[context.pos++] = encodeTable[context.ibitWorkArea & MASK_6BITS];\n                     context.currentLinePos += BYTES_PER_ENCODED_BLOCK;\n                     if (lineLength > 0 && lineLength <= context.currentLinePos) {\n-                        System.arraycopy(lineSeparator, 0, context.buffer, context.pos, lineSeparator.length);\n+                        System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);\n                         context.pos += lineSeparator.length;\n                         context.currentLinePos = 0;\n                     }\n         }\n         for (int i = 0; i < inAvail; i++) {\n             final byte[] buffer = ensureBufferSize(decodeSize, context);\n-            byte b = in[inPos++];\n+            final byte b = in[inPos++];\n             if (b == PAD) {\n                 // We're done.\n                 context.eof = true;\n                 break;\n             } else {\n                 if (b >= 0 && b < DECODE_TABLE.length) {\n-                    int result = DECODE_TABLE[b];\n+                    final int result = DECODE_TABLE[b];\n                     if (result >= 0) {\n                         context.modulus = (context.modulus+1) % BYTES_PER_ENCODED_BLOCK;\n                         context.ibitWorkArea = (context.ibitWorkArea << BITS_PER_ENCODED_BYTE) + result;", "timestamp": 1346337725, "metainfo": ""}