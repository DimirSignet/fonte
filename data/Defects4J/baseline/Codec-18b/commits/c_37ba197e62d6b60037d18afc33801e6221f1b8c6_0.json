{"sha": "37ba197e62d6b60037d18afc33801e6221f1b8c6", "log": "<action dev=\"ggregory\" type=\"add\" issue=\"CODEC-184\" due-to=\"Cyrille Artho\">NullPointerException in DoubleMetaPhone.isDoubleMetaphoneEqual when using empty strings</action>  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/codec/binary/CharSequenceUtils.java\n+package org.apache.commons.codec.binary;\n+\n+/**\n+ * <p>\n+ * Operations on {@link CharSequence} that are {@code null} safe.\n+ * </p>\n+ * <p>\n+ * Copied from Apache Commons Lang r1586295 on April 10, 2014 (day of 3.3.2 release).\n+ * </p>\n+ * \n+ * @see CharSequence\n+ * @since 1.10\n+ */\n+public class CharSequenceUtils {\n+\n+    /**\n+     * Green implementation of regionMatches.\n+     * \n+     * @param cs\n+     *            the {@code CharSequence} to be processed\n+     * @param ignoreCase\n+     *            whether or not to be case insensitive\n+     * @param thisStart\n+     *            the index to start on the {@code cs} CharSequence\n+     * @param substring\n+     *            the {@code CharSequence} to be looked for\n+     * @param start\n+     *            the index to start on the {@code substring} CharSequence\n+     * @param length\n+     *            character length of the region\n+     * @return whether the region matched\n+     */\n+    static boolean regionMatches(final CharSequence cs, final boolean ignoreCase, final int thisStart,\n+            final CharSequence substring, final int start, final int length) {\n+        if (cs instanceof String && substring instanceof String) {\n+            return ((String) cs).regionMatches(ignoreCase, thisStart, (String) substring, start, length);\n+        }\n+        int index1 = thisStart;\n+        int index2 = start;\n+        int tmpLen = length;\n+\n+        while (tmpLen-- > 0) {\n+            char c1 = cs.charAt(index1++);\n+            char c2 = substring.charAt(index2++);\n+\n+            if (c1 == c2) {\n+                continue;\n+            }\n+\n+            if (!ignoreCase) {\n+                return false;\n+            }\n+\n+            // The same check as in String.regionMatches():\n+            if (Character.toUpperCase(c1) != Character.toUpperCase(c2)\n+                    && Character.toLowerCase(c1) != Character.toLowerCase(c2)) {\n+                return false;\n+            }\n+        }\n+\n+        return true;\n+    }\n+}\n--- a/src/main/java/org/apache/commons/codec/binary/StringUtils.java\n+++ b/src/main/java/org/apache/commons/codec/binary/StringUtils.java\n public class StringUtils {\n \n     /**\n+     * <p>\n+     * Compares two CharSequences, returning {@code true} if they represent equal sequences of characters.\n+     * </p>\n+     * \n+     * <p>\n+     * {@code null}s are handled without exceptions. Two {@code null} references are considered to be equal. The\n+     * comparison is case sensitive.\n+     * </p>\n+     * \n+     * <pre>\n+     * StringUtils.equals(null, null)   = true\n+     * StringUtils.equals(null, \"abc\")  = false\n+     * StringUtils.equals(\"abc\", null)  = false\n+     * StringUtils.equals(\"abc\", \"abc\") = true\n+     * StringUtils.equals(\"abc\", \"ABC\") = false\n+     * </pre>\n+     * \n+     * <p>\n+     * Copied from Apache Commons Lang r1583482 on April 10, 2014 (day of 3.3.2 release).\n+     * </p>\n+     * \n+     * @see Object#equals(Object)\n+     * @param cs1\n+     *            the first CharSequence, may be {@code null}\n+     * @param cs2\n+     *            the second CharSequence, may be {@code null}\n+     * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}\n+     * @since 1.10\n+     */\n+    public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n+        if (cs1 == cs2) {\n+            return true;\n+        }\n+        if (cs1 == null || cs2 == null) {\n+            return false;\n+        }\n+        if (cs1 instanceof String && cs2 instanceof String) {\n+            return cs1.equals(cs2);\n+        }\n+        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n+    }\n+\n+    /**\n      * Calls {@link String#getBytes(Charset)}\n      *\n      * @param string\n--- a/src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java\n+++ b/src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java\n \n import org.apache.commons.codec.EncoderException;\n import org.apache.commons.codec.StringEncoder;\n+import org.apache.commons.codec.binary.StringUtils;\n \n /**\n  * Encodes a string into a double metaphone value. This Implementation is based on the algorithm by <CITE>Lawrence\n      *          {@code false} otherwise.\n      */\n     public boolean isDoubleMetaphoneEqual(final String value1, final String value2, final boolean alternate) {\n-        return doubleMetaphone(value1, alternate).equals(doubleMetaphone(value2, alternate));\n+        return StringUtils.equals(doubleMetaphone(value1, alternate), doubleMetaphone(value2, alternate));\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java\n+++ b/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java\n     }\n \n     @Test\n+    public void testCodec184() throws Throwable {\n+        assertTrue(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"\", false));\n+        assertTrue(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"\", true));\n+        assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"aa\", \"\", false));\n+        assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"aa\", \"\", true));\n+        assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"aa\", false));\n+        assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"aa\", true));\n+      }\n+\n+    @Test\n     public void testDoubleMetaphone() {\n         assertDoubleMetaphone(\"TSTN\", \"testing\");\n         assertDoubleMetaphone(\"0\", \"The\");\n \n     @Test\n     public void testIsDoubleMetaphoneEqualBasic() {\n-        final String[][] testFixture = new String[][] { { \"Case\", \"case\" }, {\n+        final String[][] testFixture = new String[][] { { \n+                \"\", \"\" }, {\n+                \"Case\", \"case\" }, {\n                 \"CASE\", \"Case\" }, {\n                 \"caSe\", \"cAsE\" }, {\n                 \"cookie\", \"quick\" }, {", "timestamp": 1397137866, "metainfo": ""}