{"sha": "0752e9ac06e72b67554450877251e2eca87c504f", "log": "Applying CODEC-52; Niklas Gustavsson's enhancement to have InputStream variants for DigestUtil's digest methods  ", "commit": "\n--- a/src/java/org/apache/commons/codec/digest/DigestUtils.java\n+++ b/src/java/org/apache/commons/codec/digest/DigestUtils.java\n \n package org.apache.commons.codec.digest;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n \n  * @version $Id$\n  */\n public class DigestUtils {\n+\n+    private static final int STREAM_BUFFER_LENGTH = 1024;\n \n     /**\n      * Returns a <code>MessageDigest</code> for the given <code>algorithm</code>.\n     }\n \n     /**\n+     * Read through an InputStream and returns the digest for the data\n+     * \n+     * @param digest The MessageDigest to use (e.g. MD5)\n+     * @param data Data to digest\n+     * @return MD5 digest\n+     * @throws IOException On error reading from the stream\n+     */\n+    private static byte[] digest(MessageDigest digest, InputStream data) throws IOException {\n+        byte[] buffer = new byte[STREAM_BUFFER_LENGTH];\n+        int read = data.read(buffer, 0, STREAM_BUFFER_LENGTH);\n+        \n+        while(read > -1) {\n+            digest.update(buffer, 0, read);\n+            read = data.read(buffer, 0, STREAM_BUFFER_LENGTH);\n+        }\n+        \n+        return digest.digest();\n+    }\n+    \n+    /**\n      * Calculates the MD5 digest and returns the value as a 16 element <code>byte[]</code>.\n      * \n      * @param data\n      * @param data\n      *            Data to digest\n      * @return MD5 digest\n+     * @throws IOException On error reading from the stream\n+     */\n+    public static byte[] md5(InputStream data) throws IOException {\n+        return digest(getMd5Digest(), data);\n+    }\n+\n+    /**\n+     * Calculates the MD5 digest and returns the value as a 16 element <code>byte[]</code>.\n+     * \n+     * @param data\n+     *            Data to digest\n+     * @return MD5 digest\n      */\n     public static byte[] md5(String data) {\n         return md5(data.getBytes());\n     }\n \n     /**\n+     * Calculates the MD5 digest and returns the value as a 32 character hex string.\n+     * \n+     * @param data\n+     *            Data to digest\n+     * @return MD5 digest as a hex string\n+     * @throws IOException On error reading from the stream\n+     */\n+    public static String md5Hex(InputStream data) throws IOException {\n+        return new String(Hex.encodeHex(md5(data)));\n+    }\n+\n+    /**\n      * Calculates the SHA-1 digest and returns the value as a <code>byte[]</code>.\n      * \n      * @param data\n     }\n \n     /**\n+     * Calculates the SHA-1 digest and returns the value as a <code>byte[]</code>.\n+     * \n+     * @param data\n+     *            Data to digest\n+     * @return SHA-1 digest\n+     * @throws IOException On error reading from the stream\n+     */\n+    public static byte[] sha(InputStream data) throws IOException {\n+        return digest(getShaDigest(), data);\n+    }\n+\n+    /**\n      * Calculates the SHA-256 digest and returns the value as a <code>byte[]</code>.\n      * <p>\n      * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n     }\n \n     /**\n+     * Calculates the SHA-256 digest and returns the value as a <code>byte[]</code>.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     * \n+     * @param data\n+     *            Data to digest\n+     * @return SHA-256 digest\n+     * @throws IOException On error reading from the stream\n+     */\n+    public static byte[] sha256(InputStream data) throws IOException {\n+        return digest(getSha256Digest(), data);\n+    }\n+\n+    /**\n      * Calculates the SHA-256 digest and returns the value as a hex string.\n      * <p>\n      * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n      * @return SHA-256 digest as a hex string\n      */\n     public static String sha256Hex(String data) {\n+        return new String(Hex.encodeHex(sha256(data)));\n+    }\n+\n+    /**\n+     * Calculates the SHA-256 digest and returns the value as a hex string.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     * \n+     * @param data\n+     *            Data to digest\n+     * @return SHA-256 digest as a hex string\n+     * @throws IOException On error reading from the stream\n+     */\n+    public static String sha256Hex(InputStream data) throws IOException {\n         return new String(Hex.encodeHex(sha256(data)));\n     }\n \n     public static byte[] sha384(String data) {\n         return sha384(data.getBytes());\n     }\n+    \n+    /**\n+     * Calculates the SHA-384 digest and returns the value as a <code>byte[]</code>.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     * \n+     * @param data\n+     *            Data to digest\n+     * @return SHA-384 digest\n+     * @throws IOException On error reading from the stream\n+     */\n+    public static byte[] sha384(InputStream data) throws IOException {\n+        return digest(getSha384Digest(), data);\n+    }\n \n     /**\n      * Calculates the SHA-384 digest and returns the value as a hex string.\n     }\n \n     /**\n+     * Calculates the SHA-384 digest and returns the value as a hex string.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     * \n+     * @param data\n+     *            Data to digest\n+     * @return SHA-384 digest as a hex string\n+     * @throws IOException On error reading from the stream\n+     */\n+    public static String sha384Hex(InputStream data) throws IOException {\n+        return new String(Hex.encodeHex(sha384(data)));\n+    }\n+\n+    /**\n      * Calculates the SHA-512 digest and returns the value as a <code>byte[]</code>.\n      * <p>\n      * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n     }\n \n     /**\n+     * Calculates the SHA-512 digest and returns the value as a <code>byte[]</code>.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     * \n+     * @param data\n+     *            Data to digest\n+     * @return SHA-512 digest\n+     * @throws IOException On error reading from the stream\n+     */\n+    public static byte[] sha512(InputStream data) throws IOException {\n+        return digest(getSha512Digest(), data);\n+    }\n+\n+    /**\n      * Calculates the SHA-512 digest and returns the value as a hex string.\n      * <p>\n      * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n     }\n \n     /**\n+     * Calculates the SHA-512 digest and returns the value as a hex string.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     * \n+     * @param data\n+     *            Data to digest\n+     * @return SHA-512 digest as a hex string\n+     * @throws IOException On error reading from the stream\n+     */\n+    public static String sha512Hex(InputStream data) throws IOException {\n+        return new String(Hex.encodeHex(sha512(data)));\n+    }\n+\n+    /**\n      * Calculates the SHA-1 digest and returns the value as a hex string.\n      * \n      * @param data\n     public static String shaHex(String data) {\n         return new String(Hex.encodeHex(sha(data)));\n     }\n+\n+    /**\n+     * Calculates the SHA-1 digest and returns the value as a hex string.\n+     * \n+     * @param data\n+     *            Data to digest\n+     * @return SHA-1 digest as a hex string\n+     * @throws IOException On error reading from the stream\n+     */\n+    public static String shaHex(InputStream data) throws IOException {\n+        return new String(Hex.encodeHex(sha(data)));\n+    }\n }\n--- a/src/test/org/apache/commons/codec/digest/DigestUtilsTest.java\n+++ b/src/test/org/apache/commons/codec/digest/DigestUtilsTest.java\n \n package org.apache.commons.codec.digest;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.util.Random;\n+\n import junit.framework.TestCase;\n \n /**\n  */\n public class DigestUtilsTest extends TestCase {\n \n+    private byte[] testData = new byte[1024*1024];\n+    \n+    /* (non-Javadoc)\n+     * @see junit.framework.TestCase#setUp()\n+     */\n+    protected void setUp() throws Exception {\n+        new Random().nextBytes(testData);\n+    }\n+\n     public void testInternalNoSuchAlgorithmException() {\n         try {\n             DigestUtils.getDigest(\"Bogus Bogus\");\n         }\n     }\n \n-    public void testMd5Hex() {\n+    public void testMd5Hex() throws IOException {\n         // Examples from RFC 1321\n         assertEquals(\"d41d8cd98f00b204e9800998ecf8427e\", DigestUtils.md5Hex(\"\"));\n \n         assertEquals(\n             \"57edf4a22be3c955ac49da2e2107b67a\",\n             DigestUtils.md5Hex(\"1234567890123456789012345678901234567890\" + \"1234567890123456789012345678901234567890\"));\n+\n+        assertEquals(DigestUtils.md5Hex(testData),\n+                DigestUtils.md5Hex(new ByteArrayInputStream(testData)));\n     }\n-\n+    \n     /**\n \t * An MD5 hash converted to hex should always be 32 characters.\n \t */\n         assertEquals(16, hash.length);\n     }\n \n-    public void testSha256() {\n+    public void testSha256() throws IOException {\n \t// Examples from FIPS 180-2\n \tassertEquals(\"ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad\",\n \t\t     DigestUtils.sha256Hex(\"abc\"));\n \t\t     DigestUtils.sha256Hex(\"abc\".getBytes()));\n \tassertEquals(\"248d6a61d20638b8e5c026930c3e6039a33ce45964ff2167f6ecedd419db06c1\",\n \t\t     DigestUtils.sha256Hex(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\"));\n+    \n+    assertEquals(DigestUtils.sha256Hex(testData),\n+            DigestUtils.sha256Hex(new ByteArrayInputStream(testData)));\n     }\n \n-    public void testSha384() {\n+    public void testSha384() throws IOException {\n \t// Examples from FIPS 180-2\n \tassertEquals(\"cb00753f45a35e8bb5a03d699ac65007272c32ab0eded1631a8b605a43ff5bed\" + \n \t\t     \"8086072ba1e7cc2358baeca134c825a7\",\n \t        \"fcc7c71a557e2db966c3e9fa91746039\",\n \t\t     DigestUtils.sha384Hex(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn\" +\n \t\t\t\t\t   \"hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu\"));\n+    assertEquals(DigestUtils.sha384Hex(testData),\n+            DigestUtils.sha384Hex(new ByteArrayInputStream(testData)));\n     }    \n \n-    public void testSha512() {\n+    public void testSha512() throws IOException {\n \t// Examples from FIPS 180-2\n \tassertEquals(\"ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a\" +\n \t        \"2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f\",\n \t\t     \"501d289e4900f7e4331b99dec4b5433ac7d329eeb6dd26545e96e55b874be909\",\n \t\t     DigestUtils.sha512Hex(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn\" + \n \t\t\t\t\t   \"hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu\"));\n-    }\n+    assertEquals(DigestUtils.sha512Hex(testData),\n+            DigestUtils.sha512Hex(new ByteArrayInputStream(testData)));\n+}\n \n-    public void testShaHex() {\n+    public void testShaHex() throws IOException {\n         // Examples from FIPS 180-1\n         assertEquals(\"a9993e364706816aba3e25717850c26c9cd0d89d\", DigestUtils.shaHex(\"abc\"));\n \n         assertEquals(\n             \"84983e441c3bd26ebaae4aa1f95129e5e54670f1\",\n             DigestUtils.shaHex(\"abcdbcdecdefdefgefghfghighij\" + \"hijkijkljklmklmnlmnomnopnopq\"));\n+        assertEquals(DigestUtils.shaHex(testData),\n+                DigestUtils.shaHex(new ByteArrayInputStream(testData)));\n+\n     }    \n }", "timestamp": 1204962586, "metainfo": ""}