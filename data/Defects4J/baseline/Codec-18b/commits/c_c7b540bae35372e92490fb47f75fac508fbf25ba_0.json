{"sha": "c7b540bae35372e92490fb47f75fac508fbf25ba", "log": "CODEC-218 Refactor HmacUtils methods into the HmacAlgorithms enum Reverted, because not all algorithms can be supported by the enum  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/digest/HmacAlgorithms.java\n+++ b/src/main/java/org/apache/commons/codec/digest/HmacAlgorithms.java\n  */\n \n package org.apache.commons.codec.digest;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.security.Key;\n-import java.security.NoSuchAlgorithmException;\n-\n-import javax.crypto.Mac;\n-\n-import org.apache.commons.codec.binary.Hex;\n-import org.apache.commons.codec.binary.StringUtils;\n \n /**\n  * Standard {@link HmacUtils} algorithm names from the <cite>Java Cryptography Architecture Standard Algorithm Name\n     }\n \n     /**\n-     * Returns an initialized <code>Mac</code> for the this algorithm.\n-     * <p>\n-     * Every implementation of the Java platform is required to support this standard Mac algorithm.\n-     * </p>\n-     *\n-     * @param key\n-     *            The key for the keyed digest (must not be null)\n-     * @return A Mac instance initialized with the given key.\n-     * @see Mac#getInstance(String)\n-     * @see Mac#init(Key)\n-     * @throws IllegalArgumentException\n-     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n-     * @since 1.11\n-     */\n-    public Mac getHmac(final byte[] key) {\n-        return HmacUtils.getInitializedMac(name, key);\n-    }\n-\n-    /**\n      * Gets the algorithm name.\n      *\n      * @return the algorithm name.\n      */\n     public String getName() {\n         return name;\n-    }\n-\n-    /**\n-     * Returns a keyed-Hash Message Authentication Code (HMAC) for the given key and value.\n-     *\n-     * @param key\n-     *            The key for the keyed digest (must not be null)\n-     * @param valueToDigest\n-     *            The value (data) to digest (maybe empty or null)\n-     * @return HMAC for the given key and value\n-     * @throws IllegalArgumentException\n-     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n-     * @since 1.11\n-     */\n-    public byte[] hmac(final byte[] key, final byte[] valueToDigest) {\n-        try {\n-            return getHmac(key).doFinal(valueToDigest);\n-        } catch (final IllegalStateException e) {\n-            // cannot happen\n-            throw new IllegalArgumentException(e);\n-        }\n-    }\n-\n-    /**\n-     * Returns a keyed-Hash Message Authentication Code (HMAC) for the given key and value.\n-     *\n-     * @param key\n-     *            The key for the keyed digest (must not be null)\n-     * @param valueToDigest\n-     *            The value (data) to digest. The InputStream must not be null and will not be closed.\n-     * @return HMAC for the given key and value\n-     * @throws IOException\n-     *             If an I/O error occurs.\n-     * @throws IllegalArgumentException\n-     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n-     * @since 1.11\n-     */\n-    public byte[] hmac(final byte[] key, final InputStream valueToDigest) throws IOException {\n-        return HmacUtils.updateHmac(getHmac(key), valueToDigest).doFinal();\n-    }\n-\n-    /**\n-     * Returns a keyed-Hash Message Authentication Code (HMAC) for the given key and value.\n-     * The Strings are converted to bytes using the UTF-8 charset.\n-     *\n-     * @param key\n-     *            The key for the keyed digest (must not be null)\n-     * @param valueToDigest\n-     *            The value (data) to digest (maybe empty or null)\n-     * @return HMAC for the given key and value\n-     * @throws IllegalArgumentException\n-     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n-     * @since 1.11\n-     */\n-    public byte[] hmac(final String key, final String valueToDigest) {\n-        return hmac(StringUtils.getBytesUtf8(key), StringUtils.getBytesUtf8(valueToDigest));\n-    }\n-\n-    /**\n-     * Returns a keyed-Hash Message Authentication Code (HMAC) as a hex string (lowercase) for the given key and value.\n-     *\n-     * @param key\n-     *            The key for the keyed digest (must not be null)\n-     * @param valueToDigest\n-     *            The value (data) to digest (maybe empty or null)\n-     * @return HMAC for the given key and value as a hex string (lowercase)\n-     * @throws IllegalArgumentException\n-     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n-     * @since 1.11\n-     */\n-    public String hmacHex(final byte[] key, final byte[] valueToDigest) {\n-        return Hex.encodeHexString(hmac(key, valueToDigest));\n-    }\n-\n-    /**\n-     * Returns a keyed-Hash Message Authentication Code (HMAC) as a hex string (lowercase) for the given key and value.\n-     *\n-     * @param key\n-     *            The key for the keyed digest (must not be null)\n-     * @param valueToDigest\n-     *            The value (data) to digest. The InputStream must not be null and will not be closed.\n-     * @return HMAC for the given key and value as a hex string (lowercase)\n-     * @throws IOException\n-     *             If an I/O error occurs.\n-     * @throws IllegalArgumentException\n-     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n-     * @since 1.11\n-     */\n-    public String hmacHex(final byte[] key, final InputStream valueToDigest) throws IOException {\n-        return Hex.encodeHexString(hmac(key, valueToDigest));\n-    }\n-\n-    /**\n-     * Returns a keyed-Hash Message Authentication Code (HMAC) as a hex string (lowercase) for the given key and value.\n-     *\n-     * @param key\n-     *            The key for the keyed digest (must not be null)\n-     * @param valueToDigest\n-     *            The value (data) to digest (maybe empty or null)\n-     * @return HMAC for the given key and value as a hex string (lowercase)\n-     * @throws IllegalArgumentException\n-     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n-     * @since 1.11\n-     */\n-    public String hmacHex(final String key, final String valueToDigest) {\n-        return Hex.encodeHexString(hmac(key, valueToDigest));\n-    }\n-\n-    /**\n-     * Returns whether this algorithm is available\n-     *\n-     * @return whether this algorithm is available\n-     * @since 1.11\n-     */\n-    public boolean isAvailable() {\n-        try {\n-            Mac.getInstance(name);\n-            return true;\n-        } catch (NoSuchAlgorithmException e) {\n-            return false;\n-        }\n     }\n \n     /**", "timestamp": 1464006606, "metainfo": ""}