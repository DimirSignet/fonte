{"sha": "9869cfec93717e4a74433b5b954903a87e6e0868", "log": "More tests.  ", "commit": "\n--- a/src/test/java/org/apache/commons/codec/language/NysiisTest.java\n+++ b/src/test/java/org/apache/commons/codec/language/NysiisTest.java\n  */\n public class NysiisTest extends StringEncoderAbstractTest {\n \n+    private final Nysiis fullNysiis = new Nysiis(false);\n+    \n     @Override\n     protected StringEncoder createStringEncoder() {\n         return new Nysiis();\n     }\n \n-    protected StringEncoder createStringEncoder(boolean trueLength) {\n-        return new Nysiis(trueLength);\n-    }\n-\n     private void encodeAll(String[] strings, String expectedEncoding) throws EncoderException {\n         for (int i = 0; i < strings.length; i++) {\n             Assert.assertEquals(\"Problem with \" + strings[i], expectedEncoding, getStringEncoder().encode(strings[i]));\n         }\n-    }\n-\n-    @Test\n-    public void testTrueVariant() {\n-        Nysiis encoder = new Nysiis(true);\n-\n-        String encoded = encoder.encode(\"WESTERLUND\");\n-        Assert.assertTrue(encoded.length() <= 6);\n-        Assert.assertEquals(\"WASTAR\", encoded);\n     }\n \n     @Test\n     @Test\n     public void testDan() throws EncoderException {\n         this.encodeAll(new String[] { \"Dane\", \"Dean\", \"Dionne\" }, \"DAN\");\n-    }\n-\n-    @Test\n-    public void testSpecialBranches() throws EncoderException {\n-        this.encodeAll(new String[] { \"Kobwick\" }, \"CABWAC\");\n-        this.encodeAll(new String[] { \"Kocher\" }, \"CACAR\");\n-        this.encodeAll(new String[] { \"Fesca\" }, \"FASC\");\n-        this.encodeAll(new String[] { \"Shom\" }, \"SAN\");\n-        this.encodeAll(new String[] { \"Ohlo\" }, \"OL\");\n-        this.encodeAll(new String[] { \"Uhu\" }, \"UH\");\n-        this.encodeAll(new String[] { \"Um\" }, \"UN\");\n     }\n \n     @Test\n                         new String[] { \"YAMADA\", \"YANAD\" });\n \n         for (String[] arr : testValues) {\n-            Assert.assertEquals(\"Problem with \" + arr[0], arr[1], createStringEncoder(false).encode(arr[0]));\n+            Assert.assertEquals(\"Problem with \" + arr[0], arr[1], this.fullNysiis.encode(arr[0]));\n         }\n     }\n \n                         new String[] { \"YAMADA\", \"YANAD\" });\n \n         for (String[] arr : testValues) {\n-            Assert.assertEquals(\"Problem with \" + arr[0], arr[1], createStringEncoder(false).encode(arr[0]));\n+            Assert.assertEquals(\"Problem with \" + arr[0], arr[1], this.fullNysiis.encode(arr[0]));\n         }\n     }\n \n                         new String[] { \"FUZZY\", \"FASY\" });\n \n         for (String[] arr : testValues) {\n-            Assert.assertEquals(\"Problem with \" + arr[0], arr[1], createStringEncoder(false).encode(arr[0]));\n-        }\n-    }\n-\n+            Assert.assertEquals(\"Problem with \" + arr[0], arr[1], this.fullNysiis.encode(arr[0]));\n+        }\n+    }\n+\n+    /**\n+     * Tests rule 1: Translate first characters of name: MAC \u2192 MCC, KN \u2192 N, K \u2192 C, PH, PF \u2192 FF, SCH \u2192 SSS\n+     * \n+     * @throws EncoderException\n+     */\n+    @Test\n+    public void testRule1() throws EncoderException {\n+        List<String[]> testValues =\n+                Arrays.asList(\n+                        new String[] { \"MACX\", \"MCX\" },\n+                        new String[] { \"KNX\", \"NX\" },\n+                        new String[] { \"KX\", \"CX\" },\n+                        new String[] { \"PHX\", \"FX\" },\n+                        new String[] { \"PFX\", \"FX\" },\n+                        new String[] { \"SCHX\", \"SX\" });\n+        for (String[] arr : testValues) {\n+            Assert.assertEquals(\"Problem with \" + arr[0], arr[1], this.fullNysiis.encode(arr[0]));\n+        }\n+    }\n+\n+    /**\n+     * Tests rule 2: Translate last characters of name: EE \u2192 Y, IE \u2192 Y, DT, RT, RD, NT, ND \u2192 D\n+     * \n+     * @throws EncoderException\n+     */\n+    @Test\n+    public void testRule2() throws EncoderException {\n+        List<String[]> testValues =\n+                Arrays.asList(\n+                        new String[] { \"XEE\", \"XY\" },\n+                        new String[] { \"XIE\", \"XY\" },\n+                        new String[] { \"XDT\", \"XD\" },\n+                        new String[] { \"XRT\", \"XD\" },\n+                        new String[] { \"XRD\", \"XD\" },\n+                        new String[] { \"XNT\", \"XD\" },\n+                        new String[] { \"XND\", \"XD\" });\n+        for (String[] arr : testValues) {\n+            Assert.assertEquals(\"Problem with \" + arr[0], arr[1], this.fullNysiis.encode(arr[0]));\n+        }\n+    }\n+\n+    /**\n+     * Tests rule 4.1: EV \u2192 AF else A, E, I, O, U \u2192 A\n+     * \n+     * @throws EncoderException\n+     */\n+    @Test\n+    public void testRule4Dot1() throws EncoderException {\n+        List<String[]> testValues =\n+                Arrays.asList(\n+                        new String[] { \"XEV\", \"XAF\" },\n+                        new String[] { \"XAX\", \"XAX\" },\n+                        new String[] { \"XEX\", \"XAX\" },\n+                        new String[] { \"XIX\", \"XAX\" },\n+                        new String[] { \"XOX\", \"XAX\" },\n+                        new String[] { \"XUX\", \"XAX\" });\n+        for (String[] arr : testValues) {\n+            Assert.assertEquals(\"Problem with \" + arr[0], arr[1], this.fullNysiis.encode(arr[0]));\n+        }\n+    }\n+\n+    /**\n+     * Tests rule 5: If last character is S, remove it.\n+     * \n+     * @throws EncoderException\n+     */\n+    @Test\n+    public void testRule5() throws EncoderException {\n+        List<String[]> testValues =\n+                Arrays.asList(\n+                        new String[] { \"XS\", \"X\" },\n+                        new String[] { \"XSS\", \"X\" });\n+        for (String[] arr : testValues) {\n+            Assert.assertEquals(\"Problem with \" + arr[0], arr[1], this.fullNysiis.encode(arr[0]));\n+        }\n+    }\n+\n+    /**\n+     * Tests rule 6: If last characters are AY, replace with Y.\n+     * \n+     * @throws EncoderException\n+     */\n+    @Test\n+    public void testRule6() throws EncoderException {\n+        List<String[]> testValues =\n+                Arrays.asList(\n+                        new String[] { \"XAY\", \"XY\" },\n+                        new String[] { \"XAYS\", \"XY\" }); // Rules 5, 6\n+        for (String[] arr : testValues) {\n+            Assert.assertEquals(\"Problem with \" + arr[0], arr[1], this.fullNysiis.encode(arr[0]));\n+        }\n+    }\n+\n+    /**\n+     * Tests rule 7: If last character is A, remove it.\n+     * \n+     * @throws EncoderException\n+     */\n+    @Test\n+    public void testRule7() throws EncoderException {\n+        List<String[]> testValues =\n+                Arrays.asList(\n+                        new String[] { \"XA\", \"X\" },\n+                        new String[] { \"XAS\", \"X\" }); // Rules 5, 7\n+        for (String[] arr : testValues) {\n+            Assert.assertEquals(\"Problem with \" + arr[0], arr[1], this.fullNysiis.encode(arr[0]));\n+        }\n+    }\n     @Test\n     public void testSnad() throws EncoderException {\n         // Data Quality and Record Linkage Techniques P.121 claims this is SNAT,\n     }\n \n     @Test\n+    public void testSpecialBranches() throws EncoderException {\n+        this.encodeAll(new String[] { \"Kobwick\" }, \"CABWAC\");\n+        this.encodeAll(new String[] { \"Kocher\" }, \"CACAR\");\n+        this.encodeAll(new String[] { \"Fesca\" }, \"FASC\");\n+        this.encodeAll(new String[] { \"Shom\" }, \"SAN\");\n+        this.encodeAll(new String[] { \"Ohlo\" }, \"OL\");\n+        this.encodeAll(new String[] { \"Uhu\" }, \"UH\");\n+        this.encodeAll(new String[] { \"Um\" }, \"UN\");\n+    }\n+\n+    @Test\n     public void testTranan() throws EncoderException {\n         this.encodeAll(new String[] { \"Trueman\", \"Truman\" }, \"TRANAN\");\n     }\n \n+    @Test\n+    public void testTrueVariant() {\n+        Nysiis encoder = new Nysiis(true);\n+\n+        String encoded = encoder.encode(\"WESTERLUND\");\n+        Assert.assertTrue(encoded.length() <= 6);\n+        Assert.assertEquals(\"WASTAR\", encoded);\n+    }\n+\n }", "timestamp": 1331243023, "metainfo": ""}