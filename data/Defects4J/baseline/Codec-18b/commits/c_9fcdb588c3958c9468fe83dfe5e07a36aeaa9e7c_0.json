{"sha": "9fcdb588c3958c9468fe83dfe5e07a36aeaa9e7c", "log": "[CODEC-174] Apply patch https://issues.apache.org/jira/secure/attachment/12612178/CODEC-174-reuse-set-in-PhonemeBuilder.patch. Thanks to Thomas Champagne.  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java\n          * @return  a new, empty phoneme builder\n          */\n         public static PhonemeBuilder empty(final Languages.LanguageSet languages) {\n-            return new PhonemeBuilder(Collections.singleton(new Rule.Phoneme(\"\", languages)));\n+            return new PhonemeBuilder(new Rule.Phoneme(\"\", languages));\n         }\n \n         private final Set<Rule.Phoneme> phonemes;\n \n-        private PhonemeBuilder(final Set<Rule.Phoneme> phonemes) {\n+        private PhonemeBuilder(Rule.Phoneme phoneme) {\n+            this.phonemes = new LinkedHashSet<Rule.Phoneme>();\n+            this.phonemes.add(phoneme);\n+        }\n+        \n+        private PhonemeBuilder(Set<Rule.Phoneme> phonemes) {\n             this.phonemes = phonemes;\n         }\n \n          * @param str   the characters to append to the phonemes\n          * @return  a new phoneme builder lenghtened by <code>str</code>\n          */\n-        public PhonemeBuilder append(final CharSequence str) {\n-            final Set<Rule.Phoneme> newPhonemes = new LinkedHashSet<Rule.Phoneme>();\n-\n+        public void append(final CharSequence str) {\n             for (final Rule.Phoneme ph : this.phonemes) {\n-                newPhonemes.add(ph.append(str));\n-            }\n-\n-            return new PhonemeBuilder(newPhonemes);\n+            \tph.append(str);\n+            }\n         }\n \n         /**\n \n                 if (!found) {\n                     // not found, appending as-is\n-                    subBuilder = subBuilder.append(phonemeText.subSequence(i, i + 1));\n+                    subBuilder.append(phonemeText.subSequence(i, i + 1));\n                 }\n \n                 i = rulesApplication.getI();\n--- a/src/main/java/org/apache/commons/codec/language/bm/Rule.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/Rule.java\n             }\n         };\n \n-        private final CharSequence phonemeText;\n+        private final StringBuilder phonemeText;\n         private final Languages.LanguageSet languages;\n \n         public Phoneme(final CharSequence phonemeText, final Languages.LanguageSet languages) {\n-            this.phonemeText = phonemeText;\n+            this.phonemeText = new StringBuilder(phonemeText);\n             this.languages = languages;\n         }\n-\n-        public Phoneme append(final CharSequence str) {\n-            return new Phoneme(this.phonemeText.toString() + str.toString(), this.languages);\n+        \n+        public Phoneme(final Phoneme phonemeLeft, final Phoneme phonemeRight) {\n+        \tthis.phonemeText = new StringBuilder(phonemeLeft.phonemeText);\n+        \tthis.phonemeText.append(phonemeRight.phonemeText);\n+        \tthis.languages = phonemeLeft.languages;\n+        }\n+\n+        public void append(final CharSequence str) {\n+        \tthis.phonemeText.append(str);\n         }\n \n         public Languages.LanguageSet getLanguages() {\n--- a/src/test/java/org/apache/commons/codec/language/bm/PhoneticEnginePerformanceTest.java\n+++ b/src/test/java/org/apache/commons/codec/language/bm/PhoneticEnginePerformanceTest.java\n  * <p>\n  * Patch not applied.\n  * </p>\n+ * <p>\n+ * On this file's revision 1539787, with patch <a\n+ * href=\"https://issues.apache.org/jira/secure/attachment/12612178/CODEC-174-reuse-set-in-PhonemeBuilder.patch\"\n+ * >CODEC-174-reuse-set-in-PhonemeBuilder.patch</a>:\n+ * </p>\n+ * <ol>\n+ * <li>Time for encoding 80,000 times the input 'Angelo': 13,724 millis.</li>\n+ * <li>Time for encoding 80,000 times the input 'Angelo': 13,451 millis.</li>\n+ * <li>Time for encoding 80,000 times the input 'Angelo': 13,742 millis.</li>\n+ * <li>Time for encoding 80,000 times the input 'Angelo': 13,186 millis.</li>\n+ * <li>Time for encoding 80,000 times the input 'Angelo': 13,600 millis.</li>\n+ * <li>Time for encoding 80,000 times the input 'Angelo': 16,405 millis.</li>\n+ * </ol>\n+ * <p>\n+ * \n+ * </p>\n  */\n public class PhoneticEnginePerformanceTest {\n \n--- a/src/test/java/org/apache/commons/codec/language/bm/RuleTest.java\n+++ b/src/test/java/org/apache/commons/codec/language/bm/RuleTest.java\n         assertEquals('k', jkl.getPhonemeText().charAt(1));\n         assertEquals('l', jkl.getPhonemeText().charAt(2));\n \n-        final Rule.Phoneme a_b = a.append(b.getPhonemeText());\n+        final Rule.Phoneme a_b = new Rule.Phoneme(a, b);\n         assertEquals('a', a_b.getPhonemeText().charAt(0));\n         assertEquals('b', a_b.getPhonemeText().charAt(1));\n         assertEquals(\"ab\", a_b.getPhonemeText().subSequence(0, 2).toString());\n         assertEquals(\"a\", a_b.getPhonemeText().subSequence(0, 1).toString());\n         assertEquals(\"b\", a_b.getPhonemeText().subSequence(1, 2).toString());\n \n-        final Rule.Phoneme cd_ef = cd.append(ef.getPhonemeText());\n+        final Rule.Phoneme cd_ef = new Rule.Phoneme(cd, ef);\n         assertEquals('c', cd_ef.getPhonemeText().charAt(0));\n         assertEquals('d', cd_ef.getPhonemeText().charAt(1));\n         assertEquals('e', cd_ef.getPhonemeText().charAt(2));\n         assertEquals(\"def\", cd_ef.getPhonemeText().subSequence(1, 4).toString());\n         assertEquals(\"cdef\", cd_ef.getPhonemeText().subSequence(0, 4).toString());\n \n-        final Rule.Phoneme a_b_cd = a.append(b.getPhonemeText()).append(cd.getPhonemeText());\n+        final Rule.Phoneme a_b_cd = new Rule.Phoneme(new Rule.Phoneme(a, b), cd);\n         assertEquals('a', a_b_cd.getPhonemeText().charAt(0));\n         assertEquals('b', a_b_cd.getPhonemeText().charAt(1));\n         assertEquals('c', a_b_cd.getPhonemeText().charAt(2));", "timestamp": 1383855083, "metainfo": ""}