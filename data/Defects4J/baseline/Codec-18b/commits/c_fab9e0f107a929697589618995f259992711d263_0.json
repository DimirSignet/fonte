{"sha": "fab9e0f107a929697589618995f259992711d263", "log": "Fix some comments and get to 100% line coverage. Branch coverage is still 91%.  ", "commit": "\n--- a/src/test/org/apache/commons/codec/binary/Base64Test.java\n+++ b/src/test/org/apache/commons/codec/binary/Base64Test.java\n  */\n public class Base64Test extends TestCase {\n \n+    private Random _random = new Random();\n+\n     /**\n      * Construct a new instance of this test case.\n      * \n      */\n     public Base64Test(String name) {\n         super(name);\n+    }\n+\n+    /**\n+     * @return Returns the _random.\n+     */\n+    public Random getRandom() {\n+        return this._random;\n     }\n \n     /**\n         String encodedContent;\n         encodedContent = new String(Base64.encodeBase64(content.getBytes()));\n         assertTrue(\"encoding hello world\", encodedContent.equals(\"SGVsbG8gV29ybGQ=\"));\n+    }\n+\n+    /**\n+     * Tests Base64.encodeBase64().\n+     * \n+     * @throws Exception\n+     */\n+    public void testChunkedEncodeMultipleOf76() throws Exception {\n+        byte[] expectedEncode = Base64.encodeBase64(Base64TestData.DECODED, true);\n+        // convert to \"\\r\\n\" so we're equal to the old openssl encoding test stored\n+        // in Base64TestData.ENCODED_76_CHARS_PER_LINE:\n+        String actualResult = Base64TestData.ENCODED_76_CHARS_PER_LINE.replaceAll(\"\\n\", \"\\r\\n\");\n+        byte[] actualEncode = actualResult.getBytes(\"UTF-8\");\n+        assertTrue(\"chunkedEncodeMultipleOf76\", Arrays.equals(expectedEncode, actualEncode));\n+    }\n+\n+    /**\n+     * CODEC-68: isBase64 throws ArrayIndexOutOfBoundsException on some non-BASE64 bytes\n+     */\n+    public void testCodec68() {\n+        byte[] x = new byte[]{'n', 'A', '=', '=', (byte) 0x9c};\n+        Base64.decodeBase64(x);\n+    }\n+\n+    public void testCodeInteger1() {\n+        String encodedInt1 = \"li7dzDacuo67Jg7mtqEm2TRuOMU=\";\n+        BigInteger bigInt1 = new BigInteger(\"85739377120809420210425962799\" + \"0318636601332086981\");\n+\n+        assertEquals(encodedInt1, new String(Base64.encodeInteger(bigInt1)));\n+        assertEquals(bigInt1, Base64.decodeInteger(encodedInt1.getBytes()));\n+    }\n+\n+    public void testCodeInteger2() {\n+        String encodedInt2 = \"9B5ypLY9pMOmtxCeTDHgwdNFeGs=\";\n+        BigInteger bigInt2 = new BigInteger(\"13936727572861167254666467268\" + \"91466679477132949611\");\n+\n+        assertEquals(encodedInt2, new String(Base64.encodeInteger(bigInt2)));\n+        assertEquals(bigInt2, Base64.decodeInteger(encodedInt2.getBytes()));\n+    }\n+\n+    public void testCodeInteger3() {\n+        String encodedInt3 = \"FKIhdgaG5LGKiEtF1vHy4f3y700zaD6QwDS3IrNVGzNp2\" + \"rY+1LFWTK6D44AyiC1n8uWz1itkYMZF0/aKDK0Yjg==\";\n+        BigInteger bigInt3 = new BigInteger(\"10806548154093873461951748545\"\n+            + \"1196989136416448805819079363524309897749044958112417136240557\"\n+            + \"4495062430572478766856090958495998158114332651671116876320938126\");\n+\n+        assertEquals(encodedInt3, new String(Base64.encodeInteger(bigInt3)));\n+        assertEquals(bigInt3, Base64.decodeInteger(encodedInt3.getBytes()));\n+    }\n+\n+    public void testCodeInteger4() {\n+        String encodedInt4 = \"ctA8YGxrtngg/zKVvqEOefnwmViFztcnPBYPlJsvh6yKI\"\n+            + \"4iDm68fnp4Mi3RrJ6bZAygFrUIQLxLjV+OJtgJAEto0xAs+Mehuq1DkSFEpP3o\"\n+            + \"DzCTOsrOiS1DwQe4oIb7zVk/9l7aPtJMHW0LVlMdwZNFNNJoqMcT2ZfCPrfvYv\"\n+            + \"Q0=\";\n+        BigInteger bigInt4 = new BigInteger(\"80624726256040348115552042320\"\n+            + \"6968135001872753709424419772586693950232350200555646471175944\"\n+            + \"519297087885987040810778908507262272892702303774422853675597\"\n+            + \"748008534040890923814202286633163248086055216976551456088015\"\n+            + \"338880713818192088877057717530169381044092839402438015097654\"\n+            + \"53542091716518238707344493641683483917\");\n+\n+        assertEquals(encodedInt4, new String(Base64.encodeInteger(bigInt4)));\n+        assertEquals(bigInt4, Base64.decodeInteger(encodedInt4.getBytes()));\n+    }\n+\n+    public void testCodeIntegerEdgeCases() {\n+        // TODO\n+    }\n+\n+    public void testCodeIntegerNull() {\n+        try {\n+            Base64.encodeInteger(null);\n+            fail(\"Exception not thrown when passing in null to encodeInteger(BigInteger)\");\n+        } catch (NullPointerException npe) {\n+            // expected\n+        } catch (Exception e) {\n+            fail(\"Incorrect Exception caught when passing in null to encodeInteger(BigInteger)\");\n+        }\n+    }\n+\n+    public void testConstructors() {\n+        Base64 base64;\n+        base64 = new Base64();\n+        base64 = new Base64(-1);\n+        base64 = new Base64(-1, new byte[]{});\n+        base64 = new Base64(64, new byte[]{});\n+        try {\n+            base64 = new Base64(-1, new byte[]{'A'});\n+            fail(\"Should have rejected attempt to use 'A' as a line separator\");\n+        } catch (IllegalArgumentException ignored) {\n+            // Expected\n+        }\n+        try {\n+            base64 = new Base64(64, new byte[]{'A'});\n+            fail(\"Should have rejected attempt to use 'A' as a line separator\");\n+        } catch (IllegalArgumentException ignored) {\n+            // Expected\n+        }\n+        try {\n+            base64 = new Base64(64, new byte[]{'='});\n+            fail(\"Should have rejected attempt to use '=' as a line separator\");\n+        } catch (IllegalArgumentException ignored) {\n+            // Expected\n+        }\n+        base64 = new Base64(64, new byte[]{'$'}); // OK\n+        try {\n+            base64 = new Base64(64, new byte[]{'A', '$'});\n+            fail(\"Should have rejected attempt to use 'A$' as a line separator\");\n+        } catch (IllegalArgumentException ignored) {\n+            // Expected\n+        }\n+        base64 = new Base64(64, new byte[]{' ', '$', '\\n', '\\r', '\\t'}); // OK\n     }\n \n     /**\n         assertTrue(Base64.decodeBase64(\"==\\n\".getBytes()).length == 0);\n         assertTrue(Base64.decodeBase64(\"=\\n\".getBytes()).length == 0);\n         assertTrue(Base64.decodeBase64(\"\\n\".getBytes()).length == 0);\n+    }\n+\n+    public void testDecodeWithWhitespace() throws Exception {\n+\n+        String orig = \"I am a late night coder.\";\n+\n+        byte[] encodedArray = Base64.encodeBase64(orig.getBytes());\n+        StringBuffer intermediate = new StringBuffer(new String(encodedArray));\n+\n+        intermediate.insert(2, ' ');\n+        intermediate.insert(5, '\\t');\n+        intermediate.insert(10, '\\r');\n+        intermediate.insert(15, '\\n');\n+\n+        byte[] encodedWithWS = intermediate.toString().getBytes();\n+        byte[] decodedWithWS = Base64.decodeBase64(encodedWithWS);\n+\n+        String dest = new String(decodedWithWS);\n+\n+        assertTrue(\"Dest string doesn't equal the original\", dest.equals(orig));\n+    }\n+\n+    public void testDiscardWhitespace() throws Exception {\n+\n+        String orig = \"I am a late night coder.\";\n+\n+        byte[] encodedArray = Base64.encodeBase64(orig.getBytes());\n+        StringBuffer intermediate = new StringBuffer(new String(encodedArray));\n+\n+        intermediate.insert(2, ' ');\n+        intermediate.insert(5, '\\t');\n+        intermediate.insert(10, '\\r');\n+        intermediate.insert(15, '\\n');\n+\n+        byte[] encodedWithWS = intermediate.toString().getBytes();\n+        byte[] encodedNoWS = Base64.discardWhitespace(encodedWithWS);\n+        byte[] decodedWithWS = Base64.decodeBase64(encodedWithWS);\n+        byte[] decodedNoWS = Base64.decodeBase64(encodedNoWS);\n+\n+        String destFromWS = new String(decodedWithWS);\n+        String destFromNoWS = new String(decodedNoWS);\n+\n+        assertTrue(\"Dest string doesn't equal original\", destFromWS.equals(orig));\n+        assertTrue(\"Dest string doesn't equal original\", destFromNoWS.equals(orig));\n+    }\n+\n+    /**\n+     * Test encode and decode of empty byte array.\n+     */\n+    public void testEmptyBase64() {\n+        byte[] empty = new byte[0];\n+        byte[] result = Base64.encodeBase64(empty);\n+        assertEquals(\"empty base64 encode\", 0, result.length);\n+        assertEquals(\"empty base64 encode\", null, Base64.encodeBase64(null));\n+\n+        empty = new byte[0];\n+        result = Base64.decodeBase64(empty);\n+        assertEquals(\"empty base64 decode\", 0, result.length);\n+        assertEquals(\"empty base64 encode\", null, Base64.decodeBase64(null));\n+    }\n+\n+    // encode/decode a large random array\n+    public void testEncodeDecodeRandom() {\n+        for (int i = 1; i < 5; i++) {\n+            byte[] data = new byte[this.getRandom().nextInt(10000) + 1];\n+            this.getRandom().nextBytes(data);\n+            byte[] enc = Base64.encodeBase64(data);\n+            assertTrue(Base64.isArrayByteBase64(enc));\n+            byte[] data2 = Base64.decodeBase64(enc);\n+            assertTrue(Arrays.equals(data, data2));\n+        }\n     }\n \n     // encode/decode random arrays from size 0 to size 11\n         }\n     }\n \n-    // encode/decode a large random array\n-    public void testEncodeDecodeRandom() {\n-        for (int i = 1; i < 5; i++) {\n-            byte[] data = new byte[this.getRandom().nextInt(10000) + 1];\n-            this.getRandom().nextBytes(data);\n-            byte[] enc = Base64.encodeBase64(data);\n-            assertTrue(Base64.isArrayByteBase64(enc));\n-            byte[] data2 = Base64.decodeBase64(enc);\n-            assertTrue(Arrays.equals(data, data2));\n+    public void testEncodeOverMaxSize() throws Exception {\n+        testEncodeOverMaxSize(-1);\n+        testEncodeOverMaxSize(0);\n+        testEncodeOverMaxSize(1);\n+        testEncodeOverMaxSize(2);\n+    }\n+\n+    private void testEncodeOverMaxSize(int maxSize) throws Exception {\n+        try {\n+            Base64.encodeBase64(Base64TestData.DECODED, true, false, maxSize);\n+            fail(\"Expected \" + IllegalArgumentException.class.getName());\n+        } catch (IllegalArgumentException e) {\n+            // Expceted\n+        }\n+    }\n+\n+    public void testIgnoringNonBase64InDecode() throws Exception {\n+        assertEquals(\"The quick brown fox jumped over the lazy dogs.\", new String(Base64\n+                .decodeBase64(\"VGhlIH@$#$@%F1aWN@#@#@@rIGJyb3duIGZve\\n\\r\\t%#%#%#%CBqd##$#$W1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\".getBytes())));\n+    }\n+\n+    public void testIsArrayByteBase64() {\n+        assertFalse(Base64.isArrayByteBase64(new byte[]{Byte.MIN_VALUE}));\n+        assertFalse(Base64.isArrayByteBase64(new byte[]{-125}));\n+        assertFalse(Base64.isArrayByteBase64(new byte[]{-10}));\n+        assertFalse(Base64.isArrayByteBase64(new byte[]{0}));\n+        assertFalse(Base64.isArrayByteBase64(new byte[]{64, Byte.MAX_VALUE}));\n+        assertFalse(Base64.isArrayByteBase64(new byte[]{Byte.MAX_VALUE}));\n+        assertTrue(Base64.isArrayByteBase64(new byte[]{'A'}));\n+        assertFalse(Base64.isArrayByteBase64(new byte[]{'A', Byte.MIN_VALUE}));\n+        assertTrue(Base64.isArrayByteBase64(new byte[]{'A', 'Z', 'a'}));\n+        assertTrue(Base64.isArrayByteBase64(new byte[]{'/', '=', '+'}));\n+        assertFalse(Base64.isArrayByteBase64(new byte[]{'$'}));\n+    }\n+\n+    /**\n+     * Tests isUrlSafe.\n+     */\n+    public void testIsUrlSafe() {\n+        Base64 base64Standard = new Base64(false);\n+        Base64 base64URLSafe = new Base64(true);\n+\n+        assertFalse(\"Base64.isUrlSafe=false\", base64Standard.isUrlSafe());\n+        assertTrue(\"Base64.isUrlSafe=true\", base64URLSafe.isUrlSafe());\n+\n+        byte[] whiteSpace = {' ', '\\n', '\\r', '\\t'};\n+        assertTrue(\"Base64.isArrayByteBase64(whiteSpace)=true\", Base64.isArrayByteBase64(whiteSpace));\n+    }\n+\n+    public void testKnownDecodings() {\n+        assertEquals(\"The quick brown fox jumped over the lazy dogs.\", new String(Base64\n+                .decodeBase64(\"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\".getBytes())));\n+        assertEquals(\"It was the best of times, it was the worst of times.\", new String(Base64\n+                .decodeBase64(\"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==\".getBytes())));\n+        assertEquals(\"http://jakarta.apache.org/commmons\", new String(Base64\n+                .decodeBase64(\"aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==\".getBytes())));\n+        assertEquals(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\", new String(Base64\n+                .decodeBase64(\"QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==\".getBytes())));\n+        assertEquals(\"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\", new String(Base64.decodeBase64(\"eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0=\"\n+                .getBytes())));\n+        assertEquals(\"xyzzy!\", new String(Base64.decodeBase64(\"eHl6enkh\".getBytes())));\n+    }\n+\n+    public void testKnownEncodings() {\n+        assertEquals(\"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\", new String(Base64\n+                .encodeBase64(\"The quick brown fox jumped over the lazy dogs.\".getBytes())));\n+        assertEquals(\n+                \"YmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJs\\r\\nYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFo\\r\\nIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBi\\r\\nbGFoIGJsYWg=\\r\\n\",\n+                new String(\n+                        Base64\n+                                .encodeBase64Chunked(\"blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah\"\n+                                        .getBytes())));\n+        assertEquals(\"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==\", new String(Base64\n+                .encodeBase64(\"It was the best of times, it was the worst of times.\".getBytes())));\n+        assertEquals(\"aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==\", new String(Base64\n+                .encodeBase64(\"http://jakarta.apache.org/commmons\".getBytes())));\n+        assertEquals(\"QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==\", new String(Base64\n+                .encodeBase64(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\".getBytes())));\n+        assertEquals(\"eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0=\", new String(Base64.encodeBase64(\"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\"\n+                .getBytes())));\n+        assertEquals(\"eHl6enkh\", new String(Base64.encodeBase64(\"xyzzy!\".getBytes())));\n+    }\n+\n+    public void testNonBase64Test() throws Exception {\n+\n+        byte[] bArray = {'%'};\n+\n+        assertFalse(\"Invalid Base64 array was incorrectly validated as \" + \"an array of Base64 encoded data\", Base64\n+                .isArrayByteBase64(bArray));\n+\n+        try {\n+            Base64 b64 = new Base64();\n+            byte[] result = b64.decode(bArray);\n+\n+            assertTrue(\"The result should be empty as the test encoded content did \" + \"not contain any valid base 64 characters\",\n+                    result.length == 0);\n+        } catch (Exception e) {\n+            fail(\"Exception was thrown when trying to decode \"\n+                + \"invalid base64 encoded data - RFC 2045 requires that all \"\n+                + \"non base64 character be discarded, an exception should not\"\n+                + \" have been thrown\");\n+        }\n+    }\n+\n+    public void testObjectDecodeWithInvalidParameter() throws Exception {\n+        Base64 b64 = new Base64();\n+\n+        try {\n+            b64.decode(\"Yadayadayada\");\n+            fail(\"decode(Object) didn't throw an exception when passed a String object\");\n+        } catch (DecoderException e) {\n+            // ignored\n+        }\n+\n+    }\n+\n+    public void testObjectDecodeWithValidParameter() throws Exception {\n+\n+        String original = \"Hello World!\";\n+        byte[] bArray = Base64.encodeBase64(original.getBytes());\n+        Object o = bArray;\n+\n+        Base64 b64 = new Base64();\n+        Object oDecoded = b64.decode(o);\n+        byte[] baDecoded = (byte[]) oDecoded;\n+        String dest = new String(baDecoded);\n+\n+        assertTrue(\"dest string does not equal original\", dest.equals(original));\n+    }\n+\n+    public void testObjectEncodeWithInvalidParameter() throws Exception {\n+        Base64 b64 = new Base64();\n+        try {\n+            b64.encode(\"Yadayadayada\");\n+            fail(\"encode(Object) didn't throw an exception when passed a String object\");\n+        } catch (EncoderException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void testObjectEncodeWithValidParameter() throws Exception {\n+\n+        String original = \"Hello World!\";\n+        byte[] origBytes = original.getBytes();\n+        Object origObj = origBytes;\n+\n+        Base64 b64 = new Base64();\n+        Object oEncoded = b64.encode(origObj);\n+        byte[] bArray = Base64.decodeBase64((byte[]) oEncoded);\n+        String dest = new String(bArray);\n+\n+        assertTrue(\"dest string does not equal original\", dest.equals(original));\n+    }\n+\n+    public void testPairs() {\n+        assertEquals(\"AAA=\", new String(Base64.encodeBase64(new byte[]{0, 0})));\n+        for (int i = -128; i <= 127; i++) {\n+            byte test[] = {(byte) i, (byte) i};\n+            assertTrue(Arrays.equals(test, Base64.decodeBase64(Base64.encodeBase64(test))));\n         }\n     }\n \n         assertEquals(\"aA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 104})));\n     }\n \n-    public void testPairs() {\n-        assertEquals(\"AAA=\", new String(Base64.encodeBase64(new byte[]{0, 0})));\n-        for (int i = -128; i <= 127; i++) {\n-            byte test[] = {(byte) i, (byte) i};\n-            assertTrue(Arrays.equals(test, Base64.decodeBase64(Base64.encodeBase64(test))));\n-        }\n-    }\n-\n     public void testTriplets() {\n         assertEquals(\"AAAA\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 0})));\n         assertEquals(\"AAAB\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 1})));\n         assertEquals(\"AAA/\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 63})));\n     }\n \n-    public void testKnownEncodings() {\n-        assertEquals(\"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\", new String(Base64\n-                .encodeBase64(\"The quick brown fox jumped over the lazy dogs.\".getBytes())));\n-        assertEquals(\n-                \"YmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJs\\r\\nYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFo\\r\\nIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBi\\r\\nbGFoIGJsYWg=\\r\\n\",\n-                new String(\n-                        Base64\n-                                .encodeBase64Chunked(\"blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah\"\n-                                        .getBytes())));\n-        assertEquals(\"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==\", new String(Base64\n-                .encodeBase64(\"It was the best of times, it was the worst of times.\".getBytes())));\n-        assertEquals(\"aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==\", new String(Base64\n-                .encodeBase64(\"http://jakarta.apache.org/commmons\".getBytes())));\n-        assertEquals(\"QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==\", new String(Base64\n-                .encodeBase64(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\".getBytes())));\n-        assertEquals(\"eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0=\", new String(Base64.encodeBase64(\"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\"\n-                .getBytes())));\n-        assertEquals(\"eHl6enkh\", new String(Base64.encodeBase64(\"xyzzy!\".getBytes())));\n-    }\n-\n-    public void testKnownDecodings() {\n-        assertEquals(\"The quick brown fox jumped over the lazy dogs.\", new String(Base64\n-                .decodeBase64(\"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\".getBytes())));\n-        assertEquals(\"It was the best of times, it was the worst of times.\", new String(Base64\n-                .decodeBase64(\"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==\".getBytes())));\n-        assertEquals(\"http://jakarta.apache.org/commmons\", new String(Base64\n-                .decodeBase64(\"aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==\".getBytes())));\n-        assertEquals(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\", new String(Base64\n-                .decodeBase64(\"QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==\".getBytes())));\n-        assertEquals(\"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\", new String(Base64.decodeBase64(\"eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0=\"\n-                .getBytes())));\n-        assertEquals(\"xyzzy!\", new String(Base64.decodeBase64(\"eHl6enkh\".getBytes())));\n-    }\n-\n-    public void testNonBase64Test() throws Exception {\n-\n-        byte[] bArray = {'%'};\n-\n-        assertFalse(\"Invalid Base64 array was incorrectly validated as \" + \"an array of Base64 encoded data\", Base64\n-                .isArrayByteBase64(bArray));\n-\n-        try {\n-            Base64 b64 = new Base64();\n-            byte[] result = b64.decode(bArray);\n-\n-            assertTrue(\"The result should be empty as the test encoded content did \" + \"not contain any valid base 64 characters\",\n-                    result.length == 0);\n-        } catch (Exception e) {\n-            fail(\"Exception was thrown when trying to decode \"\n-                + \"invalid base64 encoded data - RFC 2045 requires that all \"\n-                + \"non base64 character be discarded, an exception should not\"\n-                + \" have been thrown\");\n-        }\n-    }\n-\n-    public void testIgnoringNonBase64InDecode() throws Exception {\n-        assertEquals(\"The quick brown fox jumped over the lazy dogs.\", new String(Base64\n-                .decodeBase64(\"VGhlIH@$#$@%F1aWN@#@#@@rIGJyb3duIGZve\\n\\r\\t%#%#%#%CBqd##$#$W1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\".getBytes())));\n-    }\n-\n-    public void testIsArrayByteBase64() {\n-        assertFalse(Base64.isArrayByteBase64(new byte[]{Byte.MIN_VALUE}));\n-        assertFalse(Base64.isArrayByteBase64(new byte[]{-125}));\n-        assertFalse(Base64.isArrayByteBase64(new byte[]{-10}));\n-        assertFalse(Base64.isArrayByteBase64(new byte[]{0}));\n-        assertFalse(Base64.isArrayByteBase64(new byte[]{64, Byte.MAX_VALUE}));\n-        assertFalse(Base64.isArrayByteBase64(new byte[]{Byte.MAX_VALUE}));\n-        assertTrue(Base64.isArrayByteBase64(new byte[]{'A'}));\n-        assertFalse(Base64.isArrayByteBase64(new byte[]{'A', Byte.MIN_VALUE}));\n-        assertTrue(Base64.isArrayByteBase64(new byte[]{'A', 'Z', 'a'}));\n-        assertTrue(Base64.isArrayByteBase64(new byte[]{'/', '=', '+'}));\n-        assertFalse(Base64.isArrayByteBase64(new byte[]{'$'}));\n-    }\n-\n-    public void testObjectDecodeWithInvalidParameter() throws Exception {\n-        Base64 b64 = new Base64();\n-\n-        try {\n-            b64.decode(\"Yadayadayada\");\n-            fail(\"decode(Object) didn't throw an exception when passed a String object\");\n-        } catch (DecoderException e) {\n-            // ignored\n-        }\n-\n-    }\n-\n-    public void testObjectDecodeWithValidParameter() throws Exception {\n-\n-        String original = \"Hello World!\";\n-        byte[] bArray = Base64.encodeBase64(original.getBytes());\n-        Object o = bArray;\n-\n-        Base64 b64 = new Base64();\n-        Object oDecoded = b64.decode(o);\n-        byte[] baDecoded = (byte[]) oDecoded;\n-        String dest = new String(baDecoded);\n-\n-        assertTrue(\"dest string does not equal original\", dest.equals(original));\n-    }\n-\n-    public void testObjectEncodeWithInvalidParameter() throws Exception {\n-        Base64 b64 = new Base64();\n-        try {\n-            b64.encode(\"Yadayadayada\");\n-            fail(\"encode(Object) didn't throw an exception when passed a String object\");\n-        } catch (EncoderException e) {\n-            // Expected\n-        }\n-    }\n-\n-    public void testObjectEncodeWithValidParameter() throws Exception {\n-\n-        String original = \"Hello World!\";\n-        byte[] origBytes = original.getBytes();\n-        Object origObj = origBytes;\n-\n-        Base64 b64 = new Base64();\n-        Object oEncoded = b64.encode(origObj);\n-        byte[] bArray = Base64.decodeBase64((byte[]) oEncoded);\n-        String dest = new String(bArray);\n-\n-        assertTrue(\"dest string does not equal original\", dest.equals(original));\n-    }\n-\n-    public void testDecodeWithWhitespace() throws Exception {\n-\n-        String orig = \"I am a late night coder.\";\n-\n-        byte[] encodedArray = Base64.encodeBase64(orig.getBytes());\n-        StringBuffer intermediate = new StringBuffer(new String(encodedArray));\n-\n-        intermediate.insert(2, ' ');\n-        intermediate.insert(5, '\\t');\n-        intermediate.insert(10, '\\r');\n-        intermediate.insert(15, '\\n');\n-\n-        byte[] encodedWithWS = intermediate.toString().getBytes();\n-        byte[] decodedWithWS = Base64.decodeBase64(encodedWithWS);\n-\n-        String dest = new String(decodedWithWS);\n-\n-        assertTrue(\"Dest string doesn't equal the original\", dest.equals(orig));\n-    }\n-\n-    public void testDiscardWhitespace() throws Exception {\n-\n-        String orig = \"I am a late night coder.\";\n-\n-        byte[] encodedArray = Base64.encodeBase64(orig.getBytes());\n-        StringBuffer intermediate = new StringBuffer(new String(encodedArray));\n-\n-        intermediate.insert(2, ' ');\n-        intermediate.insert(5, '\\t');\n-        intermediate.insert(10, '\\r');\n-        intermediate.insert(15, '\\n');\n-\n-        byte[] encodedWithWS = intermediate.toString().getBytes();\n-        byte[] encodedNoWS = Base64.discardWhitespace(encodedWithWS);\n-        byte[] decodedWithWS = Base64.decodeBase64(encodedWithWS);\n-        byte[] decodedNoWS = Base64.decodeBase64(encodedNoWS);\n-\n-        String destFromWS = new String(decodedWithWS);\n-        String destFromNoWS = new String(decodedNoWS);\n-\n-        assertTrue(\"Dest string doesn't equal original\", destFromWS.equals(orig));\n-        assertTrue(\"Dest string doesn't equal original\", destFromNoWS.equals(orig));\n-    }\n-\n-    public void testCodeInteger1() {\n-        String encodedInt1 = \"li7dzDacuo67Jg7mtqEm2TRuOMU=\";\n-        BigInteger bigInt1 = new BigInteger(\"85739377120809420210425962799\" + \"0318636601332086981\");\n-\n-        assertEquals(encodedInt1, new String(Base64.encodeInteger(bigInt1)));\n-        assertEquals(bigInt1, Base64.decodeInteger(encodedInt1.getBytes()));\n-    }\n-\n-    public void testCodeInteger2() {\n-        String encodedInt2 = \"9B5ypLY9pMOmtxCeTDHgwdNFeGs=\";\n-        BigInteger bigInt2 = new BigInteger(\"13936727572861167254666467268\" + \"91466679477132949611\");\n-\n-        assertEquals(encodedInt2, new String(Base64.encodeInteger(bigInt2)));\n-        assertEquals(bigInt2, Base64.decodeInteger(encodedInt2.getBytes()));\n-    }\n-\n-    public void testCodeInteger3() {\n-        String encodedInt3 = \"FKIhdgaG5LGKiEtF1vHy4f3y700zaD6QwDS3IrNVGzNp2\" + \"rY+1LFWTK6D44AyiC1n8uWz1itkYMZF0/aKDK0Yjg==\";\n-        BigInteger bigInt3 = new BigInteger(\"10806548154093873461951748545\"\n-            + \"1196989136416448805819079363524309897749044958112417136240557\"\n-            + \"4495062430572478766856090958495998158114332651671116876320938126\");\n-\n-        assertEquals(encodedInt3, new String(Base64.encodeInteger(bigInt3)));\n-        assertEquals(bigInt3, Base64.decodeInteger(encodedInt3.getBytes()));\n-    }\n-\n-    public void testCodeInteger4() {\n-        String encodedInt4 = \"ctA8YGxrtngg/zKVvqEOefnwmViFztcnPBYPlJsvh6yKI\"\n-            + \"4iDm68fnp4Mi3RrJ6bZAygFrUIQLxLjV+OJtgJAEto0xAs+Mehuq1DkSFEpP3o\"\n-            + \"DzCTOsrOiS1DwQe4oIb7zVk/9l7aPtJMHW0LVlMdwZNFNNJoqMcT2ZfCPrfvYv\"\n-            + \"Q0=\";\n-        BigInteger bigInt4 = new BigInteger(\"80624726256040348115552042320\"\n-            + \"6968135001872753709424419772586693950232350200555646471175944\"\n-            + \"519297087885987040810778908507262272892702303774422853675597\"\n-            + \"748008534040890923814202286633163248086055216976551456088015\"\n-            + \"338880713818192088877057717530169381044092839402438015097654\"\n-            + \"53542091716518238707344493641683483917\");\n-\n-        assertEquals(encodedInt4, new String(Base64.encodeInteger(bigInt4)));\n-        assertEquals(bigInt4, Base64.decodeInteger(encodedInt4.getBytes()));\n-    }\n-\n-    public void testCodeIntegerNull() {\n-        try {\n-            Base64.encodeInteger(null);\n-            fail(\"Exception not thrown when passing in null to encodeInteger(BigInteger)\");\n-        } catch (NullPointerException npe) {\n-            // expected\n-        } catch (Exception e) {\n-            fail(\"Incorrect Exception caught when passing in null to encodeInteger(BigInteger)\");\n-        }\n-    }\n-\n-    public void testCodeIntegerEdgeCases() {\n-        // TODO\n-    }\n-\n-    public void testConstructors() {\n-        Base64 base64;\n-        base64 = new Base64();\n-        base64 = new Base64(-1);\n-        base64 = new Base64(-1, new byte[]{});\n-        base64 = new Base64(64, new byte[]{});\n-        try {\n-            base64 = new Base64(-1, new byte[]{'A'});\n-            fail(\"Should have rejected attempt to use 'A' as a line separator\");\n-        } catch (IllegalArgumentException ignored) {\n-            // Expected\n-        }\n-        try {\n-            base64 = new Base64(64, new byte[]{'A'});\n-            fail(\"Should have rejected attempt to use 'A' as a line separator\");\n-        } catch (IllegalArgumentException ignored) {\n-            // Expected\n-        }\n-        try {\n-            base64 = new Base64(64, new byte[]{'='});\n-            fail(\"Should have rejected attempt to use '=' as a line separator\");\n-        } catch (IllegalArgumentException ignored) {\n-            // Expected\n-        }\n-        base64 = new Base64(64, new byte[]{'$'}); // OK\n-        try {\n-            base64 = new Base64(64, new byte[]{'A', '$'});\n-            fail(\"Should have rejected attempt to use 'A$' as a line separator\");\n-        } catch (IllegalArgumentException ignored) {\n-            // Expected\n-        }\n-        base64 = new Base64(64, new byte[]{' ', '$', '\\n', '\\r', '\\t'}); // OK\n+    /**\n+     * Tests url-safe Base64 against random data, sizes 0 to 150.\n+     */\n+    public void testUrlSafe() {\n+        // test random data of sizes 0 thru 150\n+        for (int i = 0; i <= 150; i++) {\n+            byte[][] randomData = Base64TestData.randomData(i, true);\n+            byte[] encoded = randomData[1];\n+            byte[] decoded = randomData[0];\n+            byte[] result = Base64.decodeBase64(encoded);\n+            assertTrue(\"url-safe i=\" + i, Arrays.equals(decoded, result));\n+            assertFalse(\"url-safe i=\" + i + \" no '='\", Base64TestData.bytesContain(encoded, (byte) '='));\n+            assertFalse(\"url-safe i=\" + i + \" no '\\\\'\", Base64TestData.bytesContain(encoded, (byte) '\\\\'));\n+            assertFalse(\"url-safe i=\" + i + \" no '+'\", Base64TestData.bytesContain(encoded, (byte) '+'));\n+        }\n+\n     }\n \n     /**\n         }\n     }\n \n-    /**\n-     * Tests url-safe Base64 against random data, sizes 0 to 150.\n-     */\n-    public void testUrlSafe() {\n-        // test random data of sizes 0 thru 150\n-        for (int i = 0; i <= 150; i++) {\n-            byte[][] randomData = Base64TestData.randomData(i, true);\n-            byte[] encoded = randomData[1];\n-            byte[] decoded = randomData[0];\n-            byte[] result = Base64.decodeBase64(encoded);\n-            assertTrue(\"url-safe i=\" + i, Arrays.equals(decoded, result));\n-            assertFalse(\"url-safe i=\" + i + \" no '='\", Base64TestData.bytesContain(encoded, (byte) '='));\n-            assertFalse(\"url-safe i=\" + i + \" no '\\\\'\", Base64TestData.bytesContain(encoded, (byte) '\\\\'));\n-            assertFalse(\"url-safe i=\" + i + \" no '+'\", Base64TestData.bytesContain(encoded, (byte) '+'));\n-        }\n-\n-    }\n-\n-    /**\n-     * Tests isUrlSafe.\n-     */\n-    public void testIsUrlSafe() {\n-        Base64 base64Standard = new Base64(false);\n-        Base64 base64URLSafe = new Base64(true);\n-\n-        assertFalse(\"Base64.isUrlSafe=false\", base64Standard.isUrlSafe());\n-        assertTrue(\"Base64.isUrlSafe=true\", base64URLSafe.isUrlSafe());\n-\n-        byte[] whiteSpace = {' ', '\\n', '\\r', '\\t'};\n-        assertTrue(\"Base64.isArrayByteBase64(whiteSpace)=true\", Base64.isArrayByteBase64(whiteSpace));\n-    }\n-\n-    /**\n-     * Test encode and decode of empty byte array.\n-     */\n-    public void testEmptyBase64() {\n-        byte[] empty = new byte[0];\n-        byte[] result = Base64.encodeBase64(empty);\n-        assertEquals(\"empty base64 encode\", 0, result.length);\n-        assertEquals(\"empty base64 encode\", null, Base64.encodeBase64(null));\n-\n-        empty = new byte[0];\n-        result = Base64.decodeBase64(empty);\n-        assertEquals(\"empty base64 decode\", 0, result.length);\n-        assertEquals(\"empty base64 encode\", null, Base64.decodeBase64(null));\n-    }\n-\n-    /**\n-     * Tests Base64.encodeToString() and Base64.decodeFromString() methods.\n-     * \n-     * @throws Exception\n-     */\n-    public void testChunkedEncodeMultipleOf76() throws Exception {\n-        byte[] expectedEncode = Base64.encodeBase64(Base64TestData.DECODED, true);\n-        // convert to \"\\n\" so we're 100% equal to the old openssl encoding test stored\n-        // in Base64TestData.ENCODED_76_CHARS_PER_LINE:\n-        String actualResult = Base64TestData.ENCODED_76_CHARS_PER_LINE.replaceAll(\"\\n\", \"\\r\\n\");\n-        byte[] actualEncode = actualResult.getBytes(\"UTF-8\");\n-        assertTrue(\"chunkedEncodeMultipleOf76\", Arrays.equals(expectedEncode, actualEncode));\n-    }\n-\n-    // -------------------------------------------------------- Private Methods\n-\n     private String toString(byte[] data) {\n         StringBuffer buf = new StringBuffer();\n         for (int i = 0; i < data.length; i++) {\n         return buf.toString();\n     }\n \n-    // ------------------------------------------------------------------------\n-\n-    private Random _random = new Random();\n-\n-    /**\n-     * @return Returns the _random.\n-     */\n-    public Random getRandom() {\n-        return this._random;\n-    }\n-\n-    /**\n-     * CODEC-68: isBase64 throws ArrayIndexOutOfBoundsException on some non-BASE64 bytes\n-     */\n-    public void testCodec68() {\n-        byte[] x = new byte[]{'n', 'A', '=', '=', (byte) 0x9c};\n-        Base64.decodeBase64(x);\n-    }\n-\n }", "timestamp": 1248397383, "metainfo": ""}