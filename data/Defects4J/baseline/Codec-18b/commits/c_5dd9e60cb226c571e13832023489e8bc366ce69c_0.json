{"sha": "5dd9e60cb226c571e13832023489e8bc366ce69c", "log": "<action dev=\"ggregory\" type=\"fix\" issue=\"CODEC-187\" due-to=\"Michael Tobias, Thomas Neidhart\">Beider Morse Phonetic Matching producing incorrect tokens</action>  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java\n  * Down-stream applications may wish to further process the encoding for indexing or lookup purposes, for example, by\n  * splitting on pipe (<code>|</code>) and indexing under each of these alternatives.\n  *\n+ * @see <a href=\"http://stevemorse.org/phonetics/bmpm.htm\">Beider-Morse Phonetic Matching</a>\n+ * @see <a href=\"http://stevemorse.org/phoneticinfo.htm\">Reference implementation</a>\n  * @since 1.6\n  * @version $Id$\n  */\n--- a/src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java\n+++ b/src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java\n         // concat is true, ruleType is EXACT\n         args = new TreeMap<String, String>();\n         args.put(\"nameType\", \"GENERIC\");\n-        assertEquals(encode(args, true, \"Angelo\"), \"agilo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongilo|oniilo|onilo|onxilo|onzilo\");\n+        assertEquals(encode(args, true, \"Angelo\"), \"YngYlo|Yngilo|agilo|angYlo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongYlo|ongilo|oniilo|onilo|onxilo|onzilo\");\n         args.put(\"ruleType\", \"EXACT\");\n         assertEquals(encode(args, true, \"Angelo\"), \"anZelo|andZelo|angelo|anhelo|anjelo|anxelo\");\n         assertEquals(encode(args, true, \"D'Angelo\"), \"(anZelo|andZelo|angelo|anhelo|anjelo|anxelo)-(danZelo|dandZelo|dangelo|danhelo|danjelo|danxelo)\");\n \n         // concat is false, ruleType is EXACT\n         args = new TreeMap<String, String>();\n-        assertEquals(encode(args, false, \"Angelo\"), \"agilo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongilo|oniilo|onilo|onxilo|onzilo\");\n+        assertEquals(encode(args, false, \"Angelo\"), \"YngYlo|Yngilo|agilo|angYlo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongYlo|ongilo|oniilo|onilo|onxilo|onzilo\");\n         args.put(\"ruleType\", \"EXACT\");\n         assertEquals(encode(args, false, \"Angelo\"), \"anZelo|andZelo|angelo|anhelo|anjelo|anxelo\");\n         assertEquals(encode(args, false, \"D'Angelo\"), \"(anZelo|andZelo|angelo|anhelo|anjelo|anxelo)-(danZelo|dandZelo|dangelo|danhelo|danjelo|danxelo)\");\n \n         // concat is true, ruleType is APPROX\n         args = new TreeMap<String, String>();\n-        assertEquals(encode(args, true, \"Angelo\"), \"agilo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongilo|oniilo|onilo|onxilo|onzilo\");\n-        args.put(\"ruleType\", \"APPROX\");\n-        assertEquals(encode(args, true, \"Angelo\"), \"agilo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongilo|oniilo|onilo|onxilo|onzilo\");\n-        assertEquals(encode(args, true, \"D'Angelo\"), \"(agilo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongilo|oniilo|onilo|onxilo|onzilo)-(dagilo|dangilo|daniilo|danilo|danxilo|danzilo|dogilo|dongilo|doniilo|donilo|donxilo|donzilo)\");\n+        assertEquals(encode(args, true, \"Angelo\"), \"YngYlo|Yngilo|agilo|angYlo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongYlo|ongilo|oniilo|onilo|onxilo|onzilo\");\n+        args.put(\"ruleType\", \"APPROX\");\n+        assertEquals(encode(args, true, \"Angelo\"), \"YngYlo|Yngilo|agilo|angYlo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongYlo|ongilo|oniilo|onilo|onxilo|onzilo\");\n+        assertEquals(encode(args, true, \"D'Angelo\"), \"(YngYlo|Yngilo|agilo|angYlo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongYlo|ongilo|oniilo|onilo|onxilo|onzilo)-(dYngYlo|dYngilo|dagilo|dangYlo|dangilo|daniilo|danilo|danxilo|danzilo|dogilo|dongYlo|dongilo|doniilo|donilo|donxilo|donzilo)\");\n         args.put(\"languageSet\", \"italian,greek,spanish\");\n         assertEquals(encode(args, true, \"Angelo\"), \"angilo|anxilo|anzilo|ongilo|onxilo|onzilo\");\n         assertEquals(encode(args, true, \"1234\"), \"\");\n \n         // concat is false, ruleType is APPROX\n         args = new TreeMap<String, String>();\n-        assertEquals(encode(args, false, \"Angelo\"), \"agilo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongilo|oniilo|onilo|onxilo|onzilo\");\n-        args.put(\"ruleType\", \"APPROX\");\n-        assertEquals(encode(args, false, \"Angelo\"), \"agilo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongilo|oniilo|onilo|onxilo|onzilo\");\n-        assertEquals(encode(args, false, \"D'Angelo\"), \"(agilo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongilo|oniilo|onilo|onxilo|onzilo)-(dagilo|dangilo|daniilo|danilo|danxilo|danzilo|dogilo|dongilo|doniilo|donilo|donxilo|donzilo)\");\n+        assertEquals(encode(args, false, \"Angelo\"), \"YngYlo|Yngilo|agilo|angYlo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongYlo|ongilo|oniilo|onilo|onxilo|onzilo\");\n+        args.put(\"ruleType\", \"APPROX\");\n+        assertEquals(encode(args, false, \"Angelo\"), \"YngYlo|Yngilo|agilo|angYlo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongYlo|ongilo|oniilo|onilo|onxilo|onzilo\");\n+        assertEquals(encode(args, false, \"D'Angelo\"), \"(YngYlo|Yngilo|agilo|angYlo|angilo|aniilo|anilo|anxilo|anzilo|ogilo|ongYlo|ongilo|oniilo|onilo|onxilo|onzilo)-(dYngYlo|dYngilo|dagilo|dangYlo|dangilo|daniilo|danilo|danxilo|danzilo|dogilo|dongYlo|dongilo|doniilo|donilo|donxilo|donzilo)\");\n         args.put(\"languageSet\", \"italian,greek,spanish\");\n         assertEquals(encode(args, false, \"Angelo\"), \"angilo|anxilo|anzilo|ongilo|onxilo|onzilo\");\n         assertEquals(encode(args, false, \"1234\"), \"\");\n         args.put(\"languageSet\", \"italian,greek,spanish\");\n         assertEquals(encode(args, false, \"Angelo\"), \"anhila|anhilu|anzila|anzilu|nhila|nhilu|nzila|nzilu\");\n         assertEquals(encode(args, false, \"1234\"), \"\");\n+    }\n+\n+    @Test\n+    public void testCompatibilityWithOriginalVersion() {\n+        // see CODEC-187\n+        // comparison: http://stevemorse.org/census/soundex.html\n+\n+        Map<String, String> args = new TreeMap<String, String>();\n+        args.put(\"nameType\", \"GENERIC\");\n+        args.put(\"ruleType\", \"APPROX\");\n+        assertEquals(encode(args, true, \"abram\"), \"Ybram|Ybrom|abram|abran|abrom|abron|avram|avrom|obram|obran|obrom|obron|ovram|ovrom\");\n     }\n \n     /**", "timestamp": 1402526754, "metainfo": ""}