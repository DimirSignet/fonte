{"sha": "805103c2fd53bf2a82575699da9b4f38a59c17fe", "log": "[CODEC-63] Implement NYSIIS. Adding Encoder class and test both in the test directory until the encoder is fully baked. This should make it easier to patch further.  ", "commit": "\n--- a/src/test/java/org/apache/commons/codec/language/NysiisTest.java\n+++ b/src/test/java/org/apache/commons/codec/language/NysiisTest.java\n         for (int i = 0; i < strings.length; i++) {\n             Assert.assertEquals(\"Problem with \" + strings[i], expectedEncoding, getStringEncoder().encode(strings[i]));\n         }\n+    }\n+\n+    @Test\n+    public void testBran() throws EncoderException {\n+        encodeAll(new String[] { \"Brian\", \"Brown\", \"Brun\" }, \"BRAN\");\n+    }\n+\n+    @Test\n+    public void testCap() throws EncoderException {\n+        this.encodeAll(new String[] { \"Capp\", \"Cope\", \"Copp\", \"Kipp\" }, \"CAP\");\n+    }\n+\n+    @Test\n+    public void testDad() throws EncoderException {\n+        // Data Quality and Record Linkage Techniques P.121 claims this is DAN,\n+        // but it should be DAD, verified also with dropby.com\n+        this.encodeAll(new String[] { \"Dent\" }, \"DAD\");\n+    }\n+\n+    @Test\n+    public void testDan() throws EncoderException {\n+        this.encodeAll(new String[] { \"Dane\", \"Dean\", \"Dionne\" }, \"DAN\");\n     }\n \n     @Test\n      * @throws EncoderException\n      */\n     @Test\n-    public void testOthers() throws EncoderException {\n+    public void testDropBy2() throws EncoderException {\n         List<String[]> testValues =\n                 Arrays.asList(\n                         // http://www.dropby.com/indexLF.html?content=/NYSIIS.html\n                         // If last character is S, remove it\n                         new String[] { \"JILES\", \"JAL\" },\n                         //new String[] { \"CARRAWAY\", \"CARAY\" },\n-                        new String[] { \"YAMADA\", \"YANAD\" },\n-                        // Others\n+                        new String[] { \"YAMADA\", \"YANAD\" });\n+\n+        for (String[] arr : testValues) {\n+            Assert.assertEquals(\"Problem with \" + arr[0], arr[1], createStringEncoder(false).encode(arr[0]));\n+        }\n+    }\n+\n+    @Test\n+    public void testFal() throws EncoderException {\n+        this.encodeAll(new String[] { \"Phil\" }, \"FAL\");\n+    }\n+\n+    /**\n+     * Tests data gathered from around the internets.\n+     * \n+     * @throws EncoderException\n+     */\n+    @Test\n+    public void testOthers() throws EncoderException {\n+        List<String[]> testValues =\n+                Arrays.asList(\n                         new String[] { \"O'Daniel\", \"ODANAL\" },\n                         new String[] { \"O'Donnel\", \"ODANAL\" },\n                         new String[] { \"Cory\", \"CARY\" },\n     }\n \n     @Test\n-    public void testBran() throws EncoderException {\n-        encodeAll(new String[] { \"Brian\", \"Brown\", \"Brun\" }, \"BRAN\");\n-    }\n-\n-    @Test\n-    public void testCap() throws EncoderException {\n-        this.encodeAll(new String[] { \"Capp\", \"Cope\", \"Copp\", \"Kipp\" }, \"CAP\");\n-    }\n-\n-    @Test\n-    public void testDan() throws EncoderException {\n-        this.encodeAll(new String[] { \"Dane\", \"Dean\", \"Dionne\" }, \"DAN\");\n-    }\n-\n-    @Test\n-    public void testDad() throws EncoderException {\n-        // Data Quality and Record Linkage Techniques P.121 claims this is DAN,\n-        // but it should be DAD, verified also with dropby.com\n-        this.encodeAll(new String[] { \"Dent\" }, \"DAD\");\n-    }\n-\n-    @Test\n-    public void testSnat() throws EncoderException {\n-        this.encodeAll(new String[] { \"Smith\", \"Schmit\" }, \"SNAT\");\n-    }\n-\n-    @Test\n     public void testSnad() throws EncoderException {\n         // Data Quality and Record Linkage Techniques P.121 claims this is SNAT,\n         // but it should be SNAD\n     }\n \n     @Test\n-    public void testFal() throws EncoderException {\n-        this.encodeAll(new String[] { \"Phil\" }, \"FAL\");\n+    public void testSnat() throws EncoderException {\n+        this.encodeAll(new String[] { \"Smith\", \"Schmit\" }, \"SNAT\");\n     }\n \n     @Test", "timestamp": 1331213580, "metainfo": ""}