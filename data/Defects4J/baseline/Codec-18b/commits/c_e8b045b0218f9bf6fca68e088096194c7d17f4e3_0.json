{"sha": "e8b045b0218f9bf6fca68e088096194c7d17f4e3", "log": "Increased unit test coverage on Metaphone and RefinedSoundex   ", "commit": "\n--- a/src/test/org/apache/commons/codec/language/MetaphoneTest.java\n+++ b/src/test/org/apache/commons/codec/language/MetaphoneTest.java\n import org.apache.commons.codec.StringEncoderAbstractTest;\n \n /**\n- * @version $Revision: 1.10 $ $Date: 2004/03/17 19:28:37 $\n+ * @version $Revision: 1.11 $ $Date: 2004/04/18 21:34:16 $\n  * @author Apache Software Foundation\n  */\n public class MetaphoneTest extends StringEncoderAbstractTest {\n     public void assertIsMetaphoneEqual(String source, String[] matches) {\n         // match source to all matches\n         for (int i = 0; i < matches.length; i++) {\n-            assertTrue(this.getMetaphone().isMetaphoneEqual(source, matches[i]));\n+            assertTrue(\"Source: \" + source + \", should have same Metaphone as: \" + matches[i],\n+                       this.getMetaphone().isMetaphoneEqual(source, matches[i]));\n         }\n         // match to each other\n         for (int i = 0; i < matches.length; i++) {\n     }\n \n     public void testMetaphone() {\n+\t\tassertEquals(\"HL\", this.getMetaphone().metaphone(\"howl\"));\n         assertEquals(\"TSTN\", this.getMetaphone().metaphone(\"testing\"));\n         assertEquals(\"0\", this.getMetaphone().metaphone(\"The\"));\n         assertEquals(\"KK\", this.getMetaphone().metaphone(\"quick\"));\n         assertEquals(\"LS\", this.getMetaphone().metaphone(\"lazy\"));\n         assertEquals(\"TKS\", this.getMetaphone().metaphone(\"dogs\"));\n     }\n+\t\n+\tpublic void testWordEndingInMB() {\n+\t\tassertEquals( \"KM\", this.getMetaphone().metaphone(\"COMB\") );\n+\t\tassertEquals( \"TM\", this.getMetaphone().metaphone(\"TOMB\") );\n+\t\tassertEquals( \"WM\", this.getMetaphone().metaphone(\"WOMB\") );\n+\t}\n+\n+\tpublic void testDiscardOfSCEOrSCIOrSCY() {\n+\t\tassertEquals( \"SNS\", this.getMetaphone().metaphone(\"SCIENCE\") );\n+\t\tassertEquals( \"SN\", this.getMetaphone().metaphone(\"SCENE\") );\n+\t\tassertEquals( \"S\", this.getMetaphone().metaphone(\"SCY\") );\n+\t}\n+\n+\tpublic void testWordsWithCIA() {\n+\t\tassertEquals( \"XP\", this.getMetaphone().metaphone(\"CIAPO\") );\n+\t}\n+\n+\tpublic void testTranslateOfSCHAndCH() {\n+\t\tassertEquals( \"SKTL\", this.getMetaphone().metaphone(\"SCHEDULE\") );\n+\t\tassertEquals( \"SKMT\", this.getMetaphone().metaphone(\"SCHEMATIC\") );\n+\n+\t\tassertEquals( \"KRKT\", this.getMetaphone().metaphone(\"CHARACTER\") );\n+\t\tassertEquals( \"TX\", this.getMetaphone().metaphone(\"TEACH\") );\n+\t}\n+\n+\tpublic void testTranslateToJOfDGEOrDGIOrDGY() {\n+\t\tassertEquals( \"TJ\", this.getMetaphone().metaphone(\"DODGY\") );\n+\t\tassertEquals( \"TJ\", this.getMetaphone().metaphone(\"DODGE\") );\n+\t\tassertEquals( \"AJMT\", this.getMetaphone().metaphone(\"ADGIEMTI\") );\n+\t}\n+\n+\tpublic void testDiscardOfSilentHAfterG() {\n+\t\tassertEquals( \"KNT\", this.getMetaphone().metaphone(\"GHENT\") );\n+\t\tassertEquals( \"B\", this.getMetaphone().metaphone(\"BAUGH\") );\n+\t}\n+\n+\tpublic void testDiscardOfSilentGN() {\n+\t\tassertEquals( \"N\", this.getMetaphone().metaphone(\"GNU\") );\n+\t\tassertEquals( \"SNT\", this.getMetaphone().metaphone(\"SIGNED\") );\n+\t}\n+\n+\tpublic void testPHTOF() {\n+\t\tassertEquals( \"FX\", this.getMetaphone().metaphone(\"PHISH\") );\n+\t}\n+\n+\tpublic void testSHAndSIOAndSIAToX() {\n+\t\tassertEquals( \"XT\", this.getMetaphone().metaphone(\"SHOT\") );\n+\t\tassertEquals( \"OTXN\", this.getMetaphone().metaphone(\"ODSIAN\") );\n+\t\tassertEquals( \"PLXN\", this.getMetaphone().metaphone(\"PULSION\") );\n+\t}\n+\n+\tpublic void testTIOAndTIAToX() {\n+\t\tassertEquals( \"OX\", this.getMetaphone().metaphone(\"OTIA\") );\n+\t\tassertEquals( \"PRXN\", this.getMetaphone().metaphone(\"PORTION\") );\n+\t}\n+\n+\tpublic void testTCH() {\n+\t\tassertEquals( \"RX\", this.getMetaphone().metaphone(\"RETCH\") );\n+\t\tassertEquals( \"WX\", this.getMetaphone().metaphone(\"WATCH\") );\n+\t}\n+\n+\tpublic void testExceedLength() {\n+\t\t// should be AKSKS, but istruncated by Max Code Length\n+\t\tassertEquals( \"AKSK\", this.getMetaphone().metaphone(\"AXEAXE\") );\n+\t}\n+\n+\tpublic void testSetMaxLengthWithTruncation() {\n+\t\t// should be AKSKS, but istruncated by Max Code Length\n+\t\tthis.getMetaphone().setMaxCodeLen( 6 );\n+\t\tassertEquals( \"AKSKSK\", this.getMetaphone().metaphone(\"AXEAXEAXE\") );\n+\t}\n \n     public void validateFixture(String[][] pairs) {\n         if (pairs.length == 0) {\n--- a/src/test/org/apache/commons/codec/language/RefinedSoundexTest.java\n+++ b/src/test/org/apache/commons/codec/language/RefinedSoundexTest.java\n /**\n  * Tests RefinedSoundex.\n  * \n- * @version $Id: RefinedSoundexTest.java,v 1.9 2004/03/21 01:30:11 ggregory Exp $\n+ * @version $Id: RefinedSoundexTest.java,v 1.10 2004/04/18 21:34:16 tobrien Exp $\n  * @author Apache Software Foundation\n  */\n public class RefinedSoundexTest extends StringEncoderAbstractTest {\n         assertEquals(\"L7050\", this.getEncoder().encode(\"lazy\"));\n         assertEquals(\"D6043\", this.getEncoder().encode(\"dogs\"));\n     }\n+\n+\tpublic void testGetMappingCodeNonLetter() {\n+\t\tchar code = this.getEncoder().getMappingCode('#');\n+\t\tassertEquals( \"Code does not equals zero\", 0, (int) code);\n+\t}\n }\n--- a/src/test/org/apache/commons/codec/language/SoundexTest.java\n+++ b/src/test/org/apache/commons/codec/language/SoundexTest.java\n /**\n  * Tests {@link Soundex}\n  * \n- * @version $Revision: 1.15 $ $Date: 2004/04/09 22:46:08 $\n+ * @version $Revision: 1.16 $ $Date: 2004/04/18 21:34:16 $\n  * @author Apache Software Foundation\n  */\n public class SoundexTest extends StringEncoderAbstractTest {\n \n     }\n \n+\tpublic void testBadCharacters() {\n+\t\tassertEquals(\"H452\", this.getEncoder().encode(\"HOL>MES\"));\n+\n+\t}\n+\n     public void testEncodeIgnoreApostrophes() {\n         this.encodeAll(new String[] { \"OBrien\", \"'OBrien\", \"O'Brien\", \"OB'rien\", \"OBr'ien\", \"OBri'en\", \"OBrie'n\", \"OBrien'\" }, \"O165\");\n     }", "timestamp": 1082324056, "metainfo": ""}