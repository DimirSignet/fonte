{"sha": "6677acc3d03e2b68c6f0298285d35443c4ee0e3a", "log": "Code clean ups.  ", "commit": "\n--- a/src/java/org/apache/commons/codec/language/bm/Lang.java\n+++ b/src/java/org/apache/commons/codec/language/bm/Lang.java\n      */\n     public String guessLanguage(String text) {\n         Languages.LanguageSet ls = guessLanguages(text);\n-        if (ls.isSingleton()) {\n-            return ls.getAny();\n-        } else {\n-            return Languages.ANY;\n-        }\n+        return ls.isSingleton() ? ls.getAny() : Languages.ANY; \n     }\n \n     /**\n         }\n \n         Languages.LanguageSet ls = Languages.LanguageSet.from(langs);\n-        if (ls.equals(Languages.NO_LANGUAGES)) {\n-            return Languages.ANY_LANGUAGE;\n-        } else {\n-            return ls;\n-        }\n+        return ls.equals(Languages.NO_LANGUAGES) ? Languages.ANY_LANGUAGE : ls;\n     }\n }\n--- a/src/java/org/apache/commons/codec/language/bm/Languages.java\n+++ b/src/java/org/apache/commons/codec/language/bm/Languages.java\n      * A set of languages.\n      */\n     public static abstract class LanguageSet {\n+        \n         public static LanguageSet from(Set<String> langs) {\n-            if (langs.isEmpty()) {\n-                return NO_LANGUAGES;\n-            } else {\n-                return new SomeLanguages(langs);\n-            }\n+            return langs.isEmpty() ? NO_LANGUAGES : new SomeLanguages(langs);  \n         }\n \n         public abstract boolean contains(String language);\n--- a/src/java/org/apache/commons/codec/language/bm/NameType.java\n+++ b/src/java/org/apache/commons/codec/language/bm/NameType.java\n  * @since 2.0\n  */\n public enum NameType {\n+    \n     /** Ashkenazi family names */\n     ASHKENAZI(\"ash\"),\n+    \n     /** Generic names and words */\n     GENERIC(\"gen\"),\n+    \n     /** Sephardic family names */\n     SEPHARDIC(\"sep\");\n \n--- a/src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java\n+++ b/src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java\n  * @since 2.0\n  */\n public class PhoneticEngine {\n+\n     static class PhonemeBuilder {\n \n         public static PhonemeBuilder empty(Languages.LanguageSet languages) {\n             // System.err.println(this.phonemes.getClass());\n \n             for (Rule.Phoneme ph : this.phonemes) {\n-                if (sb.length() > 0)\n+                if (sb.length() > 0) {\n                     sb.append(\"|\");\n+                }\n                 sb.append(ph.getPhonemeText());\n             }\n \n                     return \"(\" + encode(remainder) + \")-(\" + encode(combined) + \")\";\n                 }\n                 // fixme: this case is invariant on l\n-                else if (input.length() >= 2 && input.substring(0, 2).equals(\"d'\")) // check for d'\n-                {\n+                else if (input.length() >= 2 && input.substring(0, 2).equals(\"d'\")) { // check for d'\n                     String remainder = input.substring(2);\n                     String combined = \"d\" + remainder;\n                     return \"(\" + encode(remainder) + \")-(\" + encode(combined) + \")\";", "timestamp": 1312596886, "metainfo": ""}