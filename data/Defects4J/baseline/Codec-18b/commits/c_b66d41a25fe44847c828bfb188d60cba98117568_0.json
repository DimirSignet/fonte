{"sha": "b66d41a25fe44847c828bfb188d60cba98117568", "log": "Fix Checkstyle issues: Line has trailing spaces.  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/BinaryDecoder.java\n+++ b/src/main/java/org/apache/commons/codec/BinaryDecoder.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n public interface BinaryDecoder extends Decoder {\n \n     /**\n-     * Decodes a byte array and returns the results as a byte array. \n+     * Decodes a byte array and returns the results as a byte array.\n      *\n      * @param source A byte array which has been encoded with the\n      *      appropriate encoder\n-     * \n+     *\n      * @return a byte array that contains decoded content\n-     * \n+     *\n      * @throws DecoderException A decoder exception is thrown\n      *          if a Decoder encounters a failure condition during\n      *          the decode process.\n      */\n     byte[] decode(byte[] source) throws DecoderException;\n-}  \n+}\n \n--- a/src/main/java/org/apache/commons/codec/BinaryEncoder.java\n+++ b/src/main/java/org/apache/commons/codec/BinaryEncoder.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Defines common encoding methods for byte array encoders.\n- * \n+ *\n  * @version $Id$\n  */\n public interface BinaryEncoder extends Encoder {\n-    \n+\n     /**\n      * Encodes a byte array and return the encoded data\n      * as a byte array.\n-     * \n+     *\n      * @param source Data to be encoded\n      *\n      * @return A byte array containing the encoded data\n-     * \n+     *\n      * @throws EncoderException thrown if the Encoder\n      *      encounters a failure condition during the\n      *      encoding process.\n      */\n     byte[] encode(byte[] source) throws EncoderException;\n-}  \n+}\n \n--- a/src/main/java/org/apache/commons/codec/CharEncoding.java\n+++ b/src/main/java/org/apache/commons/codec/CharEncoding.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Character encoding names required of every implementation of the Java platform.\n- * \n+ *\n  * From the Java documentation <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard\n  * charsets</a>:\n  * <p>\n  * release documentation for your implementation to see if any other encodings are supported. Consult the release\n  * documentation for your implementation to see if any other encodings are supported. </cite>\n  * </p>\n- * \n+ *\n  * <ul>\n  * <li><code>US-ASCII</code><br/>\n  * Seven-bit ASCII, a.k.a. ISO646-US, a.k.a. the Basic Latin block of the Unicode character set.</li>\n  * Sixteen-bit Unicode Transformation Format, byte order specified by a mandatory initial byte-order mark (either order\n  * accepted on input, big-endian used on output.)</li>\n  * </ul>\n- * \n+ *\n  * This perhaps would best belong in the [lang] project. Even if a similar interface is defined in [lang], it is not\n  * foreseen that [codec] would be made to depend on [lang].\n- * \n+ *\n  * <p>This class is immutable and thread-safe.</p>\n- * \n+ *\n  * @see <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n  * @since 1.4\n  * @version $Id$\n      * <p>\n      * Every implementation of the Java platform is required to support this character encoding.\n      * </p>\n-     * \n+     *\n      * @see <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      */\n     public static final String ISO_8859_1 = \"ISO-8859-1\";\n      * <p>\n      * Every implementation of the Java platform is required to support this character encoding.\n      * </p>\n-     * \n+     *\n      * @see <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      */\n     public static final String US_ASCII = \"US-ASCII\";\n      * <p>\n      * Every implementation of the Java platform is required to support this character encoding.\n      * </p>\n-     * \n+     *\n      * @see <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      */\n     public static final String UTF_16 = \"UTF-16\";\n      * <p>\n      * Every implementation of the Java platform is required to support this character encoding.\n      * </p>\n-     * \n+     *\n      * @see <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      */\n     public static final String UTF_16BE = \"UTF-16BE\";\n      * <p>\n      * Every implementation of the Java platform is required to support this character encoding.\n      * </p>\n-     * \n+     *\n      * @see <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      */\n     public static final String UTF_16LE = \"UTF-16LE\";\n      * <p>\n      * Every implementation of the Java platform is required to support this character encoding.\n      * </p>\n-     * \n+     *\n      * @see <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      */\n     public static final String UTF_8 = \"UTF-8\";\n--- a/src/main/java/org/apache/commons/codec/Charsets.java\n+++ b/src/main/java/org/apache/commons/codec/Charsets.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Charsets required of every implementation of the Java platform.\n- * \n+ *\n  * From the Java documentation <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard\n  * charsets</a>:\n  * <p>\n  * release documentation for your implementation to see if any other encodings are supported. Consult the release\n  * documentation for your implementation to see if any other encodings are supported. </cite>\n  * </p>\n- * \n+ *\n  * <ul>\n  * <li><code>US-ASCII</code><br/>\n  * Seven-bit ASCII, a.k.a. ISO646-US, a.k.a. the Basic Latin block of the Unicode character set.</li>\n  * Sixteen-bit Unicode Transformation Format, byte order specified by a mandatory initial byte-order mark (either order\n  * accepted on input, big-endian used on output.)</li>\n  * </ul>\n- * \n+ *\n  * This perhaps would best belong in the Commons Lang project. Even if a similar class is defined in Commons Lang, it is\n  * not foreseen that Commons Codec would be made to depend on Commons Lang.\n- * \n+ *\n  * <p>This class is immutable and thread-safe.</p>\n- * \n+ *\n  * @see <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n  * @since 1.7\n  * @version $Id: CharEncoding.java 1173287 2011-09-20 18:16:19Z ggregory $\n  */\n public class Charsets {\n-    \n+\n     //\n     // This class should only contain Charset instances for required encodings. This guarantees that it will load correctly and\n     // without delay on all Java platforms.\n     //\n-    \n+\n     /**\n-     * Returns the given Charset or the default Charset if the given Charset is null. \n-     * \n+     * Returns the given Charset or the default Charset if the given Charset is null.\n+     *\n      * @param charset\n      *            A charset or null.\n      * @return the given Charset or the default Charset if the given Charset is null\n \n     /**\n      * Returns a Charset for the named charset. If the name is null, return the default Charset.\n-     * \n+     *\n      * @param charset\n      *            The name of the requested charset, may be null.\n      * @return a Charset for the named charset\n      * <p>\n      * Every implementation of the Java platform is required to support this character encoding.\n      * </p>\n-     * \n+     *\n      * @see <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      */\n     public static final Charset ISO_8859_1 = Charset.forName(CharEncoding.ISO_8859_1);\n      * <p>\n      * Every implementation of the Java platform is required to support this character encoding.\n      * </p>\n-     * \n+     *\n      * @see <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      */\n     public static final Charset US_ASCII = Charset.forName(CharEncoding.US_ASCII);\n      * <p>\n      * Every implementation of the Java platform is required to support this character encoding.\n      * </p>\n-     * \n+     *\n      * @see <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      */\n     public static final Charset UTF_16 = Charset.forName(CharEncoding.UTF_16);\n      * <p>\n      * Every implementation of the Java platform is required to support this character encoding.\n      * </p>\n-     * \n+     *\n      * @see <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      */\n     public static final Charset UTF_16BE = Charset.forName(CharEncoding.UTF_16BE);\n      * <p>\n      * Every implementation of the Java platform is required to support this character encoding.\n      * </p>\n-     * \n+     *\n      * @see <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      */\n     public static final Charset UTF_16LE = Charset.forName(CharEncoding.UTF_16LE);\n      * <p>\n      * Every implementation of the Java platform is required to support this character encoding.\n      * </p>\n-     * \n+     *\n      * @see <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      */\n     public static final Charset UTF_8 = Charset.forName(CharEncoding.UTF_8);\n--- a/src/main/java/org/apache/commons/codec/Decoder.java\n+++ b/src/main/java/org/apache/commons/codec/Decoder.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * <p>Provides the highest level of abstraction for Decoders.\n  * This is the sister interface of {@link Encoder}.  All\n  * Decoders implement this common generic interface.</p>\n- * \n- * <p>Allows a user to pass a generic Object to any Decoder \n+ *\n+ * <p>Allows a user to pass a generic Object to any Decoder\n  * implementation in the codec package.</p>\n- * \n+ *\n  * <p>One of the two interfaces at the center of the codec package.</p>\n- * \n+ *\n  * @version $Id$\n  */\n public interface Decoder {\n      * to the specific type expected by a particular Decoder\n      * implementation.  If a {@link ClassCastException} occurs\n      * this decode method will throw a DecoderException.\n-     * \n+     *\n      * @param source the object to decode\n-     * \n+     *\n      * @return a 'decoded\" object\n-     * \n+     *\n      * @throws DecoderException a decoder exception can\n      * be thrown for any number of reasons.  Some good\n      * candidates are that the parameter passed to this\n      * appropriate type for a specific encoder.\n      */\n     Object decode(Object source) throws DecoderException;\n-}  \n+}\n \n--- a/src/main/java/org/apache/commons/codec/DecoderException.java\n+++ b/src/main/java/org/apache/commons/codec/DecoderException.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n /**\n  * Thrown when there is a failure condition during the decoding process. This exception is thrown when a {@link Decoder}\n  * encounters a decoding specific exception such as invalid data, or characters outside of the expected range.\n- * \n+ *\n  * @version $Id$\n  */\n public class DecoderException extends Exception {\n \n     /**\n      * Declares the Serial Version Uid.\n-     * \n+     *\n      * @see <a href=\"http://c2.com/cgi/wiki?AlwaysDeclareSerialVersionUid\">Always Declare Serial Version Uid</a>\n      */\n     private static final long serialVersionUID = 1L;\n     /**\n      * Constructs a new exception with {@code null} as its detail message. The cause is not initialized, and may\n      * subsequently be initialized by a call to {@link #initCause}.\n-     * \n+     *\n      * @since 1.4\n      */\n     public DecoderException() {\n     /**\n      * Constructs a new exception with the specified detail message. The cause is not initialized, and may subsequently\n      * be initialized by a call to {@link #initCause}.\n-     * \n+     *\n      * @param message\n      *            The detail message which is saved for later retrieval by the {@link #getMessage()} method.\n      */\n \n     /**\n      * Constructsa new exception with the specified detail message and cause.\n-     * \n+     *\n      * <p>\n      * Note that the detail message associated with <code>cause</code> is not automatically incorporated into this\n      * exception's detail message.\n      * </p>\n-     * \n+     *\n      * @param message\n      *            The detail message which is saved for later retrieval by the {@link #getMessage()} method.\n      * @param cause\n      * Constructs a new exception with the specified cause and a detail message of <code>(cause==null ?\n      * null : cause.toString())</code> (which typically contains the class and detail message of <code>cause</code>).\n      * This constructor is useful for exceptions that are little more than wrappers for other throwables.\n-     * \n+     *\n      * @param cause\n      *            The cause which is saved for later retrieval by the {@link #getCause()} method. A {@code null}\n      *            value is permitted, and indicates that the cause is nonexistent or unknown.\n--- a/src/main/java/org/apache/commons/codec/Encoder.java\n+++ b/src/main/java/org/apache/commons/codec/Encoder.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n /**\n  * <p>Provides the highest level of abstraction for Encoders.\n  * This is the sister interface of {@link Decoder}.  Every implementation of\n- * Encoder provides this common generic interface which allows a user to pass a \n+ * Encoder provides this common generic interface which allows a user to pass a\n  * generic Object to any Encoder implementation in the codec package.</p>\n  *\n  * @version $Id$\n  */\n public interface Encoder {\n-    \n+\n     /**\n-     * Encodes an \"Object\" and returns the encoded content \n+     * Encodes an \"Object\" and returns the encoded content\n      * as an Object.  The Objects here may just be <code>byte[]</code>\n      * or <code>String</code>s depending on the implementation used.\n-     *   \n+     *\n      * @param source An object to encode\n-     * \n+     *\n      * @return An \"encoded\" Object\n-     * \n+     *\n      * @throws EncoderException an encoder exception is\n      *  thrown if the encoder experiences a failure\n      *  condition during the encoding process.\n      */\n     Object encode(Object source) throws EncoderException;\n-}  \n+}\n \n--- a/src/main/java/org/apache/commons/codec/EncoderException.java\n+++ b/src/main/java/org/apache/commons/codec/EncoderException.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * Thrown when there is a failure condition during the encoding process. This exception is thrown when an\n  * {@link Encoder} encounters a encoding specific exception such as invalid data, inability to calculate a checksum,\n  * characters outside of the expected range.\n- * \n+ *\n  * @version $Id$\n  */\n public class EncoderException extends Exception {\n \n     /**\n      * Declares the Serial Version Uid.\n-     * \n+     *\n      * @see <a href=\"http://c2.com/cgi/wiki?AlwaysDeclareSerialVersionUid\">Always Declare Serial Version Uid</a>\n      */\n     private static final long serialVersionUID = 1L;\n     /**\n      * Constructs a new exception with {@code null} as its detail message. The cause is not initialized, and may\n      * subsequently be initialized by a call to {@link #initCause}.\n-     * \n+     *\n      * @since 1.4\n      */\n     public EncoderException() {\n     /**\n      * Constructs a new exception with the specified detail message. The cause is not initialized, and may subsequently\n      * be initialized by a call to {@link #initCause}.\n-     * \n+     *\n      * @param message\n      *            a useful message relating to the encoder specific error.\n      */\n \n     /**\n      * Constructs a new exception with the specified detail message and cause.\n-     * \n+     *\n      * <p>\n      * Note that the detail message associated with <code>cause</code> is not automatically incorporated into this\n      * exception's detail message.\n      * </p>\n-     * \n+     *\n      * @param message\n      *            The detail message which is saved for later retrieval by the {@link #getMessage()} method.\n      * @param cause\n      * Constructs a new exception with the specified cause and a detail message of <code>(cause==null ?\n      * null : cause.toString())</code> (which typically contains the class and detail message of <code>cause</code>).\n      * This constructor is useful for exceptions that are little more than wrappers for other throwables.\n-     * \n+     *\n      * @param cause\n      *            The cause which is saved for later retrieval by the {@link #getCause()} method. A {@code null}\n      *            value is permitted, and indicates that the cause is nonexistent or unknown.\n--- a/src/main/java/org/apache/commons/codec/StringDecoder.java\n+++ b/src/main/java/org/apache/commons/codec/StringDecoder.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * @version $Id$\n  */\n public interface StringDecoder extends Decoder {\n-    \n+\n     /**\n      * Decodes a String and returns a String.\n-     * \n+     *\n      * @param source the String to decode\n-     * \n+     *\n      * @return the encoded String\n-     * \n+     *\n      * @throws DecoderException thrown if there is\n      *  an error condition during the Encoding process.\n      */\n     String decode(String source) throws DecoderException;\n-}  \n+}\n \n--- a/src/main/java/org/apache/commons/codec/StringEncoder.java\n+++ b/src/main/java/org/apache/commons/codec/StringEncoder.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * @version $Id$\n  */\n public interface StringEncoder extends Encoder {\n-    \n+\n     /**\n      * Encodes a String and returns a String.\n-     * \n+     *\n      * @param source the String to encode\n-     * \n+     *\n      * @return the encoded String\n-     * \n+     *\n      * @throws EncoderException thrown if there is\n      *  an error condition during the encoding process.\n      */\n     String encode(String source) throws EncoderException;\n-}  \n+}\n \n--- a/src/main/java/org/apache/commons/codec/StringEncoderComparator.java\n+++ b/src/main/java/org/apache/commons/codec/StringEncoderComparator.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * Compares Strings using a {@link StringEncoder}. This comparator is used to sort Strings by an encoding scheme such as\n  * Soundex, Metaphone, etc. This class can come in handy if one need to sort Strings by an encoded form of a name such\n  * as Soundex.\n- * \n+ *\n  * <p>This class is immutable and thread-safe.</p>\n- * \n+ *\n  * @version $Id$\n  */\n public class StringEncoderComparator implements Comparator {\n \n     /**\n      * Constructs a new instance.\n-     * \n+     *\n      * @deprecated Creating an instance without a {@link StringEncoder} leads to a {@link NullPointerException}. Will be\n      *             removed in 2.0.\n      */\n \n     /**\n      * Constructs a new instance with the given algorithm.\n-     * \n+     *\n      * @param stringEncoder\n      *            the StringEncoder used for comparisons.\n      */\n     /**\n      * Compares two strings based not on the strings themselves, but on an encoding of the two strings using the\n      * StringEncoder this Comparator was created with.\n-     * \n+     *\n      * If an {@link EncoderException} is encountered, return <code>0</code>.\n-     * \n+     *\n      * @param o1\n      *            the object to compare\n      * @param o2\n--- a/src/main/java/org/apache/commons/codec/binary/Base32.java\n+++ b/src/main/java/org/apache/commons/codec/binary/Base32.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Provides Base32 encoding and decoding as defined by <a href=\"http://www.ietf.org/rfc/rfc4648.txt\">RFC 4648</a>.\n- * \n+ *\n  * <p>\n  * The class can be parameterized in the following manner with various constructors:\n  * <ul>\n  * <p>\n  * This class is thread-safe.\n  * </p>\n- * \n+ *\n  * @see <a href=\"http://www.ietf.org/rfc/rfc4648.txt\">RFC 4648</a>\n- * \n+ *\n  * @since 1.5\n  * @version $Revision$\n  */\n public class Base32 extends BaseNCodec {\n \n     /**\n-     * BASE32 characters are 5 bits in length. \n-     * They are formed by taking a block of five octets to form a 40-bit string, \n+     * BASE32 characters are 5 bits in length.\n+     * They are formed by taking a block of five octets to form a 40-bit string,\n      * which is converted into eight BASE32 characters.\n      */\n     private static final int BITS_PER_ENCODED_BYTE = 5;\n      * This array is a lookup table that translates Unicode characters drawn from the \"Base32 Alphabet\" (as specified in\n      * Table 3 of RFC 2045) into their 5-bit positive integer equivalents. Characters that are not in the Base32\n      * alphabet but fall within the bounds of the array are translated to -1.\n-     * \n+     *\n      */\n     private static final byte[] DECODE_TABLE = {\n          //  0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F\n      * This array is a lookup table that translates Unicode characters drawn from the \"Base32 |Hex Alphabet\" (as specified in\n      * Table 3 of RFC 2045) into their 5-bit positive integer equivalents. Characters that are not in the Base32 Hex\n      * alphabet but fall within the bounds of the array are translated to -1.\n-     * \n+     *\n      */\n     private static final byte[] HEX_DECODE_TABLE = {\n          //  0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F\n      * equivalents as specified in Table 3 of RFC 2045.\n      */\n     private static final byte[] HEX_ENCODE_TABLE = {\n-            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \n+            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n             'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n             'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',\n     };\n     // some state be preserved between calls of encode() and decode().\n \n     /**\n-     * Place holder for the bytes we're dealing with for our based logic. \n+     * Place holder for the bytes we're dealing with for our based logic.\n      * Bitwise operations store and extract the encoding or decoding from this variable.\n      */\n     /**\n      * <p>\n      * When encoding the line length is 0 (no chunking).\n      * </p>\n-     * \n+     *\n      */\n     public Base32() {\n         this(false);\n      * <p>\n      * When encoding the line length is given in the constructor, the line separator is CRLF.\n      * </p>\n-     * \n+     *\n      * @param lineLength\n      *            Each line of encoded data will be at most of the given length (rounded down to nearest multiple of 8).\n      *            If lineLength <= 0, then the output will not be divided into lines (chunks). Ignored when decoding.\n      * <p>\n      * Line lengths that aren't multiples of 8 will still essentially end up being multiples of 8 in the encoded data.\n      * </p>\n-     * \n+     *\n      * @param lineLength\n      *            Each line of encoded data will be at most of the given length (rounded down to nearest multiple of 8).\n      *            If lineLength <= 0, then the output will not be divided into lines (chunks). Ignored when decoding.\n     public Base32(int lineLength, byte[] lineSeparator) {\n         this(lineLength, lineSeparator, false);\n     }\n-    \n+\n     /**\n      * Creates a Base32 / Base32 Hex codec used for decoding and encoding.\n      * <p>\n      * <p>\n      * Line lengths that aren't multiples of 8 will still essentially end up being multiples of 8 in the encoded data.\n      * </p>\n-     * \n+     *\n      * @param lineLength\n      *            Each line of encoded data will be at most of the given length (rounded down to nearest multiple of 8).\n      *            If lineLength <= 0, then the output will not be divided into lines (chunks). Ignored when decoding.\n      *             Or the lineLength > 0 and lineSeparator is null.\n      */\n     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {\n-        super(BYTES_PER_UNENCODED_BLOCK, BYTES_PER_ENCODED_BLOCK, \n-                lineLength, \n+        super(BYTES_PER_UNENCODED_BLOCK, BYTES_PER_ENCODED_BLOCK,\n+                lineLength,\n                 lineSeparator == null ? 0 : lineSeparator.length);\n         if (useHex){\n             this.encodeTable = HEX_ENCODE_TABLE;\n-            this.decodeTable = HEX_DECODE_TABLE;            \n+            this.decodeTable = HEX_DECODE_TABLE;\n         } else {\n             this.encodeTable = ENCODE_TABLE;\n-            this.decodeTable = DECODE_TABLE;            \n+            this.decodeTable = DECODE_TABLE;\n         }\n         if (lineLength > 0) {\n             if (lineSeparator == null) {\n      * silently ignored, but has implications for other bytes, too. This method subscribes to the garbage-in,\n      * garbage-out philosophy: it will not check the provided data for validity.\n      * </p>\n-     * \n+     *\n      * @param in\n      *            byte[] array of ascii data to Base32 decode.\n      * @param inPos\n                 }\n             }\n         }\n-    \n+\n         // Two forms of EOF as far as Base32 decoder is concerned: actual\n         // EOF (-1) and first time '=' character is encountered in stream.\n         // This approach makes the '=' padding characters completely optional.\n         if (context.eof && context.modulus >= 2) { // if modulus < 2, nothing to do\n             ensureBufferSize(decodeSize, context);\n-    \n+\n             //  we ignore partial bytes, i.e. only multiples of 8 count\n             switch (context.modulus) {\n                 case 2 : // 10 bits, drop 2 and output one byte\n      * the data to encode, and once with inAvail set to \"-1\" to alert encoder that EOF has been reached, so flush last\n      * remaining bytes (if not multiple of 5).\n      * </p>\n-     * \n+     *\n      * @param in\n      *            byte[] array of binary data to Base32 encode.\n      * @param inPos\n                     context.buffer[context.pos++] = PAD;\n                     context.buffer[context.pos++] = PAD;\n                     break;\n-    \n+\n                 case 2 : // 2 octets = 16 bits to use\n                     context.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 11) & MASK_5BITS]; // 16-1*5 = 11\n                     context.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  6) & MASK_5BITS]; // 16-2*5 = 6\n             if (lineLength > 0 && context.currentLinePos > 0){ // add chunk separator if required\n                 System.arraycopy(lineSeparator, 0, context.buffer, context.pos, lineSeparator.length);\n                 context.pos += lineSeparator.length;\n-            }            \n+            }\n         } else {\n             for (int i = 0; i < inAvail; i++) {\n                 ensureBufferSize(encodeSize, context);\n                     b += 256;\n                 }\n                 context.lbitWorkArea = (context.lbitWorkArea << 8) + b; // BITS_PER_BYTE\n-                if (0 == context.modulus) { // we have enough bytes to create our output \n+                if (0 == context.modulus) { // we have enough bytes to create our output\n                     context.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 35) & MASK_5BITS];\n                     context.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 30) & MASK_5BITS];\n                     context.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 25) & MASK_5BITS];\n \n     /**\n      * Returns whether or not the <code>octet</code> is in the Base32 alphabet.\n-     * \n+     *\n      * @param octet\n      *            The value to test\n      * @return {@code true} if the value is defined in the the Base32 alphabet {@code false} otherwise.\n--- a/src/main/java/org/apache/commons/codec/binary/Base32InputStream.java\n+++ b/src/main/java/org/apache/commons/codec/binary/Base32InputStream.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode\n  * character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).\n  * </p>\n- * \n+ *\n  * @version $Revision$\n  * @see <a href=\"http://www.ietf.org/rfc/rfc4648.txt\">RFC 4648</a>\n  * @since 1.5\n \n     /**\n      * Creates a Base32InputStream such that all data read is Base32-decoded from the original provided InputStream.\n-     * \n+     *\n      * @param in\n      *            InputStream to wrap.\n      */\n     /**\n      * Creates a Base32InputStream such that all data read is either Base32-encoded or Base32-decoded from the original\n      * provided InputStream.\n-     * \n+     *\n      * @param in\n      *            InputStream to wrap.\n      * @param doEncode\n     /**\n      * Creates a Base32InputStream such that all data read is either Base32-encoded or Base32-decoded from the original\n      * provided InputStream.\n-     * \n+     *\n      * @param in\n      *            InputStream to wrap.\n      * @param doEncode\n--- a/src/main/java/org/apache/commons/codec/binary/Base32OutputStream.java\n+++ b/src/main/java/org/apache/commons/codec/binary/Base32OutputStream.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode\n  * character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).\n  * </p>\n- * \n+ *\n  * @version $Revision$\n  * @see <a href=\"http://www.ietf.org/rfc/rfc4648.txt\">RFC 4648</a>\n  * @since 1.5\n \n     /**\n      * Creates a Base32OutputStream such that all data written is Base32-encoded to the original provided OutputStream.\n-     * \n+     *\n      * @param out\n      *            OutputStream to wrap.\n      */\n     /**\n      * Creates a Base32OutputStream such that all data written is either Base32-encoded or Base32-decoded to the\n      * original provided OutputStream.\n-     * \n+     *\n      * @param out\n      *            OutputStream to wrap.\n      * @param doEncode\n     /**\n      * Creates a Base32OutputStream such that all data written is either Base32-encoded or Base32-decoded to the\n      * original provided OutputStream.\n-     * \n+     *\n      * @param out\n      *            OutputStream to wrap.\n      * @param doEncode\n--- a/src/main/java/org/apache/commons/codec/binary/Base64.java\n+++ b/src/main/java/org/apache/commons/codec/binary/Base64.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Provides Base64 encoding and decoding as defined by <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>.\n- * \n+ *\n  * <p>\n  * This class implements section <cite>6.8. Base64 Content-Transfer-Encoding</cite> from RFC 2045 <cite>Multipurpose\n  * Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</cite> by Freed and Borenstein.\n  * <p>\n  * This class is thread-safe.\n  * </p>\n- * \n+ *\n  * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n  * @since 1.0\n  * @version $Revision$\n public class Base64 extends BaseNCodec {\n \n     /**\n-     * BASE32 characters are 6 bits in length. \n-     * They are formed by taking a block of 3 octets to form a 24-bit string, \n+     * BASE32 characters are 6 bits in length.\n+     * They are formed by taking a block of 3 octets to form a 24-bit string,\n      * which is converted into 4 BASE64 characters.\n      */\n     private static final int BITS_PER_ENCODED_BYTE = 6;\n      * <p>\n      * N.B. The next major release may break compatibility and make this field private.\n      * </p>\n-     * \n+     *\n      * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045 section 2.1</a>\n      */\n     static final byte[] CHUNK_SEPARATOR = {'\\r', '\\n'};\n     /**\n      * This array is a lookup table that translates 6-bit positive integer index values into their \"Base64 Alphabet\"\n      * equivalents as specified in Table 1 of RFC 2045.\n-     * \n+     *\n      * Thanks to \"commons\" project in ws.apache.org for this code.\n      * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/\n      */\n      * This is a copy of the STANDARD_ENCODE_TABLE above, but with + and /\n      * changed to - and _ to make the encoded Base64 results more URL-SAFE.\n      * This table is only used when the Base64's mode is set to URL-SAFE.\n-     */    \n+     */\n     private static final byte[] URL_SAFE_ENCODE_TABLE = {\n             'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n             'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n      * This array is a lookup table that translates Unicode characters drawn from the \"Base64 Alphabet\" (as specified in\n      * Table 1 of RFC 2045) into their 6-bit positive integer equivalents. Characters that are not in the Base64\n      * alphabet but fall within the bounds of the array are translated to -1.\n-     * \n+     *\n      * Note: '+' and '-' both decode to 62. '/' and '_' both decode to 63. This means decoder seamlessly handles both\n      * URL_SAFE and STANDARD base64. (The encoder, on the other hand, needs to know ahead of time what to emit).\n-     * \n+     *\n      * Thanks to \"commons\" project in ws.apache.org for this code.\n      * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/\n      */\n     };\n \n     /**\n-     * Base64 uses 6-bit fields. \n+     * Base64 uses 6-bit fields.\n      */\n     /** Mask used to extract 6 bits, used when encoding */\n     private static final int MASK_6BITS = 0x3f;\n      * <p>\n      * When encoding the line length is 0 (no chunking), and the encoding table is STANDARD_ENCODE_TABLE.\n      * </p>\n-     * \n+     *\n      * <p>\n      * When decoding all variants are supported.\n      * </p>\n      * <p>\n      * When encoding the line length is 76, the line separator is CRLF, and the encoding table is STANDARD_ENCODE_TABLE.\n      * </p>\n-     * \n+     *\n      * <p>\n      * When decoding all variants are supported.\n      * </p>\n-     * \n+     *\n      * @param urlSafe\n      *            if {@code true}, URL-safe encoding is used. In most cases this should be set to\n      *            {@code false}.\n      * <p>\n      * When decoding all variants are supported.\n      * </p>\n-     * \n+     *\n      * @param lineLength\n      *            Each line of encoded data will be at most of the given length (rounded down to nearest multiple of 4).\n      *            If lineLength <= 0, then the output will not be divided into lines (chunks). Ignored when decoding.\n      * <p>\n      * When decoding all variants are supported.\n      * </p>\n-     * \n+     *\n      * @param lineLength\n      *            Each line of encoded data will be at most of the given length (rounded down to nearest multiple of 4).\n      *            If lineLength <= 0, then the output will not be divided into lines (chunks). Ignored when decoding.\n      * <p>\n      * When decoding all variants are supported.\n      * </p>\n-     * \n+     *\n      * @param lineLength\n      *            Each line of encoded data will be at most of the given length (rounded down to nearest multiple of 4).\n      *            If lineLength <= 0, then the output will not be divided into lines (chunks). Ignored when decoding.\n      * @since 1.4\n      */\n     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {\n-        super(BYTES_PER_UNENCODED_BLOCK, BYTES_PER_ENCODED_BLOCK, \n+        super(BYTES_PER_UNENCODED_BLOCK, BYTES_PER_ENCODED_BLOCK,\n                 lineLength,\n                 lineSeparator == null ? 0 : lineSeparator.length);\n         // TODO could be simplified if there is no requirement to reject invalid line sep when length <=0\n-        // @see test case Base64Test.testConstructors() \n+        // @see test case Base64Test.testConstructors()\n         if (lineSeparator != null) {\n             if (containsAlphabetOrPad(lineSeparator)) {\n                 String sep = StringUtils.newStringUtf8(lineSeparator);\n                 throw new IllegalArgumentException(\"lineSeparator must not contain base64 characters: [\" + sep + \"]\");\n-            }            \n+            }\n             if (lineLength > 0){ // null line-sep forces no chunking rather than throwing IAE\n                 this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;\n                 this.lineSeparator = new byte[lineSeparator.length];\n \n     /**\n      * Returns our current encode mode. True if we're URL-SAFE, false otherwise.\n-     * \n+     *\n      * @return true if we're in URL-SAFE mode, false otherwise.\n      * @since 1.4\n      */\n      * Thanks to \"commons\" project in ws.apache.org for the bitwise operations, and general approach.\n      * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/\n      * </p>\n-     * \n+     *\n      * @param in\n      *            byte[] array of binary data to base64 encode.\n      * @param inPos\n             switch (context.modulus) { // 0-2\n                 case 1 : // 8 bits = 6 + 2\n                     context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 2) & MASK_6BITS]; // top 6 bits\n-                    context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea << 4) & MASK_6BITS]; // remaining 2 \n+                    context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea << 4) & MASK_6BITS]; // remaining 2\n                     // URL-SAFE skips the padding to further reduce size.\n                     if (encodeTable == STANDARD_ENCODE_TABLE) {\n                         context.buffer[context.pos++] = PAD;\n             }\n             context.currentLinePos += context.pos - savedPos; // keep track of current line position\n             // if currentPos == 0 we are at the start of a line, so don't add CRLF\n-            if (lineLength > 0 && context.currentLinePos > 0) { \n+            if (lineLength > 0 && context.currentLinePos > 0) {\n                 System.arraycopy(lineSeparator, 0, context.buffer, context.pos, lineSeparator.length);\n                 context.pos += lineSeparator.length;\n             }\n      * Thanks to \"commons\" project in ws.apache.org for the bitwise operations, and general approach.\n      * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/\n      * </p>\n-     * \n+     *\n      * @param in\n      *            byte[] array of ascii data to base64 decode.\n      * @param inPos\n         // This approach makes the '=' padding characters completely optional.\n         if (context.eof && context.modulus != 0) {\n             ensureBufferSize(decodeSize, context);\n-            \n+\n             // We have some spare bits remaining\n             // Output all whole multiples of 8 bits and ignore the rest\n             switch (context.modulus) {\n     /**\n      * Tests a given byte array to see if it contains only valid characters within the Base64 alphabet. Currently the\n      * method treats whitespace as valid.\n-     * \n+     *\n      * @param arrayOctet\n      *            byte array to test\n      * @return {@code true} if all bytes are valid characters in the Base64 alphabet or if the byte array is empty;\n \n     /**\n      * Returns whether or not the <code>octet</code> is in the base 64 alphabet.\n-     * \n+     *\n      * @param octet\n      *            The value to test\n      * @return {@code true} if the value is defined in the the base 64 alphabet, {@code false} otherwise.\n     /**\n      * Tests a given String to see if it contains only valid characters within the Base64 alphabet. Currently the\n      * method treats whitespace as valid.\n-     * \n+     *\n      * @param base64\n      *            String to test\n      * @return {@code true} if all characters in the String are valid characters in the Base64 alphabet or if\n     public static boolean isBase64(String base64) {\n         return isBase64(StringUtils.getBytesUtf8(base64));\n     }\n-    \n+\n     /**\n      * Tests a given byte array to see if it contains only valid characters within the Base64 alphabet. Currently the\n      * method treats whitespace as valid.\n-     * \n+     *\n      * @param arrayOctet\n      *            byte array to test\n      * @return {@code true} if all bytes are valid characters in the Base64 alphabet or if the byte array is empty;\n      *         {@code false}, otherwise\n      * @since 1.5\n-     */    \n+     */\n     public static boolean isBase64(byte[] arrayOctet) {\n         for (int i = 0; i < arrayOctet.length; i++) {\n             if (!isBase64(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {\n         }\n         return true;\n     }\n-    \n+\n     /**\n      * Encodes binary data using the base64 algorithm but does not chunk the output.\n-     * \n+     *\n      * @param binaryData\n      *            binary data to encode\n      * @return byte[] containing Base64 characters in their UTF-8 representation.\n      * Encodes binary data using the base64 algorithm but does not chunk the output.\n      *\n      * NOTE:  We changed the behaviour of this method from multi-line chunking (commons-codec-1.4) to\n-     * single-line non-chunking (commons-codec-1.5). \n-     * \n+     * single-line non-chunking (commons-codec-1.5).\n+     *\n      * @param binaryData\n      *            binary data to encode\n      * @return String containing Base64 characters.\n      * @since 1.4 (NOTE:  1.4 chunked the output, whereas 1.5 does not).\n-     */    \n+     */\n     public static String encodeBase64String(byte[] binaryData) {\n         return StringUtils.newStringUtf8(encodeBase64(binaryData, false));\n     }\n-    \n+\n     /**\n      * Encodes binary data using a URL-safe variation of the base64 algorithm but does not chunk the output. The\n      * url-safe variation emits - and _ instead of + and / characters.\n-     * \n+     *\n      * @param binaryData\n      *            binary data to encode\n      * @return byte[] containing Base64 characters in their UTF-8 representation.\n      *            binary data to encode\n      * @return String containing Base64 characters\n      * @since 1.4\n-     */    \n+     */\n     public static String encodeBase64URLSafeString(byte[] binaryData) {\n         return StringUtils.newStringUtf8(encodeBase64(binaryData, false, true));\n-    }    \n+    }\n \n     /**\n      * Encodes binary data using the base64 algorithm and chunks the encoded output into 76 character blocks\n-     * \n+     *\n      * @param binaryData\n      *            binary data to encode\n      * @return Base64 characters chunked in 76 character blocks\n \n     /**\n      * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.\n-     * \n+     *\n      * @param binaryData\n      *            Array containing binary data to encode.\n      * @param isChunked\n \n     /**\n      * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.\n-     * \n+     *\n      * @param binaryData\n      *            Array containing binary data to encode.\n      * @param isChunked\n \n     /**\n      * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.\n-     * \n+     *\n      * @param binaryData\n      *            Array containing binary data to encode.\n      * @param isChunked\n                 \") than the specified maximum size of \" +\n                 maxResultSize);\n         }\n-                \n+\n         return b64.encode(binaryData);\n     }\n \n \n     /**\n      * Decodes Base64 data into octets\n-     * \n+     *\n      * @param base64Data\n      *            Byte array containing Base64 data\n      * @return Array containing decoded data.\n     // Implementation of integer encoding used for crypto\n     /**\n      * Decodes a byte64-encoded integer according to crypto standards such as W3C's XML-Signature\n-     * \n+     *\n      * @param pArray\n      *            a byte array containing base64 character data\n      * @return A BigInteger\n \n     /**\n      * Encodes to a byte64-encoded integer according to crypto standards such as W3C's XML-Signature\n-     * \n+     *\n      * @param bigInt\n      *            a BigInteger\n      * @return A byte array containing base64 character data\n \n     /**\n      * Returns a byte-array representation of a <code>BigInteger</code> without sign bit.\n-     * \n+     *\n      * @param bigInt\n      *            <code>BigInteger</code> to be converted\n      * @return a byte array representation of the BigInteger parameter\n \n     /**\n      * Returns whether or not the <code>octet</code> is in the Base32 alphabet.\n-     * \n+     *\n      * @param octet\n      *            The value to test\n      * @return {@code true} if the value is defined in the the Base32 alphabet {@code false} otherwise.\n--- a/src/main/java/org/apache/commons/codec/binary/Base64InputStream.java\n+++ b/src/main/java/org/apache/commons/codec/binary/Base64InputStream.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode\n  * character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).\n  * </p>\n- * \n+ *\n  * @version $Id$\n  * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n  * @since 1.4\n \n     /**\n      * Creates a Base64InputStream such that all data read is Base64-decoded from the original provided InputStream.\n-     * \n+     *\n      * @param in\n      *            InputStream to wrap.\n      */\n     /**\n      * Creates a Base64InputStream such that all data read is either Base64-encoded or Base64-decoded from the original\n      * provided InputStream.\n-     * \n+     *\n      * @param in\n      *            InputStream to wrap.\n      * @param doEncode\n     /**\n      * Creates a Base64InputStream such that all data read is either Base64-encoded or Base64-decoded from the original\n      * provided InputStream.\n-     * \n+     *\n      * @param in\n      *            InputStream to wrap.\n      * @param doEncode\n--- a/src/main/java/org/apache/commons/codec/binary/Base64OutputStream.java\n+++ b/src/main/java/org/apache/commons/codec/binary/Base64OutputStream.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode\n  * character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).\n  * </p>\n- * \n+ *\n  * @version $Id$\n  * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n  * @since 1.4\n \n     /**\n      * Creates a Base64OutputStream such that all data written is Base64-encoded to the original provided OutputStream.\n-     * \n+     *\n      * @param out\n      *            OutputStream to wrap.\n      */\n     /**\n      * Creates a Base64OutputStream such that all data written is either Base64-encoded or Base64-decoded to the\n      * original provided OutputStream.\n-     * \n+     *\n      * @param out\n      *            OutputStream to wrap.\n      * @param doEncode\n     /**\n      * Creates a Base64OutputStream such that all data written is either Base64-encoded or Base64-decoded to the\n      * original provided OutputStream.\n-     * \n+     *\n      * @param out\n      *            OutputStream to wrap.\n      * @param doEncode\n--- a/src/main/java/org/apache/commons/codec/binary/BaseNCodec.java\n+++ b/src/main/java/org/apache/commons/codec/binary/BaseNCodec.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n     /**\n      * Holds thread context so classes can be thread-safe.\n-     * \n+     *\n      * This class is not itself thread-safe; each thread must allocate its own copy.\n-     * \n+     *\n      * @since 1.7\n      */\n     static class Context {\n \n         /**\n-         * Place holder for the bytes we're dealing with for our based logic. \n+         * Place holder for the bytes we're dealing with for our based logic.\n          * Bitwise operations store and extract the encoding or decoding from this variable.\n          */\n         int ibitWorkArea;\n \n         /**\n-         * Place holder for the bytes we're dealing with for our based logic. \n+         * Place holder for the bytes we're dealing with for our based logic.\n          * Bitwise operations store and extract the encoding or decoding from this variable.\n          */\n         long lbitWorkArea;\n \n     /**\n      * EOF\n-     * \n+     *\n      * @since 1.7\n      */\n     static final int EOF = -1;\n      * Byte used to pad output.\n      */\n     protected static final byte PAD_DEFAULT = '='; // Allow static access to default\n-    \n+\n     protected final byte PAD = PAD_DEFAULT; // instance variable just in case it needs to vary later\n \n     /** Number of bytes in each full block of unencoded data, e.g. 4 for Base64 and 5 for Base32 */\n     private final int encodedBlockSize;\n \n     /**\n-     * Chunksize for encoding. Not used when decoding. \n+     * Chunksize for encoding. Not used when decoding.\n      * A value of zero or less implies no chunking of the encoded data.\n      * Rounded down to nearest multiple of encodedBlockSize.\n      */\n     protected final int lineLength;\n-    \n-    /**\n-     * Size of chunk separator. Not used unless {@link #lineLength} > 0. \n+\n+    /**\n+     * Size of chunk separator. Not used unless {@link #lineLength} > 0.\n      */\n     private final int chunkSeparatorLength;\n \n         return DEFAULT_BUFFER_SIZE;\n     }\n \n-    /** \n+    /**\n      * Increases our buffer by the {@link #DEFAULT_BUFFER_RESIZE_FACTOR}.\n      * @param context the context to be used\n      */\n     }\n \n     /**\n-     * Extracts buffered data into the provided byte[] array, starting at position bPos, \n+     * Extracts buffered data into the provided byte[] array, starting at position bPos,\n      * up to a maximum of bAvail bytes. Returns how many bytes were actually extracted.\n      *\n      * @param b\n      *             if the parameter supplied is not of type byte[]\n      */\n     @Override\n-    public Object decode(Object obj) throws DecoderException {        \n+    public Object decode(Object obj) throws DecoderException {\n         if (obj instanceof byte[]) {\n             return decode((byte[]) obj);\n         } else if (obj instanceof String) {\n \n     /**\n      * Decodes a byte[] containing characters in the Base-N alphabet.\n-     * \n+     *\n      * @param pArray\n      *            A byte array containing Base-N character data\n      * @return a byte array containing binary data\n         readResults(buf, 0, buf.length, context);\n         return buf;\n     }\n-    \n+\n     abstract void encode(byte[] pArray, int i, int length, Context context);  // package protected for access from I/O streams\n \n     abstract void decode(byte[] pArray, int i, int length, Context context); // package protected for access from I/O streams\n-    \n+\n     /**\n      * Returns whether or not the <code>octet</code> is in the current alphabet.\n      * Does not allow whitespace or pad.\n      * @return {@code true} if the value is defined in the current alphabet, {@code false} otherwise.\n      */\n     protected abstract boolean isInAlphabet(byte value);\n-    \n+\n     /**\n      * Tests a given byte array to see if it contains only valid characters within the alphabet.\n      * The method optionally treats whitespace and pad as valid.\n      *\n      * @return {@code true} if all bytes are valid characters in the alphabet or if the byte array is empty;\n      *         {@code false}, otherwise\n-     */    \n+     */\n     public boolean isInAlphabet(byte[] arrayOctet, boolean allowWSPad) {\n         for (int i = 0; i < arrayOctet.length; i++) {\n             if (!isInAlphabet(arrayOctet[i]) &&\n     }\n \n     /**\n-     * Tests a given String to see if it contains only valid characters within the alphabet. \n+     * Tests a given String to see if it contains only valid characters within the alphabet.\n      * The method treats whitespace and PAD as valid.\n      *\n      * @param basen String to test\n      *\n      * @param pArray byte[] array which will later be encoded\n      *\n-     * @return amount of space needed to encoded the supplied array.  \n+     * @return amount of space needed to encoded the supplied array.\n      * Returns a long since a max-len array will require > Integer.MAX_VALUE\n      */\n     public long getEncodedLength(byte[] pArray) {\n--- a/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java\n+++ b/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Abstract superclass for Base-N input streams.\n- * \n+ *\n  * @since 1.5\n  */\n public class BaseNCodecInputStream extends FilterInputStream {\n \n     /**\n      * Reads one <code>byte</code> from this input stream.\n-     * \n+     *\n      * @return the byte as an integer in the range 0 to 255. Returns -1 if EOF has been reached.\n      * @throws IOException\n      *             if an I/O error occurs.\n     /**\n      * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>\n      * from this InputStream.\n-     * \n+     *\n      * @param b\n      *            destination byte array\n      * @param offset\n      *            where to start writing the bytes\n      * @param len\n      *            maximum number of bytes to read\n-     * \n+     *\n      * @return number of bytes read\n      * @throws IOException\n      *             if an I/O error occurs.\n--- a/src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java\n+++ b/src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Abstract superclass for Base-N output streams.\n- * \n+ *\n  * @since 1.5\n  */\n public class BaseNCodecOutputStream extends FilterOutputStream {\n \n     /**\n      * Writes the specified <code>byte</code> to this output stream.\n-     * \n+     *\n      * @param i\n      *            source byte\n      * @throws IOException\n     /**\n      * Writes <code>len</code> bytes from the specified <code>b</code> array starting at <code>offset</code> to this\n      * output stream.\n-     * \n+     *\n      * @param b\n      *            source byte array\n      * @param offset\n      *            where to start reading the bytes\n      * @param len\n      *            maximum number of bytes to write\n-     * \n+     *\n      * @throws IOException\n      *             if an I/O error occurs.\n      * @throws NullPointerException\n     /**\n      * Flushes this output stream and forces any buffered output bytes to be written out to the stream. If propogate is\n      * true, the wrapped stream will also be flushed.\n-     * \n+     *\n      * @param propogate\n      *            boolean flag to indicate whether the wrapped OutputStream should also be flushed.\n      * @throws IOException\n \n     /**\n      * Flushes this output stream and forces any buffered output bytes to be written out to the stream.\n-     * \n+     *\n      * @throws IOException\n      *             if an I/O error occurs.\n      */\n \n     /**\n      * Closes this output stream and releases any system resources associated with the stream.\n-     * \n+     *\n      * @throws IOException\n      *             if an I/O error occurs.\n      */\n--- a/src/main/java/org/apache/commons/codec/binary/BinaryCodec.java\n+++ b/src/main/java/org/apache/commons/codec/binary/BinaryCodec.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Converts between byte arrays and strings of \"0\"s and \"1\"s.\n- * \n+ *\n  * <p>This class is immutable and thread-safe.</p>\n- * \n- * TODO: may want to add more bit vector functions like and/or/xor/nand \n+ *\n+ * TODO: may want to add more bit vector functions like and/or/xor/nand\n  * TODO: also might be good to generate boolean[] from byte[] et cetera.\n- * \n+ *\n  * @since 1.3\n  * @version $Id$\n  */\n \n     /**\n      * Converts an array of raw binary data into an array of ASCII 0 and 1 characters.\n-     * \n+     *\n      * @param raw\n      *                  the raw binary data to convert\n      * @return 0 and 1 ASCII character bytes one for each bit of the argument\n \n     /**\n      * Converts an array of raw binary data into an array of ASCII 0 and 1 chars.\n-     * \n+     *\n      * @param raw\n      *                  the raw binary data to convert\n      * @return 0 and 1 ASCII character chars one for each bit of the argument\n \n     /**\n      * Decodes a byte array where each byte represents an ASCII '0' or '1'.\n-     * \n+     *\n      * @param ascii\n      *                  each byte represents an ASCII '0' or '1'\n      * @return the raw encoded binary where each bit corresponds to a byte in the byte array argument\n \n     /**\n      * Decodes a byte array where each byte represents an ASCII '0' or '1'.\n-     * \n+     *\n      * @param ascii\n      *                  each byte represents an ASCII '0' or '1'\n      * @return the raw encoded binary where each bit corresponds to a byte in the byte array argument\n \n     /**\n      * Decodes a String where each char of the String represents an ASCII '0' or '1'.\n-     * \n+     *\n      * @param ascii\n      *                  String of '0' and '1' characters\n      * @return the raw encoded binary where each bit corresponds to a byte in the byte array argument\n     // ------------------------------------------------------------------------\n     /**\n      * Decodes a char array where each char represents an ASCII '0' or '1'.\n-     * \n+     *\n      * @param ascii\n      *                  each char represents an ASCII '0' or '1'\n      * @return the raw encoded binary where each bit corresponds to a char in the char array argument\n \n     /**\n      * Decodes a byte array where each byte represents an ASCII '0' or '1'.\n-     * \n+     *\n      * @param ascii\n      *                  each byte represents an ASCII '0' or '1'\n      * @return the raw encoded binary where each bit corresponds to a byte in the byte array argument\n \n     /**\n      * Returns {@code true} if the given array is {@code null} or empty (size 0.)\n-     * \n+     *\n      * @param array\n      *            the source array\n      * @return {@code true} if the given array is {@code null} or empty (size 0.)\n     /**\n      * Converts an array of raw binary data into an array of ASCII 0 and 1 character bytes - each byte is a truncated\n      * char.\n-     * \n+     *\n      * @param raw\n      *                  the raw binary data to convert\n      * @return an array of 0 and 1 character bytes for each bit of the argument\n \n     /**\n      * Converts an array of raw binary data into an array of ASCII 0 and 1 characters.\n-     * \n+     *\n      * @param raw\n      *                  the raw binary data to convert\n      * @return an array of 0 and 1 characters for each bit of the argument\n \n     /**\n      * Converts an array of raw binary data into a String of ASCII 0 and 1 characters.\n-     * \n+     *\n      * @param raw\n      *                  the raw binary data to convert\n      * @return a String of 0 and 1 characters representing the binary data\n--- a/src/main/java/org/apache/commons/codec/binary/Hex.java\n+++ b/src/main/java/org/apache/commons/codec/binary/Hex.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n /**\n  * Converts hexadecimal Strings. The charset used for certain operation can be set, the default is set in\n  * {@link #DEFAULT_CHARSET_NAME}\n- * \n+ *\n  * This class is thread-safe.\n- * \n+ *\n  * @since 1.1\n  * @version $Id$\n  */\n \n     /**\n      * Default charset name is {@link Charsets#UTF_8}\n-     * \n+     *\n      * @since 1.7\n      */\n     public static final Charset DEFAULT_CHARSET = Charsets.UTF_8;\n \n     /**\n      * Default charset name is {@link CharEncoding#UTF_8}\n-     * \n+     *\n      * @since 1.4\n      */\n     public static final String DEFAULT_CHARSET_NAME = CharEncoding.UTF_8;\n      * Converts an array of characters representing hexadecimal values into an array of bytes of those same values. The\n      * returned array will be half the length of the passed array, as it takes two characters to represent any given\n      * byte. An exception is thrown if the passed char array has an odd number of elements.\n-     * \n+     *\n      * @param data\n      *            An array of characters containing hexadecimal digits\n      * @return A byte array containing binary data decoded from the supplied char array.\n      * Converts an array of bytes into an array of characters representing the hexadecimal values of each byte in order.\n      * The returned array will be double the length of the passed array, as it takes two characters to represent any\n      * given byte.\n-     * \n+     *\n      * @param data\n      *            a byte[] to convert to Hex characters\n      * @return A char[] containing hexadecimal characters\n      * Converts an array of bytes into an array of characters representing the hexadecimal values of each byte in order.\n      * The returned array will be double the length of the passed array, as it takes two characters to represent any\n      * given byte.\n-     * \n+     *\n      * @param data\n      *            a byte[] to convert to Hex characters\n      * @param toLowerCase\n      * Converts an array of bytes into an array of characters representing the hexadecimal values of each byte in order.\n      * The returned array will be double the length of the passed array, as it takes two characters to represent any\n      * given byte.\n-     * \n+     *\n      * @param data\n      *            a byte[] to convert to Hex characters\n      * @param toDigits\n     /**\n      * Converts an array of bytes into a String representing the hexadecimal values of each byte in order. The returned\n      * String will be double the length of the passed array, as it takes two characters to represent any given byte.\n-     * \n+     *\n      * @param data\n      *            a byte[] to convert to Hex characters\n      * @return A String containing hexadecimal characters\n \n     /**\n      * Converts a hexadecimal character to an integer.\n-     * \n+     *\n      * @param ch\n      *            A character to convert to an integer digit\n      * @param index\n \n     /**\n      * Creates a new codec with the given Charset.\n-     * \n+     *\n      * @param charset\n      *            the charset.\n      * @since 1.7\n \n     /**\n      * Creates a new codec with the given charset name.\n-     * \n+     *\n      * @param charsetName\n      *            the charset name.\n      * @throws UnsupportedCharsetException\n      * Converts an array of character bytes representing hexadecimal values into an array of bytes of those same values.\n      * The returned array will be half the length of the passed array, as it takes two characters to represent any given\n      * byte. An exception is thrown if the passed char array has an odd number of elements.\n-     * \n+     *\n      * @param array\n      *            An array of character bytes containing hexadecimal digits\n      * @return A byte array containing binary data decoded from the supplied byte array (representing characters).\n      * Converts a String or an array of character bytes representing hexadecimal values into an array of bytes of those\n      * same values. The returned array will be half the length of the passed String or array, as it takes two characters\n      * to represent any given byte. An exception is thrown if the passed char array has an odd number of elements.\n-     * \n+     *\n      * @param object\n      *            A String or, an array of character bytes containing hexadecimal digits\n      * @return A byte array containing binary data decoded from the supplied byte array (representing characters).\n      * The conversion from hexadecimal characters to the returned bytes is performed with the charset named by\n      * {@link #getCharset()}.\n      * </p>\n-     * \n+     *\n      * @param array\n      *            a byte[] to convert to Hex characters\n      * @return A byte[] containing the bytes of the hexadecimal characters\n      * The conversion from hexadecimal characters to bytes to be encoded to performed with the charset named by\n      * {@link #getCharset()}.\n      * </p>\n-     * \n+     *\n      * @param object\n      *            a String, or byte[] to convert to Hex characters\n      * @return A char[] containing hexadecimal characters\n \n     /**\n      * Gets the charset.\n-     * \n+     *\n      * @return the charset.\n      * @since 1.7\n      */\n \n     /**\n      * Gets the charset name.\n-     * \n+     *\n      * @return the charset name.\n      * @since 1.4\n      */\n \n     /**\n      * Returns a string representation of the object, which includes the charset name.\n-     * \n+     *\n      * @return a string representation of the object.\n      */\n     @Override\n--- a/src/main/java/org/apache/commons/codec/binary/StringUtils.java\n+++ b/src/main/java/org/apache/commons/codec/binary/StringUtils.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n /**\n  * Converts String to and from bytes using the encodings required by the Java specification. These encodings are specified in <a\n  * href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n- * \n+ *\n  * <p>This class is immutable and thread-safe.</p>\n  *\n  * @see CharEncoding\n public class StringUtils {\n \n     /**\n-     * Calls {@link String#getBytes(Charset)} \n-     * \n+     * Calls {@link String#getBytes(Charset)}\n+     *\n      * @param string\n      *            The string to encode (if null, return null).\n      * @param charset\n     /**\n      * Encodes the given string into a sequence of bytes using the ISO-8859-1 charset, storing the result into a new\n      * byte array.\n-     * \n+     *\n      * @param string\n      *            the String to encode, may be {@code null}\n      * @return encoded bytes, or {@code null} if the input string was {@code null}\n      * This method catches {@link UnsupportedEncodingException} and rethrows it as {@link IllegalStateException}, which\n      * should never happen for a required charset name. Use this method when the encoding is required to be in the JRE.\n      * </p>\n-     * \n+     *\n      * @param string\n      *            the String to encode, may be {@code null}\n      * @param charsetName\n     /**\n      * Encodes the given string into a sequence of bytes using the US-ASCII charset, storing the result into a new byte\n      * array.\n-     * \n+     *\n      * @param string\n      *            the String to encode, may be {@code null}\n      * @return encoded bytes, or {@code null} if the input string was {@code null}\n     /**\n      * Encodes the given string into a sequence of bytes using the UTF-16 charset, storing the result into a new byte\n      * array.\n-     * \n+     *\n      * @param string\n      *            the String to encode, may be {@code null}\n      * @return encoded bytes, or {@code null} if the input string was {@code null}\n     /**\n      * Encodes the given string into a sequence of bytes using the UTF-16BE charset, storing the result into a new byte\n      * array.\n-     * \n+     *\n      * @param string\n      *            the String to encode, may be {@code null}\n      * @return encoded bytes, or {@code null} if the input string was {@code null}\n     /**\n      * Encodes the given string into a sequence of bytes using the UTF-16LE charset, storing the result into a new byte\n      * array.\n-     * \n+     *\n      * @param string\n      *            the String to encode, may be {@code null}\n      * @return encoded bytes, or {@code null} if the input string was {@code null}\n     /**\n      * Encodes the given string into a sequence of bytes using the UTF-8 charset, storing the result into a new byte\n      * array.\n-     * \n+     *\n      * @param string\n      *            the String to encode, may be {@code null}\n      * @return encoded bytes, or {@code null} if the input string was {@code null}\n \n     /**\n      * Constructs a new <code>String</code> by decoding the specified array of bytes using the given charset.\n-     * \n+     *\n      * @param bytes\n      *            The bytes to be decoded into characters\n      * @param charset\n      * This method catches {@link UnsupportedEncodingException} and re-throws it as {@link IllegalStateException}, which\n      * should never happen for a required charset name. Use this method when the encoding is required to be in the JRE.\n      * </p>\n-     * \n+     *\n      * @param bytes\n      *            The bytes to be decoded into characters, may be {@code null}\n      * @param charsetName\n \n     /**\n      * Constructs a new <code>String</code> by decoding the specified array of bytes using the ISO-8859-1 charset.\n-     * \n+     *\n      * @param bytes\n      *            The bytes to be decoded into characters, may be {@code null}\n      * @return A new <code>String</code> decoded from the specified array of bytes using the ISO-8859-1 charset, or\n \n     /**\n      * Constructs a new <code>String</code> by decoding the specified array of bytes using the US-ASCII charset.\n-     * \n+     *\n      * @param bytes\n      *            The bytes to be decoded into characters\n      * @return A new <code>String</code> decoded from the specified array of bytes using the US-ASCII charset,\n \n     /**\n      * Constructs a new <code>String</code> by decoding the specified array of bytes using the UTF-16 charset.\n-     * \n+     *\n      * @param bytes\n      *            The bytes to be decoded into characters\n      * @return A new <code>String</code> decoded from the specified array of bytes using the UTF-16 charset\n \n     /**\n      * Constructs a new <code>String</code> by decoding the specified array of bytes using the UTF-16BE charset.\n-     * \n+     *\n      * @param bytes\n      *            The bytes to be decoded into characters\n      * @return A new <code>String</code> decoded from the specified array of bytes using the UTF-16BE charset,\n \n     /**\n      * Constructs a new <code>String</code> by decoding the specified array of bytes using the UTF-16LE charset.\n-     * \n+     *\n      * @param bytes\n      *            The bytes to be decoded into characters\n      * @return A new <code>String</code> decoded from the specified array of bytes using the UTF-16LE charset,\n \n     /**\n      * Constructs a new <code>String</code> by decoding the specified array of bytes using the UTF-8 charset.\n-     * \n+     *\n      * @param bytes\n      *            The bytes to be decoded into characters\n      * @return A new <code>String</code> decoded from the specified array of bytes using the UTF-8 charset,\n--- a/src/main/java/org/apache/commons/codec/digest/B64.java\n+++ b/src/main/java/org/apache/commons/codec/digest/B64.java\n  * the License.  You may obtain a copy of the License at\n  *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Base64 like method to convert binary bytes into ASCII chars.\n- * \n+ *\n  * TODO: Can Base64 be reused?\n- * \n+ *\n  * <p>This class is immutable and thread-safe.</p>\n- * \n+ *\n  * @version $Id$\n  * @since 1.7\n  */\n \n     /**\n      * Base64 like conversion of bytes to ASCII chars.\n-     * \n+     *\n      * @param b2\n      *            A byte from the result.\n      * @param b1\n \n     /**\n      * Generates a string of random chars from the B64T set.\n-     * \n+     *\n      * @param num\n      *            Number of chars to generate.\n      */\n--- a/src/main/java/org/apache/commons/codec/digest/Crypt.java\n+++ b/src/main/java/org/apache/commons/codec/digest/Crypt.java\n \n /**\n  * GNU libc crypt(3) compatible hash method.\n- * \n+ *\n  * See {@link #crypt(String, String)} for further details.\n- * \n+ *\n  * <p>This class is immutable and thread-safe.</p>\n- * \n+ *\n  * @version $Id$\n  * @since 1.7\n  */\n \n     /**\n      * Encrypts a password in a crypt(3) compatible way.\n-     * \n+     *\n      * A random salt and the default algorithm (currently SHA-512) are used. See\n      * {@link #crypt(String, String)} for details.\n-     * \n+     *\n      * @param keyBytes\n      *            The plaintext password.\n      * @return The hash value.\n \n     /**\n      * Encrypts a password in a crypt(3) compatible way.\n-     * \n+     *\n      * A random salt and the default algorithm (currently SHA-512) are used. See\n      * {@link #crypt(String, String)} for details.\n-     * \n+     *\n      * @param keyBytes\n      *            The plaintext password.\n      * @param salt\n \n     /**\n      * Calculates the digest using the strongest crypt(3) algorithm.\n-     * \n+     *\n      * A random salt and the default algorithm (currently SHA-512) are used.\n-     * \n+     *\n      * @see #crypt(String, String)\n      * @param key\n      *            The plaintext password.\n \n     /**\n      * Encrypts a password in a crypt(3) compatible way.\n-     * \n+     *\n      * <p>\n      * The exact algorithm depends on the format of the salt string:\n      * <ul>\n      * </ul>\n      * The magic strings \"$apr1$\" and \"$2a$\" are not recognised by this method as its output should be identical with\n      * that of the libc implementation.\n-     * \n+     *\n      * <p>\n      * The rest of the salt string is drawn from the set [a-zA-Z0-9./] and is cut at the maximum length of if a \"$\" sign\n      * is encountered. It is therefore valid to enter a complete hash value as salt to e.g. verify a password with:\n      * storedPwd.equals(crypt(enteredPwd, storedPwd))\n-     * \n+     *\n      * <p>\n      * The resulting string starts with the marker string ($6$), continues with the salt value and ends with a \"$\" sign\n      * followed by the actual hash value. For DES the string only contains the salt and actual hash. It's toal length is\n      * <li>MD5: 34 chars\n      * <li>DES: 13 chars\n      * </ul>\n-     * \n+     *\n      * <p>\n      * Example:\n-     * \n+     *\n      * <pre>\n      *      crypt(\"secret\", \"$1$xxxx\") => \"$1$xxxx$aMkevjfEIpa35Bh3G4bAc.\"\n      *      crypt(\"secret\", \"xx\") => \"xxWAum7tHdIUw\"\n      * </pre>\n-     * \n+     *\n      * This method comes in a variation that accepts a byte[] array to support input strings that are not encoded in\n      * UTF-8 but e.g. in ISO-8859-1 where equal characters result in different byte values.\n-     * \n+     *\n      * @see \"The man page of the libc crypt (3) function.\"\n      * @param key\n      *            The plaintext password as entered by the used.\n--- a/src/main/java/org/apache/commons/codec/digest/DigestUtils.java\n+++ b/src/main/java/org/apache/commons/codec/digest/DigestUtils.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Operations to simplify common {@link java.security.MessageDigest} tasks. This class is thread safe.\n- * \n+ *\n  * @version $Id$\n  */\n public class DigestUtils {\n \n     /**\n      * Read through an InputStream and returns the digest for the data\n-     * \n+     *\n      * @param digest\n      *            The MessageDigest to use (e.g. MD5)\n      * @param data\n \n     /**\n      * Calls {@link StringUtils#getBytesUtf8(String)}\n-     * \n+     *\n      * @param data\n      *            the String to encode\n      * @return encoded bytes\n \n     /**\n      * Returns a <code>MessageDigest</code> for the given <code>algorithm</code>.\n-     * \n+     *\n      * @param algorithm\n      *            the name of the algorithm requested. See <a\n      *            href=\"http://java.sun.com/j2se/1.3/docs/guide/security/CryptoSpec.html#AppA\">Appendix A in the Java\n \n     /**\n      * Returns an MD5 MessageDigest.\n-     * \n+     *\n      * @return An MD5 digest instance.\n      * @throws RuntimeException\n      *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n      * <p>\n      * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n      * </p>\n-     * \n+     *\n      * @return An SHA-256 digest instance.\n      * @throws RuntimeException\n      *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n      * <p>\n      * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n      * </p>\n-     * \n+     *\n      * @return An SHA-384 digest instance.\n      * @throws RuntimeException\n      *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n      * <p>\n      * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n      * </p>\n-     * \n+     *\n      * @return An SHA-512 digest instance.\n      * @throws RuntimeException\n      *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n \n     /**\n      * Returns an SHA-1 digest.\n-     * \n+     *\n      * @return An SHA-1 digest instance.\n      * @throws RuntimeException\n      *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n \n     /**\n      * Calculates the MD5 digest and returns the value as a 16 element <code>byte[]</code>.\n-     * \n+     *\n      * @param data\n      *            Data to digest\n      * @return MD5 digest\n \n     /**\n      * Calculates the MD5 digest and returns the value as a 16 element <code>byte[]</code>.\n-     * \n+     *\n      * @param data\n      *            Data to digest\n      * @return MD5 digest\n \n     /**\n      * Calculates the MD5 digest and returns the value as a 16 element <code>byte[]</code>.\n-     * \n+     *\n      * @param data\n      *            Data to digest\n      * @return MD5 digest\n \n     /**\n      * Calculates the MD5 digest and returns the value as a 32 character hex string.\n-     * \n+     *\n      * @param data\n      *            Data to digest\n      * @return MD5 digest as a hex string\n \n     /**\n      * Calculates the MD5 digest and returns the value as a 32 character hex string.\n-     * \n+     *\n      * @param data\n      *            Data to digest\n      * @return MD5 digest as a hex string\n \n     /**\n      * Calculates the MD5 digest and returns the value as a 32 character hex string.\n-     * \n+     *\n      * @param data\n      *            Data to digest\n      * @return MD5 digest as a hex string\n \n     /**\n      * Calculates the SHA-1 digest and returns the value as a <code>byte[]</code>.\n-     * \n+     *\n      * @param data\n      *            Data to digest\n      * @return SHA-1 digest\n \n     /**\n      * Calculates the SHA-1 digest and returns the value as a <code>byte[]</code>.\n-     * \n+     *\n      * @param data\n      *            Data to digest\n      * @return SHA-1 digest\n \n     /**\n      * Calculates the SHA-1 digest and returns the value as a <code>byte[]</code>.\n-     * \n+     *\n      * @param data\n      *            Data to digest\n      * @return SHA-1 digest\n      * <p>\n      * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n      * </p>\n-     * \n+     *\n      * @param data\n      *            Data to digest\n      * @return SHA-256 digest\n      * <p>\n      * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n      * </p>\n-     * \n+     *\n      * @param data\n      *            Data to digest\n      * @return SHA-256 digest\n      * <p>\n      * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n      * </p>\n-     * \n+     *\n      * @param data\n      *            Data to digest\n      * @return SHA-256 digest\n      * <p>\n      * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n      * </p>\n-     * \n+     *\n      * @param data\n      *            Data to digest\n      * @return SHA-256 digest as a hex string\n      * <p>\n      * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n      * </p>\n-     * \n+     *\n      * @param data\n      *            Data to digest\n      * @return SHA-256 digest as a hex string\n      * <p>\n      * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n      * </p>\n-     * \n+     *\n      * @param data\n      *            Data to digest\n      * @return SHA-256 digest as a hex string\n      * <p>\n      * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n      * </p>\n-     * \n+     *\n      * @param data\n      *            Data to digest\n      * @return SHA-384 digest\n      * <p>\n      * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n      * </p>\n-     * \n+     *\n      * @param data\n      *            Data to digest\n      * @return SHA-384 digest\n      * <p>\n      * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n      * </p>\n-     * \n+     *\n      * @param data\n      *            Data to digest\n      * @return SHA-384 digest\n      * <p>\n      * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n      * </p>\n-     * \n+     *\n      * @param data\n      *            Data to digest\n      * @return SHA-384 digest as a hex string\n      * <p>\n      * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n      * </p>\n-     * \n+     *\n      * @param data\n      *            Data to digest\n      * @return SHA-384 digest as a hex string\n      * <p>\n      * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n      * </p>\n-     * \n+     *\n      * @param data\n      *            Data to digest\n      * @return SHA-384 digest as a hex string\n      * <p>\n      * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n      * </p>\n-     * \n+     *\n      * @param data\n      *            Data to digest\n      * @return SHA-512 digest\n      * <p>\n      * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n      * </p>\n-     * \n+     *\n      * @param data\n      *            Data to digest\n      * @return SHA-512 digest\n      * <p>\n      * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n      * </p>\n-     * \n+     *\n      * @param data\n      *            Data to digest\n      * @return SHA-512 digest\n      * <p>\n      * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n      * </p>\n-     * \n+     *\n      * @param data\n      *            Data to digest\n      * @return SHA-512 digest as a hex string\n      * <p>\n      * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n      * </p>\n-     * \n+     *\n      * @param data\n      *            Data to digest\n      * @return SHA-512 digest as a hex string\n      * <p>\n      * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n      * </p>\n-     * \n+     *\n      * @param data\n      *            Data to digest\n      * @return SHA-512 digest as a hex string\n \n     /**\n      * Calculates the SHA-1 digest and returns the value as a hex string.\n-     * \n+     *\n      * @param data\n      *            Data to digest\n      * @return SHA-1 digest as a hex string\n \n     /**\n      * Calculates the SHA-1 digest and returns the value as a hex string.\n-     * \n+     *\n      * @param data\n      *            Data to digest\n      * @return SHA-1 digest as a hex string\n \n     /**\n      * Calculates the SHA-1 digest and returns the value as a hex string.\n-     * \n+     *\n      * @param data\n      *            Data to digest\n      * @return SHA-1 digest as a hex string\n \n     /**\n      * Updates the given {@link MessageDigest}.\n-     * \n+     *\n      * @param messageDigest\n      *            the {@link MessageDigest} to update\n      * @param valueToDigest\n \n     /**\n      * Updates the given {@link MessageDigest}.\n-     * \n+     *\n      * @param messageDigest\n      *            the {@link MessageDigest} to update\n      * @param valueToDigest\n--- a/src/main/java/org/apache/commons/codec/digest/Md5Crypt.java\n+++ b/src/main/java/org/apache/commons/codec/digest/Md5Crypt.java\n  * <p>\n  * The C style comments are from the original C code, the ones with \"//\" from the port.\n  * </p>\n- * \n+ *\n  * <p>This class is immutable and thread-safe.</p>\n- * \n+ *\n  * @version $Id$\n  * @since 1.7\n  */\n \n     /**\n      * Generates an Apache htpasswd compatible \"$apr1$\" MD5 based hash value. *\n-     * \n+     *\n      * The algorithm is identical to the crypt(3) \"$1$\" one but produces different outputs due to the different salt\n      * prefix.\n-     * \n+     *\n      * @param keyBytes\n      *            The plaintext string that should be hashed.\n      * @param salt\n \n     /**\n      * Generates a libc6 crypt() compatible \"$1$\" hash value.\n-     * \n+     *\n      * See {@link Crypt#crypt(String, String)} for details.\n      */\n     public static String md5Crypt(final byte[] keyBytes) throws Exception {\n \n     /**\n      * Generates a libc crypt() compatible \"$1$\" MD5 based hash value.\n-     * \n+     *\n      * See {@link Crypt#crypt(String, String)} for details.\n-     * \n+     *\n      * @param keyBytes\n      *            The plaintext string that should be hashed.\n      * @param salt\n \n     /**\n      * Generates a libc6 crypt() \"$1$\" or Apache htpasswd \"$apr1$\" hash value.\n-     * \n+     *\n      * See {@link Crypt#crypt(String, String)} or {@link #apr1Crypt(String, String)} for details.\n      */\n     public static String md5Crypt(final byte[] keyBytes, final String salt, final String prefix) throws Exception {\n--- a/src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java\n+++ b/src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java\n \n /**\n  * SHA2-based Unix crypt implementation.\n- * \n+ *\n  * <p>\n  * Based on the C implementation released into the Public Domain by Ulrich Drepper &lt;drepper@redhat.com&gt;\n  * http://www.akkadia.org/drepper/SHA-crypt.txt\n  * </p>\n- * \n+ *\n  * <p>\n  * Conversion to Kotlin and from there to Java in 2012 by Christian Hammers &lt;ch@lathspell.de&gt; and likewise put\n  * into the Public Domain.\n  * </p>\n- * \n+ *\n  * <p>This class is immutable and thread-safe.</p>\n- * \n+ *\n  * @version $Id$\n  * @since 1.7\n  */\n      * Default number of rounds if not explicitly specified.\n      */\n     private static final int ROUNDS_DEFAULT = 5000;\n-    \n+\n     /**\n      * Maximum number of rounds.\n      */\n     private static final int ROUNDS_MAX = 999999999;\n-    \n+\n     /**\n      * Minimum number of rounds.\n      */\n     private static final int ROUNDS_MIN = 1000;\n-    \n+\n     /**\n      * Prefix for optional rounds specification.\n      */\n     private static final String ROUNDS_PREFIX = \"rounds=\";\n-    \n+\n     /**\n      * The MessageDigest algorithm.\n      */\n     private static final String SHA256_ALGORITHM = \"SHA-256\";\n-    \n+\n     /**\n      * The number of bytes the final hash value will have.\n      */\n     private static final int SHA256_BLOCKSIZE = 32;\n-    \n+\n     /**\n      * The prefixes that can be used to identify this crypt() variant.\n      */\n     static final String SHA256_PREFIX = \"$5$\";\n-    \n+\n     private static final String SHA512_ALGORITHM = \"SHA-512\";\n-    \n+\n     private static final int SHA512_BLOCKSIZE = 64;\n-    \n+\n     static final String SHA512_PREFIX = \"$6$\";\n \n     /**\n      * Generates a libc crypt() compatible \"$5$\" hash value with random salt.\n-     * \n+     *\n      * See {@link Crypt#crypt(String, String)} for details.\n      */\n     public static String sha256Crypt(byte[] keyBytes) throws Exception {\n \n     /**\n      * Generates a libc6 crypt() compatible \"$5$\" hash value.\n-     * \n+     *\n      * See {@link Crypt#crypt(String, String)} for details.\n      */\n     public static String sha256Crypt(byte[] keyBytes, String salt) throws Exception {\n \n     /**\n      * Generates a libc6 crypt() compatible \"$5$\" or \"$6$\" SHA2 based hash value.\n-     * \n+     *\n      * This is a nearly line by line conversion of the original C function. The numbered comments are from the algorithm\n      * description, the short C-style ones from the original C code and the ones with \"Remark\" from me.\n-     * \n+     *\n      * See {@link Crypt#crypt(String, String)} for details.\n-     * \n+     *\n      * @param keyBytes\n      *            The plaintext that should be hashed.\n      * @param salt_string\n \n     /**\n      * Generates a libc crypt() compatible \"$6$\" hash value with random salt.\n-     * \n+     *\n      * See {@link Crypt#crypt(String, String)} for details.\n      */\n     public static String sha512Crypt(byte[] keyBytes) throws Exception {\n \n     /**\n      * Generates a libc6 crypt() compatible \"$6$\" hash value.\n-     * \n+     *\n      * See {@link Crypt#crypt(String, String)} for details.\n      */\n     public static String sha512Crypt(byte[] keyBytes, String salt) throws Exception {\n--- a/src/main/java/org/apache/commons/codec/digest/UnixCrypt.java\n+++ b/src/main/java/org/apache/commons/codec/digest/UnixCrypt.java\n         51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n         61, 62, 63, 0, 0, 0, 0, 0\n     };\n-    \n+\n     private static final int COV2CHAR[] = {\n         46, 47, 48, 49, 50, 51, 52, 53, 54, 55,\n         56, 57, 65, 66, 67, 68, 69, 70, 71, 72,\n         109, 110, 111, 112, 113, 114, 115, 116, 117, 118,\n         119, 120, 121, 122\n     };\n-    \n+\n     private static final char SALT_CHARS[] = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789./\".toCharArray();\n-    \n+\n     private static final boolean SHIFT2[] = {\n         false, false, true, true, true, true, true, true, false, true,\n         true, true, true, true, true, false\n     };\n-    \n+\n     private static final int SKB[][] = {\n         {\n             0, 16, 0x20000000, 0x20000010, 0x10000, 0x10010, 0x20010000, 0x20010010, 2048, 2064,\n             10274, 0x4002822, 0x42822, 0x4042822\n         }\n     };\n-    \n+\n     private static final int SPTRANS[][] = {\n         {\n             0x820200, 0x20000, 0x80800000, 0x80820200, 0x800000, 0x80020200, 0x80020000, 0x80800000, 0x80020200, 0x820200,\n--- a/src/main/java/org/apache/commons/codec/language/AbstractCaverphone.java\n+++ b/src/main/java/org/apache/commons/codec/language/AbstractCaverphone.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Encodes a string into a Caverphone value.\n- * \n+ *\n  * This is an algorithm created by the Caversham Project at the University of Otago. It implements the Caverphone 2.0\n  * algorithm:\n- * \n+ *\n  * <p>This class is immutable and thread-safe.</p>\n- * \n+ *\n  * @version $Id: Caverphone.java 1075947 2011-03-01 17:56:14Z ggregory $\n  * @see <a href=\"http://en.wikipedia.org/wiki/Caverphone\">Wikipedia - Caverphone</a>\n  * @since 1.5\n     /**\n      * Encodes an Object using the caverphone algorithm. This method is provided in order to satisfy the requirements of\n      * the Encoder interface, and will throw an EncoderException if the supplied object is not of type java.lang.String.\n-     * \n+     *\n      * @param source\n      *            Object to encode\n      * @return An object (or type java.lang.String) containing the caverphone code which corresponds to the String\n \n     /**\n      * Tests if the encodings of two strings are equal.\n-     * \n+     *\n      * This method might be promoted to a new AbstractStringEncoder superclass.\n-     * \n+     *\n      * @param str1\n      *            First of two strings to compare\n      * @param str2\n--- a/src/main/java/org/apache/commons/codec/language/Caverphone.java\n+++ b/src/main/java/org/apache/commons/codec/language/Caverphone.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Encodes a string into a Caverphone 2.0 value. Delegate to a {@link Caverphone2} instance.\n- * \n+ *\n  * This is an algorithm created by the Caversham Project at the University of Otago. It implements the Caverphone 2.0\n  * algorithm:\n- * \n+ *\n  * @version $Id: Caverphone.java 1079535 2011-03-08 20:54:37Z ggregory $\n  * @see <a href=\"http://en.wikipedia.org/wiki/Caverphone\">Wikipedia - Caverphone</a>\n  * @see <a href=\"http://caversham.otago.ac.nz/files/working/ctp150804.pdf\">Caverphone 2.0 specification</a>\n \n     /**\n      * Encodes the given String into a Caverphone value.\n-     * \n+     *\n      * @param source\n      *            String the source string\n      * @return A caverphone code for the given String\n     /**\n      * Encodes an Object using the caverphone algorithm. This method is provided in order to satisfy the requirements of\n      * the Encoder interface, and will throw an EncoderException if the supplied object is not of type java.lang.String.\n-     * \n+     *\n      * @param obj\n      *            Object to encode\n      * @return An object (or type java.lang.String) containing the caverphone code which corresponds to the String\n \n     /**\n      * Encodes a String using the Caverphone algorithm.\n-     * \n+     *\n      * @param str\n      *            String object to encode\n      * @return The caverphone code corresponding to the String supplied\n \n     /**\n      * Tests if the caverphones of two strings are identical.\n-     * \n+     *\n      * @param str1\n      *            First of two strings to compare\n      * @param str2\n--- a/src/main/java/org/apache/commons/codec/language/Caverphone1.java\n+++ b/src/main/java/org/apache/commons/codec/language/Caverphone1.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Encodes a string into a Caverphone 1.0 value.\n- * \n+ *\n  * This is an algorithm created by the Caversham Project at the University of Otago. It implements the Caverphone 1.0\n  * algorithm:\n- * \n+ *\n  * @version $Id: Caverphone.java 1075947 2011-03-01 17:56:14Z ggregory $\n  * @see <a href=\"http://en.wikipedia.org/wiki/Caverphone\">Wikipedia - Caverphone</a>\n  * @see <a href=\"http://caversham.otago.ac.nz/files/working/ctp060902.pdf\">Caverphone 1.0 specification</a>\n  * @since 1.5\n- * \n+ *\n  * <p>This class is immutable and thread-safe.</p>\n  */\n public class Caverphone1 extends AbstractCaverphone {\n \n     /**\n      * Encodes the given String into a Caverphone value.\n-     * \n+     *\n      * @param source\n      *            String the source string\n      * @return A caverphone code for the given String\n--- a/src/main/java/org/apache/commons/codec/language/Caverphone2.java\n+++ b/src/main/java/org/apache/commons/codec/language/Caverphone2.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Encodes a string into a Caverphone 2.0 value.\n- * \n+ *\n  * This is an algorithm created by the Caversham Project at the University of Otago. It implements the Caverphone 2.0\n  * algorithm:\n- * \n+ *\n  * @version $Id: Caverphone.java 1075947 2011-03-01 17:56:14Z ggregory $\n  * @see <a href=\"http://en.wikipedia.org/wiki/Caverphone\">Wikipedia - Caverphone</a>\n  * @see <a href=\"http://caversham.otago.ac.nz/files/working/ctp150804.pdf\">Caverphone 2.0 specification</a>\n  * @since 1.5\n- * \n+ *\n  * <p>This class is immutable and thread-safe.</p>\n  */\n public class Caverphone2 extends AbstractCaverphone {\n \n     /**\n      * Encodes the given String into a Caverphone 2.0 value.\n-     * \n+     *\n      * @param source\n      *            String the source string\n      * @return A caverphone code for the given String\n--- a/src/main/java/org/apache/commons/codec/language/ColognePhonetic.java\n+++ b/src/main/java/org/apache/commons/codec/language/ColognePhonetic.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * Implements the <a href=\"http://de.wikipedia.org/wiki/K%C3%B6lner_Phonetik\">K&ouml;lner Phonetik</a> (Cologne Phonetic)\n  * algorithm issued by Hans Joachim Postel in 1969.\n  * </p>\n- * \n+ *\n  * <p>\n  * The <i>K&ouml;lner Phonetik</i> is a phonetic algorithm which is optimized for the German language. It is related to the\n  * well-known soundex algorithm.\n  * </p>\n- * \n+ *\n  * <h2>Algorithm</h2>\n- * \n+ *\n  * <ul>\n- * \n+ *\n  * <li>\n  * <h3>Step 1:</h3>\n  * After preprocessing (conversion to upper case, transcription of <a\n  * <td align=\"center\">0</td>\n  * </tr>\n  * <tr>\n- * \n+ *\n  * <td>H</td>\n  * <td></td>\n  * <td align=\"center\">-</td>\n  * <tr>\n  * <td>P</td>\n  * <td>not before H</td>\n- * \n+ *\n  * </tr>\n  * <tr>\n  * <td>D, T</td>\n  * <td rowspan=\"2\" align=\"center\">3</td>\n  * </tr>\n  * <tr>\n- * \n+ *\n  * <td>P</td>\n  * <td>before H</td>\n  * </tr>\n  * <tr>\n  * <td rowspan=\"2\">C</td>\n  * <td>at onset before A, H, K, L, O, Q, R, U, X</td>\n- * \n+ *\n  * </tr>\n  * <tr>\n  * <td>before A, H, K, O, Q, U, X except after S, Z</td>\n  * <tr>\n  * <td>L</td>\n  * <td></td>\n- * \n+ *\n  * <td align=\"center\">5</td>\n  * </tr>\n  * <tr>\n  * <td></td>\n  * <td align=\"center\">7</td>\n  * </tr>\n- * \n+ *\n  * <tr>\n  * <td>S, Z</td>\n  * <td></td>\n  * <tr>\n  * <td>at onset except before A, H, K, L, O, Q, R, U, X</td>\n  * </tr>\n- * \n+ *\n  * <tr>\n  * <td>not before A, H, K, O, Q, U, X</td>\n  * </tr>\n  * <small><i>(Source: <a href= \"http://de.wikipedia.org/wiki/K%C3%B6lner_Phonetik#Buchstabencodes\" >Wikipedia (de):\n  * K&ouml;lner Phonetik -- Buchstabencodes</a>)</i></small>\n  * </p>\n- * \n+ *\n  * <h4>Example:</h4>\n- * \n+ *\n  * {@code \"M}&uuml;{@code ller-L}&uuml;{@code denscheidt\" => \"MULLERLUDENSCHEIDT\" => \"6005507500206880022\"}\n- * \n+ *\n  * </li>\n- * \n+ *\n  * <li>\n  * <h3>Step 2:</h3>\n  * Collapse of all multiple consecutive code digits.\n  * <h4>Example:</h4>\n  * {@code \"6005507500206880022\" => \"6050750206802\"}</li>\n- * \n+ *\n  * <li>\n  * <h3>Step 3:</h3>\n  * Removal of all codes \"0\" except at the beginning. This means that two or more identical consecutive digits can occur\n  * if they occur after removing the \"0\" digits.\n- * \n+ *\n  * <h4>Example:</h4>\n  * {@code \"6050750206802\" => \"65752682\"}</li>\n- * \n+ *\n  * </ul>\n- * \n+ *\n  * This class is thread-safe.\n- * \n+ *\n  * @see <a href=\"http://de.wikipedia.org/wiki/K%C3%B6lner_Phonetik\">Wikipedia (de): K&ouml;lner Phonetik (in German)</a>\n  * @since 1.5\n  */\n      * <p>\n      * In contrast to the initial description of the algorithm, this implementation does the encoding in one pass.\n      * </p>\n-     * \n+     *\n      * @param text\n      * @return the corresponding encoding according to the <i>K&ouml;lner Phonetik</i> algorithm\n      */\n--- a/src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java\n+++ b/src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * but is not volatile, and accesses are not synchronized.\n  * If an instance of the class is shared between threads, the caller needs to ensure that suitable synchronization\n  * is used to ensure safe publication of the value between threads, and must not invoke {@link #setMaxCodeLen(int)}\n- * after initial setup. \n- * \n+ * after initial setup.\n+ *\n  * @version $Id$\n  */\n public class DoubleMetaphone implements StringEncoder {\n     /**\n      * Prefixes when present which are not pronounced\n      */\n-    private static final String[] SILENT_START = \n+    private static final String[] SILENT_START =\n     { \"GN\", \"KN\", \"PN\", \"WR\", \"PS\" };\n-    private static final String[] L_R_N_M_B_H_F_V_W_SPACE = \n+    private static final String[] L_R_N_M_B_H_F_V_W_SPACE =\n     { \"L\", \"R\", \"N\", \"M\", \"B\", \"H\", \"F\", \"V\", \"W\", \" \" };\n-    private static final String[] ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER = \n+    private static final String[] ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER =\n     { \"ES\", \"EP\", \"EB\", \"EL\", \"EY\", \"IB\", \"IL\", \"IN\", \"IE\", \"EI\", \"ER\" };\n-    private static final String[] L_T_K_S_N_M_B_Z = \n+    private static final String[] L_T_K_S_N_M_B_Z =\n     { \"L\", \"T\", \"K\", \"S\", \"N\", \"M\", \"B\", \"Z\" };\n \n     /**\n     public DoubleMetaphone() {\n         super();\n     }\n-    \n+\n     /**\n      * Encode a value with Double Metaphone\n      *\n     public String doubleMetaphone(String value) {\n         return doubleMetaphone(value, false);\n     }\n-    \n+\n     /**\n      * Encode a value with Double Metaphone, optionally using the alternate\n      * encoding.\n         if (value == null) {\n             return null;\n         }\n-        \n+\n         boolean slavoGermanic = isSlavoGermanic(value);\n         int index = isSilentStart(value) ? 1 : 0;\n-        \n+\n         DoubleMetaphoneResult result = new DoubleMetaphoneResult(this.getMaxCodeLen());\n-        \n+\n         while (!result.isComplete() && index <= value.length() - 1) {\n             switch (value.charAt(index)) {\n             case 'A':\n                 // A C with a Cedilla\n                 result.append('S');\n                 index++;\n-                break; \n+                break;\n             case 'C':\n                 index = handleC(value, result, index);\n                 break;\n \n         return alternate ? result.getAlternate() : result.getPrimary();\n     }\n-    \n-    /**\n-     * Encode the value using DoubleMetaphone.  It will only work if \n+\n+    /**\n+     * Encode the value using DoubleMetaphone.  It will only work if\n      * <code>obj</code> is a <code>String</code> (like <code>Metaphone</code>).\n      *\n      * @param obj Object to encode (should be of type String)\n     @Override\n     public Object encode(Object obj) throws EncoderException {\n         if (!(obj instanceof String)) {\n-            throw new EncoderException(\"DoubleMetaphone encode parameter is not of type String\"); \n-        } \n+            throw new EncoderException(\"DoubleMetaphone encode parameter is not of type String\");\n+        }\n         return doubleMetaphone((String) obj);\n     }\n \n      */\n     @Override\n     public String encode(String value) {\n-        return doubleMetaphone(value);   \n+        return doubleMetaphone(value);\n     }\n \n     /**\n      * Check if the Double Metaphone values of two <code>String</code> values\n      * are equal.\n-     * \n+     *\n      * @param value1 The left-hand side of the encoded {@link String#equals(Object)}.\n      * @param value2 The right-hand side of the encoded {@link String#equals(Object)}.\n      * @return {@code true} if the encoded <code>String</code>s are equal;\n     public boolean isDoubleMetaphoneEqual(String value1, String value2) {\n         return isDoubleMetaphoneEqual(value1, value2, false);\n     }\n-    \n+\n     /**\n      * Check if the Double Metaphone values of two <code>String</code> values\n      * are equal, optionally using the alternate value.\n-     * \n+     *\n      * @param value1 The left-hand side of the encoded {@link String#equals(Object)}.\n      * @param value2 The right-hand side of the encoded {@link String#equals(Object)}.\n      * @param alternate use the alternate value if {@code true}.\n      * @return {@code true} if the encoded <code>String</code>s are equal;\n      *          {@code false} otherwise.\n      */\n-    public boolean isDoubleMetaphoneEqual(String value1, \n-                                          String value2, \n+    public boolean isDoubleMetaphoneEqual(String value1,\n+                                          String value2,\n                                           boolean alternate) {\n         return doubleMetaphone(value1, alternate).equals(doubleMetaphone\n                                                          (value2, alternate));\n     }\n-    \n+\n     /**\n      * Returns the maxCodeLen.\n      * @return int\n     /**\n      * Handles 'A', 'E', 'I', 'O', 'U', and 'Y' cases\n      */\n-    private int handleAEIOUY(DoubleMetaphoneResult result, int \n+    private int handleAEIOUY(DoubleMetaphoneResult result, int\n                              index) {\n         if (index == 0) {\n             result.append('A');\n         }\n         return index + 1;\n     }\n-    \n+\n     /**\n      * Handles 'C' cases\n      */\n-    private int handleC(String value, \n-                        DoubleMetaphoneResult result, \n+    private int handleC(String value,\n+                        DoubleMetaphoneResult result,\n                         int index) {\n         if (conditionC0(value, index)) {  // very confusing, moved out\n             result.append('K');\n             index += 2;\n         } else if (contains(value, index, 2, \"CH\")) {\n             index = handleCH(value, result, index);\n-        } else if (contains(value, index, 2, \"CZ\") && \n+        } else if (contains(value, index, 2, \"CZ\") &&\n                    !contains(value, index - 2, 4, \"WICZ\")) {\n             //-- \"Czerny\" --//\n             result.append('S', 'X');\n             //-- \"focaccia\" --//\n             result.append('X');\n             index += 3;\n-        } else if (contains(value, index, 2, \"CC\") && \n+        } else if (contains(value, index, 2, \"CC\") &&\n                    !(index == 1 && charAt(value, 0) == 'M')) {\n             //-- double \"cc\" but not \"McClelland\" --//\n             return handleCC(value, result, index);\n             index += 2;\n         } else {\n             result.append('K');\n-            if (contains(value, index + 1, 2, \" C\", \" Q\", \" G\")) { \n+            if (contains(value, index + 1, 2, \" C\", \" Q\", \" G\")) {\n                 //-- Mac Caffrey, Mac Gregor --//\n                 index += 3;\n-            } else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && \n+            } else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") &&\n                        !contains(value, index + 1, 2, \"CE\", \"CI\")) {\n                 index += 2;\n             } else {\n                 index++;\n             }\n         }\n-        \n+\n         return index;\n     }\n \n     /**\n      * Handles 'CC' cases\n      */\n-    private int handleCC(String value, \n-                         DoubleMetaphoneResult result, \n+    private int handleCC(String value,\n+                         DoubleMetaphoneResult result,\n                          int index) {\n-        if (contains(value, index + 2, 1, \"I\", \"E\", \"H\") && \n+        if (contains(value, index + 2, 1, \"I\", \"E\", \"H\") &&\n             !contains(value, index + 2, 2, \"HU\")) {\n             //-- \"bellocchio\" but not \"bacchus\" --//\n-            if ((index == 1 && charAt(value, index - 1) == 'A') || \n+            if ((index == 1 && charAt(value, index - 1) == 'A') ||\n                 contains(value, index - 1, 5, \"UCCEE\", \"UCCES\")) {\n                 //-- \"accident\", \"accede\", \"succeed\" --//\n                 result.append(\"KS\");\n             result.append('K');\n             index += 2;\n         }\n-        \n-        return index;\n-    }\n-    \n+\n+        return index;\n+    }\n+\n     /**\n      * Handles 'CH' cases\n      */\n-    private int handleCH(String value, \n-                         DoubleMetaphoneResult result, \n+    private int handleCH(String value,\n+                         DoubleMetaphoneResult result,\n                          int index) {\n         if (index > 0 && contains(value, index, 4, \"CHAE\")) {   // Michael\n             result.append('K', 'X');\n     /**\n      * Handles 'D' cases\n      */\n-    private int handleD(String value, \n-                        DoubleMetaphoneResult result, \n+    private int handleD(String value,\n+                        DoubleMetaphoneResult result,\n                         int index) {\n         if (contains(value, index, 2, \"DG\")) {\n             //-- \"Edge\" --//\n     /**\n      * Handles 'G' cases\n      */\n-    private int handleG(String value, \n-                        DoubleMetaphoneResult result, \n-                        int index, \n+    private int handleG(String value,\n+                        DoubleMetaphoneResult result,\n+                        int index,\n                         boolean slavoGermanic) {\n         if (charAt(value, index + 1) == 'H') {\n             index = handleGH(value, result, index);\n         } else if (charAt(value, index + 1) == 'N') {\n             if (index == 1 && isVowel(charAt(value, 0)) && !slavoGermanic) {\n                 result.append(\"KN\", \"N\");\n-            } else if (!contains(value, index + 2, 2, \"EY\") && \n+            } else if (!contains(value, index + 2, 2, \"EY\") &&\n                        charAt(value, index + 1) != 'Y' && !slavoGermanic) {\n                 result.append(\"N\", \"KN\");\n             } else {\n             //-- -ges-, -gep-, -gel-, -gie- at beginning --//\n             result.append('K', 'J');\n             index += 2;\n-        } else if ((contains(value, index + 1, 2, \"ER\") || \n+        } else if ((contains(value, index + 1, 2, \"ER\") ||\n                     charAt(value, index + 1) == 'Y') &&\n                    !contains(value, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\") &&\n-                   !contains(value, index - 1, 1, \"E\", \"I\") && \n+                   !contains(value, index - 1, 1, \"E\", \"I\") &&\n                    !contains(value, index - 1, 3, \"RGY\", \"OGY\")) {\n             //-- -ger-, -gy- --//\n             result.append('K', 'J');\n             index += 2;\n-        } else if (contains(value, index + 1, 1, \"E\", \"I\", \"Y\") || \n+        } else if (contains(value, index + 1, 1, \"E\", \"I\", \"Y\") ||\n                    contains(value, index - 1, 4, \"AGGI\", \"OGGI\")) {\n             //-- Italian \"biaggi\" --//\n             if ((contains(value, 0 ,4, \"VAN \", \"VON \") || contains(value, 0, 3, \"SCH\")) || contains(value, index + 1, 2, \"ET\")) {\n         }\n         return index;\n     }\n-    \n+\n     /**\n      * Handles 'GH' cases\n      */\n-    private int handleGH(String value, \n-                         DoubleMetaphoneResult result, \n+    private int handleGH(String value,\n+                         DoubleMetaphoneResult result,\n                          int index) {\n         if (index > 0 && !isVowel(charAt(value, index - 1))) {\n             result.append('K');\n             //-- Parker's rule (with some further refinements) - \"hugh\"\n             index += 2;\n         } else {\n-            if (index > 2 && charAt(value, index - 1) == 'U' && \n+            if (index > 2 && charAt(value, index - 1) == 'U' &&\n                 contains(value, index - 3, 1, \"C\", \"G\", \"L\", \"R\", \"T\")) {\n                 //-- \"laugh\", \"McLaughlin\", \"cough\", \"gough\", \"rough\", \"tough\"\n                 result.append('F');\n     /**\n      * Handles 'H' cases\n      */\n-    private int handleH(String value, \n-                        DoubleMetaphoneResult result, \n+    private int handleH(String value,\n+                        DoubleMetaphoneResult result,\n                         int index) {\n         //-- only keep if first & before vowel or between 2 vowels --//\n-        if ((index == 0 || isVowel(charAt(value, index - 1))) && \n+        if ((index == 0 || isVowel(charAt(value, index - 1))) &&\n             isVowel(charAt(value, index + 1))) {\n             result.append('H');\n             index += 2;\n         }\n         return index;\n     }\n-    \n+\n     /**\n      * Handles 'J' cases\n      */\n-    private int handleJ(String value, DoubleMetaphoneResult result, int index, \n+    private int handleJ(String value, DoubleMetaphoneResult result, int index,\n                         boolean slavoGermanic) {\n         if (contains(value, index, 4, \"JOSE\") || contains(value, 0, 4, \"SAN \")) {\n                 //-- obvious Spanish, \"Jose\", \"San Jacinto\" --//\n-                if ((index == 0 && (charAt(value, index + 4) == ' ') || \n+                if ((index == 0 && (charAt(value, index + 4) == ' ') ||\n                      value.length() == 4) || contains(value, 0, 4, \"SAN \")) {\n                     result.append('H');\n                 } else {\n             } else {\n                 if (index == 0 && !contains(value, index, 4, \"JOSE\")) {\n                     result.append('J', 'A');\n-                } else if (isVowel(charAt(value, index - 1)) && !slavoGermanic && \n+                } else if (isVowel(charAt(value, index - 1)) && !slavoGermanic &&\n                               (charAt(value, index + 1) == 'A' || charAt(value, index + 1) == 'O')) {\n                     result.append('J', 'H');\n                 } else if (index == value.length() - 1) {\n             }\n         return index;\n     }\n-    \n+\n     /**\n      * Handles 'L' cases\n      */\n-    private int handleL(String value, \n-                        DoubleMetaphoneResult result, \n+    private int handleL(String value,\n+                        DoubleMetaphoneResult result,\n                         int index) {\n         if (charAt(value, index + 1) == 'L') {\n             if (conditionL0(value, index)) {\n     /**\n      * Handles 'P' cases\n      */\n-    private int handleP(String value, \n-                        DoubleMetaphoneResult result, \n+    private int handleP(String value,\n+                        DoubleMetaphoneResult result,\n                         int index) {\n         if (charAt(value, index + 1) == 'H') {\n             result.append('F');\n     /**\n      * Handles 'R' cases\n      */\n-    private int handleR(String value, \n-                        DoubleMetaphoneResult result, \n-                        int index, \n+    private int handleR(String value,\n+                        DoubleMetaphoneResult result,\n+                        int index,\n                         boolean slavoGermanic) {\n-        if (index == value.length() - 1 && !slavoGermanic && \n-            contains(value, index - 2, 2, \"IE\") && \n+        if (index == value.length() - 1 && !slavoGermanic &&\n+            contains(value, index - 2, 2, \"IE\") &&\n             !contains(value, index - 4, 2, \"ME\", \"MA\")) {\n             result.appendAlternate('R');\n         } else {\n     /**\n      * Handles 'S' cases\n      */\n-    private int handleS(String value, \n-                        DoubleMetaphoneResult result, \n-                        int index, \n+    private int handleS(String value,\n+                        DoubleMetaphoneResult result,\n+                        int index,\n                         boolean slavoGermanic) {\n         if (contains(value, index - 1, 3, \"ISL\", \"YSL\")) {\n             //-- special cases \"island\", \"isle\", \"carlisle\", \"carlysle\" --//\n             result.append('X', 'S');\n             index++;\n         } else if (contains(value, index, 2, \"SH\")) {\n-            if (contains(value, index + 1, 4, \n+            if (contains(value, index + 1, 4,\n                          \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n                 //-- germanic --//\n                 result.append('S');\n         } else if (contains(value, index, 2, \"SC\")) {\n             index = handleSC(value, result, index);\n         } else {\n-            if (index == value.length() - 1 && contains(value, index - 2, \n+            if (index == value.length() - 1 && contains(value, index - 2,\n                                                         2, \"AI\", \"OI\")){\n                 //-- french e.g. \"resnais\", \"artois\" --//\n                 result.appendAlternate('S');\n     /**\n      * Handles 'SC' cases\n      */\n-    private int handleSC(String value, \n-                         DoubleMetaphoneResult result, \n+    private int handleSC(String value,\n+                         DoubleMetaphoneResult result,\n                          int index) {\n         if (charAt(value, index + 2) == 'H') {\n             //-- Schlesinger's rule --//\n-            if (contains(value, index + 3, \n+            if (contains(value, index + 3,\n                          2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\")) {\n                 //-- Dutch origin, e.g. \"school\", \"schooner\" --//\n                 if (contains(value, index + 3, 2, \"ER\", \"EN\")) {\n     /**\n      * Handles 'T' cases\n      */\n-    private int handleT(String value, \n-                        DoubleMetaphoneResult result, \n+    private int handleT(String value,\n+                        DoubleMetaphoneResult result,\n                         int index) {\n         if (contains(value, index, 4, \"TION\")) {\n             result.append('X');\n         } else if (contains(value, index, 3, \"TIA\", \"TCH\")) {\n             result.append('X');\n             index += 3;\n-        } else if (contains(value, index, 2, \"TH\") || contains(value, index, \n+        } else if (contains(value, index, 2, \"TH\") || contains(value, index,\n                                                                3, \"TTH\")) {\n-            if (contains(value, index + 2, 2, \"OM\", \"AM\") || \n+            if (contains(value, index + 2, 2, \"OM\", \"AM\") ||\n                 //-- special case \"thomas\", \"thames\" or germanic --//\n-                contains(value, 0, 4, \"VAN \", \"VON \") || \n+                contains(value, 0, 4, \"VAN \", \"VON \") ||\n                 contains(value, 0, 3, \"SCH\")) {\n                 result.append('T');\n             } else {\n     /**\n      * Handles 'W' cases\n      */\n-    private int handleW(String value, \n-                        DoubleMetaphoneResult result, \n+    private int handleW(String value,\n+                        DoubleMetaphoneResult result,\n                         int index) {\n         if (contains(value, index, 2, \"WR\")) {\n             //-- can also be in middle of word --//\n             result.append('R');\n             index += 2;\n         } else {\n-            if (index == 0 && (isVowel(charAt(value, index + 1)) || \n+            if (index == 0 && (isVowel(charAt(value, index + 1)) ||\n                                contains(value, index, 2, \"WH\"))) {\n                 if (isVowel(charAt(value, index + 1))) {\n                     //-- Wasserman should match Vasserman --//\n                 }\n                 index++;\n             } else if ((index == value.length() - 1 && isVowel(charAt(value, index - 1))) ||\n-                       contains(value, index - 1, \n+                       contains(value, index - 1,\n                                 5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\") ||\n                        contains(value, 0, 3, \"SCH\")) {\n                 //-- Arnow should match Arnoff --//\n         }\n         return index;\n     }\n-    \n+\n     /**\n      * Handles 'X' cases\n      */\n-    private int handleX(String value, \n-                        DoubleMetaphoneResult result, \n+    private int handleX(String value,\n+                        DoubleMetaphoneResult result,\n                         int index) {\n         if (index == 0) {\n             result.append('S');\n             index++;\n         } else {\n-            if (!((index == value.length() - 1) && \n-                  (contains(value, index - 3, 3, \"IAU\", \"EAU\") || \n+            if (!((index == value.length() - 1) &&\n+                  (contains(value, index - 3, 3, \"IAU\", \"EAU\") ||\n                    contains(value, index - 2, 2, \"AU\", \"OU\")))) {\n                 //-- French e.g. breaux --//\n                 result.append(\"KS\");\n     /**\n      * Handles 'Z' cases\n      */\n-    private int handleZ(String value, DoubleMetaphoneResult result, int index, \n+    private int handleZ(String value, DoubleMetaphoneResult result, int index,\n                         boolean slavoGermanic) {\n         if (charAt(value, index + 1) == 'H') {\n             //-- Chinese pinyin e.g. \"zhao\" or Angelina \"Zhang\" --//\n                     contains(value, index - 2, 6, \"BACHER\", \"MACHER\");\n         }\n     }\n-    \n+\n     /**\n      * Complex condition 0 for 'CH'\n      */\n     private boolean conditionCH0(String value, int index) {\n         if (index != 0) {\n             return false;\n-        } else if (!contains(value, index + 1, 5, \"HARAC\", \"HARIS\") && \n+        } else if (!contains(value, index + 1, 5, \"HARAC\", \"HARIS\") &&\n                    !contains(value, index + 1, 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")) {\n             return false;\n         } else if (contains(value, 0, 5, \"CHORE\")) {\n             return true;\n         }\n     }\n-    \n+\n     /**\n      * Complex condition 1 for 'CH'\n      */\n     private boolean conditionCH1(String value, int index) {\n-        return ((contains(value, 0, 4, \"VAN \", \"VON \") || contains(value, 0, \n+        return ((contains(value, 0, 4, \"VAN \", \"VON \") || contains(value, 0,\n                                                                    3, \"SCH\")) ||\n                 contains(value, index - 2, 6, \"ORCHES\", \"ARCHIT\", \"ORCHID\") ||\n                 contains(value, index + 2, 1, \"T\", \"S\") ||\n                 ((contains(value, index - 1, 1, \"A\", \"O\", \"U\", \"E\") || index == 0) &&\n                  (contains(value, index + 2, 1, L_R_N_M_B_H_F_V_W_SPACE) || index + 1 == value.length() - 1)));\n     }\n-    \n+\n     /**\n      * Complex condition 0 for 'L'\n      */\n     private boolean conditionL0(String value, int index) {\n-        if (index == value.length() - 3 && \n+        if (index == value.length() - 3 &&\n             contains(value, index - 1, 4, \"ILLO\", \"ILLA\", \"ALLE\")) {\n             return true;\n-        } else if ((contains(value, value.length() - 2, 2, \"AS\", \"OS\") || \n+        } else if ((contains(value, value.length() - 2, 2, \"AS\", \"OS\") ||\n                     contains(value, value.length() - 1, 1, \"A\", \"O\")) &&\n                    contains(value, index - 1, 4, \"ALLE\")) {\n             return true;\n             return false;\n         }\n     }\n-    \n+\n     /**\n      * Complex condition 0 for 'M'\n      */\n                 ((index + 1) == value.length() - 1 || contains(value,\n                         index + 2, 2, \"ER\"));\n     }\n-    \n+\n     //-- BEGIN HELPER FUNCTIONS --//\n \n     /**\n      * of slavo-germanic origin if it contians any of 'W', 'K', 'CZ', or 'WITZ'.\n      */\n     private boolean isSlavoGermanic(String value) {\n-        return value.indexOf('W') > -1 || value.indexOf('K') > -1 || \n+        return value.indexOf('W') > -1 || value.indexOf('K') > -1 ||\n             value.indexOf(\"CZ\") > -1 || value.indexOf(\"WITZ\") > -1;\n     }\n \n      * Determines whether or not the value starts with a silent letter.  It will\n      * return {@code true} if the value starts with any of 'GN', 'KN',\n      * 'PN', 'WR' or 'PS'.\n-     */    \n+     */\n     private boolean isSilentStart(String value) {\n         boolean result = false;\n         for (String element : SILENT_START) {\n \n     /**\n      * Cleans the input\n-     */    \n+     */\n     private String cleanInput(String input) {\n         if (input == null) {\n             return null;\n      * Gets the character at index <code>index</code> if available, otherwise\n      * it returns <code>Character.MIN_VALUE</code> so that there is some sort\n      * of a default\n-     */    \n+     */\n     protected char charAt(String value, int index) {\n         if (index < 0 || index >= value.length()) {\n             return Character.MIN_VALUE;\n-        } \n+        }\n         return value.charAt(index);\n     }\n \n     /**\n      * Shortcut method with 1 criteria\n-     */    \n-    private static boolean contains(String value, int start, int length, \n+     */\n+    private static boolean contains(String value, int start, int length,\n                                     String criteria) {\n-        return contains(value, start, length, \n+        return contains(value, start, length,\n                         new String[] { criteria });\n     }\n \n     /**\n      * Shortcut method with 2 criteria\n-     */    \n-    private static boolean contains(String value, int start, int length, \n+     */\n+    private static boolean contains(String value, int start, int length,\n                                     String criteria1, String criteria2) {\n-        return contains(value, start, length, \n+        return contains(value, start, length,\n                         new String[] { criteria1, criteria2 });\n     }\n \n     /**\n      * Shortcut method with 3 criteria\n-     */    \n-    private static boolean contains(String value, int start, int length, \n-                                    String criteria1, String criteria2, \n+     */\n+    private static boolean contains(String value, int start, int length,\n+                                    String criteria1, String criteria2,\n                                     String criteria3) {\n-        return contains(value, start, length, \n+        return contains(value, start, length,\n                         new String[] { criteria1, criteria2, criteria3 });\n     }\n \n     /**\n      * Shortcut method with 4 criteria\n-     */    \n-    private static boolean contains(String value, int start, int length, \n-                                    String criteria1, String criteria2, \n+     */\n+    private static boolean contains(String value, int start, int length,\n+                                    String criteria1, String criteria2,\n                                     String criteria3, String criteria4) {\n-        return contains(value, start, length, \n-                        new String[] { criteria1, criteria2, criteria3, \n+        return contains(value, start, length,\n+                        new String[] { criteria1, criteria2, criteria3,\n                                        criteria4 });\n     }\n \n     /**\n      * Shortcut method with 5 criteria\n-     */    \n-    private static boolean contains(String value, int start, int length, \n-                                    String criteria1, String criteria2, \n-                                    String criteria3, String criteria4, \n+     */\n+    private static boolean contains(String value, int start, int length,\n+                                    String criteria1, String criteria2,\n+                                    String criteria3, String criteria4,\n                                     String criteria5) {\n-        return contains(value, start, length, \n-                        new String[] { criteria1, criteria2, criteria3, \n+        return contains(value, start, length,\n+                        new String[] { criteria1, criteria2, criteria3,\n                                        criteria4, criteria5 });\n     }\n \n     /**\n      * Shortcut method with 6 criteria\n-     */    \n-    private static boolean contains(String value, int start, int length, \n-                                    String criteria1, String criteria2, \n-                                    String criteria3, String criteria4, \n+     */\n+    private static boolean contains(String value, int start, int length,\n+                                    String criteria1, String criteria2,\n+                                    String criteria3, String criteria4,\n                                     String criteria5, String criteria6) {\n-        return contains(value, start, length, \n-                        new String[] { criteria1, criteria2, criteria3, \n+        return contains(value, start, length,\n+                        new String[] { criteria1, criteria2, criteria3,\n                                        criteria4, criteria5, criteria6 });\n     }\n-    \n+\n     /**\n      * Determines whether <code>value</code> contains any of the criteria starting at index <code>start</code> and\n      * matching up to length <code>length</code>\n      */\n-    protected static boolean contains(String value, int start, int length, \n+    protected static boolean contains(String value, int start, int length,\n                                       String[] criteria) {\n         boolean result = false;\n         if (start >= 0 && start + length <= value.length()) {\n         }\n         return result;\n     }\n-    \n+\n     //-- BEGIN INNER CLASSES --//\n-    \n+\n     /**\n      * Inner class for storing results, since there is the optional alternate\n      * encoding.\n         }\n \n         public boolean isComplete() {\n-            return this.primary.length() >= this.maxLength && \n+            return this.primary.length() >= this.maxLength &&\n                 this.alternate.length() >= this.maxLength;\n         }\n     }\n--- a/src/main/java/org/apache/commons/codec/language/Metaphone.java\n+++ b/src/main/java/org/apache/commons/codec/language/Metaphone.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n import org.apache.commons.codec.StringEncoder;\n \n /**\n- * Encodes a string into a Metaphone value. \n+ * Encodes a string into a Metaphone value.\n  * <p>\n- * Initial Java implementation by <CITE>William B. Brogden. December, 1997</CITE>. \n+ * Initial Java implementation by <CITE>William B. Brogden. December, 1997</CITE>.\n  * Permission given by <CITE>wbrogden</CITE> for code to be used anywhere.\n  * </p>\n  * <p>\n  * 39.</CITE>\n  * </p>\n  * <p>\n- * Note, that this does not match the algorithm that ships with PHP, or the algorithm \n+ * Note, that this does not match the algorithm that ships with PHP, or the algorithm\n  * found in the Perl <a href=\"http://search.cpan.org/~mschwern/Text-Metaphone-1.96/Metaphone.pm\">Text:Metaphone-1.96</a>.\n- * They have had undocumented changes from the originally published algorithm. \n+ * They have had undocumented changes from the originally published algorithm.\n  * For more information, see <a href=\"https://issues.apache.org/jira/browse/CODEC-57\">CODEC-57</a>.\n  * </p>\n- * \n+ *\n  * This class is conditionally thread-safe.\n  * The instance field {@link #maxCodeLen} is mutable {@link #setMaxCodeLen(int)}\n  * but is not volatile, and accesses are not synchronised.\n  * If an instance of the class is shared between threads, the caller needs to ensure that suitable synchronisation\n  * is used to ensure safe publication of the value between threads, and must not invoke {@link #setMaxCodeLen(int)}\n- * after initial setup. \n- * \n+ * after initial setup.\n+ *\n  * @version $Id$\n  */\n public class Metaphone implements StringEncoder {\n \n     /**\n-     * Five values in the English language \n+     * Five values in the English language\n      */\n     private static final String VOWELS = \"AEIOU\" ;\n \n         if (txt.length() == 1) {\n             return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n         }\n-      \n+\n         char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n-      \n+\n         StringBuilder local = new StringBuilder(40); // manipulate\n         StringBuilder code = new StringBuilder(10) ; //   output\n         // handle initial 2 characters exceptions\n         switch(inwd[0]) {\n-        case 'K' : \n-        case 'G' : \n+        case 'K' :\n+        case 'G' :\n         case 'P' : /* looking for KN, etc*/\n             if (inwd[1] == 'N') {\n                 local.append(inwd, 1, inwd.length - 1);\n             break;\n         case 'W' : /* looking for WR or WH */\n             if (inwd[1] == 'R') {   // WR -> R\n-                local.append(inwd, 1, inwd.length - 1); \n+                local.append(inwd, 1, inwd.length - 1);\n                 break ;\n             }\n             if (inwd[1] == 'H') {\n         int wdsz = local.length();\n         int n = 0 ;\n \n-        while (code.length() < this.getMaxCodeLen() && \n+        while (code.length() < this.getMaxCodeLen() &&\n                n < wdsz ) { // max code size of 4 works well\n             char symb = local.charAt(n) ;\n             // remove duplicate letters except C\n             } else { // not dup\n                 switch(symb) {\n                 case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n-                    if (n == 0) { \n+                    if (n == 0) {\n                         code.append(symb);\n                     }\n                     break ; // only use vowel if leading char\n                 case 'B' :\n-                    if ( isPreviousChar(local, n, 'M') && \n+                    if ( isPreviousChar(local, n, 'M') &&\n                          isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n                         break;\n                     }\n                     break;\n                 case 'C' : // lots of C special cases\n                     /* discard if SCI, SCE or SCY */\n-                    if ( isPreviousChar(local, n, 'S') && \n-                         !isLastChar(wdsz, n) && \n-                         FRONTV.indexOf(local.charAt(n + 1)) >= 0 ) { \n+                    if ( isPreviousChar(local, n, 'S') &&\n+                         !isLastChar(wdsz, n) &&\n+                         FRONTV.indexOf(local.charAt(n + 1)) >= 0 ) {\n                         break;\n                     }\n                     if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n-                        code.append('X'); \n-                        break;\n-                    }\n-                    if (!isLastChar(wdsz, n) && \n+                        code.append('X');\n+                        break;\n+                    }\n+                    if (!isLastChar(wdsz, n) &&\n                         FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\n                         code.append('S');\n                         break; // CI,CE,CY -> S\n                     }\n                     if (isPreviousChar(local, n, 'S') &&\n                         isNextChar(local, n, 'H') ) { // SCH->sk\n-                        code.append('K') ; \n+                        code.append('K') ;\n                         break ;\n                     }\n                     if (isNextChar(local, n, 'H')) { // detect CH\n-                        if (n == 0 && \n-                            wdsz >= 3 && \n+                        if (n == 0 &&\n+                            wdsz >= 3 &&\n                             isVowel(local,2) ) { // CH consonant -> K consonant\n                             code.append('K');\n-                        } else { \n+                        } else {\n                             code.append('X'); // CHvowel -> X\n                         }\n-                    } else { \n+                    } else {\n                         code.append('K');\n                     }\n                     break ;\n                 case 'D' :\n-                    if (!isLastChar(wdsz, n + 1) && \n-                        isNextChar(local, n, 'G') && \n-                        FRONTV.indexOf(local.charAt(n + 2)) >= 0) { // DGE DGI DGY -> J \n+                    if (!isLastChar(wdsz, n + 1) &&\n+                        isNextChar(local, n, 'G') &&\n+                        FRONTV.indexOf(local.charAt(n + 2)) >= 0) { // DGE DGI DGY -> J\n                         code.append('J'); n += 2 ;\n-                    } else { \n+                    } else {\n                         code.append('T');\n                     }\n                     break ;\n                 case 'G' : // GH silent at end or before consonant\n-                    if (isLastChar(wdsz, n + 1) && \n+                    if (isLastChar(wdsz, n + 1) &&\n                         isNextChar(local, n, 'H')) {\n                         break;\n                     }\n-                    if (!isLastChar(wdsz, n + 1) &&  \n-                        isNextChar(local,n,'H') && \n+                    if (!isLastChar(wdsz, n + 1) &&\n+                        isNextChar(local,n,'H') &&\n                         !isVowel(local,n+2)) {\n                         break;\n                     }\n-                    if (n > 0 && \n+                    if (n > 0 &&\n                         ( regionMatch(local, n, \"GN\") ||\n                           regionMatch(local, n, \"GNED\") ) ) {\n                         break; // silent G\n                     } else {\n                         hard = false ;\n                     }\n-                    if (!isLastChar(wdsz, n) && \n-                        FRONTV.indexOf(local.charAt(n + 1)) >= 0 && \n+                    if (!isLastChar(wdsz, n) &&\n+                        FRONTV.indexOf(local.charAt(n + 1)) >= 0 &&\n                         !hard) {\n                         code.append('J');\n                     } else {\n                     if (isLastChar(wdsz, n)) {\n                         break ; // terminal H\n                     }\n-                    if (n > 0 && \n+                    if (n > 0 &&\n                         VARSON.indexOf(local.charAt(n - 1)) >= 0) {\n                         break;\n                     }\n                         code.append('H'); // Hvowel\n                     }\n                     break;\n-                case 'F': \n-                case 'J' : \n+                case 'F':\n+                case 'J' :\n                 case 'L' :\n-                case 'M': \n-                case 'N' : \n+                case 'M':\n+                case 'N' :\n                 case 'R' :\n-                    code.append(symb); \n+                    code.append(symb);\n                     break;\n                 case 'K' :\n                     if (n > 0) { // not initial\n                     code.append('K');\n                     break;\n                 case 'S' :\n-                    if (regionMatch(local,n,\"SH\") || \n-                        regionMatch(local,n,\"SIO\") || \n+                    if (regionMatch(local,n,\"SH\") ||\n+                        regionMatch(local,n,\"SIO\") ||\n                         regionMatch(local,n,\"SIA\")) {\n                         code.append('X');\n                     } else {\n                     }\n                     break;\n                 case 'T' :\n-                    if (regionMatch(local,n,\"TIA\") || \n+                    if (regionMatch(local,n,\"TIA\") ||\n                         regionMatch(local,n,\"TIO\")) {\n-                        code.append('X'); \n+                        code.append('X');\n                         break;\n                     }\n                     if (regionMatch(local,n,\"TCH\")) {\n                 case 'V' :\n                     code.append('F'); break ;\n                 case 'W' : case 'Y' : // silent if not followed by vowel\n-                    if (!isLastChar(wdsz,n) && \n+                    if (!isLastChar(wdsz,n) &&\n                         isVowel(local,n+1)) {\n                         code.append(symb);\n                     }\n                 } // end switch\n                 n++ ;\n             } // end else from symb != 'C'\n-            if (code.length() > this.getMaxCodeLen()) { \n-                code.setLength(this.getMaxCodeLen()); \n+            if (code.length() > this.getMaxCodeLen()) {\n+                code.setLength(this.getMaxCodeLen());\n             }\n         }\n         return code.toString();\n \n     private boolean isLastChar(int wdsz, int n) {\n         return n + 1 == wdsz;\n-    } \n-    \n-    \n+    }\n+\n+\n     /**\n      * Encodes an Object using the metaphone algorithm.  This method\n      * is provided in order to satisfy the requirements of the\n      * supplied object is not of type java.lang.String.\n      *\n      * @param obj Object to encode\n-     * @return An object (or type java.lang.String) containing the \n+     * @return An object (or type java.lang.String) containing the\n      *         metaphone code which corresponds to the String supplied.\n      * @throws EncoderException if the parameter supplied is not\n      *                          of type java.lang.String\n     @Override\n     public Object encode(Object obj) throws EncoderException {\n         if (!(obj instanceof String)) {\n-            throw new EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\"); \n+            throw new EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\");\n         }\n         return metaphone((String) obj);\n     }\n \n     /**\n-     * Encodes a String using the Metaphone algorithm. \n+     * Encodes a String using the Metaphone algorithm.\n      *\n      * @param str String object to encode\n      * @return The metaphone code corresponding to the String supplied\n      */\n     @Override\n     public String encode(String str) {\n-        return metaphone(str);   \n+        return metaphone(str);\n     }\n \n     /**\n      *\n      * @param str1 First of two strings to compare\n      * @param str2 Second of two strings to compare\n-     * @return {@code true} if the metaphones of these strings are identical, \n+     * @return {@code true} if the metaphones of these strings are identical,\n      *        {@code false} otherwise.\n      */\n     public boolean isMetaphoneEqual(String str1, String str2) {\n--- a/src/main/java/org/apache/commons/codec/language/Nysiis.java\n+++ b/src/main/java/org/apache/commons/codec/language/Nysiis.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * </pre></p>\n  *\n  * <p>This class is immutable and thread-safe.</p>\n- * \n+ *\n  * @see <a href=\"http://en.wikipedia.org/wiki/NYSIIS\">NYSIIS on Wikipedia</a>\n  * @see <a href=\"http://www.dropby.com/NYSIIS.html\">NYSIIS on dropby.com</a>\n  * @see Soundex\n \n     /**\n      * Tests if the given character is a vowel.\n-     * \n+     *\n      * @param c\n      *            the character to test\n      * @return {@code true} if the character is a vowel, {@code false} otherwise\n     /**\n      * Transcodes the remaining parts of the String. The method operates on a sliding window, looking at 4 characters at\n      * a time: [i-1, i, i+1, i+2].\n-     * \n+     *\n      * @param prev\n      *            the previous character\n      * @param curr\n--- a/src/main/java/org/apache/commons/codec/language/RefinedSoundex.java\n+++ b/src/main/java/org/apache/commons/codec/language/RefinedSoundex.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * Encodes a string into a Refined Soundex value. A refined soundex code is\n  * optimized for spell checking words. Soundex method originally developed by\n  * <CITE>Margaret Odell</CITE> and <CITE>Robert Russell</CITE>.\n- * \n+ *\n  * <p>This class is immutable and thread-safe.</p>\n- * \n+ *\n  * @version $Id$\n  */\n public class RefinedSoundex implements StringEncoder {\n      * Creates a refined soundex instance using a custom mapping. This\n      * constructor can be used to customize the mapping, and/or possibly\n      * provide an internationalized mapping for a non-Western character set.\n-     * \n+     *\n      * @param mapping\n      *                  Mapping array to use when finding the corresponding code for\n      *                  a given character\n     /**\n      * Creates a refined Soundex instance using a custom mapping. This constructor can be used to customize the mapping,\n      * and/or possibly provide an internationalized mapping for a non-Western character set.\n-     * \n+     *\n      * @param mapping\n      *            Mapping string to use when finding the corresponding code for a given character\n      * @since 1.4\n      * encoded String: 0 indicates little or no similarity, and 4 out of 4 (for\n      * example) indicates strong similarity or identical values. For refined\n      * Soundex, the return value can be greater than 4.\n-     * \n+     *\n      * @param s1\n      *                  A String that will be encoded and compared.\n      * @param s2\n      *                  A String that will be encoded and compared.\n      * @return The number of characters in the two encoded Strings that are the\n      *             same from 0 to to the length of the shortest encoded String.\n-     * \n+     *\n      * @see SoundexUtils#difference(StringEncoder,String,String)\n      * @see <a href=\"http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_de-dz_8co5.asp\">\n      *          MS T-SQL DIFFERENCE</a>\n-     * \n+     *\n      * @throws EncoderException\n      *                  if an error occurs encoding one of the strings\n      * @since 1.3\n      * provided in order to satisfy the requirements of the Encoder interface,\n      * and will throw an EncoderException if the supplied object is not of type\n      * java.lang.String.\n-     * \n+     *\n      * @param obj\n      *                  Object to encode\n      * @return An object (or type java.lang.String) containing the refined\n \n     /**\n      * Encodes a String using the refined soundex algorithm.\n-     * \n+     *\n      * @param str\n      *                  A String object to encode\n      * @return A Soundex code corresponding to the String supplied\n      * Returns the mapping code for a given character. The mapping codes are\n      * maintained in an internal char array named soundexMapping, and the\n      * default values of these mappings are US English.\n-     * \n+     *\n      * @param c\n      *                  char to get mapping for\n      * @return A character (really a numeral) to return for the given char\n \n     /**\n      * Retrieves the Refined Soundex code for a given String object.\n-     * \n+     *\n      * @param str\n      *                  String to encode using the Refined Soundex algorithm\n      * @return A soundex code for the String supplied\n--- a/src/main/java/org/apache/commons/codec/language/Soundex.java\n+++ b/src/main/java/org/apache/commons/codec/language/Soundex.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n /**\n  * Encodes a string into a Soundex value. Soundex is an encoding used to relate similar names, but can also be used as a\n  * general purpose scheme to find word with similar phonemes.\n- * \n+ *\n  * This class is thread-safe.\n  * Although not strictly immutable, the {@link #maxLength} field is not actually used.\n- * \n+ *\n  * @version $Id$\n  */\n public class Soundex implements StringEncoder {\n      * (This constant is provided as both an implementation convenience and to allow Javadoc to pick\n      * up the value for the constant values page.)\n      * </p>\n-     * \n+     *\n      * @see #US_ENGLISH_MAPPING\n      */\n     public static final String US_ENGLISH_MAPPING_STRING = \"01230120022455012623010202\";\n     /**\n      * This is a default mapping of the 26 letters used in US English. A value of <code>0</code> for a letter position\n      * means do not encode.\n-     * \n+     *\n      * @see Soundex#Soundex(char[])\n      */\n     private static final char[] US_ENGLISH_MAPPING = US_ENGLISH_MAPPING_STRING.toCharArray();\n \n     /**\n      * An instance of Soundex using the US_ENGLISH_MAPPING mapping.\n-     * \n+     *\n      * @see #US_ENGLISH_MAPPING\n      */\n     public static final Soundex US_ENGLISH = new Soundex();\n \n     /**\n      * The maximum length of a Soundex code - Soundex codes are only four characters by definition.\n-     * \n+     *\n      * @deprecated This feature is not needed since the encoding size must be constant. Will be removed in 2.0.\n      */\n     @Deprecated\n \n     /**\n      * Creates an instance using US_ENGLISH_MAPPING\n-     * \n+     *\n      * @see Soundex#Soundex(char[])\n      * @see Soundex#US_ENGLISH_MAPPING\n      */\n     /**\n      * Creates a soundex instance using the given mapping. This constructor can be used to provide an internationalized\n      * mapping for a non-Western character set.\n-     * \n+     *\n      * Every letter of the alphabet is \"mapped\" to a numerical value. This char array holds the values to which each\n      * letter is mapped. This implementation contains a default map for US_ENGLISH\n-     * \n+     *\n      * @param mapping\n      *                  Mapping array to use when finding the corresponding code for a given character\n      */\n     /**\n      * Creates a refined soundex instance using a custom mapping. This constructor can be used to customize the mapping,\n      * and/or possibly provide an internationalized mapping for a non-Western character set.\n-     * \n+     *\n      * @param mapping\n      *            Mapping string to use when finding the corresponding code for a given character\n      * @since 1.4\n      * Encodes the Strings and returns the number of characters in the two encoded Strings that are the same. This\n      * return value ranges from 0 through 4: 0 indicates little or no similarity, and 4 indicates strong similarity or\n      * identical values.\n-     * \n+     *\n      * @param s1\n      *                  A String that will be encoded and compared.\n      * @param s2\n      *                  A String that will be encoded and compared.\n      * @return The number of characters in the two encoded Strings that are the same from 0 to 4.\n-     * \n+     *\n      * @see SoundexUtils#difference(StringEncoder,String,String)\n      * @see <a href=\"http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_de-dz_8co5.asp\"> MS\n      *          T-SQL DIFFERENCE </a>\n-     * \n+     *\n      * @throws EncoderException\n      *                  if an error occurs encoding one of the strings\n      * @since 1.3\n     /**\n      * Encodes an Object using the soundex algorithm. This method is provided in order to satisfy the requirements of\n      * the Encoder interface, and will throw an EncoderException if the supplied object is not of type java.lang.String.\n-     * \n+     *\n      * @param obj\n      *                  Object to encode\n      * @return An object (or type java.lang.String) containing the soundex code which corresponds to the String\n \n     /**\n      * Encodes a String using the soundex algorithm.\n-     * \n+     *\n      * @param str\n      *                  A String object to encode\n      * @return A Soundex code corresponding to the String supplied\n \n     /**\n      * Used internally by the SoundEx algorithm.\n-     * \n+     *\n      * Consonants from the same code group separated by W or H are treated as one.\n-     * \n+     *\n      * @param str\n      *                  the cleaned working string to encode (in upper case).\n      * @param index\n \n     /**\n      * Returns the maxLength. Standard Soundex\n-     * \n+     *\n      * @deprecated This feature is not needed since the encoding size must be constant. Will be removed in 2.0.\n      * @return int\n      */\n \n     /**\n      * Returns the soundex mapping.\n-     * \n+     *\n      * @return soundexMapping.\n      */\n     private char[] getSoundexMapping() {\n \n     /**\n      * Maps the given upper-case character to its Soundex code.\n-     * \n+     *\n      * @param ch\n      *                  An upper-case character.\n      * @return A Soundex code.\n \n     /**\n      * Sets the maxLength.\n-     * \n+     *\n      * @deprecated This feature is not needed since the encoding size must be constant. Will be removed in 2.0.\n      * @param maxLength\n      *                  The maxLength to set\n     public void setMaxLength(int maxLength) {\n         this.maxLength = maxLength;\n     }\n-    \n+\n     /**\n      * Retrieves the Soundex code for a given String object.\n-     * \n+     *\n      * @param str\n      *                  String to encode using the Soundex algorithm\n      * @return A soundex code for the String supplied\n--- a/src/main/java/org/apache/commons/codec/language/SoundexUtils.java\n+++ b/src/main/java/org/apache/commons/codec/language/SoundexUtils.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Utility methods for {@link Soundex} and {@link RefinedSoundex} classes.\n- * \n+ *\n  * <p>This class is immutable and thread-safe.</p>\n- * \n+ *\n  * @version $Id$\n  * @since 1.3\n  */\n     /**\n      * Cleans up the input string before Soundex processing by only returning\n      * upper case letters.\n-     * \n+     *\n      * @param str\n      *                  The String to clean.\n      * @return A clean String.\n      * values.</li>\n      * <li>For refined Soundex, the return value can be greater than 4.</li>\n      * </ul>\n-     * \n+     *\n      * @param encoder\n      *                  The encoder to use to encode the Strings.\n      * @param s1\n      *                  A String that will be encoded and compared.\n      * @return The number of characters in the two Soundex encoded Strings that\n      *             are the same.\n-     * \n+     *\n      * @see #differenceEncoded(String,String)\n      * @see <a href=\"http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_de-dz_8co5.asp\">\n      *          MS T-SQL DIFFERENCE</a>\n-     * \n+     *\n      * @throws EncoderException\n      *                  if an error occurs encoding one of the strings\n      */\n      * values.</li>\n      * <li>For refined Soundex, the return value can be greater than 4.</li>\n      * </ul>\n-     * \n+     *\n      * @param es1\n      *                  An encoded String.\n      * @param es2\n      *                  An encoded String.\n      * @return The number of characters in the two Soundex encoded Strings that\n      *             are the same.\n-     * \n+     *\n      * @see <a href=\"http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_de-dz_8co5.asp\">\n      *          MS T-SQL DIFFERENCE</a>\n      */\n--- a/src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * Down-stream applications may wish to further process the encoding for indexing or lookup purposes, for example, by\n  * splitting on pipe (<code>|</code>) and indexing under each of these alternatives.\n  * </p>\n- * \n+ *\n  * @since 1.6\n  */\n public class BeiderMorseEncoder implements StringEncoder {\n--- a/src/main/java/org/apache/commons/codec/language/bm/Lang.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/Lang.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * </ul>\n  * <p/>\n  * Port of lang.php\n- * \n+ *\n  * @since 1.6\n  */\n public class Lang {\n \n     /**\n      * Gets a Lang instance for one of the supported NameTypes.\n-     * \n+     *\n      * @param nameType\n      *            the NameType to look up\n      * @return a Lang encapsulating the language guessing rules for that name type\n      * In normal use, you will obtain instances of Lang through the {@link #instance(NameType)} method. You will only need to call this\n      * yourself if you are developing custom language mapping rules.\n      * </p>\n-     * \n+     *\n      * @param languageRulesResourceName\n      *            the fully-qualified resource name to load\n      * @param languages\n \n     /**\n      * Guesses the language of a word.\n-     * \n+     *\n      * @param text\n      *            the word\n      * @return the language that the word originates from or {@link Languages#ANY} if there was no unique match\n \n     /**\n      * Guesses the languages of a word.\n-     * \n+     *\n      * @param input\n      *            the word\n      * @return a Set of Strings of language names that are potential matches for the input word\n--- a/src/main/java/org/apache/commons/codec/language/bm/Languages.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/Languages.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * <p>\n  * Ported from language.php\n  * </p>\n- * \n+ *\n  * @since 1.6\n- * \n+ *\n  * <p>This class is immutable and thread-safe.</p>\n  */\n public class Languages {\n--- a/src/main/java/org/apache/commons/codec/language/bm/NameType.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/NameType.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * Supported types of names. Unless you are matching particular family names, use {@link #GENERIC}. The\n  * <code>GENERIC</code> NameType should work reasonably well for non-name words. The other encodings are specifically\n  * tuned to family names, and may not work well at all for general text.\n- * \n+ *\n  * @since 1.6\n  */\n public enum NameType {\n \n     /**\n      * Gets the short version of the name type.\n-     * \n+     *\n      * @return the NameType short string\n      */\n     public String getName() {\n--- a/src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * <p>\n  * Ported from phoneticengine.php\n  * </p>\n- * \n+ *\n  * @since 1.6\n  */\n public class PhoneticEngine {\n \n     /**\n      * Encodes a string to its phonetic representation.\n-     * \n+     *\n      * @param input\n      *            the String to encode\n      * @return the encoding of the input\n \n     /**\n      * Encodes an input string into an output phonetic representation, given a set of possible origin languages.\n-     * \n+     *\n      * @param input\n      *            String to phoneticise; a String with dashes or spaces separating each word\n      * @param languageSet\n \n     /**\n      * Gets the Lang language guessing rules being used.\n-     * \n+     *\n      * @return the Lang in use\n      */\n     public Lang getLang() {\n \n     /**\n      * Gets the NameType being used.\n-     * \n+     *\n      * @return the NameType in use\n      */\n     public NameType getNameType() {\n \n     /**\n      * Gets the RuleType being used.\n-     * \n+     *\n      * @return the RuleType in use\n      */\n     public RuleType getRuleType() {\n \n     /**\n      * Gets if multiple phonetic encodings are concatenated or if just the first one is kept.\n-     * \n+     *\n      * @return true if multiple phonetic encodings are returned, false if just the first is.\n      */\n     public boolean isConcat() {\n--- a/src/main/java/org/apache/commons/codec/language/bm/ResourceConstants.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/ResourceConstants.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Constants used to process resource files.\n- * \n+ *\n  * <p>This class is immutable and thread-safe.</p>\n- * \n+ *\n  * @since 1.6\n  */\n class ResourceConstants {\n--- a/src/main/java/org/apache/commons/codec/language/bm/Rule.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/Rule.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * <li><b>Blank lines:</b> All blank lines will be skipped.</li>\n  * </ul>\n  * </p>\n- * \n+ *\n  * @since 1.6\n  */\n public class Rule {\n \n     /**\n      * Gets rules for a combination of name type, rule type and languages.\n-     * \n+     *\n      * @param nameType\n      *            the NameType to consider\n      * @param rt\n \n     /**\n      * Gets rules for a combination of name type, rule type and a single language.\n-     * \n+     *\n      * @param nameType\n      *            the NameType to consider\n      * @param rt\n \n     /**\n      * Attempts to compile the regex into direct string ops, falling back to Pattern and Matcher in the worst case.\n-     * \n+     *\n      * @param regex\n      *            the regular expression to compile\n      * @return an RPattern that will match this regex\n \n     /**\n      * Creates a new rule.\n-     * \n+     *\n      * @param pattern\n      *            the pattern\n      * @param lContext\n \n     /**\n      * Gets the left context. This is a regular expression that must match to the left of the pattern.\n-     * \n+     *\n      * @return the left context Pattern\n      */\n     public RPattern getLContext() {\n \n     /**\n      * Gets the pattern. This is a string-literal that must exactly match.\n-     * \n+     *\n      * @return the pattern\n      */\n     public String getPattern() {\n \n     /**\n      * Gets the phoneme. If the rule matches, this is the phoneme associated with the pattern match.\n-     * \n+     *\n      * @return the phoneme\n      */\n     public PhonemeExpr getPhoneme() {\n \n     /**\n      * Gets the right context. This is a regular expression that must match to the right of the pattern.\n-     * \n+     *\n      * @return the right context Pattern\n      */\n     public RPattern getRContext() {\n      * Decides if the pattern and context match the input starting at a position. It is a match if the\n      * <code>lContext</code> matches <code>input</code> up to <code>i</code>, <code>pattern</code> matches at i and\n      * <code>rContext</code> matches from the end of the match of <code>pattern</code> to the end of <code>input</code>.\n-     * \n+     *\n      * @param input\n      *            the input String\n      * @param i\n--- a/src/main/java/org/apache/commons/codec/language/bm/RuleType.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/RuleType.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Types of rule.\n- * \n+ *\n  * @since 1.6\n  */\n public enum RuleType {\n--- a/src/main/java/org/apache/commons/codec/net/BCodec.java\n+++ b/src/main/java/org/apache/commons/codec/net/BCodec.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * Identical to the Base64 encoding defined by <a href=\"http://www.ietf.org/rfc/rfc1521.txt\">RFC\n  * 1521</a> and allows a character set to be specified.\n  * </p>\n- * \n+ *\n  * <p>\n  * <a href=\"http://www.ietf.org/rfc/rfc1522.txt\">RFC 1522</a> describes techniques to allow the encoding of non-ASCII\n  * text in various portions of a RFC 822 [2] message header, in a manner which is unlikely to confuse existing message\n  * handling software.\n  * </p>\n- * \n+ *\n  * <p>This class is immutable and thread-safe.</p>\n- * \n+ *\n  * @see <a href=\"http://www.ietf.org/rfc/rfc1522.txt\">MIME (Multipurpose Internet Mail Extensions) Part Two: Message\n  *          Header Extensions for Non-ASCII Text</a>\n- * \n+ *\n  * @since 1.3\n  * @version $Id$\n  */\n \n     /**\n      * Constructor which allows for the selection of a default charset\n-     * \n+     *\n      * @param charset\n      *                  the default string charset to use.\n-     * \n+     *\n      * @see <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      * @since 1.7\n      */\n \n     /**\n      * Constructor which allows for the selection of a default charset\n-     * \n+     *\n      * @param charsetName\n      *                  the default charset to use.\n      * @throws UnsupportedCharsetException\n \n     /**\n      * Encodes a string into its Base64 form using the specified charset. Unsafe characters are escaped.\n-     * \n+     *\n      * @param value\n      *                  string to convert to Base64 form\n      * @param charset\n      *                  the charset for <code>value</code>\n      * @return Base64 string\n-     * \n+     *\n      * @throws EncoderException\n      *                  thrown if a failure condition is encountered during the encoding process.\n      * @since 1.7\n \n     /**\n      * Encodes a string into its Base64 form using the specified charset. Unsafe characters are escaped.\n-     * \n+     *\n      * @param value\n      *                  string to convert to Base64 form\n      * @param charset\n      *                  the charset for <code>value</code>\n      * @return Base64 string\n-     * \n+     *\n      * @throws EncoderException\n      *                  thrown if a failure condition is encountered during the encoding process.\n      */\n \n     /**\n      * Encodes a string into its Base64 form using the default charset. Unsafe characters are escaped.\n-     * \n+     *\n      * @param value\n      *                  string to convert to Base64 form\n      * @return Base64 string\n-     * \n+     *\n      * @throws EncoderException\n      *                  thrown if a failure condition is encountered during the encoding process.\n      */\n     /**\n      * Decodes a Base64 string into its original form. Escaped characters are converted back to their original\n      * representation.\n-     * \n+     *\n      * @param value\n      *            Base64 string to convert into its original form\n      * @return original string\n \n     /**\n      * Encodes an object into its Base64 form using the default charset. Unsafe characters are escaped.\n-     * \n+     *\n      * @param value\n      *                  object to convert to Base64 form\n      * @return Base64 object\n-     * \n+     *\n      * @throws EncoderException\n      *                  thrown if a failure condition is encountered during the encoding process.\n      */\n     /**\n      * Decodes a Base64 object into its original form. Escaped characters are converted back to their original\n      * representation.\n-     * \n+     *\n      * @param value\n      *                  Base64 object to convert into its original form\n-     * \n+     *\n      * @return original object\n-     * \n+     *\n      * @throws DecoderException\n      *                  Thrown if the argument is not a <code>String</code>. Thrown if a failure condition is\n      *                  encountered during the decode process.\n \n     /**\n      * Gets the default charset name used for string decoding and encoding.\n-     * \n+     *\n      * @return the default charset name\n      * @since 1.7\n      */\n \n     /**\n      * Gets the default charset name used for string decoding and encoding.\n-     * \n+     *\n      * @return the default charset name\n      */\n     public String getDefaultCharset() {\n--- a/src/main/java/org/apache/commons/codec/net/QCodec.java\n+++ b/src/main/java/org/apache/commons/codec/net/QCodec.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * href=\"http://www.ietf.org/rfc/rfc1521.txt\">RFC 1521</a> and designed to allow text containing mostly ASCII\n  * characters to be decipherable on an ASCII terminal without decoding.\n  * </p>\n- * \n+ *\n  * <p>\n  * <a href=\"http://www.ietf.org/rfc/rfc1522.txt\">RFC 1522</a> describes techniques to allow the encoding of non-ASCII\n  * text in various portions of a RFC 822 [2] message header, in a manner which is unlikely to confuse existing message\n  * handling software.\n  * </p>\n- * \n+ *\n  * This class is conditionally thread-safe.\n  * The instance field {@link #encodeBlanks} is mutable {@link #setEncodeBlanks(boolean)}\n  * but is not volatile, and accesses are not synchronised.\n  * If an instance of the class is shared between threads, the caller needs to ensure that suitable synchronisation\n  * is used to ensure safe publication of the value between threads, and must not invoke {@link #setEncodeBlanks(boolean)}\n- * after initial setup. \n- * \n+ * after initial setup.\n+ *\n  * @see <a href=\"http://www.ietf.org/rfc/rfc1522.txt\">MIME (Multipurpose Internet Mail Extensions) Part Two: Message\n  *          Header Extensions for Non-ASCII Text</a>\n- * \n+ *\n  * @since 1.3\n  * @version $Id$\n  */\n \n     /**\n      * Constructor which allows for the selection of a default charset\n-     * \n+     *\n      * @param charset\n      *                  the default string charset to use.\n-     * \n+     *\n      * @see <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      * @since 1.7\n      */\n \n     /**\n      * Constructor which allows for the selection of a default charset\n-     * \n+     *\n      * @param charsetName\n      *                  the charset to use.\n      * @throws UnsupportedCharsetException\n                 }\n             }\n             return QuotedPrintableCodec.decodeQuotedPrintable(tmp);\n-        } \n-        return QuotedPrintableCodec.decodeQuotedPrintable(bytes);       \n+        }\n+        return QuotedPrintableCodec.decodeQuotedPrintable(bytes);\n     }\n \n     /**\n      * Encodes a string into its quoted-printable form using the specified charset. Unsafe characters are escaped.\n-     * \n+     *\n      * @param str\n      *                  string to convert to quoted-printable form\n      * @param charset\n      *                  the charset for str\n      * @return quoted-printable string\n-     * \n+     *\n      * @throws EncoderException\n      *                  thrown if a failure condition is encountered during the encoding process.\n      * @since 1.7\n \n     /**\n      * Encodes a string into its quoted-printable form using the specified charset. Unsafe characters are escaped.\n-     * \n+     *\n      * @param str\n      *                  string to convert to quoted-printable form\n      * @param charset\n      *                  the charset for str\n      * @return quoted-printable string\n-     * \n+     *\n      * @throws EncoderException\n      *                  thrown if a failure condition is encountered during the encoding process.\n      */\n \n     /**\n      * Encodes a string into its quoted-printable form using the default charset. Unsafe characters are escaped.\n-     * \n+     *\n      * @param str\n      *                  string to convert to quoted-printable form\n      * @return quoted-printable string\n-     * \n+     *\n      * @throws EncoderException\n      *                  thrown if a failure condition is encountered during the encoding process.\n      */\n     /**\n      * Decodes a quoted-printable string into its original form. Escaped characters are converted back to their original\n      * representation.\n-     * \n+     *\n      * @param str\n      *                  quoted-printable string to convert into its original form\n-     * \n+     *\n      * @return original string\n-     * \n+     *\n      * @throws DecoderException\n      *                  A decoder exception is thrown if a failure condition is encountered during the decode process.\n      */\n \n     /**\n      * Encodes an object into its quoted-printable form using the default charset. Unsafe characters are escaped.\n-     * \n+     *\n      * @param obj\n      *                  object to convert to quoted-printable form\n      * @return quoted-printable object\n-     * \n+     *\n      * @throws EncoderException\n      *                  thrown if a failure condition is encountered during the encoding process.\n      */\n         } else if (obj instanceof String) {\n             return encode((String) obj);\n         } else {\n-            throw new EncoderException(\"Objects of type \" + \n-                  obj.getClass().getName() + \n+            throw new EncoderException(\"Objects of type \" +\n+                  obj.getClass().getName() +\n                   \" cannot be encoded using Q codec\");\n         }\n     }\n     /**\n      * Decodes a quoted-printable object into its original form. Escaped characters are converted back to their original\n      * representation.\n-     * \n+     *\n      * @param obj\n      *                  quoted-printable object to convert into its original form\n-     * \n+     *\n      * @return original object\n-     * \n+     *\n      * @throws DecoderException\n      *                  Thrown if the argument is not a <code>String</code>. Thrown if a failure condition is\n      *                  encountered during the decode process.\n         } else if (obj instanceof String) {\n             return decode((String) obj);\n         } else {\n-            throw new DecoderException(\"Objects of type \" + \n-                  obj.getClass().getName() + \n+            throw new DecoderException(\"Objects of type \" +\n+                  obj.getClass().getName() +\n                   \" cannot be decoded using Q codec\");\n         }\n     }\n \n     /**\n      * Gets the default charset name used for string decoding and encoding.\n-     * \n+     *\n      * @return the default charset name\n      * @since 1.7\n      */\n \n     /**\n      * Gets the default charset name used for string decoding and encoding.\n-     * \n+     *\n      * @return the default charset name\n      */\n     public String getDefaultCharset() {\n \n     /**\n      * Tests if optional transformation of SPACE characters is to be used\n-     * \n+     *\n      * @return {@code true} if SPACE characters are to be transformed, {@code false} otherwise\n      */\n     public boolean isEncodeBlanks() {\n \n     /**\n      * Defines whether optional transformation of SPACE characters is to be used\n-     * \n+     *\n      * @param b\n      *                  {@code true} if SPACE characters are to be transformed, {@code false} otherwise\n      */\n--- a/src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java\n+++ b/src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * to ensure the integrity of the data should the message pass through a character- translating, and/or line-wrapping\n  * gateway.\n  * </p>\n- * \n+ *\n  * <p>\n  * Note:\n  * </p>\n  * framework is ready. The motivation behind providing the codec in a partial form is that it can already come in handy\n  * for those applications that do not require quoted-printable line formatting (rules #3, #4, #5), for instance Q codec.\n  * </p>\n- * \n+ *\n  * <p>This class is immutable and thread-safe.</p>\n- * \n+ *\n  * @see <a href=\"http://www.ietf.org/rfc/rfc1521.txt\"> RFC 1521 MIME (Multipurpose Internet Mail Extensions) Part One:\n  *          Mechanisms for Specifying and Describing the Format of Internet Message Bodies </a>\n- * \n+ *\n  * @since 1.3\n  * @version $Id$\n  */\n \n     /**\n      * Constructor which allows for the selection of a default charset\n-     * \n+     *\n      * @param charset\n      *                  the default string charset to use.\n      * @throws UnsupportedCharsetException\n \n     /**\n      * Constructor which allows for the selection of a default charset\n-     * \n+     *\n      * @param charsetName\n      *            the default string charset to use.\n      * @throws UnsupportedCharsetException\n \n     /**\n      * Encodes byte into its quoted-printable representation.\n-     * \n+     *\n      * @param b\n      *                  byte to encode\n      * @param buffer\n \n     /**\n      * Encodes an array of bytes into an array of quoted-printable 7-bit characters. Unsafe characters are escaped.\n-     * \n+     *\n      * <p>\n      * This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in\n      * RFC 1521 and is suitable for encoding binary data and unformatted text.\n      * </p>\n-     * \n+     *\n      * @param printable\n      *                  bitset of characters deemed quoted-printable\n      * @param bytes\n     /**\n      * Decodes an array quoted-printable characters into an array of original bytes. Escaped characters are converted\n      * back to their original representation.\n-     * \n+     *\n      * <p>\n      * This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in\n      * RFC 1521.\n      * </p>\n-     * \n+     *\n      * @param bytes\n      *                  array of quoted-printable characters\n      * @return array of original bytes\n \n     /**\n      * Encodes an array of bytes into an array of quoted-printable 7-bit characters. Unsafe characters are escaped.\n-     * \n+     *\n      * <p>\n      * This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in\n      * RFC 1521 and is suitable for encoding binary data and unformatted text.\n      * </p>\n-     * \n+     *\n      * @param bytes\n      *                  array of bytes to be encoded\n      * @return array of bytes containing quoted-printable data\n     /**\n      * Decodes an array of quoted-printable characters into an array of original bytes. Escaped characters are converted\n      * back to their original representation.\n-     * \n+     *\n      * <p>\n      * This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in\n      * RFC 1521.\n      * </p>\n-     * \n+     *\n      * @param bytes\n      *                  array of quoted-printable characters\n      * @return array of original bytes\n \n     /**\n      * Encodes a string into its quoted-printable form using the default string charset. Unsafe characters are escaped.\n-     * \n+     *\n      * <p>\n      * This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in\n      * RFC 1521 and is suitable for encoding binary data.\n      * </p>\n-     * \n+     *\n      * @param str\n      *                  string to convert to quoted-printable form\n      * @return quoted-printable string\n-     * \n+     *\n      * @throws EncoderException\n      *                  Thrown if quoted-printable encoding is unsuccessful\n-     * \n+     *\n      * @see #getCharset()\n      */\n     @Override\n     /**\n      * Decodes a quoted-printable string into its original form using the specified string charset. Escaped characters\n      * are converted back to their original representation.\n-     * \n+     *\n      * @param str\n      *                  quoted-printable string to convert into its original form\n      * @param charset\n     /**\n      * Decodes a quoted-printable string into its original form using the specified string charset. Escaped characters\n      * are converted back to their original representation.\n-     * \n+     *\n      * @param str\n      *                  quoted-printable string to convert into its original form\n      * @param charset\n     /**\n      * Decodes a quoted-printable string into its original form using the default string charset. Escaped characters are\n      * converted back to their original representation.\n-     * \n+     *\n      * @param str\n      *                  quoted-printable string to convert into its original form\n      * @return original string\n \n     /**\n      * Encodes an object into its quoted-printable safe form. Unsafe characters are escaped.\n-     * \n+     *\n      * @param obj\n      *                  string to convert to a quoted-printable form\n      * @return quoted-printable object\n         } else if (obj instanceof String) {\n             return encode((String) obj);\n         } else {\n-            throw new EncoderException(\"Objects of type \" + \n-                  obj.getClass().getName() + \n+            throw new EncoderException(\"Objects of type \" +\n+                  obj.getClass().getName() +\n                   \" cannot be quoted-printable encoded\");\n         }\n     }\n     /**\n      * Decodes a quoted-printable object into its original form. Escaped characters are converted back to their original\n      * representation.\n-     * \n+     *\n      * @param obj\n      *                  quoted-printable object to convert into its original form\n      * @return original object\n         } else if (obj instanceof String) {\n             return decode((String) obj);\n         } else {\n-            throw new DecoderException(\"Objects of type \" + \n-                  obj.getClass().getName() + \n+            throw new DecoderException(\"Objects of type \" +\n+                  obj.getClass().getName() +\n                   \" cannot be quoted-printable decoded\");\n         }\n     }\n \n     /**\n      * Gets the default charset name used for string decoding and encoding.\n-     * \n+     *\n      * @return the default charset name\n      * @since 1.7\n      */\n \n     /**\n      * Gets the default charset name used for string decoding and encoding.\n-     * \n+     *\n      * @return the default charset name\n      */\n     public String getDefaultCharset() {\n \n     /**\n      * Encodes a string into its quoted-printable form using the specified charset. Unsafe characters are escaped.\n-     * \n+     *\n      * <p>\n      * This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in\n      * RFC 1521 and is suitable for encoding binary data and unformatted text.\n      * </p>\n-     * \n+     *\n      * @param str\n      *                  string to convert to quoted-printable form\n      * @param charset\n \n     /**\n      * Encodes a string into its quoted-printable form using the specified charset. Unsafe characters are escaped.\n-     * \n+     *\n      * <p>\n      * This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in\n      * RFC 1521 and is suitable for encoding binary data and unformatted text.\n      * </p>\n-     * \n+     *\n      * @param str\n      *                  string to convert to quoted-printable form\n      * @param charset\n      *                  the charset for str\n      * @return quoted-printable string\n-     * \n+     *\n      * @throws UnsupportedEncodingException\n      *                  Thrown if the charset is not supported\n      */\n--- a/src/main/java/org/apache/commons/codec/net/RFC1522Codec.java\n+++ b/src/main/java/org/apache/commons/codec/net/RFC1522Codec.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * <p>\n  * Implements methods common to all codecs defined in RFC 1522.\n  * </p>\n- * \n+ *\n  * <p>\n- * <a href=\"http://www.ietf.org/rfc/rfc1522.txt\">RFC 1522</a> \n- * describes techniques to allow the encoding of non-ASCII text in \n+ * <a href=\"http://www.ietf.org/rfc/rfc1522.txt\">RFC 1522</a>\n+ * describes techniques to allow the encoding of non-ASCII text in\n  * various portions of a RFC 822 [2] message header, in a manner which\n  * is unlikely to confuse existing message handling software.\n  * </p>\n  * MIME (Multipurpose Internet Mail Extensions) Part Two:\n  * Message Header Extensions for Non-ASCII Text</a>\n  * </p>\n- * \n+ *\n  * <p>This class is immutable and thread-safe.</p>\n- * \n+ *\n  * @since 1.3\n  * @version $Id$\n  */\n abstract class RFC1522Codec {\n-    \n+\n     /**\n      * Separator.\n      */\n     protected static final String PREFIX = \"=?\";\n \n     /**\n-     * Applies an RFC 1522 compliant encoding scheme to the given string of text with the \n-     * given charset. This method constructs the \"encoded-word\" header common to all the \n-     * RFC 1522 codecs and then invokes {@link #doEncoding(byte [])} method of a concrete \n+     * Applies an RFC 1522 compliant encoding scheme to the given string of text with the\n+     * given charset. This method constructs the \"encoded-word\" header common to all the\n+     * RFC 1522 codecs and then invokes {@link #doEncoding(byte [])} method of a concrete\n      * class to perform the specific encoding.\n-     * \n+     *\n      * @param text a string to encode\n      * @param charset a charset to be used\n-     * \n+     *\n      * @return RFC 1522 compliant \"encoded-word\"\n-     * \n-     * @throws EncoderException thrown if there is an error condition during the Encoding \n+     *\n+     * @throws EncoderException thrown if there is an error condition during the Encoding\n      *  process.\n      * @see <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      */\n     protected String encodeText(final String text, final Charset charset)\n-     throws EncoderException  \n+     throws EncoderException\n     {\n         if (text == null) {\n             return null;\n         }\n         StringBuilder buffer = new StringBuilder();\n-        buffer.append(PREFIX); \n+        buffer.append(PREFIX);\n         buffer.append(charset);\n         buffer.append(SEP);\n         buffer.append(this.getEncoding());\n         buffer.append(SEP);\n-        byte [] rawData = this.doEncoding(text.getBytes(charset)); \n+        byte [] rawData = this.doEncoding(text.getBytes(charset));\n         buffer.append(StringUtils.newStringUsAscii(rawData));\n-        buffer.append(POSTFIX); \n+        buffer.append(POSTFIX);\n         return buffer.toString();\n     }\n-    \n-    /**\n-     * Applies an RFC 1522 compliant encoding scheme to the given string of text with the \n-     * given charset. This method constructs the \"encoded-word\" header common to all the \n-     * RFC 1522 codecs and then invokes {@link #doEncoding(byte [])} method of a concrete \n+\n+    /**\n+     * Applies an RFC 1522 compliant encoding scheme to the given string of text with the\n+     * given charset. This method constructs the \"encoded-word\" header common to all the\n+     * RFC 1522 codecs and then invokes {@link #doEncoding(byte [])} method of a concrete\n      * class to perform the specific encoding.\n-     * \n+     *\n      * @param text a string to encode\n      * @param charsetName the charset to use\n-     * \n+     *\n      * @return RFC 1522 compliant \"encoded-word\"\n-     * \n-     * @throws EncoderException thrown if there is an error condition during the Encoding \n+     *\n+     * @throws EncoderException thrown if there is an error condition during the Encoding\n      *  process.\n-     * @throws UnsupportedEncodingException if charset is not available \n-     * \n+     * @throws UnsupportedEncodingException if charset is not available\n+     *\n      * @see <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      */\n     protected String encodeText(final String text, final String charsetName)\n-     throws EncoderException, UnsupportedEncodingException  \n+     throws EncoderException, UnsupportedEncodingException\n     {\n         if (text == null) {\n             return null;\n         }\n         return this.encodeText(text, Charset.forName(charsetName));\n     }\n-    \n-    /**\n-     * Applies an RFC 1522 compliant decoding scheme to the given string of text. This method \n-     * processes the \"encoded-word\" header common to all the RFC 1522 codecs and then invokes \n+\n+    /**\n+     * Applies an RFC 1522 compliant decoding scheme to the given string of text. This method\n+     * processes the \"encoded-word\" header common to all the RFC 1522 codecs and then invokes\n      * {@link #doEncoding(byte [])} method of a concrete class to perform the specific decoding.\n-     * \n+     *\n      * @param text a string to decode\n      * @return A new decoded String or {@code null} if the input is {@code null}.\n-     * \n-     * @throws DecoderException thrown if there is an error condition during the decoding \n+     *\n+     * @throws DecoderException thrown if there is an error condition during the decoding\n      *  process.\n-     * @throws UnsupportedEncodingException thrown if charset specified in the \"encoded-word\" \n-     *  header is not supported \n+     * @throws UnsupportedEncodingException thrown if charset specified in the \"encoded-word\"\n+     *  header is not supported\n      */\n     protected String decodeText(final String text)\n-     throws DecoderException, UnsupportedEncodingException  \n+     throws DecoderException, UnsupportedEncodingException\n     {\n         if (text == null) {\n             return null;\n         }\n         String encoding = text.substring(from, to);\n         if (!getEncoding().equalsIgnoreCase(encoding)) {\n-            throw new DecoderException(\"This codec cannot decode \" + \n+            throw new DecoderException(\"This codec cannot decode \" +\n                 encoding + \" encoded content\");\n         }\n         from = to + 1;\n         to = text.indexOf(SEP, from);\n         byte[] data = StringUtils.getBytesUsAscii(text.substring(from, to));\n-        data = doDecoding(data); \n+        data = doDecoding(data);\n         return new String(data, charset);\n     }\n \n     /**\n      * Returns the codec name (referred to as encoding in the RFC 1522)\n-     * \n+     *\n      * @return name of the codec\n-     */    \n+     */\n     protected abstract String getEncoding();\n \n     /**\n      * Encodes an array of bytes using the defined encoding scheme\n-     * \n+     *\n      * @param bytes Data to be encoded\n      *\n      * @return A byte array containing the encoded data\n-     * \n-     * @throws EncoderException thrown if the Encoder encounters a failure condition \n+     *\n+     * @throws EncoderException thrown if the Encoder encounters a failure condition\n      *  during the encoding process.\n-     */    \n+     */\n     protected abstract byte[] doEncoding(byte[] bytes) throws EncoderException;\n \n     /**\n      * Decodes an array of bytes using the defined encoding scheme\n-     * \n+     *\n      * @param bytes Data to be decoded\n      *\n      * @return a byte array that contains decoded data\n-     * \n-     * @throws DecoderException A decoder exception is thrown if a Decoder encounters a \n+     *\n+     * @throws DecoderException A decoder exception is thrown if a Decoder encounters a\n      *  failure condition during the decode process.\n-     */    \n+     */\n     protected abstract byte[] doDecoding(byte[] bytes) throws DecoderException;\n }\n--- a/src/main/java/org/apache/commons/codec/net/URLCodec.java\n+++ b/src/main/java/org/apache/commons/codec/net/URLCodec.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n import org.apache.commons.codec.binary.StringUtils;\n \n /**\n- * <p>Implements the 'www-form-urlencoded' encoding scheme, \n+ * <p>Implements the 'www-form-urlencoded' encoding scheme,\n  * also misleadingly known as URL encoding.</p>\n- *  \n- * <p>For more detailed information please refer to \n+ *\n+ * <p>For more detailed information please refer to\n  * <a href=\"http://www.w3.org/TR/html4/interact/forms.html#h-17.13.4.1\">\n- * Chapter 17.13.4 'Form content types'</a> of the \n+ * Chapter 17.13.4 'Form content types'</a> of the\n  * <a href=\"http://www.w3.org/TR/html4/\">HTML 4.01 Specification<a></p>\n- * \n- * <p> \n+ *\n+ * <p>\n  * This codec is meant to be a replacement for standard Java classes\n- * {@link java.net.URLEncoder} and {@link java.net.URLDecoder} \n- * on older Java platforms, as these classes in Java versions below \n+ * {@link java.net.URLEncoder} and {@link java.net.URLDecoder}\n+ * on older Java platforms, as these classes in Java versions below\n  * 1.4 rely on the platform's default charset encoding.\n  * </p>\n- * \n+ *\n  * <p>This class is immutable and thread-safe.</p>\n- * \n+ *\n  * @since 1.2\n  * @version $Id$\n  */\n public class URLCodec implements BinaryEncoder, BinaryDecoder, StringEncoder, StringDecoder {\n-    \n+\n     /**\n      * Radix used in encoding and decoding.\n      */\n     static final int RADIX = 16;\n-    \n+\n     /**\n      * The default charset used for string decoding and encoding.\n-     * \n+     *\n      * @deprecated TODO: This field will be changed to a private final Charset in 2.0.\n      */\n     @Deprecated\n      * BitSet of www-form-url safe characters.\n      */\n     protected static final BitSet WWW_FORM_URL = new BitSet(256);\n-    \n+\n     // Static initializer for www_form_url\n     static {\n         // alpha characters\n \n     /**\n      * Constructor which allows for the selection of a default charset\n-     * \n+     *\n      * @param charset the default string charset to use.\n      */\n     public URLCodec(String charset) {\n \n     /**\n      * Encodes an array of bytes into an array of URL safe 7-bit characters. Unsafe characters are escaped.\n-     * \n+     *\n      * @param urlsafe\n      *            bitset of characters deemed URL safe\n      * @param bytes\n     }\n \n     /**\n-     * Decodes an array of URL safe 7-bit characters into an array of \n-     * original bytes. Escaped characters are converted back to their \n+     * Decodes an array of URL safe 7-bit characters into an array of\n+     * original bytes. Escaped characters are converted back to their\n      * original representation.\n      *\n      * @param bytes array of URL safe characters\n-     * @return array of original bytes \n+     * @return array of original bytes\n      * @throws DecoderException Thrown if URL decoding is unsuccessful\n      */\n     public static final byte[] decodeUrl(byte[] bytes) throws DecoderException {\n     }\n \n     /**\n-     * Encodes an array of bytes into an array of URL safe 7-bit \n+     * Encodes an array of bytes into an array of URL safe 7-bit\n      * characters. Unsafe characters are escaped.\n      *\n      * @param bytes array of bytes to convert to URL safe characters\n \n \n     /**\n-     * Decodes an array of URL safe 7-bit characters into an array of \n-     * original bytes. Escaped characters are converted back to their \n+     * Decodes an array of URL safe 7-bit characters into an array of\n+     * original bytes. Escaped characters are converted back to their\n      * original representation.\n      *\n      * @param bytes array of URL safe characters\n-     * @return array of original bytes \n+     * @return array of original bytes\n      * @throws DecoderException Thrown if URL decoding is unsuccessful\n      */\n     @Override\n \n     /**\n      * Encodes a string into its URL safe form using the specified string charset. Unsafe characters are escaped.\n-     * \n+     *\n      * @param str\n      *            string to convert to a URL safe form\n      * @param charset\n     }\n \n     /**\n-     * Encodes a string into its URL safe form using the default string \n+     * Encodes a string into its URL safe form using the default string\n      * charset. Unsafe characters are escaped.\n      *\n      * @param str string to convert to a URL safe form\n      * @return URL safe string\n      * @throws EncoderException Thrown if URL encoding is unsuccessful\n-     * \n+     *\n      * @see #getDefaultCharset()\n      */\n     @Override\n \n \n     /**\n-     * Decodes a URL safe string into its original form using the \n-     * specified encoding. Escaped characters are converted back \n+     * Decodes a URL safe string into its original form using the\n+     * specified encoding. Escaped characters are converted back\n      * to their original representation.\n      *\n      * @param str URL safe string to convert into its original form\n      * @param charset the original string charset\n-     * @return original string \n+     * @return original string\n      * @throws DecoderException Thrown if URL decoding is unsuccessful\n      * @throws UnsupportedEncodingException Thrown if charset is not\n-     *                                      supported \n+     *                                      supported\n      */\n     public String decode(String str, String charset) throws DecoderException, UnsupportedEncodingException {\n         if (str == null) {\n \n     /**\n      * Decodes a URL safe string into its original form using the default\n-     * string charset. Escaped characters are converted back to their \n+     * string charset. Escaped characters are converted back to their\n      * original representation.\n      *\n      * @param str URL safe string to convert into its original form\n-     * @return original string \n+     * @return original string\n      * @throws DecoderException Thrown if URL decoding is unsuccessful\n-     * \n+     *\n      * @see #getDefaultCharset()\n      */\n     @Override\n     }\n \n     /**\n-     * Encodes an object into its URL safe form. Unsafe characters are \n+     * Encodes an object into its URL safe form. Unsafe characters are\n      * escaped.\n      *\n      * @param obj string to convert to a URL safe form\n      * @return URL safe object\n-     * @throws EncoderException Thrown if URL encoding is not \n+     * @throws EncoderException Thrown if URL encoding is not\n      *                          applicable to objects of this type or\n      *                          if encoding is unsuccessful\n      */\n             return encode((String)obj);\n         } else {\n             throw new EncoderException(\"Objects of type \" +\n-                obj.getClass().getName() + \" cannot be URL encoded\"); \n-              \n+                obj.getClass().getName() + \" cannot be URL encoded\");\n+\n         }\n     }\n \n     /**\n      * Decodes a URL safe object into its original form. Escaped characters are converted back to their original\n      * representation.\n-     * \n+     *\n      * @param obj\n      *                  URL safe object to convert into its original form\n      * @return original object\n \n     /**\n      * The <code>String</code> encoding used for decoding and encoding.\n-     * \n+     *\n      * @return Returns the encoding.\n-     * \n+     *\n      * @deprecated Use {@link #getDefaultCharset()}, will be removed in 2.0.\n      */\n     @Deprecated\n--- a/src/main/java/org/apache/commons/codec/net/Utils.java\n+++ b/src/main/java/org/apache/commons/codec/net/Utils.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Utility methods for this package.\n- * \n+ *\n  * <p>This class is immutable and thread-safe.</p>\n- * \n+ *\n  * @version $Id$\n  * @since 1.4\n  */\n \n     /**\n      * Returns the numeric value of the character <code>b</code> in radix 16.\n-     * \n+     *\n      * @param b\n      *            The byte to be converted.\n      * @return The numeric value represented by the character in radix 16.\n-     * \n+     *\n      * @throws DecoderException\n      *             Thrown when the byte is not valid per {@link Character#digit(char,int)}\n      */\n--- a/src/test/java/org/apache/commons/codec/BinaryEncoderAbstractTest.java\n+++ b/src/test/java/org/apache/commons/codec/BinaryEncoderAbstractTest.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n--- a/src/test/java/org/apache/commons/codec/CharEncodingTest.java\n+++ b/src/test/java/org/apache/commons/codec/CharEncodingTest.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Sanity checks for {@link CharEncoding}.\n- * \n+ *\n  * @version $Id$\n  */\n public class CharEncodingTest {\n--- a/src/test/java/org/apache/commons/codec/CharsetsTest.java\n+++ b/src/test/java/org/apache/commons/codec/CharsetsTest.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Sanity checks for {@link Charsets}.\n- * \n+ *\n  * @version $Id: CharEncodingTest.java 1298985 2012-03-09 19:12:49Z ggregory $\n  */\n public class CharsetsTest {\n--- a/src/test/java/org/apache/commons/codec/DecoderExceptionTest.java\n+++ b/src/test/java/org/apache/commons/codec/DecoderExceptionTest.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Tests {@link DecoderException}.\n- * \n+ *\n  * @version $Id$\n  */\n public class DecoderExceptionTest {\n--- a/src/test/java/org/apache/commons/codec/EncoderExceptionTest.java\n+++ b/src/test/java/org/apache/commons/codec/EncoderExceptionTest.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Tests {@link EncoderException}.\n- * \n+ *\n  * @version $Id$\n  */\n public class EncoderExceptionTest {\n--- a/src/test/java/org/apache/commons/codec/StringEncoderAbstractTest.java\n+++ b/src/test/java/org/apache/commons/codec/StringEncoderAbstractTest.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n--- a/src/test/java/org/apache/commons/codec/StringEncoderComparatorTest.java\n+++ b/src/test/java/org/apache/commons/codec/StringEncoderComparatorTest.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Test cases for the StingEncoderComparator.\n- * \n+ *\n  * @version $Id$\n  */\n public class StringEncoderComparatorTest {\n \n     @Test\n     public void testComparatorWithSoundex() throws Exception {\n-        StringEncoderComparator sCompare = \n+        StringEncoderComparator sCompare =\n             new StringEncoderComparator( new Soundex() );\n \n         assertTrue( \"O'Brien and O'Brian didn't come out with \" +\n                     \"the same Soundex, something must be wrong here\",\n                     0 == sCompare.compare( \"O'Brien\", \"O'Brian\" ) );\n     }\n-    \n+\n     @Test\n     public void testComparatorWithDoubleMetaphone() throws Exception {\n         StringEncoderComparator sCompare = new StringEncoderComparator(new DoubleMetaphone());\n     public void testComparatorWithDoubleMetaphoneAndInvalidInput() throws Exception {\n         StringEncoderComparator sCompare =\n             new StringEncoderComparator( new DoubleMetaphone() );\n-           \n+\n         int compare = sCompare.compare(new Double(3.0), Long.valueOf(3));\n         assertEquals( \"Trying to compare objects that make no sense to the underlying encoder should return a zero compare code\",\n-                                0, compare);        \n+                                0, compare);\n     }\n }\n--- a/src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java\n+++ b/src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java\n     /**\n      * Another test for the CODEC-101 bug: In commons-codec-1.4 this test shows InputStreamReader explicitly hating an\n      * InputStream.read(byte[]) return of 0:\n-     * \n+     *\n      * java.io.IOException: Underlying input stream returned zero bytes at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:268) at\n      * sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:306) at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:158) at\n      * java.io.InputStreamReader.read(InputStreamReader.java:167) at java.io.BufferedReader.fill(BufferedReader.java:136) at\n      * java.io.BufferedReader.readLine(BufferedReader.java:299) at java.io.BufferedReader.readLine(BufferedReader.java:362) at\n      * org.apache.commons.codec.binary.Base32InputStreamTest.testInputStreamReader(Base32InputStreamTest.java:75)\n-     * \n+     *\n      * But in commons-codec-1.5 it's fixed. :-)\n-     * \n+     *\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n \n     /**\n      * Test the Base32InputStream implementation against the special NPE inducing input identified in the CODEC-98 bug.\n-     * \n+     *\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n \n     /**\n      * Tests skipping past the end of a stream.\n-     * \n+     *\n      * @throws Throwable\n      */\n     @Test\n \n     /**\n      * Tests the Base32InputStream implementation against empty input.\n-     * \n+     *\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n \n     /**\n      * Tests the Base32InputStream implementation against empty input.\n-     * \n+     *\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n \n     /**\n      * Tests the Base32InputStream implementation.\n-     * \n+     *\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n \n     /**\n      * Tests the Base32InputStream implementation.\n-     * \n+     *\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n      * <p/>\n      * By \"[WRAP-WRAP-WRAP-etc...]\" we mean situation where the Base32InputStream wraps itself in encode and decode mode over and over\n      * again.\n-     * \n+     *\n      * @param encoded\n      *            base32 encoded data\n      * @param decoded\n      * <p/>\n      * By \"[WRAP-WRAP-WRAP-etc...]\" we mean situation where the Base32InputStream wraps itself in encode and decode mode over and over\n      * again.\n-     * \n+     *\n      * @param encoded\n      *            base32 encoded data\n      * @param decoded\n \n     /**\n      * Tests markSupported.\n-     * \n+     *\n      * @throws Exception\n      */\n     @Test\n \n     /**\n      * Tests read returning 0\n-     * \n+     *\n      * @throws Exception\n      */\n     @Test\n \n     /**\n      * Tests read with null.\n-     * \n+     *\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n \n     /**\n      * Tests read throwing IndexOutOfBoundsException\n-     * \n+     *\n      * @throws Exception\n      */\n     @Test\n \n     /**\n      * Tests skipping as a noop\n-     * \n+     *\n      * @throws Throwable\n      */\n     @Test\n \n     /**\n      * Tests skipping number of characters larger than the internal buffer.\n-     * \n+     *\n      * @throws Throwable\n      */\n     @Test\n \n     /**\n      * Tests skipping past the end of a stream.\n-     * \n+     *\n      * @throws Throwable\n      */\n     @Test\n \n     /**\n      * Tests skipping to the end of a stream.\n-     * \n+     *\n      * @throws Throwable\n      */\n     @Test\n--- a/src/test/java/org/apache/commons/codec/binary/Base32OutputStreamTest.java\n+++ b/src/test/java/org/apache/commons/codec/binary/Base32OutputStreamTest.java\n \n     private final static byte[] LF = {(byte) '\\n'};\n \n-    \n+\n \n //    /**\n //     * Test the Base32OutputStream implementation against the special NPE inducing input\n //            \"codec-98 NPE Base32OutputStream\", Base32TestData.CODEC_98_NPE_DECODED, decoded\n //        );\n //    }\n-    \n+\n \n     /**\n      * Test the Base32OutputStream implementation against empty input.\n-     * \n+     *\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n \n     /**\n      * Test the Base32OutputStream implementation against empty input.\n-     * \n+     *\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n \n     /**\n      * Test the Base32OutputStream implementation\n-     * \n+     *\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n \n     /**\n      * Test the Base32OutputStream implementation\n-     * \n+     *\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n      * <p/>\n      * By \"[WRAP-WRAP-WRAP-etc...]\" we mean situation where the Base32OutputStream wraps itself in encode and decode\n      * mode over and over again.\n-     * \n+     *\n      * @param encoded\n      *            Base32 encoded data\n      * @param decoded\n      * <p/>\n      * By \"[WRAP-WRAP-WRAP-etc...]\" we mean situation where the Base32OutputStream wraps itself in encode and decode\n      * mode over and over again.\n-     * \n+     *\n      * @param encoded\n      *            Base32 encoded data\n      * @param decoded\n \n     /**\n      * Tests Base32OutputStream.write for expected IndexOutOfBoundsException conditions.\n-     * \n+     *\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n \n     /**\n      * Tests Base32OutputStream.write(null).\n-     * \n+     *\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n--- a/src/test/java/org/apache/commons/codec/binary/Base32Test.java\n+++ b/src/test/java/org/apache/commons/codec/binary/Base32Test.java\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n- * \n+ *\n  */\n \n package org.apache.commons.codec.binary;\n import org.junit.Test;\n \n public class Base32Test {\n-    \n+\n     private static final String [][] BASE32_TEST_CASES = { // RFC 4648\n         {\"\"       ,\"\"},\n         {\"f\"      ,\"MY======\"},\n         Base32 codec = new Base32(20);\n         for (String[] element : BASE32_TEST_CASES_CHUNKED) {\n                 assertEquals(element[1], codec.encodeAsString(element[0].getBytes(Charsets.UTF_8)));\n-        }        \n+        }\n     }\n \n     @Test\n             //assertEquals(b[0],codec.decode(b[1]));\n         }\n     }\n-    \n+\n     @Test\n     public void testRandomBytesHex() {\n         for (int i = 0; i < 20; i++) {\n--- a/src/test/java/org/apache/commons/codec/binary/Base32TestData.java\n+++ b/src/test/java/org/apache/commons/codec/binary/Base32TestData.java\n /**\n  * This random data was encoded by OpenSSL. Java had nothing to do with it. This data helps us test interop between\n  * Commons-Codec and OpenSSL. Notice that OpenSSL creates 64 character lines instead of the 76 of Commons-Codec.\n- * \n+ *\n  * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n  * @version $Id $\n  * @since 1.4\n \n     /**\n      * Returns an encoded and decoded copy of the same random data.\n-     * \n+     *\n      * @param codec the codec to use\n      * @param size amount of random data to generate and encode\n-     * @return two byte[] arrays:  [0] = decoded, [1] = encoded \n+     * @return two byte[] arrays:  [0] = decoded, [1] = encoded\n      */\n     static byte[][] randomData(BaseNCodec codec, int size) {\n         Random r = new Random();\n--- a/src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java\n+++ b/src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java\n         s[180] = \"hN4+x/sK9FRZn5llaw7/XDGwht3BcIxAFP4JoGqVQCw8c5IOlSqKEOViYss1mnvko6kVrc2iMEA8h8RssJ4dJBpFDZ/bkehCyhQmWpspZtAvRN59mj6nx0SBglYGccPyrn3e0uvvGJ5nYmjTA7gqB0Y+FFGAYwgAO345ipxTrMFsnJ8a913GzpobJdcHiw5hfqYK2iqo8STzVljaGMc5WSzP69vFDTHSS39YSfbE890TPBgm\";\n     }\n \n-    /* These are chunked versions of the strings above (chunked by commons-codec-1.3.jar) */    \n+    /* These are chunked versions of the strings above (chunked by commons-codec-1.3.jar) */\n     private static void initCHUNKED_STRINGS() {\n         String[] c = CHUNKED_STRINGS;\n         c[0] = \"\";\n     /**\n      * Tests to make sure Base64's implementation of the org.apache.commons.codec.Encoder\n      * interface is behaving identical to commons-codec-1.3.jar.\n-     * \n+     *\n      * @throws EncoderException problem\n      */\n     @Test\n      * interface is behaving identical to commons-codec-1.3.jar.\n      *\n      * @throws DecoderException problem\n-     */    \n+     */\n     @Test\n     public void testDecoder() throws DecoderException {\n         Decoder dec = new Base64();\n      * interface is behaving identical to commons-codec-1.3.jar.\n      *\n      * @throws EncoderException problem\n-     */        \n+     */\n     @Test\n     public void testBinaryEncoder() throws EncoderException {\n         BinaryEncoder enc = new Base64();\n      * interface is behaving identical to commons-codec-1.3.jar.\n      *\n      * @throws DecoderException problem\n-     */    \n+     */\n     @Test\n     public void testBinaryDecoder() throws DecoderException {\n         BinaryDecoder dec = new Base64();\n      * static method is behaving identical to commons-codec-1.3.jar.\n      *\n      * @throws EncoderException problem\n-     */        \n+     */\n     @Test\n     public void testStaticEncode() throws EncoderException {\n         for (int i = 0; i < STRINGS.length; i++) {\n      * static method is behaving identical to commons-codec-1.3.jar.\n      *\n      * @throws DecoderException problem\n-     */            \n+     */\n     @Test\n     public void testStaticDecode() throws DecoderException {\n         for (int i = 0; i < STRINGS.length; i++) {\n      * static method is behaving identical to commons-codec-1.3.jar.\n      *\n      * @throws EncoderException problem\n-     */                \n+     */\n     @Test\n     public void testStaticEncodeChunked() throws EncoderException {\n         for (int i = 0; i < STRINGS.length; i++) {\n      * supplied with chunked input.\n      *\n      * @throws DecoderException problem\n-     */                \n+     */\n     @Test\n     public void testStaticDecodeChunked() throws DecoderException {\n         for (int i = 0; i < STRINGS.length; i++) {\n         // We would use commons-codec-1.4.jar own utility method for this, but we\n         // need this class to be able to run against commons-codec-1.3.jar, hence the\n         // duplication here.\n-        \n+\n         return s != null ? s.getBytes(Charsets.UTF_8) : null;\n     }\n }\n--- a/src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java\n+++ b/src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java\n \n     /**\n      * Test for the CODEC-101 bug: InputStream.read(byte[]) should never return 0 because Java's builtin InputStreamReader hates that.\n-     * \n+     *\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n     /**\n      * Another test for the CODEC-101 bug: In commons-codec-1.4 this test shows InputStreamReader explicitly hating an\n      * InputStream.read(byte[]) return of 0:\n-     * \n+     *\n      * java.io.IOException: Underlying input stream returned zero bytes at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:268) at\n      * sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:306) at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:158) at\n      * java.io.InputStreamReader.read(InputStreamReader.java:167) at java.io.BufferedReader.fill(BufferedReader.java:136) at\n      * java.io.BufferedReader.readLine(BufferedReader.java:299) at java.io.BufferedReader.readLine(BufferedReader.java:362) at\n      * org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader(Base64InputStreamTest.java:75)\n-     * \n+     *\n      * But in commons-codec-1.5 it's fixed. :-)\n-     * \n+     *\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n \n     /**\n      * Test the Base64InputStream implementation against the special NPE inducing input identified in the CODEC-98 bug.\n-     * \n+     *\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n \n     /**\n      * Tests the Base64InputStream implementation against empty input.\n-     * \n+     *\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n \n     /**\n      * Tests the Base64InputStream implementation against empty input.\n-     * \n+     *\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n \n     /**\n      * Tests the Base64InputStream implementation.\n-     * \n+     *\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n \n     /**\n      * Tests the Base64InputStream implementation.\n-     * \n+     *\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n      * <p/>\n      * By \"[WRAP-WRAP-WRAP-etc...]\" we mean situation where the Base64InputStream wraps itself in encode and decode mode over and over\n      * again.\n-     * \n+     *\n      * @param encoded\n      *            base64 encoded data\n      * @param decoded\n      * <p/>\n      * By \"[WRAP-WRAP-WRAP-etc...]\" we mean situation where the Base64InputStream wraps itself in encode and decode mode over and over\n      * again.\n-     * \n+     *\n      * @param encoded\n      *            base64 encoded data\n      * @param decoded\n \n     /**\n      * Tests markSupported.\n-     * \n+     *\n      * @throws Exception\n      */\n     @Test\n \n     /**\n      * Tests read returning 0\n-     * \n+     *\n      * @throws Exception\n      */\n     @Test\n \n     /**\n      * Tests read with null.\n-     * \n+     *\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n \n     /**\n      * Tests read throwing IndexOutOfBoundsException\n-     * \n+     *\n      * @throws Exception\n      */\n     @Test\n \n     /**\n      * Tests skipping as a noop\n-     * \n+     *\n      * @throws Throwable\n      */\n     @Test\n \n     /**\n      * Tests skipping past the end of a stream.\n-     * \n+     *\n      * @throws Throwable\n      */\n     @Test\n \n     /**\n      * Tests skipping to the end of a stream.\n-     * \n+     *\n      * @throws Throwable\n      */\n     @Test\n--- a/src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java\n+++ b/src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java\n             \"codec-98 NPE Base64OutputStream\", Base64TestData.CODEC_98_NPE_DECODED, decoded\n         );\n     }\n-    \n+\n \n     /**\n      * Test the Base64OutputStream implementation against empty input.\n-     * \n+     *\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n \n     /**\n      * Test the Base64OutputStream implementation against empty input.\n-     * \n+     *\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n \n     /**\n      * Test the Base64OutputStream implementation\n-     * \n+     *\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n \n     /**\n      * Test the Base64OutputStream implementation\n-     * \n+     *\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n      * <p/>\n      * By \"[WRAP-WRAP-WRAP-etc...]\" we mean situation where the Base64OutputStream wraps itself in encode and decode\n      * mode over and over again.\n-     * \n+     *\n      * @param encoded\n      *            base64 encoded data\n      * @param decoded\n      * <p/>\n      * By \"[WRAP-WRAP-WRAP-etc...]\" we mean situation where the Base64OutputStream wraps itself in encode and decode\n      * mode over and over again.\n-     * \n+     *\n      * @param encoded\n      *            base64 encoded data\n      * @param decoded\n \n     /**\n      * Tests Base64OutputStream.write for expected IndexOutOfBoundsException conditions.\n-     * \n+     *\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n \n     /**\n      * Tests Base64OutputStream.write(null).\n-     * \n+     *\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n--- a/src/test/java/org/apache/commons/codec/binary/Base64Test.java\n+++ b/src/test/java/org/apache/commons/codec/binary/Base64Test.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Test cases for Base64 class.\n- * \n+ *\n  * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n  * @version $Id$\n  */\n         String emptyString = \"\";\n         String validString = \"abc===defg\\n\\r123456\\r789\\r\\rABC\\n\\nDEF==GHI\\r\\nJKL==============\";\n         String invalidString = validString + (char)0; // append null character\n-        \n+\n         try {\n             Base64.isBase64(nullString);\n             fail(\"Base64.isStringBase64() should not be null-safe.\");\n         } catch (NullPointerException npe) {\n             assertNotNull(\"Base64.isStringBase64() should not be null-safe.\", npe);\n         }\n-        \n+\n         assertTrue(\"Base64.isStringBase64(empty-string) is true\", Base64.isBase64(emptyString));\n-        assertTrue(\"Base64.isStringBase64(valid-string) is true\", Base64.isBase64(validString));        \n-        assertFalse(\"Base64.isStringBase64(invalid-string) is false\", Base64.isBase64(invalidString));        \n-    }\n-    \n+        assertTrue(\"Base64.isStringBase64(valid-string) is true\", Base64.isBase64(validString));\n+        assertFalse(\"Base64.isStringBase64(invalid-string) is false\", Base64.isBase64(invalidString));\n+    }\n+\n     /**\n      * Test the Base64 implementation\n      */\n         // bogus characters to decode (to skip actually) {e-acute*6}\n         byte[] decode = b64.decode(\"SGVsbG{\\u00e9\\u00e9\\u00e9\\u00e9\\u00e9\\u00e9}8gV29ybGQ=\");\n         String decodeString = StringUtils.newStringUtf8(decode);\n-        assertEquals(\"decode hello world\", \"Hello World\", decodeString);        \n+        assertEquals(\"decode hello world\", \"Hello World\", decodeString);\n     }\n \n     /**\n         testEncodeOverMaxSize(1);\n         testEncodeOverMaxSize(2);\n     }\n-    \n+\n     @Test\n     public void testCodec112() { // size calculation assumes always chunked\n         byte[] in = new byte[] {0};\n      * <li>BASE64(\"fooba\") = \"Zm9vYmE=\"</li>\n      * <li>BASE64(\"foobar\") = \"Zm9vYmFy\"</li>\n      * </ul>\n-     * \n+     *\n      * @see <a href=\"http://tools.ietf.org/html/rfc4648\">http://tools.ietf.org/html/rfc4648</a>\n      */\n     @Test\n         assertEquals(\"fooba\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9vYmE=\")));\n         assertEquals(\"foobar\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9vYmFy\")));\n     }\n-    \n+\n     /**\n      * Tests RFC 4648 section 10 test vectors.\n      * <ul>\n      * <li>BASE64(\"fooba\") = \"Zm9vYmE=\"</li>\n      * <li>BASE64(\"foobar\") = \"Zm9vYmFy\"</li>\n      * </ul>\n-     * \n+     *\n      * @see <a href=\"http://tools.ietf.org/html/rfc4648\">http://tools.ietf.org/html/rfc4648</a>\n      */\n     @Test\n         assertEquals(\"fooba\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9vYmE=\" + CRLF)));\n         assertEquals(\"foobar\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9vYmFy\" + CRLF)));\n     }\n-    \n+\n     /**\n      * Tests RFC 4648 section 10 test vectors.\n      * <ul>\n      * <li>BASE64(\"fooba\") = \"Zm9vYmE=\"</li>\n      * <li>BASE64(\"foobar\") = \"Zm9vYmFy\"</li>\n      * </ul>\n-     * \n+     *\n      * @see <a href=\"http://tools.ietf.org/html/rfc4648\">http://tools.ietf.org/html/rfc4648</a>\n      */\n     @Test\n         assertEquals(\"Zm9vYmE=\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"fooba\")));\n         assertEquals(\"Zm9vYmFy\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"foobar\")));\n     }\n-    \n+\n     /**\n      * Tests RFC 4648 section 10 test vectors.\n      * <ul>\n      * <li>BASE64(\"fooba\") = \"Zm9vYmE=\"</li>\n      * <li>BASE64(\"foobar\") = \"Zm9vYmFy\"</li>\n      * </ul>\n-     * \n+     *\n      * @see <a href=\"http://tools.ietf.org/html/rfc4648\">http://tools.ietf.org/html/rfc4648</a>\n      */\n     @Test\n         //testDecodeEncode(\"Zm9vYmE=\");\n         //testDecodeEncode(\"Zm9vYmFy\");\n     }\n-    \n+\n     private void testDecodeEncode(String encodedText) {\n         String decodedText = StringUtils.newStringUsAscii(Base64.decodeBase64(encodedText));\n         String encodedText2 = Base64.encodeBase64String(StringUtils.getBytesUtf8(decodedText));\n      * <li>BASE64(\"fooba\") = \"Zm9vYmE=\"</li>\n      * <li>BASE64(\"foobar\") = \"Zm9vYmFy\"</li>\n      * </ul>\n-     * \n+     *\n      * @see <a href=\"http://tools.ietf.org/html/rfc4648\">http://tools.ietf.org/html/rfc4648</a>\n      */\n     @Test\n         testEncodeDecode(\"fooba\");\n         testEncodeDecode(\"foobar\");\n     }\n-    \n+\n     private void testEncodeDecode(String plainText) {\n         String encodedText = Base64.encodeBase64String(StringUtils.getBytesUtf8(plainText));\n         String decodedText = StringUtils.newStringUsAscii(Base64.decodeBase64(encodedText));\n         assertEquals(plainText, decodedText);\n     }\n-    \n+\n     @Test\n     public void testSingletons() {\n         assertEquals(\"AA==\", new String(Base64.encodeBase64(new byte[]{(byte) 0})));\n     /**\n      * Base64 encoding of UUID's is a common use-case, especially in URL-SAFE mode. This test case ends up being the\n      * \"URL-SAFE\" JUnit's.\n-     * \n+     *\n      * @throws DecoderException\n      *             if Hex.decode() fails - a serious problem since Hex comes from our own commons-codec!\n      */\n         }\n         return buf.toString();\n     }\n-    \n+\n     /**\n      * Tests a lineSeparator much bigger than DEFAULT_BUFFER_SIZE.\n-     * \n+     *\n      * @see <a href=\"http://mail-archives.apache.org/mod_mbox/commons-dev/201202.mbox/%3C4F3C85D7.5060706@snafu.de%3E\">dev@commons.apache.org</a>\n      */\n     @Test\n--- a/src/test/java/org/apache/commons/codec/binary/Base64TestData.java\n+++ b/src/test/java/org/apache/commons/codec/binary/Base64TestData.java\n /**\n  * This random data was encoded by OpenSSL. Java had nothing to do with it. This data helps us test interop between\n  * Commons-Codec and OpenSSL. Notice that OpenSSL creates 64 character lines instead of the 76 of Commons-Codec.\n- * \n+ *\n  * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n  * @version $Id $\n  * @since 1.4\n \n     /**\n      * Returns an encoded and decoded copy of the same random data.\n-     * \n+     *\n      * @param size amount of random data to generate and encode\n      * @param urlSafe true if encoding be urlSafe\n-     * @return two byte[] arrays:  [0] = decoded, [1] = encoded \n+     * @return two byte[] arrays:  [0] = decoded, [1] = encoded\n      */\n     static byte[][] randomData(int size, boolean urlSafe) {\n         Random r = new Random();\n--- a/src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java\n+++ b/src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n- * \n+ *\n  */\n \n package org.apache.commons.codec.binary;\n public class BaseNCodecTest {\n \n     BaseNCodec codec;\n-    \n+\n     @Before\n     public void setUp() {\n         codec = new BaseNCodec(0, 0, 0, 0) {\n             protected boolean isInAlphabet(byte b) {\n                 return b=='O' || b == 'K'; // allow OK\n             }\n-            \n+\n             @Override\n             void encode(byte[] pArray, int i, int length, Context context) {\n             }\n-            \n+\n             @Override\n             void decode(byte[] pArray, int i, int length, Context context) {\n             }\n-        };        \n+        };\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java\n+++ b/src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * TestCase for BinaryCodec class.\n- * \n+ *\n  * @version $Id$\n  */\n public class BinaryCodecTest {\n     // ------------------------------------------------------------------------\n     /**\n      * Utility used to assert the encoded and decoded values.\n-     * \n+     *\n      * @param bits\n      *            the pre-encoded data\n      * @param encodeMe\n--- a/src/test/java/org/apache/commons/codec/binary/Codec105ErrorInputStream.java\n+++ b/src/test/java/org/apache/commons/codec/binary/Codec105ErrorInputStream.java\n \n /**\n  * Emits three line-feeds '\\n' in a row, one at a time, and then EOF.\n- * \n+ *\n  * Recreates the bug described in CODEC-105.\n- * \n+ *\n  * @version $Id $\n  * @since 1.5\n  */\n--- a/src/test/java/org/apache/commons/codec/binary/HexTest.java\n+++ b/src/test/java/org/apache/commons/codec/binary/HexTest.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Tests {@link org.apache.commons.codec.binary.Hex}.\n- * \n+ *\n  * @version $Id$\n  */\n public class HexTest {\n \n     private static final String BAD_ENCODING_NAME = \"UNKNOWN\";\n-    \n+\n     private final static boolean LOG = false;\n \n     private boolean charsetSanityCheck(String name) {\n                 // x-JIS0208\n                 // x-MacDingbat\n                 // x-MacSymbol\n-                // \n+                //\n                 log(\"FAILED charsetSanityCheck=Interesting Java charset oddity: Roundtrip failed for \" + name);\n             }\n             return equals;\n     @Test\n     public void testCustomCharset() throws UnsupportedEncodingException, DecoderException {\n         for (String name : Charset.availableCharsets().keySet()) {\n-            testCustomCharset(name, \"testCustomCharset\");            \n+            testCustomCharset(name, \"testCustomCharset\");\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java\n+++ b/src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Tests {@link StringUtils}\n- * \n+ *\n  * @version $Id$\n  */\n public class StringUtilsTest {\n--- a/src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java\n+++ b/src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Tests DigestUtils methods.\n- * \n+ *\n  * @version $Id$\n  */\n public class DigestUtilsTest {\n \n     private final byte[] testData = new byte[1024*1024];\n-    \n+\n     private byte[] getBytesUtf8(String hashMe) {\n         return StringUtils.getBytesUtf8(hashMe);\n     }\n     public void testConstructable() {\n         new DigestUtils();\n     }\n-    \n+\n     @Test\n     public void testInternalNoSuchAlgorithmException() {\n         try {\n              DigestUtils.sha256Hex(getBytesUtf8(\"abc\")));\n     assertEquals(\"248d6a61d20638b8e5c026930c3e6039a33ce45964ff2167f6ecedd419db06c1\",\n              DigestUtils.sha256Hex(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\"));\n-    \n+\n     assertEquals(DigestUtils.sha256Hex(testData),\n             DigestUtils.sha256Hex(new ByteArrayInputStream(testData)));\n-    }    \n+    }\n \n     @Test\n     public void testSha384() throws IOException {\n     // Examples from FIPS 180-2\n-    assertEquals(\"cb00753f45a35e8bb5a03d699ac65007272c32ab0eded1631a8b605a43ff5bed\" + \n+    assertEquals(\"cb00753f45a35e8bb5a03d699ac65007272c32ab0eded1631a8b605a43ff5bed\" +\n              \"8086072ba1e7cc2358baeca134c825a7\",\n              DigestUtils.sha384Hex(\"abc\"));\n-    assertEquals(\"cb00753f45a35e8bb5a03d699ac65007272c32ab0eded1631a8b605a43ff5bed\" + \n+    assertEquals(\"cb00753f45a35e8bb5a03d699ac65007272c32ab0eded1631a8b605a43ff5bed\" +\n              \"8086072ba1e7cc2358baeca134c825a7\",\n              DigestUtils.sha384Hex(getBytesUtf8(\"abc\")));\n     assertEquals(\"09330c33f71147e83d192fc782cd1b4753111b173b3b05d22fa08086e3b0f712\" +\n     assertEquals(\"ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a\" +\n              \"2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f\",\n              DigestUtils.sha512Hex(getBytesUtf8(\"abc\")));\n-    assertEquals(\"8e959b75dae313da8cf4f72814fc143f8f7779c6eb9f7fa17299aeadb6889018\" + \n+    assertEquals(\"8e959b75dae313da8cf4f72814fc143f8f7779c6eb9f7fa17299aeadb6889018\" +\n              \"501d289e4900f7e4331b99dec4b5433ac7d329eeb6dd26545e96e55b874be909\",\n-             DigestUtils.sha512Hex(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn\" + \n+             DigestUtils.sha512Hex(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn\" +\n                        \"hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu\"));\n     assertEquals(DigestUtils.sha512Hex(testData),\n             DigestUtils.sha512Hex(new ByteArrayInputStream(testData)));\n-}    \n+}\n \n     @Test\n     public void testShaHex() throws IOException {\n                 DigestUtils.shaHex(new ByteArrayInputStream(testData)));\n \n     }\n-    \n+\n     @Test\n     public void testUpdateWithByteArray(){\n         final String d1 = \"C'est un homme qui rentre dans un caf\u00e9, et plouf\";\n     public void testUpdateWithString(){\n         final String d1 = \"C'est un homme qui rentre dans un caf\u00e9, et plouf\";\n         final String d2 = \"C'est un homme, c'est qu'une t\u00eate, on lui offre un cadeau: 'oh... encore un chapeau!'\";\n-        \n+\n         MessageDigest messageDigest = DigestUtils.getShaDigest();\n         messageDigest.update(StringUtils.getBytesUtf8(d1));\n         messageDigest.update(StringUtils.getBytesUtf8(d2));\n--- a/src/test/java/org/apache/commons/codec/language/Caverphone1Test.java\n+++ b/src/test/java/org/apache/commons/codec/language/Caverphone1Test.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Tests Caverphone1.\n- * \n+ *\n  * @version $Id: CaverphoneTest.java 1075947 2011-03-01 17:56:14Z ggregory $\n  * @since 1.5\n  */\n \n     /**\n      * Tests example adapted from version 2.0  http://caversham.otago.ac.nz/files/working/ctp150804.pdf\n-     * \n+     *\n      * AT1111 words: add, aid, at, art, eat, earth, head, hit, hot, hold, hard, heart, it, out, old\n-     * \n+     *\n      * @throws EncoderException\n      */\n     @Test\n \n     /**\n      * Tests some examples from version 2.0 http://caversham.otago.ac.nz/files/working/ctp150804.pdf\n-     * \n+     *\n      * @throws EncoderException\n      */\n     @Test\n \n     /**\n      * Tests example from http://caversham.otago.ac.nz/files/working/ctp060902.pdf\n-     * \n+     *\n      * @throws EncoderException\n      */\n     @Test\n \n     /**\n      * Tests examples from http://en.wikipedia.org/wiki/Caverphone\n-     * \n+     *\n      * @throws EncoderException\n      */\n     @Test\n--- a/src/test/java/org/apache/commons/codec/language/Caverphone2Test.java\n+++ b/src/test/java/org/apache/commons/codec/language/Caverphone2Test.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Tests Caverphone2.\n- * \n+ *\n  * @version $Id$\n  * @since 1.5\n  */\n \n     /**\n      * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf\n-     * \n+     *\n      * AT11111111 words: add, aid, at, art, eat, earth, head, hit, hot, hold, hard, heart, it, out, old\n-     * \n+     *\n      * @throws EncoderException\n      */\n     @Test\n \n     /**\n      * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf\n-     * \n+     *\n      * @throws EncoderException\n      */\n     @Test\n \n     /**\n      * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf\n-     * \n+     *\n      * @throws EncoderException\n      */\n     @Test\n \n     /**\n      * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf\n-     * \n+     *\n      * @throws EncoderException\n      */\n     @Test\n \n     /**\n      * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf\n-     * \n+     *\n      * @throws EncoderException\n      */\n     @Test\n \n     /**\n      * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf\n-     * \n+     *\n      * @throws EncoderException\n      */\n     @Test\n--- a/src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java\n+++ b/src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Tests the {@code ColognePhonetic} class.\n- * \n+ *\n  * <p>Keep this file in UTF-8 encoding for proper Javadoc processing.</p>\n- * \n+ *\n  */\n public class ColognePhoneticTest extends StringEncoderAbstractTest {\n \n     public void testAaclan() throws EncoderException {\n         this.checkEncoding(\"0856\", \"Aaclan\");\n     }\n-    \n+\n     /**\n      * Tests [CODEC-122]\n-     * \n+     *\n      * @throws EncoderException\n      */\n     @Test\n             {\"Wikipedia\", \"3412\"},\n             {\"peter\", \"127\"},\n             {\"pharma\", \"376\"},\n-            {\"m\\u00f6nchengladbach\", \"664645214\"}, // m\u00f6nchengladbach \n+            {\"m\\u00f6nchengladbach\", \"664645214\"}, // m\u00f6nchengladbach\n             {\"deutsch\", \"28\"},\n             {\"deutz\", \"28\"},\n             {\"hamburg\", \"06174\"},\n \n     @Test\n     public void testHyphen() throws EncoderException {\n-        String[][] data = {{\"bergisch-gladbach\", \"174845214\"}, \n+        String[][] data = {{\"bergisch-gladbach\", \"174845214\"},\n                 {\"M\\u00fcller-L\\u00fcdenscheidt\", \"65752682\"}}; // M\u00fcller-L\u00fcdenscheidt\n         this.checkEncodings(data);\n     }\n--- a/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java\n+++ b/src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * <p>\n  * The test data was extracted from Stephen Woodbridge's <a\n  * href=\"http://swoodbridge.com/DoubleMetaPhone/surnames.txt\">PHP test program</a>.\n- * \n+ *\n  * @see <a href=\"http://swoodbridge.com/DoubleMetaPhone/surnames.txt\">PHP test program</a>\n  * @version $Id$\n  */\n--- a/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java\n+++ b/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Tests {@link DoubleMetaphone}.\n- * \n+ *\n  * <p>Keep this file in UTF-8 encoding for proper Javadoc processing.</p>\n- * \n+ *\n  * @see \"http://www.cuj.com/documents/s=8038/cuj0006philips/\"\n  * @version $Id$\n  */\n \n     /**\n      * Test data from http://aspell.sourceforge.net/test/batch0.tab.\n-     * \n+     *\n      * \"Copyright (C) 2002 Kevin Atkinson (kevina@gnu.org). Verbatim copying\n      * and distribution of this entire article is permitted in any medium,\n      * provided this notice is preserved.\"\n-     * \n+     *\n      * Massaged the test data in the array below.\n      */\n     private static final String[][] FIXTURE = { { \"Accosinly\", \"Occasionally\" }, {\n     @Test\n     public void testSetMaxCodeLength() {\n         String value = \"jumped\";\n-        \n+\n         DoubleMetaphone doubleMetaphone = new DoubleMetaphone();\n \n         // Sanity check of default settings\n     public void testCCedilla() {\n         assertTrue(this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"\\u00e7\", \"S\")); // c-cedilla\n     }\n-    \n+\n     @Test\n     public void testNTilde() {\n         assertTrue(this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"\\u00f1\", \"N\")); // n-tilde\n     }\n-    \n+\n     public void validateFixture(String[][] pairs) {\n         if (pairs.length == 0) {\n             fail(\"Test fixture is empty\");\n--- a/src/test/java/org/apache/commons/codec/language/MetaphoneTest.java\n+++ b/src/test/java/org/apache/commons/codec/language/MetaphoneTest.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n             assertTrue(failMsg, this.getMetaphone().isMetaphoneEqual(name1, name0));\n         }\n     }\n-    \n+\n     /**\n      * @return Returns the metaphone.\n      */\n \n     /**\n      * Initial AE case.\n-     * \n+     *\n      * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n      */\n     @Test\n \n     /**\n      * Initial WH case.\n-     * \n+     *\n      * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n      */\n     @Test\n \n     /**\n      * Initial A, not followed by an E case.\n-     * \n+     *\n      * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n      */\n     @Test\n \n     /**\n      * Initial KN case.\n-     * \n+     *\n      * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n      */\n     @Test\n \n     /**\n      * Initial WR case.\n-     * \n+     *\n      * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n      */\n     @Test\n         assertEquals(\"LS\", this.getMetaphone().metaphone(\"lazy\"));\n         assertEquals(\"TKS\", this.getMetaphone().metaphone(\"dogs\"));\n     }\n-    \n+\n     @Test\n     public void testWordEndingInMB() {\n         assertEquals( \"KM\", this.getMetaphone().metaphone(\"COMB\") );\n      */\n     @Test\n     public void testWhy() {\n-        // PHP returns \"H\". The original metaphone returns an empty string. \n+        // PHP returns \"H\". The original metaphone returns an empty string.\n         assertEquals(\"\", this.getMetaphone().metaphone(\"WHY\"));\n     }\n \n--- a/src/test/java/org/apache/commons/codec/language/NysiisTest.java\n+++ b/src/test/java/org/apache/commons/codec/language/NysiisTest.java\n \n /**\n  * Tests {@link Nysiis}\n- * \n+ *\n  * @since 1.7\n  * @version $Id$\n  */\n public class NysiisTest extends StringEncoderAbstractTest {\n \n     private final Nysiis fullNysiis = new Nysiis(false);\n-    \n+\n     /**\n      * Takes an array of String pairs where each pair's first element is the input and the second element the expected\n      * encoding.\n-     * \n+     *\n      * @param testValues\n      *            an array of String pairs where each pair's first element is the input and the second element the\n      *            expected encoding.\n \n     /**\n      * Tests data gathered from around the internet.\n-     * \n+     *\n      * @see <a href=\"http://www.dropby.com/NYSIISTextStrings.html\">http://www.dropby.com/NYSIISTextStrings.html</a>\n      * @throws EncoderException\n      */\n \n     /**\n      * Tests data gathered from around the internets.\n-     * \n+     *\n      * @throws EncoderException\n      */\n     @Test\n \n     /**\n      * Tests rule 1: Translate first characters of name: MAC \u2192 MCC, KN \u2192 N, K \u2192 C, PH, PF \u2192 FF, SCH \u2192 SSS\n-     * \n+     *\n      * @throws EncoderException\n      */\n     @Test\n \n     /**\n      * Tests rule 2: Translate last characters of name: EE \u2192 Y, IE \u2192 Y, DT, RT, RD, NT, ND \u2192 D\n-     * \n+     *\n      * @throws EncoderException\n      */\n     @Test\n \n     /**\n      * Tests rule 4.1: EV \u2192 AF else A, E, I, O, U \u2192 A\n-     * \n+     *\n      * @throws EncoderException\n      */\n     @Test\n \n     /**\n      * Tests rule 4.2: Q \u2192 G, Z \u2192 S, M \u2192 N\n-     * \n+     *\n      * @throws EncoderException\n      */\n     @Test\n \n     /**\n      * Tests rule 5: If last character is S, remove it.\n-     * \n+     *\n      * @throws EncoderException\n      */\n     @Test\n \n     /**\n      * Tests rule 6: If last characters are AY, replace with Y.\n-     * \n+     *\n      * @throws EncoderException\n      */\n     @Test\n \n     /**\n      * Tests rule 7: If last character is A, remove it.\n-     * \n+     *\n      * @throws EncoderException\n      */\n     @Test\n--- a/src/test/java/org/apache/commons/codec/language/RefinedSoundexTest.java\n+++ b/src/test/java/org/apache/commons/codec/language/RefinedSoundexTest.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Tests RefinedSoundex.\n- * \n+ *\n  * @version $Id$\n  */\n public class RefinedSoundexTest extends StringEncoderAbstractTest {\n         char code = this.getRefinedSoundex().getMappingCode('#');\n         assertEquals(\"Code does not equals zero\", 0, code);\n     }\n-    \n+\n     @Test\n     public void testNewInstance() {\n         assertEquals(\"D6043\", new RefinedSoundex().soundex(\"dogs\"));\n     }\n-    \n+\n     @Test\n     public void testNewInstance2() {\n         assertEquals(\"D6043\", new RefinedSoundex(RefinedSoundex.US_ENGLISH_MAPPING_STRING.toCharArray()).soundex(\"dogs\"));\n     }\n-    \n+\n     @Test\n     public void testNewInstance3() {\n         assertEquals(\"D6043\", new RefinedSoundex(RefinedSoundex.US_ENGLISH_MAPPING_STRING).soundex(\"dogs\"));\n--- a/src/test/java/org/apache/commons/codec/language/SoundexTest.java\n+++ b/src/test/java/org/apache/commons/codec/language/SoundexTest.java\n \n /**\n  * Tests {@link Soundex}.\n- * \n+ *\n  * <p>Keep this file in UTF-8 encoding for proper Javadoc processing.</p>\n- * \n+ *\n  * @version $Id$\n  */\n public class SoundexTest extends StringEncoderAbstractTest {\n \n     /**\n      * Test data from http://www.myatt.demon.co.uk/sxalg.htm\n-     * \n+     *\n      * @throws EncoderException\n      */\n     @Test\n \n     /**\n      * Consonants from the same code group separated by W or H are treated as one.\n-     * \n+     *\n      * Test data from http://www.myatt.demon.co.uk/sxalg.htm\n      */\n     @Test\n \n     /**\n      * Consonants from the same code group separated by W or H are treated as one.\n-     * \n+     *\n      * @throws EncoderException\n      */\n     @Test\n      * Examples for MS SQLServer from\n      * http://support.microsoft.com/default.aspx?scid=http://support.microsoft.com:80/support\n      * /kb/articles/Q100/3/65.asp&NoWebContent=1\n-     * \n+     *\n      * @throws EncoderException\n      */\n     @Test\n \n     /**\n      * Fancy characters are not mapped by the default US mapping.\n-     * \n+     *\n      * http://issues.apache.org/bugzilla/show_bug.cgi?id=29080\n      */\n     @Test\n \n     /**\n      * Fancy characters are not mapped by the default US mapping.\n-     * \n+     *\n      * http://issues.apache.org/bugzilla/show_bug.cgi?id=29080\n      */\n     @Test\n--- a/src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java\n+++ b/src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java\n \n /**\n  * Tests BeiderMorseEncoder.\n- * \n+ *\n  * @since 1.6\n  */\n public class BeiderMorseEncoderTest extends StringEncoderAbstractTest {\n \n     /**\n      * Tests we do not blow up.\n-     * \n+     *\n      * @throws EncoderException\n      */\n     @Test\n     /**\n      * Tests https://issues.apache.org/jira/browse/CODEC-125?focusedCommentId=13071566&page=com.atlassian.jira.plugin.system.issuetabpanels:\n      * comment-tabpanel#comment-13071566\n-     * \n+     *\n      * @throws EncoderException\n      */\n     @Test\n \n     /**\n      * (Un)luckily, the worse performing test because of the data in {@link #TEST_CHARS}\n-     * \n+     *\n      * @throws EncoderException\n      */\n     @Test(/* timeout = 20000L */)\n--- a/src/test/java/org/apache/commons/codec/language/bm/LanguageGuessingTest.java\n+++ b/src/test/java/org/apache/commons/codec/language/bm/LanguageGuessingTest.java\n \n /**\n  * Tests guessLanguages API.\n- * \n+ *\n  * @since 1.6\n  */\n @RunWith(Parameterized.class)\n--- a/src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java\n+++ b/src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java\n \n /**\n  * Tests PhoneticEngine.\n- * \n+ *\n  * @since 1.6\n  */\n @RunWith(Parameterized.class)\n--- a/src/test/java/org/apache/commons/codec/language/bm/RuleTest.java\n+++ b/src/test/java/org/apache/commons/codec/language/bm/RuleTest.java\n \n /**\n  * Tests Rule.\n- * \n+ *\n  * @since 1.6\n  */\n public class RuleTest {\n--- a/src/test/java/org/apache/commons/codec/net/BCodecTest.java\n+++ b/src/test/java/org/apache/commons/codec/net/BCodecTest.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Quoted-printable codec test cases\n- * \n+ *\n  * @version $Id$\n  */\n public class BCodecTest {\n--- a/src/test/java/org/apache/commons/codec/net/QCodecTest.java\n+++ b/src/test/java/org/apache/commons/codec/net/QCodecTest.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Quoted-printable codec test cases\n- * \n+ *\n  * @version $Id$\n  */\n public class QCodecTest {\n-    \n+\n     static final int SWISS_GERMAN_STUFF_UNICODE [] = {\n         0x47, 0x72, 0xFC, 0x65, 0x7A, 0x69, 0x5F, 0x7A, 0xE4, 0x6D, 0xE4\n     };\n-    \n+\n     static final int RUSSIAN_STUFF_UNICODE [] = {\n-        0x412, 0x441, 0x435, 0x43C, 0x5F, 0x43F, 0x440, 0x438, \n-        0x432, 0x435, 0x442 \n-    }; \n+        0x412, 0x441, 0x435, 0x43C, 0x5F, 0x43F, 0x440, 0x438,\n+        0x432, 0x435, 0x442\n+    };\n \n     private String constructString(int [] unicodeChars) {\n         StringBuilder buffer = new StringBuilder();\n         if (unicodeChars != null) {\n             for (int unicodeChar : unicodeChars) {\n-                buffer.append((char)unicodeChar); \n+                buffer.append((char)unicodeChar);\n             }\n         }\n         return buffer.toString();\n     @Test\n     public void testUTF8RoundTrip() throws Exception {\n \n-        String ru_msg = constructString(RUSSIAN_STUFF_UNICODE); \n-        String ch_msg = constructString(SWISS_GERMAN_STUFF_UNICODE); \n-        \n+        String ru_msg = constructString(RUSSIAN_STUFF_UNICODE);\n+        String ch_msg = constructString(SWISS_GERMAN_STUFF_UNICODE);\n+\n         QCodec qcodec = new QCodec(CharEncoding.UTF_8);\n-        \n+\n         assertEquals(\n-            \"=?UTF-8?Q?=D0=92=D1=81=D0=B5=D0=BC=5F=D0=BF=D1=80=D0=B8=D0=B2=D0=B5=D1=82?=\", \n+            \"=?UTF-8?Q?=D0=92=D1=81=D0=B5=D0=BC=5F=D0=BF=D1=80=D0=B8=D0=B2=D0=B5=D1=82?=\",\n         qcodec.encode(ru_msg)\n         );\n         assertEquals(\"=?UTF-8?Q?Gr=C3=BCezi=5Fz=C3=A4m=C3=A4?=\", qcodec.encode(ch_msg));\n-        \n+\n         assertEquals(ru_msg, qcodec.decode(qcodec.encode(ru_msg)));\n         assertEquals(ch_msg, qcodec.decode(qcodec.encode(ch_msg)));\n     }\n         QCodec qcodec = new QCodec();\n         String plain = \"= Hello there =\\r\\n\";\n         String encoded = qcodec.encode(plain);\n-        assertEquals(\"Basic Q encoding test\", \n+        assertEquals(\"Basic Q encoding test\",\n             \"=?UTF-8?Q?=3D Hello there =3D=0D=0A?=\", encoded);\n-        assertEquals(\"Basic Q decoding test\", \n+        assertEquals(\"Basic Q decoding test\",\n             plain, qcodec.decode(encoded));\n     }\n \n         QCodec qcodec = new QCodec();\n         String plain = \"?_=\\r\\n\";\n         String encoded = qcodec.encode(plain);\n-        assertEquals(\"Unsafe chars Q encoding test\", \n+        assertEquals(\"Unsafe chars Q encoding test\",\n             \"=?UTF-8?Q?=3F=5F=3D=0D=0A?=\", encoded);\n-        assertEquals(\"Unsafe chars Q decoding test\", \n+        assertEquals(\"Unsafe chars Q decoding test\",\n             plain, qcodec.decode(encoded));\n     }\n \n     @Test\n     public void testEncodeDecodeNull() throws Exception {\n         QCodec qcodec = new QCodec();\n-        assertNull(\"Null string Q encoding test\", \n+        assertNull(\"Null string Q encoding test\",\n             qcodec.encode((String)null));\n-        assertNull(\"Null string Q decoding test\", \n+        assertNull(\"Null string Q decoding test\",\n             qcodec.decode((String)null));\n     }\n \n         String result = qcodec.decode( test );\n         assertEquals(\"Result should be null\", null, result);\n     }\n-    \n+\n \n     @Test\n     public void testEncodeObjects() throws Exception {\n         QCodec qcodec = new QCodec();\n         String plain = \"1+1 = 2\";\n         String encoded = (String) qcodec.encode((Object) plain);\n-        assertEquals(\"Basic Q encoding test\", \n+        assertEquals(\"Basic Q encoding test\",\n             \"=?UTF-8?Q?1+1 =3D 2?=\", encoded);\n \n         Object result = qcodec.encode((Object) null);\n         assertEquals( \"Encoding a null Object should return null\", null, result);\n-        \n+\n         try {\n             Object dObj = new Double(3.0);\n             qcodec.encode( dObj );\n             // Exception expected, test segment passes.\n         }\n     }\n-    \n+\n \n     @Test(expected=UnsupportedCharsetException.class)\n     public void testInvalidEncoding() {\n         QCodec qcodec = new QCodec();\n         String decoded = \"=?UTF-8?Q?1+1 =3D 2?=\";\n         String plain = (String) qcodec.decode((Object) decoded);\n-        assertEquals(\"Basic Q decoding test\", \n+        assertEquals(\"Basic Q decoding test\",\n             \"1+1 = 2\", plain);\n \n         Object result = qcodec.decode((Object) null);\n         assertEquals( \"Decoding a null Object should return null\", null, result);\n-        \n+\n         try {\n             Object dObj = new Double(3.0);\n             qcodec.decode( dObj );\n--- a/src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java\n+++ b/src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Quoted-printable codec test cases\n- * \n+ *\n  * @version $Id$\n  */\n public class QuotedPrintableCodecTest {\n-    \n+\n     static final int SWISS_GERMAN_STUFF_UNICODE [] = {\n         0x47, 0x72, 0xFC, 0x65, 0x7A, 0x69, 0x5F, 0x7A, 0xE4, 0x6D, 0xE4\n     };\n-    \n+\n     static final int RUSSIAN_STUFF_UNICODE [] = {\n-        0x412, 0x441, 0x435, 0x43C, 0x5F, 0x43F, 0x440, 0x438, \n-        0x432, 0x435, 0x442 \n-    }; \n+        0x412, 0x441, 0x435, 0x43C, 0x5F, 0x43F, 0x440, 0x438,\n+        0x432, 0x435, 0x442\n+    };\n \n     private String constructString(int [] unicodeChars) {\n         StringBuilder buffer = new StringBuilder();\n         if (unicodeChars != null) {\n             for (int unicodeChar : unicodeChars) {\n-                buffer.append((char)unicodeChar); \n+                buffer.append((char)unicodeChar);\n             }\n         }\n         return buffer.toString();\n     @Test\n     public void testUTF8RoundTrip() throws Exception {\n \n-        String ru_msg = constructString(RUSSIAN_STUFF_UNICODE); \n-        String ch_msg = constructString(SWISS_GERMAN_STUFF_UNICODE); \n-        \n-        QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n-        \n+        String ru_msg = constructString(RUSSIAN_STUFF_UNICODE);\n+        String ch_msg = constructString(SWISS_GERMAN_STUFF_UNICODE);\n+\n+        QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n+\n         assertEquals(\n-            \"=D0=92=D1=81=D0=B5=D0=BC_=D0=BF=D1=80=D0=B8=D0=B2=D0=B5=D1=82\", \n+            \"=D0=92=D1=81=D0=B5=D0=BC_=D0=BF=D1=80=D0=B8=D0=B2=D0=B5=D1=82\",\n         qpcodec.encode(ru_msg, CharEncoding.UTF_8)\n         );\n         assertEquals(\"Gr=C3=BCezi_z=C3=A4m=C3=A4\", qpcodec.encode(ch_msg, CharEncoding.UTF_8));\n-        \n+\n         assertEquals(ru_msg, qpcodec.decode(qpcodec.encode(ru_msg, CharEncoding.UTF_8), CharEncoding.UTF_8));\n         assertEquals(ch_msg, qpcodec.decode(qpcodec.encode(ch_msg, CharEncoding.UTF_8), CharEncoding.UTF_8));\n     }\n         QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n         String plain = \"= Hello there =\\r\\n\";\n         String encoded = qpcodec.encode(plain);\n-        assertEquals(\"Basic quoted-printable encoding test\", \n+        assertEquals(\"Basic quoted-printable encoding test\",\n             \"=3D Hello there =3D=0D=0A\", encoded);\n-        assertEquals(\"Basic quoted-printable decoding test\", \n+        assertEquals(\"Basic quoted-printable decoding test\",\n             plain, qpcodec.decode(encoded));\n     }\n \n         QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n         String plain = \"abc123_-.*~!@#$%^&()+{}\\\"\\\\;:`,/[]\";\n         String encoded = qpcodec.encode(plain);\n-        assertEquals(\"Safe chars quoted-printable encoding test\", \n+        assertEquals(\"Safe chars quoted-printable encoding test\",\n             plain, encoded);\n-        assertEquals(\"Safe chars quoted-printable decoding test\", \n+        assertEquals(\"Safe chars quoted-printable decoding test\",\n             plain, qpcodec.decode(encoded));\n     }\n \n         QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n         String plain = \"=\\r\\n\";\n         String encoded = qpcodec.encode(plain);\n-        assertEquals(\"Unsafe chars quoted-printable encoding test\", \n+        assertEquals(\"Unsafe chars quoted-printable encoding test\",\n             \"=3D=0D=0A\", encoded);\n-        assertEquals(\"Unsafe chars quoted-printable decoding test\", \n+        assertEquals(\"Unsafe chars quoted-printable decoding test\",\n             plain, qpcodec.decode(encoded));\n     }\n \n     @Test\n     public void testEncodeDecodeNull() throws Exception {\n         QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n-        assertNull(\"Null string quoted-printable encoding test\", \n+        assertNull(\"Null string quoted-printable encoding test\",\n             qpcodec.encode((String)null));\n-        assertNull(\"Null string quoted-printable decoding test\", \n+        assertNull(\"Null string quoted-printable decoding test\",\n             qpcodec.decode((String)null));\n     }\n \n         QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n         byte[] plain = null;\n         byte[] encoded = qpcodec.encode(plain);\n-        assertEquals(\"Encoding a null string should return null\", \n+        assertEquals(\"Encoding a null string should return null\",\n             null, encoded);\n     }\n-    \n+\n     @Test\n     public void testEncodeUrlWithNullBitSet() throws Exception {\n         QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n         String plain = \"1+1 = 2\";\n         String encoded = new String(QuotedPrintableCodec.\n             encodeQuotedPrintable(null, plain.getBytes(Charsets.UTF_8)));\n-        assertEquals(\"Basic quoted-printable encoding test\", \n+        assertEquals(\"Basic quoted-printable encoding test\",\n             \"1+1 =3D 2\", encoded);\n-        assertEquals(\"Basic quoted-printable decoding test\", \n-            plain, qpcodec.decode(encoded));\n-        \n+        assertEquals(\"Basic quoted-printable decoding test\",\n+            plain, qpcodec.decode(encoded));\n+\n     }\n \n     @Test\n         String result = qpcodec.decode( test, \"charset\" );\n         assertEquals(\"Result should be null\", null, result);\n     }\n-    \n+\n     @Test\n     public void testEncodeObjects() throws Exception {\n         QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n         String plain = \"1+1 = 2\";\n         String encoded = (String) qpcodec.encode((Object) plain);\n-        assertEquals(\"Basic quoted-printable encoding test\", \n+        assertEquals(\"Basic quoted-printable encoding test\",\n             \"1+1 =3D 2\", encoded);\n \n         byte[] plainBA = plain.getBytes(Charsets.UTF_8);\n         byte[] encodedBA = (byte[]) qpcodec.encode((Object) plainBA);\n         encoded = new String(encodedBA);\n-        assertEquals(\"Basic quoted-printable encoding test\", \n+        assertEquals(\"Basic quoted-printable encoding test\",\n             \"1+1 =3D 2\", encoded);\n-            \n+\n         Object result = qpcodec.encode((Object) null);\n         assertEquals( \"Encoding a null Object should return null\", null, result);\n-        \n+\n         try {\n             Object dObj = new Double(3.0);\n             qpcodec.encode( dObj );\n             // Exception expected, test segment passes.\n         }\n     }\n-    \n+\n     @Test(expected=UnsupportedCharsetException.class)\n     public void testInvalidEncoding() {\n         new QuotedPrintableCodec(\"NONSENSE\");\n         QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n         String plain = \"1+1 =3D 2\";\n         String decoded = (String) qpcodec.decode((Object) plain);\n-        assertEquals(\"Basic quoted-printable decoding test\", \n+        assertEquals(\"Basic quoted-printable decoding test\",\n             \"1+1 = 2\", decoded);\n \n         byte[] plainBA = plain.getBytes(Charsets.UTF_8);\n         byte[] decodedBA = (byte[]) qpcodec.decode((Object) plainBA);\n         decoded = new String(decodedBA);\n-        assertEquals(\"Basic quoted-printable decoding test\", \n+        assertEquals(\"Basic quoted-printable decoding test\",\n             \"1+1 = 2\", decoded);\n-            \n+\n         Object result = qpcodec.decode((Object) null);\n         assertEquals( \"Decoding a null Object should return null\", null, result);\n-        \n+\n         try {\n             Object dObj = new Double(3.0);\n             qpcodec.decode( dObj );\n     @Ignore\n     /**\n      * The QuotedPrintableCodec documentation states that this is not supported.\n-     *  \n+     *\n      * @throws Exception\n      * @see <a href=\"https://issues.apache.org/jira/browse/CODEC-121\">CODEC-121</a>\n      */\n     @Ignore\n     /**\n      * The QuotedPrintableCodec documentation states that this is not supported.\n-     *  \n+     *\n      * @throws Exception\n      * @see <a href=\"https://issues.apache.org/jira/browse/CODEC-121\">CODEC-121</a>\n      */\n--- a/src/test/java/org/apache/commons/codec/net/RFC1522CodecTest.java\n+++ b/src/test/java/org/apache/commons/codec/net/RFC1522CodecTest.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * RFC 1522 compliant codec test cases\n- * \n+ *\n  * @version $Id$\n  */\n public class RFC1522CodecTest {\n--- a/src/test/java/org/apache/commons/codec/net/URLCodecTest.java\n+++ b/src/test/java/org/apache/commons/codec/net/URLCodecTest.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * URL codec test cases\n- * \n+ *\n  * @version $Id$\n  */\n public class URLCodecTest {\n-    \n+\n     static final int SWISS_GERMAN_STUFF_UNICODE [] = {\n         0x47, 0x72, 0xFC, 0x65, 0x7A, 0x69, 0x5F, 0x7A, 0xE4, 0x6D, 0xE4\n     };\n-    \n+\n     static final int RUSSIAN_STUFF_UNICODE [] = {\n-        0x412, 0x441, 0x435, 0x43C, 0x5F, 0x43F, 0x440, 0x438, \n-        0x432, 0x435, 0x442 \n-    }; \n+        0x412, 0x441, 0x435, 0x43C, 0x5F, 0x43F, 0x440, 0x438,\n+        0x432, 0x435, 0x442\n+    };\n \n     private void validateState(URLCodec urlCodec) {\n         // no tests for now.\n     }\n-    \n+\n     private String constructString(int [] unicodeChars) {\n         StringBuilder buffer = new StringBuilder();\n         if (unicodeChars != null) {\n             for (int unicodeChar : unicodeChars) {\n-                buffer.append((char)unicodeChar); \n+                buffer.append((char)unicodeChar);\n             }\n         }\n         return buffer.toString();\n     }\n-    \n+\n     @Test\n     public void testUTF8RoundTrip() throws Exception {\n \n-        String ru_msg = constructString(RUSSIAN_STUFF_UNICODE); \n-        String ch_msg = constructString(SWISS_GERMAN_STUFF_UNICODE); \n-        \n-        URLCodec urlCodec = new URLCodec();\n-        this.validateState(urlCodec);\n-        \n+        String ru_msg = constructString(RUSSIAN_STUFF_UNICODE);\n+        String ch_msg = constructString(SWISS_GERMAN_STUFF_UNICODE);\n+\n+        URLCodec urlCodec = new URLCodec();\n+        this.validateState(urlCodec);\n+\n         assertEquals(\n-            \"%D0%92%D1%81%D0%B5%D0%BC_%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D1%82\", \n+            \"%D0%92%D1%81%D0%B5%D0%BC_%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D1%82\",\n             urlCodec.encode(ru_msg, CharEncoding.UTF_8)\n         );\n         assertEquals(\"Gr%C3%BCezi_z%C3%A4m%C3%A4\", urlCodec.encode(ch_msg, CharEncoding.UTF_8));\n-        \n+\n         assertEquals(ru_msg, urlCodec.decode(urlCodec.encode(ru_msg, CharEncoding.UTF_8), CharEncoding.UTF_8));\n         assertEquals(ch_msg, urlCodec.decode(urlCodec.encode(ch_msg, CharEncoding.UTF_8), CharEncoding.UTF_8));\n         this.validateState(urlCodec);\n         URLCodec urlCodec = new URLCodec();\n         String plain = \"Hello there!\";\n         String encoded = urlCodec.encode(plain);\n-        assertEquals(\"Basic URL encoding test\", \n+        assertEquals(\"Basic URL encoding test\",\n             \"Hello+there%21\", encoded);\n-        assertEquals(\"Basic URL decoding test\", \n+        assertEquals(\"Basic URL decoding test\",\n             plain, urlCodec.decode(encoded));\n         this.validateState(urlCodec);\n     }\n         URLCodec urlCodec = new URLCodec();\n         String plain = \"abc123_-.*\";\n         String encoded = urlCodec.encode(plain);\n-        assertEquals(\"Safe chars URL encoding test\", \n+        assertEquals(\"Safe chars URL encoding test\",\n             plain, encoded);\n-        assertEquals(\"Safe chars URL decoding test\", \n+        assertEquals(\"Safe chars URL decoding test\",\n             plain, urlCodec.decode(encoded));\n         this.validateState(urlCodec);\n     }\n         URLCodec urlCodec = new URLCodec();\n         String plain = \"~!@#$%^&()+{}\\\"\\\\;:`,/[]\";\n         String encoded = urlCodec.encode(plain);\n-        assertEquals(\"Unsafe chars URL encoding test\", \n+        assertEquals(\"Unsafe chars URL encoding test\",\n             \"%7E%21%40%23%24%25%5E%26%28%29%2B%7B%7D%22%5C%3B%3A%60%2C%2F%5B%5D\", encoded);\n-        assertEquals(\"Unsafe chars URL decoding test\", \n+        assertEquals(\"Unsafe chars URL decoding test\",\n             plain, urlCodec.decode(encoded));\n         this.validateState(urlCodec);\n     }\n     @Test\n     public void testEncodeDecodeNull() throws Exception {\n         URLCodec urlCodec = new URLCodec();\n-        assertNull(\"Null string URL encoding test\", \n+        assertNull(\"Null string URL encoding test\",\n             urlCodec.encode((String)null));\n-        assertNull(\"Null string URL decoding test\", \n+        assertNull(\"Null string URL decoding test\",\n             urlCodec.decode((String)null));\n         this.validateState(urlCodec);\n     }\n             fail(\"DecoderException should have been thrown\");\n         } catch (DecoderException e) {\n             // Expected. Move on\n-        }        \n+        }\n         try {\n             // Bad 1st char after %\n             urlCodec.decode(\"%WW\");\n \n     @Test\n     public void testDecodeInvalidContent() throws UnsupportedEncodingException, DecoderException {\n-        String ch_msg = constructString(SWISS_GERMAN_STUFF_UNICODE); \n+        String ch_msg = constructString(SWISS_GERMAN_STUFF_UNICODE);\n         URLCodec urlCodec = new URLCodec();\n         byte[] input = ch_msg.getBytes(\"ISO-8859-1\");\n         byte[] output = urlCodec.decode(input);\n         URLCodec urlCodec = new URLCodec();\n         byte[] plain = null;\n         byte[] encoded = urlCodec.encode(plain);\n-        assertEquals(\"Encoding a null string should return null\", \n+        assertEquals(\"Encoding a null string should return null\",\n             null, encoded);\n         this.validateState(urlCodec);\n     }\n-    \n+\n     @Test\n     public void testEncodeUrlWithNullBitSet() throws Exception {\n         URLCodec urlCodec = new URLCodec();\n         String plain = \"Hello there!\";\n         String encoded = new String( URLCodec.encodeUrl(null, plain.getBytes(Charsets.UTF_8)));\n-        assertEquals(\"Basic URL encoding test\", \n+        assertEquals(\"Basic URL encoding test\",\n             \"Hello+there%21\", encoded);\n-        assertEquals(\"Basic URL decoding test\", \n+        assertEquals(\"Basic URL decoding test\",\n             plain, urlCodec.decode(encoded));\n-        this.validateState(urlCodec);        \n+        this.validateState(urlCodec);\n     }\n \n     @Test\n         String result = urlCodec.decode( test, \"charset\" );\n         assertEquals(\"Result should be null\", null, result);\n     }\n-    \n+\n     @Test\n     public void testEncodeObjects() throws Exception {\n         URLCodec urlCodec = new URLCodec();\n         String plain = \"Hello there!\";\n         String encoded = (String) urlCodec.encode((Object) plain);\n-        assertEquals(\"Basic URL encoding test\", \n+        assertEquals(\"Basic URL encoding test\",\n             \"Hello+there%21\", encoded);\n \n         byte[] plainBA = plain.getBytes(Charsets.UTF_8);\n         byte[] encodedBA = (byte[]) urlCodec.encode((Object) plainBA);\n         encoded = new String(encodedBA);\n-        assertEquals(\"Basic URL encoding test\", \n+        assertEquals(\"Basic URL encoding test\",\n             \"Hello+there%21\", encoded);\n-            \n+\n         Object result = urlCodec.encode((Object) null);\n         assertEquals( \"Encoding a null Object should return null\", null, result);\n-        \n+\n         try {\n             Object dObj = new Double(3.0);\n             urlCodec.encode( dObj );\n         }\n         this.validateState(urlCodec);\n     }\n-    \n+\n     @Test\n     public void testInvalidEncoding() {\n         URLCodec urlCodec = new URLCodec(\"NONSENSE\");\n         URLCodec urlCodec = new URLCodec();\n         String plain = \"Hello+there%21\";\n         String decoded = (String) urlCodec.decode((Object) plain);\n-        assertEquals(\"Basic URL decoding test\", \n+        assertEquals(\"Basic URL decoding test\",\n             \"Hello there!\", decoded);\n \n         byte[] plainBA = plain.getBytes(Charsets.UTF_8);\n         byte[] decodedBA = (byte[]) urlCodec.decode((Object) plainBA);\n         decoded = new String(decodedBA);\n-        assertEquals(\"Basic URL decoding test\", \n+        assertEquals(\"Basic URL decoding test\",\n             \"Hello there!\", decoded);\n-            \n+\n         Object result = urlCodec.decode((Object) null);\n         assertEquals( \"Decoding a null Object should return null\", null, result);\n-        \n+\n         try {\n             Object dObj = new Double(3.0);\n             urlCodec.decode( dObj );\n--- a/src/test/java/org/apache/commons/codec/net/UtilsTest.java\n+++ b/src/test/java/org/apache/commons/codec/net/UtilsTest.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * <p>\n  * Methods currently get 100%/100% line/branch code coverage from other tests classes.\n  * </p>\n- * \n+ *\n  * @version $Id$\n  * @since 1.4\n  */", "timestamp": 1340219048, "metainfo": ""}