{"sha": "c6812d686674e7006b8de12a9a5ba0f69b10fa98", "log": "- Javadoc. - Remove extraneous () in return statements.   ", "commit": "\n--- a/src/java/org/apache/commons/codec/binary/Base64.java\n+++ b/src/java/org/apache/commons/codec/binary/Base64.java\n import org.apache.commons.codec.EncoderException;\n \n /**\n- * Provides encode/decode for RFC 2045 Base64 as \n- * defined by RFC 2045, by Freed and Borenstein.  \n+ * Provides Base64 encoding and decoding as defined by RFC 2045.\n+ * \n+ * <p>This class implements section <cite>6.8. Base64 Content-Transfer-Encoding</cite> \n+ * from RFC 2045 <cite>Multipurpose Internet Mail Extensions (MIME) Part One: \n+ * Format of Internet Message Bodies</cite> by Freed and Borenstein.</p> \n  *\n  * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n  * @author Apache Software Foundation\n  * @since 1.0-dev\n- * @version $Id: Base64.java,v 1.17 2004/02/29 04:08:31 tobrien Exp $\n+ * @version $Id: Base64.java,v 1.18 2004/03/18 17:34:56 ggregory Exp $\n  */\n public class Base64 implements BinaryEncoder, BinaryDecoder {\n \n     /**\n-     * Chunk size according to RFC 2045\n+     * Chunk size according to RFC 2045.\n+     * \n+     * <p>The {@value} character limit does not count the trailing CRLF, but counts \n+     * all other characters, including any equal signs.</p>\n+     * \n+     * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045 section 2.1</a>\n      */\n     static final int CHUNK_SIZE = 76;\n \n     /**\n      * Chunk separator, we use a newline to separate chunks\n-     * of encoded data (if you ask for it to be chunked)\n+     * of encoded data (if you ask for it to be chunked).\n      */\n     static final byte[] CHUNK_SEPARATOR = \"\\n\".getBytes();\n \n     /**\n-     * The bsae length\n+     * The base length.\n      */\n     static final int BASELENGTH = 255;\n \n     /**\n-     * Lookup length\n+     * Lookup length.\n      */\n     static final int LOOKUPLENGTH = 64;\n \n     static final int EIGHTBIT = 8;\n \n     /**\n-     * Used when encoding something which has fewer than 24 bits\n+     * Used when encoding something which has fewer than 24 bits.\n      */\n     static final int SIXTEENBIT = 16;\n \n     /**\n-     * Constant used to determine how many bits data contains\n+     * Used to determine how many bits data contains.\n      */\n     static final int TWENTYFOURBITGROUP = 24;\n \n     /**\n-     * Used to get the number of Quadruples\n+     * Used to get the number of Quadruples.\n      */\n     static final int FOURBYTE = 4;\n \n     /**\n-     * Used to test the sign of a byte\n+     * Used to test the sign of a byte.\n      */\n     static final int SIGN = -128;\n     \n     /**\n-     * Byte used to pad output\n+     * Byte used to pad output.\n      */\n     static final byte PAD = (byte) '=';\n \n     }\n \n     /**\n-     * This array tests a given byte array to see if it contains\n+     * Tests a given byte array to see if it contains\n      * only valid characters within the Base64 alphabet.\n      *\n      * @param arrayOctect byte array to test\n      * @return Base64 characters\n      */\n     public static byte[] encodeBase64(byte[] binaryData) {\n-        return (encodeBase64(binaryData, false));\n+        return encodeBase64(binaryData, false);\n     }\n \n     /**\n      * @return Base64 characters chunked in 76 character blocks\n      */\n     public static byte[] encodeBase64Chunked(byte[] binaryData) {\n-        return (encodeBase64(binaryData, true));\n+        return encodeBase64(binaryData, true);\n     }\n \n \n      * @return a byte array containing binary data\n      */\n     public byte[] decode(byte[] pArray) {\n-        byte[] result;\n-        result = decodeBase64(pArray);\n-        return (result);\n+        return decodeBase64(pArray);\n     }\n \n     /**\n      * @return A byte array containing only Base64 character data\n      */\n     public byte[] encode(byte[] pArray) {\n-        return (encodeBase64(pArray, false));\n+        return encodeBase64(pArray, false);\n     }\n \n }", "timestamp": 1079631296, "metainfo": ""}