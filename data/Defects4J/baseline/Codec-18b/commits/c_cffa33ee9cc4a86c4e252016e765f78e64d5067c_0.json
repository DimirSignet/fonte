{"sha": "cffa33ee9cc4a86c4e252016e765f78e64d5067c", "log": "Better name  ", "commit": "\n--- a/src/java/org/apache/commons/codec/binary/BaseNCodec.java\n+++ b/src/java/org/apache/commons/codec/binary/BaseNCodec.java\n      * \n      * @return The amount of buffered data available for reading.\n      */\n-    int avail() {  // package protected for access from I/O streams\n+    int available() {  // package protected for access from I/O streams\n         return buffer != null ? pos - readPos : 0;\n     }\n \n      */\n     int readResults(byte[] b, int bPos, int bAvail) {  // package protected for access from I/O streams\n         if (buffer != null) {\n-            int len = Math.min(avail(), bAvail);\n+            int len = Math.min(available(), bAvail);\n             System.arraycopy(buffer, readPos, b, bPos, len);\n             readPos += len;\n             if (readPos >= pos) {\n--- a/src/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java\n+++ b/src/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java\n      *             if an I/O error occurs.\n      */\n     private void flush(boolean propogate) throws IOException {\n-        int avail = baseNCodec.avail();\n+        int avail = baseNCodec.available();\n         if (avail > 0) {\n             byte[] buf = new byte[avail];\n             int c = baseNCodec.readResults(buf, 0, avail);", "timestamp": 1296171134, "metainfo": ""}