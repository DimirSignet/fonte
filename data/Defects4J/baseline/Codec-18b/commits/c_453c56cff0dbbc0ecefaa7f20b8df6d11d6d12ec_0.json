{"sha": "453c56cff0dbbc0ecefaa7f20b8df6d11d6d12ec", "log": "[CODEC-136] Use Charset objects when possible, create Charsets for required character encodings.  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/codec/Charsets.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.codec;\n+\n+import java.nio.charset.Charset;\n+\n+/**\n+ * Charsets required of every implementation of the Java platform.\n+ * \n+ * From the Java documentation <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard\n+ * charsets</a>:\n+ * <p>\n+ * <cite>Every implementation of the Java platform is required to support the following character encodings. Consult the\n+ * release documentation for your implementation to see if any other encodings are supported. Consult the release\n+ * documentation for your implementation to see if any other encodings are supported. </cite>\n+ * </p>\n+ * \n+ * <ul>\n+ * <li><code>US-ASCII</code><br/>\n+ * Seven-bit ASCII, a.k.a. ISO646-US, a.k.a. the Basic Latin block of the Unicode character set.</li>\n+ * <li><code>ISO-8859-1</code><br/>\n+ * ISO Latin Alphabet No. 1, a.k.a. ISO-LATIN-1.</li>\n+ * <li><code>UTF-8</code><br/>\n+ * Eight-bit Unicode Transformation Format.</li>\n+ * <li><code>UTF-16BE</code><br/>\n+ * Sixteen-bit Unicode Transformation Format, big-endian byte order.</li>\n+ * <li><code>UTF-16LE</code><br/>\n+ * Sixteen-bit Unicode Transformation Format, little-endian byte order.</li>\n+ * <li><code>UTF-16</code><br/>\n+ * Sixteen-bit Unicode Transformation Format, byte order specified by a mandatory initial byte-order mark (either order\n+ * accepted on input, big-endian used on output.)</li>\n+ * </ul>\n+ * \n+ * This perhaps would best belong in the Commons Lang project. Even if a similar class is defined in Commons Lang, it is\n+ * not foreseen that Commons Codec would be made to depend on Commons Lang.\n+ * \n+ * @see <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n+ * @author Apache Software Foundation\n+ * @since 1.7\n+ * @version $Id: CharEncoding.java 1173287 2011-09-20 18:16:19Z ggregory $\n+ */\n+public class Charsets {\n+    //\n+    // This class should only contain Charset instances for required encodings. This guarantees that it will load correctly and\n+    // without delay on all Java platforms.\n+    //\n+    /**\n+     * CharEncodingISO Latin Alphabet No. 1, a.k.a. ISO-LATIN-1. </p>\n+     * <p>\n+     * Every implementation of the Java platform is required to support this character encoding.\n+     * </p>\n+     * \n+     * @see <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n+     */\n+    public static final Charset ISO_8859_1 = Charset.forName(CharEncoding.ISO_8859_1);\n+\n+    /**\n+     * <p>\n+     * Seven-bit ASCII, also known as ISO646-US, also known as the Basic Latin block of the Unicode character set.\n+     * </p>\n+     * <p>\n+     * Every implementation of the Java platform is required to support this character encoding.\n+     * </p>\n+     * \n+     * @see <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n+     */\n+    public static final Charset US_ASCII = Charset.forName(CharEncoding.US_ASCII);\n+\n+    /**\n+     * <p>\n+     * Sixteen-bit Unicode Transformation Format, The byte order specified by a mandatory initial byte-order mark\n+     * (either order accepted on input, big-endian used on output)\n+     * </p>\n+     * <p>\n+     * Every implementation of the Java platform is required to support this character encoding.\n+     * </p>\n+     * \n+     * @see <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n+     */\n+    public static final Charset UTF_16 = Charset.forName(CharEncoding.UTF_16);\n+\n+    /**\n+     * <p>\n+     * Sixteen-bit Unicode Transformation Format, big-endian byte order.\n+     * </p>\n+     * <p>\n+     * Every implementation of the Java platform is required to support this character encoding.\n+     * </p>\n+     * \n+     * @see <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n+     */\n+    public static final Charset UTF_16BE = Charset.forName(CharEncoding.UTF_16BE);\n+\n+    /**\n+     * <p>\n+     * Sixteen-bit Unicode Transformation Format, little-endian byte order.\n+     * </p>\n+     * <p>\n+     * Every implementation of the Java platform is required to support this character encoding.\n+     * </p>\n+     * \n+     * @see <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n+     */\n+    public static final Charset UTF_16LE = Charset.forName(CharEncoding.UTF_16LE);\n+\n+    /**\n+     * <p>\n+     * Eight-bit Unicode Transformation Format.\n+     * </p>\n+     * <p>\n+     * Every implementation of the Java platform is required to support this character encoding.\n+     * </p>\n+     * \n+     * @see <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n+     */\n+    public static final Charset UTF_8 = Charset.forName(CharEncoding.UTF_8);\n+}\n--- a/src/main/java/org/apache/commons/codec/binary/StringUtils.java\n+++ b/src/main/java/org/apache/commons/codec/binary/StringUtils.java\n package org.apache.commons.codec.binary;\n \n import java.io.UnsupportedEncodingException;\n+import java.nio.charset.Charset;\n \n import org.apache.commons.codec.CharEncoding;\n+import org.apache.commons.codec.Charsets;\n \n /**\n  * Converts String to and from bytes using the encodings required by the Java specification. These encodings are specified in <a\n public class StringUtils {\n \n     /**\n+     * Calls {@link String#getBytes(Charset)} \n+     * \n+     * @param string\n+     *            The string to encode (if null, return null).\n+     * @param charset\n+     *            The {@link Charset} to encode the {@code String}\n+     * @return the encoded bytes\n+     */\n+    private static byte[] getBytes(String string, Charset charset) {\n+        if (string == null) {\n+            return null;\n+        }\n+        return string.getBytes(charset);\n+    }\n+\n+    /**\n      * Encodes the given string into a sequence of bytes using the ISO-8859-1 charset, storing the result into a new\n      * byte array.\n      * \n      * @param string\n      *            the String to encode, may be <code>null</code>\n      * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>\n-     * @throws IllegalStateException\n-     *             Thrown when the charset is missing, which should be never according the the Java specification.\n+     * @throws NullPointerException\n+     *             Thrown if {@link Charsets#ISO_8859_1} is not initialized, which should never happen since it is\n+     *             required by the Java platform specification.\n+     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n      * @see <a href=\"http://download.oracle.com/javase/1.5.0/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      * @see #getBytesUnchecked(String, String)\n      */\n     public static byte[] getBytesIso8859_1(String string) {\n-        return StringUtils.getBytesUnchecked(string, CharEncoding.ISO_8859_1);\n-    }\n-\n-    /**\n-     * Encodes the given string into a sequence of bytes using the US-ASCII charset, storing the result into a new byte\n-     * array.\n-     * \n-     * @param string\n-     *            the String to encode, may be <code>null</code>\n-     * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>\n-     * @throws IllegalStateException\n-     *             Thrown when the charset is missing, which should be never according the the Java specification.\n-     * @see <a href=\"http://download.oracle.com/javase/1.5.0/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n-     * @see #getBytesUnchecked(String, String)\n-     */\n-    public static byte[] getBytesUsAscii(String string) {\n-        return StringUtils.getBytesUnchecked(string, CharEncoding.US_ASCII);\n-    }\n-\n-    /**\n-     * Encodes the given string into a sequence of bytes using the UTF-16 charset, storing the result into a new byte\n-     * array.\n-     * \n-     * @param string\n-     *            the String to encode, may be <code>null</code>\n-     * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>\n-     * @throws IllegalStateException\n-     *             Thrown when the charset is missing, which should be never according the the Java specification.\n-     * @see <a href=\"http://download.oracle.com/javase/1.5.0/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n-     * @see #getBytesUnchecked(String, String)\n-     */\n-    public static byte[] getBytesUtf16(String string) {\n-        return StringUtils.getBytesUnchecked(string, CharEncoding.UTF_16);\n-    }\n-\n-    /**\n-     * Encodes the given string into a sequence of bytes using the UTF-16BE charset, storing the result into a new byte\n-     * array.\n-     * \n-     * @param string\n-     *            the String to encode, may be <code>null</code>\n-     * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>\n-     * @throws IllegalStateException\n-     *             Thrown when the charset is missing, which should be never according the the Java specification.\n-     * @see <a href=\"http://download.oracle.com/javase/1.5.0/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n-     * @see #getBytesUnchecked(String, String)\n-     */\n-    public static byte[] getBytesUtf16Be(String string) {\n-        return StringUtils.getBytesUnchecked(string, CharEncoding.UTF_16BE);\n-    }\n-\n-    /**\n-     * Encodes the given string into a sequence of bytes using the UTF-16LE charset, storing the result into a new byte\n-     * array.\n-     * \n-     * @param string\n-     *            the String to encode, may be <code>null</code>\n-     * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>\n-     * @throws IllegalStateException\n-     *             Thrown when the charset is missing, which should be never according the the Java specification.\n-     * @see <a href=\"http://download.oracle.com/javase/1.5.0/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n-     * @see #getBytesUnchecked(String, String)\n-     */\n-    public static byte[] getBytesUtf16Le(String string) {\n-        return StringUtils.getBytesUnchecked(string, CharEncoding.UTF_16LE);\n-    }\n-\n-    /**\n-     * Encodes the given string into a sequence of bytes using the UTF-8 charset, storing the result into a new byte\n-     * array.\n-     * \n-     * @param string\n-     *            the String to encode, may be <code>null</code>\n-     * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>\n-     * @throws IllegalStateException\n-     *             Thrown when the charset is missing, which should be never according the the Java specification.\n-     * @see <a href=\"http://download.oracle.com/javase/1.5.0/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n-     * @see #getBytesUnchecked(String, String)\n-     */\n-    public static byte[] getBytesUtf8(String string) {\n-        return StringUtils.getBytesUnchecked(string, CharEncoding.UTF_8);\n-    }\n+        return getBytes(string, Charsets.ISO_8859_1);\n+    }\n+\n \n     /**\n      * Encodes the given string into a sequence of bytes using the named charset, storing the result into a new byte\n         }\n     }\n \n+    /**\n+     * Encodes the given string into a sequence of bytes using the US-ASCII charset, storing the result into a new byte\n+     * array.\n+     * \n+     * @param string\n+     *            the String to encode, may be <code>null</code>\n+     * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>\n+     * @throws NullPointerException\n+     *             Thrown if {@link Charsets#US_ASCII} is not initialized, which should never happen since it is\n+     *             required by the Java platform specification.\n+     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n+     * @see <a href=\"http://download.oracle.com/javase/1.5.0/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n+     * @see #getBytesUnchecked(String, String)\n+     */\n+    public static byte[] getBytesUsAscii(String string) {\n+        return getBytes(string, Charsets.US_ASCII);\n+    }\n+\n+    /**\n+     * Encodes the given string into a sequence of bytes using the UTF-16 charset, storing the result into a new byte\n+     * array.\n+     * \n+     * @param string\n+     *            the String to encode, may be <code>null</code>\n+     * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>\n+     * @throws NullPointerException\n+     *             Thrown if {@link Charsets#UTF_16} is not initialized, which should never happen since it is\n+     *             required by the Java platform specification.\n+     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n+     * @see <a href=\"http://download.oracle.com/javase/1.5.0/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n+     * @see #getBytesUnchecked(String, String)\n+     */\n+    public static byte[] getBytesUtf16(String string) {\n+        return getBytes(string, Charsets.UTF_16);\n+    }\n+\n+    /**\n+     * Encodes the given string into a sequence of bytes using the UTF-16BE charset, storing the result into a new byte\n+     * array.\n+     * \n+     * @param string\n+     *            the String to encode, may be <code>null</code>\n+     * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>\n+     * @throws NullPointerException\n+     *             Thrown if {@link Charsets#UTF_16BE} is not initialized, which should never happen since it is\n+     *             required by the Java platform specification.\n+     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n+     * @see <a href=\"http://download.oracle.com/javase/1.5.0/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n+     * @see #getBytesUnchecked(String, String)\n+     */\n+    public static byte[] getBytesUtf16Be(String string) {\n+        return getBytes(string, Charsets.UTF_16BE);\n+    }\n+\n+    /**\n+     * Encodes the given string into a sequence of bytes using the UTF-16LE charset, storing the result into a new byte\n+     * array.\n+     * \n+     * @param string\n+     *            the String to encode, may be <code>null</code>\n+     * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>\n+     * @throws NullPointerException\n+     *             Thrown if {@link Charsets#UTF_16LE} is not initialized, which should never happen since it is\n+     *             required by the Java platform specification.\n+     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n+     * @see <a href=\"http://download.oracle.com/javase/1.5.0/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n+     * @see #getBytesUnchecked(String, String)\n+     */\n+    public static byte[] getBytesUtf16Le(String string) {\n+        return getBytes(string, Charsets.UTF_16LE);\n+    }\n+\n+    /**\n+     * Encodes the given string into a sequence of bytes using the UTF-8 charset, storing the result into a new byte\n+     * array.\n+     * \n+     * @param string\n+     *            the String to encode, may be <code>null</code>\n+     * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>\n+     * @throws NullPointerException\n+     *             Thrown if {@link Charsets#UTF_8} is not initialized, which should never happen since it is\n+     *             required by the Java platform specification.\n+     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n+     * @see <a href=\"http://download.oracle.com/javase/1.5.0/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n+     * @see #getBytesUnchecked(String, String)\n+     */\n+    public static byte[] getBytesUtf8(String string) {\n+        return getBytes(string, Charsets.UTF_8);\n+    }\n+\n     private static IllegalStateException newIllegalStateException(String charsetName, UnsupportedEncodingException e) {\n         return new IllegalStateException(charsetName + \": \" + e);\n+    }\n+\n+    /**\n+     * Constructs a new <code>String</code> by decoding the specified array of bytes using the given charset.\n+     * \n+     * @param bytes\n+     *            The bytes to be decoded into characters\n+     * @param charset\n+     *            The {@link Charset} to encode the {@code String}\n+     * @return A new <code>String</code> decoded from the specified array of bytes using the given charset,\n+     *         or <code>null</code> if the input byte array was <code>null</code>.\n+     * @throws NullPointerException\n+     *             Thrown if {@link Charsets#UTF_8} is not initialized, which should never happen since it is\n+     *             required by the Java platform specification.\n+     */\n+    private static String newString(byte[] bytes, Charset charset) {\n+        return bytes == null ? null : new String(bytes, charset);\n     }\n \n     /**\n      * \n      * @param bytes\n      *            The bytes to be decoded into characters, may be <code>null</code>\n-     * @return A new <code>String</code> decoded from the specified array of bytes using the ISO-8859-1 charset,\n-     *         or <code>null</code> if the input byte array was <code>null</code>.\n-     * @throws IllegalStateException\n-     *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen since the\n-     *             charset is required.\n+     * @return A new <code>String</code> decoded from the specified array of bytes using the ISO-8859-1 charset, or\n+     *         <code>null</code> if the input byte array was <code>null</code>.\n+     * @throws NullPointerException\n+     *             Thrown if {@link Charsets#ISO_8859_1} is not initialized, which should never happen since it is\n+     *             required by the Java platform specification.\n+     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n      */\n     public static String newStringIso8859_1(byte[] bytes) {\n-        return StringUtils.newString(bytes, CharEncoding.ISO_8859_1);\n+        return new String(bytes, Charsets.ISO_8859_1);\n     }\n \n     /**\n      *            The bytes to be decoded into characters\n      * @return A new <code>String</code> decoded from the specified array of bytes using the US-ASCII charset,\n      *         or <code>null</code> if the input byte array was <code>null</code>.\n-     * @throws IllegalStateException\n-     *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen since the\n-     *             charset is required.\n+     * @throws NullPointerException\n+     *             Thrown if {@link Charsets#US_ASCII} is not initialized, which should never happen since it is\n+     *             required by the Java platform specification.\n+     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n      */\n     public static String newStringUsAscii(byte[] bytes) {\n-        return StringUtils.newString(bytes, CharEncoding.US_ASCII);\n+        return new String(bytes, Charsets.US_ASCII);\n     }\n \n     /**\n      *            The bytes to be decoded into characters\n      * @return A new <code>String</code> decoded from the specified array of bytes using the UTF-16 charset\n      *         or <code>null</code> if the input byte array was <code>null</code>.\n-     * @throws IllegalStateException\n-     *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen since the\n-     *             charset is required.\n+     * @throws NullPointerException\n+     *             Thrown if {@link Charsets#UTF_16} is not initialized, which should never happen since it is\n+     *             required by the Java platform specification.\n+     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n      */\n     public static String newStringUtf16(byte[] bytes) {\n-        return StringUtils.newString(bytes, CharEncoding.UTF_16);\n+        return new String(bytes, Charsets.UTF_16);\n     }\n \n     /**\n      *            The bytes to be decoded into characters\n      * @return A new <code>String</code> decoded from the specified array of bytes using the UTF-16BE charset,\n      *         or <code>null</code> if the input byte array was <code>null</code>.\n-     * @throws IllegalStateException\n-     *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen since the\n-     *             charset is required.\n+     * @throws NullPointerException\n+     *             Thrown if {@link Charsets#UTF_16BE} is not initialized, which should never happen since it is\n+     *             required by the Java platform specification.\n+     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n      */\n     public static String newStringUtf16Be(byte[] bytes) {\n-        return StringUtils.newString(bytes, CharEncoding.UTF_16BE);\n+        return new String(bytes, Charsets.UTF_16BE);\n     }\n \n     /**\n      *            The bytes to be decoded into characters\n      * @return A new <code>String</code> decoded from the specified array of bytes using the UTF-16LE charset,\n      *         or <code>null</code> if the input byte array was <code>null</code>.\n-     * @throws IllegalStateException\n-     *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen since the\n-     *             charset is required.\n+     * @throws NullPointerException\n+     *             Thrown if {@link Charsets#UTF_16LE} is not initialized, which should never happen since it is\n+     *             required by the Java platform specification.\n+     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n      */\n     public static String newStringUtf16Le(byte[] bytes) {\n-        return StringUtils.newString(bytes, CharEncoding.UTF_16LE);\n+        return new String(bytes, Charsets.UTF_16LE);\n     }\n \n     /**\n      *            The bytes to be decoded into characters\n      * @return A new <code>String</code> decoded from the specified array of bytes using the UTF-8 charset,\n      *         or <code>null</code> if the input byte array was <code>null</code>.\n-     * @throws IllegalStateException\n-     *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen since the\n-     *             charset is required.\n+     * @throws NullPointerException\n+     *             Thrown if {@link Charsets#UTF_8} is not initialized, which should never happen since it is\n+     *             required by the Java platform specification.\n+     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException\n      */\n     public static String newStringUtf8(byte[] bytes) {\n-        return StringUtils.newString(bytes, CharEncoding.UTF_8);\n+        return newString(bytes, Charsets.UTF_8);\n     }\n \n }\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/codec/CharsetsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.codec;\n+\n+import junit.framework.Assert;\n+\n+import org.junit.Test;\n+\n+/**\n+ * Sanity checks for {@link Charsets}.\n+ * \n+ * @version $Id: CharEncodingTest.java 1298985 2012-03-09 19:12:49Z ggregory $\n+ */\n+public class CharsetsTest {\n+\n+    @Test\n+    public void testIso8859_1() {\n+        Assert.assertEquals(\"ISO-8859-1\", Charsets.ISO_8859_1.name());\n+    }\n+\n+    @Test\n+    public void testUsAscii() {\n+        Assert.assertEquals(\"US-ASCII\", Charsets.US_ASCII.name());\n+    }\n+\n+    @Test\n+    public void testUtf16() {\n+        Assert.assertEquals(\"UTF-16\", Charsets.UTF_16.name());\n+    }\n+\n+    @Test\n+    public void testUtf16Be() {\n+        Assert.assertEquals(\"UTF-16BE\", Charsets.UTF_16BE.name());\n+    }\n+\n+    @Test\n+    public void testUtf16Le() {\n+        Assert.assertEquals(\"UTF-16LE\", Charsets.UTF_16LE.name());\n+    }\n+\n+    @Test\n+    public void testUtf8() {\n+        Assert.assertEquals(\"UTF-8\", Charsets.UTF_8.name());\n+    }\n+\n+}", "timestamp": 1332944537, "metainfo": ""}