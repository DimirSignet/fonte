{"sha": "83c4b1c364c075bbb2bc44ad64d8a282340de4ba", "log": "Revert CODEC-211  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/digest/Digest.java\n+++ b/src/main/java/org/apache/commons/codec/digest/Digest.java\n \n     private void run() throws IOException {\n         if (algorithm.equalsIgnoreCase(\"ALL\") || algorithm.equals(\"*\")) {\n-            run(MessageDigestAlgorithm.values());\n+            run(MessageDigestAlgorithms.values());\n             return;\n         }\n         final MessageDigest messageDigest = DigestUtils.getDigest(algorithm, null);\n         if (messageDigest != null) {\n             run(\"\", messageDigest);\n         } else {\n-            run(\"\", MessageDigestAlgorithm.valueOf(algorithm.toUpperCase(Locale.ROOT)).getMessageDigest());\n+            run(\"\", DigestUtils.getDigest(algorithm.toUpperCase(Locale.ROOT)));\n         }\n     }\n \n-    private void run(MessageDigestAlgorithm[] digestAlgorithms) throws IOException {\n-        for (MessageDigestAlgorithm messageDigestAlgorithm : digestAlgorithms) {\n-            if (messageDigestAlgorithm.isAvailable()) {\n-                run(messageDigestAlgorithm.getName() + \" \", messageDigestAlgorithm);\n+    private void run(String[] digestAlgorithms) throws IOException {\n+        for (String messageDigestAlgorithm : digestAlgorithms) {\n+            if (DigestUtils.isAvailable(messageDigestAlgorithm)) {\n+                run(messageDigestAlgorithm + \" \", messageDigestAlgorithm);\n             }\n         }\n     }\n         }\n     }\n \n-    private void run(String prefix, final MessageDigestAlgorithm messageDigestAlgorithm) throws IOException {\n-        run(prefix, messageDigestAlgorithm.getMessageDigest());\n+    private void run(String prefix, final String messageDigestAlgorithm) throws IOException {\n+        run(prefix, DigestUtils.getDigest(messageDigestAlgorithm));\n     }\n \n     @Override\n--- a/src/main/java/org/apache/commons/codec/digest/DigestUtils.java\n+++ b/src/main/java/org/apache/commons/codec/digest/DigestUtils.java\n      * @since 1.7\n      */\n     public static MessageDigest getMd2Digest() {\n-        return MessageDigestAlgorithm.MD2.getMessageDigest();\n+        return getDigest(MessageDigestAlgorithms.MD2);\n     }\n \n     /**\n      * @see MessageDigestAlgorithm#MD5\n      */\n     public static MessageDigest getMd5Digest() {\n-        return MessageDigestAlgorithm.MD5.getMessageDigest();\n+        return getDigest(MessageDigestAlgorithms.MD5);\n     }\n \n     /**\n      * @since 1.7\n      */\n     public static MessageDigest getSha1Digest() {\n-        return MessageDigestAlgorithm.SHA_1.getMessageDigest();\n+        return getDigest(MessageDigestAlgorithms.SHA_1);\n     }\n \n     /**\n      *             when a {@link NoSuchAlgorithmException} is caught on Java 7 and older, SHA-224 is a built-in\n      *             algorithm on Java 8\n      * @see MessageDigestAlgorithm#SHA_224\n+     * @since 1.11\n      */\n     public static MessageDigest getSha224Digest() {\n-        return MessageDigestAlgorithm.SHA_224.getMessageDigest();\n+        return getDigest(MessageDigestAlgorithms.SHA_224);\n     }\n \n     /**\n      * @see MessageDigestAlgorithm#SHA_256\n      */\n     public static MessageDigest getSha256Digest() {\n-        return MessageDigestAlgorithm.SHA_256.getMessageDigest();\n+        return getDigest(MessageDigestAlgorithms.SHA_256);\n     }\n \n     /**\n      * @see MessageDigestAlgorithm#SHA_384\n      */\n     public static MessageDigest getSha384Digest() {\n-        return MessageDigestAlgorithm.SHA_384.getMessageDigest();\n+        return getDigest(MessageDigestAlgorithms.SHA_384);\n     }\n \n     /**\n      * @see MessageDigestAlgorithm#SHA_512\n      */\n     public static MessageDigest getSha512Digest() {\n-        return MessageDigestAlgorithm.SHA_512.getMessageDigest();\n+        return getDigest(MessageDigestAlgorithms.SHA_512);\n     }\n \n     /**\n      * @return MD2 digest\n      * @throws IOException\n      *             On error reading from the stream\n+     * @since 1.11\n+     */\n+    public static byte[] md2(final File data) throws IOException {\n+        return digest(getMd2Digest(), data);\n+    }\n+\n+    /**\n+     * Calculates the MD2 digest and returns the value as a 16 element <code>byte[]</code>.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return MD2 digest\n+     * @throws IOException\n+     *             On error reading from the stream\n      * @since 1.7\n      */\n     public static byte[] md2(final InputStream data) throws IOException {\n      * @return MD2 digest as a hex string\n      * @throws IOException\n      *             On error reading from the stream\n+     * @since 1.11\n+     */\n+    public static String md2Hex(final File data) throws IOException {\n+        return Hex.encodeHexString(md2(data));\n+    }\n+\n+    /**\n+     * Calculates the MD2 digest and returns the value as a 32 character hex string.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return MD2 digest as a hex string\n+     * @throws IOException\n+     *             On error reading from the stream\n      * @since 1.7\n      */\n     public static String md2Hex(final InputStream data) throws IOException {\n      * @return MD5 digest\n      * @throws IOException\n      *             On error reading from the stream\n+     * @since 1.11\n+     */\n+    public static byte[] md5(final File data) throws IOException {\n+        return digest(getMd5Digest(), data);\n+    }\n+\n+    /**\n+     * Calculates the MD5 digest and returns the value as a 16 element <code>byte[]</code>.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return MD5 digest\n+     * @throws IOException\n+     *             On error reading from the stream\n      * @since 1.4\n      */\n     public static byte[] md5(final InputStream data) throws IOException {\n      * @since 1.11\n      */\n     public static String md5Hex(final ByteBuffer data) {\n+        return Hex.encodeHexString(md5(data));\n+    }\n+\n+    /**\n+     * Calculates the MD5 digest and returns the value as a 32 character hex string.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return MD5 digest as a hex string\n+     * @throws IOException\n+     *             On error reading from the stream\n+     * @since 1.11\n+     */\n+    public static String md5Hex(final File data) throws IOException {\n         return Hex.encodeHexString(md5(data));\n     }\n \n      * @return SHA-1 digest\n      * @throws IOException\n      *             On error reading from the stream\n+     * @since 1.11\n+     */\n+    public static byte[] sha1(final File data) throws IOException {\n+        return digest(getSha1Digest(), data);\n+    }\n+\n+    /**\n+     * Calculates the SHA-1 digest and returns the value as a <code>byte[]</code>.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return SHA-1 digest\n+     * @throws IOException\n+     *             On error reading from the stream\n      * @since 1.7\n      */\n     public static byte[] sha1(final InputStream data) throws IOException {\n      * @return SHA-1 digest as a hex string\n      * @throws IOException\n      *             On error reading from the stream\n+     * @since 1.11\n+     */\n+    public static String sha1Hex(final File data) throws IOException {\n+        return Hex.encodeHexString(sha1(data));\n+    }\n+\n+    /**\n+     * Calculates the SHA-1 digest and returns the value as a hex string.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return SHA-1 digest as a hex string\n+     * @throws IOException\n+     *             On error reading from the stream\n      * @since 1.7\n      */\n     public static String sha1Hex(final InputStream data) throws IOException {\n      * @since 1.11\n      */\n     public static byte[] sha224(final ByteBuffer data) {\n+        return digest(getSha224Digest(), data);\n+    }\n+\n+    /**\n+     * Calculates the SHA-224 digest and returns the value as a <code>byte[]</code>.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.8.0.\n+     * </p>\n+     *\n+     * @param data\n+     *            File to digest\n+     * @return SHA-224 digest\n+     * @throws IOException\n+     *             On error reading from the stream\n+     * @throws IllegalArgumentException thrown on JRE versions prior to 1.8.0.\n+     * @since 1.11\n+     */\n+    public static byte[] sha224(final File data) throws IOException {\n         return digest(getSha224Digest(), data);\n     }\n \n      * @throws IllegalArgumentException thrown on JRE versions prior to 1.8.0.\n      * @since 1.11\n      */\n+    public static String sha224Hex(final File data) throws IOException {\n+        return Hex.encodeHexString(sha224(data));\n+    }\n+\n+    /**\n+     * Calculates the SHA-224 digest and returns the value as a hex string.\n+     * <p>\n+     * Throws a {@link IllegalArgumentException} on JRE versions prior to 1.8.0.\n+     * </p>\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return SHA-224 digest as a hex string\n+     * @throws IOException\n+     *             On error reading from the stream\n+     * @throws IllegalArgumentException thrown on JRE versions prior to 1.8.0.\n+     * @since 1.11\n+     */\n     public static String sha224Hex(final InputStream data) throws IOException {\n         return Hex.encodeHexString(sha224(data));\n     }\n      * </p>\n      *\n      * @param data\n+     *            File to digest\n+     * @return SHA-256 digest\n+     * @throws IOException\n+     *             On error reading from the stream\n+     * @since 1.11\n+     */\n+    public static byte[] sha256(final File data) throws IOException {\n+        return digest(getSha256Digest(), data);\n+    }\n+\n+    /**\n+     * Calculates the SHA-256 digest and returns the value as a <code>byte[]</code>.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     *\n+     * @param data\n      *            Data to digest\n      * @return SHA-256 digest\n      * @throws IOException\n      * @return SHA-256 digest as a hex string\n      * @throws IOException\n      *             On error reading from the stream\n+     * @since 1.11\n+     */\n+    public static String sha256Hex(final File data) throws IOException {\n+        return Hex.encodeHexString(sha256(data));\n+    }\n+\n+    /**\n+     * Calculates the SHA-256 digest and returns the value as a hex string.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return SHA-256 digest as a hex string\n+     * @throws IOException\n+     *             On error reading from the stream\n      * @since 1.4\n      */\n     public static String sha256Hex(final InputStream data) throws IOException {\n      * </p>\n      *\n      * @param data\n+     *            File to digest\n+     * @return SHA-384 digest\n+     * @throws IOException\n+     *             On error reading from the stream\n+     * @since 1.11\n+     */\n+    public static byte[] sha384(final File data) throws IOException {\n+        return digest(getSha384Digest(), data);\n+    }\n+\n+    /**\n+     * Calculates the SHA-384 digest and returns the value as a <code>byte[]</code>.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     *\n+     * @param data\n      *            Data to digest\n      * @return SHA-384 digest\n      * @throws IOException\n      * @return SHA-384 digest as a hex string\n      * @throws IOException\n      *             On error reading from the stream\n+     * @since 1.11\n+     */\n+    public static String sha384Hex(final File data) throws IOException {\n+        return Hex.encodeHexString(sha384(data));\n+    }\n+\n+    /**\n+     * Calculates the SHA-384 digest and returns the value as a hex string.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return SHA-384 digest as a hex string\n+     * @throws IOException\n+     *             On error reading from the stream\n      * @since 1.4\n      */\n     public static String sha384Hex(final InputStream data) throws IOException {\n      * </p>\n      *\n      * @param data\n+     *            File to digest\n+     * @return SHA-512 digest\n+     * @throws IOException\n+     *             On error reading from the stream\n+     * @since 1.11\n+     */\n+    public static byte[] sha512(final File data) throws IOException {\n+        return digest(getSha512Digest(), data);\n+    }\n+\n+    /**\n+     * Calculates the SHA-512 digest and returns the value as a <code>byte[]</code>.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     *\n+     * @param data\n      *            Data to digest\n      * @return SHA-512 digest\n      * @throws IOException\n      * @since 1.11\n      */\n     public static String sha512Hex(final ByteBuffer data) {\n+        return Hex.encodeHexString(sha512(data));\n+    }\n+\n+    /**\n+     * Calculates the SHA-512 digest and returns the value as a hex string.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     *\n+     * @param data\n+     *            File to digest\n+     * @return SHA-512 digest as a hex string\n+     * @throws IOException\n+     *             On error reading from the stream\n+     * @since 1.11\n+     */\n+    public static String sha512Hex(File data) throws IOException {\n         return Hex.encodeHexString(sha512(data));\n     }\n \n     }\n \n     /**\n-     * Updates the given {@link MessageDigest}.\n+     * Updates the given {@link MessageDigest} from a String (converted to bytes using UTF-8).\n+     * <p>\n+     * To update the digest using a different charset for the conversion,\n+     * convert the String to a byte array using\n+     * {@link String#getBytes(java.nio.charset.Charset)} and pass that\n+     * to the {@link DigestUtils#updateDigest(MessageDigest, byte[])} method\n      *\n      * @param messageDigest\n      *            the {@link MessageDigest} to update\n         return messageDigest;\n     }\n \n+    /**\n+     * Test whether the algorithm is supported.\n+     * @param messageDigestAlgorithm the algorithm name\n+     * @return {@code true} if the algorithm can be found\n+     * @since 1.7\n+     */\n+    public static boolean isAvailable(String messageDigestAlgorithm) {\n+        return getDigest(messageDigestAlgorithm, null) != null;\n+    }\n+\n }\n--- a/src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmTest.java\n+++ b/src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmTest.java\n import java.nio.ByteBuffer;\n import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n-\n-import org.apache.commons.codec.binary.Hex;\n import org.junit.After;\n import org.junit.Assert;\n import org.junit.Assume;\n \n     @Parameters(name = \"{0}\")\n     public static Object[] data() {\n-        return MessageDigestAlgorithm.values();\n+        return MessageDigestAlgorithms.values();\n     }\n \n     private DigestUtilsTest digestUtilsTest;\n \n-    private final MessageDigestAlgorithm messageDigestAlgorithm;\n+    private final String messageDigestAlgorithm;\n \n-    public MessageDigestAlgorithmTest(MessageDigestAlgorithm messageDigestAlgorithm) {\n-        Assume.assumeTrue(messageDigestAlgorithm.isAvailable());\n+    public MessageDigestAlgorithmTest(String messageDigestAlgorithm) {\n         this.messageDigestAlgorithm = messageDigestAlgorithm;\n     }\n \n     private byte[] digestTestData() throws IOException {\n-        return messageDigestAlgorithm.digest(getTestData());\n-    }\n-\n-    private String digestTestDataHex() throws IOException {\n-        return Hex.encodeHexString(digestTestData());\n+        return DigestUtils.digest(DigestUtils.getDigest(messageDigestAlgorithm),getTestData());\n     }\n \n     private byte[] getTestData() {\n \n     @Test\n     public void testAlgorithm() throws IOException, NoSuchAlgorithmException {\n-        final String algorithm = messageDigestAlgorithm.getName();\n+        final String algorithm = messageDigestAlgorithm;\n         Assert.assertNotNull(algorithm);\n         Assert.assertFalse(algorithm.isEmpty());\n-        Assume.assumeTrue(messageDigestAlgorithm.isAvailable());\n+        Assume.assumeTrue(DigestUtils.isAvailable(messageDigestAlgorithm));\n         MessageDigest.getInstance(algorithm);\n     }\n \n     @Test\n     public void testDigestByteArray() throws IOException {\n-        Assume.assumeTrue(messageDigestAlgorithm.isAvailable());\n+        Assume.assumeTrue(DigestUtils.isAvailable(messageDigestAlgorithm));\n         Assert.assertArrayEquals(digestTestData(),\n-                DigestUtils.digest(messageDigestAlgorithm.getMessageDigest(), getTestData()));\n-        Assert.assertArrayEquals(digestTestData(), messageDigestAlgorithm.digest(getTestData()));\n-    }\n-\n-    @Test\n-    public void testDigestByteArrayHex() throws IOException {\n-        Assume.assumeTrue(messageDigestAlgorithm.isAvailable());\n-        Assert.assertEquals(digestTestDataHex(), messageDigestAlgorithm.digestHex(getTestData()));\n+                DigestUtils.digest(DigestUtils.getDigest(messageDigestAlgorithm), getTestData()));\n+        Assert.assertArrayEquals(digestTestData(), DigestUtils.digest(DigestUtils.getDigest(messageDigestAlgorithm),getTestData()));\n     }\n \n     @Test\n     public void testDigestByteBuffer() throws IOException {\n-        Assume.assumeTrue(messageDigestAlgorithm.isAvailable());\n+        Assume.assumeTrue(DigestUtils.isAvailable(messageDigestAlgorithm));\n         Assert.assertArrayEquals(digestTestData(),\n-                DigestUtils.digest(messageDigestAlgorithm.getMessageDigest(), ByteBuffer.wrap(getTestData())));\n-        Assert.assertArrayEquals(digestTestData(), messageDigestAlgorithm.digest(ByteBuffer.wrap(getTestData())));\n-    }\n-\n-    @Test\n-    public void testDigestByteBufferHex() throws IOException {\n-        Assume.assumeTrue(messageDigestAlgorithm.isAvailable());\n-        Assert.assertEquals(digestTestDataHex(), messageDigestAlgorithm.digestHex(ByteBuffer.wrap(getTestData())));\n+                DigestUtils.digest(DigestUtils.getDigest(messageDigestAlgorithm), ByteBuffer.wrap(getTestData())));\n+        Assert.assertArrayEquals(digestTestData(), DigestUtils.digest(DigestUtils.getDigest(messageDigestAlgorithm),ByteBuffer.wrap(getTestData())));\n     }\n \n     @Test\n     public void testDigestFile() throws IOException {\n-        Assume.assumeTrue(messageDigestAlgorithm.isAvailable());\n+        Assume.assumeTrue(DigestUtils.isAvailable(messageDigestAlgorithm));\n         Assert.assertArrayEquals(digestTestData(),\n-                DigestUtils.digest(messageDigestAlgorithm.getMessageDigest(), getTestFile()));\n-        Assert.assertArrayEquals(digestTestData(), messageDigestAlgorithm.digest(getTestFile()));\n-    }\n-\n-    @Test\n-    public void testDigestFileHex() throws IOException {\n-        Assume.assumeTrue(messageDigestAlgorithm.isAvailable());\n-        Assert.assertEquals(digestTestDataHex(), messageDigestAlgorithm.digestHex(getTestFile()));\n+                DigestUtils.digest(DigestUtils.getDigest(messageDigestAlgorithm), getTestFile()));\n+        Assert.assertArrayEquals(digestTestData(), DigestUtils.digest(DigestUtils.getDigest(messageDigestAlgorithm),getTestFile()));\n     }\n \n     @Test\n     public void testDigestInputStream() throws IOException {\n-        Assume.assumeTrue(messageDigestAlgorithm.isAvailable());\n+        Assume.assumeTrue(DigestUtils.isAvailable(messageDigestAlgorithm));\n         Assert.assertArrayEquals(digestTestData(),\n-                DigestUtils.digest(messageDigestAlgorithm.getMessageDigest(), new ByteArrayInputStream(getTestData())));\n-        Assert.assertArrayEquals(digestTestData(),\n-                messageDigestAlgorithm.digest(new ByteArrayInputStream(getTestData())));\n-    }\n-\n-    @Test\n-    public void testDigestInputStreamHex() throws IOException {\n-        Assume.assumeTrue(messageDigestAlgorithm.isAvailable());\n-        Assert.assertEquals(digestTestDataHex(),\n-                messageDigestAlgorithm.digestHex(new ByteArrayInputStream(getTestData())));\n+                DigestUtils.digest(DigestUtils.getDigest(messageDigestAlgorithm), new ByteArrayInputStream(getTestData())));\n+        Assert.assertArrayEquals(digestTestData(), DigestUtils.digest(DigestUtils.getDigest(messageDigestAlgorithm),new ByteArrayInputStream(getTestData())));\n     }\n \n     @Test\n     public void testGetMessageDigest() throws IOException, NoSuchAlgorithmException {\n-        Assume.assumeTrue(messageDigestAlgorithm.isAvailable());\n-        final MessageDigest messageDigest = messageDigestAlgorithm.getMessageDigest();\n-        Assert.assertEquals(messageDigestAlgorithm.getName(), messageDigest.getAlgorithm());\n+        Assume.assumeTrue(DigestUtils.isAvailable(messageDigestAlgorithm));\n+        final MessageDigest messageDigest = DigestUtils.getDigest(messageDigestAlgorithm);\n+        Assert.assertEquals(messageDigestAlgorithm, messageDigest.getAlgorithm());\n     }\n \n }", "timestamp": 1463445928, "metainfo": ""}