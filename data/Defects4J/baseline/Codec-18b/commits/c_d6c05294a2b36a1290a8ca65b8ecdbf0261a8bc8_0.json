{"sha": "d6c05294a2b36a1290a8ca65b8ecdbf0261a8bc8", "log": "Keep these files in UTF-8 encoding for proper Javadoc processing.   ", "commit": "\n--- a/src/java/org/apache/commons/codec/language/ColognePhonetic.java\n+++ b/src/java/org/apache/commons/codec/language/ColognePhonetic.java\n \n /**\n  * <p>\n- * Implements of the <a href=\"http://de.wikipedia.org/wiki/K%C3%B6lner_Phonetik\">\u201cK\u00f6lner Phonetic\u201d</a> (cologne\n+ * Implements of the <a href=\"http://de.wikipedia.org/wiki/K%C3%B6lner_Phonetik\">\u201cK\u00f6lner Phonetic\u201d</a> (Cologne\n  * phonetic) algorithm issued by Hans Joachim Postel in 1969.\n  * </p>\n  * \n--- a/src/test/org/apache/commons/codec/language/ColognePhoneticTest.java\n+++ b/src/test/org/apache/commons/codec/language/ColognePhoneticTest.java\n import org.apache.commons.codec.StringEncoder;\n import org.apache.commons.codec.StringEncoderAbstractTest;\n \n+/**\n+ * Tests the deprecated class {@link ColognePhonetic}.\n+ * \n+ * <p>Keep this file in UTF-8 encoding for proper Javadoc processing.</p>\n+ * \n+ * @author ggregory\n+ */\n public class ColognePhoneticTest extends StringEncoderAbstractTest {\n \n     public ColognePhoneticTest(String name) {\n     public void testHyphen() throws EncoderException {\n         String[][] data = {{\"bergisch-gladbach\", \"174845214\"}, {\"M\u00fcller-L\u00fcdenscheidt\", \"65752682\"},\n             // From the Javadoc example:\n-            {\"Mller-Ldenscheidt\", \"65752682\"}};\n+            {\"M\ufffdller-L\ufffddenscheidt\", \"65752682\"}};\n         this.checkEncodings(data);\n     }\n \n--- a/src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java\n+++ b/src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java\n \n /**\n  * Tests {@link DoubleMetaphone}.\n+ * \n+ * <p>Keep this file in UTF-8 encoding for proper Javadoc processing.</p>\n  * \n  * @see \"http://www.cuj.com/documents/s=8038/cuj0006philips/\"\n  * @author Apache Software Foundation\n \n     /**\n      * Used to generate the MATCHES array and test possible matches from the\n-     * FIXTURE arrary.\n+     * FIXTURE array.\n      */\n     public void testIsDoubleMetaphoneEqualExtended3() {\n         this.validateFixture(FIXTURE);\n     }\n \n     public void testCCedilla() {\n-        this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"S\");\n+        this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"\ufffd\", \"S\");\n     }\n     \n     public void testNTilde() {\n-        this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"N\");\n+        this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"\ufffd\", \"N\");\n     }\n     \n     public void validateFixture(String[][] pairs) {\n--- a/src/test/org/apache/commons/codec/language/SoundexTest.java\n+++ b/src/test/org/apache/commons/codec/language/SoundexTest.java\n import org.apache.commons.codec.StringEncoderAbstractTest;\n \n /**\n- * Tests {@link Soundex}\n+ * Tests {@link Soundex}.\n+ * \n+ * <p>Keep this file in UTF-8 encoding for proper Javadoc processing.</p>\n  * \n  * @author Apache Software Foundation\n  * @version $Id$\n      */\n     public void testUsMappingEWithAcute() {\n         Assert.assertEquals(\"E000\", this.getSoundexEncoder().encode(\"e\"));\n-        if (Character.isLetter('')) {\n+        if (Character.isLetter('\ufffd')) {\n             try {\n-                Assert.assertEquals(\"000\", this.getSoundexEncoder().encode(\"\"));\n+                Assert.assertEquals(\"\ufffd000\", this.getSoundexEncoder().encode(\"\ufffd\"));\n                 Assert.fail(\"Expected IllegalArgumentException not thrown\");\n             } catch (IllegalArgumentException e) {\n                 // expected\n             }\n         } else {\n-            Assert.assertEquals(\"\", this.getSoundexEncoder().encode(\"\"));\n+            Assert.assertEquals(\"\", this.getSoundexEncoder().encode(\"\ufffd\"));\n         }\n     }\n \n      */\n     public void testUsMappingOWithDiaeresis() {\n         Assert.assertEquals(\"O000\", this.getSoundexEncoder().encode(\"o\"));\n-        if (Character.isLetter('')) {\n+        if (Character.isLetter('\ufffd')) {\n             try {\n-                Assert.assertEquals(\"000\", this.getSoundexEncoder().encode(\"\"));\n+                Assert.assertEquals(\"\ufffd000\", this.getSoundexEncoder().encode(\"\ufffd\"));\n                 Assert.fail(\"Expected IllegalArgumentException not thrown\");\n             } catch (IllegalArgumentException e) {\n                 // expected\n             }\n         } else {\n-            Assert.assertEquals(\"\", this.getSoundexEncoder().encode(\"\"));\n+            Assert.assertEquals(\"\", this.getSoundexEncoder().encode(\"\ufffd\"));\n         }\n     }\n }", "timestamp": 1299804723, "metainfo": ""}