{"sha": "2a02fe784259660283fc80124a699ab9c637dd0b", "log": "PR: 24360 Submitted by:\tGary Gregory [codec] ClassCastException in Hex.decode(Object) fixed. Complete code coverage for Hex (See clover report).   ", "commit": "\n--- a/src/test/org/apache/commons/codec/binary/HexTest.java\n+++ b/src/test/org/apache/commons/codec/binary/HexTest.java\n import java.util.Random;\n \n import junit.framework.TestCase;\n+import org.apache.commons.codec.DecoderException;\n+import org.apache.commons.codec.EncoderException;\n \n /**\n+ * Tests {@link org.apache.commons.codec.binary.Hex}.\n  * \n  * @author <a href=\"mailto:siege@preoccupied.net\">Christopher O'Brien</a>\n  * @author Tim O'Brien\n+ * @author Gary Gregory\n+ * @version $Id: HexTest.java,v 1.6 2003/11/03 19:04:34 ggregory Exp $\n  */\n \n public class HexTest extends TestCase {\n     public HexTest(String name) {\n         super(name);\n     }\n-\n-    public void testEncodeEmpty() throws Exception {\n-        char[] c = Hex.encodeHex(new byte[0]);\n-        assertTrue(Arrays.equals(new char[0], c));\n+    \n+    public void testDecodeArrayOddCharacters() {\n+        try {\n+            new Hex().decode(new byte[] { 65 });\n+            fail(\"An exception wasn't thrown when trying to decode an odd number of characters\");\n+        }\n+        catch (DecoderException e) {\n+            // Expected exception\n+        }\n     }\n \n-    public void testEncodeZeroes() throws Exception {\n+    public void testDecodeClassCastException() {\n+        try {\n+            new Hex().decode(new int[] { 65 });\n+            fail(\"An exception wasn't thrown when trying to decode.\");\n+        }\n+        catch (DecoderException e) {\n+            // Expected exception\n+        }\n+    }\n+\n+    public void testDecodeHexOddCharacters() {\n+        try {\n+            Hex.decodeHex(new char[] { 'A' });\n+            fail(\"An exception wasn't thrown when trying to decode an odd number of characters\");\n+        }\n+        catch (DecoderException e) {\n+            // Expected exception\n+        }\n+    }\n+\n+    public void testDecodeStringOddCharacters() {\n+        try {\n+            new Hex().decode(\"6\");\n+            fail(\"An exception wasn't thrown when trying to decode an odd number of characters\");\n+        }\n+        catch (DecoderException e) {\n+            // Expected exception\n+        }\n+    }\n+\n+    public void testDencodeEmpty() throws DecoderException {\n+        assertTrue(Arrays.equals(new byte[0], Hex.decodeHex(new char[0])));\n+        assertTrue(Arrays.equals(new byte[0], new Hex().decode(new byte[0])));\n+        assertTrue(Arrays.equals(new byte[0], (byte[])new Hex().decode(\"\")));\n+    }\n+    \n+    public void testEncodeClassCastException() {\n+        try {\n+            new Hex().encode(new int[] { 65 });\n+            fail(\"An exception wasn't thrown when trying to encode.\");\n+        }\n+        catch (EncoderException e) {\n+            // Expected exception\n+        }\n+    }\n+\n+    public void testEncodeDecodeRandom() throws DecoderException, EncoderException {\n+        Random random = new Random();\n+\n+        Hex hex = new Hex();\n+        for (int i = 5; i > 0; i--) {\n+            byte[] data = new byte[random.nextInt(10000) + 1];\n+            random.nextBytes(data);\n+\n+            // static API\n+            char[] encodedChars = Hex.encodeHex(data);\n+            byte[] decodedBytes = Hex.decodeHex(encodedChars);\n+            assertTrue(Arrays.equals(data, decodedBytes));\n+            \n+            // instance API with array parameter\n+            byte[] encodedStringBytes = hex.encode(data);\n+            decodedBytes = hex.decode(encodedStringBytes);\n+            assertTrue(Arrays.equals(data, decodedBytes));\n+\n+            // instance API with char[] (Object) parameter\n+            String dataString = new String(encodedChars);\n+            char[] encodedStringChars = (char[])hex.encode(dataString);\n+            decodedBytes = (byte[])hex.decode(encodedStringChars);\n+            assertTrue(Arrays.equals(dataString.getBytes(), decodedBytes));\n+\n+            // instance API with String (Object) parameter\n+            dataString = new String(encodedChars);\n+            encodedStringChars = (char[])hex.encode(dataString);\n+            decodedBytes = (byte[])hex.decode(new String(encodedStringChars));\n+            assertTrue(Arrays.equals(dataString.getBytes(), decodedBytes));\n+        }\n+    }\n+\n+    public void testEncodeEmpty() throws EncoderException {\n+        assertTrue(Arrays.equals(new char[0], Hex.encodeHex(new byte[0])));\n+        assertTrue(Arrays.equals(new byte[0], new Hex().encode(new byte[0])));\n+        assertTrue(Arrays.equals(new char[0], (char[])new Hex().encode(\"\")));\n+    }\n+\n+    public void testEncodeZeroes() {\n         char[] c = Hex.encodeHex(new byte[36]);\n         assertEquals(\n             \"000000000000000000000000000000000000\"\n             new String(c));\n     }\n \n-    public void testHelloWorld() throws Exception {\n+    public void testHelloWorld() {\n         byte[] b = \"Hello World\".getBytes();\n         char[] c = Hex.encodeHex(b);\n         assertEquals(\"48656c6c6f20576f726c64\", new String(c));\n     }\n-\n-    public void testEncodeDecodeRandom() throws Exception {\n-        Random random = new Random();\n-\n-        for (int i = 5; i > 0; i--) {\n-            byte[] data = new byte[random.nextInt(10000) + 1];\n-            random.nextBytes(data);\n-\n-            char[] enc = Hex.encodeHex(data);\n-            byte[] data2 = Hex.decodeHex(enc);\n-\n-            assertTrue(Arrays.equals(data, data2));\n-        }\n-    }\n-\n-    public void testOddCharacters() throws Exception {\n-\n-        boolean exceptionThrown = false;\n-\n-        try {\n-            char[] singleChar = new char[1];\n-            singleChar[0] = 'a';\n-\n-            Hex.decodeHex( singleChar );\n-        }\n-        catch (Exception e) {\n-            exceptionThrown = true;\n-        }\n-\n-        assertTrue( \"An exception wasn't thrown when trying to \" +\n-                    \"decode an odd number of characters\", exceptionThrown );\n-\n-\n-    }\n-\n }", "timestamp": 1067886274, "metainfo": ""}