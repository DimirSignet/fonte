{"sha": "5e52a98fe648d65e10ae4bc71bbf51574edab5e6", "log": "Don't use the now deprecated isArrayByteBase64 method, use its replacement isBase64 (No need to test the deprecated method as it delegates to the new one anyway)  ", "commit": "\n--- a/src/test/org/apache/commons/codec/binary/Base64Test.java\n+++ b/src/test/org/apache/commons/codec/binary/Base64Test.java\n         assertTrue(\"encoding hello world\", encodedContent.equals(\"SGVsbG8gV29ybGQ=\"));\n \n         // bogus characters to decode (to skip actually)\n-        byte[] decode = b64.decode(\"SGVsbG{}8gV29ybGQ=\");\n+        byte[] decode = b64.decode(\"SGVsbG{\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd}8gV29ybGQ=\");\n         String decodeString = StringUtils.newStringUtf8(decode);\n         assertTrue(\"decode hello world\", decodeString.equals(\"Hello World\"));        \n     }\n             byte[] data = new byte[this.getRandom().nextInt(10000) + 1];\n             this.getRandom().nextBytes(data);\n             byte[] enc = Base64.encodeBase64(data);\n-            assertTrue(Base64.isArrayByteBase64(enc));\n+            assertTrue(Base64.isBase64(enc));\n             byte[] data2 = Base64.decodeBase64(enc);\n             assertTrue(Arrays.equals(data, data2));\n         }\n             byte[] data = new byte[i];\n             this.getRandom().nextBytes(data);\n             byte[] enc = Base64.encodeBase64(data);\n-            assertTrue(\"\\\"\" + (new String(enc)) + \"\\\" is Base64 data.\", Base64.isArrayByteBase64(enc));\n+            assertTrue(\"\\\"\" + (new String(enc)) + \"\\\" is Base64 data.\", Base64.isBase64(enc));\n             byte[] data2 = Base64.decodeBase64(enc);\n             assertTrue(toString(data) + \" equals \" + toString(data2), Arrays.equals(data, data2));\n         }\n     }\n \n     public void testIsArrayByteBase64() {\n-        assertFalse(Base64.isArrayByteBase64(new byte[]{Byte.MIN_VALUE}));\n-        assertFalse(Base64.isArrayByteBase64(new byte[]{-125}));\n-        assertFalse(Base64.isArrayByteBase64(new byte[]{-10}));\n-        assertFalse(Base64.isArrayByteBase64(new byte[]{0}));\n-        assertFalse(Base64.isArrayByteBase64(new byte[]{64, Byte.MAX_VALUE}));\n-        assertFalse(Base64.isArrayByteBase64(new byte[]{Byte.MAX_VALUE}));\n-        assertTrue(Base64.isArrayByteBase64(new byte[]{'A'}));\n-        assertFalse(Base64.isArrayByteBase64(new byte[]{'A', Byte.MIN_VALUE}));\n-        assertTrue(Base64.isArrayByteBase64(new byte[]{'A', 'Z', 'a'}));\n-        assertTrue(Base64.isArrayByteBase64(new byte[]{'/', '=', '+'}));\n-        assertFalse(Base64.isArrayByteBase64(new byte[]{'$'}));\n+        assertFalse(Base64.isBase64(new byte[]{Byte.MIN_VALUE}));\n+        assertFalse(Base64.isBase64(new byte[]{-125}));\n+        assertFalse(Base64.isBase64(new byte[]{-10}));\n+        assertFalse(Base64.isBase64(new byte[]{0}));\n+        assertFalse(Base64.isBase64(new byte[]{64, Byte.MAX_VALUE}));\n+        assertFalse(Base64.isBase64(new byte[]{Byte.MAX_VALUE}));\n+        assertTrue(Base64.isBase64(new byte[]{'A'}));\n+        assertFalse(Base64.isBase64(new byte[]{'A', Byte.MIN_VALUE}));\n+        assertTrue(Base64.isBase64(new byte[]{'A', 'Z', 'a'}));\n+        assertTrue(Base64.isBase64(new byte[]{'/', '=', '+'}));\n+        assertFalse(Base64.isBase64(new byte[]{'$'}));\n     }\n \n     /**\n         assertTrue(\"Base64.isUrlSafe=true\", base64URLSafe.isUrlSafe());\n \n         byte[] whiteSpace = {' ', '\\n', '\\r', '\\t'};\n-        assertTrue(\"Base64.isArrayByteBase64(whiteSpace)=true\", Base64.isArrayByteBase64(whiteSpace));\n+        assertTrue(\"Base64.isBase64(whiteSpace)=true\", Base64.isBase64(whiteSpace));\n     }\n \n     public void testKnownDecodings() throws UnsupportedEncodingException {\n         byte[] bArray = {'%'};\n \n         assertFalse(\"Invalid Base64 array was incorrectly validated as \" + \"an array of Base64 encoded data\", Base64\n-                .isArrayByteBase64(bArray));\n+                .isBase64(bArray));\n \n         try {\n             Base64 b64 = new Base64();", "timestamp": 1295984588, "metainfo": ""}