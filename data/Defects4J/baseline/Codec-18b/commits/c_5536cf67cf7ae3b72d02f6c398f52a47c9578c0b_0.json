{"sha": "5536cf67cf7ae3b72d02f6c398f52a47c9578c0b", "log": "Missing @since markers  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java\n+++ b/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java\n      *\n      * @return <code>0</code> if the {@link InputStream} has reached <code>EOF</code>,\n      * <code>1</code> otherwise\n+     * @since 1.7\n      */\n     @Override\n     public int available() throws IOException {\n      * {@inheritDoc}\n      *\n      * @throws IllegalArgumentException if the provided skip length is negative\n+     * @since 1.7\n      */\n     @Override\n     public long skip(long n) throws IOException {\n--- a/src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java\n      *\n      * @param maxPhonemes\n      *            the maximum number of phonemes returned by the engine\n+     * @since 1.7\n      */\n     public void setMaxPhonemes(int maxPhonemes) {\n         this.engine = new PhoneticEngine(this.engine.getNameType(),\n--- a/src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java\n      *            if it will concatenate multiple encodings\n      * @param maxPhonemes\n      *            the maximum number of phonemes that will be handled\n+     * @since 1.7\n      */\n     public PhoneticEngine(NameType nameType, RuleType ruleType, boolean concat, int maxPhonemes) {\n         if (ruleType == RuleType.RULES) {\n      * Gets the maximum number of phonemes the engine will calculate for a given input.\n      *\n      * @return the maximum number of phonemes\n+     * @since 1.7\n      */\n     public int getMaxPhonemes() {\n         return this.maxPhonemes;", "timestamp": 1333479072, "metainfo": ""}