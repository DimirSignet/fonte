{"sha": "ab27defc0f3a3ac9b797c23bdc32f35052492b1d", "log": "Don't use assertTrue for comparing equals  ", "commit": "\n--- a/src/test/java/org/apache/commons/codec/binary/Base64Test.java\n+++ b/src/test/java/org/apache/commons/codec/binary/Base64Test.java\n         String encodedContent;\n         byte[] encodedBytes = Base64.encodeBase64(StringUtils.getBytesUtf8(content));\n         encodedContent = StringUtils.newStringUtf8(encodedBytes);\n-        assertTrue(\"encoding hello world\", encodedContent.equals(\"SGVsbG8gV29ybGQ=\"));\n+        assertEquals(\"encoding hello world\", \"SGVsbG8gV29ybGQ=\", encodedContent);\n \n         Base64 b64 = new Base64(BaseNCodec.MIME_CHUNK_SIZE, null);  // null lineSeparator same as saying no-chunking\n         encodedBytes = b64.encode(StringUtils.getBytesUtf8(content));\n         encodedContent = StringUtils.newStringUtf8(encodedBytes);\n-        assertTrue(\"encoding hello world\", encodedContent.equals(\"SGVsbG8gV29ybGQ=\"));\n+        assertEquals(\"encoding hello world\", \"SGVsbG8gV29ybGQ=\", encodedContent);\n \n         b64 = new Base64(0, null);  // null lineSeparator same as saying no-chunking\n         encodedBytes = b64.encode(StringUtils.getBytesUtf8(content));\n         encodedContent = StringUtils.newStringUtf8(encodedBytes);\n-        assertTrue(\"encoding hello world\", encodedContent.equals(\"SGVsbG8gV29ybGQ=\"));\n+        assertEquals(\"encoding hello world\", \"SGVsbG8gV29ybGQ=\", encodedContent);\n \n         // bogus characters to decode (to skip actually) {e-acute*6}\n         byte[] decode = b64.decode(\"SGVsbG{\\u00e9\\u00e9\\u00e9\\u00e9\\u00e9\\u00e9}8gV29ybGQ=\");\n         String decodeString = StringUtils.newStringUtf8(decode);\n-        assertTrue(\"decode hello world\", decodeString.equals(\"Hello World\"));        \n+        assertEquals(\"decode hello world\", \"Hello World\", decodeString);        \n     }\n \n     /**\n \n     @Test\n     public void testDecodePadOnly() throws UnsupportedEncodingException {\n-        assertTrue(Base64.decodeBase64(\"====\".getBytes(\"UTF-8\")).length == 0);\n+        assertEquals(0, Base64.decodeBase64(\"====\".getBytes(\"UTF-8\")).length);\n         assertEquals(\"\", new String(Base64.decodeBase64(\"====\".getBytes(\"UTF-8\"))));\n         // Test truncated padding\n-        assertTrue(Base64.decodeBase64(\"===\".getBytes(\"UTF-8\")).length == 0);\n-        assertTrue(Base64.decodeBase64(\"==\".getBytes(\"UTF-8\")).length == 0);\n-        assertTrue(Base64.decodeBase64(\"=\".getBytes(\"UTF-8\")).length == 0);\n-        assertTrue(Base64.decodeBase64(\"\".getBytes(\"UTF-8\")).length == 0);\n+        assertEquals(0, Base64.decodeBase64(\"===\".getBytes(\"UTF-8\")).length);\n+        assertEquals(0, Base64.decodeBase64(\"==\".getBytes(\"UTF-8\")).length);\n+        assertEquals(0, Base64.decodeBase64(\"=\".getBytes(\"UTF-8\")).length);\n+        assertEquals(0, Base64.decodeBase64(\"\".getBytes(\"UTF-8\")).length);\n     }\n \n     @Test\n     public void testDecodePadOnlyChunked() throws UnsupportedEncodingException {\n-        assertTrue(Base64.decodeBase64(\"====\\n\".getBytes(\"UTF-8\")).length == 0);\n+        assertEquals(0, Base64.decodeBase64(\"====\\n\".getBytes(\"UTF-8\")).length);\n         assertEquals(\"\", new String(Base64.decodeBase64(\"====\\n\".getBytes(\"UTF-8\"))));\n         // Test truncated padding\n-        assertTrue(Base64.decodeBase64(\"===\\n\".getBytes(\"UTF-8\")).length == 0);\n-        assertTrue(Base64.decodeBase64(\"==\\n\".getBytes(\"UTF-8\")).length == 0);\n-        assertTrue(Base64.decodeBase64(\"=\\n\".getBytes(\"UTF-8\")).length == 0);\n-        assertTrue(Base64.decodeBase64(\"\\n\".getBytes(\"UTF-8\")).length == 0);\n+        assertEquals(0, Base64.decodeBase64(\"===\\n\".getBytes(\"UTF-8\")).length);\n+        assertEquals(0, Base64.decodeBase64(\"==\\n\".getBytes(\"UTF-8\")).length);\n+        assertEquals(0, Base64.decodeBase64(\"=\\n\".getBytes(\"UTF-8\")).length);\n+        assertEquals(0, Base64.decodeBase64(\"\\n\".getBytes(\"UTF-8\")).length);\n     }\n \n     @Test\n \n         String dest = new String(decodedWithWS);\n \n-        assertTrue(\"Dest string doesn't equal the original\", dest.equals(orig));\n+        assertEquals(\"Dest string doesn't equal the original\", orig, dest);\n     }\n \n     /**\n             Base64 b64 = new Base64();\n             byte[] result = b64.decode(bArray);\n \n-            assertTrue(\"The result should be empty as the test encoded content did \" + \"not contain any valid base 64 characters\",\n-                    result.length == 0);\n+            assertEquals(\"The result should be empty as the test encoded content did \" + \"not contain any valid base 64 characters\",\n+                    0, result.length);\n         } catch (Exception e) {\n             fail(\"Exception was thrown when trying to decode \"\n                 + \"invalid base64 encoded data - RFC 2045 requires that all \"\n         byte[] baDecoded = (byte[]) oDecoded;\n         String dest = new String(baDecoded);\n \n-        assertTrue(\"dest string does not equal original\", dest.equals(original));\n+        assertEquals(\"dest string does not equal original\", original, dest);\n     }\n \n     @Test\n         byte[] bArray = Base64.decodeBase64((byte[]) oEncoded);\n         String dest = new String(bArray);\n \n-        assertTrue(\"dest string does not equal original\", dest.equals(original));\n+        assertEquals(\"dest string does not equal original\", original, dest);\n     }\n \n     @Test\n         Base64 b64 = new Base64(Base64_BYTES_PER_ENCODED_BLOCK, baLineSeparator);\n         String strOriginal = \"Hello World\";\n         String strDecoded = new String(b64.decode(b64.encode(StringUtils.getBytesUtf8(strOriginal))));\n-        assertTrue(\"testDEFAULT_BUFFER_SIZE\", strOriginal.equals(strDecoded));\n+        assertEquals(\"testDEFAULT_BUFFER_SIZE\", strOriginal, strDecoded);\n     }\n \n }\n--- a/src/test/java/org/apache/commons/codec/binary/HexTest.java\n+++ b/src/test/java/org/apache/commons/codec/binary/HexTest.java\n         final String expected = \"48656c6c6f20576f726c64\";\n         char[] actual;\n         actual = Hex.encodeHex(b);\n-        assertTrue(expected.equals(new String(actual)));\n+        assertEquals(expected, new String(actual));\n         actual = Hex.encodeHex(b, true);\n-        assertTrue(expected.equals(new String(actual)));\n+        assertEquals(expected, new String(actual));\n         actual = Hex.encodeHex(b, false);\n-        assertFalse(expected.equals(new String(actual)));\n+        assertEquals(expected, new String(actual));\n     }\n \n     @Test", "timestamp": 1332459791, "metainfo": ""}