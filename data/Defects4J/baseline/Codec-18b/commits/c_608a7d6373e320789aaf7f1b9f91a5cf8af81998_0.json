{"sha": "608a7d6373e320789aaf7f1b9f91a5cf8af81998", "log": "[CODEC-124] Remove deprecated code for 2.0.  ", "commit": "\n--- a/src/java/org/apache/commons/codec/StringEncoderComparator.java\n+++ b/src/java/org/apache/commons/codec/StringEncoderComparator.java\n      * Internal encoder instance.\n      */\n     private final StringEncoder stringEncoder;\n-\n-    /**\n-     * Constructs a new instance.\n-     * \n-     * @deprecated Creating an instance without a {@link StringEncoder} leads to a {@link NullPointerException}. Will be\n-     *             removed in 2.0.\n-     */\n-    @Deprecated\n-    public StringEncoderComparator() {\n-        this.stringEncoder = null; // Trying to use this will cause things to break\n-    }\n \n     /**\n      * Constructs a new instance with the given algorithm.\n--- a/src/java/org/apache/commons/codec/binary/Base64.java\n+++ b/src/java/org/apache/commons/codec/binary/Base64.java\n     public static boolean isBase64(String base64) {\n         return isBase64(StringUtils.getBytesUtf8(base64));\n     }\n-\n-    /**\n-     * Tests a given byte array to see if it contains only valid characters within the Base64 alphabet. Currently the\n-     * method treats whitespace as valid.\n-     * \n-     * @param arrayOctet\n-     *            byte array to test\n-     * @return <code>true</code> if all bytes are valid characters in the Base64 alphabet or if the byte array is empty;\n-     *         <code>false</code>, otherwise\n-     * @deprecated 1.5 Use {@link #isBase64(byte[])}, will be removed in 2.0.\n-     */\n-    @Deprecated\n-    public static boolean isArrayByteBase64(byte[] arrayOctet) {\n-        return isBase64(arrayOctet);\n-    }\n     \n     /**\n      * Tests a given byte array to see if it contains only valid characters within the Base64 alphabet. Currently the\n--- a/src/java/org/apache/commons/codec/language/Soundex.java\n+++ b/src/java/org/apache/commons/codec/language/Soundex.java\n     }\n \n     /**\n-     * The maximum length of a Soundex code - Soundex codes are only four characters by definition.\n-     * \n-     * @deprecated This feature is not needed since the encoding size must be constant. Will be removed in 2.0.\n-     */\n-    @Deprecated\n-    private int maxLength = 4;\n-\n-    /**\n      * Every letter of the alphabet is \"mapped\" to a numerical value. This char array holds the values to which each\n      * letter is mapped. This implementation contains a default map for US_ENGLISH\n      */\n     }\n \n     /**\n-     * Returns the maxLength. Standard Soundex\n-     * \n-     * @deprecated This feature is not needed since the encoding size must be constant. Will be removed in 2.0.\n-     * @return int\n-     */\n-    @Deprecated\n-    public int getMaxLength() {\n-        return this.maxLength;\n-    }\n-\n-    /**\n      * Returns the soundex mapping.\n      * \n      * @return soundexMapping.\n             throw new IllegalArgumentException(\"The character is not mapped: \" + ch);\n         }\n         return this.getSoundexMapping()[index];\n-    }\n-\n-    /**\n-     * Sets the maxLength.\n-     * \n-     * @deprecated This feature is not needed since the encoding size must be constant. Will be removed in 2.0.\n-     * @param maxLength\n-     *                  The maxLength to set\n-     */\n-    @Deprecated\n-    public void setMaxLength(int maxLength) {\n-        this.maxLength = maxLength;\n     }\n \n     /**\n--- a/src/java/org/apache/commons/codec/net/URLCodec.java\n+++ b/src/java/org/apache/commons/codec/net/URLCodec.java\n     }\n \n     /**\n-     * The <code>String</code> encoding used for decoding and encoding.\n-     * \n-     * @return Returns the encoding.\n-     * \n-     * @deprecated Use {@link #getDefaultCharset()}, will be removed in 2.0.\n-     */\n-    @Deprecated\n-    public String getEncoding() {\n-        return this.charset;\n-    }\n-\n-    /**\n      * The default charset used for string decoding and encoding.\n      *\n      * @return the default string charset.\n--- a/src/test/org/apache/commons/codec/StringEncoderComparatorTest.java\n+++ b/src/test/org/apache/commons/codec/StringEncoderComparatorTest.java\n public class StringEncoderComparatorTest {\n \n     @Test\n-    public void testComparatorNoArgCon() throws Exception {\n-        new StringEncoderComparator();\n-    }        \n-\n-    @Test\n     public void testComparatorWithSoundex() throws Exception {\n         StringEncoderComparator sCompare = \n             new StringEncoderComparator( new Soundex() );\n--- a/src/test/org/apache/commons/codec/language/Caverphone2Test.java\n+++ b/src/test/org/apache/commons/codec/language/Caverphone2Test.java\n \n package org.apache.commons.codec.language;\n \n+import junit.framework.Assert;\n+\n+import org.apache.commons.codec.EncoderException;\n import org.apache.commons.codec.StringEncoder;\n+import org.apache.commons.codec.StringEncoderAbstractTest;\n+import org.junit.Test;\n \n /**\n  * Tests Caverphone2.\n  * \n  * @author Apache Software Foundation\n- * @version $Id: CaverphoneTest.java 1075947 2011-03-01 17:56:14Z ggregory $\n+ * @version $Id$\n  * @since 1.5\n  */\n-public class Caverphone2Test extends CaverphoneTest {\n+public class Caverphone2Test extends StringEncoderAbstractTest {\n \n     @Override\n     protected StringEncoder createStringEncoder() {\n         return new Caverphone2();\n     }\n \n+    /**\n+     * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf\n+     * \n+     * AT11111111 words: add, aid, at, art, eat, earth, head, hit, hot, hold, hard, heart, it, out, old\n+     * \n+     * @throws EncoderException\n+     */\n+    @Test\n+    public void testCaverphoneRevisitedCommonCodeAT11111111() throws EncoderException {\n+        this.checkEncodingVariations(\"AT11111111\", new String[]{\n+            \"add\",\n+            \"aid\",\n+            \"at\",\n+            \"art\",\n+            \"eat\",\n+            \"earth\",\n+            \"head\",\n+            \"hit\",\n+            \"hot\",\n+            \"hold\",\n+            \"hard\",\n+            \"heart\",\n+            \"it\",\n+            \"out\",\n+            \"old\"});\n+    }\n+\n+    /**\n+     * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf\n+     * \n+     * @throws EncoderException\n+     */\n+    @Test\n+    public void testCaverphoneRevisitedExamples() throws EncoderException {\n+        String[][] data = {{\"Stevenson\", \"STFNSN1111\"}, {\"Peter\", \"PTA1111111\"}};\n+        this.checkEncodings(data);\n+    }\n+\n+    /**\n+     * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf\n+     * \n+     * @throws EncoderException\n+     */\n+    @Test\n+    public void testCaverphoneRevisitedRandomNameKLN1111111() throws EncoderException {\n+        this.checkEncodingVariations(\"KLN1111111\", new String[]{\n+            \"Cailean\",\n+            \"Calan\",\n+            \"Calen\",\n+            \"Callahan\",\n+            \"Callan\",\n+            \"Callean\",\n+            \"Carleen\",\n+            \"Carlen\",\n+            \"Carlene\",\n+            \"Carlin\",\n+            \"Carline\",\n+            \"Carlyn\",\n+            \"Carlynn\",\n+            \"Carlynne\",\n+            \"Charlean\",\n+            \"Charleen\",\n+            \"Charlene\",\n+            \"Charline\",\n+            \"Cherlyn\",\n+            \"Chirlin\",\n+            \"Clein\",\n+            \"Cleon\",\n+            \"Cline\",\n+            \"Cohleen\",\n+            \"Colan\",\n+            \"Coleen\",\n+            \"Colene\",\n+            \"Colin\",\n+            \"Colleen\",\n+            \"Collen\",\n+            \"Collin\",\n+            \"Colline\",\n+            \"Colon\",\n+            \"Cullan\",\n+            \"Cullen\",\n+            \"Cullin\",\n+            \"Gaelan\",\n+            \"Galan\",\n+            \"Galen\",\n+            \"Garlan\",\n+            \"Garlen\",\n+            \"Gaulin\",\n+            \"Gayleen\",\n+            \"Gaylene\",\n+            \"Giliane\",\n+            \"Gillan\",\n+            \"Gillian\",\n+            \"Glen\",\n+            \"Glenn\",\n+            \"Glyn\",\n+            \"Glynn\",\n+            \"Gollin\",\n+            \"Gorlin\",\n+            \"Kalin\",\n+            \"Karlan\",\n+            \"Karleen\",\n+            \"Karlen\",\n+            \"Karlene\",\n+            \"Karlin\",\n+            \"Karlyn\",\n+            \"Kaylyn\",\n+            \"Keelin\",\n+            \"Kellen\",\n+            \"Kellene\",\n+            \"Kellyann\",\n+            \"Kellyn\",\n+            \"Khalin\",\n+            \"Kilan\",\n+            \"Kilian\",\n+            \"Killen\",\n+            \"Killian\",\n+            \"Killion\",\n+            \"Klein\",\n+            \"Kleon\",\n+            \"Kline\",\n+            \"Koerlin\",\n+            \"Kylen\",\n+            \"Kylynn\",\n+            \"Quillan\",\n+            \"Quillon\",\n+            \"Qulllon\",\n+            \"Xylon\"});\n+    }\n+\n+    /**\n+     * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf\n+     * \n+     * @throws EncoderException\n+     */\n+    @Test\n+    public void testCaverphoneRevisitedRandomNameTN11111111() throws EncoderException {\n+        this.checkEncodingVariations(\"TN11111111\", new String[]{\n+            \"Dan\",\n+            \"Dane\",\n+            \"Dann\",\n+            \"Darn\",\n+            \"Daune\",\n+            \"Dawn\",\n+            \"Ddene\",\n+            \"Dean\",\n+            \"Deane\",\n+            \"Deanne\",\n+            \"DeeAnn\",\n+            \"Deeann\",\n+            \"Deeanne\",\n+            \"Deeyn\",\n+            \"Den\",\n+            \"Dene\",\n+            \"Denn\",\n+            \"Deonne\",\n+            \"Diahann\",\n+            \"Dian\",\n+            \"Diane\",\n+            \"Diann\",\n+            \"Dianne\",\n+            \"Diannne\",\n+            \"Dine\",\n+            \"Dion\",\n+            \"Dione\",\n+            \"Dionne\",\n+            \"Doane\",\n+            \"Doehne\",\n+            \"Don\",\n+            \"Donn\",\n+            \"Doone\",\n+            \"Dorn\",\n+            \"Down\",\n+            \"Downe\",\n+            \"Duane\",\n+            \"Dun\",\n+            \"Dunn\",\n+            \"Duyne\",\n+            \"Dyan\",\n+            \"Dyane\",\n+            \"Dyann\",\n+            \"Dyanne\",\n+            \"Dyun\",\n+            \"Tan\",\n+            \"Tann\",\n+            \"Teahan\",\n+            \"Ten\",\n+            \"Tenn\",\n+            \"Terhune\",\n+            \"Thain\",\n+            \"Thaine\",\n+            \"Thane\",\n+            \"Thanh\",\n+            \"Thayne\",\n+            \"Theone\",\n+            \"Thin\",\n+            \"Thorn\",\n+            \"Thorne\",\n+            \"Thun\",\n+            \"Thynne\",\n+            \"Tien\",\n+            \"Tine\",\n+            \"Tjon\",\n+            \"Town\",\n+            \"Towne\",\n+            \"Turne\",\n+            \"Tyne\"});\n+    }\n+\n+    /**\n+     * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf\n+     * \n+     * @throws EncoderException\n+     */\n+    @Test\n+    public void testCaverphoneRevisitedRandomNameTTA1111111() throws EncoderException {\n+        this.checkEncodingVariations(\"TTA1111111\", new String[]{\n+            \"Darda\",\n+            \"Datha\",\n+            \"Dedie\",\n+            \"Deedee\",\n+            \"Deerdre\",\n+            \"Deidre\",\n+            \"Deirdre\",\n+            \"Detta\",\n+            \"Didi\",\n+            \"Didier\",\n+            \"Dido\",\n+            \"Dierdre\",\n+            \"Dieter\",\n+            \"Dita\",\n+            \"Ditter\",\n+            \"Dodi\",\n+            \"Dodie\",\n+            \"Dody\",\n+            \"Doherty\",\n+            \"Dorthea\",\n+            \"Dorthy\",\n+            \"Doti\",\n+            \"Dotti\",\n+            \"Dottie\",\n+            \"Dotty\",\n+            \"Doty\",\n+            \"Doughty\",\n+            \"Douty\",\n+            \"Dowdell\",\n+            \"Duthie\",\n+            \"Tada\",\n+            \"Taddeo\",\n+            \"Tadeo\",\n+            \"Tadio\",\n+            \"Tati\",\n+            \"Teador\",\n+            \"Tedda\",\n+            \"Tedder\",\n+            \"Teddi\",\n+            \"Teddie\",\n+            \"Teddy\",\n+            \"Tedi\",\n+            \"Tedie\",\n+            \"Teeter\",\n+            \"Teodoor\",\n+            \"Teodor\",\n+            \"Terti\",\n+            \"Theda\",\n+            \"Theodor\",\n+            \"Theodore\",\n+            \"Theta\",\n+            \"Thilda\",\n+            \"Thordia\",\n+            \"Tilda\",\n+            \"Tildi\",\n+            \"Tildie\",\n+            \"Tildy\",\n+            \"Tita\",\n+            \"Tito\",\n+            \"Tjader\",\n+            \"Toddie\",\n+            \"Toddy\",\n+            \"Torto\",\n+            \"Tuddor\",\n+            \"Tudor\",\n+            \"Turtle\",\n+            \"Tuttle\",\n+            \"Tutto\"});\n+    }\n+\n+    /**\n+     * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf\n+     * \n+     * @throws EncoderException\n+     */\n+    @Test\n+    public void testCaverphoneRevisitedRandomWords() throws EncoderException {\n+        this.checkEncodingVariations(\"RTA1111111\", new String[]{\"rather\", \"ready\", \"writer\"});\n+        this.checkEncoding(\"SSA1111111\", \"social\");\n+        this.checkEncodingVariations(\"APA1111111\", new String[]{\"able\", \"appear\"});\n+    }\n+\n+    @Test\n+    public void testEndMb() throws EncoderException {\n+        String[][] data = {{\"mb\", \"M111111111\"}, {\"mbmb\", \"MPM1111111\"}};\n+        this.checkEncodings(data);\n+    }\n+\n+    // Caverphone Revisited\n+    @Test\n+    public void testIsCaverphoneEquals() throws EncoderException {\n+        Caverphone2 caverphone = new Caverphone2();\n+        Assert.assertFalse(\"Caverphone encodings should not be equal\", caverphone.isEncodeEqual(\"Peter\", \"Stevenson\"));\n+        Assert.assertTrue(\"Caverphone encodings should be equal\", caverphone.isEncodeEqual(\"Peter\", \"Peady\"));\n+    }\n+\n+    @Test\n+    public void testSpecificationExamples() throws EncoderException {\n+        String[][] data = {\n+            {\"Peter\", \"PTA1111111\"},\n+            {\"ready\", \"RTA1111111\"},\n+            {\"social\", \"SSA1111111\"},\n+            {\"able\", \"APA1111111\"},\n+            {\"Tedder\", \"TTA1111111\"},\n+            {\"Karleen\", \"KLN1111111\"},\n+            {\"Dyun\", \"TN11111111\"}};\n+        this.checkEncodings(data);\n+    }\n+\n }\n--- a/src/test/org/apache/commons/codec/language/SoundexTest.java\n+++ b/src/test/org/apache/commons/codec/language/SoundexTest.java\n             \"SILLER\"}));\n     }\n \n-    @Test\n-    public void testMaxLength() throws Exception {\n-        Soundex soundex = new Soundex();\n-        soundex.setMaxLength(soundex.getMaxLength());\n-        Assert.assertEquals(\"S460\", this.getSoundexEncoder().encode(\"Sgler\"));\n-    }\n-\n-    @Test\n-    public void testMaxLengthLessThan3Fix() throws Exception {\n-        Soundex soundex = new Soundex();\n-        soundex.setMaxLength(2);\n-        Assert.assertEquals(\"S460\", soundex.encode(\"SCHELLER\"));\n-    }\n-\n     /**\n      * Examples for MS SQLServer from\n      * http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_setu-sus_3o6w.asp\n--- a/src/test/org/apache/commons/codec/net/URLCodecTest.java\n+++ b/src/test/org/apache/commons/codec/net/URLCodecTest.java\n     }; \n \n     private void validateState(URLCodec urlCodec) {\n-        assertEquals(urlCodec.getEncoding(), urlCodec.getDefaultCharset());        \n+        // no tests for now.\n     }\n     \n     private String constructString(int [] unicodeChars) {", "timestamp": 1305868248, "metainfo": ""}