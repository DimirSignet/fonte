{"sha": "031beb1467137e9ded0980767e51cea8c7cdfb69", "log": "Fix findbugs warning wrt missing default case, remove unneeded spaces.  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/language/Metaphone.java\n+++ b/src/main/java/org/apache/commons/codec/language/Metaphone.java\n     /**\n      * Five values in the English language\n      */\n-    private static final String VOWELS = \"AEIOU\" ;\n+    private static final String VOWELS = \"AEIOU\";\n \n     /**\n      * Variable used in Metaphone algorithm\n      */\n-    private static final String FRONTV = \"EIY\"   ;\n+    private static final String FRONTV = \"EIY\";\n \n     /**\n      * Variable used in Metaphone algorithm\n      */\n-    private static final String VARSON = \"CSPTG\" ;\n+    private static final String VARSON = \"CSPTG\";\n \n     /**\n      * The max code length for metaphone is 4\n      */\n-    private int maxCodeLen = 4 ;\n+    private int maxCodeLen = 4;\n \n     /**\n      * Creates an instance of the Metaphone encoder\n      * @return A metaphone code corresponding to the String supplied\n      */\n     public String metaphone(String txt) {\n-        boolean hard = false ;\n+        boolean hard = false;\n         if (txt == null || txt.length() == 0) {\n-            return \"\" ;\n+            return \"\";\n         }\n         // single character is itself\n         if (txt.length() == 1) {\n-            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n-        }\n-\n-        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n+            return txt.toUpperCase(java.util.Locale.ENGLISH);\n+        }\n+\n+        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();\n \n         StringBuilder local = new StringBuilder(40); // manipulate\n-        StringBuilder code = new StringBuilder(10) ; //   output\n+        StringBuilder code = new StringBuilder(10); //   output\n         // handle initial 2 characters exceptions\n         switch(inwd[0]) {\n-        case 'K' :\n-        case 'G' :\n-        case 'P' : /* looking for KN, etc*/\n+        case 'K':\n+        case 'G':\n+        case 'P': /* looking for KN, etc*/\n             if (inwd[1] == 'N') {\n                 local.append(inwd, 1, inwd.length - 1);\n             } else {\n                 local.append(inwd);\n             }\n             break;\n-        case 'W' : /* looking for WR or WH */\n+        case 'W': /* looking for WR or WH */\n             if (inwd[1] == 'R') {   // WR -> R\n                 local.append(inwd, 1, inwd.length - 1);\n-                break ;\n+                break;\n             }\n             if (inwd[1] == 'H') {\n                 local.append(inwd, 1, inwd.length - 1);\n                 local.append(inwd);\n             }\n             break;\n-        case 'X' : /* initial X becomes S */\n+        case 'X': /* initial X becomes S */\n             inwd[0] = 'S';\n             local.append(inwd);\n-            break ;\n-        default :\n+            break;\n+        default:\n             local.append(inwd);\n         } // now local has working string with initials fixed\n \n         int wdsz = local.length();\n-        int n = 0 ;\n+        int n = 0;\n \n         while (code.length() < this.getMaxCodeLen() &&\n                n < wdsz ) { // max code size of 4 works well\n-            char symb = local.charAt(n) ;\n+            char symb = local.charAt(n);\n             // remove duplicate letters except C\n             if (symb != 'C' && isPreviousChar( local, n, symb ) ) {\n-                n++ ;\n+                n++;\n             } else { // not dup\n                 switch(symb) {\n-                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n+                case 'A':\n+                case 'E':\n+                case 'I':\n+                case 'O':\n+                case 'U':\n                     if (n == 0) {\n                         code.append(symb);\n                     }\n-                    break ; // only use vowel if leading char\n-                case 'B' :\n+                    break; // only use vowel if leading char\n+                case 'B':\n                     if ( isPreviousChar(local, n, 'M') &&\n                          isLastChar(wdsz, n) ) { // B is silent if word ends in MB\n                         break;\n                     }\n                     code.append(symb);\n                     break;\n-                case 'C' : // lots of C special cases\n+                case 'C': // lots of C special cases\n                     /* discard if SCI, SCE or SCY */\n                     if ( isPreviousChar(local, n, 'S') &&\n                          !isLastChar(wdsz, n) &&\n                     }\n                     if (isPreviousChar(local, n, 'S') &&\n                         isNextChar(local, n, 'H') ) { // SCH->sk\n-                        code.append('K') ;\n-                        break ;\n+                        code.append('K');\n+                        break;\n                     }\n                     if (isNextChar(local, n, 'H')) { // detect CH\n                         if (n == 0 &&\n                     } else {\n                         code.append('K');\n                     }\n-                    break ;\n-                case 'D' :\n+                    break;\n+                case 'D':\n                     if (!isLastChar(wdsz, n + 1) &&\n                         isNextChar(local, n, 'G') &&\n                         FRONTV.indexOf(local.charAt(n + 2)) >= 0) { // DGE DGI DGY -> J\n-                        code.append('J'); n += 2 ;\n+                        code.append('J'); n += 2;\n                     } else {\n                         code.append('T');\n                     }\n-                    break ;\n-                case 'G' : // GH silent at end or before consonant\n+                    break;\n+                case 'G': // GH silent at end or before consonant\n                     if (isLastChar(wdsz, n + 1) &&\n                         isNextChar(local, n, 'H')) {\n                         break;\n                     }\n                     if (isPreviousChar(local, n, 'G')) {\n                         // NOTE: Given that duplicated chars are removed, I don't see how this can ever be true\n-                        hard = true ;\n-                    } else {\n-                        hard = false ;\n+                        hard = true;\n+                    } else {\n+                        hard = false;\n                     }\n                     if (!isLastChar(wdsz, n) &&\n                         FRONTV.indexOf(local.charAt(n + 1)) >= 0 &&\n                     } else {\n                         code.append('K');\n                     }\n-                    break ;\n+                    break;\n                 case 'H':\n                     if (isLastChar(wdsz, n)) {\n-                        break ; // terminal H\n+                        break; // terminal H\n                     }\n                     if (n > 0 &&\n                         VARSON.indexOf(local.charAt(n - 1)) >= 0) {\n                     }\n                     break;\n                 case 'F':\n-                case 'J' :\n-                case 'L' :\n+                case 'J':\n+                case 'L':\n                 case 'M':\n-                case 'N' :\n-                case 'R' :\n+                case 'N':\n+                case 'R':\n                     code.append(symb);\n                     break;\n-                case 'K' :\n+                case 'K':\n                     if (n > 0) { // not initial\n                         if (!isPreviousChar(local, n, 'C')) {\n                             code.append(symb);\n                     } else {\n                         code.append(symb); // initial K\n                     }\n-                    break ;\n-                case 'P' :\n+                    break;\n+                case 'P':\n                     if (isNextChar(local,n,'H')) {\n                         // PH -> F\n                         code.append('F');\n                     } else {\n                         code.append(symb);\n                     }\n-                    break ;\n-                case 'Q' :\n+                    break;\n+                case 'Q':\n                     code.append('K');\n                     break;\n-                case 'S' :\n+                case 'S':\n                     if (regionMatch(local,n,\"SH\") ||\n                         regionMatch(local,n,\"SIO\") ||\n                         regionMatch(local,n,\"SIA\")) {\n                         code.append('S');\n                     }\n                     break;\n-                case 'T' :\n+                case 'T':\n                     if (regionMatch(local,n,\"TIA\") ||\n                         regionMatch(local,n,\"TIO\")) {\n                         code.append('X');\n                     } else {\n                         code.append('T');\n                     }\n-                    break ;\n-                case 'V' :\n-                    code.append('F'); break ;\n-                case 'W' : case 'Y' : // silent if not followed by vowel\n+                    break;\n+                case 'V':\n+                    code.append('F'); break;\n+                case 'W':\n+                case 'Y': // silent if not followed by vowel\n                     if (!isLastChar(wdsz,n) &&\n                         isVowel(local,n+1)) {\n                         code.append(symb);\n                     }\n-                    break ;\n-                case 'X' :\n-                    code.append('K'); code.append('S');\n-                    break ;\n-                case 'Z' :\n-                    code.append('S'); break ;\n+                    break;\n+                case 'X':\n+                    code.append('K');\n+                    code.append('S');\n+                    break;\n+                case 'Z':\n+                    code.append('S');\n+                    break;\n+                default:\n+                    // do nothing\n+                    break;\n                 } // end switch\n-                n++ ;\n+                n++;\n             } // end else from symb != 'C'\n             if (code.length() > this.getMaxCodeLen()) {\n                 code.setLength(this.getMaxCodeLen());", "timestamp": 1346698174, "metainfo": ""}