{"sha": "410ab04290294dec74180043dc2aa635ca1e4e80", "log": "", "commit": "\n--- a/src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java\n+++ b/src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java\n     private final String standardResultString;\n \n     public HmacAlgorithmsTest(HmacAlgorithms hmacAlgorithm, byte[] standardResultBytes, String standardResultString) {\n-        Assume.assumeTrue(hmacAlgorithm.isAvailable());\n+        Assume.assumeTrue(HmacUtils.isAvailable(hmacAlgorithm));\n         this.hmacAlgorithm = hmacAlgorithm;\n         this.standardResultBytes = standardResultBytes;\n         this.standardResultString = standardResultString;\n         final String algorithm = hmacAlgorithm.getName();\n         Assert.assertNotNull(algorithm);\n         Assert.assertFalse(algorithm.isEmpty());\n-        Assume.assumeTrue(hmacAlgorithm.isAvailable());\n+        Assume.assumeTrue(HmacUtils.isAvailable(hmacAlgorithm));\n         Mac.getInstance(algorithm);\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n     public void testGetHmacEmptyKey() {\n-        hmacAlgorithm.getHmac(EMPTY_BYTE_ARRAY);\n+        HmacUtils.getInitializedMac(hmacAlgorithm, EMPTY_BYTE_ARRAY);\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n     public void testGetHmacNullKey() {\n-        hmacAlgorithm.getHmac(null);\n+        HmacUtils.getInitializedMac(hmacAlgorithm, null);\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n     public void testHmacFailByteArray() throws IOException {\n-        hmacAlgorithm.hmac((byte[]) null, STANDARD_PHRASE_BYTES);\n+        new HmacUtils(hmacAlgorithm, (byte[]) null).hmac(STANDARD_PHRASE_BYTES);\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n     public void testHmacFailInputStream() throws IOException {\n-        hmacAlgorithm.hmac((byte[]) null, new ByteArrayInputStream(STANDARD_PHRASE_BYTES));\n+        new HmacUtils(hmacAlgorithm, (byte[]) null).hmac(new ByteArrayInputStream(STANDARD_PHRASE_BYTES));\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n     public void testHmacFailString() throws IOException {\n-        hmacAlgorithm.hmac((String) null, STANDARD_PHRASE_STRING);\n+        new HmacUtils(hmacAlgorithm, (String) null).hmac(STANDARD_PHRASE_STRING);\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n     public void testHmacHexFailByteArray() throws IOException {\n-        hmacAlgorithm.hmacHex((byte[]) null, STANDARD_PHRASE_BYTES);\n+        new HmacUtils(hmacAlgorithm, (byte[]) null).hmac(STANDARD_PHRASE_BYTES);\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n     public void testHmacHexFailInputStream() throws IOException {\n-        hmacAlgorithm.hmacHex((byte[]) null, new ByteArrayInputStream(STANDARD_PHRASE_BYTES));\n+        new HmacUtils(hmacAlgorithm, (byte[]) null).hmac(new ByteArrayInputStream(STANDARD_PHRASE_BYTES));\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n     public void testHmacHexFailString() throws IOException {\n-        hmacAlgorithm.hmacHex((String) null, STANDARD_PHRASE_STRING);\n+        new HmacUtils(hmacAlgorithm, (String) null).hmac(STANDARD_PHRASE_STRING);\n     }\n \n     @Test\n \n     @Test\n     public void testMacByteArary() throws IOException {\n-        Assert.assertArrayEquals(standardResultBytes, hmacAlgorithm.hmac(STANDARD_KEY_BYTES, STANDARD_PHRASE_BYTES));\n+        Assert.assertArrayEquals(standardResultBytes, new HmacUtils(hmacAlgorithm, STANDARD_KEY_BYTES).hmac(STANDARD_PHRASE_BYTES));\n     }\n \n     @Test\n     public void testMacHexByteArray() throws IOException {\n-        Assert.assertEquals(standardResultString, hmacAlgorithm.hmacHex(STANDARD_KEY_BYTES, STANDARD_PHRASE_BYTES));\n+        Assert.assertEquals(standardResultString, new HmacUtils(hmacAlgorithm, STANDARD_KEY_BYTES).hmacHex(STANDARD_PHRASE_BYTES));\n     }\n \n     @Test\n     public void testMacHexInputStream() throws IOException {\n         Assert.assertEquals(standardResultString,\n-                hmacAlgorithm.hmacHex(STANDARD_KEY_BYTES, new ByteArrayInputStream(STANDARD_PHRASE_BYTES)));\n+                new HmacUtils(hmacAlgorithm, STANDARD_KEY_BYTES).hmacHex(new ByteArrayInputStream(STANDARD_PHRASE_BYTES)));\n     }\n \n     @Test\n     public void testMacHexString() throws IOException {\n-        Assert.assertEquals(standardResultString, hmacAlgorithm.hmacHex(STANDARD_KEY_STRING, STANDARD_PHRASE_STRING));\n+        Assert.assertEquals(standardResultString, new HmacUtils(hmacAlgorithm, STANDARD_KEY_BYTES).hmacHex(STANDARD_PHRASE_STRING));\n     }\n \n     @Test\n     public void testMacInputStream() throws IOException {\n         Assert.assertArrayEquals(standardResultBytes,\n-                hmacAlgorithm.hmac(STANDARD_KEY_BYTES, new ByteArrayInputStream(STANDARD_PHRASE_BYTES)));\n+                new HmacUtils(hmacAlgorithm, STANDARD_KEY_BYTES).hmac(new ByteArrayInputStream(STANDARD_PHRASE_BYTES)));\n     }\n \n     @Test\n     public void testMacString() throws IOException {\n-        Assert.assertArrayEquals(standardResultBytes, hmacAlgorithm.hmac(STANDARD_KEY_STRING, STANDARD_PHRASE_STRING));\n+        Assert.assertArrayEquals(standardResultBytes, new HmacUtils(hmacAlgorithm, STANDARD_KEY_BYTES).hmac(STANDARD_PHRASE_STRING));\n     }\n \n }", "timestamp": 1464006312, "metainfo": ""}