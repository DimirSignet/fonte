{"sha": "2eef8dee31bbaa10ffb1264fbbe9aba1bc92c45b", "log": "Javadocs. Make our exceptions fit the Java 1.4 pattern. 100%/100% line/branch code coverage for the main package.  ", "commit": "\n--- a/src/java/org/apache/commons/codec/DecoderException.java\n+++ b/src/java/org/apache/commons/codec/DecoderException.java\n     private static final long serialVersionUID = 1L;\n \n     /**\n-     * Creates a DecoderException.\n+     * Constructs a new exception with <code>null</code> as its detail message. The cause is not initialized, and may\n+     * subsequently be initialized by a call to {@link #initCause}.\n+     * \n+     * @since 1.4\n+     */\n+    public DecoderException() {\n+        super();\n+    }\n+\n+    /**\n+     * Constructs a new exception with the specified detail message. The cause is not initialized, and may subsequently\n+     * be initialized by a call to {@link #initCause}.\n      * \n      * @param message\n      *            The detail message which is saved for later retrieval by the {@link #getMessage()} method.\n     }\n \n     /**\n-     * Creates a DecoderException.\n+     * Constructsa new exception with the specified detail message and cause.\n      * \n-     * @param cause\n-     *            The cause which is saved for later retrieval by the {@link #getCause()} method. A <code>null</code>\n-     *            value is permitted, and indicates that the cause is nonexistent or unknown.\n-     * @since 1.4\n-     */\n-    public DecoderException(Throwable cause) {\n-        super(cause);\n-    }\n-\n-    /**\n-     * Creates a DecoderException.\n+     * <p>\n+     * Note that the detail message associated with <code>cause</code> is not automatically incorporated into this\n+     * exception's detail message.\n+     * </p>\n      * \n      * @param message\n      *            The detail message which is saved for later retrieval by the {@link #getMessage()} method.\n     public DecoderException(String message, Throwable cause) {\n         super(message, cause);\n     }\n+\n+    /**\n+     * Constructs a new exception with the specified cause and a detail message of <code>(cause==null ?\n+     * null : cause.toString())</code> (which typically contains the class and detail message of <code>cause</code>).\n+     * This constructor is useful for exceptions that are little more than wrappers for other throwables.\n+     * \n+     * @param cause\n+     *            The cause which is saved for later retrieval by the {@link #getCause()} method. A <code>null</code>\n+     *            value is permitted, and indicates that the cause is nonexistent or unknown.\n+     * @since 1.4\n+     */\n+    public DecoderException(Throwable cause) {\n+        super(cause);\n+    }\n }\n--- a/src/java/org/apache/commons/codec/EncoderException.java\n+++ b/src/java/org/apache/commons/codec/EncoderException.java\n     private static final long serialVersionUID = 1L;\n \n     /**\n-     * Creates a new instance of this exception with an useful message.\n+     * Constructs a new exception with <code>null</code> as its detail message. The cause is not initialized, and may\n+     * subsequently be initialized by a call to {@link #initCause}.\n+     * \n+     * @since 1.4\n+     */\n+    public EncoderException() {\n+        super();\n+    }\n+\n+    /**\n+     * Constructs a new exception with the specified detail message. The cause is not initialized, and may subsequently\n+     * be initialized by a call to {@link #initCause}.\n      * \n      * @param message\n      *            a useful message relating to the encoder specific error.\n     }\n \n     /**\n-     * Creates a EncoderException.\n+     * Constructs a new exception with the specified detail message and cause.\n      * \n-     * @param cause\n-     *            The cause which is saved for later retrieval by the {@link #getCause()} method. A <code>null</code>\n-     *            value is permitted, and indicates that the cause is nonexistent or unknown.\n-     * @since 1.4\n-     */\n-    public EncoderException(Throwable cause) {\n-        super(cause);\n-    }\n-\n-    /**\n-     * Creates a EncoderException.\n+     * <p>\n+     * Note that the detail message associated with <code>cause</code> is not automatically incorporated into this\n+     * exception's detail message.\n+     * </p>\n      * \n      * @param message\n      *            The detail message which is saved for later retrieval by the {@link #getMessage()} method.\n     public EncoderException(String message, Throwable cause) {\n         super(message, cause);\n     }\n+\n+    /**\n+     * Constructs a new exception with the specified cause and a detail message of <code>(cause==null ?\n+     * null : cause.toString())</code> (which typically contains the class and detail message of <code>cause</code>).\n+     * This constructor is useful for exceptions that are little more than wrappers for other throwables.\n+     * \n+     * @param cause\n+     *            The cause which is saved for later retrieval by the {@link #getCause()} method. A <code>null</code>\n+     *            value is permitted, and indicates that the cause is nonexistent or unknown.\n+     * @since 1.4\n+     */\n+    public EncoderException(Throwable cause) {\n+        super(cause);\n+    }\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/codec/DecoderExceptionTest.java\n+/*\n+ * Copyright (C) 1993-2003 SEAGULL\n+ * \n+ * DecoderException.java\n+ * Created on Jul 25, 2009, 9:28:09 AM\n+ * \n+ */\n+\n+package org.apache.commons.codec;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests DecoderException.\n+ * \n+ * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n+ * @version $Id: $\n+ */\n+public class DecoderExceptionTest extends TestCase {\n+\n+    private static final String MSG = \"TEST\";\n+\n+    private static final Throwable t = new Exception();\n+\n+    public void testConstructor0() {\n+        DecoderException e = new DecoderException();\n+        assertNull(e.getMessage());\n+        assertNull(e.getCause());\n+    }\n+\n+    public void testConstructorString() {\n+        DecoderException e = new DecoderException(MSG);\n+        assertEquals(MSG, e.getMessage());\n+        assertNull(e.getCause());\n+    }\n+\n+    public void testConstructorStringThrowable() {\n+        DecoderException e = new DecoderException(MSG, t);\n+        assertEquals(MSG, e.getMessage());\n+        assertEquals(t, e.getCause());\n+    }\n+\n+    public void testConstructorThrowable() {\n+        DecoderException e = new DecoderException(t);\n+        assertEquals(t.getClass().getName(), e.getMessage());\n+        assertEquals(t, e.getCause());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/codec/EncoderExceptionTest.java\n+/*\n+ * Copyright (C) 1993-2003 SEAGULL\n+ * \n+ * DecoderException.java\n+ * Created on Jul 25, 2009, 9:28:09 AM\n+ * \n+ */\n+\n+package org.apache.commons.codec;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests EncoderException.\n+ * \n+ * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n+ * @version $Id: $\n+ */\n+public class EncoderExceptionTest extends TestCase {\n+\n+    private static final String MSG = \"TEST\";\n+\n+    private static final Throwable t = new Exception();\n+\n+    public void testConstructor0() {\n+        EncoderException e = new EncoderException();\n+        assertNull(e.getMessage());\n+        assertNull(e.getCause());\n+    }\n+\n+    public void testConstructorString() {\n+        EncoderException e = new EncoderException(MSG);\n+        assertEquals(MSG, e.getMessage());\n+        assertNull(e.getCause());\n+    }\n+\n+    public void testConstructorStringThrowable() {\n+        EncoderException e = new EncoderException(MSG, t);\n+        assertEquals(MSG, e.getMessage());\n+        assertEquals(t, e.getCause());\n+    }\n+\n+    public void testConstructorThrowable() {\n+        EncoderException e = new EncoderException(t);\n+        assertEquals(t.getClass().getName(), e.getMessage());\n+        assertEquals(t, e.getCause());\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java\n+++ b/src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java\n  */\n public class RequiredCharsetNamesTest extends TestCase {\n \n+    /**\n+     * We could make the constructor private in the future, it's a matter a style.\n+     */\n+    public void testConstructor() {\n+        new RequiredCharsetNames();\n+    }\n+\n     public void testIso8859_1() {\n         Assert.assertEquals(\"ISO-8859-1\", RequiredCharsetNames.ISO_8859_1);\n     }", "timestamp": 1248542824, "metainfo": ""}