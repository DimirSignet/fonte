{"sha": "197f9e393760d2add973a2bb492481eb00ec3de6", "log": "eol-style  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/language/Caverphone.java\n+++ b/src/main/java/org/apache/commons/codec/language/Caverphone.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- * \n- *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.commons.codec.language;\n-\n-import org.apache.commons.codec.EncoderException;\n-import org.apache.commons.codec.StringEncoder;\n-\n-/**\n- * Encodes a string into a Caverphone 2.0 value. Delegate to a {@link Caverphone2} instance.\n- * \n- * This is an algorithm created by the Caversham Project at the University of Otago. It implements the Caverphone 2.0\n- * algorithm:\n- * \n- * @author Apache Software Foundation\n- * @version $Id: Caverphone.java 1079535 2011-03-08 20:54:37Z ggregory $\n- * @see <a href=\"http://en.wikipedia.org/wiki/Caverphone\">Wikipedia - Caverphone</a>\n- * @see <a href=\"http://caversham.otago.ac.nz/files/working/ctp150804.pdf\">Caverphone 2.0 specification</a>\n- * @since 1.4\n- * @deprecated 1.5 Replaced by {@link Caverphone2}, will be removed in 2.0.\n- */\n-public class Caverphone implements StringEncoder {\n-\n-    /**\n-     * Delegate to a {@link Caverphone2} instance to avoid code duplication.\n-     */\n-    final private Caverphone2 encoder = new Caverphone2();\n-\n-    /**\n-     * Creates an instance of the Caverphone encoder\n-     */\n-    public Caverphone() {\n-        super();\n-    }\n-\n-    /**\n-     * Encodes the given String into a Caverphone value.\n-     * \n-     * @param source\n-     *            String the source string\n-     * @return A caverphone code for the given String\n-     */\n-    public String caverphone(String source) {\n-        return this.encoder.encode(source);\n-    }\n-\n-    /**\n-     * Encodes an Object using the caverphone algorithm. This method is provided in order to satisfy the requirements of\n-     * the Encoder interface, and will throw an EncoderException if the supplied object is not of type java.lang.String.\n-     * \n-     * @param pObject\n-     *            Object to encode\n-     * @return An object (or type java.lang.String) containing the caverphone code which corresponds to the String\n-     *         supplied.\n-     * @throws EncoderException\n-     *             if the parameter supplied is not of type java.lang.String\n-     */\n-    public Object encode(Object pObject) throws EncoderException {\n-        if (!(pObject instanceof String)) {\n-            throw new EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\");\n-        }\n-        return this.caverphone((String) pObject);\n-    }\n-\n-    /**\n-     * Encodes a String using the Caverphone algorithm.\n-     * \n-     * @param pString\n-     *            String object to encode\n-     * @return The caverphone code corresponding to the String supplied\n-     */\n-    public String encode(String pString) {\n-        return this.caverphone(pString);\n-    }\n-\n-    /**\n-     * Tests if the caverphones of two strings are identical.\n-     * \n-     * @param str1\n-     *            First of two strings to compare\n-     * @param str2\n-     *            Second of two strings to compare\n-     * @return <code>true</code> if the caverphones of these strings are identical, <code>false</code> otherwise.\n-     */\n-    public boolean isCaverphoneEqual(String str1, String str2) {\n-        return this.caverphone(str1).equals(this.caverphone(str2));\n-    }\n-\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.codec.language;\n+\n+import org.apache.commons.codec.EncoderException;\n+import org.apache.commons.codec.StringEncoder;\n+\n+/**\n+ * Encodes a string into a Caverphone 2.0 value. Delegate to a {@link Caverphone2} instance.\n+ * \n+ * This is an algorithm created by the Caversham Project at the University of Otago. It implements the Caverphone 2.0\n+ * algorithm:\n+ * \n+ * @author Apache Software Foundation\n+ * @version $Id: Caverphone.java 1079535 2011-03-08 20:54:37Z ggregory $\n+ * @see <a href=\"http://en.wikipedia.org/wiki/Caverphone\">Wikipedia - Caverphone</a>\n+ * @see <a href=\"http://caversham.otago.ac.nz/files/working/ctp150804.pdf\">Caverphone 2.0 specification</a>\n+ * @since 1.4\n+ * @deprecated 1.5 Replaced by {@link Caverphone2}, will be removed in 2.0.\n+ */\n+public class Caverphone implements StringEncoder {\n+\n+    /**\n+     * Delegate to a {@link Caverphone2} instance to avoid code duplication.\n+     */\n+    final private Caverphone2 encoder = new Caverphone2();\n+\n+    /**\n+     * Creates an instance of the Caverphone encoder\n+     */\n+    public Caverphone() {\n+        super();\n+    }\n+\n+    /**\n+     * Encodes the given String into a Caverphone value.\n+     * \n+     * @param source\n+     *            String the source string\n+     * @return A caverphone code for the given String\n+     */\n+    public String caverphone(String source) {\n+        return this.encoder.encode(source);\n+    }\n+\n+    /**\n+     * Encodes an Object using the caverphone algorithm. This method is provided in order to satisfy the requirements of\n+     * the Encoder interface, and will throw an EncoderException if the supplied object is not of type java.lang.String.\n+     * \n+     * @param pObject\n+     *            Object to encode\n+     * @return An object (or type java.lang.String) containing the caverphone code which corresponds to the String\n+     *         supplied.\n+     * @throws EncoderException\n+     *             if the parameter supplied is not of type java.lang.String\n+     */\n+    public Object encode(Object pObject) throws EncoderException {\n+        if (!(pObject instanceof String)) {\n+            throw new EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\");\n+        }\n+        return this.caverphone((String) pObject);\n+    }\n+\n+    /**\n+     * Encodes a String using the Caverphone algorithm.\n+     * \n+     * @param pString\n+     *            String object to encode\n+     * @return The caverphone code corresponding to the String supplied\n+     */\n+    public String encode(String pString) {\n+        return this.caverphone(pString);\n+    }\n+\n+    /**\n+     * Tests if the caverphones of two strings are identical.\n+     * \n+     * @param str1\n+     *            First of two strings to compare\n+     * @param str2\n+     *            Second of two strings to compare\n+     * @return <code>true</code> if the caverphones of these strings are identical, <code>false</code> otherwise.\n+     */\n+    public boolean isCaverphoneEqual(String str1, String str2) {\n+        return this.caverphone(str1).equals(this.caverphone(str2));\n+    }\n+\n+}\n--- a/src/main/java/org/apache/commons/codec/language/bm/ResourceConstants.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/ResourceConstants.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- * \n- *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.commons.codec.language.bm;\n-\n-/**\n- * Constants used to process resource files.\n- * \n- * @author Apache Software Foundation\n- * @since 1.6\n- */\n-class ResourceConstants {\n-\n-    static final String CMT = \"//\";\n-    static final String ENCODING = \"UTF-8\";\n-    static final String EXT_CMT_END = \"*/\";\n-    static final String EXT_CMT_START = \"/*\";\n-\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.codec.language.bm;\n+\n+/**\n+ * Constants used to process resource files.\n+ * \n+ * @author Apache Software Foundation\n+ * @since 1.6\n+ */\n+class ResourceConstants {\n+\n+    static final String CMT = \"//\";\n+    static final String ENCODING = \"UTF-8\";\n+    static final String EXT_CMT_END = \"*/\";\n+    static final String EXT_CMT_START = \"/*\";\n+\n+}", "timestamp": 1321374211, "metainfo": ""}