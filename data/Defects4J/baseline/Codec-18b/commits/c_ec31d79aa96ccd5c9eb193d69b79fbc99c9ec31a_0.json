{"sha": "ec31d79aa96ccd5c9eb193d69b79fbc99c9ec31a", "log": "eol-style  ", "commit": "\n--- a/src/java/org/apache/commons/codec/language/AbstractCaverphone.java\n+++ b/src/java/org/apache/commons/codec/language/AbstractCaverphone.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- * \n- *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.commons.codec.language;\n-\n-import org.apache.commons.codec.EncoderException;\n-import org.apache.commons.codec.StringEncoder;\n-\n-/**\n- * Encodes a string into a Caverphone value.\n- * \n- * This is an algorithm created by the Caversham Project at the University of Otago. It implements the Caverphone 2.0\n- * algorithm:\n- * \n- * @author Apache Software Foundation\n- * @version $Id: Caverphone.java 1075947 2011-03-01 17:56:14Z ggregory $\n- * @see <a href=\"http://en.wikipedia.org/wiki/Caverphone\">Wikipedia - Caverphone</a>\n- * @since 1.5\n- */\n-public abstract class AbstractCaverphone implements StringEncoder {\n-\n-    /**\n-     * Creates an instance of the Caverphone encoder\n-     */\n-    public AbstractCaverphone() {\n-        super();\n-    }\n-\n-    /**\n-     * Encodes an Object using the caverphone algorithm. This method is provided in order to satisfy the requirements of\n-     * the Encoder interface, and will throw an EncoderException if the supplied object is not of type java.lang.String.\n-     * \n-     * @param source\n-     *            Object to encode\n-     * @return An object (or type java.lang.String) containing the caverphone code which corresponds to the String\n-     *         supplied.\n-     * @throws EncoderException\n-     *             if the parameter supplied is not of type java.lang.String\n-     */\n-    public Object encode(Object source) throws EncoderException {\n-        if (!(source instanceof String)) {\n-            throw new EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\");\n-        }\n-        return this.encode((String) source);\n-    }\n-\n-    /**\n-     * Tests if the encodings of two strings are equal.\n-     * \n-     * This method might be promoted to a new AbstractStringEncoder superclass.\n-     * \n-     * @param str1\n-     *            First of two strings to compare\n-     * @param str2\n-     *            Second of two strings to compare\n-     * @return <code>true</code> if the encodings of these strings are identical, <code>false</code> otherwise.\n-     * @throws EncoderException\n-     */\n-    public boolean isEncodeEqual(String str1, String str2) throws EncoderException {\n-        return this.encode(str1).equals(this.encode(str2));\n-    }\n-\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.codec.language;\n+\n+import org.apache.commons.codec.EncoderException;\n+import org.apache.commons.codec.StringEncoder;\n+\n+/**\n+ * Encodes a string into a Caverphone value.\n+ * \n+ * This is an algorithm created by the Caversham Project at the University of Otago. It implements the Caverphone 2.0\n+ * algorithm:\n+ * \n+ * @author Apache Software Foundation\n+ * @version $Id: Caverphone.java 1075947 2011-03-01 17:56:14Z ggregory $\n+ * @see <a href=\"http://en.wikipedia.org/wiki/Caverphone\">Wikipedia - Caverphone</a>\n+ * @since 1.5\n+ */\n+public abstract class AbstractCaverphone implements StringEncoder {\n+\n+    /**\n+     * Creates an instance of the Caverphone encoder\n+     */\n+    public AbstractCaverphone() {\n+        super();\n+    }\n+\n+    /**\n+     * Encodes an Object using the caverphone algorithm. This method is provided in order to satisfy the requirements of\n+     * the Encoder interface, and will throw an EncoderException if the supplied object is not of type java.lang.String.\n+     * \n+     * @param source\n+     *            Object to encode\n+     * @return An object (or type java.lang.String) containing the caverphone code which corresponds to the String\n+     *         supplied.\n+     * @throws EncoderException\n+     *             if the parameter supplied is not of type java.lang.String\n+     */\n+    public Object encode(Object source) throws EncoderException {\n+        if (!(source instanceof String)) {\n+            throw new EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\");\n+        }\n+        return this.encode((String) source);\n+    }\n+\n+    /**\n+     * Tests if the encodings of two strings are equal.\n+     * \n+     * This method might be promoted to a new AbstractStringEncoder superclass.\n+     * \n+     * @param str1\n+     *            First of two strings to compare\n+     * @param str2\n+     *            Second of two strings to compare\n+     * @return <code>true</code> if the encodings of these strings are identical, <code>false</code> otherwise.\n+     * @throws EncoderException\n+     */\n+    public boolean isEncodeEqual(String str1, String str2) throws EncoderException {\n+        return this.encode(str1).equals(this.encode(str2));\n+    }\n+\n+}\n--- a/src/java/org/apache/commons/codec/language/Caverphone1.java\n+++ b/src/java/org/apache/commons/codec/language/Caverphone1.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- * \n- *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.commons.codec.language;\n-\n-/**\n- * Encodes a string into a Caverphone 1.0 value.\n- * \n- * This is an algorithm created by the Caversham Project at the University of Otago. It implements the Caverphone 1.0\n- * algorithm:\n- * \n- * @author Apache Software Foundation\n- * @version $Id: Caverphone.java 1075947 2011-03-01 17:56:14Z ggregory $\n- * @see <a href=\"http://en.wikipedia.org/wiki/Caverphone\">Wikipedia - Caverphone</a>\n- * @see <a href=\"http://caversham.otago.ac.nz/files/working/ctp060902.pdf\">Caverphone 1.0 specification</a>\n- * @since 1.5\n- */\n-public class Caverphone1 extends AbstractCaverphone {\n-\n-    private static final String SIX_1 = \"111111\";\n-\n-    /**\n-     * Encodes the given String into a Caverphone value.\n-     * \n-     * @param source\n-     *            String the source string\n-     * @return A caverphone code for the given String\n-     */\n-    public String encode(String source) {\n-        String txt = source;\n-        if (txt == null || txt.length() == 0) {\n-            return SIX_1;\n-        }\n-\n-        // 1. Convert to lowercase\n-        txt = txt.toLowerCase(java.util.Locale.ENGLISH);\n-\n-        // 2. Remove anything not A-Z\n-        txt = txt.replaceAll(\"[^a-z]\", \"\");\n-\n-        // 3. Handle various start options\n-        // 2 is a temporary placeholder to indicate a consonant which we are no longer interested in.\n-        txt = txt.replaceAll(\"^cough\", \"cou2f\");\n-        txt = txt.replaceAll(\"^rough\", \"rou2f\");\n-        txt = txt.replaceAll(\"^tough\", \"tou2f\");\n-        txt = txt.replaceAll(\"^enough\", \"enou2f\");\n-        txt = txt.replaceAll(\"^gn\", \"2n\");\n-\n-        // End\n-        txt = txt.replaceAll(\"mb$\", \"m2\");\n-\n-        // 4. Handle replacements\n-        txt = txt.replaceAll(\"cq\", \"2q\");\n-        txt = txt.replaceAll(\"ci\", \"si\");\n-        txt = txt.replaceAll(\"ce\", \"se\");\n-        txt = txt.replaceAll(\"cy\", \"sy\");\n-        txt = txt.replaceAll(\"tch\", \"2ch\");\n-        txt = txt.replaceAll(\"c\", \"k\");\n-        txt = txt.replaceAll(\"q\", \"k\");\n-        txt = txt.replaceAll(\"x\", \"k\");\n-        txt = txt.replaceAll(\"v\", \"f\");\n-        txt = txt.replaceAll(\"dg\", \"2g\");\n-        txt = txt.replaceAll(\"tio\", \"sio\");\n-        txt = txt.replaceAll(\"tia\", \"sia\");\n-        txt = txt.replaceAll(\"d\", \"t\");\n-        txt = txt.replaceAll(\"ph\", \"fh\");\n-        txt = txt.replaceAll(\"b\", \"p\");\n-        txt = txt.replaceAll(\"sh\", \"s2\");\n-        txt = txt.replaceAll(\"z\", \"s\");\n-        txt = txt.replaceAll(\"^[aeiou]\", \"A\");\n-        // 3 is a temporary placeholder marking a vowel\n-        txt = txt.replaceAll(\"[aeiou]\", \"3\");\n-        txt = txt.replaceAll(\"3gh3\", \"3kh3\");\n-        txt = txt.replaceAll(\"gh\", \"22\");\n-        txt = txt.replaceAll(\"g\", \"k\");\n-        txt = txt.replaceAll(\"s+\", \"S\");\n-        txt = txt.replaceAll(\"t+\", \"T\");\n-        txt = txt.replaceAll(\"p+\", \"P\");\n-        txt = txt.replaceAll(\"k+\", \"K\");\n-        txt = txt.replaceAll(\"f+\", \"F\");\n-        txt = txt.replaceAll(\"m+\", \"M\");\n-        txt = txt.replaceAll(\"n+\", \"N\");\n-        txt = txt.replaceAll(\"w3\", \"W3\");\n-        txt = txt.replaceAll(\"wy\", \"Wy\"); // 1.0 only\n-        txt = txt.replaceAll(\"wh3\", \"Wh3\");\n-        txt = txt.replaceAll(\"why\", \"Why\"); // 1.0 only\n-        txt = txt.replaceAll(\"w\", \"2\");\n-        txt = txt.replaceAll(\"^h\", \"A\");\n-        txt = txt.replaceAll(\"h\", \"2\");\n-        txt = txt.replaceAll(\"r3\", \"R3\");\n-        txt = txt.replaceAll(\"ry\", \"Ry\"); // 1.0 only\n-        txt = txt.replaceAll(\"r\", \"2\");\n-        txt = txt.replaceAll(\"l3\", \"L3\");\n-        txt = txt.replaceAll(\"ly\", \"Ly\"); // 1.0 only\n-        txt = txt.replaceAll(\"l\", \"2\");\n-        txt = txt.replaceAll(\"j\", \"y\"); // 1.0 only\n-        txt = txt.replaceAll(\"y3\", \"Y3\"); // 1.0 only\n-        txt = txt.replaceAll(\"y\", \"2\"); // 1.0 only\n-\n-        // 5. Handle removals\n-        txt = txt.replaceAll(\"2\", \"\");\n-        txt = txt.replaceAll(\"3\", \"\");\n-\n-        // 6. put ten 1s on the end\n-        txt = txt + SIX_1;\n-\n-        // 7. take the first six characters as the code\n-        return txt.substring(0, SIX_1.length());\n-    }\n-\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.codec.language;\n+\n+/**\n+ * Encodes a string into a Caverphone 1.0 value.\n+ * \n+ * This is an algorithm created by the Caversham Project at the University of Otago. It implements the Caverphone 1.0\n+ * algorithm:\n+ * \n+ * @author Apache Software Foundation\n+ * @version $Id: Caverphone.java 1075947 2011-03-01 17:56:14Z ggregory $\n+ * @see <a href=\"http://en.wikipedia.org/wiki/Caverphone\">Wikipedia - Caverphone</a>\n+ * @see <a href=\"http://caversham.otago.ac.nz/files/working/ctp060902.pdf\">Caverphone 1.0 specification</a>\n+ * @since 1.5\n+ */\n+public class Caverphone1 extends AbstractCaverphone {\n+\n+    private static final String SIX_1 = \"111111\";\n+\n+    /**\n+     * Encodes the given String into a Caverphone value.\n+     * \n+     * @param source\n+     *            String the source string\n+     * @return A caverphone code for the given String\n+     */\n+    public String encode(String source) {\n+        String txt = source;\n+        if (txt == null || txt.length() == 0) {\n+            return SIX_1;\n+        }\n+\n+        // 1. Convert to lowercase\n+        txt = txt.toLowerCase(java.util.Locale.ENGLISH);\n+\n+        // 2. Remove anything not A-Z\n+        txt = txt.replaceAll(\"[^a-z]\", \"\");\n+\n+        // 3. Handle various start options\n+        // 2 is a temporary placeholder to indicate a consonant which we are no longer interested in.\n+        txt = txt.replaceAll(\"^cough\", \"cou2f\");\n+        txt = txt.replaceAll(\"^rough\", \"rou2f\");\n+        txt = txt.replaceAll(\"^tough\", \"tou2f\");\n+        txt = txt.replaceAll(\"^enough\", \"enou2f\");\n+        txt = txt.replaceAll(\"^gn\", \"2n\");\n+\n+        // End\n+        txt = txt.replaceAll(\"mb$\", \"m2\");\n+\n+        // 4. Handle replacements\n+        txt = txt.replaceAll(\"cq\", \"2q\");\n+        txt = txt.replaceAll(\"ci\", \"si\");\n+        txt = txt.replaceAll(\"ce\", \"se\");\n+        txt = txt.replaceAll(\"cy\", \"sy\");\n+        txt = txt.replaceAll(\"tch\", \"2ch\");\n+        txt = txt.replaceAll(\"c\", \"k\");\n+        txt = txt.replaceAll(\"q\", \"k\");\n+        txt = txt.replaceAll(\"x\", \"k\");\n+        txt = txt.replaceAll(\"v\", \"f\");\n+        txt = txt.replaceAll(\"dg\", \"2g\");\n+        txt = txt.replaceAll(\"tio\", \"sio\");\n+        txt = txt.replaceAll(\"tia\", \"sia\");\n+        txt = txt.replaceAll(\"d\", \"t\");\n+        txt = txt.replaceAll(\"ph\", \"fh\");\n+        txt = txt.replaceAll(\"b\", \"p\");\n+        txt = txt.replaceAll(\"sh\", \"s2\");\n+        txt = txt.replaceAll(\"z\", \"s\");\n+        txt = txt.replaceAll(\"^[aeiou]\", \"A\");\n+        // 3 is a temporary placeholder marking a vowel\n+        txt = txt.replaceAll(\"[aeiou]\", \"3\");\n+        txt = txt.replaceAll(\"3gh3\", \"3kh3\");\n+        txt = txt.replaceAll(\"gh\", \"22\");\n+        txt = txt.replaceAll(\"g\", \"k\");\n+        txt = txt.replaceAll(\"s+\", \"S\");\n+        txt = txt.replaceAll(\"t+\", \"T\");\n+        txt = txt.replaceAll(\"p+\", \"P\");\n+        txt = txt.replaceAll(\"k+\", \"K\");\n+        txt = txt.replaceAll(\"f+\", \"F\");\n+        txt = txt.replaceAll(\"m+\", \"M\");\n+        txt = txt.replaceAll(\"n+\", \"N\");\n+        txt = txt.replaceAll(\"w3\", \"W3\");\n+        txt = txt.replaceAll(\"wy\", \"Wy\"); // 1.0 only\n+        txt = txt.replaceAll(\"wh3\", \"Wh3\");\n+        txt = txt.replaceAll(\"why\", \"Why\"); // 1.0 only\n+        txt = txt.replaceAll(\"w\", \"2\");\n+        txt = txt.replaceAll(\"^h\", \"A\");\n+        txt = txt.replaceAll(\"h\", \"2\");\n+        txt = txt.replaceAll(\"r3\", \"R3\");\n+        txt = txt.replaceAll(\"ry\", \"Ry\"); // 1.0 only\n+        txt = txt.replaceAll(\"r\", \"2\");\n+        txt = txt.replaceAll(\"l3\", \"L3\");\n+        txt = txt.replaceAll(\"ly\", \"Ly\"); // 1.0 only\n+        txt = txt.replaceAll(\"l\", \"2\");\n+        txt = txt.replaceAll(\"j\", \"y\"); // 1.0 only\n+        txt = txt.replaceAll(\"y3\", \"Y3\"); // 1.0 only\n+        txt = txt.replaceAll(\"y\", \"2\"); // 1.0 only\n+\n+        // 5. Handle removals\n+        txt = txt.replaceAll(\"2\", \"\");\n+        txt = txt.replaceAll(\"3\", \"\");\n+\n+        // 6. put ten 1s on the end\n+        txt = txt + SIX_1;\n+\n+        // 7. take the first six characters as the code\n+        return txt.substring(0, SIX_1.length());\n+    }\n+\n+}\n--- a/src/java/org/apache/commons/codec/language/Caverphone2.java\n+++ b/src/java/org/apache/commons/codec/language/Caverphone2.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- * \n- *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.commons.codec.language;\n-\n-/**\n- * Encodes a string into a Caverphone 2.0 value.\n- * \n- * This is an algorithm created by the Caversham Project at the University of Otago. It implements the Caverphone 2.0\n- * algorithm:\n- * \n- * @author Apache Software Foundation\n- * @version $Id: Caverphone.java 1075947 2011-03-01 17:56:14Z ggregory $\n- * @see <a href=\"http://en.wikipedia.org/wiki/Caverphone\">Wikipedia - Caverphone</a>\n- * @see <a href=\"http://caversham.otago.ac.nz/files/working/ctp150804.pdf\">Caverphone 2.0 specification</a>\n- * @since 1.5\n- */\n-public class Caverphone2 extends AbstractCaverphone {\n-\n-    private static final String TEN_1 = \"1111111111\";\n-\n-    /**\n-     * Encodes the given String into a Caverphone 2.0 value.\n-     * \n-     * @param source\n-     *            String the source string\n-     * @return A caverphone code for the given String\n-     */\n-    public String encode(String source) {\n-        String txt = source;\n-        if (txt == null || txt.length() == 0) {\n-            return TEN_1;\n-        }\n-\n-        // 1. Convert to lowercase\n-        txt = txt.toLowerCase(java.util.Locale.ENGLISH);\n-\n-        // 2. Remove anything not A-Z\n-        txt = txt.replaceAll(\"[^a-z]\", \"\");\n-\n-        // 2.5. Remove final e\n-        txt = txt.replaceAll(\"e$\", \"\"); // 2.0 only\n-\n-        // 3. Handle various start options\n-        txt = txt.replaceAll(\"^cough\", \"cou2f\");\n-        txt = txt.replaceAll(\"^rough\", \"rou2f\");\n-        txt = txt.replaceAll(\"^tough\", \"tou2f\");\n-        txt = txt.replaceAll(\"^enough\", \"enou2f\"); // 2.0 only\n-        txt = txt.replaceAll(\"^trough\", \"trou2f\"); // 2.0 only - note the spec says ^enough here again, c+p error I assume\n-        txt = txt.replaceAll(\"^gn\", \"2n\");\n-\n-        // End\n-        txt = txt.replaceAll(\"mb$\", \"m2\");\n-\n-        // 4. Handle replacements\n-        txt = txt.replaceAll(\"cq\", \"2q\");\n-        txt = txt.replaceAll(\"ci\", \"si\");\n-        txt = txt.replaceAll(\"ce\", \"se\");\n-        txt = txt.replaceAll(\"cy\", \"sy\");\n-        txt = txt.replaceAll(\"tch\", \"2ch\");\n-        txt = txt.replaceAll(\"c\", \"k\");\n-        txt = txt.replaceAll(\"q\", \"k\");\n-        txt = txt.replaceAll(\"x\", \"k\");\n-        txt = txt.replaceAll(\"v\", \"f\");\n-        txt = txt.replaceAll(\"dg\", \"2g\");\n-        txt = txt.replaceAll(\"tio\", \"sio\");\n-        txt = txt.replaceAll(\"tia\", \"sia\");\n-        txt = txt.replaceAll(\"d\", \"t\");\n-        txt = txt.replaceAll(\"ph\", \"fh\");\n-        txt = txt.replaceAll(\"b\", \"p\");\n-        txt = txt.replaceAll(\"sh\", \"s2\");\n-        txt = txt.replaceAll(\"z\", \"s\");\n-        txt = txt.replaceAll(\"^[aeiou]\", \"A\");\n-        txt = txt.replaceAll(\"[aeiou]\", \"3\");\n-        txt = txt.replaceAll(\"j\", \"y\"); // 2.0 only\n-        txt = txt.replaceAll(\"^y3\", \"Y3\"); // 2.0 only\n-        txt = txt.replaceAll(\"^y\", \"A\"); // 2.0 only\n-        txt = txt.replaceAll(\"y\", \"3\"); // 2.0 only\n-        txt = txt.replaceAll(\"3gh3\", \"3kh3\");\n-        txt = txt.replaceAll(\"gh\", \"22\");\n-        txt = txt.replaceAll(\"g\", \"k\");\n-        txt = txt.replaceAll(\"s+\", \"S\");\n-        txt = txt.replaceAll(\"t+\", \"T\");\n-        txt = txt.replaceAll(\"p+\", \"P\");\n-        txt = txt.replaceAll(\"k+\", \"K\");\n-        txt = txt.replaceAll(\"f+\", \"F\");\n-        txt = txt.replaceAll(\"m+\", \"M\");\n-        txt = txt.replaceAll(\"n+\", \"N\");\n-        txt = txt.replaceAll(\"w3\", \"W3\");\n-        txt = txt.replaceAll(\"wh3\", \"Wh3\");\n-        txt = txt.replaceAll(\"w$\", \"3\"); // 2.0 only\n-        txt = txt.replaceAll(\"w\", \"2\");\n-        txt = txt.replaceAll(\"^h\", \"A\");\n-        txt = txt.replaceAll(\"h\", \"2\");\n-        txt = txt.replaceAll(\"r3\", \"R3\");\n-        txt = txt.replaceAll(\"r$\", \"3\"); // 2.0 only\n-        txt = txt.replaceAll(\"r\", \"2\");\n-        txt = txt.replaceAll(\"l3\", \"L3\");\n-        txt = txt.replaceAll(\"l$\", \"3\"); // 2.0 only\n-        txt = txt.replaceAll(\"l\", \"2\");\n-\n-        // 5. Handle removals\n-        txt = txt.replaceAll(\"2\", \"\");\n-        txt = txt.replaceAll(\"3$\", \"A\"); // 2.0 only\n-        txt = txt.replaceAll(\"3\", \"\");\n-\n-        // 6. put ten 1s on the end\n-        txt = txt + TEN_1;\n-\n-        // 7. take the first ten characters as the code\n-        return txt.substring(0, TEN_1.length());\n-    }\n-\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.codec.language;\n+\n+/**\n+ * Encodes a string into a Caverphone 2.0 value.\n+ * \n+ * This is an algorithm created by the Caversham Project at the University of Otago. It implements the Caverphone 2.0\n+ * algorithm:\n+ * \n+ * @author Apache Software Foundation\n+ * @version $Id: Caverphone.java 1075947 2011-03-01 17:56:14Z ggregory $\n+ * @see <a href=\"http://en.wikipedia.org/wiki/Caverphone\">Wikipedia - Caverphone</a>\n+ * @see <a href=\"http://caversham.otago.ac.nz/files/working/ctp150804.pdf\">Caverphone 2.0 specification</a>\n+ * @since 1.5\n+ */\n+public class Caverphone2 extends AbstractCaverphone {\n+\n+    private static final String TEN_1 = \"1111111111\";\n+\n+    /**\n+     * Encodes the given String into a Caverphone 2.0 value.\n+     * \n+     * @param source\n+     *            String the source string\n+     * @return A caverphone code for the given String\n+     */\n+    public String encode(String source) {\n+        String txt = source;\n+        if (txt == null || txt.length() == 0) {\n+            return TEN_1;\n+        }\n+\n+        // 1. Convert to lowercase\n+        txt = txt.toLowerCase(java.util.Locale.ENGLISH);\n+\n+        // 2. Remove anything not A-Z\n+        txt = txt.replaceAll(\"[^a-z]\", \"\");\n+\n+        // 2.5. Remove final e\n+        txt = txt.replaceAll(\"e$\", \"\"); // 2.0 only\n+\n+        // 3. Handle various start options\n+        txt = txt.replaceAll(\"^cough\", \"cou2f\");\n+        txt = txt.replaceAll(\"^rough\", \"rou2f\");\n+        txt = txt.replaceAll(\"^tough\", \"tou2f\");\n+        txt = txt.replaceAll(\"^enough\", \"enou2f\"); // 2.0 only\n+        txt = txt.replaceAll(\"^trough\", \"trou2f\"); // 2.0 only - note the spec says ^enough here again, c+p error I assume\n+        txt = txt.replaceAll(\"^gn\", \"2n\");\n+\n+        // End\n+        txt = txt.replaceAll(\"mb$\", \"m2\");\n+\n+        // 4. Handle replacements\n+        txt = txt.replaceAll(\"cq\", \"2q\");\n+        txt = txt.replaceAll(\"ci\", \"si\");\n+        txt = txt.replaceAll(\"ce\", \"se\");\n+        txt = txt.replaceAll(\"cy\", \"sy\");\n+        txt = txt.replaceAll(\"tch\", \"2ch\");\n+        txt = txt.replaceAll(\"c\", \"k\");\n+        txt = txt.replaceAll(\"q\", \"k\");\n+        txt = txt.replaceAll(\"x\", \"k\");\n+        txt = txt.replaceAll(\"v\", \"f\");\n+        txt = txt.replaceAll(\"dg\", \"2g\");\n+        txt = txt.replaceAll(\"tio\", \"sio\");\n+        txt = txt.replaceAll(\"tia\", \"sia\");\n+        txt = txt.replaceAll(\"d\", \"t\");\n+        txt = txt.replaceAll(\"ph\", \"fh\");\n+        txt = txt.replaceAll(\"b\", \"p\");\n+        txt = txt.replaceAll(\"sh\", \"s2\");\n+        txt = txt.replaceAll(\"z\", \"s\");\n+        txt = txt.replaceAll(\"^[aeiou]\", \"A\");\n+        txt = txt.replaceAll(\"[aeiou]\", \"3\");\n+        txt = txt.replaceAll(\"j\", \"y\"); // 2.0 only\n+        txt = txt.replaceAll(\"^y3\", \"Y3\"); // 2.0 only\n+        txt = txt.replaceAll(\"^y\", \"A\"); // 2.0 only\n+        txt = txt.replaceAll(\"y\", \"3\"); // 2.0 only\n+        txt = txt.replaceAll(\"3gh3\", \"3kh3\");\n+        txt = txt.replaceAll(\"gh\", \"22\");\n+        txt = txt.replaceAll(\"g\", \"k\");\n+        txt = txt.replaceAll(\"s+\", \"S\");\n+        txt = txt.replaceAll(\"t+\", \"T\");\n+        txt = txt.replaceAll(\"p+\", \"P\");\n+        txt = txt.replaceAll(\"k+\", \"K\");\n+        txt = txt.replaceAll(\"f+\", \"F\");\n+        txt = txt.replaceAll(\"m+\", \"M\");\n+        txt = txt.replaceAll(\"n+\", \"N\");\n+        txt = txt.replaceAll(\"w3\", \"W3\");\n+        txt = txt.replaceAll(\"wh3\", \"Wh3\");\n+        txt = txt.replaceAll(\"w$\", \"3\"); // 2.0 only\n+        txt = txt.replaceAll(\"w\", \"2\");\n+        txt = txt.replaceAll(\"^h\", \"A\");\n+        txt = txt.replaceAll(\"h\", \"2\");\n+        txt = txt.replaceAll(\"r3\", \"R3\");\n+        txt = txt.replaceAll(\"r$\", \"3\"); // 2.0 only\n+        txt = txt.replaceAll(\"r\", \"2\");\n+        txt = txt.replaceAll(\"l3\", \"L3\");\n+        txt = txt.replaceAll(\"l$\", \"3\"); // 2.0 only\n+        txt = txt.replaceAll(\"l\", \"2\");\n+\n+        // 5. Handle removals\n+        txt = txt.replaceAll(\"2\", \"\");\n+        txt = txt.replaceAll(\"3$\", \"A\"); // 2.0 only\n+        txt = txt.replaceAll(\"3\", \"\");\n+\n+        // 6. put ten 1s on the end\n+        txt = txt + TEN_1;\n+\n+        // 7. take the first ten characters as the code\n+        return txt.substring(0, TEN_1.length());\n+    }\n+\n+}\n--- a/src/java/org/apache/commons/codec/net/Utils.java\n+++ b/src/java/org/apache/commons/codec/net/Utils.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- * \n- *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.commons.codec.net;\n-\n-import org.apache.commons.codec.DecoderException;\n-\n-/**\n- * Utility methods for this package.\n- * \n- * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n- * @version $Id$\n- * @since 1.4\n- */\n-class Utils {\n-\n-    /**\n-     * Returns the numeric value of the character <code>b</code> in radix 16.\n-     * \n-     * @param b\n-     *            The byte to be converted.\n-     * @return The numeric value represented by the character in radix 16.\n-     * \n-     * @throws DecoderException\n-     *             Thrown when the byte is not valid per {@link Character#digit(char,int)}\n-     */\n-    static int digit16(byte b) throws DecoderException {\n-        int i = Character.digit((char) b, 16);\n-        if (i == -1) {\n-            throw new DecoderException(\"Invalid URL encoding: not a valid digit (radix \" + URLCodec.RADIX + \"): \" + b);\n-        }\n-        return i;\n-    }\n-\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.codec.net;\n+\n+import org.apache.commons.codec.DecoderException;\n+\n+/**\n+ * Utility methods for this package.\n+ * \n+ * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n+ * @version $Id$\n+ * @since 1.4\n+ */\n+class Utils {\n+\n+    /**\n+     * Returns the numeric value of the character <code>b</code> in radix 16.\n+     * \n+     * @param b\n+     *            The byte to be converted.\n+     * @return The numeric value represented by the character in radix 16.\n+     * \n+     * @throws DecoderException\n+     *             Thrown when the byte is not valid per {@link Character#digit(char,int)}\n+     */\n+    static int digit16(byte b) throws DecoderException {\n+        int i = Character.digit((char) b, 16);\n+        if (i == -1) {\n+            throw new DecoderException(\"Invalid URL encoding: not a valid digit (radix \" + URLCodec.RADIX + \"): \" + b);\n+        }\n+        return i;\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/codec/DecoderExceptionTest.java\n+++ b/src/test/org/apache/commons/codec/DecoderExceptionTest.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- * \n- *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.commons.codec;\n-\n-import junit.framework.TestCase;\n-\n-/**\n- * Tests {@link DecoderException}.\n- * \n- * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n- * @version $Id$\n- */\n-public class DecoderExceptionTest extends TestCase {\n-\n-    private static final String MSG = \"TEST\";\n-\n-    private static final Throwable t = new Exception();\n-\n-    public void testConstructor0() {\n-        DecoderException e = new DecoderException();\n-        assertNull(e.getMessage());\n-        assertNull(e.getCause());\n-    }\n-\n-    public void testConstructorString() {\n-        DecoderException e = new DecoderException(MSG);\n-        assertEquals(MSG, e.getMessage());\n-        assertNull(e.getCause());\n-    }\n-\n-    public void testConstructorStringThrowable() {\n-        DecoderException e = new DecoderException(MSG, t);\n-        assertEquals(MSG, e.getMessage());\n-        assertEquals(t, e.getCause());\n-    }\n-\n-    public void testConstructorThrowable() {\n-        DecoderException e = new DecoderException(t);\n-        assertEquals(t.getClass().getName(), e.getMessage());\n-        assertEquals(t, e.getCause());\n-    }\n-\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.codec;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@link DecoderException}.\n+ * \n+ * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n+ * @version $Id$\n+ */\n+public class DecoderExceptionTest extends TestCase {\n+\n+    private static final String MSG = \"TEST\";\n+\n+    private static final Throwable t = new Exception();\n+\n+    public void testConstructor0() {\n+        DecoderException e = new DecoderException();\n+        assertNull(e.getMessage());\n+        assertNull(e.getCause());\n+    }\n+\n+    public void testConstructorString() {\n+        DecoderException e = new DecoderException(MSG);\n+        assertEquals(MSG, e.getMessage());\n+        assertNull(e.getCause());\n+    }\n+\n+    public void testConstructorStringThrowable() {\n+        DecoderException e = new DecoderException(MSG, t);\n+        assertEquals(MSG, e.getMessage());\n+        assertEquals(t, e.getCause());\n+    }\n+\n+    public void testConstructorThrowable() {\n+        DecoderException e = new DecoderException(t);\n+        assertEquals(t.getClass().getName(), e.getMessage());\n+        assertEquals(t, e.getCause());\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/codec/EncoderExceptionTest.java\n+++ b/src/test/org/apache/commons/codec/EncoderExceptionTest.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- * \n- *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.commons.codec;\n-\n-import junit.framework.TestCase;\n-\n-/**\n- * Tests {@link EncoderException}.\n- * \n- * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n- * @version $Id$\n- */\n-public class EncoderExceptionTest extends TestCase {\n-\n-    private static final String MSG = \"TEST\";\n-\n-    private static final Throwable t = new Exception();\n-\n-    public void testConstructor0() {\n-        EncoderException e = new EncoderException();\n-        assertNull(e.getMessage());\n-        assertNull(e.getCause());\n-    }\n-\n-    public void testConstructorString() {\n-        EncoderException e = new EncoderException(MSG);\n-        assertEquals(MSG, e.getMessage());\n-        assertNull(e.getCause());\n-    }\n-\n-    public void testConstructorStringThrowable() {\n-        EncoderException e = new EncoderException(MSG, t);\n-        assertEquals(MSG, e.getMessage());\n-        assertEquals(t, e.getCause());\n-    }\n-\n-    public void testConstructorThrowable() {\n-        EncoderException e = new EncoderException(t);\n-        assertEquals(t.getClass().getName(), e.getMessage());\n-        assertEquals(t, e.getCause());\n-    }\n-\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.codec;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@link EncoderException}.\n+ * \n+ * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n+ * @version $Id$\n+ */\n+public class EncoderExceptionTest extends TestCase {\n+\n+    private static final String MSG = \"TEST\";\n+\n+    private static final Throwable t = new Exception();\n+\n+    public void testConstructor0() {\n+        EncoderException e = new EncoderException();\n+        assertNull(e.getMessage());\n+        assertNull(e.getCause());\n+    }\n+\n+    public void testConstructorString() {\n+        EncoderException e = new EncoderException(MSG);\n+        assertEquals(MSG, e.getMessage());\n+        assertNull(e.getCause());\n+    }\n+\n+    public void testConstructorStringThrowable() {\n+        EncoderException e = new EncoderException(MSG, t);\n+        assertEquals(MSG, e.getMessage());\n+        assertEquals(t, e.getCause());\n+    }\n+\n+    public void testConstructorThrowable() {\n+        EncoderException e = new EncoderException(t);\n+        assertEquals(t.getClass().getName(), e.getMessage());\n+        assertEquals(t, e.getCause());\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/codec/language/Caverphone1Test.java\n+++ b/src/test/org/apache/commons/codec/language/Caverphone1Test.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- * \n- *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.commons.codec.language;\n-\n-import junit.framework.Assert;\n-\n-import org.apache.commons.codec.EncoderException;\n-import org.apache.commons.codec.StringEncoder;\n-import org.apache.commons.codec.StringEncoderAbstractTest;\n-\n-/**\n- * Tests Caverphone1.\n- * \n- * @author Apache Software Foundation\n- * @version $Id: CaverphoneTest.java 1075947 2011-03-01 17:56:14Z ggregory $\n- * @since 1.5\n- */\n-public class Caverphone1Test extends StringEncoderAbstractTest {\n-\n-    public Caverphone1Test(String name) {\n-        super(name);\n-    }\n-\n-    protected StringEncoder createStringEncoder() {\n-        return new Caverphone1();\n-    }\n-\n-    /**\n-     * Tests example adapted from version 2.0  http://caversham.otago.ac.nz/files/working/ctp150804.pdf\n-     * \n-     * AT1111 words: add, aid, at, art, eat, earth, head, hit, hot, hold, hard, heart, it, out, old\n-     * \n-     * @throws EncoderException\n-     */\n-    public void testCaverphoneRevisitedCommonCodeAT1111() throws EncoderException {\n-        this.checkEncodingVariations(\"AT1111\", new String[]{\n-            \"add\",\n-            \"aid\",\n-            \"at\",\n-            \"art\",\n-            \"eat\",\n-            \"earth\",\n-            \"head\",\n-            \"hit\",\n-            \"hot\",\n-            \"hold\",\n-            \"hard\",\n-            \"heart\",\n-            \"it\",\n-            \"out\",\n-            \"old\"});\n-    }\n-\n-    public void testEndMb() throws EncoderException {\n-        String[][] data = {{\"mb\", \"M11111\"}, {\"mbmb\", \"MPM111\"}};\n-        this.checkEncodings(data);\n-    }\n-\n-    /**\n-     * Tests some examples from version 2.0 http://caversham.otago.ac.nz/files/working/ctp150804.pdf\n-     * \n-     * @throws EncoderException\n-     */\n-    public void testIsCaverphoneEquals() throws EncoderException {\n-        Caverphone1 caverphone = new Caverphone1();\n-        Assert.assertFalse(\"Caverphone encodings should not be equal\", caverphone.isEncodeEqual(\"Peter\", \"Stevenson\"));\n-        Assert.assertTrue(\"Caverphone encodings should be equal\", caverphone.isEncodeEqual(\"Peter\", \"Peady\"));\n-    }\n-\n-    /**\n-     * Tests example from http://caversham.otago.ac.nz/files/working/ctp060902.pdf\n-     * \n-     * @throws EncoderException\n-     */\n-    public void testSpecificationV1Examples() throws EncoderException {\n-        String[][] data = {{\"David\", \"TFT111\"}, {\"Whittle\", \"WTL111\"}};\n-        this.checkEncodings(data);\n-    }\n-\n-    /**\n-     * Tests examples from http://en.wikipedia.org/wiki/Caverphone\n-     * \n-     * @throws EncoderException\n-     */\n-    public void testWikipediaExamples() throws EncoderException {\n-        String[][] data = {{\"Lee\", \"L11111\"}, {\"Thompson\", \"TMPSN1\"}};\n-        this.checkEncodings(data);\n-    }\n-\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.codec.language;\n+\n+import junit.framework.Assert;\n+\n+import org.apache.commons.codec.EncoderException;\n+import org.apache.commons.codec.StringEncoder;\n+import org.apache.commons.codec.StringEncoderAbstractTest;\n+\n+/**\n+ * Tests Caverphone1.\n+ * \n+ * @author Apache Software Foundation\n+ * @version $Id: CaverphoneTest.java 1075947 2011-03-01 17:56:14Z ggregory $\n+ * @since 1.5\n+ */\n+public class Caverphone1Test extends StringEncoderAbstractTest {\n+\n+    public Caverphone1Test(String name) {\n+        super(name);\n+    }\n+\n+    protected StringEncoder createStringEncoder() {\n+        return new Caverphone1();\n+    }\n+\n+    /**\n+     * Tests example adapted from version 2.0  http://caversham.otago.ac.nz/files/working/ctp150804.pdf\n+     * \n+     * AT1111 words: add, aid, at, art, eat, earth, head, hit, hot, hold, hard, heart, it, out, old\n+     * \n+     * @throws EncoderException\n+     */\n+    public void testCaverphoneRevisitedCommonCodeAT1111() throws EncoderException {\n+        this.checkEncodingVariations(\"AT1111\", new String[]{\n+            \"add\",\n+            \"aid\",\n+            \"at\",\n+            \"art\",\n+            \"eat\",\n+            \"earth\",\n+            \"head\",\n+            \"hit\",\n+            \"hot\",\n+            \"hold\",\n+            \"hard\",\n+            \"heart\",\n+            \"it\",\n+            \"out\",\n+            \"old\"});\n+    }\n+\n+    public void testEndMb() throws EncoderException {\n+        String[][] data = {{\"mb\", \"M11111\"}, {\"mbmb\", \"MPM111\"}};\n+        this.checkEncodings(data);\n+    }\n+\n+    /**\n+     * Tests some examples from version 2.0 http://caversham.otago.ac.nz/files/working/ctp150804.pdf\n+     * \n+     * @throws EncoderException\n+     */\n+    public void testIsCaverphoneEquals() throws EncoderException {\n+        Caverphone1 caverphone = new Caverphone1();\n+        Assert.assertFalse(\"Caverphone encodings should not be equal\", caverphone.isEncodeEqual(\"Peter\", \"Stevenson\"));\n+        Assert.assertTrue(\"Caverphone encodings should be equal\", caverphone.isEncodeEqual(\"Peter\", \"Peady\"));\n+    }\n+\n+    /**\n+     * Tests example from http://caversham.otago.ac.nz/files/working/ctp060902.pdf\n+     * \n+     * @throws EncoderException\n+     */\n+    public void testSpecificationV1Examples() throws EncoderException {\n+        String[][] data = {{\"David\", \"TFT111\"}, {\"Whittle\", \"WTL111\"}};\n+        this.checkEncodings(data);\n+    }\n+\n+    /**\n+     * Tests examples from http://en.wikipedia.org/wiki/Caverphone\n+     * \n+     * @throws EncoderException\n+     */\n+    public void testWikipediaExamples() throws EncoderException {\n+        String[][] data = {{\"Lee\", \"L11111\"}, {\"Thompson\", \"TMPSN1\"}};\n+        this.checkEncodings(data);\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/codec/language/Caverphone2Test.java\n+++ b/src/test/org/apache/commons/codec/language/Caverphone2Test.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- * \n- *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.commons.codec.language;\n-\n-import org.apache.commons.codec.StringEncoder;\n-\n-/**\n- * Tests Caverphone2.\n- * \n- * @author Apache Software Foundation\n- * @version $Id: CaverphoneTest.java 1075947 2011-03-01 17:56:14Z ggregory $\n- * @since 1.5\n- */\n-public class Caverphone2Test extends CaverphoneTest {\n-\n-    public Caverphone2Test(String name) {\n-        super(name);\n-    }\n-\n-    protected StringEncoder createStringEncoder() {\n-        return new Caverphone2();\n-    }\n-\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.codec.language;\n+\n+import org.apache.commons.codec.StringEncoder;\n+\n+/**\n+ * Tests Caverphone2.\n+ * \n+ * @author Apache Software Foundation\n+ * @version $Id: CaverphoneTest.java 1075947 2011-03-01 17:56:14Z ggregory $\n+ * @since 1.5\n+ */\n+public class Caverphone2Test extends CaverphoneTest {\n+\n+    public Caverphone2Test(String name) {\n+        super(name);\n+    }\n+\n+    protected StringEncoder createStringEncoder() {\n+        return new Caverphone2();\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/codec/net/UtilsTest.java\n+++ b/src/test/org/apache/commons/codec/net/UtilsTest.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- * \n- *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.commons.codec.net;\n-\n-import junit.framework.TestCase;\n-\n-/**\n- * Tests Utils.\n- * <p>\n- * Methods currently get 100%/100% line/branch code coverage from other tests classes.\n- * </p>\n- * \n- * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n- * @version $Id$\n- * @since 1.4\n- */\n-public class UtilsTest extends TestCase {\n-\n-    /**\n-     * We could make the constructor private but there does not seem to be a point to jumping through extra code hoops\n-     * to restrict instantiation right now.\n-     */\n-    public void testConstructor() {\n-        new Utils();\n-    }\n-\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.codec.net;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests Utils.\n+ * <p>\n+ * Methods currently get 100%/100% line/branch code coverage from other tests classes.\n+ * </p>\n+ * \n+ * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n+ * @version $Id$\n+ * @since 1.4\n+ */\n+public class UtilsTest extends TestCase {\n+\n+    /**\n+     * We could make the constructor private but there does not seem to be a point to jumping through extra code hoops\n+     * to restrict instantiation right now.\n+     */\n+    public void testConstructor() {\n+        new Utils();\n+    }\n+\n+}", "timestamp": 1301019225, "metainfo": ""}