{"sha": "d2c0d2a2327e9ddf887b119fadbe5a5366f67e36", "log": "Javadoc cleanup of new crypt classes.  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/digest/Crypt.java\n+++ b/src/main/java/org/apache/commons/codec/digest/Crypt.java\n \n /**\n  * GNU libc crypt(3) compatible hash method.\n- *\n+ * <p>\n  * See {@link #crypt(String, String)} for further details.\n  *\n  * <p>This class is immutable and thread-safe.</p>\n \n     /**\n      * Encrypts a password in a crypt(3) compatible way.\n-     *\n+     * <p>\n      * A random salt and the default algorithm (currently SHA-512) are used. See\n      * {@link #crypt(String, String)} for details.\n      *\n      * @param keyBytes\n-     *            The plaintext password.\n-     * @return The hash value.\n+     *            plaintext password\n+     * @return hash value\n      */\n     public static String crypt(byte[] keyBytes) throws Exception {\n         return crypt(keyBytes, null);\n \n     /**\n      * Encrypts a password in a crypt(3) compatible way.\n-     *\n+     * <p>\n      * A random salt and the default algorithm (currently SHA-512) are used. See\n      * {@link #crypt(String, String)} for details.\n      *\n      * @param keyBytes\n-     *            The plaintext password.\n+     *            plaintext password\n      * @param salt\n-     *            The salt value\n-     * @return The hash value.\n+     *            salt value\n+     * @return hash value\n      */\n     public static String crypt(byte[] keyBytes, String salt) throws Exception {\n         if (salt == null) {\n \n     /**\n      * Calculates the digest using the strongest crypt(3) algorithm.\n-     *\n+     * <p>\n      * A random salt and the default algorithm (currently SHA-512) are used.\n      *\n      * @see #crypt(String, String)\n      * @param key\n-     *            The plaintext password.\n-     * @return The hash value.\n+     *            plaintext password\n+     * @return hash value\n      */\n     public static String crypt(String key) throws Exception {\n         return crypt(key, null);\n      * <li>DES, the traditional UnixCrypt algorithm is used else with only 2 chars\n      * <li>Only the first 8 chars of the passwords are used in the DES algorithm!\n      * </ul>\n-     * The magic strings \"$apr1$\" and \"$2a$\" are not recognised by this method as its output should be identical with\n-     * that of the libc implementation.\n+     * The magic strings \"$apr1$\" and \"$2a$\" are not recognised by this method as its\n+     * output should be identical with that of the libc implementation.\n      *\n      * <p>\n-     * The rest of the salt string is drawn from the set [a-zA-Z0-9./] and is cut at the maximum length of if a \"$\" sign\n-     * is encountered. It is therefore valid to enter a complete hash value as salt to e.g. verify a password with:\n-     * storedPwd.equals(crypt(enteredPwd, storedPwd))\n+     * The rest of the salt string is drawn from the set [a-zA-Z0-9./] and is cut at the\n+     * maximum length of if a \"$\" sign is encountered. It is therefore valid to enter a\n+     * complete hash value as salt to e.g. verify a password with:\n+     *\n+     * <pre>\n+     *      storedPwd.equals(crypt(enteredPwd, storedPwd))\n+     * </pre>\n      *\n      * <p>\n-     * The resulting string starts with the marker string ($6$), continues with the salt value and ends with a \"$\" sign\n-     * followed by the actual hash value. For DES the string only contains the salt and actual hash. It's toal length is\n-     * dependend on the algorithm used:\n+     * The resulting string starts with the marker string ($6$), continues with the salt\n+     * value and ends with a \"$\" sign followed by the actual hash value. For DES the string\n+     * only contains the salt and actual hash. It's total length is dependent on the algorithm used:\n      * <ul>\n      * <li>SHA-512: 106 chars\n      * <li>SHA-256: 63 chars\n      *      crypt(\"secret\", \"xx\") => \"xxWAum7tHdIUw\"\n      * </pre>\n      *\n-     * This method comes in a variation that accepts a byte[] array to support input strings that are not encoded in\n-     * UTF-8 but e.g. in ISO-8859-1 where equal characters result in different byte values.\n+     * <p>\n+     * This method comes in a variation that accepts a byte[] array to support input strings that\n+     * are not encoded in UTF-8 but e.g. in ISO-8859-1 where equal characters result in different byte values.\n      *\n      * @see \"The man page of the libc crypt (3) function.\"\n      * @param key\n-     *            The plaintext password as entered by the used.\n+     *            plaintext password as entered by the used\n      * @param salt\n-     *            The salt value\n-     * @return The hash value i.e. encrypted password including the salt string\n+     *            salt value\n+     * @return hash value, i.e. encrypted password including the salt string\n      */\n     public static String crypt(String key, String salt) throws Exception {\n         return crypt(key.getBytes(Charsets.UTF_8), salt);\n--- a/src/main/java/org/apache/commons/codec/digest/Md5Crypt.java\n+++ b/src/main/java/org/apache/commons/codec/digest/Md5Crypt.java\n  * Based on the public domain (\"beer-ware\") C implementation from Poul-Henning Kamp which was found at:\n  * </p>\n  * <p>\n- * http://www.freebsd.org/cgi/cvsweb.cgi/src/lib/libcrypt/crypt-md5.c?rev=1.1;content-type=text%2Fplain</br>\n+ * http://www.freebsd.org/cgi/cvsweb.cgi/src/lib/libcrypt/crypt-md5.c?rev=1.1;content-type=text%2Fplain<br/>\n  * Source: $FreeBSD: src/lib/libcrypt/crypt-md5.c,v 1.1 1999/01/21 13:50:09 brandon Exp $\n  * </p>\n- * <p>\n- * Conversion to Kotlin and from there to Java in 2012.\n- * </p>\n- * <p>\n- * The C style comments are from the original C code, the ones with \"//\" from the port.\n- * </p>\n+ * <p>Conversion to Kotlin and from there to Java in 2012.</p>\n+ *\n+ * <p>The C style comments are from the original C code, the ones with \"//\" from the port.</p>\n  *\n  * <p>This class is immutable and thread-safe.</p>\n  *\n     }\n \n     /**\n-     * Generates an Apache htpasswd compatible \"$apr1$\" MD5 based hash value. *\n-     *\n-     * The algorithm is identical to the crypt(3) \"$1$\" one but produces different outputs due to the different salt\n-     * prefix.\n+     * Generates an Apache htpasswd compatible \"$apr1$\" MD5 based hash value.\n+     * <p>\n+     * The algorithm is identical to the crypt(3) \"$1$\" one but produces different\n+     * outputs due to the different salt prefix.\n      *\n      * @param keyBytes\n-     *            The plaintext string that should be hashed.\n+     *            plaintext string that should be hashed.\n      * @param salt\n-     *            Salt string including the prefix and optionally garbage at the end. Will be generated randomly if\n-     *            null.\n+     *            salt string including the prefix and optionally garbage at the end.\n+     *            Will be generated randomly if null.\n+     * @return computed hash value\n      */\n     public static String apr1Crypt(String keyBytes, String salt) throws Exception {\n         return apr1Crypt(keyBytes.getBytes(Charsets.UTF_8), salt);\n \n     /**\n      * Generates a libc6 crypt() compatible \"$1$\" hash value.\n-     *\n+     * <p>\n      * See {@link Crypt#crypt(String, String)} for details.\n      */\n     public static String md5Crypt(final byte[] keyBytes) throws Exception {\n \n     /**\n      * Generates a libc crypt() compatible \"$1$\" MD5 based hash value.\n-     *\n+     * <p>\n      * See {@link Crypt#crypt(String, String)} for details.\n      *\n      * @param keyBytes\n-     *            The plaintext string that should be hashed.\n+     *            plaintext string that should be hashed.\n      * @param salt\n-     *            Salt string including the prefix and optionally garbage at the end. Will be generated randomly if\n-     *            null.\n+     *            salt string including the prefix and optionally garbage at the end.\n+     *            Will be generated randomly if null.\n+     * @return computed hash value\n      */\n     public static String md5Crypt(byte[] keyBytes, String salt) throws Exception {\n         return md5Crypt(keyBytes, salt, MD5_PREFIX);\n \n     /**\n      * Generates a libc6 crypt() \"$1$\" or Apache htpasswd \"$apr1$\" hash value.\n-     *\n+     * <p>\n      * See {@link Crypt#crypt(String, String)} or {@link #apr1Crypt(String, String)} for details.\n      */\n     public static String md5Crypt(final byte[] keyBytes, final String salt, final String prefix) throws Exception {\n--- a/src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java\n+++ b/src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java\n \n     /**\n      * Generates a libc crypt() compatible \"$5$\" hash value with random salt.\n-     *\n+     * <p>\n      * See {@link Crypt#crypt(String, String)} for details.\n      */\n     public static String sha256Crypt(byte[] keyBytes) throws Exception {\n \n     /**\n      * Generates a libc6 crypt() compatible \"$5$\" hash value.\n-     *\n+     * <p>\n      * See {@link Crypt#crypt(String, String)} for details.\n      */\n     public static String sha256Crypt(byte[] keyBytes, String salt) throws Exception {\n \n     /**\n      * Generates a libc6 crypt() compatible \"$5$\" or \"$6$\" SHA2 based hash value.\n-     *\n-     * This is a nearly line by line conversion of the original C function. The numbered comments are from the algorithm\n-     * description, the short C-style ones from the original C code and the ones with \"Remark\" from me.\n-     *\n+     * <p>\n+     * This is a nearly line by line conversion of the original C function. The numbered comments\n+     * are from the algorithm description, the short C-style ones from the original C code and the\n+     * ones with \"Remark\" from me.\n+     * <p>\n      * See {@link Crypt#crypt(String, String)} for details.\n      *\n      * @param keyBytes\n-     *            The plaintext that should be hashed.\n+     *            plaintext that should be hashed\n      * @param salt_string\n-     *            The real salt value without prefix or \"rounds=\".\n+     *            real salt value without prefix or \"rounds=\"\n      * @param saltPrefix\n-     *            Either $5$ or $6$.\n+     *            either $5$ or $6$\n      * @param blocksize\n-     *            A value that differs between $5$ and $6$.\n+     *            a value that differs between $5$ and $6$\n      * @param algorithm\n-     *            The MessageDigest algorithm identifier string.\n-     * @return The complete hash value including prefix and salt.\n+     *            {@link MessageDigest} algorithm identifier string\n+     * @return complete hash value including prefix and salt\n      */\n     private static String sha2Crypt(byte[] keyBytes, String salt, String saltPrefix, int blocksize, String algorithm)\n             throws Exception {\n \n     /**\n      * Generates a libc crypt() compatible \"$6$\" hash value with random salt.\n-     *\n+     * <p>\n      * See {@link Crypt#crypt(String, String)} for details.\n      */\n     public static String sha512Crypt(byte[] keyBytes) throws Exception {\n \n     /**\n      * Generates a libc6 crypt() compatible \"$6$\" hash value.\n-     *\n+     * <p>\n      * See {@link Crypt#crypt(String, String)} for details.\n      */\n     public static String sha512Crypt(byte[] keyBytes, String salt) throws Exception {\n--- a/src/main/java/org/apache/commons/codec/digest/UnixCrypt.java\n+++ b/src/main/java/org/apache/commons/codec/digest/UnixCrypt.java\n /**\n  * Unix crypt(3) algorithm implementation.\n  *\n- * This class only implements the traditional 56 bit DES based algorithm. Please\n+ * <p>This class only implements the traditional 56 bit DES based algorithm. Please\n  * use DigestUtils.crypt() for a method that distinguishes between all the\n- * algorithms supported in the current glibc's crypt().\n- *\n- * The Java implementation was taken from the JetSpeed Portal project (see\n- * org.apache.jetspeed.services.security.ldap.UnixCrypt).\n- *\n- * This class is slightly incompatible if the given salt contains characters\n- * that are not part of the allowed range [a-zA-Z0-9./].\n+ * algorithms supported in the current glibc's crypt().</p>\n+ *\n+ * <p>The Java implementation was taken from the JetSpeed Portal project (see\n+ * org.apache.jetspeed.services.security.ldap.UnixCrypt).</p>\n+ *\n+ * <p>This class is slightly incompatible if the given salt contains characters\n+ * that are not part of the allowed range [a-zA-Z0-9./].</p>\n  *\n  * <p>This class is immutable and thread-safe.</p>\n  *\n \n     /**\n      * Generates a crypt(3) compatible hash using the DES algorithm.\n-     *\n+     * <p>\n      * As no salt is given, a random one will be used.\n      *\n-     * @param original Plaintext password\n-     *\n-     * @return A 13 character string starting with the salt string.\n+     * @param original\n+     *             plaintext password\n+     * @return a 13 character string starting with the salt string\n      */\n     public static String crypt(byte[] original) {\n         return crypt(original, null);\n \n     /**\n      * Generates a crypt(3) compatible hash using the DES algorithm.\n-     *\n+     * <p>\n      * Using unspecified characters as salt results incompatible hash values.\n      *\n-     * @param original Plaintext password\n-     *\n-     * @param salt A two character string drawn from [a-zA-Z0-9./] or null for a\n-     * random one.\n-     *\n-     * @return A 13 character string starting with the salt string.\n+     * @param original\n+     *             plaintext password\n+     * @param salt\n+     *             a two character string drawn from [a-zA-Z0-9./] or null for a random one\n+     * @return a 13 character string starting with the salt string\n      */\n     public static String crypt(byte[] original, String salt) {\n         if (salt == null) {\n \n     /**\n      * Generates a crypt(3) compatible hash using the DES algorithm.\n-     *\n+     * <p>\n      * As no salt is given, a random one is used.\n      *\n-     * @param original Plaintext password\n-     *\n-     * @return A 13 character string starting with the salt string.\n+     * @param original\n+     *             plaintext password\n+     * @return a 13 character string starting with the salt string\n      */\n     public static String crypt(String original) throws Exception {\n         return crypt(original.getBytes(Charsets.UTF_8));\n     /**\n      * Generates a crypt(3) compatible hash using the DES algorithm.\n      *\n-     * @param original Plaintext password\n-     * @param salt A two character string drawn from [a-zA-Z0-9./] or null for a\n-     * random one.\n-     * @return A 13 character string starting with the salt string.\n+     * @param original\n+     *             plaintext password\n+     * @param salt\n+     *             a two character string drawn from [a-zA-Z0-9./] or null for a random one\n+     * @return a 13 character string starting with the salt string\n      */\n     public static String crypt(String original, String salt) throws Exception {\n         return crypt(original.getBytes(Charsets.UTF_8), salt);", "timestamp": 1345229046, "metainfo": ""}