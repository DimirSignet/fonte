{"sha": "2ae03e1633ec0a79761b215e8eae2574106bec99", "log": "Reduce deprecation warning noise in test cases  ", "commit": "\n--- a/src/test/java/org/apache/commons/codec/CharsetsTest.java\n+++ b/src/test/java/org/apache/commons/codec/CharsetsTest.java\n  *\n  * @version $Id: CharEncodingTest.java 1298985 2012-03-09 19:12:49Z ggregory $\n  */\n+@SuppressWarnings(\"deprecation\") // TODO remove when Java 7 is minimum and Charsets constants can be replaced\n public class CharsetsTest {\n \n     @Test\n--- a/src/test/java/org/apache/commons/codec/binary/Base32Test.java\n+++ b/src/test/java/org/apache/commons/codec/binary/Base32Test.java\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.fail;\n \n+import java.nio.charset.Charset;\n import java.util.Arrays;\n \n import org.apache.commons.codec.Charsets;\n import org.junit.Test;\n \n public class Base32Test {\n+\n+    @SuppressWarnings(\"deprecation\") // TODO remove when Java 7 is minimum and Charsets constants can be replaced\n+    private static final Charset CHARSET_UTF8 = Charsets.UTF_8;\n \n     private static final String [][] BASE32_TEST_CASES = { // RFC 4648\n         {\"\"       ,\"\"},\n     public void testBase32Samples() throws Exception {\n         final Base32 codec = new Base32();\n         for (final String[] element : BASE32_TEST_CASES) {\n-                assertEquals(element[1], codec.encodeAsString(element[0].getBytes(Charsets.UTF_8)));\n+                assertEquals(element[1], codec.encodeAsString(element[0].getBytes(CHARSET_UTF8)));\n         }\n     }\n \n     public void testBase32HexSamples() throws Exception {\n         final Base32 codec = new Base32(true);\n         for (final String[] element : BASE32HEX_TEST_CASES) {\n-                assertEquals(element[1], codec.encodeAsString(element[0].getBytes(Charsets.UTF_8)));\n+                assertEquals(element[1], codec.encodeAsString(element[0].getBytes(CHARSET_UTF8)));\n         }\n     }\n \n     public void testBase32Chunked () throws Exception {\n         final Base32 codec = new Base32(20);\n         for (final String[] element : BASE32_TEST_CASES_CHUNKED) {\n-                assertEquals(element[1], codec.encodeAsString(element[0].getBytes(Charsets.UTF_8)));\n+                assertEquals(element[1], codec.encodeAsString(element[0].getBytes(CHARSET_UTF8)));\n         }\n     }\n \n         final Base32 codec = new Base32((byte)0x25); // '%' <=> 0x25\n \n         for (final String[] element : BASE32_PAD_TEST_CASES) {\n-                assertEquals(element[1], codec.encodeAsString(element[0].getBytes(Charsets.UTF_8)));\n+                assertEquals(element[1], codec.encodeAsString(element[0].getBytes(CHARSET_UTF8)));\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java\n+++ b/src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java\n         }\n     }\n \n+    @SuppressWarnings(\"deprecation\") // TODO remove when Java 7 is minimum and Charsets constants can be replaced\n     private static byte[] utf8(final String s) {\n \n         // We would use commons-codec-1.4.jar own utility method for this, but we\n--- a/src/test/java/org/apache/commons/codec/binary/Base64Test.java\n+++ b/src/test/java/org/apache/commons/codec/binary/Base64Test.java\n import static org.junit.Assert.fail;\n \n import java.math.BigInteger;\n+import java.nio.charset.Charset;\n import java.util.Arrays;\n import java.util.Random;\n \n  * @version $Id$\n  */\n public class Base64Test {\n+\n+    @SuppressWarnings(\"deprecation\") // TODO remove when Java 7 is minimum and Charsets constants can be replaced\n+    private static final Charset CHARSET_UTF8 = Charsets.UTF_8;\n \n     private final Random random = new Random();\n \n         final BigInteger bigInt1 = new BigInteger(\"85739377120809420210425962799\" + \"0318636601332086981\");\n \n         assertEquals(encodedInt1, new String(Base64.encodeInteger(bigInt1)));\n-        assertEquals(bigInt1, Base64.decodeInteger(encodedInt1.getBytes(Charsets.UTF_8)));\n+        assertEquals(bigInt1, Base64.decodeInteger(encodedInt1.getBytes(CHARSET_UTF8)));\n     }\n \n     @Test\n         final BigInteger bigInt2 = new BigInteger(\"13936727572861167254666467268\" + \"91466679477132949611\");\n \n         assertEquals(encodedInt2, new String(Base64.encodeInteger(bigInt2)));\n-        assertEquals(bigInt2, Base64.decodeInteger(encodedInt2.getBytes(Charsets.UTF_8)));\n+        assertEquals(bigInt2, Base64.decodeInteger(encodedInt2.getBytes(CHARSET_UTF8)));\n     }\n \n     @Test\n             + \"4495062430572478766856090958495998158114332651671116876320938126\");\n \n         assertEquals(encodedInt3, new String(Base64.encodeInteger(bigInt3)));\n-        assertEquals(bigInt3, Base64.decodeInteger(encodedInt3.getBytes(Charsets.UTF_8)));\n+        assertEquals(bigInt3, Base64.decodeInteger(encodedInt3.getBytes(CHARSET_UTF8)));\n     }\n \n     @Test\n             + \"53542091716518238707344493641683483917\");\n \n         assertEquals(encodedInt4, new String(Base64.encodeInteger(bigInt4)));\n-        assertEquals(bigInt4, Base64.decodeInteger(encodedInt4.getBytes(Charsets.UTF_8)));\n+        assertEquals(bigInt4, Base64.decodeInteger(encodedInt4.getBytes(CHARSET_UTF8)));\n     }\n \n     @Test\n      */\n     @Test\n     public void testDecodePadMarkerIndex2() {\n-        assertEquals(\"A\", new String(Base64.decodeBase64(\"QQ==\".getBytes(Charsets.UTF_8))));\n+        assertEquals(\"A\", new String(Base64.decodeBase64(\"QQ==\".getBytes(CHARSET_UTF8))));\n     }\n \n     /**\n      */\n     @Test\n     public void testDecodePadMarkerIndex3() {\n-        assertEquals(\"AA\", new String(Base64.decodeBase64(\"QUE=\".getBytes(Charsets.UTF_8))));\n-        assertEquals(\"AAA\", new String(Base64.decodeBase64(\"QUFB\".getBytes(Charsets.UTF_8))));\n+        assertEquals(\"AA\", new String(Base64.decodeBase64(\"QUE=\".getBytes(CHARSET_UTF8))));\n+        assertEquals(\"AAA\", new String(Base64.decodeBase64(\"QUFB\".getBytes(CHARSET_UTF8))));\n     }\n \n     @Test\n     public void testDecodePadOnly() {\n-        assertEquals(0, Base64.decodeBase64(\"====\".getBytes(Charsets.UTF_8)).length);\n-        assertEquals(\"\", new String(Base64.decodeBase64(\"====\".getBytes(Charsets.UTF_8))));\n+        assertEquals(0, Base64.decodeBase64(\"====\".getBytes(CHARSET_UTF8)).length);\n+        assertEquals(\"\", new String(Base64.decodeBase64(\"====\".getBytes(CHARSET_UTF8))));\n         // Test truncated padding\n-        assertEquals(0, Base64.decodeBase64(\"===\".getBytes(Charsets.UTF_8)).length);\n-        assertEquals(0, Base64.decodeBase64(\"==\".getBytes(Charsets.UTF_8)).length);\n-        assertEquals(0, Base64.decodeBase64(\"=\".getBytes(Charsets.UTF_8)).length);\n-        assertEquals(0, Base64.decodeBase64(\"\".getBytes(Charsets.UTF_8)).length);\n+        assertEquals(0, Base64.decodeBase64(\"===\".getBytes(CHARSET_UTF8)).length);\n+        assertEquals(0, Base64.decodeBase64(\"==\".getBytes(CHARSET_UTF8)).length);\n+        assertEquals(0, Base64.decodeBase64(\"=\".getBytes(CHARSET_UTF8)).length);\n+        assertEquals(0, Base64.decodeBase64(\"\".getBytes(CHARSET_UTF8)).length);\n     }\n \n     @Test\n     public void testDecodePadOnlyChunked() {\n-        assertEquals(0, Base64.decodeBase64(\"====\\n\".getBytes(Charsets.UTF_8)).length);\n-        assertEquals(\"\", new String(Base64.decodeBase64(\"====\\n\".getBytes(Charsets.UTF_8))));\n+        assertEquals(0, Base64.decodeBase64(\"====\\n\".getBytes(CHARSET_UTF8)).length);\n+        assertEquals(\"\", new String(Base64.decodeBase64(\"====\\n\".getBytes(CHARSET_UTF8))));\n         // Test truncated padding\n-        assertEquals(0, Base64.decodeBase64(\"===\\n\".getBytes(Charsets.UTF_8)).length);\n-        assertEquals(0, Base64.decodeBase64(\"==\\n\".getBytes(Charsets.UTF_8)).length);\n-        assertEquals(0, Base64.decodeBase64(\"=\\n\".getBytes(Charsets.UTF_8)).length);\n-        assertEquals(0, Base64.decodeBase64(\"\\n\".getBytes(Charsets.UTF_8)).length);\n+        assertEquals(0, Base64.decodeBase64(\"===\\n\".getBytes(CHARSET_UTF8)).length);\n+        assertEquals(0, Base64.decodeBase64(\"==\\n\".getBytes(CHARSET_UTF8)).length);\n+        assertEquals(0, Base64.decodeBase64(\"=\\n\".getBytes(CHARSET_UTF8)).length);\n+        assertEquals(0, Base64.decodeBase64(\"\\n\".getBytes(CHARSET_UTF8)).length);\n     }\n \n     @Test\n \n         final String orig = \"I am a late night coder.\";\n \n-        final byte[] encodedArray = Base64.encodeBase64(orig.getBytes(Charsets.UTF_8));\n+        final byte[] encodedArray = Base64.encodeBase64(orig.getBytes(CHARSET_UTF8));\n         final StringBuilder intermediate = new StringBuilder(new String(encodedArray));\n \n         intermediate.insert(2, ' ');\n         intermediate.insert(10, '\\r');\n         intermediate.insert(15, '\\n');\n \n-        final byte[] encodedWithWS = intermediate.toString().getBytes(Charsets.UTF_8);\n+        final byte[] encodedWithWS = intermediate.toString().getBytes(CHARSET_UTF8);\n         final byte[] decodedWithWS = Base64.decodeBase64(encodedWithWS);\n \n         final String dest = new String(decodedWithWS);\n     @Test\n     public void testIgnoringNonBase64InDecode() throws Exception {\n         assertEquals(\"The quick brown fox jumped over the lazy dogs.\", new String(Base64\n-                .decodeBase64(\"VGhlIH@$#$@%F1aWN@#@#@@rIGJyb3duIGZve\\n\\r\\t%#%#%#%CBqd##$#$W1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\".getBytes(Charsets.UTF_8))));\n+                .decodeBase64(\"VGhlIH@$#$@%F1aWN@#@#@@rIGJyb3duIGZve\\n\\r\\t%#%#%#%CBqd##$#$W1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\".getBytes(CHARSET_UTF8))));\n     }\n \n     @Test\n     @Test\n     public void testKnownDecodings() {\n         assertEquals(\"The quick brown fox jumped over the lazy dogs.\", new String(Base64\n-                .decodeBase64(\"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\".getBytes(Charsets.UTF_8))));\n+                .decodeBase64(\"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\".getBytes(CHARSET_UTF8))));\n         assertEquals(\"It was the best of times, it was the worst of times.\", new String(Base64\n-                .decodeBase64(\"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==\".getBytes(Charsets.UTF_8))));\n+                .decodeBase64(\"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==\".getBytes(CHARSET_UTF8))));\n         assertEquals(\"http://jakarta.apache.org/commmons\", new String(Base64\n-                .decodeBase64(\"aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==\".getBytes(Charsets.UTF_8))));\n+                .decodeBase64(\"aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==\".getBytes(CHARSET_UTF8))));\n         assertEquals(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\", new String(Base64\n-                .decodeBase64(\"QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==\".getBytes(Charsets.UTF_8))));\n+                .decodeBase64(\"QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==\".getBytes(CHARSET_UTF8))));\n         assertEquals(\"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\", new String(Base64.decodeBase64(\"eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0=\"\n-                .getBytes(Charsets.UTF_8))));\n-        assertEquals(\"xyzzy!\", new String(Base64.decodeBase64(\"eHl6enkh\".getBytes(Charsets.UTF_8))));\n+                .getBytes(CHARSET_UTF8))));\n+        assertEquals(\"xyzzy!\", new String(Base64.decodeBase64(\"eHl6enkh\".getBytes(CHARSET_UTF8))));\n     }\n \n     @Test\n     public void testKnownEncodings() {\n         assertEquals(\"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\", new String(Base64\n-                .encodeBase64(\"The quick brown fox jumped over the lazy dogs.\".getBytes(Charsets.UTF_8))));\n+                .encodeBase64(\"The quick brown fox jumped over the lazy dogs.\".getBytes(CHARSET_UTF8))));\n         assertEquals(\n                 \"YmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJs\\r\\nYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFo\\r\\nIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBi\\r\\nbGFoIGJsYWg=\\r\\n\",\n                 new String(\n                         Base64\n                                 .encodeBase64Chunked(\"blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah\"\n-                                        .getBytes(Charsets.UTF_8))));\n+                                        .getBytes(CHARSET_UTF8))));\n         assertEquals(\"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==\", new String(Base64\n-                .encodeBase64(\"It was the best of times, it was the worst of times.\".getBytes(Charsets.UTF_8))));\n+                .encodeBase64(\"It was the best of times, it was the worst of times.\".getBytes(CHARSET_UTF8))));\n         assertEquals(\"aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==\", new String(Base64\n-                .encodeBase64(\"http://jakarta.apache.org/commmons\".getBytes(Charsets.UTF_8))));\n+                .encodeBase64(\"http://jakarta.apache.org/commmons\".getBytes(CHARSET_UTF8))));\n         assertEquals(\"QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==\", new String(Base64\n-                .encodeBase64(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\".getBytes(Charsets.UTF_8))));\n+                .encodeBase64(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\".getBytes(CHARSET_UTF8))));\n         assertEquals(\"eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0=\", new String(Base64.encodeBase64(\"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\"\n-                .getBytes(Charsets.UTF_8))));\n-        assertEquals(\"eHl6enkh\", new String(Base64.encodeBase64(\"xyzzy!\".getBytes(Charsets.UTF_8))));\n+                .getBytes(CHARSET_UTF8))));\n+        assertEquals(\"eHl6enkh\", new String(Base64.encodeBase64(\"xyzzy!\".getBytes(CHARSET_UTF8))));\n     }\n \n     @Test\n     public void testObjectDecodeWithValidParameter() throws Exception {\n \n         final String original = \"Hello World!\";\n-        final Object o = Base64.encodeBase64(original.getBytes(Charsets.UTF_8));\n+        final Object o = Base64.encodeBase64(original.getBytes(CHARSET_UTF8));\n \n         final Base64 b64 = new Base64();\n         final Object oDecoded = b64.decode(o);\n     public void testObjectEncodeWithValidParameter() throws Exception {\n \n         final String original = \"Hello World!\";\n-        final Object origObj = original.getBytes(Charsets.UTF_8);\n+        final Object origObj = original.getBytes(CHARSET_UTF8);\n \n         final Base64 b64 = new Base64();\n         final Object oEncoded = b64.encode(origObj);\n     @Test\n     public void testObjectEncode() throws Exception {\n         final Base64 b64 = new Base64();\n-        assertEquals(\"SGVsbG8gV29ybGQ=\", new String(b64.encode(\"Hello World\".getBytes(Charsets.UTF_8))));\n+        assertEquals(\"SGVsbG8gV29ybGQ=\", new String(b64.encode(\"Hello World\".getBytes(CHARSET_UTF8))));\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java\n+++ b/src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.fail;\n \n+import java.nio.charset.Charset;\n+\n import org.apache.commons.codec.Charsets;\n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n  * @version $Id$\n  */\n public class BinaryCodecTest {\n+\n+    @SuppressWarnings(\"deprecation\") // TODO remove when Java 7 is minimum and Charsets constants can be replaced\n+    private static final Charset CHARSET_UTF8 = Charsets.UTF_8;\n+\n     /** mask with bit zero based index 0 raised */\n     private static final int BIT_0 = 0x01;\n \n         if (encodeMe == null) {\n             decoded = instance.decode((byte[]) null);\n         } else {\n-            decoded = (byte[]) instance.decode((Object) encodeMe.getBytes(Charsets.UTF_8));\n+            decoded = (byte[]) instance.decode((Object) encodeMe.getBytes(CHARSET_UTF8));\n         }\n         assertEquals(new String(bits), new String(decoded));\n         if (encodeMe == null) {\n     public void testDecodeByteArray() {\n         // With a single raw binary\n         byte[] bits = new byte[1];\n-        byte[] decoded = instance.decode(\"00000000\".getBytes(Charsets.UTF_8));\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0;\n-        decoded = instance.decode(\"00000001\".getBytes(Charsets.UTF_8));\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1;\n-        decoded = instance.decode(\"00000011\".getBytes(Charsets.UTF_8));\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1 | BIT_2;\n-        decoded = instance.decode(\"00000111\".getBytes(Charsets.UTF_8));\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n-        decoded = instance.decode(\"00001111\".getBytes(Charsets.UTF_8));\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n-        decoded = instance.decode(\"00011111\".getBytes(Charsets.UTF_8));\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n-        decoded = instance.decode(\"00111111\".getBytes(Charsets.UTF_8));\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n-        decoded = instance.decode(\"01111111\".getBytes(Charsets.UTF_8));\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = instance.decode(\"11111111\".getBytes(Charsets.UTF_8));\n+        byte[] decoded = instance.decode(\"00000000\".getBytes(CHARSET_UTF8));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0;\n+        decoded = instance.decode(\"00000001\".getBytes(CHARSET_UTF8));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1;\n+        decoded = instance.decode(\"00000011\".getBytes(CHARSET_UTF8));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2;\n+        decoded = instance.decode(\"00000111\".getBytes(CHARSET_UTF8));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n+        decoded = instance.decode(\"00001111\".getBytes(CHARSET_UTF8));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n+        decoded = instance.decode(\"00011111\".getBytes(CHARSET_UTF8));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n+        decoded = instance.decode(\"00111111\".getBytes(CHARSET_UTF8));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n+        decoded = instance.decode(\"01111111\".getBytes(CHARSET_UTF8));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = instance.decode(\"11111111\".getBytes(CHARSET_UTF8));\n         assertEquals(new String(bits), new String(decoded));\n         // With a two raw binaries\n         bits = new byte[2];\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = instance.decode(\"0000000011111111\".getBytes(Charsets.UTF_8));\n+        decoded = instance.decode(\"0000000011111111\".getBytes(CHARSET_UTF8));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = instance.decode(\"0000000111111111\".getBytes(Charsets.UTF_8));\n+        decoded = instance.decode(\"0000000111111111\".getBytes(CHARSET_UTF8));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = instance.decode(\"0000001111111111\".getBytes(Charsets.UTF_8));\n+        decoded = instance.decode(\"0000001111111111\".getBytes(CHARSET_UTF8));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1 | BIT_2;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = instance.decode(\"0000011111111111\".getBytes(Charsets.UTF_8));\n+        decoded = instance.decode(\"0000011111111111\".getBytes(CHARSET_UTF8));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = instance.decode(\"0000111111111111\".getBytes(Charsets.UTF_8));\n+        decoded = instance.decode(\"0000111111111111\".getBytes(CHARSET_UTF8));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = instance.decode(\"0001111111111111\".getBytes(Charsets.UTF_8));\n+        decoded = instance.decode(\"0001111111111111\".getBytes(CHARSET_UTF8));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = instance.decode(\"0011111111111111\".getBytes(Charsets.UTF_8));\n+        decoded = instance.decode(\"0011111111111111\".getBytes(CHARSET_UTF8));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = instance.decode(\"0111111111111111\".getBytes(Charsets.UTF_8));\n+        decoded = instance.decode(\"0111111111111111\".getBytes(CHARSET_UTF8));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = instance.decode(\"1111111111111111\".getBytes(Charsets.UTF_8));\n+        decoded = instance.decode(\"1111111111111111\".getBytes(CHARSET_UTF8));\n         assertEquals(new String(bits), new String(decoded));\n     }\n \n         assertEquals(0, BinaryCodec.fromAscii(new byte[0]).length);\n         // With a single raw binary\n         byte[] bits = new byte[1];\n-        byte[] decoded = BinaryCodec.fromAscii(\"00000000\".getBytes(Charsets.UTF_8));\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0;\n-        decoded = BinaryCodec.fromAscii(\"00000001\".getBytes(Charsets.UTF_8));\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1;\n-        decoded = BinaryCodec.fromAscii(\"00000011\".getBytes(Charsets.UTF_8));\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1 | BIT_2;\n-        decoded = BinaryCodec.fromAscii(\"00000111\".getBytes(Charsets.UTF_8));\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n-        decoded = BinaryCodec.fromAscii(\"00001111\".getBytes(Charsets.UTF_8));\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n-        decoded = BinaryCodec.fromAscii(\"00011111\".getBytes(Charsets.UTF_8));\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n-        decoded = BinaryCodec.fromAscii(\"00111111\".getBytes(Charsets.UTF_8));\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n-        decoded = BinaryCodec.fromAscii(\"01111111\".getBytes(Charsets.UTF_8));\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = BinaryCodec.fromAscii(\"11111111\".getBytes(Charsets.UTF_8));\n+        byte[] decoded = BinaryCodec.fromAscii(\"00000000\".getBytes(CHARSET_UTF8));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0;\n+        decoded = BinaryCodec.fromAscii(\"00000001\".getBytes(CHARSET_UTF8));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1;\n+        decoded = BinaryCodec.fromAscii(\"00000011\".getBytes(CHARSET_UTF8));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2;\n+        decoded = BinaryCodec.fromAscii(\"00000111\".getBytes(CHARSET_UTF8));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n+        decoded = BinaryCodec.fromAscii(\"00001111\".getBytes(CHARSET_UTF8));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n+        decoded = BinaryCodec.fromAscii(\"00011111\".getBytes(CHARSET_UTF8));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n+        decoded = BinaryCodec.fromAscii(\"00111111\".getBytes(CHARSET_UTF8));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n+        decoded = BinaryCodec.fromAscii(\"01111111\".getBytes(CHARSET_UTF8));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = BinaryCodec.fromAscii(\"11111111\".getBytes(CHARSET_UTF8));\n         assertEquals(new String(bits), new String(decoded));\n         // With a two raw binaries\n         bits = new byte[2];\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = BinaryCodec.fromAscii(\"0000000011111111\".getBytes(Charsets.UTF_8));\n+        decoded = BinaryCodec.fromAscii(\"0000000011111111\".getBytes(CHARSET_UTF8));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = BinaryCodec.fromAscii(\"0000000111111111\".getBytes(Charsets.UTF_8));\n+        decoded = BinaryCodec.fromAscii(\"0000000111111111\".getBytes(CHARSET_UTF8));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = BinaryCodec.fromAscii(\"0000001111111111\".getBytes(Charsets.UTF_8));\n+        decoded = BinaryCodec.fromAscii(\"0000001111111111\".getBytes(CHARSET_UTF8));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1 | BIT_2;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = BinaryCodec.fromAscii(\"0000011111111111\".getBytes(Charsets.UTF_8));\n+        decoded = BinaryCodec.fromAscii(\"0000011111111111\".getBytes(CHARSET_UTF8));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = BinaryCodec.fromAscii(\"0000111111111111\".getBytes(Charsets.UTF_8));\n+        decoded = BinaryCodec.fromAscii(\"0000111111111111\".getBytes(CHARSET_UTF8));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = BinaryCodec.fromAscii(\"0001111111111111\".getBytes(Charsets.UTF_8));\n+        decoded = BinaryCodec.fromAscii(\"0001111111111111\".getBytes(CHARSET_UTF8));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = BinaryCodec.fromAscii(\"0011111111111111\".getBytes(Charsets.UTF_8));\n+        decoded = BinaryCodec.fromAscii(\"0011111111111111\".getBytes(CHARSET_UTF8));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = BinaryCodec.fromAscii(\"0111111111111111\".getBytes(Charsets.UTF_8));\n+        decoded = BinaryCodec.fromAscii(\"0111111111111111\".getBytes(CHARSET_UTF8));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = BinaryCodec.fromAscii(\"1111111111111111\".getBytes(Charsets.UTF_8));\n+        decoded = BinaryCodec.fromAscii(\"1111111111111111\".getBytes(CHARSET_UTF8));\n         assertEquals(new String(bits), new String(decoded));\n         assertEquals(0, BinaryCodec.fromAscii((byte[]) null).length);\n     }\n--- a/src/test/java/org/apache/commons/codec/binary/HexTest.java\n+++ b/src/test/java/org/apache/commons/codec/binary/HexTest.java\n     }\n \n     @Test\n+    @SuppressWarnings(\"deprecation\") // TODO remove when Java 7 is minimum and Charsets constants can be replaced\n     public void testGetCharset() throws UnsupportedEncodingException, DecoderException {\n         Assert.assertEquals(Charsets.UTF_8, new Hex(Charsets.UTF_8).getCharset());\n     }\n \n     @Test\n+    @SuppressWarnings(\"deprecation\") // TODO remove when Java 7 is minimum and Charsets constants can be replaced\n     public void testGetCharsetName() throws UnsupportedEncodingException, DecoderException {\n         Assert.assertEquals(Charsets.UTF_8.name(), new Hex(Charsets.UTF_8).getCharsetName());\n     }\n--- a/src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java\n+++ b/src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java\n     }\n \n     @Test\n+    @SuppressWarnings(\"deprecation\") // TODO remove when Java 7 is minimum and Charsets constants can be replaced\n     public void testApr1CryptBytes() {\n         // random salt\n         final byte[] keyBytes = new byte[] { '!', 'b', 'c', '.' };\n--- a/src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java\n+++ b/src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java\n     }\n \n     @Test\n+    @SuppressWarnings(\"deprecation\") // TODO remove when Java 7 is minimum and Charsets constants can be replaced\n     public void testMd5CryptBytes() {\n         // An empty Bytearray equals an empty String\n         assertEquals(\"$1$foo$9mS5ExwgIECGE5YKlD5o91\", Crypt.crypt(new byte[0], \"$1$foo\"));\n--- a/src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java\n+++ b/src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java\n     }\n \n     @Test\n+    @SuppressWarnings(\"deprecation\") // TODO remove when Java 7 is minimum and Charsets constants can be replaced\n     public void testSha256CryptBytes() {\n         // An empty Bytearray equals an empty String\n         assertEquals(\"$5$foo$Fq9CX624QIfnCAmlGiPKLlAasdacKCRxZztPoeo7o0B\", Crypt.crypt(new byte[0], \"$5$foo\"));\n     }\n \n     @Test\n+    @SuppressWarnings(\"deprecation\") // TODO remove when Java 7 is minimum and Charsets constants can be replaced\n     public void testSha2CryptRounds() {\n         // minimum rounds?\n         assertEquals(\"$5$rounds=1000$abcd$b8MCU4GEeZIekOy5ahQ8EWfT330hvYGVeDYkBxXBva.\", Sha2Crypt.sha256Crypt(\"secret\".getBytes(Charsets.UTF_8), \"$5$rounds=50$abcd$\"));\n--- a/src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java\n+++ b/src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java\n     }\n \n     @Test\n+    @SuppressWarnings(\"deprecation\") // TODO remove when Java 7 is minimum and Charsets constants can be replaced\n     public void testSha512CryptBytes() {\n         // An empty Bytearray equals an empty String\n         assertEquals(\"$6$foo$Nywkte7LPWjaJhWjNeGJN.dFdY3pN1wYlGifyRLYOVlGS9EMSiZaDDe/BGSOYQ327q9.32I4UqQ5odsqvsBLX/\", Crypt.crypt(new byte[0], \"$6$foo\"));\n     }\n \n     @Test\n+    @SuppressWarnings(\"deprecation\") // TODO remove when Java 7 is minimum and Charsets constants can be replaced\n     public void testSha2CryptRounds() {\n         // minimum rounds?\n         assertEquals(\"$5$rounds=1000$abcd$b8MCU4GEeZIekOy5ahQ8EWfT330hvYGVeDYkBxXBva.\", Sha2Crypt.sha256Crypt(\"secret\".getBytes(Charsets.UTF_8), \"$5$rounds=50$abcd$\"));\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n+    @SuppressWarnings(\"deprecation\") // TODO remove when Java 7 is minimum and Charsets constants can be replaced\n     public void testSha2CryptWrongSalt() {\n         Sha2Crypt.sha512Crypt(\"secret\".getBytes(Charsets.UTF_8), \"xx\");\n     }\n--- a/src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java\n+++ b/src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java\n     }\n \n     @Test\n+    @SuppressWarnings(\"deprecation\") // TODO remove when Java 7 is minimum and Charsets constants can be replaced\n     public void testUnixCryptBytes() {\n         // An empty Bytearray equals an empty String\n         assertEquals(\"12UFlHxel6uMM\", Crypt.crypt(new byte[0], \"12\"));\n--- a/src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java\n+++ b/src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java\n     public void testEncodeUrlWithNullBitSet() throws Exception {\n         final QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n         final String plain = \"1+1 = 2\";\n+        @SuppressWarnings(\"deprecation\") // TODO remove when Java 7 is minimum and Charsets constants can be replaced\n         final String encoded = new String(QuotedPrintableCodec.\n             encodeQuotedPrintable(null, plain.getBytes(Charsets.UTF_8)));\n         assertEquals(\"Basic quoted-printable encoding test\",\n         assertEquals(\"Basic quoted-printable encoding test\",\n             \"1+1 =3D 2\", encoded);\n \n+        @SuppressWarnings(\"deprecation\") // TODO remove when Java 7 is minimum and Charsets constants can be replaced\n         final byte[] plainBA = plain.getBytes(Charsets.UTF_8);\n         final byte[] encodedBA = (byte[]) qpcodec.encode((Object) plainBA);\n         encoded = new String(encodedBA);\n         assertEquals(\"Basic quoted-printable decoding test\",\n             \"1+1 = 2\", decoded);\n \n+        @SuppressWarnings(\"deprecation\") // TODO remove when Java 7 is minimum and Charsets constants can be replaced\n         final byte[] plainBA = plain.getBytes(Charsets.UTF_8);\n         final byte[] decodedBA = (byte[]) qpcodec.decode((Object) plainBA);\n         decoded = new String(decodedBA);\n--- a/src/test/java/org/apache/commons/codec/net/URLCodecTest.java\n+++ b/src/test/java/org/apache/commons/codec/net/URLCodecTest.java\n     public void testEncodeUrlWithNullBitSet() throws Exception {\n         final URLCodec urlCodec = new URLCodec();\n         final String plain = \"Hello there!\";\n+        @SuppressWarnings(\"deprecation\") // TODO remove when Java 7 is minimum and Charsets constants can be replaced\n         final String encoded = new String( URLCodec.encodeUrl(null, plain.getBytes(Charsets.UTF_8)));\n         assertEquals(\"Basic URL encoding test\",\n             \"Hello+there%21\", encoded);\n         assertEquals(\"Basic URL encoding test\",\n             \"Hello+there%21\", encoded);\n \n+        @SuppressWarnings(\"deprecation\") // TODO remove when Java 7 is minimum and Charsets constants can be replaced\n         final byte[] plainBA = plain.getBytes(Charsets.UTF_8);\n         final byte[] encodedBA = (byte[]) urlCodec.encode((Object) plainBA);\n         encoded = new String(encodedBA);\n         assertEquals(\"Basic URL decoding test\",\n             \"Hello there!\", decoded);\n \n+        @SuppressWarnings(\"deprecation\") // TODO remove when Java 7 is minimum and Charsets constants can be replaced\n         final byte[] plainBA = plain.getBytes(Charsets.UTF_8);\n         final byte[] decodedBA = (byte[]) urlCodec.decode((Object) plainBA);\n         decoded = new String(decodedBA);", "timestamp": 1433427740, "metainfo": ""}