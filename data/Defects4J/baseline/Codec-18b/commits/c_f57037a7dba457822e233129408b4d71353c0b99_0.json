{"sha": "f57037a7dba457822e233129408b4d71353c0b99", "log": "PR: Bugzilla Bug 28002 [Codec][Patch] RFC 1522 codecs (Q-codec & B-codec) Submitted by:\tOleg Kalnichevski Reviewed by:\tGary Gregory   ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/codec/net/BCodecTest.java\n+/*\n+ * Copyright 2001-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.codec.net;\n+\n+import org.apache.commons.codec.DecoderException;\n+import org.apache.commons.codec.EncoderException;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Quoted-printable codec test cases\n+ * \n+ * @author <a href=\"mailto:oleg@ural.ru\">Oleg Kalnichevski</a>\n+ */\n+public class BCodecTest extends TestCase {\n+\n+    static final int SWISS_GERMAN_STUFF_UNICODE[] =\n+        { 0x47, 0x72, 0xFC, 0x65, 0x7A, 0x69, 0x5F, 0x7A, 0xE4, 0x6D, 0xE4 };\n+\n+    static final int RUSSIAN_STUFF_UNICODE[] =\n+        { 0x412, 0x441, 0x435, 0x43C, 0x5F, 0x43F, 0x440, 0x438, 0x432, 0x435, 0x442 };\n+\n+    public BCodecTest(String name) {\n+        super(name);\n+    }\n+\n+    private String constructString(int[] unicodeChars) {\n+        StringBuffer buffer = new StringBuffer();\n+        if (unicodeChars != null) {\n+            for (int i = 0; i < unicodeChars.length; i++) {\n+                buffer.append((char) unicodeChars[i]);\n+            }\n+        }\n+        return buffer.toString();\n+    }\n+\n+    public void testUTF8RoundTrip() throws Exception {\n+\n+        String ru_msg = constructString(RUSSIAN_STUFF_UNICODE);\n+        String ch_msg = constructString(SWISS_GERMAN_STUFF_UNICODE);\n+\n+        BCodec bcodec = new BCodec(\"UTF-8\");\n+\n+        assertEquals(\"=?UTF-8?B?0JLRgdC10Lxf0L/RgNC40LLQtdGC?=\", bcodec.encode(ru_msg));\n+        assertEquals(\"=?UTF-8?B?R3LDvGV6aV96w6Rtw6Q=?=\", bcodec.encode(ch_msg));\n+\n+        assertEquals(ru_msg, bcodec.decode(bcodec.encode(ru_msg)));\n+        assertEquals(ch_msg, bcodec.decode(bcodec.encode(ch_msg)));\n+    }\n+\n+    public void testBasicEncodeDecode() throws Exception {\n+        BCodec bcodec = new BCodec();\n+        String plain = \"Hello there\";\n+        String encoded = bcodec.encode(plain);\n+        assertEquals(\"Basic B encoding test\", \"=?UTF-8?B?SGVsbG8gdGhlcmU=?=\", encoded);\n+        assertEquals(\"Basic B decoding test\", plain, bcodec.decode(encoded));\n+    }\n+\n+    public void testEncodeDecodeNull() throws Exception {\n+        BCodec bcodec = new BCodec();\n+        assertNull(\"Null string B encoding test\", bcodec.encode((String) null));\n+        assertNull(\"Null string B decoding test\", bcodec.decode((String) null));\n+    }\n+\n+    public void testDecodeInvalid() throws Exception {\n+        BCodec bcodec = new BCodec();\n+        try {\n+            bcodec.decode(\"whatever\");\n+            fail(\"DecoderException should have been thrown\");\n+        } catch (DecoderException e) {\n+            // Expected. Move on\n+        }\n+        try {\n+            bcodec.decode(\"=?UTF-8?B?stuff\");\n+            fail(\"DecoderException should have been thrown\");\n+        } catch (DecoderException e) {\n+            // Expected. Move on\n+        }\n+        try {\n+            bcodec.decode(\"=??B?stuff?=\");\n+            fail(\"DecoderException should have been thrown\");\n+        } catch (DecoderException e) {\n+            // Expected. Move on\n+        }\n+        try {\n+            bcodec.decode(\"=?UTF-8??stuff?=\");\n+            fail(\"DecoderException should have been thrown\");\n+        } catch (DecoderException e) {\n+            // Expected. Move on\n+        }\n+        try {\n+            bcodec.decode(\"=?UTF-8?W?stuff?=\");\n+            fail(\"DecoderException should have been thrown\");\n+        } catch (DecoderException e) {\n+            // Expected. Move on\n+        }\n+    }\n+\n+    public void testEncodeStringWithNull() throws Exception {\n+        BCodec bcodec = new BCodec();\n+        String test = null;\n+        String result = bcodec.encode(test, \"charset\");\n+        assertEquals(\"Result should be null\", null, result);\n+    }\n+\n+    public void testDecodeStringWithNull() throws Exception {\n+        BCodec bcodec = new BCodec();\n+        String test = null;\n+        String result = bcodec.decode(test);\n+        assertEquals(\"Result should be null\", null, result);\n+    }\n+\n+    public void testEncodeObjects() throws Exception {\n+        BCodec bcodec = new BCodec();\n+        String plain = \"what not\";\n+        String encoded = (String) bcodec.encode((Object) plain);\n+\n+        assertEquals(\"Basic B encoding test\", \"=?UTF-8?B?d2hhdCBub3Q=?=\", encoded);\n+\n+        Object result = bcodec.encode((Object) null);\n+        assertEquals(\"Encoding a null Object should return null\", null, result);\n+\n+        try {\n+            Object dObj = new Double(3.0);\n+            bcodec.encode(dObj);\n+            fail(\"Trying to url encode a Double object should cause an exception.\");\n+        } catch (EncoderException ee) {\n+            // Exception expected, test segment passes.\n+        }\n+    }\n+\n+    public void testInvalidEncoding() {\n+        BCodec bcodec = new BCodec(\"NONSENSE\");\n+        try {\n+            bcodec.encode(\"Hello there!\");\n+            fail(\"We set the encoding to a bogus NONSENSE value, this shouldn't have worked.\");\n+        } catch (EncoderException ee) {\n+            // Exception expected, test segment passes.\n+        }\n+        try {\n+            bcodec.decode(\"=?NONSENSE?Q?Hello there!?=\");\n+            fail(\"We set the encoding to a bogus NONSENSE value, this shouldn't have worked.\");\n+        } catch (DecoderException ee) {\n+            // Exception expected, test segment passes.\n+        }\n+    }\n+\n+    public void testDecodeObjects() throws Exception {\n+        BCodec bcodec = new BCodec();\n+        String decoded = \"=?UTF-8?B?d2hhdCBub3Q=?=\";\n+        String plain = (String) bcodec.decode((Object) decoded);\n+        assertEquals(\"Basic B decoding test\", \"what not\", plain);\n+\n+        Object result = bcodec.decode((Object) null);\n+        assertEquals(\"Decoding a null Object should return null\", null, result);\n+\n+        try {\n+            Object dObj = new Double(3.0);\n+            bcodec.decode(dObj);\n+            fail(\"Trying to url encode a Double object should cause an exception.\");\n+        } catch (DecoderException ee) {\n+            // Exception expected, test segment passes.\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/codec/net/QCodecTest.java\n+/*\n+ * Copyright 2001-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */ \n+\n+\n+package org.apache.commons.codec.net;\n+\n+import org.apache.commons.codec.DecoderException;\n+import org.apache.commons.codec.EncoderException;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Quoted-printable codec test cases\n+ * \n+ * @author <a href=\"mailto:oleg@ural.ru\">Oleg Kalnichevski</a>\n+ */\n+public class QCodecTest extends TestCase {\n+    \n+    static final int SWISS_GERMAN_STUFF_UNICODE [] = {\n+        0x47, 0x72, 0xFC, 0x65, 0x7A, 0x69, 0x5F, 0x7A, 0xE4, 0x6D, 0xE4\n+    };\n+    \n+    static final int RUSSIAN_STUFF_UNICODE [] = {\n+        0x412, 0x441, 0x435, 0x43C, 0x5F, 0x43F, 0x440, 0x438, \n+        0x432, 0x435, 0x442 \n+    }; \n+\n+    public QCodecTest(String name) {\n+        super(name);\n+    }\n+\n+    private String constructString(int [] unicodeChars) {\n+        StringBuffer buffer = new StringBuffer();\n+        if (unicodeChars != null) {\n+            for (int i = 0; i < unicodeChars.length; i++) {\n+                buffer.append((char)unicodeChars[i]); \n+            }\n+        }\n+        return buffer.toString();\n+    }\n+\n+    public void testUTF8RoundTrip() throws Exception {\n+\n+        String ru_msg = constructString(RUSSIAN_STUFF_UNICODE); \n+        String ch_msg = constructString(SWISS_GERMAN_STUFF_UNICODE); \n+        \n+        QCodec qcodec = new QCodec(\"UTF-8\");\n+        \n+        assertEquals(\n+            \"=?UTF-8?Q?=D0=92=D1=81=D0=B5=D0=BC=5F=D0=BF=D1=80=D0=B8=D0=B2=D0=B5=D1=82?=\", \n+        qcodec.encode(ru_msg)\n+        );\n+        assertEquals(\"=?UTF-8?Q?Gr=C3=BCezi=5Fz=C3=A4m=C3=A4?=\", qcodec.encode(ch_msg));\n+        \n+        assertEquals(ru_msg, qcodec.decode(qcodec.encode(ru_msg)));\n+        assertEquals(ch_msg, qcodec.decode(qcodec.encode(ch_msg)));\n+    }\n+\n+\n+    public void testBasicEncodeDecode() throws Exception {\n+        QCodec qcodec = new QCodec();\n+        String plain = \"= Hello there =\\r\\n\";\n+        String encoded = qcodec.encode(plain);\n+        assertEquals(\"Basic Q encoding test\", \n+            \"=?UTF-8?Q?=3D Hello there =3D=0D=0A?=\", encoded);\n+        assertEquals(\"Basic Q decoding test\", \n+            plain, qcodec.decode(encoded));\n+    }\n+\n+    public void testUnsafeEncodeDecode() throws Exception {\n+        QCodec qcodec = new QCodec();\n+        String plain = \"?_=\\r\\n\";\n+        String encoded = qcodec.encode(plain);\n+        assertEquals(\"Unsafe chars Q encoding test\", \n+            \"=?UTF-8?Q?=3F=5F=3D=0D=0A?=\", encoded);\n+        assertEquals(\"Unsafe chars Q decoding test\", \n+            plain, qcodec.decode(encoded));\n+    }\n+\n+    public void testEncodeDecodeNull() throws Exception {\n+        QCodec qcodec = new QCodec();\n+        assertNull(\"Null string Q encoding test\", \n+            qcodec.encode((String)null));\n+        assertNull(\"Null string Q decoding test\", \n+            qcodec.decode((String)null));\n+    }\n+\n+    public void testDecodeInvalid() throws Exception {\n+        QCodec qcodec = new QCodec();\n+        try {\n+            qcodec.decode(\"whatever\");\n+            fail(\"DecoderException should have been thrown\");\n+        } catch(DecoderException e) {\n+            // Expected. Move on\n+        }\n+        try {\n+            qcodec.decode(\"=?UTF-8?Q?stuff\");\n+            fail(\"DecoderException should have been thrown\");\n+        } catch(DecoderException e) {\n+            // Expected. Move on\n+        }\n+        try {\n+            qcodec.decode(\"=??Q?stuff?=\");\n+            fail(\"DecoderException should have been thrown\");\n+        } catch(DecoderException e) {\n+            // Expected. Move on\n+        }\n+        try {\n+            qcodec.decode(\"=?UTF-8??stuff?=\");\n+            fail(\"DecoderException should have been thrown\");\n+        } catch(DecoderException e) {\n+            // Expected. Move on\n+        }\n+        try {\n+            qcodec.decode(\"=?UTF-8?W?stuff?=\");\n+            fail(\"DecoderException should have been thrown\");\n+        } catch(DecoderException e) {\n+            // Expected. Move on\n+        }\n+    }\n+\n+    public void testEncodeStringWithNull() throws Exception {\n+        QCodec qcodec = new QCodec();\n+        String test = null;\n+        String result = qcodec.encode( test, \"charset\" );\n+        assertEquals(\"Result should be null\", null, result);\n+    }\n+\n+    public void testDecodeStringWithNull() throws Exception {\n+        QCodec qcodec = new QCodec();\n+        String test = null;\n+        String result = qcodec.decode( test );\n+        assertEquals(\"Result should be null\", null, result);\n+    }\n+    \n+\n+    public void testEncodeObjects() throws Exception {\n+        QCodec qcodec = new QCodec();\n+        String plain = \"1+1 = 2\";\n+        String encoded = (String) qcodec.encode((Object) plain);\n+        assertEquals(\"Basic Q encoding test\", \n+            \"=?UTF-8?Q?1+1 =3D 2?=\", encoded);\n+\n+        Object result = qcodec.encode((Object) null);\n+        assertEquals( \"Encoding a null Object should return null\", null, result);\n+        \n+        try {\n+            Object dObj = new Double(3.0);\n+            qcodec.encode( dObj );\n+            fail( \"Trying to url encode a Double object should cause an exception.\");\n+        } catch( EncoderException ee ) {\n+            // Exception expected, test segment passes.\n+        }\n+    }\n+    \n+\n+    public void testInvalidEncoding() {\n+        QCodec qcodec = new QCodec(\"NONSENSE\");\n+            try {\n+               qcodec.encode(\"Hello there!\");\n+                fail( \"We set the encoding to a bogus NONSENSE vlaue, this shouldn't have worked.\");\n+            } catch( EncoderException ee ) {\n+                // Exception expected, test segment passes.\n+            }\n+            try {\n+               qcodec.decode(\"=?NONSENSE?Q?Hello there!?=\");\n+                fail( \"We set the encoding to a bogus NONSENSE vlaue, this shouldn't have worked.\");\n+            } catch( DecoderException ee ) {\n+                // Exception expected, test segment passes.\n+            }\n+    }\n+\n+    public void testDecodeObjects() throws Exception {\n+        QCodec qcodec = new QCodec();\n+        String decoded = \"=?UTF-8?Q?1+1 =3D 2?=\";\n+        String plain = (String) qcodec.decode((Object) decoded);\n+        assertEquals(\"Basic Q decoding test\", \n+            \"1+1 = 2\", plain);\n+\n+        Object result = qcodec.decode((Object) null);\n+        assertEquals( \"Decoding a null Object should return null\", null, result);\n+        \n+        try {\n+            Object dObj = new Double(3.0);\n+            qcodec.decode( dObj );\n+            fail( \"Trying to url encode a Double object should cause an exception.\");\n+        } catch( DecoderException ee ) {\n+            // Exception expected, test segment passes.\n+        }\n+    }\n+\n+\n+    public void testEncodeDecodeBlanks() throws Exception {\n+        String plain = \"Mind those pesky blanks\";\n+        String encoded1 = \"=?UTF-8?Q?Mind those pesky blanks?=\";\n+        String encoded2 = \"=?UTF-8?Q?Mind_those_pesky_blanks?=\";\n+        QCodec qcodec = new QCodec();\n+        qcodec.setEncodeBlanks(false);\n+        String s = qcodec.encode(plain);\n+        assertEquals(\"Blanks encoding with the Q codec test\", encoded1, s);\n+        qcodec.setEncodeBlanks(true);\n+        s = qcodec.encode(plain);\n+        assertEquals(\"Blanks encoding with the Q codec test\", encoded2, s);\n+        s = qcodec.decode(encoded1);\n+        assertEquals(\"Blanks decoding with the Q codec test\", plain, s);\n+        s = qcodec.decode(encoded2);\n+        assertEquals(\"Blanks decoding with the Q codec test\", plain, s);\n+    }\n+}", "timestamp": 1080601449, "metainfo": ""}