{"sha": "89b1661fde38bd12c4d83b9fbe696db0c8657a78", "log": "Drop tests for dropped methods  ", "commit": "\n--- a/src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java\n+++ b/src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java\n \n package org.apache.commons.codec.digest;\n \n-import static org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8;\n import static org.apache.commons.codec.binary.StringUtils.getBytesUtf8;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n \n         assertEquals(DigestUtils.md2Hex(testData),\n                 DigestUtils.md2Hex(new ByteArrayInputStream(testData)));\n-\n-        assertEquals(DigestUtils.md2Hex(testData),\n-                DigestUtils.md2Hex(ByteBuffer.wrap(testData)));\n }\n \n     /**\n \n         assertEquals(DigestUtils.md5Hex(testData),\n                 DigestUtils.md5Hex(new ByteArrayInputStream(testData)));\n-\n-        assertEquals(DigestUtils.md5Hex(testData),\n-                DigestUtils.md5Hex(ByteBuffer.wrap(testData)));\n }\n-\n-    /**\n-     * An MD5 hash converted to hex should always be 32 characters.\n-     */\n-    @Test\n-    public void testMd5HexLengthForByteBuffer() {\n-        String hashMe = \"this is some string that is longer than 32 characters\";\n-        String hash = DigestUtils.md5Hex(getByteBufferUtf8(hashMe));\n-        assertEquals(32, hash.length());\n-\n-        hashMe = \"length < 32\";\n-        hash = DigestUtils.md5Hex(getByteBufferUtf8(hashMe));\n-        assertEquals(32, hash.length());\n-    }\n \n     /**\n      * An MD5 hash converted to hex should always be 32 characters.\n      * An MD5 hash should always be a 16 element byte[].\n      */\n     @Test\n-    public void testMd5LengthForByteBuffer() {\n-        String hashMe = \"this is some string that is longer than 16 characters\";\n-        byte[] hash = DigestUtils.md5(getByteBufferUtf8(hashMe));\n-        assertEquals(16, hash.length);\n-\n-        hashMe = \"length < 16\";\n-        hash = DigestUtils.md5(getByteBufferUtf8(hashMe));\n-        assertEquals(16, hash.length);\n-    }\n-\n-    /**\n-     * An MD5 hash should always be a 16 element byte[].\n-     */\n-    @Test\n     public void testMd5LengthForBytes() {\n         String hashMe = \"this is some string that is longer than 16 characters\";\n         byte[] hash = DigestUtils.md5(getBytesUtf8(hashMe));\n             DigestUtils.sha1Hex(\"abcdbcdecdefdefgefghfghighij\" + \"hijkijkljklmklmnlmnomnopnopq\"));\n         assertEquals(DigestUtils.sha1Hex(testData),\n                 DigestUtils.sha1Hex(new ByteArrayInputStream(testData)));\n-        assertEquals(DigestUtils.sha1Hex(testData),\n-                DigestUtils.sha1Hex(ByteBuffer.wrap(testData)));\n     }\n \n     @Test\n     @Test\n     public void testSha224() throws IOException {\n         assumeJava8();\n-        assertEquals(\"d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f\", DigestUtils.sha224Hex(\"\"));\n+        assertEquals(\"d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f\",\n+                DigestUtils.digest(MessageDigestAlgorithms.SHA_224,StringUtils.getBytesUtf8(\"\")));\n         assertEquals(\"730e109bd7a8a32b1cb9d9a09aa2325d2430587ddbc0c38bad911525\",\n-                DigestUtils.sha224Hex(\"The quick brown fox jumps over the lazy dog\"));\n+                DigestUtils.digest(MessageDigestAlgorithms.SHA_224,StringUtils.getBytesUtf8(\"The quick brown fox jumps over the lazy dog\")));\n \n         // Examples from FIPS 180-4?\n     }\n \n     assertEquals(DigestUtils.sha256Hex(testData),\n             DigestUtils.sha256Hex(new ByteArrayInputStream(testData)));\n-    assertEquals(DigestUtils.sha256Hex(testData),\n-            DigestUtils.sha256Hex(ByteBuffer.wrap(testData)));\n     }\n \n     @Test\n                        \"hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu\"));\n     assertEquals(DigestUtils.sha384Hex(testData),\n             DigestUtils.sha384Hex(new ByteArrayInputStream(testData)));\n-    assertEquals(DigestUtils.sha384Hex(testData),\n-            DigestUtils.sha384Hex(ByteBuffer.wrap(testData)));\n     }\n \n     @Test\n     }\n \n     @Test\n-    public void testSha512HexByteBuffer() throws IOException {\n-        assertEquals(DigestUtils.sha512Hex(testData), DigestUtils.sha512Hex(ByteBuffer.wrap(testData)));\n-    }\n-\n-    @Test\n     public void testSha512HexInputStream() throws IOException {\n         assertEquals(DigestUtils.sha512Hex(testData),\n                 DigestUtils.sha512Hex(new ByteArrayInputStream(testData)));", "timestamp": 1463583697, "metainfo": ""}