{"sha": "7f5a9acc5ffc84dd1890f17fe01274ae1007f0ae", "log": "Sort test methods.  ", "commit": "\n--- a/src/test/java/org/apache/commons/codec/binary/HexTest.java\n+++ b/src/test/java/org/apache/commons/codec/binary/HexTest.java\n     }\n \n     @Test\n-    public void testDecodeByteArrayOddCharacters() {\n-        try {\n-            new Hex().decode(new byte[]{65});\n-            fail(\"An exception wasn't thrown when trying to decode an odd number of characters\");\n-        } catch (final DecoderException e) {\n-            // Expected exception\n-        }\n-    }\n-\n-    @Test\n     public void testDecodeBadCharacterPos0() {\n         try {\n             new Hex().decode(\"q0\");\n         try {\n             new Hex().decode(\"0q\");\n             fail(\"An exception wasn't thrown when trying to decode an illegal character\");\n-        } catch (final DecoderException e) {\n-            // Expected exception\n-        }\n-    }\n-\n-    @Test\n-    public void testDecodeClassCastException() {\n-        try {\n-            new Hex().decode(new int[]{65});\n-            fail(\"An exception wasn't thrown when trying to decode.\");\n-        } catch (final DecoderException e) {\n-            // Expected exception\n-        }\n-    }\n-\n-    @Test\n-    public void testDecodeHexCharArrayOddCharacters1() {\n-        checkDecodeHexCharArrayOddCharacters(new char[]{'A'});\n-    }\n-\n-    @Test\n-    public void testDecodeHexCharArrayOddCharacters3() {\n-        checkDecodeHexCharArrayOddCharacters(new char[]{'A', 'B', 'C'});\n-    }\n-\n-    @Test\n-    public void testDecodeHexCharArrayOddCharacters5() {\n-        checkDecodeHexCharArrayOddCharacters(new char[]{'A', 'B', 'C', 'D', 'E'});\n-    }\n-\n-    @Test\n-    public void testDecodeHexStringOddCharacters() {\n-        try {\n-            new Hex().decode(\"6\");\n-            fail(\"An exception wasn't thrown when trying to decode an odd number of characters\");\n         } catch (final DecoderException e) {\n             // Expected exception\n         }\n     public void testDecodeByteArrayEmpty() throws DecoderException {\n         assertTrue(Arrays.equals(new byte[0], Hex.decodeHex(new char[0])));\n         assertTrue(Arrays.equals(new byte[0], new Hex().decode(new byte[0])));\n+    }\n+\n+    @Test\n+    public void testDecodeByteArrayOddCharacters() {\n+        try {\n+            new Hex().decode(new byte[]{65});\n+            fail(\"An exception wasn't thrown when trying to decode an odd number of characters\");\n+        } catch (final DecoderException e) {\n+            // Expected exception\n+        }\n+    }\n+\n+    @Test\n+    public void testDecodeClassCastException() {\n+        try {\n+            new Hex().decode(new int[]{65});\n+            fail(\"An exception wasn't thrown when trying to decode.\");\n+        } catch (final DecoderException e) {\n+            // Expected exception\n+        }\n+    }\n+\n+    @Test\n+    public void testDecodeHexCharArrayOddCharacters1() {\n+        checkDecodeHexCharArrayOddCharacters(new char[]{'A'});\n+    }\n+\n+    @Test\n+    public void testDecodeHexCharArrayOddCharacters3() {\n+        checkDecodeHexCharArrayOddCharacters(new char[]{'A', 'B', 'C'});\n+    }\n+\n+    @Test\n+    public void testDecodeHexCharArrayOddCharacters5() {\n+        checkDecodeHexCharArrayOddCharacters(new char[]{'A', 'B', 'C', 'D', 'E'});\n+    }\n+\n+    @Test\n+    public void testDecodeHexStringOddCharacters() {\n+        try {\n+            new Hex().decode(\"6\");\n+            fail(\"An exception wasn't thrown when trying to decode an odd number of characters\");\n+        } catch (final DecoderException e) {\n+            // Expected exception\n+        }\n     }\n \n     @Test\n     public void testEncodeHexByteArrayEmpty() throws EncoderException {\n         assertTrue(Arrays.equals(new char[0], Hex.encodeHex(new byte[0])));\n         assertTrue(Arrays.equals(new byte[0], new Hex().encode(new byte[0])));\n-    }\n-\n-    @Test\n-    public void testEncodeStringEmpty() throws EncoderException {\n-        assertTrue(Arrays.equals(new char[0], (char[]) new Hex().encode(\"\")));\n-    }\n-\n-    @Test\n-    public void testEncodeHexByteArrayZeroes() {\n-        final char[] c = Hex.encodeHex(new byte[36]);\n-        assertEquals(\"000000000000000000000000000000000000000000000000000000000000000000000000\", new String(c));\n     }\n \n     @Test\n     }\n \n     @Test\n+    public void testEncodeHexByteArrayZeroes() {\n+        final char[] c = Hex.encodeHex(new byte[36]);\n+        assertEquals(\"000000000000000000000000000000000000000000000000000000000000000000000000\", new String(c));\n+    }\n+\n+    @Test\n+    public void testEncodeStringEmpty() throws EncoderException {\n+        assertTrue(Arrays.equals(new char[0], (char[]) new Hex().encode(\"\")));\n+    }\n+\n+    @Test\n     public void testRequiredCharset() throws UnsupportedEncodingException, DecoderException {\n         testCustomCharset(\"UTF-8\", \"testRequiredCharset\");\n         testCustomCharset(\"UTF-16\", \"testRequiredCharset\");", "timestamp": 1415626932, "metainfo": ""}