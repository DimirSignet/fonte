{"sha": "7817bfdadb9cda107955de03d3d15d64ab89b5dc", "log": "Tab police  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/binary/BaseNCodec.java\n+++ b/src/main/java/org/apache/commons/codec/binary/BaseNCodec.java\n         return encode(pArray, 0, pArray.length);\n     }\n \n-\t/**\n-\t * Encodes a byte[] containing binary data, into a byte[] containing\n-\t * characters in the alphabet.\n-\t *\n-\t * @param pArray\n-\t *            a byte array containing binary data\n-\t * @param offset\n-\t *            initial offset of the subarray.\n-\t * @param length\n-\t *            length of the subarray.\n-\t * @return A byte array containing only the base N alphabetic character data\n-\t * @since 1.11\n-\t */\n+    /**\n+     * Encodes a byte[] containing binary data, into a byte[] containing\n+     * characters in the alphabet.\n+     *\n+     * @param pArray\n+     *            a byte array containing binary data\n+     * @param offset\n+     *            initial offset of the subarray.\n+     * @param length\n+     *            length of the subarray.\n+     * @return A byte array containing only the base N alphabetic character data\n+     * @since 1.11\n+     */\n     public byte[] encode(final byte[] pArray, int offset, int length) {\n         if (pArray == null || pArray.length == 0) {\n             return pArray;\n--- a/src/test/java/org/apache/commons/codec/binary/Base32Test.java\n+++ b/src/test/java/org/apache/commons/codec/binary/Base32Test.java\n         {\"foobar\" ,\"MZXW6YTBOI%%%%%%\"},\n     };\n \n-\t@Test\n-\tpublic void testBase64AtBufferStart() {\n-\t\ttestBase64InBuffer(0, 100);\n-\t}\n+    @Test\n+    public void testBase64AtBufferStart() {\n+        testBase64InBuffer(0, 100);\n+    }\n \n-\t@Test\n-\tpublic void testBase64AtBufferEnd() {\n-\t\ttestBase64InBuffer(100, 0);\n-\t}\n+    @Test\n+    public void testBase64AtBufferEnd() {\n+        testBase64InBuffer(100, 0);\n+    }\n \n-\t@Test\n-\tpublic void testBase64AtBufferMiddle() {\n-\t\ttestBase64InBuffer(100, 100);\n-\t}\n+    @Test\n+    public void testBase64AtBufferMiddle() {\n+        testBase64InBuffer(100, 100);\n+    }\n \n-\tprivate void testBase64InBuffer(int startPasSize, int endPadSize) {\n-\t\tfinal Base32 codec = new Base32();\n-\t\tfor (final String[] element : BASE32_TEST_CASES) {\n-\t\t\tfinal byte[] bytes = element[0].getBytes(CHARSET_UTF8);\n-\t\t\tbyte[] buffer = ArrayUtils.addAll(bytes, new byte[endPadSize]);\n-\t\t\tbuffer = ArrayUtils.addAll(new byte[startPasSize], buffer);\n-\t\t\tassertEquals(element[1], StringUtils.newStringUtf8(codec.encode(buffer, startPasSize, bytes.length)));\n-\t\t}\n-\t}\n+    private void testBase64InBuffer(int startPasSize, int endPadSize) {\n+        final Base32 codec = new Base32();\n+        for (final String[] element : BASE32_TEST_CASES) {\n+            final byte[] bytes = element[0].getBytes(CHARSET_UTF8);\n+            byte[] buffer = ArrayUtils.addAll(bytes, new byte[endPadSize]);\n+            buffer = ArrayUtils.addAll(new byte[startPasSize], buffer);\n+            assertEquals(element[1], StringUtils.newStringUtf8(codec.encode(buffer, startPasSize, bytes.length)));\n+        }\n+    }\n \n     @Test\n     public void testBase32Chunked () throws Exception {\n--- a/src/test/java/org/apache/commons/codec/binary/Base64Test.java\n+++ b/src/test/java/org/apache/commons/codec/binary/Base64Test.java\n  */\n public class Base64Test {\n \n-\tprivate static final Charset CHARSET_UTF8 = Charsets.UTF_8;\n-\n-\tprivate final Random random = new Random();\n-\n-\t/**\n-\t * @return Returns the random.\n-\t */\n-\tpublic Random getRandom() {\n-\t\treturn this.random;\n-\t}\n-\n-\t/**\n-\t * Test the isStringBase64 method.\n-\t */\n-\t@Test\n-\tpublic void testIsStringBase64() {\n-\t\tfinal String nullString = null;\n-\t\tfinal String emptyString = \"\";\n-\t\tfinal String validString = \"abc===defg\\n\\r123456\\r789\\r\\rABC\\n\\nDEF==GHI\\r\\nJKL==============\";\n-\t\tfinal String invalidString = validString + (char) 0; // append null\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// character\n-\n-\t\ttry {\n-\t\t\tBase64.isBase64(nullString);\n-\t\t\tfail(\"Base64.isStringBase64() should not be null-safe.\");\n-\t\t} catch (final NullPointerException npe) {\n-\t\t\tassertNotNull(\"Base64.isStringBase64() should not be null-safe.\", npe);\n-\t\t}\n-\n-\t\tassertTrue(\"Base64.isStringBase64(empty-string) is true\", Base64.isBase64(emptyString));\n-\t\tassertTrue(\"Base64.isStringBase64(valid-string) is true\", Base64.isBase64(validString));\n-\t\tassertFalse(\"Base64.isStringBase64(invalid-string) is false\", Base64.isBase64(invalidString));\n-\t}\n-\n-\t/**\n-\t * Test the Base64 implementation\n-\t */\n-\t@Test\n-\tpublic void testBase64() {\n-\t\tfinal String content = \"Hello World\";\n-\t\tString encodedContent;\n-\t\tbyte[] encodedBytes = Base64.encodeBase64(StringUtils.getBytesUtf8(content));\n-\t\tencodedContent = StringUtils.newStringUtf8(encodedBytes);\n-\t\tassertEquals(\"encoding hello world\", \"SGVsbG8gV29ybGQ=\", encodedContent);\n-\n-\t\tBase64 b64 = new Base64(BaseNCodec.MIME_CHUNK_SIZE, null); // null\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// lineSeparator\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// same as\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// saying\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// no-chunking\n-\t\tencodedBytes = b64.encode(StringUtils.getBytesUtf8(content));\n-\t\tencodedContent = StringUtils.newStringUtf8(encodedBytes);\n-\t\tassertEquals(\"encoding hello world\", \"SGVsbG8gV29ybGQ=\", encodedContent);\n-\n-\t\tb64 = new Base64(0, null); // null lineSeparator same as saying\n-\t\t\t\t\t\t\t\t\t// no-chunking\n-\t\tencodedBytes = b64.encode(StringUtils.getBytesUtf8(content));\n-\t\tencodedContent = StringUtils.newStringUtf8(encodedBytes);\n-\t\tassertEquals(\"encoding hello world\", \"SGVsbG8gV29ybGQ=\", encodedContent);\n-\n-\t\t// bogus characters to decode (to skip actually) {e-acute*6}\n-\t\tfinal byte[] decode = b64.decode(\"SGVsbG{\\u00e9\\u00e9\\u00e9\\u00e9\\u00e9\\u00e9}8gV29ybGQ=\");\n-\t\tfinal String decodeString = StringUtils.newStringUtf8(decode);\n-\t\tassertEquals(\"decode hello world\", \"Hello World\", decodeString);\n-\t}\n-\n-\t@Test\n-\tpublic void testBase64AtBufferStart() {\n-\t\ttestBase64InBuffer(0, 100);\n-\t}\n-\n-\t@Test\n-\tpublic void testBase64AtBufferEnd() {\n-\t\ttestBase64InBuffer(100, 0);\n-\t}\n-\n-\t@Test\n-\tpublic void testBase64AtBufferMiddle() {\n-\t\ttestBase64InBuffer(100, 100);\n-\t}\n-\n-\tprivate void testBase64InBuffer(int startPasSize, int endPadSize) {\n-\t\tfinal String content = \"Hello World\";\n-\t\tString encodedContent;\n-\t\tfinal byte[] bytesUtf8 = StringUtils.getBytesUtf8(content);\n-\t\tbyte[] buffer = ArrayUtils.addAll(bytesUtf8, new byte[endPadSize]);\n-\t\tbuffer = ArrayUtils.addAll(new byte[startPasSize], buffer);\n-\t\tbyte[] encodedBytes = new Base64().encode(buffer, startPasSize, bytesUtf8.length);\n-\t\tencodedContent = StringUtils.newStringUtf8(encodedBytes);\n-\t\tassertEquals(\"encoding hello world\", \"SGVsbG8gV29ybGQ=\", encodedContent);\n-\t}\n-\n-\t/**\n-\t * Test our decode with pad character in the middle. (Our current\n-\t * implementation: halt decode and return what we've got so far).\n-\t *\n-\t * The point of this test is not to say\n-\t * \"this is the correct way to decode base64.\" The point is simply to keep\n-\t * us aware of the current logic since 1.4 so we don't accidentally break it\n-\t * without realizing.\n-\t *\n-\t * Note for historians. The 1.3 logic would decode to:\n-\t * \"Hello World\\u0000Hello World\" -- null in the middle --- and 1.4\n-\t * unwittingly changed it to current logic.\n-\t */\n-\t@Test\n-\tpublic void testDecodeWithInnerPad() {\n-\t\tfinal String content = \"SGVsbG8gV29ybGQ=SGVsbG8gV29ybGQ=\";\n-\t\tfinal byte[] result = Base64.decodeBase64(content);\n-\t\tfinal byte[] shouldBe = StringUtils.getBytesUtf8(\"Hello World\");\n-\t\tassertTrue(\"decode should halt at pad (=)\", Arrays.equals(result, shouldBe));\n-\t}\n-\n-\t/**\n-\t * Tests Base64.encodeBase64().\n-\t */\n-\t@Test\n-\tpublic void testChunkedEncodeMultipleOf76() {\n-\t\tfinal byte[] expectedEncode = Base64.encodeBase64(Base64TestData.DECODED, true);\n-\t\t// convert to \"\\r\\n\" so we're equal to the old openssl encoding test\n-\t\t// stored\n-\t\t// in Base64TestData.ENCODED_76_CHARS_PER_LINE:\n-\t\tfinal String actualResult = Base64TestData.ENCODED_76_CHARS_PER_LINE.replaceAll(\"\\n\", \"\\r\\n\");\n-\t\tfinal byte[] actualEncode = StringUtils.getBytesUtf8(actualResult);\n-\t\tassertTrue(\"chunkedEncodeMultipleOf76\", Arrays.equals(expectedEncode, actualEncode));\n-\t}\n-\n-\t/**\n-\t * CODEC-68: isBase64 throws ArrayIndexOutOfBoundsException on some\n-\t * non-BASE64 bytes\n-\t */\n-\t@Test\n-\tpublic void testCodec68() {\n-\t\tfinal byte[] x = new byte[] { 'n', 'A', '=', '=', (byte) 0x9c };\n-\t\tBase64.decodeBase64(x);\n-\t}\n-\n-\t@Test\n-\tpublic void testCodeInteger1() {\n-\t\tfinal String encodedInt1 = \"li7dzDacuo67Jg7mtqEm2TRuOMU=\";\n-\t\tfinal BigInteger bigInt1 = new BigInteger(\"85739377120809420210425962799\" + \"0318636601332086981\");\n-\n-\t\tassertEquals(encodedInt1, new String(Base64.encodeInteger(bigInt1)));\n-\t\tassertEquals(bigInt1, Base64.decodeInteger(encodedInt1.getBytes(CHARSET_UTF8)));\n-\t}\n-\n-\t@Test\n-\tpublic void testCodeInteger2() {\n-\t\tfinal String encodedInt2 = \"9B5ypLY9pMOmtxCeTDHgwdNFeGs=\";\n-\t\tfinal BigInteger bigInt2 = new BigInteger(\"13936727572861167254666467268\" + \"91466679477132949611\");\n-\n-\t\tassertEquals(encodedInt2, new String(Base64.encodeInteger(bigInt2)));\n-\t\tassertEquals(bigInt2, Base64.decodeInteger(encodedInt2.getBytes(CHARSET_UTF8)));\n-\t}\n-\n-\t@Test\n-\tpublic void testCodeInteger3() {\n-\t\tfinal String encodedInt3 = \"FKIhdgaG5LGKiEtF1vHy4f3y700zaD6QwDS3IrNVGzNp2\"\n-\t\t\t\t+ \"rY+1LFWTK6D44AyiC1n8uWz1itkYMZF0/aKDK0Yjg==\";\n-\t\tfinal BigInteger bigInt3 = new BigInteger(\n-\t\t\t\t\"10806548154093873461951748545\" + \"1196989136416448805819079363524309897749044958112417136240557\"\n-\t\t\t\t\t\t+ \"4495062430572478766856090958495998158114332651671116876320938126\");\n-\n-\t\tassertEquals(encodedInt3, new String(Base64.encodeInteger(bigInt3)));\n-\t\tassertEquals(bigInt3, Base64.decodeInteger(encodedInt3.getBytes(CHARSET_UTF8)));\n-\t}\n-\n-\t@Test\n-\tpublic void testCodeInteger4() {\n-\t\tfinal String encodedInt4 = \"ctA8YGxrtngg/zKVvqEOefnwmViFztcnPBYPlJsvh6yKI\"\n-\t\t\t\t+ \"4iDm68fnp4Mi3RrJ6bZAygFrUIQLxLjV+OJtgJAEto0xAs+Mehuq1DkSFEpP3o\"\n-\t\t\t\t+ \"DzCTOsrOiS1DwQe4oIb7zVk/9l7aPtJMHW0LVlMdwZNFNNJoqMcT2ZfCPrfvYv\" + \"Q0=\";\n-\t\tfinal BigInteger bigInt4 = new BigInteger(\n-\t\t\t\t\"80624726256040348115552042320\" + \"6968135001872753709424419772586693950232350200555646471175944\"\n-\t\t\t\t\t\t+ \"519297087885987040810778908507262272892702303774422853675597\"\n-\t\t\t\t\t\t+ \"748008534040890923814202286633163248086055216976551456088015\"\n-\t\t\t\t\t\t+ \"338880713818192088877057717530169381044092839402438015097654\"\n-\t\t\t\t\t\t+ \"53542091716518238707344493641683483917\");\n-\n-\t\tassertEquals(encodedInt4, new String(Base64.encodeInteger(bigInt4)));\n-\t\tassertEquals(bigInt4, Base64.decodeInteger(encodedInt4.getBytes(CHARSET_UTF8)));\n-\t}\n-\n-\t@Test\n-\tpublic void testCodeIntegerEdgeCases() {\n-\t\t// TODO\n-\t}\n-\n-\t@Test\n-\tpublic void testCodeIntegerNull() {\n-\t\ttry {\n-\t\t\tBase64.encodeInteger(null);\n-\t\t\tfail(\"Exception not thrown when passing in null to encodeInteger(BigInteger)\");\n-\t\t} catch (final NullPointerException npe) {\n-\t\t\t// expected\n-\t\t} catch (final Exception e) {\n-\t\t\tfail(\"Incorrect Exception caught when passing in null to encodeInteger(BigInteger)\");\n-\t\t}\n-\t}\n-\n-\t@Test\n-\tpublic void testConstructors() {\n-\t\tBase64 base64;\n-\t\tbase64 = new Base64();\n-\t\tbase64 = new Base64(-1);\n-\t\tbase64 = new Base64(-1, new byte[] {});\n-\t\tbase64 = new Base64(64, new byte[] {});\n-\t\ttry {\n-\t\t\tbase64 = new Base64(-1, new byte[] { 'A' }); // TODO do we need to\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// check sep if len\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// = -1?\n-\t\t\tfail(\"Should have rejected attempt to use 'A' as a line separator\");\n-\t\t} catch (final IllegalArgumentException ignored) {\n-\t\t\t// Expected\n-\t\t}\n-\t\ttry {\n-\t\t\tbase64 = new Base64(64, new byte[] { 'A' });\n-\t\t\tfail(\"Should have rejected attempt to use 'A' as a line separator\");\n-\t\t} catch (final IllegalArgumentException ignored) {\n-\t\t\t// Expected\n-\t\t}\n-\t\ttry {\n-\t\t\tbase64 = new Base64(64, new byte[] { '=' });\n-\t\t\tfail(\"Should have rejected attempt to use '=' as a line separator\");\n-\t\t} catch (final IllegalArgumentException ignored) {\n-\t\t\t// Expected\n-\t\t}\n-\t\tbase64 = new Base64(64, new byte[] { '$' }); // OK\n-\t\ttry {\n-\t\t\tbase64 = new Base64(64, new byte[] { 'A', '$' });\n-\t\t\tfail(\"Should have rejected attempt to use 'A$' as a line separator\");\n-\t\t} catch (final IllegalArgumentException ignored) {\n-\t\t\t// Expected\n-\t\t}\n-\t\tbase64 = new Base64(64, new byte[] { ' ', '$', '\\n', '\\r', '\\t' }); // OK\n-\t\tassertNotNull(base64);\n-\t}\n-\n-\t@Test\n-\tpublic void testConstructor_Int_ByteArray_Boolean() {\n-\t\tfinal Base64 base64 = new Base64(65, new byte[] { '\\t' }, false);\n-\t\tfinal byte[] encoded = base64.encode(Base64TestData.DECODED);\n-\t\tString expectedResult = Base64TestData.ENCODED_64_CHARS_PER_LINE;\n-\t\texpectedResult = expectedResult.replace('\\n', '\\t');\n-\t\tfinal String result = StringUtils.newStringUtf8(encoded);\n-\t\tassertEquals(\"new Base64(65, \\\\t, false)\", expectedResult, result);\n-\t}\n-\n-\t@Test\n-\tpublic void testConstructor_Int_ByteArray_Boolean_UrlSafe() {\n-\t\t// url-safe variation\n-\t\tfinal Base64 base64 = new Base64(64, new byte[] { '\\t' }, true);\n-\t\tfinal byte[] encoded = base64.encode(Base64TestData.DECODED);\n-\t\tString expectedResult = Base64TestData.ENCODED_64_CHARS_PER_LINE;\n-\t\texpectedResult = expectedResult.replaceAll(\"=\", \"\"); // url-safe has no\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// == padding.\n-\t\texpectedResult = expectedResult.replace('\\n', '\\t');\n-\t\texpectedResult = expectedResult.replace('+', '-');\n-\t\texpectedResult = expectedResult.replace('/', '_');\n-\t\tfinal String result = StringUtils.newStringUtf8(encoded);\n-\t\tassertEquals(\"new Base64(64, \\\\t, true)\", result, expectedResult);\n-\t}\n-\n-\t/**\n-\t * Tests conditional true branch for \"marker0\" test.\n-\t */\n-\t@Test\n-\tpublic void testDecodePadMarkerIndex2() {\n-\t\tassertEquals(\"A\", new String(Base64.decodeBase64(\"QQ==\".getBytes(CHARSET_UTF8))));\n-\t}\n-\n-\t/**\n-\t * Tests conditional branches for \"marker1\" test.\n-\t */\n-\t@Test\n-\tpublic void testDecodePadMarkerIndex3() {\n-\t\tassertEquals(\"AA\", new String(Base64.decodeBase64(\"QUE=\".getBytes(CHARSET_UTF8))));\n-\t\tassertEquals(\"AAA\", new String(Base64.decodeBase64(\"QUFB\".getBytes(CHARSET_UTF8))));\n-\t}\n-\n-\t@Test\n-\tpublic void testDecodePadOnly() {\n-\t\tassertEquals(0, Base64.decodeBase64(\"====\".getBytes(CHARSET_UTF8)).length);\n-\t\tassertEquals(\"\", new String(Base64.decodeBase64(\"====\".getBytes(CHARSET_UTF8))));\n-\t\t// Test truncated padding\n-\t\tassertEquals(0, Base64.decodeBase64(\"===\".getBytes(CHARSET_UTF8)).length);\n-\t\tassertEquals(0, Base64.decodeBase64(\"==\".getBytes(CHARSET_UTF8)).length);\n-\t\tassertEquals(0, Base64.decodeBase64(\"=\".getBytes(CHARSET_UTF8)).length);\n-\t\tassertEquals(0, Base64.decodeBase64(\"\".getBytes(CHARSET_UTF8)).length);\n-\t}\n-\n-\t@Test\n-\tpublic void testDecodePadOnlyChunked() {\n-\t\tassertEquals(0, Base64.decodeBase64(\"====\\n\".getBytes(CHARSET_UTF8)).length);\n-\t\tassertEquals(\"\", new String(Base64.decodeBase64(\"====\\n\".getBytes(CHARSET_UTF8))));\n-\t\t// Test truncated padding\n-\t\tassertEquals(0, Base64.decodeBase64(\"===\\n\".getBytes(CHARSET_UTF8)).length);\n-\t\tassertEquals(0, Base64.decodeBase64(\"==\\n\".getBytes(CHARSET_UTF8)).length);\n-\t\tassertEquals(0, Base64.decodeBase64(\"=\\n\".getBytes(CHARSET_UTF8)).length);\n-\t\tassertEquals(0, Base64.decodeBase64(\"\\n\".getBytes(CHARSET_UTF8)).length);\n-\t}\n-\n-\t@Test\n-\tpublic void testDecodeWithWhitespace() throws Exception {\n-\n-\t\tfinal String orig = \"I am a late night coder.\";\n-\n-\t\tfinal byte[] encodedArray = Base64.encodeBase64(orig.getBytes(CHARSET_UTF8));\n-\t\tfinal StringBuilder intermediate = new StringBuilder(new String(encodedArray));\n-\n-\t\tintermediate.insert(2, ' ');\n-\t\tintermediate.insert(5, '\\t');\n-\t\tintermediate.insert(10, '\\r');\n-\t\tintermediate.insert(15, '\\n');\n-\n-\t\tfinal byte[] encodedWithWS = intermediate.toString().getBytes(CHARSET_UTF8);\n-\t\tfinal byte[] decodedWithWS = Base64.decodeBase64(encodedWithWS);\n-\n-\t\tfinal String dest = new String(decodedWithWS);\n-\n-\t\tassertEquals(\"Dest string doesn't equal the original\", orig, dest);\n-\t}\n-\n-\t/**\n-\t * Test encode and decode of empty byte array.\n-\t */\n-\t@Test\n-\tpublic void testEmptyBase64() {\n-\t\tbyte[] empty = new byte[0];\n-\t\tbyte[] result = Base64.encodeBase64(empty);\n-\t\tassertEquals(\"empty base64 encode\", 0, result.length);\n-\t\tassertEquals(\"empty base64 encode\", null, Base64.encodeBase64(null));\n-\n-\t\tempty = new byte[0];\n-\t\tresult = Base64.decodeBase64(empty);\n-\t\tassertEquals(\"empty base64 decode\", 0, result.length);\n-\t\tassertEquals(\"empty base64 encode\", null, Base64.decodeBase64((byte[]) null));\n-\t}\n-\n-\t// encode/decode a large random array\n-\t@Test\n-\tpublic void testEncodeDecodeRandom() {\n-\t\tfor (int i = 1; i < 5; i++) {\n-\t\t\tfinal byte[] data = new byte[this.getRandom().nextInt(10000) + 1];\n-\t\t\tthis.getRandom().nextBytes(data);\n-\t\t\tfinal byte[] enc = Base64.encodeBase64(data);\n-\t\t\tassertTrue(Base64.isBase64(enc));\n-\t\t\tfinal byte[] data2 = Base64.decodeBase64(enc);\n-\t\t\tassertTrue(Arrays.equals(data, data2));\n-\t\t}\n-\t}\n-\n-\t// encode/decode random arrays from size 0 to size 11\n-\t@Test\n-\tpublic void testEncodeDecodeSmall() {\n-\t\tfor (int i = 0; i < 12; i++) {\n-\t\t\tfinal byte[] data = new byte[i];\n-\t\t\tthis.getRandom().nextBytes(data);\n-\t\t\tfinal byte[] enc = Base64.encodeBase64(data);\n-\t\t\tassertTrue(\"\\\"\" + new String(enc) + \"\\\" is Base64 data.\", Base64.isBase64(enc));\n-\t\t\tfinal byte[] data2 = Base64.decodeBase64(enc);\n-\t\t\tassertTrue(toString(data) + \" equals \" + toString(data2), Arrays.equals(data, data2));\n-\t\t}\n-\t}\n-\n-\t@Test\n-\tpublic void testEncodeOverMaxSize() throws Exception {\n-\t\ttestEncodeOverMaxSize(-1);\n-\t\ttestEncodeOverMaxSize(0);\n-\t\ttestEncodeOverMaxSize(1);\n-\t\ttestEncodeOverMaxSize(2);\n-\t}\n-\n-\t@Test\n-\tpublic void testCodec112() { // size calculation assumes always chunked\n-\t\tfinal byte[] in = new byte[] { 0 };\n-\t\tfinal byte[] out = Base64.encodeBase64(in);\n-\t\tBase64.encodeBase64(in, false, false, out.length);\n-\t}\n-\n-\tprivate void testEncodeOverMaxSize(final int maxSize) throws Exception {\n-\t\ttry {\n-\t\t\tBase64.encodeBase64(Base64TestData.DECODED, true, false, maxSize);\n-\t\t\tfail(\"Expected \" + IllegalArgumentException.class.getName());\n-\t\t} catch (final IllegalArgumentException e) {\n-\t\t\t// Expected\n-\t\t}\n-\t}\n-\n-\t@Test\n-\tpublic void testIgnoringNonBase64InDecode() throws Exception {\n-\t\tassertEquals(\"The quick brown fox jumped over the lazy dogs.\",\n-\t\t\t\tnew String(Base64.decodeBase64(\n-\t\t\t\t\t\t\"VGhlIH@$#$@%F1aWN@#@#@@rIGJyb3duIGZve\\n\\r\\t%#%#%#%CBqd##$#$W1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\"\n-\t\t\t\t\t\t\t\t.getBytes(CHARSET_UTF8))));\n-\t}\n-\n-\t@Test\n-\tpublic void testIsArrayByteBase64() {\n-\t\tassertFalse(Base64.isBase64(new byte[] { Byte.MIN_VALUE }));\n-\t\tassertFalse(Base64.isBase64(new byte[] { -125 }));\n-\t\tassertFalse(Base64.isBase64(new byte[] { -10 }));\n-\t\tassertFalse(Base64.isBase64(new byte[] { 0 }));\n-\t\tassertFalse(Base64.isBase64(new byte[] { 64, Byte.MAX_VALUE }));\n-\t\tassertFalse(Base64.isBase64(new byte[] { Byte.MAX_VALUE }));\n-\t\tassertTrue(Base64.isBase64(new byte[] { 'A' }));\n-\t\tassertFalse(Base64.isBase64(new byte[] { 'A', Byte.MIN_VALUE }));\n-\t\tassertTrue(Base64.isBase64(new byte[] { 'A', 'Z', 'a' }));\n-\t\tassertTrue(Base64.isBase64(new byte[] { '/', '=', '+' }));\n-\t\tassertFalse(Base64.isBase64(new byte[] { '$' }));\n-\t}\n-\n-\t/**\n-\t * Tests isUrlSafe.\n-\t */\n-\t@Test\n-\tpublic void testIsUrlSafe() {\n-\t\tfinal Base64 base64Standard = new Base64(false);\n-\t\tfinal Base64 base64URLSafe = new Base64(true);\n-\n-\t\tassertFalse(\"Base64.isUrlSafe=false\", base64Standard.isUrlSafe());\n-\t\tassertTrue(\"Base64.isUrlSafe=true\", base64URLSafe.isUrlSafe());\n-\n-\t\tfinal byte[] whiteSpace = { ' ', '\\n', '\\r', '\\t' };\n-\t\tassertTrue(\"Base64.isBase64(whiteSpace)=true\", Base64.isBase64(whiteSpace));\n-\t}\n-\n-\t@Test\n-\tpublic void testKnownDecodings() {\n-\t\tassertEquals(\"The quick brown fox jumped over the lazy dogs.\", new String(Base64.decodeBase64(\n-\t\t\t\t\"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\".getBytes(CHARSET_UTF8))));\n-\t\tassertEquals(\"It was the best of times, it was the worst of times.\", new String(Base64.decodeBase64(\n-\t\t\t\t\"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==\".getBytes(CHARSET_UTF8))));\n-\t\tassertEquals(\"http://jakarta.apache.org/commmons\", new String(\n-\t\t\t\tBase64.decodeBase64(\"aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==\".getBytes(CHARSET_UTF8))));\n-\t\tassertEquals(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\", new String(Base64.decodeBase64(\n-\t\t\t\t\"QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==\".getBytes(CHARSET_UTF8))));\n-\t\tassertEquals(\"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\",\n-\t\t\t\tnew String(Base64.decodeBase64(\"eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0=\".getBytes(CHARSET_UTF8))));\n-\t\tassertEquals(\"xyzzy!\", new String(Base64.decodeBase64(\"eHl6enkh\".getBytes(CHARSET_UTF8))));\n-\t}\n-\n-\t@Test\n-\tpublic void testKnownEncodings() {\n-\t\tassertEquals(\"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\", new String(\n-\t\t\t\tBase64.encodeBase64(\"The quick brown fox jumped over the lazy dogs.\".getBytes(CHARSET_UTF8))));\n-\t\tassertEquals(\n-\t\t\t\t\"YmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJs\\r\\nYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFo\\r\\nIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBi\\r\\nbGFoIGJsYWg=\\r\\n\",\n-\t\t\t\tnew String(Base64.encodeBase64Chunked(\n-\t\t\t\t\t\t\"blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah\"\n-\t\t\t\t\t\t\t\t.getBytes(CHARSET_UTF8))));\n-\t\tassertEquals(\"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==\", new String(\n-\t\t\t\tBase64.encodeBase64(\"It was the best of times, it was the worst of times.\".getBytes(CHARSET_UTF8))));\n-\t\tassertEquals(\"aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==\",\n-\t\t\t\tnew String(Base64.encodeBase64(\"http://jakarta.apache.org/commmons\".getBytes(CHARSET_UTF8))));\n-\t\tassertEquals(\"QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==\", new String(\n-\t\t\t\tBase64.encodeBase64(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\".getBytes(CHARSET_UTF8))));\n-\t\tassertEquals(\"eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0=\",\n-\t\t\t\tnew String(Base64.encodeBase64(\"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\".getBytes(CHARSET_UTF8))));\n-\t\tassertEquals(\"eHl6enkh\", new String(Base64.encodeBase64(\"xyzzy!\".getBytes(CHARSET_UTF8))));\n-\t}\n-\n-\t@Test\n-\tpublic void testNonBase64Test() throws Exception {\n-\n-\t\tfinal byte[] bArray = { '%' };\n-\n-\t\tassertFalse(\"Invalid Base64 array was incorrectly validated as \" + \"an array of Base64 encoded data\",\n-\t\t\t\tBase64.isBase64(bArray));\n-\n-\t\ttry {\n-\t\t\tfinal Base64 b64 = new Base64();\n-\t\t\tfinal byte[] result = b64.decode(bArray);\n-\n-\t\t\tassertEquals(\"The result should be empty as the test encoded content did \"\n-\t\t\t\t\t+ \"not contain any valid base 64 characters\", 0, result.length);\n-\t\t} catch (final Exception e) {\n-\t\t\tfail(\"Exception was thrown when trying to decode \"\n-\t\t\t\t\t+ \"invalid base64 encoded data - RFC 2045 requires that all \"\n-\t\t\t\t\t+ \"non base64 character be discarded, an exception should not\" + \" have been thrown\");\n-\t\t}\n-\t}\n-\n-\t@Test\n-\tpublic void testObjectDecodeWithInvalidParameter() throws Exception {\n-\t\tfinal Base64 b64 = new Base64();\n-\n-\t\ttry {\n-\t\t\tb64.decode(Integer.valueOf(5));\n-\t\t\tfail(\"decode(Object) didn't throw an exception when passed an Integer object\");\n-\t\t} catch (final DecoderException e) {\n-\t\t\t// ignored\n-\t\t}\n-\n-\t}\n-\n-\t@Test\n-\tpublic void testObjectDecodeWithValidParameter() throws Exception {\n-\n-\t\tfinal String original = \"Hello World!\";\n-\t\tfinal Object o = Base64.encodeBase64(original.getBytes(CHARSET_UTF8));\n-\n-\t\tfinal Base64 b64 = new Base64();\n-\t\tfinal Object oDecoded = b64.decode(o);\n-\t\tfinal byte[] baDecoded = (byte[]) oDecoded;\n-\t\tfinal String dest = new String(baDecoded);\n-\n-\t\tassertEquals(\"dest string does not equal original\", original, dest);\n-\t}\n-\n-\t@Test\n-\tpublic void testObjectEncodeWithInvalidParameter() throws Exception {\n-\t\tfinal Base64 b64 = new Base64();\n-\t\ttry {\n-\t\t\tb64.encode(\"Yadayadayada\");\n-\t\t\tfail(\"encode(Object) didn't throw an exception when passed a String object\");\n-\t\t} catch (final EncoderException e) {\n-\t\t\t// Expected\n-\t\t}\n-\t}\n-\n-\t@Test\n-\tpublic void testObjectEncodeWithValidParameter() throws Exception {\n-\n-\t\tfinal String original = \"Hello World!\";\n-\t\tfinal Object origObj = original.getBytes(CHARSET_UTF8);\n-\n-\t\tfinal Base64 b64 = new Base64();\n-\t\tfinal Object oEncoded = b64.encode(origObj);\n-\t\tfinal byte[] bArray = Base64.decodeBase64((byte[]) oEncoded);\n-\t\tfinal String dest = new String(bArray);\n-\n-\t\tassertEquals(\"dest string does not equal original\", original, dest);\n-\t}\n-\n-\t@Test\n-\tpublic void testObjectEncode() throws Exception {\n-\t\tfinal Base64 b64 = new Base64();\n-\t\tassertEquals(\"SGVsbG8gV29ybGQ=\", new String(b64.encode(\"Hello World\".getBytes(CHARSET_UTF8))));\n-\t}\n-\n-\t@Test\n-\tpublic void testPairs() {\n-\t\tassertEquals(\"AAA=\", new String(Base64.encodeBase64(new byte[] { 0, 0 })));\n-\t\tfor (int i = -128; i <= 127; i++) {\n-\t\t\tfinal byte test[] = { (byte) i, (byte) i };\n-\t\t\tassertTrue(Arrays.equals(test, Base64.decodeBase64(Base64.encodeBase64(test))));\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Tests RFC 2045 section 2.1 CRLF definition.\n-\t */\n-\t@Test\n-\tpublic void testRfc2045Section2Dot1CrLfDefinition() {\n-\t\tassertTrue(Arrays.equals(new byte[] { 13, 10 }, Base64.CHUNK_SEPARATOR));\n-\t}\n-\n-\t/**\n-\t * Tests RFC 2045 section 6.8 chuck size definition.\n-\t */\n-\t@Test\n-\tpublic void testRfc2045Section6Dot8ChunkSizeDefinition() {\n-\t\tassertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);\n-\t}\n-\n-\t/**\n-\t * Tests RFC 1421 section 4.3.2.4 chuck size definition.\n-\t */\n-\t@Test\n-\tpublic void testRfc1421Section6Dot8ChunkSizeDefinition() {\n-\t\tassertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);\n-\t}\n-\n-\t/**\n-\t * Tests RFC 4648 section 10 test vectors.\n-\t * <ul>\n-\t * <li>BASE64(\"\") = \"\"</li>\n-\t * <li>BASE64(\"f\") = \"Zg==\"</li>\n-\t * <li>BASE64(\"fo\") = \"Zm8=\"</li>\n-\t * <li>BASE64(\"foo\") = \"Zm9v\"</li>\n-\t * <li>BASE64(\"foob\") = \"Zm9vYg==\"</li>\n-\t * <li>BASE64(\"fooba\") = \"Zm9vYmE=\"</li>\n-\t * <li>BASE64(\"foobar\") = \"Zm9vYmFy\"</li>\n-\t * </ul>\n-\t *\n-\t * @see <a href=\"http://tools.ietf.org/html/rfc4648\">http://tools.ietf.org/\n-\t *      html/rfc4648</a>\n-\t */\n-\t@Test\n-\tpublic void testRfc4648Section10Decode() {\n-\t\tassertEquals(\"\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"\")));\n-\t\tassertEquals(\"f\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zg==\")));\n-\t\tassertEquals(\"fo\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm8=\")));\n-\t\tassertEquals(\"foo\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9v\")));\n-\t\tassertEquals(\"foob\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9vYg==\")));\n-\t\tassertEquals(\"fooba\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9vYmE=\")));\n-\t\tassertEquals(\"foobar\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9vYmFy\")));\n-\t}\n-\n-\t/**\n-\t * Tests RFC 4648 section 10 test vectors.\n-\t * <ul>\n-\t * <li>BASE64(\"\") = \"\"</li>\n-\t * <li>BASE64(\"f\") = \"Zg==\"</li>\n-\t * <li>BASE64(\"fo\") = \"Zm8=\"</li>\n-\t * <li>BASE64(\"foo\") = \"Zm9v\"</li>\n-\t * <li>BASE64(\"foob\") = \"Zm9vYg==\"</li>\n-\t * <li>BASE64(\"fooba\") = \"Zm9vYmE=\"</li>\n-\t * <li>BASE64(\"foobar\") = \"Zm9vYmFy\"</li>\n-\t * </ul>\n-\t *\n-\t * @see <a href=\"http://tools.ietf.org/html/rfc4648\">http://tools.ietf.org/\n-\t *      html/rfc4648</a>\n-\t */\n-\t@Test\n-\tpublic void testRfc4648Section10DecodeWithCrLf() {\n-\t\tfinal String CRLF = StringUtils.newStringUsAscii(Base64.CHUNK_SEPARATOR);\n-\t\tassertEquals(\"\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"\" + CRLF)));\n-\t\tassertEquals(\"f\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zg==\" + CRLF)));\n-\t\tassertEquals(\"fo\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm8=\" + CRLF)));\n-\t\tassertEquals(\"foo\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9v\" + CRLF)));\n-\t\tassertEquals(\"foob\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9vYg==\" + CRLF)));\n-\t\tassertEquals(\"fooba\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9vYmE=\" + CRLF)));\n-\t\tassertEquals(\"foobar\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9vYmFy\" + CRLF)));\n-\t}\n-\n-\t/**\n-\t * Tests RFC 4648 section 10 test vectors.\n-\t * <ul>\n-\t * <li>BASE64(\"\") = \"\"</li>\n-\t * <li>BASE64(\"f\") = \"Zg==\"</li>\n-\t * <li>BASE64(\"fo\") = \"Zm8=\"</li>\n-\t * <li>BASE64(\"foo\") = \"Zm9v\"</li>\n-\t * <li>BASE64(\"foob\") = \"Zm9vYg==\"</li>\n-\t * <li>BASE64(\"fooba\") = \"Zm9vYmE=\"</li>\n-\t * <li>BASE64(\"foobar\") = \"Zm9vYmFy\"</li>\n-\t * </ul>\n-\t *\n-\t * @see <a href=\"http://tools.ietf.org/html/rfc4648\">http://tools.ietf.org/\n-\t *      html/rfc4648</a>\n-\t */\n-\t@Test\n-\tpublic void testRfc4648Section10Encode() {\n-\t\tassertEquals(\"\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"\")));\n-\t\tassertEquals(\"Zg==\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"f\")));\n-\t\tassertEquals(\"Zm8=\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"fo\")));\n-\t\tassertEquals(\"Zm9v\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"foo\")));\n-\t\tassertEquals(\"Zm9vYg==\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"foob\")));\n-\t\tassertEquals(\"Zm9vYmE=\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"fooba\")));\n-\t\tassertEquals(\"Zm9vYmFy\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"foobar\")));\n-\t}\n-\n-\t/**\n-\t * Tests RFC 4648 section 10 test vectors.\n-\t * <ul>\n-\t * <li>BASE64(\"\") = \"\"</li>\n-\t * <li>BASE64(\"f\") = \"Zg==\"</li>\n-\t * <li>BASE64(\"fo\") = \"Zm8=\"</li>\n-\t * <li>BASE64(\"foo\") = \"Zm9v\"</li>\n-\t * <li>BASE64(\"foob\") = \"Zm9vYg==\"</li>\n-\t * <li>BASE64(\"fooba\") = \"Zm9vYmE=\"</li>\n-\t * <li>BASE64(\"foobar\") = \"Zm9vYmFy\"</li>\n-\t * </ul>\n-\t *\n-\t * @see <a href=\"http://tools.ietf.org/html/rfc4648\">http://tools.ietf.org/\n-\t *      html/rfc4648</a>\n-\t */\n-\t@Test\n-\tpublic void testRfc4648Section10DecodeEncode() {\n-\t\ttestDecodeEncode(\"\");\n-\t\ttestDecodeEncode(\"Zg==\");\n-\t\ttestDecodeEncode(\"Zm8=\");\n-\t\ttestDecodeEncode(\"Zm9v\");\n-\t\ttestDecodeEncode(\"Zm9vYg==\");\n-\t\ttestDecodeEncode(\"Zm9vYmE=\");\n-\t\ttestDecodeEncode(\"Zm9vYmFy\");\n-\t}\n-\n-\tprivate void testDecodeEncode(final String encodedText) {\n-\t\tfinal String decodedText = StringUtils.newStringUsAscii(Base64.decodeBase64(encodedText));\n-\t\tfinal String encodedText2 = Base64.encodeBase64String(StringUtils.getBytesUtf8(decodedText));\n-\t\tassertEquals(encodedText, encodedText2);\n-\t}\n-\n-\t/**\n-\t * Tests RFC 4648 section 10 test vectors.\n-\t * <ul>\n-\t * <li>BASE64(\"\") = \"\"</li>\n-\t * <li>BASE64(\"f\") = \"Zg==\"</li>\n-\t * <li>BASE64(\"fo\") = \"Zm8=\"</li>\n-\t * <li>BASE64(\"foo\") = \"Zm9v\"</li>\n-\t * <li>BASE64(\"foob\") = \"Zm9vYg==\"</li>\n-\t * <li>BASE64(\"fooba\") = \"Zm9vYmE=\"</li>\n-\t * <li>BASE64(\"foobar\") = \"Zm9vYmFy\"</li>\n-\t * </ul>\n-\t *\n-\t * @see <a href=\"http://tools.ietf.org/html/rfc4648\">http://tools.ietf.org/\n-\t *      html/rfc4648</a>\n-\t */\n-\t@Test\n-\tpublic void testRfc4648Section10EncodeDecode() {\n-\t\ttestEncodeDecode(\"\");\n-\t\ttestEncodeDecode(\"f\");\n-\t\ttestEncodeDecode(\"fo\");\n-\t\ttestEncodeDecode(\"foo\");\n-\t\ttestEncodeDecode(\"foob\");\n-\t\ttestEncodeDecode(\"fooba\");\n-\t\ttestEncodeDecode(\"foobar\");\n-\t}\n-\n-\tprivate void testEncodeDecode(final String plainText) {\n-\t\tfinal String encodedText = Base64.encodeBase64String(StringUtils.getBytesUtf8(plainText));\n-\t\tfinal String decodedText = StringUtils.newStringUsAscii(Base64.decodeBase64(encodedText));\n-\t\tassertEquals(plainText, decodedText);\n-\t}\n-\n-\t@Test\n-\tpublic void testSingletons() {\n-\t\tassertEquals(\"AA==\", new String(Base64.encodeBase64(new byte[] { (byte) 0 })));\n-\t\tassertEquals(\"AQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 1 })));\n-\t\tassertEquals(\"Ag==\", new String(Base64.encodeBase64(new byte[] { (byte) 2 })));\n-\t\tassertEquals(\"Aw==\", new String(Base64.encodeBase64(new byte[] { (byte) 3 })));\n-\t\tassertEquals(\"BA==\", new String(Base64.encodeBase64(new byte[] { (byte) 4 })));\n-\t\tassertEquals(\"BQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 5 })));\n-\t\tassertEquals(\"Bg==\", new String(Base64.encodeBase64(new byte[] { (byte) 6 })));\n-\t\tassertEquals(\"Bw==\", new String(Base64.encodeBase64(new byte[] { (byte) 7 })));\n-\t\tassertEquals(\"CA==\", new String(Base64.encodeBase64(new byte[] { (byte) 8 })));\n-\t\tassertEquals(\"CQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 9 })));\n-\t\tassertEquals(\"Cg==\", new String(Base64.encodeBase64(new byte[] { (byte) 10 })));\n-\t\tassertEquals(\"Cw==\", new String(Base64.encodeBase64(new byte[] { (byte) 11 })));\n-\t\tassertEquals(\"DA==\", new String(Base64.encodeBase64(new byte[] { (byte) 12 })));\n-\t\tassertEquals(\"DQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 13 })));\n-\t\tassertEquals(\"Dg==\", new String(Base64.encodeBase64(new byte[] { (byte) 14 })));\n-\t\tassertEquals(\"Dw==\", new String(Base64.encodeBase64(new byte[] { (byte) 15 })));\n-\t\tassertEquals(\"EA==\", new String(Base64.encodeBase64(new byte[] { (byte) 16 })));\n-\t\tassertEquals(\"EQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 17 })));\n-\t\tassertEquals(\"Eg==\", new String(Base64.encodeBase64(new byte[] { (byte) 18 })));\n-\t\tassertEquals(\"Ew==\", new String(Base64.encodeBase64(new byte[] { (byte) 19 })));\n-\t\tassertEquals(\"FA==\", new String(Base64.encodeBase64(new byte[] { (byte) 20 })));\n-\t\tassertEquals(\"FQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 21 })));\n-\t\tassertEquals(\"Fg==\", new String(Base64.encodeBase64(new byte[] { (byte) 22 })));\n-\t\tassertEquals(\"Fw==\", new String(Base64.encodeBase64(new byte[] { (byte) 23 })));\n-\t\tassertEquals(\"GA==\", new String(Base64.encodeBase64(new byte[] { (byte) 24 })));\n-\t\tassertEquals(\"GQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 25 })));\n-\t\tassertEquals(\"Gg==\", new String(Base64.encodeBase64(new byte[] { (byte) 26 })));\n-\t\tassertEquals(\"Gw==\", new String(Base64.encodeBase64(new byte[] { (byte) 27 })));\n-\t\tassertEquals(\"HA==\", new String(Base64.encodeBase64(new byte[] { (byte) 28 })));\n-\t\tassertEquals(\"HQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 29 })));\n-\t\tassertEquals(\"Hg==\", new String(Base64.encodeBase64(new byte[] { (byte) 30 })));\n-\t\tassertEquals(\"Hw==\", new String(Base64.encodeBase64(new byte[] { (byte) 31 })));\n-\t\tassertEquals(\"IA==\", new String(Base64.encodeBase64(new byte[] { (byte) 32 })));\n-\t\tassertEquals(\"IQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 33 })));\n-\t\tassertEquals(\"Ig==\", new String(Base64.encodeBase64(new byte[] { (byte) 34 })));\n-\t\tassertEquals(\"Iw==\", new String(Base64.encodeBase64(new byte[] { (byte) 35 })));\n-\t\tassertEquals(\"JA==\", new String(Base64.encodeBase64(new byte[] { (byte) 36 })));\n-\t\tassertEquals(\"JQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 37 })));\n-\t\tassertEquals(\"Jg==\", new String(Base64.encodeBase64(new byte[] { (byte) 38 })));\n-\t\tassertEquals(\"Jw==\", new String(Base64.encodeBase64(new byte[] { (byte) 39 })));\n-\t\tassertEquals(\"KA==\", new String(Base64.encodeBase64(new byte[] { (byte) 40 })));\n-\t\tassertEquals(\"KQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 41 })));\n-\t\tassertEquals(\"Kg==\", new String(Base64.encodeBase64(new byte[] { (byte) 42 })));\n-\t\tassertEquals(\"Kw==\", new String(Base64.encodeBase64(new byte[] { (byte) 43 })));\n-\t\tassertEquals(\"LA==\", new String(Base64.encodeBase64(new byte[] { (byte) 44 })));\n-\t\tassertEquals(\"LQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 45 })));\n-\t\tassertEquals(\"Lg==\", new String(Base64.encodeBase64(new byte[] { (byte) 46 })));\n-\t\tassertEquals(\"Lw==\", new String(Base64.encodeBase64(new byte[] { (byte) 47 })));\n-\t\tassertEquals(\"MA==\", new String(Base64.encodeBase64(new byte[] { (byte) 48 })));\n-\t\tassertEquals(\"MQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 49 })));\n-\t\tassertEquals(\"Mg==\", new String(Base64.encodeBase64(new byte[] { (byte) 50 })));\n-\t\tassertEquals(\"Mw==\", new String(Base64.encodeBase64(new byte[] { (byte) 51 })));\n-\t\tassertEquals(\"NA==\", new String(Base64.encodeBase64(new byte[] { (byte) 52 })));\n-\t\tassertEquals(\"NQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 53 })));\n-\t\tassertEquals(\"Ng==\", new String(Base64.encodeBase64(new byte[] { (byte) 54 })));\n-\t\tassertEquals(\"Nw==\", new String(Base64.encodeBase64(new byte[] { (byte) 55 })));\n-\t\tassertEquals(\"OA==\", new String(Base64.encodeBase64(new byte[] { (byte) 56 })));\n-\t\tassertEquals(\"OQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 57 })));\n-\t\tassertEquals(\"Og==\", new String(Base64.encodeBase64(new byte[] { (byte) 58 })));\n-\t\tassertEquals(\"Ow==\", new String(Base64.encodeBase64(new byte[] { (byte) 59 })));\n-\t\tassertEquals(\"PA==\", new String(Base64.encodeBase64(new byte[] { (byte) 60 })));\n-\t\tassertEquals(\"PQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 61 })));\n-\t\tassertEquals(\"Pg==\", new String(Base64.encodeBase64(new byte[] { (byte) 62 })));\n-\t\tassertEquals(\"Pw==\", new String(Base64.encodeBase64(new byte[] { (byte) 63 })));\n-\t\tassertEquals(\"QA==\", new String(Base64.encodeBase64(new byte[] { (byte) 64 })));\n-\t\tassertEquals(\"QQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 65 })));\n-\t\tassertEquals(\"Qg==\", new String(Base64.encodeBase64(new byte[] { (byte) 66 })));\n-\t\tassertEquals(\"Qw==\", new String(Base64.encodeBase64(new byte[] { (byte) 67 })));\n-\t\tassertEquals(\"RA==\", new String(Base64.encodeBase64(new byte[] { (byte) 68 })));\n-\t\tassertEquals(\"RQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 69 })));\n-\t\tassertEquals(\"Rg==\", new String(Base64.encodeBase64(new byte[] { (byte) 70 })));\n-\t\tassertEquals(\"Rw==\", new String(Base64.encodeBase64(new byte[] { (byte) 71 })));\n-\t\tassertEquals(\"SA==\", new String(Base64.encodeBase64(new byte[] { (byte) 72 })));\n-\t\tassertEquals(\"SQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 73 })));\n-\t\tassertEquals(\"Sg==\", new String(Base64.encodeBase64(new byte[] { (byte) 74 })));\n-\t\tassertEquals(\"Sw==\", new String(Base64.encodeBase64(new byte[] { (byte) 75 })));\n-\t\tassertEquals(\"TA==\", new String(Base64.encodeBase64(new byte[] { (byte) 76 })));\n-\t\tassertEquals(\"TQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 77 })));\n-\t\tassertEquals(\"Tg==\", new String(Base64.encodeBase64(new byte[] { (byte) 78 })));\n-\t\tassertEquals(\"Tw==\", new String(Base64.encodeBase64(new byte[] { (byte) 79 })));\n-\t\tassertEquals(\"UA==\", new String(Base64.encodeBase64(new byte[] { (byte) 80 })));\n-\t\tassertEquals(\"UQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 81 })));\n-\t\tassertEquals(\"Ug==\", new String(Base64.encodeBase64(new byte[] { (byte) 82 })));\n-\t\tassertEquals(\"Uw==\", new String(Base64.encodeBase64(new byte[] { (byte) 83 })));\n-\t\tassertEquals(\"VA==\", new String(Base64.encodeBase64(new byte[] { (byte) 84 })));\n-\t\tassertEquals(\"VQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 85 })));\n-\t\tassertEquals(\"Vg==\", new String(Base64.encodeBase64(new byte[] { (byte) 86 })));\n-\t\tassertEquals(\"Vw==\", new String(Base64.encodeBase64(new byte[] { (byte) 87 })));\n-\t\tassertEquals(\"WA==\", new String(Base64.encodeBase64(new byte[] { (byte) 88 })));\n-\t\tassertEquals(\"WQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 89 })));\n-\t\tassertEquals(\"Wg==\", new String(Base64.encodeBase64(new byte[] { (byte) 90 })));\n-\t\tassertEquals(\"Ww==\", new String(Base64.encodeBase64(new byte[] { (byte) 91 })));\n-\t\tassertEquals(\"XA==\", new String(Base64.encodeBase64(new byte[] { (byte) 92 })));\n-\t\tassertEquals(\"XQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 93 })));\n-\t\tassertEquals(\"Xg==\", new String(Base64.encodeBase64(new byte[] { (byte) 94 })));\n-\t\tassertEquals(\"Xw==\", new String(Base64.encodeBase64(new byte[] { (byte) 95 })));\n-\t\tassertEquals(\"YA==\", new String(Base64.encodeBase64(new byte[] { (byte) 96 })));\n-\t\tassertEquals(\"YQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 97 })));\n-\t\tassertEquals(\"Yg==\", new String(Base64.encodeBase64(new byte[] { (byte) 98 })));\n-\t\tassertEquals(\"Yw==\", new String(Base64.encodeBase64(new byte[] { (byte) 99 })));\n-\t\tassertEquals(\"ZA==\", new String(Base64.encodeBase64(new byte[] { (byte) 100 })));\n-\t\tassertEquals(\"ZQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 101 })));\n-\t\tassertEquals(\"Zg==\", new String(Base64.encodeBase64(new byte[] { (byte) 102 })));\n-\t\tassertEquals(\"Zw==\", new String(Base64.encodeBase64(new byte[] { (byte) 103 })));\n-\t\tassertEquals(\"aA==\", new String(Base64.encodeBase64(new byte[] { (byte) 104 })));\n-\t\tfor (int i = -128; i <= 127; i++) {\n-\t\t\tfinal byte test[] = { (byte) i };\n-\t\t\tassertTrue(Arrays.equals(test, Base64.decodeBase64(Base64.encodeBase64(test))));\n-\t\t}\n-\t}\n-\n-\t@Test\n-\tpublic void testSingletonsChunked() {\n-\t\tassertEquals(\"AA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0 })));\n-\t\tassertEquals(\"AQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 1 })));\n-\t\tassertEquals(\"Ag==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 2 })));\n-\t\tassertEquals(\"Aw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 3 })));\n-\t\tassertEquals(\"BA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 4 })));\n-\t\tassertEquals(\"BQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 5 })));\n-\t\tassertEquals(\"Bg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 6 })));\n-\t\tassertEquals(\"Bw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 7 })));\n-\t\tassertEquals(\"CA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 8 })));\n-\t\tassertEquals(\"CQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 9 })));\n-\t\tassertEquals(\"Cg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 10 })));\n-\t\tassertEquals(\"Cw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 11 })));\n-\t\tassertEquals(\"DA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 12 })));\n-\t\tassertEquals(\"DQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 13 })));\n-\t\tassertEquals(\"Dg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 14 })));\n-\t\tassertEquals(\"Dw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 15 })));\n-\t\tassertEquals(\"EA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 16 })));\n-\t\tassertEquals(\"EQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 17 })));\n-\t\tassertEquals(\"Eg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 18 })));\n-\t\tassertEquals(\"Ew==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 19 })));\n-\t\tassertEquals(\"FA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 20 })));\n-\t\tassertEquals(\"FQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 21 })));\n-\t\tassertEquals(\"Fg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 22 })));\n-\t\tassertEquals(\"Fw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 23 })));\n-\t\tassertEquals(\"GA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 24 })));\n-\t\tassertEquals(\"GQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 25 })));\n-\t\tassertEquals(\"Gg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 26 })));\n-\t\tassertEquals(\"Gw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 27 })));\n-\t\tassertEquals(\"HA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 28 })));\n-\t\tassertEquals(\"HQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 29 })));\n-\t\tassertEquals(\"Hg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 30 })));\n-\t\tassertEquals(\"Hw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 31 })));\n-\t\tassertEquals(\"IA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 32 })));\n-\t\tassertEquals(\"IQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 33 })));\n-\t\tassertEquals(\"Ig==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 34 })));\n-\t\tassertEquals(\"Iw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 35 })));\n-\t\tassertEquals(\"JA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 36 })));\n-\t\tassertEquals(\"JQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 37 })));\n-\t\tassertEquals(\"Jg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 38 })));\n-\t\tassertEquals(\"Jw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 39 })));\n-\t\tassertEquals(\"KA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 40 })));\n-\t\tassertEquals(\"KQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 41 })));\n-\t\tassertEquals(\"Kg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 42 })));\n-\t\tassertEquals(\"Kw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 43 })));\n-\t\tassertEquals(\"LA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 44 })));\n-\t\tassertEquals(\"LQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 45 })));\n-\t\tassertEquals(\"Lg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 46 })));\n-\t\tassertEquals(\"Lw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 47 })));\n-\t\tassertEquals(\"MA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 48 })));\n-\t\tassertEquals(\"MQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 49 })));\n-\t\tassertEquals(\"Mg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 50 })));\n-\t\tassertEquals(\"Mw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 51 })));\n-\t\tassertEquals(\"NA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 52 })));\n-\t\tassertEquals(\"NQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 53 })));\n-\t\tassertEquals(\"Ng==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 54 })));\n-\t\tassertEquals(\"Nw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 55 })));\n-\t\tassertEquals(\"OA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 56 })));\n-\t\tassertEquals(\"OQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 57 })));\n-\t\tassertEquals(\"Og==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 58 })));\n-\t\tassertEquals(\"Ow==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 59 })));\n-\t\tassertEquals(\"PA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 60 })));\n-\t\tassertEquals(\"PQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 61 })));\n-\t\tassertEquals(\"Pg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 62 })));\n-\t\tassertEquals(\"Pw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 63 })));\n-\t\tassertEquals(\"QA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 64 })));\n-\t\tassertEquals(\"QQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 65 })));\n-\t\tassertEquals(\"Qg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 66 })));\n-\t\tassertEquals(\"Qw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 67 })));\n-\t\tassertEquals(\"RA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 68 })));\n-\t\tassertEquals(\"RQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 69 })));\n-\t\tassertEquals(\"Rg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 70 })));\n-\t\tassertEquals(\"Rw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 71 })));\n-\t\tassertEquals(\"SA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 72 })));\n-\t\tassertEquals(\"SQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 73 })));\n-\t\tassertEquals(\"Sg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 74 })));\n-\t\tassertEquals(\"Sw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 75 })));\n-\t\tassertEquals(\"TA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 76 })));\n-\t\tassertEquals(\"TQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 77 })));\n-\t\tassertEquals(\"Tg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 78 })));\n-\t\tassertEquals(\"Tw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 79 })));\n-\t\tassertEquals(\"UA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 80 })));\n-\t\tassertEquals(\"UQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 81 })));\n-\t\tassertEquals(\"Ug==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 82 })));\n-\t\tassertEquals(\"Uw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 83 })));\n-\t\tassertEquals(\"VA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 84 })));\n-\t\tassertEquals(\"VQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 85 })));\n-\t\tassertEquals(\"Vg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 86 })));\n-\t\tassertEquals(\"Vw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 87 })));\n-\t\tassertEquals(\"WA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 88 })));\n-\t\tassertEquals(\"WQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 89 })));\n-\t\tassertEquals(\"Wg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 90 })));\n-\t\tassertEquals(\"Ww==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 91 })));\n-\t\tassertEquals(\"XA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 92 })));\n-\t\tassertEquals(\"XQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 93 })));\n-\t\tassertEquals(\"Xg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 94 })));\n-\t\tassertEquals(\"Xw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 95 })));\n-\t\tassertEquals(\"YA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 96 })));\n-\t\tassertEquals(\"YQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 97 })));\n-\t\tassertEquals(\"Yg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 98 })));\n-\t\tassertEquals(\"Yw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 99 })));\n-\t\tassertEquals(\"ZA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 100 })));\n-\t\tassertEquals(\"ZQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 101 })));\n-\t\tassertEquals(\"Zg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 102 })));\n-\t\tassertEquals(\"Zw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 103 })));\n-\t\tassertEquals(\"aA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 104 })));\n-\t}\n-\n-\t@Test\n-\tpublic void testTriplets() {\n-\t\tassertEquals(\"AAAA\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 0 })));\n-\t\tassertEquals(\"AAAB\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 1 })));\n-\t\tassertEquals(\"AAAC\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 2 })));\n-\t\tassertEquals(\"AAAD\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 3 })));\n-\t\tassertEquals(\"AAAE\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 4 })));\n-\t\tassertEquals(\"AAAF\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 5 })));\n-\t\tassertEquals(\"AAAG\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 6 })));\n-\t\tassertEquals(\"AAAH\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 7 })));\n-\t\tassertEquals(\"AAAI\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 8 })));\n-\t\tassertEquals(\"AAAJ\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 9 })));\n-\t\tassertEquals(\"AAAK\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 10 })));\n-\t\tassertEquals(\"AAAL\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 11 })));\n-\t\tassertEquals(\"AAAM\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 12 })));\n-\t\tassertEquals(\"AAAN\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 13 })));\n-\t\tassertEquals(\"AAAO\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 14 })));\n-\t\tassertEquals(\"AAAP\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 15 })));\n-\t\tassertEquals(\"AAAQ\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 16 })));\n-\t\tassertEquals(\"AAAR\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 17 })));\n-\t\tassertEquals(\"AAAS\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 18 })));\n-\t\tassertEquals(\"AAAT\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 19 })));\n-\t\tassertEquals(\"AAAU\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 20 })));\n-\t\tassertEquals(\"AAAV\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 21 })));\n-\t\tassertEquals(\"AAAW\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 22 })));\n-\t\tassertEquals(\"AAAX\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 23 })));\n-\t\tassertEquals(\"AAAY\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 24 })));\n-\t\tassertEquals(\"AAAZ\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 25 })));\n-\t\tassertEquals(\"AAAa\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 26 })));\n-\t\tassertEquals(\"AAAb\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 27 })));\n-\t\tassertEquals(\"AAAc\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 28 })));\n-\t\tassertEquals(\"AAAd\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 29 })));\n-\t\tassertEquals(\"AAAe\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 30 })));\n-\t\tassertEquals(\"AAAf\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 31 })));\n-\t\tassertEquals(\"AAAg\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 32 })));\n-\t\tassertEquals(\"AAAh\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 33 })));\n-\t\tassertEquals(\"AAAi\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 34 })));\n-\t\tassertEquals(\"AAAj\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 35 })));\n-\t\tassertEquals(\"AAAk\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 36 })));\n-\t\tassertEquals(\"AAAl\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 37 })));\n-\t\tassertEquals(\"AAAm\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 38 })));\n-\t\tassertEquals(\"AAAn\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 39 })));\n-\t\tassertEquals(\"AAAo\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 40 })));\n-\t\tassertEquals(\"AAAp\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 41 })));\n-\t\tassertEquals(\"AAAq\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 42 })));\n-\t\tassertEquals(\"AAAr\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 43 })));\n-\t\tassertEquals(\"AAAs\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 44 })));\n-\t\tassertEquals(\"AAAt\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 45 })));\n-\t\tassertEquals(\"AAAu\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 46 })));\n-\t\tassertEquals(\"AAAv\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 47 })));\n-\t\tassertEquals(\"AAAw\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 48 })));\n-\t\tassertEquals(\"AAAx\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 49 })));\n-\t\tassertEquals(\"AAAy\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 50 })));\n-\t\tassertEquals(\"AAAz\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 51 })));\n-\t\tassertEquals(\"AAA0\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 52 })));\n-\t\tassertEquals(\"AAA1\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 53 })));\n-\t\tassertEquals(\"AAA2\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 54 })));\n-\t\tassertEquals(\"AAA3\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 55 })));\n-\t\tassertEquals(\"AAA4\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 56 })));\n-\t\tassertEquals(\"AAA5\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 57 })));\n-\t\tassertEquals(\"AAA6\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 58 })));\n-\t\tassertEquals(\"AAA7\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 59 })));\n-\t\tassertEquals(\"AAA8\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 60 })));\n-\t\tassertEquals(\"AAA9\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 61 })));\n-\t\tassertEquals(\"AAA+\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 62 })));\n-\t\tassertEquals(\"AAA/\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 63 })));\n-\t}\n-\n-\t@Test\n-\tpublic void testTripletsChunked() {\n-\t\tassertEquals(\"AAAA\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 0 })));\n-\t\tassertEquals(\"AAAB\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 1 })));\n-\t\tassertEquals(\"AAAC\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 2 })));\n-\t\tassertEquals(\"AAAD\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 3 })));\n-\t\tassertEquals(\"AAAE\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 4 })));\n-\t\tassertEquals(\"AAAF\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 5 })));\n-\t\tassertEquals(\"AAAG\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 6 })));\n-\t\tassertEquals(\"AAAH\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 7 })));\n-\t\tassertEquals(\"AAAI\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 8 })));\n-\t\tassertEquals(\"AAAJ\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 9 })));\n-\t\tassertEquals(\"AAAK\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 10 })));\n-\t\tassertEquals(\"AAAL\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 11 })));\n-\t\tassertEquals(\"AAAM\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 12 })));\n-\t\tassertEquals(\"AAAN\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 13 })));\n-\t\tassertEquals(\"AAAO\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 14 })));\n-\t\tassertEquals(\"AAAP\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 15 })));\n-\t\tassertEquals(\"AAAQ\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 16 })));\n-\t\tassertEquals(\"AAAR\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 17 })));\n-\t\tassertEquals(\"AAAS\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 18 })));\n-\t\tassertEquals(\"AAAT\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 19 })));\n-\t\tassertEquals(\"AAAU\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 20 })));\n-\t\tassertEquals(\"AAAV\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 21 })));\n-\t\tassertEquals(\"AAAW\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 22 })));\n-\t\tassertEquals(\"AAAX\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 23 })));\n-\t\tassertEquals(\"AAAY\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 24 })));\n-\t\tassertEquals(\"AAAZ\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 25 })));\n-\t\tassertEquals(\"AAAa\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 26 })));\n-\t\tassertEquals(\"AAAb\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 27 })));\n-\t\tassertEquals(\"AAAc\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 28 })));\n-\t\tassertEquals(\"AAAd\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 29 })));\n-\t\tassertEquals(\"AAAe\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 30 })));\n-\t\tassertEquals(\"AAAf\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 31 })));\n-\t\tassertEquals(\"AAAg\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 32 })));\n-\t\tassertEquals(\"AAAh\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 33 })));\n-\t\tassertEquals(\"AAAi\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 34 })));\n-\t\tassertEquals(\"AAAj\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 35 })));\n-\t\tassertEquals(\"AAAk\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 36 })));\n-\t\tassertEquals(\"AAAl\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 37 })));\n-\t\tassertEquals(\"AAAm\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 38 })));\n-\t\tassertEquals(\"AAAn\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 39 })));\n-\t\tassertEquals(\"AAAo\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 40 })));\n-\t\tassertEquals(\"AAAp\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 41 })));\n-\t\tassertEquals(\"AAAq\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 42 })));\n-\t\tassertEquals(\"AAAr\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 43 })));\n-\t\tassertEquals(\"AAAs\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 44 })));\n-\t\tassertEquals(\"AAAt\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 45 })));\n-\t\tassertEquals(\"AAAu\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 46 })));\n-\t\tassertEquals(\"AAAv\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 47 })));\n-\t\tassertEquals(\"AAAw\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 48 })));\n-\t\tassertEquals(\"AAAx\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 49 })));\n-\t\tassertEquals(\"AAAy\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 50 })));\n-\t\tassertEquals(\"AAAz\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 51 })));\n-\t\tassertEquals(\"AAA0\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 52 })));\n-\t\tassertEquals(\"AAA1\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 53 })));\n-\t\tassertEquals(\"AAA2\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 54 })));\n-\t\tassertEquals(\"AAA3\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 55 })));\n-\t\tassertEquals(\"AAA4\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 56 })));\n-\t\tassertEquals(\"AAA5\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 57 })));\n-\t\tassertEquals(\"AAA6\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 58 })));\n-\t\tassertEquals(\"AAA7\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 59 })));\n-\t\tassertEquals(\"AAA8\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 60 })));\n-\t\tassertEquals(\"AAA9\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 61 })));\n-\t\tassertEquals(\"AAA+\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 62 })));\n-\t\tassertEquals(\"AAA/\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 63 })));\n-\t}\n-\n-\t/**\n-\t * Tests url-safe Base64 against random data, sizes 0 to 150.\n-\t */\n-\t@Test\n-\tpublic void testUrlSafe() {\n-\t\t// test random data of sizes 0 thru 150\n-\t\tfor (int i = 0; i <= 150; i++) {\n-\t\t\tfinal byte[][] randomData = Base64TestData.randomData(i, true);\n-\t\t\tfinal byte[] encoded = randomData[1];\n-\t\t\tfinal byte[] decoded = randomData[0];\n-\t\t\tfinal byte[] result = Base64.decodeBase64(encoded);\n-\t\t\tassertTrue(\"url-safe i=\" + i, Arrays.equals(decoded, result));\n-\t\t\tassertFalse(\"url-safe i=\" + i + \" no '='\", Base64TestData.bytesContain(encoded, (byte) '='));\n-\t\t\tassertFalse(\"url-safe i=\" + i + \" no '\\\\'\", Base64TestData.bytesContain(encoded, (byte) '\\\\'));\n-\t\t\tassertFalse(\"url-safe i=\" + i + \" no '+'\", Base64TestData.bytesContain(encoded, (byte) '+'));\n-\t\t}\n-\n-\t}\n-\n-\t/**\n-\t * Base64 encoding of UUID's is a common use-case, especially in URL-SAFE\n-\t * mode. This test case ends up being the \"URL-SAFE\" JUnit's.\n-\t *\n-\t * @throws DecoderException\n-\t *             if Hex.decode() fails - a serious problem since Hex comes\n-\t *             from our own commons-codec!\n-\t */\n-\t@Test\n-\tpublic void testUUID() throws DecoderException {\n-\t\t// The 4 UUID's below contains mixtures of + and / to help us test the\n-\t\t// URL-SAFE encoding mode.\n-\t\tfinal byte[][] ids = new byte[4][];\n-\n-\t\t// ids[0] was chosen so that it encodes with at least one +.\n-\t\tids[0] = Hex.decodeHex(\"94ed8d0319e4493399560fb67404d370\");\n-\n-\t\t// ids[1] was chosen so that it encodes with both / and +.\n-\t\tids[1] = Hex.decodeHex(\"2bf7cc2701fe4397b49ebeed5acc7090\");\n-\n-\t\t// ids[2] was chosen so that it encodes with at least one /.\n-\t\tids[2] = Hex.decodeHex(\"64be154b6ffa40258d1a01288e7c31ca\");\n-\n-\t\t// ids[3] was chosen so that it encodes with both / and +, with /\n-\t\t// right at the beginning.\n-\t\tids[3] = Hex.decodeHex(\"ff7f8fc01cdb471a8c8b5a9306183fe8\");\n-\n-\t\tfinal byte[][] standard = new byte[4][];\n-\t\tstandard[0] = StringUtils.getBytesUtf8(\"lO2NAxnkSTOZVg+2dATTcA==\");\n-\t\tstandard[1] = StringUtils.getBytesUtf8(\"K/fMJwH+Q5e0nr7tWsxwkA==\");\n-\t\tstandard[2] = StringUtils.getBytesUtf8(\"ZL4VS2/6QCWNGgEojnwxyg==\");\n-\t\tstandard[3] = StringUtils.getBytesUtf8(\"/3+PwBzbRxqMi1qTBhg/6A==\");\n-\n-\t\tfinal byte[][] urlSafe1 = new byte[4][];\n-\t\t// regular padding (two '==' signs).\n-\t\turlSafe1[0] = StringUtils.getBytesUtf8(\"lO2NAxnkSTOZVg-2dATTcA==\");\n-\t\turlSafe1[1] = StringUtils.getBytesUtf8(\"K_fMJwH-Q5e0nr7tWsxwkA==\");\n-\t\turlSafe1[2] = StringUtils.getBytesUtf8(\"ZL4VS2_6QCWNGgEojnwxyg==\");\n-\t\turlSafe1[3] = StringUtils.getBytesUtf8(\"_3-PwBzbRxqMi1qTBhg_6A==\");\n-\n-\t\tfinal byte[][] urlSafe2 = new byte[4][];\n-\t\t// single padding (only one '=' sign).\n-\t\turlSafe2[0] = StringUtils.getBytesUtf8(\"lO2NAxnkSTOZVg-2dATTcA=\");\n-\t\turlSafe2[1] = StringUtils.getBytesUtf8(\"K_fMJwH-Q5e0nr7tWsxwkA=\");\n-\t\turlSafe2[2] = StringUtils.getBytesUtf8(\"ZL4VS2_6QCWNGgEojnwxyg=\");\n-\t\turlSafe2[3] = StringUtils.getBytesUtf8(\"_3-PwBzbRxqMi1qTBhg_6A=\");\n-\n-\t\tfinal byte[][] urlSafe3 = new byte[4][];\n-\t\t// no padding (no '=' signs).\n-\t\turlSafe3[0] = StringUtils.getBytesUtf8(\"lO2NAxnkSTOZVg-2dATTcA\");\n-\t\turlSafe3[1] = StringUtils.getBytesUtf8(\"K_fMJwH-Q5e0nr7tWsxwkA\");\n-\t\turlSafe3[2] = StringUtils.getBytesUtf8(\"ZL4VS2_6QCWNGgEojnwxyg\");\n-\t\turlSafe3[3] = StringUtils.getBytesUtf8(\"_3-PwBzbRxqMi1qTBhg_6A\");\n-\n-\t\tfor (int i = 0; i < 4; i++) {\n-\t\t\tfinal byte[] encodedStandard = Base64.encodeBase64(ids[i]);\n-\t\t\tfinal byte[] encodedUrlSafe = Base64.encodeBase64URLSafe(ids[i]);\n-\t\t\tfinal byte[] decodedStandard = Base64.decodeBase64(standard[i]);\n-\t\t\tfinal byte[] decodedUrlSafe1 = Base64.decodeBase64(urlSafe1[i]);\n-\t\t\tfinal byte[] decodedUrlSafe2 = Base64.decodeBase64(urlSafe2[i]);\n-\t\t\tfinal byte[] decodedUrlSafe3 = Base64.decodeBase64(urlSafe3[i]);\n-\n-\t\t\t// Very important debugging output should anyone\n-\t\t\t// ever need to delve closely into this stuff.\n-//\t\t\t{\n-//\t\t\t\tSystem.out.println(\"reference: [\" + Hex.encodeHexString(ids[i]) + \"]\");\n-//\t\t\t\tSystem.out.println(\"standard:  [\" + Hex.encodeHexString(decodedStandard) + \"] From: [\"\n-//\t\t\t\t\t\t+ StringUtils.newStringUtf8(standard[i]) + \"]\");\n-//\t\t\t\tSystem.out.println(\"safe1:     [\" + Hex.encodeHexString(decodedUrlSafe1) + \"] From: [\"\n-//\t\t\t\t\t\t+ StringUtils.newStringUtf8(urlSafe1[i]) + \"]\");\n-//\t\t\t\tSystem.out.println(\"safe2:     [\" + Hex.encodeHexString(decodedUrlSafe2) + \"] From: [\"\n-//\t\t\t\t\t\t+ StringUtils.newStringUtf8(urlSafe2[i]) + \"]\");\n-//\t\t\t\tSystem.out.println(\"safe3:     [\" + Hex.encodeHexString(decodedUrlSafe3) + \"] From: [\"\n-//\t\t\t\t\t\t+ StringUtils.newStringUtf8(urlSafe3[i]) + \"]\");\n-//\t\t\t}\n-\n-\t\t\tassertTrue(\"standard encode uuid\", Arrays.equals(encodedStandard, standard[i]));\n-\t\t\tassertTrue(\"url-safe encode uuid\", Arrays.equals(encodedUrlSafe, urlSafe3[i]));\n-\t\t\tassertTrue(\"standard decode uuid\", Arrays.equals(decodedStandard, ids[i]));\n-\t\t\tassertTrue(\"url-safe1 decode uuid\", Arrays.equals(decodedUrlSafe1, ids[i]));\n-\t\t\tassertTrue(\"url-safe2 decode uuid\", Arrays.equals(decodedUrlSafe2, ids[i]));\n-\t\t\tassertTrue(\"url-safe3 decode uuid\", Arrays.equals(decodedUrlSafe3, ids[i]));\n-\t\t}\n-\t}\n-\n-\t@Test\n-\tpublic void testByteToStringVariations() throws DecoderException {\n-\t\tfinal Base64 base64 = new Base64(0);\n-\t\tfinal byte[] b1 = StringUtils.getBytesUtf8(\"Hello World\");\n-\t\tfinal byte[] b2 = new byte[0];\n-\t\tfinal byte[] b3 = null;\n-\t\tfinal byte[] b4 = Hex.decodeHex(\"2bf7cc2701fe4397b49ebeed5acc7090\"); // for\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// url-safe\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// tests\n-\n-\t\tassertEquals(\"byteToString Hello World\", \"SGVsbG8gV29ybGQ=\", base64.encodeToString(b1));\n-\t\tassertEquals(\"byteToString static Hello World\", \"SGVsbG8gV29ybGQ=\", Base64.encodeBase64String(b1));\n-\t\tassertEquals(\"byteToString \\\"\\\"\", \"\", base64.encodeToString(b2));\n-\t\tassertEquals(\"byteToString static \\\"\\\"\", \"\", Base64.encodeBase64String(b2));\n-\t\tassertEquals(\"byteToString null\", null, base64.encodeToString(b3));\n-\t\tassertEquals(\"byteToString static null\", null, Base64.encodeBase64String(b3));\n-\t\tassertEquals(\"byteToString UUID\", \"K/fMJwH+Q5e0nr7tWsxwkA==\", base64.encodeToString(b4));\n-\t\tassertEquals(\"byteToString static UUID\", \"K/fMJwH+Q5e0nr7tWsxwkA==\", Base64.encodeBase64String(b4));\n-\t\tassertEquals(\"byteToString static-url-safe UUID\", \"K_fMJwH-Q5e0nr7tWsxwkA\",\n-\t\t\t\tBase64.encodeBase64URLSafeString(b4));\n-\t}\n-\n-\t@Test\n-\tpublic void testStringToByteVariations() throws DecoderException {\n-\t\tfinal Base64 base64 = new Base64();\n-\t\tfinal String s1 = \"SGVsbG8gV29ybGQ=\\r\\n\";\n-\t\tfinal String s2 = \"\";\n-\t\tfinal String s3 = null;\n-\t\tfinal String s4a = \"K/fMJwH+Q5e0nr7tWsxwkA==\\r\\n\";\n-\t\tfinal String s4b = \"K_fMJwH-Q5e0nr7tWsxwkA\";\n-\t\tfinal byte[] b4 = Hex.decodeHex(\"2bf7cc2701fe4397b49ebeed5acc7090\"); // for\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// url-safe\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// tests\n-\n-\t\tassertEquals(\"StringToByte Hello World\", \"Hello World\", StringUtils.newStringUtf8(base64.decode(s1)));\n-\t\tassertEquals(\"StringToByte Hello World\", \"Hello World\",\n-\t\t\t\tStringUtils.newStringUtf8((byte[]) base64.decode((Object) s1)));\n-\t\tassertEquals(\"StringToByte static Hello World\", \"Hello World\",\n-\t\t\t\tStringUtils.newStringUtf8(Base64.decodeBase64(s1)));\n-\t\tassertEquals(\"StringToByte \\\"\\\"\", \"\", StringUtils.newStringUtf8(base64.decode(s2)));\n-\t\tassertEquals(\"StringToByte static \\\"\\\"\", \"\", StringUtils.newStringUtf8(Base64.decodeBase64(s2)));\n-\t\tassertEquals(\"StringToByte null\", null, StringUtils.newStringUtf8(base64.decode(s3)));\n-\t\tassertEquals(\"StringToByte static null\", null, StringUtils.newStringUtf8(Base64.decodeBase64(s3)));\n-\t\tassertTrue(\"StringToByte UUID\", Arrays.equals(b4, base64.decode(s4b)));\n-\t\tassertTrue(\"StringToByte static UUID\", Arrays.equals(b4, Base64.decodeBase64(s4a)));\n-\t\tassertTrue(\"StringToByte static-url-safe UUID\", Arrays.equals(b4, Base64.decodeBase64(s4b)));\n-\t}\n-\n-\tprivate String toString(final byte[] data) {\n-\t\tfinal StringBuilder buf = new StringBuilder();\n-\t\tfor (int i = 0; i < data.length; i++) {\n-\t\t\tbuf.append(data[i]);\n-\t\t\tif (i != data.length - 1) {\n-\t\t\t\tbuf.append(\",\");\n-\t\t\t}\n-\t\t}\n-\t\treturn buf.toString();\n-\t}\n-\n-\t/**\n-\t * Tests a lineSeparator much bigger than DEFAULT_BUFFER_SIZE.\n-\t *\n-\t * @see \"<a href='http://mail-archives.apache.org/mod_mbox/commons-dev/201202.mbox/%3C4F3C85D7.5060706@snafu.de%3E'>dev@commons.apache.org</a>\"\n-\t */\n-\t@Test\n-\t@Ignore\n-\tpublic void testHugeLineSeparator() {\n-\t\tfinal int BaseNCodec_DEFAULT_BUFFER_SIZE = 8192;\n-\t\tfinal int Base64_BYTES_PER_ENCODED_BLOCK = 4;\n-\t\tfinal byte[] baLineSeparator = new byte[BaseNCodec_DEFAULT_BUFFER_SIZE * 4 - 3];\n-\t\tfinal Base64 b64 = new Base64(Base64_BYTES_PER_ENCODED_BLOCK, baLineSeparator);\n-\t\tfinal String strOriginal = \"Hello World\";\n-\t\tfinal String strDecoded = new String(b64.decode(b64.encode(StringUtils.getBytesUtf8(strOriginal))));\n-\t\tassertEquals(\"testDEFAULT_BUFFER_SIZE\", strOriginal, strDecoded);\n-\t}\n+    private static final Charset CHARSET_UTF8 = Charsets.UTF_8;\n+\n+    private final Random random = new Random();\n+\n+    /**\n+     * @return Returns the random.\n+     */\n+    public Random getRandom() {\n+        return this.random;\n+    }\n+\n+    /**\n+     * Test the isStringBase64 method.\n+     */\n+    @Test\n+    public void testIsStringBase64() {\n+        final String nullString = null;\n+        final String emptyString = \"\";\n+        final String validString = \"abc===defg\\n\\r123456\\r789\\r\\rABC\\n\\nDEF==GHI\\r\\nJKL==============\";\n+        final String invalidString = validString + (char) 0; // append null\n+                                                                // character\n+\n+        try {\n+            Base64.isBase64(nullString);\n+            fail(\"Base64.isStringBase64() should not be null-safe.\");\n+        } catch (final NullPointerException npe) {\n+            assertNotNull(\"Base64.isStringBase64() should not be null-safe.\", npe);\n+        }\n+\n+        assertTrue(\"Base64.isStringBase64(empty-string) is true\", Base64.isBase64(emptyString));\n+        assertTrue(\"Base64.isStringBase64(valid-string) is true\", Base64.isBase64(validString));\n+        assertFalse(\"Base64.isStringBase64(invalid-string) is false\", Base64.isBase64(invalidString));\n+    }\n+\n+    /**\n+     * Test the Base64 implementation\n+     */\n+    @Test\n+    public void testBase64() {\n+        final String content = \"Hello World\";\n+        String encodedContent;\n+        byte[] encodedBytes = Base64.encodeBase64(StringUtils.getBytesUtf8(content));\n+        encodedContent = StringUtils.newStringUtf8(encodedBytes);\n+        assertEquals(\"encoding hello world\", \"SGVsbG8gV29ybGQ=\", encodedContent);\n+\n+        Base64 b64 = new Base64(BaseNCodec.MIME_CHUNK_SIZE, null); // null\n+                                                                    // lineSeparator\n+                                                                    // same as\n+                                                                    // saying\n+                                                                    // no-chunking\n+        encodedBytes = b64.encode(StringUtils.getBytesUtf8(content));\n+        encodedContent = StringUtils.newStringUtf8(encodedBytes);\n+        assertEquals(\"encoding hello world\", \"SGVsbG8gV29ybGQ=\", encodedContent);\n+\n+        b64 = new Base64(0, null); // null lineSeparator same as saying\n+                                    // no-chunking\n+        encodedBytes = b64.encode(StringUtils.getBytesUtf8(content));\n+        encodedContent = StringUtils.newStringUtf8(encodedBytes);\n+        assertEquals(\"encoding hello world\", \"SGVsbG8gV29ybGQ=\", encodedContent);\n+\n+        // bogus characters to decode (to skip actually) {e-acute*6}\n+        final byte[] decode = b64.decode(\"SGVsbG{\\u00e9\\u00e9\\u00e9\\u00e9\\u00e9\\u00e9}8gV29ybGQ=\");\n+        final String decodeString = StringUtils.newStringUtf8(decode);\n+        assertEquals(\"decode hello world\", \"Hello World\", decodeString);\n+    }\n+\n+    @Test\n+    public void testBase64AtBufferStart() {\n+        testBase64InBuffer(0, 100);\n+    }\n+\n+    @Test\n+    public void testBase64AtBufferEnd() {\n+        testBase64InBuffer(100, 0);\n+    }\n+\n+    @Test\n+    public void testBase64AtBufferMiddle() {\n+        testBase64InBuffer(100, 100);\n+    }\n+\n+    private void testBase64InBuffer(int startPasSize, int endPadSize) {\n+        final String content = \"Hello World\";\n+        String encodedContent;\n+        final byte[] bytesUtf8 = StringUtils.getBytesUtf8(content);\n+        byte[] buffer = ArrayUtils.addAll(bytesUtf8, new byte[endPadSize]);\n+        buffer = ArrayUtils.addAll(new byte[startPasSize], buffer);\n+        byte[] encodedBytes = new Base64().encode(buffer, startPasSize, bytesUtf8.length);\n+        encodedContent = StringUtils.newStringUtf8(encodedBytes);\n+        assertEquals(\"encoding hello world\", \"SGVsbG8gV29ybGQ=\", encodedContent);\n+    }\n+\n+    /**\n+     * Test our decode with pad character in the middle. (Our current\n+     * implementation: halt decode and return what we've got so far).\n+     *\n+     * The point of this test is not to say\n+     * \"this is the correct way to decode base64.\" The point is simply to keep\n+     * us aware of the current logic since 1.4 so we don't accidentally break it\n+     * without realizing.\n+     *\n+     * Note for historians. The 1.3 logic would decode to:\n+     * \"Hello World\\u0000Hello World\" -- null in the middle --- and 1.4\n+     * unwittingly changed it to current logic.\n+     */\n+    @Test\n+    public void testDecodeWithInnerPad() {\n+        final String content = \"SGVsbG8gV29ybGQ=SGVsbG8gV29ybGQ=\";\n+        final byte[] result = Base64.decodeBase64(content);\n+        final byte[] shouldBe = StringUtils.getBytesUtf8(\"Hello World\");\n+        assertTrue(\"decode should halt at pad (=)\", Arrays.equals(result, shouldBe));\n+    }\n+\n+    /**\n+     * Tests Base64.encodeBase64().\n+     */\n+    @Test\n+    public void testChunkedEncodeMultipleOf76() {\n+        final byte[] expectedEncode = Base64.encodeBase64(Base64TestData.DECODED, true);\n+        // convert to \"\\r\\n\" so we're equal to the old openssl encoding test\n+        // stored\n+        // in Base64TestData.ENCODED_76_CHARS_PER_LINE:\n+        final String actualResult = Base64TestData.ENCODED_76_CHARS_PER_LINE.replaceAll(\"\\n\", \"\\r\\n\");\n+        final byte[] actualEncode = StringUtils.getBytesUtf8(actualResult);\n+        assertTrue(\"chunkedEncodeMultipleOf76\", Arrays.equals(expectedEncode, actualEncode));\n+    }\n+\n+    /**\n+     * CODEC-68: isBase64 throws ArrayIndexOutOfBoundsException on some\n+     * non-BASE64 bytes\n+     */\n+    @Test\n+    public void testCodec68() {\n+        final byte[] x = new byte[] { 'n', 'A', '=', '=', (byte) 0x9c };\n+        Base64.decodeBase64(x);\n+    }\n+\n+    @Test\n+    public void testCodeInteger1() {\n+        final String encodedInt1 = \"li7dzDacuo67Jg7mtqEm2TRuOMU=\";\n+        final BigInteger bigInt1 = new BigInteger(\"85739377120809420210425962799\" + \"0318636601332086981\");\n+\n+        assertEquals(encodedInt1, new String(Base64.encodeInteger(bigInt1)));\n+        assertEquals(bigInt1, Base64.decodeInteger(encodedInt1.getBytes(CHARSET_UTF8)));\n+    }\n+\n+    @Test\n+    public void testCodeInteger2() {\n+        final String encodedInt2 = \"9B5ypLY9pMOmtxCeTDHgwdNFeGs=\";\n+        final BigInteger bigInt2 = new BigInteger(\"13936727572861167254666467268\" + \"91466679477132949611\");\n+\n+        assertEquals(encodedInt2, new String(Base64.encodeInteger(bigInt2)));\n+        assertEquals(bigInt2, Base64.decodeInteger(encodedInt2.getBytes(CHARSET_UTF8)));\n+    }\n+\n+    @Test\n+    public void testCodeInteger3() {\n+        final String encodedInt3 = \"FKIhdgaG5LGKiEtF1vHy4f3y700zaD6QwDS3IrNVGzNp2\"\n+                + \"rY+1LFWTK6D44AyiC1n8uWz1itkYMZF0/aKDK0Yjg==\";\n+        final BigInteger bigInt3 = new BigInteger(\n+                \"10806548154093873461951748545\" + \"1196989136416448805819079363524309897749044958112417136240557\"\n+                        + \"4495062430572478766856090958495998158114332651671116876320938126\");\n+\n+        assertEquals(encodedInt3, new String(Base64.encodeInteger(bigInt3)));\n+        assertEquals(bigInt3, Base64.decodeInteger(encodedInt3.getBytes(CHARSET_UTF8)));\n+    }\n+\n+    @Test\n+    public void testCodeInteger4() {\n+        final String encodedInt4 = \"ctA8YGxrtngg/zKVvqEOefnwmViFztcnPBYPlJsvh6yKI\"\n+                + \"4iDm68fnp4Mi3RrJ6bZAygFrUIQLxLjV+OJtgJAEto0xAs+Mehuq1DkSFEpP3o\"\n+                + \"DzCTOsrOiS1DwQe4oIb7zVk/9l7aPtJMHW0LVlMdwZNFNNJoqMcT2ZfCPrfvYv\" + \"Q0=\";\n+        final BigInteger bigInt4 = new BigInteger(\n+                \"80624726256040348115552042320\" + \"6968135001872753709424419772586693950232350200555646471175944\"\n+                        + \"519297087885987040810778908507262272892702303774422853675597\"\n+                        + \"748008534040890923814202286633163248086055216976551456088015\"\n+                        + \"338880713818192088877057717530169381044092839402438015097654\"\n+                        + \"53542091716518238707344493641683483917\");\n+\n+        assertEquals(encodedInt4, new String(Base64.encodeInteger(bigInt4)));\n+        assertEquals(bigInt4, Base64.decodeInteger(encodedInt4.getBytes(CHARSET_UTF8)));\n+    }\n+\n+    @Test\n+    public void testCodeIntegerEdgeCases() {\n+        // TODO\n+    }\n+\n+    @Test\n+    public void testCodeIntegerNull() {\n+        try {\n+            Base64.encodeInteger(null);\n+            fail(\"Exception not thrown when passing in null to encodeInteger(BigInteger)\");\n+        } catch (final NullPointerException npe) {\n+            // expected\n+        } catch (final Exception e) {\n+            fail(\"Incorrect Exception caught when passing in null to encodeInteger(BigInteger)\");\n+        }\n+    }\n+\n+    @Test\n+    public void testConstructors() {\n+        Base64 base64;\n+        base64 = new Base64();\n+        base64 = new Base64(-1);\n+        base64 = new Base64(-1, new byte[] {});\n+        base64 = new Base64(64, new byte[] {});\n+        try {\n+            base64 = new Base64(-1, new byte[] { 'A' }); // TODO do we need to\n+                                                            // check sep if len\n+                                                            // = -1?\n+            fail(\"Should have rejected attempt to use 'A' as a line separator\");\n+        } catch (final IllegalArgumentException ignored) {\n+            // Expected\n+        }\n+        try {\n+            base64 = new Base64(64, new byte[] { 'A' });\n+            fail(\"Should have rejected attempt to use 'A' as a line separator\");\n+        } catch (final IllegalArgumentException ignored) {\n+            // Expected\n+        }\n+        try {\n+            base64 = new Base64(64, new byte[] { '=' });\n+            fail(\"Should have rejected attempt to use '=' as a line separator\");\n+        } catch (final IllegalArgumentException ignored) {\n+            // Expected\n+        }\n+        base64 = new Base64(64, new byte[] { '$' }); // OK\n+        try {\n+            base64 = new Base64(64, new byte[] { 'A', '$' });\n+            fail(\"Should have rejected attempt to use 'A$' as a line separator\");\n+        } catch (final IllegalArgumentException ignored) {\n+            // Expected\n+        }\n+        base64 = new Base64(64, new byte[] { ' ', '$', '\\n', '\\r', '\\t' }); // OK\n+        assertNotNull(base64);\n+    }\n+\n+    @Test\n+    public void testConstructor_Int_ByteArray_Boolean() {\n+        final Base64 base64 = new Base64(65, new byte[] { '\\t' }, false);\n+        final byte[] encoded = base64.encode(Base64TestData.DECODED);\n+        String expectedResult = Base64TestData.ENCODED_64_CHARS_PER_LINE;\n+        expectedResult = expectedResult.replace('\\n', '\\t');\n+        final String result = StringUtils.newStringUtf8(encoded);\n+        assertEquals(\"new Base64(65, \\\\t, false)\", expectedResult, result);\n+    }\n+\n+    @Test\n+    public void testConstructor_Int_ByteArray_Boolean_UrlSafe() {\n+        // url-safe variation\n+        final Base64 base64 = new Base64(64, new byte[] { '\\t' }, true);\n+        final byte[] encoded = base64.encode(Base64TestData.DECODED);\n+        String expectedResult = Base64TestData.ENCODED_64_CHARS_PER_LINE;\n+        expectedResult = expectedResult.replaceAll(\"=\", \"\"); // url-safe has no\n+                                                                // == padding.\n+        expectedResult = expectedResult.replace('\\n', '\\t');\n+        expectedResult = expectedResult.replace('+', '-');\n+        expectedResult = expectedResult.replace('/', '_');\n+        final String result = StringUtils.newStringUtf8(encoded);\n+        assertEquals(\"new Base64(64, \\\\t, true)\", result, expectedResult);\n+    }\n+\n+    /**\n+     * Tests conditional true branch for \"marker0\" test.\n+     */\n+    @Test\n+    public void testDecodePadMarkerIndex2() {\n+        assertEquals(\"A\", new String(Base64.decodeBase64(\"QQ==\".getBytes(CHARSET_UTF8))));\n+    }\n+\n+    /**\n+     * Tests conditional branches for \"marker1\" test.\n+     */\n+    @Test\n+    public void testDecodePadMarkerIndex3() {\n+        assertEquals(\"AA\", new String(Base64.decodeBase64(\"QUE=\".getBytes(CHARSET_UTF8))));\n+        assertEquals(\"AAA\", new String(Base64.decodeBase64(\"QUFB\".getBytes(CHARSET_UTF8))));\n+    }\n+\n+    @Test\n+    public void testDecodePadOnly() {\n+        assertEquals(0, Base64.decodeBase64(\"====\".getBytes(CHARSET_UTF8)).length);\n+        assertEquals(\"\", new String(Base64.decodeBase64(\"====\".getBytes(CHARSET_UTF8))));\n+        // Test truncated padding\n+        assertEquals(0, Base64.decodeBase64(\"===\".getBytes(CHARSET_UTF8)).length);\n+        assertEquals(0, Base64.decodeBase64(\"==\".getBytes(CHARSET_UTF8)).length);\n+        assertEquals(0, Base64.decodeBase64(\"=\".getBytes(CHARSET_UTF8)).length);\n+        assertEquals(0, Base64.decodeBase64(\"\".getBytes(CHARSET_UTF8)).length);\n+    }\n+\n+    @Test\n+    public void testDecodePadOnlyChunked() {\n+        assertEquals(0, Base64.decodeBase64(\"====\\n\".getBytes(CHARSET_UTF8)).length);\n+        assertEquals(\"\", new String(Base64.decodeBase64(\"====\\n\".getBytes(CHARSET_UTF8))));\n+        // Test truncated padding\n+        assertEquals(0, Base64.decodeBase64(\"===\\n\".getBytes(CHARSET_UTF8)).length);\n+        assertEquals(0, Base64.decodeBase64(\"==\\n\".getBytes(CHARSET_UTF8)).length);\n+        assertEquals(0, Base64.decodeBase64(\"=\\n\".getBytes(CHARSET_UTF8)).length);\n+        assertEquals(0, Base64.decodeBase64(\"\\n\".getBytes(CHARSET_UTF8)).length);\n+    }\n+\n+    @Test\n+    public void testDecodeWithWhitespace() throws Exception {\n+\n+        final String orig = \"I am a late night coder.\";\n+\n+        final byte[] encodedArray = Base64.encodeBase64(orig.getBytes(CHARSET_UTF8));\n+        final StringBuilder intermediate = new StringBuilder(new String(encodedArray));\n+\n+        intermediate.insert(2, ' ');\n+        intermediate.insert(5, '\\t');\n+        intermediate.insert(10, '\\r');\n+        intermediate.insert(15, '\\n');\n+\n+        final byte[] encodedWithWS = intermediate.toString().getBytes(CHARSET_UTF8);\n+        final byte[] decodedWithWS = Base64.decodeBase64(encodedWithWS);\n+\n+        final String dest = new String(decodedWithWS);\n+\n+        assertEquals(\"Dest string doesn't equal the original\", orig, dest);\n+    }\n+\n+    /**\n+     * Test encode and decode of empty byte array.\n+     */\n+    @Test\n+    public void testEmptyBase64() {\n+        byte[] empty = new byte[0];\n+        byte[] result = Base64.encodeBase64(empty);\n+        assertEquals(\"empty base64 encode\", 0, result.length);\n+        assertEquals(\"empty base64 encode\", null, Base64.encodeBase64(null));\n+\n+        empty = new byte[0];\n+        result = Base64.decodeBase64(empty);\n+        assertEquals(\"empty base64 decode\", 0, result.length);\n+        assertEquals(\"empty base64 encode\", null, Base64.decodeBase64((byte[]) null));\n+    }\n+\n+    // encode/decode a large random array\n+    @Test\n+    public void testEncodeDecodeRandom() {\n+        for (int i = 1; i < 5; i++) {\n+            final byte[] data = new byte[this.getRandom().nextInt(10000) + 1];\n+            this.getRandom().nextBytes(data);\n+            final byte[] enc = Base64.encodeBase64(data);\n+            assertTrue(Base64.isBase64(enc));\n+            final byte[] data2 = Base64.decodeBase64(enc);\n+            assertTrue(Arrays.equals(data, data2));\n+        }\n+    }\n+\n+    // encode/decode random arrays from size 0 to size 11\n+    @Test\n+    public void testEncodeDecodeSmall() {\n+        for (int i = 0; i < 12; i++) {\n+            final byte[] data = new byte[i];\n+            this.getRandom().nextBytes(data);\n+            final byte[] enc = Base64.encodeBase64(data);\n+            assertTrue(\"\\\"\" + new String(enc) + \"\\\" is Base64 data.\", Base64.isBase64(enc));\n+            final byte[] data2 = Base64.decodeBase64(enc);\n+            assertTrue(toString(data) + \" equals \" + toString(data2), Arrays.equals(data, data2));\n+        }\n+    }\n+\n+    @Test\n+    public void testEncodeOverMaxSize() throws Exception {\n+        testEncodeOverMaxSize(-1);\n+        testEncodeOverMaxSize(0);\n+        testEncodeOverMaxSize(1);\n+        testEncodeOverMaxSize(2);\n+    }\n+\n+    @Test\n+    public void testCodec112() { // size calculation assumes always chunked\n+        final byte[] in = new byte[] { 0 };\n+        final byte[] out = Base64.encodeBase64(in);\n+        Base64.encodeBase64(in, false, false, out.length);\n+    }\n+\n+    private void testEncodeOverMaxSize(final int maxSize) throws Exception {\n+        try {\n+            Base64.encodeBase64(Base64TestData.DECODED, true, false, maxSize);\n+            fail(\"Expected \" + IllegalArgumentException.class.getName());\n+        } catch (final IllegalArgumentException e) {\n+            // Expected\n+        }\n+    }\n+\n+    @Test\n+    public void testIgnoringNonBase64InDecode() throws Exception {\n+        assertEquals(\"The quick brown fox jumped over the lazy dogs.\",\n+                new String(Base64.decodeBase64(\n+                        \"VGhlIH@$#$@%F1aWN@#@#@@rIGJyb3duIGZve\\n\\r\\t%#%#%#%CBqd##$#$W1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\"\n+                                .getBytes(CHARSET_UTF8))));\n+    }\n+\n+    @Test\n+    public void testIsArrayByteBase64() {\n+        assertFalse(Base64.isBase64(new byte[] { Byte.MIN_VALUE }));\n+        assertFalse(Base64.isBase64(new byte[] { -125 }));\n+        assertFalse(Base64.isBase64(new byte[] { -10 }));\n+        assertFalse(Base64.isBase64(new byte[] { 0 }));\n+        assertFalse(Base64.isBase64(new byte[] { 64, Byte.MAX_VALUE }));\n+        assertFalse(Base64.isBase64(new byte[] { Byte.MAX_VALUE }));\n+        assertTrue(Base64.isBase64(new byte[] { 'A' }));\n+        assertFalse(Base64.isBase64(new byte[] { 'A', Byte.MIN_VALUE }));\n+        assertTrue(Base64.isBase64(new byte[] { 'A', 'Z', 'a' }));\n+        assertTrue(Base64.isBase64(new byte[] { '/', '=', '+' }));\n+        assertFalse(Base64.isBase64(new byte[] { '$' }));\n+    }\n+\n+    /**\n+     * Tests isUrlSafe.\n+     */\n+    @Test\n+    public void testIsUrlSafe() {\n+        final Base64 base64Standard = new Base64(false);\n+        final Base64 base64URLSafe = new Base64(true);\n+\n+        assertFalse(\"Base64.isUrlSafe=false\", base64Standard.isUrlSafe());\n+        assertTrue(\"Base64.isUrlSafe=true\", base64URLSafe.isUrlSafe());\n+\n+        final byte[] whiteSpace = { ' ', '\\n', '\\r', '\\t' };\n+        assertTrue(\"Base64.isBase64(whiteSpace)=true\", Base64.isBase64(whiteSpace));\n+    }\n+\n+    @Test\n+    public void testKnownDecodings() {\n+        assertEquals(\"The quick brown fox jumped over the lazy dogs.\", new String(Base64.decodeBase64(\n+                \"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\".getBytes(CHARSET_UTF8))));\n+        assertEquals(\"It was the best of times, it was the worst of times.\", new String(Base64.decodeBase64(\n+                \"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==\".getBytes(CHARSET_UTF8))));\n+        assertEquals(\"http://jakarta.apache.org/commmons\", new String(\n+                Base64.decodeBase64(\"aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==\".getBytes(CHARSET_UTF8))));\n+        assertEquals(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\", new String(Base64.decodeBase64(\n+                \"QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==\".getBytes(CHARSET_UTF8))));\n+        assertEquals(\"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\",\n+                new String(Base64.decodeBase64(\"eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0=\".getBytes(CHARSET_UTF8))));\n+        assertEquals(\"xyzzy!\", new String(Base64.decodeBase64(\"eHl6enkh\".getBytes(CHARSET_UTF8))));\n+    }\n+\n+    @Test\n+    public void testKnownEncodings() {\n+        assertEquals(\"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\", new String(\n+                Base64.encodeBase64(\"The quick brown fox jumped over the lazy dogs.\".getBytes(CHARSET_UTF8))));\n+        assertEquals(\n+                \"YmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJs\\r\\nYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFo\\r\\nIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBi\\r\\nbGFoIGJsYWg=\\r\\n\",\n+                new String(Base64.encodeBase64Chunked(\n+                        \"blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah\"\n+                                .getBytes(CHARSET_UTF8))));\n+        assertEquals(\"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==\", new String(\n+                Base64.encodeBase64(\"It was the best of times, it was the worst of times.\".getBytes(CHARSET_UTF8))));\n+        assertEquals(\"aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==\",\n+                new String(Base64.encodeBase64(\"http://jakarta.apache.org/commmons\".getBytes(CHARSET_UTF8))));\n+        assertEquals(\"QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==\", new String(\n+                Base64.encodeBase64(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\".getBytes(CHARSET_UTF8))));\n+        assertEquals(\"eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0=\",\n+                new String(Base64.encodeBase64(\"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\".getBytes(CHARSET_UTF8))));\n+        assertEquals(\"eHl6enkh\", new String(Base64.encodeBase64(\"xyzzy!\".getBytes(CHARSET_UTF8))));\n+    }\n+\n+    @Test\n+    public void testNonBase64Test() throws Exception {\n+\n+        final byte[] bArray = { '%' };\n+\n+        assertFalse(\"Invalid Base64 array was incorrectly validated as \" + \"an array of Base64 encoded data\",\n+                Base64.isBase64(bArray));\n+\n+        try {\n+            final Base64 b64 = new Base64();\n+            final byte[] result = b64.decode(bArray);\n+\n+            assertEquals(\"The result should be empty as the test encoded content did \"\n+                    + \"not contain any valid base 64 characters\", 0, result.length);\n+        } catch (final Exception e) {\n+            fail(\"Exception was thrown when trying to decode \"\n+                    + \"invalid base64 encoded data - RFC 2045 requires that all \"\n+                    + \"non base64 character be discarded, an exception should not\" + \" have been thrown\");\n+        }\n+    }\n+\n+    @Test\n+    public void testObjectDecodeWithInvalidParameter() throws Exception {\n+        final Base64 b64 = new Base64();\n+\n+        try {\n+            b64.decode(Integer.valueOf(5));\n+            fail(\"decode(Object) didn't throw an exception when passed an Integer object\");\n+        } catch (final DecoderException e) {\n+            // ignored\n+        }\n+\n+    }\n+\n+    @Test\n+    public void testObjectDecodeWithValidParameter() throws Exception {\n+\n+        final String original = \"Hello World!\";\n+        final Object o = Base64.encodeBase64(original.getBytes(CHARSET_UTF8));\n+\n+        final Base64 b64 = new Base64();\n+        final Object oDecoded = b64.decode(o);\n+        final byte[] baDecoded = (byte[]) oDecoded;\n+        final String dest = new String(baDecoded);\n+\n+        assertEquals(\"dest string does not equal original\", original, dest);\n+    }\n+\n+    @Test\n+    public void testObjectEncodeWithInvalidParameter() throws Exception {\n+        final Base64 b64 = new Base64();\n+        try {\n+            b64.encode(\"Yadayadayada\");\n+            fail(\"encode(Object) didn't throw an exception when passed a String object\");\n+        } catch (final EncoderException e) {\n+            // Expected\n+        }\n+    }\n+\n+    @Test\n+    public void testObjectEncodeWithValidParameter() throws Exception {\n+\n+        final String original = \"Hello World!\";\n+        final Object origObj = original.getBytes(CHARSET_UTF8);\n+\n+        final Base64 b64 = new Base64();\n+        final Object oEncoded = b64.encode(origObj);\n+        final byte[] bArray = Base64.decodeBase64((byte[]) oEncoded);\n+        final String dest = new String(bArray);\n+\n+        assertEquals(\"dest string does not equal original\", original, dest);\n+    }\n+\n+    @Test\n+    public void testObjectEncode() throws Exception {\n+        final Base64 b64 = new Base64();\n+        assertEquals(\"SGVsbG8gV29ybGQ=\", new String(b64.encode(\"Hello World\".getBytes(CHARSET_UTF8))));\n+    }\n+\n+    @Test\n+    public void testPairs() {\n+        assertEquals(\"AAA=\", new String(Base64.encodeBase64(new byte[] { 0, 0 })));\n+        for (int i = -128; i <= 127; i++) {\n+            final byte test[] = { (byte) i, (byte) i };\n+            assertTrue(Arrays.equals(test, Base64.decodeBase64(Base64.encodeBase64(test))));\n+        }\n+    }\n+\n+    /**\n+     * Tests RFC 2045 section 2.1 CRLF definition.\n+     */\n+    @Test\n+    public void testRfc2045Section2Dot1CrLfDefinition() {\n+        assertTrue(Arrays.equals(new byte[] { 13, 10 }, Base64.CHUNK_SEPARATOR));\n+    }\n+\n+    /**\n+     * Tests RFC 2045 section 6.8 chuck size definition.\n+     */\n+    @Test\n+    public void testRfc2045Section6Dot8ChunkSizeDefinition() {\n+        assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);\n+    }\n+\n+    /**\n+     * Tests RFC 1421 section 4.3.2.4 chuck size definition.\n+     */\n+    @Test\n+    public void testRfc1421Section6Dot8ChunkSizeDefinition() {\n+        assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);\n+    }\n+\n+    /**\n+     * Tests RFC 4648 section 10 test vectors.\n+     * <ul>\n+     * <li>BASE64(\"\") = \"\"</li>\n+     * <li>BASE64(\"f\") = \"Zg==\"</li>\n+     * <li>BASE64(\"fo\") = \"Zm8=\"</li>\n+     * <li>BASE64(\"foo\") = \"Zm9v\"</li>\n+     * <li>BASE64(\"foob\") = \"Zm9vYg==\"</li>\n+     * <li>BASE64(\"fooba\") = \"Zm9vYmE=\"</li>\n+     * <li>BASE64(\"foobar\") = \"Zm9vYmFy\"</li>\n+     * </ul>\n+     *\n+     * @see <a href=\"http://tools.ietf.org/html/rfc4648\">http://tools.ietf.org/\n+     *      html/rfc4648</a>\n+     */\n+    @Test\n+    public void testRfc4648Section10Decode() {\n+        assertEquals(\"\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"\")));\n+        assertEquals(\"f\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zg==\")));\n+        assertEquals(\"fo\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm8=\")));\n+        assertEquals(\"foo\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9v\")));\n+        assertEquals(\"foob\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9vYg==\")));\n+        assertEquals(\"fooba\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9vYmE=\")));\n+        assertEquals(\"foobar\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9vYmFy\")));\n+    }\n+\n+    /**\n+     * Tests RFC 4648 section 10 test vectors.\n+     * <ul>\n+     * <li>BASE64(\"\") = \"\"</li>\n+     * <li>BASE64(\"f\") = \"Zg==\"</li>\n+     * <li>BASE64(\"fo\") = \"Zm8=\"</li>\n+     * <li>BASE64(\"foo\") = \"Zm9v\"</li>\n+     * <li>BASE64(\"foob\") = \"Zm9vYg==\"</li>\n+     * <li>BASE64(\"fooba\") = \"Zm9vYmE=\"</li>\n+     * <li>BASE64(\"foobar\") = \"Zm9vYmFy\"</li>\n+     * </ul>\n+     *\n+     * @see <a href=\"http://tools.ietf.org/html/rfc4648\">http://tools.ietf.org/\n+     *      html/rfc4648</a>\n+     */\n+    @Test\n+    public void testRfc4648Section10DecodeWithCrLf() {\n+        final String CRLF = StringUtils.newStringUsAscii(Base64.CHUNK_SEPARATOR);\n+        assertEquals(\"\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"\" + CRLF)));\n+        assertEquals(\"f\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zg==\" + CRLF)));\n+        assertEquals(\"fo\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm8=\" + CRLF)));\n+        assertEquals(\"foo\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9v\" + CRLF)));\n+        assertEquals(\"foob\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9vYg==\" + CRLF)));\n+        assertEquals(\"fooba\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9vYmE=\" + CRLF)));\n+        assertEquals(\"foobar\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9vYmFy\" + CRLF)));\n+    }\n+\n+    /**\n+     * Tests RFC 4648 section 10 test vectors.\n+     * <ul>\n+     * <li>BASE64(\"\") = \"\"</li>\n+     * <li>BASE64(\"f\") = \"Zg==\"</li>\n+     * <li>BASE64(\"fo\") = \"Zm8=\"</li>\n+     * <li>BASE64(\"foo\") = \"Zm9v\"</li>\n+     * <li>BASE64(\"foob\") = \"Zm9vYg==\"</li>\n+     * <li>BASE64(\"fooba\") = \"Zm9vYmE=\"</li>\n+     * <li>BASE64(\"foobar\") = \"Zm9vYmFy\"</li>\n+     * </ul>\n+     *\n+     * @see <a href=\"http://tools.ietf.org/html/rfc4648\">http://tools.ietf.org/\n+     *      html/rfc4648</a>\n+     */\n+    @Test\n+    public void testRfc4648Section10Encode() {\n+        assertEquals(\"\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"\")));\n+        assertEquals(\"Zg==\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"f\")));\n+        assertEquals(\"Zm8=\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"fo\")));\n+        assertEquals(\"Zm9v\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"foo\")));\n+        assertEquals(\"Zm9vYg==\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"foob\")));\n+        assertEquals(\"Zm9vYmE=\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"fooba\")));\n+        assertEquals(\"Zm9vYmFy\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"foobar\")));\n+    }\n+\n+    /**\n+     * Tests RFC 4648 section 10 test vectors.\n+     * <ul>\n+     * <li>BASE64(\"\") = \"\"</li>\n+     * <li>BASE64(\"f\") = \"Zg==\"</li>\n+     * <li>BASE64(\"fo\") = \"Zm8=\"</li>\n+     * <li>BASE64(\"foo\") = \"Zm9v\"</li>\n+     * <li>BASE64(\"foob\") = \"Zm9vYg==\"</li>\n+     * <li>BASE64(\"fooba\") = \"Zm9vYmE=\"</li>\n+     * <li>BASE64(\"foobar\") = \"Zm9vYmFy\"</li>\n+     * </ul>\n+     *\n+     * @see <a href=\"http://tools.ietf.org/html/rfc4648\">http://tools.ietf.org/\n+     *      html/rfc4648</a>\n+     */\n+    @Test\n+    public void testRfc4648Section10DecodeEncode() {\n+        testDecodeEncode(\"\");\n+        testDecodeEncode(\"Zg==\");\n+        testDecodeEncode(\"Zm8=\");\n+        testDecodeEncode(\"Zm9v\");\n+        testDecodeEncode(\"Zm9vYg==\");\n+        testDecodeEncode(\"Zm9vYmE=\");\n+        testDecodeEncode(\"Zm9vYmFy\");\n+    }\n+\n+    private void testDecodeEncode(final String encodedText) {\n+        final String decodedText = StringUtils.newStringUsAscii(Base64.decodeBase64(encodedText));\n+        final String encodedText2 = Base64.encodeBase64String(StringUtils.getBytesUtf8(decodedText));\n+        assertEquals(encodedText, encodedText2);\n+    }\n+\n+    /**\n+     * Tests RFC 4648 section 10 test vectors.\n+     * <ul>\n+     * <li>BASE64(\"\") = \"\"</li>\n+     * <li>BASE64(\"f\") = \"Zg==\"</li>\n+     * <li>BASE64(\"fo\") = \"Zm8=\"</li>\n+     * <li>BASE64(\"foo\") = \"Zm9v\"</li>\n+     * <li>BASE64(\"foob\") = \"Zm9vYg==\"</li>\n+     * <li>BASE64(\"fooba\") = \"Zm9vYmE=\"</li>\n+     * <li>BASE64(\"foobar\") = \"Zm9vYmFy\"</li>\n+     * </ul>\n+     *\n+     * @see <a href=\"http://tools.ietf.org/html/rfc4648\">http://tools.ietf.org/\n+     *      html/rfc4648</a>\n+     */\n+    @Test\n+    public void testRfc4648Section10EncodeDecode() {\n+        testEncodeDecode(\"\");\n+        testEncodeDecode(\"f\");\n+        testEncodeDecode(\"fo\");\n+        testEncodeDecode(\"foo\");\n+        testEncodeDecode(\"foob\");\n+        testEncodeDecode(\"fooba\");\n+        testEncodeDecode(\"foobar\");\n+    }\n+\n+    private void testEncodeDecode(final String plainText) {\n+        final String encodedText = Base64.encodeBase64String(StringUtils.getBytesUtf8(plainText));\n+        final String decodedText = StringUtils.newStringUsAscii(Base64.decodeBase64(encodedText));\n+        assertEquals(plainText, decodedText);\n+    }\n+\n+    @Test\n+    public void testSingletons() {\n+        assertEquals(\"AA==\", new String(Base64.encodeBase64(new byte[] { (byte) 0 })));\n+        assertEquals(\"AQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 1 })));\n+        assertEquals(\"Ag==\", new String(Base64.encodeBase64(new byte[] { (byte) 2 })));\n+        assertEquals(\"Aw==\", new String(Base64.encodeBase64(new byte[] { (byte) 3 })));\n+        assertEquals(\"BA==\", new String(Base64.encodeBase64(new byte[] { (byte) 4 })));\n+        assertEquals(\"BQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 5 })));\n+        assertEquals(\"Bg==\", new String(Base64.encodeBase64(new byte[] { (byte) 6 })));\n+        assertEquals(\"Bw==\", new String(Base64.encodeBase64(new byte[] { (byte) 7 })));\n+        assertEquals(\"CA==\", new String(Base64.encodeBase64(new byte[] { (byte) 8 })));\n+        assertEquals(\"CQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 9 })));\n+        assertEquals(\"Cg==\", new String(Base64.encodeBase64(new byte[] { (byte) 10 })));\n+        assertEquals(\"Cw==\", new String(Base64.encodeBase64(new byte[] { (byte) 11 })));\n+        assertEquals(\"DA==\", new String(Base64.encodeBase64(new byte[] { (byte) 12 })));\n+        assertEquals(\"DQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 13 })));\n+        assertEquals(\"Dg==\", new String(Base64.encodeBase64(new byte[] { (byte) 14 })));\n+        assertEquals(\"Dw==\", new String(Base64.encodeBase64(new byte[] { (byte) 15 })));\n+        assertEquals(\"EA==\", new String(Base64.encodeBase64(new byte[] { (byte) 16 })));\n+        assertEquals(\"EQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 17 })));\n+        assertEquals(\"Eg==\", new String(Base64.encodeBase64(new byte[] { (byte) 18 })));\n+        assertEquals(\"Ew==\", new String(Base64.encodeBase64(new byte[] { (byte) 19 })));\n+        assertEquals(\"FA==\", new String(Base64.encodeBase64(new byte[] { (byte) 20 })));\n+        assertEquals(\"FQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 21 })));\n+        assertEquals(\"Fg==\", new String(Base64.encodeBase64(new byte[] { (byte) 22 })));\n+        assertEquals(\"Fw==\", new String(Base64.encodeBase64(new byte[] { (byte) 23 })));\n+        assertEquals(\"GA==\", new String(Base64.encodeBase64(new byte[] { (byte) 24 })));\n+        assertEquals(\"GQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 25 })));\n+        assertEquals(\"Gg==\", new String(Base64.encodeBase64(new byte[] { (byte) 26 })));\n+        assertEquals(\"Gw==\", new String(Base64.encodeBase64(new byte[] { (byte) 27 })));\n+        assertEquals(\"HA==\", new String(Base64.encodeBase64(new byte[] { (byte) 28 })));\n+        assertEquals(\"HQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 29 })));\n+        assertEquals(\"Hg==\", new String(Base64.encodeBase64(new byte[] { (byte) 30 })));\n+        assertEquals(\"Hw==\", new String(Base64.encodeBase64(new byte[] { (byte) 31 })));\n+        assertEquals(\"IA==\", new String(Base64.encodeBase64(new byte[] { (byte) 32 })));\n+        assertEquals(\"IQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 33 })));\n+        assertEquals(\"Ig==\", new String(Base64.encodeBase64(new byte[] { (byte) 34 })));\n+        assertEquals(\"Iw==\", new String(Base64.encodeBase64(new byte[] { (byte) 35 })));\n+        assertEquals(\"JA==\", new String(Base64.encodeBase64(new byte[] { (byte) 36 })));\n+        assertEquals(\"JQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 37 })));\n+        assertEquals(\"Jg==\", new String(Base64.encodeBase64(new byte[] { (byte) 38 })));\n+        assertEquals(\"Jw==\", new String(Base64.encodeBase64(new byte[] { (byte) 39 })));\n+        assertEquals(\"KA==\", new String(Base64.encodeBase64(new byte[] { (byte) 40 })));\n+        assertEquals(\"KQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 41 })));\n+        assertEquals(\"Kg==\", new String(Base64.encodeBase64(new byte[] { (byte) 42 })));\n+        assertEquals(\"Kw==\", new String(Base64.encodeBase64(new byte[] { (byte) 43 })));\n+        assertEquals(\"LA==\", new String(Base64.encodeBase64(new byte[] { (byte) 44 })));\n+        assertEquals(\"LQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 45 })));\n+        assertEquals(\"Lg==\", new String(Base64.encodeBase64(new byte[] { (byte) 46 })));\n+        assertEquals(\"Lw==\", new String(Base64.encodeBase64(new byte[] { (byte) 47 })));\n+        assertEquals(\"MA==\", new String(Base64.encodeBase64(new byte[] { (byte) 48 })));\n+        assertEquals(\"MQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 49 })));\n+        assertEquals(\"Mg==\", new String(Base64.encodeBase64(new byte[] { (byte) 50 })));\n+        assertEquals(\"Mw==\", new String(Base64.encodeBase64(new byte[] { (byte) 51 })));\n+        assertEquals(\"NA==\", new String(Base64.encodeBase64(new byte[] { (byte) 52 })));\n+        assertEquals(\"NQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 53 })));\n+        assertEquals(\"Ng==\", new String(Base64.encodeBase64(new byte[] { (byte) 54 })));\n+        assertEquals(\"Nw==\", new String(Base64.encodeBase64(new byte[] { (byte) 55 })));\n+        assertEquals(\"OA==\", new String(Base64.encodeBase64(new byte[] { (byte) 56 })));\n+        assertEquals(\"OQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 57 })));\n+        assertEquals(\"Og==\", new String(Base64.encodeBase64(new byte[] { (byte) 58 })));\n+        assertEquals(\"Ow==\", new String(Base64.encodeBase64(new byte[] { (byte) 59 })));\n+        assertEquals(\"PA==\", new String(Base64.encodeBase64(new byte[] { (byte) 60 })));\n+        assertEquals(\"PQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 61 })));\n+        assertEquals(\"Pg==\", new String(Base64.encodeBase64(new byte[] { (byte) 62 })));\n+        assertEquals(\"Pw==\", new String(Base64.encodeBase64(new byte[] { (byte) 63 })));\n+        assertEquals(\"QA==\", new String(Base64.encodeBase64(new byte[] { (byte) 64 })));\n+        assertEquals(\"QQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 65 })));\n+        assertEquals(\"Qg==\", new String(Base64.encodeBase64(new byte[] { (byte) 66 })));\n+        assertEquals(\"Qw==\", new String(Base64.encodeBase64(new byte[] { (byte) 67 })));\n+        assertEquals(\"RA==\", new String(Base64.encodeBase64(new byte[] { (byte) 68 })));\n+        assertEquals(\"RQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 69 })));\n+        assertEquals(\"Rg==\", new String(Base64.encodeBase64(new byte[] { (byte) 70 })));\n+        assertEquals(\"Rw==\", new String(Base64.encodeBase64(new byte[] { (byte) 71 })));\n+        assertEquals(\"SA==\", new String(Base64.encodeBase64(new byte[] { (byte) 72 })));\n+        assertEquals(\"SQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 73 })));\n+        assertEquals(\"Sg==\", new String(Base64.encodeBase64(new byte[] { (byte) 74 })));\n+        assertEquals(\"Sw==\", new String(Base64.encodeBase64(new byte[] { (byte) 75 })));\n+        assertEquals(\"TA==\", new String(Base64.encodeBase64(new byte[] { (byte) 76 })));\n+        assertEquals(\"TQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 77 })));\n+        assertEquals(\"Tg==\", new String(Base64.encodeBase64(new byte[] { (byte) 78 })));\n+        assertEquals(\"Tw==\", new String(Base64.encodeBase64(new byte[] { (byte) 79 })));\n+        assertEquals(\"UA==\", new String(Base64.encodeBase64(new byte[] { (byte) 80 })));\n+        assertEquals(\"UQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 81 })));\n+        assertEquals(\"Ug==\", new String(Base64.encodeBase64(new byte[] { (byte) 82 })));\n+        assertEquals(\"Uw==\", new String(Base64.encodeBase64(new byte[] { (byte) 83 })));\n+        assertEquals(\"VA==\", new String(Base64.encodeBase64(new byte[] { (byte) 84 })));\n+        assertEquals(\"VQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 85 })));\n+        assertEquals(\"Vg==\", new String(Base64.encodeBase64(new byte[] { (byte) 86 })));\n+        assertEquals(\"Vw==\", new String(Base64.encodeBase64(new byte[] { (byte) 87 })));\n+        assertEquals(\"WA==\", new String(Base64.encodeBase64(new byte[] { (byte) 88 })));\n+        assertEquals(\"WQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 89 })));\n+        assertEquals(\"Wg==\", new String(Base64.encodeBase64(new byte[] { (byte) 90 })));\n+        assertEquals(\"Ww==\", new String(Base64.encodeBase64(new byte[] { (byte) 91 })));\n+        assertEquals(\"XA==\", new String(Base64.encodeBase64(new byte[] { (byte) 92 })));\n+        assertEquals(\"XQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 93 })));\n+        assertEquals(\"Xg==\", new String(Base64.encodeBase64(new byte[] { (byte) 94 })));\n+        assertEquals(\"Xw==\", new String(Base64.encodeBase64(new byte[] { (byte) 95 })));\n+        assertEquals(\"YA==\", new String(Base64.encodeBase64(new byte[] { (byte) 96 })));\n+        assertEquals(\"YQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 97 })));\n+        assertEquals(\"Yg==\", new String(Base64.encodeBase64(new byte[] { (byte) 98 })));\n+        assertEquals(\"Yw==\", new String(Base64.encodeBase64(new byte[] { (byte) 99 })));\n+        assertEquals(\"ZA==\", new String(Base64.encodeBase64(new byte[] { (byte) 100 })));\n+        assertEquals(\"ZQ==\", new String(Base64.encodeBase64(new byte[] { (byte) 101 })));\n+        assertEquals(\"Zg==\", new String(Base64.encodeBase64(new byte[] { (byte) 102 })));\n+        assertEquals(\"Zw==\", new String(Base64.encodeBase64(new byte[] { (byte) 103 })));\n+        assertEquals(\"aA==\", new String(Base64.encodeBase64(new byte[] { (byte) 104 })));\n+        for (int i = -128; i <= 127; i++) {\n+            final byte test[] = { (byte) i };\n+            assertTrue(Arrays.equals(test, Base64.decodeBase64(Base64.encodeBase64(test))));\n+        }\n+    }\n+\n+    @Test\n+    public void testSingletonsChunked() {\n+        assertEquals(\"AA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0 })));\n+        assertEquals(\"AQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 1 })));\n+        assertEquals(\"Ag==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 2 })));\n+        assertEquals(\"Aw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 3 })));\n+        assertEquals(\"BA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 4 })));\n+        assertEquals(\"BQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 5 })));\n+        assertEquals(\"Bg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 6 })));\n+        assertEquals(\"Bw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 7 })));\n+        assertEquals(\"CA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 8 })));\n+        assertEquals(\"CQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 9 })));\n+        assertEquals(\"Cg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 10 })));\n+        assertEquals(\"Cw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 11 })));\n+        assertEquals(\"DA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 12 })));\n+        assertEquals(\"DQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 13 })));\n+        assertEquals(\"Dg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 14 })));\n+        assertEquals(\"Dw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 15 })));\n+        assertEquals(\"EA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 16 })));\n+        assertEquals(\"EQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 17 })));\n+        assertEquals(\"Eg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 18 })));\n+        assertEquals(\"Ew==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 19 })));\n+        assertEquals(\"FA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 20 })));\n+        assertEquals(\"FQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 21 })));\n+        assertEquals(\"Fg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 22 })));\n+        assertEquals(\"Fw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 23 })));\n+        assertEquals(\"GA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 24 })));\n+        assertEquals(\"GQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 25 })));\n+        assertEquals(\"Gg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 26 })));\n+        assertEquals(\"Gw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 27 })));\n+        assertEquals(\"HA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 28 })));\n+        assertEquals(\"HQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 29 })));\n+        assertEquals(\"Hg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 30 })));\n+        assertEquals(\"Hw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 31 })));\n+        assertEquals(\"IA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 32 })));\n+        assertEquals(\"IQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 33 })));\n+        assertEquals(\"Ig==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 34 })));\n+        assertEquals(\"Iw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 35 })));\n+        assertEquals(\"JA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 36 })));\n+        assertEquals(\"JQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 37 })));\n+        assertEquals(\"Jg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 38 })));\n+        assertEquals(\"Jw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 39 })));\n+        assertEquals(\"KA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 40 })));\n+        assertEquals(\"KQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 41 })));\n+        assertEquals(\"Kg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 42 })));\n+        assertEquals(\"Kw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 43 })));\n+        assertEquals(\"LA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 44 })));\n+        assertEquals(\"LQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 45 })));\n+        assertEquals(\"Lg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 46 })));\n+        assertEquals(\"Lw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 47 })));\n+        assertEquals(\"MA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 48 })));\n+        assertEquals(\"MQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 49 })));\n+        assertEquals(\"Mg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 50 })));\n+        assertEquals(\"Mw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 51 })));\n+        assertEquals(\"NA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 52 })));\n+        assertEquals(\"NQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 53 })));\n+        assertEquals(\"Ng==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 54 })));\n+        assertEquals(\"Nw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 55 })));\n+        assertEquals(\"OA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 56 })));\n+        assertEquals(\"OQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 57 })));\n+        assertEquals(\"Og==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 58 })));\n+        assertEquals(\"Ow==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 59 })));\n+        assertEquals(\"PA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 60 })));\n+        assertEquals(\"PQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 61 })));\n+        assertEquals(\"Pg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 62 })));\n+        assertEquals(\"Pw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 63 })));\n+        assertEquals(\"QA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 64 })));\n+        assertEquals(\"QQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 65 })));\n+        assertEquals(\"Qg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 66 })));\n+        assertEquals(\"Qw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 67 })));\n+        assertEquals(\"RA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 68 })));\n+        assertEquals(\"RQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 69 })));\n+        assertEquals(\"Rg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 70 })));\n+        assertEquals(\"Rw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 71 })));\n+        assertEquals(\"SA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 72 })));\n+        assertEquals(\"SQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 73 })));\n+        assertEquals(\"Sg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 74 })));\n+        assertEquals(\"Sw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 75 })));\n+        assertEquals(\"TA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 76 })));\n+        assertEquals(\"TQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 77 })));\n+        assertEquals(\"Tg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 78 })));\n+        assertEquals(\"Tw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 79 })));\n+        assertEquals(\"UA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 80 })));\n+        assertEquals(\"UQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 81 })));\n+        assertEquals(\"Ug==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 82 })));\n+        assertEquals(\"Uw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 83 })));\n+        assertEquals(\"VA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 84 })));\n+        assertEquals(\"VQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 85 })));\n+        assertEquals(\"Vg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 86 })));\n+        assertEquals(\"Vw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 87 })));\n+        assertEquals(\"WA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 88 })));\n+        assertEquals(\"WQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 89 })));\n+        assertEquals(\"Wg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 90 })));\n+        assertEquals(\"Ww==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 91 })));\n+        assertEquals(\"XA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 92 })));\n+        assertEquals(\"XQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 93 })));\n+        assertEquals(\"Xg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 94 })));\n+        assertEquals(\"Xw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 95 })));\n+        assertEquals(\"YA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 96 })));\n+        assertEquals(\"YQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 97 })));\n+        assertEquals(\"Yg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 98 })));\n+        assertEquals(\"Yw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 99 })));\n+        assertEquals(\"ZA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 100 })));\n+        assertEquals(\"ZQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 101 })));\n+        assertEquals(\"Zg==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 102 })));\n+        assertEquals(\"Zw==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 103 })));\n+        assertEquals(\"aA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 104 })));\n+    }\n+\n+    @Test\n+    public void testTriplets() {\n+        assertEquals(\"AAAA\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 0 })));\n+        assertEquals(\"AAAB\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 1 })));\n+        assertEquals(\"AAAC\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 2 })));\n+        assertEquals(\"AAAD\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 3 })));\n+        assertEquals(\"AAAE\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 4 })));\n+        assertEquals(\"AAAF\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 5 })));\n+        assertEquals(\"AAAG\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 6 })));\n+        assertEquals(\"AAAH\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 7 })));\n+        assertEquals(\"AAAI\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 8 })));\n+        assertEquals(\"AAAJ\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 9 })));\n+        assertEquals(\"AAAK\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 10 })));\n+        assertEquals(\"AAAL\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 11 })));\n+        assertEquals(\"AAAM\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 12 })));\n+        assertEquals(\"AAAN\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 13 })));\n+        assertEquals(\"AAAO\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 14 })));\n+        assertEquals(\"AAAP\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 15 })));\n+        assertEquals(\"AAAQ\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 16 })));\n+        assertEquals(\"AAAR\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 17 })));\n+        assertEquals(\"AAAS\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 18 })));\n+        assertEquals(\"AAAT\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 19 })));\n+        assertEquals(\"AAAU\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 20 })));\n+        assertEquals(\"AAAV\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 21 })));\n+        assertEquals(\"AAAW\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 22 })));\n+        assertEquals(\"AAAX\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 23 })));\n+        assertEquals(\"AAAY\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 24 })));\n+        assertEquals(\"AAAZ\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 25 })));\n+        assertEquals(\"AAAa\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 26 })));\n+        assertEquals(\"AAAb\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 27 })));\n+        assertEquals(\"AAAc\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 28 })));\n+        assertEquals(\"AAAd\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 29 })));\n+        assertEquals(\"AAAe\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 30 })));\n+        assertEquals(\"AAAf\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 31 })));\n+        assertEquals(\"AAAg\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 32 })));\n+        assertEquals(\"AAAh\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 33 })));\n+        assertEquals(\"AAAi\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 34 })));\n+        assertEquals(\"AAAj\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 35 })));\n+        assertEquals(\"AAAk\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 36 })));\n+        assertEquals(\"AAAl\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 37 })));\n+        assertEquals(\"AAAm\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 38 })));\n+        assertEquals(\"AAAn\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 39 })));\n+        assertEquals(\"AAAo\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 40 })));\n+        assertEquals(\"AAAp\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 41 })));\n+        assertEquals(\"AAAq\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 42 })));\n+        assertEquals(\"AAAr\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 43 })));\n+        assertEquals(\"AAAs\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 44 })));\n+        assertEquals(\"AAAt\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 45 })));\n+        assertEquals(\"AAAu\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 46 })));\n+        assertEquals(\"AAAv\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 47 })));\n+        assertEquals(\"AAAw\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 48 })));\n+        assertEquals(\"AAAx\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 49 })));\n+        assertEquals(\"AAAy\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 50 })));\n+        assertEquals(\"AAAz\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 51 })));\n+        assertEquals(\"AAA0\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 52 })));\n+        assertEquals(\"AAA1\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 53 })));\n+        assertEquals(\"AAA2\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 54 })));\n+        assertEquals(\"AAA3\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 55 })));\n+        assertEquals(\"AAA4\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 56 })));\n+        assertEquals(\"AAA5\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 57 })));\n+        assertEquals(\"AAA6\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 58 })));\n+        assertEquals(\"AAA7\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 59 })));\n+        assertEquals(\"AAA8\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 60 })));\n+        assertEquals(\"AAA9\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 61 })));\n+        assertEquals(\"AAA+\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 62 })));\n+        assertEquals(\"AAA/\", new String(Base64.encodeBase64(new byte[] { (byte) 0, (byte) 0, (byte) 63 })));\n+    }\n+\n+    @Test\n+    public void testTripletsChunked() {\n+        assertEquals(\"AAAA\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 0 })));\n+        assertEquals(\"AAAB\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 1 })));\n+        assertEquals(\"AAAC\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 2 })));\n+        assertEquals(\"AAAD\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 3 })));\n+        assertEquals(\"AAAE\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 4 })));\n+        assertEquals(\"AAAF\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 5 })));\n+        assertEquals(\"AAAG\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 6 })));\n+        assertEquals(\"AAAH\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 7 })));\n+        assertEquals(\"AAAI\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 8 })));\n+        assertEquals(\"AAAJ\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 9 })));\n+        assertEquals(\"AAAK\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 10 })));\n+        assertEquals(\"AAAL\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 11 })));\n+        assertEquals(\"AAAM\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 12 })));\n+        assertEquals(\"AAAN\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 13 })));\n+        assertEquals(\"AAAO\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 14 })));\n+        assertEquals(\"AAAP\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 15 })));\n+        assertEquals(\"AAAQ\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 16 })));\n+        assertEquals(\"AAAR\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 17 })));\n+        assertEquals(\"AAAS\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 18 })));\n+        assertEquals(\"AAAT\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 19 })));\n+        assertEquals(\"AAAU\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 20 })));\n+        assertEquals(\"AAAV\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 21 })));\n+        assertEquals(\"AAAW\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 22 })));\n+        assertEquals(\"AAAX\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 23 })));\n+        assertEquals(\"AAAY\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 24 })));\n+        assertEquals(\"AAAZ\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 25 })));\n+        assertEquals(\"AAAa\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 26 })));\n+        assertEquals(\"AAAb\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 27 })));\n+        assertEquals(\"AAAc\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 28 })));\n+        assertEquals(\"AAAd\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 29 })));\n+        assertEquals(\"AAAe\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 30 })));\n+        assertEquals(\"AAAf\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 31 })));\n+        assertEquals(\"AAAg\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 32 })));\n+        assertEquals(\"AAAh\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 33 })));\n+        assertEquals(\"AAAi\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 34 })));\n+        assertEquals(\"AAAj\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 35 })));\n+        assertEquals(\"AAAk\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 36 })));\n+        assertEquals(\"AAAl\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 37 })));\n+        assertEquals(\"AAAm\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 38 })));\n+        assertEquals(\"AAAn\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 39 })));\n+        assertEquals(\"AAAo\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 40 })));\n+        assertEquals(\"AAAp\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 41 })));\n+        assertEquals(\"AAAq\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 42 })));\n+        assertEquals(\"AAAr\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 43 })));\n+        assertEquals(\"AAAs\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 44 })));\n+        assertEquals(\"AAAt\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 45 })));\n+        assertEquals(\"AAAu\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 46 })));\n+        assertEquals(\"AAAv\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 47 })));\n+        assertEquals(\"AAAw\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 48 })));\n+        assertEquals(\"AAAx\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 49 })));\n+        assertEquals(\"AAAy\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 50 })));\n+        assertEquals(\"AAAz\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 51 })));\n+        assertEquals(\"AAA0\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 52 })));\n+        assertEquals(\"AAA1\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 53 })));\n+        assertEquals(\"AAA2\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 54 })));\n+        assertEquals(\"AAA3\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 55 })));\n+        assertEquals(\"AAA4\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 56 })));\n+        assertEquals(\"AAA5\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 57 })));\n+        assertEquals(\"AAA6\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 58 })));\n+        assertEquals(\"AAA7\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 59 })));\n+        assertEquals(\"AAA8\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 60 })));\n+        assertEquals(\"AAA9\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 61 })));\n+        assertEquals(\"AAA+\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 62 })));\n+        assertEquals(\"AAA/\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[] { (byte) 0, (byte) 0, (byte) 63 })));\n+    }\n+\n+    /**\n+     * Tests url-safe Base64 against random data, sizes 0 to 150.\n+     */\n+    @Test\n+    public void testUrlSafe() {\n+        // test random data of sizes 0 thru 150\n+        for (int i = 0; i <= 150; i++) {\n+            final byte[][] randomData = Base64TestData.randomData(i, true);\n+            final byte[] encoded = randomData[1];\n+            final byte[] decoded = randomData[0];\n+            final byte[] result = Base64.decodeBase64(encoded);\n+            assertTrue(\"url-safe i=\" + i, Arrays.equals(decoded, result));\n+            assertFalse(\"url-safe i=\" + i + \" no '='\", Base64TestData.bytesContain(encoded, (byte) '='));\n+            assertFalse(\"url-safe i=\" + i + \" no '\\\\'\", Base64TestData.bytesContain(encoded, (byte) '\\\\'));\n+            assertFalse(\"url-safe i=\" + i + \" no '+'\", Base64TestData.bytesContain(encoded, (byte) '+'));\n+        }\n+\n+    }\n+\n+    /**\n+     * Base64 encoding of UUID's is a common use-case, especially in URL-SAFE\n+     * mode. This test case ends up being the \"URL-SAFE\" JUnit's.\n+     *\n+     * @throws DecoderException\n+     *             if Hex.decode() fails - a serious problem since Hex comes\n+     *             from our own commons-codec!\n+     */\n+    @Test\n+    public void testUUID() throws DecoderException {\n+        // The 4 UUID's below contains mixtures of + and / to help us test the\n+        // URL-SAFE encoding mode.\n+        final byte[][] ids = new byte[4][];\n+\n+        // ids[0] was chosen so that it encodes with at least one +.\n+        ids[0] = Hex.decodeHex(\"94ed8d0319e4493399560fb67404d370\");\n+\n+        // ids[1] was chosen so that it encodes with both / and +.\n+        ids[1] = Hex.decodeHex(\"2bf7cc2701fe4397b49ebeed5acc7090\");\n+\n+        // ids[2] was chosen so that it encodes with at least one /.\n+        ids[2] = Hex.decodeHex(\"64be154b6ffa40258d1a01288e7c31ca\");\n+\n+        // ids[3] was chosen so that it encodes with both / and +, with /\n+        // right at the beginning.\n+        ids[3] = Hex.decodeHex(\"ff7f8fc01cdb471a8c8b5a9306183fe8\");\n+\n+        final byte[][] standard = new byte[4][];\n+        standard[0] = StringUtils.getBytesUtf8(\"lO2NAxnkSTOZVg+2dATTcA==\");\n+        standard[1] = StringUtils.getBytesUtf8(\"K/fMJwH+Q5e0nr7tWsxwkA==\");\n+        standard[2] = StringUtils.getBytesUtf8(\"ZL4VS2/6QCWNGgEojnwxyg==\");\n+        standard[3] = StringUtils.getBytesUtf8(\"/3+PwBzbRxqMi1qTBhg/6A==\");\n+\n+        final byte[][] urlSafe1 = new byte[4][];\n+        // regular padding (two '==' signs).\n+        urlSafe1[0] = StringUtils.getBytesUtf8(\"lO2NAxnkSTOZVg-2dATTcA==\");\n+        urlSafe1[1] = StringUtils.getBytesUtf8(\"K_fMJwH-Q5e0nr7tWsxwkA==\");\n+        urlSafe1[2] = StringUtils.getBytesUtf8(\"ZL4VS2_6QCWNGgEojnwxyg==\");\n+        urlSafe1[3] = StringUtils.getBytesUtf8(\"_3-PwBzbRxqMi1qTBhg_6A==\");\n+\n+        final byte[][] urlSafe2 = new byte[4][];\n+        // single padding (only one '=' sign).\n+        urlSafe2[0] = StringUtils.getBytesUtf8(\"lO2NAxnkSTOZVg-2dATTcA=\");\n+        urlSafe2[1] = StringUtils.getBytesUtf8(\"K_fMJwH-Q5e0nr7tWsxwkA=\");\n+        urlSafe2[2] = StringUtils.getBytesUtf8(\"ZL4VS2_6QCWNGgEojnwxyg=\");\n+        urlSafe2[3] = StringUtils.getBytesUtf8(\"_3-PwBzbRxqMi1qTBhg_6A=\");\n+\n+        final byte[][] urlSafe3 = new byte[4][];\n+        // no padding (no '=' signs).\n+        urlSafe3[0] = StringUtils.getBytesUtf8(\"lO2NAxnkSTOZVg-2dATTcA\");\n+        urlSafe3[1] = StringUtils.getBytesUtf8(\"K_fMJwH-Q5e0nr7tWsxwkA\");\n+        urlSafe3[2] = StringUtils.getBytesUtf8(\"ZL4VS2_6QCWNGgEojnwxyg\");\n+        urlSafe3[3] = StringUtils.getBytesUtf8(\"_3-PwBzbRxqMi1qTBhg_6A\");\n+\n+        for (int i = 0; i < 4; i++) {\n+            final byte[] encodedStandard = Base64.encodeBase64(ids[i]);\n+            final byte[] encodedUrlSafe = Base64.encodeBase64URLSafe(ids[i]);\n+            final byte[] decodedStandard = Base64.decodeBase64(standard[i]);\n+            final byte[] decodedUrlSafe1 = Base64.decodeBase64(urlSafe1[i]);\n+            final byte[] decodedUrlSafe2 = Base64.decodeBase64(urlSafe2[i]);\n+            final byte[] decodedUrlSafe3 = Base64.decodeBase64(urlSafe3[i]);\n+\n+            // Very important debugging output should anyone\n+            // ever need to delve closely into this stuff.\n+//            {\n+//                System.out.println(\"reference: [\" + Hex.encodeHexString(ids[i]) + \"]\");\n+//                System.out.println(\"standard:  [\" + Hex.encodeHexString(decodedStandard) + \"] From: [\"\n+//                        + StringUtils.newStringUtf8(standard[i]) + \"]\");\n+//                System.out.println(\"safe1:     [\" + Hex.encodeHexString(decodedUrlSafe1) + \"] From: [\"\n+//                        + StringUtils.newStringUtf8(urlSafe1[i]) + \"]\");\n+//                System.out.println(\"safe2:     [\" + Hex.encodeHexString(decodedUrlSafe2) + \"] From: [\"\n+//                        + StringUtils.newStringUtf8(urlSafe2[i]) + \"]\");\n+//                System.out.println(\"safe3:     [\" + Hex.encodeHexString(decodedUrlSafe3) + \"] From: [\"\n+//                        + StringUtils.newStringUtf8(urlSafe3[i]) + \"]\");\n+//            }\n+\n+            assertTrue(\"standard encode uuid\", Arrays.equals(encodedStandard, standard[i]));\n+            assertTrue(\"url-safe encode uuid\", Arrays.equals(encodedUrlSafe, urlSafe3[i]));\n+            assertTrue(\"standard decode uuid\", Arrays.equals(decodedStandard, ids[i]));\n+            assertTrue(\"url-safe1 decode uuid\", Arrays.equals(decodedUrlSafe1, ids[i]));\n+            assertTrue(\"url-safe2 decode uuid\", Arrays.equals(decodedUrlSafe2, ids[i]));\n+            assertTrue(\"url-safe3 decode uuid\", Arrays.equals(decodedUrlSafe3, ids[i]));\n+        }\n+    }\n+\n+    @Test\n+    public void testByteToStringVariations() throws DecoderException {\n+        final Base64 base64 = new Base64(0);\n+        final byte[] b1 = StringUtils.getBytesUtf8(\"Hello World\");\n+        final byte[] b2 = new byte[0];\n+        final byte[] b3 = null;\n+        final byte[] b4 = Hex.decodeHex(\"2bf7cc2701fe4397b49ebeed5acc7090\"); // for\n+                                                                                            // url-safe\n+                                                                                            // tests\n+\n+        assertEquals(\"byteToString Hello World\", \"SGVsbG8gV29ybGQ=\", base64.encodeToString(b1));\n+        assertEquals(\"byteToString static Hello World\", \"SGVsbG8gV29ybGQ=\", Base64.encodeBase64String(b1));\n+        assertEquals(\"byteToString \\\"\\\"\", \"\", base64.encodeToString(b2));\n+        assertEquals(\"byteToString static \\\"\\\"\", \"\", Base64.encodeBase64String(b2));\n+        assertEquals(\"byteToString null\", null, base64.encodeToString(b3));\n+        assertEquals(\"byteToString static null\", null, Base64.encodeBase64String(b3));\n+        assertEquals(\"byteToString UUID\", \"K/fMJwH+Q5e0nr7tWsxwkA==\", base64.encodeToString(b4));\n+        assertEquals(\"byteToString static UUID\", \"K/fMJwH+Q5e0nr7tWsxwkA==\", Base64.encodeBase64String(b4));\n+        assertEquals(\"byteToString static-url-safe UUID\", \"K_fMJwH-Q5e0nr7tWsxwkA\",\n+                Base64.encodeBase64URLSafeString(b4));\n+    }\n+\n+    @Test\n+    public void testStringToByteVariations() throws DecoderException {\n+        final Base64 base64 = new Base64();\n+        final String s1 = \"SGVsbG8gV29ybGQ=\\r\\n\";\n+        final String s2 = \"\";\n+        final String s3 = null;\n+        final String s4a = \"K/fMJwH+Q5e0nr7tWsxwkA==\\r\\n\";\n+        final String s4b = \"K_fMJwH-Q5e0nr7tWsxwkA\";\n+        final byte[] b4 = Hex.decodeHex(\"2bf7cc2701fe4397b49ebeed5acc7090\"); // for\n+                                                                                            // url-safe\n+                                                                                            // tests\n+\n+        assertEquals(\"StringToByte Hello World\", \"Hello World\", StringUtils.newStringUtf8(base64.decode(s1)));\n+        assertEquals(\"StringToByte Hello World\", \"Hello World\",\n+                StringUtils.newStringUtf8((byte[]) base64.decode((Object) s1)));\n+        assertEquals(\"StringToByte static Hello World\", \"Hello World\",\n+                StringUtils.newStringUtf8(Base64.decodeBase64(s1)));\n+        assertEquals(\"StringToByte \\\"\\\"\", \"\", StringUtils.newStringUtf8(base64.decode(s2)));\n+        assertEquals(\"StringToByte static \\\"\\\"\", \"\", StringUtils.newStringUtf8(Base64.decodeBase64(s2)));\n+        assertEquals(\"StringToByte null\", null, StringUtils.newStringUtf8(base64.decode(s3)));\n+        assertEquals(\"StringToByte static null\", null, StringUtils.newStringUtf8(Base64.decodeBase64(s3)));\n+        assertTrue(\"StringToByte UUID\", Arrays.equals(b4, base64.decode(s4b)));\n+        assertTrue(\"StringToByte static UUID\", Arrays.equals(b4, Base64.decodeBase64(s4a)));\n+        assertTrue(\"StringToByte static-url-safe UUID\", Arrays.equals(b4, Base64.decodeBase64(s4b)));\n+    }\n+\n+    private String toString(final byte[] data) {\n+        final StringBuilder buf = new StringBuilder();\n+        for (int i = 0; i < data.length; i++) {\n+            buf.append(data[i]);\n+            if (i != data.length - 1) {\n+                buf.append(\",\");\n+            }\n+        }\n+        return buf.toString();\n+    }\n+\n+    /**\n+     * Tests a lineSeparator much bigger than DEFAULT_BUFFER_SIZE.\n+     *\n+     * @see \"<a href='http://mail-archives.apache.org/mod_mbox/commons-dev/201202.mbox/%3C4F3C85D7.5060706@snafu.de%3E'>dev@commons.apache.org</a>\"\n+     */\n+    @Test\n+    @Ignore\n+    public void testHugeLineSeparator() {\n+        final int BaseNCodec_DEFAULT_BUFFER_SIZE = 8192;\n+        final int Base64_BYTES_PER_ENCODED_BLOCK = 4;\n+        final byte[] baLineSeparator = new byte[BaseNCodec_DEFAULT_BUFFER_SIZE * 4 - 3];\n+        final Base64 b64 = new Base64(Base64_BYTES_PER_ENCODED_BLOCK, baLineSeparator);\n+        final String strOriginal = \"Hello World\";\n+        final String strDecoded = new String(b64.decode(b64.encode(StringUtils.getBytesUtf8(strOriginal))));\n+        assertEquals(\"testDEFAULT_BUFFER_SIZE\", strOriginal, strDecoded);\n+    }\n \n }\n--- a/src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java\n+++ b/src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java\n     @Test\n     public void testProvidePaddingByte() {\n         // Given\n-    \tcodec = new BaseNCodec(0, 0, 0, 0, (byte)0x25) {\n+        codec = new BaseNCodec(0, 0, 0, 0, (byte)0x25) {\n             @Override\n             protected boolean isInAlphabet(final byte b) {\n                 return b=='O' || b == 'K'; // allow OK", "timestamp": 1463747825, "metainfo": ""}