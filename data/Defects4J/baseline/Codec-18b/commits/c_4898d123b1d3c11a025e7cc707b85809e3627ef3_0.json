{"sha": "4898d123b1d3c11a025e7cc707b85809e3627ef3", "log": "Fix checkstyle warnings.  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/digest/DigestUtils.java\n+++ b/src/main/java/org/apache/commons/codec/digest/DigestUtils.java\n      * @param messageDigest\n      *            the {@link MessageDigest} to update\n      * @param valueToDigest\n-     *            the value to update the {@link MessageDigest} with; converted to bytes using {@link StringUtils#getBytesUtf8(String)}\n+     *            the value to update the {@link MessageDigest} with;\n+     *            converted to bytes using {@link StringUtils#getBytesUtf8(String)}\n      * @return the updated {@link MessageDigest}\n      * @since 1.7\n      */\n--- a/src/main/java/org/apache/commons/codec/language/Metaphone.java\n+++ b/src/main/java/org/apache/commons/codec/language/Metaphone.java\n  * Note, that this does not match the algorithm that ships with PHP, or the algorithm found in the Perl implementations:\n  * </p>\n  * <ul>\n- * <li><a href=\"http://search.cpan.org/~mschwern/Text-Metaphone-1.96/Metaphone.pm\">Text:Metaphone-1.96</a> (broken link 4/30/2013) </li>\n- * <li><a href=\"https://metacpan.org/source/MSCHWERN/Text-Metaphone-1.96//Metaphone.pm\">Text:Metaphone-1.96</a> (link checked 4/30/2013) </li>\n+ * <li><a href=\"http://search.cpan.org/~mschwern/Text-Metaphone-1.96/Metaphone.pm\">Text:Metaphone-1.96</a>\n+ *  (broken link 4/30/2013) </li>\n+ * <li><a href=\"https://metacpan.org/source/MSCHWERN/Text-Metaphone-1.96//Metaphone.pm\">Text:Metaphone-1.96</a>\n+ *  (link checked 4/30/2013) </li>\n  * </ul>\n  * <p>\n  * They have had undocumented changes from the originally published algorithm.\n--- a/src/main/java/org/apache/commons/codec/language/bm/Lang.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/Lang.java\n                         final String[] parts = line.split(\"\\\\s+\");\n \n                         if (parts.length != 3) {\n-                            throw new IllegalArgumentException(\"Malformed line '\" + rawLine\n-                                    + \"' in language resource '\" + languageRulesResourceName + \"'\");\n+                            throw new IllegalArgumentException(\"Malformed line '\" + rawLine +\n+                                    \"' in language resource '\" + languageRulesResourceName + \"'\");\n                         }\n \n                         final Pattern pattern = Pattern.compile(parts[0]);\n--- a/src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java\n             this.phonemes = new LinkedHashSet<Rule.Phoneme>();\n             this.phonemes.add(phoneme);\n         }\n-        \n+\n         private PhonemeBuilder(final Set<Rule.Phoneme> phonemes) {\n             this.phonemes = phonemes;\n         }\n \n             EXPR: for (final Rule.Phoneme left : this.phonemes) {\n                 for (final Rule.Phoneme right : phonemeExpr.getPhonemes()) {\n-                \tLanguageSet languages = left.getLanguages().restrictTo(right.getLanguages());\n-                \tif (!languages.isEmpty()) {\n-                \t\tfinal Rule.Phoneme join = new Phoneme(left, right, languages);\n+                    LanguageSet languages = left.getLanguages().restrictTo(right.getLanguages());\n+                    if (!languages.isEmpty()) {\n+                        final Rule.Phoneme join = new Phoneme(left, right, languages);\n                         if (newPhonemes.size() < maxPhonemes) {\n                             newPhonemes.add(join);\n                         } else {\n      * @param finalRules the final rules to apply\n      * @return the resulting phonemes\n      */\n-    private PhonemeBuilder applyFinalRules(final PhonemeBuilder phonemeBuilder, final Map<String, List<Rule>> finalRules) {\n+    private PhonemeBuilder applyFinalRules(final PhonemeBuilder phonemeBuilder,\n+                                           final Map<String, List<Rule>> finalRules) {\n         if (finalRules == null) {\n             throw new NullPointerException(\"finalRules can not be null\");\n         }\n--- a/src/main/java/org/apache/commons/codec/language/bm/Rule.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/Rule.java\n             this.phonemeText = new StringBuilder(phonemeText);\n             this.languages = languages;\n         }\n-        \n+\n         public Phoneme(final Phoneme phonemeLeft, final Phoneme phonemeRight) {\n             this(phonemeLeft.phonemeText, phonemeLeft.languages);\n             this.phonemeText.append(phonemeRight.phonemeText);\n--- a/src/main/java/org/apache/commons/codec/language/bm/RuleType.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/RuleType.java\n \n     /**\n      * Gets the rule name.\n-     * \n+     *\n      * @return the rule name.\n      */\n     public String getName() {", "timestamp": 1384721552, "metainfo": ""}