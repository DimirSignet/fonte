{"sha": "f98699421fe6e66c911559559979f23a50ad0c9d", "log": "[CODEC-174] Fix Clirr error by renaming new Methods \"Map Rule.getInstance(...)\" to \"Map Rule.getInstanceMap(...)\" and re-introducing the original methods with the original signature \"List Rule.getInstance(...)\" and returning a joined result of getInstanceMap.  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java\n      *   of the input\n      */\n     public String encode(String input, final Languages.LanguageSet languageSet) {\n-        final Map<String, List<Rule>> rules = Rule.getInstance(this.nameType, RuleType.RULES, languageSet);\n+        final Map<String, List<Rule>> rules = Rule.getInstanceMap(this.nameType, RuleType.RULES, languageSet);\n         // rules common across many (all) languages\n-        final Map<String, List<Rule>> finalRules1 = Rule.getInstance(this.nameType, this.ruleType, \"common\");\n+        final Map<String, List<Rule>> finalRules1 = Rule.getInstanceMap(this.nameType, this.ruleType, \"common\");\n         // rules that apply to a specific language that may be ambiguous or wrong if applied to other languages\n-        final Map<String, List<Rule>> finalRules2 = Rule.getInstance(this.nameType, this.ruleType, languageSet);\n+        final Map<String, List<Rule>> finalRules2 = Rule.getInstanceMap(this.nameType, this.ruleType, languageSet);\n \n         // tidy the input\n         // lower case is a locale-dependent operation\n--- a/src/main/java/org/apache/commons/codec/language/bm/Rule.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/Rule.java\n import java.util.Set;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n+\n+import org.apache.commons.codec.language.bm.Languages.LanguageSet;\n \n /**\n  * A phoneme rule.\n      *            the set of languages to consider\n      * @return a list of Rules that apply\n      */\n-    public static Map<String, List<Rule>> getInstance(final NameType nameType, final RuleType rt,\n+    public static List<Rule> getInstance(final NameType nameType, final RuleType rt,\n                                          final Languages.LanguageSet langs) {\n-        return langs.isSingleton() ? getInstance(nameType, rt, langs.getAny()) :\n-                                     getInstance(nameType, rt, Languages.ANY);\n+        final Map<String, List<Rule>> ruleMap = getInstanceMap(nameType, rt, langs);\n+        final List<Rule> allRules = new ArrayList<Rule>();\n+        for (final List<Rule> rules : ruleMap.values()) {\n+            allRules.addAll(rules);\n+        }\n+        return allRules;\n     }\n \n     /**\n      *            the RuleType to consider\n      * @param lang\n      *            the language to consider\n-     * @return a list rules for a combination of name type, rule type and a single language.\n-     */\n-    public static Map<String, List<Rule>> getInstance(final NameType nameType, final RuleType rt, final String lang) {\n+     * @return a list of Rules that apply\n+     */\n+    public static List<Rule> getInstance(final NameType nameType, final RuleType rt, final String lang) {\n+        return getInstance(nameType, rt, LanguageSet.from(new HashSet<String>(Arrays.asList(lang))));\n+    }\n+\n+    /**\n+     * Gets rules for a combination of name type, rule type and languages.\n+     *\n+     * @param nameType\n+     *            the NameType to consider\n+     * @param rt\n+     *            the RuleType to consider\n+     * @param langs\n+     *            the set of languages to consider\n+     * @return a map containing all Rules that apply, grouped by the first character of the rule pattern\n+     */\n+    public static Map<String, List<Rule>> getInstanceMap(final NameType nameType, final RuleType rt,\n+                                                         final Languages.LanguageSet langs) {\n+        return langs.isSingleton() ? getInstanceMap(nameType, rt, langs.getAny()) :\n+                                     getInstanceMap(nameType, rt, Languages.ANY);\n+    }\n+\n+    /**\n+     * Gets rules for a combination of name type, rule type and a single language.\n+     *\n+     * @param nameType\n+     *            the NameType to consider\n+     * @param rt\n+     *            the RuleType to consider\n+     * @param lang\n+     *            the language to consider\n+     * @return a map containing all Rules that apply, grouped by the first character of the rule pattern\n+     */\n+    public static Map<String, List<Rule>> getInstanceMap(final NameType nameType, final RuleType rt,\n+                                                         final String lang) {\n         final Map<String, List<Rule>> rules = RULES.get(nameType).get(rt).get(lang);\n \n         if (rules == null) {", "timestamp": 1384722890, "metainfo": ""}