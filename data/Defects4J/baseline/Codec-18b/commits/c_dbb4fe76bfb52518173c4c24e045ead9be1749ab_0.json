{"sha": "dbb4fe76bfb52518173c4c24e045ead9be1749ab", "log": "Add default case: cannot happen currently, so throw IllegalStateException to trap invalid code changes  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/binary/Base32.java\n+++ b/src/main/java/org/apache/commons/codec/binary/Base32.java\n                     buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);\n                     buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);\n                     break;\n+                default:\n+                    // modulus can be 0-7, and we excluded 0,1 already\n+                    throw new IllegalStateException(\"Impossible modulus \"+context.modulus);\n             }\n         }\n     }\n             final byte[] buffer = ensureBufferSize(encodeSize, context);\n             final int savedPos = context.pos;\n             switch (context.modulus) { // % 5\n+                case 0 : // TODO - correct?\n+                    break;\n                 case 1 : // Only 1 octet; take top 5 bits then remainder\n                     buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 3) & MASK_5BITS]; // 8-1*5 = 3\n                     buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea << 2) & MASK_5BITS]; // 5-3=2\n                     buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea <<  3) & MASK_5BITS]; // 5-2 = 3\n                     buffer[context.pos++] = PAD;\n                     break;\n+                default:\n+                    throw new IllegalStateException(\"Impossible modulus \"+context.modulus);\n             }\n             context.currentLinePos += context.pos - savedPos; // keep track of current line position\n             // if currentPos == 0 we are at the start of a line, so don't add CRLF", "timestamp": 1347195431, "metainfo": ""}