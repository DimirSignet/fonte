{"sha": "7bf48eefb3dc9fa049f2f0411ebffdd46cea84c8", "log": "Javadoc 8.  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/DecoderException.java\n+++ b/src/main/java/org/apache/commons/codec/DecoderException.java\n     private static final long serialVersionUID = 1L;\n \n     /**\n-     * Constructs a new exception with {@code null} as its detail message. The cause is not initialized, and may\n+     * Constructs a new exception with <code>null</code> as its detail message. The cause is not initialized, and may\n      * subsequently be initialized by a call to {@link #initCause}.\n      *\n      * @since 1.4\n      * @param message\n      *            The detail message which is saved for later retrieval by the {@link #getMessage()} method.\n      * @param cause\n-     *            The cause which is saved for later retrieval by the {@link #getCause()} method. A {@code null}\n+     *            The cause which is saved for later retrieval by the {@link #getCause()} method. A <code>null</code>\n      *            value is permitted, and indicates that the cause is nonexistent or unknown.\n      * @since 1.4\n      */\n      * This constructor is useful for exceptions that are little more than wrappers for other throwables.\n      *\n      * @param cause\n-     *            The cause which is saved for later retrieval by the {@link #getCause()} method. A {@code null}\n+     *            The cause which is saved for later retrieval by the {@link #getCause()} method. A <code>null</code>\n      *            value is permitted, and indicates that the cause is nonexistent or unknown.\n      * @since 1.4\n      */\n--- a/src/main/java/org/apache/commons/codec/EncoderException.java\n+++ b/src/main/java/org/apache/commons/codec/EncoderException.java\n     private static final long serialVersionUID = 1L;\n \n     /**\n-     * Constructs a new exception with {@code null} as its detail message. The cause is not initialized, and may\n+     * Constructs a new exception with <code>null</code> as its detail message. The cause is not initialized, and may\n      * subsequently be initialized by a call to {@link #initCause}.\n      *\n      * @since 1.4\n      * @param message\n      *            The detail message which is saved for later retrieval by the {@link #getMessage()} method.\n      * @param cause\n-     *            The cause which is saved for later retrieval by the {@link #getCause()} method. A {@code null}\n+     *            The cause which is saved for later retrieval by the {@link #getCause()} method. A <code>null</code>\n      *            value is permitted, and indicates that the cause is nonexistent or unknown.\n      * @since 1.4\n      */\n      * This constructor is useful for exceptions that are little more than wrappers for other throwables.\n      *\n      * @param cause\n-     *            The cause which is saved for later retrieval by the {@link #getCause()} method. A {@code null}\n+     *            The cause which is saved for later retrieval by the {@link #getCause()} method. A <code>null</code>\n      *            value is permitted, and indicates that the cause is nonexistent or unknown.\n      * @since 1.4\n      */\n--- a/src/main/java/org/apache/commons/codec/binary/Base32.java\n+++ b/src/main/java/org/apache/commons/codec/binary/Base32.java\n      * <p>\n      * When encoding the line length is 0 (no chunking).\n      * </p>\n-     * @param useHex if {@code true} then use Base32 Hex alphabet\n+     * @param useHex if <code>true</code> then use Base32 Hex alphabet\n      */\n     public Base32(final boolean useHex) {\n         this(0, null, useHex, PAD_DEFAULT);\n      * <p>\n      * When encoding the line length is 0 (no chunking).\n      * </p>\n-     * @param useHex if {@code true} then use Base32 Hex alphabet\n+     * @param useHex if <code>true</code> then use Base32 Hex alphabet\n      * @param pad byte used as padding byte.\n      */\n     public Base32(final boolean useHex, final byte pad) {\n      * @param lineSeparator\n      *            Each line of encoded data will end with this sequence of bytes.\n      * @param useHex\n-     *            if {@code true}, then use Base32 Hex alphabet, otherwise use Base32 alphabet\n+     *            if <code>true</code>, then use Base32 Hex alphabet, otherwise use Base32 alphabet\n      * @throws IllegalArgumentException\n      *             The provided lineSeparator included some Base32 characters. That's not going to work! Or the\n      *             lineLength &gt; 0 and lineSeparator is null.\n      * @param lineSeparator\n      *            Each line of encoded data will end with this sequence of bytes.\n      * @param useHex\n-     *            if {@code true}, then use Base32 Hex alphabet, otherwise use Base32 alphabet\n+     *            if <code>true</code>, then use Base32 Hex alphabet, otherwise use Base32 alphabet\n      * @param pad byte used as padding byte.\n      * @throws IllegalArgumentException\n      *             The provided lineSeparator included some Base32 characters. That's not going to work! Or the\n      *\n      * @param octet\n      *            The value to test\n-     * @return {@code true} if the value is defined in the the Base32 alphabet {@code false} otherwise.\n+     * @return <code>true</code> if the value is defined in the the Base32 alphabet <code>false</code> otherwise.\n      */\n     @Override\n     public boolean isInAlphabet(final byte octet) {\n--- a/src/main/java/org/apache/commons/codec/binary/Base64.java\n+++ b/src/main/java/org/apache/commons/codec/binary/Base64.java\n      * </p>\n      *\n      * @param urlSafe\n-     *            if {@code true}, URL-safe encoding is used. In most cases this should be set to {@code false}.\n+     *            if <code>true</code>, URL-safe encoding is used. In most cases this should be set to <code>false</code>.\n      * @since 1.4\n      */\n     public Base64(final boolean urlSafe) {\n      *\n      * @param arrayOctet\n      *            byte array to test\n-     * @return {@code true} if all bytes are valid characters in the Base64 alphabet or if the byte array is empty;\n-     *         {@code false}, otherwise\n+     * @return <code>true</code> if all bytes are valid characters in the Base64 alphabet or if the byte array is empty;\n+     *         <code>false</code>, otherwise\n      * @deprecated 1.5 Use {@link #isBase64(byte[])}, will be removed in 2.0.\n      */\n     @Deprecated\n      *\n      * @param octet\n      *            The value to test\n-     * @return {@code true} if the value is defined in the the base 64 alphabet, {@code false} otherwise.\n+     * @return <code>true</code> if the value is defined in the the base 64 alphabet, <code>false</code> otherwise.\n      * @since 1.4\n      */\n     public static boolean isBase64(final byte octet) {\n      *\n      * @param base64\n      *            String to test\n-     * @return {@code true} if all characters in the String are valid characters in the Base64 alphabet or if\n-     *         the String is empty; {@code false}, otherwise\n+     * @return <code>true</code> if all characters in the String are valid characters in the Base64 alphabet or if\n+     *         the String is empty; <code>false</code>, otherwise\n      *  @since 1.5\n      */\n     public static boolean isBase64(final String base64) {\n      *\n      * @param arrayOctet\n      *            byte array to test\n-     * @return {@code true} if all bytes are valid characters in the Base64 alphabet or if the byte array is empty;\n-     *         {@code false}, otherwise\n+     * @return <code>true</code> if all bytes are valid characters in the Base64 alphabet or if the byte array is empty;\n+     *         <code>false</code>, otherwise\n      * @since 1.5\n      */\n     public static boolean isBase64(final byte[] arrayOctet) {\n      * @param binaryData\n      *            Array containing binary data to encode.\n      * @param isChunked\n-     *            if {@code true} this encoder will chunk the base64 output into 76 character blocks\n+     *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks\n      * @return Base64-encoded data.\n      * @throws IllegalArgumentException\n      *             Thrown when the input array needs an output array bigger than {@link Integer#MAX_VALUE}\n      * @param binaryData\n      *            Array containing binary data to encode.\n      * @param isChunked\n-     *            if {@code true} this encoder will chunk the base64 output into 76 character blocks\n+     *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks\n      * @param urlSafe\n-     *            if {@code true} this encoder will emit - and _ instead of the usual + and / characters.\n+     *            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.\n      *            <b>Note: no padding is added when encoding using the URL-safe alphabet.</b>\n      * @return Base64-encoded data.\n      * @throws IllegalArgumentException\n      * @param binaryData\n      *            Array containing binary data to encode.\n      * @param isChunked\n-     *            if {@code true} this encoder will chunk the base64 output into 76 character blocks\n+     *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks\n      * @param urlSafe\n-     *            if {@code true} this encoder will emit - and _ instead of the usual + and / characters.\n+     *            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.\n      *            <b>Note: no padding is added when encoding using the URL-safe alphabet.</b>\n      * @param maxResultSize\n      *            The maximum result size to accept.\n      *\n      * @param octet\n      *            The value to test\n-     * @return {@code true} if the value is defined in the the Base64 alphabet {@code false} otherwise.\n+     * @return <code>true</code> if the value is defined in the the Base64 alphabet <code>false</code> otherwise.\n      */\n     @Override\n     protected boolean isInAlphabet(final byte octet) {\n--- a/src/main/java/org/apache/commons/codec/binary/BaseNCodec.java\n+++ b/src/main/java/org/apache/commons/codec/binary/BaseNCodec.java\n      *\n      * @param value The value to test\n      *\n-     * @return {@code true} if the value is defined in the current alphabet, {@code false} otherwise.\n+     * @return <code>true</code> if the value is defined in the current alphabet, <code>false</code> otherwise.\n      */\n     protected abstract boolean isInAlphabet(byte value);\n \n      * The method optionally treats whitespace and pad as valid.\n      *\n      * @param arrayOctet byte array to test\n-     * @param allowWSPad if {@code true}, then whitespace and PAD are also allowed\n-     *\n-     * @return {@code true} if all bytes are valid characters in the alphabet or if the byte array is empty;\n-     *         {@code false}, otherwise\n+     * @param allowWSPad if <code>true</code>, then whitespace and PAD are also allowed\n+     *\n+     * @return <code>true</code> if all bytes are valid characters in the alphabet or if the byte array is empty;\n+     *         <code>false</code>, otherwise\n      */\n     public boolean isInAlphabet(final byte[] arrayOctet, final boolean allowWSPad) {\n         for (int i = 0; i < arrayOctet.length; i++) {\n      * The method treats whitespace and PAD as valid.\n      *\n      * @param basen String to test\n-     * @return {@code true} if all characters in the String are valid characters in the alphabet or if\n-     *         the String is empty; {@code false}, otherwise\n+     * @return <code>true</code> if all characters in the String are valid characters in the alphabet or if\n+     *         the String is empty; <code>false</code>, otherwise\n      * @see #isInAlphabet(byte[], boolean)\n      */\n     public boolean isInAlphabet(final String basen) {\n      *\n      * @param arrayOctet\n      *            byte array to test\n-     * @return {@code true} if any byte is a valid character in the alphabet or PAD; {@code false} otherwise\n+     * @return <code>true</code> if any byte is a valid character in the alphabet or PAD; <code>false</code> otherwise\n      */\n     protected boolean containsAlphabetOrPad(final byte[] arrayOctet) {\n         if (arrayOctet == null) {\n--- a/src/main/java/org/apache/commons/codec/binary/BinaryCodec.java\n+++ b/src/main/java/org/apache/commons/codec/binary/BinaryCodec.java\n     }\n \n     /**\n-     * Returns {@code true} if the given array is {@code null} or empty (size 0.)\n+     * Returns <code>true</code> if the given array is <code>null</code> or empty (size 0.)\n      *\n      * @param array\n      *            the source array\n-     * @return {@code true} if the given array is {@code null} or empty (size 0.)\n+     * @return <code>true</code> if the given array is <code>null</code> or empty (size 0.)\n      */\n     private static boolean isEmpty(final byte[] array) {\n         return array == null || array.length == 0;\n--- a/src/main/java/org/apache/commons/codec/binary/CharSequenceUtils.java\n+++ b/src/main/java/org/apache/commons/codec/binary/CharSequenceUtils.java\n \n /**\n  * <p>\n- * Operations on {@link CharSequence} that are {@code null} safe.\n+ * Operations on {@link CharSequence} that are <code>null</code> safe.\n  * </p>\n  * <p>\n  * Copied from Apache Commons Lang r1586295 on April 10, 2014 (day of 3.3.2 release).\n      * Green implementation of regionMatches.\n      * \n      * @param cs\n-     *            the {@code CharSequence} to be processed\n+     *            the <code>CharSequence</code> to be processed\n      * @param ignoreCase\n      *            whether or not to be case insensitive\n      * @param thisStart\n-     *            the index to start on the {@code cs} CharSequence\n+     *            the index to start on the <code>cs</code> CharSequence\n      * @param substring\n-     *            the {@code CharSequence} to be looked for\n+     *            the <code>CharSequence</code> to be looked for\n      * @param start\n-     *            the index to start on the {@code substring} CharSequence\n+     *            the index to start on the <code>substring</code> CharSequence\n      * @param length\n      *            character length of the region\n      * @return whether the region matched\n--- a/src/main/java/org/apache/commons/codec/binary/Hex.java\n+++ b/src/main/java/org/apache/commons/codec/binary/Hex.java\n      * @param data\n      *            a byte[] to convert to Hex characters\n      * @param toLowerCase\n-     *            {@code true} converts to lowercase, {@code false} to uppercase\n+     *            <code>true</code> converts to lowercase, <code>false</code> to uppercase\n      * @return A char[] containing hexadecimal characters\n      * @since 1.4\n      */\n--- a/src/main/java/org/apache/commons/codec/binary/StringUtils.java\n+++ b/src/main/java/org/apache/commons/codec/binary/StringUtils.java\n \n     /**\n      * <p>\n-     * Compares two CharSequences, returning {@code true} if they represent equal sequences of characters.\n+     * Compares two CharSequences, returning <code>true</code> if they represent equal sequences of characters.\n      * </p>\n      * \n      * <p>\n-     * {@code null}s are handled without exceptions. Two {@code null} references are considered to be equal. The\n+     * <code>null</code>s are handled without exceptions. Two <code>null</code> references are considered to be equal. The\n      * comparison is case sensitive.\n      * </p>\n      * \n      * \n      * @see Object#equals(Object)\n      * @param cs1\n-     *            the first CharSequence, may be {@code null}\n+     *            the first CharSequence, may be <code>null</code>\n      * @param cs2\n-     *            the second CharSequence, may be {@code null}\n-     * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}\n+     *            the second CharSequence, may be <code>null</code>\n+     * @return <code>true</code> if the CharSequences are equal (case-sensitive), or both <code>null</code>\n      * @since 1.10\n      */\n     public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n      * @param string\n      *            The string to encode (if null, return null).\n      * @param charset\n-     *            The {@link Charset} to encode the {@code String}\n+     *            The {@link Charset} to encode the <code>String</code>\n      * @return the encoded bytes\n      */\n     private static byte[] getBytes(final String string, final Charset charset) {\n      * byte array.\n      *\n      * @param string\n-     *            the String to encode, may be {@code null}\n-     * @return encoded bytes, or {@code null} if the input string was {@code null}\n+     *            the String to encode, may be <code>null</code>\n+     * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>\n      * @throws NullPointerException\n      *             Thrown if {@link Charsets#ISO_8859_1} is not initialized, which should never happen since it is\n      *             required by the Java platform specification.\n      * </p>\n      *\n      * @param string\n-     *            the String to encode, may be {@code null}\n+     *            the String to encode, may be <code>null</code>\n      * @param charsetName\n      *            The name of a required {@link java.nio.charset.Charset}\n-     * @return encoded bytes, or {@code null} if the input string was {@code null}\n+     * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>\n      * @throws IllegalStateException\n      *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen for a\n      *             required charset name.\n      * array.\n      *\n      * @param string\n-     *            the String to encode, may be {@code null}\n-     * @return encoded bytes, or {@code null} if the input string was {@code null}\n+     *            the String to encode, may be <code>null</code>\n+     * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>\n      * @throws NullPointerException\n      *             Thrown if {@link Charsets#US_ASCII} is not initialized, which should never happen since it is\n      *             required by the Java platform specification.\n      * array.\n      *\n      * @param string\n-     *            the String to encode, may be {@code null}\n-     * @return encoded bytes, or {@code null} if the input string was {@code null}\n+     *            the String to encode, may be <code>null</code>\n+     * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>\n      * @throws NullPointerException\n      *             Thrown if {@link Charsets#UTF_16} is not initialized, which should never happen since it is\n      *             required by the Java platform specification.\n      * array.\n      *\n      * @param string\n-     *            the String to encode, may be {@code null}\n-     * @return encoded bytes, or {@code null} if the input string was {@code null}\n+     *            the String to encode, may be <code>null</code>\n+     * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>\n      * @throws NullPointerException\n      *             Thrown if {@link Charsets#UTF_16BE} is not initialized, which should never happen since it is\n      *             required by the Java platform specification.\n      * array.\n      *\n      * @param string\n-     *            the String to encode, may be {@code null}\n-     * @return encoded bytes, or {@code null} if the input string was {@code null}\n+     *            the String to encode, may be <code>null</code>\n+     * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>\n      * @throws NullPointerException\n      *             Thrown if {@link Charsets#UTF_16LE} is not initialized, which should never happen since it is\n      *             required by the Java platform specification.\n      * array.\n      *\n      * @param string\n-     *            the String to encode, may be {@code null}\n-     * @return encoded bytes, or {@code null} if the input string was {@code null}\n+     *            the String to encode, may be <code>null</code>\n+     * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>\n      * @throws NullPointerException\n      *             Thrown if {@link Charsets#UTF_8} is not initialized, which should never happen since it is\n      *             required by the Java platform specification.\n      * @param bytes\n      *            The bytes to be decoded into characters\n      * @param charset\n-     *            The {@link Charset} to encode the {@code String}\n+     *            The {@link Charset} to encode the <code>String</code>\n      * @return A new <code>String</code> decoded from the specified array of bytes using the given charset,\n-     *         or {@code null} if the input byte array was {@code null}.\n+     *         or <code>null</code> if the input byte array was <code>null</code>.\n      * @throws NullPointerException\n      *             Thrown if {@link Charsets#UTF_8} is not initialized, which should never happen since it is\n      *             required by the Java platform specification.\n      * </p>\n      *\n      * @param bytes\n-     *            The bytes to be decoded into characters, may be {@code null}\n+     *            The bytes to be decoded into characters, may be <code>null</code>\n      * @param charsetName\n      *            The name of a required {@link java.nio.charset.Charset}\n      * @return A new <code>String</code> decoded from the specified array of bytes using the given charset,\n-     *         or {@code null} if the input byte array was {@code null}.\n+     *         or <code>null</code> if the input byte array was <code>null</code>.\n      * @throws IllegalStateException\n      *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen for a\n      *             required charset name.\n      * Constructs a new <code>String</code> by decoding the specified array of bytes using the ISO-8859-1 charset.\n      *\n      * @param bytes\n-     *            The bytes to be decoded into characters, may be {@code null}\n+     *            The bytes to be decoded into characters, may be <code>null</code>\n      * @return A new <code>String</code> decoded from the specified array of bytes using the ISO-8859-1 charset, or\n-     *         {@code null} if the input byte array was {@code null}.\n+     *         <code>null</code> if the input byte array was <code>null</code>.\n      * @throws NullPointerException\n      *             Thrown if {@link Charsets#ISO_8859_1} is not initialized, which should never happen since it is\n      *             required by the Java platform specification.\n      * @param bytes\n      *            The bytes to be decoded into characters\n      * @return A new <code>String</code> decoded from the specified array of bytes using the US-ASCII charset,\n-     *         or {@code null} if the input byte array was {@code null}.\n+     *         or <code>null</code> if the input byte array was <code>null</code>.\n      * @throws NullPointerException\n      *             Thrown if {@link Charsets#US_ASCII} is not initialized, which should never happen since it is\n      *             required by the Java platform specification.\n      * @param bytes\n      *            The bytes to be decoded into characters\n      * @return A new <code>String</code> decoded from the specified array of bytes using the UTF-16 charset\n-     *         or {@code null} if the input byte array was {@code null}.\n+     *         or <code>null</code> if the input byte array was <code>null</code>.\n      * @throws NullPointerException\n      *             Thrown if {@link Charsets#UTF_16} is not initialized, which should never happen since it is\n      *             required by the Java platform specification.\n      * @param bytes\n      *            The bytes to be decoded into characters\n      * @return A new <code>String</code> decoded from the specified array of bytes using the UTF-16BE charset,\n-     *         or {@code null} if the input byte array was {@code null}.\n+     *         or <code>null</code> if the input byte array was <code>null</code>.\n      * @throws NullPointerException\n      *             Thrown if {@link Charsets#UTF_16BE} is not initialized, which should never happen since it is\n      *             required by the Java platform specification.\n      * @param bytes\n      *            The bytes to be decoded into characters\n      * @return A new <code>String</code> decoded from the specified array of bytes using the UTF-16LE charset,\n-     *         or {@code null} if the input byte array was {@code null}.\n+     *         or <code>null</code> if the input byte array was <code>null</code>.\n      * @throws NullPointerException\n      *             Thrown if {@link Charsets#UTF_16LE} is not initialized, which should never happen since it is\n      *             required by the Java platform specification.\n      * @param bytes\n      *            The bytes to be decoded into characters\n      * @return A new <code>String</code> decoded from the specified array of bytes using the UTF-8 charset,\n-     *         or {@code null} if the input byte array was {@code null}.\n+     *         or <code>null</code> if the input byte array was <code>null</code>.\n      * @throws NullPointerException\n      *             Thrown if {@link Charsets#UTF_8} is not initialized, which should never happen since it is\n      *             required by the Java platform specification.\n--- a/src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java\n+++ b/src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java\n      *            {@link MessageDigest} algorithm identifier string\n      * @return complete hash value including prefix and salt\n      * @throws IllegalArgumentException\n-     *             if the given salt is {@code null} or does not match the allowed pattern\n+     *             if the given salt is <code>null</code> or does not match the allowed pattern\n      * @throws IllegalArgumentException\n      *             when a {@link NoSuchAlgorithmException} is caught\n      * @see MessageDigestAlgorithms\n--- a/src/main/java/org/apache/commons/codec/language/AbstractCaverphone.java\n+++ b/src/main/java/org/apache/commons/codec/language/AbstractCaverphone.java\n      *            First of two strings to compare\n      * @param str2\n      *            Second of two strings to compare\n-     * @return {@code true} if the encodings of these strings are identical, {@code false} otherwise.\n+     * @return <code>true</code> if the encodings of these strings are identical, <code>false</code> otherwise.\n      * @throws EncoderException\n      */\n     public boolean isEncodeEqual(final String str1, final String str2) throws EncoderException {\n--- a/src/main/java/org/apache/commons/codec/language/Caverphone.java\n+++ b/src/main/java/org/apache/commons/codec/language/Caverphone.java\n      *            First of two strings to compare\n      * @param str2\n      *            Second of two strings to compare\n-     * @return {@code true} if the caverphones of these strings are identical, {@code false} otherwise.\n+     * @return <code>true</code> if the caverphones of these strings are identical, <code>false</code> otherwise.\n      */\n     public boolean isCaverphoneEqual(final String str1, final String str2) {\n         return this.caverphone(str1).equals(this.caverphone(str2));\n--- a/src/main/java/org/apache/commons/codec/language/ColognePhonetic.java\n+++ b/src/main/java/org/apache/commons/codec/language/ColognePhonetic.java\n  *\n  * <h4>Example:</h4>\n  *\n- * {@code \"M}&uuml;{@code ller-L}&uuml;{@code denscheidt\" => \"MULLERLUDENSCHEIDT\" => \"6005507500206880022\"}\n+ * <code>\"M</code>&uuml;<code>ller-L</code>&uuml;<code>denscheidt\" => \"MULLERLUDENSCHEIDT\" => \"6005507500206880022\"</code>\n  *\n  * </li>\n  *\n  * <h3>Step 2:</h3>\n  * Collapse of all multiple consecutive code digits.\n  * <h4>Example:</h4>\n- * {@code \"6005507500206880022\" => \"6050750206802\"}</li>\n+ * <code>\"6005507500206880022\" => \"6050750206802\"</code></li>\n  *\n  * <li>\n  * <h3>Step 3:</h3>\n  * if they occur after removing the \"0\" digits.\n  *\n  * <h4>Example:</h4>\n- * {@code \"6050750206802\" => \"65752682\"}</li>\n+ * <code>\"6050750206802\" => \"65752682\"</code></li>\n  *\n  * </ul>\n  *\n--- a/src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java\n+++ b/src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java\n      *\n      * @param value1 The left-hand side of the encoded {@link String#equals(Object)}.\n      * @param value2 The right-hand side of the encoded {@link String#equals(Object)}.\n-     * @return {@code true} if the encoded <code>String</code>s are equal;\n-     *          {@code false} otherwise.\n+     * @return <code>true</code> if the encoded <code>String</code>s are equal;\n+     *          <code>false</code> otherwise.\n      * @see #isDoubleMetaphoneEqual(String,String,boolean)\n      */\n     public boolean isDoubleMetaphoneEqual(final String value1, final String value2) {\n      *\n      * @param value1 The left-hand side of the encoded {@link String#equals(Object)}.\n      * @param value2 The right-hand side of the encoded {@link String#equals(Object)}.\n-     * @param alternate use the alternate value if {@code true}.\n-     * @return {@code true} if the encoded <code>String</code>s are equal;\n-     *          {@code false} otherwise.\n+     * @param alternate use the alternate value if <code>true</code>.\n+     * @return <code>true</code> if the encoded <code>String</code>s are equal;\n+     *          <code>false</code> otherwise.\n      */\n     public boolean isDoubleMetaphoneEqual(final String value1, final String value2, final boolean alternate) {\n         return StringUtils.equals(doubleMetaphone(value1, alternate), doubleMetaphone(value2, alternate));\n \n     /**\n      * Determines whether or not the value starts with a silent letter.  It will\n-     * return {@code true} if the value starts with any of 'GN', 'KN',\n+     * return <code>true</code> if the value starts with any of 'GN', 'KN',\n      * 'PN', 'WR' or 'PS'.\n      */\n     private boolean isSilentStart(final String value) {\n--- a/src/main/java/org/apache/commons/codec/language/Metaphone.java\n+++ b/src/main/java/org/apache/commons/codec/language/Metaphone.java\n      *\n      * @param str1 First of two strings to compare\n      * @param str2 Second of two strings to compare\n-     * @return {@code true} if the metaphones of these strings are identical,\n-     *        {@code false} otherwise.\n+     * @return <code>true</code> if the metaphones of these strings are identical,\n+     *        <code>false</code> otherwise.\n      */\n     public boolean isMetaphoneEqual(final String str1, final String str2) {\n         return metaphone(str1).equals(metaphone(str2));\n--- a/src/main/java/org/apache/commons/codec/language/Nysiis.java\n+++ b/src/main/java/org/apache/commons/codec/language/Nysiis.java\n      *\n      * @param c\n      *            the character to test\n-     * @return {@code true} if the character is a vowel, {@code false} otherwise\n+     * @return <code>true</code> if the character is a vowel, <code>false</code> otherwise\n      */\n     private static boolean isVowel(final char c) {\n         return c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U';\n      * Create an instance of the {@link Nysiis} encoder with the specified strict mode:\n      *\n      * <ul>\n-     *  <li>{@code true}: encoded strings have a maximum length of 6</li>\n-     *  <li>{@code false}: encoded strings may have arbitrary length</li>\n+     *  <li><code>true</code>: encoded strings have a maximum length of 6</li>\n+     *  <li><code>false</code>: encoded strings may have arbitrary length</li>\n      * </ul>\n      *\n      * @param strict\n     /**\n      * Indicates the strict mode for this {@link Nysiis} encoder.\n      *\n-     * @return {@code true} if the encoder is configured for strict mode, {@code false} otherwise\n+     * @return <code>true</code> if the encoder is configured for strict mode, <code>false</code> otherwise\n      */\n     public boolean isStrict() {\n         return this.strict;\n--- a/src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java\n  * If multiple hyphenated words where found, or if the word may contain a name prefix, each encoded word is placed\n  * in elipses and these blocks are then joined with hyphens. For example, \"<code>d'ortley</code>\" has a possible\n  * prefix. The form without prefix encodes to \"<code>ortlaj|ortlej</code>\", while the form with prefix encodes to\n- * \"<code>dortlaj|dortlej</code>\". Thus, the full, combined encoding is \"{@code (ortlaj|ortlej)-(dortlaj|dortlej)}\".\n+ * \"<code>dortlaj|dortlej</code>\". Thus, the full, combined encoding is \"<code>(ortlaj|ortlej)-(dortlaj|dortlej)</code>\".\n  * <p>\n  * The encoded forms are often quite a bit longer than the input strings. This is because a single input may have many\n  * potential phonetic interpretations. For example, \"<code>Renault</code>\" encodes to\n--- a/src/main/java/org/apache/commons/codec/net/QCodec.java\n+++ b/src/main/java/org/apache/commons/codec/net/QCodec.java\n     /**\n      * Tests if optional transformation of SPACE characters is to be used\n      *\n-     * @return {@code true} if SPACE characters are to be transformed, {@code false} otherwise\n+     * @return <code>true</code> if SPACE characters are to be transformed, <code>false</code> otherwise\n      */\n     public boolean isEncodeBlanks() {\n         return this.encodeBlanks;\n      * Defines whether optional transformation of SPACE characters is to be used\n      *\n      * @param b\n-     *            {@code true} if SPACE characters are to be transformed, {@code false} otherwise\n+     *            <code>true</code> if SPACE characters are to be transformed, <code>false</code> otherwise\n      */\n     public void setEncodeBlanks(final boolean b) {\n         this.encodeBlanks = b;\n--- a/src/main/java/org/apache/commons/codec/net/RFC1522Codec.java\n+++ b/src/main/java/org/apache/commons/codec/net/RFC1522Codec.java\n      *\n      * @param text\n      *            a string to decode\n-     * @return A new decoded String or {@code null} if the input is {@code null}.\n+     * @return A new decoded String or <code>null</code> if the input is <code>null</code>.\n      * @throws DecoderException\n      *             thrown if there is an error condition during the decoding process.\n      * @throws UnsupportedEncodingException\n--- a/src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java\n+++ b/src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java\n import org.junit.Test;\n \n /**\n- * Tests the {@code ColognePhonetic} class.\n+ * Tests the <code>ColognePhonetic</code> class.\n  *\n  * <p>Keep this file in UTF-8 encoding for proper Javadoc processing.</p>\n  *", "timestamp": 1408748035, "metainfo": ""}