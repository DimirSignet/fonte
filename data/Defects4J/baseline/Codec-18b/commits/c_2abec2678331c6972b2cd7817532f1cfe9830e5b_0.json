{"sha": "2abec2678331c6972b2cd7817532f1cfe9830e5b", "log": "Make sure the scanner is always closed.  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/language/bm/Lang.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/Lang.java\n         }\n \n         final Scanner scanner = new Scanner(lRulesIS, ResourceConstants.ENCODING);\n-        boolean inExtendedComment = false;\n-        while (scanner.hasNextLine()) {\n-            final String rawLine = scanner.nextLine();\n-            String line = rawLine;\n-            if (inExtendedComment) {\n-                // check for closing comment marker, otherwise discard doc comment line\n-                if (line.endsWith(ResourceConstants.EXT_CMT_END)) {\n-                    inExtendedComment = false;\n-                }\n-            } else {\n-                if (line.startsWith(ResourceConstants.EXT_CMT_START)) {\n-                    inExtendedComment = true;\n+        try {\n+            boolean inExtendedComment = false;\n+            while (scanner.hasNextLine()) {\n+                final String rawLine = scanner.nextLine();\n+                String line = rawLine;\n+                if (inExtendedComment) {\n+                    // check for closing comment marker, otherwise discard doc comment line\n+                    if (line.endsWith(ResourceConstants.EXT_CMT_END)) {\n+                        inExtendedComment = false;\n+                    }\n                 } else {\n-                    // discard comments\n-                    final int cmtI = line.indexOf(ResourceConstants.CMT);\n-                    if (cmtI >= 0) {\n-                        line = line.substring(0, cmtI);\n+                    if (line.startsWith(ResourceConstants.EXT_CMT_START)) {\n+                        inExtendedComment = true;\n+                    } else {\n+                        // discard comments\n+                        final int cmtI = line.indexOf(ResourceConstants.CMT);\n+                        if (cmtI >= 0) {\n+                            line = line.substring(0, cmtI);\n+                        }\n+\n+                        // trim leading-trailing whitespace\n+                        line = line.trim();\n+\n+                        if (line.length() == 0) {\n+                            continue; // empty lines can be safely skipped\n+                        }\n+\n+                        // split it up\n+                        final String[] parts = line.split(\"\\\\s+\");\n+\n+                        if (parts.length != 3) {\n+                            throw new IllegalArgumentException(\"Malformed line '\" + rawLine\n+                                    + \"' in language resource '\" + languageRulesResourceName + \"'\");\n+                        }\n+\n+                        final Pattern pattern = Pattern.compile(parts[0]);\n+                        final String[] langs = parts[1].split(\"\\\\+\");\n+                        final boolean accept = parts[2].equals(\"true\");\n+\n+                        rules.add(new LangRule(pattern, new HashSet<String>(Arrays.asList(langs)), accept));\n                     }\n-\n-                    // trim leading-trailing whitespace\n-                    line = line.trim();\n-\n-                    if (line.length() == 0) {\n-                        continue; // empty lines can be safely skipped\n-                    }\n-\n-                    // split it up\n-                    final String[] parts = line.split(\"\\\\s+\");\n-\n-                    if (parts.length != 3) {\n-                        throw new IllegalArgumentException(\"Malformed line '\" + rawLine + \"' in language resource '\" +\n-                                                           languageRulesResourceName + \"'\");\n-                    }\n-\n-                    final Pattern pattern = Pattern.compile(parts[0]);\n-                    final String[] langs = parts[1].split(\"\\\\+\");\n-                    final boolean accept = parts[2].equals(\"true\");\n-\n-                    rules.add(new LangRule(pattern, new HashSet<String>(Arrays.asList(langs)), accept));\n                 }\n             }\n+        } finally {\n+            scanner.close();\n         }\n         return new Lang(rules, languages);\n     }", "timestamp": 1383856385, "metainfo": ""}