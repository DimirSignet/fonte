{"sha": "8c8783500792d097e792eb4f4028a6e2830db48d", "log": "Annotate with @Override and @Deprecated.  ", "commit": "\n--- a/src/java/org/apache/commons/codec/StringEncoderComparator.java\n+++ b/src/java/org/apache/commons/codec/StringEncoderComparator.java\n      * @deprecated Creating an instance without a {@link StringEncoder} leads to a {@link NullPointerException}. Will be\n      *             removed in 2.0.\n      */\n+    @Deprecated\n     public StringEncoderComparator() {\n         this.stringEncoder = null; // Trying to use this will cause things to break\n     }\n--- a/src/java/org/apache/commons/codec/binary/Base32.java\n+++ b/src/java/org/apache/commons/codec/binary/Base32.java\n      *\n      * Output is written to {@link #buffer} as 8-bit octets, using {@link #pos} as the buffer position\n      */\n+    @Override\n     void decode(byte[] in, int inPos, int inAvail) { // package protected for access from I/O streams\n         if (eof) {\n             return;\n      * @param inAvail\n      *            Amount of bytes available from input for encoding.\n      */\n+    @Override\n     void encode(byte[] in, int inPos, int inAvail) { // package protected for access from I/O streams\n         if (eof) {\n             return;\n      *            The value to test\n      * @return <code>true</code> if the value is defined in the the Base32 alphabet <code>false</code> otherwise.\n      */\n+    @Override\n     public boolean isInAlphabet(byte octet) {\n         return octet >= 0 && octet < decodeTable.length && decodeTable[octet] != -1;\n     }\n--- a/src/java/org/apache/commons/codec/binary/Base64.java\n+++ b/src/java/org/apache/commons/codec/binary/Base64.java\n      * @param inAvail\n      *            Amount of bytes available from input for encoding.\n      */\n+    @Override\n     void encode(byte[] in, int inPos, int inAvail) {\n         if (eof) {\n             return;\n      * @param inAvail\n      *            Amount of bytes available from input for encoding.\n      */\n+    @Override\n     void decode(byte[] in, int inPos, int inAvail) {\n         if (eof) {\n             return;\n      *         <code>false</code>, otherwise\n      * @deprecated 1.5 Use {@link #isBase64(byte[])}, will be removed in 2.0.\n      */\n+    @Deprecated\n     public static boolean isArrayByteBase64(byte[] arrayOctet) {\n         return isBase64(arrayOctet);\n     }\n      *            The value to test\n      * @return <code>true</code> if the value is defined in the the Base32 alphabet <code>false</code> otherwise.\n      */\n+    @Override\n     protected boolean isInAlphabet(byte octet) {\n         return octet >= 0 && octet < decodeTable.length && decodeTable[octet] != -1;\n     }\n--- a/src/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java\n+++ b/src/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java\n      * @throws IOException\n      *             if an I/O error occurs.\n      */\n+    @Override\n     public int read() throws IOException {\n         int r = read(singleByte, 0, 1);\n         while (r == 0) {\n      * @throws IndexOutOfBoundsException\n      *             if offset, len or buffer size are invalid\n      */\n+    @Override\n     public int read(byte b[], int offset, int len) throws IOException {\n         if (b == null) {\n             throw new NullPointerException();\n      * \n      * @return false\n      */\n+    @Override\n     public boolean markSupported() {\n         return false; // not an easy job to support marks\n     }\n--- a/src/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java\n+++ b/src/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java\n      * @throws IOException\n      *             if an I/O error occurs.\n      */\n+    @Override\n     public void write(int i) throws IOException {\n         singleByte[0] = (byte) i;\n         write(singleByte, 0, 1);\n      * @throws IndexOutOfBoundsException\n      *             if offset, len or buffer size are invalid\n      */\n+    @Override\n     public void write(byte b[], int offset, int len) throws IOException {\n         if (b == null) {\n             throw new NullPointerException();\n      * @throws IOException\n      *             if an I/O error occurs.\n      */\n+    @Override\n     public void flush() throws IOException {\n         flush(true);\n     }\n      * @throws IOException\n      *             if an I/O error occurs.\n      */\n+    @Override\n     public void close() throws IOException {\n         // Notify encoder of EOF (-1).\n         if (doEncode) {\n--- a/src/java/org/apache/commons/codec/binary/Hex.java\n+++ b/src/java/org/apache/commons/codec/binary/Hex.java\n      * \n      * @return a string representation of the object.\n      */\n+    @Override\n     public String toString() {\n         return super.toString() + \"[charsetName=\" + this.charsetName + \"]\";\n     }\n--- a/src/java/org/apache/commons/codec/language/Caverphone.java\n+++ b/src/java/org/apache/commons/codec/language/Caverphone.java\n  * @since 1.4\n  * @deprecated 1.5 Replaced by {@link Caverphone2}, will be removed in 2.0.\n  */\n+@Deprecated\n public class Caverphone implements StringEncoder {\n \n     /**\n--- a/src/java/org/apache/commons/codec/language/ColognePhonetic.java\n+++ b/src/java/org/apache/commons/codec/language/ColognePhonetic.java\n  * Encodes a string into a Cologne Phonetic value.\n  * </p>\n  * <p>\n- * Implements the <a href=\"http://de.wikipedia.org/wiki/K%C3%B6lner_Phonetik\">\u201cK\u00f6lner Phonetic\u201d</a> (Cologne Phonetic)\n+ * Implements the <a href=\"http://de.wikipedia.org/wiki/K%C3%B6lner_Phonetik\">\u00e2\u20ac\u0153K\u00c3\u00b6lner Phonetic\u00e2\u20ac\ufffd</a> (Cologne Phonetic)\n  * algorithm issued by Hans Joachim Postel in 1969.\n  * </p>\n  * \n  * <p>\n- * The <i>K\u00f6lner Phonetik</i> is a phonetic algorithm which is optimized for the German language. It is related to the\n+ * The <i>K\u00c3\u00b6lner Phonetik</i> is a phonetic algorithm which is optimized for the German language. It is related to the\n  * well-known soundex algorithm.\n  * </p>\n  * \n  * </table>\n  * <p>\n  * <small><i>(Source: <a href= \"http://de.wikipedia.org/wiki/K%C3%B6lner_Phonetik#Buchstabencodes\" >Wikipedia (de):\n- * K\u00f6lner Phonetik \u2013 Buchstabencodes</a>)</i></small>\n+ * K\u00c3\u00b6lner Phonetik \u00e2\u20ac\u201c Buchstabencodes</a>)</i></small>\n  * </p>\n  * \n  * <h4>Example:</h4>\n  * \n- * {@code \"M\u00fcller-L\u00fcdenscheidt\" => \"MULLERLUDENSCHEIDT\" => \"6005507500206880022\"}\n+ * {@code \"M\u00c3\u00bcller-L\u00c3\u00bcdenscheidt\" => \"MULLERLUDENSCHEIDT\" => \"6005507500206880022\"}\n  * \n  * </li>\n  * \n  * \n  * <li>\n  * <h3>Step 3:</h3>\n- * Removal of all codes \u201c0\u201d except at the beginning. This means that two or more identical consecutive digits can occur\n+ * Removal of all codes \u00e2\u20ac\u01530\u00e2\u20ac\ufffd except at the beginning. This means that two or more identical consecutive digits can occur\n  * if they occur after removing the \"0\" digits.\n  * \n  * <h4>Example:</h4>\n  * \n  * </ul>\n  * \n- * @see <a href=\"http://de.wikipedia.org/wiki/K%C3%B6lner_Phonetik\">Wikipedia (de): K\u00f6lner Phonetik (in German)</a>\n+ * @see <a href=\"http://de.wikipedia.org/wiki/K%C3%B6lner_Phonetik\">Wikipedia (de): K\u00c3\u00b6lner Phonetik (in German)</a>\n  * @author Apache Software Foundation\n  * @since 1.5\n  */\n             return length;\n         }\n \n+        @Override\n         public String toString() {\n             return new String(copyData(0, length));\n         }\n             length++;\n         }\n \n+        @Override\n         protected char[] copyData(int start, final int length) {\n             char[] newData = new char[length];\n             System.arraycopy(data, start, newData, 0, length);\n             data[getNextPos()] = ch;\n         }\n \n+        @Override\n         protected char[] copyData(int start, final int length) {\n             char[] newData = new char[length];\n             System.arraycopy(data, data.length - this.length + start, newData, 0, length);\n         }\n     }\n \n-    private static final char[][] PREPROCESS_MAP = new char[][]{{'\\u00C4', 'A'}, // \u00c4\n-        {'\\u00DC', 'U'}, // \u00dc\n-        {'\\u00D6', 'O'}, // \u00d6\n-        {'\\u00DF', 'S'} // \u00df\n+    private static final char[][] PREPROCESS_MAP = new char[][]{{'\\u00C4', 'A'}, // \u00c3\u201e\n+        {'\\u00DC', 'U'}, // \u00c3\u0153\n+        {'\\u00D6', 'O'}, // \u00c3\u2013\n+        {'\\u00DF', 'S'} // \u00c3\u0178\n     };\n \n     /*\n \n     /**\n      * <p>\n-     * <b>colognePhonetic()</b> is the actual implementations of the <i>K\u00f6lner Phonetik</i> algorithm.\n+     * <b>colognePhonetic()</b> is the actual implementations of the <i>K\u00c3\u00b6lner Phonetik</i> algorithm.\n      * </p>\n      * <p>\n      * In contrast to the initial description of the algorithm, this implementation does the encoding in one pass.\n      * </p>\n      * \n      * @param text\n-     * @return the corresponding encoding according to the <i>K\u00f6lner Phonetik</i> algorithm\n+     * @return the corresponding encoding according to the <i>K\u00c3\u00b6lner Phonetik</i> algorithm\n      */\n     public String colognePhonetic(String text) {\n         if (text == null) {\n \n     public Object encode(Object object) throws EncoderException {\n         if (!(object instanceof String)) {\n-            throw new EncoderException(\"This method\u2019s parameter was expected to be of the type \" +\n+            throw new EncoderException(\"This method\u00e2\u20ac\u2122s parameter was expected to be of the type \" +\n                 String.class.getName() +\n                 \". But actually it was of the type \" +\n                 object.getClass().getName() +\n     }\n \n     /*\n-     * Converts the string to upper case and replaces germanic umlauts, and the \u201c\u00df\u201d.\n+     * Converts the string to upper case and replaces germanic umlauts, and the \u00e2\u20ac\u0153\u00c3\u0178\u00e2\u20ac\ufffd.\n      */\n     private String preprocess(String text) {\n         text = text.toUpperCase(Locale.GERMAN);\n--- a/src/java/org/apache/commons/codec/language/Soundex.java\n+++ b/src/java/org/apache/commons/codec/language/Soundex.java\n      * \n      * @deprecated This feature is not needed since the encoding size must be constant. Will be removed in 2.0.\n      */\n+    @Deprecated\n     private int maxLength = 4;\n \n     /**\n      * @deprecated This feature is not needed since the encoding size must be constant. Will be removed in 2.0.\n      * @return int\n      */\n+    @Deprecated\n     public int getMaxLength() {\n         return this.maxLength;\n     }\n      * @param maxLength\n      *                  The maxLength to set\n      */\n+    @Deprecated\n     public void setMaxLength(int maxLength) {\n         this.maxLength = maxLength;\n     }\n--- a/src/java/org/apache/commons/codec/net/BCodec.java\n+++ b/src/java/org/apache/commons/codec/net/BCodec.java\n         this.charset = charset;\n     }\n \n+    @Override\n     protected String getEncoding() {\n         return \"B\";\n     }\n \n+    @Override\n     protected byte[] doEncoding(byte[] bytes) {\n         if (bytes == null) {\n             return null;\n         return Base64.encodeBase64(bytes);\n     }\n \n+    @Override\n     protected byte[] doDecoding(byte[] bytes) {\n         if (bytes == null) {\n             return null;\n--- a/src/java/org/apache/commons/codec/net/QCodec.java\n+++ b/src/java/org/apache/commons/codec/net/QCodec.java\n         this.charset = charset;\n     }\n \n+    @Override\n     protected String getEncoding() {\n         return \"Q\";\n     }\n \n+    @Override\n     protected byte[] doEncoding(byte[] bytes) {\n         if (bytes == null) {\n             return null;\n         return data;\n     }\n \n+    @Override\n     protected byte[] doDecoding(byte[] bytes) throws DecoderException {\n         if (bytes == null) {\n             return null;\n--- a/src/java/org/apache/commons/codec/net/URLCodec.java\n+++ b/src/java/org/apache/commons/codec/net/URLCodec.java\n      * \n      * @deprecated Use {@link #getDefaultCharset()}, will be removed in 2.0.\n      */\n+    @Deprecated\n     public String getEncoding() {\n         return this.charset;\n     }\n--- a/src/test/org/apache/commons/codec/binary/BaseNCodecTest.java\n+++ b/src/test/org/apache/commons/codec/binary/BaseNCodecTest.java\n     @Before\n     public void setUp() {\n         codec = new BaseNCodec(0, 0, 0, 0) {\n+            @Override\n             protected boolean isInAlphabet(byte b) {\n                 return b=='O' || b == 'K'; // allow OK\n             }\n             \n+            @Override\n             void encode(byte[] pArray, int i, int length) {\n             }\n             \n+            @Override\n             void decode(byte[] pArray, int i, int length) {\n             }\n         };        \n--- a/src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java\n+++ b/src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java\n \n     int countdown = 3;\n \n+    @Override\n     public int read() throws IOException {\n         if (this.countdown-- > 0) {\n             return '\\n';\n         }\n     }\n \n+    @Override\n     public int read(byte b[], int pos, int len) throws IOException {\n         if (this.countdown-- > 0) {\n             b[pos] = '\\n';\n--- a/src/test/org/apache/commons/codec/language/Caverphone1Test.java\n+++ b/src/test/org/apache/commons/codec/language/Caverphone1Test.java\n  */\n public class Caverphone1Test extends StringEncoderAbstractTest {\n \n+    @Override\n     protected StringEncoder createStringEncoder() {\n         return new Caverphone1();\n     }\n--- a/src/test/org/apache/commons/codec/language/Caverphone2Test.java\n+++ b/src/test/org/apache/commons/codec/language/Caverphone2Test.java\n  */\n public class Caverphone2Test extends CaverphoneTest {\n \n+    @Override\n     protected StringEncoder createStringEncoder() {\n         return new Caverphone2();\n     }\n--- a/src/test/org/apache/commons/codec/language/CaverphoneTest.java\n+++ b/src/test/org/apache/commons/codec/language/CaverphoneTest.java\n  */\n public class CaverphoneTest extends StringEncoderAbstractTest {\n \n+    @Override\n     protected StringEncoder createStringEncoder() {\n         return new Caverphone();\n     }\n--- a/src/test/org/apache/commons/codec/language/ColognePhoneticTest.java\n+++ b/src/test/org/apache/commons/codec/language/ColognePhoneticTest.java\n  */\n public class ColognePhoneticTest extends StringEncoderAbstractTest {\n \n+    @Override\n     protected StringEncoder createStringEncoder() {\n         return new ColognePhonetic();\n     }\n--- a/src/test/org/apache/commons/codec/language/DoubleMetaphone2Test.java\n+++ b/src/test/org/apache/commons/codec/language/DoubleMetaphone2Test.java\n         }\n     }\n \n+    @Override\n     protected StringEncoder createStringEncoder() {\n         return new DoubleMetaphone();\n     }\n--- a/src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java\n+++ b/src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java\n         return (DoubleMetaphone) this.getStringEncoder();\n     }\n \n+    @Override\n     protected StringEncoder createStringEncoder() {\n         return new DoubleMetaphone();\n     }\n--- a/src/test/org/apache/commons/codec/language/MetaphoneTest.java\n+++ b/src/test/org/apache/commons/codec/language/MetaphoneTest.java\n         return (Metaphone) this.getStringEncoder();\n     }\n \n+    @Override\n     protected StringEncoder createStringEncoder() {\n         return new Metaphone();\n     }\n--- a/src/test/org/apache/commons/codec/language/RefinedSoundexTest.java\n+++ b/src/test/org/apache/commons/codec/language/RefinedSoundexTest.java\n  */\n public class RefinedSoundexTest extends StringEncoderAbstractTest {\n \n+    @Override\n     protected StringEncoder createStringEncoder() {\n         return new RefinedSoundex();\n     }\n--- a/src/test/org/apache/commons/codec/language/SoundexTest.java\n+++ b/src/test/org/apache/commons/codec/language/SoundexTest.java\n  */\n public class SoundexTest extends StringEncoderAbstractTest {\n \n+    @Override\n     protected StringEncoder createStringEncoder() {\n         return new Soundex();\n     }\n--- a/src/test/org/apache/commons/codec/net/RFC1522CodecTest.java\n+++ b/src/test/org/apache/commons/codec/net/RFC1522CodecTest.java\n \n     static class RFC1522TestCodec extends RFC1522Codec {\n \n+        @Override\n         protected byte[] doDecoding(byte[] bytes) {\n             return bytes;\n         }\n \n+        @Override\n         protected byte[] doEncoding(byte[] bytes) {\n             return bytes;\n         }\n \n+        @Override\n         protected String getEncoding() {\n             return \"T\";\n         }", "timestamp": 1301692642, "metainfo": ""}