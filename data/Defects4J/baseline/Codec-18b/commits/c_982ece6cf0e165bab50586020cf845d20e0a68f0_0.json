{"sha": "982ece6cf0e165bab50586020cf845d20e0a68f0", "log": "Harmonize javadoc format style, add missing . at end of first paragraph.  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/BinaryDecoder.java\n+++ b/src/main/java/org/apache/commons/codec/BinaryDecoder.java\n      * Decodes a byte array and returns the results as a byte array.\n      *\n      * @param source\n-     *                  A byte array which has been encoded with the appropriate encoder\n+     *            A byte array which has been encoded with the appropriate encoder\n      * @return a byte array that contains decoded content\n      * @throws DecoderException\n-     *                  A decoder exception is thrown if a Decoder encounters a failure condition during\n-     *                  the decode process.\n+     *             A decoder exception is thrown if a Decoder encounters a failure condition during the decode process.\n      */\n     byte[] decode(byte[] source) throws DecoderException;\n }\n--- a/src/main/java/org/apache/commons/codec/BinaryEncoder.java\n+++ b/src/main/java/org/apache/commons/codec/BinaryEncoder.java\n public interface BinaryEncoder extends Encoder {\n \n     /**\n-     * Encodes a byte array and return the encoded data\n-     * as a byte array.\n+     * Encodes a byte array and return the encoded data as a byte array.\n      *\n      * @param source\n-     *                  Data to be encoded\n+     *            Data to be encoded\n      * @return A byte array containing the encoded data\n      * @throws EncoderException\n-     *                  thrown if the Encoder encounters a failure condition during the encoding process.\n+     *             thrown if the Encoder encounters a failure condition during the encoding process.\n      */\n     byte[] encode(byte[] source) throws EncoderException;\n }\n--- a/src/main/java/org/apache/commons/codec/Decoder.java\n+++ b/src/main/java/org/apache/commons/codec/Decoder.java\n public interface Decoder {\n \n     /**\n-     * Decodes an \"encoded\" Object and returns a \"decoded\" Object.  Note that the implementation of this\n-     * interface will try to cast the Object parameter to the specific type expected by a particular Decoder\n-     * implementation.  If a {@link ClassCastException} occurs this decode method will throw a DecoderException.\n+     * Decodes an \"encoded\" Object and returns a \"decoded\" Object. Note that the implementation of this interface will\n+     * try to cast the Object parameter to the specific type expected by a particular Decoder implementation. If a\n+     * {@link ClassCastException} occurs this decode method will throw a DecoderException.\n      *\n      * @param source\n-     *                  the object to decode\n+     *            the object to decode\n      * @return a 'decoded\" object\n      * @throws DecoderException\n-     *                  a decoder exception can be thrown for any number of reasons.  Some good candidates are that\n-     *                  the parameter passed to this method is null, a param cannot be cast to the appropriate type\n-     *                  for a specific encoder.\n+     *             a decoder exception can be thrown for any number of reasons. Some good candidates are that the\n+     *             parameter passed to this method is null, a param cannot be cast to the appropriate type for a\n+     *             specific encoder.\n      */\n     Object decode(Object source) throws DecoderException;\n }\n--- a/src/main/java/org/apache/commons/codec/DecoderException.java\n+++ b/src/main/java/org/apache/commons/codec/DecoderException.java\n \n     /**\n      * Constructs a new exception with the specified detail message and cause.\n-     *\n      * <p>\n      * Note that the detail message associated with <code>cause</code> is not automatically incorporated into this\n      * exception's detail message.\n-     * </p>\n      *\n      * @param message\n      *            The detail message which is saved for later retrieval by the {@link #getMessage()} method.\n--- a/src/main/java/org/apache/commons/codec/Encoder.java\n+++ b/src/main/java/org/apache/commons/codec/Encoder.java\n      * <code>byte[]</code> or <code>String</code>s depending on the implementation used.\n      *\n      * @param source\n-     *                  An object to encode\n+     *            An object to encode\n      * @return An \"encoded\" Object\n      * @throws EncoderException\n-     *                  An encoder exception is thrown if the encoder experiences a failure condition during\n-     *                  the encoding process.\n+     *             An encoder exception is thrown if the encoder experiences a failure condition during the encoding\n+     *             process.\n      */\n     Object encode(Object source) throws EncoderException;\n }\n--- a/src/main/java/org/apache/commons/codec/StringDecoder.java\n+++ b/src/main/java/org/apache/commons/codec/StringDecoder.java\n      * Decodes a String and returns a String.\n      *\n      * @param source\n-     *                  the String to decode\n+     *            the String to decode\n      * @return the encoded String\n      * @throws DecoderException\n-     *                  thrown if there is an error condition during the Encoding process.\n+     *             thrown if there is an error condition during the Encoding process.\n      */\n     String decode(String source) throws DecoderException;\n }\n--- a/src/main/java/org/apache/commons/codec/StringEncoder.java\n+++ b/src/main/java/org/apache/commons/codec/StringEncoder.java\n      * Encodes a String and returns a String.\n      *\n      * @param source\n-     *                  the String to encode\n+     *            the String to encode\n      * @return the encoded String\n      * @throws EncoderException\n-     *                  thrown if there is an error condition during the encoding process.\n+     *             thrown if there is an error condition during the encoding process.\n      */\n     String encode(String source) throws EncoderException;\n }\n--- a/src/main/java/org/apache/commons/codec/net/BCodec.java\n+++ b/src/main/java/org/apache/commons/codec/net/BCodec.java\n      * Constructor which allows for the selection of a default charset\n      *\n      * @param charset\n-     *                  the default string charset to use.\n+     *            the default string charset to use.\n      *\n      * @see <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      * @since 1.7\n      * Constructor which allows for the selection of a default charset\n      *\n      * @param charsetName\n-     *                  the default charset to use.\n+     *            the default charset to use.\n      * @throws UnsupportedCharsetException\n      *             If the named charset is unavailable\n      * @since 1.7 throws UnsupportedCharsetException if the named charset is unavailable\n      * Encodes a string into its Base64 form using the specified charset. Unsafe characters are escaped.\n      *\n      * @param value\n-     *                  string to convert to Base64 form\n+     *            string to convert to Base64 form\n      * @param charset\n-     *                  the charset for <code>value</code>\n+     *            the charset for <code>value</code>\n      * @return Base64 string\n-     *\n-     * @throws EncoderException\n-     *                  thrown if a failure condition is encountered during the encoding process.\n+     * @throws EncoderException\n+     *             thrown if a failure condition is encountered during the encoding process.\n      * @since 1.7\n      */\n     public String encode(final String value, final Charset charset) throws EncoderException {\n      * Encodes a string into its Base64 form using the specified charset. Unsafe characters are escaped.\n      *\n      * @param value\n-     *                  string to convert to Base64 form\n+     *            string to convert to Base64 form\n      * @param charset\n-     *                  the charset for <code>value</code>\n+     *            the charset for <code>value</code>\n      * @return Base64 string\n-     *\n-     * @throws EncoderException\n-     *                  thrown if a failure condition is encountered during the encoding process.\n+     * @throws EncoderException\n+     *             thrown if a failure condition is encountered during the encoding process.\n      */\n     public String encode(final String value, final String charset) throws EncoderException {\n         if (value == null) {\n      * Encodes a string into its Base64 form using the default charset. Unsafe characters are escaped.\n      *\n      * @param value\n-     *                  string to convert to Base64 form\n+     *            string to convert to Base64 form\n      * @return Base64 string\n-     *\n-     * @throws EncoderException\n-     *                  thrown if a failure condition is encountered during the encoding process.\n+     * @throws EncoderException\n+     *             thrown if a failure condition is encountered during the encoding process.\n      */\n     @Override\n     public String encode(String value) throws EncoderException {\n      * Encodes an object into its Base64 form using the default charset. Unsafe characters are escaped.\n      *\n      * @param value\n-     *                  object to convert to Base64 form\n+     *            object to convert to Base64 form\n      * @return Base64 object\n-     *\n-     * @throws EncoderException\n-     *                  thrown if a failure condition is encountered during the encoding process.\n+     * @throws EncoderException\n+     *             thrown if a failure condition is encountered during the encoding process.\n      */\n     @Override\n     public Object encode(Object value) throws EncoderException {\n      * representation.\n      *\n      * @param value\n-     *                  Base64 object to convert into its original form\n-     *\n+     *            Base64 object to convert into its original form\n      * @return original object\n-     *\n      * @throws DecoderException\n-     *                  Thrown if the argument is not a <code>String</code>. Thrown if a failure condition is\n-     *                  encountered during the decode process.\n+     *             Thrown if the argument is not a <code>String</code>. Thrown if a failure condition is encountered\n+     *             during the decode process.\n      */\n     @Override\n     public Object decode(Object value) throws DecoderException {\n--- a/src/main/java/org/apache/commons/codec/net/QCodec.java\n+++ b/src/main/java/org/apache/commons/codec/net/QCodec.java\n     }\n \n     /**\n-     * Constructor which allows for the selection of a default charset\n+     * Constructor which allows for the selection of a default charset.\n      *\n      * @param charset\n-     *                  the default string charset to use.\n+     *            the default string charset to use.\n      *\n      * @see <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      * @since 1.7\n     }\n \n     /**\n-     * Constructor which allows for the selection of a default charset\n+     * Constructor which allows for the selection of a default charset.\n      *\n      * @param charsetName\n-     *                  the charset to use.\n+     *            the charset to use.\n      * @throws UnsupportedCharsetException\n      *             If the named charset is unavailable\n      * @since 1.7 throws UnsupportedCharsetException if the named charset is unavailable\n      * Encodes a string into its quoted-printable form using the specified charset. Unsafe characters are escaped.\n      *\n      * @param str\n-     *                  string to convert to quoted-printable form\n+     *            string to convert to quoted-printable form\n      * @param charset\n-     *                  the charset for str\n+     *            the charset for str\n      * @return quoted-printable string\n-     *\n      * @throws EncoderException\n-     *                  thrown if a failure condition is encountered during the encoding process.\n+     *             thrown if a failure condition is encountered during the encoding process.\n      * @since 1.7\n      */\n     public String encode(final String str, final Charset charset) throws EncoderException {\n      * Encodes a string into its quoted-printable form using the specified charset. Unsafe characters are escaped.\n      *\n      * @param str\n-     *                  string to convert to quoted-printable form\n+     *            string to convert to quoted-printable form\n      * @param charset\n-     *                  the charset for str\n+     *            the charset for str\n      * @return quoted-printable string\n-     *\n      * @throws EncoderException\n-     *                  thrown if a failure condition is encountered during the encoding process.\n+     *             thrown if a failure condition is encountered during the encoding process.\n      */\n     public String encode(final String str, final String charset) throws EncoderException {\n         if (str == null) {\n      * Encodes a string into its quoted-printable form using the default charset. Unsafe characters are escaped.\n      *\n      * @param str\n-     *                  string to convert to quoted-printable form\n+     *            string to convert to quoted-printable form\n      * @return quoted-printable string\n-     *\n      * @throws EncoderException\n-     *                  thrown if a failure condition is encountered during the encoding process.\n+     *             thrown if a failure condition is encountered during the encoding process.\n      */\n     @Override\n     public String encode(String str) throws EncoderException {\n      * representation.\n      *\n      * @param str\n-     *                  quoted-printable string to convert into its original form\n-     *\n+     *            quoted-printable string to convert into its original form\n      * @return original string\n-     *\n      * @throws DecoderException\n-     *                  A decoder exception is thrown if a failure condition is encountered during the decode process.\n+     *             A decoder exception is thrown if a failure condition is encountered during the decode process.\n      */\n     @Override\n     public String decode(String str) throws DecoderException {\n      * Encodes an object into its quoted-printable form using the default charset. Unsafe characters are escaped.\n      *\n      * @param obj\n-     *                  object to convert to quoted-printable form\n+     *            object to convert to quoted-printable form\n      * @return quoted-printable object\n-     *\n      * @throws EncoderException\n-     *                  thrown if a failure condition is encountered during the encoding process.\n+     *             thrown if a failure condition is encountered during the encoding process.\n      */\n     @Override\n     public Object encode(Object obj) throws EncoderException {\n      * representation.\n      *\n      * @param obj\n-     *                  quoted-printable object to convert into its original form\n-     *\n+     *            quoted-printable object to convert into its original form\n      * @return original object\n-     *\n      * @throws DecoderException\n-     *                  Thrown if the argument is not a <code>String</code>. Thrown if a failure condition is\n-     *                  encountered during the decode process.\n+     *             Thrown if the argument is not a <code>String</code>. Thrown if a failure condition is encountered\n+     *             during the decode process.\n      */\n     @Override\n     public Object decode(Object obj) throws DecoderException {\n      * Defines whether optional transformation of SPACE characters is to be used\n      *\n      * @param b\n-     *                  {@code true} if SPACE characters are to be transformed, {@code false} otherwise\n+     *            {@code true} if SPACE characters are to be transformed, {@code false} otherwise\n      */\n     public void setEncodeBlanks(boolean b) {\n         this.encodeBlanks = b;\n--- a/src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java\n+++ b/src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java\n     }\n \n     /**\n-     * Constructor which allows for the selection of a default charset\n+     * Constructor which allows for the selection of a default charset.\n      *\n      * @param charset\n-     *                  the default string charset to use.\n+     *            the default string charset to use.\n      * @throws UnsupportedCharsetException\n      *             If the named charset is unavailable\n      * @since 1.7\n     }\n \n     /**\n-     * Constructor which allows for the selection of a default charset\n+     * Constructor which allows for the selection of a default charset.\n      *\n      * @param charsetName\n      *            the default string charset to use.\n      * Encodes byte into its quoted-printable representation.\n      *\n      * @param b\n-     *                  byte to encode\n+     *            byte to encode\n      * @param buffer\n-     *                  the buffer to write to\n+     *            the buffer to write to\n      */\n     private static final void encodeQuotedPrintable(int b, ByteArrayOutputStream buffer) {\n         buffer.write(ESCAPE_CHAR);\n      * RFC 1521 and is suitable for encoding binary data and unformatted text.\n      *\n      * @param printable\n-     *                  bitset of characters deemed quoted-printable\n+     *            bitset of characters deemed quoted-printable\n      * @param bytes\n-     *                  array of bytes to be encoded\n+     *            array of bytes to be encoded\n      * @return array of bytes containing quoted-printable data\n      */\n     public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {\n      * RFC 1521.\n      *\n      * @param bytes\n-     *                  array of quoted-printable characters\n+     *            array of quoted-printable characters\n      * @return array of original bytes\n      * @throws DecoderException\n-     *                  Thrown if quoted-printable decoding is unsuccessful\n+     *             Thrown if quoted-printable decoding is unsuccessful\n      */\n     public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException {\n         if (bytes == null) {\n      * RFC 1521 and is suitable for encoding binary data and unformatted text.\n      *\n      * @param bytes\n-     *                  array of bytes to be encoded\n+     *            array of bytes to be encoded\n      * @return array of bytes containing quoted-printable data\n      */\n     @Override\n      * RFC 1521.\n      *\n      * @param bytes\n-     *                  array of quoted-printable characters\n+     *            array of quoted-printable characters\n      * @return array of original bytes\n      * @throws DecoderException\n-     *                  Thrown if quoted-printable decoding is unsuccessful\n+     *             Thrown if quoted-printable decoding is unsuccessful\n      */\n     @Override\n     public byte[] decode(byte[] bytes) throws DecoderException {\n      * RFC 1521 and is suitable for encoding binary data.\n      *\n      * @param str\n-     *                  string to convert to quoted-printable form\n+     *            string to convert to quoted-printable form\n      * @return quoted-printable string\n-     *\n      * @throws EncoderException\n-     *                  Thrown if quoted-printable encoding is unsuccessful\n+     *             Thrown if quoted-printable encoding is unsuccessful\n      *\n      * @see #getCharset()\n      */\n      * are converted back to their original representation.\n      *\n      * @param str\n-     *                  quoted-printable string to convert into its original form\n+     *            quoted-printable string to convert into its original form\n      * @param charset\n-     *                  the original string charset\n+     *            the original string charset\n      * @return original string\n      * @throws DecoderException\n-     *                  Thrown if quoted-printable decoding is unsuccessful\n+     *             Thrown if quoted-printable decoding is unsuccessful\n      * @since 1.7\n      */\n     public String decode(String str, Charset charset) throws DecoderException {\n      * are converted back to their original representation.\n      *\n      * @param str\n-     *                  quoted-printable string to convert into its original form\n+     *            quoted-printable string to convert into its original form\n      * @param charset\n-     *                  the original string charset\n+     *            the original string charset\n      * @return original string\n      * @throws DecoderException\n-     *                  Thrown if quoted-printable decoding is unsuccessful\n+     *             Thrown if quoted-printable decoding is unsuccessful\n      * @throws UnsupportedEncodingException\n-     *                  Thrown if charset is not supported\n+     *             Thrown if charset is not supported\n      */\n     public String decode(String str, String charset) throws DecoderException, UnsupportedEncodingException {\n         if (str == null) {\n      * converted back to their original representation.\n      *\n      * @param str\n-     *                  quoted-printable string to convert into its original form\n+     *            quoted-printable string to convert into its original form\n      * @return original string\n      * @throws DecoderException\n-     *                  Thrown if quoted-printable decoding is unsuccessful.\n-     *                  Thrown if charset is not supported.\n+     *             Thrown if quoted-printable decoding is unsuccessful. Thrown if charset is not supported.\n      * @see #getCharset()\n      */\n     @Override\n      * Encodes an object into its quoted-printable safe form. Unsafe characters are escaped.\n      *\n      * @param obj\n-     *                  string to convert to a quoted-printable form\n+     *            string to convert to a quoted-printable form\n      * @return quoted-printable object\n      * @throws EncoderException\n-     *                  Thrown if quoted-printable encoding is not applicable to objects of this type or if\n-     *                  encoding is unsuccessful\n+     *             Thrown if quoted-printable encoding is not applicable to objects of this type or if encoding is\n+     *             unsuccessful\n      */\n     @Override\n     public Object encode(Object obj) throws EncoderException {\n     }\n \n     /**\n-     * Decodes a quoted-printable object into its original form. Escaped characters are converted back to their\n-     * original representation.\n+     * Decodes a quoted-printable object into its original form. Escaped characters are converted back to their original\n+     * representation.\n      *\n      * @param obj\n-     *                  quoted-printable object to convert into its original form\n+     *            quoted-printable object to convert into its original form\n      * @return original object\n      * @throws DecoderException\n-     *                  Thrown if the argument is not a <code>String</code> or <code>byte[]</code>.\n-     *                  Thrown if a failure condition is encountered during the decode process.\n+     *             Thrown if the argument is not a <code>String</code> or <code>byte[]</code>. Thrown if a failure\n+     *             condition is encountered during the decode process.\n      */\n     @Override\n     public Object decode(Object obj) throws DecoderException {\n      * RFC 1521 and is suitable for encoding binary data and unformatted text.\n      *\n      * @param str\n-     *                  string to convert to quoted-printable form\n+     *            string to convert to quoted-printable form\n      * @param charset\n-     *                  the charset for str\n+     *            the charset for str\n      * @return quoted-printable string\n      * @since 1.7\n      */\n      * RFC 1521 and is suitable for encoding binary data and unformatted text.\n      *\n      * @param str\n-     *                  string to convert to quoted-printable form\n+     *            string to convert to quoted-printable form\n      * @param charset\n-     *                  the charset for str\n+     *            the charset for str\n      * @return quoted-printable string\n-     *\n      * @throws UnsupportedEncodingException\n-     *                  Thrown if the charset is not supported\n+     *             Thrown if the charset is not supported\n      */\n     public String encode(String str, String charset) throws UnsupportedEncodingException {\n         if (str == null) {\n--- a/src/main/java/org/apache/commons/codec/net/RFC1522Codec.java\n+++ b/src/main/java/org/apache/commons/codec/net/RFC1522Codec.java\n  */\n abstract class RFC1522Codec {\n \n-    /**\n-     * Separator.\n-     */\n+    /** Separator. */\n     protected static final char SEP = '?';\n \n-    /**\n-     * Prefix\n-     */\n+    /** Prefix. */\n     protected static final String POSTFIX = \"?=\";\n \n-    /**\n-     * Postfix\n-     */\n+    /** Postfix. */\n     protected static final String PREFIX = \"=?\";\n \n     /**\n-     * Applies an RFC 1522 compliant encoding scheme to the given string of text with the\n-     * given charset. This method constructs the \"encoded-word\" header common to all the\n-     * RFC 1522 codecs and then invokes {@link #doEncoding(byte [])} method of a concrete\n-     * class to perform the specific encoding.\n+     * Applies an RFC 1522 compliant encoding scheme to the given string of text with the given charset.\n+     * <p>\n+     * This method constructs the \"encoded-word\" header common to all the RFC 1522 codecs and then invokes\n+     * {@link #doEncoding(byte [])} method of a concrete class to perform the specific encoding.\n      *\n-     * @param text a string to encode\n-     * @param charset a charset to be used\n-     *\n+     * @param text\n+     *            a string to encode\n+     * @param charset\n+     *            a charset to be used\n      * @return RFC 1522 compliant \"encoded-word\"\n-     *\n-     * @throws EncoderException thrown if there is an error condition during the Encoding\n-     *  process.\n+     * @throws EncoderException\n+     *             thrown if there is an error condition during the Encoding process.\n      * @see <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      */\n-    protected String encodeText(final String text, final Charset charset)\n-     throws EncoderException\n-    {\n+    protected String encodeText(final String text, final Charset charset) throws EncoderException {\n         if (text == null) {\n             return null;\n         }\n     }\n \n     /**\n-     * Applies an RFC 1522 compliant encoding scheme to the given string of text with the\n-     * given charset. This method constructs the \"encoded-word\" header common to all the\n-     * RFC 1522 codecs and then invokes {@link #doEncoding(byte [])} method of a concrete\n-     * class to perform the specific encoding.\n+     * Applies an RFC 1522 compliant encoding scheme to the given string of text with the given charset.\n+     * <p>\n+     * This method constructs the \"encoded-word\" header common to all the RFC 1522 codecs and then invokes\n+     * {@link #doEncoding(byte [])} method of a concrete class to perform the specific encoding.\n      *\n-     * @param text a string to encode\n-     * @param charsetName the charset to use\n-     *\n+     * @param text\n+     *            a string to encode\n+     * @param charsetName\n+     *            the charset to use\n      * @return RFC 1522 compliant \"encoded-word\"\n-     *\n-     * @throws EncoderException thrown if there is an error condition during the Encoding\n-     *  process.\n-     * @throws UnsupportedEncodingException if charset is not available\n+     * @throws EncoderException\n+     *             thrown if there is an error condition during the Encoding process.\n+     * @throws UnsupportedEncodingException\n+     *             if charset is not available\n      *\n      * @see <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      */\n     protected String encodeText(final String text, final String charsetName)\n-     throws EncoderException, UnsupportedEncodingException\n-    {\n+            throws EncoderException, UnsupportedEncodingException {\n         if (text == null) {\n             return null;\n         }\n     }\n \n     /**\n-     * Applies an RFC 1522 compliant decoding scheme to the given string of text. This method\n-     * processes the \"encoded-word\" header common to all the RFC 1522 codecs and then invokes\n+     * Applies an RFC 1522 compliant decoding scheme to the given string of text.\n+     * <p>\n+     * This method processes the \"encoded-word\" header common to all the RFC 1522 codecs and then invokes\n      * {@link #doEncoding(byte [])} method of a concrete class to perform the specific decoding.\n      *\n-     * @param text a string to decode\n+     * @param text\n+     *            a string to decode\n      * @return A new decoded String or {@code null} if the input is {@code null}.\n-     *\n-     * @throws DecoderException thrown if there is an error condition during the decoding\n-     *  process.\n-     * @throws UnsupportedEncodingException thrown if charset specified in the \"encoded-word\"\n-     *  header is not supported\n+     * @throws DecoderException\n+     *             thrown if there is an error condition during the decoding process.\n+     * @throws UnsupportedEncodingException\n+     *             thrown if charset specified in the \"encoded-word\" header is not supported\n      */\n     protected String decodeText(final String text)\n-     throws DecoderException, UnsupportedEncodingException\n-    {\n+            throws DecoderException, UnsupportedEncodingException {\n         if (text == null) {\n             return null;\n         }\n         }\n         String encoding = text.substring(from, to);\n         if (!getEncoding().equalsIgnoreCase(encoding)) {\n-            throw new DecoderException(\"This codec cannot decode \" +\n-                encoding + \" encoded content\");\n+            throw new DecoderException(\"This codec cannot decode \" + encoding + \" encoded content\");\n         }\n         from = to + 1;\n         to = text.indexOf(SEP, from);\n     }\n \n     /**\n-     * Returns the codec name (referred to as encoding in the RFC 1522)\n+     * Returns the codec name (referred to as encoding in the RFC 1522).\n      *\n      * @return name of the codec\n      */\n     protected abstract String getEncoding();\n \n     /**\n-     * Encodes an array of bytes using the defined encoding scheme\n+     * Encodes an array of bytes using the defined encoding scheme.\n      *\n-     * @param bytes Data to be encoded\n-     *\n+     * @param bytes\n+     *            Data to be encoded\n      * @return A byte array containing the encoded data\n-     *\n-     * @throws EncoderException thrown if the Encoder encounters a failure condition\n-     *  during the encoding process.\n+     * @throws EncoderException\n+     *             thrown if the Encoder encounters a failure condition during the encoding process.\n      */\n     protected abstract byte[] doEncoding(byte[] bytes) throws EncoderException;\n \n     /**\n-     * Decodes an array of bytes using the defined encoding scheme\n+     * Decodes an array of bytes using the defined encoding scheme.\n      *\n-     * @param bytes Data to be decoded\n-     *\n+     * @param bytes\n+     *            Data to be decoded\n      * @return a byte array that contains decoded data\n-     *\n-     * @throws DecoderException A decoder exception is thrown if a Decoder encounters a\n-     *  failure condition during the decode process.\n+     * @throws DecoderException\n+     *             A decoder exception is thrown if a Decoder encounters a failure condition during the decode process.\n      */\n     protected abstract byte[] doDecoding(byte[] bytes) throws DecoderException;\n }\n--- a/src/main/java/org/apache/commons/codec/net/URLCodec.java\n+++ b/src/main/java/org/apache/commons/codec/net/URLCodec.java\n     }\n \n     /**\n-     * Constructor which allows for the selection of a default charset\n+     * Constructor which allows for the selection of a default charset.\n      *\n      * @param charset the default string charset to use.\n      */\n      * Encodes an array of bytes into an array of URL safe 7-bit characters. Unsafe characters are escaped.\n      *\n      * @param urlsafe\n-     *                  bitset of characters deemed URL safe\n+     *            bitset of characters deemed URL safe\n      * @param bytes\n-     *                  array of bytes to convert to URL safe characters\n+     *            array of bytes to convert to URL safe characters\n      * @return array of bytes containing URL safe characters\n      */\n     public static final byte[] encodeUrl(BitSet urlsafe, byte[] bytes) {\n     }\n \n     /**\n-     * Decodes an array of URL safe 7-bit characters into an array of\n-     * original bytes. Escaped characters are converted back to their\n-     * original representation.\n+     * Decodes an array of URL safe 7-bit characters into an array of original bytes. Escaped characters are converted\n+     * back to their original representation.\n      *\n      * @param bytes\n-     *                  array of URL safe characters\n+     *            array of URL safe characters\n      * @return array of original bytes\n      * @throws DecoderException\n-     *                  Thrown if URL decoding is unsuccessful\n+     *             Thrown if URL decoding is unsuccessful\n      */\n     public static final byte[] decodeUrl(byte[] bytes) throws DecoderException {\n         if (bytes == null) {\n     }\n \n     /**\n-     * Encodes an array of bytes into an array of URL safe 7-bit\n-     * characters. Unsafe characters are escaped.\n+     * Encodes an array of bytes into an array of URL safe 7-bit characters. Unsafe characters are escaped.\n      *\n      * @param bytes\n-     *                  array of bytes to convert to URL safe characters\n+     *            array of bytes to convert to URL safe characters\n      * @return array of bytes containing URL safe characters\n      */\n     @Override\n \n \n     /**\n-     * Decodes an array of URL safe 7-bit characters into an array of\n-     * original bytes. Escaped characters are converted back to their\n-     * original representation.\n+     * Decodes an array of URL safe 7-bit characters into an array of original bytes. Escaped characters are converted\n+     * back to their original representation.\n      *\n      * @param bytes\n-     *                  array of URL safe characters\n+     *            array of URL safe characters\n      * @return array of original bytes\n      * @throws DecoderException\n-     *                  Thrown if URL decoding is unsuccessful\n+     *             Thrown if URL decoding is unsuccessful\n      */\n     @Override\n     public byte[] decode(byte[] bytes) throws DecoderException {\n      * Encodes a string into its URL safe form using the specified string charset. Unsafe characters are escaped.\n      *\n      * @param str\n-     *                  string to convert to a URL safe form\n+     *            string to convert to a URL safe form\n      * @param charset\n-     *                  the charset for str\n+     *            the charset for str\n      * @return URL safe string\n      * @throws UnsupportedEncodingException\n-     *                  Thrown if charset is not supported\n+     *             Thrown if charset is not supported\n      */\n     public String encode(String str, String charset) throws UnsupportedEncodingException {\n         if (str == null) {\n     }\n \n     /**\n-     * Encodes a string into its URL safe form using the default string\n-     * charset. Unsafe characters are escaped.\n+     * Encodes a string into its URL safe form using the default string charset. Unsafe characters are escaped.\n      *\n      * @param str\n-     *                  string to convert to a URL safe form\n+     *            string to convert to a URL safe form\n      * @return URL safe string\n      * @throws EncoderException\n-     *                  Thrown if URL encoding is unsuccessful\n+     *             Thrown if URL encoding is unsuccessful\n      *\n      * @see #getDefaultCharset()\n      */\n \n \n     /**\n-     * Decodes a URL safe string into its original form using the\n-     * specified encoding. Escaped characters are converted back\n-     * to their original representation.\n+     * Decodes a URL safe string into its original form using the specified encoding. Escaped characters are converted\n+     * back to their original representation.\n      *\n      * @param str\n-     *                  URL safe string to convert into its original form\n+     *            URL safe string to convert into its original form\n      * @param charset\n-     *                  the original string charset\n+     *            the original string charset\n      * @return original string\n      * @throws DecoderException\n-     *                  Thrown if URL decoding is unsuccessful\n+     *             Thrown if URL decoding is unsuccessful\n      * @throws UnsupportedEncodingException\n-     *                  Thrown if charset is not supported\n+     *             Thrown if charset is not supported\n      */\n     public String decode(String str, String charset) throws DecoderException, UnsupportedEncodingException {\n         if (str == null) {\n     }\n \n     /**\n-     * Decodes a URL safe string into its original form using the default\n-     * string charset. Escaped characters are converted back to their\n-     * original representation.\n+     * Decodes a URL safe string into its original form using the default string charset. Escaped characters are\n+     * converted back to their original representation.\n      *\n      * @param str\n-     *                  URL safe string to convert into its original form\n+     *            URL safe string to convert into its original form\n      * @return original string\n      * @throws DecoderException\n-     *                  Thrown if URL decoding is unsuccessful\n+     *             Thrown if URL decoding is unsuccessful\n      * @see #getDefaultCharset()\n      */\n     @Override\n      * Encodes an object into its URL safe form. Unsafe characters are escaped.\n      *\n      * @param obj\n-     *                  string to convert to a URL safe form\n+     *            string to convert to a URL safe form\n      * @return URL safe object\n      * @throws EncoderException\n-     *                  Thrown if URL encoding is not applicable to objects of this type or if encoding is unsuccessful\n+     *             Thrown if URL encoding is not applicable to objects of this type or if encoding is unsuccessful\n      */\n     @Override\n     public Object encode(Object obj) throws EncoderException {\n      * representation.\n      *\n      * @param obj\n-     *                  URL safe object to convert into its original form\n+     *            URL safe object to convert into its original form\n      * @return original object\n      * @throws DecoderException\n-     *                  Thrown if the argument is not a <code>String</code> or <code>byte[]</code>.\n-     *                  Thrown if a failure condition is encountered during the decode process.\n+     *             Thrown if the argument is not a <code>String</code> or <code>byte[]</code>. Thrown if a failure\n+     *             condition is encountered during the decode process.\n      */\n     @Override\n     public Object decode(Object obj) throws DecoderException {", "timestamp": 1346360572, "metainfo": ""}