{"sha": "92fab79e30573bd8fbe3aad4a37ae3c6e6c38871", "log": "Sort methods AB.  ", "commit": "\n--- a/src/test/org/apache/commons/codec/language/bm/RuleTest.java\n+++ b/src/test/org/apache/commons/codec/language/bm/RuleTest.java\n  * @since 2.0\n  */\n public class RuleTest {\n+    private static class NegativeIntegerBaseMatcher extends BaseMatcher<Integer> {\n+        public void describeTo(Description description) {\n+            description.appendText(\"value should be negative\");\n+        }\n+\n+        public boolean matches(Object item) {\n+            return ((Integer) item) < 0;\n+        }\n+    }\n+\n     private Rule.Phoneme[][] makePhonemes() {\n         String[][] words = {\n                 { \"rinD\", \"rinDlt\", \"rina\", \"rinalt\", \"rino\", \"rinolt\", \"rinu\", \"rinult\" },\n     }\n \n     @Test\n-    public void phonemeComparedToSelfIsZero() {\n-        for (Rule.Phoneme[] phs : makePhonemes()) {\n-            for (Rule.Phoneme ph : phs) {\n-                assertEquals(\"Phoneme compared to itself should be zero: \" + ph.getPhonemeText(), 0, ph.compareTo(ph));\n-            }\n-        }\n-    }\n-\n-    @Test\n     public void phonemeComparedToLaterIsNegative() {\n         for (Rule.Phoneme[] phs : makePhonemes()) {\n             for (int i = 0; i < phs.length; i++) {\n         }\n     }\n \n-    private static class NegativeIntegerBaseMatcher extends BaseMatcher<Integer> {\n-        public boolean matches(Object item) {\n-            return ((Integer) item) < 0;\n-        }\n-\n-        public void describeTo(Description description) {\n-            description.appendText(\"value should be negative\");\n+    @Test\n+    public void phonemeComparedToSelfIsZero() {\n+        for (Rule.Phoneme[] phs : makePhonemes()) {\n+            for (Rule.Phoneme ph : phs) {\n+                assertEquals(\"Phoneme compared to itself should be zero: \" + ph.getPhonemeText(), 0, ph.compareTo(ph));\n+            }\n         }\n     }\n }", "timestamp": 1312598152, "metainfo": ""}