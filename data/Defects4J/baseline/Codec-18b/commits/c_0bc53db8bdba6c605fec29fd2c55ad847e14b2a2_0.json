{"sha": "0bc53db8bdba6c605fec29fd2c55ad847e14b2a2", "log": "[CODEC-125] Implement a Beider-Morse phonetic matching codec. Apply Matthew's patch https://issues.apache.org/jira/secure/attachment/12489480/handleH.patch. Also: Reduce speed test loop boundary.  ", "commit": "\n--- a/src/java/org/apache/commons/codec/language/bm/Rule.java\n+++ b/src/java/org/apache/commons/codec/language/bm/Rule.java\n                 Languages ls = Languages.instance(s);\n                 for (String l : ls.getLanguages()) {\n                     try {\n-                        rs.put(l, parseRules(createScanner(s, rt, l)));\n+                        rs.put(l, parseRules(createScanner(s, rt, l), createResourceName(s, rt, l)));\n                     } catch (IllegalStateException e) {\n                         throw new IllegalStateException(\"Problem processing \" + createResourceName(s, rt, l), e);\n                     }\n                 }\n                 if (!rt.equals(RuleType.RULES)) {\n-                    rs.put(\"common\", parseRules(createScanner(s, rt, \"common\")));\n+                    rs.put(\"common\", parseRules(createScanner(s, rt, \"common\"), createResourceName(s, rt, \"common\")));\n                 }\n \n                 rts.put(rt, Collections.unmodifiableMap(rs));\n         }\n     }\n \n-    private static List<Rule> parseRules(Scanner scanner) {\n+    private static List<Rule> parseRules(final Scanner scanner, final String location) {\n         List<Rule> lines = new ArrayList<Rule>();\n         int currentLine = 0;\n \n                         if (incl.contains(\" \")) {\n                             System.err.println(\"Warining: malformed import statement: \" + rawLine);\n                         } else {\n-                            lines.addAll(parseRules(createScanner(incl)));\n+                            lines.addAll(parseRules(createScanner(incl), location + \"->\" + incl));\n                         }\n                     } else {\n                         // rule\n                                 String lCon = stripQuotes(parts[1]);\n                                 String rCon = stripQuotes(parts[2]);\n                                 PhonemeExpr ph = parsePhonemeExpr(stripQuotes(parts[3]));\n-                                Rule r = new Rule(pat, lCon, rCon, ph);\n+                                final int cLine = currentLine;\n+                                Rule r = new Rule(pat, lCon, rCon, ph) {\n+                                    private final int line = cLine;\n+                                    private final String loc = location;\n+\n+                                    @Override\n+                                    public String toString() {\n+                                        final StringBuilder sb = new StringBuilder();\n+                                        sb.append(\"Rule\");\n+                                        sb.append(\"{line=\").append(line);\n+                                        sb.append(\", loc='\").append(loc).append('\\'');\n+                                        sb.append('}');\n+                                        return sb.toString();\n+                                    }\n+                                };\n                                 lines.add(r);\n                             } catch (IllegalArgumentException e) {\n                                 throw new IllegalStateException(\"Problem parsing line \" + currentLine, e);\n--- a/src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java\n+++ b/src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java\n import org.apache.commons.codec.StringEncoder;\n import org.apache.commons.codec.StringEncoderAbstractTest;\n import org.junit.Assert;\n-import org.junit.Ignore;\n import org.junit.Test;\n \n /**\n         return new BeiderMorseEncoder();\n     }\n \n-    @Ignore\n+    // @Ignore\n     @Test\n     public void testAsciiEncodeNotEmpty1Letter() throws EncoderException {\n         BeiderMorseEncoder bmpm = new BeiderMorseEncoder();\n         Languages.instance(\"thereIsNoSuchLanguage\");\n     }\n \n-    // @Ignore\n     @Test(timeout = 10000L)\n     public void testLongestEnglishSurname() throws EncoderException {\n         BeiderMorseEncoder bmpm = new BeiderMorseEncoder();\n         Random rand = new Random();\n         stringBuffer.append(chars[rand.nextInt(chars.length)]);\n         long start;\n-        for (int i = 0; i < 40; i++) {\n+        for (int i = 0; i < 30; i++) {\n             start = System.currentTimeMillis();\n             // System.out.println(i + \" String to encode:\" + stringBuffer.toString());\n             bmpm.encode(stringBuffer.toString());", "timestamp": 1312558408, "metainfo": ""}