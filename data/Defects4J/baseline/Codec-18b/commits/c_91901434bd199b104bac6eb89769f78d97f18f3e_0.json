{"sha": "91901434bd199b104bac6eb89769f78d97f18f3e", "log": "Use final.  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/binary/CharSequenceUtils.java\n+++ b/src/main/java/org/apache/commons/codec/binary/CharSequenceUtils.java\n         int tmpLen = length;\n \n         while (tmpLen-- > 0) {\n-            char c1 = cs.charAt(index1++);\n-            char c2 = substring.charAt(index2++);\n+            final char c1 = cs.charAt(index1++);\n+            final char c2 = substring.charAt(index2++);\n \n             if (c1 == c2) {\n                 continue;\n--- a/src/main/java/org/apache/commons/codec/language/bm/Languages.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/Languages.java\n             } else {\n                 final SomeLanguages sl = (SomeLanguages) other;\n                 final Set<String> ls = new HashSet<String>(Math.min(languages.size(), sl.languages.size()));\n-                for (String lang : languages) {\n+                for (final String lang : languages) {\n                     if (sl.languages.contains(lang)) {\n                         ls.add(lang);\n                     }\n             } else {\n                 final SomeLanguages sl = (SomeLanguages) other;\n                 final Set<String> ls = new HashSet<String>(languages);\n-                for (String lang : sl.languages) {\n+                for (final String lang : sl.languages) {\n                   ls.add(lang);\n                 }\n                 return from(ls);\n--- a/src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java\n         private final Map<String, List<Rule>> finalRules;\n         private final CharSequence input;\n \n-        private PhonemeBuilder phonemeBuilder;\n+        private final PhonemeBuilder phonemeBuilder;\n         private int i;\n         private final int maxPhonemes;\n         private boolean found;\n--- a/src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java\n+++ b/src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java\n      *            array of bytes to be encoded\n      * @return array of bytes containing quoted-printable data\n      */\n-    public static final byte[] encodeQuotedPrintable(BitSet printable, final byte[] bytes) {\n+    public static final byte[] encodeQuotedPrintable(final BitSet printable, final byte[] bytes) {\n         return encodeQuotedPrintable(printable, bytes, false);\n     }\n \n      * @return array of bytes containing quoted-printable data\n      * @since 1.10\n      */\n-    public static final byte[] encodeQuotedPrintable(BitSet printable, final byte[] bytes, boolean strict) {\n+    public static final byte[] encodeQuotedPrintable(BitSet printable, final byte[] bytes, final boolean strict) {\n         if (bytes == null) {\n             return null;\n         }\n             // encode up to buffer.length - 3, the last three octets will be treated\n             // separately for simplification of note #3\n             for (int i = 0; i < bytes.length - 3; i++) {\n-                int b = getUnsignedOctet(i, bytes);\n+                final int b = getUnsignedOctet(i, bytes);\n                 if (pos < SAFE_LENGTH) {\n                     // up to this length it is safe to add any byte, encoded or not\n                     pos += encodeByte(b, !printable.get(b), buffer);\n--- a/src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java\n+++ b/src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java\n         };\n \n         // When\n-        byte actualPaddingByte = codec.pad;\n+        final byte actualPaddingByte = codec.pad;\n \n         // Then\n         assertEquals(0x25, actualPaddingByte);\n--- a/src/test/java/org/apache/commons/codec/binary/HexTest.java\n+++ b/src/test/java/org/apache/commons/codec/binary/HexTest.java\n \n     @Test\n     public void testDecodeByteBufferOddCharacters() {\n-        ByteBuffer buffer = ByteBuffer.allocate(1);\n+        final ByteBuffer buffer = ByteBuffer.allocate(1);\n         buffer.put((byte) 65);\n         try {\n             new Hex().decode(buffer);\n--- a/src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java\n+++ b/src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java\n         return new DaitchMokotoffSoundex();\n     }\n \n-    private String soundex(String source) {\n+    private String soundex(final String source) {\n         return getStringEncoder().soundex(source);\n     }\n \n-    private String encode(String source) {\n+    private String encode(final String source) {\n         return getStringEncoder().encode(source);\n     }\n \n--- a/src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java\n+++ b/src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java\n         // see CODEC-187\n         // comparison: http://stevemorse.org/census/soundex.html\n \n-        Map<String, String> args = new TreeMap<String, String>();\n+        final Map<String, String> args = new TreeMap<String, String>();\n         args.put(\"nameType\", \"GENERIC\");\n         args.put(\"ruleType\", \"APPROX\");\n \n--- a/src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java\n+++ b/src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java\n         final String qpdata = \"If you believe that truth=3Dbeauty, then surely=20=\\r\\nmathematics is the most beautiful branch of philosophy.\";\n         final String expected = \"If you believe that truth=beauty, then surely mathematics is the most beautiful branch of philosophy.\";\n \n-        QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n+        final QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n         assertEquals(expected, qpcodec.decode(qpdata));\n \n-        String encoded = qpcodec.encode(expected);\n+        final String encoded = qpcodec.encode(expected);\n         assertEquals(expected, qpcodec.decode(encoded));\n     }\n \n         final String qpdata = \"If you believe that truth=3Dbeauty, then surely mathematics is the most b=\\r\\neautiful branch of philosophy.\";\n         final String expected = \"If you believe that truth=beauty, then surely mathematics is the most beautiful branch of philosophy.\";\n \n-        QuotedPrintableCodec qpcodec = new QuotedPrintableCodec(true);\n+        final QuotedPrintableCodec qpcodec = new QuotedPrintableCodec(true);\n         assertEquals(qpdata, qpcodec.encode(expected));\n \n-        String decoded = qpcodec.decode(qpdata);\n+        final String decoded = qpcodec.decode(qpdata);\n         assertEquals(qpdata, qpcodec.encode(decoded));\n     }\n \n     @Test\n     public void testSkipNotEncodedCRLF() throws Exception {\n-        String qpdata = \"CRLF in an\\n encoded text should be=20=\\r\\n\\rskipped in the\\r decoding.\";\n-        String expected = \"CRLF in an encoded text should be skipped in the decoding.\";\n-\n-        QuotedPrintableCodec qpcodec = new QuotedPrintableCodec(true);\n+        final String qpdata = \"CRLF in an\\n encoded text should be=20=\\r\\n\\rskipped in the\\r decoding.\";\n+        final String expected = \"CRLF in an encoded text should be skipped in the decoding.\";\n+\n+        final QuotedPrintableCodec qpcodec = new QuotedPrintableCodec(true);\n         assertEquals(expected, qpcodec.decode(qpdata));\n \n-        String encoded = qpcodec.encode(expected);\n+        final String encoded = qpcodec.encode(expected);\n         assertEquals(expected, qpcodec.decode(encoded));\n     }\n ", "timestamp": 1438919258, "metainfo": ""}