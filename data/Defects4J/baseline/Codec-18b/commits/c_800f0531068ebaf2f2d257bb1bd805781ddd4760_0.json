{"sha": "800f0531068ebaf2f2d257bb1bd805781ddd4760", "log": "CODEC-98 - Base64InputStream causes NullPointerException on some input - https://issues.apache.org/jira/browse/CODEC-98   ", "commit": "\n--- a/src/java/org/apache/commons/codec/binary/Base64.java\n+++ b/src/java/org/apache/commons/codec/binary/Base64.java\n         // EOF (-1) and first time '=' character is encountered in stream.\n         // This approach makes the '=' padding characters completely optional.\n         if (eof && modulus != 0) {\n+            if (buffer == null || buffer.length - pos < decodeSize) {\n+                resizeBuffer();\n+            }\n+            \n             x = x << 6;\n             switch (modulus) {\n                 case 2 :\n--- a/src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java\n+++ b/src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java\n     }\n \n     /**\n+     * Test the Base64InputStream implementation against the special NPE inducing input\n+     * identified in the CODEC-98 bug.\n+     *\n+     * @throws Exception for some failure scenarios.\n+     */\n+    public void testCodec98NPE() throws Exception {\n+        byte[] codec98 = StringUtils.getBytesUtf8(Base64TestData.CODEC_98_NPE);\n+        ByteArrayInputStream data = new ByteArrayInputStream(codec98);\n+        Base64InputStream stream = new Base64InputStream(data);\n+\n+        // This line causes an NPE in commons-codec-1.4.jar:\n+        byte[] decodedBytes = Base64TestData.streamToBytes(stream, new byte[1024]);\n+\n+        String decoded = StringUtils.newStringUtf8(decodedBytes);\n+        assertEquals(\n+            \"codec-98 NPE Base64InputStream\", Base64TestData.CODEC_98_NPE_DECODED, decoded\n+        );\n+    }\n+\n+    /**\n      * Tests the Base64InputStream implementation against empty input.\n      * \n      * @throws Exception\n--- a/src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java\n+++ b/src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java\n     }\n \n     /**\n+     * Test the Base64OutputStream implementation against the special NPE inducing input\n+     * identified in the CODEC-98 bug.\n+     *\n+     * @throws Exception for some failure scenarios.\n+     */\n+    public void testCodec98NPE() throws Exception {\n+        byte[] codec98 = StringUtils.getBytesUtf8(Base64TestData.CODEC_98_NPE);\n+        byte[] codec98_1024 = new byte[1024];\n+        System.arraycopy(codec98, 0, codec98_1024, 0, codec98.length);\n+        ByteArrayOutputStream data = new ByteArrayOutputStream(1024);\n+        Base64OutputStream stream = new Base64OutputStream(data, false);\n+        stream.write(codec98_1024, 0, 1024);\n+        stream.close();\n+\n+        byte[] decodedBytes = data.toByteArray();\n+        String decoded = StringUtils.newStringUtf8(decodedBytes);\n+        assertEquals(\n+            \"codec-98 NPE Base64OutputStream\", Base64TestData.CODEC_98_NPE_DECODED, decoded\n+        );\n+    }\n+    \n+\n+    /**\n      * Test the Base64OutputStream implementation against empty input.\n      * \n      * @throws Exception\n--- a/src/test/org/apache/commons/codec/binary/Base64TestData.java\n+++ b/src/test/org/apache/commons/codec/binary/Base64TestData.java\n  * @since 1.4\n  */\n public class Base64TestData {\n+\n+    public static final String CODEC_98_NPE\n+        = \"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWjAxMjM\";\n+\n+    public static final String CODEC_98_NPE_DECODED\n+        = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123\";\n+\n \n     // OpenSSL doesn't include the final \\n, but it would be annoying beyond belief\n     // to further parameterize commons-codec to support this pointless variation.\n \n     static byte[] streamToBytes(final InputStream in) throws IOException {\n         // new byte[7] is obviously quite slow, but helps exercise the code.\n-        byte[] buf = new byte[7];\n+        return streamToBytes(in, new byte[7]);\n+    }\n+\n+    static byte[] streamToBytes(final InputStream in, byte[] buf) throws IOException {\n         try {\n             int[] status = fill(buf, 0, in);\n             int size = status[SIZE_KEY];", "timestamp": 1275429153, "metainfo": ""}