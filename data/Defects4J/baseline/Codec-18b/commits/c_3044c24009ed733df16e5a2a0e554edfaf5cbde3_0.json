{"sha": "3044c24009ed733df16e5a2a0e554edfaf5cbde3", "log": "Use blocks. Refer to constants where they are defined in BaseNCodec instead of the Base32 and Base64 subclasses.  ", "commit": "\n--- a/src/java/org/apache/commons/codec/language/bm/Lang.java\n+++ b/src/java/org/apache/commons/codec/language/bm/Lang.java\n                     // trim leading-trailing whitespace\n                     line = line.trim();\n \n-                    if (line.length() == 0)\n+                    if (line.length() == 0) {\n                         continue; // empty lines can be safely skipped\n+                    }\n \n                     // split it up\n                     String[] parts = line.split(\"\\\\s+\");\n--- a/src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java\n+++ b/src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java\n             }\n \n             public CharSequence subSequence(int start, int end) {\n-                if (start == end)\n+                if (start == end) {\n                     return \"\";\n+                }\n \n                 CharSequence res = cache[start][end - 1];\n                 if (res == null) {\n--- a/src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java\n+++ b/src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java\n      */\n     @Test\n     public void testBase32EmptyInputStreamMimeChuckSize() throws Exception {\n-        testBase32EmptyInputStream(Base32.MIME_CHUNK_SIZE);\n+        testBase32EmptyInputStream(BaseNCodec.MIME_CHUNK_SIZE);\n     }\n \n     /**\n      */\n     @Test\n     public void testBase32EmptyInputStreamPemChuckSize() throws Exception {\n-        testBase32EmptyInputStream(Base32.PEM_CHUNK_SIZE);\n+        testBase32EmptyInputStream(BaseNCodec.PEM_CHUNK_SIZE);\n     }\n \n     private void testBase32EmptyInputStream(int chuckSize) throws Exception {\n         // Hello World test.\n         byte[] encoded = StringUtils.getBytesUtf8(Base32TestData.BASE32_FIXTURE);\n         byte[] decoded = StringUtils.getBytesUtf8(Base32TestData.STRING_FIXTURE);\n-        testByChunk(encoded, decoded, Base32.MIME_CHUNK_SIZE, CRLF);\n+        testByChunk(encoded, decoded, BaseNCodec.MIME_CHUNK_SIZE, CRLF);\n \n         // Single Byte test.\n         encoded = StringUtils.getBytesUtf8(\"AA======\\r\\n\");\n         decoded = new byte[]{(byte) 0};\n-        testByChunk(encoded, decoded, Base32.MIME_CHUNK_SIZE, CRLF);\n+        testByChunk(encoded, decoded, BaseNCodec.MIME_CHUNK_SIZE, CRLF);\n \n //        // OpenSSL interop test.\n //        encoded = StringUtils.getBytesUtf8(Base32TestData.ENCODED_32_CHARS_PER_LINE);\n         // Hello World test.\n         byte[] encoded = StringUtils.getBytesUtf8(Base32TestData.BASE32_FIXTURE);\n         byte[] decoded = StringUtils.getBytesUtf8(Base32TestData.STRING_FIXTURE);\n-        testByteByByte(encoded, decoded, Base32.MIME_CHUNK_SIZE, CRLF);\n+        testByteByByte(encoded, decoded, BaseNCodec.MIME_CHUNK_SIZE, CRLF);\n \n         // Single Byte test.\n         encoded = StringUtils.getBytesUtf8(\"AA======\\r\\n\");\n         decoded = new byte[]{(byte) 0};\n-        testByteByByte(encoded, decoded, Base32.MIME_CHUNK_SIZE, CRLF);\n+        testByteByByte(encoded, decoded, BaseNCodec.MIME_CHUNK_SIZE, CRLF);\n \n //        // Single Line test.\n //        String singleLine = Base32TestData.ENCODED_32_CHARS_PER_LINE.replaceAll(\"\\n\", \"\");\n--- a/src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java\n+++ b/src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java\n      */\n     @Test\n     public void testBase32EmptyOutputStreamMimeChunkSize() throws Exception {\n-        testBase32EmptyOutputStream(Base32.MIME_CHUNK_SIZE);\n+        testBase32EmptyOutputStream(BaseNCodec.MIME_CHUNK_SIZE);\n     }\n \n     /**\n      */\n     @Test\n     public void testBase32EmptyOutputStreamPemChunkSize() throws Exception {\n-        testBase32EmptyOutputStream(Base32.PEM_CHUNK_SIZE);\n+        testBase32EmptyOutputStream(BaseNCodec.PEM_CHUNK_SIZE);\n     }\n \n     private void testBase32EmptyOutputStream(int chunkSize) throws Exception {\n         // Hello World test.\n         byte[] encoded = StringUtils.getBytesUtf8(Base32TestData.BASE32_FIXTURE);\n         byte[] decoded = StringUtils.getBytesUtf8(Base32TestData.STRING_FIXTURE);\n-        testByChunk(encoded, decoded, Base32.MIME_CHUNK_SIZE, CRLF);\n+        testByChunk(encoded, decoded, BaseNCodec.MIME_CHUNK_SIZE, CRLF);\n \n //        // Single Byte test.\n //        encoded = StringUtils.getBytesUtf8(\"AA==\\r\\n\");\n--- a/src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java\n+++ b/src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java\n      */\n     @Test\n     public void testBase64EmptyInputStreamMimeChuckSize() throws Exception {\n-        testBase64EmptyInputStream(Base64.MIME_CHUNK_SIZE);\n+        testBase64EmptyInputStream(BaseNCodec.MIME_CHUNK_SIZE);\n     }\n \n     /**\n      */\n     @Test\n     public void testBase64EmptyInputStreamPemChuckSize() throws Exception {\n-        testBase64EmptyInputStream(Base64.PEM_CHUNK_SIZE);\n+        testBase64EmptyInputStream(BaseNCodec.PEM_CHUNK_SIZE);\n     }\n \n     private void testBase64EmptyInputStream(int chuckSize) throws Exception {\n         // Hello World test.\n         byte[] encoded = StringUtils.getBytesUtf8(\"SGVsbG8gV29ybGQ=\\r\\n\");\n         byte[] decoded = StringUtils.getBytesUtf8(STRING_FIXTURE);\n-        testByChunk(encoded, decoded, Base64.MIME_CHUNK_SIZE, CRLF);\n+        testByChunk(encoded, decoded, BaseNCodec.MIME_CHUNK_SIZE, CRLF);\n \n         // Single Byte test.\n         encoded = StringUtils.getBytesUtf8(\"AA==\\r\\n\");\n         decoded = new byte[]{(byte) 0};\n-        testByChunk(encoded, decoded, Base64.MIME_CHUNK_SIZE, CRLF);\n+        testByChunk(encoded, decoded, BaseNCodec.MIME_CHUNK_SIZE, CRLF);\n \n         // OpenSSL interop test.\n         encoded = StringUtils.getBytesUtf8(Base64TestData.ENCODED_64_CHARS_PER_LINE);\n         decoded = Base64TestData.DECODED;\n-        testByChunk(encoded, decoded, Base64.PEM_CHUNK_SIZE, LF);\n+        testByChunk(encoded, decoded, BaseNCodec.PEM_CHUNK_SIZE, LF);\n \n         // Single Line test.\n         String singleLine = Base64TestData.ENCODED_64_CHARS_PER_LINE.replaceAll(\"\\n\", \"\");\n         // Hello World test.\n         byte[] encoded = StringUtils.getBytesUtf8(\"SGVsbG8gV29ybGQ=\\r\\n\");\n         byte[] decoded = StringUtils.getBytesUtf8(STRING_FIXTURE);\n-        testByteByByte(encoded, decoded, Base64.MIME_CHUNK_SIZE, CRLF);\n+        testByteByByte(encoded, decoded, BaseNCodec.MIME_CHUNK_SIZE, CRLF);\n \n         // Single Byte test.\n         encoded = StringUtils.getBytesUtf8(\"AA==\\r\\n\");\n         decoded = new byte[]{(byte) 0};\n-        testByteByByte(encoded, decoded, Base64.MIME_CHUNK_SIZE, CRLF);\n+        testByteByByte(encoded, decoded, BaseNCodec.MIME_CHUNK_SIZE, CRLF);\n \n         // OpenSSL interop test.\n         encoded = StringUtils.getBytesUtf8(Base64TestData.ENCODED_64_CHARS_PER_LINE);\n         decoded = Base64TestData.DECODED;\n-        testByteByByte(encoded, decoded, Base64.PEM_CHUNK_SIZE, LF);\n+        testByteByByte(encoded, decoded, BaseNCodec.PEM_CHUNK_SIZE, LF);\n \n         // Single Line test.\n         String singleLine = Base64TestData.ENCODED_64_CHARS_PER_LINE.replaceAll(\"\\n\", \"\");\n--- a/src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java\n+++ b/src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java\n      */\n     @Test\n     public void testBase64EmptyOutputStreamMimeChunkSize() throws Exception {\n-        testBase64EmptyOutputStream(Base64.MIME_CHUNK_SIZE);\n+        testBase64EmptyOutputStream(BaseNCodec.MIME_CHUNK_SIZE);\n     }\n \n     /**\n      */\n     @Test\n     public void testBase64EmptyOutputStreamPemChunkSize() throws Exception {\n-        testBase64EmptyOutputStream(Base64.PEM_CHUNK_SIZE);\n+        testBase64EmptyOutputStream(BaseNCodec.PEM_CHUNK_SIZE);\n     }\n \n     private void testBase64EmptyOutputStream(int chunkSize) throws Exception {\n         // Hello World test.\n         byte[] encoded = StringUtils.getBytesUtf8(\"SGVsbG8gV29ybGQ=\\r\\n\");\n         byte[] decoded = StringUtils.getBytesUtf8(STRING_FIXTURE);\n-        testByChunk(encoded, decoded, Base64.MIME_CHUNK_SIZE, CRLF);\n+        testByChunk(encoded, decoded, BaseNCodec.MIME_CHUNK_SIZE, CRLF);\n \n         // Single Byte test.\n         encoded = StringUtils.getBytesUtf8(\"AA==\\r\\n\");\n         decoded = new byte[]{(byte) 0};\n-        testByChunk(encoded, decoded, Base64.MIME_CHUNK_SIZE, CRLF);\n+        testByChunk(encoded, decoded, BaseNCodec.MIME_CHUNK_SIZE, CRLF);\n \n         // OpenSSL interop test.\n         encoded = StringUtils.getBytesUtf8(Base64TestData.ENCODED_64_CHARS_PER_LINE);\n         decoded = Base64TestData.DECODED;\n-        testByChunk(encoded, decoded, Base64.PEM_CHUNK_SIZE, LF);\n+        testByChunk(encoded, decoded, BaseNCodec.PEM_CHUNK_SIZE, LF);\n \n         // Single Line test.\n         String singleLine = Base64TestData.ENCODED_64_CHARS_PER_LINE.replaceAll(\"\\n\", \"\");\n--- a/src/test/org/apache/commons/codec/binary/Base64Test.java\n+++ b/src/test/org/apache/commons/codec/binary/Base64Test.java\n         encodedContent = StringUtils.newStringUtf8(encodedBytes);\n         assertTrue(\"encoding hello world\", encodedContent.equals(\"SGVsbG8gV29ybGQ=\"));\n \n-        Base64 b64 = new Base64(Base64.MIME_CHUNK_SIZE, null);  // null lineSeparator same as saying no-chunking\n+        Base64 b64 = new Base64(BaseNCodec.MIME_CHUNK_SIZE, null);  // null lineSeparator same as saying no-chunking\n         encodedBytes = b64.encode(StringUtils.getBytesUtf8(content));\n         encodedContent = StringUtils.newStringUtf8(encodedBytes);\n         assertTrue(\"encoding hello world\", encodedContent.equals(\"SGVsbG8gV29ybGQ=\"));\n      */\n     @Test\n     public void testRfc2045Section6Dot8ChunkSizeDefinition() {\n-        assertEquals(76, Base64.MIME_CHUNK_SIZE);\n+        assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);\n     }\n \n     /**\n      */\n     @Test\n     public void testRfc1421Section6Dot8ChunkSizeDefinition() {\n-        assertEquals(64, Base64.PEM_CHUNK_SIZE);\n+        assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);\n     }\n \n     /**", "timestamp": 1314232464, "metainfo": ""}