{"sha": "b72d9cb7c21bcfe225b360f07268e96f5e42fd06", "log": "Sort methods in test case alphabetically.  ", "commit": "\n--- a/src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java\n+++ b/src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java\n                 DigestUtils.md2Hex(new ByteArrayInputStream(testData)));\n     }\n \n-    @Test\n-    public void testMd5Hex() throws IOException {\n-        // Examples from RFC 1321\n-        assertEquals(\"d41d8cd98f00b204e9800998ecf8427e\", DigestUtils.md5Hex(\"\"));\n-\n-        assertEquals(\"0cc175b9c0f1b6a831c399e269772661\", DigestUtils.md5Hex(\"a\"));\n-\n-        assertEquals(\"900150983cd24fb0d6963f7d28e17f72\", DigestUtils.md5Hex(\"abc\"));\n-\n-        assertEquals(\"f96b697d7cb7938d525a2f31aaf161d0\", DigestUtils.md5Hex(\"message digest\"));\n-\n-        assertEquals(\"c3fcd3d76192e4007dfb496cca67e13b\", DigestUtils.md5Hex(\"abcdefghijklmnopqrstuvwxyz\"));\n-\n-        assertEquals(\n-            \"d174ab98d277d9f5a5611c2c9f419d9f\",\n-            DigestUtils.md5Hex(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" + \"abcdefghijklmnopqrstuvwxyz\" + \"0123456789\"));\n-\n-        assertEquals(\n-            \"57edf4a22be3c955ac49da2e2107b67a\",\n-            DigestUtils.md5Hex(\"1234567890123456789012345678901234567890\" + \"1234567890123456789012345678901234567890\"));\n-\n-        assertEquals(DigestUtils.md5Hex(testData),\n-                DigestUtils.md5Hex(new ByteArrayInputStream(testData)));\n-    }\n-\n     /**\n      * An MD2 hash converted to hex should always be 32 characters.\n      */\n     }\n \n     /**\n+     * An MD2 hash should always be a 16 element byte[].\n+     */\n+    @Test\n+    public void testMd2Length() {\n+        String hashMe = \"this is some string that is longer than 16 characters\";\n+        byte[] hash = DigestUtils.md2(getBytesUtf8(hashMe));\n+        assertEquals(16, hash.length);\n+\n+        hashMe = \"length < 16\";\n+        hash = DigestUtils.md2(getBytesUtf8(hashMe));\n+        assertEquals(16, hash.length);\n+    }\n+\n+    @Test\n+    public void testMd5Hex() throws IOException {\n+        // Examples from RFC 1321\n+        assertEquals(\"d41d8cd98f00b204e9800998ecf8427e\", DigestUtils.md5Hex(\"\"));\n+\n+        assertEquals(\"0cc175b9c0f1b6a831c399e269772661\", DigestUtils.md5Hex(\"a\"));\n+\n+        assertEquals(\"900150983cd24fb0d6963f7d28e17f72\", DigestUtils.md5Hex(\"abc\"));\n+\n+        assertEquals(\"f96b697d7cb7938d525a2f31aaf161d0\", DigestUtils.md5Hex(\"message digest\"));\n+\n+        assertEquals(\"c3fcd3d76192e4007dfb496cca67e13b\", DigestUtils.md5Hex(\"abcdefghijklmnopqrstuvwxyz\"));\n+\n+        assertEquals(\n+            \"d174ab98d277d9f5a5611c2c9f419d9f\",\n+            DigestUtils.md5Hex(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" + \"abcdefghijklmnopqrstuvwxyz\" + \"0123456789\"));\n+\n+        assertEquals(\n+            \"57edf4a22be3c955ac49da2e2107b67a\",\n+            DigestUtils.md5Hex(\"1234567890123456789012345678901234567890\" + \"1234567890123456789012345678901234567890\"));\n+\n+        assertEquals(DigestUtils.md5Hex(testData),\n+                DigestUtils.md5Hex(new ByteArrayInputStream(testData)));\n+    }\n+\n+    /**\n      * An MD5 hash converted to hex should always be 32 characters.\n      */\n     @Test\n     }\n \n     /**\n-     * An MD2 hash should always be a 16 element byte[].\n-     */\n-    @Test\n-    public void testMd2Length() {\n-        String hashMe = \"this is some string that is longer than 16 characters\";\n-        byte[] hash = DigestUtils.md2(getBytesUtf8(hashMe));\n-        assertEquals(16, hash.length);\n-\n-        hashMe = \"length < 16\";\n-        hash = DigestUtils.md2(getBytesUtf8(hashMe));\n-        assertEquals(16, hash.length);\n-    }\n-\n-    /**\n      * An MD5 hash should always be a 16 element byte[].\n      */\n     @Test\n         hashMe = \"length < 16\";\n         hash = DigestUtils.md5(getBytesUtf8(hashMe));\n         assertEquals(16, hash.length);\n+    }\n+\n+    @Test\n+    public void testSha1Hex() throws IOException {\n+        // Examples from FIPS 180-1\n+        assertEquals(\"a9993e364706816aba3e25717850c26c9cd0d89d\", DigestUtils.sha1Hex(\"abc\"));\n+\n+        assertEquals(\"a9993e364706816aba3e25717850c26c9cd0d89d\", DigestUtils.sha1Hex(getBytesUtf8(\"abc\")));\n+\n+        assertEquals(\n+            \"84983e441c3bd26ebaae4aa1f95129e5e54670f1\",\n+            DigestUtils.shaHex(\"abcdbcdecdefdefgefghfghighij\" + \"hijkijkljklmklmnlmnomnopnopq\"));\n+        assertEquals(DigestUtils.shaHex(testData),\n+                DigestUtils.sha1Hex(new ByteArrayInputStream(testData)));\n+    }\n+\n+    @Test\n+    public void testSha1UpdateWithByteArray(){\n+        final String d1 = \"C'est un homme qui rentre dans un caf\u00e9, et plouf\";\n+        final String d2 = \"C'est un homme, c'est qu'une t\u00eate, on lui offre un cadeau: 'oh... encore un chapeau!'\";\n+\n+        MessageDigest messageDigest = DigestUtils.getSha1Digest();\n+        messageDigest.update(d1.getBytes());\n+        messageDigest.update(d2.getBytes());\n+        final String expectedResult = Hex.encodeHexString(messageDigest.digest());\n+\n+        messageDigest = DigestUtils.getSha1Digest();\n+        DigestUtils.updateDigest(messageDigest, d1.getBytes());\n+        DigestUtils.updateDigest(messageDigest, d2.getBytes());\n+        final String actualResult = Hex.encodeHexString(messageDigest.digest());\n+\n+        assertEquals(expectedResult, actualResult);\n+    }\n+\n+    @Test\n+    public void testSha1UpdateWithString(){\n+        final String d1 = \"C'est un homme qui rentre dans un caf\u00e9, et plouf\";\n+        final String d2 = \"C'est un homme, c'est qu'une t\u00eate, on lui offre un cadeau: 'oh... encore un chapeau!'\";\n+\n+        MessageDigest messageDigest = DigestUtils.getSha1Digest();\n+        messageDigest.update(StringUtils.getBytesUtf8(d1));\n+        messageDigest.update(StringUtils.getBytesUtf8(d2));\n+        final String expectedResult = Hex.encodeHexString(messageDigest.digest());\n+\n+        messageDigest = DigestUtils.getSha1Digest();\n+        DigestUtils.updateDigest(messageDigest, d1);\n+        DigestUtils.updateDigest(messageDigest, d2);\n+        final String actualResult = Hex.encodeHexString(messageDigest.digest());\n+\n+        assertEquals(expectedResult, actualResult);\n     }\n \n     @Test\n     }\n \n     @Test\n-    public void testSha1Hex() throws IOException {\n-        // Examples from FIPS 180-1\n-        assertEquals(\"a9993e364706816aba3e25717850c26c9cd0d89d\", DigestUtils.sha1Hex(\"abc\"));\n-\n-        assertEquals(\"a9993e364706816aba3e25717850c26c9cd0d89d\", DigestUtils.sha1Hex(getBytesUtf8(\"abc\")));\n-\n-        assertEquals(\n-            \"84983e441c3bd26ebaae4aa1f95129e5e54670f1\",\n-            DigestUtils.shaHex(\"abcdbcdecdefdefgefghfghighij\" + \"hijkijkljklmklmnlmnomnopnopq\"));\n-        assertEquals(DigestUtils.shaHex(testData),\n-                DigestUtils.sha1Hex(new ByteArrayInputStream(testData)));\n-    }\n-\n-    @Test\n-    public void testSha1UpdateWithByteArray(){\n-        final String d1 = \"C'est un homme qui rentre dans un caf\u00e9, et plouf\";\n-        final String d2 = \"C'est un homme, c'est qu'une t\u00eate, on lui offre un cadeau: 'oh... encore un chapeau!'\";\n-\n-        MessageDigest messageDigest = DigestUtils.getSha1Digest();\n-        messageDigest.update(d1.getBytes());\n-        messageDigest.update(d2.getBytes());\n-        final String expectedResult = Hex.encodeHexString(messageDigest.digest());\n-\n-        messageDigest = DigestUtils.getSha1Digest();\n-        DigestUtils.updateDigest(messageDigest, d1.getBytes());\n-        DigestUtils.updateDigest(messageDigest, d2.getBytes());\n-        final String actualResult = Hex.encodeHexString(messageDigest.digest());\n-\n-        assertEquals(expectedResult, actualResult);\n-    }\n-\n-    @Test\n     public void testShaUpdateWithByteArray(){\n         final String d1 = \"C'est un homme qui rentre dans un caf\u00e9, et plouf\";\n         final String d2 = \"C'est un homme, c'est qu'une t\u00eate, on lui offre un cadeau: 'oh... encore un chapeau!'\";\n     }\n \n     @Test\n-    public void testSha1UpdateWithString(){\n-        final String d1 = \"C'est un homme qui rentre dans un caf\u00e9, et plouf\";\n-        final String d2 = \"C'est un homme, c'est qu'une t\u00eate, on lui offre un cadeau: 'oh... encore un chapeau!'\";\n-\n-        MessageDigest messageDigest = DigestUtils.getSha1Digest();\n-        messageDigest.update(StringUtils.getBytesUtf8(d1));\n-        messageDigest.update(StringUtils.getBytesUtf8(d2));\n-        final String expectedResult = Hex.encodeHexString(messageDigest.digest());\n-\n-        messageDigest = DigestUtils.getSha1Digest();\n-        DigestUtils.updateDigest(messageDigest, d1);\n-        DigestUtils.updateDigest(messageDigest, d2);\n-        final String actualResult = Hex.encodeHexString(messageDigest.digest());\n-\n-        assertEquals(expectedResult, actualResult);\n-    }\n-\n-    @Test\n     public void testShaUpdateWithString(){\n         final String d1 = \"C'est un homme qui rentre dans un caf\u00e9, et plouf\";\n         final String d2 = \"C'est un homme, c'est qu'une t\u00eate, on lui offre un cadeau: 'oh... encore un chapeau!'\";", "timestamp": 1346611002, "metainfo": ""}