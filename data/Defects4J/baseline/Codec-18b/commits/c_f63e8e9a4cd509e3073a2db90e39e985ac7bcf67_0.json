{"sha": "f63e8e9a4cd509e3073a2db90e39e985ac7bcf67", "log": "New test methods testRfc4648 based on RFC 4648 that show our inconsistent handling of CR LF at the end of data. Failing assertions are //commented out.  ", "commit": "\n--- a/src/test/org/apache/commons/codec/binary/Base64Test.java\n+++ b/src/test/org/apache/commons/codec/binary/Base64Test.java\n         assertEquals(64, Base64.PEM_CHUNK_SIZE);\n     }\n \n+    /**\n+     * Tests RFC 4648 section 10 test vectors.\n+     * <ul>\n+     * <li>BASE64(\"\") = \"\"</li>\n+     * <li>BASE64(\"f\") = \"Zg==\"</li>\n+     * <li>BASE64(\"fo\") = \"Zm8=\"</li>\n+     * <li>BASE64(\"foo\") = \"Zm9v\"</li>\n+     * <li>BASE64(\"foob\") = \"Zm9vYg==\"</li>\n+     * <li>BASE64(\"fooba\") = \"Zm9vYmE=\"</li>\n+     * <li>BASE64(\"foobar\") = \"Zm9vYmFy\"</li>\n+     * </ul>\n+     * \n+     * @see http://tools.ietf.org/html/rfc4648\n+     */\n+    public void testRfc4648Section10Decode() {\n+        assertEquals(\"\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"\")));\n+        assertEquals(\"f\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zg==\")));\n+        assertEquals(\"fo\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm8=\")));\n+        assertEquals(\"foo\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9v\")));\n+        assertEquals(\"foob\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9vYg==\")));\n+        assertEquals(\"fooba\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9vYmE=\")));\n+        assertEquals(\"foobar\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9vYmFy\")));\n+    }\n+    \n+    public void testRfc4648Section10DecodeWithCrLf() {\n+        assertEquals(\"\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"\")));\n+        assertEquals(\"f\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zg==\" + Base64.CHUNK_SEPARATOR)));\n+        assertEquals(\"fo\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm8=\" + Base64.CHUNK_SEPARATOR)));\n+        //assertEquals(\"foo\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9v\" + Base64.CHUNK_SEPARATOR)));\n+        assertEquals(\"foob\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9vYg==\" + Base64.CHUNK_SEPARATOR)));\n+        assertEquals(\"fooba\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9vYmE=\" + Base64.CHUNK_SEPARATOR)));\n+        //assertEquals(\"foobar\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zm9vYmFy\" + Base64.CHUNK_SEPARATOR)));\n+    }\n+    \n+    /**\n+     * Tests RFC 4648 section 10 test vectors.\n+     * <ul>\n+     * <li>BASE64(\"\") = \"\"</li>\n+     * <li>BASE64(\"f\") = \"Zg==\"</li>\n+     * <li>BASE64(\"fo\") = \"Zm8=\"</li>\n+     * <li>BASE64(\"foo\") = \"Zm9v\"</li>\n+     * <li>BASE64(\"foob\") = \"Zm9vYg==\"</li>\n+     * <li>BASE64(\"fooba\") = \"Zm9vYmE=\"</li>\n+     * <li>BASE64(\"foobar\") = \"Zm9vYmFy\"</li>\n+     * </ul>\n+     * \n+     * @see http://tools.ietf.org/html/rfc4648\n+     */\n+    public void testRfc4648Section10Encode() {\n+        //assertEquals(\"Zg==\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"f\")));\n+        //assertEquals(\"Zm8=\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"fo\")));\n+        //assertEquals(\"Zm9v\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"foo\")));\n+        //assertEquals(\"Zm9vYg==\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"foob\")));\n+        //assertEquals(\"Zm9vYmE=\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"fooba\")));\n+        //assertEquals(\"Zm9vYmFy\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"foobar\")));\n+    }\n+    \n     public void testSingletons() {\n         assertEquals(\"AA==\", new String(Base64.encodeBase64(new byte[]{(byte) 0})));\n         assertEquals(\"AQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 1})));", "timestamp": 1269659620, "metainfo": ""}