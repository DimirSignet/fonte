{"sha": "e3b7364d4d48f71f2583f2215da3bde8d890b359", "log": "Better API names (IMO)  ", "commit": "\n--- a/src/java/org/apache/commons/codec/language/bm/Lang.java\n+++ b/src/java/org/apache/commons/codec/language/bm/Lang.java\n \n     static {\n         for (NameType s : NameType.values()) {\n-            Langs.put(s, loadFromResource(LANGUAGE_RULES_RN, Languages.instance(s)));\n+            Langs.put(s, loadFromResource(LANGUAGE_RULES_RN, Languages.getInstance(s)));\n         }\n     }\n \n--- a/src/java/org/apache/commons/codec/language/bm/Languages.java\n+++ b/src/java/org/apache/commons/codec/language/bm/Languages.java\n \n     static {\n         for (NameType s : NameType.values()) {\n-            LANGUAGES.put(s, instance(langResourceName(s)));\n-        }\n-    }\n-\n-    public static Languages instance(NameType nameType) {\n+            LANGUAGES.put(s, getInstance(langResourceName(s)));\n+        }\n+    }\n+\n+    public static Languages getInstance(NameType nameType) {\n         return LANGUAGES.get(nameType);\n     }\n \n-    public static Languages instance(String languagesResourceName) {\n+    public static Languages getInstance(String languagesResourceName) {\n         // read languages list\n         Set<String> ls = new HashSet<String>();\n         InputStream langIS = Languages.class.getClassLoader().getResourceAsStream(languagesResourceName);\n--- a/src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java\n+++ b/src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java\n      */\n     public String encode(String input) {\n         Languages.LanguageSet languageSet = this.lang.guessLanguages(input);\n-        return phoneticUtf8(input, languageSet);\n+        return encode(input, languageSet);\n     }\n \n     /**\n      * @param languageSet\n      * @return a phonetic representation of the input; a String containing '-'-separated phonetic representations of the input\n      */\n-    public String phoneticUtf8(String input, final Languages.LanguageSet languageSet) {\n-        final List<Rule> rules = Rule.instance(this.nameType, RuleType.RULES, languageSet);\n-        final List<Rule> finalRules1 = Rule.instance(this.nameType, this.ruleType, \"common\");\n-        final List<Rule> finalRules2 = Rule.instance(this.nameType, this.ruleType, languageSet);\n+    public String encode(String input, final Languages.LanguageSet languageSet) {\n+        final List<Rule> rules = Rule.getInstance(this.nameType, RuleType.RULES, languageSet);\n+        final List<Rule> finalRules1 = Rule.getInstance(this.nameType, this.ruleType, \"common\");\n+        final List<Rule> finalRules2 = Rule.getInstance(this.nameType, this.ruleType, languageSet);\n         // System.err.println(\"Languages: \" + languageSet);\n         // System.err.println(\"Rules: \" + rules);\n \n--- a/src/java/org/apache/commons/codec/language/bm/Rule.java\n+++ b/src/java/org/apache/commons/codec/language/bm/Rule.java\n             for (RuleType rt : RuleType.values()) {\n                 Map<String, List<Rule>> rs = new HashMap<String, List<Rule>>();\n \n-                Languages ls = Languages.instance(s);\n+                Languages ls = Languages.getInstance(s);\n                 for (String l : ls.getLanguages()) {\n                     try {\n                         rs.put(l, parseRules(createScanner(s, rt, l), createResourceName(s, rt, l)));\n      *            the set of languages to consider\n      * @return a list of Rules that apply\n      */\n-    public static List<Rule> instance(NameType nameType, RuleType rt, Languages.LanguageSet langs) {\n-        return langs.isSingleton() ? instance(nameType, rt, langs.getAny()) : instance(nameType, rt, Languages.ANY);\n+    public static List<Rule> getInstance(NameType nameType, RuleType rt, Languages.LanguageSet langs) {\n+        return langs.isSingleton() ? getInstance(nameType, rt, langs.getAny()) : getInstance(nameType, rt, Languages.ANY);\n     }\n \n     /**\n      *            the language to consider\n      * @return a list rules for a combination of name type, rule type and a single language.\n      */\n-    public static List<Rule> instance(NameType nameType, RuleType rt, String lang) {\n+    public static List<Rule> getInstance(NameType nameType, RuleType rt, String lang) {\n         List<Rule> rules = RULES.get(nameType).get(rt).get(lang);\n \n         if (rules == null) {\n--- a/src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java\n+++ b/src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java\n \n     @Test(expected = IllegalArgumentException.class)\n     public void testInvalidLangIllegalArgumentException() {\n-        Rule.instance(NameType.GENERIC, RuleType.APPROX, \"noSuchLanguage\");\n+        Rule.getInstance(NameType.GENERIC, RuleType.APPROX, \"noSuchLanguage\");\n     }\n \n     @Test(expected = IllegalStateException.class)\n     public void testInvalidLangIllegalStateException() {\n-        Lang.loadFromResource(\"thisIsAMadeUpResourceName\", Languages.instance(NameType.GENERIC));\n+        Lang.loadFromResource(\"thisIsAMadeUpResourceName\", Languages.getInstance(NameType.GENERIC));\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n     public void testInvalidLanguageIllegalArgumentException() {\n-        Languages.instance(\"thereIsNoSuchLanguage\");\n+        Languages.getInstance(\"thereIsNoSuchLanguage\");\n     }\n \n     @Test(timeout = 10000L)", "timestamp": 1312598019, "metainfo": ""}