{"sha": "e21c0af594f1d4ac7a1e1946e555bb829ae00a0c", "log": "Refactor: Use byte[] from ensureBufferSize() instead of always deferencing it from the context.  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/binary/Base32.java\n+++ b/src/main/java/org/apache/commons/codec/binary/Base32.java\n                 context.eof = true;\n                 break;\n             } else {\n-                ensureBufferSize(decodeSize, context);\n+                final byte[] buffer = ensureBufferSize(decodeSize, context);\n                 if (b >= 0 && b < this.decodeTable.length) {\n                     int result = this.decodeTable[b];\n                     if (result >= 0) {\n                         // collect decoded bytes\n                         context.lbitWorkArea = (context.lbitWorkArea << BITS_PER_ENCODED_BYTE) + result;\n                         if (context.modulus == 0) { // we can output the 5 bytes\n-                            context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 32) & MASK_8BITS);\n-                            context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 24) & MASK_8BITS);\n-                            context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);\n-                            context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);\n-                            context.buffer[context.pos++] = (byte) (context.lbitWorkArea & MASK_8BITS);\n+                            buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 32) & MASK_8BITS);\n+                            buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 24) & MASK_8BITS);\n+                            buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);\n+                            buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);\n+                            buffer[context.pos++] = (byte) (context.lbitWorkArea & MASK_8BITS);\n                         }\n                     }\n                 }\n         // EOF (-1) and first time '=' character is encountered in stream.\n         // This approach makes the '=' padding characters completely optional.\n         if (context.eof && context.modulus >= 2) { // if modulus < 2, nothing to do\n-            ensureBufferSize(decodeSize, context);\n+            final byte[] buffer = ensureBufferSize(decodeSize, context);\n \n             //  we ignore partial bytes, i.e. only multiples of 8 count\n             switch (context.modulus) {\n                 case 2 : // 10 bits, drop 2 and output one byte\n-                    context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 2) & MASK_8BITS);\n+                    buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 2) & MASK_8BITS);\n                     break;\n                 case 3 : // 15 bits, drop 7 and output 1 byte\n-                    context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 7) & MASK_8BITS);\n+                    buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 7) & MASK_8BITS);\n                     break;\n                 case 4 : // 20 bits = 2*8 + 4\n                     context.lbitWorkArea = context.lbitWorkArea >> 4; // drop 4 bits\n-                    context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);\n-                    context.buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);\n+                    buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);\n+                    buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);\n                     break;\n                 case 5 : // 25bits = 3*8 + 1\n                     context.lbitWorkArea = context.lbitWorkArea >> 1;\n-                    context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);\n-                    context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);\n-                    context.buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);\n+                    buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);\n+                    buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);\n+                    buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);\n                     break;\n                 case 6 : // 30bits = 3*8 + 6\n                     context.lbitWorkArea = context.lbitWorkArea >> 6;\n-                    context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);\n-                    context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);\n-                    context.buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);\n+                    buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);\n+                    buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);\n+                    buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);\n                     break;\n                 case 7 : // 35 = 4*8 +3\n                     context.lbitWorkArea = context.lbitWorkArea >> 3;\n-                    context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 24) & MASK_8BITS);\n-                    context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);\n-                    context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);\n-                    context.buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);\n+                    buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 24) & MASK_8BITS);\n+                    buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);\n+                    buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);\n+                    buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);\n                     break;\n             }\n         }", "timestamp": 1346337493, "metainfo": ""}