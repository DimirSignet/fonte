{"sha": "356aee756a4b13c717392032cc70ebfeba2ee0e6", "log": "Added @since 1.4 tags.  ", "commit": "\n--- a/src/java/org/apache/commons/codec/binary/Hex.java\n+++ b/src/java/org/apache/commons/codec/binary/Hex.java\n      * @param toLowerCase\n      *            <code>true</code> converts to lowercase, <code>false</code> to uppercase\n      * @return A char[] containing hexadecimal characters\n+     * @since 1.4\n      */\n     public static char[] encodeHex(byte[] data, boolean toLowerCase) {\n         return encodeHex(data, toLowerCase ? DIGITS_LOWER : DIGITS_UPPER);\n      * @param toDigits\n      *            the output alphabet\n      * @return A char[] containing hexadecimal characters\n+     * @since 1.4\n      */\n     protected static char[] encodeHex(byte[] data, char[] toDigits) {\n-\n         int l = data.length;\n-\n         char[] out = new char[l << 1];\n-\n         // two characters form the hex value.\n         for (int i = 0, j = 0; i < l; i++) {\n             out[j++] = toDigits[(0xF0 & data[i]) >>> 4];\n             out[j++] = toDigits[0x0F & data[i]];\n         }\n-\n         return out;\n     }\n \n--- a/src/java/org/apache/commons/codec/digest/DigestUtils.java\n+++ b/src/java/org/apache/commons/codec/digest/DigestUtils.java\n     private static final int STREAM_BUFFER_LENGTH = 1024;\n \n     /**\n-     * Returns a <code>MessageDigest</code> for the given <code>algorithm</code>.\n-     * \n-     * @param algorithm\n-     *            the name of the algorithm requested. See <a\n-     *            href=\"http://java.sun.com/j2se/1.3/docs/guide/security/CryptoSpec.html#AppA\">Appendix A in the Java\n-     *            Cryptography Architecture API Specification & Reference</a> for information about standard algorithm\n-     *            names.\n-     * @return An MD5 digest instance.\n-     * @see MessageDigest#getInstance(String)\n-     * @throws RuntimeException\n-     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n-     */\n-    static MessageDigest getDigest(String algorithm) {\n-        try {\n-            return MessageDigest.getInstance(algorithm);\n-        } catch (NoSuchAlgorithmException e) {\n-            throw new RuntimeException(e.getMessage());\n-        }\n-    }\n-\n-    /**\n-     * Returns an MD5 MessageDigest.\n-     * \n-     * @return An MD5 digest instance.\n-     * @throws RuntimeException\n-     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n-     */\n-    private static MessageDigest getMd5Digest() {\n-        return getDigest(\"MD5\");\n-    }\n-\n-    /**\n-     * Returns an SHA-256 digest.\n-     * <p>\n-     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n-     * </p>\n-     * \n-     * @return An SHA-256 digest instance.\n-     * @throws RuntimeException\n-     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n-     */\n-    private static MessageDigest getSha256Digest() {\n-        return getDigest(\"SHA-256\");\n-    }\n-\n-    /**\n-     * Returns an SHA-384 digest.\n-     * <p>\n-     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n-     * </p>\n-     * \n-     * @return An SHA-384 digest instance.\n-     * @throws RuntimeException\n-     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n-     */\n-    private static MessageDigest getSha384Digest() {\n-        return getDigest(\"SHA-384\");\n-    }\n-\n-    /**\n-     * Returns an SHA-512 digest.\n-     * <p>\n-     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n-     * </p>\n-     * \n-     * @return An SHA-512 digest instance.\n-     * @throws RuntimeException\n-     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n-     */\n-    private static MessageDigest getSha512Digest() {\n-        return getDigest(\"SHA-512\");\n-    }\n-\n-    /**\n-     * Returns an SHA-1 digest.\n-     * \n-     * @return An SHA-1 digest instance.\n-     * @throws RuntimeException\n-     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n-     */\n-    private static MessageDigest getShaDigest() {\n-        return getDigest(\"SHA\");\n-    }\n-\n-    /**\n      * Read through an InputStream and returns the digest for the data\n      * \n      * @param digest The MessageDigest to use (e.g. MD5)\n         \n         return digest.digest();\n     }\n+\n+    /**\n+     * Returns a <code>MessageDigest</code> for the given <code>algorithm</code>.\n+     * \n+     * @param algorithm\n+     *            the name of the algorithm requested. See <a\n+     *            href=\"http://java.sun.com/j2se/1.3/docs/guide/security/CryptoSpec.html#AppA\">Appendix A in the Java\n+     *            Cryptography Architecture API Specification & Reference</a> for information about standard algorithm\n+     *            names.\n+     * @return An MD5 digest instance.\n+     * @see MessageDigest#getInstance(String)\n+     * @throws RuntimeException\n+     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n+     */\n+    static MessageDigest getDigest(String algorithm) {\n+        try {\n+            return MessageDigest.getInstance(algorithm);\n+        } catch (NoSuchAlgorithmException e) {\n+            throw new RuntimeException(e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Returns an MD5 MessageDigest.\n+     * \n+     * @return An MD5 digest instance.\n+     * @throws RuntimeException\n+     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n+     */\n+    private static MessageDigest getMd5Digest() {\n+        return getDigest(\"MD5\");\n+    }\n+\n+    /**\n+     * Returns an SHA-256 digest.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     * \n+     * @return An SHA-256 digest instance.\n+     * @throws RuntimeException\n+     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n+     */\n+    private static MessageDigest getSha256Digest() {\n+        return getDigest(\"SHA-256\");\n+    }\n+\n+    /**\n+     * Returns an SHA-384 digest.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     * \n+     * @return An SHA-384 digest instance.\n+     * @throws RuntimeException\n+     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n+     */\n+    private static MessageDigest getSha384Digest() {\n+        return getDigest(\"SHA-384\");\n+    }\n+\n+    /**\n+     * Returns an SHA-512 digest.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     * \n+     * @return An SHA-512 digest instance.\n+     * @throws RuntimeException\n+     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n+     */\n+    private static MessageDigest getSha512Digest() {\n+        return getDigest(\"SHA-512\");\n+    }\n+\n+    /**\n+     * Returns an SHA-1 digest.\n+     * \n+     * @return An SHA-1 digest instance.\n+     * @throws RuntimeException\n+     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n+     */\n+    private static MessageDigest getShaDigest() {\n+        return getDigest(\"SHA\");\n+    }\n     \n     /**\n      * Calculates the MD5 digest and returns the value as a 16 element <code>byte[]</code>.\n      *            Data to digest\n      * @return MD5 digest\n      * @throws IOException On error reading from the stream\n+     * @since 1.4\n      */\n     public static byte[] md5(InputStream data) throws IOException {\n         return digest(getMd5Digest(), data);\n      * @param data\n      *            Data to digest\n      * @return MD5 digest as a hex string\n+     * @throws IOException On error reading from the stream\n+     * @since 1.4\n+     */\n+    public static String md5Hex(InputStream data) throws IOException {\n+        return new String(Hex.encodeHex(md5(data)));\n+    }\n+\n+    /**\n+     * Calculates the MD5 digest and returns the value as a 32 character hex string.\n+     * \n+     * @param data\n+     *            Data to digest\n+     * @return MD5 digest as a hex string\n      */\n     public static String md5Hex(String data) {\n         return new String(Hex.encodeHex(md5(data)));\n     }\n \n     /**\n-     * Calculates the MD5 digest and returns the value as a 32 character hex string.\n-     * \n-     * @param data\n-     *            Data to digest\n-     * @return MD5 digest as a hex string\n-     * @throws IOException On error reading from the stream\n-     */\n-    public static String md5Hex(InputStream data) throws IOException {\n-        return new String(Hex.encodeHex(md5(data)));\n-    }\n-\n-    /**\n      * Calculates the SHA-1 digest and returns the value as a <code>byte[]</code>.\n      * \n      * @param data\n      * @param data\n      *            Data to digest\n      * @return SHA-1 digest\n+     * @throws IOException On error reading from the stream\n+     */\n+    public static byte[] sha(InputStream data) throws IOException {\n+        return digest(getShaDigest(), data);\n+    }\n+\n+    /**\n+     * Calculates the SHA-1 digest and returns the value as a <code>byte[]</code>.\n+     * \n+     * @param data\n+     *            Data to digest\n+     * @return SHA-1 digest\n      */\n     public static byte[] sha(String data) {\n         return sha(data.getBytes());\n     }\n \n     /**\n-     * Calculates the SHA-1 digest and returns the value as a <code>byte[]</code>.\n-     * \n-     * @param data\n-     *            Data to digest\n-     * @return SHA-1 digest\n-     * @throws IOException On error reading from the stream\n-     */\n-    public static byte[] sha(InputStream data) throws IOException {\n-        return digest(getShaDigest(), data);\n-    }\n-\n-    /**\n      * Calculates the SHA-256 digest and returns the value as a <code>byte[]</code>.\n      * <p>\n      * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n      * @param data\n      *            Data to digest\n      * @return SHA-256 digest\n+     * @since 1.4\n      */\n     public static byte[] sha256(byte[] data) {\n         return getSha256Digest().digest(data);\n      * @param data\n      *            Data to digest\n      * @return SHA-256 digest\n+     * @throws IOException On error reading from the stream\n+     * @since 1.4\n+     */\n+    public static byte[] sha256(InputStream data) throws IOException {\n+        return digest(getSha256Digest(), data);\n+    }\n+\n+    /**\n+     * Calculates the SHA-256 digest and returns the value as a <code>byte[]</code>.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     * \n+     * @param data\n+     *            Data to digest\n+     * @return SHA-256 digest\n+     * @since 1.4\n      */\n     public static byte[] sha256(String data) {\n         return sha256(data.getBytes());\n     }\n \n     /**\n-     * Calculates the SHA-256 digest and returns the value as a <code>byte[]</code>.\n-     * <p>\n-     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n-     * </p>\n-     * \n-     * @param data\n-     *            Data to digest\n-     * @return SHA-256 digest\n-     * @throws IOException On error reading from the stream\n-     */\n-    public static byte[] sha256(InputStream data) throws IOException {\n-        return digest(getSha256Digest(), data);\n-    }\n-\n-    /**\n      * Calculates the SHA-256 digest and returns the value as a hex string.\n      * <p>\n      * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n      * @param data\n      *            Data to digest\n      * @return SHA-256 digest as a hex string\n+     * @since 1.4\n      */\n     public static String sha256Hex(byte[] data) {\n         return new String(Hex.encodeHex(sha256(data)));\n      * @param data\n      *            Data to digest\n      * @return SHA-256 digest as a hex string\n+     * @throws IOException On error reading from the stream\n+     * @since 1.4\n+     */\n+    public static String sha256Hex(InputStream data) throws IOException {\n+        return new String(Hex.encodeHex(sha256(data)));\n+    }\n+\n+    /**\n+     * Calculates the SHA-256 digest and returns the value as a hex string.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     * \n+     * @param data\n+     *            Data to digest\n+     * @return SHA-256 digest as a hex string\n+     * @since 1.4\n      */\n     public static String sha256Hex(String data) {\n         return new String(Hex.encodeHex(sha256(data)));\n     }\n \n     /**\n-     * Calculates the SHA-256 digest and returns the value as a hex string.\n-     * <p>\n-     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n-     * </p>\n-     * \n-     * @param data\n-     *            Data to digest\n-     * @return SHA-256 digest as a hex string\n-     * @throws IOException On error reading from the stream\n-     */\n-    public static String sha256Hex(InputStream data) throws IOException {\n-        return new String(Hex.encodeHex(sha256(data)));\n-    }\n-\n-    /**\n      * Calculates the SHA-384 digest and returns the value as a <code>byte[]</code>.\n      * <p>\n      * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n      * @param data\n      *            Data to digest\n      * @return SHA-384 digest\n+     * @since 1.4\n      */\n     public static byte[] sha384(byte[] data) {\n-        // FIXME: check Sun docs for how to get a sha 384 digest\n         return getSha384Digest().digest(data);\n     }\n \n      * @param data\n      *            Data to digest\n      * @return SHA-384 digest\n+     * @throws IOException On error reading from the stream\n+     * @since 1.4\n+     */\n+    public static byte[] sha384(InputStream data) throws IOException {\n+        return digest(getSha384Digest(), data);\n+    }\n+    \n+    /**\n+     * Calculates the SHA-384 digest and returns the value as a <code>byte[]</code>.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     * \n+     * @param data\n+     *            Data to digest\n+     * @return SHA-384 digest\n+     * @since 1.4\n      */\n     public static byte[] sha384(String data) {\n         return sha384(data.getBytes());\n     }\n-    \n-    /**\n-     * Calculates the SHA-384 digest and returns the value as a <code>byte[]</code>.\n-     * <p>\n-     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n-     * </p>\n-     * \n-     * @param data\n-     *            Data to digest\n-     * @return SHA-384 digest\n-     * @throws IOException On error reading from the stream\n-     */\n-    public static byte[] sha384(InputStream data) throws IOException {\n-        return digest(getSha384Digest(), data);\n-    }\n \n     /**\n      * Calculates the SHA-384 digest and returns the value as a hex string.\n      * @param data\n      *            Data to digest\n      * @return SHA-384 digest as a hex string\n+     * @since 1.4\n      */\n     public static String sha384Hex(byte[] data) {\n         return new String(Hex.encodeHex(sha384(data)));\n      * @param data\n      *            Data to digest\n      * @return SHA-384 digest as a hex string\n+     * @throws IOException On error reading from the stream\n+     * @since 1.4\n+     */\n+    public static String sha384Hex(InputStream data) throws IOException {\n+        return new String(Hex.encodeHex(sha384(data)));\n+    }\n+\n+    /**\n+     * Calculates the SHA-384 digest and returns the value as a hex string.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     * \n+     * @param data\n+     *            Data to digest\n+     * @return SHA-384 digest as a hex string\n+     * @since 1.4\n      */\n     public static String sha384Hex(String data) {\n         return new String(Hex.encodeHex(sha384(data)));\n     }\n \n     /**\n-     * Calculates the SHA-384 digest and returns the value as a hex string.\n-     * <p>\n-     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n-     * </p>\n-     * \n-     * @param data\n-     *            Data to digest\n-     * @return SHA-384 digest as a hex string\n-     * @throws IOException On error reading from the stream\n-     */\n-    public static String sha384Hex(InputStream data) throws IOException {\n-        return new String(Hex.encodeHex(sha384(data)));\n-    }\n-\n-    /**\n      * Calculates the SHA-512 digest and returns the value as a <code>byte[]</code>.\n      * <p>\n      * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n      * @param data\n      *            Data to digest\n      * @return SHA-512 digest\n+     * @since 1.4\n      */\n     public static byte[] sha512(byte[] data) {\n         return getSha512Digest().digest(data);\n      * @param data\n      *            Data to digest\n      * @return SHA-512 digest\n+     * @throws IOException On error reading from the stream\n+     * @since 1.4\n+     */\n+    public static byte[] sha512(InputStream data) throws IOException {\n+        return digest(getSha512Digest(), data);\n+    }\n+\n+    /**\n+     * Calculates the SHA-512 digest and returns the value as a <code>byte[]</code>.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     * \n+     * @param data\n+     *            Data to digest\n+     * @return SHA-512 digest\n+     * @since 1.4\n      */\n     public static byte[] sha512(String data) {\n         return sha512(data.getBytes());\n     }\n \n     /**\n-     * Calculates the SHA-512 digest and returns the value as a <code>byte[]</code>.\n-     * <p>\n-     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n-     * </p>\n-     * \n-     * @param data\n-     *            Data to digest\n-     * @return SHA-512 digest\n-     * @throws IOException On error reading from the stream\n-     */\n-    public static byte[] sha512(InputStream data) throws IOException {\n-        return digest(getSha512Digest(), data);\n-    }\n-\n-    /**\n      * Calculates the SHA-512 digest and returns the value as a hex string.\n      * <p>\n      * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n      * @param data\n      *            Data to digest\n      * @return SHA-512 digest as a hex string\n+     * @since 1.4\n      */\n     public static String sha512Hex(byte[] data) {\n         return new String(Hex.encodeHex(sha512(data)));\n      * @param data\n      *            Data to digest\n      * @return SHA-512 digest as a hex string\n+     * @throws IOException On error reading from the stream\n+     * @since 1.4\n+     */\n+    public static String sha512Hex(InputStream data) throws IOException {\n+        return new String(Hex.encodeHex(sha512(data)));\n+    }\n+\n+    /**\n+     * Calculates the SHA-512 digest and returns the value as a hex string.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     * \n+     * @param data\n+     *            Data to digest\n+     * @return SHA-512 digest as a hex string\n+     * @since 1.4\n      */\n     public static String sha512Hex(String data) {\n         return new String(Hex.encodeHex(sha512(data)));\n     }\n \n     /**\n-     * Calculates the SHA-512 digest and returns the value as a hex string.\n-     * <p>\n-     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n-     * </p>\n-     * \n-     * @param data\n-     *            Data to digest\n-     * @return SHA-512 digest as a hex string\n-     * @throws IOException On error reading from the stream\n-     */\n-    public static String sha512Hex(InputStream data) throws IOException {\n-        return new String(Hex.encodeHex(sha512(data)));\n-    }\n-\n-    /**\n      * Calculates the SHA-1 digest and returns the value as a hex string.\n      * \n      * @param data\n      * @param data\n      *            Data to digest\n      * @return SHA-1 digest as a hex string\n+     * @throws IOException On error reading from the stream\n+     */\n+    public static String shaHex(InputStream data) throws IOException {\n+        return new String(Hex.encodeHex(sha(data)));\n+    }\n+\n+    /**\n+     * Calculates the SHA-1 digest and returns the value as a hex string.\n+     * \n+     * @param data\n+     *            Data to digest\n+     * @return SHA-1 digest as a hex string\n      */\n     public static String shaHex(String data) {\n         return new String(Hex.encodeHex(sha(data)));\n     }\n-\n-    /**\n-     * Calculates the SHA-1 digest and returns the value as a hex string.\n-     * \n-     * @param data\n-     *            Data to digest\n-     * @return SHA-1 digest as a hex string\n-     * @throws IOException On error reading from the stream\n-     */\n-    public static String shaHex(InputStream data) throws IOException {\n-        return new String(Hex.encodeHex(sha(data)));\n-    }\n }\n--- a/src/java/org/apache/commons/codec/language/Caverphone.java\n+++ b/src/java/org/apache/commons/codec/language/Caverphone.java\n import org.apache.commons.codec.StringEncoder;\n \n /**\n- * Encodes a string into a caverphone value. \n- *\n- * This is an algorithm created the Caversham Project at the University of Otago. \n- * It implements the Caverphone 2.0 algorithm:\n- *\n- *\n+ * Encodes a string into a Caverphone value.\n+ * \n+ * This is an algorithm created the Caversham Project at the University of Otago. It implements the Caverphone 2.0\n+ * algorithm:\n+ * \n  * @author Apache Software Foundation\n  * @version $Id$\n  * @see <a href=\"http://en.wikipedia.org/wiki/Caverphone\">Wikipedia - Caverphone</a>\n  * @see <a href=\"http://caversham.otago.ac.nz/files/working/ctp150804.pdf\">Caverphone 2.0 specification</a>\n+ * @since 1.4\n  */\n public class Caverphone implements StringEncoder {\n \n--- a/src/java/org/apache/commons/codec/language/RefinedSoundex.java\n+++ b/src/java/org/apache/commons/codec/language/RefinedSoundex.java\n  */\n public class RefinedSoundex implements StringEncoder {\n \n+    /**\n+     * @since 1.4\n+     */\n     public static final String US_ENGLISH_MAPPING_STRING = \"01360240043788015936020505\";\n \n    /**\n     }\n \n     /**\n-     * Creates a refined soundex instance using a custom mapping. This\n-     * constructor can be used to customize the mapping, and/or possibly\n-     * provide an internationalized mapping for a non-Western character set.\n+     * Creates a refined Soundex instance using a custom mapping. This constructor can be used to customize the mapping,\n+     * and/or possibly provide an internationalized mapping for a non-Western character set.\n      * \n      * @param mapping\n-     *                  Mapping string to use when finding the corresponding code for\n-     *                  a given character\n+     *            Mapping string to use when finding the corresponding code for a given character\n+     * @since 1.4\n      */\n     public RefinedSoundex(String mapping) {\n         this.soundexMapping = mapping.toCharArray();\n--- a/src/java/org/apache/commons/codec/language/Soundex.java\n+++ b/src/java/org/apache/commons/codec/language/Soundex.java\n     }\n \n     /**\n-     * Creates a refined soundex instance using a custom mapping. This\n-     * constructor can be used to customize the mapping, and/or possibly\n-     * provide an internationalized mapping for a non-Western character set.\n+     * Creates a refined soundex instance using a custom mapping. This constructor can be used to customize the mapping,\n+     * and/or possibly provide an internationalized mapping for a non-Western character set.\n      * \n      * @param mapping\n-     *                  Mapping string to use when finding the corresponding code for\n-     *                  a given character\n+     *            Mapping string to use when finding the corresponding code for a given character\n+     * @since 1.4\n      */\n     public Soundex(String mapping) {\n         this.soundexMapping = mapping.toCharArray();", "timestamp": 1247533530, "metainfo": ""}