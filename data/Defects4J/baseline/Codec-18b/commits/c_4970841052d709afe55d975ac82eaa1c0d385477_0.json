{"sha": "4970841052d709afe55d975ac82eaa1c0d385477", "log": "[CODEC-208] Make some DigestUtils APIs public.  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/digest/DigestUtils.java\n+++ b/src/main/java/org/apache/commons/codec/digest/DigestUtils.java\n     /**\n      * Read through an ByteBuffer and returns the digest for the data\n      *\n-     * @param digest\n+     * @param messageDigest\n      *            The MessageDigest to use (e.g. MD5)\n      * @param data\n      *            Data to digest\n      * @return the digest\n      * @throws IOException\n      *             On error reading from the stream\n-     */\n-    private static byte[] digest(final MessageDigest messageDigest, final ByteBuffer data) {\n+     * @since 1.11\n+     */\n+    public static byte[] digest(final MessageDigest messageDigest, final ByteBuffer data) {\n         messageDigest.update(data);\n         return messageDigest.digest();\n     }\n     /**\n      * Read through a File and returns the digest for the data\n      *\n-     * @param digest\n+     * @param messageDigest\n      *            The MessageDigest to use (e.g. MD5)\n      * @param data\n      *            Data to digest\n      * @return the digest\n      * @throws IOException\n      *             On error reading from the stream\n-     */\n-    private static byte[] digest(final MessageDigest digest, final File data) throws IOException {\n-        return updateDigest(digest, data).digest();\n+     * @since 1.11\n+     */\n+    public static byte[] digest(final MessageDigest messageDigest, final File data) throws IOException {\n+        return updateDigest(messageDigest, data).digest();\n     }\n \n     /**\n      * Read through an InputStream and returns the digest for the data\n      *\n-     * @param digest\n+     * @param messageDigest\n      *            The MessageDigest to use (e.g. MD5)\n      * @param data\n      *            Data to digest\n      * @return the digest\n      * @throws IOException\n      *             On error reading from the stream\n-     */\n-    private static byte[] digest(final MessageDigest digest, final InputStream data) throws IOException {\n-        return updateDigest(digest, data).digest();\n+     * @since 1.11\n+     */\n+    public static byte[] digest(final MessageDigest messageDigest, final InputStream data) throws IOException {\n+        return updateDigest(messageDigest, data).digest();\n     }\n \n     /**\n             return MessageDigest.getInstance(algorithm);\n         } catch (final NoSuchAlgorithmException e) {\n             throw new IllegalArgumentException(e);\n+        }\n+    }\n+\n+    /**\n+     * Returns a <code>MessageDigest</code> for the given <code>algorithm</code> or a default if there is a problem getting the algorithm.\n+     *\n+     * @param algorithm\n+     *            the name of the algorithm requested. See <a\n+     *            href=\"http://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html#AppA\"\n+     *            >Appendix A in the Java Cryptography Architecture Reference Guide</a> for information about standard\n+     *            algorithm names.\n+     * @param defaultMessageDigest The default MessageDigest.\n+     * @return A digest instance.\n+     * @see MessageDigest#getInstance(String)\n+     * @throws IllegalArgumentException\n+     *             when a {@link NoSuchAlgorithmException} is caught.\n+     * @since 1.11\n+     */\n+    public static MessageDigest getDigest(final String algorithm, MessageDigest defaultMessageDigest) {\n+        try {\n+            return MessageDigest.getInstance(algorithm);\n+        } catch (final Exception e) {\n+            return defaultMessageDigest;\n         }\n     }\n ", "timestamp": 1463185046, "metainfo": ""}