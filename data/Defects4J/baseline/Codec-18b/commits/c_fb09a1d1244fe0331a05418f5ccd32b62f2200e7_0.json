{"sha": "fb09a1d1244fe0331a05418f5ccd32b62f2200e7", "log": "[CODEC-183] BaseNCodecOutputStream only supports writing EOF on close().  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java\n+++ b/src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java\n \n /**\n  * Abstract superclass for Base-N output streams.\n- *\n+ * <p>\n+ * To write the EOF marker without closing the stream, call {@link #eof()} or use an <a\n+ * href=\"https://commons.apache.org/proper/commons-io/\">Apache Commons IO</a> <a href=\n+ * \"https://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/output/CloseShieldOutputStream.html\"\n+ * >CloseShieldOutputStream</a>.\n+ * </p>\n+ * \n  * @since 1.5\n  * @version $Id$\n  */\n \n     /**\n      * Closes this output stream and releases any system resources associated with the stream.\n+     * <p>\n+     * To write the EOF marker without closing the stream, call {@link #eof()} or use an\n+     * <a href=\"https://commons.apache.org/proper/commons-io/\">Apache Commons IO</a> <a href=\n+     * \"https://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/output/CloseShieldOutputStream.html\"\n+     * >CloseShieldOutputStream</a>.\n+     * </p>\n      *\n      * @throws IOException\n      *             if an I/O error occurs.\n      */\n     @Override\n     public void close() throws IOException {\n+        eof();\n+        flush();\n+        out.close();\n+    }\n+\n+    /**\n+     * Writes EOF.\n+     * \n+     * @throws IOException\n+     *             if an I/O error occurs.\n+     */\n+    public void eof() throws IOException {\n         // Notify encoder of EOF (-1).\n         if (doEncode) {\n             baseNCodec.encode(singleByte, 0, EOF, context);\n         } else {\n             baseNCodec.decode(singleByte, 0, EOF, context);\n         }\n-        flush();\n-        out.close();\n     }\n \n }", "timestamp": 1416156036, "metainfo": ""}