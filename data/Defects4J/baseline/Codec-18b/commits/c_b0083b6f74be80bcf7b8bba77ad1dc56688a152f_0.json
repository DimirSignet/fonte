{"sha": "b0083b6f74be80bcf7b8bba77ad1dc56688a152f", "log": "Replace \"<code>false</code>\" with \"{@code false}\"  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/binary/Base32.java\n+++ b/src/main/java/org/apache/commons/codec/binary/Base32.java\n      * \n      * @param octet\n      *            The value to test\n-     * @return {@code true} if the value is defined in the the Base32 alphabet <code>false</code> otherwise.\n+     * @return {@code true} if the value is defined in the the Base32 alphabet {@code false} otherwise.\n      */\n     @Override\n     public boolean isInAlphabet(byte octet) {\n--- a/src/main/java/org/apache/commons/codec/binary/Base64.java\n+++ b/src/main/java/org/apache/commons/codec/binary/Base64.java\n      * \n      * @param urlSafe\n      *            if {@code true}, URL-safe encoding is used. In most cases this should be set to\n-     *            <code>false</code>.\n+     *            {@code false}.\n      * @since 1.4\n      */\n     public Base64(boolean urlSafe) {\n      * @param arrayOctet\n      *            byte array to test\n      * @return {@code true} if all bytes are valid characters in the Base64 alphabet or if the byte array is empty;\n-     *         <code>false</code>, otherwise\n+     *         {@code false}, otherwise\n      * @deprecated 1.5 Use {@link #isBase64(byte[])}, will be removed in 2.0.\n      */\n     public static boolean isArrayByteBase64(byte[] arrayOctet) {\n      * \n      * @param octet\n      *            The value to test\n-     * @return {@code true} if the value is defined in the the base 64 alphabet, <code>false</code> otherwise.\n+     * @return {@code true} if the value is defined in the the base 64 alphabet, {@code false} otherwise.\n      * @since 1.4\n      */\n     public static boolean isBase64(byte octet) {\n      * @param base64\n      *            String to test\n      * @return {@code true} if all characters in the String are valid characters in the Base64 alphabet or if\n-     *         the String is empty; <code>false</code>, otherwise\n+     *         the String is empty; {@code false}, otherwise\n      *  @since 1.5\n      */\n     public static boolean isBase64(String base64) {\n      * @param arrayOctet\n      *            byte array to test\n      * @return {@code true} if all bytes are valid characters in the Base64 alphabet or if the byte array is empty;\n-     *         <code>false</code>, otherwise\n+     *         {@code false}, otherwise\n      * @since 1.5\n      */    \n     public static boolean isBase64(byte[] arrayOctet) {\n      * \n      * @param octet\n      *            The value to test\n-     * @return {@code true} if the value is defined in the the Base32 alphabet <code>false</code> otherwise.\n+     * @return {@code true} if the value is defined in the the Base32 alphabet {@code false} otherwise.\n      */\n     @Override\n     protected boolean isInAlphabet(byte octet) {\n--- a/src/main/java/org/apache/commons/codec/binary/BaseNCodec.java\n+++ b/src/main/java/org/apache/commons/codec/binary/BaseNCodec.java\n      *\n      * @param value The value to test\n      *\n-     * @return {@code true} if the value is defined in the current alphabet, <code>false</code> otherwise.\n+     * @return {@code true} if the value is defined in the current alphabet, {@code false} otherwise.\n      */\n     protected abstract boolean isInAlphabet(byte value);\n     \n      * @param allowWSPad if {@code true}, then whitespace and PAD are also allowed\n      *\n      * @return {@code true} if all bytes are valid characters in the alphabet or if the byte array is empty;\n-     *         <code>false</code>, otherwise\n+     *         {@code false}, otherwise\n      */    \n     public boolean isInAlphabet(byte[] arrayOctet, boolean allowWSPad) {\n         for (int i = 0; i < arrayOctet.length; i++) {\n      *\n      * @param basen String to test\n      * @return {@code true} if all characters in the String are valid characters in the alphabet or if\n-     *         the String is empty; <code>false</code>, otherwise\n+     *         the String is empty; {@code false}, otherwise\n      * @see #isInAlphabet(byte[], boolean)\n      */\n     public boolean isInAlphabet(String basen) {\n      *\n      * @param arrayOctet\n      *            byte array to test\n-     * @return {@code true} if any byte is a valid character in the alphabet or PAD; <code>false</code> otherwise\n+     * @return {@code true} if any byte is a valid character in the alphabet or PAD; {@code false} otherwise\n      */\n     protected boolean containsAlphabetOrPad(byte[] arrayOctet) {\n         if (arrayOctet == null) {\n--- a/src/main/java/org/apache/commons/codec/binary/Hex.java\n+++ b/src/main/java/org/apache/commons/codec/binary/Hex.java\n      * @param data\n      *            a byte[] to convert to Hex characters\n      * @param toLowerCase\n-     *            {@code true} converts to lowercase, <code>false</code> to uppercase\n+     *            {@code true} converts to lowercase, {@code false} to uppercase\n      * @return A char[] containing hexadecimal characters\n      * @since 1.4\n      */\n--- a/src/main/java/org/apache/commons/codec/language/AbstractCaverphone.java\n+++ b/src/main/java/org/apache/commons/codec/language/AbstractCaverphone.java\n      *            First of two strings to compare\n      * @param str2\n      *            Second of two strings to compare\n-     * @return {@code true} if the encodings of these strings are identical, <code>false</code> otherwise.\n+     * @return {@code true} if the encodings of these strings are identical, {@code false} otherwise.\n      * @throws EncoderException\n      */\n     public boolean isEncodeEqual(String str1, String str2) throws EncoderException {\n--- a/src/main/java/org/apache/commons/codec/language/Caverphone.java\n+++ b/src/main/java/org/apache/commons/codec/language/Caverphone.java\n      *            First of two strings to compare\n      * @param str2\n      *            Second of two strings to compare\n-     * @return {@code true} if the caverphones of these strings are identical, <code>false</code> otherwise.\n+     * @return {@code true} if the caverphones of these strings are identical, {@code false} otherwise.\n      */\n     public boolean isCaverphoneEqual(String str1, String str2) {\n         return this.caverphone(str1).equals(this.caverphone(str2));\n--- a/src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java\n+++ b/src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java\n      * @param value1 The left-hand side of the encoded {@link String#equals(Object)}.\n      * @param value2 The right-hand side of the encoded {@link String#equals(Object)}.\n      * @return {@code true} if the encoded <code>String</code>s are equal;\n-     *          <code>false</code> otherwise.\n+     *          {@code false} otherwise.\n      * @see #isDoubleMetaphoneEqual(String,String,boolean)\n      */\n     public boolean isDoubleMetaphoneEqual(String value1, String value2) {\n      * @param value2 The right-hand side of the encoded {@link String#equals(Object)}.\n      * @param alternate use the alternate value if {@code true}.\n      * @return {@code true} if the encoded <code>String</code>s are equal;\n-     *          <code>false</code> otherwise.\n+     *          {@code false} otherwise.\n      */\n     public boolean isDoubleMetaphoneEqual(String value1, \n                                           String value2, \n--- a/src/main/java/org/apache/commons/codec/language/Metaphone.java\n+++ b/src/main/java/org/apache/commons/codec/language/Metaphone.java\n      * @param str1 First of two strings to compare\n      * @param str2 Second of two strings to compare\n      * @return {@code true} if the metaphones of these strings are identical, \n-     *        <code>false</code> otherwise.\n+     *        {@code false} otherwise.\n      */\n     public boolean isMetaphoneEqual(String str1, String str2) {\n         return metaphone(str1).equals(metaphone(str2));\n--- a/src/main/java/org/apache/commons/codec/language/Nysiis.java\n+++ b/src/main/java/org/apache/commons/codec/language/Nysiis.java\n      * \n      * @param c\n      *            the character to test\n-     * @return {@code true} if the character is a vowel, <code>false</code> otherwise\n+     * @return {@code true} if the character is a vowel, {@code false} otherwise\n      */\n     private static boolean isVowel(final char c) {\n         return c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U';\n      *\n      * <ul>\n      *  <li>{@code true}: encoded strings have a maximum length of 6</li>\n-     *  <li><code>false</code>: encoded strings may have arbitrary length</li>\n+     *  <li>{@code false}: encoded strings may have arbitrary length</li>\n      * </ul>\n      *\n      * @param strict\n     /**\n      * Indicates the strict mode for this {@link Nysiis} encoder.\n      *\n-     * @return {@code true} if the encoder is configured for strict mode, <code>false</code> otherwise\n+     * @return {@code true} if the encoder is configured for strict mode, {@code false} otherwise\n      */\n     public boolean isStrict() {\n         return this.strict;\n--- a/src/main/java/org/apache/commons/codec/net/QCodec.java\n+++ b/src/main/java/org/apache/commons/codec/net/QCodec.java\n     /**\n      * Tests if optional transformation of SPACE characters is to be used\n      * \n-     * @return {@code true} if SPACE characters are to be transformed, <code>false</code> otherwise\n+     * @return {@code true} if SPACE characters are to be transformed, {@code false} otherwise\n      */\n     public boolean isEncodeBlanks() {\n         return this.encodeBlanks;\n      * Defines whether optional transformation of SPACE characters is to be used\n      * \n      * @param b\n-     *                  {@code true} if SPACE characters are to be transformed, <code>false</code> otherwise\n+     *                  {@code true} if SPACE characters are to be transformed, {@code false} otherwise\n      */\n     public void setEncodeBlanks(boolean b) {\n         this.encodeBlanks = b;", "timestamp": 1332948768, "metainfo": ""}