{"sha": "803e5eef54ae9033a4e180e9d7828dacd2db3dd0", "log": "[CODEC-193] Support java.nio.ByteBuffer in DigestUtils  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/digest/DigestUtils.java\n+++ b/src/main/java/org/apache/commons/codec/digest/DigestUtils.java\n \n import java.io.IOException;\n import java.io.InputStream;\n+import java.nio.ByteBuffer;\n import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n \n  * @version $Id$\n  */\n public class DigestUtils {\n+\n+    /**\n+     * Read through an ByteBuffer and returns the digest for the data\n+     *\n+     * @param digest\n+     *            The MessageDigest to use (e.g. MD5)\n+     * @param data\n+     *            Data to digest\n+     * @return the digest\n+     * @throws IOException\n+     *             On error reading from the stream\n+     */\n+    private static byte[] digest(final MessageDigest messageDigest, final ByteBuffer data) {\n+        messageDigest.update(data);\n+        return messageDigest.digest();\n+    }\n \n     /**\n      * Read through an InputStream and returns the digest for the data\n      * @param data\n      *            Data to digest\n      * @return MD2 digest as a hex string\n+     * @since 1.11\n+     */\n+    public static String md2Hex(final ByteBuffer data) {\n+        return Hex.encodeHexString(md2(data));\n+    }\n+\n+    /**\n+     * Calculates the MD2 digest and returns the value as a 32 character hex string.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return MD2 digest as a hex string\n      * @throws IOException\n      *             On error reading from the stream\n      * @since 1.7\n     }\n \n     /**\n+     * Calculates the MD2 digest and returns the value as a 16 element <code>byte[]</code>.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return MD2 digest\n+     * @since 1.11\n+     */\n+    public static byte[] md2(final ByteBuffer data) {\n+        return digest(getMd2Digest(), data);\n+    }\n+\n+    /**\n+     * Calculates the SHA-1 digest and returns the value as a <code>byte[]</code>.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return SHA-1 digest\n+     * @since 1.11\n+     */\n+    public static byte[] sha1(final ByteBuffer data) {\n+        return digest(getSha1Digest(), data);\n+    }\n+\n+    /**\n+     * Calculates the SHA-256 digest and returns the value as a <code>byte[]</code>.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return SHA-256 digest\n+     * @since 1.11\n+     */\n+    public static byte[] sha256(final ByteBuffer data) {\n+        return digest(getSha256Digest(), data);\n+    }\n+\n+    /**\n+     * Calculates the SHA-384 digest and returns the value as a <code>byte[]</code>.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return SHA-384 digest\n+     * @since 1.11\n+     */\n+    public static byte[] sha384(final ByteBuffer data) {\n+        return digest(getSha384Digest(), data);\n+    }\n+\n+    /**\n+     * Calculates the SHA-512 digest and returns the value as a <code>byte[]</code>.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return SHA-512 digest\n+     * @since 1.11\n+     */\n+    public static byte[] sha512(final ByteBuffer data) {\n+        return digest(getSha512Digest(), data);\n+    }\n+\n+    /**\n+     * Calculates the MD5 digest and returns the value as a 16 element <code>byte[]</code>.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return MD5 digest\n+     * @since 1.11\n+     */\n+    public static byte[] md5(final ByteBuffer data) {\n+        return digest(getMd5Digest(), data);\n+    }\n+\n+    /**\n      * Calculates the MD5 digest and returns the value as a 16 element <code>byte[]</code>.\n      *\n      * @param data\n     }\n \n     /**\n+     * Calculates the MD5 digest and returns the value as a 32 character hex string.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return MD5 digest as a hex string\n+     * @since 1.11\n+     */\n+    public static String md5Hex(final ByteBuffer data) {\n+        return Hex.encodeHexString(md5(data));\n+    }\n+\n+/**\n      * Calculates the MD5 digest and returns the value as a 32 character hex string.\n      *\n      * @param data\n      * @param data\n      *            Data to digest\n      * @return SHA-1 digest as a hex string\n+     * @since 1.11\n+     */\n+    public static String sha1Hex(final ByteBuffer data) {\n+        return Hex.encodeHexString(sha1(data));\n+    }\n+\n+    /**\n+     * Calculates the SHA-1 digest and returns the value as a hex string.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return SHA-1 digest as a hex string\n      * @throws IOException\n      *             On error reading from the stream\n      * @since 1.7\n \n     /**\n      * Calculates the SHA-256 digest and returns the value as a hex string.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return SHA-256 digest as a hex string\n+     * @since 1.11\n+     */\n+    public static String sha256Hex(final ByteBuffer data) {\n+        return Hex.encodeHexString(sha256(data));\n+    }\n+\n+    /**\n+     * Calculates the SHA-256 digest and returns the value as a hex string.\n      * <p>\n      * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n      * </p>\n \n     /**\n      * Calculates the SHA-384 digest and returns the value as a hex string.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return SHA-384 digest as a hex string\n+     * @since 1.11\n+     */\n+    public static String sha384Hex(final ByteBuffer data) {\n+        return Hex.encodeHexString(sha384(data));\n+    }\n+\n+    /**\n+     * Calculates the SHA-384 digest and returns the value as a hex string.\n      * <p>\n      * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n      * </p>\n      * @since 1.4\n      */\n     public static String sha512Hex(final byte[] data) {\n+        return Hex.encodeHexString(sha512(data));\n+    }\n+\n+    /**\n+     * Calculates the SHA-512 digest and returns the value as a hex string.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return SHA-512 digest as a hex string\n+     * @since 1.11\n+     */\n+    public static String sha512Hex(final ByteBuffer data) {\n         return Hex.encodeHexString(sha512(data));\n     }\n \n      * @since 1.7\n      */\n     public static MessageDigest updateDigest(final MessageDigest messageDigest, final byte[] valueToDigest) {\n+        messageDigest.update(valueToDigest);\n+        return messageDigest;\n+    }\n+\n+    /**\n+     * Updates the given {@link MessageDigest}.\n+     *\n+     * @param messageDigest\n+     *            the {@link MessageDigest} to update\n+     * @param valueToDigest\n+     *            the value to update the {@link MessageDigest} with\n+     * @return the updated {@link MessageDigest}\n+     * @since 1.11\n+     */\n+    public static MessageDigest updateDigest(final MessageDigest messageDigest, final ByteBuffer valueToDigest) {\n         messageDigest.update(valueToDigest);\n         return messageDigest;\n     }\n--- a/src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java\n+++ b/src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java\n package org.apache.commons.codec.digest;\n \n import static org.apache.commons.codec.binary.StringUtils.getBytesUtf8;\n+import static org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n \n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n+import java.nio.ByteBuffer;\n import java.security.MessageDigest;\n import java.util.Random;\n \n \n         assertEquals(DigestUtils.md2Hex(testData),\n                 DigestUtils.md2Hex(new ByteArrayInputStream(testData)));\n-    }\n+\n+        assertEquals(DigestUtils.md2Hex(testData),\n+                DigestUtils.md2Hex(ByteBuffer.wrap(testData)));\n+}\n \n     /**\n      * An MD2 hash converted to hex should always be 32 characters.\n \n         assertEquals(DigestUtils.md5Hex(testData),\n                 DigestUtils.md5Hex(new ByteArrayInputStream(testData)));\n-    }\n+\n+        assertEquals(DigestUtils.md5Hex(testData),\n+                DigestUtils.md5Hex(ByteBuffer.wrap(testData)));\n+}\n \n     /**\n      * An MD5 hash converted to hex should always be 32 characters.\n      */\n     @Test\n-    public void testMd5HexLength() {\n+    public void testMd5HexLengthForBytes() {\n         String hashMe = \"this is some string that is longer than 32 characters\";\n         String hash = DigestUtils.md5Hex(getBytesUtf8(hashMe));\n         assertEquals(32, hash.length());\n     }\n \n     /**\n+     * An MD5 hash converted to hex should always be 32 characters.\n+     */\n+    @Test\n+    public void testMd5HexLengthForByteBuffer() {\n+        String hashMe = \"this is some string that is longer than 32 characters\";\n+        String hash = DigestUtils.md5Hex(getByteBufferUtf8(hashMe));\n+        assertEquals(32, hash.length());\n+\n+        hashMe = \"length < 32\";\n+        hash = DigestUtils.md5Hex(getByteBufferUtf8(hashMe));\n+        assertEquals(32, hash.length());\n+    }\n+\n+    /**\n      * An MD5 hash should always be a 16 element byte[].\n      */\n     @Test\n-    public void testMd5Length() {\n+    public void testMd5LengthForBytes() {\n         String hashMe = \"this is some string that is longer than 16 characters\";\n         byte[] hash = DigestUtils.md5(getBytesUtf8(hashMe));\n         assertEquals(16, hash.length);\n \n         hashMe = \"length < 16\";\n         hash = DigestUtils.md5(getBytesUtf8(hashMe));\n+        assertEquals(16, hash.length);\n+    }\n+\n+    /**\n+     * An MD5 hash should always be a 16 element byte[].\n+     */\n+    @Test\n+    public void testMd5LengthForByteBuffer() {\n+        String hashMe = \"this is some string that is longer than 16 characters\";\n+        byte[] hash = DigestUtils.md5(getByteBufferUtf8(hashMe));\n+        assertEquals(16, hash.length);\n+\n+        hashMe = \"length < 16\";\n+        hash = DigestUtils.md5(getByteBufferUtf8(hashMe));\n         assertEquals(16, hash.length);\n     }\n \n             DigestUtils.sha1Hex(\"abcdbcdecdefdefgefghfghighij\" + \"hijkijkljklmklmnlmnomnopnopq\"));\n         assertEquals(DigestUtils.sha1Hex(testData),\n                 DigestUtils.sha1Hex(new ByteArrayInputStream(testData)));\n+        assertEquals(DigestUtils.sha1Hex(testData),\n+                DigestUtils.sha1Hex(ByteBuffer.wrap(testData)));\n     }\n \n     @Test\n         messageDigest = DigestUtils.getSha1Digest();\n         DigestUtils.updateDigest(messageDigest, d1.getBytes());\n         DigestUtils.updateDigest(messageDigest, d2.getBytes());\n+        final String actualResult = Hex.encodeHexString(messageDigest.digest());\n+\n+        assertEquals(expectedResult, actualResult);\n+    }\n+\n+    @Test\n+    public void testSha1UpdateWithByteBuffer(){\n+        final String d1 = \"C'est un homme qui rentre dans un caf\u00e9, et plouf\";\n+        final String d2 = \"C'est un homme, c'est qu'une t\u00eate, on lui offre un cadeau: 'oh... encore un chapeau!'\";\n+\n+        MessageDigest messageDigest = DigestUtils.getSha1Digest();\n+        messageDigest.update(d1.getBytes());\n+        messageDigest.update(d2.getBytes());\n+        final String expectedResult = Hex.encodeHexString(messageDigest.digest());\n+\n+        messageDigest = DigestUtils.getSha1Digest();\n+        DigestUtils.updateDigest(messageDigest, ByteBuffer.wrap(d1.getBytes()));\n+        DigestUtils.updateDigest(messageDigest, ByteBuffer.wrap(d2.getBytes()));\n         final String actualResult = Hex.encodeHexString(messageDigest.digest());\n \n         assertEquals(expectedResult, actualResult);\n \n     assertEquals(DigestUtils.sha256Hex(testData),\n             DigestUtils.sha256Hex(new ByteArrayInputStream(testData)));\n+    assertEquals(DigestUtils.sha256Hex(testData),\n+            DigestUtils.sha256Hex(ByteBuffer.wrap(testData)));\n     }\n \n     @Test\n                        \"hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu\"));\n     assertEquals(DigestUtils.sha384Hex(testData),\n             DigestUtils.sha384Hex(new ByteArrayInputStream(testData)));\n+    assertEquals(DigestUtils.sha384Hex(testData),\n+            DigestUtils.sha384Hex(ByteBuffer.wrap(testData)));\n     }\n \n     @Test\n                        \"hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu\"));\n     assertEquals(DigestUtils.sha512Hex(testData),\n             DigestUtils.sha512Hex(new ByteArrayInputStream(testData)));\n+    assertEquals(DigestUtils.sha512Hex(testData),\n+            DigestUtils.sha512Hex(ByteBuffer.wrap(testData)));\n }\n \n     @SuppressWarnings(\"deprecation\") // deliberate tests of deprecated code", "timestamp": 1415635959, "metainfo": ""}