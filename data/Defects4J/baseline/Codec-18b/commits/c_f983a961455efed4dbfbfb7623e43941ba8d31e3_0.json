{"sha": "f983a961455efed4dbfbfb7623e43941ba8d31e3", "log": "Sort methods.  ", "commit": "\n--- a/src/test/java/org/apache/commons/codec/binary/Base32Test.java\n+++ b/src/test/java/org/apache/commons/codec/binary/Base32Test.java\n     };\n \n     @Test\n-    public void testBase32Samples() throws Exception {\n-        final Base32 codec = new Base32();\n-        for (final String[] element : BASE32_TEST_CASES) {\n+    public void testBase32Chunked () throws Exception {\n+        final Base32 codec = new Base32(20);\n+        for (final String[] element : BASE32_TEST_CASES_CHUNKED) {\n                 assertEquals(element[1], codec.encodeAsString(element[0].getBytes(CHARSET_UTF8)));\n         }\n     }\n     }\n \n     @Test\n-    public void testBase32Chunked () throws Exception {\n-        final Base32 codec = new Base32(20);\n-        for (final String[] element : BASE32_TEST_CASES_CHUNKED) {\n+    public void testBase32Samples() throws Exception {\n+        final Base32 codec = new Base32();\n+        for (final String[] element : BASE32_TEST_CASES) {\n                 assertEquals(element[1], codec.encodeAsString(element[0].getBytes(CHARSET_UTF8)));\n         }\n     }\n \n     @Test\n-    public void testSingleCharEncoding() {\n-        for (int i = 0; i < 20; i++) {\n-            Base32 codec = new Base32();\n-            final BaseNCodec.Context context = new BaseNCodec.Context();\n-            final byte unencoded[] = new byte[i];\n-            final byte allInOne[] = codec.encode(unencoded);\n-            codec = new Base32();\n-            for (int j=0; j< unencoded.length; j++) {\n-                codec.encode(unencoded, j, 1, context);\n-            }\n-            codec.encode(unencoded, 0, -1, context);\n-            final byte singly[] = new byte[allInOne.length];\n-            codec.readResults(singly, 0, 100, context);\n-            if (!Arrays.equals(allInOne, singly)){\n-                fail();\n-            }\n+    public void testBase32SamplesNonDefaultPadding() throws Exception {\n+        final Base32 codec = new Base32((byte)0x25); // '%' <=> 0x25\n+\n+        for (final String[] element : BASE32_PAD_TEST_CASES) {\n+                assertEquals(element[1], codec.encodeAsString(element[0].getBytes(CHARSET_UTF8)));\n         }\n+    }\n+\n+    @Test\n+    public void testCodec200() {\n+        final Base32 codec = new Base32(true, (byte)'W'); // should be allowed\n+        assertNotNull(codec);\n     }\n \n     @Test\n     }\n \n     @Test\n-    public void testBase32SamplesNonDefaultPadding() throws Exception {\n-        final Base32 codec = new Base32((byte)0x25); // '%' <=> 0x25\n-\n-        for (final String[] element : BASE32_PAD_TEST_CASES) {\n-                assertEquals(element[1], codec.encodeAsString(element[0].getBytes(CHARSET_UTF8)));\n+    public void testSingleCharEncoding() {\n+        for (int i = 0; i < 20; i++) {\n+            Base32 codec = new Base32();\n+            final BaseNCodec.Context context = new BaseNCodec.Context();\n+            final byte unencoded[] = new byte[i];\n+            final byte allInOne[] = codec.encode(unencoded);\n+            codec = new Base32();\n+            for (int j=0; j< unencoded.length; j++) {\n+                codec.encode(unencoded, j, 1, context);\n+            }\n+            codec.encode(unencoded, 0, -1, context);\n+            final byte singly[] = new byte[allInOne.length];\n+            codec.readResults(singly, 0, 100, context);\n+            if (!Arrays.equals(allInOne, singly)){\n+                fail();\n+            }\n         }\n     }\n \n-    @Test\n-    public void testCodec200() {\n-        final Base32 codec = new Base32(true, (byte)'W'); // should be allowed\n-        assertNotNull(codec);\n-    }\n-\n }", "timestamp": 1439235047, "metainfo": ""}