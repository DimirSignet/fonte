{"sha": "1e531f785c26d608c489ca20636489b898faf964", "log": "Add a performance test.  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/codec/language/bm/CacheSubSequencePerformanceTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.codec.language.bm;\n+\n+import org.junit.Test;\n+\n+public class CacheSubSequencePerformanceTest {\n+\n+    @Test\n+    public void test() {\n+        final int times = 10000000;\n+        System.out.print(\"Test with String : \");\n+        test(\"Angelo\", times);\n+        System.out.print(\"Test with StringBuilder : \");\n+        test(new StringBuilder(\"Angelo\"), times);\n+        System.out.print(\"Test with cached String : \");\n+        test(cacheSubSequence(\"Angelo\"), times);\n+        System.out.print(\"Test with cached StringBuilder : \");\n+        test(cacheSubSequence(new StringBuilder(\"Angelo\")), times);\n+    }\n+\n+    private void test(final CharSequence input, final int times) {\n+        final long beginTime = System.currentTimeMillis();\n+        for (int i = 0; i < times; i++) {\n+            test(input);\n+        }\n+        System.out.println(System.currentTimeMillis() - beginTime + \" millis\");\n+    }\n+\n+    private void test(final CharSequence input) {\n+        for (int i = 0; i < input.length(); i++) {\n+            for (int j = i; j <= input.length(); j++) {\n+                input.subSequence(i, j);\n+            }\n+        }\n+    }\n+\n+    private CharSequence cacheSubSequence(final CharSequence cached) {\n+        final CharSequence[][] cache = new CharSequence[cached.length()][cached.length()];\n+        return new CharSequence() {\n+            @Override\n+            public char charAt(final int index) {\n+                return cached.charAt(index);\n+            }\n+\n+            @Override\n+            public int length() {\n+                return cached.length();\n+            }\n+\n+            @Override\n+            public CharSequence subSequence(final int start, final int end) {\n+                if (start == end) {\n+                    return \"\";\n+                }\n+                CharSequence res = cache[start][end - 1];\n+                if (res == null) {\n+                    res = cached.subSequence(start, end);\n+                    cache[start][end - 1] = res;\n+                }\n+                return res;\n+            }\n+        };\n+    }\n+}", "timestamp": 1384278102, "metainfo": ""}