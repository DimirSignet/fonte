{"sha": "8ffb4fb5e09446845f520fa8e759e9b8566d633e", "log": "Migrate to JUnit 4 https://issues.apache.org/jira/browse/CODEC-120  ", "commit": "\n--- a/src/test/org/apache/commons/codec/BinaryEncoderAbstractTest.java\n+++ b/src/test/org/apache/commons/codec/BinaryEncoderAbstractTest.java\n \n package org.apache.commons.codec;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n /**\n  * @author Apache Software Foundation\n  * @version $Id$\n  */\n-public abstract class BinaryEncoderAbstractTest extends TestCase {\n-\n-    public BinaryEncoderAbstractTest(String name) {\n-        super(name);\n-    }\n+public abstract class BinaryEncoderAbstractTest {\n \n     protected abstract BinaryEncoder makeEncoder();\n \n-    // ------------------------------------------------------------------------\n-\n+    @Test\n     public void testEncodeEmpty() throws Exception {\n         BinaryEncoder encoder = makeEncoder();\n         encoder.encode(new byte[0]);\n-    }        \n+    }\n \n+    @Test\n     public void testEncodeNull() throws Exception {\n         BinaryEncoder encoder = makeEncoder();\n         try {\n         } catch (EncoderException ee) {\n             // An exception should be thrown\n         }\n-    }        \n+    }\n }\n--- a/src/test/org/apache/commons/codec/CharEncodingTest.java\n+++ b/src/test/org/apache/commons/codec/CharEncodingTest.java\n package org.apache.commons.codec;\n \n import junit.framework.Assert;\n-import junit.framework.TestCase;\n+\n+import org.junit.Test;\n \n /**\n  * Sanity checks for {@link CharEncoding}.\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @version $Id$\n  */\n-public class CharEncodingTest extends TestCase {\n+public class CharEncodingTest {\n \n     /**\n      * We could make the constructor private in the future, it's a matter a style.\n      */\n+    @Test\n     public void testConstructor() {\n         new CharEncoding();\n     }\n \n+    @Test\n     public void testIso8859_1() {\n         Assert.assertEquals(\"ISO-8859-1\", CharEncoding.ISO_8859_1);\n     }\n \n+    @Test\n     public void testUsAscii() {\n         Assert.assertEquals(\"US-ASCII\", CharEncoding.US_ASCII);\n     }\n \n+    @Test\n     public void testUtf16() {\n         Assert.assertEquals(\"UTF-16\", CharEncoding.UTF_16);\n     }\n \n+    @Test\n     public void testUtf16Be() {\n         Assert.assertEquals(\"UTF-16BE\", CharEncoding.UTF_16BE);\n     }\n \n+    @Test\n     public void testUtf16Le() {\n         Assert.assertEquals(\"UTF-16LE\", CharEncoding.UTF_16LE);\n     }\n \n+    @Test\n     public void testUtf8() {\n         Assert.assertEquals(\"UTF-8\", CharEncoding.UTF_8);\n     }\n--- a/src/test/org/apache/commons/codec/DecoderExceptionTest.java\n+++ b/src/test/org/apache/commons/codec/DecoderExceptionTest.java\n \n package org.apache.commons.codec;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+\n+import org.junit.Test;\n \n /**\n  * Tests {@link DecoderException}.\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @version $Id$\n  */\n-public class DecoderExceptionTest extends TestCase {\n+public class DecoderExceptionTest {\n \n     private static final String MSG = \"TEST\";\n \n     private static final Throwable t = new Exception();\n \n+    @Test\n     public void testConstructor0() {\n         DecoderException e = new DecoderException();\n         assertNull(e.getMessage());\n         assertNull(e.getCause());\n     }\n \n+    @Test\n     public void testConstructorString() {\n         DecoderException e = new DecoderException(MSG);\n         assertEquals(MSG, e.getMessage());\n         assertNull(e.getCause());\n     }\n \n+    @Test\n     public void testConstructorStringThrowable() {\n         DecoderException e = new DecoderException(MSG, t);\n         assertEquals(MSG, e.getMessage());\n         assertEquals(t, e.getCause());\n     }\n \n+    @Test\n     public void testConstructorThrowable() {\n         DecoderException e = new DecoderException(t);\n         assertEquals(t.getClass().getName(), e.getMessage());\n--- a/src/test/org/apache/commons/codec/EncoderExceptionTest.java\n+++ b/src/test/org/apache/commons/codec/EncoderExceptionTest.java\n \n package org.apache.commons.codec;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+\n+import org.junit.Test;\n \n /**\n  * Tests {@link EncoderException}.\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @version $Id$\n  */\n-public class EncoderExceptionTest extends TestCase {\n+public class EncoderExceptionTest {\n \n     private static final String MSG = \"TEST\";\n \n     private static final Throwable t = new Exception();\n \n+    @Test\n     public void testConstructor0() {\n         EncoderException e = new EncoderException();\n         assertNull(e.getMessage());\n         assertNull(e.getCause());\n     }\n \n+    @Test\n     public void testConstructorString() {\n         EncoderException e = new EncoderException(MSG);\n         assertEquals(MSG, e.getMessage());\n         assertNull(e.getCause());\n     }\n \n+    @Test\n     public void testConstructorStringThrowable() {\n         EncoderException e = new EncoderException(MSG, t);\n         assertEquals(MSG, e.getMessage());\n         assertEquals(t, e.getCause());\n     }\n \n+    @Test\n     public void testConstructorThrowable() {\n         EncoderException e = new EncoderException(t);\n         assertEquals(t.getClass().getName(), e.getMessage());\n--- a/src/test/org/apache/commons/codec/StringEncoderAbstractTest.java\n+++ b/src/test/org/apache/commons/codec/StringEncoderAbstractTest.java\n import java.util.Locale;\n \n import junit.framework.Assert;\n-import junit.framework.TestCase;\n+\n+import org.junit.Test;\n \n /**\n  * @author Apache Software Foundation\n  * @version $Id$\n  */\n-public abstract class StringEncoderAbstractTest extends TestCase {\n+public abstract class StringEncoderAbstractTest {\n \n     protected StringEncoder stringEncoder = this.createStringEncoder();\n-\n-    public StringEncoderAbstractTest(String name) {\n-        super(name);\n-    }\n \n     public void checkEncoding(String expected, String source) throws EncoderException {\n         Assert.assertEquals(\"Source: \" + source, expected, this.getStringEncoder().encode(source));\n         return this.stringEncoder;\n     }\n \n+    @Test\n     public void testEncodeEmpty() throws Exception {\n         Encoder encoder = this.getStringEncoder();\n         encoder.encode(\"\");\n         encoder.encode(\"\\t\");\n     }\n \n+    @Test\n     public void testEncodeNull() throws Exception {\n         StringEncoder encoder = this.getStringEncoder();\n         try {\n         }\n     }\n \n+    @Test\n     public void testEncodeWithInvalidObject() throws Exception {\n-\n         boolean exceptionThrown = false;\n         try {\n             StringEncoder encoder = this.getStringEncoder();\n         } catch (Exception e) {\n             exceptionThrown = true;\n         }\n-\n         Assert.assertTrue(\"An exception was not thrown when we tried to encode \" + \"a Float object\", exceptionThrown);\n     }\n \n+    @Test\n     public void testLocaleIndependence() throws Exception {\n         StringEncoder encoder = this.getStringEncoder();\n \n--- a/src/test/org/apache/commons/codec/StringEncoderComparatorTest.java\n+++ b/src/test/org/apache/commons/codec/StringEncoderComparatorTest.java\n \n package org.apache.commons.codec;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n \n-import junit.framework.TestCase;\n-\n import org.apache.commons.codec.language.DoubleMetaphone;\n import org.apache.commons.codec.language.Soundex;\n+import org.junit.Test;\n \n /**\n  * Test cases for the StingEncoderComparator.\n  * @author Apache Software Foundation\n  * @version $Id$\n  */\n-public class StringEncoderComparatorTest extends TestCase {\n+public class StringEncoderComparatorTest {\n \n-    public StringEncoderComparatorTest(String name) {\n-        super(name);\n-    }\n-\n+    @Test\n     public void testComparatorNoArgCon() throws Exception {\n         new StringEncoderComparator();\n     }        \n \n+    @Test\n     public void testComparatorWithSoundex() throws Exception {\n         StringEncoderComparator sCompare = \n             new StringEncoderComparator( new Soundex() );\n                     0 == sCompare.compare( \"O'Brien\", \"O'Brian\" ) );\n     }\n     \n+    @Test\n     public void testComparatorWithDoubleMetaphone() throws Exception {\n         StringEncoderComparator sCompare =\n             new StringEncoderComparator( new DoubleMetaphone() );\n         }\n     }\n \n+    @Test\n     public void testComparatorWithDoubleMetaphoneAndInvalidInput() throws Exception {\n         StringEncoderComparator sCompare =\n             new StringEncoderComparator( new DoubleMetaphone() );\n         int compare = sCompare.compare(new Double(3.0), new Long(3));\n         assertEquals( \"Trying to compare objects that make no sense to the underlying encoder should return a zero compare code\",\n                                 0, compare);        \n-        \n     }\n }\n--- a/src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java\n+++ b/src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java\n \n package org.apache.commons.codec.binary;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n import java.util.Arrays;\n \n-import junit.framework.TestCase;\n-\n-public class Base32InputStreamTest extends TestCase {\n+import org.junit.Test;\n+\n+public class Base32InputStreamTest {\n \n     private final static byte[] CRLF = {(byte) '\\r', (byte) '\\n'};\n \n     private final static byte[] LF = {(byte) '\\n'};\n \n     /**\n-     * Construct a new instance of this test case.\n-     * \n-     * @param name\n-     *            Name of the test case\n-     */\n-    public Base32InputStreamTest(String name) {\n-        super(name);\n-    }\n-\n-    /**\n      * Tests the bug reported in CODEC-105. Bad interactions with InputStream when reading one byte at a time.\n      */\n+    @Test\n     public void testCodec105() throws IOException {\n         Base32InputStream in = new Base32InputStream(new Codec105ErrorInputStream(), true, 0, null);\n         for (int i = 0; i < 5; i++) {\n //     *\n //     * @throws Exception for some failure scenarios.\n //     */\n+//    @Test\n //    public void testCodec101() throws Exception {\n //        byte[] codec101 = StringUtils.getBytesUtf8(Base32TestData.CODEC_101_MULTIPLE_OF_3);\n //        ByteArrayInputStream bais = new ByteArrayInputStream(codec101);\n      *\n      * @throws Exception for some failure scenarios.\n      */\n+//    @Test\n //    public void testInputStreamReader() throws Exception {\n //        byte[] codec101 = StringUtils.getBytesUtf8(Base32TestData.CODEC_101_MULTIPLE_OF_3);\n //        ByteArrayInputStream bais = new ByteArrayInputStream(codec101);\n      *\n      * @throws Exception for some failure scenarios.\n      */\n+//    @Test\n //    public void testCodec98NPE() throws Exception {\n //        byte[] codec98 = StringUtils.getBytesUtf8(Base32TestData.CODEC_98_NPE);\n //        ByteArrayInputStream data = new ByteArrayInputStream(codec98);\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n+    @Test\n     public void testBase32EmptyInputStreamMimeChuckSize() throws Exception {\n         testBase32EmptyInputStream(Base32.MIME_CHUNK_SIZE);\n     }\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n+    @Test\n     public void testBase32EmptyInputStreamPemChuckSize() throws Exception {\n         testBase32EmptyInputStream(Base32.PEM_CHUNK_SIZE);\n     }\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n+    @Test\n     public void testBase32InputStreamByChunk() throws Exception {\n         // Hello World test.\n         byte[] encoded = StringUtils.getBytesUtf8(Base32TestData.BASE32_FIXTURE);\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n+    @Test\n     public void testBase32InputStreamByteByByte() throws Exception {\n         // Hello World test.\n         byte[] encoded = StringUtils.getBytesUtf8(Base32TestData.BASE32_FIXTURE);\n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testMarkSupported() throws Exception {\n         byte[] decoded = StringUtils.getBytesUtf8(Base32TestData.STRING_FIXTURE);\n         ByteArrayInputStream bin = new ByteArrayInputStream(decoded);\n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testRead0() throws Exception {\n         byte[] decoded = StringUtils.getBytesUtf8(Base32TestData.STRING_FIXTURE);\n         byte[] buf = new byte[1024];\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n+    @Test\n     public void testReadNull() throws Exception {\n         byte[] decoded = StringUtils.getBytesUtf8(Base32TestData.STRING_FIXTURE);\n         ByteArrayInputStream bin = new ByteArrayInputStream(decoded);\n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testReadOutOfBounds() throws Exception {\n         byte[] decoded = StringUtils.getBytesUtf8(Base32TestData.STRING_FIXTURE);\n         byte[] buf = new byte[1024];\n--- a/src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java\n+++ b/src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java\n \n package org.apache.commons.codec.binary;\n \n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import java.io.ByteArrayOutputStream;\n import java.io.OutputStream;\n import java.util.Arrays;\n \n-import junit.framework.TestCase;\n-\n-public class Base32OutputStreamTest extends TestCase {\n+import org.junit.Test;\n+\n+public class Base32OutputStreamTest {\n \n     private final static byte[] CRLF = {(byte) '\\r', (byte) '\\n'};\n \n     private final static byte[] LF = {(byte) '\\n'};\n \n-    /**\n-     * Construct a new instance of this test case.\n-     * \n-     * @param name\n-     *            Name of the test case\n-     */\n-    public Base32OutputStreamTest(String name) {\n-        super(name);\n-    }\n+    \n \n //    /**\n //     * Test the Base32OutputStream implementation against the special NPE inducing input\n //     *\n //     * @throws Exception for some failure scenarios.\n //     */\n+//    @Test\n //    public void testCodec98NPE() throws Exception {\n //        byte[] codec98 = StringUtils.getBytesUtf8(Base32TestData.CODEC_98_NPE);\n //        byte[] codec98_1024 = new byte[1024];\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n+    @Test\n     public void testBase32EmptyOutputStreamMimeChunkSize() throws Exception {\n         testBase32EmptyOutputStream(Base32.MIME_CHUNK_SIZE);\n     }\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n+    @Test\n     public void testBase32EmptyOutputStreamPemChunkSize() throws Exception {\n         testBase32EmptyOutputStream(Base32.PEM_CHUNK_SIZE);\n     }\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n+    @Test\n     public void testBase32OutputStreamByChunk() throws Exception {\n         // Hello World test.\n         byte[] encoded = StringUtils.getBytesUtf8(Base32TestData.BASE32_FIXTURE);\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n+    @Test\n     public void testBase32OutputStreamByteByByte() throws Exception {\n         // Hello World test.\n         byte[] encoded = StringUtils.getBytesUtf8(Base32TestData.BASE32_FIXTURE);\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n+    @Test\n     public void testWriteOutOfBounds() throws Exception {\n         byte[] buf = new byte[1024];\n         ByteArrayOutputStream bout = new ByteArrayOutputStream();\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n+    @Test\n     public void testWriteToNullCoverage() throws Exception {\n         ByteArrayOutputStream bout = new ByteArrayOutputStream();\n         Base32OutputStream out = new Base32OutputStream(bout);\n--- a/src/test/org/apache/commons/codec/binary/Base32Test.java\n+++ b/src/test/org/apache/commons/codec/binary/Base32Test.java\n \n package org.apache.commons.codec.binary;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n import java.util.Arrays;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n-public class Base32Test extends TestCase {\n+public class Base32Test {\n     \n     private static final String [][] BASE32_TEST_CASES = { // RFC 4648\n         {\"\"       ,\"\"},\n         {\"foobar\" ,\"MZXW6YTBOI======\\r\\n\"},\n     };\n \n+    @Test\n     public void testBase32Samples() throws Exception {\n         Base32 codec = new Base32();\n         for (int i = 0; i < BASE32_TEST_CASES.length; i++) {\n         }\n     }\n \n+    @Test\n     public void testBase32HexSamples() throws Exception {\n         Base32 codec = new Base32(true);\n         for (int i = 0; i < BASE32HEX_TEST_CASES.length; i++) {\n         }\n     }\n \n+    @Test\n     public void testBase32Chunked () throws Exception {\n         Base32 codec = new Base32(20);\n         for (int i = 0; i < BASE32_TEST_CASES_CHUNKED.length; i++) {\n         }        \n     }\n \n+    @Test\n     public void testSingleCharEncoding() {\n         for (int i = 0; i < 20; i++) {\n             Base32 codec = new Base32();\n         }\n     }\n \n+    @Test\n     public void testRandomBytes() {\n         for (int i = 0; i < 20; i++) {\n             Base32 codec = new Base32();\n             //assertEquals(b[0],codec.decode(b[1]));\n         }\n     }\n+\n+    @Test\n     public void testRandomBytesChunked() {\n         for (int i = 0; i < 20; i++) {\n             Base32 codec = new Base32(10);\n             //assertEquals(b[0],codec.decode(b[1]));\n         }\n     }\n+    \n+    @Test\n     public void testRandomBytesHex() {\n         for (int i = 0; i < 20; i++) {\n             Base32 codec = new Base32(true);\n--- a/src/test/org/apache/commons/codec/binary/Base64Codec13Test.java\n+++ b/src/test/org/apache/commons/codec/binary/Base64Codec13Test.java\n \n package org.apache.commons.codec.binary;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestFailure;\n-import junit.framework.TestResult;\n-import junit.framework.TestSuite;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.util.Arrays;\n+\n import org.apache.commons.codec.BinaryDecoder;\n import org.apache.commons.codec.BinaryEncoder;\n import org.apache.commons.codec.Decoder;\n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.Encoder;\n import org.apache.commons.codec.EncoderException;\n-\n-import java.io.UnsupportedEncodingException;\n-import java.util.Arrays;\n-import java.util.Enumeration;\n+import org.junit.Test;\n \n /**\n  * Tests to make sure future versions of commons-codec.jar have identical Base64\n  * @author Julius Davies\n  * @since Mar 25, 2010\n  */\n-public class Base64Codec13Test extends TestCase {\n-\n-    public Base64Codec13Test(String name) {\n-        super(name);\n-    }\n+public class Base64Codec13Test {\n \n     private final static String[] STRINGS = new String[181];\n     private final static String[] CHUNKED_STRINGS = new String[STRINGS.length];\n      * \n      * @throws EncoderException problem\n      */\n+    @Test\n     public void testEncoder() throws EncoderException {\n         Encoder enc = new Base64();\n         for (int i = 0; i < STRINGS.length; i++) {\n      *\n      * @throws DecoderException problem\n      */    \n+    @Test\n     public void testDecoder() throws DecoderException {\n         Decoder dec = new Base64();\n         for (int i = 0; i < STRINGS.length; i++) {\n      *\n      * @throws EncoderException problem\n      */        \n+    @Test\n     public void testBinaryEncoder() throws EncoderException {\n         BinaryEncoder enc = new Base64();\n         for (int i = 0; i < STRINGS.length; i++) {\n      *\n      * @throws DecoderException problem\n      */    \n+    @Test\n     public void testBinaryDecoder() throws DecoderException {\n         BinaryDecoder dec = new Base64();\n         for (int i = 0; i < STRINGS.length; i++) {\n      *\n      * @throws EncoderException problem\n      */        \n+    @Test\n     public void testStaticEncode() throws EncoderException {\n         for (int i = 0; i < STRINGS.length; i++) {\n             if (STRINGS[i] != null) {\n      *\n      * @throws DecoderException problem\n      */            \n+    @Test\n     public void testStaticDecode() throws DecoderException {\n         for (int i = 0; i < STRINGS.length; i++) {\n             if (STRINGS[i] != null) {\n      *\n      * @throws EncoderException problem\n      */                \n+    @Test\n     public void testStaticEncodeChunked() throws EncoderException {\n         for (int i = 0; i < STRINGS.length; i++) {\n             if (STRINGS[i] != null) {\n      *\n      * @throws DecoderException problem\n      */                \n+    @Test\n     public void testStaticDecodeChunked() throws DecoderException {\n         for (int i = 0; i < STRINGS.length; i++) {\n             if (STRINGS[i] != null) {\n             throw new IllegalStateException(uee.toString());\n         }\n     }\n-\n-    /**\n-     * This main() method can be run with just commons-codec-1.3.jar and junit-3.8.1.jar\n-     * on the classpath to make sure these tests truly capture the behaviour of\n-     * commons-codec-1.3.jar.\n-     *\n-     * @param args command-line args\n-     */\n-    public static void main(String[] args) {\n-        TestSuite suite = new TestSuite(Base64Codec13Test.class);\n-\n-        TestResult r = new TestResult();\n-        suite.run(r);\n-        int runCount = r.runCount();\n-        int failureCount = r.failureCount();\n-        System.out.println((runCount - failureCount) + \"/\" + runCount + \" tests succeeded!\");\n-        if (!r.wasSuccessful()) {\n-            Enumeration en = r.errors();\n-            while (en.hasMoreElements()) {\n-                TestFailure tf = (TestFailure) en.nextElement();\n-                System.out.println(tf.toString());\n-            }\n-\n-            en = r.failures();\n-            while (en.hasMoreElements()) {\n-                TestFailure tf = (TestFailure) en.nextElement();\n-                System.out.println(tf.toString());\n-            }\n-\n-        }\n-\n-    }\n }\n--- a/src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java\n+++ b/src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java\n \n package org.apache.commons.codec.binary;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import java.io.BufferedReader;\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.InputStreamReader;\n import java.util.Arrays;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n /**\n  * @author Apache Software Foundation\n  * @version $Id $\n  * @since 1.4\n  */\n-public class Base64InputStreamTest extends TestCase {\n+public class Base64InputStreamTest {\n \n     private final static byte[] CRLF = {(byte) '\\r', (byte) '\\n'};\n \n     private static final String STRING_FIXTURE = \"Hello World\";\n \n     /**\n-     * Construct a new instance of this test case.\n-     * \n-     * @param name\n-     *            Name of the test case\n-     */\n-    public Base64InputStreamTest(String name) {\n-        super(name);\n-    }\n-\n-    /**\n      * Tests the bug reported in CODEC-105. Bad interactions with InputStream when reading one byte at a time.\n      */\n+    @Test\n     public void testCodec105() throws IOException {\n         Base64InputStream in = new Base64InputStream(new Codec105ErrorInputStream(), true, 0, null);\n         for (int i = 0; i < 5; i++) {\n      *\n      * @throws Exception for some failure scenarios.\n      */\n+    @Test\n     public void testCodec101() throws Exception {\n         byte[] codec101 = StringUtils.getBytesUtf8(Base64TestData.CODEC_101_MULTIPLE_OF_3);\n         ByteArrayInputStream bais = new ByteArrayInputStream(codec101);\n      *\n      * @throws Exception for some failure scenarios.\n      */\n+    @Test\n     public void testInputStreamReader() throws Exception {\n         byte[] codec101 = StringUtils.getBytesUtf8(Base64TestData.CODEC_101_MULTIPLE_OF_3);\n         ByteArrayInputStream bais = new ByteArrayInputStream(codec101);\n      *\n      * @throws Exception for some failure scenarios.\n      */\n+    @Test\n     public void testCodec98NPE() throws Exception {\n         byte[] codec98 = StringUtils.getBytesUtf8(Base64TestData.CODEC_98_NPE);\n         ByteArrayInputStream data = new ByteArrayInputStream(codec98);\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n+    @Test\n     public void testBase64EmptyInputStreamMimeChuckSize() throws Exception {\n         testBase64EmptyInputStream(Base64.MIME_CHUNK_SIZE);\n     }\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n+    @Test\n     public void testBase64EmptyInputStreamPemChuckSize() throws Exception {\n         testBase64EmptyInputStream(Base64.PEM_CHUNK_SIZE);\n     }\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n+    @Test\n     public void testBase64InputStreamByChunk() throws Exception {\n         // Hello World test.\n         byte[] encoded = StringUtils.getBytesUtf8(\"SGVsbG8gV29ybGQ=\\r\\n\");\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n+    @Test\n     public void testBase64InputStreamByteByByte() throws Exception {\n         // Hello World test.\n         byte[] encoded = StringUtils.getBytesUtf8(\"SGVsbG8gV29ybGQ=\\r\\n\");\n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testMarkSupported() throws Exception {\n         byte[] decoded = StringUtils.getBytesUtf8(STRING_FIXTURE);\n         ByteArrayInputStream bin = new ByteArrayInputStream(decoded);\n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testRead0() throws Exception {\n         byte[] decoded = StringUtils.getBytesUtf8(STRING_FIXTURE);\n         byte[] buf = new byte[1024];\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n+    @Test\n     public void testReadNull() throws Exception {\n         byte[] decoded = StringUtils.getBytesUtf8(STRING_FIXTURE);\n         ByteArrayInputStream bin = new ByteArrayInputStream(decoded);\n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testReadOutOfBounds() throws Exception {\n         byte[] decoded = StringUtils.getBytesUtf8(STRING_FIXTURE);\n         byte[] buf = new byte[1024];\n--- a/src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java\n+++ b/src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java\n \n package org.apache.commons.codec.binary;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import java.io.ByteArrayOutputStream;\n import java.io.OutputStream;\n import java.util.Arrays;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n /**\n  * @author Apache Software Foundation\n  * @version $Id $\n  * @since 1.4\n  */\n-public class Base64OutputStreamTest extends TestCase {\n+public class Base64OutputStreamTest {\n \n     private final static byte[] CRLF = {(byte) '\\r', (byte) '\\n'};\n \n     private final static byte[] LF = {(byte) '\\n'};\n \n     private static final String STRING_FIXTURE = \"Hello World\";\n-\n-    /**\n-     * Construct a new instance of this test case.\n-     * \n-     * @param name\n-     *            Name of the test case\n-     */\n-    public Base64OutputStreamTest(String name) {\n-        super(name);\n-    }\n \n     /**\n      * Test the Base64OutputStream implementation against the special NPE inducing input\n      *\n      * @throws Exception for some failure scenarios.\n      */\n+    @Test\n     public void testCodec98NPE() throws Exception {\n         byte[] codec98 = StringUtils.getBytesUtf8(Base64TestData.CODEC_98_NPE);\n         byte[] codec98_1024 = new byte[1024];\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n+    @Test\n     public void testBase64EmptyOutputStreamMimeChunkSize() throws Exception {\n         testBase64EmptyOutputStream(Base64.MIME_CHUNK_SIZE);\n     }\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n+    @Test\n     public void testBase64EmptyOutputStreamPemChunkSize() throws Exception {\n         testBase64EmptyOutputStream(Base64.PEM_CHUNK_SIZE);\n     }\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n+    @Test\n     public void testBase64OutputStreamByChunk() throws Exception {\n         // Hello World test.\n         byte[] encoded = StringUtils.getBytesUtf8(\"SGVsbG8gV29ybGQ=\\r\\n\");\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n+    @Test\n     public void testBase64OutputStreamByteByByte() throws Exception {\n         // Hello World test.\n         byte[] encoded = StringUtils.getBytesUtf8(\"SGVsbG8gV29ybGQ=\\r\\n\");\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n+    @Test\n     public void testWriteOutOfBounds() throws Exception {\n         byte[] buf = new byte[1024];\n         ByteArrayOutputStream bout = new ByteArrayOutputStream();\n      * @throws Exception\n      *             for some failure scenarios.\n      */\n+    @Test\n     public void testWriteToNullCoverage() throws Exception {\n         ByteArrayOutputStream bout = new ByteArrayOutputStream();\n         Base64OutputStream out = new Base64OutputStream(bout);\n--- a/src/test/org/apache/commons/codec/binary/Base64Test.java\n+++ b/src/test/org/apache/commons/codec/binary/Base64Test.java\n \n package org.apache.commons.codec.binary;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import java.io.UnsupportedEncodingException;\n import java.math.BigInteger;\n import java.util.Arrays;\n import java.util.Random;\n \n-import junit.framework.TestCase;\n-\n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n+import org.junit.Test;\n \n /**\n  * Test cases for Base64 class.\n  * @author Apache Software Foundation\n  * @version $Id$\n  */\n-public class Base64Test extends TestCase {\n+public class Base64Test {\n \n     private Random _random = new Random();\n-\n-    /**\n-     * Construct a new instance of this test case.\n-     * \n-     * @param name\n-     *            Name of the test case\n-     */\n-    public Base64Test(String name) {\n-        super(name);\n-    }\n \n     /**\n      * @return Returns the _random.\n     /**\n      * Test the isStringBase64 method.\n      */\n+    @Test\n     public void testIsStringBase64() {\n         String nullString = null;\n         String emptyString = \"\";\n     /**\n      * Test the Base64 implementation\n      */\n+    @Test\n     public void testBase64() {\n         String content = \"Hello World\";\n         String encodedContent;\n     /**\n      * Tests Base64.encodeBase64().\n      */\n+    @Test\n     public void testChunkedEncodeMultipleOf76() {\n         byte[] expectedEncode = Base64.encodeBase64(Base64TestData.DECODED, true);\n         // convert to \"\\r\\n\" so we're equal to the old openssl encoding test stored\n     /**\n      * CODEC-68: isBase64 throws ArrayIndexOutOfBoundsException on some non-BASE64 bytes\n      */\n+    @Test\n     public void testCodec68() {\n         byte[] x = new byte[]{'n', 'A', '=', '=', (byte) 0x9c};\n         Base64.decodeBase64(x);\n     }\n \n+    @Test\n     public void testCodeInteger1() throws UnsupportedEncodingException {\n         String encodedInt1 = \"li7dzDacuo67Jg7mtqEm2TRuOMU=\";\n         BigInteger bigInt1 = new BigInteger(\"85739377120809420210425962799\" + \"0318636601332086981\");\n         assertEquals(bigInt1, Base64.decodeInteger(encodedInt1.getBytes(\"UTF-8\")));\n     }\n \n+    @Test\n     public void testCodeInteger2() throws UnsupportedEncodingException {\n         String encodedInt2 = \"9B5ypLY9pMOmtxCeTDHgwdNFeGs=\";\n         BigInteger bigInt2 = new BigInteger(\"13936727572861167254666467268\" + \"91466679477132949611\");\n         assertEquals(bigInt2, Base64.decodeInteger(encodedInt2.getBytes(\"UTF-8\")));\n     }\n \n+    @Test\n     public void testCodeInteger3() throws UnsupportedEncodingException {\n         String encodedInt3 = \"FKIhdgaG5LGKiEtF1vHy4f3y700zaD6QwDS3IrNVGzNp2\" + \"rY+1LFWTK6D44AyiC1n8uWz1itkYMZF0/aKDK0Yjg==\";\n         BigInteger bigInt3 = new BigInteger(\"10806548154093873461951748545\"\n         assertEquals(bigInt3, Base64.decodeInteger(encodedInt3.getBytes(\"UTF-8\")));\n     }\n \n+    @Test\n     public void testCodeInteger4() throws UnsupportedEncodingException {\n         String encodedInt4 = \"ctA8YGxrtngg/zKVvqEOefnwmViFztcnPBYPlJsvh6yKI\"\n             + \"4iDm68fnp4Mi3RrJ6bZAygFrUIQLxLjV+OJtgJAEto0xAs+Mehuq1DkSFEpP3o\"\n         assertEquals(bigInt4, Base64.decodeInteger(encodedInt4.getBytes(\"UTF-8\")));\n     }\n \n+    @Test\n     public void testCodeIntegerEdgeCases() {\n         // TODO\n     }\n \n+    @Test\n     public void testCodeIntegerNull() {\n         try {\n             Base64.encodeInteger(null);\n         }\n     }\n \n+    @Test\n     public void testConstructors() {\n         Base64 base64;\n         base64 = new Base64();\n         assertNotNull(base64);\n     }\n \n+    @Test\n     public void testConstructor_Int_ByteArray_Boolean() {\n         Base64 base64 = new Base64(65, new byte[]{'\\t'}, false);\n         byte[] encoded = base64.encode(Base64TestData.DECODED);\n         assertEquals(\"new Base64(65, \\\\t, false)\", expectedResult, result);\n     }\n \n+    @Test\n     public void testConstructor_Int_ByteArray_Boolean_UrlSafe() {\n         // url-safe variation\n         Base64 base64 = new Base64(64, new byte[]{'\\t'}, true);\n     /**\n      * Tests conditional true branch for \"marker0\" test.\n      */\n+    @Test\n     public void testDecodePadMarkerIndex2() throws UnsupportedEncodingException {\n         assertEquals(\"A\", new String(Base64.decodeBase64(\"QQ==\".getBytes(\"UTF-8\"))));\n     }\n     /**\n      * Tests conditional branches for \"marker1\" test.\n      */\n+    @Test\n     public void testDecodePadMarkerIndex3() throws UnsupportedEncodingException {\n         assertEquals(\"AA\", new String(Base64.decodeBase64(\"QUE=\".getBytes(\"UTF-8\"))));\n         assertEquals(\"AAA\", new String(Base64.decodeBase64(\"QUFB\".getBytes(\"UTF-8\"))));\n     }\n \n+    @Test\n     public void testDecodePadOnly() throws UnsupportedEncodingException {\n         assertTrue(Base64.decodeBase64(\"====\".getBytes(\"UTF-8\")).length == 0);\n         assertEquals(\"\", new String(Base64.decodeBase64(\"====\".getBytes(\"UTF-8\"))));\n         assertTrue(Base64.decodeBase64(\"\".getBytes(\"UTF-8\")).length == 0);\n     }\n \n+    @Test\n     public void testDecodePadOnlyChunked() throws UnsupportedEncodingException {\n         assertTrue(Base64.decodeBase64(\"====\\n\".getBytes(\"UTF-8\")).length == 0);\n         assertEquals(\"\", new String(Base64.decodeBase64(\"====\\n\".getBytes(\"UTF-8\"))));\n         assertTrue(Base64.decodeBase64(\"\\n\".getBytes(\"UTF-8\")).length == 0);\n     }\n \n+    @Test\n     public void testDecodeWithWhitespace() throws Exception {\n \n         String orig = \"I am a late night coder.\";\n     /**\n      * Test encode and decode of empty byte array.\n      */\n+    @Test\n     public void testEmptyBase64() {\n         byte[] empty = new byte[0];\n         byte[] result = Base64.encodeBase64(empty);\n     }\n \n     // encode/decode a large random array\n+    @Test\n     public void testEncodeDecodeRandom() {\n         for (int i = 1; i < 5; i++) {\n             byte[] data = new byte[this.getRandom().nextInt(10000) + 1];\n     }\n \n     // encode/decode random arrays from size 0 to size 11\n+    @Test\n     public void testEncodeDecodeSmall() {\n         for (int i = 0; i < 12; i++) {\n             byte[] data = new byte[i];\n         }\n     }\n \n+    @Test\n     public void testEncodeOverMaxSize() throws Exception {\n         testEncodeOverMaxSize(-1);\n         testEncodeOverMaxSize(0);\n         testEncodeOverMaxSize(2);\n     }\n     \n+    @Test\n     public void testCodec112() { // size calculation assumes always chunked\n         byte[] in = new byte[] {0};\n         byte[] out=Base64.encodeBase64(in);\n         }\n     }\n \n+    @Test\n     public void testIgnoringNonBase64InDecode() throws Exception {\n         assertEquals(\"The quick brown fox jumped over the lazy dogs.\", new String(Base64\n                 .decodeBase64(\"VGhlIH@$#$@%F1aWN@#@#@@rIGJyb3duIGZve\\n\\r\\t%#%#%#%CBqd##$#$W1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\".getBytes(\"UTF-8\"))));\n     }\n \n+    @Test\n     public void testIsArrayByteBase64() {\n         assertFalse(Base64.isBase64(new byte[]{Byte.MIN_VALUE}));\n         assertFalse(Base64.isBase64(new byte[]{-125}));\n     /**\n      * Tests isUrlSafe.\n      */\n+    @Test\n     public void testIsUrlSafe() {\n         Base64 base64Standard = new Base64(false);\n         Base64 base64URLSafe = new Base64(true);\n         assertTrue(\"Base64.isBase64(whiteSpace)=true\", Base64.isBase64(whiteSpace));\n     }\n \n+    @Test\n     public void testKnownDecodings() throws UnsupportedEncodingException {\n         assertEquals(\"The quick brown fox jumped over the lazy dogs.\", new String(Base64\n                 .decodeBase64(\"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\".getBytes(\"UTF-8\"))));\n         assertEquals(\"xyzzy!\", new String(Base64.decodeBase64(\"eHl6enkh\".getBytes(\"UTF-8\"))));\n     }\n \n+    @Test\n     public void testKnownEncodings() throws UnsupportedEncodingException {\n         assertEquals(\"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\", new String(Base64\n                 .encodeBase64(\"The quick brown fox jumped over the lazy dogs.\".getBytes(\"UTF-8\"))));\n         assertEquals(\"eHl6enkh\", new String(Base64.encodeBase64(\"xyzzy!\".getBytes(\"UTF-8\"))));\n     }\n \n+    @Test\n     public void testNonBase64Test() throws Exception {\n \n         byte[] bArray = {'%'};\n         }\n     }\n \n+    @Test\n     public void testObjectDecodeWithInvalidParameter() throws Exception {\n         Base64 b64 = new Base64();\n \n \n     }\n \n+    @Test\n     public void testObjectDecodeWithValidParameter() throws Exception {\n \n         String original = \"Hello World!\";\n         assertTrue(\"dest string does not equal original\", dest.equals(original));\n     }\n \n+    @Test\n     public void testObjectEncodeWithInvalidParameter() throws Exception {\n         Base64 b64 = new Base64();\n         try {\n         }\n     }\n \n+    @Test\n     public void testObjectEncodeWithValidParameter() throws Exception {\n \n         String original = \"Hello World!\";\n         assertTrue(\"dest string does not equal original\", dest.equals(original));\n     }\n \n+    @Test\n     public void testObjectEncode() throws Exception {\n         Base64 b64 = new Base64();\n         assertEquals(\"SGVsbG8gV29ybGQ=\", new String(b64.encode(\"Hello World\".getBytes(\"UTF-8\"))));\n     }\n \n+    @Test\n     public void testPairs() {\n         assertEquals(\"AAA=\", new String(Base64.encodeBase64(new byte[]{0, 0})));\n         for (int i = -128; i <= 127; i++) {\n     /**\n      * Tests RFC 2045 section 2.1 CRLF definition.\n      */\n+    @Test\n     public void testRfc2045Section2Dot1CrLfDefinition() {\n         assertTrue(Arrays.equals(new byte[]{13, 10}, Base64.CHUNK_SEPARATOR));\n     }\n     /**\n      * Tests RFC 2045 section 6.8 chuck size definition.\n      */\n+    @Test\n     public void testRfc2045Section6Dot8ChunkSizeDefinition() {\n         assertEquals(76, Base64.MIME_CHUNK_SIZE);\n     }\n     /**\n      * Tests RFC 1421 section 4.3.2.4 chuck size definition.\n      */\n+    @Test\n     public void testRfc1421Section6Dot8ChunkSizeDefinition() {\n         assertEquals(64, Base64.PEM_CHUNK_SIZE);\n     }\n      * \n      * @see <a href=\"http://tools.ietf.org/html/rfc4648\">http://tools.ietf.org/html/rfc4648</a>\n      */\n+    @Test\n     public void testRfc4648Section10Decode() {\n         assertEquals(\"\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"\")));\n         assertEquals(\"f\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"Zg==\")));\n      * \n      * @see <a href=\"http://tools.ietf.org/html/rfc4648\">http://tools.ietf.org/html/rfc4648</a>\n      */\n+    @Test\n     public void testRfc4648Section10DecodeWithCrLf() {\n         String CRLF = StringUtils.newStringUsAscii(Base64.CHUNK_SEPARATOR);\n         assertEquals(\"\", StringUtils.newStringUsAscii(Base64.decodeBase64(\"\" + CRLF)));\n      * \n      * @see <a href=\"http://tools.ietf.org/html/rfc4648\">http://tools.ietf.org/html/rfc4648</a>\n      */\n+    @Test\n     public void testRfc4648Section10Encode() {\n         assertEquals(\"\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"\")));\n         assertEquals(\"Zg==\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"f\")));\n      * \n      * @see <a href=\"http://tools.ietf.org/html/rfc4648\">http://tools.ietf.org/html/rfc4648</a>\n      */\n+    @Test\n     public void testRfc4648Section10DecodeEncode() {\n         testDecodeEncode(\"\");\n         //testDecodeEncode(\"Zg==\");\n      * \n      * @see <a href=\"http://tools.ietf.org/html/rfc4648\">http://tools.ietf.org/html/rfc4648</a>\n      */\n+    @Test\n     public void testRfc4648Section10EncodeDecode() {\n         testEncodeDecode(\"\");\n         testEncodeDecode(\"f\");\n         assertEquals(plainText, decodedText);\n     }\n     \n+    @Test\n     public void testSingletons() {\n         assertEquals(\"AA==\", new String(Base64.encodeBase64(new byte[]{(byte) 0})));\n         assertEquals(\"AQ==\", new String(Base64.encodeBase64(new byte[]{(byte) 1})));\n         }\n     }\n \n+    @Test\n     public void testSingletonsChunked() {\n         assertEquals(\"AA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0})));\n         assertEquals(\"AQ==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 1})));\n         assertEquals(\"aA==\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 104})));\n     }\n \n+    @Test\n     public void testTriplets() {\n         assertEquals(\"AAAA\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 0})));\n         assertEquals(\"AAAB\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 1})));\n         assertEquals(\"AAA/\", new String(Base64.encodeBase64(new byte[]{(byte) 0, (byte) 0, (byte) 63})));\n     }\n \n+    @Test\n     public void testTripletsChunked() {\n         assertEquals(\"AAAA\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 0})));\n         assertEquals(\"AAAB\\r\\n\", new String(Base64.encodeBase64Chunked(new byte[]{(byte) 0, (byte) 0, (byte) 1})));\n     /**\n      * Tests url-safe Base64 against random data, sizes 0 to 150.\n      */\n+    @Test\n     public void testUrlSafe() {\n         // test random data of sizes 0 thru 150\n         for (int i = 0; i <= 150; i++) {\n      * @throws DecoderException\n      *             if Hex.decode() fails - a serious problem since Hex comes from our own commons-codec!\n      */\n+    @Test\n     public void testUUID() throws DecoderException {\n         // The 4 UUID's below contains mixtures of + and / to help us test the\n         // URL-SAFE encoding mode.\n         }\n     }\n \n+    @Test\n     public void testByteToStringVariations() throws DecoderException {\n         Base64 base64 = new Base64(0);\n         byte[] b1 = StringUtils.getBytesUtf8(\"Hello World\");\n         assertEquals(\"byteToString static-url-safe UUID\", \"K_fMJwH-Q5e0nr7tWsxwkA\", Base64.encodeBase64URLSafeString(b4));\n     }\n \n+    @Test\n     public void testStringToByteVariations() throws DecoderException {\n         Base64 base64 = new Base64();\n         String s1 = \"SGVsbG8gV29ybGQ=\\r\\n\";\n--- a/src/test/org/apache/commons/codec/binary/BaseNCodecTest.java\n+++ b/src/test/org/apache/commons/codec/binary/BaseNCodecTest.java\n \n package org.apache.commons.codec.binary;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n \n-public class BaseNCodecTest extends TestCase {\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class BaseNCodecTest {\n \n     BaseNCodec codec;\n     \n-    public void setUp(){\n+    @Before\n+    public void setUp() {\n         codec = new BaseNCodec(0, 0, 0, 0) {\n             protected boolean isInAlphabet(byte b) {\n                 return b=='O' || b == 'K'; // allow OK\n         };        \n     }\n \n+    @Test\n     public void testBaseNCodec() {\n         assertNotNull(codec);\n     }\n \n+//    @Test\n //    public void testHasData() {\n //        fail(\"Not yet implemented\");\n //    }\n //\n+//    @Test\n //    public void testAvail() {\n //        fail(\"Not yet implemented\");\n //    }\n //\n+//    @Test\n //    public void testEnsureBufferSize() {\n //        fail(\"Not yet implemented\");\n //    }\n //\n+//    @Test\n //    public void testReadResults() {\n //        fail(\"Not yet implemented\");\n //    }\n //\n+    @Test\n     public void testIsWhiteSpace() {\n         assertTrue(BaseNCodec.isWhiteSpace((byte) ' '));\n         assertTrue(BaseNCodec.isWhiteSpace((byte) '\\n'));\n         assertTrue(BaseNCodec.isWhiteSpace((byte) '\\t'));\n     }\n //\n+//    @Test\n //    public void testEncodeObject() {\n //        fail(\"Not yet implemented\");\n //    }\n //\n+//    @Test\n //    public void testEncodeToString() {\n //        fail(\"Not yet implemented\");\n //    }\n //\n+//    @Test\n //    public void testDecodeObject() {\n //        fail(\"Not yet implemented\");\n //    }\n //\n+//    @Test\n //    public void testDecodeString() {\n //        fail(\"Not yet implemented\");\n //    }\n //\n+//    @Test\n //    public void testDecodeByteArray() {\n //        fail(\"Not yet implemented\");\n //    }\n //\n+//    @Test\n //    public void testEncodeByteArray() {\n //        fail(\"Not yet implemented\");\n //    }\n //\n+//    @Test\n //    public void testEncodeAsString() {\n //        fail(\"Not yet implemented\");\n //    }\n //\n+//    @Test\n //    public void testEncodeByteArrayIntInt() {\n //        fail(\"Not yet implemented\");\n //    }\n //\n+//    @Test\n //    public void testDecodeByteArrayIntInt() {\n //        fail(\"Not yet implemented\");\n //    }\n //\n+    @Test\n     public void testIsInAlphabetByte() {\n         assertFalse(codec.isInAlphabet((byte) 0));\n         assertFalse(codec.isInAlphabet((byte) 'a'));\n         assertTrue(codec.isInAlphabet((byte) 'K'));\n     }\n \n+    @Test\n     public void testIsInAlphabetByteArrayBoolean() {\n         assertTrue(codec.isInAlphabet(new byte[]{}, false));\n         assertTrue(codec.isInAlphabet(new byte[]{'O'}, false));\n         assertTrue(codec.isInAlphabet(new byte[]{' '}, true));\n     }\n \n+    @Test\n     public void testIsInAlphabetString() {\n         assertTrue(codec.isInAlphabet(\"OK\"));\n         assertTrue(codec.isInAlphabet(\"O=K= \\t\\n\\r\"));\n     }\n \n+    @Test\n     public void testContainsAlphabetOrPad() {\n         assertFalse(codec.containsAlphabetOrPad(null));\n         assertFalse(codec.containsAlphabetOrPad(new byte[]{}));\n         assertTrue(codec.containsAlphabetOrPad(new byte[]{codec.PAD}));\n     }\n \n+//    @Test\n //    public void testGetEncodedLength() {\n //        fail(\"Not yet implemented\");\n //    }\n--- a/src/test/org/apache/commons/codec/binary/BinaryCodecTest.java\n+++ b/src/test/org/apache/commons/codec/binary/BinaryCodecTest.java\n \n package org.apache.commons.codec.binary;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n import java.io.UnsupportedEncodingException;\n-\n-import junit.framework.TestCase;\n \n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n \n /**\n  * TestCase for BinaryCodec class.\n  * @author Apache Software Foundation\n  * @version $Id$\n  */\n-public class BinaryCodecTest extends TestCase {\n+public class BinaryCodecTest {\n     /** mask with bit zero based index 0 raised */\n     private static final int BIT_0 = 0x01;\n \n     /** an instance of the binary codec */\n     BinaryCodec instance = null;\n \n-    /*\n-     * @see TestCase#setUp()\n-     */\n-    protected void setUp() throws Exception {\n-        super.setUp();\n+    @Before\n+    public void setUp() throws Exception {\n         this.instance = new BinaryCodec();\n     }\n \n-    /*\n-     * @see TestCase#tearDown()\n-     */\n-    protected void tearDown() throws Exception {\n-        super.tearDown();\n+    @After\n+    public void tearDown() throws Exception {\n         this.instance = null;\n-    }\n-\n-    /**\n-     * Constructor for BinaryTest.\n-     * \n-     * @param arg0\n-     */\n-    public BinaryCodecTest(String arg0) {\n-        super(arg0);\n     }\n \n     // ------------------------------------------------------------------------\n     /**\n      * Tests for Object decode(Object)\n      */\n+    @Test\n     public void testDecodeObjectException() {\n         try {\n             this.instance.decode(new Object());\n     /**\n      * Tests for Object decode(Object)\n      */\n+    @Test\n     public void testDecodeObject() throws Exception {\n         byte[] bits;\n         // With a single raw binary\n     /*\n      * Tests for byte[] decode(byte[])\n      */\n+    @Test\n     public void testDecodeByteArray() throws UnsupportedEncodingException {\n         // With a single raw binary\n         byte[] bits = new byte[1];\n     /*\n      * Tests for byte[] toByteArray(String)\n      */\n+    @Test\n     public void testToByteArrayFromString() {\n         // With a single raw binary\n         byte[] bits = new byte[1];\n     /*\n      * Tests for byte[] fromAscii(char[])\n      */\n+    @Test\n     public void testFromAsciiCharArray() {\n         assertEquals(0, BinaryCodec.fromAscii((char[]) null).length);\n         assertEquals(0, BinaryCodec.fromAscii(new char[0]).length);\n     /*\n      * Tests for byte[] fromAscii(byte[])\n      */\n+    @Test\n     public void testFromAsciiByteArray() throws UnsupportedEncodingException {\n         assertEquals(0, BinaryCodec.fromAscii((byte[]) null).length);\n         assertEquals(0, BinaryCodec.fromAscii(new byte[0]).length);\n     /*\n      * Tests for byte[] encode(byte[])\n      */\n+    @Test\n     public void testEncodeByteArray() {\n         // With a single raw binary\n         byte[] bits = new byte[1];\n     // Test toAsciiBytes\n     //\n     // ------------------------------------------------------------------------\n+    @Test\n     public void testToAsciiBytes() {\n         // With a single raw binary\n         byte[] bits = new byte[1];\n     // Test toAsciiChars\n     //\n     // ------------------------------------------------------------------------\n+    @Test\n     public void testToAsciiChars() {\n         // With a single raw binary\n         byte[] bits = new byte[1];\n     /**\n      * Tests the toAsciiString(byte[]) method\n      */\n+    @Test\n     public void testToAsciiString() {\n         // With a single raw binary\n         byte[] bits = new byte[1];\n     /*\n      * Tests for Object encode(Object)\n      */\n+    @Test\n     public void testEncodeObjectNull() throws Exception {\n         Object obj = new byte[0];\n         assertEquals(0, ((char[]) instance.encode(obj)).length);\n     /*\n      * Tests for Object encode(Object)\n      */\n+    @Test\n     public void testEncodeObjectException() {\n         try {\n             instance.encode(\"\");\n     /*\n      * Tests for Object encode(Object)\n      */\n+    @Test\n     public void testEncodeObject() throws Exception {\n         // With a single raw binary\n         byte[] bits = new byte[1];\n--- a/src/test/org/apache/commons/codec/binary/HexTest.java\n+++ b/src/test/org/apache/commons/codec/binary/HexTest.java\n \n package org.apache.commons.codec.binary;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import java.io.UnsupportedEncodingException;\n import java.nio.charset.Charset;\n import java.util.Arrays;\n import java.util.SortedMap;\n \n import junit.framework.Assert;\n-import junit.framework.TestCase;\n \n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n+import org.junit.Test;\n \n /**\n  * Tests {@link org.apache.commons.codec.binary.Hex}.\n  * @author Apache Software Foundation\n  * @version $Id$\n  */\n-public class HexTest extends TestCase {\n+public class HexTest {\n \n     private static final String BAD_ENCODING_NAME = \"UNKNOWN\";\n     \n     private final static boolean LOG = false;\n-\n-    public HexTest(String name) {\n-        super(name);\n-    }\n \n     private boolean charsetSanityCheck(String name) {\n         final String source = \"the quick brown dog jumped over the lazy fox\";\n         }\n     }\n \n+    @Test\n     public void testCustomCharset() throws UnsupportedEncodingException, DecoderException {\n         SortedMap map = Charset.availableCharsets();\n         Set keys = map.keySet();\n         assertEquals(name, sourceString, actualStringFromBytes);\n     }\n \n+    @Test\n     public void testCustomCharsetBadNameEncodeByteArray() throws UnsupportedEncodingException {\n         try {\n             new Hex(BAD_ENCODING_NAME).encode(\"Hello World\".getBytes(\"UTF-8\"));\n         }\n     }\n \n+    @Test\n     public void testCustomCharsetBadNameEncodeObject() {\n         try {\n             new Hex(BAD_ENCODING_NAME).encode(\"Hello World\");\n         }\n     }\n \n+    @Test\n     public void testCustomCharsetBadNameDecodeObject() throws UnsupportedEncodingException {\n         try {\n             new Hex(BAD_ENCODING_NAME).decode(\"Hello World\".getBytes(\"UTF-8\"));\n         }\n     }\n \n+    @Test\n     public void testCustomCharsetToString() {\n         assertTrue(new Hex().toString().indexOf(Hex.DEFAULT_CHARSET_NAME) >= 0);\n     }\n \n+    @Test\n     public void testDecodeArrayOddCharacters() {\n         try {\n             new Hex().decode(new byte[]{65});\n         }\n     }\n \n+    @Test\n     public void testDecodeBadCharacterPos0() {\n         try {\n             new Hex().decode(\"q0\");\n         }\n     }\n \n+    @Test\n     public void testDecodeBadCharacterPos1() {\n         try {\n             new Hex().decode(\"0q\");\n         }\n     }\n \n+    @Test\n     public void testDecodeClassCastException() {\n         try {\n             new Hex().decode(new int[]{65});\n         }\n     }\n \n+    @Test\n     public void testDecodeHexOddCharacters1() {\n         checkDecodeHexOddCharacters(new char[]{'A'});\n     }\n \n+    @Test\n     public void testDecodeHexOddCharacters3() {\n         checkDecodeHexOddCharacters(new char[]{'A', 'B', 'C'});\n     }\n \n+    @Test\n     public void testDecodeHexOddCharacters5() {\n         checkDecodeHexOddCharacters(new char[]{'A', 'B', 'C', 'D', 'E'});\n     }\n \n+    @Test\n     public void testDecodeStringOddCharacters() {\n         try {\n             new Hex().decode(\"6\");\n         }\n     }\n \n+    @Test\n     public void testDencodeEmpty() throws DecoderException {\n         assertTrue(Arrays.equals(new byte[0], Hex.decodeHex(new char[0])));\n         assertTrue(Arrays.equals(new byte[0], new Hex().decode(new byte[0])));\n         assertTrue(Arrays.equals(new byte[0], (byte[]) new Hex().decode(\"\")));\n     }\n \n+    @Test\n     public void testEncodeClassCastException() {\n         try {\n             new Hex().encode(new int[]{65});\n         }\n     }\n \n+    @Test\n     public void testEncodeDecodeRandom() throws DecoderException, EncoderException {\n         Random random = new Random();\n \n         }\n     }\n \n+    @Test\n     public void testEncodeEmpty() throws EncoderException {\n         assertTrue(Arrays.equals(new char[0], Hex.encodeHex(new byte[0])));\n         assertTrue(Arrays.equals(new byte[0], new Hex().encode(new byte[0])));\n         assertTrue(Arrays.equals(new char[0], (char[]) new Hex().encode(\"\")));\n     }\n \n+    @Test\n     public void testEncodeZeroes() {\n         char[] c = Hex.encodeHex(new byte[36]);\n         assertEquals(\"000000000000000000000000000000000000000000000000000000000000000000000000\", new String(c));\n     }\n \n+    @Test\n     public void testHelloWorldLowerCaseHex() {\n         byte[] b = StringUtils.getBytesUtf8(\"Hello World\");\n         final String expected = \"48656c6c6f20576f726c64\";\n         assertFalse(expected.equals(new String(actual)));\n     }\n \n+    @Test\n     public void testHelloWorldUpperCaseHex() {\n         byte[] b = StringUtils.getBytesUtf8(\"Hello World\");\n         final String expected = \"48656C6C6F20576F726C64\";\n         assertTrue(expected.equals(new String(actual)));\n     }\n \n+    @Test\n     public void testRequiredCharset() throws UnsupportedEncodingException, DecoderException {\n         testCustomCharset(\"UTF-8\", \"testRequiredCharset\");\n         testCustomCharset(\"UTF-16\", \"testRequiredCharset\");\n--- a/src/test/org/apache/commons/codec/binary/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/codec/binary/StringUtilsTest.java\n import java.util.Arrays;\n \n import junit.framework.Assert;\n-import junit.framework.TestCase;\n+\n+import org.junit.Test;\n \n /**\n  * Tests {@link StringUtils}\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @version $Id$\n  */\n-public class StringUtilsTest extends TestCase {\n+public class StringUtilsTest {\n \n     private static final byte[] BYTES_FIXTURE = {'a','b','c'};\n \n      * We could make the constructor private but there does not seem to be a point to jumping through extra code hoops\n      * to restrict instantiation right now.\n      */\n+    @Test\n     public void testConstructor() {\n         new StringUtils();\n     }\n \n+    @Test\n     public void testGetBytesIso8859_1() throws UnsupportedEncodingException {\n         String charsetName = \"ISO-8859-1\";\n         testGetBytesUnchecked(charsetName);\n         Assert.assertTrue(Arrays.equals(expected, actual));\n     }\n \n+    @Test\n     public void testGetBytesUsAscii() throws UnsupportedEncodingException {\n         String charsetName = \"US-ASCII\";\n         testGetBytesUnchecked(charsetName);\n         Assert.assertTrue(Arrays.equals(expected, actual));\n     }\n \n+    @Test\n     public void testGetBytesUtf16() throws UnsupportedEncodingException {\n         String charsetName = \"UTF-16\";\n         testGetBytesUnchecked(charsetName);\n         Assert.assertTrue(Arrays.equals(expected, actual));\n     }\n \n+    @Test\n     public void testGetBytesUtf16Be() throws UnsupportedEncodingException {\n         String charsetName = \"UTF-16BE\";\n         testGetBytesUnchecked(charsetName);\n         Assert.assertTrue(Arrays.equals(expected, actual));\n     }\n \n+    @Test\n     public void testGetBytesUtf16Le() throws UnsupportedEncodingException {\n         String charsetName = \"UTF-16LE\";\n         testGetBytesUnchecked(charsetName);\n         Assert.assertTrue(Arrays.equals(expected, actual));\n     }\n \n+    @Test\n     public void testGetBytesUtf8() throws UnsupportedEncodingException {\n         String charsetName = \"UTF-8\";\n         testGetBytesUnchecked(charsetName);\n         Assert.assertTrue(Arrays.equals(expected, actual));\n     }\n \n+    @Test\n     public void testGetBytesUncheckedBadName() {\n         try {\n             StringUtils.getBytesUnchecked(STRING_FIXTURE, \"UNKNOWN\");\n         Assert.assertEquals(expected, actual);\n     }\n \n+    @Test\n     public void testNewStringBadEnc() {\n         try {\n             StringUtils.newString(BYTES_FIXTURE, \"UNKNOWN\");\n         }\n     }\n \n+    @Test\n     public void testNewStringIso8859_1() throws UnsupportedEncodingException {\n         String charsetName = \"ISO-8859-1\";\n         testNewString(charsetName);\n         Assert.assertEquals(expected, actual);\n     }\n \n+    @Test\n     public void testNewStringUsAscii() throws UnsupportedEncodingException {\n         String charsetName = \"US-ASCII\";\n         testNewString(charsetName);\n         Assert.assertEquals(expected, actual);\n     }\n \n+    @Test\n     public void testNewStringUtf16() throws UnsupportedEncodingException {\n         String charsetName = \"UTF-16\";\n         testNewString(charsetName);\n         Assert.assertEquals(expected, actual);\n     }\n \n+    @Test\n     public void testNewStringUtf16Be() throws UnsupportedEncodingException {\n         String charsetName = \"UTF-16BE\";\n         testNewString(charsetName);\n         Assert.assertEquals(expected, actual);\n     }\n \n+    @Test\n     public void testNewStringUtf16Le() throws UnsupportedEncodingException {\n         String charsetName = \"UTF-16LE\";\n         testNewString(charsetName);\n         Assert.assertEquals(expected, actual);\n     }\n \n+    @Test\n     public void testNewStringUtf8() throws UnsupportedEncodingException {\n         String charsetName = \"UTF-8\";\n         testNewString(charsetName);\n--- a/src/test/org/apache/commons/codec/digest/DigestUtilsTest.java\n+++ b/src/test/org/apache/commons/codec/digest/DigestUtilsTest.java\n \n package org.apache.commons.codec.digest;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.util.Random;\n \n import org.apache.commons.codec.binary.StringUtils;\n-\n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n /**\n  * Tests DigestUtils methods.\n  * @author Apache Software Foundation\n  * @version $Id$\n  */\n-public class DigestUtilsTest extends TestCase {\n+public class DigestUtilsTest {\n \n     private byte[] testData = new byte[1024*1024];\n     \n         new Random().nextBytes(testData);\n     }\n \n+    @Test\n     public void testConstructable() {\n         new DigestUtils();\n     }\n     \n+    @Test\n     public void testInternalNoSuchAlgorithmException() {\n         try {\n             DigestUtils.getDigest(\"Bogus Bogus\");\n         }\n     }\n \n+    @Test\n     public void testMd5Hex() throws IOException {\n         // Examples from RFC 1321\n         assertEquals(\"d41d8cd98f00b204e9800998ecf8427e\", DigestUtils.md5Hex(\"\"));\n     /**\n      * An MD5 hash converted to hex should always be 32 characters.\n      */\n+    @Test\n     public void testMD5HexLength() {\n         String hashMe = \"this is some string that is longer than 32 characters\";\n         String hash = DigestUtils.md5Hex(getBytesUtf8(hashMe));\n     /**\n      * An MD5 hash should always be a 16 element byte[].\n      */\n+    @Test\n     public void testMD5Length() {\n         String hashMe = \"this is some string that is longer than 16 characters\";\n         byte[] hash = DigestUtils.md5(getBytesUtf8(hashMe));\n         assertEquals(16, hash.length);\n     }\n \n+    @Test\n     public void testSha256() throws IOException {\n     // Examples from FIPS 180-2\n     assertEquals(\"ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad\",\n             DigestUtils.sha256Hex(new ByteArrayInputStream(testData)));\n     }    \n \n+    @Test\n     public void testSha384() throws IOException {\n     // Examples from FIPS 180-2\n     assertEquals(\"cb00753f45a35e8bb5a03d699ac65007272c32ab0eded1631a8b605a43ff5bed\" + \n             DigestUtils.sha384Hex(new ByteArrayInputStream(testData)));\n     }\n \n+    @Test\n     public void testSha512() throws IOException {\n     // Examples from FIPS 180-2\n     assertEquals(\"ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a\" +\n             DigestUtils.sha512Hex(new ByteArrayInputStream(testData)));\n }    \n \n+    @Test\n     public void testShaHex() throws IOException {\n         // Examples from FIPS 180-1\n         assertEquals(\"a9993e364706816aba3e25717850c26c9cd0d89d\", DigestUtils.shaHex(\"abc\"));\n--- a/src/test/org/apache/commons/codec/language/Caverphone1Test.java\n+++ b/src/test/org/apache/commons/codec/language/Caverphone1Test.java\n import org.apache.commons.codec.EncoderException;\n import org.apache.commons.codec.StringEncoder;\n import org.apache.commons.codec.StringEncoderAbstractTest;\n+import org.junit.Test;\n \n /**\n  * Tests Caverphone1.\n  * @since 1.5\n  */\n public class Caverphone1Test extends StringEncoderAbstractTest {\n-\n-    public Caverphone1Test(String name) {\n-        super(name);\n-    }\n \n     protected StringEncoder createStringEncoder() {\n         return new Caverphone1();\n      * \n      * @throws EncoderException\n      */\n+    @Test\n     public void testCaverphoneRevisitedCommonCodeAT1111() throws EncoderException {\n         this.checkEncodingVariations(\"AT1111\", new String[]{\n             \"add\",\n             \"old\"});\n     }\n \n+    @Test\n     public void testEndMb() throws EncoderException {\n         String[][] data = {{\"mb\", \"M11111\"}, {\"mbmb\", \"MPM111\"}};\n         this.checkEncodings(data);\n      * \n      * @throws EncoderException\n      */\n+    @Test\n     public void testIsCaverphoneEquals() throws EncoderException {\n         Caverphone1 caverphone = new Caverphone1();\n         Assert.assertFalse(\"Caverphone encodings should not be equal\", caverphone.isEncodeEqual(\"Peter\", \"Stevenson\"));\n      * \n      * @throws EncoderException\n      */\n+    @Test\n     public void testSpecificationV1Examples() throws EncoderException {\n         String[][] data = {{\"David\", \"TFT111\"}, {\"Whittle\", \"WTL111\"}};\n         this.checkEncodings(data);\n      * \n      * @throws EncoderException\n      */\n+    @Test\n     public void testWikipediaExamples() throws EncoderException {\n         String[][] data = {{\"Lee\", \"L11111\"}, {\"Thompson\", \"TMPSN1\"}};\n         this.checkEncodings(data);\n--- a/src/test/org/apache/commons/codec/language/Caverphone2Test.java\n+++ b/src/test/org/apache/commons/codec/language/Caverphone2Test.java\n  */\n public class Caverphone2Test extends CaverphoneTest {\n \n-    public Caverphone2Test(String name) {\n-        super(name);\n-    }\n-\n     protected StringEncoder createStringEncoder() {\n         return new Caverphone2();\n     }\n--- a/src/test/org/apache/commons/codec/language/CaverphoneTest.java\n+++ b/src/test/org/apache/commons/codec/language/CaverphoneTest.java\n import org.apache.commons.codec.EncoderException;\n import org.apache.commons.codec.StringEncoder;\n import org.apache.commons.codec.StringEncoderAbstractTest;\n+import org.junit.Test;\n \n /**\n  * @author Apache Software Foundation\n  */\n public class CaverphoneTest extends StringEncoderAbstractTest {\n \n-    public CaverphoneTest(String name) {\n-        super(name);\n-    }\n-\n     protected StringEncoder createStringEncoder() {\n         return new Caverphone();\n     }\n      * \n      * @throws EncoderException\n      */\n+    @Test\n     public void testCaverphoneRevisitedCommonCodeAT11111111() throws EncoderException {\n         this.checkEncodingVariations(\"AT11111111\", new String[]{\n             \"add\",\n      * \n      * @throws EncoderException\n      */\n+    @Test\n     public void testCaverphoneRevisitedExamples() throws EncoderException {\n         String[][] data = {{\"Stevenson\", \"STFNSN1111\"}, {\"Peter\", \"PTA1111111\"}};\n         this.checkEncodings(data);\n      * \n      * @throws EncoderException\n      */\n+    @Test\n     public void testCaverphoneRevisitedRandomNameKLN1111111() throws EncoderException {\n         this.checkEncodingVariations(\"KLN1111111\", new String[]{\n             \"Cailean\",\n      * \n      * @throws EncoderException\n      */\n+    @Test\n     public void testCaverphoneRevisitedRandomNameTN11111111() throws EncoderException {\n         this.checkEncodingVariations(\"TN11111111\", new String[]{\n             \"Dan\",\n      * \n      * @throws EncoderException\n      */\n+    @Test\n     public void testCaverphoneRevisitedRandomNameTTA1111111() throws EncoderException {\n         this.checkEncodingVariations(\"TTA1111111\", new String[]{\n             \"Darda\",\n      * \n      * @throws EncoderException\n      */\n+    @Test\n     public void testCaverphoneRevisitedRandomWords() throws EncoderException {\n         this.checkEncodingVariations(\"RTA1111111\", new String[]{\"rather\", \"ready\", \"writer\"});\n         this.checkEncoding(\"SSA1111111\", \"social\");\n         this.checkEncodingVariations(\"APA1111111\", new String[]{\"able\", \"appear\"});\n     }\n \n+    @Test\n     public void testEndMb() throws EncoderException {\n         String[][] data = {{\"mb\", \"M111111111\"}, {\"mbmb\", \"MPM1111111\"}};\n         this.checkEncodings(data);\n     }\n \n     // Caverphone Revisited\n+    @Test\n     public void testIsCaverphoneEquals() {\n         Caverphone caverphone = new Caverphone();\n         Assert.assertFalse(\"Caverphone encodings should not be equal\", caverphone.isCaverphoneEqual(\"Peter\", \"Stevenson\"));\n         Assert.assertTrue(\"Caverphone encodings should be equal\", caverphone.isCaverphoneEqual(\"Peter\", \"Peady\"));\n     }\n \n+    @Test\n     public void testSpecificationExamples() throws EncoderException {\n         String[][] data = {\n             {\"Peter\", \"PTA1111111\"},\n--- a/src/test/org/apache/commons/codec/language/ColognePhoneticTest.java\n+++ b/src/test/org/apache/commons/codec/language/ColognePhoneticTest.java\n \n package org.apache.commons.codec.language;\n \n-\n import org.apache.commons.codec.EncoderException;\n import org.apache.commons.codec.StringEncoder;\n import org.apache.commons.codec.StringEncoderAbstractTest;\n+import org.junit.Test;\n \n /**\n  * Tests the deprecated class {@link ColognePhonetic}.\n  */\n public class ColognePhoneticTest extends StringEncoderAbstractTest {\n \n-    public ColognePhoneticTest(String name) {\n-        super(name);\n-    }\n-\n     protected StringEncoder createStringEncoder() {\n         return new ColognePhonetic();\n     }\n \n+    @Test\n     public void testAabjoe() throws EncoderException {\n         this.checkEncoding(\"01\", \"Aabjoe\");\n     }\n \n+    @Test\n     public void testAaclan() throws EncoderException {\n         this.checkEncoding(\"0856\", \"Aaclan\");\n     }\n \n+    @Test\n     public void testEdgeCases() throws EncoderException {\n         String[][] data = {\n             {\"a\", \"0\"},\n         this.checkEncodings(data);\n     }\n \n+    @Test\n     public void testExamples() throws EncoderException {\n         String[][] data = {\n             {\"m\\u00DCller\", \"657\"},\n         this.checkEncodings(data);\n     }\n \n+    @Test\n     public void testHyphen() throws EncoderException {\n         String[][] data = {{\"bergisch-gladbach\", \"174845214\"}, {\"M\u00fcller-L\u00fcdenscheidt\", \"65752682\"},\n             // From the Javadoc example:\n         this.checkEncodings(data);\n     }\n \n+    @Test\n     public void testIsEncodeEquals() {\n         String[][] data = {\n             {\"Meyer\", \"M\u00fcller\"},\n         }\n     }\n \n+    @Test\n     public void testVariationsMella() throws EncoderException {\n         String data[] = {\"mella\", \"milah\", \"moulla\", \"mellah\", \"muehle\", \"mule\"};\n         this.checkEncodingVariations(\"65\", data);\n     }\n \n+    @Test\n     public void testVariationsMeyer() throws EncoderException {\n         String data[] = {\"Meier\", \"Maier\", \"Mair\", \"Meyer\", \"Meyr\", \"Mejer\", \"Major\"};\n         this.checkEncodingVariations(\"67\", data);\n--- a/src/test/org/apache/commons/codec/language/DoubleMetaphone2Test.java\n+++ b/src/test/org/apache/commons/codec/language/DoubleMetaphone2Test.java\n \n package org.apache.commons.codec.language;\n \n+import static org.junit.Assert.assertEquals;\n+\n import org.apache.commons.codec.StringEncoder;\n import org.apache.commons.codec.StringEncoderAbstractTest;\n+import org.junit.Test;\n \n /**\n  * Tests {@link DoubleMetaphone}.\n         {\"weikersheim\", \"AKRS\", \"FKRS\"},\n         {\"zhao\", \"J\", \"J\"}};\n \n-    /**\n-     * Construct a new test case.\n-     * \n-     * @param name\n-     *            The name of the test\n-     */\n-    public DoubleMetaphone2Test(String name) {\n-        super(name);\n-    }\n-\n     private void checkDoubleMetaphone(int typeIndex, boolean alternate) {\n         for (int i = 0; i < TEST_DATA.length; i++) {\n             String value = TEST_DATA[i][0];\n     /**\n      * Test alternative encoding.\n      */\n+    @Test\n     public void testDoubleMetaphoneAlternate() {\n         this.checkDoubleMetaphone(ALTERNATE_INDEX, true);\n     }\n     /**\n      * Test primary encoding.\n      */\n+    @Test\n     public void testDoubleMetaphonePrimary() {\n         this.checkDoubleMetaphone(PRIMARY_INDEX, false);\n     }\n--- a/src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java\n+++ b/src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java\n \n package org.apache.commons.codec.language;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import org.apache.commons.codec.EncoderException;\n import org.apache.commons.codec.StringEncoder;\n import org.apache.commons.codec.StringEncoderAbstractTest;\n+import org.junit.Test;\n \n /**\n  * Tests {@link DoubleMetaphone}.\n             \"wundeews\", \"windows\" }, {\n             \"yeild\", \"yield\" }, };\n \n-    public DoubleMetaphoneTest(String name) {\n-        super(name);\n-    }\n-\n     /**\n      * Tests encoding APIs in one place.\n      */\n         return new DoubleMetaphone();\n     }\n \n+    @Test\n     public void testDoubleMetaphone() {\n         assertDoubleMetaphone(\"TSTN\", \"testing\");\n         assertDoubleMetaphone(\"0\", \"The\");\n         assertDoubleMetaphoneAlt(\"XRN\", \"Czerny\");\n     }\n \n+    @Test\n     public void testEmpty() {\n         assertEquals(null, this.getDoubleMetaphone().doubleMetaphone(null));\n         assertEquals(null, this.getDoubleMetaphone().doubleMetaphone(\"\"));\n     /**\n      * Test setting maximum length\n      */\n+    @Test\n     public void testSetMaxCodeLength() {\n         String value = \"jumped\";\n         \n         assertEquals(\"Max=3 Alternate\", \"AMP\", doubleMetaphone.doubleMetaphone(value, true));\n     }\n \n+    @Test\n     public void testIsDoubleMetaphoneEqualBasic() {\n         String[][] testFixture = new String[][] { { \"Case\", \"case\" }, {\n                 \"CASE\", \"Case\" }, {\n     /**\n      * Example in the original article but failures in this Java impl:\n      */\n+    @Test\n     public void testIsDoubleMetaphoneEqualExtended1() {\n         //        String[][] testFixture = new String[][] { { \"Smith\", \"Schmidt\" }\n         //        };\n         //        doubleMetaphoneEqualTest(testFixture, true);\n     }\n \n+    @Test\n     public void testIsDoubleMetaphoneEqualExtended2() {\n         String[][] testFixture = new String[][] { { \"Jablonski\", \"Yablonsky\" }\n         };\n      * Used to generate the MATCHES array and test possible matches from the\n      * FIXTURE array.\n      */\n+    @Test\n     public void testIsDoubleMetaphoneEqualExtended3() {\n         this.validateFixture(FIXTURE);\n         StringBuffer failures = new StringBuffer();\n         }\n     }\n \n+    @Test\n     public void testIsDoubleMetaphoneEqualWithMATCHES() {\n         this.validateFixture(MATCHES);\n         for (int i = 0; i < MATCHES.length; i++) {\n         }\n     }\n \n+    @Test\n     public void testIsDoubleMetaphoneNotEqual() {\n         doubleMetaphoneNotEqualTest(false);\n         doubleMetaphoneNotEqualTest(true);\n     }\n \n+    @Test\n     public void testCCedilla() {\n         this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"\ufffd\", \"S\");\n     }\n     \n+    @Test\n     public void testNTilde() {\n         this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"\ufffd\", \"N\");\n     }\n--- a/src/test/org/apache/commons/codec/language/MetaphoneTest.java\n+++ b/src/test/org/apache/commons/codec/language/MetaphoneTest.java\n \n package org.apache.commons.codec.language;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import org.apache.commons.codec.StringEncoder;\n import org.apache.commons.codec.StringEncoderAbstractTest;\n+import org.junit.Test;\n \n /**\n  * @author Apache Software Foundation\n  * @version $Id$\n  */\n public class MetaphoneTest extends StringEncoderAbstractTest {\n-\n-    public MetaphoneTest(String name) {\n-        super(name);\n-    }\n \n     public void assertIsMetaphoneEqual(String source, String[] matches) {\n         // match source to all matches\n         return new Metaphone();\n     }\n \n+    @Test\n     public void testIsMetaphoneEqual1() {\n         this.assertMetaphoneEqual(new String[][] { { \"Case\", \"case\" }, {\n                 \"CASE\", \"Case\" }, {\n     /**\n      * Matches computed from http://www.lanw.com/java/phonetic/default.htm\n      */\n+    @Test\n     public void testIsMetaphoneEqual2() {\n         this.assertMetaphoneEqual(new String[][] { { \"Lawrence\", \"Lorenza\" }, {\n                 \"Gary\", \"Cahra\" }, });\n      * \n      * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n      */\n+    @Test\n     public void testIsMetaphoneEqualAero() {\n         this.assertIsMetaphoneEqual(\"Aero\", new String[] { \"Eure\" });\n     }\n      * \n      * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n      */\n+    @Test\n     public void testIsMetaphoneEqualWhite() {\n         this.assertIsMetaphoneEqual(\n             \"White\",\n      * \n      * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n      */\n+    @Test\n     public void testIsMetaphoneEqualAlbert() {\n         this.assertIsMetaphoneEqual(\"Albert\", new String[] { \"Ailbert\", \"Alberik\", \"Albert\", \"Alberto\", \"Albrecht\" });\n     }\n     /**\n      * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n      */\n+    @Test\n     public void testIsMetaphoneEqualGary() {\n         this.assertIsMetaphoneEqual(\n             \"Gary\",\n     /**\n      * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n      */\n+    @Test\n     public void testIsMetaphoneEqualJohn() {\n         this.assertIsMetaphoneEqual(\n             \"John\",\n      * \n      * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n      */\n+    @Test\n     public void testIsMetaphoneEqualKnight() {\n         this.assertIsMetaphoneEqual(\n             \"Knight\",\n     /**\n      * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n      */\n+    @Test\n     public void testIsMetaphoneEqualMary() {\n         this.assertIsMetaphoneEqual(\n             \"Mary\",\n     /**\n      * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n      */\n+    @Test\n     public void testIsMetaphoneEqualParis() {\n         this.assertIsMetaphoneEqual(\"Paris\", new String[] { \"Pearcy\", \"Perris\", \"Piercy\", \"Pierz\", \"Pryse\" });\n     }\n     /**\n      * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n      */\n+    @Test\n     public void testIsMetaphoneEqualPeter() {\n         this.assertIsMetaphoneEqual(\n             \"Peter\",\n     /**\n      * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n      */\n+    @Test\n     public void testIsMetaphoneEqualRay() {\n         this.assertIsMetaphoneEqual(\"Ray\", new String[] { \"Ray\", \"Rey\", \"Roi\", \"Roy\", \"Ruy\" });\n     }\n     /**\n      * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n      */\n+    @Test\n     public void testIsMetaphoneEqualSusan() {\n         this.assertIsMetaphoneEqual(\n             \"Susan\",\n      * \n      * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n      */\n+    @Test\n     public void testIsMetaphoneEqualWright() {\n         this.assertIsMetaphoneEqual(\"Wright\", new String[] { \"Rota\", \"Rudd\", \"Ryde\" });\n     }\n     /**\n      * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n      */\n+    @Test\n     public void testIsMetaphoneEqualXalan() {\n         this.assertIsMetaphoneEqual(\n             \"Xalan\",\n             new String[] { \"Celene\", \"Celina\", \"Celine\", \"Selena\", \"Selene\", \"Selina\", \"Seline\", \"Suellen\", \"Xylina\" });\n     }\n \n+    @Test\n     public void testMetaphone() {\n         assertEquals(\"HL\", this.getMetaphone().metaphone(\"howl\"));\n         assertEquals(\"TSTN\", this.getMetaphone().metaphone(\"testing\"));\n         assertEquals(\"TKS\", this.getMetaphone().metaphone(\"dogs\"));\n     }\n     \n+    @Test\n     public void testWordEndingInMB() {\n         assertEquals( \"KM\", this.getMetaphone().metaphone(\"COMB\") );\n         assertEquals( \"TM\", this.getMetaphone().metaphone(\"TOMB\") );\n         assertEquals( \"WM\", this.getMetaphone().metaphone(\"WOMB\") );\n     }\n \n+    @Test\n     public void testDiscardOfSCEOrSCIOrSCY() {\n         assertEquals( \"SNS\", this.getMetaphone().metaphone(\"SCIENCE\") );\n         assertEquals( \"SN\", this.getMetaphone().metaphone(\"SCENE\") );\n     /**\n      * Tests (CODEC-57) Metaphone.metaphone(String) returns an empty string when passed the word \"why\"\n      */\n+    @Test\n     public void testWhy() {\n         // PHP returns \"H\". The original metaphone returns an empty string. \n         assertEquals(\"\", this.getMetaphone().metaphone(\"WHY\"));\n     }\n \n+    @Test\n     public void testWordsWithCIA() {\n         assertEquals( \"XP\", this.getMetaphone().metaphone(\"CIAPO\") );\n     }\n \n+    @Test\n     public void testTranslateOfSCHAndCH() {\n         assertEquals( \"SKTL\", this.getMetaphone().metaphone(\"SCHEDULE\") );\n         assertEquals( \"SKMT\", this.getMetaphone().metaphone(\"SCHEMATIC\") );\n         assertEquals( \"TX\", this.getMetaphone().metaphone(\"TEACH\") );\n     }\n \n+    @Test\n     public void testTranslateToJOfDGEOrDGIOrDGY() {\n         assertEquals( \"TJ\", this.getMetaphone().metaphone(\"DODGY\") );\n         assertEquals( \"TJ\", this.getMetaphone().metaphone(\"DODGE\") );\n         assertEquals( \"AJMT\", this.getMetaphone().metaphone(\"ADGIEMTI\") );\n     }\n \n+    @Test\n     public void testDiscardOfSilentHAfterG() {\n         assertEquals( \"KNT\", this.getMetaphone().metaphone(\"GHENT\") );\n         assertEquals( \"B\", this.getMetaphone().metaphone(\"BAUGH\") );\n     }\n \n+    @Test\n     public void testDiscardOfSilentGN() {\n         // NOTE: This does not test for silent GN, but for starting with GN\n         assertEquals( \"N\", this.getMetaphone().metaphone(\"GNU\") );\n         assertEquals( \"SNT\", this.getMetaphone().metaphone(\"SIGNED\") );\n     }\n \n+    @Test\n     public void testPHTOF() {\n         assertEquals( \"FX\", this.getMetaphone().metaphone(\"PHISH\") );\n     }\n \n+    @Test\n     public void testSHAndSIOAndSIAToX() {\n         assertEquals( \"XT\", this.getMetaphone().metaphone(\"SHOT\") );\n         assertEquals( \"OTXN\", this.getMetaphone().metaphone(\"ODSIAN\") );\n         assertEquals( \"PLXN\", this.getMetaphone().metaphone(\"PULSION\") );\n     }\n \n+    @Test\n     public void testTIOAndTIAToX() {\n         assertEquals( \"OX\", this.getMetaphone().metaphone(\"OTIA\") );\n         assertEquals( \"PRXN\", this.getMetaphone().metaphone(\"PORTION\") );\n     }\n \n+    @Test\n     public void testTCH() {\n         assertEquals( \"RX\", this.getMetaphone().metaphone(\"RETCH\") );\n         assertEquals( \"WX\", this.getMetaphone().metaphone(\"WATCH\") );\n     }\n \n+    @Test\n     public void testExceedLength() {\n         // should be AKSKS, but istruncated by Max Code Length\n         assertEquals( \"AKSK\", this.getMetaphone().metaphone(\"AXEAXE\") );\n     }\n \n+    @Test\n     public void testSetMaxLengthWithTruncation() {\n         // should be AKSKS, but istruncated by Max Code Length\n         this.getMetaphone().setMaxCodeLen( 6 );\n--- a/src/test/org/apache/commons/codec/language/RefinedSoundexTest.java\n+++ b/src/test/org/apache/commons/codec/language/RefinedSoundexTest.java\n \n package org.apache.commons.codec.language;\n \n+import static org.junit.Assert.assertEquals;\n+\n import org.apache.commons.codec.EncoderException;\n import org.apache.commons.codec.StringEncoder;\n import org.apache.commons.codec.StringEncoderAbstractTest;\n+import org.junit.Test;\n \n /**\n  * Tests RefinedSoundex.\n  * @version $Id$\n  */\n public class RefinedSoundexTest extends StringEncoderAbstractTest {\n-\n-    public RefinedSoundexTest(String name) {\n-        super(name);\n-    }\n \n     protected StringEncoder createStringEncoder() {\n         return new RefinedSoundex();\n         return (RefinedSoundex)this.getStringEncoder();\n     }\n \n+    @Test\n     public void testDifference() throws EncoderException {\n         // Edge cases\n         assertEquals(0, this.getRefinedSoundex().difference(null, null));\n         assertEquals(5, this.getRefinedSoundex().difference(\"Anothers\", \"Brothers\"));\n     }\n \n+    @Test\n     public void testEncode() {\n         assertEquals(\"T6036084\", this.getRefinedSoundex().encode(\"testing\"));\n         assertEquals(\"T6036084\", this.getRefinedSoundex().encode(\"TESTING\"));\n         assertEquals(\"D6043\", RefinedSoundex.US_ENGLISH.encode(\"dogs\"));\n     }\n \n+    @Test\n     public void testGetMappingCodeNonLetter() {\n         char code = this.getRefinedSoundex().getMappingCode('#');\n         assertEquals(\"Code does not equals zero\", 0, code);\n     }\n     \n+    @Test\n     public void testNewInstance() {\n         assertEquals(\"D6043\", new RefinedSoundex().soundex(\"dogs\"));\n     }\n     \n+    @Test\n     public void testNewInstance2() {\n         assertEquals(\"D6043\", new RefinedSoundex(RefinedSoundex.US_ENGLISH_MAPPING_STRING.toCharArray()).soundex(\"dogs\"));\n     }\n     \n+    @Test\n     public void testNewInstance3() {\n         assertEquals(\"D6043\", new RefinedSoundex(RefinedSoundex.US_ENGLISH_MAPPING_STRING).soundex(\"dogs\"));\n     }\n--- a/src/test/org/apache/commons/codec/language/SoundexTest.java\n+++ b/src/test/org/apache/commons/codec/language/SoundexTest.java\n import org.apache.commons.codec.EncoderException;\n import org.apache.commons.codec.StringEncoder;\n import org.apache.commons.codec.StringEncoderAbstractTest;\n+import org.junit.Test;\n \n /**\n  * Tests {@link Soundex}.\n  */\n public class SoundexTest extends StringEncoderAbstractTest {\n \n-    public SoundexTest(String name) {\n-        super(name);\n-    }\n-\n     protected StringEncoder createStringEncoder() {\n         return new Soundex();\n     }\n         return (Soundex)this.getStringEncoder();\n     }\n \n+    @Test\n     public void testB650() throws EncoderException {\n         this.checkEncodingVariations(\"B650\", (new String[]{\n             \"BARHAM\",\n             \"BYRUM\"}));\n     }\n \n+    @Test\n     public void testBadCharacters() {\n         Assert.assertEquals(\"H452\", this.getSoundexEncoder().encode(\"HOL>MES\"));\n \n     }\n \n+    @Test\n     public void testDifference() throws EncoderException {\n         // Edge cases\n         Assert.assertEquals(0, this.getSoundexEncoder().difference(null, null));\n         Assert.assertEquals(2, this.getSoundexEncoder().difference(\"Anothers\", \"Brothers\"));\n     }\n \n+    @Test\n     public void testEncodeBasic() {\n         Assert.assertEquals(\"T235\", this.getSoundexEncoder().encode(\"testing\"));\n         Assert.assertEquals(\"T000\", this.getSoundexEncoder().encode(\"The\"));\n     /**\n      * Examples from http://www.bradandkathy.com/genealogy/overviewofsoundex.html\n      */\n+    @Test\n     public void testEncodeBatch2() {\n         Assert.assertEquals(\"A462\", this.getSoundexEncoder().encode(\"Allricht\"));\n         Assert.assertEquals(\"E166\", this.getSoundexEncoder().encode(\"Eberhard\"));\n     /**\n      * Examples from http://www.archives.gov/research_room/genealogy/census/soundex.html\n      */\n+    @Test\n     public void testEncodeBatch3() {\n         Assert.assertEquals(\"W252\", this.getSoundexEncoder().encode(\"Washington\"));\n         Assert.assertEquals(\"L000\", this.getSoundexEncoder().encode(\"Lee\"));\n     /**\n      * Examples from: http://www.myatt.demon.co.uk/sxalg.htm\n      */\n+    @Test\n     public void testEncodeBatch4() {\n         Assert.assertEquals(\"H452\", this.getSoundexEncoder().encode(\"HOLMES\"));\n         Assert.assertEquals(\"A355\", this.getSoundexEncoder().encode(\"ADOMOMI\"));\n \n     }\n \n+    @Test\n     public void testEncodeIgnoreApostrophes() throws EncoderException {\n         this.checkEncodingVariations(\"O165\", (new String[]{\n             \"OBrien\",\n      * \n      * @throws EncoderException\n      */\n+    @Test\n     public void testEncodeIgnoreHyphens() throws EncoderException {\n         this.checkEncodingVariations(\"K525\", (new String[]{\n             \"KINGSMITH\",\n             \"KINGSMITH-\"}));\n     }\n \n+    @Test\n     public void testEncodeIgnoreTrimmable() {\n         Assert.assertEquals(\"W252\", this.getSoundexEncoder().encode(\" \\t\\n\\r Washington \\t\\n\\r \"));\n     }\n     /**\n      * Consonants from the same code group separated by W or H are treated as one.\n      */\n+    @Test\n     public void testHWRuleEx1() {\n         // From\n         // http://www.archives.gov/research_room/genealogy/census/soundex.html:\n      * \n      * Test data from http://www.myatt.demon.co.uk/sxalg.htm\n      */\n+    @Test\n     public void testHWRuleEx2() {\n         Assert.assertEquals(\"B312\", this.getSoundexEncoder().encode(\"BOOTHDAVIS\"));\n         Assert.assertEquals(\"B312\", this.getSoundexEncoder().encode(\"BOOTH-DAVIS\"));\n      * \n      * @throws EncoderException\n      */\n+    @Test\n     public void testHWRuleEx3() throws EncoderException {\n         Assert.assertEquals(\"S460\", this.getSoundexEncoder().encode(\"Sgler\"));\n         Assert.assertEquals(\"S460\", this.getSoundexEncoder().encode(\"Swhgler\"));\n             \"SILLER\"}));\n     }\n \n+    @Test\n     public void testMaxLength() throws Exception {\n         Soundex soundex = new Soundex();\n         soundex.setMaxLength(soundex.getMaxLength());\n         Assert.assertEquals(\"S460\", this.getSoundexEncoder().encode(\"Sgler\"));\n     }\n \n+    @Test\n     public void testMaxLengthLessThan3Fix() throws Exception {\n         Soundex soundex = new Soundex();\n         soundex.setMaxLength(2);\n      * Examples for MS SQLServer from\n      * http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_setu-sus_3o6w.asp\n      */\n+    @Test\n     public void testMsSqlServer1() {\n         Assert.assertEquals(\"S530\", this.getSoundexEncoder().encode(\"Smith\"));\n         Assert.assertEquals(\"S530\", this.getSoundexEncoder().encode(\"Smythe\"));\n      * \n      * @throws EncoderException\n      */\n+    @Test\n     public void testMsSqlServer2() throws EncoderException {\n         this.checkEncodingVariations(\"E625\", (new String[]{\"Erickson\", \"Erickson\", \"Erikson\", \"Ericson\", \"Ericksen\", \"Ericsen\"}));\n     }\n     /**\n      * Examples for MS SQLServer from http://databases.about.com/library/weekly/aa042901a.htm\n      */\n+    @Test\n     public void testMsSqlServer3() {\n         Assert.assertEquals(\"A500\", this.getSoundexEncoder().encode(\"Ann\"));\n         Assert.assertEquals(\"A536\", this.getSoundexEncoder().encode(\"Andrew\"));\n     /**\n      * https://issues.apache.org/jira/browse/CODEC-54 https://issues.apache.org/jira/browse/CODEC-56\n      */\n+    @Test\n     public void testNewInstance() {\n         Assert.assertEquals(\"W452\", new Soundex().soundex(\"Williams\"));\n     }\n \n+    @Test\n     public void testNewInstance2() {\n         Assert.assertEquals(\"W452\", new Soundex(Soundex.US_ENGLISH_MAPPING_STRING.toCharArray()).soundex(\"Williams\"));\n     }\n \n+    @Test\n     public void testNewInstance3() {\n         Assert.assertEquals(\"W452\", new Soundex(Soundex.US_ENGLISH_MAPPING_STRING).soundex(\"Williams\"));\n     }\n \n+    @Test\n     public void testSoundexUtilsConstructable() {\n         new SoundexUtils();\n     }\n \n+    @Test\n     public void testSoundexUtilsNullBehaviour() {\n         Assert.assertEquals(null, SoundexUtils.clean(null));\n         Assert.assertEquals(\"\", SoundexUtils.clean(\"\"));\n     /**\n      * https://issues.apache.org/jira/browse/CODEC-54 https://issues.apache.org/jira/browse/CODEC-56\n      */\n+    @Test\n     public void testUsEnglishStatic() {\n         Assert.assertEquals(\"W452\", Soundex.US_ENGLISH.soundex(\"Williams\"));\n     }\n      * \n      * http://issues.apache.org/bugzilla/show_bug.cgi?id=29080\n      */\n+    @Test\n     public void testUsMappingEWithAcute() {\n         Assert.assertEquals(\"E000\", this.getSoundexEncoder().encode(\"e\"));\n         if (Character.isLetter('\ufffd')) {\n      * \n      * http://issues.apache.org/bugzilla/show_bug.cgi?id=29080\n      */\n+    @Test\n     public void testUsMappingOWithDiaeresis() {\n         Assert.assertEquals(\"O000\", this.getSoundexEncoder().encode(\"o\"));\n         if (Character.isLetter('\ufffd')) {\n--- a/src/test/org/apache/commons/codec/net/BCodecTest.java\n+++ b/src/test/org/apache/commons/codec/net/BCodecTest.java\n \n package org.apache.commons.codec.net;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.fail;\n \n+import org.apache.commons.codec.CharEncoding;\n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n-import org.apache.commons.codec.CharEncoding;\n+import org.junit.Test;\n \n /**\n  * Quoted-printable codec test cases\n  * @author <a href=\"mailto:oleg@ural.ru\">Oleg Kalnichevski</a>\n  * @version $Id$\n  */\n-public class BCodecTest extends TestCase {\n+public class BCodecTest {\n \n     static final int SWISS_GERMAN_STUFF_UNICODE[] =\n         { 0x47, 0x72, 0xFC, 0x65, 0x7A, 0x69, 0x5F, 0x7A, 0xE4, 0x6D, 0xE4 };\n \n     static final int RUSSIAN_STUFF_UNICODE[] =\n         { 0x412, 0x441, 0x435, 0x43C, 0x5F, 0x43F, 0x440, 0x438, 0x432, 0x435, 0x442 };\n-\n-    public BCodecTest(String name) {\n-        super(name);\n-    }\n \n     private String constructString(int[] unicodeChars) {\n         StringBuffer buffer = new StringBuffer();\n         return buffer.toString();\n     }\n \n+    @Test\n     public void testNullInput() throws Exception {\n         BCodec bcodec = new BCodec();\n         assertNull(bcodec.doDecoding(null));\n         assertNull(bcodec.doEncoding(null));\n     }\n \n+    @Test\n     public void testUTF8RoundTrip() throws Exception {\n \n         String ru_msg = constructString(RUSSIAN_STUFF_UNICODE);\n         assertEquals(ch_msg, bcodec.decode(bcodec.encode(ch_msg)));\n     }\n \n+    @Test\n     public void testBasicEncodeDecode() throws Exception {\n         BCodec bcodec = new BCodec();\n         String plain = \"Hello there\";\n         assertEquals(\"Basic B decoding test\", plain, bcodec.decode(encoded));\n     }\n \n+    @Test\n     public void testEncodeDecodeNull() throws Exception {\n         BCodec bcodec = new BCodec();\n         assertNull(\"Null string B encoding test\", bcodec.encode((String) null));\n         assertNull(\"Null string B decoding test\", bcodec.decode((String) null));\n     }\n \n+    @Test\n     public void testEncodeStringWithNull() throws Exception {\n         BCodec bcodec = new BCodec();\n         String test = null;\n         assertEquals(\"Result should be null\", null, result);\n     }\n \n+    @Test\n     public void testDecodeStringWithNull() throws Exception {\n         BCodec bcodec = new BCodec();\n         String test = null;\n         assertEquals(\"Result should be null\", null, result);\n     }\n \n+    @Test\n     public void testEncodeObjects() throws Exception {\n         BCodec bcodec = new BCodec();\n         String plain = \"what not\";\n         }\n     }\n \n+    @Test\n     public void testInvalidEncoding() {\n         BCodec bcodec = new BCodec(\"NONSENSE\");\n         try {\n         }\n     }\n \n+    @Test\n     public void testDecodeObjects() throws Exception {\n         BCodec bcodec = new BCodec();\n         String decoded = \"=?UTF-8?B?d2hhdCBub3Q=?=\";\n--- a/src/test/org/apache/commons/codec/net/QCodecTest.java\n+++ b/src/test/org/apache/commons/codec/net/QCodecTest.java\n \n package org.apache.commons.codec.net;\n \n-import junit.framework.TestCase;\n-\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import org.apache.commons.codec.CharEncoding;\n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n-import org.apache.commons.codec.CharEncoding;\n+import org.junit.Test;\n \n /**\n  * Quoted-printable codec test cases\n  * @author <a href=\"mailto:oleg@ural.ru\">Oleg Kalnichevski</a>\n  * @version $Id$\n  */\n-public class QCodecTest extends TestCase {\n+public class QCodecTest {\n     \n     static final int SWISS_GERMAN_STUFF_UNICODE [] = {\n         0x47, 0x72, 0xFC, 0x65, 0x7A, 0x69, 0x5F, 0x7A, 0xE4, 0x6D, 0xE4\n         0x412, 0x441, 0x435, 0x43C, 0x5F, 0x43F, 0x440, 0x438, \n         0x432, 0x435, 0x442 \n     }; \n-\n-    public QCodecTest(String name) {\n-        super(name);\n-    }\n \n     private String constructString(int [] unicodeChars) {\n         StringBuffer buffer = new StringBuffer();\n         return buffer.toString();\n     }\n \n+    @Test\n     public void testNullInput() throws Exception {\n         QCodec qcodec = new QCodec();\n         assertNull(qcodec.doDecoding(null));\n         assertNull(qcodec.doEncoding(null));\n     }\n \n+    @Test\n     public void testUTF8RoundTrip() throws Exception {\n \n         String ru_msg = constructString(RUSSIAN_STUFF_UNICODE); \n     }\n \n \n+    @Test\n     public void testBasicEncodeDecode() throws Exception {\n         QCodec qcodec = new QCodec();\n         String plain = \"= Hello there =\\r\\n\";\n             plain, qcodec.decode(encoded));\n     }\n \n+    @Test\n     public void testUnsafeEncodeDecode() throws Exception {\n         QCodec qcodec = new QCodec();\n         String plain = \"?_=\\r\\n\";\n             plain, qcodec.decode(encoded));\n     }\n \n+    @Test\n     public void testEncodeDecodeNull() throws Exception {\n         QCodec qcodec = new QCodec();\n         assertNull(\"Null string Q encoding test\", \n             qcodec.decode((String)null));\n     }\n \n+    @Test\n     public void testEncodeStringWithNull() throws Exception {\n         QCodec qcodec = new QCodec();\n         String test = null;\n         assertEquals(\"Result should be null\", null, result);\n     }\n \n+    @Test\n     public void testDecodeStringWithNull() throws Exception {\n         QCodec qcodec = new QCodec();\n         String test = null;\n     }\n     \n \n+    @Test\n     public void testEncodeObjects() throws Exception {\n         QCodec qcodec = new QCodec();\n         String plain = \"1+1 = 2\";\n     }\n     \n \n+    @Test\n     public void testInvalidEncoding() {\n         QCodec qcodec = new QCodec(\"NONSENSE\");\n             try {\n             }\n     }\n \n+    @Test\n     public void testDecodeObjects() throws Exception {\n         QCodec qcodec = new QCodec();\n         String decoded = \"=?UTF-8?Q?1+1 =3D 2?=\";\n     }\n \n \n+    @Test\n     public void testEncodeDecodeBlanks() throws Exception {\n         String plain = \"Mind those pesky blanks\";\n         String encoded1 = \"=?UTF-8?Q?Mind those pesky blanks?=\";\n     }\n \n \n+    @Test\n     public void testLetUsMakeCloverHappy() throws Exception {\n         QCodec qcodec = new QCodec();\n         qcodec.setEncodeBlanks(true);\n--- a/src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java\n+++ b/src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java\n \n package org.apache.commons.codec.net;\n \n-import junit.framework.TestCase;\n-\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.fail;\n+\n+import org.apache.commons.codec.CharEncoding;\n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n-import org.apache.commons.codec.CharEncoding;\n+import org.junit.Test;\n \n /**\n  * Quoted-printable codec test cases\n  * @author <a href=\"mailto:oleg@ural.ru\">Oleg Kalnichevski</a>\n  * @version $Id$\n  */\n-public class QuotedPrintableCodecTest extends TestCase {\n+public class QuotedPrintableCodecTest {\n     \n     static final int SWISS_GERMAN_STUFF_UNICODE [] = {\n         0x47, 0x72, 0xFC, 0x65, 0x7A, 0x69, 0x5F, 0x7A, 0xE4, 0x6D, 0xE4\n         0x412, 0x441, 0x435, 0x43C, 0x5F, 0x43F, 0x440, 0x438, \n         0x432, 0x435, 0x442 \n     }; \n-\n-    public QuotedPrintableCodecTest(String name) {\n-        super(name);\n-    }\n \n     private String constructString(int [] unicodeChars) {\n         StringBuffer buffer = new StringBuffer();\n         return buffer.toString();\n     }\n \n+    @Test\n     public void testUTF8RoundTrip() throws Exception {\n \n         String ru_msg = constructString(RUSSIAN_STUFF_UNICODE); \n         assertEquals(ch_msg, qpcodec.decode(qpcodec.encode(ch_msg, CharEncoding.UTF_8), CharEncoding.UTF_8));\n     }\n \n+    @Test\n     public void testBasicEncodeDecode() throws Exception {\n         QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n         String plain = \"= Hello there =\\r\\n\";\n             plain, qpcodec.decode(encoded));\n     }\n \n+    @Test\n     public void testSafeCharEncodeDecode() throws Exception {\n         QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n         String plain = \"abc123_-.*~!@#$%^&()+{}\\\"\\\\;:`,/[]\";\n     }\n \n \n+    @Test\n     public void testUnsafeEncodeDecode() throws Exception {\n         QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n         String plain = \"=\\r\\n\";\n             plain, qpcodec.decode(encoded));\n     }\n \n+    @Test\n     public void testEncodeDecodeNull() throws Exception {\n         QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n         assertNull(\"Null string quoted-printable encoding test\", \n     }\n \n \n+    @Test\n     public void testDecodeInvalid() throws Exception {\n         QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n         try {\n         }\n     }\n \n+    @Test\n     public void testEncodeNull() throws Exception {\n         QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n         byte[] plain = null;\n             null, encoded);\n     }\n     \n+    @Test\n     public void testEncodeUrlWithNullBitSet() throws Exception {\n         QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n         String plain = \"1+1 = 2\";\n         \n     }\n \n+    @Test\n     public void testDecodeWithNullArray() throws Exception {\n         byte[] plain = null;\n         byte[] result = QuotedPrintableCodec.decodeQuotedPrintable( plain );\n         assertEquals(\"Result should be null\", null, result);\n     }\n \n+    @Test\n     public void testEncodeStringWithNull() throws Exception {\n         QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n         String test = null;\n         assertEquals(\"Result should be null\", null, result);\n     }\n \n+    @Test\n     public void testDecodeStringWithNull() throws Exception {\n         QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n         String test = null;\n         assertEquals(\"Result should be null\", null, result);\n     }\n     \n+    @Test\n     public void testEncodeObjects() throws Exception {\n         QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n         String plain = \"1+1 = 2\";\n         }\n     }\n     \n+    @Test\n     public void testInvalidEncoding() {\n         QuotedPrintableCodec qpcodec = new QuotedPrintableCodec(\"NONSENSE\");\n            String plain = \"Hello there!\";\n             }\n     }\n \n+    @Test\n     public void testDecodeObjects() throws Exception {\n         QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n         String plain = \"1+1 =3D 2\";\n         }\n     }\n \n+    @Test\n     public void testDefaultEncoding() throws Exception {\n         String plain = \"Hello there!\";\n         QuotedPrintableCodec qpcodec = new QuotedPrintableCodec(\"UnicodeBig\");\n--- a/src/test/org/apache/commons/codec/net/RFC1522CodecTest.java\n+++ b/src/test/org/apache/commons/codec/net/RFC1522CodecTest.java\n \n package org.apache.commons.codec.net;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.fail;\n \n+import org.apache.commons.codec.CharEncoding;\n import org.apache.commons.codec.DecoderException;\n-import org.apache.commons.codec.CharEncoding;\n+import org.junit.Test;\n \n /**\n  * RFC 1522 compliant codec test cases\n  * @author <a href=\"mailto:oleg@ural.ru\">Oleg Kalnichevski</a>\n  * @version $Id$\n  */\n-public class RFC1522CodecTest extends TestCase {\n-\n-    public RFC1522CodecTest(String name) {\n-        super(name);\n-    }\n+public class RFC1522CodecTest {\n \n     static class RFC1522TestCodec extends RFC1522Codec {\n \n \n     }\n \n+    @Test\n     public void testNullInput() throws Exception {\n         RFC1522TestCodec testcodec = new RFC1522TestCodec();\n         assertNull(testcodec.decodeText(null));\n         }\n     }\n \n+    @Test\n     public void testDecodeInvalid() throws Exception {\n         assertExpectedDecoderException(\"whatever\");\n         assertExpectedDecoderException(\"=?\");\n--- a/src/test/org/apache/commons/codec/net/URLCodecTest.java\n+++ b/src/test/org/apache/commons/codec/net/URLCodecTest.java\n \n package org.apache.commons.codec.net;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.fail;\n+\n import java.io.UnsupportedEncodingException;\n \n-import junit.framework.TestCase;\n-\n+import org.apache.commons.codec.CharEncoding;\n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n-import org.apache.commons.codec.CharEncoding;\n+import org.junit.Test;\n \n /**\n  * URL codec test cases\n  * @author Apache Software Foundation\n  * @version $Id$\n  */\n-public class URLCodecTest extends TestCase {\n+public class URLCodecTest {\n     \n     static final int SWISS_GERMAN_STUFF_UNICODE [] = {\n         0x47, 0x72, 0xFC, 0x65, 0x7A, 0x69, 0x5F, 0x7A, 0xE4, 0x6D, 0xE4\n         0x412, 0x441, 0x435, 0x43C, 0x5F, 0x43F, 0x440, 0x438, \n         0x432, 0x435, 0x442 \n     }; \n-\n-    public URLCodecTest(String name) {\n-        super(name);\n-    }\n \n     private void validateState(URLCodec urlCodec) {\n         assertEquals(urlCodec.getEncoding(), urlCodec.getDefaultCharset());        \n         return buffer.toString();\n     }\n     \n+    @Test\n     public void testUTF8RoundTrip() throws Exception {\n \n         String ru_msg = constructString(RUSSIAN_STUFF_UNICODE); \n         this.validateState(urlCodec);\n     }\n \n+    @Test\n     public void testBasicEncodeDecode() throws Exception {\n         URLCodec urlCodec = new URLCodec();\n         String plain = \"Hello there!\";\n     }\n \n \n+    @Test\n     public void testSafeCharEncodeDecode() throws Exception {\n         URLCodec urlCodec = new URLCodec();\n         String plain = \"abc123_-.*\";\n     }\n \n \n+    @Test\n     public void testUnsafeEncodeDecode() throws Exception {\n         URLCodec urlCodec = new URLCodec();\n         String plain = \"~!@#$%^&()+{}\\\"\\\\;:`,/[]\";\n     }\n \n \n+    @Test\n     public void testEncodeDecodeNull() throws Exception {\n         URLCodec urlCodec = new URLCodec();\n         assertNull(\"Null string URL encoding test\", \n     }\n \n \n+    @Test\n     public void testDecodeInvalid() throws Exception {\n         URLCodec urlCodec = new URLCodec();\n         try {\n         this.validateState(urlCodec);\n     }\n \n+    @Test\n     public void testDecodeInvalidContent() throws UnsupportedEncodingException, DecoderException {\n         String ch_msg = constructString(SWISS_GERMAN_STUFF_UNICODE); \n         URLCodec urlCodec = new URLCodec();\n         this.validateState(urlCodec);\n     }\n \n+    @Test\n     public void testEncodeNull() throws Exception {\n         URLCodec urlCodec = new URLCodec();\n         byte[] plain = null;\n         this.validateState(urlCodec);\n     }\n     \n+    @Test\n     public void testEncodeUrlWithNullBitSet() throws Exception {\n         URLCodec urlCodec = new URLCodec();\n         String plain = \"Hello there!\";\n         this.validateState(urlCodec);        \n     }\n \n+    @Test\n     public void testDecodeWithNullArray() throws Exception {\n         byte[] plain = null;\n         byte[] result = URLCodec.decodeUrl( plain );\n         assertEquals(\"Result should be null\", null, result);\n     }\n \n+    @Test\n     public void testEncodeStringWithNull() throws Exception {\n         URLCodec urlCodec = new URLCodec();\n         String test = null;\n         assertEquals(\"Result should be null\", null, result);\n     }\n \n+    @Test\n     public void testDecodeStringWithNull() throws Exception {\n         URLCodec urlCodec = new URLCodec();\n         String test = null;\n         assertEquals(\"Result should be null\", null, result);\n     }\n     \n+    @Test\n     public void testEncodeObjects() throws Exception {\n         URLCodec urlCodec = new URLCodec();\n         String plain = \"Hello there!\";\n         this.validateState(urlCodec);\n     }\n     \n+    @Test\n     public void testInvalidEncoding() {\n         URLCodec urlCodec = new URLCodec(\"NONSENSE\");\n         String plain = \"Hello there!\";\n         this.validateState(urlCodec);\n     }\n \n+    @Test\n     public void testDecodeObjects() throws Exception {\n         URLCodec urlCodec = new URLCodec();\n         String plain = \"Hello+there%21\";\n         this.validateState(urlCodec);\n     }\n \n+    @Test\n     public void testDefaultEncoding() throws Exception {\n         String plain = \"Hello there!\";\n         URLCodec urlCodec = new URLCodec(\"UnicodeBig\");\n--- a/src/test/org/apache/commons/codec/net/UtilsTest.java\n+++ b/src/test/org/apache/commons/codec/net/UtilsTest.java\n \n package org.apache.commons.codec.net;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n /**\n  * Tests Utils.\n  * @version $Id$\n  * @since 1.4\n  */\n-public class UtilsTest extends TestCase {\n+public class UtilsTest {\n \n     /**\n      * We could make the constructor private but there does not seem to be a point to jumping through extra code hoops\n      * to restrict instantiation right now.\n      */\n+    @Test\n     public void testConstructor() {\n         new Utils();\n     }", "timestamp": 1301691543, "metainfo": ""}