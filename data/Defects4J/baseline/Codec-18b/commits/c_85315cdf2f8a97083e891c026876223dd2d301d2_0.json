{"sha": "85315cdf2f8a97083e891c026876223dd2d301d2", "log": "Exceptions not thrown  ", "commit": "\n--- a/src/test/java/org/apache/commons/codec/binary/Base64Test.java\n+++ b/src/test/java/org/apache/commons/codec/binary/Base64Test.java\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n-import java.io.UnsupportedEncodingException;\n import java.math.BigInteger;\n import java.util.Arrays;\n import java.util.Random;\n     }\n \n     @Test\n-    public void testCodeInteger1() throws UnsupportedEncodingException {\n+    public void testCodeInteger1() {\n         String encodedInt1 = \"li7dzDacuo67Jg7mtqEm2TRuOMU=\";\n         BigInteger bigInt1 = new BigInteger(\"85739377120809420210425962799\" + \"0318636601332086981\");\n \n     }\n \n     @Test\n-    public void testCodeInteger2() throws UnsupportedEncodingException {\n+    public void testCodeInteger2() {\n         String encodedInt2 = \"9B5ypLY9pMOmtxCeTDHgwdNFeGs=\";\n         BigInteger bigInt2 = new BigInteger(\"13936727572861167254666467268\" + \"91466679477132949611\");\n \n     }\n \n     @Test\n-    public void testCodeInteger3() throws UnsupportedEncodingException {\n+    public void testCodeInteger3() {\n         String encodedInt3 = \"FKIhdgaG5LGKiEtF1vHy4f3y700zaD6QwDS3IrNVGzNp2\" + \"rY+1LFWTK6D44AyiC1n8uWz1itkYMZF0/aKDK0Yjg==\";\n         BigInteger bigInt3 = new BigInteger(\"10806548154093873461951748545\"\n             + \"1196989136416448805819079363524309897749044958112417136240557\"\n     }\n \n     @Test\n-    public void testCodeInteger4() throws UnsupportedEncodingException {\n+    public void testCodeInteger4() {\n         String encodedInt4 = \"ctA8YGxrtngg/zKVvqEOefnwmViFztcnPBYPlJsvh6yKI\"\n             + \"4iDm68fnp4Mi3RrJ6bZAygFrUIQLxLjV+OJtgJAEto0xAs+Mehuq1DkSFEpP3o\"\n             + \"DzCTOsrOiS1DwQe4oIb7zVk/9l7aPtJMHW0LVlMdwZNFNNJoqMcT2ZfCPrfvYv\"\n      * Tests conditional true branch for \"marker0\" test.\n      */\n     @Test\n-    public void testDecodePadMarkerIndex2() throws UnsupportedEncodingException {\n+    public void testDecodePadMarkerIndex2() {\n         assertEquals(\"A\", new String(Base64.decodeBase64(\"QQ==\".getBytes(Charsets.UTF_8))));\n     }\n \n      * Tests conditional branches for \"marker1\" test.\n      */\n     @Test\n-    public void testDecodePadMarkerIndex3() throws UnsupportedEncodingException {\n+    public void testDecodePadMarkerIndex3() {\n         assertEquals(\"AA\", new String(Base64.decodeBase64(\"QUE=\".getBytes(Charsets.UTF_8))));\n         assertEquals(\"AAA\", new String(Base64.decodeBase64(\"QUFB\".getBytes(Charsets.UTF_8))));\n     }\n \n     @Test\n-    public void testDecodePadOnly() throws UnsupportedEncodingException {\n+    public void testDecodePadOnly() {\n         assertEquals(0, Base64.decodeBase64(\"====\".getBytes(Charsets.UTF_8)).length);\n         assertEquals(\"\", new String(Base64.decodeBase64(\"====\".getBytes(Charsets.UTF_8))));\n         // Test truncated padding\n     }\n \n     @Test\n-    public void testDecodePadOnlyChunked() throws UnsupportedEncodingException {\n+    public void testDecodePadOnlyChunked() {\n         assertEquals(0, Base64.decodeBase64(\"====\\n\".getBytes(Charsets.UTF_8)).length);\n         assertEquals(\"\", new String(Base64.decodeBase64(\"====\\n\".getBytes(Charsets.UTF_8))));\n         // Test truncated padding\n     }\n \n     @Test\n-    public void testKnownDecodings() throws UnsupportedEncodingException {\n+    public void testKnownDecodings() {\n         assertEquals(\"The quick brown fox jumped over the lazy dogs.\", new String(Base64\n                 .decodeBase64(\"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\".getBytes(Charsets.UTF_8))));\n         assertEquals(\"It was the best of times, it was the worst of times.\", new String(Base64\n     }\n \n     @Test\n-    public void testKnownEncodings() throws UnsupportedEncodingException {\n+    public void testKnownEncodings() {\n         assertEquals(\"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\", new String(Base64\n                 .encodeBase64(\"The quick brown fox jumped over the lazy dogs.\".getBytes(Charsets.UTF_8))));\n         assertEquals(\n--- a/src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java\n+++ b/src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.fail;\n \n-import java.io.UnsupportedEncodingException;\n-\n import org.apache.commons.codec.Charsets;\n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n      * @param encodeMe\n      *            data to encode and compare\n      */\n-    void assertDecodeObject(byte[] bits, String encodeMe) throws DecoderException, UnsupportedEncodingException {\n+    void assertDecodeObject(byte[] bits, String encodeMe) throws DecoderException {\n         byte[] decoded;\n         decoded = (byte[]) instance.decode(encodeMe);\n         assertEquals(new String(bits), new String(decoded));\n      * Tests for byte[] decode(byte[])\n      */\n     @Test\n-    public void testDecodeByteArray() throws UnsupportedEncodingException {\n+    public void testDecodeByteArray() {\n         // With a single raw binary\n         byte[] bits = new byte[1];\n         byte[] decoded = instance.decode(\"00000000\".getBytes(Charsets.UTF_8));\n      * Tests for byte[] fromAscii(byte[])\n      */\n     @Test\n-    public void testFromAsciiByteArray() throws UnsupportedEncodingException {\n+    public void testFromAsciiByteArray() {\n         assertEquals(0, BinaryCodec.fromAscii((byte[]) null).length);\n         assertEquals(0, BinaryCodec.fromAscii(new byte[0]).length);\n         // With a single raw binary\n--- a/src/test/java/org/apache/commons/codec/binary/HexTest.java\n+++ b/src/test/java/org/apache/commons/codec/binary/HexTest.java\n     }\n \n     @Test(expected=UnsupportedCharsetException.class)\n-    public void testCustomCharsetBadName() throws UnsupportedEncodingException {\n+    public void testCustomCharsetBadName() {\n         new Hex(BAD_ENCODING_NAME);\n     }\n ", "timestamp": 1333478671, "metainfo": ""}