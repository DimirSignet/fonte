{"sha": "5193321d27aec9d3f26c407dac6d4df9546f9036", "log": "getBytes() relies on the current encoding; use UTF-8 for portability  ", "commit": "\n--- a/src/test/org/apache/commons/codec/binary/Base64Test.java\n+++ b/src/test/org/apache/commons/codec/binary/Base64Test.java\n \n package org.apache.commons.codec.binary;\n \n+import java.io.UnsupportedEncodingException;\n import java.math.BigInteger;\n import java.util.Arrays;\n import java.util.Random;\n         Base64.decodeBase64(x);\n     }\n \n-    public void testCodeInteger1() {\n+    public void testCodeInteger1() throws UnsupportedEncodingException {\n         String encodedInt1 = \"li7dzDacuo67Jg7mtqEm2TRuOMU=\";\n         BigInteger bigInt1 = new BigInteger(\"85739377120809420210425962799\" + \"0318636601332086981\");\n \n         assertEquals(encodedInt1, new String(Base64.encodeInteger(bigInt1)));\n-        assertEquals(bigInt1, Base64.decodeInteger(encodedInt1.getBytes()));\n-    }\n-\n-    public void testCodeInteger2() {\n+        assertEquals(bigInt1, Base64.decodeInteger(encodedInt1.getBytes(\"UTF-8\")));\n+    }\n+\n+    public void testCodeInteger2() throws UnsupportedEncodingException {\n         String encodedInt2 = \"9B5ypLY9pMOmtxCeTDHgwdNFeGs=\";\n         BigInteger bigInt2 = new BigInteger(\"13936727572861167254666467268\" + \"91466679477132949611\");\n \n         assertEquals(encodedInt2, new String(Base64.encodeInteger(bigInt2)));\n-        assertEquals(bigInt2, Base64.decodeInteger(encodedInt2.getBytes()));\n-    }\n-\n-    public void testCodeInteger3() {\n+        assertEquals(bigInt2, Base64.decodeInteger(encodedInt2.getBytes(\"UTF-8\")));\n+    }\n+\n+    public void testCodeInteger3() throws UnsupportedEncodingException {\n         String encodedInt3 = \"FKIhdgaG5LGKiEtF1vHy4f3y700zaD6QwDS3IrNVGzNp2\" + \"rY+1LFWTK6D44AyiC1n8uWz1itkYMZF0/aKDK0Yjg==\";\n         BigInteger bigInt3 = new BigInteger(\"10806548154093873461951748545\"\n             + \"1196989136416448805819079363524309897749044958112417136240557\"\n             + \"4495062430572478766856090958495998158114332651671116876320938126\");\n \n         assertEquals(encodedInt3, new String(Base64.encodeInteger(bigInt3)));\n-        assertEquals(bigInt3, Base64.decodeInteger(encodedInt3.getBytes()));\n-    }\n-\n-    public void testCodeInteger4() {\n+        assertEquals(bigInt3, Base64.decodeInteger(encodedInt3.getBytes(\"UTF-8\")));\n+    }\n+\n+    public void testCodeInteger4() throws UnsupportedEncodingException {\n         String encodedInt4 = \"ctA8YGxrtngg/zKVvqEOefnwmViFztcnPBYPlJsvh6yKI\"\n             + \"4iDm68fnp4Mi3RrJ6bZAygFrUIQLxLjV+OJtgJAEto0xAs+Mehuq1DkSFEpP3o\"\n             + \"DzCTOsrOiS1DwQe4oIb7zVk/9l7aPtJMHW0LVlMdwZNFNNJoqMcT2ZfCPrfvYv\"\n             + \"53542091716518238707344493641683483917\");\n \n         assertEquals(encodedInt4, new String(Base64.encodeInteger(bigInt4)));\n-        assertEquals(bigInt4, Base64.decodeInteger(encodedInt4.getBytes()));\n+        assertEquals(bigInt4, Base64.decodeInteger(encodedInt4.getBytes(\"UTF-8\")));\n     }\n \n     public void testCodeIntegerEdgeCases() {\n     /**\n      * Tests conditional true branch for \"marker0\" test.\n      */\n-    public void testDecodePadMarkerIndex2() {\n-        assertEquals(\"A\", new String(Base64.decodeBase64(\"QQ==\".getBytes())));\n+    public void testDecodePadMarkerIndex2() throws UnsupportedEncodingException {\n+        assertEquals(\"A\", new String(Base64.decodeBase64(\"QQ==\".getBytes(\"UTF-8\"))));\n     }\n \n     /**\n      * Tests conditional branches for \"marker1\" test.\n      */\n-    public void testDecodePadMarkerIndex3() {\n-        assertEquals(\"AA\", new String(Base64.decodeBase64(\"QUE=\".getBytes())));\n-        assertEquals(\"AAA\", new String(Base64.decodeBase64(\"QUFB\".getBytes())));\n-    }\n-\n-    public void testDecodePadOnly() {\n-        assertTrue(Base64.decodeBase64(\"====\".getBytes()).length == 0);\n-        assertEquals(\"\", new String(Base64.decodeBase64(\"====\".getBytes())));\n+    public void testDecodePadMarkerIndex3() throws UnsupportedEncodingException {\n+        assertEquals(\"AA\", new String(Base64.decodeBase64(\"QUE=\".getBytes(\"UTF-8\"))));\n+        assertEquals(\"AAA\", new String(Base64.decodeBase64(\"QUFB\".getBytes(\"UTF-8\"))));\n+    }\n+\n+    public void testDecodePadOnly() throws UnsupportedEncodingException {\n+        assertTrue(Base64.decodeBase64(\"====\".getBytes(\"UTF-8\")).length == 0);\n+        assertEquals(\"\", new String(Base64.decodeBase64(\"====\".getBytes(\"UTF-8\"))));\n         // Test truncated padding\n-        assertTrue(Base64.decodeBase64(\"===\".getBytes()).length == 0);\n-        assertTrue(Base64.decodeBase64(\"==\".getBytes()).length == 0);\n-        assertTrue(Base64.decodeBase64(\"=\".getBytes()).length == 0);\n-        assertTrue(Base64.decodeBase64(\"\".getBytes()).length == 0);\n-    }\n-\n-    public void testDecodePadOnlyChunked() {\n-        assertTrue(Base64.decodeBase64(\"====\\n\".getBytes()).length == 0);\n-        assertEquals(\"\", new String(Base64.decodeBase64(\"====\\n\".getBytes())));\n+        assertTrue(Base64.decodeBase64(\"===\".getBytes(\"UTF-8\")).length == 0);\n+        assertTrue(Base64.decodeBase64(\"==\".getBytes(\"UTF-8\")).length == 0);\n+        assertTrue(Base64.decodeBase64(\"=\".getBytes(\"UTF-8\")).length == 0);\n+        assertTrue(Base64.decodeBase64(\"\".getBytes(\"UTF-8\")).length == 0);\n+    }\n+\n+    public void testDecodePadOnlyChunked() throws UnsupportedEncodingException {\n+        assertTrue(Base64.decodeBase64(\"====\\n\".getBytes(\"UTF-8\")).length == 0);\n+        assertEquals(\"\", new String(Base64.decodeBase64(\"====\\n\".getBytes(\"UTF-8\"))));\n         // Test truncated padding\n-        assertTrue(Base64.decodeBase64(\"===\\n\".getBytes()).length == 0);\n-        assertTrue(Base64.decodeBase64(\"==\\n\".getBytes()).length == 0);\n-        assertTrue(Base64.decodeBase64(\"=\\n\".getBytes()).length == 0);\n-        assertTrue(Base64.decodeBase64(\"\\n\".getBytes()).length == 0);\n+        assertTrue(Base64.decodeBase64(\"===\\n\".getBytes(\"UTF-8\")).length == 0);\n+        assertTrue(Base64.decodeBase64(\"==\\n\".getBytes(\"UTF-8\")).length == 0);\n+        assertTrue(Base64.decodeBase64(\"=\\n\".getBytes(\"UTF-8\")).length == 0);\n+        assertTrue(Base64.decodeBase64(\"\\n\".getBytes(\"UTF-8\")).length == 0);\n     }\n \n     public void testDecodeWithWhitespace() throws Exception {\n \n         String orig = \"I am a late night coder.\";\n \n-        byte[] encodedArray = Base64.encodeBase64(orig.getBytes());\n+        byte[] encodedArray = Base64.encodeBase64(orig.getBytes(\"UTF-8\"));\n         StringBuffer intermediate = new StringBuffer(new String(encodedArray));\n \n         intermediate.insert(2, ' ');\n         intermediate.insert(10, '\\r');\n         intermediate.insert(15, '\\n');\n \n-        byte[] encodedWithWS = intermediate.toString().getBytes();\n+        byte[] encodedWithWS = intermediate.toString().getBytes(\"UTF-8\");\n         byte[] decodedWithWS = Base64.decodeBase64(encodedWithWS);\n \n         String dest = new String(decodedWithWS);\n \n         String orig = \"I am a late night coder.\";\n \n-        byte[] encodedArray = Base64.encodeBase64(orig.getBytes());\n+        byte[] encodedArray = Base64.encodeBase64(orig.getBytes(\"UTF-8\"));\n         StringBuffer intermediate = new StringBuffer(new String(encodedArray));\n \n         intermediate.insert(2, ' ');\n         intermediate.insert(10, '\\r');\n         intermediate.insert(15, '\\n');\n \n-        byte[] encodedWithWS = intermediate.toString().getBytes();\n+        byte[] encodedWithWS = intermediate.toString().getBytes(\"UTF-8\");\n         byte[] encodedNoWS = Base64.discardWhitespace(encodedWithWS);\n         byte[] decodedWithWS = Base64.decodeBase64(encodedWithWS);\n         byte[] decodedNoWS = Base64.decodeBase64(encodedNoWS);\n \n     public void testIgnoringNonBase64InDecode() throws Exception {\n         assertEquals(\"The quick brown fox jumped over the lazy dogs.\", new String(Base64\n-                .decodeBase64(\"VGhlIH@$#$@%F1aWN@#@#@@rIGJyb3duIGZve\\n\\r\\t%#%#%#%CBqd##$#$W1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\".getBytes())));\n+                .decodeBase64(\"VGhlIH@$#$@%F1aWN@#@#@@rIGJyb3duIGZve\\n\\r\\t%#%#%#%CBqd##$#$W1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\".getBytes(\"UTF-8\"))));\n     }\n \n     public void testIsArrayByteBase64() {\n         assertTrue(\"Base64.isArrayByteBase64(whiteSpace)=true\", Base64.isArrayByteBase64(whiteSpace));\n     }\n \n-    public void testKnownDecodings() {\n+    public void testKnownDecodings() throws UnsupportedEncodingException {\n         assertEquals(\"The quick brown fox jumped over the lazy dogs.\", new String(Base64\n-                .decodeBase64(\"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\".getBytes())));\n+                .decodeBase64(\"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\".getBytes(\"UTF-8\"))));\n         assertEquals(\"It was the best of times, it was the worst of times.\", new String(Base64\n-                .decodeBase64(\"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==\".getBytes())));\n+                .decodeBase64(\"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==\".getBytes(\"UTF-8\"))));\n         assertEquals(\"http://jakarta.apache.org/commmons\", new String(Base64\n-                .decodeBase64(\"aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==\".getBytes())));\n+                .decodeBase64(\"aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==\".getBytes(\"UTF-8\"))));\n         assertEquals(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\", new String(Base64\n-                .decodeBase64(\"QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==\".getBytes())));\n+                .decodeBase64(\"QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==\".getBytes(\"UTF-8\"))));\n         assertEquals(\"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\", new String(Base64.decodeBase64(\"eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0=\"\n-                .getBytes())));\n-        assertEquals(\"xyzzy!\", new String(Base64.decodeBase64(\"eHl6enkh\".getBytes())));\n-    }\n-\n-    public void testKnownEncodings() {\n+                .getBytes(\"UTF-8\"))));\n+        assertEquals(\"xyzzy!\", new String(Base64.decodeBase64(\"eHl6enkh\".getBytes(\"UTF-8\"))));\n+    }\n+\n+    public void testKnownEncodings() throws UnsupportedEncodingException {\n         assertEquals(\"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\", new String(Base64\n-                .encodeBase64(\"The quick brown fox jumped over the lazy dogs.\".getBytes())));\n+                .encodeBase64(\"The quick brown fox jumped over the lazy dogs.\".getBytes(\"UTF-8\"))));\n         assertEquals(\n                 \"YmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJs\\r\\nYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFo\\r\\nIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBi\\r\\nbGFoIGJsYWg=\\r\\n\",\n                 new String(\n                         Base64\n                                 .encodeBase64Chunked(\"blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah\"\n-                                        .getBytes())));\n+                                        .getBytes(\"UTF-8\"))));\n         assertEquals(\"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==\", new String(Base64\n-                .encodeBase64(\"It was the best of times, it was the worst of times.\".getBytes())));\n+                .encodeBase64(\"It was the best of times, it was the worst of times.\".getBytes(\"UTF-8\"))));\n         assertEquals(\"aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==\", new String(Base64\n-                .encodeBase64(\"http://jakarta.apache.org/commmons\".getBytes())));\n+                .encodeBase64(\"http://jakarta.apache.org/commmons\".getBytes(\"UTF-8\"))));\n         assertEquals(\"QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==\", new String(Base64\n-                .encodeBase64(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\".getBytes())));\n+                .encodeBase64(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\".getBytes(\"UTF-8\"))));\n         assertEquals(\"eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0=\", new String(Base64.encodeBase64(\"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\"\n-                .getBytes())));\n-        assertEquals(\"eHl6enkh\", new String(Base64.encodeBase64(\"xyzzy!\".getBytes())));\n+                .getBytes(\"UTF-8\"))));\n+        assertEquals(\"eHl6enkh\", new String(Base64.encodeBase64(\"xyzzy!\".getBytes(\"UTF-8\"))));\n     }\n \n     public void testNonBase64Test() throws Exception {\n     public void testObjectDecodeWithValidParameter() throws Exception {\n \n         String original = \"Hello World!\";\n-        Object o = Base64.encodeBase64(original.getBytes());\n+        Object o = Base64.encodeBase64(original.getBytes(\"UTF-8\"));\n \n         Base64 b64 = new Base64();\n         Object oDecoded = b64.decode(o);\n     public void testObjectEncodeWithValidParameter() throws Exception {\n \n         String original = \"Hello World!\";\n-        Object origObj = original.getBytes();\n+        Object origObj = original.getBytes(\"UTF-8\");\n \n         Base64 b64 = new Base64();\n         Object oEncoded = b64.encode(origObj);\n--- a/src/test/org/apache/commons/codec/binary/BinaryCodecTest.java\n+++ b/src/test/org/apache/commons/codec/binary/BinaryCodecTest.java\n \n package org.apache.commons.codec.binary;\n \n+import java.io.UnsupportedEncodingException;\n+\n import junit.framework.TestCase;\n \n import org.apache.commons.codec.DecoderException;\n      * @param encodeMe\n      *            data to encode and compare\n      */\n-    void assertDecodeObject(byte[] bits, String encodeMe) throws DecoderException {\n+    void assertDecodeObject(byte[] bits, String encodeMe) throws DecoderException, UnsupportedEncodingException {\n         byte[] decoded;\n         decoded = (byte[]) instance.decode(encodeMe);\n         assertEquals(new String(bits), new String(decoded));\n         if (encodeMe == null) {\n             decoded = instance.decode((byte[]) null);\n         } else {\n-            decoded = (byte[]) instance.decode((Object) encodeMe.getBytes());\n+            decoded = (byte[]) instance.decode((Object) encodeMe.getBytes(\"UTF-8\"));\n         }\n         assertEquals(new String(bits), new String(decoded));\n         if (encodeMe == null) {\n     /*\n      * Tests for byte[] decode(byte[])\n      */\n-    public void testDecodeByteArray() {\n+    public void testDecodeByteArray() throws UnsupportedEncodingException {\n         // With a single raw binary\n         byte[] bits = new byte[1];\n-        byte[] decoded = instance.decode(\"00000000\".getBytes());\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0;\n-        decoded = instance.decode(\"00000001\".getBytes());\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1;\n-        decoded = instance.decode(\"00000011\".getBytes());\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1 | BIT_2;\n-        decoded = instance.decode(\"00000111\".getBytes());\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n-        decoded = instance.decode(\"00001111\".getBytes());\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n-        decoded = instance.decode(\"00011111\".getBytes());\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n-        decoded = instance.decode(\"00111111\".getBytes());\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n-        decoded = instance.decode(\"01111111\".getBytes());\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = instance.decode(\"11111111\".getBytes());\n+        byte[] decoded = instance.decode(\"00000000\".getBytes(\"UTF-8\"));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0;\n+        decoded = instance.decode(\"00000001\".getBytes(\"UTF-8\"));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1;\n+        decoded = instance.decode(\"00000011\".getBytes(\"UTF-8\"));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2;\n+        decoded = instance.decode(\"00000111\".getBytes(\"UTF-8\"));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n+        decoded = instance.decode(\"00001111\".getBytes(\"UTF-8\"));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n+        decoded = instance.decode(\"00011111\".getBytes(\"UTF-8\"));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n+        decoded = instance.decode(\"00111111\".getBytes(\"UTF-8\"));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n+        decoded = instance.decode(\"01111111\".getBytes(\"UTF-8\"));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = instance.decode(\"11111111\".getBytes(\"UTF-8\"));\n         assertEquals(new String(bits), new String(decoded));\n         // With a two raw binaries\n         bits = new byte[2];\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = instance.decode(\"0000000011111111\".getBytes());\n+        decoded = instance.decode(\"0000000011111111\".getBytes(\"UTF-8\"));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = instance.decode(\"0000000111111111\".getBytes());\n+        decoded = instance.decode(\"0000000111111111\".getBytes(\"UTF-8\"));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = instance.decode(\"0000001111111111\".getBytes());\n+        decoded = instance.decode(\"0000001111111111\".getBytes(\"UTF-8\"));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1 | BIT_2;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = instance.decode(\"0000011111111111\".getBytes());\n+        decoded = instance.decode(\"0000011111111111\".getBytes(\"UTF-8\"));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = instance.decode(\"0000111111111111\".getBytes());\n+        decoded = instance.decode(\"0000111111111111\".getBytes(\"UTF-8\"));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = instance.decode(\"0001111111111111\".getBytes());\n+        decoded = instance.decode(\"0001111111111111\".getBytes(\"UTF-8\"));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = instance.decode(\"0011111111111111\".getBytes());\n+        decoded = instance.decode(\"0011111111111111\".getBytes(\"UTF-8\"));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = instance.decode(\"0111111111111111\".getBytes());\n+        decoded = instance.decode(\"0111111111111111\".getBytes(\"UTF-8\"));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = instance.decode(\"1111111111111111\".getBytes());\n+        decoded = instance.decode(\"1111111111111111\".getBytes(\"UTF-8\"));\n         assertEquals(new String(bits), new String(decoded));\n     }\n \n     /*\n      * Tests for byte[] fromAscii(byte[])\n      */\n-    public void testFromAsciiByteArray() {\n+    public void testFromAsciiByteArray() throws UnsupportedEncodingException {\n         assertEquals(0, BinaryCodec.fromAscii((byte[]) null).length);\n         assertEquals(0, BinaryCodec.fromAscii(new byte[0]).length);\n         // With a single raw binary\n         byte[] bits = new byte[1];\n-        byte[] decoded = BinaryCodec.fromAscii(\"00000000\".getBytes());\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0;\n-        decoded = BinaryCodec.fromAscii(\"00000001\".getBytes());\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1;\n-        decoded = BinaryCodec.fromAscii(\"00000011\".getBytes());\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1 | BIT_2;\n-        decoded = BinaryCodec.fromAscii(\"00000111\".getBytes());\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n-        decoded = BinaryCodec.fromAscii(\"00001111\".getBytes());\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n-        decoded = BinaryCodec.fromAscii(\"00011111\".getBytes());\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n-        decoded = BinaryCodec.fromAscii(\"00111111\".getBytes());\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n-        decoded = BinaryCodec.fromAscii(\"01111111\".getBytes());\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = BinaryCodec.fromAscii(\"11111111\".getBytes());\n+        byte[] decoded = BinaryCodec.fromAscii(\"00000000\".getBytes(\"UTF-8\"));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0;\n+        decoded = BinaryCodec.fromAscii(\"00000001\".getBytes(\"UTF-8\"));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1;\n+        decoded = BinaryCodec.fromAscii(\"00000011\".getBytes(\"UTF-8\"));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2;\n+        decoded = BinaryCodec.fromAscii(\"00000111\".getBytes(\"UTF-8\"));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n+        decoded = BinaryCodec.fromAscii(\"00001111\".getBytes(\"UTF-8\"));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n+        decoded = BinaryCodec.fromAscii(\"00011111\".getBytes(\"UTF-8\"));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n+        decoded = BinaryCodec.fromAscii(\"00111111\".getBytes(\"UTF-8\"));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n+        decoded = BinaryCodec.fromAscii(\"01111111\".getBytes(\"UTF-8\"));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = BinaryCodec.fromAscii(\"11111111\".getBytes(\"UTF-8\"));\n         assertEquals(new String(bits), new String(decoded));\n         // With a two raw binaries\n         bits = new byte[2];\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = BinaryCodec.fromAscii(\"0000000011111111\".getBytes());\n+        decoded = BinaryCodec.fromAscii(\"0000000011111111\".getBytes(\"UTF-8\"));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = BinaryCodec.fromAscii(\"0000000111111111\".getBytes());\n+        decoded = BinaryCodec.fromAscii(\"0000000111111111\".getBytes(\"UTF-8\"));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = BinaryCodec.fromAscii(\"0000001111111111\".getBytes());\n+        decoded = BinaryCodec.fromAscii(\"0000001111111111\".getBytes(\"UTF-8\"));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1 | BIT_2;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = BinaryCodec.fromAscii(\"0000011111111111\".getBytes());\n+        decoded = BinaryCodec.fromAscii(\"0000011111111111\".getBytes(\"UTF-8\"));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = BinaryCodec.fromAscii(\"0000111111111111\".getBytes());\n+        decoded = BinaryCodec.fromAscii(\"0000111111111111\".getBytes(\"UTF-8\"));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = BinaryCodec.fromAscii(\"0001111111111111\".getBytes());\n+        decoded = BinaryCodec.fromAscii(\"0001111111111111\".getBytes(\"UTF-8\"));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = BinaryCodec.fromAscii(\"0011111111111111\".getBytes());\n+        decoded = BinaryCodec.fromAscii(\"0011111111111111\".getBytes(\"UTF-8\"));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = BinaryCodec.fromAscii(\"0111111111111111\".getBytes());\n+        decoded = BinaryCodec.fromAscii(\"0111111111111111\".getBytes(\"UTF-8\"));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = BinaryCodec.fromAscii(\"1111111111111111\".getBytes());\n+        decoded = BinaryCodec.fromAscii(\"1111111111111111\".getBytes(\"UTF-8\"));\n         assertEquals(new String(bits), new String(decoded));\n         assertEquals(0, BinaryCodec.fromAscii((byte[]) null).length);\n     }\n--- a/src/test/org/apache/commons/codec/binary/HexTest.java\n+++ b/src/test/org/apache/commons/codec/binary/HexTest.java\n         assertEquals(name, sourceString, actualStringFromBytes);\n     }\n \n-    public void testCustomCharsetBadNameEncodeByteArray() {\n-        try {\n-            new Hex(BAD_ENCODING_NAME).encode(\"Hello World\".getBytes());\n+    public void testCustomCharsetBadNameEncodeByteArray() throws UnsupportedEncodingException {\n+        try {\n+            new Hex(BAD_ENCODING_NAME).encode(\"Hello World\".getBytes(\"UTF-8\"));\n             fail(\"Expected \" + IllegalStateException.class.getName());\n         } catch (IllegalStateException e) {\n             // Expected\n         }\n     }\n \n-    public void testCustomCharsetBadNameDecodeObject() {\n-        try {\n-            new Hex(BAD_ENCODING_NAME).decode(\"Hello World\".getBytes());\n+    public void testCustomCharsetBadNameDecodeObject() throws UnsupportedEncodingException {\n+        try {\n+            new Hex(BAD_ENCODING_NAME).decode(\"Hello World\".getBytes(\"UTF-8\"));\n             fail(\"Expected \" + DecoderException.class.getName());\n         } catch (DecoderException e) {\n             // Expected\n--- a/src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java\n+++ b/src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java\n         QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n         String plain = \"1+1 = 2\";\n         String encoded = new String(QuotedPrintableCodec.\n-            encodeQuotedPrintable(null, plain.getBytes()));\n+            encodeQuotedPrintable(null, plain.getBytes(\"UTF-8\")));\n         assertEquals(\"Basic quoted-printable encoding test\", \n             \"1+1 =3D 2\", encoded);\n         assertEquals(\"Basic quoted-printable decoding test\", \n         assertEquals(\"Basic quoted-printable encoding test\", \n             \"1+1 =3D 2\", encoded);\n \n-        byte[] plainBA = plain.getBytes();\n+        byte[] plainBA = plain.getBytes(\"UTF-8\");\n         byte[] encodedBA = (byte[]) qpcodec.encode((Object) plainBA);\n         encoded = new String(encodedBA);\n         assertEquals(\"Basic quoted-printable encoding test\", \n         assertEquals(\"Basic quoted-printable decoding test\", \n             \"1+1 = 2\", decoded);\n \n-        byte[] plainBA = plain.getBytes();\n+        byte[] plainBA = plain.getBytes(\"UTF-8\");\n         byte[] decodedBA = (byte[]) qpcodec.decode((Object) plainBA);\n         decoded = new String(decodedBA);\n         assertEquals(\"Basic quoted-printable decoding test\", \n--- a/src/test/org/apache/commons/codec/net/URLCodecTest.java\n+++ b/src/test/org/apache/commons/codec/net/URLCodecTest.java\n     public void testEncodeUrlWithNullBitSet() throws Exception {\n         URLCodec urlCodec = new URLCodec();\n         String plain = \"Hello there!\";\n-        String encoded = new String( URLCodec.encodeUrl(null, plain.getBytes()));\n+        String encoded = new String( URLCodec.encodeUrl(null, plain.getBytes(\"UTF-8\")));\n         assertEquals(\"Basic URL encoding test\", \n             \"Hello+there%21\", encoded);\n         assertEquals(\"Basic URL decoding test\", \n         assertEquals(\"Basic URL encoding test\", \n             \"Hello+there%21\", encoded);\n \n-        byte[] plainBA = plain.getBytes();\n+        byte[] plainBA = plain.getBytes(\"UTF-8\");\n         byte[] encodedBA = (byte[]) urlCodec.encode((Object) plainBA);\n         encoded = new String(encodedBA);\n         assertEquals(\"Basic URL encoding test\", \n         assertEquals(\"Basic URL decoding test\", \n             \"Hello there!\", decoded);\n \n-        byte[] plainBA = plain.getBytes();\n+        byte[] plainBA = plain.getBytes(\"UTF-8\");\n         byte[] decodedBA = (byte[]) urlCodec.decode((Object) plainBA);\n         decoded = new String(decodedBA);\n         assertEquals(\"Basic URL decoding test\", ", "timestamp": 1269866361, "metainfo": ""}