{"sha": "d9d0eaca911ff6654c71b9eca9349cdffc3e5871", "log": "Sort methods in AB order.  ", "commit": "\n--- a/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java\n+++ b/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java\n         assertEquals(expected, this.getStringEncoder().doubleMetaphone(source, true));\n     }\n \n+    @Override\n+    protected DoubleMetaphone createStringEncoder() {\n+        return new DoubleMetaphone();\n+    }\n+\n     public void doubleMetaphoneEqualTest(final String[][] pairs, final boolean useAlternate) {\n         this.validateFixture(pairs);\n         for (final String[] pair : pairs) {\n         }\n     }\n \n-    @Override\n-    protected DoubleMetaphone createStringEncoder() {\n-        return new DoubleMetaphone();\n+    @Test\n+    public void testCCedilla() {\n+        assertTrue(this.getStringEncoder().isDoubleMetaphoneEqual(\"\\u00e7\", \"S\")); // c-cedilla\n     }\n \n     @Test\n         assertEquals(null, this.getStringEncoder().doubleMetaphone(\"\"));\n         assertEquals(null, this.getStringEncoder().doubleMetaphone(\" \"));\n         assertEquals(null, this.getStringEncoder().doubleMetaphone(\"\\t\\n\\r \"));\n-    }\n-\n-    /**\n-     * Test setting maximum length\n-     */\n-    @Test\n-    public void testSetMaxCodeLength() {\n-        final String value = \"jumped\";\n-\n-        final DoubleMetaphone doubleMetaphone = new DoubleMetaphone();\n-\n-        // Sanity check of default settings\n-        assertEquals(\"Default Max Code Length\", 4, doubleMetaphone.getMaxCodeLen());\n-        assertEquals(\"Default Primary\",   \"JMPT\", doubleMetaphone.doubleMetaphone(value, false));\n-        assertEquals(\"Default Alternate\", \"AMPT\", doubleMetaphone.doubleMetaphone(value, true));\n-\n-        // Check setting Max Code Length\n-        doubleMetaphone.setMaxCodeLen(3);\n-        assertEquals(\"Set Max Code Length\", 3, doubleMetaphone.getMaxCodeLen());\n-        assertEquals(\"Max=3 Primary\",   \"JMP\", doubleMetaphone.doubleMetaphone(value, false));\n-        assertEquals(\"Max=3 Alternate\", \"AMP\", doubleMetaphone.doubleMetaphone(value, true));\n     }\n \n     @Test\n     }\n \n     @Test\n-    public void testCCedilla() {\n-        assertTrue(this.getStringEncoder().isDoubleMetaphoneEqual(\"\\u00e7\", \"S\")); // c-cedilla\n-    }\n-\n-    @Test\n     public void testNTilde() {\n         assertTrue(this.getStringEncoder().isDoubleMetaphoneEqual(\"\\u00f1\", \"N\")); // n-tilde\n+    }\n+\n+    /**\n+     * Test setting maximum length\n+     */\n+    @Test\n+    public void testSetMaxCodeLength() {\n+        final String value = \"jumped\";\n+\n+        final DoubleMetaphone doubleMetaphone = new DoubleMetaphone();\n+\n+        // Sanity check of default settings\n+        assertEquals(\"Default Max Code Length\", 4, doubleMetaphone.getMaxCodeLen());\n+        assertEquals(\"Default Primary\",   \"JMPT\", doubleMetaphone.doubleMetaphone(value, false));\n+        assertEquals(\"Default Alternate\", \"AMPT\", doubleMetaphone.doubleMetaphone(value, true));\n+\n+        // Check setting Max Code Length\n+        doubleMetaphone.setMaxCodeLen(3);\n+        assertEquals(\"Set Max Code Length\", 3, doubleMetaphone.getMaxCodeLen());\n+        assertEquals(\"Max=3 Primary\",   \"JMP\", doubleMetaphone.doubleMetaphone(value, false));\n+        assertEquals(\"Max=3 Alternate\", \"AMP\", doubleMetaphone.doubleMetaphone(value, true));\n     }\n \n     public void validateFixture(final String[][] pairs) {", "timestamp": 1397133495, "metainfo": ""}