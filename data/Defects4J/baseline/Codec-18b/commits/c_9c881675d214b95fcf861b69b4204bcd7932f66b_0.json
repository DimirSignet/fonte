{"sha": "9c881675d214b95fcf861b69b4204bcd7932f66b", "log": "[CODEC-199] Bug in HW rule in Soundex. Applying 2nd version of the patch.  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/language/Soundex.java\n+++ b/src/main/java/org/apache/commons/codec/language/Soundex.java\n      *\n      * @see #US_ENGLISH_MAPPING\n      */\n-    public static final String US_ENGLISH_MAPPING_STRING = \"01230120022455012623010202\";\n+    public static final String US_ENGLISH_MAPPING_STRING = \"0123012#02245501262301#202\";\n \n     /**\n      * This is a default mapping of the 26 letters used in US English. A value of <code>0</code> for a letter position\n     }\n \n     /**\n-     * Used internally by the Soundex algorithm.\n-     *\n-     * Consonants from the same code group separated by W or H are treated as one.\n-     *\n-     * @param str\n-     *                  the cleaned working string to encode (in upper case).\n-     * @param index\n-     *                  the character position to encode\n-     * @return Mapping code for a particular character\n-     * @throws IllegalArgumentException\n-     *                  if the character is not mapped\n-     */\n-    private char getMappingCode(final String str, final int index) {\n-        // map() throws IllegalArgumentException\n-        final char mappedChar = this.map(str.charAt(index));\n-        // HW rule check\n-        if (index > 1 && mappedChar != '0') {\n-            for (int i=index-1 ; i>=0 ; i--) {\n-                final char prevChar = str.charAt(i);\n-                if (this.map(prevChar)==mappedChar) {\n-                    return 0;\n-                }\n-                if ('H'!=prevChar && 'W'!=prevChar) {\n-                    break;\n-                }\n-            }\n-        }\n-        return mappedChar;\n-    }\n-\n-    /**\n      * Returns the maxLength. Standard Soundex\n      *\n      * @deprecated This feature is not needed since the encoding size must be constant. Will be removed in 2.0.\n         char last, mapped;\n         int incount = 1, count = 1;\n         out[0] = str.charAt(0);\n-        // getMappingCode() throws IllegalArgumentException\n-        last = getMappingCode(str, 0);\n+        // map() throws IllegalArgumentException\n+        last = this.map(str.charAt(0));\n         while (incount < str.length() && count < out.length) {\n-            mapped = getMappingCode(str, incount++);\n-            if (mapped != 0) {\n-                if (mapped != '0' && mapped != last) {\n-                    out[count++] = mapped;\n-                }\n+            mapped = this.map(str.charAt(incount++));\n+            if (mapped == '0') {\n+                last = mapped;\n+            } else if (mapped != '#' && mapped != last) {\n+                out[count++] = mapped;\n                 last = mapped;\n             }\n         }", "timestamp": 1427343043, "metainfo": ""}