{"sha": "7bf19f98e6debf76ace944034f7e5d376d4870fd", "log": "[CODEC-136] Use Charset objects when possible, create Charsets for required character encodings.  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/net/BCodec.java\n+++ b/src/main/java/org/apache/commons/codec/net/BCodec.java\n package org.apache.commons.codec.net;\n \n import java.io.UnsupportedEncodingException;\n-\n-import org.apache.commons.codec.CharEncoding;\n+import java.nio.charset.Charset;\n+import java.nio.charset.UnsupportedCharsetException;\n+\n+import org.apache.commons.codec.Charsets;\n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n import org.apache.commons.codec.StringDecoder;\n     /**\n      * The default charset used for string decoding and encoding.\n      */\n-    private final String charset;\n+    private final Charset charset;\n \n     /**\n      * Default constructor.\n      */\n     public BCodec() {\n-        this(CharEncoding.UTF_8);\n+        this(Charsets.UTF_8);\n     }\n \n     /**\n      * \n      * @see <a href=\"http://download.oracle.com/javase/1.5.0/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      */\n-    public BCodec(final String charset) {\n-        super();\n+    public BCodec(final Charset charset) {\n         this.charset = charset;\n+    }\n+\n+    /**\n+     * Constructor which allows for the selection of a default charset\n+     * \n+     * @param charsetName\n+     *                  the default charset to use.\n+     * @throws UnsupportedCharsetException\n+     *             If the named charset is unavailable\n+     * @since 1.7 throws UnsupportedCharsetException if the named charset is unavailable\n+     * @see <a href=\"http://download.oracle.com/javase/1.5.0/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n+     */\n+    public BCodec(final String charsetName) {\n+        this(Charset.forName(charsetName));\n     }\n \n     @Override\n      * @throws EncoderException\n      *                  thrown if a failure condition is encountered during the encoding process.\n      */\n+    public String encode(final String value, final Charset charset) throws EncoderException {\n+        if (value == null) {\n+            return null;\n+        }\n+        return encodeText(value, charset);\n+    }\n+\n+    /**\n+     * Encodes a string into its Base64 form using the specified charset. Unsafe characters are escaped.\n+     * \n+     * @param value\n+     *                  string to convert to Base64 form\n+     * @param charset\n+     *                  the charset for <code>value</code>\n+     * @return Base64 string\n+     * \n+     * @throws EncoderException\n+     *                  thrown if a failure condition is encountered during the encoding process.\n+     */\n     public String encode(final String value, final String charset) throws EncoderException {\n         if (value == null) {\n             return null;\n         }\n         try {\n-            return encodeText(value, charset);\n+            return this.encodeText(value, charset);\n         } catch (UnsupportedEncodingException e) {\n             throw new EncoderException(e.getMessage(), e);\n         }\n         if (value == null) {\n             return null;\n         }\n-        return encode(value, getDefaultCharset());\n+        return encode(value, this.getCharset());\n     }\n \n     /**\n             return null;\n         }\n         try {\n-            return decodeText(value);\n+            return this.decodeText(value);\n         } catch (UnsupportedEncodingException e) {\n             throw new DecoderException(e.getMessage(), e);\n         }\n     }\n \n     /**\n-     * The default charset used for string decoding and encoding.\n-     * \n-     * @return the default string charset.\n+     * Gets the default charset name used for string decoding and encoding.\n+     * \n+     * @return the default charset name\n+     * @since 1.7\n+     */\n+    public Charset getCharset() {\n+        return this.charset;\n+    }\n+\n+    /**\n+     * Gets the default charset name used for string decoding and encoding.\n+     * \n+     * @return the default charset name\n      */\n     public String getDefaultCharset() {\n-        return this.charset;\n+        return this.charset.name();\n     }\n }\n--- a/src/main/java/org/apache/commons/codec/net/QCodec.java\n+++ b/src/main/java/org/apache/commons/codec/net/QCodec.java\n package org.apache.commons.codec.net;\n \n import java.io.UnsupportedEncodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.UnsupportedCharsetException;\n import java.util.BitSet;\n \n import org.apache.commons.codec.CharEncoding;\n     /**\n      * The default charset used for string decoding and encoding.\n      */\n-    private final String charset;\n+    private final Charset charset;\n \n     /**\n      * BitSet of printable characters as defined in RFC 1522.\n      * \n      * @see <a href=\"http://download.oracle.com/javase/1.5.0/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      */\n-    public QCodec(final String charset) {\n+    public QCodec(final Charset charset) {\n         super();\n         this.charset = charset;\n+    }\n+\n+    /**\n+     * Constructor which allows for the selection of a default charset\n+     * \n+     * @param charsetName\n+     *                  the charset to use.\n+     * @throws UnsupportedCharsetException\n+     *             If the named charset is unavailable\n+     * @since 1.7 throws UnsupportedCharsetException if the named charset is unavailable\n+     * @see <a href=\"http://download.oracle.com/javase/1.5.0/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n+     */\n+    public QCodec(final String charsetName) {\n+        this(Charset.forName(charsetName));\n     }\n \n     @Override\n      * @throws EncoderException\n      *                  thrown if a failure condition is encountered during the encoding process.\n      */\n+    public String encode(final String pString, final Charset charset) throws EncoderException {\n+        if (pString == null) {\n+            return null;\n+        }\n+        return encodeText(pString, charset);\n+    }\n+\n+    /**\n+     * Encodes a string into its quoted-printable form using the specified charset. Unsafe characters are escaped.\n+     * \n+     * @param pString\n+     *                  string to convert to quoted-printable form\n+     * @param charset\n+     *                  the charset for pString\n+     * @return quoted-printable string\n+     * \n+     * @throws EncoderException\n+     *                  thrown if a failure condition is encountered during the encoding process.\n+     */\n     public String encode(final String pString, final String charset) throws EncoderException {\n         if (pString == null) {\n             return null;\n         if (pString == null) {\n             return null;\n         }\n-        return encode(pString, getDefaultCharset());\n+        return encode(pString, getCharset());\n     }\n \n     /**\n     }\n \n     /**\n-     * The default charset used for string decoding and encoding.\n-     * \n-     * @return the default string charset.\n+     * Gets the default charset name used for string decoding and encoding.\n+     * \n+     * @return the default charset name\n+     * @since 1.7\n+     */\n+    public Charset getCharset() {\n+        return this.charset;\n+    }\n+\n+    /**\n+     * Gets the default charset name used for string decoding and encoding.\n+     * \n+     * @return the default charset name\n      */\n     public String getDefaultCharset() {\n-        return this.charset;\n+        return this.charset.name();\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/codec/net/RFC1522Codec.java\n+++ b/src/main/java/org/apache/commons/codec/net/RFC1522Codec.java\n package org.apache.commons.codec.net;\n \n import java.io.UnsupportedEncodingException;\n+import java.nio.charset.Charset;\n \n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n      * \n      * @throws EncoderException thrown if there is an error condition during the Encoding \n      *  process.\n-     * @throws UnsupportedEncodingException thrown if charset is not supported \n-     * \n      * @see <a href=\"http://download.oracle.com/javase/1.5.0/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      */\n-    protected String encodeText(final String text, final String charset)\n+    protected String encodeText(final String text, final Charset charset)\n+     throws EncoderException  \n+    {\n+        if (text == null) {\n+            return null;\n+        }\n+        StringBuffer buffer = new StringBuffer();\n+        buffer.append(PREFIX); \n+        buffer.append(charset);\n+        buffer.append(SEP);\n+        buffer.append(this.getEncoding());\n+        buffer.append(SEP);\n+        byte [] rawData = this.doEncoding(text.getBytes(charset)); \n+        buffer.append(StringUtils.newStringUsAscii(rawData));\n+        buffer.append(POSTFIX); \n+        return buffer.toString();\n+    }\n+    \n+    /**\n+     * Applies an RFC 1522 compliant encoding scheme to the given string of text with the \n+     * given charset. This method constructs the \"encoded-word\" header common to all the \n+     * RFC 1522 codecs and then invokes {@link #doEncoding(byte [])} method of a concrete \n+     * class to perform the specific encoding.\n+     * \n+     * @param text a string to encode\n+     * @param charsetName the charset to use\n+     * \n+     * @return RFC 1522 compliant \"encoded-word\"\n+     * \n+     * @throws EncoderException thrown if there is an error condition during the Encoding \n+     *  process.\n+     * @throws UnsupportedEncodingException if charset is not available \n+     * \n+     * @see <a href=\"http://download.oracle.com/javase/1.5.0/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n+     */\n+    protected String encodeText(final String text, final String charsetName)\n      throws EncoderException, UnsupportedEncodingException  \n     {\n         if (text == null) {\n             return null;\n         }\n-        StringBuffer buffer = new StringBuffer();\n-        buffer.append(PREFIX); \n-        buffer.append(charset);\n-        buffer.append(SEP);\n-        buffer.append(getEncoding());\n-        buffer.append(SEP);\n-        byte [] rawdata = doEncoding(text.getBytes(charset)); \n-        buffer.append(StringUtils.newStringUsAscii(rawdata));\n-        buffer.append(POSTFIX); \n-        return buffer.toString();\n+        return this.encodeText(text, Charset.forName(charsetName));\n     }\n     \n     /**\n--- a/src/test/java/org/apache/commons/codec/net/BCodecTest.java\n+++ b/src/test/java/org/apache/commons/codec/net/BCodecTest.java\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.fail;\n+\n+import java.nio.charset.UnsupportedCharsetException;\n \n import org.apache.commons.codec.CharEncoding;\n import org.apache.commons.codec.DecoderException;\n         }\n     }\n \n-    @Test\n+    @Test(expected=UnsupportedCharsetException.class)\n     public void testInvalidEncoding() {\n-        BCodec bcodec = new BCodec(\"NONSENSE\");\n-        try {\n-            bcodec.encode(\"Hello there!\");\n-            fail(\"We set the encoding to a bogus NONSENSE value, this shouldn't have worked.\");\n-        } catch (EncoderException ee) {\n-            // Exception expected, test segment passes.\n-        }\n-        try {\n-            bcodec.decode(\"=?NONSENSE?B?Hello there!?=\");\n-            fail(\"We set the encoding to a bogus NONSENSE value, this shouldn't have worked.\");\n-        } catch (DecoderException ee) {\n-            // Exception expected, test segment passes.\n-        }\n+        new BCodec(\"NONSENSE\");\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/codec/net/QCodecTest.java\n+++ b/src/test/java/org/apache/commons/codec/net/QCodecTest.java\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n+import java.nio.charset.UnsupportedCharsetException;\n+\n import org.apache.commons.codec.CharEncoding;\n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n     }\n     \n \n-    @Test\n+    @Test(expected=UnsupportedCharsetException.class)\n     public void testInvalidEncoding() {\n-        QCodec qcodec = new QCodec(\"NONSENSE\");\n-            try {\n-               qcodec.encode(\"Hello there!\");\n-                fail( \"We set the encoding to a bogus NONSENSE vlaue, this shouldn't have worked.\");\n-            } catch (EncoderException ee) {\n-                // Exception expected, test segment passes.\n-            }\n-            try {\n-               qcodec.decode(\"=?NONSENSE?Q?Hello there!?=\");\n-                fail( \"We set the encoding to a bogus NONSENSE vlaue, this shouldn't have worked.\");\n-            } catch (DecoderException ee) {\n-                // Exception expected, test segment passes.\n-            }\n+        new QCodec(\"NONSENSE\");\n     }\n \n     @Test", "timestamp": 1332948429, "metainfo": ""}