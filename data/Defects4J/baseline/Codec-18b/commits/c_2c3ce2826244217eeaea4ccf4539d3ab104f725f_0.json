{"sha": "2c3ce2826244217eeaea4ccf4539d3ab104f725f", "log": "Add default case: cannot happen currently, so throw IllegalStateException to trap invalid code changes  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/binary/Base64.java\n+++ b/src/main/java/org/apache/commons/codec/binary/Base64.java\n             final byte[] buffer = ensureBufferSize(encodeSize, context);\n             final int savedPos = context.pos;\n             switch (context.modulus) { // 0-2\n+                case 0 : // nothing to do here\n+                    break;\n                 case 1 : // 8 bits = 6 + 2\n                     // top 6 bits:\n                     buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 2) & MASK_6BITS];\n                         buffer[context.pos++] = PAD;\n                     }\n                     break;\n+                default:\n+                    throw new IllegalStateException(\"Impossible modulus \"+context.modulus);\n             }\n             context.currentLinePos += context.pos - savedPos; // keep track of current line position\n             // if currentPos == 0 we are at the start of a line, so don't add CRLF\n             // We have some spare bits remaining\n             // Output all whole multiples of 8 bits and ignore the rest\n             switch (context.modulus) {\n-           //   case 1: // 6 bits - ignore entirely\n-           //       break;\n+//              case 0 : // impossible, as excluded above\n+                case 1 : // 6 bits - ignore entirely\n+                    // TODO not currently tested; perhaps it is impossible?\n+                    break;\n                 case 2 : // 12 bits = 8 + 4\n                     context.ibitWorkArea = context.ibitWorkArea >> 4; // dump the extra 4 bits\n                     buffer[context.pos++] = (byte) ((context.ibitWorkArea) & MASK_8BITS);\n                     buffer[context.pos++] = (byte) ((context.ibitWorkArea >> 8) & MASK_8BITS);\n                     buffer[context.pos++] = (byte) ((context.ibitWorkArea) & MASK_8BITS);\n                     break;\n+                default:\n+                    throw new IllegalStateException(\"Impossible modulus \"+context.modulus);\n             }\n         }\n     }", "timestamp": 1347197471, "metainfo": ""}