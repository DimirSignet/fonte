{"sha": "981c0002d5accb9ebc056b7a34025fd814c4e17f", "log": "[CODEC-74] Allow for uppercase letters as the output of Hex.encodeHex()  ", "commit": "\n--- a/src/java/org/apache/commons/codec/binary/Hex.java\n+++ b/src/java/org/apache/commons/codec/binary/Hex.java\n     /** \n      * Used to build output as Hex \n      */\n-    private static final char[] DIGITS = {\n+    private static final char[] DIGITS_LOWER = {\n         '0', '1', '2', '3', '4', '5', '6', '7',\n            '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'\n+    };\n+\n+    /** \n+     * Used to build output as Hex \n+     */\n+    private static final char[] DIGITS_UPPER = {\n+        '0', '1', '2', '3', '4', '5', '6', '7',\n+           '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'\n     };\n \n     /**\n      * given byte.\n      * \n      * @param data\n-     *                  a byte[] to convert to Hex characters\n+     *            a byte[] to convert to Hex characters\n      * @return A char[] containing hexadecimal characters\n      */\n     public static char[] encodeHex(byte[] data) {\n+        return encodeHex(data, true);\n+    }\n+\n+    /**\n+     * Converts an array of bytes into an array of characters representing the hexadecimal values of each byte in order.\n+     * The returned array will be double the length of the passed array, as it takes two characters to represent any\n+     * given byte.\n+     * \n+     * @param data\n+     *            a byte[] to convert to Hex characters\n+     * @param toLowerCase\n+     *            <code>true</code> converts to lowercase, <code>false</code> to uppercase\n+     * @return A char[] containing hexadecimal characters\n+     */\n+    public static char[] encodeHex(byte[] data, boolean toLowerCase) {\n+        return encodeHex(data, toLowerCase ? DIGITS_LOWER : DIGITS_UPPER);\n+    }\n+\n+    /**\n+     * Converts an array of bytes into an array of characters representing the hexadecimal values of each byte in order.\n+     * The returned array will be double the length of the passed array, as it takes two characters to represent any\n+     * given byte.\n+     * \n+     * @param data\n+     *            a byte[] to convert to Hex characters\n+     * @param toDigits\n+     *            the output alphabet\n+     * @return A char[] containing hexadecimal characters\n+     */\n+    protected static char[] encodeHex(byte[] data, char[] toDigits) {\n \n         int l = data.length;\n \n-           char[] out = new char[l << 1];\n-\n-           // two characters form the hex value.\n-           for (int i = 0, j = 0; i < l; i++) {\n-               out[j++] = DIGITS[(0xF0 & data[i]) >>> 4 ];\n-               out[j++] = DIGITS[ 0x0F & data[i] ];\n-           }\n-\n-           return out;\n+        char[] out = new char[l << 1];\n+\n+        // two characters form the hex value.\n+        for (int i = 0, j = 0; i < l; i++) {\n+            out[j++] = toDigits[(0xF0 & data[i]) >>> 4];\n+            out[j++] = toDigits[0x0F & data[i]];\n+        }\n+\n+        return out;\n     }\n \n     /**\n--- a/src/test/org/apache/commons/codec/binary/HexTest.java\n+++ b/src/test/org/apache/commons/codec/binary/HexTest.java\n             new String(c));\n     }\n \n-    public void testHelloWorld() {\n+    public void testHelloWorldLowerCaseHex() {\n         byte[] b = \"Hello World\".getBytes();\n-        char[] c = Hex.encodeHex(b);\n-        assertEquals(\"48656c6c6f20576f726c64\", new String(c));\n+        final String expected = \"48656c6c6f20576f726c64\";\n+        char[] actual;\n+        actual = Hex.encodeHex(b);\n+        assertTrue(expected.equals(new String(actual)));\n+        actual = Hex.encodeHex(b, true);\n+        assertTrue(expected.equals(new String(actual)));\n+        actual = Hex.encodeHex(b, false);\n+        assertFalse(expected.equals(new String(actual)));\n+    }\n+\n+    public void testHelloWorldUpperCaseHex() {\n+        byte[] b = \"Hello World\".getBytes();\n+        final String expected = \"48656C6C6F20576F726C64\";\n+        char[] actual;\n+        actual = Hex.encodeHex(b);\n+        assertFalse(expected.equals(new String(actual)));\n+        actual = Hex.encodeHex(b, true);\n+        assertFalse(expected.equals(new String(actual)));\n+        actual = Hex.encodeHex(b, false);\n+        assertTrue(expected.equals(new String(actual)));\n     }\n }", "timestamp": 1232484784, "metainfo": ""}