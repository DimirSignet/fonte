{"sha": "fc393f7bdf6c971cb0dcd977d3015ad5ce524149", "log": "Partial patch application of [CODEC-148] More tests and minor things.  ", "commit": "\n--- /dev/null\n+++ b/b/src/test/java/org/apache/commons/codec/digest/Sha2CryptTest.java\n+package org.apache.commons.codec.digest;\n+\n+import static org.junit.Assert.assertNotNull;\n+import org.junit.Test;\n+\n+public class Sha2CryptTest {\n+\n+    @Test\n+    public void testCtor() {\n+        assertNotNull(new Sha2Crypt());\n+    }\n+\n+}\n--- a/src/main/java/org/apache/commons/codec/digest/Crypt.java\n+++ b/src/main/java/org/apache/commons/codec/digest/Crypt.java\n  * limitations under the License.\n  */\n package org.apache.commons.codec.digest;\n-\n-import java.security.NoSuchAlgorithmException;\n \n import org.apache.commons.codec.Charsets;\n \n      * @param keyBytes\n      *            plaintext password\n      * @return hash value\n-     * @throws NoSuchAlgorithmException if no algorithm implementation is available\n+     * @throws RuntimeException\n+     *            when a {@link java.security.NoSuchAlgorithmException} is caught.\n      */\n-    public static String crypt(byte[] keyBytes) throws NoSuchAlgorithmException {\n+    public static String crypt(byte[] keyBytes) {\n         return crypt(keyBytes, null);\n     }\n \n      * @param salt\n      *            salt value\n      * @return hash value\n-     * @throws IllegalArgumentException if the salt does not match the allowed pattern\n-     * @throws NoSuchAlgorithmException if no algorithm implementation is available\n+     * @throws IllegalArgumentException\n+     *              if the salt does not match the allowed pattern\n+     * @throws RuntimeException\n+     *              when a {@link java.security.NoSuchAlgorithmException} is caught.\n      */\n-    public static String crypt(byte[] keyBytes, String salt) throws NoSuchAlgorithmException {\n+    public static String crypt(byte[] keyBytes, String salt) {\n         if (salt == null) {\n             return Sha2Crypt.sha512Crypt(keyBytes);\n         } else if (salt.startsWith(Sha2Crypt.SHA512_PREFIX)) {\n      * @param key\n      *            plaintext password\n      * @return hash value\n-     * @throws NoSuchAlgorithmException if no algorithm implementation is available\n+     * @throws RuntimeException\n+     *              when a {@link java.security.NoSuchAlgorithmException} is caught.\n      */\n-    public static String crypt(String key) throws NoSuchAlgorithmException {\n+    public static String crypt(String key) {\n         return crypt(key, null);\n     }\n \n      * @param salt\n      *            salt value\n      * @return hash value, i.e. encrypted password including the salt string\n-     * @throws IllegalArgumentException if the salt does not match the allowed pattern\n-     * @throws NoSuchAlgorithmException if no algorithm implementation is available\n+     * @throws IllegalArgumentException\n+     *              if the salt does not match the allowed pattern\n+     * @throws RuntimeException\n+     *              when a {@link java.security.NoSuchAlgorithmException} is caught.     *\n      */\n-    public static String crypt(String key, String salt) throws NoSuchAlgorithmException {\n+    public static String crypt(String key, String salt) {\n         return crypt(key.getBytes(Charsets.UTF_8), salt);\n     }\n }\n--- a/src/main/java/org/apache/commons/codec/digest/Md5Crypt.java\n+++ b/src/main/java/org/apache/commons/codec/digest/Md5Crypt.java\n package org.apache.commons.codec.digest;\n \n import java.security.MessageDigest;\n-import java.security.NoSuchAlgorithmException;\n import java.util.Arrays;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n     /** The number of bytes of the final hash. */\n     private static final int BLOCKSIZE = 16;\n \n-    /** The MessageDigest MD5_ALGORITHM. */\n-    private static final String MD5_ALGORITHM = \"MD5\";\n-\n     /** The Identifier of this crypt() variant. */\n     static final String MD5_PREFIX = \"$1$\";\n \n     /**\n      * See {@link #apr1Crypt(String, String)} for details.\n      *\n-     * @throws NoSuchAlgorithmException if no \"MD5\" algorithm implementation is available\n-     */\n-    public static String apr1Crypt(byte[] keyBytes) throws NoSuchAlgorithmException {\n+     * @throws RuntimeException\n+     *              when a {@link java.security.NoSuchAlgorithmException} is caught.     *\n+     */\n+    public static String apr1Crypt(byte[] keyBytes) {\n         return apr1Crypt(keyBytes, APR1_PREFIX + B64.getRandomSalt(8));\n     }\n \n      * See {@link #apr1Crypt(String, String)} for details.\n      *\n      * @throws IllegalArgumentException if the salt does not match the allowed pattern\n-     * @throws NoSuchAlgorithmException if no \"MD5\" algorithm implementation is available\n-     */\n-    public static String apr1Crypt(byte[] keyBytes, String salt) throws NoSuchAlgorithmException {\n+     * @throws RuntimeException\n+     *              when a {@link java.security.NoSuchAlgorithmException} is caught.\n+     */\n+    public static String apr1Crypt(byte[] keyBytes, String salt) {\n         // to make the md5Crypt regex happy\n         if (salt != null && !salt.startsWith(APR1_PREFIX)) {\n             salt = APR1_PREFIX + salt;\n     /**\n      * See {@link #apr1Crypt(String, String)} for details.\n      *\n-     * @throws NoSuchAlgorithmException if no \"MD5\" algorithm implementation is available\n-     */\n-    public static String apr1Crypt(String keyBytes) throws NoSuchAlgorithmException {\n+     * @throws RuntimeException\n+     *              when a {@link java.security.NoSuchAlgorithmException} is caught.\n+     */\n+    public static String apr1Crypt(String keyBytes) {\n         return apr1Crypt(keyBytes.getBytes(Charsets.UTF_8));\n     }\n \n      *            salt string including the prefix and optionally garbage at the end.\n      *            Will be generated randomly if null.\n      * @return computed hash value\n-     * @throws IllegalArgumentException if the salt does not match the allowed pattern\n-     * @throws NoSuchAlgorithmException if no \"MD5\" algorithm implementation is available\n-     */\n-    public static String apr1Crypt(String keyBytes, String salt) throws NoSuchAlgorithmException {\n+     * @throws IllegalArgumentException\n+     *              if the salt does not match the allowed pattern\n+     * @throws RuntimeException\n+     *              when a {@link java.security.NoSuchAlgorithmException} is caught.\n+     */\n+    public static String apr1Crypt(String keyBytes, String salt) {\n         return apr1Crypt(keyBytes.getBytes(Charsets.UTF_8), salt);\n     }\n \n      * <p>\n      * See {@link Crypt#crypt(String, String)} for details.\n      *\n-     * @throws NoSuchAlgorithmException if no \"MD5\" algorithm implementation is available\n-     */\n-    public static String md5Crypt(final byte[] keyBytes) throws NoSuchAlgorithmException {\n+     * @throws RuntimeException\n+     *              when a {@link java.security.NoSuchAlgorithmException} is caught.\n+     */\n+    public static String md5Crypt(final byte[] keyBytes) {\n         return md5Crypt(keyBytes, MD5_PREFIX + B64.getRandomSalt(8));\n     }\n \n      *            salt string including the prefix and optionally garbage at the end.\n      *            Will be generated randomly if null.\n      * @return computed hash value\n-     * @throws IllegalArgumentException if the salt does not match the allowed pattern\n-     * @throws NoSuchAlgorithmException if no \"MD5\" algorithm implementation is available\n-     */\n-    public static String md5Crypt(byte[] keyBytes, String salt) throws NoSuchAlgorithmException {\n+     * @throws IllegalArgumentException\n+     *              if the salt does not match the allowed pattern\n+     * @throws RuntimeException\n+     *              when a {@link java.security.NoSuchAlgorithmException} is caught.\n+     */\n+    public static String md5Crypt(byte[] keyBytes, String salt) {\n         return md5Crypt(keyBytes, salt, MD5_PREFIX);\n     }\n \n      * <p>\n      * See {@link Crypt#crypt(String, String)} or {@link #apr1Crypt(String, String)} for details.\n      *\n-     * @throws IllegalArgumentException if the salt does not match the allowed pattern\n-     * @throws NoSuchAlgorithmException if no \"MD5\" algorithm implementation is available\n+     * @throws IllegalArgumentException\n+     *              if the salt does not match the allowed pattern\n+     * @throws RuntimeException\n+     *              when a {@link java.security.NoSuchAlgorithmException} is caught.\n      */\n     public static String md5Crypt(final byte[] keyBytes, final String salt, final String prefix)\n-            throws NoSuchAlgorithmException {\n+            {\n         int keyLen = keyBytes.length;\n \n         // Extract the real salt from the given string which can be a complete hash string.\n         }\n         byte[] saltBytes = saltString.getBytes(Charsets.UTF_8);\n \n-        MessageDigest ctx = MessageDigest.getInstance(MD5_ALGORITHM);\n+        MessageDigest ctx = DigestUtils.getMd5Digest();\n \n         /*\n          * The password first, since that is what is most unknown\n         /*\n          * Then just as many characters of the MD5(pw,salt,pw)\n          */\n-        MessageDigest ctx1 = MessageDigest.getInstance(MD5_ALGORITHM);\n+        MessageDigest ctx1 = DigestUtils.getMd5Digest();\n         ctx1.update(keyBytes);\n         ctx1.update(saltBytes);\n         ctx1.update(keyBytes);\n          * need 30 seconds to build a 1000 entry dictionary...\n          */\n         for (int i = 0; i < ROUNDS; i++) {\n-            ctx1 = MessageDigest.getInstance(MD5_ALGORITHM);\n+            ctx1 = DigestUtils.getMd5Digest();\n             if ((i & 1) != 0) {\n                 ctx1.update(keyBytes);\n             } else {\n--- a/src/main/java/org/apache/commons/codec/digest/MessageDigestAlgorithms.java\n+++ b/src/main/java/org/apache/commons/codec/digest/MessageDigestAlgorithms.java\n import java.security.MessageDigest;\n \n /**\n- * Standard {@link MessageDigest} algorithm names from the <cite>Java Cryptography Architecture Standard Algorithm \n- * Name Documentation</cite>.\n- * \n+ * Standard {@link MessageDigest} algorithm names from the <cite>Java Cryptography Architecture Standard Algorithm Name\n+ * Documentation</cite>.\n+ *\n  * @see <a href=\"http://docs.oracle.com/javase/6/docs/technotes/guides/security/StandardNames.html\">Java Cryptography\n  *      Architecture Standard Algorithm Name Documentation</a>\n  * @since 1.7\n  * @version $Id$\n  */\n public class MessageDigestAlgorithms {\n+\n+    private MessageDigestAlgorithms() {\n+        // cannot be instantiated.\n+    }\n \n     /**\n      * The MD2 message digest algorithm defined in RFC 1319.\n--- a/src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java\n+++ b/src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java\n package org.apache.commons.codec.digest;\n \n import java.security.MessageDigest;\n-import java.security.NoSuchAlgorithmException;\n import java.util.Arrays;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n     /** Prefix for optional rounds specification. */\n     private static final String ROUNDS_PREFIX = \"rounds=\";\n \n-    /** The SHA-256 MessageDigest algorithm. */\n-    private static final String SHA256_ALGORITHM = \"SHA-256\";\n-\n     /** The number of bytes the final hash value will have (SHA-256 variant). */\n     private static final int SHA256_BLOCKSIZE = 32;\n \n     /** The prefixes that can be used to identify this crypt() variant (SHA-256). */\n     static final String SHA256_PREFIX = \"$5$\";\n-\n-    /** The SHA-512 MessageDigest algorithm. */\n-    private static final String SHA512_ALGORITHM = \"SHA-512\";\n \n     /** The number of bytes the final hash value will have (SHA-512 variant). */\n     private static final int SHA512_BLOCKSIZE = 64;\n      * <p>\n      * See {@link Crypt#crypt(String, String)} for details.\n      *\n-     * @throws NoSuchAlgorithmException if no \"SHA-256\" algorithm implementation is available\n+     * @throws RuntimeException\n+     *              when a {@link java.security.NoSuchAlgorithmException} is caught.\n      */\n-    public static String sha256Crypt(byte[] keyBytes) throws NoSuchAlgorithmException {\n+    public static String sha256Crypt(byte[] keyBytes) {\n         return sha256Crypt(keyBytes, null);\n     }\n \n      * See {@link Crypt#crypt(String, String)} for details.\n      *\n      * @throws IllegalArgumentException if the salt does not match the allowed pattern\n-     * @throws NoSuchAlgorithmException if no \"SHA-256\" algorithm implementation is available\n+     * @throws RuntimeException\n+     *              when a {@link java.security.NoSuchAlgorithmException} is caught.\n      */\n-    public static String sha256Crypt(byte[] keyBytes, String salt) throws NoSuchAlgorithmException {\n+    public static String sha256Crypt(byte[] keyBytes, String salt) {\n         if (salt == null) {\n             salt = SHA256_PREFIX + B64.getRandomSalt(8);\n         }\n-        return sha2Crypt(keyBytes, salt, SHA256_PREFIX, SHA256_BLOCKSIZE, SHA256_ALGORITHM);\n+        return sha2Crypt(keyBytes, salt, SHA256_PREFIX, SHA256_BLOCKSIZE, MessageDigestAlgorithms.SHA_256);\n     }\n \n     /**\n      *            {@link MessageDigest} algorithm identifier string\n      * @return complete hash value including prefix and salt\n      * @throws IllegalArgumentException if the given salt is {@code null} or does not match the allowed pattern\n-     * @throws NoSuchAlgorithmException if no implementation for the given algorithm is available\n+     * @throws RuntimeException\n+     *              when a {@link java.security.NoSuchAlgorithmException} is caught.\n      */\n     private static String sha2Crypt(byte[] keyBytes, String salt, String saltPrefix, int blocksize, String algorithm)\n-            throws NoSuchAlgorithmException {\n+            {\n \n         int keyLen = keyBytes.length;\n \n \n         // 1. start digest A\n         // Prepare for the real work.\n-        MessageDigest ctx = MessageDigest.getInstance(algorithm);\n+        MessageDigest ctx = DigestUtils.getDigest(algorithm);\n \n         // 2. the password string is added to digest A\n         /*\n          * Compute alternate sha512 sum with input KEY, SALT, and KEY. The final result will be added to the first\n          * context.\n          */\n-        MessageDigest altCtx = MessageDigest.getInstance(algorithm);\n+        MessageDigest altCtx = DigestUtils.getDigest(algorithm);\n \n         // 5. add the password to digest B\n         /*\n         /*\n          * Start computation of P byte sequence.\n          */\n-        altCtx = MessageDigest.getInstance(algorithm);\n+        altCtx = DigestUtils.getDigest(algorithm);\n \n         // 14. for every byte in the password (excluding the terminating NUL byte\n         // in the C representation of the string)\n         /*\n          * Start computation of S byte sequence.\n          */\n-        altCtx = MessageDigest.getInstance(algorithm);\n+        altCtx = DigestUtils.getDigest(algorithm);\n \n         // 18. repeast the following 16+A[0] times, where A[0] represents the first\n         // byte in digest A interpreted as an 8-bit unsigned value\n             /*\n              * New context.\n              */\n-            ctx = MessageDigest.getInstance(algorithm);\n+            ctx = DigestUtils.getDigest(algorithm);\n \n             // b) for odd round numbers add the byte sequense P to digest C\n             // c) for even round numbers add digest A/C\n      * <p>\n      * See {@link Crypt#crypt(String, String)} for details.\n      *\n-     * @throws NoSuchAlgorithmException if no \"SHA-512\" algorithm implementation is available\n+     * @throws RuntimeException\n+     *              when a {@link java.security.NoSuchAlgorithmException} is caught.\n      */\n-    public static String sha512Crypt(byte[] keyBytes) throws NoSuchAlgorithmException {\n+    public static String sha512Crypt(byte[] keyBytes) {\n         return sha512Crypt(keyBytes, null);\n     }\n \n      * See {@link Crypt#crypt(String, String)} for details.\n      *\n      * @throws IllegalArgumentException if the salt does not match the allowed pattern\n-     * @throws NoSuchAlgorithmException if no \"SHA-512\" algorithm implementation is available\n+     * @throws RuntimeException\n+     *              when a {@link java.security.NoSuchAlgorithmException} is caught.\n      */\n-    public static String sha512Crypt(byte[] keyBytes, String salt) throws NoSuchAlgorithmException {\n+    public static String sha512Crypt(byte[] keyBytes, String salt) {\n         if (salt == null) {\n             salt = SHA512_PREFIX + B64.getRandomSalt(8);\n         }\n-        return sha2Crypt(keyBytes, salt, SHA512_PREFIX, SHA512_BLOCKSIZE, SHA512_ALGORITHM);\n+        return sha2Crypt(keyBytes, salt, SHA512_PREFIX, SHA512_BLOCKSIZE, MessageDigestAlgorithms.SHA_512);\n     }\n }\n--- a/src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java\n+++ b/src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java\n  */\n package org.apache.commons.codec.digest;\n \n+import org.apache.commons.codec.Charsets;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotSame;\n import static org.junit.Assert.assertTrue;\n-\n-import java.security.NoSuchAlgorithmException;\n-\n-import org.apache.commons.codec.Charsets;\n import org.junit.Test;\n \n public class Apr1CryptTest {\n \n     @Test\n-    public void testApr1CryptStrings() throws NoSuchAlgorithmException {\n+    public void testApr1CryptStrings() {\n         // A random example using htpasswd\n         assertEquals(\"$apr1$TqI9WECO$LHZB2DqRlk9nObiB6vJG9.\", Md5Crypt.apr1Crypt(\"secret\", \"$apr1$TqI9WECO\"));\n         // empty data\n     }\n \n     @Test\n-    public void testApr1CryptBytes() throws NoSuchAlgorithmException {\n+    public void testApr1CryptBytes() {\n+        // random salt\n+        byte[] keyBytes = new byte[] { '!', 'b', 'c', '.' };\n+        String hash = Md5Crypt.apr1Crypt(keyBytes);\n+        assertEquals(hash, Md5Crypt.apr1Crypt(\"!bc.\", hash));\n+\n         // An empty Bytearray equals an empty String\n         assertEquals(\"$apr1$foo$P27KyD1htb4EllIPEYhqi0\", Md5Crypt.apr1Crypt(new byte[0], \"$apr1$foo\"));\n         // UTF-8 stores \\u00e4 \"a with diaeresis\" as two bytes 0xc3 0xa4.\n     }\n \n     @Test\n-    public void testApr1CryptExplicitCall() throws NoSuchAlgorithmException {\n+    public void testApr1CryptExplicitCall() {\n         // When explicitly called the prefix is optional\n         assertEquals(\"$apr1$1234$mAlH7FRST6FiRZ.kcYL.j1\", Md5Crypt.apr1Crypt(\"secret\", \"1234\"));\n         // When explicitly called without salt, a random one will be used.\n         assertTrue(Md5Crypt.apr1Crypt(\"secret\".getBytes(), null).matches(\"^\\\\$apr1\\\\$[a-zA-Z0-9./]{0,8}\\\\$.{1,}$\"));\n     }\n \n+    @Test\n+    public void testApr1LongSalt() {\n+        assertEquals(\"$apr1$12345678$0lqb/6VUFP8JY/s/jTrIk0\", Md5Crypt.apr1Crypt(\"secret\", \"12345678901234567890\"));\n+    }\n+\n     @Test(expected = NullPointerException.class)\n-    public void testApr1CryptNullData() throws NoSuchAlgorithmException {\n+    public void testApr1CryptNullData() {\n         Md5Crypt.apr1Crypt((byte[]) null);\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n-    public void testApr1CryptWithEmptySalt() throws NoSuchAlgorithmException {\n+    public void testApr1CryptWithEmptySalt() {\n         Md5Crypt.apr1Crypt(\"secret\".getBytes(), \"\");\n     }\n+\n+    @Test\n+    public void testApr1CryptWithoutSalt() {\n+        // Without salt, a random is generated\n+        String hash = Md5Crypt.apr1Crypt(\"secret\");\n+        assertTrue(hash.matches(\"^\\\\$apr1\\\\$[a-zA-Z0-9\\\\./]{8}\\\\$[a-zA-Z0-9\\\\./]{22}$\"));\n+        String hash2 = Md5Crypt.apr1Crypt(\"secret\");\n+        assertNotSame(hash, hash2);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testApr1CryptWithInvalidSalt() {\n+        Md5Crypt.apr1Crypt(new byte[0], \"!\");\n+    }\n }\n--- a/src/test/java/org/apache/commons/codec/digest/B64Test.java\n+++ b/src/test/java/org/apache/commons/codec/digest/B64Test.java\n package org.apache.commons.codec.digest;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n import org.junit.Test;\n \n public class B64Test {\n+\n+    @Test\n+    public void testB64T() {\n+        assertNotNull(new B64()); // for the 100% code coverage :)\n+        assertEquals(64, B64.B64T.length());\n+    }\n \n     @Test\n     public void testB64from24bit() {\n--- a/src/test/java/org/apache/commons/codec/digest/CryptTest.java\n+++ b/src/test/java/org/apache/commons/codec/digest/CryptTest.java\n  */\n package org.apache.commons.codec.digest;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n-\n-import java.security.NoSuchAlgorithmException;\n-\n import org.junit.Test;\n \n public class CryptTest {\n \n     @Test\n-    public void testDefaultCryptVariant() throws NoSuchAlgorithmException {\n+    public void testCrypt() {\n+        assertNotNull(new Crypt()); // just for Test Coverage\n+    }\n+\n+    @Test\n+    public void testDefaultCryptVariant() {\n         // If salt is null or completely omitted, a random \"$6$\" is used.\n         assertTrue(Crypt.crypt(\"secret\").startsWith(\"$6$\"));\n         assertTrue(Crypt.crypt(\"secret\", null).startsWith(\"$6$\"));\n+    }\n+\n+    @Test\n+    public void testCryptWithBytes() {\n+        byte[] keyBytes = new byte[] { 'b', 'y', 't', 'e' };\n+        String hash = Crypt.crypt(keyBytes);\n+        assertEquals(hash, Crypt.crypt(\"byte\", hash));\n     }\n \n     /**\n      * hash would not be verifyable with other implementations of crypt().\n      */\n     @Test(expected = IllegalArgumentException.class)\n-    public void testCryptWithEmptySalt() throws NoSuchAlgorithmException {\n+    public void testCryptWithEmptySalt() {\n         Crypt.crypt(\"secret\", \"\");\n     }\n \n--- a/src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java\n+++ b/src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java\n \n package org.apache.commons.codec.digest;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n-\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.security.MessageDigest;\n \n import org.apache.commons.codec.binary.Hex;\n import org.apache.commons.codec.binary.StringUtils;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.fail;\n import org.junit.Test;\n \n /**\n \n     @Test\n     public void testConstructable() {\n-        new DigestUtils();\n+        assertNotNull(new DigestUtils());\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java\n+++ b/src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java\n  */\n package org.apache.commons.codec.digest;\n \n+import org.apache.commons.codec.Charsets;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n-\n-import java.security.NoSuchAlgorithmException;\n-\n-import org.apache.commons.codec.Charsets;\n import org.junit.Test;\n \n public class Md5CryptTest {\n \n     @Test\n-    public void testMd5CryptStrings() throws NoSuchAlgorithmException {\n+    public void testCtor() {\n+        assertNotNull(new Md5Crypt()); // for code-coverage\n+    }\n+\n+    @Test\n+    public void testMd5CryptStrings() {\n         // empty data\n         assertEquals(\"$1$foo$9mS5ExwgIECGE5YKlD5o91\", Crypt.crypt(\"\", \"$1$foo\"));\n         // salt gets cut at dollar sign\n     }\n \n     @Test\n-    public void testMd5CryptBytes() throws NoSuchAlgorithmException {\n+    public void testMd5CryptBytes() {\n         // An empty Bytearray equals an empty String\n         assertEquals(\"$1$foo$9mS5ExwgIECGE5YKlD5o91\", Crypt.crypt(new byte[0], \"$1$foo\"));\n         // UTF-8 stores \\u00e4 \"a with diaeresis\" as two bytes 0xc3 0xa4.\n     }\n \n     @Test\n-    public void testMd5CryptExplicitCall() throws NoSuchAlgorithmException {\n+    public void testMd5CryptExplicitCall() {\n         assertTrue(Md5Crypt.md5Crypt(\"secret\".getBytes()).matches(\"^\\\\$1\\\\$[a-zA-Z0-9./]{0,8}\\\\$.{1,}$\"));\n         assertTrue(Md5Crypt.md5Crypt(\"secret\".getBytes(), null).matches(\"^\\\\$1\\\\$[a-zA-Z0-9./]{0,8}\\\\$.{1,}$\"));\n     }\n \n+    @Test\n+    public void testMd5CryptLongInput() {\n+        assertEquals(\"$1$1234$MoxekaNNUgfPRVqoeYjCD/\", Crypt.crypt(\"12345678901234567890\", \"$1$1234\"));\n+    }\n+\n     @Test(expected = NullPointerException.class)\n-    public void testMd5CryptNullData() throws NoSuchAlgorithmException {\n+    public void testMd5CryptNullData() {\n         Md5Crypt.md5Crypt((byte[]) null);\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n-    public void testMd5CryptWithEmptySalt() throws NoSuchAlgorithmException {\n+    public void testMd5CryptWithEmptySalt() {\n         Md5Crypt.md5Crypt(\"secret\".getBytes(), \"\");\n     }\n }\n--- a/src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java\n+++ b/src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java\n  */\n package org.apache.commons.codec.digest;\n \n+import java.util.Arrays;\n+\n+import org.apache.commons.codec.Charsets;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n-\n-import java.security.NoSuchAlgorithmException;\n-\n-import org.apache.commons.codec.Charsets;\n import org.junit.Test;\n \n public class Sha256CryptTest {\n \n     @Test\n-    public void testSha256CryptStrings() throws NoSuchAlgorithmException {\n+    public void testSha256CryptStrings() {\n         // empty data\n         assertEquals(\"$5$foo$Fq9CX624QIfnCAmlGiPKLlAasdacKCRxZztPoeo7o0B\", Crypt.crypt(\"\", \"$5$foo\"));\n         // salt gets cut at dollar sign\n     }\n \n     @Test\n-    public void testSha256CryptBytes() throws NoSuchAlgorithmException {\n+    public void testSha256CryptBytes() {\n         // An empty Bytearray equals an empty String\n         assertEquals(\"$5$foo$Fq9CX624QIfnCAmlGiPKLlAasdacKCRxZztPoeo7o0B\", Crypt.crypt(new byte[0], \"$5$foo\"));\n         // UTF-8 stores \\u00e4 \"a with diaeresis\" as two bytes 0xc3 0xa4.\n     }\n \n     @Test\n-    public void testSha256CryptExplicitCall() throws NoSuchAlgorithmException {\n+    public void testSha2CryptRounds() {\n+        // minimum rounds?\n+        assertEquals(\"$5$rounds=1000$abcd$b8MCU4GEeZIekOy5ahQ8EWfT330hvYGVeDYkBxXBva.\", Sha2Crypt.sha256Crypt(\"secret\".getBytes(Charsets.UTF_8), \"$5$rounds=50$abcd$\"));\n+        assertEquals(\"$5$rounds=1001$abcd$SQsJZs7KXKdd2DtklI3TY3tkD7UYA99RD0FBLm4Sk48\", Sha2Crypt.sha256Crypt(\"secret\".getBytes(Charsets.UTF_8), \"$5$rounds=1001$abcd$\"));\n+        assertEquals(\"$5$rounds=9999$abcd$Rh/8ngVh9oyuS6lL3.fsq.9xbvXJsfyKWxSjO2mPIa7\", Sha2Crypt.sha256Crypt(\"secret\".getBytes(Charsets.UTF_8), \"$5$rounds=9999$abcd\"));\n+    }\n+\n+    @Test\n+    public void testSha256CryptExplicitCall() {\n         assertTrue(Sha2Crypt.sha256Crypt(\"secret\".getBytes()).matches(\"^\\\\$5\\\\$[a-zA-Z0-9./]{0,16}\\\\$.{1,}$\"));\n         assertTrue(Sha2Crypt.sha256Crypt(\"secret\".getBytes(), null).matches(\"^\\\\$5\\\\$[a-zA-Z0-9./]{0,16}\\\\$.{1,}$\"));\n     }\n \n     @Test(expected = NullPointerException.class)\n-    public void testSha256CryptNullData() throws NoSuchAlgorithmException {\n+    public void testSha256CryptNullData() {\n         Sha2Crypt.sha256Crypt((byte[]) null);\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n-    public void testSha256CryptWithEmptySalt() throws NoSuchAlgorithmException {\n+    public void testSha256CryptWithEmptySalt() {\n         Sha2Crypt.sha256Crypt(\"secret\".getBytes(), \"\");\n     }\n+\n+    @Test\n+    public void testSha256LargetThanBlocksize() {\n+        byte[] buffer = new byte[200];\n+        Arrays.fill(buffer, 0, 200, (byte)'A');\n+        assertEquals(\"$5$abc$HbF3RRc15OwNKB/RZZ5F.1I6zsLcKXHQoSdB9Owx/Q8\", Sha2Crypt.sha256Crypt(buffer, \"$5$abc\"));\n+    }\n }\n--- a/src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java\n+++ b/src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java\n  */\n package org.apache.commons.codec.digest;\n \n+import java.util.Arrays;\n+\n+import org.apache.commons.codec.Charsets;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n-\n-import java.security.NoSuchAlgorithmException;\n-\n-import org.apache.commons.codec.Charsets;\n+import org.junit.Ignore;\n import org.junit.Test;\n \n public class Sha512CryptTest {\n \n     @Test\n-    public void testSha512CryptStrings() throws NoSuchAlgorithmException {\n+    public void testSha512CryptStrings() {\n         // empty data\n         assertEquals(\"$6$foo$Nywkte7LPWjaJhWjNeGJN.dFdY3pN1wYlGifyRLYOVlGS9EMSiZaDDe/BGSOYQ327q9.32I4UqQ5odsqvsBLX/\", Crypt.crypt(\"\", \"$6$foo\"));\n         // salt gets cut at dollar sign\n     }\n \n     @Test\n-    public void testSha512CryptBytes() throws NoSuchAlgorithmException {\n+    public void testSha512CryptBytes() {\n         // An empty Bytearray equals an empty String\n         assertEquals(\"$6$foo$Nywkte7LPWjaJhWjNeGJN.dFdY3pN1wYlGifyRLYOVlGS9EMSiZaDDe/BGSOYQ327q9.32I4UqQ5odsqvsBLX/\", Crypt.crypt(new byte[0], \"$6$foo\"));\n         // UTF-8 stores \\u00e4 \"a with diaeresis\" as two bytes 0xc3 0xa4.\n     }\n \n     @Test\n-    public void testSha512CryptExplicitCall() throws NoSuchAlgorithmException {\n+    public void testSha512CryptExplicitCall() {\n         assertTrue(Sha2Crypt.sha512Crypt(\"secret\".getBytes()).matches(\"^\\\\$6\\\\$[a-zA-Z0-9./]{0,16}\\\\$.{1,}$\"));\n         assertTrue(Sha2Crypt.sha512Crypt(\"secret\".getBytes(), null).matches(\"^\\\\$6\\\\$[a-zA-Z0-9./]{0,16}\\\\$.{1,}$\"));\n     }\n \n     @Test(expected = NullPointerException.class)\n-    public void testSha512CryptNullData() throws NoSuchAlgorithmException {\n+    public void testSha512CryptNullData() {\n         Sha2Crypt.sha512Crypt((byte[]) null);\n     }\n \n+    @Ignore\n+    public void testSha512CryptNullSalt() {\n+        // cannot be tested as sha512Crypt() with all params is private and\n+        // all public methods check for salt==null.\n+    }\n+\n+    @Test\n+    public void testSha2CryptRounds() {\n+        // minimum rounds?\n+        assertEquals(\"$5$rounds=1000$abcd$b8MCU4GEeZIekOy5ahQ8EWfT330hvYGVeDYkBxXBva.\", Sha2Crypt.sha256Crypt(\"secret\".getBytes(Charsets.UTF_8), \"$5$rounds=50$abcd$\"));\n+        assertEquals(\"$5$rounds=1001$abcd$SQsJZs7KXKdd2DtklI3TY3tkD7UYA99RD0FBLm4Sk48\", Sha2Crypt.sha256Crypt(\"secret\".getBytes(Charsets.UTF_8), \"$5$rounds=1001$abcd$\"));\n+        assertEquals(\"$5$rounds=9999$abcd$Rh/8ngVh9oyuS6lL3.fsq.9xbvXJsfyKWxSjO2mPIa7\", Sha2Crypt.sha256Crypt(\"secret\".getBytes(Charsets.UTF_8), \"$5$rounds=9999$abcd\"));\n+    }\n+\n     @Test(expected = IllegalArgumentException.class)\n-    public void testSha512CryptWithEmptySalt() throws NoSuchAlgorithmException {\n+    public void testSha2CryptWrongSalt() {\n+        Sha2Crypt.sha512Crypt(\"secret\".getBytes(Charsets.UTF_8), \"xx\");\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testSha512CryptWithEmptySalt() {\n         Sha2Crypt.sha512Crypt(\"secret\".getBytes(), \"\");\n     }\n+\n+    @Test\n+    public void testSha256LargetThanBlocksize() {\n+        byte[] buffer = new byte[200];\n+        Arrays.fill(buffer, 0, 200, (byte)'A');\n+        assertEquals(\"$6$abc$oP/h8PRhCKIA66KSTjGwNsQMSLLZnuFOTjOhrqNrDkKgjTlpePSqibB0qtmDapMbP/zN1cUEYSeHFrpgqZ.GG1\", Sha2Crypt.sha512Crypt(buffer, \"$6$abc\"));\n+    }\n }\n--- a/src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java\n+++ b/src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java\n  */\n package org.apache.commons.codec.digest;\n \n+import org.apache.commons.codec.Charsets;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n import static org.junit.Assert.assertTrue;\n-\n-import java.security.NoSuchAlgorithmException;\n-\n-import org.apache.commons.codec.Charsets;\n import org.junit.Test;\n \n public class UnixCryptTest {\n \n     @Test\n-    public void testUnixCryptStrings() throws NoSuchAlgorithmException {\n+    public void testCtor() {\n+        assertNotNull(new UnixCrypt());\n+    }\n+\n+    @Test\n+    public void testUnixCryptStrings() {\n         // trivial test\n         assertEquals(\"xxWAum7tHdIUw\", Crypt.crypt(\"secret\", \"xx\"));\n         // empty data\n     }\n \n     @Test\n-    public void testUnixCryptBytes() throws NoSuchAlgorithmException {\n+    public void testUnixCryptBytes() {\n         // An empty Bytearray equals an empty String\n         assertEquals(\"12UFlHxel6uMM\", Crypt.crypt(new byte[0], \"12\"));\n         // UTF-8 stores \\u00e4 \"a with diaeresis\" as two bytes 0xc3 0xa4.\n     }\n \n     /**\n+     * Single character salts are illegal!\n+     * E.g. with glibc 2.13, crypt(\"secret\", \"x\") = \"xxZREZpkHZpkI\" but\n+     * crypt(\"secret\", \"xx\") = \"xxWAum7tHdIUw\" which makes it unverifyable.\n+     */\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testUnixCryptWithHalfSalt() {\n+        UnixCrypt.crypt(\"secret\", \"x\");\n+    }\n+\n+    /**\n      * Unimplemented \"$foo$\" salt prefixes would be threated as UnixCrypt salt.\n      */\n     @Test(expected = IllegalArgumentException.class)\n     public void testUnixCryptWithEmptySalt() {\n         UnixCrypt.crypt(\"secret\", \"\");\n     }\n+\n+    @Test\n+    public void testUnixCryptWithoutSalt() {\n+        String hash = UnixCrypt.crypt(\"foo\");\n+        assertTrue(hash.matches(\"^[a-zA-Z0-9./]{13}$\"));\n+        String hash2 = UnixCrypt.crypt(\"foo\");\n+        assertNotSame(hash, hash2);\n+    }\n }", "timestamp": 1346515053, "metainfo": ""}