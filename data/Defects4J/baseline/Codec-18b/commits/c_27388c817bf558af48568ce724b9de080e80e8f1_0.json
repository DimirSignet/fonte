{"sha": "27388c817bf558af48568ce724b9de080e80e8f1", "log": "FindBugs  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/cli/Digest.java\n+++ b/src/main/java/org/apache/commons/codec/cli/Digest.java\n             if (file.isFile()) {\n                 println(prefix, DigestUtils.digest(messageDigest, file), source);\n             } else if (file.isDirectory()) {\n-                run(prefix, messageDigest, file.listFiles());\n+                final File[] listFiles = file.listFiles();\n+                if (listFiles != null) {\n+                    run(prefix, messageDigest, listFiles);\n+                }\n             } else {\n                 // use the default charset for the command-line parameter\n                 final byte[] bytes = source.getBytes(Charset.defaultCharset());\n--- a/src/main/java/org/apache/commons/codec/digest/Md5Crypt.java\n+++ b/src/main/java/org/apache/commons/codec/digest/Md5Crypt.java\n         } else {\n             final Pattern p = Pattern.compile(\"^\" + prefix.replace(\"$\", \"\\\\$\") + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\");\n             final Matcher m = p.matcher(salt);\n-            if (m == null || !m.find()) {\n+            if (!m.find()) {\n                 throw new IllegalArgumentException(\"Invalid salt value: \" + salt);\n             }\n             saltString = m.group(1);\n--- a/src/main/java/org/apache/commons/codec/digest/PureJavaCrc32C.java\n+++ b/src/main/java/org/apache/commons/codec/digest/PureJavaCrc32C.java\n       case 2: localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];\n       case 1: localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];\n       default:\n-        /* nothing */\n+        break; // satisfy Findbugs\n     }\n \n     // Publish crc out to object\n--- a/src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java\n+++ b/src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java\n         }\n \n         final Matcher m = SALT_PATTERN.matcher(salt);\n-        if (m == null || !m.find()) {\n+        if (!m.find()) {\n             throw new IllegalArgumentException(\"Invalid salt value: \" + salt);\n         }\n         if (m.group(3) != null) {\n--- a/src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java\n+++ b/src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java\n \n         if (sumLength <= FOUR) {\n             minRating = FIVE;\n-        } else if (sumLength >= FIVE && sumLength <= SEVEN) {\n+        } else if (sumLength <= SEVEN) { // aready know it is at least 5\n             minRating = FOUR;\n-        } else if (sumLength >= EIGHT && sumLength <= ELEVEN) {\n+        } else if (sumLength <= ELEVEN) { // aready know it is at least 8\n             minRating = THREE;\n         } else if (sumLength == TWELVE) {\n             minRating = TWO;", "timestamp": 1463753983, "metainfo": ""}