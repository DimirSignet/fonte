{"sha": "c170f6b67d6927aa7e1efff3f0618542483f8708", "log": "[CODEC-174] Improve PhonemeBuilder.apply by updating the internal state instead of creating a new PhonemeBuilder each time.  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java\n         }\n \n         /**\n-         * Creates a new phoneme builder containing the application of the expression to all phonemes in this builder.\n+         * Applies the given phoneme expression to all phonemes in this phoneme builder.\n          * <p>\n          * This will lengthen phonemes that have compatible language sets to the expression, and drop those that are\n          * incompatible.\n          *\n          * @param phonemeExpr   the expression to apply\n          * @param maxPhonemes   the maximum number of phonemes to build up\n-         * @return  a new phoneme builder containing the results of <code>phonemeExpr</code> applied to each phoneme\n-         *      in turn\n          */\n-        public PhonemeBuilder apply(final Rule.PhonemeExpr phonemeExpr, final int maxPhonemes) {\n-            final Set<Rule.Phoneme> newPhonemes = new LinkedHashSet<Rule.Phoneme>();\n+        public void apply(final Rule.PhonemeExpr phonemeExpr, final int maxPhonemes) {\n+            final List<Rule.Phoneme> newPhonemes = new ArrayList<Rule.Phoneme>(maxPhonemes);\n \n             EXPR: for (final Rule.Phoneme left : this.phonemes) {\n                 for (final Rule.Phoneme right : phonemeExpr.getPhonemes()) {\n-                    LanguageSet languages = left.getLanguages().restrictTo(right.getLanguages());\n+                    final LanguageSet languages = left.getLanguages().restrictTo(right.getLanguages());\n                     if (!languages.isEmpty()) {\n                         final Rule.Phoneme join = new Phoneme(left, right, languages);\n                         if (newPhonemes.size() < maxPhonemes) {\n                             newPhonemes.add(join);\n-                        } else {\n-                            break EXPR;\n+                            if (newPhonemes.size() >= maxPhonemes) {\n+                                break EXPR;\n+                            }\n                         }\n                     }\n                 }\n             }\n \n-            return new PhonemeBuilder(newPhonemes);\n+            this.phonemes.clear();\n+            this.phonemes.addAll(newPhonemes);\n         }\n \n         /**\n                     final String pattern = rule.getPattern();\n                     patternLength = pattern.length();\n                     if (rule.patternAndContextMatches(this.input, this.i)) {\n-                        this.phonemeBuilder = this.phonemeBuilder.apply(rule.getPhoneme(), maxPhonemes);\n+                        this.phonemeBuilder.apply(rule.getPhoneme(), maxPhonemes);\n                         this.found = true;\n                         break;\n                     }", "timestamp": 1384724084, "metainfo": ""}