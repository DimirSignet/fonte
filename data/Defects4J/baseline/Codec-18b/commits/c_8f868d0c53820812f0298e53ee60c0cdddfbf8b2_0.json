{"sha": "8f868d0c53820812f0298e53ee60c0cdddfbf8b2", "log": "Remove extra parens.  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/language/Metaphone.java\n+++ b/src/main/java/org/apache/commons/codec/language/Metaphone.java\n      */\n     public String metaphone(String txt) {\n         boolean hard = false ;\n-        if ((txt == null) || (txt.length() == 0)) {\n+        if (txt == null || txt.length() == 0) {\n             return \"\" ;\n         }\n         // single character is itself\n         int wdsz = local.length();\n         int n = 0 ;\n \n-        while ((code.length() < this.getMaxCodeLen()) && \n-               (n < wdsz) ) { // max code size of 4 works well\n+        while (code.length() < this.getMaxCodeLen() && \n+               n < wdsz ) { // max code size of 4 works well\n             char symb = local.charAt(n) ;\n             // remove duplicate letters except C\n-            if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) {\n+            if (symb != 'C' && isPreviousChar( local, n, symb ) ) {\n                 n++ ;\n             } else { // not dup\n                 switch(symb) {\n                     /* discard if SCI, SCE or SCY */\n                     if ( isPreviousChar(local, n, 'S') && \n                          !isLastChar(wdsz, n) && \n-                         (FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { \n+                         FRONTV.indexOf(local.charAt(n + 1)) >= 0 ) { \n                         break;\n                     }\n                     if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X\n                         break;\n                     }\n                     if (!isLastChar(wdsz, n) && \n-                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {\n+                        FRONTV.indexOf(local.charAt(n + 1)) >= 0) {\n                         code.append('S');\n                         break; // CI,CE,CY -> S\n                     }\n                         break ;\n                     }\n                     if (isNextChar(local, n, 'H')) { // detect CH\n-                        if ((n == 0) && \n-                            (wdsz >= 3) && \n+                        if (n == 0 && \n+                            wdsz >= 3 && \n                             isVowel(local,2) ) { // CH consonant -> K consonant\n                             code.append('K');\n                         } else { \n                 case 'D' :\n                     if (!isLastChar(wdsz, n + 1) && \n                         isNextChar(local, n, 'G') && \n-                        (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n+                        FRONTV.indexOf(local.charAt(n + 2)) >= 0) { // DGE DGI DGY -> J \n                         code.append('J'); n += 2 ;\n                     } else { \n                         code.append('T');\n                         !isVowel(local,n+2)) {\n                         break;\n                     }\n-                    if ((n > 0) && \n+                    if (n > 0 && \n                         ( regionMatch(local, n, \"GN\") ||\n                           regionMatch(local, n, \"GNED\") ) ) {\n                         break; // silent G\n                         hard = false ;\n                     }\n                     if (!isLastChar(wdsz, n) && \n-                        (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && \n-                        (!hard)) {\n+                        FRONTV.indexOf(local.charAt(n + 1)) >= 0 && \n+                        !hard) {\n                         code.append('J');\n                     } else {\n                         code.append('K');\n                     if (isLastChar(wdsz, n)) {\n                         break ; // terminal H\n                     }\n-                    if ((n > 0) && \n-                        (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {\n+                    if (n > 0 && \n+                        VARSON.indexOf(local.charAt(n - 1)) >= 0) {\n                         break;\n                     }\n                     if (isVowel(local,n+1)) {\n     private boolean regionMatch(StringBuffer string, int index, String test) {\n         boolean matches = false;\n         if( index >= 0 &&\n-            (index + test.length() - 1) < string.length() ) {\n+            index + test.length() - 1 < string.length() ) {\n             String substring = string.substring( index, index + test.length());\n             matches = substring.equals( test );\n         }\n--- a/src/main/java/org/apache/commons/codec/language/Soundex.java\n+++ b/src/main/java/org/apache/commons/codec/language/Soundex.java\n         out[0] = str.charAt(0);\n         // getMappingCode() throws IllegalArgumentException\n         last = getMappingCode(str, 0);\n-        while ((incount < str.length()) && (count < out.length)) {\n+        while (incount < str.length() && count < out.length) {\n             mapped = getMappingCode(str, incount++);\n             if (mapped != 0) {\n-                if ((mapped != '0') && (mapped != last)) {\n+                if (mapped != '0' && mapped != last) {\n                     out[count++] = mapped;\n                 }\n                 last = mapped;\n--- a/src/main/java/org/apache/commons/codec/language/bm/Rule.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/Rule.java\n                         // exact match\n                         return new RPattern() {\n                             public boolean isMatch(CharSequence input) {\n-                                return input.length() == 1 && (contains(bContent, input.charAt(0)) == shouldMatch);\n+                                return input.length() == 1 && contains(bContent, input.charAt(0)) == shouldMatch;\n                             }\n                         };\n                     } else if (startsWith) {\n                         // first char\n                         return new RPattern() {\n                             public boolean isMatch(CharSequence input) {\n-                                return input.length() > 0 && (contains(bContent, input.charAt(0)) == shouldMatch);\n+                                return input.length() > 0 && contains(bContent, input.charAt(0)) == shouldMatch;\n                             }\n                         };\n                     } else if (endsWith) {\n                         // last char\n                         return new RPattern() {\n                             public boolean isMatch(CharSequence input) {\n-                                return input.length() > 0 && (contains(bContent, input.charAt(input.length() - 1)) == shouldMatch);\n+                                return input.length() > 0 && contains(bContent, input.charAt(input.length() - 1)) == shouldMatch;\n                             }\n                         };\n                     }\n--- a/src/main/java/org/apache/commons/codec/net/RFC1522Codec.java\n+++ b/src/main/java/org/apache/commons/codec/net/RFC1522Codec.java\n         if (text == null) {\n             return null;\n         }\n-        if ((!text.startsWith(PREFIX)) || (!text.endsWith(POSTFIX))) {\n+        if (!text.startsWith(PREFIX) || !text.endsWith(POSTFIX)) {\n             throw new DecoderException(\"RFC 1522 violation: malformed encoded content\");\n         }\n         int terminator = text.length() - 2;\n--- a/src/test/java/org/apache/commons/codec/binary/Base64Test.java\n+++ b/src/test/java/org/apache/commons/codec/binary/Base64Test.java\n         String nullString = null;\n         String emptyString = \"\";\n         String validString = \"abc===defg\\n\\r123456\\r789\\r\\rABC\\n\\nDEF==GHI\\r\\nJKL==============\";\n-        String invalidString = validString + ((char)0); // append null character\n+        String invalidString = validString + (char)0; // append null character\n         \n         try {\n             Base64.isBase64(nullString);\n             byte[] data = new byte[i];\n             this.getRandom().nextBytes(data);\n             byte[] enc = Base64.encodeBase64(data);\n-            assertTrue(\"\\\"\" + (new String(enc)) + \"\\\" is Base64 data.\", Base64.isBase64(enc));\n+            assertTrue(\"\\\"\" + new String(enc) + \"\\\" is Base64 data.\", Base64.isBase64(enc));\n             byte[] data2 = Base64.decodeBase64(enc);\n             assertTrue(toString(data) + \" equals \" + toString(data2), Arrays.equals(data, data2));\n         }\n--- a/src/test/java/org/apache/commons/codec/language/SoundexTest.java\n+++ b/src/test/java/org/apache/commons/codec/language/SoundexTest.java\n \n     @Test\n     public void testB650() throws EncoderException {\n-        this.checkEncodingVariations(\"B650\", (new String[]{\n+        this.checkEncodingVariations(\"B650\", new String[]{\n             \"BARHAM\",\n             \"BARONE\",\n             \"BARRON\",\n             \"BYRAM\",\n             \"BYRNE\",\n             \"BYRON\",\n-            \"BYRUM\"}));\n+            \"BYRUM\"});\n     }\n \n     @Test\n \n     @Test\n     public void testEncodeIgnoreApostrophes() throws EncoderException {\n-        this.checkEncodingVariations(\"O165\", (new String[]{\n+        this.checkEncodingVariations(\"O165\", new String[]{\n             \"OBrien\",\n             \"'OBrien\",\n             \"O'Brien\",\n             \"OBr'ien\",\n             \"OBri'en\",\n             \"OBrie'n\",\n-            \"OBrien'\"}));\n+            \"OBrien'\"});\n     }\n \n     /**\n      */\n     @Test\n     public void testEncodeIgnoreHyphens() throws EncoderException {\n-        this.checkEncodingVariations(\"K525\", (new String[]{\n+        this.checkEncodingVariations(\"K525\", new String[]{\n             \"KINGSMITH\",\n             \"-KINGSMITH\",\n             \"K-INGSMITH\",\n             \"KINGSM-ITH\",\n             \"KINGSMI-TH\",\n             \"KINGSMIT-H\",\n-            \"KINGSMITH-\"}));\n+            \"KINGSMITH-\"});\n     }\n \n     @Test\n         Assert.assertEquals(\"S460\", this.getSoundexEncoder().encode(\"Sgler\"));\n         Assert.assertEquals(\"S460\", this.getSoundexEncoder().encode(\"Swhgler\"));\n         // Also S460:\n-        this.checkEncodingVariations(\"S460\", (new String[]{\n+        this.checkEncodingVariations(\"S460\", new String[]{\n             \"SAILOR\",\n             \"SALYER\",\n             \"SAYLOR\",\n             \"SHULER\",\n             \"SILAR\",\n             \"SILER\",\n-            \"SILLER\"}));\n+            \"SILLER\"});\n     }\n \n     /**\n      */\n     @Test\n     public void testMsSqlServer2() throws EncoderException {\n-        this.checkEncodingVariations(\"E625\", (new String[]{\"Erickson\", \"Erickson\", \"Erikson\", \"Ericson\", \"Ericksen\", \"Ericsen\"}));\n+        this.checkEncodingVariations(\"E625\", new String[]{\"Erickson\", \"Erickson\", \"Erikson\", \"Ericson\", \"Ericksen\", \"Ericsen\"});\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/codec/language/bm/RuleTest.java\n+++ b/src/test/java/org/apache/commons/codec/language/bm/RuleTest.java\n         }\n \n         public boolean matches(Object item) {\n-            return ((Integer) item) < 0;\n+            return (Integer) item < 0;\n         }\n     }\n ", "timestamp": 1332954140, "metainfo": ""}