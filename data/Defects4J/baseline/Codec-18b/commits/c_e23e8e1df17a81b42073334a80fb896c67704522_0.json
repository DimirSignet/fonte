{"sha": "e23e8e1df17a81b42073334a80fb896c67704522", "log": "Replace \"<code>true</code>\" with \"{@code true}\"  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/binary/Base32.java\n+++ b/src/main/java/org/apache/commons/codec/binary/Base32.java\n      * <p>\n      * When encoding the line length is 0 (no chunking).\n      * </p>\n-     * @param useHex if <code>true</code> then use Base32 Hex alphabet\n+     * @param useHex if {@code true} then use Base32 Hex alphabet\n      */\n     public Base32(boolean useHex) {\n         this(0, null, useHex);\n      *            If lineLength <= 0, then the output will not be divided into lines (chunks). Ignored when decoding.\n      * @param lineSeparator\n      *            Each line of encoded data will end with this sequence of bytes.\n-     * @param useHex if <code>true</code>, then use Base32 Hex alphabet, otherwise use Base32 alphabet\n+     * @param useHex if {@code true}, then use Base32 Hex alphabet, otherwise use Base32 alphabet\n      * @throws IllegalArgumentException\n      *             The provided lineSeparator included some Base32 characters. That's not going to work!\n      *             Or the lineLength > 0 and lineSeparator is null.\n      * \n      * @param octet\n      *            The value to test\n-     * @return <code>true</code> if the value is defined in the the Base32 alphabet <code>false</code> otherwise.\n+     * @return {@code true} if the value is defined in the the Base32 alphabet <code>false</code> otherwise.\n      */\n     @Override\n     public boolean isInAlphabet(byte octet) {\n--- a/src/main/java/org/apache/commons/codec/binary/Base64.java\n+++ b/src/main/java/org/apache/commons/codec/binary/Base64.java\n      * </p>\n      * \n      * @param urlSafe\n-     *            if <code>true</code>, URL-safe encoding is used. In most cases this should be set to\n+     *            if {@code true}, URL-safe encoding is used. In most cases this should be set to\n      *            <code>false</code>.\n      * @since 1.4\n      */\n      * \n      * @param arrayOctet\n      *            byte array to test\n-     * @return <code>true</code> if all bytes are valid characters in the Base64 alphabet or if the byte array is empty;\n+     * @return {@code true} if all bytes are valid characters in the Base64 alphabet or if the byte array is empty;\n      *         <code>false</code>, otherwise\n      * @deprecated 1.5 Use {@link #isBase64(byte[])}, will be removed in 2.0.\n      */\n      * \n      * @param octet\n      *            The value to test\n-     * @return <code>true</code> if the value is defined in the the base 64 alphabet, <code>false</code> otherwise.\n+     * @return {@code true} if the value is defined in the the base 64 alphabet, <code>false</code> otherwise.\n      * @since 1.4\n      */\n     public static boolean isBase64(byte octet) {\n      * \n      * @param base64\n      *            String to test\n-     * @return <code>true</code> if all characters in the String are valid characters in the Base64 alphabet or if\n+     * @return {@code true} if all characters in the String are valid characters in the Base64 alphabet or if\n      *         the String is empty; <code>false</code>, otherwise\n      *  @since 1.5\n      */\n      * \n      * @param arrayOctet\n      *            byte array to test\n-     * @return <code>true</code> if all bytes are valid characters in the Base64 alphabet or if the byte array is empty;\n+     * @return {@code true} if all bytes are valid characters in the Base64 alphabet or if the byte array is empty;\n      *         <code>false</code>, otherwise\n      * @since 1.5\n      */    \n      * @param binaryData\n      *            Array containing binary data to encode.\n      * @param isChunked\n-     *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks\n+     *            if {@code true} this encoder will chunk the base64 output into 76 character blocks\n      * @return Base64-encoded data.\n      * @throws IllegalArgumentException\n      *             Thrown when the input array needs an output array bigger than {@link Integer#MAX_VALUE}\n      * @param binaryData\n      *            Array containing binary data to encode.\n      * @param isChunked\n-     *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks\n+     *            if {@code true} this encoder will chunk the base64 output into 76 character blocks\n      * @param urlSafe\n-     *            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.\n+     *            if {@code true} this encoder will emit - and _ instead of the usual + and / characters.\n      * @return Base64-encoded data.\n      * @throws IllegalArgumentException\n      *             Thrown when the input array needs an output array bigger than {@link Integer#MAX_VALUE}\n      * @param binaryData\n      *            Array containing binary data to encode.\n      * @param isChunked\n-     *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks\n+     *            if {@code true} this encoder will chunk the base64 output into 76 character blocks\n      * @param urlSafe\n-     *            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.\n+     *            if {@code true} this encoder will emit - and _ instead of the usual + and / characters.\n      * @param maxResultSize\n      *            The maximum result size to accept.\n      * @return Base64-encoded data.\n      * \n      * @param octet\n      *            The value to test\n-     * @return <code>true</code> if the value is defined in the the Base32 alphabet <code>false</code> otherwise.\n+     * @return {@code true} if the value is defined in the the Base32 alphabet <code>false</code> otherwise.\n      */\n     @Override\n     protected boolean isInAlphabet(byte octet) {\n--- a/src/main/java/org/apache/commons/codec/binary/BaseNCodec.java\n+++ b/src/main/java/org/apache/commons/codec/binary/BaseNCodec.java\n      *\n      * @param value The value to test\n      *\n-     * @return <code>true</code> if the value is defined in the current alphabet, <code>false</code> otherwise.\n+     * @return {@code true} if the value is defined in the current alphabet, <code>false</code> otherwise.\n      */\n     protected abstract boolean isInAlphabet(byte value);\n     \n      * The method optionally treats whitespace and pad as valid.\n      *\n      * @param arrayOctet byte array to test\n-     * @param allowWSPad if <code>true</code>, then whitespace and PAD are also allowed\n-     *\n-     * @return <code>true</code> if all bytes are valid characters in the alphabet or if the byte array is empty;\n+     * @param allowWSPad if {@code true}, then whitespace and PAD are also allowed\n+     *\n+     * @return {@code true} if all bytes are valid characters in the alphabet or if the byte array is empty;\n      *         <code>false</code>, otherwise\n      */    \n     public boolean isInAlphabet(byte[] arrayOctet, boolean allowWSPad) {\n      * The method treats whitespace and PAD as valid.\n      *\n      * @param basen String to test\n-     * @return <code>true</code> if all characters in the String are valid characters in the alphabet or if\n+     * @return {@code true} if all characters in the String are valid characters in the alphabet or if\n      *         the String is empty; <code>false</code>, otherwise\n      * @see #isInAlphabet(byte[], boolean)\n      */\n      *\n      * @param arrayOctet\n      *            byte array to test\n-     * @return <code>true</code> if any byte is a valid character in the alphabet or PAD; <code>false</code> otherwise\n+     * @return {@code true} if any byte is a valid character in the alphabet or PAD; <code>false</code> otherwise\n      */\n     protected boolean containsAlphabetOrPad(byte[] arrayOctet) {\n         if (arrayOctet == null) {\n--- a/src/main/java/org/apache/commons/codec/binary/BinaryCodec.java\n+++ b/src/main/java/org/apache/commons/codec/binary/BinaryCodec.java\n     }\n \n     /**\n-     * Returns <code>true</code> if the given array is {@code null} or empty (size 0.)\n+     * Returns {@code true} if the given array is {@code null} or empty (size 0.)\n      * \n      * @param array\n      *            the source array\n-     * @return <code>true</code> if the given array is {@code null} or empty (size 0.)\n+     * @return {@code true} if the given array is {@code null} or empty (size 0.)\n      */\n     private static boolean isEmpty(byte[] array) {\n         return array == null || array.length == 0;\n--- a/src/main/java/org/apache/commons/codec/binary/Hex.java\n+++ b/src/main/java/org/apache/commons/codec/binary/Hex.java\n      * @param data\n      *            a byte[] to convert to Hex characters\n      * @param toLowerCase\n-     *            <code>true</code> converts to lowercase, <code>false</code> to uppercase\n+     *            {@code true} converts to lowercase, <code>false</code> to uppercase\n      * @return A char[] containing hexadecimal characters\n      * @since 1.4\n      */\n--- a/src/main/java/org/apache/commons/codec/language/AbstractCaverphone.java\n+++ b/src/main/java/org/apache/commons/codec/language/AbstractCaverphone.java\n      *            First of two strings to compare\n      * @param str2\n      *            Second of two strings to compare\n-     * @return <code>true</code> if the encodings of these strings are identical, <code>false</code> otherwise.\n+     * @return {@code true} if the encodings of these strings are identical, <code>false</code> otherwise.\n      * @throws EncoderException\n      */\n     public boolean isEncodeEqual(String str1, String str2) throws EncoderException {\n--- a/src/main/java/org/apache/commons/codec/language/Caverphone.java\n+++ b/src/main/java/org/apache/commons/codec/language/Caverphone.java\n      *            First of two strings to compare\n      * @param str2\n      *            Second of two strings to compare\n-     * @return <code>true</code> if the caverphones of these strings are identical, <code>false</code> otherwise.\n+     * @return {@code true} if the caverphones of these strings are identical, <code>false</code> otherwise.\n      */\n     public boolean isCaverphoneEqual(String str1, String str2) {\n         return this.caverphone(str1).equals(this.caverphone(str2));\n--- a/src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java\n+++ b/src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java\n      * \n      * @param value1 The left-hand side of the encoded {@link String#equals(Object)}.\n      * @param value2 The right-hand side of the encoded {@link String#equals(Object)}.\n-     * @return <code>true</code> if the encoded <code>String</code>s are equal;\n+     * @return {@code true} if the encoded <code>String</code>s are equal;\n      *          <code>false</code> otherwise.\n      * @see #isDoubleMetaphoneEqual(String,String,boolean)\n      */\n      * \n      * @param value1 The left-hand side of the encoded {@link String#equals(Object)}.\n      * @param value2 The right-hand side of the encoded {@link String#equals(Object)}.\n-     * @param alternate use the alternate value if <code>true</code>.\n-     * @return <code>true</code> if the encoded <code>String</code>s are equal;\n+     * @param alternate use the alternate value if {@code true}.\n+     * @return {@code true} if the encoded <code>String</code>s are equal;\n      *          <code>false</code> otherwise.\n      */\n     public boolean isDoubleMetaphoneEqual(String value1, \n \n     /**\n      * Determines whether or not the value starts with a silent letter.  It will\n-     * return <code>true</code> if the value starts with any of 'GN', 'KN',\n+     * return {@code true} if the value starts with any of 'GN', 'KN',\n      * 'PN', 'WR' or 'PS'.\n      */    \n     private boolean isSilentStart(String value) {\n--- a/src/main/java/org/apache/commons/codec/language/Metaphone.java\n+++ b/src/main/java/org/apache/commons/codec/language/Metaphone.java\n      *\n      * @param str1 First of two strings to compare\n      * @param str2 Second of two strings to compare\n-     * @return <code>true</code> if the metaphones of these strings are identical, \n+     * @return {@code true} if the metaphones of these strings are identical, \n      *        <code>false</code> otherwise.\n      */\n     public boolean isMetaphoneEqual(String str1, String str2) {\n--- a/src/main/java/org/apache/commons/codec/language/Nysiis.java\n+++ b/src/main/java/org/apache/commons/codec/language/Nysiis.java\n      * \n      * @param c\n      *            the character to test\n-     * @return <code>true</code> if the character is a vowel, <code>false</code> otherwise\n+     * @return {@code true} if the character is a vowel, <code>false</code> otherwise\n      */\n     private static boolean isVowel(final char c) {\n         return c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U';\n      * Create an instance of the {@link Nysiis} encoder with the specified strict mode:\n      *\n      * <ul>\n-     *  <li><code>true</code>: encoded strings have a maximum length of 6</li>\n+     *  <li>{@code true}: encoded strings have a maximum length of 6</li>\n      *  <li><code>false</code>: encoded strings may have arbitrary length</li>\n      * </ul>\n      *\n     /**\n      * Indicates the strict mode for this {@link Nysiis} encoder.\n      *\n-     * @return <code>true</code> if the encoder is configured for strict mode, <code>false</code> otherwise\n+     * @return {@code true} if the encoder is configured for strict mode, <code>false</code> otherwise\n      */\n     public boolean isStrict() {\n         return this.strict;\n--- a/src/main/java/org/apache/commons/codec/net/QCodec.java\n+++ b/src/main/java/org/apache/commons/codec/net/QCodec.java\n     /**\n      * Tests if optional transformation of SPACE characters is to be used\n      * \n-     * @return <code>true</code> if SPACE characters are to be transformed, <code>false</code> otherwise\n+     * @return {@code true} if SPACE characters are to be transformed, <code>false</code> otherwise\n      */\n     public boolean isEncodeBlanks() {\n         return this.encodeBlanks;\n      * Defines whether optional transformation of SPACE characters is to be used\n      * \n      * @param b\n-     *                  <code>true</code> if SPACE characters are to be transformed, <code>false</code> otherwise\n+     *                  {@code true} if SPACE characters are to be transformed, <code>false</code> otherwise\n      */\n     public void setEncodeBlanks(boolean b) {\n         this.encodeBlanks = b;", "timestamp": 1332948729, "metainfo": ""}