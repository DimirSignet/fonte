{"sha": "7028095497c29edde3c0f320080f7d4aa5b22c98", "log": "Javadoc.  ", "commit": "\n--- a/src/java/org/apache/commons/codec/binary/Base64.java\n+++ b/src/java/org/apache/commons/codec/binary/Base64.java\n      * @since 1.4\n      */\n     public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe) {\n+        return encodeBase64(binaryData, isChunked, urlSafe, Integer.MAX_VALUE);\n+    }\n+\n+    /**\n+     * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.\n+     * \n+     * @param binaryData\n+     *            Array containing binary data to encode.\n+     * @param isChunked\n+     *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks\n+     * @param urlSafe\n+     *            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.\n+     * @param maxResultSize\n+     *            The maximum result size to accept.\n+     * @return Base64-encoded data.\n+     * @throws IllegalArgumentException\n+     *             Thrown when the input array needs an output array bigger than maxResultSize\n+     * @since 1.4\n+     */\n+    public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n         if (binaryData == null || binaryData.length == 0) {\n             return binaryData;\n         }\n                 len += CHUNK_SEPARATOR.length;\n             }\n         }\n-        if (len > Integer.MAX_VALUE) {\n-            throw new IllegalArgumentException(\"Input array too big, output array would be bigger than Integer.MAX_VALUE=\" + \n-                    Integer.MAX_VALUE);\n+        if (len > maxResultSize) {\n+            throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\"\n+                + len\n+                + \") than the specified maxium size of \"\n+                + maxResultSize);\n         }\n         byte[] buf = new byte[(int) len];\n         b64.setInitialBuffer(buf, 0, buf.length);", "timestamp": 1248397659, "metainfo": ""}