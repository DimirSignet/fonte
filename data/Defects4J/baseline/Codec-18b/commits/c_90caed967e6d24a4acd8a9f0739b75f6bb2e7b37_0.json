{"sha": "90caed967e6d24a4acd8a9f0739b75f6bb2e7b37", "log": "[CODEC-136] Use Charset objects when possible, create Charsets for required character encodings.  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/binary/Hex.java\n+++ b/src/main/java/org/apache/commons/codec/binary/Hex.java\n \n package org.apache.commons.codec.binary;\n \n-import java.io.UnsupportedEncodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.UnsupportedCharsetException;\n \n import org.apache.commons.codec.BinaryDecoder;\n import org.apache.commons.codec.BinaryEncoder;\n import org.apache.commons.codec.CharEncoding;\n+import org.apache.commons.codec.Charsets;\n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n \n public class Hex implements BinaryEncoder, BinaryDecoder {\n \n     /**\n+     * Default charset name is {@link Charsets#UTF_8}\n+     * \n+     * @since 1.7\n+     */\n+    public static final Charset DEFAULT_CHARSET = Charsets.UTF_8;\n+\n+    /**\n      * Default charset name is {@link CharEncoding#UTF_8}\n      * \n      * @since 1.4\n         return digit;\n     }\n \n-    private final String charsetName;\n-\n-    /**\n-     * Creates a new codec with the default charset name {@link #DEFAULT_CHARSET_NAME}\n+    private final Charset charset;\n+\n+    /**\n+     * Creates a new codec with the default charset name {@link #DEFAULT_CHARSET}\n      */\n     public Hex() {\n         // use default encoding\n-        this.charsetName = DEFAULT_CHARSET_NAME;\n+        this.charset = DEFAULT_CHARSET;\n+    }\n+\n+    /**\n+     * Creates a new codec with the given Charset.\n+     * \n+     * @param charset\n+     *            the charset.\n+     * @since 1.7\n+     */\n+    public Hex(Charset charset) {\n+        this.charset = charset;\n     }\n \n     /**\n      * Creates a new codec with the given charset name.\n      * \n-     * @param csName\n+     * @param charsetName\n      *            the charset name.\n-     * @since 1.4\n-     */\n-    public Hex(String csName) {\n-        this.charsetName = csName;\n+     * @throws UnsupportedCharsetException\n+     *             If the named charset is unavailable\n+     * @since 1.4\n+     * @since 1.7 throws UnsupportedCharsetException if the named charset is unavailable\n+     */\n+    public Hex(String charsetName) {\n+        this(Charset.forName(charsetName));\n     }\n \n     /**\n      * @see #decodeHex(char[])\n      */\n     public byte[] decode(byte[] array) throws DecoderException {\n-        try {\n-            return decodeHex(new String(array, getCharsetName()).toCharArray());\n-        } catch (UnsupportedEncodingException e) {\n-            throw new DecoderException(e.getMessage(), e);\n-        }\n+        return decodeHex(new String(array, getCharset()).toCharArray());\n     }\n \n     /**\n      * represent any given byte.\n      * <p>\n      * The conversion from hexadecimal characters to the returned bytes is performed with the charset named by\n-     * {@link #getCharsetName()}.\n+     * {@link #getCharset()}.\n      * </p>\n      * \n      * @param array\n      *            a byte[] to convert to Hex characters\n      * @return A byte[] containing the bytes of the hexadecimal characters\n-     * @throws IllegalStateException\n-     *             if the charsetName is invalid. This API throws {@link IllegalStateException} instead of\n-     *             {@link UnsupportedEncodingException} for backward compatibility.\n+     * @since 1.7 No longer throws IllegalStateException if the charsetName is invalid.\n      * @see #encodeHex(byte[])\n      */\n     public byte[] encode(byte[] array) {\n-        return StringUtils.getBytesUnchecked(encodeHexString(array), getCharsetName());\n+        return encodeHexString(array).getBytes(this.getCharset());\n     }\n \n     /**\n      * characters to represent any given byte.\n      * <p>\n      * The conversion from hexadecimal characters to bytes to be encoded to performed with the charset named by\n-     * {@link #getCharsetName()}.\n+     * {@link #getCharset()}.\n      * </p>\n      * \n      * @param object\n      */\n     public Object encode(Object object) throws EncoderException {\n         try {\n-            byte[] byteArray = object instanceof String ? ((String) object).getBytes(getCharsetName()) : (byte[]) object;\n+            byte[] byteArray = object instanceof String ? ((String) object).getBytes(this.getCharset()) : (byte[]) object;\n             return encodeHex(byteArray);\n         } catch (ClassCastException e) {\n             throw new EncoderException(e.getMessage(), e);\n-        } catch (UnsupportedEncodingException e) {\n-            throw new EncoderException(e.getMessage(), e);\n-        }\n+        }\n+    }\n+\n+    /**\n+     * Gets the charset.\n+     * \n+     * @return the charset.\n+     * @since 1.7\n+     */\n+    public Charset getCharset() {\n+        return this.charset;\n     }\n \n     /**\n      * @since 1.4\n      */\n     public String getCharsetName() {\n-        return this.charsetName;\n+        return this.charset.name();\n     }\n \n     /**\n      */\n     @Override\n     public String toString() {\n-        return super.toString() + \"[charsetName=\" + this.charsetName + \"]\";\n+        return super.toString() + \"[charsetName=\" + this.charset + \"]\";\n     }\n }\n--- a/src/test/java/org/apache/commons/codec/binary/HexTest.java\n+++ b/src/test/java/org/apache/commons/codec/binary/HexTest.java\n \n import java.io.UnsupportedEncodingException;\n import java.nio.charset.Charset;\n+import java.nio.charset.UnsupportedCharsetException;\n import java.util.Arrays;\n import java.util.Random;\n \n         Hex utf8Codec = new Hex();\n         expectedHexString = \"48656c6c6f20576f726c64\";\n         byte[] decodedUtf8Bytes = (byte[]) utf8Codec.decode(expectedHexString);\n-        actualStringFromBytes = new String(decodedUtf8Bytes, utf8Codec.getCharsetName());\n+        actualStringFromBytes = new String(decodedUtf8Bytes, utf8Codec.getCharset());\n         // sanity check:\n         assertEquals(name, sourceString, actualStringFromBytes);\n         // actual check:\n         assertEquals(name, sourceString, actualStringFromBytes);\n     }\n \n-    @Test\n-    public void testCustomCharsetBadNameEncodeByteArray() throws UnsupportedEncodingException {\n-        try {\n-            new Hex(BAD_ENCODING_NAME).encode(\"Hello World\".getBytes(\"UTF-8\"));\n-            fail(\"Expected \" + IllegalStateException.class.getName());\n-        } catch (IllegalStateException e) {\n-            // Expected\n-        }\n-    }\n-\n-    @Test\n-    public void testCustomCharsetBadNameEncodeObject() {\n-        try {\n-            new Hex(BAD_ENCODING_NAME).encode(\"Hello World\");\n-            fail(\"Expected \" + EncoderException.class.getName());\n-        } catch (EncoderException e) {\n-            // Expected\n-        }\n-    }\n-\n-    @Test\n-    public void testCustomCharsetBadNameDecodeObject() throws UnsupportedEncodingException {\n-        try {\n-            new Hex(BAD_ENCODING_NAME).decode(\"Hello World\".getBytes(\"UTF-8\"));\n-            fail(\"Expected \" + DecoderException.class.getName());\n-        } catch (DecoderException e) {\n-            // Expected\n-        }\n+    @Test(expected=UnsupportedCharsetException.class)\n+    public void testCustomCharsetBadName() throws UnsupportedEncodingException {\n+        new Hex(BAD_ENCODING_NAME);\n     }\n \n     @Test", "timestamp": 1332947359, "metainfo": ""}