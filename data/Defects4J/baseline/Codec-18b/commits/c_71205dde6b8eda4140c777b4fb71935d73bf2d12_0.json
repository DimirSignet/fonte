{"sha": "71205dde6b8eda4140c777b4fb71935d73bf2d12", "log": "Added Codec to commons from the sandbox   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/codec/BinaryDecoder.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Commons\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Commons\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.codec;\n+\n+\n+\n+/**\n+ * This interface defines common decoding methods for decoders\n+ * which decode byte arrays.\n+ *\n+ * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n+ * @version $Revision: 1.1 $ $Date: 2003/04/25 17:50:56 $\n+ */\n+public interface BinaryDecoder extends Decoder {\n+\n+    /**\n+     * Decode a byte array and return the results of the decode\n+     * as a byte array. \n+     *\n+     * @param pArray A byte array which has been encoded with the\n+     *      appropriate encoder\n+     * \n+     * @return a byte array that contains decoded content\n+     * \n+     * @throws DecoderException A decoder exception is thrown\n+     *          if a Decoder encounters a failure condition during\n+     *          the decode process.\n+     */\n+    byte[] decode(byte[] pArray) throws DecoderException;\n+}  \n+\n--- /dev/null\n+++ b/src/java/org/apache/commons/codec/BinaryEncoder.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Commons\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Commons\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.codec;\n+\n+/**\n+ * A binary encoder contains methods common to all\n+ * encoders for binary data. \n+ * \n+ * @author <a href=\"tobrien@apache.org\">Tim O'Brien</a>\n+ * @version $Revision: 1.1 $ $Date: 2003/04/25 17:50:56 $\n+ */\n+public interface BinaryEncoder extends Encoder {\n+    \n+    /**\n+     * Encode a byte array and return the encoded data\n+     * as a byte array.\n+     * \n+     * @param pArray Data to be encoded\n+     *\n+     * @return A byte array containing the encoded data\n+     * \n+     * @throws EncoderException thrown if the Encoder\n+     *      encounters a failure condition during the\n+     *      encoding process.\n+     */\n+    byte[] encode(byte[] pArray) throws EncoderException;\n+}  \n+\n--- /dev/null\n+++ b/src/java/org/apache/commons/codec/Decoder.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Commons\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Commons\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.codec;\n+\n+/**\n+ * Forms one of the two interfaces at the center of the\n+ * codec package.  All decoders implement this interface\n+ * which allows a user to pass a generic Object to any\n+ * Decoder implementation in the codec package.\n+ * \n+ * @author <a href=\"tobrien@apache.org\">Tim O'Brien</a>\n+ * @version $Revision: 1.1 $ $Date: 2003/04/25 17:50:56 $\n+ */\n+public interface Decoder {\n+\n+    /**\n+     * Decode an \"encoded\" Object and return a \"decoded\"\n+     * Object.  Note that the implementation of this\n+     * interface will try to cast the Object parameter\n+     * to the specific type expected by a particular Decoder\n+     * implementation.  If a ClassCastException occurs\n+     * this decode method will throw a DecoderException.\n+     * \n+     * @param pObject an object to \"decode\"\n+     * \n+     * @return a 'decoded\" object\n+     * \n+     * @throws DecoderException a decoder exception can\n+     * be thrown for any number of reasons.  Some good\n+     * candidates are that the parameter passed to this\n+     * method is null, a param cannot be cast to the\n+     * appropriate type for a specific encoder.\n+     */\n+    Object decode(Object pObject) throws DecoderException;\n+}  \n+\n--- /dev/null\n+++ b/src/java/org/apache/commons/codec/DecoderException.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Commons\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Commons\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.codec;\n+\n+/**\n+ * The DecoderException is thrown when a Decoder has\n+ * encounter a failure condition during a decode. \n+ * \n+ * @author <a href=\"tobrien@apache.org\">Tim O'Brien</a>\n+ * @version $Revision: 1.1 $ $Date: 2003/04/25 17:50:56 $\n+ */\n+public class DecoderException extends Exception {\n+\n+    /**\n+     * Create a DecoderException\n+     * \n+     * @param pMessage A message with meaning to a human\n+     */\n+    public DecoderException(String pMessage) {\n+        super(pMessage);\n+    }\n+\n+}  \n+\n--- /dev/null\n+++ b/src/java/org/apache/commons/codec/Encoder.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Commons\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Commons\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.codec;\n+\n+/**\n+ * Encoder is the sister interface of Decoder, it provides\n+ * the highest level of abstraction for Encoders.  All\n+ * Encoders implement this common generic interface.\n+ *\n+ * @author <a href=\"tobrien@apache.org\">Tim O'Brien</a>\n+ * @version $Revision: 1.1 $ $Date: 2003/04/25 17:50:56 $\n+ */\n+public interface Encoder {\n+    \n+    /**\n+     * All encoders allow a library-user to pass an \n+     * Object and get an Object in return.  This function\n+     * encodes an \"Object\" - returning the encoded content \n+     * as an Object.  The Objects here may just be byte[]\n+     * or Strings depending on the implementation used.\n+     *   \n+     * @param pObject An object ot encode\n+     * \n+     * @return An \"encoded\" Object\n+     * \n+     * @throws EncoderException an encoder exception is\n+     *  thrown if the encoder experiences a failure\n+     *  condition during the encoding process.\n+     */\n+    Object encode(Object pObject) throws EncoderException;\n+}  \n+\n--- /dev/null\n+++ b/src/java/org/apache/commons/codec/EncoderException.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Commons\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Commons\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.codec;\n+\n+/**\n+ * An EncoderException is thrown when there is a\n+ * failure condition during the encoding process.\n+ * \n+ * @author <a href=\"tobrien@apache.org\">Tim O'Brien</a>\n+ * @version $Revision: 1.1 $ $Date: 2003/04/25 17:50:56 $\n+ */\n+public class EncoderException extends Exception {\n+\n+    /**\n+     * Create a new instance of this exception with\n+     * an informative message.\n+     * \n+     * @param pMessage a human intelligible message\n+     */\n+    public EncoderException(String pMessage) {\n+        super(pMessage);\n+    }\n+}  \n+\n--- /dev/null\n+++ b/src/java/org/apache/commons/codec/StringEncoder.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Commons\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Commons\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.codec;\n+\n+/**\n+ * A StringEncoder is an encoder which expects a String as\n+ * a method parameter and one that produces a String as the\n+ * output of the Encoding process.\n+ *\n+ * @author tobrien@transolutions.net\n+ * @version $Revision: 1.1 $ $Date: 2003/04/25 17:50:56 $\n+ */\n+public interface StringEncoder extends Encoder {\n+    \n+    /**\n+     * Encode a String and produce a String.\n+     * \n+     * @param pString a String to encode\n+     * \n+     * @return the encoded String\n+     * \n+     * @throws EncoderException thrown if there is\n+     *  an error conidition during the Encoding process.\n+     */\n+    String encode(String pString) throws EncoderException;\n+}  \n+\n--- /dev/null\n+++ b/src/java/org/apache/commons/codec/StringEncoderComparator.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Commons\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Commons\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.codec;\n+\n+import java.util.Comparator;\n+\n+/**\n+ * String are comparable, and this comparator allows \n+ * you to configure it with an instance of a class\n+ * which implements the StringEncoder.  This comparator\n+ * is used to sort Strings by an encoding shceme such\n+ * as Soundex, Metaphone, etc.  This class can come in\n+ * handy if one need to sort Strings by an encoded\n+ * form of a name such as Soundex.\n+ *\n+ * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n+ * @version $Revision: 1.1 $ $Date: 2003/04/25 17:50:56 $\n+ */\n+public class StringEncoderComparator implements Comparator {\n+\n+    // Private encoder instance\n+    private StringEncoder stringEncoder;\n+\n+    /**\n+     * A no-arg, do-nothing constructor\n+     */\n+    public StringEncoderComparator() {\n+    }\n+\n+    /**\n+     * Use the provided soundex algorithm.\n+     */\n+    public StringEncoderComparator(StringEncoder en) {\n+        this.stringEncoder = en;\n+    }\n+\n+    /**\n+     * Compare 2 strings based not on the strings \n+     * themselves, but on an encoding of the two \n+     * strings using the StringEncoder this Comparator\n+     * was created with.\n+     */\n+    public int compare(Object o1, Object o2) {\n+\n+        int compareCode = 0;\n+\n+        try {\n+            String s1 = stringEncoder.encode(o1.toString());\n+            String s2 = stringEncoder.encode(o2.toString());\n+            compareCode = s1.compareTo(s2);\n+        } \n+        catch (EncoderException ee) {\n+            compareCode = 0;\n+        }\n+        return (compareCode);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/codec/base64/Base64.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//codec/src/java/org/apache/commons/codec/base64/Attic/Base64.java,v 1.1 2003/04/25 17:50:56 tobrien Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2003/04/25 17:50:56 $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"HttpClient\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.codec.base64;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+import java.io.UnsupportedEncodingException;\n+\n+/**\n+ * <p>Base64 encoder and decoder.</p>\n+ * <p>\n+ * This class provides encoding/decoding methods for\n+ * the Base64 encoding as defined by RFC 2045,\n+ * N. Freed and N. Borenstein.\n+y * RFC 2045: Multipurpose Internet Mail Extensions (MIME)\n+ * Part One: Format of Internet Message Bodies. Reference\n+ * 1996. Available at: http://www.ietf.org/rfc/rfc2045.txt\n+ * </p>\n+ * @author Jeffrey Rodriguez\n+ * @version $Revision: 1.1 $ $Date: 2003/04/25 17:50:56 $\n+ *\n+ * @deprecated This class has been replaced by \n+ *             {@link org.apache.commons.codec.binary.Base64}\n+ */\n+public final class Base64 {\n+\n+    protected static final String DEFAULT_CHAR_ENCODING = \"ISO-8859-1\";\n+    private static final int BASELENGTH = 255;\n+    private static final int LOOKUPLENGTH = 64;\n+    private static final int TWENTYFOURBITGROUP = 24;\n+    private static final int EIGHTBIT = 8;\n+    private static final int SIXTEENBIT = 16;\n+    private static final int SIXBIT = 6;\n+    private static final int FOURBYTE = 4;\n+    private static final int SIGN = -128;\n+    private static final byte PAD = (byte) '=';\n+    private static final byte[] EMPTY_BYTE_ARRAY = new byte[0];\n+    private static byte[] base64Alphabet = new byte[BASELENGTH];\n+    private static byte[] lookUpBase64Alphabet = new byte[LOOKUPLENGTH];\n+\n+    static {\n+\n+        for (int i = 0; i < BASELENGTH; i++) {\n+            base64Alphabet[i] = -1;\n+        }\n+        for (int i = 'Z'; i >= 'A'; i--) {\n+            base64Alphabet[i] = (byte) (i - 'A');\n+        }\n+        for (int i = 'z'; i >= 'a'; i--) {\n+            base64Alphabet[i] = (byte) (i - 'a' + 26);\n+        }\n+\n+        for (int i = '9'; i >= '0'; i--) {\n+            base64Alphabet[i] = (byte) (i - '0' + 52);\n+        }\n+\n+        base64Alphabet['+'] = 62;\n+        base64Alphabet['/'] = 63;\n+\n+        for (int i = 0; i <= 25; i++) {\n+            lookUpBase64Alphabet[i] = (byte) ('A' + i);\n+        }\n+\n+        for (int i = 26,  j = 0; i <= 51; i++, j++) {\n+            lookUpBase64Alphabet[i] = (byte) ('a' + j);\n+        }\n+\n+        for (int i = 52,  j = 0; i <= 61; i++, j++) {\n+            lookUpBase64Alphabet[i] = (byte) ('0' + j);\n+        }\n+\n+        lookUpBase64Alphabet[62] = (byte) '+';\n+        lookUpBase64Alphabet[63] = (byte) '/';\n+\n+    }\n+\n+    public static boolean isBase64(String isValidString) {\n+        return (isBase64(isValidString.getBytes()));\n+    }\n+\n+\n+    public static boolean isBase64(byte octect) {\n+        // Should we ignore white space?\n+        return (octect == PAD || base64Alphabet[octect] != -1);\n+    }\n+\n+\n+    public static boolean isBase64(byte[] arrayOctect) {\n+        int length = arrayOctect.length;\n+        if (length == 0) {\n+            return true;\n+        }\n+        for (int i = 0; i < length; i++) {\n+            if (!Base64.isBase64(arrayOctect[i])) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Encodes hex octects into Base64\n+     *\n+     * @param binaryData Array containing binaryData\n+     * @return Base64-encoded array\n+     */\n+    public static byte[] encode(byte[] binaryData) {\n+        if (binaryData == null) {\n+            binaryData = EMPTY_BYTE_ARRAY;\n+        }\n+\n+        int lengthDataBits = binaryData.length * EIGHTBIT;\n+        int fewerThan24bits = lengthDataBits % TWENTYFOURBITGROUP;\n+        int numberTriplets = lengthDataBits / TWENTYFOURBITGROUP;\n+        byte encodedData[] = null;\n+\n+\n+        if (fewerThan24bits != 0) {\n+            //data not divisible by 24 bit\n+            encodedData = new byte[(numberTriplets + 1) * 4];\n+        }\n+        else {\n+            // 16 or 8 bit \n+            encodedData = new byte[numberTriplets * 4];\n+        }\n+\n+        byte k = 0, l = 0, b1 = 0, b2 = 0, b3 = 0;\n+\n+        int encodedIndex = 0;\n+        int dataIndex = 0;\n+        int i = 0;\n+        for (i = 0; i < numberTriplets; i++) {\n+\n+            dataIndex = i * 3;\n+            b1 = binaryData[dataIndex];\n+            b2 = binaryData[dataIndex + 1];\n+            b3 = binaryData[dataIndex + 2];\n+\n+            l = (byte) (b2 & 0x0f);\n+            k = (byte) (b1 & 0x03);\n+\n+            encodedIndex = i * 4;\n+            byte val1 = ((b1 & SIGN) == 0) \n+                ? (byte) (b1 >> 2) \n+                : (byte) ((b1) >> 2 ^ 0xc0);\n+\n+            byte val2 = ((b2 & SIGN) == 0) \n+                ? (byte) (b2 >> 4) \n+                : (byte) ((b2) >> 4 ^ 0xf0);\n+\n+            byte val3 = ((b3 & SIGN) == 0) \n+                ? (byte) (b3 >> 6) \n+                : (byte) ((b3) >> 6 ^ 0xfc);\n+\n+            encodedData[encodedIndex] = lookUpBase64Alphabet[val1];\n+            encodedData[encodedIndex + 1] = lookUpBase64Alphabet[val2 | (k << 4)];\n+            encodedData[encodedIndex + 2] = lookUpBase64Alphabet[(l << 2) | val3];\n+            encodedData[encodedIndex + 3] = lookUpBase64Alphabet[b3 & 0x3f];\n+        }\n+\n+        // form integral number of 6-bit groups\n+        dataIndex = i * 3;\n+        encodedIndex = i * 4;\n+        if (fewerThan24bits == EIGHTBIT) {\n+            b1 = binaryData[dataIndex];\n+            k = (byte) (b1 & 0x03);\n+            byte val1 = ((b1 & SIGN) == 0) \n+                ? (byte) (b1 >> 2) \n+                : (byte) ((b1) >> 2 ^ 0xc0);\n+\n+            encodedData[encodedIndex] = lookUpBase64Alphabet[val1];\n+            encodedData[encodedIndex + 1] = lookUpBase64Alphabet[k << 4];\n+            encodedData[encodedIndex + 2] = PAD;\n+            encodedData[encodedIndex + 3] = PAD;\n+        } \n+        else if (fewerThan24bits == SIXTEENBIT) {\n+            b1 = binaryData[dataIndex];\n+            b2 = binaryData[dataIndex + 1];\n+            l = (byte) (b2 & 0x0f);\n+            k = (byte) (b1 & 0x03);\n+\n+            byte val1 = ((b1 & SIGN) == 0) \n+                ? (byte) (b1 >> 2) \n+                : (byte) ((b1) >> 2 ^ 0xc0);\n+\n+            byte val2 = ((b2 & SIGN) == 0) \n+                ? (byte) (b2 >> 4) \n+                : (byte) ((b2) >> 4 ^ 0xf0);\n+\n+            encodedData[encodedIndex] = lookUpBase64Alphabet[val1];\n+            encodedData[encodedIndex + 1] = lookUpBase64Alphabet[val2 | (k << 4)];\n+            encodedData[encodedIndex + 2] = lookUpBase64Alphabet[l << 2];\n+            encodedData[encodedIndex + 3] = PAD;\n+        }\n+        return encodedData;\n+    }\n+\n+\n+    /**\n+     * Returns the base64 encoding of String.  First the String is\n+     * converted to byte[], using the character encoding of\n+     * <code>ISO-8859-1</code>.\n+     *\n+     * @param data String of data to convert\n+     * @return Base64-encoded String\n+     */\n+    public static String encode(String data) {\n+         try {\n+             return encode(data, DEFAULT_CHAR_ENCODING);\n+         }\n+         catch (UnsupportedEncodingException uee) {\n+             throw new IllegalStateException(uee.toString());\n+         }\n+     }\n+\n+\n+    /**\n+     * Returns the base64 encoding of String (by first converting to\n+     * byte[], using the specified <code>charEncoding</code>).  The\n+     * return value is also a String.  The Default\n+     * <code>codeEncoding</chode> is <code>ISO-8859-1</code>.\n+     *\n+     * @param data String of data to convert\n+     * @param charEncoding the character encoding to use when converting\n+     * a String to a byte[]\n+     * @return Base64-encoded String\n+     */\n+    public static String encode(String data, String charEncoding)\n+        throws UnsupportedEncodingException \n+    {\n+\n+        // Check arguments\n+        if (data == null) {\n+            data = \"\";\n+        }\n+        if (charEncoding == null) {\n+            charEncoding = DEFAULT_CHAR_ENCODING;\n+        }\n+\n+        // Convert to byte[]\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        OutputStreamWriter osw = new OutputStreamWriter(bos, charEncoding);\n+        try {\n+            osw.write(data);\n+        }\n+        catch (IOException ioe) {\n+            throw new RuntimeException(ioe.toString());\n+        }\n+\n+        // Encode\n+        byte[] encodedData = encode(bos.toByteArray());\n+\n+        // Convert to String\n+        if (encodedData == null) {\n+            return \"\";\n+        }\n+        bos = new ByteArrayOutputStream(encodedData.length);\n+        try {\n+            bos.write(encodedData);\n+        }\n+        catch (IOException ioe) {\n+            throw new RuntimeException(ioe.toString());\n+        }\n+\n+        return bos.toString(charEncoding);\n+    }\n+\n+    /**\n+     * Decodes Base64 data into octects\n+     *\n+     * @param binaryData Byte array containing Base64 data\n+     * @return Array containing decoded data.\n+     */\n+    public static byte[] decode(byte[] base64Data) {\n+        // Should we throw away anything not in base64Data ?\n+\n+        // handle the edge case, so we don't have to worry about it later\n+        if (base64Data.length == 0) {\n+            return EMPTY_BYTE_ARRAY;\n+        }\n+\n+        int numberQuadruple = base64Data.length / FOURBYTE;\n+        byte decodedData[] = null;\n+        byte b1 = 0, b2 = 0, b3 = 0, b4 = 0, marker0 = 0, marker1 = 0;\n+\n+        int encodedIndex = 0;\n+        int dataIndex = 0;\n+        {\n+            // this block sizes the output array properly - rlw\n+            int lastData = base64Data.length;\n+            // ignore the '=' padding\n+            while (base64Data[lastData - 1] == PAD) {\n+                if (--lastData == 0) {\n+                    return EMPTY_BYTE_ARRAY;\n+                }\n+            }\n+            decodedData = new byte[lastData - numberQuadruple];\n+        }\n+\n+        for (int i = 0; i < numberQuadruple; i++) {\n+            dataIndex = i * 4;\n+            marker0 = base64Data[dataIndex + 2];\n+            marker1 = base64Data[dataIndex + 3];\n+\n+            b1 = base64Alphabet[base64Data[dataIndex]];\n+            b2 = base64Alphabet[base64Data[dataIndex + 1]];\n+\n+            if (marker0 != PAD && marker1 != PAD) {\n+                //No PAD e.g 3cQl\n+                b3 = base64Alphabet[marker0];\n+                b4 = base64Alphabet[marker1];\n+\n+                decodedData[encodedIndex] = (byte) (b1 << 2 | b2 >> 4);\n+                decodedData[encodedIndex + 1] = (byte) (((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));\n+                decodedData[encodedIndex + 2] = (byte) (b3 << 6 | b4);\n+            } \n+            else if (marker0 == PAD) {\n+                //Two PAD e.g. 3c[Pad][Pad]\n+                decodedData[encodedIndex] = (byte) (b1 << 2 | b2 >> 4);\n+            } \n+            else if (marker1 == PAD) {\n+                //One PAD e.g. 3cQ[Pad]\n+                b3 = base64Alphabet[marker0];\n+\n+                decodedData[encodedIndex] = (byte) (b1 << 2 | b2 >> 4);\n+                decodedData[encodedIndex + 1] = (byte) (((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));\n+            }\n+            encodedIndex += 3;\n+        }\n+        return decodedData;\n+    }\n+\n+}\n+\n--- /dev/null\n+++ b/src/java/org/apache/commons/codec/binary/Base64.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//codec/src/java/org/apache/commons/codec/binary/Base64.java,v 1.1 2003/04/25 17:50:56 tobrien Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2003/04/25 17:50:56 $\n+  *\n+  * ====================================================================\n+  *\n+  * The Apache Software License, Version 1.1\n+  *\n+  * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+  * reserved.\n+  *\n+  * Redistribution and use in source and binary forms, with or without\n+  * modification, are permitted provided that the following conditions\n+  * are met:\n+  *\n+  * 1. Redistributions of source code must retain the above copyright\n+  *    notice, this list of conditions and the following disclaimer.\n+  *\n+  * 2. Redistributions in binary form must reproduce the above copyright\n+  *    notice, this list of conditions and the following disclaimer in\n+  *    the documentation and/or other materials provided with the\n+  *    distribution.\n+  *\n+  * 3. The end-user documentation included with the redistribution, if\n+  *    any, must include the following acknowlegement:\n+  *       \"This product includes software developed by the\n+  *        Apache Software Foundation (http://www.apache.org/).\"\n+  *    Alternately, this acknowlegement may appear in the software itself,\n+  *    if and wherever such third-party acknowlegements normally appear.\n+  *\n+  * 4. The names \"The Jakarta Project\", \"Tomcat\", and \"Apache Software\n+  *    Foundation\" must not be used to endorse or promote products derived\n+  *    from this software without prior written permission. For written\n+  *    permission, please contact apache@apache.org.\n+  *\n+  * 5. Products derived from this software may not be called \"Apache\"\n+  *    nor may \"Apache\" appear in their names without prior written\n+  *    permission of the Apache Group.\n+  *\n+  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+  * SUCH DAMAGE.\n+  * ====================================================================\n+  *\n+  * This software consists of voluntary contributions made by many\n+  * individuals on behalf of the Apache Software Foundation.  For more\n+  * information on the Apache Software Foundation, please see\n+  * <http://www.apache.org/>.\n+  *\n+  * [Additional notices, if required by prior licensing conditions]\n+  *\n+  */\n+package org.apache.commons.codec.binary;\n+\n+import org.apache.commons.codec.BinaryDecoder;\n+import org.apache.commons.codec.BinaryEncoder;\n+import org.apache.commons.codec.DecoderException;\n+import org.apache.commons.codec.EncoderException;\n+\n+/**\n+  * This class provides encode/decode for RFC 2045 Base64 as \n+  * defined by RFC 2045, N. Freed and N. Borenstein.  <a\n+  * href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>:\n+  * Multipurpose Internet Mail Extensions (MIME) Part One: Format of\n+  * Internet Message Bodies. Reference 1996\n+  *\n+  * @author Jeffrey Rodriguez\n+  * @author <a href=\"dlr@apache.org\">Daniel Rall</a>\n+  * @author <a href=\"m.redington@ucl.ac.uk\">Martin Redington</a>\n+  * @since 1.0-dev\n+  *\n+  * @todo Add more documentation\n+  */\n+public class Base64 implements BinaryEncoder, BinaryDecoder {\n+\n+    // Create constants pertaining to the chunk requirement\n+    static final int CHUNK_SIZE = 76;\n+    static final byte[] CHUNK_SEPARATOR = \"\\n\".getBytes();\n+\n+    // Create numerical and byte constants \n+    static final int BASELENGTH = 255;\n+    static final int LOOKUPLENGTH = 64;\n+    static final int TWENTYFOURBITGROUP = 24;\n+    static final int EIGHTBIT = 8;\n+    static final int SIXTEENBIT = 16;\n+    static final int SIXBIT = 6;\n+    static final int FOURBYTE = 4;\n+    static final int SIGN = -128;\n+    static final byte PAD = (byte) '=';\n+\n+    // Create arrays to hold the base64 characters and a \n+    // lookup for base64 chars\n+    private static byte[] base64Alphabet = new byte[BASELENGTH];\n+    private static byte[] lookUpBase64Alphabet = new byte[LOOKUPLENGTH];\n+\n+    // Populating the lookup and character arrays\n+    static {\n+        for (int i = 0; i < BASELENGTH; i++) {\n+            base64Alphabet[i] = (byte) -1;\n+        }\n+        for (int i = 'Z'; i >= 'A'; i--) {\n+            base64Alphabet[i] = (byte) (i - 'A');\n+        }\n+        for (int i = 'z'; i >= 'a'; i--) {\n+            base64Alphabet[i] = (byte) (i - 'a' + 26);\n+        }\n+        for (int i = '9'; i >= '0'; i--) {\n+            base64Alphabet[i] = (byte) (i - '0' + 52);\n+        }\n+\n+        base64Alphabet['+'] = 62;\n+        base64Alphabet['/'] = 63;\n+\n+        for (int i = 0; i <= 25; i++) {\n+            lookUpBase64Alphabet[i] = (byte) ('A' + i);\n+        }\n+\n+        for (int i = 26, j = 0; i <= 51; i++, j++) {\n+            lookUpBase64Alphabet[i] = (byte) ('a' + j);\n+        }\n+\n+        for (int i = 52, j = 0; i <= 61; i++, j++) {\n+            lookUpBase64Alphabet[i] = (byte) ('0' + j);\n+        }\n+\n+        lookUpBase64Alphabet[62] = (byte) '+';\n+        lookUpBase64Alphabet[63] = (byte) '/';\n+    }\n+\n+    private static boolean isBase64(byte octect) {\n+        if (octect == PAD) {\n+            return true;\n+        } \n+        else if (base64Alphabet[octect] == -1) {\n+            return false;\n+        } \n+        else {\n+            return true;\n+        }\n+    }\n+\n+    public static boolean isArrayByteBase64(byte[] arrayOctect) {\n+\n+        arrayOctect = discardWhitespace(arrayOctect);\n+\n+        int length = arrayOctect.length;\n+        if (length == 0) {\n+            // shouldn't a 0 length array be valid base64 data?\n+            // return false;\n+            return true;\n+        }\n+        for (int i = 0; i < length; i++) {\n+            if (!isBase64(arrayOctect[i])) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+\n+    public static byte[] encodeBase64(byte[] binaryData) {\n+        return (encodeBase64(binaryData, false));\n+    }\n+\n+    public static byte[] encodeBase64Chunked(byte[] binaryData) {\n+        return (encodeBase64(binaryData, true));\n+    }\n+\n+    public Object decode(Object pObject) throws DecoderException {\n+\n+        Object result;\n+\n+        if (!(pObject instanceof byte[])) {\n+            throw new DecoderException(\n+                \"Parameter supplied to \"\n+                    + \"Base64 \"\n+                    + \"decode is not a byte[]\");\n+        } \n+        else {\n+            result = decode((byte[]) pObject);\n+        }\n+\n+        return result;\n+\n+    }\n+\n+    public byte[] decode(byte[] pArray) throws DecoderException {\n+\n+        byte[] result;\n+\n+        if (!isArrayByteBase64(pArray)) {\n+            throw new DecoderException(\n+                \"Parameter supplied to \"\n+                    + \"Base64 \"\n+                    + \"decode is not a valid base64 data.\");\n+        } \n+        else {\n+            result = decodeBase64((byte[]) pArray);\n+        }\n+\n+        return (result);\n+    }\n+\n+    /**\n+     * Encodes hex octects into Base64.\n+     *\n+     * @param binaryData Array containing binary data to encode.\n+     * @return Base64-encoded data.\n+     */\n+    public static byte[] encodeBase64(byte[] binaryData, boolean isChunked) {\n+        int lengthDataBits = binaryData.length * EIGHTBIT;\n+        int fewerThan24bits = lengthDataBits % TWENTYFOURBITGROUP;\n+        int numberTriplets = lengthDataBits / TWENTYFOURBITGROUP;\n+        byte encodedData[] = null;\n+        int encodedDataLength = 0;\n+        int nbrChunks = 0;\n+\n+        if (fewerThan24bits != 0) {\n+            //data not divisible by 24 bit\n+            encodedDataLength = (numberTriplets + 1) * 4;\n+        } \n+        else {\n+            // 16 or 8 bit\n+            encodedDataLength = numberTriplets * 4;\n+        }\n+\n+        // If the output is to be \"chunked\" into 76 character sections, \n+        // for compliance with RFC 2045 MIME, then it is important to \n+        // allow for extra length to account for the separator(s)\n+        if (isChunked) {\n+\n+            nbrChunks =\n+                (CHUNK_SEPARATOR.length == 0\n+                    ? 0\n+                    : (int) Math.ceil((float) encodedDataLength / CHUNK_SIZE));\n+            encodedDataLength += nbrChunks * CHUNK_SEPARATOR.length;\n+        }\n+\n+        encodedData = new byte[encodedDataLength];\n+\n+        byte k = 0, l = 0, b1 = 0, b2 = 0, b3 = 0;\n+\n+        int encodedIndex = 0;\n+        int dataIndex = 0;\n+        int i = 0;\n+        int nextSeparatorIndex = CHUNK_SIZE;\n+        int chunksSoFar = 0;\n+\n+        //log.debug(\"number of triplets = \" + numberTriplets);\n+        for (i = 0; i < numberTriplets; i++) {\n+            dataIndex = i * 3;\n+            b1 = binaryData[dataIndex];\n+            b2 = binaryData[dataIndex + 1];\n+            b3 = binaryData[dataIndex + 2];\n+\n+            //log.debug(\"b1= \" + b1 +\", b2= \" + b2 + \", b3= \" + b3);\n+\n+            l = (byte) (b2 & 0x0f);\n+            k = (byte) (b1 & 0x03);\n+\n+            byte val1 =\n+                ((b1 & SIGN) == 0)\n+                    ? (byte) (b1 >> 2)\n+                    : (byte) ((b1) >> 2 ^ 0xc0);\n+            byte val2 =\n+                ((b2 & SIGN) == 0)\n+                    ? (byte) (b2 >> 4)\n+                    : (byte) ((b2) >> 4 ^ 0xf0);\n+            byte val3 =\n+                ((b3 & SIGN) == 0)\n+                    ? (byte) (b3 >> 6)\n+                    : (byte) ((b3) >> 6 ^ 0xfc);\n+\n+            encodedData[encodedIndex] = lookUpBase64Alphabet[val1];\n+            //log.debug( \"val2 = \" + val2 );\n+            //log.debug( \"k4   = \" + (k<<4) );\n+            //log.debug(  \"vak  = \" + (val2 | (k<<4)) );\n+            encodedData[encodedIndex + 1] =\n+                lookUpBase64Alphabet[val2 | (k << 4)];\n+            encodedData[encodedIndex + 2] =\n+                lookUpBase64Alphabet[(l << 2) | val3];\n+            encodedData[encodedIndex + 3] = lookUpBase64Alphabet[b3 & 0x3f];\n+\n+            encodedIndex += 4;\n+\n+            // If we are chunking, let's put a chunk separator down.\n+            if (isChunked) {\n+                // this assumes that CHUNK_SIZE % 4 == 0\n+                if (encodedIndex == nextSeparatorIndex) {\n+                    System.arraycopy(\n+                        CHUNK_SEPARATOR,\n+                        0,\n+                        encodedData,\n+                        encodedIndex,\n+                        CHUNK_SEPARATOR.length);\n+                    chunksSoFar++;\n+                    nextSeparatorIndex =\n+                        (CHUNK_SIZE * (chunksSoFar + 1))\n+                            + (chunksSoFar * CHUNK_SEPARATOR.length);\n+                    encodedIndex += CHUNK_SEPARATOR.length;\n+                }\n+            }\n+        }\n+\n+        // form integral number of 6-bit groups\n+        dataIndex = i * 3;\n+\n+        if (fewerThan24bits == EIGHTBIT) {\n+            b1 = binaryData[dataIndex];\n+            k = (byte) (b1 & 0x03);\n+            //log.debug(\"b1=\" + b1);\n+            //log.debug(\"b1<<2 = \" + (b1>>2) );\n+            byte val1 =\n+                ((b1 & SIGN) == 0)\n+                    ? (byte) (b1 >> 2)\n+                    : (byte) ((b1) >> 2 ^ 0xc0);\n+            encodedData[encodedIndex] = lookUpBase64Alphabet[val1];\n+            encodedData[encodedIndex + 1] = lookUpBase64Alphabet[k << 4];\n+            encodedData[encodedIndex + 2] = PAD;\n+            encodedData[encodedIndex + 3] = PAD;\n+        } \n+        else if (fewerThan24bits == SIXTEENBIT) {\n+\n+            b1 = binaryData[dataIndex];\n+            b2 = binaryData[dataIndex + 1];\n+            l = (byte) (b2 & 0x0f);\n+            k = (byte) (b1 & 0x03);\n+\n+            byte val1 =\n+                ((b1 & SIGN) == 0)\n+                    ? (byte) (b1 >> 2)\n+                    : (byte) ((b1) >> 2 ^ 0xc0);\n+            byte val2 =\n+                ((b2 & SIGN) == 0)\n+                    ? (byte) (b2 >> 4)\n+                    : (byte) ((b2) >> 4 ^ 0xf0);\n+\n+            encodedData[encodedIndex] = lookUpBase64Alphabet[val1];\n+            encodedData[encodedIndex + 1] =\n+                lookUpBase64Alphabet[val2 | (k << 4)];\n+            encodedData[encodedIndex + 2] = lookUpBase64Alphabet[l << 2];\n+            encodedData[encodedIndex + 3] = PAD;\n+        }\n+\n+        if (isChunked) {\n+            // we also add a separator to the end of the final chunk.\n+            if (chunksSoFar < nbrChunks) {\n+                System.arraycopy(\n+                    CHUNK_SEPARATOR,\n+                    0,\n+                    encodedData,\n+                    encodedDataLength - CHUNK_SEPARATOR.length,\n+                    CHUNK_SEPARATOR.length);\n+            }\n+        }\n+\n+        return encodedData;\n+    }\n+\n+    /**\n+     * Decodes Base64 data into octects\n+     *\n+     * @param binaryData Byte array containing Base64 data\n+     * @return Array containing decoded data.\n+     */\n+    public static byte[] decodeBase64(byte[] base64Data) {\n+        // RFC 2045 suggests line wrapping at (no more than) 76\n+        // characters -- we may have embedded whitespace.\n+        base64Data = discardWhitespace(base64Data);\n+\n+        // handle the edge case, so we don't have to worry about it later\n+        if (base64Data.length == 0) {\n+            return new byte[0];\n+        }\n+\n+        int numberQuadruple = base64Data.length / FOURBYTE;\n+        byte decodedData[] = null;\n+        byte b1 = 0, b2 = 0, b3 = 0, b4 = 0, marker0 = 0, marker1 = 0;\n+\n+        // Throw away anything not in base64Data\n+\n+        int encodedIndex = 0;\n+        int dataIndex = 0;\n+        {\n+            // this sizes the output array properly - rlw\n+            int lastData = base64Data.length;\n+            // ignore the '=' padding\n+            while (base64Data[lastData - 1] == PAD) {\n+                if (--lastData == 0) {\n+                    return new byte[0];\n+                }\n+            }\n+            decodedData = new byte[lastData - numberQuadruple];\n+        }\n+\n+        for (int i = 0; i < numberQuadruple; i++) {\n+            dataIndex = i * 4;\n+            marker0 = base64Data[dataIndex + 2];\n+            marker1 = base64Data[dataIndex + 3];\n+\n+            b1 = base64Alphabet[base64Data[dataIndex]];\n+            b2 = base64Alphabet[base64Data[dataIndex + 1]];\n+\n+            if (marker0 != PAD && marker1 != PAD) {\n+                //No PAD e.g 3cQl\n+                b3 = base64Alphabet[marker0];\n+                b4 = base64Alphabet[marker1];\n+\n+                decodedData[encodedIndex] = (byte) (b1 << 2 | b2 >> 4);\n+                decodedData[encodedIndex + 1] =\n+                    (byte) (((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));\n+                decodedData[encodedIndex + 2] = (byte) (b3 << 6 | b4);\n+            } \n+            else if (marker0 == PAD) {\n+                //Two PAD e.g. 3c[Pad][Pad]\n+                decodedData[encodedIndex] = (byte) (b1 << 2 | b2 >> 4);\n+            } \n+            else if (marker1 == PAD) {\n+                //One PAD e.g. 3cQ[Pad]\n+                b3 = base64Alphabet[marker0];\n+\n+                decodedData[encodedIndex] = (byte) (b1 << 2 | b2 >> 4);\n+                decodedData[encodedIndex + 1] =\n+                    (byte) (((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));\n+            }\n+            encodedIndex += 3;\n+        }\n+        return decodedData;\n+    }\n+\n+    /**\n+     * Discards any whitespace from a base-64 encoded block.\n+     *\n+     * @param data The base-64 encoded data to discard the whitespace\n+     * from.\n+     * @return The data, less whitespace (see RFC 2045).\n+     */\n+    static byte[] discardWhitespace(byte[] data) {\n+        byte groomedData[] = new byte[data.length];\n+        int bytesCopied = 0;\n+\n+        for (int i = 0; i < data.length; i++) {\n+            switch (data[i]) {\n+                case (byte) ' ' :\n+                case (byte) '\\n' :\n+                case (byte) '\\r' :\n+                case (byte) '\\t' :\n+                    break;\n+                default:\n+                    groomedData[bytesCopied++] = data[i];\n+            }\n+        }\n+\n+        byte packedData[] = new byte[bytesCopied];\n+\n+        System.arraycopy(groomedData, 0, packedData, 0, bytesCopied);\n+\n+        return packedData;\n+    }\n+\n+    // Implementation of the Encoder Interface\n+\n+    /**\n+     * encode an Object\n+     */\n+    public Object encode(Object pObject) throws EncoderException {\n+\n+        Object result;\n+\n+        if (!(pObject instanceof byte[])) {\n+            throw new EncoderException(\n+                \"Parameter supplied to \"\n+                    + \"Base64 \"\n+                    + \"encode is not a byte[]\");\n+        } \n+        else {\n+            result = encode((byte[]) pObject);\n+        }\n+\n+        return result;\n+\n+    }\n+\n+    public byte[] encode(byte[] pArray) throws EncoderException {\n+        return (encodeBase64(pArray, false));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/codec/binary/Hex.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Commons\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Commons\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.codec.binary;\n+\n+/**\n+ * Hex encoder/decoder\n+ * \n+ * @author <a href=\"mailto:siege@preoccupied.net\">Christopher O'Brien</a>\n+ * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n+ */\n+public class Hex {\n+\n+\n+    /** for building output as Hex */\n+    private static char[] digits = {\n+        '0', '1', '2', '3', '4', '5', '6', '7',\n+           '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'\n+    };\n+\n+\n+\n+    /**\n+       Converts an array of bytes into an array of characters representing the\n+       hexidecimal values of each byte in order. The returned array will be\n+       double the length of the passed array, as it takes two characters to\n+       represent any given byte.\n+    */\n+    public static char[] encodeHex(byte[] data) {\n+\n+        int l = data.length;\n+\n+           char[] out = new char[l << 1];\n+\n+           // two characters form the hex value.\n+           for (int i = 0, j = 0; i < l; i++) {\n+               out[j++] = digits[(0xF0 & data[i]) >>> 4 ];\n+               out[j++] = digits[ 0x0F & data[i] ];\n+           }\n+\n+           return out;\n+    }\n+\n+\n+\n+    /**\n+       Converts an array of characters representing hexidecimal values into an\n+       array of bytes of those same values. The returned array will be half the\n+       length of the passed array, as it takes two characters to represent any\n+       given byte. An exception is thrown if the passed char array has an odd\n+       number of elements.\n+    */\n+    public static byte[] decodeHex(char[] data) throws Exception {\n+\n+        int l = data.length;\n+\n+           if ((l & 0x01) != 0) {\n+               throw new Exception(\"odd number of characters.\");\n+           }\n+\n+           byte[] out = new byte[l >> 1];\n+\n+           // two characters form the hex value.\n+           for (int i = 0, j = 0; j < l; i++) {\n+               int f = Character.digit(data[j++], 16) << 4;\n+               f = f | Character.digit(data[j++], 16);\n+               out[i] = (byte) (f & 0xFF);\n+           }\n+\n+           return out;\n+    }\n+\n+}\n+\n--- /dev/null\n+++ b/src/java/org/apache/commons/codec/language/Metaphone.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Commons\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Commons\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.codec.language;\n+\n+import org.apache.commons.codec.EncoderException;\n+import org.apache.commons.codec.StringEncoder;\n+\n+/**\n+ * A class to generate phonetic code.\n+ * The initial Java implementation, William B. Brogden.  December, 1997\n+ * Permission given by wbrogden for code to be used anywhere.\n+ * \n+ *  \"Hanging on the Metaphone\" by Lawrence Philips\n+ *      <i>Computer Language</i> of Dec. 1990, p 39   \n+ * \n+ * @version $Revision: 1.1 $ $Date: 2003/04/25 17:50:56 $\n+ * @author wbrogden@bga.com\n+ * @author bayard@generationjava.com\n+ * @author tobrien@transolutions.net\n+ */\n+public class Metaphone implements StringEncoder {\n+\n+    private String vowels = \"AEIOU\" ;\n+    private String frontv = \"EIY\"   ;\n+    private String varson = \"CSPTG\" ;\n+\n+    private int maxCodeLen = 4 ;\n+\n+    public Metaphone() {\n+        super();\n+    }\n+\n+    /**\n+     * Find the metaphone value of a String. This is similar to the\n+     * soundex algorithm, but better at finding similar sounding words.\n+     * All input is converted to upper case.\n+     * Limitations: Input format is expected to be a single ASCII word\n+     * with only characters in the A - Z range, no punctuation or numbers.\n+     */\n+    public String metaphone(String txt){\n+        int mtsz = 0  ;\n+        boolean hard = false ;\n+        if ((txt == null) ||\n+            (txt.length() == 0)) return \"\" ;\n+        // single character is itself\n+        if (txt.length() == 1) return txt.toUpperCase() ;\n+      \n+        char[] inwd = txt.toUpperCase().toCharArray() ;\n+      \n+        String tmpS ;\n+        StringBuffer local = new StringBuffer(40); // manipulate\n+        StringBuffer code = new StringBuffer(10) ; //   output\n+        // handle initial 2 characters exceptions\n+        switch(inwd[0]){\n+        case 'K': case 'G' : case 'P' : /* looking for KN, etc*/\n+            if (inwd[1] == 'N')local.append(inwd, 1, inwd.length - 1);\n+            else local.append(inwd);\n+            break;\n+        case 'A': /* looking for AE */\n+            if (inwd[1] == 'E')local.append(inwd, 1, inwd.length - 1);\n+            else local.append(inwd);\n+            break;\n+        case 'W' : /* looking for WR or WH */\n+            if (inwd[1] == 'R'){   // WR -> R\n+                local.append(inwd, 1, inwd.length - 1); break ;\n+            }\n+            if (inwd[1] == 'H'){\n+                local.append(inwd, 1, inwd.length - 1);\n+                local.setCharAt(0,'W'); // WH -> W\n+            }\n+            else local.append(inwd);\n+            break;\n+        case 'X' : /* initial X becomes S */\n+            inwd[0] = 'S' ;local.append(inwd);\n+            break ;\n+        default :\n+            local.append(inwd);\n+        } // now local has working string with initials fixed\n+        int wdsz = local.length();\n+        int n = 0 ;\n+        while((mtsz < maxCodeLen) && // max code size of 4 works well\n+              (n < wdsz)){\n+            char symb = local.charAt(n) ;\n+            // remove duplicate letters except C\n+            if ((symb != 'C') &&\n+                (n > 0) && (local.charAt(n - 1) == symb)) n++ ;\n+            else{ // not dup\n+                switch(symb){\n+                case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :\n+                    if (n == 0) { code.append(symb);mtsz++;\n+                    }\n+                    break ; // only use vowel if leading char\n+                case 'B' :\n+                    if ((n > 0) &&\n+                        !(n + 1 == wdsz) && // not MB at end of word\n+                        (local.charAt(n - 1) == 'M')) {\n+                        code.append(symb);\n+                    }\n+                    else code.append(symb);\n+                    mtsz++ ;\n+                    break ;\n+                case 'C' : // lots of C special cases\n+                    /* discard if SCI, SCE or SCY */\n+                    if ((n > 0) &&\n+                        (local.charAt(n-1) == 'S') &&\n+                        (n + 1 < wdsz) &&\n+                        (frontv.indexOf(local.charAt(n + 1)) >= 0)){ break ;}\n+                    tmpS = local.toString();\n+                    if (tmpS.indexOf(\"CIA\", n) == n) { // \"CIA\" -> X\n+                        code.append('X'); mtsz++; break ;\n+                    }\n+                    if ((n + 1 < wdsz) &&\n+                        (frontv.indexOf(local.charAt(n+1))>= 0)){\n+                        code.append('S');mtsz++; break ; // CI,CE,CY -> S\n+                    }\n+                    if ((n > 0) &&\n+                        (tmpS.indexOf(\"SCH\",n-1)== n-1)){ // SCH->sk\n+                        code.append('K') ; mtsz++;break ;\n+                    }\n+                    if (tmpS.indexOf(\"CH\", n) == n){ // detect CH\n+                        if ((n == 0) &&\n+                            (wdsz >= 3) &&    // CH consonant -> K consonant\n+                            (vowels.indexOf(local.charAt(2)) < 0)){\n+                            code.append('K');\n+                        }\n+                        else { code.append('X'); // CHvowel -> X\n+                        }\n+                        mtsz++;\n+                    }\n+                    else { code.append('K');mtsz++;\n+                    }\n+                    break ;\n+                case 'D' :\n+                    if ((n + 2 < wdsz)&&  // DGE DGI DGY -> J\n+                        (local.charAt(n+1) == 'G')&&\n+                        (frontv.indexOf(local.charAt(n+2))>= 0)){\n+                        code.append('J'); n += 2 ;\n+                    }\n+                    else { code.append('T');\n+                    }\n+                    mtsz++;\n+                    break ;\n+                case 'G' : // GH silent at end or before consonant\n+                    if ((n + 2 == wdsz)&&\n+                        (local.charAt(n+1) == 'H')) break ;\n+                    if ((n + 2 < wdsz) &&\n+                        (local.charAt(n+1) == 'H')&&\n+                        (vowels.indexOf(local.charAt(n+2)) < 0)) break ;\n+                    tmpS = local.toString();\n+                    if ((n > 0) &&\n+                        (tmpS.indexOf(\"GN\", n) == n)||\n+                        (tmpS.indexOf(\"GNED\",n) == n)) break ; // silent G\n+                    if ((n > 0) &&\n+                        (local.charAt(n-1) == 'G')) hard = true ;\n+                    else hard = false ;\n+                    if ((n+1 < wdsz) &&\n+                        (frontv.indexOf(local.charAt(n+1)) >= 0)&&\n+                        (!hard)) code.append('J');\n+                    else code.append('K');\n+                    mtsz++;\n+                    break ;\n+                case 'H':\n+                    if (n + 1 == wdsz) break ; // terminal H\n+                    if ((n > 0) &&\n+                        (varson.indexOf(local.charAt(n-1)) >= 0)) break ;\n+                    if (vowels.indexOf(local.charAt(n+1)) >=0){\n+                        code.append('H') ; mtsz++;// Hvowel\n+                    }\n+                    break;\n+                case 'F': case 'J' : case 'L' :\n+                case 'M': case 'N' : case 'R' :\n+                    code.append(symb); mtsz++; break ;\n+                case 'K' :\n+                    if (n > 0){ // not initial\n+                        if (local.charAt(n -1) != 'C') {\n+                            code.append(symb);\n+                        }\n+                    }\n+                    else   code.append(symb); // initial K\n+                    mtsz++ ;\n+                    break ;\n+                case 'P' :\n+                    if ((n + 1 < wdsz) &&  // PH -> F\n+                        (local.charAt(n+1) == 'H'))code.append('F');\n+                    else code.append(symb);\n+                    mtsz++;\n+                    break ;\n+                case 'Q' :\n+                    code.append('K');mtsz++; break ;\n+                case 'S' :\n+                    tmpS = local.toString();\n+                    if ((tmpS.indexOf(\"SH\", n)== n) ||\n+                        (tmpS.indexOf(\"SIO\",n)== n) ||\n+                        (tmpS.indexOf(\"SIA\",n)== n)) code.append('X');\n+                    else code.append('S');\n+                    mtsz++ ;\n+                    break ;\n+                case 'T' :\n+                    tmpS = local.toString(); // TIA TIO -> X\n+                    if ((tmpS.indexOf(\"TIA\",n)== n)||\n+                        (tmpS.indexOf(\"TIO\",n)== n)){\n+                        code.append('X'); mtsz++; break;\n+                    }\n+                    if (tmpS.indexOf(\"TCH\",n)==n) break;\n+                    // substitute numeral 0 for TH (resembles theta after all)\n+                    if (tmpS.indexOf(\"TH\", n)==n) code.append('0');\n+                    else code.append('T');\n+                    mtsz++ ;\n+                    break ;\n+                case 'V' :\n+                    code.append('F'); mtsz++;break ;\n+                case 'W' : case 'Y' : // silent if not followed by vowel\n+                    if ((n+1 < wdsz) &&\n+                        (vowels.indexOf(local.charAt(n + 1)) >= 0)) {\n+                        code.append(symb);\n+                        mtsz++;\n+                    }\n+                    break ;\n+                case 'X' :\n+                    code.append('K'); code.append('S');mtsz += 2;\n+                    break ;\n+                case 'Z' :\n+                    code.append('S'); mtsz++; break ;\n+                } // end switch\n+                n++ ;\n+            } // end else from symb != 'C'\n+            if (mtsz > 4) { code.setLength(4); }\n+        }\n+        return code.toString();\n+    } // end static method metaPhone()\n+    \n+    public Object encode(Object pObject) throws EncoderException {\n+        Object result;\n+\n+        if (!(pObject instanceof java.lang.String)) {\n+            throw new EncoderException(\"Parameter supplied to Metaphone \" \n+                                       + \"encode is not of type \" \n+                                       + \"java.lang.String\"); \n+\t} \n+        else {\n+            result = metaphone((String) pObject);\n+        }\n+\n+        return result;\n+    }\n+\n+    public String encode(String pString) throws EncoderException {\n+        return (metaphone(pString));   \n+    }\n+\n+    /**\n+     * Are the metaphones of two strings the same.\n+     */\n+    public boolean isMetaphoneEqual(String str1, String str2) {\n+        return metaphone(str1).equals(metaphone(str2));\n+    }\n+\n+    /**\n+     * Returns the maxCodeLen.\n+     * @return int\n+     */\n+    public int getMaxCodeLen() {\n+        return maxCodeLen;\n+    }\n+\n+    /**\n+     * Sets the maxCodeLen.\n+     * @param maxCodeLen The maxCodeLen to set\n+     */\n+    public void setMaxCodeLen(int maxCodeLen) {\n+        this.maxCodeLen = maxCodeLen;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/codec/language/RefinedSoundex.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Commons\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Commons\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.codec.language;\n+\n+import org.apache.commons.codec.EncoderException;\n+import org.apache.commons.codec.StringEncoder;\n+\n+/**\n+ * Encodes a string into a soundex value.  Sounde is an encoding used to\n+ * relate similar names, but can also be used as a general purpose\n+ * scheme to find word with similar phonemes. \n+ * More information may be found at: http://www.bluepoof.com/Soundex/info2.html\n+ * \n+ * @author tobrien@transolutions.net\n+ * @author ggregory@seagullsw.com\n+ * @version $Revision: 1.1 $ $Date: 2003/04/25 17:50:56 $\n+ */\n+public class RefinedSoundex implements StringEncoder {\n+\n+    public static final char[] US_ENGLISH_MAPPING =\n+        \"01360240043788015936020505\".toCharArray();\n+\n+    public static final RefinedSoundex US_ENGLISH = new RefinedSoundex();\n+    \n+    private char[] soundexMapping;\n+\n+    public RefinedSoundex() {\n+        this(US_ENGLISH_MAPPING);\n+    }\n+\n+    public RefinedSoundex(char[] mapping) {\n+        this.soundexMapping = mapping;\n+    }\n+\n+    /**\n+     * Get the SoundEx value of a string.\n+     * This implementation is taken from the code-snippers on \n+     * http://www.sourceforge.net/\n+     */\n+    public String soundex(String str) {\n+        if (null == str || str.length() == 0) { return str; }\n+       \n+        StringBuffer sBuf = new StringBuffer();        \n+        str = str.toUpperCase();\n+\n+        sBuf.append(str.charAt(0));\n+\n+        char last, current;\n+        last = '*';\n+\n+        for (int i = 0; i < str.length(); i++) {\n+\n+            current = getMappingCode(str.charAt(i));\n+            if (current == last) {\n+                continue;\n+            } \n+            else if (current != 0) {\n+                sBuf.append(current);   \n+            }\n+            \n+            last = current;             \n+            \n+        }\n+        \n+        return sBuf.toString();\n+    }\n+\n+    public String encode(String pString) throws EncoderException {\n+        return (soundex(pString));   \n+    }\n+\n+    public Object encode(Object pObject) throws EncoderException {\n+\n+        Object result;\n+\n+        if (!(pObject instanceof java.lang.String)) {\n+            throw new EncoderException(\"Parameter supplied to \" \n+                                       + \"RefinedSoundex \" \n+                                       + \"encode is not of type \" \n+                                       + \"java.lang.String\"); \n+        } \n+        else {\n+            result = soundex((String) pObject);\n+        }\n+\n+        return result;\n+\n+    }\n+\n+\n+    /**\n+     * Used internally by the SoundEx algorithm.\n+     */\n+    private char getMappingCode(char c) {\n+        if (!Character.isLetter(c)) {\n+            return 0;\n+        } \n+        else {\n+            return soundexMapping[Character.toUpperCase(c) - 'A'];\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/codec/language/Soundex.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Commons\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Commons\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.codec.language;\n+\n+import org.apache.commons.codec.EncoderException;\n+import org.apache.commons.codec.StringEncoder;\n+\n+/**\n+ * Encodes a string into a refined soundex value.  \n+ * A refined soundex code is optimized for spell checking word. \n+ * \"Soundex\" method originally developed by Margaret Odell and \n+ *          Robert Russell\n+ * \n+ * http://www.bluepoof.com/Soundex/info2.html\n+ * \n+ * @author bayard@generationjava.com\n+ * @author tobrien@transolutions.net\n+ * @version $Revision: 1.1 $ $Date: 2003/04/25 17:50:56 $\n+ *\n+ * @todo Internationalize Exception Messages\n+ */\n+public class Soundex implements StringEncoder {\n+\n+    public static final char[] US_ENGLISH_MAPPING =\n+        \"01230120022455012623010202\".toCharArray();\n+\n+    public static final Soundex US_ENGLISH = new Soundex();\n+    \n+    private char[] soundexMapping;\n+    private int maxLength = 4;\n+\n+\n+    public Soundex() {\n+        this(US_ENGLISH_MAPPING);\n+    }\n+\n+    public Soundex(char[] mapping) {\n+        this.soundexMapping = mapping;\n+    }\n+\n+    /**\n+     * Get the SoundEx value of a string.\n+     * This implementation is taken from the code-snippers on \n+     * http://www.sourceforge.net/\n+     */\n+    public String soundex(String str) {\n+        if (null == str || str.length() == 0) { return str; }\n+        \n+        char out[] = { '0', '0', '0', '0' };\n+        char last, mapped;\n+        int incount = 1, count = 1;\n+        out[0] = Character.toUpperCase(str.charAt(0));\n+        last = getMappingCode(str.charAt(0));\n+        while ((incount < str.length()) \n+              && (mapped = getMappingCode(str.charAt(incount++))) != 0 \n+              && (count < maxLength)) {\n+                if ((mapped != '0') && (mapped != last)) {\n+                    out[count++] = mapped;\n+                }\n+                last = mapped;\n+            }\n+        return new String(out);\n+    }\n+\n+    public Object encode(Object pObject) throws EncoderException {\n+\n+        Object result;\n+\n+        if (!(pObject instanceof java.lang.String)) {\n+            throw new EncoderException(\"Parameter supplied to \" \n+                                       + \"Soundex \" \n+                                       + \"encode is not of type \" \n+                                       + \"java.lang.String\"); \n+        } \n+        else {\n+            result = soundex((String) pObject);\n+        }\n+\n+        return result;\n+\n+    }\n+\n+\n+    public String encode(String pString) throws EncoderException {\n+        return (soundex(pString));   \n+    }\n+\n+    /**\n+     * Used internally by the SoundEx algorithm.\n+     */\n+    private char getMappingCode(char c) {\n+        if (!Character.isLetter(c)) {\n+            return 0;\n+        } \n+        else {\n+            return soundexMapping[Character.toUpperCase(c) - 'A'];\n+        }\n+    }\n+\n+    /**\n+     * Returns the maxLength.  Standard Soundex\n+     * @return int\n+     */\n+    public int getMaxLength() {\n+        return maxLength;\n+    }\n+\n+    /**\n+     * Sets the maxLength.\n+     * @param maxLength The maxLength to set\n+     */\n+    public void setMaxLength(int maxLength) {\n+        this.maxLength = maxLength;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/codec/BinaryEncoderAbstractTest.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//codec/src/test/org/apache/commons/codec/BinaryEncoderAbstractTest.java,v 1.1 2003/04/25 17:50:56 tobrien Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2003/04/25 17:50:56 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.codec;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/04/25 17:50:56 $\n+ * @author Rodney Waldhoff\n+ * @author <a href=\"tobrien@apache.org\">Tim O'Brien</a>\n+ */\n+public abstract class BinaryEncoderAbstractTest extends TestCase {\n+\n+    public BinaryEncoderAbstractTest(String name) {\n+        super(name);\n+    }\n+\n+    protected abstract BinaryEncoder makeEncoder();\n+\n+    // ------------------------------------------------------------------------\n+\n+    public void testEncodeEmpty() throws Exception {\n+        BinaryEncoder encoder = makeEncoder();\n+        encoder.encode(new byte[0]);\n+    }        \n+\n+    public void testEncodeNull() throws Exception {\n+        BinaryEncoder encoder = makeEncoder();\n+\ttry {\n+\t    encoder.encode(null);\n+\t} catch( EncoderException ee ) {\n+\t    // An exception should be thrown\n+\t}\n+    }        \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/codec/StringEncoderAbstractTest.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//codec/src/test/org/apache/commons/codec/StringEncoderAbstractTest.java,v 1.1 2003/04/25 17:50:56 tobrien Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2003/04/25 17:50:56 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.codec;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/04/25 17:50:56 $\n+ * @author Rodney Waldhoff\n+ * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n+ */\n+public abstract class StringEncoderAbstractTest extends TestCase {\n+\n+    public StringEncoderAbstractTest(String name) {\n+        super(name);\n+    }\n+\n+    protected abstract StringEncoder makeEncoder();\n+\n+    // ------------------------------------------------------------------------\n+\n+    public void testEncodeEmpty() throws Exception {\n+        Encoder encoder = makeEncoder();\n+        encoder.encode(\"\");\n+        encoder.encode(\" \");\n+        encoder.encode(\"\\t\");\n+    }        \n+\n+    public void testEncodeNull() throws Exception {\n+        StringEncoder encoder = makeEncoder();\n+\t\n+\ttry {\n+\t    encoder.encode(null);\n+\t} catch( EncoderException ee ) {\n+\t    // An exception should be thrown\n+\t}\n+    }        \n+\n+    public void testEncodeWithInvalidObject() throws Exception {\n+\n+        boolean exceptionThrown = false;\n+        try {\n+            StringEncoder encoder = makeEncoder();\n+            encoder.encode( new Float( 3.4 ) );\n+        } catch( Exception e ) {\n+            exceptionThrown = true;\n+        }\n+\n+        assertTrue( \"An exception was not thrown when we tried to encode \" +\n+                    \"a Float object\", exceptionThrown );\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/codec/StringEncoderComparatorTest.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//codec/src/test/org/apache/commons/codec/StringEncoderComparatorTest.java,v 1.1 2003/04/25 17:50:56 tobrien Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2003/04/25 17:50:56 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.codec;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.codec.language.Soundex;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/04/25 17:50:56 $\n+ * @author <a href=\"tobrien@apache.org\">Tim O'Brien</a>\n+ */\n+public class StringEncoderComparatorTest extends TestCase {\n+\n+    public StringEncoderComparatorTest(String name) {\n+        super(name);\n+    }\n+\n+    public void testComparatorNoArgCon() throws Exception {\n+        new StringEncoderComparator();\n+    }        \n+\n+    public void testComparatorWithSoundex() throws Exception {\n+        StringEncoderComparator sCompare = \n+            new StringEncoderComparator( new Soundex() );\n+\n+        assertTrue( \"O'Brien and O'Brian didn't come out with \" +\n+                    \"the same Soundex, something must be wrong here\",\n+                    0 == sCompare.compare( \"O'Brien\", \"O'Brian\" ) );\n+\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/codec/base64/Base64Test.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//codec/src/test/org/apache/commons/codec/base64/Attic/Base64Test.java,v 1.1 2003/04/25 17:50:56 tobrien Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2003/04/25 17:50:56 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.codec.base64;\n+\n+\n+import java.util.Arrays;\n+import java.util.Random;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/04/25 17:50:56 $\n+ * @author Scott Sanders\n+ * @author Rodney Waldhoff\n+ */\n+public class Base64Test extends TestCase {\n+\n+    /**\n+     * Construct a new instance of this test case.\n+     *\n+     * @param name Name of the test case\n+     */\n+    public Base64Test(String name) {\n+        super(name);\n+    }\n+\n+\n+    /**\n+     * Set up instance variables required by this test case.\n+     */\n+    public void setUp() {\n+    }\n+\n+\n+    /**\n+     * Return the tests included in this test suite.\n+     */\n+    public static Test suite() {\n+        return (new TestSuite(Base64Test.class));\n+    }\n+\n+    /**\n+     * Tear down instance variables required by this test case.\n+     */\n+    public void tearDown() {\n+    }\n+\n+\n+    /**\n+     *  Test the Base64 implementation\n+     */\n+    public void testBase64() {\n+        String content = \"Hello World\";\n+        String encodedContent;\n+        encodedContent = new String(Base64.encode(content.getBytes()));\n+        assertTrue(\"encoding hello world\", encodedContent.equals(\"SGVsbG8gV29ybGQ=\"));\n+    }\n+\n+    // encode/decode random arrays from size 0 to size 11\n+    public void testEncodeDecodeSmall() {\n+        for(int i=0;i<12;i++) {\n+            byte[] data = new byte[i];\n+            _random.nextBytes(data);\n+            byte[] enc =  Base64.encode(data);\n+            assertTrue(\"\\\"\" + (new String(enc)) + \"\\\" is Base64 data.\",Base64.isBase64((new String(enc))));\n+            byte[] data2 = Base64.decode(enc);\n+            assertTrue(toString(data) + \" equals \" + toString(data2),Arrays.equals(data,data2));\n+        }\n+    }\n+\n+    // encode/decode a large random array\n+    public void testEncodeDecodeRandom() {\n+        for(int i=1;i<5;i++) {\n+            byte[] data = new byte[_random.nextInt(10000)+1];\n+            _random.nextBytes(data);\n+            byte[] enc =  Base64.encode(data);\n+            assertTrue(Base64.isBase64(new String(enc)));\n+            byte[] data2 = Base64.decode(enc);\n+            assertTrue(Arrays.equals(data,data2));\n+        }\n+    }\n+\n+    public void testSingletons() {\n+        assertEquals(\"AA==\",new String(Base64.encode(new byte[] { (byte)0 })));\n+        assertEquals(\"AQ==\",new String(Base64.encode(new byte[] { (byte)1 })));\n+        assertEquals(\"Ag==\",new String(Base64.encode(new byte[] { (byte)2 })));\n+        assertEquals(\"Aw==\",new String(Base64.encode(new byte[] { (byte)3 })));\n+        assertEquals(\"BA==\",new String(Base64.encode(new byte[] { (byte)4 })));\n+        assertEquals(\"BQ==\",new String(Base64.encode(new byte[] { (byte)5 })));\n+        assertEquals(\"Bg==\",new String(Base64.encode(new byte[] { (byte)6 })));\n+        assertEquals(\"Bw==\",new String(Base64.encode(new byte[] { (byte)7 })));\n+        assertEquals(\"CA==\",new String(Base64.encode(new byte[] { (byte)8 })));\n+        assertEquals(\"CQ==\",new String(Base64.encode(new byte[] { (byte)9 })));\n+        assertEquals(\"Cg==\",new String(Base64.encode(new byte[] { (byte)10 })));\n+        assertEquals(\"Cw==\",new String(Base64.encode(new byte[] { (byte)11 })));\n+        assertEquals(\"DA==\",new String(Base64.encode(new byte[] { (byte)12 })));\n+        assertEquals(\"DQ==\",new String(Base64.encode(new byte[] { (byte)13 })));\n+        assertEquals(\"Dg==\",new String(Base64.encode(new byte[] { (byte)14 })));\n+        assertEquals(\"Dw==\",new String(Base64.encode(new byte[] { (byte)15 })));\n+        assertEquals(\"EA==\",new String(Base64.encode(new byte[] { (byte)16 })));\n+        assertEquals(\"EQ==\",new String(Base64.encode(new byte[] { (byte)17 })));\n+        assertEquals(\"Eg==\",new String(Base64.encode(new byte[] { (byte)18 })));\n+        assertEquals(\"Ew==\",new String(Base64.encode(new byte[] { (byte)19 })));\n+        assertEquals(\"FA==\",new String(Base64.encode(new byte[] { (byte)20 })));\n+        assertEquals(\"FQ==\",new String(Base64.encode(new byte[] { (byte)21 })));\n+        assertEquals(\"Fg==\",new String(Base64.encode(new byte[] { (byte)22 })));\n+        assertEquals(\"Fw==\",new String(Base64.encode(new byte[] { (byte)23 })));\n+        assertEquals(\"GA==\",new String(Base64.encode(new byte[] { (byte)24 })));\n+        assertEquals(\"GQ==\",new String(Base64.encode(new byte[] { (byte)25 })));\n+        assertEquals(\"Gg==\",new String(Base64.encode(new byte[] { (byte)26 })));\n+        assertEquals(\"Gw==\",new String(Base64.encode(new byte[] { (byte)27 })));\n+        assertEquals(\"HA==\",new String(Base64.encode(new byte[] { (byte)28 })));\n+        assertEquals(\"HQ==\",new String(Base64.encode(new byte[] { (byte)29 })));\n+        assertEquals(\"Hg==\",new String(Base64.encode(new byte[] { (byte)30 })));\n+        assertEquals(\"Hw==\",new String(Base64.encode(new byte[] { (byte)31 })));\n+        assertEquals(\"IA==\",new String(Base64.encode(new byte[] { (byte)32 })));\n+        assertEquals(\"IQ==\",new String(Base64.encode(new byte[] { (byte)33 })));\n+        assertEquals(\"Ig==\",new String(Base64.encode(new byte[] { (byte)34 })));\n+        assertEquals(\"Iw==\",new String(Base64.encode(new byte[] { (byte)35 })));\n+        assertEquals(\"JA==\",new String(Base64.encode(new byte[] { (byte)36 })));\n+        assertEquals(\"JQ==\",new String(Base64.encode(new byte[] { (byte)37 })));\n+        assertEquals(\"Jg==\",new String(Base64.encode(new byte[] { (byte)38 })));\n+        assertEquals(\"Jw==\",new String(Base64.encode(new byte[] { (byte)39 })));\n+        assertEquals(\"KA==\",new String(Base64.encode(new byte[] { (byte)40 })));\n+        assertEquals(\"KQ==\",new String(Base64.encode(new byte[] { (byte)41 })));\n+        assertEquals(\"Kg==\",new String(Base64.encode(new byte[] { (byte)42 })));\n+        assertEquals(\"Kw==\",new String(Base64.encode(new byte[] { (byte)43 })));\n+        assertEquals(\"LA==\",new String(Base64.encode(new byte[] { (byte)44 })));\n+        assertEquals(\"LQ==\",new String(Base64.encode(new byte[] { (byte)45 })));\n+        assertEquals(\"Lg==\",new String(Base64.encode(new byte[] { (byte)46 })));\n+        assertEquals(\"Lw==\",new String(Base64.encode(new byte[] { (byte)47 })));\n+        assertEquals(\"MA==\",new String(Base64.encode(new byte[] { (byte)48 })));\n+        assertEquals(\"MQ==\",new String(Base64.encode(new byte[] { (byte)49 })));\n+        assertEquals(\"Mg==\",new String(Base64.encode(new byte[] { (byte)50 })));\n+        assertEquals(\"Mw==\",new String(Base64.encode(new byte[] { (byte)51 })));\n+        assertEquals(\"NA==\",new String(Base64.encode(new byte[] { (byte)52 })));\n+        assertEquals(\"NQ==\",new String(Base64.encode(new byte[] { (byte)53 })));\n+        assertEquals(\"Ng==\",new String(Base64.encode(new byte[] { (byte)54 })));\n+        assertEquals(\"Nw==\",new String(Base64.encode(new byte[] { (byte)55 })));\n+        assertEquals(\"OA==\",new String(Base64.encode(new byte[] { (byte)56 })));\n+        assertEquals(\"OQ==\",new String(Base64.encode(new byte[] { (byte)57 })));\n+        assertEquals(\"Og==\",new String(Base64.encode(new byte[] { (byte)58 })));\n+        assertEquals(\"Ow==\",new String(Base64.encode(new byte[] { (byte)59 })));\n+        assertEquals(\"PA==\",new String(Base64.encode(new byte[] { (byte)60 })));\n+        assertEquals(\"PQ==\",new String(Base64.encode(new byte[] { (byte)61 })));\n+        assertEquals(\"Pg==\",new String(Base64.encode(new byte[] { (byte)62 })));\n+        assertEquals(\"Pw==\",new String(Base64.encode(new byte[] { (byte)63 })));\n+        assertEquals(\"QA==\",new String(Base64.encode(new byte[] { (byte)64 })));\n+        assertEquals(\"QQ==\",new String(Base64.encode(new byte[] { (byte)65 })));\n+        assertEquals(\"Qg==\",new String(Base64.encode(new byte[] { (byte)66 })));\n+        assertEquals(\"Qw==\",new String(Base64.encode(new byte[] { (byte)67 })));\n+        assertEquals(\"RA==\",new String(Base64.encode(new byte[] { (byte)68 })));\n+        assertEquals(\"RQ==\",new String(Base64.encode(new byte[] { (byte)69 })));\n+        assertEquals(\"Rg==\",new String(Base64.encode(new byte[] { (byte)70 })));\n+        assertEquals(\"Rw==\",new String(Base64.encode(new byte[] { (byte)71 })));\n+        assertEquals(\"SA==\",new String(Base64.encode(new byte[] { (byte)72 })));\n+        assertEquals(\"SQ==\",new String(Base64.encode(new byte[] { (byte)73 })));\n+        assertEquals(\"Sg==\",new String(Base64.encode(new byte[] { (byte)74 })));\n+        assertEquals(\"Sw==\",new String(Base64.encode(new byte[] { (byte)75 })));\n+        assertEquals(\"TA==\",new String(Base64.encode(new byte[] { (byte)76 })));\n+        assertEquals(\"TQ==\",new String(Base64.encode(new byte[] { (byte)77 })));\n+        assertEquals(\"Tg==\",new String(Base64.encode(new byte[] { (byte)78 })));\n+        assertEquals(\"Tw==\",new String(Base64.encode(new byte[] { (byte)79 })));\n+        assertEquals(\"UA==\",new String(Base64.encode(new byte[] { (byte)80 })));\n+        assertEquals(\"UQ==\",new String(Base64.encode(new byte[] { (byte)81 })));\n+        assertEquals(\"Ug==\",new String(Base64.encode(new byte[] { (byte)82 })));\n+        assertEquals(\"Uw==\",new String(Base64.encode(new byte[] { (byte)83 })));\n+        assertEquals(\"VA==\",new String(Base64.encode(new byte[] { (byte)84 })));\n+        assertEquals(\"VQ==\",new String(Base64.encode(new byte[] { (byte)85 })));\n+        assertEquals(\"Vg==\",new String(Base64.encode(new byte[] { (byte)86 })));\n+        assertEquals(\"Vw==\",new String(Base64.encode(new byte[] { (byte)87 })));\n+        assertEquals(\"WA==\",new String(Base64.encode(new byte[] { (byte)88 })));\n+        assertEquals(\"WQ==\",new String(Base64.encode(new byte[] { (byte)89 })));\n+        assertEquals(\"Wg==\",new String(Base64.encode(new byte[] { (byte)90 })));\n+        assertEquals(\"Ww==\",new String(Base64.encode(new byte[] { (byte)91 })));\n+        assertEquals(\"XA==\",new String(Base64.encode(new byte[] { (byte)92 })));\n+        assertEquals(\"XQ==\",new String(Base64.encode(new byte[] { (byte)93 })));\n+        assertEquals(\"Xg==\",new String(Base64.encode(new byte[] { (byte)94 })));\n+        assertEquals(\"Xw==\",new String(Base64.encode(new byte[] { (byte)95 })));\n+        assertEquals(\"YA==\",new String(Base64.encode(new byte[] { (byte)96 })));\n+        assertEquals(\"YQ==\",new String(Base64.encode(new byte[] { (byte)97 })));\n+        assertEquals(\"Yg==\",new String(Base64.encode(new byte[] { (byte)98 })));\n+        assertEquals(\"Yw==\",new String(Base64.encode(new byte[] { (byte)99 })));\n+        assertEquals(\"ZA==\",new String(Base64.encode(new byte[] { (byte)100 })));\n+        assertEquals(\"ZQ==\",new String(Base64.encode(new byte[] { (byte)101 })));\n+        assertEquals(\"Zg==\",new String(Base64.encode(new byte[] { (byte)102 })));\n+        assertEquals(\"Zw==\",new String(Base64.encode(new byte[] { (byte)103 })));\n+        assertEquals(\"aA==\",new String(Base64.encode(new byte[] { (byte)104 })));\n+    }\n+\n+    public void testTriplets() {\n+        assertEquals(\"AAAA\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)0 })));\n+        assertEquals(\"AAAB\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)1 })));\n+        assertEquals(\"AAAC\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)2 })));\n+        assertEquals(\"AAAD\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)3 })));\n+        assertEquals(\"AAAE\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)4 })));\n+        assertEquals(\"AAAF\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)5 })));\n+        assertEquals(\"AAAG\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)6 })));\n+        assertEquals(\"AAAH\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)7 })));\n+        assertEquals(\"AAAI\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)8 })));\n+        assertEquals(\"AAAJ\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)9 })));\n+        assertEquals(\"AAAK\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)10 })));\n+        assertEquals(\"AAAL\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)11 })));\n+        assertEquals(\"AAAM\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)12 })));\n+        assertEquals(\"AAAN\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)13 })));\n+        assertEquals(\"AAAO\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)14 })));\n+        assertEquals(\"AAAP\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)15 })));\n+        assertEquals(\"AAAQ\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)16 })));\n+        assertEquals(\"AAAR\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)17 })));\n+        assertEquals(\"AAAS\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)18 })));\n+        assertEquals(\"AAAT\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)19 })));\n+        assertEquals(\"AAAU\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)20 })));\n+        assertEquals(\"AAAV\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)21 })));\n+        assertEquals(\"AAAW\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)22 })));\n+        assertEquals(\"AAAX\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)23 })));\n+        assertEquals(\"AAAY\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)24 })));\n+        assertEquals(\"AAAZ\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)25 })));\n+        assertEquals(\"AAAa\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)26 })));\n+        assertEquals(\"AAAb\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)27 })));\n+        assertEquals(\"AAAc\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)28 })));\n+        assertEquals(\"AAAd\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)29 })));\n+        assertEquals(\"AAAe\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)30 })));\n+        assertEquals(\"AAAf\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)31 })));\n+        assertEquals(\"AAAg\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)32 })));\n+        assertEquals(\"AAAh\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)33 })));\n+        assertEquals(\"AAAi\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)34 })));\n+        assertEquals(\"AAAj\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)35 })));\n+        assertEquals(\"AAAk\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)36 })));\n+        assertEquals(\"AAAl\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)37 })));\n+        assertEquals(\"AAAm\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)38 })));\n+        assertEquals(\"AAAn\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)39 })));\n+        assertEquals(\"AAAo\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)40 })));\n+        assertEquals(\"AAAp\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)41 })));\n+        assertEquals(\"AAAq\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)42 })));\n+        assertEquals(\"AAAr\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)43 })));\n+        assertEquals(\"AAAs\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)44 })));\n+        assertEquals(\"AAAt\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)45 })));\n+        assertEquals(\"AAAu\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)46 })));\n+        assertEquals(\"AAAv\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)47 })));\n+        assertEquals(\"AAAw\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)48 })));\n+        assertEquals(\"AAAx\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)49 })));\n+        assertEquals(\"AAAy\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)50 })));\n+        assertEquals(\"AAAz\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)51 })));\n+        assertEquals(\"AAA0\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)52 })));\n+        assertEquals(\"AAA1\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)53 })));\n+        assertEquals(\"AAA2\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)54 })));\n+        assertEquals(\"AAA3\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)55 })));\n+        assertEquals(\"AAA4\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)56 })));\n+        assertEquals(\"AAA5\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)57 })));\n+        assertEquals(\"AAA6\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)58 })));\n+        assertEquals(\"AAA7\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)59 })));\n+        assertEquals(\"AAA8\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)60 })));\n+        assertEquals(\"AAA9\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)61 })));\n+        assertEquals(\"AAA+\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)62 })));\n+        assertEquals(\"AAA/\",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)63 })));\n+    }\n+\n+    public void testKnownEncodings() {\n+        assertEquals(\"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\",new String(Base64.encode(\"The quick brown fox jumped over the lazy dogs.\".getBytes())));\n+        assertEquals(\"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==\",new String(Base64.encode(\"It was the best of times, it was the worst of times.\".getBytes())));\n+        assertEquals(\"aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==\",new String(Base64.encode(\"http://jakarta.apache.org/commmons\".getBytes())));\n+        assertEquals(\"QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==\",new String(Base64.encode(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\".getBytes())));\n+        assertEquals(\"eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0=\",new String(Base64.encode(\"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\".getBytes())));\n+        assertEquals(\"eHl6enkh\",new String(Base64.encode(\"xyzzy!\".getBytes())));\n+    }\n+\n+    public void testKnownDecodings() {\n+        assertEquals(\"The quick brown fox jumped over the lazy dogs.\",new String(Base64.decode(\"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\".getBytes())));\n+        assertEquals(\"It was the best of times, it was the worst of times.\",new String(Base64.decode(\"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==\".getBytes())));\n+        assertEquals(\"http://jakarta.apache.org/commmons\",new String(Base64.decode(\"aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==\".getBytes())));\n+        assertEquals(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\",new String(Base64.decode(\"QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==\".getBytes())));\n+        assertEquals(\"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\",new String(Base64.decode(\"eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0=\".getBytes())));\n+        assertEquals(\"xyzzy!\",new String(Base64.decode(\"eHl6enkh\".getBytes())));\n+    }\n+\n+    // -------------------------------------------------------- Private Methods\n+\n+    private String toString(byte[] data) {\n+        StringBuffer buf = new StringBuffer();\n+        for(int i=0;i<data.length;i++) {\n+            buf.append(data[i]);\n+            if(i != data.length-1) {\n+                buf.append(\",\");\n+            }\n+        }\n+        return buf.toString();\n+    }\n+\n+    // ------------------------------------------------------------------------\n+\n+    private Random _random = new Random();\n+\n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/codec/binary/Base64Test.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//codec/src/test/org/apache/commons/codec/binary/Base64Test.java,v 1.1 2003/04/25 17:50:56 tobrien Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2003/04/25 17:50:56 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.codec.binary;\n+\n+\n+import java.util.Arrays;\n+import java.util.Random;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/04/25 17:50:56 $\n+ * @author <a href=\"mailto:sanders@apache.org\">Scott Sanders</a>\n+ * @author <a href=\"mailto:rwaldhoff@apache.org\">Rodney Waldhoff</a>\n+ * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n+ */\n+public class Base64Test extends TestCase {\n+\n+    /**\n+     * Construct a new instance of this test case.\n+     *\n+     * @param name Name of the test case\n+     */\n+    public Base64Test(String name) {\n+        super(name);\n+    }\n+\n+\n+    /**\n+     *  Test the Base64 implementation\n+     */\n+    public void testBase64() {\n+        String content = \"Hello World\";\n+        String encodedContent;\n+        encodedContent = new String(Base64.encodeBase64(content.getBytes()));\n+        assertTrue(\"encoding hello world\", encodedContent.equals(\"SGVsbG8gV29ybGQ=\"));\n+    }\n+\n+    // encode/decode random arrays from size 0 to size 11\n+    public void testEncodeDecodeSmall() {\n+        for(int i=0;i<12;i++) {\n+            byte[] data = new byte[i];\n+            _random.nextBytes(data);\n+            byte[] enc =  Base64.encodeBase64(data);\n+            assertTrue(\"\\\"\" + (new String(enc)) + \"\\\" is Base64 data.\",Base64.isArrayByteBase64(enc) );\n+            byte[] data2 = Base64.decodeBase64(enc);\n+            assertTrue(toString(data) + \" equals \" + toString(data2),Arrays.equals(data,data2));\n+        }\n+    }\n+\n+    // encode/decode a large random array\n+    public void testEncodeDecodeRandom() {\n+        for(int i=1;i<5;i++) {\n+            byte[] data = new byte[_random.nextInt(10000)+1];\n+            _random.nextBytes(data);\n+            byte[] enc =  Base64.encodeBase64(data);\n+            assertTrue(Base64.isArrayByteBase64(enc));\n+            byte[] data2 = Base64.decodeBase64(enc);\n+            assertTrue(Arrays.equals(data,data2));\n+        }\n+    }\n+\n+    public void testSingletons() {\n+        assertEquals(\"AA==\",new String(Base64.encodeBase64(new byte[] { (byte)0 })));\n+        assertEquals(\"AQ==\",new String(Base64.encodeBase64(new byte[] { (byte)1 })));\n+        assertEquals(\"Ag==\",new String(Base64.encodeBase64(new byte[] { (byte)2 })));\n+        assertEquals(\"Aw==\",new String(Base64.encodeBase64(new byte[] { (byte)3 })));\n+        assertEquals(\"BA==\",new String(Base64.encodeBase64(new byte[] { (byte)4 })));\n+        assertEquals(\"BQ==\",new String(Base64.encodeBase64(new byte[] { (byte)5 })));\n+        assertEquals(\"Bg==\",new String(Base64.encodeBase64(new byte[] { (byte)6 })));\n+        assertEquals(\"Bw==\",new String(Base64.encodeBase64(new byte[] { (byte)7 })));\n+        assertEquals(\"CA==\",new String(Base64.encodeBase64(new byte[] { (byte)8 })));\n+        assertEquals(\"CQ==\",new String(Base64.encodeBase64(new byte[] { (byte)9 })));\n+        assertEquals(\"Cg==\",new String(Base64.encodeBase64(new byte[] { (byte)10 })));\n+        assertEquals(\"Cw==\",new String(Base64.encodeBase64(new byte[] { (byte)11 })));\n+        assertEquals(\"DA==\",new String(Base64.encodeBase64(new byte[] { (byte)12 })));\n+        assertEquals(\"DQ==\",new String(Base64.encodeBase64(new byte[] { (byte)13 })));\n+        assertEquals(\"Dg==\",new String(Base64.encodeBase64(new byte[] { (byte)14 })));\n+        assertEquals(\"Dw==\",new String(Base64.encodeBase64(new byte[] { (byte)15 })));\n+        assertEquals(\"EA==\",new String(Base64.encodeBase64(new byte[] { (byte)16 })));\n+        assertEquals(\"EQ==\",new String(Base64.encodeBase64(new byte[] { (byte)17 })));\n+        assertEquals(\"Eg==\",new String(Base64.encodeBase64(new byte[] { (byte)18 })));\n+        assertEquals(\"Ew==\",new String(Base64.encodeBase64(new byte[] { (byte)19 })));\n+        assertEquals(\"FA==\",new String(Base64.encodeBase64(new byte[] { (byte)20 })));\n+        assertEquals(\"FQ==\",new String(Base64.encodeBase64(new byte[] { (byte)21 })));\n+        assertEquals(\"Fg==\",new String(Base64.encodeBase64(new byte[] { (byte)22 })));\n+        assertEquals(\"Fw==\",new String(Base64.encodeBase64(new byte[] { (byte)23 })));\n+        assertEquals(\"GA==\",new String(Base64.encodeBase64(new byte[] { (byte)24 })));\n+        assertEquals(\"GQ==\",new String(Base64.encodeBase64(new byte[] { (byte)25 })));\n+        assertEquals(\"Gg==\",new String(Base64.encodeBase64(new byte[] { (byte)26 })));\n+        assertEquals(\"Gw==\",new String(Base64.encodeBase64(new byte[] { (byte)27 })));\n+        assertEquals(\"HA==\",new String(Base64.encodeBase64(new byte[] { (byte)28 })));\n+        assertEquals(\"HQ==\",new String(Base64.encodeBase64(new byte[] { (byte)29 })));\n+        assertEquals(\"Hg==\",new String(Base64.encodeBase64(new byte[] { (byte)30 })));\n+        assertEquals(\"Hw==\",new String(Base64.encodeBase64(new byte[] { (byte)31 })));\n+        assertEquals(\"IA==\",new String(Base64.encodeBase64(new byte[] { (byte)32 })));\n+        assertEquals(\"IQ==\",new String(Base64.encodeBase64(new byte[] { (byte)33 })));\n+        assertEquals(\"Ig==\",new String(Base64.encodeBase64(new byte[] { (byte)34 })));\n+        assertEquals(\"Iw==\",new String(Base64.encodeBase64(new byte[] { (byte)35 })));\n+        assertEquals(\"JA==\",new String(Base64.encodeBase64(new byte[] { (byte)36 })));\n+        assertEquals(\"JQ==\",new String(Base64.encodeBase64(new byte[] { (byte)37 })));\n+        assertEquals(\"Jg==\",new String(Base64.encodeBase64(new byte[] { (byte)38 })));\n+        assertEquals(\"Jw==\",new String(Base64.encodeBase64(new byte[] { (byte)39 })));\n+        assertEquals(\"KA==\",new String(Base64.encodeBase64(new byte[] { (byte)40 })));\n+        assertEquals(\"KQ==\",new String(Base64.encodeBase64(new byte[] { (byte)41 })));\n+        assertEquals(\"Kg==\",new String(Base64.encodeBase64(new byte[] { (byte)42 })));\n+        assertEquals(\"Kw==\",new String(Base64.encodeBase64(new byte[] { (byte)43 })));\n+        assertEquals(\"LA==\",new String(Base64.encodeBase64(new byte[] { (byte)44 })));\n+        assertEquals(\"LQ==\",new String(Base64.encodeBase64(new byte[] { (byte)45 })));\n+        assertEquals(\"Lg==\",new String(Base64.encodeBase64(new byte[] { (byte)46 })));\n+        assertEquals(\"Lw==\",new String(Base64.encodeBase64(new byte[] { (byte)47 })));\n+        assertEquals(\"MA==\",new String(Base64.encodeBase64(new byte[] { (byte)48 })));\n+        assertEquals(\"MQ==\",new String(Base64.encodeBase64(new byte[] { (byte)49 })));\n+        assertEquals(\"Mg==\",new String(Base64.encodeBase64(new byte[] { (byte)50 })));\n+        assertEquals(\"Mw==\",new String(Base64.encodeBase64(new byte[] { (byte)51 })));\n+        assertEquals(\"NA==\",new String(Base64.encodeBase64(new byte[] { (byte)52 })));\n+        assertEquals(\"NQ==\",new String(Base64.encodeBase64(new byte[] { (byte)53 })));\n+        assertEquals(\"Ng==\",new String(Base64.encodeBase64(new byte[] { (byte)54 })));\n+        assertEquals(\"Nw==\",new String(Base64.encodeBase64(new byte[] { (byte)55 })));\n+        assertEquals(\"OA==\",new String(Base64.encodeBase64(new byte[] { (byte)56 })));\n+        assertEquals(\"OQ==\",new String(Base64.encodeBase64(new byte[] { (byte)57 })));\n+        assertEquals(\"Og==\",new String(Base64.encodeBase64(new byte[] { (byte)58 })));\n+        assertEquals(\"Ow==\",new String(Base64.encodeBase64(new byte[] { (byte)59 })));\n+        assertEquals(\"PA==\",new String(Base64.encodeBase64(new byte[] { (byte)60 })));\n+        assertEquals(\"PQ==\",new String(Base64.encodeBase64(new byte[] { (byte)61 })));\n+        assertEquals(\"Pg==\",new String(Base64.encodeBase64(new byte[] { (byte)62 })));\n+        assertEquals(\"Pw==\",new String(Base64.encodeBase64(new byte[] { (byte)63 })));\n+        assertEquals(\"QA==\",new String(Base64.encodeBase64(new byte[] { (byte)64 })));\n+        assertEquals(\"QQ==\",new String(Base64.encodeBase64(new byte[] { (byte)65 })));\n+        assertEquals(\"Qg==\",new String(Base64.encodeBase64(new byte[] { (byte)66 })));\n+        assertEquals(\"Qw==\",new String(Base64.encodeBase64(new byte[] { (byte)67 })));\n+        assertEquals(\"RA==\",new String(Base64.encodeBase64(new byte[] { (byte)68 })));\n+        assertEquals(\"RQ==\",new String(Base64.encodeBase64(new byte[] { (byte)69 })));\n+        assertEquals(\"Rg==\",new String(Base64.encodeBase64(new byte[] { (byte)70 })));\n+        assertEquals(\"Rw==\",new String(Base64.encodeBase64(new byte[] { (byte)71 })));\n+        assertEquals(\"SA==\",new String(Base64.encodeBase64(new byte[] { (byte)72 })));\n+        assertEquals(\"SQ==\",new String(Base64.encodeBase64(new byte[] { (byte)73 })));\n+        assertEquals(\"Sg==\",new String(Base64.encodeBase64(new byte[] { (byte)74 })));\n+        assertEquals(\"Sw==\",new String(Base64.encodeBase64(new byte[] { (byte)75 })));\n+        assertEquals(\"TA==\",new String(Base64.encodeBase64(new byte[] { (byte)76 })));\n+        assertEquals(\"TQ==\",new String(Base64.encodeBase64(new byte[] { (byte)77 })));\n+        assertEquals(\"Tg==\",new String(Base64.encodeBase64(new byte[] { (byte)78 })));\n+        assertEquals(\"Tw==\",new String(Base64.encodeBase64(new byte[] { (byte)79 })));\n+        assertEquals(\"UA==\",new String(Base64.encodeBase64(new byte[] { (byte)80 })));\n+        assertEquals(\"UQ==\",new String(Base64.encodeBase64(new byte[] { (byte)81 })));\n+        assertEquals(\"Ug==\",new String(Base64.encodeBase64(new byte[] { (byte)82 })));\n+        assertEquals(\"Uw==\",new String(Base64.encodeBase64(new byte[] { (byte)83 })));\n+        assertEquals(\"VA==\",new String(Base64.encodeBase64(new byte[] { (byte)84 })));\n+        assertEquals(\"VQ==\",new String(Base64.encodeBase64(new byte[] { (byte)85 })));\n+        assertEquals(\"Vg==\",new String(Base64.encodeBase64(new byte[] { (byte)86 })));\n+        assertEquals(\"Vw==\",new String(Base64.encodeBase64(new byte[] { (byte)87 })));\n+        assertEquals(\"WA==\",new String(Base64.encodeBase64(new byte[] { (byte)88 })));\n+        assertEquals(\"WQ==\",new String(Base64.encodeBase64(new byte[] { (byte)89 })));\n+        assertEquals(\"Wg==\",new String(Base64.encodeBase64(new byte[] { (byte)90 })));\n+        assertEquals(\"Ww==\",new String(Base64.encodeBase64(new byte[] { (byte)91 })));\n+        assertEquals(\"XA==\",new String(Base64.encodeBase64(new byte[] { (byte)92 })));\n+        assertEquals(\"XQ==\",new String(Base64.encodeBase64(new byte[] { (byte)93 })));\n+        assertEquals(\"Xg==\",new String(Base64.encodeBase64(new byte[] { (byte)94 })));\n+        assertEquals(\"Xw==\",new String(Base64.encodeBase64(new byte[] { (byte)95 })));\n+        assertEquals(\"YA==\",new String(Base64.encodeBase64(new byte[] { (byte)96 })));\n+        assertEquals(\"YQ==\",new String(Base64.encodeBase64(new byte[] { (byte)97 })));\n+        assertEquals(\"Yg==\",new String(Base64.encodeBase64(new byte[] { (byte)98 })));\n+        assertEquals(\"Yw==\",new String(Base64.encodeBase64(new byte[] { (byte)99 })));\n+        assertEquals(\"ZA==\",new String(Base64.encodeBase64(new byte[] { (byte)100 })));\n+        assertEquals(\"ZQ==\",new String(Base64.encodeBase64(new byte[] { (byte)101 })));\n+        assertEquals(\"Zg==\",new String(Base64.encodeBase64(new byte[] { (byte)102 })));\n+        assertEquals(\"Zw==\",new String(Base64.encodeBase64(new byte[] { (byte)103 })));\n+        assertEquals(\"aA==\",new String(Base64.encodeBase64(new byte[] { (byte)104 })));\n+    }\n+\n+    public void testTriplets() {\n+        assertEquals(\"AAAA\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)0 })));\n+        assertEquals(\"AAAB\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)1 })));\n+        assertEquals(\"AAAC\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)2 })));\n+        assertEquals(\"AAAD\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)3 })));\n+        assertEquals(\"AAAE\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)4 })));\n+        assertEquals(\"AAAF\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)5 })));\n+        assertEquals(\"AAAG\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)6 })));\n+        assertEquals(\"AAAH\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)7 })));\n+        assertEquals(\"AAAI\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)8 })));\n+        assertEquals(\"AAAJ\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)9 })));\n+        assertEquals(\"AAAK\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)10 })));\n+        assertEquals(\"AAAL\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)11 })));\n+        assertEquals(\"AAAM\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)12 })));\n+        assertEquals(\"AAAN\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)13 })));\n+        assertEquals(\"AAAO\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)14 })));\n+        assertEquals(\"AAAP\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)15 })));\n+        assertEquals(\"AAAQ\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)16 })));\n+        assertEquals(\"AAAR\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)17 })));\n+        assertEquals(\"AAAS\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)18 })));\n+        assertEquals(\"AAAT\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)19 })));\n+        assertEquals(\"AAAU\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)20 })));\n+        assertEquals(\"AAAV\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)21 })));\n+        assertEquals(\"AAAW\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)22 })));\n+        assertEquals(\"AAAX\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)23 })));\n+        assertEquals(\"AAAY\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)24 })));\n+        assertEquals(\"AAAZ\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)25 })));\n+        assertEquals(\"AAAa\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)26 })));\n+        assertEquals(\"AAAb\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)27 })));\n+        assertEquals(\"AAAc\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)28 })));\n+        assertEquals(\"AAAd\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)29 })));\n+        assertEquals(\"AAAe\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)30 })));\n+        assertEquals(\"AAAf\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)31 })));\n+        assertEquals(\"AAAg\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)32 })));\n+        assertEquals(\"AAAh\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)33 })));\n+        assertEquals(\"AAAi\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)34 })));\n+        assertEquals(\"AAAj\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)35 })));\n+        assertEquals(\"AAAk\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)36 })));\n+        assertEquals(\"AAAl\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)37 })));\n+        assertEquals(\"AAAm\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)38 })));\n+        assertEquals(\"AAAn\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)39 })));\n+        assertEquals(\"AAAo\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)40 })));\n+        assertEquals(\"AAAp\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)41 })));\n+        assertEquals(\"AAAq\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)42 })));\n+        assertEquals(\"AAAr\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)43 })));\n+        assertEquals(\"AAAs\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)44 })));\n+        assertEquals(\"AAAt\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)45 })));\n+        assertEquals(\"AAAu\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)46 })));\n+        assertEquals(\"AAAv\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)47 })));\n+        assertEquals(\"AAAw\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)48 })));\n+        assertEquals(\"AAAx\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)49 })));\n+        assertEquals(\"AAAy\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)50 })));\n+        assertEquals(\"AAAz\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)51 })));\n+        assertEquals(\"AAA0\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)52 })));\n+        assertEquals(\"AAA1\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)53 })));\n+        assertEquals(\"AAA2\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)54 })));\n+        assertEquals(\"AAA3\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)55 })));\n+        assertEquals(\"AAA4\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)56 })));\n+        assertEquals(\"AAA5\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)57 })));\n+        assertEquals(\"AAA6\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)58 })));\n+        assertEquals(\"AAA7\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)59 })));\n+        assertEquals(\"AAA8\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)60 })));\n+        assertEquals(\"AAA9\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)61 })));\n+        assertEquals(\"AAA+\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)62 })));\n+        assertEquals(\"AAA/\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)63 })));\n+    }\n+\n+    public void testKnownEncodings() {\n+        assertEquals(\"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\",new String(Base64.encodeBase64(\"The quick brown fox jumped over the lazy dogs.\".getBytes())));\n+\tassertEquals(\"YmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJs\\nYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFo\\nIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBi\\nbGFoIGJsYWg=\\n\",new String(Base64.encodeBase64Chunked(\"blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah\".getBytes())));\n+        assertEquals(\"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==\",new String(Base64.encodeBase64(\"It was the best of times, it was the worst of times.\".getBytes())));\n+        assertEquals(\"aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==\",new String(Base64.encodeBase64(\"http://jakarta.apache.org/commmons\".getBytes())));\n+        assertEquals(\"QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==\",new String(Base64.encodeBase64(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\".getBytes())));\n+        assertEquals(\"eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0=\",new String(Base64.encodeBase64(\"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\".getBytes())));\n+        assertEquals(\"eHl6enkh\",new String(Base64.encodeBase64(\"xyzzy!\".getBytes())));\n+    }\n+\n+    public void testKnownDecodings() {\n+        assertEquals(\"The quick brown fox jumped over the lazy dogs.\",new String(Base64.decodeBase64(\"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\".getBytes())));\n+        assertEquals(\"It was the best of times, it was the worst of times.\",new String(Base64.decodeBase64(\"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==\".getBytes())));\n+        assertEquals(\"http://jakarta.apache.org/commmons\",new String(Base64.decodeBase64(\"aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==\".getBytes())));\n+        assertEquals(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\",new String(Base64.decodeBase64(\"QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==\".getBytes())));\n+        assertEquals(\"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\",new String(Base64.decodeBase64(\"eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0=\".getBytes())));\n+        assertEquals(\"xyzzy!\",new String(Base64.decodeBase64(\"eHl6enkh\".getBytes())));\n+        } \n+\n+    public void testNonBase64() throws Exception {\n+\n+        byte[] bArray = { '%' };\n+\n+        assertFalse( \"Invalid Base64 array was incorrectly validated as \" +\n+                     \"an array of Base64 encoded data\", \n+                     Base64.isArrayByteBase64( bArray ) );\n+        \n+        boolean exceptionThrown = false;\n+\n+        try {\n+            Base64 b64 = new Base64();\n+            b64.decode( bArray );\n+        } \n+        catch( Exception e ) {\n+            exceptionThrown = true;\n+        }\n+\n+        assertTrue( \"Exception wasn't thrown when trying to decode \" +\n+                    \"invalid base64 encoded data\", exceptionThrown );\n+\n+    }\n+\n+    public void testObjectDecodeWithInvalidParameter() throws Exception {\n+        boolean exceptionThrown = false;\n+\n+        Base64 b64 = new Base64();\n+\n+        try {\n+            Object o = new String( \"Yadayadayada\" );\n+            b64.decode( o );\n+        } catch( Exception e ) {\n+            exceptionThrown = true;\n+        }\n+\n+        assertTrue( \"decode(Object) didn't throw an exception when passed a \" +\n+                    \"String object\", exceptionThrown );\n+    }\n+\n+    public void testObjectDecodeWithValidParameter() throws Exception {\n+        boolean exceptionThrown = false;\n+\n+        String original = \"Hello World!\";\n+        byte[] bArray = \n+            Base64.encodeBase64( (new String(original)).getBytes() );\n+        Object o = (Object) bArray;\n+        \n+        Base64 b64 = new Base64();\n+        Object oDecoded = (Object) b64.decode( o );\n+        byte[] baDecoded = (byte[]) oDecoded;\n+        String dest = new String( baDecoded );\n+\n+        assertTrue( \"dest string down not equal original\",\n+                    dest.equals( original ) );\n+    }\n+\n+    public void testObjectEncodeWithInvalidParameter() throws Exception {\n+        boolean exceptionThrown = false;\n+\n+        Base64 b64 = new Base64();\n+\n+        try {\n+            Object o = new String( \"Yadayadayada\" );\n+            b64.encode( o );\n+        } catch( Exception e ) {\n+            exceptionThrown = true;\n+        }\n+\n+        assertTrue( \"encode(Object) didn't throw an exception when passed a \" +\n+                    \"String object\", exceptionThrown );\n+    }\n+\n+    public void testObjectEncodeWithValidParameter() throws Exception {\n+\n+        String original = \"Hello World!\";\n+        byte[] origBytes = original.getBytes();\n+        Object origObj = (Object) origBytes;\n+\n+        Base64 b64 = new Base64();\n+        Object oEncoded = b64.encode( origObj );\n+        byte[] bArray = \n+            Base64.decodeBase64( (byte[]) oEncoded );\n+        String dest = new String( bArray );\n+\n+        assertTrue( \"dest string down not equal original\",\n+                    dest.equals( original ) );\n+    }\n+\n+    public void testDiscardingOfWhiteSpace() throws Exception {\n+\n+        String orig = \"I am a late night coder.\";\n+\n+        byte[] encodedArray = Base64.encodeBase64( orig.getBytes() );\n+        StringBuffer intermediate = \n+            new StringBuffer( new String(encodedArray) );\n+\n+        intermediate.insert( 2, ' ' );\n+        intermediate.insert( 5, '\\t' );\n+        intermediate.insert( 10, '\\r' );\n+        intermediate.insert( 15, '\\n' );\n+\n+        byte[] encodedWithWS = intermediate.toString().getBytes();\n+        byte[] decodedWithWS = Base64.decodeBase64( encodedWithWS );\n+\n+        String dest = new String( decodedWithWS );\n+\n+        assertTrue( \"Dest string doesn't eausl original\", \n+                    dest.equals( orig ) );\n+    }\n+\n+\n+    // -------------------------------------------------------- Private Methods\n+\n+    private String toString(byte[] data) {\n+        StringBuffer buf = new StringBuffer();\n+        for(int i=0;i<data.length;i++) {\n+            buf.append(data[i]);\n+            if(i != data.length-1) {\n+                buf.append(\",\");\n+            }\n+        }\n+        return buf.toString();\n+    }\n+\n+    // ------------------------------------------------------------------------\n+\n+    private Random _random = new Random();\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/codec/binary/HexTest.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//codec/src/test/org/apache/commons/codec/binary/HexTest.java,v 1.1 2003/04/25 17:50:56 tobrien Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2003/04/25 17:50:56 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.codec.binary;\n+\n+import java.util.Arrays;\n+import java.util.Random;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * \n+ * @author <a href=\"mailto:siege@preoccupied.net\">Christopher O'Brien</a>\n+ * @author <a href=\"mailto:tobrien@apache.org\">Tim O'Brien</a>\n+ */\n+\n+public class HexTest extends TestCase {\n+\n+    public HexTest(String name) {\n+        super(name);\n+    }\n+\n+    public void testEncodeEmpty() throws Exception {\n+        char[] c = Hex.encodeHex(new byte[0]);\n+        assertTrue(Arrays.equals(new char[0], c));\n+    }\n+\n+    public void testEncodeZeroes() throws Exception {\n+        char[] c = Hex.encodeHex(new byte[36]);\n+        assertEquals(\n+            \"000000000000000000000000000000000000\"\n+                + \"000000000000000000000000000000000000\",\n+            new String(c));\n+    }\n+\n+    public void testHelloWorld() throws Exception {\n+        byte[] b = \"Hello World\".getBytes();\n+        char[] c = Hex.encodeHex(b);\n+        assertEquals(\"48656c6c6f20576f726c64\", new String(c));\n+    }\n+\n+    public void testEncodeDecodeRandom() throws Exception {\n+        Random random = new Random();\n+\n+        for (int i = 5; i > 0; i--) {\n+            byte[] data = new byte[random.nextInt(10000) + 1];\n+            random.nextBytes(data);\n+\n+            char[] enc = Hex.encodeHex(data);\n+            byte[] data2 = Hex.decodeHex(enc);\n+\n+            assertTrue(Arrays.equals(data, data2));\n+        }\n+    }\n+\n+    public void testOddCharacters() throws Exception {\n+\n+        boolean exceptionThrown = false;\n+\n+        try {\n+            char[] singleChar = new char[1];\n+            singleChar[0] = 'a';\n+\n+            Hex.decodeHex( singleChar );\n+        }\n+        catch (Exception e) {\n+            exceptionThrown = true;\n+        }\n+\n+        assertTrue( \"An exception wasn't thrown when trying to \" +\n+                    \"decode an odd number of characters\", exceptionThrown );\n+\n+\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/codec/language/MetaphoneTest.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//codec/src/test/org/apache/commons/codec/language/MetaphoneTest.java,v 1.1 2003/04/25 17:50:57 tobrien Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2003/04/25 17:50:57 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.codec.language;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.codec.StringEncoder;\n+import org.apache.commons.codec.StringEncoderAbstractTest;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/04/25 17:50:57 $\n+ * @author Rodney Waldhoff\n+ */\n+public class MetaphoneTest extends StringEncoderAbstractTest {\n+\n+    public MetaphoneTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        return (new TestSuite(MetaphoneTest.class));\n+    }\n+\n+    public void setUp() throws Exception {        \n+        super.setUp();\n+        _metaphone = new Metaphone();\n+    }\n+\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+        _metaphone = null;\n+    }\n+\n+    protected StringEncoder makeEncoder() {\n+        return new Metaphone();\n+    }\n+    \n+    // ------------------------------------------------------------------------\n+\n+    public void testMetaphone() {\n+        assertEquals(\"TSTN\",_metaphone.metaphone(\"testing\"));\n+        assertEquals(\"0\",_metaphone.metaphone(\"The\"));\n+        assertEquals(\"KK\",_metaphone.metaphone(\"quick\"));\n+        assertEquals(\"BRN\",_metaphone.metaphone(\"brown\"));\n+        assertEquals(\"FKS\",_metaphone.metaphone(\"fox\"));\n+        assertEquals(\"JMPT\",_metaphone.metaphone(\"jumped\"));\n+        assertEquals(\"OFR\",_metaphone.metaphone(\"over\"));\n+        assertEquals(\"0\",_metaphone.metaphone(\"the\"));\n+        assertEquals(\"LS\",_metaphone.metaphone(\"lazy\"));\n+        assertEquals(\"TKS\",_metaphone.metaphone(\"dogs\"));\n+    }\n+\n+    public void testIsMetaphoneEqual() {\n+        assertTrue(_metaphone.isMetaphoneEqual(\"Case\",\"case\"));\n+        assertTrue(_metaphone.isMetaphoneEqual(\"CASE\",\"Case\"));\n+        assertTrue(_metaphone.isMetaphoneEqual(\"caSe\",\"cAsE\"));\n+        \n+        assertTrue(_metaphone.isMetaphoneEqual(\"cookie\",\"quick\"));\n+        assertTrue(_metaphone.isMetaphoneEqual(\"quick\",\"cookie\"));\n+    }\n+\n+    private Metaphone _metaphone = null;\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/codec/language/RefinedSoundexTest.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//codec/src/test/org/apache/commons/codec/language/RefinedSoundexTest.java,v 1.1 2003/04/25 17:50:57 tobrien Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2003/04/25 17:50:57 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.codec.language;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.codec.StringEncoder;\n+import org.apache.commons.codec.StringEncoderAbstractTest;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/04/25 17:50:57 $\n+ * @author Rodney Waldhoff\n+ */\n+public class RefinedSoundexTest extends StringEncoderAbstractTest {\n+\n+    public RefinedSoundexTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        return (new TestSuite(RefinedSoundexTest.class));\n+    }\n+\n+    public void setUp() throws Exception {        \n+        super.setUp();\n+        _encoder = new RefinedSoundex();\n+    }\n+\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+        _encoder = null;\n+    }\n+\n+    protected StringEncoder makeEncoder() {\n+        return new RefinedSoundex();\n+    }\n+\n+    // ------------------------------------------------------------------------\n+\n+    public void testEncode() throws Exception {\n+        assertEquals(\"T6036084\",_encoder.encode(\"testing\"));\n+        assertEquals(\"T60\",_encoder.encode(\"The\"));\n+        assertEquals(\"Q503\",_encoder.encode(\"quick\"));\n+        assertEquals(\"B1908\",_encoder.encode(\"brown\"));\n+        assertEquals(\"F205\",_encoder.encode(\"fox\"));\n+        assertEquals(\"J408106\",_encoder.encode(\"jumped\"));\n+        assertEquals(\"O0209\",_encoder.encode(\"over\"));\n+        assertEquals(\"T60\",_encoder.encode(\"the\"));\n+        assertEquals(\"L7050\",_encoder.encode(\"lazy\"));\n+        assertEquals(\"D6043\",_encoder.encode(\"dogs\"));\n+    }\n+\n+    private RefinedSoundex _encoder = null;\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/codec/language/SoundexTest.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//codec/src/test/org/apache/commons/codec/language/SoundexTest.java,v 1.1 2003/04/25 17:50:57 tobrien Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2003/04/25 17:50:57 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.codec.language;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.codec.StringEncoder;\n+import org.apache.commons.codec.StringEncoderAbstractTest;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/04/25 17:50:57 $\n+ * @author Rodney Waldhoff\n+ */\n+public class SoundexTest extends StringEncoderAbstractTest {\n+\n+    public SoundexTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        return (new TestSuite(SoundexTest.class));\n+    }\n+\n+    public void setUp() throws Exception {        \n+        super.setUp();\n+        _encoder = new Soundex();\n+    }\n+\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+        _encoder = null;\n+    }\n+\n+    protected StringEncoder makeEncoder() {\n+        return new Soundex();\n+    }\n+\n+    // ------------------------------------------------------------------------\n+\n+    public void testEncode() throws Exception {\n+        assertEquals(\"T235\",_encoder.encode(\"testing\"));\n+        assertEquals(\"T000\",_encoder.encode(\"The\"));\n+        assertEquals(\"Q200\",_encoder.encode(\"quick\"));\n+        assertEquals(\"B650\",_encoder.encode(\"brown\"));\n+        assertEquals(\"F200\",_encoder.encode(\"fox\"));\n+        assertEquals(\"J513\",_encoder.encode(\"jumped\"));\n+        assertEquals(\"O160\",_encoder.encode(\"over\"));\n+        assertEquals(\"T000\",_encoder.encode(\"the\"));\n+        assertEquals(\"L200\",_encoder.encode(\"lazy\"));\n+        assertEquals(\"D200\",_encoder.encode(\"dogs\"));\n+    }\n+\n+    public void testMaxLength() throws Exception {\n+        Soundex soundex = new Soundex();\n+        soundex.setMaxLength( soundex.getMaxLength() );\n+    }\n+\n+    private Soundex _encoder = null;\n+}", "timestamp": 1051293060, "metainfo": ""}