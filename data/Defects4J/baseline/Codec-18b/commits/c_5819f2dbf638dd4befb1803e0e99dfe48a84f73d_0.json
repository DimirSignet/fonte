{"sha": "5819f2dbf638dd4befb1803e0e99dfe48a84f73d", "log": "Add missing @Override now we are using Java 1.6  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/StringEncoderComparator.java\n+++ b/src/main/java/org/apache/commons/codec/StringEncoderComparator.java\n      * @return the Comparable.compareTo() return code or 0 if an encoding error was caught.\n      * @see Comparable\n      */\n+    @Override\n     public int compare(Object o1, Object o2) {\n \n         int compareCode = 0;\n--- a/src/main/java/org/apache/commons/codec/binary/Hex.java\n+++ b/src/main/java/org/apache/commons/codec/binary/Hex.java\n      *             Thrown if an odd number of characters is supplied to this function\n      * @see #decodeHex(char[])\n      */\n+    @Override\n     public byte[] decode(byte[] array) throws DecoderException {\n         return decodeHex(new String(array, getCharset()).toCharArray());\n     }\n      *             char[]\n      * @see #decodeHex(char[])\n      */\n+    @Override\n     public Object decode(Object object) throws DecoderException {\n         try {\n             char[] charArray = object instanceof String ? ((String) object).toCharArray() : (char[]) object;\n      * @since 1.7 No longer throws IllegalStateException if the charsetName is invalid.\n      * @see #encodeHex(byte[])\n      */\n+    @Override\n     public byte[] encode(byte[] array) {\n         return encodeHexString(array).getBytes(this.getCharset());\n     }\n      *             Thrown if the given object is not a String or byte[]\n      * @see #encodeHex(byte[])\n      */\n+    @Override\n     public Object encode(Object object) throws EncoderException {\n         try {\n             byte[] byteArray = object instanceof String ? ((String) object).getBytes(this.getCharset()) : (byte[]) object;\n--- a/src/main/java/org/apache/commons/codec/language/AbstractCaverphone.java\n+++ b/src/main/java/org/apache/commons/codec/language/AbstractCaverphone.java\n      * @throws EncoderException\n      *             if the parameter supplied is not of type java.lang.String\n      */\n+    @Override\n     public Object encode(Object source) throws EncoderException {\n         if (!(source instanceof String)) {\n             throw new EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\");\n--- a/src/main/java/org/apache/commons/codec/language/Caverphone.java\n+++ b/src/main/java/org/apache/commons/codec/language/Caverphone.java\n      * @throws EncoderException\n      *             if the parameter supplied is not of type java.lang.String\n      */\n+    @Override\n     public Object encode(Object obj) throws EncoderException {\n         if (!(obj instanceof String)) {\n             throw new EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\");\n      *            String object to encode\n      * @return The caverphone code corresponding to the String supplied\n      */\n+    @Override\n     public String encode(String str) {\n         return this.caverphone(str);\n     }\n--- a/src/main/java/org/apache/commons/codec/language/Caverphone1.java\n+++ b/src/main/java/org/apache/commons/codec/language/Caverphone1.java\n      *            String the source string\n      * @return A caverphone code for the given String\n      */\n+    @Override\n     public String encode(String source) {\n         String txt = source;\n         if (txt == null || txt.length() == 0) {\n--- a/src/main/java/org/apache/commons/codec/language/Caverphone2.java\n+++ b/src/main/java/org/apache/commons/codec/language/Caverphone2.java\n      *            String the source string\n      * @return A caverphone code for the given String\n      */\n+    @Override\n     public String encode(String source) {\n         String txt = source;\n         if (txt == null || txt.length() == 0) {\n--- a/src/main/java/org/apache/commons/codec/language/ColognePhonetic.java\n+++ b/src/main/java/org/apache/commons/codec/language/ColognePhonetic.java\n         return output.toString();\n     }\n \n+    @Override\n     public Object encode(Object object) throws EncoderException {\n         if (!(object instanceof String)) {\n             throw new EncoderException(\"This method's parameter was expected to be of the type \" +\n         return encode((String) object);\n     }\n \n+    @Override\n     public String encode(String text) {\n         return colognePhonetic(text);\n     }\n--- a/src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java\n+++ b/src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java\n      * @return An encoded Object (will be of type String)\n      * @throws EncoderException encode parameter is not of type String\n      */\n+    @Override\n     public Object encode(Object obj) throws EncoderException {\n         if (!(obj instanceof String)) {\n             throw new EncoderException(\"DoubleMetaphone encode parameter is not of type String\"); \n      * @param value String to encode\n      * @return An encoded String\n      */\n+    @Override\n     public String encode(String value) {\n         return doubleMetaphone(value);   \n     }\n--- a/src/main/java/org/apache/commons/codec/language/Metaphone.java\n+++ b/src/main/java/org/apache/commons/codec/language/Metaphone.java\n      * @throws EncoderException if the parameter supplied is not\n      *                          of type java.lang.String\n      */\n+    @Override\n     public Object encode(Object obj) throws EncoderException {\n         if (!(obj instanceof String)) {\n             throw new EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\"); \n      * @param str String object to encode\n      * @return The metaphone code corresponding to the String supplied\n      */\n+    @Override\n     public String encode(String str) {\n         return metaphone(str);   \n     }\n--- a/src/main/java/org/apache/commons/codec/language/Nysiis.java\n+++ b/src/main/java/org/apache/commons/codec/language/Nysiis.java\n      * @throws IllegalArgumentException\n      *            if a character is not mapped\n      */\n+    @Override\n     public Object encode(Object obj) throws EncoderException {\n         if (!(obj instanceof String)) {\n             throw new EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\");\n      * @throws IllegalArgumentException\n      *            if a character is not mapped\n      */\n+    @Override\n     public String encode(String str) {\n         return this.nysiis(str);\n     }\n--- a/src/main/java/org/apache/commons/codec/language/RefinedSoundex.java\n+++ b/src/main/java/org/apache/commons/codec/language/RefinedSoundex.java\n      * @throws EncoderException\n      *                  if the parameter supplied is not of type java.lang.String\n      */\n+    @Override\n     public Object encode(Object obj) throws EncoderException {\n         if (!(obj instanceof String)) {\n             throw new EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\");\n      *                  A String object to encode\n      * @return A Soundex code corresponding to the String supplied\n      */\n+    @Override\n     public String encode(String str) {\n         return soundex(str);\n     }\n--- a/src/main/java/org/apache/commons/codec/language/Soundex.java\n+++ b/src/main/java/org/apache/commons/codec/language/Soundex.java\n      * @throws IllegalArgumentException\n      *                  if a character is not mapped\n      */\n+    @Override\n     public Object encode(Object obj) throws EncoderException {\n         if (!(obj instanceof String)) {\n             throw new EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\");\n      * @throws IllegalArgumentException\n      *                  if a character is not mapped\n      */\n+    @Override\n     public String encode(String str) {\n         return soundex(str);\n     }\n--- a/src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java\n     // a cached object\n     private PhoneticEngine engine = new PhoneticEngine(NameType.GENERIC, RuleType.APPROX, true);\n \n+    @Override\n     public Object encode(Object source) throws EncoderException {\n         if (!(source instanceof String)) {\n             throw new EncoderException(\"BeiderMorseEncoder encode parameter is not of type String\");\n         return encode((String) source);\n     }\n \n+    @Override\n     public String encode(String source) throws EncoderException {\n         if (source == null) {\n             return null;\n--- a/src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java\n         // return cached;\n         final CharSequence[][] cache = new CharSequence[cached.length()][cached.length()];\n         return new CharSequence() {\n+            @Override\n             public char charAt(int index) {\n                 return cached.charAt(index);\n             }\n \n+            @Override\n             public int length() {\n                 return cached.length();\n             }\n \n+            @Override\n             public CharSequence subSequence(int start, int end) {\n                 if (start == end) {\n                     return \"\";\n--- a/src/main/java/org/apache/commons/codec/language/bm/Rule.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/Rule.java\n \n     public static final class Phoneme implements PhonemeExpr {\n         public static final Comparator<Phoneme> COMPARATOR = new Comparator<Phoneme>() {\n+            @Override\n             public int compare(Phoneme o1, Phoneme o2) {\n                 for (int i = 0; i < o1.phonemeText.length(); i++) {\n                     if (i >= o2.phonemeText.length()) {\n             return this.languages;\n         }\n \n+        @Override\n         public Iterable<Phoneme> getPhonemes() {\n             return Collections.singleton(this);\n         }\n             this.phonemes = phonemes;\n         }\n \n+        @Override\n         public List<Phoneme> getPhonemes() {\n             return this.phonemes;\n         }\n     }\n \n     public static final RPattern ALL_STRINGS_RMATCHER = new RPattern() {\n+        @Override\n         public boolean isMatch(CharSequence input) {\n             return true;\n         }\n                 if (content.length() == 0) {\n                     // empty\n                     return new RPattern() {\n+                        @Override\n                         public boolean isMatch(CharSequence input) {\n                             return input.length() == 0;\n                         }\n                     };\n                 } else {\n                     return new RPattern() {\n+                        @Override\n                         public boolean isMatch(CharSequence input) {\n                             return input.equals(content);\n                         }\n             } else if (startsWith) {\n                 // matches from start\n                 return new RPattern() {\n+                    @Override\n                     public boolean isMatch(CharSequence input) {\n                         return startsWith(input, content);\n                     }\n             } else if (endsWith) {\n                 // matches from start\n                 return new RPattern() {\n+                    @Override\n                     public boolean isMatch(CharSequence input) {\n                         return endsWith(input, content);\n                     }\n                     if (startsWith && endsWith) {\n                         // exact match\n                         return new RPattern() {\n+                            @Override\n                             public boolean isMatch(CharSequence input) {\n                                 return input.length() == 1 && contains(bContent, input.charAt(0)) == shouldMatch;\n                             }\n                     } else if (startsWith) {\n                         // first char\n                         return new RPattern() {\n+                            @Override\n                             public boolean isMatch(CharSequence input) {\n                                 return input.length() > 0 && contains(bContent, input.charAt(0)) == shouldMatch;\n                             }\n                     } else if (endsWith) {\n                         // last char\n                         return new RPattern() {\n+                            @Override\n                             public boolean isMatch(CharSequence input) {\n                                 return input.length() > 0 && contains(bContent, input.charAt(input.length() - 1)) == shouldMatch;\n                             }\n         return new RPattern() {\n             Pattern pattern = Pattern.compile(regex);\n \n+            @Override\n             public boolean isMatch(CharSequence input) {\n                 Matcher matcher = pattern.matcher(input);\n                 return matcher.find();\n--- a/src/main/java/org/apache/commons/codec/net/BCodec.java\n+++ b/src/main/java/org/apache/commons/codec/net/BCodec.java\n      * @throws EncoderException\n      *                  thrown if a failure condition is encountered during the encoding process.\n      */\n+    @Override\n     public String encode(String value) throws EncoderException {\n         if (value == null) {\n             return null;\n      * @throws DecoderException\n      *             A decoder exception is thrown if a failure condition is encountered during the decode process.\n      */\n+    @Override\n     public String decode(String value) throws DecoderException {\n         if (value == null) {\n             return null;\n      * @throws EncoderException\n      *                  thrown if a failure condition is encountered during the encoding process.\n      */\n+    @Override\n     public Object encode(Object value) throws EncoderException {\n         if (value == null) {\n             return null;\n      *                  Thrown if the argument is not a <code>String</code>. Thrown if a failure condition is\n      *                  encountered during the decode process.\n      */\n+    @Override\n     public Object decode(Object value) throws DecoderException {\n         if (value == null) {\n             return null;\n--- a/src/main/java/org/apache/commons/codec/net/QCodec.java\n+++ b/src/main/java/org/apache/commons/codec/net/QCodec.java\n      * @throws EncoderException\n      *                  thrown if a failure condition is encountered during the encoding process.\n      */\n+    @Override\n     public String encode(String str) throws EncoderException {\n         if (str == null) {\n             return null;\n      * @throws DecoderException\n      *                  A decoder exception is thrown if a failure condition is encountered during the decode process.\n      */\n+    @Override\n     public String decode(String str) throws DecoderException {\n         if (str == null) {\n             return null;\n      * @throws EncoderException\n      *                  thrown if a failure condition is encountered during the encoding process.\n      */\n+    @Override\n     public Object encode(Object obj) throws EncoderException {\n         if (obj == null) {\n             return null;\n      *                  Thrown if the argument is not a <code>String</code>. Thrown if a failure condition is\n      *                  encountered during the decode process.\n      */\n+    @Override\n     public Object decode(Object obj) throws DecoderException {\n         if (obj == null) {\n             return null;\n--- a/src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java\n+++ b/src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java\n      *                  array of bytes to be encoded\n      * @return array of bytes containing quoted-printable data\n      */\n+    @Override\n     public byte[] encode(byte[] bytes) {\n         return encodeQuotedPrintable(PRINTABLE_CHARS, bytes);\n     }\n      * @throws DecoderException\n      *                  Thrown if quoted-printable decoding is unsuccessful\n      */\n+    @Override\n     public byte[] decode(byte[] bytes) throws DecoderException {\n         return decodeQuotedPrintable(bytes);\n     }\n      * \n      * @see #getCharset()\n      */\n+    @Override\n     public String encode(String str) throws EncoderException {\n         return this.encode(str, getCharset());\n     }\n      *                  Thrown if charset is not supported.\n      * @see #getCharset()\n      */\n+    @Override\n     public String decode(String str) throws DecoderException {\n         return this.decode(str, this.getCharset());\n     }\n      *                  Thrown if quoted-printable encoding is not applicable to objects of this type or if encoding is\n      *                  unsuccessful\n      */\n+    @Override\n     public Object encode(Object obj) throws EncoderException {\n         if (obj == null) {\n             return null;\n      *                  Thrown if the argument is not a <code>String</code> or <code>byte[]</code>. Thrown if a failure condition is\n      *                  encountered during the decode process.\n      */\n+    @Override\n     public Object decode(Object obj) throws DecoderException {\n         if (obj == null) {\n             return null;\n--- a/src/main/java/org/apache/commons/codec/net/URLCodec.java\n+++ b/src/main/java/org/apache/commons/codec/net/URLCodec.java\n      * @param bytes array of bytes to convert to URL safe characters\n      * @return array of bytes containing URL safe characters\n      */\n+    @Override\n     public byte[] encode(byte[] bytes) {\n         return encodeUrl(WWW_FORM_URL, bytes);\n     }\n      * @return array of original bytes \n      * @throws DecoderException Thrown if URL decoding is unsuccessful\n      */\n+    @Override\n     public byte[] decode(byte[] bytes) throws DecoderException {\n         return decodeUrl(bytes);\n     }\n      * \n      * @see #getDefaultCharset()\n      */\n+    @Override\n     public String encode(String str) throws EncoderException {\n         if (str == null) {\n             return null;\n      * \n      * @see #getDefaultCharset()\n      */\n+    @Override\n     public String decode(String str) throws DecoderException {\n         if (str == null) {\n             return null;\n      *                          applicable to objects of this type or\n      *                          if encoding is unsuccessful\n      */\n+    @Override\n     public Object encode(Object obj) throws EncoderException {\n         if (obj == null) {\n             return null;\n      *                  Thrown if the argument is not a <code>String</code> or <code>byte[]</code>. Thrown if a failure condition is\n      *                  encountered during the decode process.\n      */\n+    @Override\n     public Object decode(Object obj) throws DecoderException {\n         if (obj == null) {\n             return null;\n--- a/src/test/java/org/apache/commons/codec/language/bm/RuleTest.java\n+++ b/src/test/java/org/apache/commons/codec/language/bm/RuleTest.java\n  */\n public class RuleTest {\n     private static class NegativeIntegerBaseMatcher extends BaseMatcher<Integer> {\n+        @Override\n         public void describeTo(Description description) {\n             description.appendText(\"value should be negative\");\n         }\n \n+        @Override\n         public boolean matches(Object item) {\n             return (Integer) item < 0;\n         }", "timestamp": 1332956158, "metainfo": ""}