{"sha": "b8a168df404754ba324f743dd710e0f654aae201", "log": "CODEC-166 - Base64 could be faster.  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/codec/binary/ApacheModifiedMiGBase64.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ *\n+ * NOTE ABOUT PROVENANCE:\n+ * ----------------------\n+ * This source file is called ApacheModifiedMiGBase64.java.\n+ * We took the BSD-licensed MiGBase64.java file from SourceForge\n+ * on January 28th, 2013 (http://migbase64.sourceforge.net/), and\n+ * modified it to make it suitable for inclusion inside Apache\n+ * Commons-Codec.\n+ *\n+ * The original file is licensed according to the BSD 2-clause\n+ * license (see below, after the section titled \"Licence (BSD)\".\n+ * You should also be able to obtain the original file as\n+ * \"MiGBase64.original\" within the same source directory as this file.\n+ *\n+ */\n+\n+package org.apache.commons.codec.binary;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * <pre>====================================================</pre>\n+ * Modified by Apache Software Foundation on February 18th, 2013, in the following ways:\n+ * <p/>\n+ * - Set all methods to \"package\" level visibility, since this is strictly\n+ * meant to be back-end for our non-streaming Base64 implementation.\n+ * (Streaming Base64 still uses our original implementation).\n+ * <p/>\n+ * - Added support for the Apache Commons Codec variations to make all the Commons-Codec\n+ * unit tests pass:\n+ * <ol>\n+ * <li> Ability to alter line-length from default of 76</li>\n+ * <li> If we are using line-separators, must always end with a line-separator, no matter\n+ * length of final line.</li>\n+ * <li> Make '=' and '==' padding optional when decoding.</li>\n+ * <li> Make decoding of Base64 with inner padding (e.g., AA==AA==) consistent with Commons-Codec..</li>\n+ * <li> Add support for URL-Safe Base64 alphabet (which, incidentally, omits '=' and '==' padding).</li>\n+ * </ol>\n+ * <p/>\n+ * - And thus Apache Commons-Codec is now as fast as MiGBase64, since it uses MiGBase64 under the\n+ * hood.  Yay!  (Non-streaming encode speed-up is around 200%).\n+ * <p/>\n+ * And now, back to your regular scheduled programming:\n+ * <pre>====================================================</pre>\n+ * <p/>\n+ * A very fast and memory efficient class to encode and decode to and from BASE64 in full accordance\n+ * with RFC 2045.<br><br>\n+ * On Windows XP sp1 with 1.4.2_04 and later ;), this encoder and decoder is about 10 times faster\n+ * on small arrays (10 - 1000 bytes) and 2-3 times as fast on larger arrays (10000 - 1000000 bytes)\n+ * compared to <code>sun.misc.Encoder()/Decoder()</code>.<br><br>\n+ * <p/>\n+ * On byte arrays the encoder is about 20% faster than Jakarta Commons Codec for encode and\n+ * about 50% faster for decoding large arrays. This implementation is about twice as fast on very small\n+ * arrays (&lt 30 bytes). If source/destination is a <code>String</code> this\n+ * version is about three times as fast due to the fact that the Commons Codec result has to be recoded\n+ * to a <code>String</code> from <code>byte[]</code>, which is very expensive.<br><br>\n+ * <p/>\n+ * This encode/decode algorithm doesn't create any temporary arrays as many other codecs do, it only\n+ * allocates the resulting array. This produces less garbage and it is possible to handle arrays twice\n+ * as large as algorithms that create a temporary array. (E.g. Jakarta Commons Codec). It is unknown\n+ * whether Sun's <code>sun.misc.Encoder()/Decoder()</code> produce temporary arrays but since performance\n+ * is quite low it probably does.<br><br>\n+ * <p/>\n+ * The encoder produces the same output as the Sun one except that the Sun's encoder appends\n+ * a trailing line separator if the last character isn't a pad. Unclear why but it only adds to the\n+ * length and is probably a side effect. Both are in conformance with RFC 2045 though.<br>\n+ * Commons codec seem to always att a trailing line separator.<br><br>\n+ * <p/>\n+ * <b>Note!</b>\n+ * The encode/decode method pairs (types) come in three versions with the <b>exact</b> same algorithm and\n+ * thus a lot of code redundancy. This is to not create any temporary arrays for transcoding to/from different\n+ * format types. The methods not used can simply be commented out.<br><br>\n+ * <p/>\n+ * <S>There is also a \"fast\" version of all decode methods that works the same way as the normal ones, but\n+ * har a few demands on the decoded input. Normally though, these fast verions should be used if the source if\n+ * the input is known and it hasn't bee tampered with.</S> (- removed for ApacheModifiedMiGBase64). <br><br>\n+ * <p/>\n+ * If you find the code useful or you find a bug, please send me a note at base64 @ miginfocom . com.\n+ * <p/>\n+ * Licence (BSD):\n+ * ==============\n+ * <p/>\n+ * Copyright (c) 2004, Mikael Grev, MiG InfoCom AB. (base64 @ miginfocom . com)\n+ * All rights reserved.\n+ * <p/>\n+ * Redistribution and use in source and binary forms, with or without modification,\n+ * are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this list\n+ * of conditions and the following disclaimer.\n+ * Redistributions in binary form must reproduce the above copyright notice, this\n+ * list of conditions and the following disclaimer in the documentation and/or other\n+ * materials provided with the distribution.\n+ * Neither the name of the MiG InfoCom AB nor the names of its contributors may be\n+ * used to endorse or promote products derived from this software without specific\n+ * prior written permission.\n+ * <p/>\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n+ * IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY\n+ * OF SUCH DAMAGE.\n+ *\n+ * @author Mikael Grev\n+ *         Date: 2004-aug-02\n+ *         Time: 11:31:11\n+ * @version 2.2\n+ */\n+\n+public final class ApacheModifiedMiGBase64 {\n+    // Marked the class public so that it shows up in javadoc generation.  All methods are static \"package\" level.\n+\n+    private final static byte[] CRLF = {'\\r', '\\n'};\n+\n+    private static final char[] CA =\n+            \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".toCharArray();\n+\n+    private static final char[] CA_URL_SAFE =\n+            \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\".toCharArray();\n+\n+    private static final int[] IA = new int[256];\n+\n+    /**\n+     * Private constructor to prevent instantiation.\n+     */\n+    private ApacheModifiedMiGBase64() {}\n+\n+    static {\n+        Arrays.fill(IA, -1);\n+        for (int i = 0, iS = CA.length; i < iS; i++) {\n+            IA[CA[i]] = i;\n+\n+            // Store the URL_SAFE values in the same IA array.\n+            // This way we can auto-decode URL-SAFE or standard alphabet, without\n+            // consumer needing to specify decode alphabet ahead of time:\n+            IA[CA_URL_SAFE[i]] = i;\n+        }\n+        IA['='] = 0;\n+    }\n+\n+    /**\n+     * Decodes a BASE64 encoded char array. All illegal characters will be ignored and can handle both arrays with\n+     * and without line separators.\n+     *\n+     * @param sArr The source array.\n+     * @return The decoded array of bytes. May be of length 0.\n+     */\n+    static byte[] decode(final char[] sArr) {\n+        final int sLen = sArr != null ? sArr.length : 0;\n+        if (sLen == 0) {\n+            return new byte[0];\n+        }\n+\n+        // Find earliest pad character so that we can decode things like \"AA==AA==\" consistently.\n+        int padPos = sLen;\n+        int padCount = 0;\n+        for (int i = sLen - 1; i >= 0; i--) {\n+            if (sArr[i] == '=') {\n+                padPos = i;\n+                padCount = 1;\n+                if (i + 1 < sLen && sArr[i + 1] == '=') {\n+                    padCount = 2;\n+                }\n+            }\n+        }\n+\n+        // Count illegal characters (including '\\r', '\\n') to know what size the returned array will be,\n+        // so we don't have to reallocate & copy it later.\n+        int sepCnt = 0; // Number of separator characters. (Actually illegal characters, but that's a bonus...)\n+        for (int i = 0; i < padPos; i++) {\n+            if (IA[sArr[i]] < 0) {\n+                sepCnt++;\n+            }\n+        }\n+\n+        final int len = ((padPos + padCount - sepCnt) * 6 >> 3) - padCount;\n+        if (len <= 0) {\n+            return new byte[0];\n+        }\n+        final byte[] dArr = new byte[len];       // Preallocate byte[] of exact length\n+        int d = 0;\n+        int i = 0;\n+        try {\n+            for (int s = 0; d < len; ) {\n+                // Assemble three bytes into an int from four \"valid\" characters.\n+                i = 0;\n+                for (int j = 0; j < 4; j++) {   // j only increased if a valid char was found.\n+                    int c = IA[sArr[s++]];\n+                    if (c >= 0) {\n+                        i |= c << (18 - j * 6);\n+                    } else {\n+                        j--;\n+                    }\n+                }\n+                // Add the bytes\n+                dArr[d++] = (byte) (i >> 16);\n+                if (d < len) {\n+                    dArr[d++] = (byte) (i >> 8);\n+                    if (d < len) {\n+                        dArr[d++] = (byte) i;\n+                    }\n+                }\n+            }\n+        } catch (ArrayIndexOutOfBoundsException aioobe) {\n+            // Handle url-safe input (with no padding).\n+            dArr[d++] = (byte) (i >> 16);\n+            if (d < len) {\n+                dArr[d++] = (byte) (i >> 8);\n+                if (d < len) {\n+                    dArr[d] = (byte) i;\n+                }\n+            }\n+        }\n+        return dArr;\n+    }\n+\n+    /**\n+     * Decodes a BASE64 encoded byte array. All illegal characters will be ignored and can handle both arrays with\n+     * and without line separators.\n+     *\n+     * @param sArr The source array.\n+     * @return The decoded array of bytes. May be of length 0.\n+     */\n+    static byte[] decode(final byte[] sArr) {\n+        final int sLen = sArr != null ? sArr.length : 0;\n+        if (sLen == 0) {\n+            return new byte[0];\n+        }\n+\n+        // Find earliest pad character so that we can decode things like \"AA==AA==\" consistently.\n+        int padPos = sLen;\n+        int padCount = 0;\n+        for (int i = sLen - 1; i >= 0; i--) {\n+            if (sArr[i] == '=') {\n+                padPos = i;\n+                padCount = 1;\n+                if (i + 1 < sLen && sArr[i + 1] == '=') {\n+                    padCount = 2;\n+                }\n+            }\n+        }\n+\n+        // Count illegal characters (including '\\r', '\\n') to know what size the returned array will be,\n+        // so we don't have to reallocate & copy it later.\n+        int sepCnt = 0; // Number of separator characters. (Actually illegal characters, but that's a bonus...)\n+        for (int i = 0; i < padPos; i++) {\n+            if (IA[sArr[i] & 0xff] < 0) {\n+                sepCnt++;\n+            }\n+        }\n+\n+        final int len = ((padPos + padCount - sepCnt) * 6 >> 3) - padCount;\n+        if (len <= 0) {\n+            return new byte[0];\n+        }\n+        final byte[] dArr = new byte[len];       // Preallocate byte[] of exact length\n+        int d = 0;\n+        int i = 0;\n+        try {\n+            for (int s = 0; d < len; ) {\n+                // Assemble three bytes into an int from four \"valid\" characters.\n+                i = 0;\n+                for (int j = 0; j < 4; j++) {   // j only increased if a valid char was found.\n+                    int c = IA[sArr[s++] & 0xff];\n+                    if (c >= 0) {\n+                        i |= c << (18 - j * 6);\n+                    } else {\n+                        j--;\n+                    }\n+                }\n+\n+                // Add the bytes\n+                dArr[d++] = (byte) (i >> 16);\n+                if (d < len) {\n+                    dArr[d++] = (byte) (i >> 8);\n+                    if (d < len) {\n+                        dArr[d++] = (byte) i;\n+                    }\n+                }\n+            }\n+        } catch (ArrayIndexOutOfBoundsException aioobe) {\n+            // Handle url-safe input (with no padding).\n+            dArr[d++] = (byte) (i >> 16);\n+            if (d < len) {\n+                dArr[d++] = (byte) (i >> 8);\n+                if (d < len) {\n+                    dArr[d] = (byte) i;\n+                }\n+            }\n+        }\n+        return dArr;\n+    }\n+\n+    /**\n+     * Encodes a raw byte array into a BASE64 <code>byte[]</code> representation i accordance with RFC 2045.\n+     *\n+     * @param sArr          The bytes to convert.\n+     * @param lineSep       Optional \"\\r\\n\" after 76 characters, unless end of file.<br>\n+     *                      No line separator will be in breach of RFC 2045 which specifies max 76 per line but will be a\n+     *                      little faster.\n+     * @param urlSafe       If true, use the URL_SAFE base64 alphabet (-_) instead of the standard alphabet (+/).\n+     * @param maxResultSize Largest size of result we are willing to encode (typically Integer.MAX_VALUE).\n+     * @return A BASE64 encoded array.\n+     */\n+    static byte[] encodeToByte(byte[] sArr, final boolean lineSep, boolean urlSafe, int maxResultSize) {\n+        return encodeToByte(sArr, lineSep, urlSafe, maxResultSize, CRLF, 76);\n+    }\n+\n+    /**\n+     * Encodes a raw byte array into a BASE64 <code>byte[]</code> representation i accordance with RFC 2045.\n+     *\n+     * @param sArr          The bytes to convert.\n+     * @param lineSep       Optional \"\\r\\n\" after 76 characters, unless end of file.<br>\n+     *                      No line separator will be in breach of RFC 2045 which specifies max 76 per line but will be a\n+     *                      little faster.\n+     * @param urlSafe       If true, use the URL_SAFE base64 alphabet (-_) instead of the standard alphabet (+/).\n+     * @param maxResultSize Largest size of result we are willing to encode (typically Integer.MAX_VALUE).\n+     * @param lineSeparator Sequence of bytes to use as the line separator (typically {'\\r','\\n'}).  Ignored\n+     *                      if <code>lineSep</code> is set to false.\n+     * @param lineLen       Number of characters to write out per line before writing the lineSeparator\n+     *                      sequence.  Ignored if <code>lineSep</code> is set to false.\n+     * @return A BASE64 encoded array.\n+     */\n+    static byte[] encodeToByte(\n+            final byte[] sArr, final boolean lineSep, final boolean urlSafe, final int maxResultSize,\n+            final byte[] lineSeparator, final int lineLen\n+    ) {\n+        if (sArr == null || sArr.length == 0) { return sArr; }\n+\n+        final int sLen = sArr.length;\n+        final int eLen = (sLen / 3) * 3;                        // Length of even 24-bits.\n+        final int left = sLen - eLen;                           // A value between 0 and 2.\n+        final int cCnt = ((sLen - 1) / 3 + 1) << 2;             // Returned character count\n+        int dLen = cCnt + (lineSep ? (cCnt - 1) / lineLen * lineSeparator.length : 0); // Length of returned array\n+\n+        // org.apache.commons.binary.codec.Base64 always ends with CRLF in chunking mode.\n+        if (lineSep) {\n+            dLen += lineSeparator.length;\n+        }\n+\n+        final char[] ENCODE_ARRAY = urlSafe ? ApacheModifiedMiGBase64.CA_URL_SAFE : ApacheModifiedMiGBase64.CA;\n+        if (urlSafe && left > 0) {\n+            dLen--;\n+            if (left != 2) {\n+                dLen--;\n+            }\n+        }\n+        checkLen(dLen, maxResultSize);\n+        final byte[] dArr = new byte[dLen];\n+\n+        // Encode even 24-bits\n+        int charCount = 0;\n+        for (int s = 0, d = 0; s < eLen; ) {\n+            // Copy next three bytes into lower 24 bits of int, paying attension to sign.\n+            int i = (sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);\n+\n+            // Encode the int into four chars\n+            dArr[d++] = (byte) ENCODE_ARRAY[(i >>> 18) & 0x3f];\n+            dArr[d++] = (byte) ENCODE_ARRAY[(i >>> 12) & 0x3f];\n+            dArr[d++] = (byte) ENCODE_ARRAY[(i >>> 6) & 0x3f];\n+            dArr[d++] = (byte) ENCODE_ARRAY[i & 0x3f];\n+            charCount += 4;\n+\n+            // Add optional line separator\n+            if (lineSep && charCount % lineLen <= 3 && d < dLen - lineSeparator.length) {\n+                System.arraycopy(lineSeparator, 0, dArr, d, lineSeparator.length);\n+                d += lineSeparator.length;\n+            }\n+        }\n+\n+        // Make space for our final CRLF.\n+        if (lineSep) {\n+            dLen -= lineSeparator.length;\n+        }\n+\n+        // Pad and encode last bits if source isn't an even 24 bits.\n+        if (left > 0) {\n+            // Prepare the int\n+            int i = ((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);\n+\n+            // Set last four chars\n+            // (url-safe omits the '=' padding).\n+            if (urlSafe && left == 2) {\n+                dArr[dLen - 3] = (byte) ENCODE_ARRAY[i >> 12];\n+                dArr[dLen - 2] = (byte) ENCODE_ARRAY[(i >>> 6) & 0x3f];\n+                dArr[dLen - 1] = (byte) ENCODE_ARRAY[i & 0x3f];\n+            } else if (urlSafe) {\n+                dArr[dLen - 2] = (byte) ENCODE_ARRAY[i >> 12];\n+                dArr[dLen - 1] = (byte) ENCODE_ARRAY[(i >>> 6) & 0x3f];\n+            } else {\n+                dArr[dLen - 4] = (byte) ENCODE_ARRAY[i >> 12];\n+                dArr[dLen - 3] = (byte) ENCODE_ARRAY[(i >>> 6) & 0x3f];\n+                dArr[dLen - 2] = (byte) (left == 2 ? ENCODE_ARRAY[i & 0x3f] : '=');\n+                dArr[dLen - 1] = '=';\n+            }\n+        }\n+\n+        // And now we append our final CRLF if necessary.\n+        if (lineSep) {\n+            dLen += lineSeparator.length;\n+            System.arraycopy(lineSeparator, 0, dArr, dLen - lineSeparator.length, lineSeparator.length);\n+        }\n+        return dArr;\n+    }\n+\n+    /**\n+     * Encodes a raw byte array into a BASE64 <code>char[]</code> representation in accordance with RFC 2045.\n+     *\n+     * @param sArr          The bytes to convert.\n+     * @param lineSep       Optional \"\\r\\n\" after 76 characters, unless end of file.<br>\n+     *                      No line separator will be in breach of RFC 2045 which specifies max 76 per line but will be a\n+     *                      little faster.\n+     * @param urlSafe       If true, use the URL_SAFE base64 alphabet (-_) instead of the standard alphabet (+/).\n+     * @param maxResultSize Largest size of result we are willing to encode (typically Integer.MAX_VALUE).\n+     * @return A BASE64 encoded array.\n+     */\n+    static char[] encodeToChar(\n+            final byte[] sArr, final boolean lineSep, final boolean urlSafe, final int maxResultSize\n+    ) {\n+        if (sArr == null) { return null; }\n+        if (sArr.length == 0) { return new char[0]; }\n+\n+        final int sLen = sArr.length;\n+        final int eLen = (sLen / 3) * 3;                        // Length of even 24-bits.\n+        final int left = sLen - eLen;                           // A value between 0 and 2.\n+        final int cCnt = ((sLen - 1) / 3 + 1) << 2;             // Returned character count\n+        int dLen = cCnt + (lineSep ? (cCnt - 1) / 76 << 1 : 0); // Length of returned array\n+\n+        // org.apache.commons.binary.codec.Base64 always ends with CRLF in chunking mode.\n+        if (lineSep) {\n+            dLen += 2;\n+        }\n+\n+        final char[] ENCODE_ARRAY = urlSafe ? ApacheModifiedMiGBase64.CA_URL_SAFE : ApacheModifiedMiGBase64.CA;\n+        if (urlSafe && left > 0) {\n+            dLen--;\n+            if (left != 2) {\n+                dLen--;\n+            }\n+        }\n+        checkLen(dLen, maxResultSize);\n+        final char[] dArr = new char[dLen];\n+\n+        // Encode even 24-bits\n+        for (int s = 0, d = 0, cc = 0; s < eLen; ) {\n+            // Copy next three bytes into lower 24 bits of int, paying attension to sign.\n+            int i = (sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);\n+\n+            // Encode the int into four chars\n+            dArr[d++] = ENCODE_ARRAY[(i >>> 18) & 0x3f];\n+            dArr[d++] = ENCODE_ARRAY[(i >>> 12) & 0x3f];\n+            dArr[d++] = ENCODE_ARRAY[(i >>> 6) & 0x3f];\n+            dArr[d++] = ENCODE_ARRAY[i & 0x3f];\n+\n+            // Add optional line separator\n+            if (lineSep && ++cc == 19 && d < dLen - 2) {\n+                dArr[d++] = '\\r';\n+                dArr[d++] = '\\n';\n+                cc = 0;\n+            }\n+        }\n+\n+        // Make space for our final CRLF.\n+        if (lineSep) {\n+            dLen -= 2;\n+        }\n+\n+        // Pad and encode last bits if source isn't even 24 bits.\n+        if (left > 0) {\n+            // Prepare the int\n+            int i = ((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);\n+\n+            // Set last four chars\n+            // (url-safe omits the '=' padding).\n+            if (urlSafe && left == 2) {\n+                dArr[dLen - 3] = ENCODE_ARRAY[i >> 12];\n+                dArr[dLen - 2] = ENCODE_ARRAY[(i >>> 6) & 0x3f];\n+                dArr[dLen - 1] = ENCODE_ARRAY[i & 0x3f];\n+            } else if (urlSafe) {\n+                dArr[dLen - 2] = ENCODE_ARRAY[i >> 12];\n+                dArr[dLen - 1] = ENCODE_ARRAY[(i >>> 6) & 0x3f];\n+            } else {\n+                dArr[dLen - 4] = ENCODE_ARRAY[i >> 12];\n+                dArr[dLen - 3] = ENCODE_ARRAY[(i >>> 6) & 0x3f];\n+                dArr[dLen - 2] = left == 2 ? ENCODE_ARRAY[i & 0x3f] : '=';\n+                dArr[dLen - 1] = '=';\n+            }\n+        }\n+\n+        // And now we append our final CRLF if necessary.\n+        if (lineSep) {\n+            dLen += 2;\n+            dArr[dLen - 2] = '\\r';\n+            dArr[dLen - 1] = '\\n';\n+        }\n+        return dArr;\n+    }\n+\n+    /**\n+     * Encodes a raw byte array into a BASE64 <code>String</code> representation i accordance with RFC 2045.\n+     *\n+     * @param sArr          The bytes to convert.\n+     * @param lineSep       Optional \"\\r\\n\" after 76 characters, unless end of file.<br>\n+     *                      No line separator will be in breach of RFC 2045 which specifies max 76 per line but will be a\n+     *                      little faster.\n+     * @param urlSafe       If true, use the URL_SAFE base64 alphabet (-_) instead of the standard alphabet (+/).\n+     * @param maxResultSize Largest size of result we are willing to encode (typically Integer.MAX_VALUE).\n+     * @return A BASE64 encoded array.\n+     */\n+    static String encodeToString(\n+            byte[] sArr, boolean lineSep, boolean urlSafe, int maxResultSize\n+    ) {\n+        if (sArr == null) { return null; }\n+        if (sArr.length == 0) { return \"\"; }\n+\n+        // Reuse char[] since we can't create a String incrementally anyway and StringBuffer/Builder would be slower.\n+        return new String(encodeToChar(sArr, lineSep, urlSafe, maxResultSize));\n+    }\n+\n+\n+    private static void checkLen(int dLen, int maxResultSize) {\n+        if (dLen > maxResultSize) {\n+            throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n+                    dLen +\n+                    \") than the specified maximum size of \" +\n+                    maxResultSize);\n+        }\n+    }\n+\n+}\n--- a/src/main/java/org/apache/commons/codec/binary/Base64.java\n+++ b/src/main/java/org/apache/commons/codec/binary/Base64.java\n         }\n     }\n \n+    @Override\n+    public byte[] decode(final byte[] pArray) {\n+        if (pArray == null || pArray.length == 0) {\n+            return pArray;\n+        }\n+        return ApacheModifiedMiGBase64.decode(pArray);\n+    }\n+\n+    @Override\n+    public byte[] encode(final byte[] pArray) {\n+        if (pArray == null || pArray.length == 0) {\n+            return pArray;\n+        }\n+        return ApacheModifiedMiGBase64.encodeToByte(\n+                pArray, lineSeparator != null, isUrlSafe(), Integer.MAX_VALUE, lineSeparator, lineLength\n+        );\n+    }\n+\n+\n     /**\n      * Tests a given byte array to see if it contains only valid characters within the Base64 alphabet. Currently the\n      * method treats whitespace as valid.\n      * @since 1.4 (NOTE:  1.4 chunked the output, whereas 1.5 does not).\n      */\n     public static String encodeBase64String(final byte[] binaryData) {\n-        return StringUtils.newStringUtf8(encodeBase64(binaryData, false));\n+        return ApacheModifiedMiGBase64.encodeToString(\n+                binaryData, false, false, Integer.MAX_VALUE\n+        );\n     }\n \n     /**\n      * @since 1.4\n      */\n     public static String encodeBase64URLSafeString(final byte[] binaryData) {\n-        return StringUtils.newStringUtf8(encodeBase64(binaryData, false, true));\n+        return ApacheModifiedMiGBase64.encodeToString(\n+                binaryData, false, true, Integer.MAX_VALUE\n+        );\n     }\n \n     /**\n      */\n     public static byte[] encodeBase64(final byte[] binaryData, final boolean isChunked,\n                                       final boolean urlSafe, final int maxResultSize) {\n-        if (binaryData == null || binaryData.length == 0) {\n-            return binaryData;\n-        }\n-\n-        // Create this so can use the super-class method\n-        // Also ensures that the same roundings are performed by the ctor and the code\n-        final Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);\n-        final long len = b64.getEncodedLength(binaryData);\n-        if (len > maxResultSize) {\n-            throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n-                len +\n-                \") than the specified maximum size of \" +\n-                maxResultSize);\n-        }\n-\n-        return b64.encode(binaryData);\n-    }\n+        return ApacheModifiedMiGBase64.encodeToByte(\n+                binaryData, isChunked, urlSafe, maxResultSize\n+        );\n+    }\n+\n \n     /**\n      * Decodes a Base64 String into octets\n      * @since 1.4\n      */\n     public static byte[] decodeBase64(final String base64String) {\n-        return new Base64().decode(base64String);\n+        if (base64String == null) { return null; }\n+        if (\"\".equals(base64String)) { return new byte[0]; }\n+\n+        return ApacheModifiedMiGBase64.decode(base64String.toCharArray());\n     }\n \n     /**\n      * @return Array containing decoded data.\n      */\n     public static byte[] decodeBase64(final byte[] base64Data) {\n-        return new Base64().decode(base64Data);\n+        if (base64Data == null || base64Data.length == 0) { return base64Data; }\n+\n+        return ApacheModifiedMiGBase64.decode(base64Data);\n     }\n \n     // Implementation of the Encoder Interface", "timestamp": 1361214871, "metainfo": ""}