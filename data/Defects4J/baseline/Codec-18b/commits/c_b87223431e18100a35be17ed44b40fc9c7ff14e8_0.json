{"sha": "b87223431e18100a35be17ed44b40fc9c7ff14e8", "log": "Improve test coverage (See clover report).   ", "commit": "\n--- a/src/test/org/apache/commons/codec/binary/Base64Test.java\n+++ b/src/test/org/apache/commons/codec/binary/Base64Test.java\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.8 $ $Date: 2003/10/05 21:45:49 $\n+ * @version $Revision: 1.9 $ $Date: 2003/11/03 07:23:33 $\n  * @author <a href=\"mailto:sanders@apache.org\">Scott Sanders</a>\n  * @author <a href=\"mailto:rwaldhoff@apache.org\">Rodney Waldhoff</a>\n  * @author Tim O'Brien\n         assertTrue(\"encoding hello world\", encodedContent.equals(\"SGVsbG8gV29ybGQ=\"));\n     }\n \n+    /**\n+     * Tests conditional true branch for \"marker0\" test.\n+     */\n+    public void testDecodePadMarkerIndex2() {\n+        assertEquals(\"A\", new String(Base64.decodeBase64(\"QQ==\".getBytes())));\n+    }\n+    \n+    /**\n+     * Tests conditional branches for \"marker1\" test.\n+     */\n+    public void testDecodePadMarkerIndex3() {\n+        assertEquals(\"AA\", new String(Base64.decodeBase64(\"QUE=\".getBytes())));\n+        assertEquals(\"AAA\", new String(Base64.decodeBase64(\"QUFB\".getBytes())));\n+    }\n+    \n+    public void testDecodePadOnly() {\n+        assertTrue(Base64.decodeBase64(\"====\".getBytes()).length == 0);\n+        assertEquals(\"\", new String(Base64.decodeBase64(\"====\".getBytes())));\n+    }\n+    \n     // encode/decode random arrays from size 0 to size 11\n     public void testEncodeDecodeSmall() {\n         for(int i=0;i<12;i++) {\n             byte[] enc =  Base64.encodeBase64(data);\n             assertTrue(\"\\\"\" + (new String(enc)) + \"\\\" is Base64 data.\",Base64.isArrayByteBase64(enc) );\n             byte[] data2 = Base64.decodeBase64(enc);\n-            assertTrue(toString(data) + \" equals \" + toString(data2),Arrays.equals(data,data2));\n+            assertTrue(toString(data) + \" equals \" + toString(data2), Arrays.equals(data,data2));\n         }\n     }\n \n                     dest.equals( original ) );\n     }\n \n-    public void testDiscardingOfWhiteSpace() throws Exception {\n+    public void testDecodeWithWhitespace() throws Exception {\n \n         String orig = \"I am a late night coder.\";\n \n                     dest.equals( orig ) );\n     }\n \n+    public void testDiscardWhitespace() throws Exception {\n+\n+        String orig = \"I am a late night coder.\";\n+\n+        byte[] encodedArray = Base64.encodeBase64( orig.getBytes() );\n+        StringBuffer intermediate = \n+            new StringBuffer( new String(encodedArray) );\n+\n+        intermediate.insert( 2, ' ' );\n+        intermediate.insert( 5, '\\t' );\n+        intermediate.insert( 10, '\\r' );\n+        intermediate.insert( 15, '\\n' );\n+\n+        byte[] encodedWithWS = intermediate.toString().getBytes();\n+        byte[] encodedNoWS = Base64.discardWhitespace( encodedWithWS );\n+        byte[] decodedWithWS = Base64.decodeBase64( encodedWithWS );\n+        byte[] decodedNoWS = Base64.decodeBase64( encodedNoWS );\n+\n+        String destFromWS = new String( decodedWithWS );\n+        String destFromNoWS = new String( decodedNoWS );\n+\n+        assertTrue( \"Dest string doesn't eausl original\", \n+                destFromWS.equals( orig ) );\n+        assertTrue( \"Dest string doesn't eausl original\", \n+                destFromNoWS.equals( orig ) );\n+    }\n \n     // -------------------------------------------------------- Private Methods\n ", "timestamp": 1067844213, "metainfo": ""}