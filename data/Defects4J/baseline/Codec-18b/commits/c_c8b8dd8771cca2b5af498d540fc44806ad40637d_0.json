{"sha": "c8b8dd8771cca2b5af498d540fc44806ad40637d", "log": "Organize Imports.   ", "commit": "\n--- a/src/java/org/apache/commons/codec/binary/Binary.java\n+++ b/src/java/org/apache/commons/codec/binary/Binary.java\n-/*\n- * ====================================================================\n- * \n- * The Apache Software License, Version 1.1\n- *\n- * Copyright (c) 2001-2004 The Apache Software Foundation.  All rights\n- * reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer. \n- *\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and/or other materials provided with the\n- *    distribution.\n- *\n- * 3. The end-user documentation included with the redistribution,\n- *    if any, must include the following acknowledgement:  \n- *       \"This product includes software developed by the \n- *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowledgement may appear in the software itself,\n- *    if and wherever such third-party acknowledgements normally appear.\n- *\n- * 4. The names \"Apache\", \"The Jakarta Project\", \"Commons\", and \"Apache Software\n- *    Foundation\" must not be used to endorse or promote products derived\n- *    from this software without prior written permission. For written \n- *    permission, please contact apache@apache.org.\n- *\n- * 5. Products derived from this software may not be called \"Apache\"\n- *    nor may \"Apache\" appear in their name without prior \n- *    written permission of the Apache Software Foundation.\n- *\n- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n- * SUCH DAMAGE.\n- * ====================================================================\n- *\n- * This software consists of voluntary contributions made by many\n- * individuals on behalf of the Apache Software Foundation.  For more\n- * information on the Apache Software Foundation, please see\n- * <http://www.apache.org/>.\n- *\n- */ \n-package org.apache.commons.codec.binary ;\n-\n-import org.apache.commons.codec.BinaryDecoder ; \n-import org.apache.commons.codec.BinaryEncoder ;\n-import org.apache.commons.codec.DecoderException ;\n-import org.apache.commons.codec.EncoderException ;\n-\n-/**\n- * Encodes and decodes binary to and from ascii bit Strings.\n- *\n- * @todo may want to add more bit vector functions like and/or/xor/nand\n- * @todo also might be good to generate boolean[] from byte[] et. cetera.\n- * @author <a href=\"mailto:akarasulu@apache.org\">Alex Karasulu</a>\n- * @author $Author: tobrien $\n- * @version $Revision: 1.1 $\n- */\n-public class Binary implements BinaryDecoder, BinaryEncoder\n-{\n-    /** mask for bit 0 of a byte */\n-    public static final int BIT_0 = 1 ;\n-    /** mask for bit 1 of a byte */\n-    public static final int BIT_1 = 1 << 1 ;\n-    /** mask for bit 2 of a byte */\n-    public static final int BIT_2 = 1 << 2 ;\n-    /** mask for bit 3 of a byte */\n-    public static final int BIT_3 = 1 << 3 ;\n-    /** mask for bit 4 of a byte */\n-    public static final int BIT_4 = 1 << 4 ;\n-    /** mask for bit 5 of a byte */\n-    public static final int BIT_5 = 1 << 5 ;\n-    /** mask for bit 6 of a byte */\n-    public static final int BIT_6 = 1 << 6 ;\n-    /** mask for bit 7 of a byte */\n-    public static final int BIT_7 = 1 << 7 ;\n-    \n-    public static final int [] BITS = \n-    {\n-      BIT_0, BIT_1, BIT_2, BIT_3, BIT_4, BIT_5, BIT_6, BIT_7\n-    } ;\n-    \n-    \n-    /**\n-     * Converts an array of raw binary data into an array of ascii 0 and 1\n-     * characters.\n-     * \n-     * @param raw the raw binary data to convert\n-     * @return 0 and 1 ascii character bytes one for each bit of the argument\n-     * @see org.apache.commons.codec.BinaryEncoder#encode(byte[])\n-     */\n-    public byte[] encode( byte[] raw )\n-    {\n-        return toAsciiBytes( raw ) ;\n-    }\n-    \n-\n-    /**\n-     * Converts an array of raw binary data into an array of ascii 0 and 1\n-     * chars.\n-     * \n-     * @param raw the raw binary data to convert\n-     * @return 0 and 1 ascii character chars one for each bit of the argument\n-     * @throws EncoderException if the argument is not a byte[]\n-     * @see org.apache.commons.codec.Encoder#encode(java.lang.Object)\n-     */\n-    public Object encode( Object raw ) throws EncoderException\n-    {\n-        if ( ! ( raw instanceof byte [] ) )\n-        {\n-            throw new EncoderException( \"argument not a byte array\" ) ;\n-        }\n-        \n-        return toAsciiChars( ( byte [] ) raw ) ;\n-    }\n-    \n-\n-    /**\n-     * Decodes a byte array where each byte represents an ascii '0' or '1'.\n-     * \n-     * @param ascii each byte represents an ascii '0' or '1'\n-     * @return the raw encoded binary where each bit corresponds to a byte in\n-     *      the byte array argument\n-     * @throws DecoderException if argument is not a byte[], char[] or String\n-     * @see org.apache.commons.codec.Decoder#decode(java.lang.Object)\n-     */\n-    public Object decode( Object ascii ) throws DecoderException\n-    {\n-        if ( ascii instanceof byte[] )\n-        {\n-            return fromAscii( ( byte[] ) ascii ) ;\n-        }\n-        \n-        if ( ascii instanceof char[] )\n-        {\n-            return fromAscii( ( char[] ) ascii ) ;\n-        }\n-        \n-        if ( ascii instanceof String )\n-        {\n-            return fromAscii( ( ( String ) ascii ).toCharArray() ) ;\n-        }\n-\n-        throw new DecoderException( \"argument not a byte array\" ) ;\n-    }\n-\n-    \n-    /**\n-     * Decodes a byte array where each byte represents an ascii '0' or '1'.\n-     * \n-     * @param ascii each byte represents an ascii '0' or '1'\n-     * @return the raw encoded binary where each bit corresponds to a byte in\n-     *      the byte array argument \n-     * @see org.apache.commons.codec.Decoder#decode(byte[])\n-     */\n-    public byte[] decode( byte[] ascii ) \n-    {\n-        return fromAscii( ascii ) ;\n-    }\n-    \n-    \n-    /**\n-     * Decodes a String where each char of the String represents an ascii '0' \n-     * or '1'.\n-     * \n-     * @param ascii String of '0' and '1' characters\n-     * @return the raw encoded binary where each bit corresponds to a byte in\n-     *      the byte array argument \n-     * @see org.apache.commons.codec.Decoder#decode(byte[])\n-     */\n-    public byte[] decode( String ascii )\n-    {\n-        return fromAscii( ascii.toCharArray() ) ;\n-    }\n-    \n-    \n-    /**\n-     * Decodes a byte array where each char represents an ascii '0' or '1'.\n-     * \n-     * @param ascii each char represents an ascii '0' or '1'\n-     * @return the raw encoded binary where each bit corresponds to a char in\n-     *      the char array argument \n-     */\n-    public static byte[] fromAscii( char[] ascii )\n-    {\n-        // get length/8 times bytes with 3 bit shifts to the right of the length\n-        byte[] l_raw = new byte[ ascii.length >> 3 ] ;\n-        \n-        /*\n-         * Yah its long and repetitive but I unraveled an internal loop to \n-         * check each bit of a byte for speed using the bit masks that are\n-         * precomputed which is another PITA but it makes it faster.\n-         * \n-         * We also decr index jj by 8 as we go along to not recompute indices\n-         * using multiplication every time inside the loop.\n-         * \n-         * @todo might want another nested loop to use BITS[] now that its here\n-         */\n-        for ( int ii=0, jj=ascii.length-1; ii < l_raw.length; ii++, jj-=8 )\n-        {\n-            if ( ascii[jj] == '1' )\n-            {\n-                l_raw[ii] |= BIT_0 ;\n-            }\n-            \n-            if ( ascii[jj - 1] == '1' )\n-            {\n-                l_raw[ii] |= BIT_1 ;\n-            }\n-\n-            if ( ascii[jj - 2] == '1' )\n-            {\n-                l_raw[ii] |= BIT_2 ;\n-            }\n-\n-            if ( ascii[jj - 3] == '1' )\n-            {\n-                l_raw[ii] |= BIT_3 ;\n-            }\n-\n-            if ( ascii[jj - 4] == '1' )\n-            {\n-                l_raw[ii] |= BIT_4 ;\n-            }\n-\n-            if ( ascii[jj - 5] == '1' )\n-            {\n-                l_raw[ii] |= BIT_5 ;\n-            }\n-\n-            if ( ascii[jj - 6] == '1' )\n-            {\n-                l_raw[ii] |= BIT_6 ;\n-            }\n-\n-            if ( ascii[jj - 7] == '1' )\n-            {\n-                l_raw[ii] |= BIT_7 ;\n-            }\n-        }\n-        \n-        return l_raw ;\n-    }\n-\n-    \n-    /**\n-     * Decodes a byte array where each byte represents an ascii '0' or '1'.\n-     * \n-     * @param ascii each byte represents an ascii '0' or '1'\n-     * @return the raw encoded binary where each bit corresponds to a byte in\n-     *      the byte array argument \n-     */\n-    public static byte[] fromAscii( byte[] ascii )\n-    {\n-        // get length/8 times bytes with 3 bit shifts to the right of the length\n-        byte[] l_raw = new byte[ ascii.length >> 3 ] ;\n-        \n-        /*\n-         * Yah its long and repetitive but I unraveled an internal loop to \n-         * check each bit of a byte for speed using the bit masks that are\n-         * precomputed which is another PITA but it makes it faster.\n-         * \n-         * We also decr index jj by 8 as we go along to not recompute indices\n-         * using multiplication every time inside the loop.\n-         * \n-         * @todo might want another nested loop to use BITS[] now that its here\n-         */\n-        for ( int ii=0, jj=ascii.length-1; ii < l_raw.length; ii++, jj-=8 )\n-        {\n-            if ( ascii[jj] == '1' )\n-            {\n-                l_raw[ii] |= BIT_0 ;\n-            }\n-            \n-            if ( ascii[jj - 1] == '1' )\n-            {\n-                l_raw[ii] |= BIT_1 ;\n-            }\n-\n-            if ( ascii[jj - 2] == '1' )\n-            {\n-                l_raw[ii] |= BIT_2 ;\n-            }\n-\n-            if ( ascii[jj - 3] == '1' )\n-            {\n-                l_raw[ii] |= BIT_3 ;\n-            }\n-\n-            if ( ascii[jj - 4] == '1' )\n-            {\n-                l_raw[ii] |= BIT_4 ;\n-            }\n-\n-            if ( ascii[jj - 5] == '1' )\n-            {\n-                l_raw[ii] |= BIT_5 ;\n-            }\n-\n-            if ( ascii[jj - 6] == '1' )\n-            {\n-                l_raw[ii] |= BIT_6 ;\n-            }\n-\n-            if ( ascii[jj - 7] == '1' )\n-            {\n-                l_raw[ii] |= BIT_7 ;\n-            }\n-        }\n-        \n-        return l_raw ;\n-    }\n-\n-    \n-    /**\n-     * Converts an array of raw binary data into an array of ascii 0 and 1\n-     * character bytes - each byte is a truncated char.\n-     * \n-     * @param raw the raw binary data to convert\n-     * @return an array of 0 and 1 character bytes for each bit of the argument\n-     * @see org.apache.commons.codec.BinaryEncoder#encode(byte[])\n-     */\n-    public static byte[] toAsciiBytes( byte[] raw )\n-    {\n-        // get 8 times the bytes with 3 bit shifts to the left of the length\n-        byte [] l_ascii = new byte[ raw.length << 3 ] ;\n-        \n-        /*\n-         * Yah its long and repetitive but I unraveled an internal loop to \n-         * check each bit of a byte for speed using the bit masks that are\n-         * precomputed which is another PITA but it makes it faster.\n-         * \n-         * We also decr index jj by 8 as we go along to not recompute indices\n-         * using multiplication every time inside the loop.\n-         * \n-         * @todo might want another nested loop to use BITS[] now that its here\n-         */\n-        for ( int ii=0, jj=l_ascii.length-1; ii < raw.length; ii++, jj-=8 )\n-        {\n-            if ( ( raw[ii] & BIT_0 ) == 0 )\n-            {\n-                l_ascii[jj] = '0' ;\n-            }\n-            else\n-            {\n-                l_ascii[jj] = '1' ;\n-            }\n-            \n-            if ( ( raw[ii] & BIT_1 ) == 0 )\n-            {\n-                l_ascii[jj - 1] = '0' ;\n-            }\n-            else\n-            {\n-                l_ascii[jj - 1] = '1' ;\n-            }\n-\n-            if ( ( raw[ii] & BIT_2 ) == 0 )\n-            {\n-                l_ascii[jj - 2] = '0' ;\n-            }\n-            else\n-            {\n-                l_ascii[jj - 2] = '1' ;\n-            }\n-\n-            if ( ( raw[ii] & BIT_3 ) == 0 )\n-            {\n-                l_ascii[jj - 3] = '0' ;\n-            }\n-            else\n-            {\n-                l_ascii[jj - 3] = '1' ;\n-            }\n-\n-            if ( ( raw[ii] & BIT_4 ) == 0 )\n-            {\n-                l_ascii[jj - 4] = '0' ;\n-            }\n-            else\n-            {\n-                l_ascii[jj - 4] = '1' ;\n-            }\n-\n-            if ( ( raw[ii] & BIT_5 ) == 0 )\n-            {\n-                l_ascii[jj - 5] = '0' ;\n-            }\n-            else\n-            {\n-                l_ascii[jj - 5] = '1' ;\n-            }\n-\n-            if ( ( raw[ii] & BIT_6 ) == 0 )\n-            {\n-                l_ascii[jj - 6] = '0' ;\n-            }\n-            else\n-            {\n-                l_ascii[jj - 6] = '1' ;\n-            }\n-\n-            if ( ( raw[ii] & BIT_7 ) == 0 )\n-            {\n-                l_ascii[jj - 7] = '0' ;\n-            }\n-            else\n-            {\n-                l_ascii[jj - 7] = '1' ;\n-            }\n-        }\n-        \n-        return l_ascii ;\n-    }\n-\n-\n-    /**\n-     * Converts an array of raw binary data into an array of ascii 0 and 1\n-     * characters.\n-     * \n-     * @param raw the raw binary data to convert\n-     * @return an array of 0 and 1 characters for each bit of the argument\n-     * @see org.apache.commons.codec.BinaryEncoder#encode(byte[])\n-     */\n-    public static char[] toAsciiChars( byte[] raw )\n-    {\n-        // get 8 times the bytes with 3 bit shifts to the left of the length\n-        char [] l_ascii = new char[ raw.length << 3 ] ;\n-        \n-        /*\n-         * Yah its long and repetitive but I unraveled an internal loop to \n-         * check each bit of a byte for speed using the bit masks that are\n-         * precomputed which is another PITA but it makes it faster.\n-         * \n-         * We also grow index jj by 8 as we go along to not recompute indices\n-         * using multiplication every time inside the loop.\n-         * \n-         * @todo might want another nested loop to use BITS[] now that its here\n-         */\n-        for ( int ii=0, jj=l_ascii.length-1; ii < raw.length; ii++, jj-=8 )\n-        {\n-            if ( ( raw[ii] & BIT_0 ) == 0 )\n-            {\n-                l_ascii[jj] = '0' ;\n-            }\n-            else\n-            {\n-                l_ascii[jj] = '1' ;\n-            }\n-            \n-            if ( ( raw[ii] & BIT_1 ) == 0 )\n-            {\n-                l_ascii[jj - 1] = '0' ;\n-            }\n-            else\n-            {\n-                l_ascii[jj - 1] = '1' ;\n-            }\n-\n-            if ( ( raw[ii] & BIT_2 ) == 0 )\n-            {\n-                l_ascii[jj - 2] = '0' ;\n-            }\n-            else\n-            {\n-                l_ascii[jj - 2] = '1' ;\n-            }\n-\n-            if ( ( raw[ii] & BIT_3 ) == 0 )\n-            {\n-                l_ascii[jj - 3] = '0' ;\n-            }\n-            else\n-            {\n-                l_ascii[jj - 3] = '1' ;\n-            }\n-\n-            if ( ( raw[ii] & BIT_4 ) == 0 )\n-            {\n-                l_ascii[jj - 4] = '0' ;\n-            }\n-            else\n-            {\n-                l_ascii[jj - 4] = '1' ;\n-            }\n-\n-            if ( ( raw[ii] & BIT_5 ) == 0 )\n-            {\n-                l_ascii[jj - 5] = '0' ;\n-            }\n-            else\n-            {\n-                l_ascii[jj - 5] = '1' ;\n-            }\n-\n-            if ( ( raw[ii] & BIT_6 ) == 0 )\n-            {\n-                l_ascii[jj - 6] = '0' ;\n-            }\n-            else\n-            {\n-                l_ascii[jj - 6] = '1' ;\n-            }\n-\n-            if ( ( raw[ii] & BIT_7 ) == 0 )\n-            {\n-                l_ascii[jj - 7] = '0' ;\n-            }\n-            else\n-            {\n-                l_ascii[jj - 7] = '1' ;\n-            }\n-        }\n-        \n-        return l_ascii ;\n-    }\n-\n-\n-    /**\n-     * Converts an array of raw binary data into a String of ascii 0 and 1\n-     * characters.\n-     * \n-     * @param raw the raw binary data to convert\n-     * @return a String of 0 and 1 characters representing the binary data\n-     * @see org.apache.commons.codec.BinaryEncoder#encode(byte[])\n-     */\n-    public static String toAsciiString( byte[] raw )\n-    {\n-        return new String( toAsciiChars( raw ) ) ;\n-    }\n-}\n+/*\n+ * ====================================================================\n+ * \n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2004 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgement:  \n+ *       \"This product includes software developed by the \n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"Apache\", \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written \n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior \n+ *    written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */ \n+package org.apache.commons.codec.binary ;\n+\n+import org.apache.commons.codec.BinaryDecoder;\n+import org.apache.commons.codec.BinaryEncoder;\n+import org.apache.commons.codec.DecoderException;\n+import org.apache.commons.codec.EncoderException;\n+\n+/**\n+ * Encodes and decodes binary to and from ascii bit Strings.\n+ *\n+ * @todo may want to add more bit vector functions like and/or/xor/nand\n+ * @todo also might be good to generate boolean[] from byte[] et. cetera.\n+ * @author <a href=\"mailto:akarasulu@apache.org\">Alex Karasulu</a>\n+ * @author $Author: ggregory $\n+ * @version $Revision: 1.2 $\n+ */\n+public class Binary implements BinaryDecoder, BinaryEncoder\n+{\n+    /** mask for bit 0 of a byte */\n+    public static final int BIT_0 = 1 ;\n+    /** mask for bit 1 of a byte */\n+    public static final int BIT_1 = 1 << 1 ;\n+    /** mask for bit 2 of a byte */\n+    public static final int BIT_2 = 1 << 2 ;\n+    /** mask for bit 3 of a byte */\n+    public static final int BIT_3 = 1 << 3 ;\n+    /** mask for bit 4 of a byte */\n+    public static final int BIT_4 = 1 << 4 ;\n+    /** mask for bit 5 of a byte */\n+    public static final int BIT_5 = 1 << 5 ;\n+    /** mask for bit 6 of a byte */\n+    public static final int BIT_6 = 1 << 6 ;\n+    /** mask for bit 7 of a byte */\n+    public static final int BIT_7 = 1 << 7 ;\n+    \n+    public static final int [] BITS = \n+    {\n+      BIT_0, BIT_1, BIT_2, BIT_3, BIT_4, BIT_5, BIT_6, BIT_7\n+    } ;\n+    \n+    \n+    /**\n+     * Converts an array of raw binary data into an array of ascii 0 and 1\n+     * characters.\n+     * \n+     * @param raw the raw binary data to convert\n+     * @return 0 and 1 ascii character bytes one for each bit of the argument\n+     * @see org.apache.commons.codec.BinaryEncoder#encode(byte[])\n+     */\n+    public byte[] encode( byte[] raw )\n+    {\n+        return toAsciiBytes( raw ) ;\n+    }\n+    \n+\n+    /**\n+     * Converts an array of raw binary data into an array of ascii 0 and 1\n+     * chars.\n+     * \n+     * @param raw the raw binary data to convert\n+     * @return 0 and 1 ascii character chars one for each bit of the argument\n+     * @throws EncoderException if the argument is not a byte[]\n+     * @see org.apache.commons.codec.Encoder#encode(java.lang.Object)\n+     */\n+    public Object encode( Object raw ) throws EncoderException\n+    {\n+        if ( ! ( raw instanceof byte [] ) )\n+        {\n+            throw new EncoderException( \"argument not a byte array\" ) ;\n+        }\n+        \n+        return toAsciiChars( ( byte [] ) raw ) ;\n+    }\n+    \n+\n+    /**\n+     * Decodes a byte array where each byte represents an ascii '0' or '1'.\n+     * \n+     * @param ascii each byte represents an ascii '0' or '1'\n+     * @return the raw encoded binary where each bit corresponds to a byte in\n+     *      the byte array argument\n+     * @throws DecoderException if argument is not a byte[], char[] or String\n+     * @see org.apache.commons.codec.Decoder#decode(java.lang.Object)\n+     */\n+    public Object decode( Object ascii ) throws DecoderException\n+    {\n+        if ( ascii instanceof byte[] )\n+        {\n+            return fromAscii( ( byte[] ) ascii ) ;\n+        }\n+        \n+        if ( ascii instanceof char[] )\n+        {\n+            return fromAscii( ( char[] ) ascii ) ;\n+        }\n+        \n+        if ( ascii instanceof String )\n+        {\n+            return fromAscii( ( ( String ) ascii ).toCharArray() ) ;\n+        }\n+\n+        throw new DecoderException( \"argument not a byte array\" ) ;\n+    }\n+\n+    \n+    /**\n+     * Decodes a byte array where each byte represents an ascii '0' or '1'.\n+     * \n+     * @param ascii each byte represents an ascii '0' or '1'\n+     * @return the raw encoded binary where each bit corresponds to a byte in\n+     *      the byte array argument \n+     * @see org.apache.commons.codec.Decoder#decode(byte[])\n+     */\n+    public byte[] decode( byte[] ascii ) \n+    {\n+        return fromAscii( ascii ) ;\n+    }\n+    \n+    \n+    /**\n+     * Decodes a String where each char of the String represents an ascii '0' \n+     * or '1'.\n+     * \n+     * @param ascii String of '0' and '1' characters\n+     * @return the raw encoded binary where each bit corresponds to a byte in\n+     *      the byte array argument \n+     * @see org.apache.commons.codec.Decoder#decode(byte[])\n+     */\n+    public byte[] decode( String ascii )\n+    {\n+        return fromAscii( ascii.toCharArray() ) ;\n+    }\n+    \n+    \n+    /**\n+     * Decodes a byte array where each char represents an ascii '0' or '1'.\n+     * \n+     * @param ascii each char represents an ascii '0' or '1'\n+     * @return the raw encoded binary where each bit corresponds to a char in\n+     *      the char array argument \n+     */\n+    public static byte[] fromAscii( char[] ascii )\n+    {\n+        // get length/8 times bytes with 3 bit shifts to the right of the length\n+        byte[] l_raw = new byte[ ascii.length >> 3 ] ;\n+        \n+        /*\n+         * Yah its long and repetitive but I unraveled an internal loop to \n+         * check each bit of a byte for speed using the bit masks that are\n+         * precomputed which is another PITA but it makes it faster.\n+         * \n+         * We also decr index jj by 8 as we go along to not recompute indices\n+         * using multiplication every time inside the loop.\n+         * \n+         * @todo might want another nested loop to use BITS[] now that its here\n+         */\n+        for ( int ii=0, jj=ascii.length-1; ii < l_raw.length; ii++, jj-=8 )\n+        {\n+            if ( ascii[jj] == '1' )\n+            {\n+                l_raw[ii] |= BIT_0 ;\n+            }\n+            \n+            if ( ascii[jj - 1] == '1' )\n+            {\n+                l_raw[ii] |= BIT_1 ;\n+            }\n+\n+            if ( ascii[jj - 2] == '1' )\n+            {\n+                l_raw[ii] |= BIT_2 ;\n+            }\n+\n+            if ( ascii[jj - 3] == '1' )\n+            {\n+                l_raw[ii] |= BIT_3 ;\n+            }\n+\n+            if ( ascii[jj - 4] == '1' )\n+            {\n+                l_raw[ii] |= BIT_4 ;\n+            }\n+\n+            if ( ascii[jj - 5] == '1' )\n+            {\n+                l_raw[ii] |= BIT_5 ;\n+            }\n+\n+            if ( ascii[jj - 6] == '1' )\n+            {\n+                l_raw[ii] |= BIT_6 ;\n+            }\n+\n+            if ( ascii[jj - 7] == '1' )\n+            {\n+                l_raw[ii] |= BIT_7 ;\n+            }\n+        }\n+        \n+        return l_raw ;\n+    }\n+\n+    \n+    /**\n+     * Decodes a byte array where each byte represents an ascii '0' or '1'.\n+     * \n+     * @param ascii each byte represents an ascii '0' or '1'\n+     * @return the raw encoded binary where each bit corresponds to a byte in\n+     *      the byte array argument \n+     */\n+    public static byte[] fromAscii( byte[] ascii )\n+    {\n+        // get length/8 times bytes with 3 bit shifts to the right of the length\n+        byte[] l_raw = new byte[ ascii.length >> 3 ] ;\n+        \n+        /*\n+         * Yah its long and repetitive but I unraveled an internal loop to \n+         * check each bit of a byte for speed using the bit masks that are\n+         * precomputed which is another PITA but it makes it faster.\n+         * \n+         * We also decr index jj by 8 as we go along to not recompute indices\n+         * using multiplication every time inside the loop.\n+         * \n+         * @todo might want another nested loop to use BITS[] now that its here\n+         */\n+        for ( int ii=0, jj=ascii.length-1; ii < l_raw.length; ii++, jj-=8 )\n+        {\n+            if ( ascii[jj] == '1' )\n+            {\n+                l_raw[ii] |= BIT_0 ;\n+            }\n+            \n+            if ( ascii[jj - 1] == '1' )\n+            {\n+                l_raw[ii] |= BIT_1 ;\n+            }\n+\n+            if ( ascii[jj - 2] == '1' )\n+            {\n+                l_raw[ii] |= BIT_2 ;\n+            }\n+\n+            if ( ascii[jj - 3] == '1' )\n+            {\n+                l_raw[ii] |= BIT_3 ;\n+            }\n+\n+            if ( ascii[jj - 4] == '1' )\n+            {\n+                l_raw[ii] |= BIT_4 ;\n+            }\n+\n+            if ( ascii[jj - 5] == '1' )\n+            {\n+                l_raw[ii] |= BIT_5 ;\n+            }\n+\n+            if ( ascii[jj - 6] == '1' )\n+            {\n+                l_raw[ii] |= BIT_6 ;\n+            }\n+\n+            if ( ascii[jj - 7] == '1' )\n+            {\n+                l_raw[ii] |= BIT_7 ;\n+            }\n+        }\n+        \n+        return l_raw ;\n+    }\n+\n+    \n+    /**\n+     * Converts an array of raw binary data into an array of ascii 0 and 1\n+     * character bytes - each byte is a truncated char.\n+     * \n+     * @param raw the raw binary data to convert\n+     * @return an array of 0 and 1 character bytes for each bit of the argument\n+     * @see org.apache.commons.codec.BinaryEncoder#encode(byte[])\n+     */\n+    public static byte[] toAsciiBytes( byte[] raw )\n+    {\n+        // get 8 times the bytes with 3 bit shifts to the left of the length\n+        byte [] l_ascii = new byte[ raw.length << 3 ] ;\n+        \n+        /*\n+         * Yah its long and repetitive but I unraveled an internal loop to \n+         * check each bit of a byte for speed using the bit masks that are\n+         * precomputed which is another PITA but it makes it faster.\n+         * \n+         * We also decr index jj by 8 as we go along to not recompute indices\n+         * using multiplication every time inside the loop.\n+         * \n+         * @todo might want another nested loop to use BITS[] now that its here\n+         */\n+        for ( int ii=0, jj=l_ascii.length-1; ii < raw.length; ii++, jj-=8 )\n+        {\n+            if ( ( raw[ii] & BIT_0 ) == 0 )\n+            {\n+                l_ascii[jj] = '0' ;\n+            }\n+            else\n+            {\n+                l_ascii[jj] = '1' ;\n+            }\n+            \n+            if ( ( raw[ii] & BIT_1 ) == 0 )\n+            {\n+                l_ascii[jj - 1] = '0' ;\n+            }\n+            else\n+            {\n+                l_ascii[jj - 1] = '1' ;\n+            }\n+\n+            if ( ( raw[ii] & BIT_2 ) == 0 )\n+            {\n+                l_ascii[jj - 2] = '0' ;\n+            }\n+            else\n+            {\n+                l_ascii[jj - 2] = '1' ;\n+            }\n+\n+            if ( ( raw[ii] & BIT_3 ) == 0 )\n+            {\n+                l_ascii[jj - 3] = '0' ;\n+            }\n+            else\n+            {\n+                l_ascii[jj - 3] = '1' ;\n+            }\n+\n+            if ( ( raw[ii] & BIT_4 ) == 0 )\n+            {\n+                l_ascii[jj - 4] = '0' ;\n+            }\n+            else\n+            {\n+                l_ascii[jj - 4] = '1' ;\n+            }\n+\n+            if ( ( raw[ii] & BIT_5 ) == 0 )\n+            {\n+                l_ascii[jj - 5] = '0' ;\n+            }\n+            else\n+            {\n+                l_ascii[jj - 5] = '1' ;\n+            }\n+\n+            if ( ( raw[ii] & BIT_6 ) == 0 )\n+            {\n+                l_ascii[jj - 6] = '0' ;\n+            }\n+            else\n+            {\n+                l_ascii[jj - 6] = '1' ;\n+            }\n+\n+            if ( ( raw[ii] & BIT_7 ) == 0 )\n+            {\n+                l_ascii[jj - 7] = '0' ;\n+            }\n+            else\n+            {\n+                l_ascii[jj - 7] = '1' ;\n+            }\n+        }\n+        \n+        return l_ascii ;\n+    }\n+\n+\n+    /**\n+     * Converts an array of raw binary data into an array of ascii 0 and 1\n+     * characters.\n+     * \n+     * @param raw the raw binary data to convert\n+     * @return an array of 0 and 1 characters for each bit of the argument\n+     * @see org.apache.commons.codec.BinaryEncoder#encode(byte[])\n+     */\n+    public static char[] toAsciiChars( byte[] raw )\n+    {\n+        // get 8 times the bytes with 3 bit shifts to the left of the length\n+        char [] l_ascii = new char[ raw.length << 3 ] ;\n+        \n+        /*\n+         * Yah its long and repetitive but I unraveled an internal loop to \n+         * check each bit of a byte for speed using the bit masks that are\n+         * precomputed which is another PITA but it makes it faster.\n+         * \n+         * We also grow index jj by 8 as we go along to not recompute indices\n+         * using multiplication every time inside the loop.\n+         * \n+         * @todo might want another nested loop to use BITS[] now that its here\n+         */\n+        for ( int ii=0, jj=l_ascii.length-1; ii < raw.length; ii++, jj-=8 )\n+        {\n+            if ( ( raw[ii] & BIT_0 ) == 0 )\n+            {\n+                l_ascii[jj] = '0' ;\n+            }\n+            else\n+            {\n+                l_ascii[jj] = '1' ;\n+            }\n+            \n+            if ( ( raw[ii] & BIT_1 ) == 0 )\n+            {\n+                l_ascii[jj - 1] = '0' ;\n+            }\n+            else\n+            {\n+                l_ascii[jj - 1] = '1' ;\n+            }\n+\n+            if ( ( raw[ii] & BIT_2 ) == 0 )\n+            {\n+                l_ascii[jj - 2] = '0' ;\n+            }\n+            else\n+            {\n+                l_ascii[jj - 2] = '1' ;\n+            }\n+\n+            if ( ( raw[ii] & BIT_3 ) == 0 )\n+            {\n+                l_ascii[jj - 3] = '0' ;\n+            }\n+            else\n+            {\n+                l_ascii[jj - 3] = '1' ;\n+            }\n+\n+            if ( ( raw[ii] & BIT_4 ) == 0 )\n+            {\n+                l_ascii[jj - 4] = '0' ;\n+            }\n+            else\n+            {\n+                l_ascii[jj - 4] = '1' ;\n+            }\n+\n+            if ( ( raw[ii] & BIT_5 ) == 0 )\n+            {\n+                l_ascii[jj - 5] = '0' ;\n+            }\n+            else\n+            {\n+                l_ascii[jj - 5] = '1' ;\n+            }\n+\n+            if ( ( raw[ii] & BIT_6 ) == 0 )\n+            {\n+                l_ascii[jj - 6] = '0' ;\n+            }\n+            else\n+            {\n+                l_ascii[jj - 6] = '1' ;\n+            }\n+\n+            if ( ( raw[ii] & BIT_7 ) == 0 )\n+            {\n+                l_ascii[jj - 7] = '0' ;\n+            }\n+            else\n+            {\n+                l_ascii[jj - 7] = '1' ;\n+            }\n+        }\n+        \n+        return l_ascii ;\n+    }\n+\n+\n+    /**\n+     * Converts an array of raw binary data into a String of ascii 0 and 1\n+     * characters.\n+     * \n+     * @param raw the raw binary data to convert\n+     * @return a String of 0 and 1 characters representing the binary data\n+     * @see org.apache.commons.codec.BinaryEncoder#encode(byte[])\n+     */\n+    public static String toAsciiString( byte[] raw )\n+    {\n+        return new String( toAsciiChars( raw ) ) ;\n+    }\n+}\n--- a/src/java/org/apache/commons/codec/net/URLCodec.java\n+++ b/src/java/org/apache/commons/codec/net/URLCodec.java\n \n import org.apache.commons.codec.BinaryDecoder;\n import org.apache.commons.codec.BinaryEncoder;\n+import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n-import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.StringDecoder;\n import org.apache.commons.codec.StringEncoder;\n \n  * @author <a href=\"mailto:oleg@ural.ru\">Oleg Kalnichevski</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 1.2\n- * @version $Id: URLCodec.java,v 1.14 2004/01/09 19:23:53 ggregory Exp $\n+ * @version $Id: URLCodec.java,v 1.15 2004/02/19 05:38:20 ggregory Exp $\n  */\n public class URLCodec \n         implements BinaryEncoder, BinaryDecoder, \n--- a/src/test/org/apache/commons/codec/StringEncoderComparatorTest.java\n+++ b/src/test/org/apache/commons/codec/StringEncoderComparatorTest.java\n import java.util.List;\n \n import junit.framework.TestCase;\n-\n import org.apache.commons.codec.language.DoubleMetaphone;\n import org.apache.commons.codec.language.Soundex;\n \n /**\n  * Test cases for the StingEncoderComparator.\n  * \n- * @version $Revision: 1.7 $ $Date: 2004/01/02 07:05:36 $\n+ * @version $Revision: 1.8 $ $Date: 2004/02/19 05:40:59 $\n  * @author Tim O'Brien\n  */\n public class StringEncoderComparatorTest extends TestCase {\n--- a/src/test/org/apache/commons/codec/binary/BinaryTest.java\n+++ b/src/test/org/apache/commons/codec/binary/BinaryTest.java\n-/*\n- * ====================================================================\n- * \n- * The Apache Software License, Version 1.1\n- *\n- * Copyright (c) 2001-2004 The Apache Software Foundation.  All rights\n- * reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer. \n- *\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and/or other materials provided with the\n- *    distribution.\n- *\n- * 3. The end-user documentation included with the redistribution,\n- *    if any, must include the following acknowledgement:  \n- *       \"This product includes software developed by the \n- *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowledgement may appear in the software itself,\n- *    if and wherever such third-party acknowledgements normally appear.\n- *\n- * 4. The names \"Apache\", \"The Jakarta Project\", \"Commons\", and \"Apache Software\n- *    Foundation\" must not be used to endorse or promote products derived\n- *    from this software without prior written permission. For written \n- *    permission, please contact apache@apache.org.\n- *\n- * 5. Products derived from this software may not be called \"Apache\"\n- *    nor may \"Apache\" appear in their name without prior \n- *    written permission of the Apache Software Foundation.\n- *\n- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n- * SUCH DAMAGE.\n- * ====================================================================\n- *\n- * This software consists of voluntary contributions made by many\n- * individuals on behalf of the Apache Software Foundation.  For more\n- * information on the Apache Software Foundation, please see\n- * <http://www.apache.org/>.\n- *\n- */ \n-\n-package org.apache.commons.codec.binary ;\n-\n-\n-import junit.framework.TestCase ;\n-\n-\n-/**\n- * TestCase for Binary class.\n- *\n- * @author <a href=\"mailto:akarasulu@apache.org\">Alex Karasulu</a>\n- * @author $Author: tobrien $\n- * @version $Rev$\n- */\n-public class BinaryTest extends TestCase\n-{\n-    Binary instance = null ;\n-\n-    /*\n-     * @see TestCase#setUp()\n-     */\n-    protected void setUp() throws Exception\n-    {\n-        super.setUp();\n-        instance = new Binary() ;\n-    }\n-\n-    /*\n-     * @see TestCase#tearDown()\n-     */\n-    protected void tearDown() throws Exception\n-    {\n-        super.tearDown();\n-        instance = null ;\n-    }\n-\n-    /**\n-     * Constructor for BinaryTest.\n-     * @param arg0\n-     */\n-    public BinaryTest(String arg0)\n-    {\n-        super(arg0);\n-    }\n-\n-    // ------------------------------------------------------------------------\n-    //\n-    // Test decode(Object)\n-    //\n-    // ------------------------------------------------------------------------\n-\n-    \n-    /*\n-     * Class to test for Object decode(Object)\n-     */\n-    public void testDecodeObject() throws Exception\n-    {\n-        // With a single raw binary\n-        \n-        byte [] bits = new byte[1] ;\n-        byte [] decoded = ( byte[] ) instance.decode( ( Object ) \"00000000\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 ;\n-        decoded = ( byte[] ) instance.decode( ( Object ) \"00000001\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n-        decoded = ( byte[] ) instance.decode( ( Object ) \"00000011\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        decoded = ( byte[] ) instance.decode( ( Object ) \"00000111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        decoded = ( byte[] ) instance.decode( ( Object ) \"00001111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        decoded = ( byte[] ) instance.decode( ( Object ) \"00011111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        decoded = ( byte[] ) instance.decode( ( Object ) \"00111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        decoded = ( byte[] ) instance.decode( ( Object ) \"01111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = ( byte[] ) instance.decode( ( Object ) \"11111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        // With a two raw binaries\n-        \n-        bits = new byte[2] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = ( byte[] ) instance.decode( ( Object ) \"0000000011111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = ( byte[] ) instance.decode( ( Object ) \"0000000111111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = ( byte[] ) instance.decode( ( Object ) \"0000001111111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = ( byte[] ) instance.decode( ( Object ) \"0000011111111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = ( byte[] ) instance.decode( ( Object ) \"0000111111111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = ( byte[] ) instance.decode( ( Object ) \"0001111111111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = ( byte[] ) instance.decode( ( Object ) \"0011111111111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = ( byte[] ) instance.decode( ( Object ) \"0111111111111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = ( byte[] ) instance.decode( ( Object ) \"1111111111111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-    }\n-\n-\n-    // ------------------------------------------------------------------------\n-    //\n-    // Test decode(byte[])\n-    //\n-    // ------------------------------------------------------------------------\n-\n-    \n-    /*\n-     * Class to test for byte[] decode(byte[])\n-     */\n-    public void testDecodebyteArray()\n-    {\n-        // With a single raw binary\n-        \n-        byte [] bits = new byte[1] ;\n-        byte [] decoded = instance.decode( \"00000000\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 ;\n-        decoded = instance.decode( \"00000001\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n-        decoded = instance.decode( \"00000011\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        decoded = instance.decode( \"00000111\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        decoded = instance.decode( \"00001111\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        decoded = instance.decode( \"00011111\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        decoded = instance.decode( \"00111111\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        decoded = instance.decode( \"01111111\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = instance.decode( \"11111111\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        // With a two raw binaries\n-        \n-        bits = new byte[2] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = instance.decode( \"0000000011111111\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = instance.decode( \"0000000111111111\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = instance.decode( \"0000001111111111\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = instance.decode( \"0000011111111111\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = instance.decode( \"0000111111111111\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = instance.decode( \"0001111111111111\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = instance.decode( \"0011111111111111\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = instance.decode( \"0111111111111111\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = instance.decode( \"1111111111111111\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-    }\n-\n-\n-    // ------------------------------------------------------------------------\n-    //\n-    // Test decode(String)\n-    //\n-    // ------------------------------------------------------------------------\n-\n-    \n-    /*\n-     * Class to test for byte[] decode(String)\n-     */\n-    public void testDecodeString()\n-    {\n-        // With a single raw binary\n-        \n-        byte [] bits = new byte[1] ;\n-        byte [] decoded = instance.decode( \"00000000\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 ;\n-        decoded = instance.decode( \"00000001\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n-        decoded = instance.decode( \"00000011\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        decoded = instance.decode( \"00000111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        decoded = instance.decode( \"00001111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        decoded = instance.decode( \"00011111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        decoded = instance.decode( \"00111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        decoded = instance.decode( \"01111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = instance.decode( \"11111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        // With a two raw binaries\n-        \n-        bits = new byte[2] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = instance.decode( \"0000000011111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = instance.decode( \"0000000111111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = instance.decode( \"0000001111111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = instance.decode( \"0000011111111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = instance.decode( \"0000111111111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = instance.decode( \"0001111111111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = instance.decode( \"0011111111111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = instance.decode( \"0111111111111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = instance.decode( \"1111111111111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-    }\n-\n-\n-    // ------------------------------------------------------------------------\n-    //\n-    // Test fromAscii(char[])\n-    //\n-    // ------------------------------------------------------------------------\n-\n-    \n-    /*\n-     * Class to test for byte[] fromAscii(char[])\n-     */\n-    public void testFromAsciicharArray()\n-    {\n-        // With a single raw binary\n-        \n-        byte [] bits = new byte[1] ;\n-        byte [] decoded = Binary.fromAscii( \"00000000\".toCharArray() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 ;\n-        decoded = Binary.fromAscii( \"00000001\".toCharArray() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n-        decoded = Binary.fromAscii( \"00000011\".toCharArray() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        decoded = Binary.fromAscii( \"00000111\".toCharArray() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        decoded = Binary.fromAscii( \"00001111\".toCharArray() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        decoded = Binary.fromAscii( \"00011111\".toCharArray() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        decoded = Binary.fromAscii( \"00111111\".toCharArray() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        decoded = Binary.fromAscii( \"01111111\".toCharArray() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = Binary.fromAscii( \"11111111\".toCharArray() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        // With a two raw binaries\n-        \n-        bits = new byte[2] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = Binary.fromAscii( \"0000000011111111\".toCharArray() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = Binary.fromAscii( \"0000000111111111\".toCharArray() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = Binary.fromAscii( \"0000001111111111\".toCharArray() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = Binary.fromAscii( \"0000011111111111\".toCharArray() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = Binary.fromAscii( \"0000111111111111\".toCharArray() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = Binary.fromAscii( \"0001111111111111\".toCharArray() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = Binary.fromAscii( \"0011111111111111\".toCharArray() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = Binary.fromAscii( \"0111111111111111\".toCharArray() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = Binary.fromAscii( \"1111111111111111\".toCharArray() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-    }\n-\n-    \n-    // ------------------------------------------------------------------------\n-    //\n-    // Test fromAscii(byte[])\n-    //\n-    // ------------------------------------------------------------------------\n-\n-    \n-    /*\n-     * Class to test for byte[] fromAscii(byte[])\n-     */\n-    public void testFromAsciibyteArray()\n-    {\n-        // With a single raw binary\n-        \n-        byte [] bits = new byte[1] ;\n-        byte [] decoded = Binary.fromAscii( \"00000000\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 ;\n-        decoded = Binary.fromAscii( \"00000001\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n-        decoded = Binary.fromAscii( \"00000011\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        decoded = Binary.fromAscii( \"00000111\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        decoded = Binary.fromAscii( \"00001111\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        decoded = Binary.fromAscii( \"00011111\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        decoded = Binary.fromAscii( \"00111111\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        decoded = Binary.fromAscii( \"01111111\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = Binary.fromAscii( \"11111111\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        // With a two raw binaries\n-        \n-        bits = new byte[2] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = Binary.fromAscii( \"0000000011111111\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = Binary.fromAscii( \"0000000111111111\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = Binary.fromAscii( \"0000001111111111\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = Binary.fromAscii( \"0000011111111111\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = Binary.fromAscii( \"0000111111111111\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = Binary.fromAscii( \"0001111111111111\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = Binary.fromAscii( \"0011111111111111\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = Binary.fromAscii( \"0111111111111111\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = Binary.fromAscii( \"1111111111111111\".getBytes() ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-    }\n-    \n-    \n-    // ------------------------------------------------------------------------\n-    //\n-    // Test encode(byte[])\n-    //\n-    // ------------------------------------------------------------------------\n-\n-    \n-    /*\n-     * Class to test for byte[] encode(byte[])\n-     */\n-    public void testEncodebyteArray()\n-    {\n-        // With a single raw binary\n-        \n-        byte [] bits = new byte[1] ;\n-        String l_encoded = new String( instance.encode( bits ) ) ;\n-        assertEquals( \"00000000\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 ;\n-        l_encoded = new String( instance.encode( bits ) ) ;\n-        assertEquals( \"00000001\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n-        l_encoded = new String( instance.encode( bits ) ) ;\n-        assertEquals( \"00000011\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        l_encoded = new String( instance.encode( bits ) ) ;\n-        assertEquals( \"00000111\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        l_encoded = new String( instance.encode( bits ) ) ;\n-        assertEquals( \"00001111\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        l_encoded = new String( instance.encode( bits ) ) ;\n-        assertEquals( \"00011111\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        l_encoded = new String( instance.encode( bits ) ) ;\n-        assertEquals( \"00111111\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        l_encoded = new String( instance.encode( bits ) ) ;\n-        assertEquals( \"01111111\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( instance.encode( bits ) ) ;\n-        assertEquals( \"11111111\", l_encoded ) ;\n-\n-        // With a two raw binaries\n-        \n-        bits = new byte[2] ;\n-        l_encoded = new String( instance.encode( bits ) ) ;\n-        assertEquals( \"0000000000000000\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 ;\n-        l_encoded = new String( instance.encode( bits ) ) ;\n-        assertEquals( \"0000000000000001\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n-        l_encoded = new String( instance.encode( bits ) ) ;\n-        assertEquals( \"0000000000000011\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        l_encoded = new String( instance.encode( bits ) ) ;\n-        assertEquals( \"0000000000000111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        l_encoded = new String( instance.encode( bits ) ) ;\n-        assertEquals( \"0000000000001111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        l_encoded = new String( instance.encode( bits ) ) ;\n-        assertEquals( \"0000000000011111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        l_encoded = new String( instance.encode( bits ) ) ;\n-        assertEquals( \"0000000000111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        l_encoded = new String( instance.encode( bits ) ) ;\n-        assertEquals( \"0000000001111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( instance.encode( bits ) ) ;\n-        assertEquals( \"0000000011111111\", l_encoded ) ;\n-\n-                    // work on the other byte now\n-        \n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( instance.encode( bits ) ) ;\n-        assertEquals( \"0000000111111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( instance.encode( bits ) ) ;\n-        assertEquals( \"0000001111111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( instance.encode( bits ) ) ;\n-        assertEquals( \"0000011111111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( instance.encode( bits ) ) ;\n-        assertEquals( \"0000111111111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( instance.encode( bits ) ) ;\n-        assertEquals( \"0001111111111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( instance.encode( bits ) ) ;\n-        assertEquals( \"0011111111111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( instance.encode( bits ) ) ;\n-        assertEquals( \"0111111111111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        bits[1] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( instance.encode( bits ) ) ;\n-        assertEquals( \"1111111111111111\", l_encoded ) ;\n-    }\n-\n-\n-    // ------------------------------------------------------------------------\n-    //\n-    // Test toAsciiBytes\n-    //\n-    // ------------------------------------------------------------------------\n-\n-    \n-    public void testToAsciiBytes()\n-    {\n-        // With a single raw binary\n-        \n-        byte [] bits = new byte[1] ;\n-        String l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n-        assertEquals( \"00000000\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 ;\n-        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n-        assertEquals( \"00000001\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n-        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n-        assertEquals( \"00000011\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n-        assertEquals( \"00000111\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n-        assertEquals( \"00001111\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n-        assertEquals( \"00011111\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n-        assertEquals( \"00111111\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n-        assertEquals( \"01111111\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n-        assertEquals( \"11111111\", l_encoded ) ;\n-\n-        // With a two raw binaries\n-        \n-        bits = new byte[2] ;\n-        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n-        assertEquals( \"0000000000000000\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 ;\n-        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n-        assertEquals( \"0000000000000001\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n-        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n-        assertEquals( \"0000000000000011\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n-        assertEquals( \"0000000000000111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n-        assertEquals( \"0000000000001111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n-        assertEquals( \"0000000000011111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n-        assertEquals( \"0000000000111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n-        assertEquals( \"0000000001111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n-        assertEquals( \"0000000011111111\", l_encoded ) ;\n-\n-                    // work on the other byte now\n-        \n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n-        assertEquals( \"0000000111111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n-        assertEquals( \"0000001111111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n-        assertEquals( \"0000011111111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n-        assertEquals( \"0000111111111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n-        assertEquals( \"0001111111111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n-        assertEquals( \"0011111111111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n-        assertEquals( \"0111111111111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        bits[1] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n-        assertEquals( \"1111111111111111\", l_encoded ) ;\n-    }\n-\n-    // ------------------------------------------------------------------------\n-    //\n-    // Test toAsciiChars\n-    //\n-    // ------------------------------------------------------------------------\n-\n-    \n-    public void testToAsciiChars()\n-    {\n-        // With a single raw binary\n-        \n-        byte [] bits = new byte[1] ;\n-        String l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n-        assertEquals( \"00000000\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 ;\n-        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n-        assertEquals( \"00000001\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n-        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n-        assertEquals( \"00000011\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n-        assertEquals( \"00000111\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n-        assertEquals( \"00001111\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n-        assertEquals( \"00011111\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n-        assertEquals( \"00111111\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n-        assertEquals( \"01111111\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n-        assertEquals( \"11111111\", l_encoded ) ;\n-\n-        // With a two raw binaries\n-        \n-        bits = new byte[2] ;\n-        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n-        assertEquals( \"0000000000000000\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 ;\n-        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n-        assertEquals( \"0000000000000001\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n-        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n-        assertEquals( \"0000000000000011\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n-        assertEquals( \"0000000000000111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n-        assertEquals( \"0000000000001111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n-        assertEquals( \"0000000000011111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n-        assertEquals( \"0000000000111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n-        assertEquals( \"0000000001111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n-        assertEquals( \"0000000011111111\", l_encoded ) ;\n-\n-                    // work on the other byte now\n-        \n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n-        assertEquals( \"0000000111111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n-        assertEquals( \"0000001111111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n-        assertEquals( \"0000011111111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n-        assertEquals( \"0000111111111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n-        assertEquals( \"0001111111111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n-        assertEquals( \"0011111111111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n-        assertEquals( \"0111111111111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        bits[1] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n-        assertEquals( \"1111111111111111\", l_encoded ) ;\n-    }\n-\n-\n-    // ------------------------------------------------------------------------\n-    //\n-    // Test toAsciiString\n-    //\n-    // ------------------------------------------------------------------------\n-\n-    \n-    public void testToAsciiString()\n-    {\n-        // With a single raw binary\n-        \n-        byte [] bits = new byte[1] ;\n-        String l_encoded = Binary.toAsciiString( bits ) ;\n-        assertEquals( \"00000000\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 ;\n-        l_encoded = Binary.toAsciiString( bits ) ;\n-        assertEquals( \"00000001\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n-        l_encoded = Binary.toAsciiString( bits ) ;\n-        assertEquals( \"00000011\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        l_encoded = Binary.toAsciiString( bits ) ;\n-        assertEquals( \"00000111\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        l_encoded = Binary.toAsciiString( bits ) ;\n-        assertEquals( \"00001111\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        l_encoded = Binary.toAsciiString( bits ) ;\n-        assertEquals( \"00011111\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        l_encoded = Binary.toAsciiString( bits ) ;\n-        assertEquals( \"00111111\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        l_encoded = Binary.toAsciiString( bits ) ;\n-        assertEquals( \"01111111\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = Binary.toAsciiString( bits ) ;\n-        assertEquals( \"11111111\", l_encoded ) ;\n-\n-        // With a two raw binaries\n-        \n-        bits = new byte[2] ;\n-        l_encoded = Binary.toAsciiString( bits ) ;\n-        assertEquals( \"0000000000000000\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 ;\n-        l_encoded = Binary.toAsciiString( bits ) ;\n-        assertEquals( \"0000000000000001\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n-        l_encoded = Binary.toAsciiString( bits ) ;\n-        assertEquals( \"0000000000000011\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        l_encoded = Binary.toAsciiString( bits ) ;\n-        assertEquals( \"0000000000000111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        l_encoded = Binary.toAsciiString( bits ) ;\n-        assertEquals( \"0000000000001111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        l_encoded = Binary.toAsciiString( bits ) ;\n-        assertEquals( \"0000000000011111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        l_encoded = Binary.toAsciiString( bits ) ;\n-        assertEquals( \"0000000000111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        l_encoded = Binary.toAsciiString( bits ) ;\n-        assertEquals( \"0000000001111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = Binary.toAsciiString( bits ) ;\n-        assertEquals( \"0000000011111111\", l_encoded ) ;\n-\n-                    // work on the other byte now\n-        \n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = Binary.toAsciiString( bits ) ;\n-        assertEquals( \"0000000111111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = Binary.toAsciiString( bits ) ;\n-        assertEquals( \"0000001111111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = Binary.toAsciiString( bits ) ;\n-        assertEquals( \"0000011111111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = Binary.toAsciiString( bits ) ;\n-        assertEquals( \"0000111111111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = Binary.toAsciiString( bits ) ;\n-        assertEquals( \"0001111111111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = Binary.toAsciiString( bits ) ;\n-        assertEquals( \"0011111111111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = Binary.toAsciiString( bits ) ;\n-        assertEquals( \"0111111111111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        bits[1] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = Binary.toAsciiString( bits ) ;\n-        assertEquals( \"1111111111111111\", l_encoded ) ;\n-    }\n-\n-\n-    // ------------------------------------------------------------------------\n-    //\n-    // Test encode(Object)\n-    //\n-    // ------------------------------------------------------------------------\n-\n-    \n-    /*\n-     * Class to test for Object encode(Object)\n-     */\n-    public void testEncodeObject() throws Exception\n-    {\n-        // With a single raw binary\n-        \n-        byte [] bits = new byte[1] ;\n-        String l_encoded = new String( ( char [] ) \n-                instance.encode( ( Object ) bits ) ) ;\n-        assertEquals( \"00000000\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 ;\n-        l_encoded = new String( ( char [] ) \n-                instance.encode( ( Object ) bits ) ) ;\n-        assertEquals( \"00000001\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n-        l_encoded = new String( ( char [] ) \n-                instance.encode( ( Object ) bits ) ) ;\n-        assertEquals( \"00000011\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        l_encoded = new String( ( char [] ) \n-                instance.encode( ( Object ) bits ) ) ;\n-        assertEquals( \"00000111\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        l_encoded = new String( ( char [] ) \n-                instance.encode( ( Object ) bits ) ) ;\n-        assertEquals( \"00001111\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        l_encoded = new String( ( char [] ) \n-                instance.encode( ( Object ) bits ) ) ;\n-        assertEquals( \"00011111\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        l_encoded = new String( ( char [] ) \n-                instance.encode( ( Object ) bits ) ) ;\n-        assertEquals( \"00111111\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        l_encoded = new String( ( char [] ) \n-                instance.encode( ( Object ) bits ) ) ;\n-        assertEquals( \"01111111\", l_encoded ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( ( char [] ) \n-                instance.encode( ( Object ) bits ) ) ;\n-        assertEquals( \"11111111\", l_encoded ) ;\n-\n-        // With a two raw binaries\n-        \n-        bits = new byte[2] ;\n-        l_encoded = new String( ( char [] ) \n-                instance.encode( ( Object ) bits ) ) ;\n-        assertEquals( \"0000000000000000\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 ;\n-        l_encoded = new String( ( char [] ) \n-                instance.encode( ( Object ) bits ) ) ;\n-        assertEquals( \"0000000000000001\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n-        l_encoded = new String( ( char [] ) \n-                instance.encode( ( Object ) bits ) ) ;\n-        assertEquals( \"0000000000000011\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        l_encoded = new String( ( char [] ) \n-                instance.encode( ( Object ) bits ) ) ;\n-        assertEquals( \"0000000000000111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        l_encoded = new String( ( char [] ) \n-                instance.encode( ( Object ) bits ) ) ;\n-        assertEquals( \"0000000000001111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        l_encoded = new String( ( char [] ) \n-                instance.encode( ( Object ) bits ) ) ;\n-        assertEquals( \"0000000000011111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        l_encoded = new String( ( char [] ) \n-                instance.encode( ( Object ) bits ) ) ;\n-        assertEquals( \"0000000000111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        l_encoded = new String( ( char [] ) \n-                instance.encode( ( Object ) bits ) ) ;\n-        assertEquals( \"0000000001111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( ( char [] ) \n-                instance.encode( ( Object ) bits ) ) ;\n-        assertEquals( \"0000000011111111\", l_encoded ) ;\n-\n-                    // work on the other byte now\n-        \n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( ( char [] ) \n-                instance.encode( ( Object ) bits ) ) ;\n-        assertEquals( \"0000000111111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( ( char [] ) \n-                instance.encode( ( Object ) bits ) ) ;\n-        assertEquals( \"0000001111111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( ( char [] ) \n-                instance.encode( ( Object ) bits ) ) ;\n-        assertEquals( \"0000011111111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( ( char [] ) \n-                instance.encode( ( Object ) bits ) ) ;\n-        assertEquals( \"0000111111111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( ( char [] ) \n-                instance.encode( ( Object ) bits ) ) ;\n-        assertEquals( \"0001111111111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( ( char [] ) \n-                instance.encode( ( Object ) bits ) ) ;\n-        assertEquals( \"0011111111111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( ( char [] ) \n-                instance.encode( ( Object ) bits ) ) ;\n-        assertEquals( \"0111111111111111\", l_encoded ) ;\n-\n-        bits = new byte[2] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        bits[1] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        l_encoded = new String( ( char [] ) \n-                instance.encode( ( Object ) bits ) ) ;\n-        assertEquals( \"1111111111111111\", l_encoded ) ;\n-    }\n-}\n+/*\n+ * ====================================================================\n+ * \n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2004 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgement:  \n+ *       \"This product includes software developed by the \n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"Apache\", \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written \n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior \n+ *    written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */ \n+\n+package org.apache.commons.codec.binary ;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * TestCase for Binary class.\n+ *\n+ * @author <a href=\"mailto:akarasulu@apache.org\">Alex Karasulu</a>\n+ * @author $Author: ggregory $\n+ * @version $Rev$\n+ */\n+public class BinaryTest extends TestCase\n+{\n+    Binary instance = null ;\n+\n+    /*\n+     * @see TestCase#setUp()\n+     */\n+    protected void setUp() throws Exception\n+    {\n+        super.setUp();\n+        instance = new Binary() ;\n+    }\n+\n+    /*\n+     * @see TestCase#tearDown()\n+     */\n+    protected void tearDown() throws Exception\n+    {\n+        super.tearDown();\n+        instance = null ;\n+    }\n+\n+    /**\n+     * Constructor for BinaryTest.\n+     * @param arg0\n+     */\n+    public BinaryTest(String arg0)\n+    {\n+        super(arg0);\n+    }\n+\n+    // ------------------------------------------------------------------------\n+    //\n+    // Test decode(Object)\n+    //\n+    // ------------------------------------------------------------------------\n+\n+    \n+    /*\n+     * Class to test for Object decode(Object)\n+     */\n+    public void testDecodeObject() throws Exception\n+    {\n+        // With a single raw binary\n+        \n+        byte [] bits = new byte[1] ;\n+        byte [] decoded = ( byte[] ) instance.decode( ( Object ) \"00000000\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 ;\n+        decoded = ( byte[] ) instance.decode( ( Object ) \"00000001\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n+        decoded = ( byte[] ) instance.decode( ( Object ) \"00000011\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        decoded = ( byte[] ) instance.decode( ( Object ) \"00000111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 ;\n+        decoded = ( byte[] ) instance.decode( ( Object ) \"00001111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 ;\n+        decoded = ( byte[] ) instance.decode( ( Object ) \"00011111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        decoded = ( byte[] ) instance.decode( ( Object ) \"00111111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        decoded = ( byte[] ) instance.decode( ( Object ) \"01111111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = ( byte[] ) instance.decode( ( Object ) \"11111111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        // With a two raw binaries\n+        \n+        bits = new byte[2] ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = ( byte[] ) instance.decode( ( Object ) \"0000000011111111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = ( byte[] ) instance.decode( ( Object ) \"0000000111111111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = ( byte[] ) instance.decode( ( Object ) \"0000001111111111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = ( byte[] ) instance.decode( ( Object ) \"0000011111111111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = ( byte[] ) instance.decode( ( Object ) \"0000111111111111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = ( byte[] ) instance.decode( ( Object ) \"0001111111111111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = ( byte[] ) instance.decode( ( Object ) \"0011111111111111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = ( byte[] ) instance.decode( ( Object ) \"0111111111111111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = ( byte[] ) instance.decode( ( Object ) \"1111111111111111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+    }\n+\n+\n+    // ------------------------------------------------------------------------\n+    //\n+    // Test decode(byte[])\n+    //\n+    // ------------------------------------------------------------------------\n+\n+    \n+    /*\n+     * Class to test for byte[] decode(byte[])\n+     */\n+    public void testDecodebyteArray()\n+    {\n+        // With a single raw binary\n+        \n+        byte [] bits = new byte[1] ;\n+        byte [] decoded = instance.decode( \"00000000\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 ;\n+        decoded = instance.decode( \"00000001\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n+        decoded = instance.decode( \"00000011\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        decoded = instance.decode( \"00000111\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 ;\n+        decoded = instance.decode( \"00001111\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 ;\n+        decoded = instance.decode( \"00011111\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        decoded = instance.decode( \"00111111\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        decoded = instance.decode( \"01111111\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = instance.decode( \"11111111\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        // With a two raw binaries\n+        \n+        bits = new byte[2] ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = instance.decode( \"0000000011111111\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = instance.decode( \"0000000111111111\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = instance.decode( \"0000001111111111\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = instance.decode( \"0000011111111111\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = instance.decode( \"0000111111111111\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = instance.decode( \"0001111111111111\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = instance.decode( \"0011111111111111\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = instance.decode( \"0111111111111111\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = instance.decode( \"1111111111111111\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+    }\n+\n+\n+    // ------------------------------------------------------------------------\n+    //\n+    // Test decode(String)\n+    //\n+    // ------------------------------------------------------------------------\n+\n+    \n+    /*\n+     * Class to test for byte[] decode(String)\n+     */\n+    public void testDecodeString()\n+    {\n+        // With a single raw binary\n+        \n+        byte [] bits = new byte[1] ;\n+        byte [] decoded = instance.decode( \"00000000\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 ;\n+        decoded = instance.decode( \"00000001\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n+        decoded = instance.decode( \"00000011\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        decoded = instance.decode( \"00000111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 ;\n+        decoded = instance.decode( \"00001111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 ;\n+        decoded = instance.decode( \"00011111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        decoded = instance.decode( \"00111111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        decoded = instance.decode( \"01111111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = instance.decode( \"11111111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        // With a two raw binaries\n+        \n+        bits = new byte[2] ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = instance.decode( \"0000000011111111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = instance.decode( \"0000000111111111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = instance.decode( \"0000001111111111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = instance.decode( \"0000011111111111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = instance.decode( \"0000111111111111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = instance.decode( \"0001111111111111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = instance.decode( \"0011111111111111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = instance.decode( \"0111111111111111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = instance.decode( \"1111111111111111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+    }\n+\n+\n+    // ------------------------------------------------------------------------\n+    //\n+    // Test fromAscii(char[])\n+    //\n+    // ------------------------------------------------------------------------\n+\n+    \n+    /*\n+     * Class to test for byte[] fromAscii(char[])\n+     */\n+    public void testFromAsciicharArray()\n+    {\n+        // With a single raw binary\n+        \n+        byte [] bits = new byte[1] ;\n+        byte [] decoded = Binary.fromAscii( \"00000000\".toCharArray() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 ;\n+        decoded = Binary.fromAscii( \"00000001\".toCharArray() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n+        decoded = Binary.fromAscii( \"00000011\".toCharArray() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        decoded = Binary.fromAscii( \"00000111\".toCharArray() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 ;\n+        decoded = Binary.fromAscii( \"00001111\".toCharArray() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 ;\n+        decoded = Binary.fromAscii( \"00011111\".toCharArray() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        decoded = Binary.fromAscii( \"00111111\".toCharArray() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        decoded = Binary.fromAscii( \"01111111\".toCharArray() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = Binary.fromAscii( \"11111111\".toCharArray() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        // With a two raw binaries\n+        \n+        bits = new byte[2] ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = Binary.fromAscii( \"0000000011111111\".toCharArray() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = Binary.fromAscii( \"0000000111111111\".toCharArray() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = Binary.fromAscii( \"0000001111111111\".toCharArray() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = Binary.fromAscii( \"0000011111111111\".toCharArray() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = Binary.fromAscii( \"0000111111111111\".toCharArray() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = Binary.fromAscii( \"0001111111111111\".toCharArray() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = Binary.fromAscii( \"0011111111111111\".toCharArray() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = Binary.fromAscii( \"0111111111111111\".toCharArray() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = Binary.fromAscii( \"1111111111111111\".toCharArray() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+    }\n+\n+    \n+    // ------------------------------------------------------------------------\n+    //\n+    // Test fromAscii(byte[])\n+    //\n+    // ------------------------------------------------------------------------\n+\n+    \n+    /*\n+     * Class to test for byte[] fromAscii(byte[])\n+     */\n+    public void testFromAsciibyteArray()\n+    {\n+        // With a single raw binary\n+        \n+        byte [] bits = new byte[1] ;\n+        byte [] decoded = Binary.fromAscii( \"00000000\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 ;\n+        decoded = Binary.fromAscii( \"00000001\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n+        decoded = Binary.fromAscii( \"00000011\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        decoded = Binary.fromAscii( \"00000111\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 ;\n+        decoded = Binary.fromAscii( \"00001111\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 ;\n+        decoded = Binary.fromAscii( \"00011111\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        decoded = Binary.fromAscii( \"00111111\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        decoded = Binary.fromAscii( \"01111111\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = Binary.fromAscii( \"11111111\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        // With a two raw binaries\n+        \n+        bits = new byte[2] ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = Binary.fromAscii( \"0000000011111111\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = Binary.fromAscii( \"0000000111111111\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = Binary.fromAscii( \"0000001111111111\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = Binary.fromAscii( \"0000011111111111\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = Binary.fromAscii( \"0000111111111111\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = Binary.fromAscii( \"0001111111111111\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = Binary.fromAscii( \"0011111111111111\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = Binary.fromAscii( \"0111111111111111\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        decoded = Binary.fromAscii( \"1111111111111111\".getBytes() ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+    }\n+    \n+    \n+    // ------------------------------------------------------------------------\n+    //\n+    // Test encode(byte[])\n+    //\n+    // ------------------------------------------------------------------------\n+\n+    \n+    /*\n+     * Class to test for byte[] encode(byte[])\n+     */\n+    public void testEncodebyteArray()\n+    {\n+        // With a single raw binary\n+        \n+        byte [] bits = new byte[1] ;\n+        String l_encoded = new String( instance.encode( bits ) ) ;\n+        assertEquals( \"00000000\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 ;\n+        l_encoded = new String( instance.encode( bits ) ) ;\n+        assertEquals( \"00000001\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n+        l_encoded = new String( instance.encode( bits ) ) ;\n+        assertEquals( \"00000011\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        l_encoded = new String( instance.encode( bits ) ) ;\n+        assertEquals( \"00000111\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 ;\n+        l_encoded = new String( instance.encode( bits ) ) ;\n+        assertEquals( \"00001111\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 ;\n+        l_encoded = new String( instance.encode( bits ) ) ;\n+        assertEquals( \"00011111\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        l_encoded = new String( instance.encode( bits ) ) ;\n+        assertEquals( \"00111111\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        l_encoded = new String( instance.encode( bits ) ) ;\n+        assertEquals( \"01111111\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( instance.encode( bits ) ) ;\n+        assertEquals( \"11111111\", l_encoded ) ;\n+\n+        // With a two raw binaries\n+        \n+        bits = new byte[2] ;\n+        l_encoded = new String( instance.encode( bits ) ) ;\n+        assertEquals( \"0000000000000000\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = Binary.BIT_0 ;\n+        l_encoded = new String( instance.encode( bits ) ) ;\n+        assertEquals( \"0000000000000001\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n+        l_encoded = new String( instance.encode( bits ) ) ;\n+        assertEquals( \"0000000000000011\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        l_encoded = new String( instance.encode( bits ) ) ;\n+        assertEquals( \"0000000000000111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 ;\n+        l_encoded = new String( instance.encode( bits ) ) ;\n+        assertEquals( \"0000000000001111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 ;\n+        l_encoded = new String( instance.encode( bits ) ) ;\n+        assertEquals( \"0000000000011111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        l_encoded = new String( instance.encode( bits ) ) ;\n+        assertEquals( \"0000000000111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        l_encoded = new String( instance.encode( bits ) ) ;\n+        assertEquals( \"0000000001111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( instance.encode( bits ) ) ;\n+        assertEquals( \"0000000011111111\", l_encoded ) ;\n+\n+                    // work on the other byte now\n+        \n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( instance.encode( bits ) ) ;\n+        assertEquals( \"0000000111111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( instance.encode( bits ) ) ;\n+        assertEquals( \"0000001111111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( instance.encode( bits ) ) ;\n+        assertEquals( \"0000011111111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( instance.encode( bits ) ) ;\n+        assertEquals( \"0000111111111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( instance.encode( bits ) ) ;\n+        assertEquals( \"0001111111111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( instance.encode( bits ) ) ;\n+        assertEquals( \"0011111111111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( instance.encode( bits ) ) ;\n+        assertEquals( \"0111111111111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        bits[1] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( instance.encode( bits ) ) ;\n+        assertEquals( \"1111111111111111\", l_encoded ) ;\n+    }\n+\n+\n+    // ------------------------------------------------------------------------\n+    //\n+    // Test toAsciiBytes\n+    //\n+    // ------------------------------------------------------------------------\n+\n+    \n+    public void testToAsciiBytes()\n+    {\n+        // With a single raw binary\n+        \n+        byte [] bits = new byte[1] ;\n+        String l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n+        assertEquals( \"00000000\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 ;\n+        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n+        assertEquals( \"00000001\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n+        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n+        assertEquals( \"00000011\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n+        assertEquals( \"00000111\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 ;\n+        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n+        assertEquals( \"00001111\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 ;\n+        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n+        assertEquals( \"00011111\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n+        assertEquals( \"00111111\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n+        assertEquals( \"01111111\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n+        assertEquals( \"11111111\", l_encoded ) ;\n+\n+        // With a two raw binaries\n+        \n+        bits = new byte[2] ;\n+        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n+        assertEquals( \"0000000000000000\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = Binary.BIT_0 ;\n+        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n+        assertEquals( \"0000000000000001\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n+        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n+        assertEquals( \"0000000000000011\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n+        assertEquals( \"0000000000000111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 ;\n+        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n+        assertEquals( \"0000000000001111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 ;\n+        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n+        assertEquals( \"0000000000011111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n+        assertEquals( \"0000000000111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n+        assertEquals( \"0000000001111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n+        assertEquals( \"0000000011111111\", l_encoded ) ;\n+\n+                    // work on the other byte now\n+        \n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n+        assertEquals( \"0000000111111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n+        assertEquals( \"0000001111111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n+        assertEquals( \"0000011111111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n+        assertEquals( \"0000111111111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n+        assertEquals( \"0001111111111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n+        assertEquals( \"0011111111111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n+        assertEquals( \"0111111111111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        bits[1] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n+        assertEquals( \"1111111111111111\", l_encoded ) ;\n+    }\n+\n+    // ------------------------------------------------------------------------\n+    //\n+    // Test toAsciiChars\n+    //\n+    // ------------------------------------------------------------------------\n+\n+    \n+    public void testToAsciiChars()\n+    {\n+        // With a single raw binary\n+        \n+        byte [] bits = new byte[1] ;\n+        String l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n+        assertEquals( \"00000000\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 ;\n+        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n+        assertEquals( \"00000001\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n+        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n+        assertEquals( \"00000011\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n+        assertEquals( \"00000111\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 ;\n+        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n+        assertEquals( \"00001111\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 ;\n+        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n+        assertEquals( \"00011111\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n+        assertEquals( \"00111111\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n+        assertEquals( \"01111111\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n+        assertEquals( \"11111111\", l_encoded ) ;\n+\n+        // With a two raw binaries\n+        \n+        bits = new byte[2] ;\n+        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n+        assertEquals( \"0000000000000000\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = Binary.BIT_0 ;\n+        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n+        assertEquals( \"0000000000000001\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n+        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n+        assertEquals( \"0000000000000011\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n+        assertEquals( \"0000000000000111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 ;\n+        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n+        assertEquals( \"0000000000001111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 ;\n+        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n+        assertEquals( \"0000000000011111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n+        assertEquals( \"0000000000111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n+        assertEquals( \"0000000001111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n+        assertEquals( \"0000000011111111\", l_encoded ) ;\n+\n+                    // work on the other byte now\n+        \n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n+        assertEquals( \"0000000111111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n+        assertEquals( \"0000001111111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n+        assertEquals( \"0000011111111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n+        assertEquals( \"0000111111111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n+        assertEquals( \"0001111111111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n+        assertEquals( \"0011111111111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n+        assertEquals( \"0111111111111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        bits[1] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n+        assertEquals( \"1111111111111111\", l_encoded ) ;\n+    }\n+\n+\n+    // ------------------------------------------------------------------------\n+    //\n+    // Test toAsciiString\n+    //\n+    // ------------------------------------------------------------------------\n+\n+    \n+    public void testToAsciiString()\n+    {\n+        // With a single raw binary\n+        \n+        byte [] bits = new byte[1] ;\n+        String l_encoded = Binary.toAsciiString( bits ) ;\n+        assertEquals( \"00000000\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 ;\n+        l_encoded = Binary.toAsciiString( bits ) ;\n+        assertEquals( \"00000001\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n+        l_encoded = Binary.toAsciiString( bits ) ;\n+        assertEquals( \"00000011\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        l_encoded = Binary.toAsciiString( bits ) ;\n+        assertEquals( \"00000111\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 ;\n+        l_encoded = Binary.toAsciiString( bits ) ;\n+        assertEquals( \"00001111\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 ;\n+        l_encoded = Binary.toAsciiString( bits ) ;\n+        assertEquals( \"00011111\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        l_encoded = Binary.toAsciiString( bits ) ;\n+        assertEquals( \"00111111\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        l_encoded = Binary.toAsciiString( bits ) ;\n+        assertEquals( \"01111111\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = Binary.toAsciiString( bits ) ;\n+        assertEquals( \"11111111\", l_encoded ) ;\n+\n+        // With a two raw binaries\n+        \n+        bits = new byte[2] ;\n+        l_encoded = Binary.toAsciiString( bits ) ;\n+        assertEquals( \"0000000000000000\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = Binary.BIT_0 ;\n+        l_encoded = Binary.toAsciiString( bits ) ;\n+        assertEquals( \"0000000000000001\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n+        l_encoded = Binary.toAsciiString( bits ) ;\n+        assertEquals( \"0000000000000011\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        l_encoded = Binary.toAsciiString( bits ) ;\n+        assertEquals( \"0000000000000111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 ;\n+        l_encoded = Binary.toAsciiString( bits ) ;\n+        assertEquals( \"0000000000001111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 ;\n+        l_encoded = Binary.toAsciiString( bits ) ;\n+        assertEquals( \"0000000000011111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        l_encoded = Binary.toAsciiString( bits ) ;\n+        assertEquals( \"0000000000111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        l_encoded = Binary.toAsciiString( bits ) ;\n+        assertEquals( \"0000000001111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = Binary.toAsciiString( bits ) ;\n+        assertEquals( \"0000000011111111\", l_encoded ) ;\n+\n+                    // work on the other byte now\n+        \n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = Binary.toAsciiString( bits ) ;\n+        assertEquals( \"0000000111111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = Binary.toAsciiString( bits ) ;\n+        assertEquals( \"0000001111111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = Binary.toAsciiString( bits ) ;\n+        assertEquals( \"0000011111111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = Binary.toAsciiString( bits ) ;\n+        assertEquals( \"0000111111111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = Binary.toAsciiString( bits ) ;\n+        assertEquals( \"0001111111111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = Binary.toAsciiString( bits ) ;\n+        assertEquals( \"0011111111111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = Binary.toAsciiString( bits ) ;\n+        assertEquals( \"0111111111111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        bits[1] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = Binary.toAsciiString( bits ) ;\n+        assertEquals( \"1111111111111111\", l_encoded ) ;\n+    }\n+\n+\n+    // ------------------------------------------------------------------------\n+    //\n+    // Test encode(Object)\n+    //\n+    // ------------------------------------------------------------------------\n+\n+    \n+    /*\n+     * Class to test for Object encode(Object)\n+     */\n+    public void testEncodeObject() throws Exception\n+    {\n+        // With a single raw binary\n+        \n+        byte [] bits = new byte[1] ;\n+        String l_encoded = new String( ( char [] ) \n+                instance.encode( ( Object ) bits ) ) ;\n+        assertEquals( \"00000000\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 ;\n+        l_encoded = new String( ( char [] ) \n+                instance.encode( ( Object ) bits ) ) ;\n+        assertEquals( \"00000001\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n+        l_encoded = new String( ( char [] ) \n+                instance.encode( ( Object ) bits ) ) ;\n+        assertEquals( \"00000011\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        l_encoded = new String( ( char [] ) \n+                instance.encode( ( Object ) bits ) ) ;\n+        assertEquals( \"00000111\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 ;\n+        l_encoded = new String( ( char [] ) \n+                instance.encode( ( Object ) bits ) ) ;\n+        assertEquals( \"00001111\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 ;\n+        l_encoded = new String( ( char [] ) \n+                instance.encode( ( Object ) bits ) ) ;\n+        assertEquals( \"00011111\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        l_encoded = new String( ( char [] ) \n+                instance.encode( ( Object ) bits ) ) ;\n+        assertEquals( \"00111111\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        l_encoded = new String( ( char [] ) \n+                instance.encode( ( Object ) bits ) ) ;\n+        assertEquals( \"01111111\", l_encoded ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( ( char [] ) \n+                instance.encode( ( Object ) bits ) ) ;\n+        assertEquals( \"11111111\", l_encoded ) ;\n+\n+        // With a two raw binaries\n+        \n+        bits = new byte[2] ;\n+        l_encoded = new String( ( char [] ) \n+                instance.encode( ( Object ) bits ) ) ;\n+        assertEquals( \"0000000000000000\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = Binary.BIT_0 ;\n+        l_encoded = new String( ( char [] ) \n+                instance.encode( ( Object ) bits ) ) ;\n+        assertEquals( \"0000000000000001\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n+        l_encoded = new String( ( char [] ) \n+                instance.encode( ( Object ) bits ) ) ;\n+        assertEquals( \"0000000000000011\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        l_encoded = new String( ( char [] ) \n+                instance.encode( ( Object ) bits ) ) ;\n+        assertEquals( \"0000000000000111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 ;\n+        l_encoded = new String( ( char [] ) \n+                instance.encode( ( Object ) bits ) ) ;\n+        assertEquals( \"0000000000001111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 ;\n+        l_encoded = new String( ( char [] ) \n+                instance.encode( ( Object ) bits ) ) ;\n+        assertEquals( \"0000000000011111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        l_encoded = new String( ( char [] ) \n+                instance.encode( ( Object ) bits ) ) ;\n+        assertEquals( \"0000000000111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        l_encoded = new String( ( char [] ) \n+                instance.encode( ( Object ) bits ) ) ;\n+        assertEquals( \"0000000001111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( ( char [] ) \n+                instance.encode( ( Object ) bits ) ) ;\n+        assertEquals( \"0000000011111111\", l_encoded ) ;\n+\n+                    // work on the other byte now\n+        \n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( ( char [] ) \n+                instance.encode( ( Object ) bits ) ) ;\n+        assertEquals( \"0000000111111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( ( char [] ) \n+                instance.encode( ( Object ) bits ) ) ;\n+        assertEquals( \"0000001111111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( ( char [] ) \n+                instance.encode( ( Object ) bits ) ) ;\n+        assertEquals( \"0000011111111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( ( char [] ) \n+                instance.encode( ( Object ) bits ) ) ;\n+        assertEquals( \"0000111111111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( ( char [] ) \n+                instance.encode( ( Object ) bits ) ) ;\n+        assertEquals( \"0001111111111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( ( char [] ) \n+                instance.encode( ( Object ) bits ) ) ;\n+        assertEquals( \"0011111111111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( ( char [] ) \n+                instance.encode( ( Object ) bits ) ) ;\n+        assertEquals( \"0111111111111111\", l_encoded ) ;\n+\n+        bits = new byte[2] ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        bits[1] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        l_encoded = new String( ( char [] ) \n+                instance.encode( ( Object ) bits ) ) ;\n+        assertEquals( \"1111111111111111\", l_encoded ) ;\n+    }\n+}\n--- a/src/test/org/apache/commons/codec/language/MetaphoneTest.java\n+++ b/src/test/org/apache/commons/codec/language/MetaphoneTest.java\n \n import junit.framework.Test;\n import junit.framework.TestSuite;\n-\n import org.apache.commons.codec.StringEncoder;\n import org.apache.commons.codec.StringEncoderAbstractTest;\n \n /**\n- * @version $Revision: 1.7 $ $Date: 2004/01/02 07:05:36 $\n+ * @version $Revision: 1.8 $ $Date: 2004/02/19 05:39:47 $\n  * @author Rodney Waldhoff\n  * @author Gary Gregory\n  */\n--- a/src/test/org/apache/commons/codec/net/URLCodecTest.java\n+++ b/src/test/org/apache/commons/codec/net/URLCodecTest.java\n \n package org.apache.commons.codec.net;\n \n+import junit.framework.TestCase;\n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n-\n-import junit.framework.TestCase;\n \n /**\n  * URL codec test cases", "timestamp": 1077169259, "metainfo": ""}