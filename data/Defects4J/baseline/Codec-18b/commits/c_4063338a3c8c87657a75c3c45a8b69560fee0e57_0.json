{"sha": "4063338a3c8c87657a75c3c45a8b69560fee0e57", "log": "Sort test methods.  ", "commit": "\n--- a/src/test/java/org/apache/commons/codec/binary/HexTest.java\n+++ b/src/test/java/org/apache/commons/codec/binary/HexTest.java\n     }\n \n     @Test\n+    public void testDecodeByteArrayObjectEmpty() throws DecoderException {\n+        assertTrue(Arrays.equals(new byte[0], (byte[]) new Hex().decode((Object) new byte[0])));\n+    }\n+\n+    @Test\n+    public void testDecodeByteArrayOddCharacters() {\n+        try {\n+            new Hex().decode(new byte[] { 65 });\n+            fail(\"An exception wasn't thrown when trying to decode an odd number of characters\");\n+        } catch (final DecoderException e) {\n+            // Expected exception\n+        }\n+    }\n+\n+    @Test\n     public void testDecodeByteBufferEmpty() throws DecoderException {\n         assertTrue(Arrays.equals(new byte[0], new Hex().decode(ByteBuffer.allocate(0))));\n     }\n \n     @Test\n-    public void testDecodeCharArrayEmpty() throws DecoderException {\n-        assertTrue(Arrays.equals(new byte[0], Hex.decodeHex(new char[0])));\n-    }\n-\n-    @Test\n-    public void testDecodeByteArrayOddCharacters() {\n-        try {\n-            new Hex().decode(new byte[] { 65 });\n-            fail(\"An exception wasn't thrown when trying to decode an odd number of characters\");\n-        } catch (final DecoderException e) {\n-            // Expected exception\n-        }\n+    public void testDecodeByteBufferObjectEmpty() throws DecoderException {\n+        assertTrue(Arrays.equals(new byte[0], (byte[]) new Hex().decode((Object) ByteBuffer.allocate(0))));\n     }\n \n     @Test\n     }\n \n     @Test\n+    public void testDecodeCharArrayEmpty() throws DecoderException {\n+        assertTrue(Arrays.equals(new byte[0], Hex.decodeHex(new char[0])));\n+    }\n+\n+    @Test\n     public void testDecodeClassCastException() {\n         try {\n             new Hex().decode(new int[] { 65 });\n     }\n \n     @Test\n-    public void testDecodeByteArrayObjectEmpty() throws DecoderException {\n-        assertTrue(Arrays.equals(new byte[0], (byte[]) new Hex().decode((Object) new byte[0])));\n-    }\n-\n-    @Test\n-    public void testDecodeByteBufferObjectEmpty() throws DecoderException {\n-        assertTrue(Arrays.equals(new byte[0], (byte[]) new Hex().decode((Object) ByteBuffer.allocate(0))));\n+    public void testEncodeByteArrayEmpty() throws EncoderException {\n+        assertTrue(Arrays.equals(new byte[0], new Hex().encode(new byte[0])));\n+    }\n+\n+    @Test\n+    public void testEncodeByteArrayObjectEmpty() throws EncoderException {\n+        assertTrue(Arrays.equals(new char[0], (char[]) new Hex().encode((Object) new byte[0])));\n+    }\n+\n+    @Test\n+    public void testEncodeByteBufferEmpty() throws EncoderException {\n+        assertTrue(Arrays.equals(new byte[0], new Hex().encode(ByteBuffer.allocate(0))));\n+    }\n+\n+    @Test\n+    public void testEncodeByteBufferObjectEmpty() throws EncoderException {\n+        assertTrue(Arrays.equals(new char[0], (char[]) new Hex().encode((Object) ByteBuffer.allocate(0))));\n     }\n \n     @Test\n     public void testEncodeHexByteArrayEmpty() throws EncoderException {\n         assertTrue(Arrays.equals(new char[0], Hex.encodeHex(new byte[0])));\n         assertTrue(Arrays.equals(new byte[0], new Hex().encode(new byte[0])));\n-    }\n-\n-    @Test\n-    public void testEncodeHexByteBufferEmpty() throws EncoderException {\n-        assertTrue(Arrays.equals(new char[0], Hex.encodeHex(ByteBuffer.allocate(0))));\n-        assertTrue(Arrays.equals(new byte[0], new Hex().encode(ByteBuffer.allocate(0))));\n     }\n \n     @Test\n     }\n \n     @Test\n+    public void testEncodeHexByteArrayHelloWorldUpperCaseHex() {\n+        final byte[] b = StringUtils.getBytesUtf8(\"Hello World\");\n+        final String expected = \"48656C6C6F20576F726C64\";\n+        char[] actual;\n+        actual = Hex.encodeHex(b);\n+        assertFalse(expected.equals(new String(actual)));\n+        actual = Hex.encodeHex(b, true);\n+        assertFalse(expected.equals(new String(actual)));\n+        actual = Hex.encodeHex(b, false);\n+        assertTrue(expected.equals(new String(actual)));\n+    }\n+\n+    @Test\n+    public void testEncodeHexByteArrayZeroes() {\n+        final char[] c = Hex.encodeHex(new byte[36]);\n+        assertEquals(\"000000000000000000000000000000000000000000000000000000000000000000000000\", new String(c));\n+    }\n+\n+    @Test\n+    public void testEncodeHexByteBufferEmpty() throws EncoderException {\n+        assertTrue(Arrays.equals(new char[0], Hex.encodeHex(ByteBuffer.allocate(0))));\n+        assertTrue(Arrays.equals(new byte[0], new Hex().encode(ByteBuffer.allocate(0))));\n+    }\n+\n+    @Test\n     public void testEncodeHexByteBufferHelloWorldLowerCaseHex() {\n         final ByteBuffer b = StringUtils.getByteBufferUtf8(\"Hello World\");\n         final String expected = \"48656c6c6f20576f726c64\";\n     }\n \n     @Test\n-    public void testEncodeHexByteArrayHelloWorldUpperCaseHex() {\n-        final byte[] b = StringUtils.getBytesUtf8(\"Hello World\");\n-        final String expected = \"48656C6C6F20576F726C64\";\n-        char[] actual;\n-        actual = Hex.encodeHex(b);\n-        assertFalse(expected.equals(new String(actual)));\n-        actual = Hex.encodeHex(b, true);\n-        assertFalse(expected.equals(new String(actual)));\n-        actual = Hex.encodeHex(b, false);\n-        assertTrue(expected.equals(new String(actual)));\n-    }\n-\n-    @Test\n     public void testEncodeHexByteBufferHelloWorldUpperCaseHex() {\n         final ByteBuffer b = StringUtils.getByteBufferUtf8(\"Hello World\");\n         final String expected = \"48656C6C6F20576F726C64\";\n     }\n \n     @Test\n-    public void testEncodeHexByteArrayZeroes() {\n-        final char[] c = Hex.encodeHex(new byte[36]);\n-        assertEquals(\"000000000000000000000000000000000000000000000000000000000000000000000000\", new String(c));\n-    }\n-\n-    @Test\n     public void testEncodeHexByteBufferZeroes() {\n         final char[] c = Hex.encodeHex(ByteBuffer.allocate(36));\n         assertEquals(\"000000000000000000000000000000000000000000000000000000000000000000000000\", new String(c));\n     @Test\n     public void testGetCharsetName() throws UnsupportedEncodingException, DecoderException {\n         Assert.assertEquals(Charsets.UTF_8.name(), new Hex(Charsets.UTF_8).getCharsetName());\n-    }\n-\n-    @Test\n-    public void testEncodeByteArrayEmpty() throws EncoderException {\n-        assertTrue(Arrays.equals(new byte[0], new Hex().encode(new byte[0])));\n-    }\n-\n-    @Test\n-    public void testEncodeByteArrayObjectEmpty() throws EncoderException {\n-        assertTrue(Arrays.equals(new char[0], (char[]) new Hex().encode((Object) new byte[0])));\n-    }\n-\n-    @Test\n-    public void testEncodeByteBufferEmpty() throws EncoderException {\n-        assertTrue(Arrays.equals(new byte[0], new Hex().encode(ByteBuffer.allocate(0))));\n-    }\n-\n-    @Test\n-    public void testEncodeByteBufferObjectEmpty() throws EncoderException {\n-        assertTrue(Arrays.equals(new char[0], (char[]) new Hex().encode((Object) ByteBuffer.allocate(0))));\n     }\n \n     @Test", "timestamp": 1415633357, "metainfo": ""}