{"sha": "8939061a3c0218dd3fd27f96f3e60e48f74622c6", "log": "Simplify - always require key when creating the instance  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/digest/HmacUtils.java\n+++ b/src/main/java/org/apache/commons/codec/digest/HmacUtils.java\n  * <p>\n  * Sample usage:\n  * <pre>\n+ * import static HmacAlgorithms.*;\n  * byte[] key = {1,2,3,4}; // don't use this!\n  * String valueToDigest = \"The quick brown fox jumps over the lazy dog\";\n- * byte[] hmac = HmacUtils.use(HmacAlgorithms.HMAC_SHA_224).key(key).update(valueToDigest).doFinal();\n+ * byte[] hmac = HmacUtils.use(HMAC_SHA_224, key).update(valueToDigest).doFinal();\n  * // Mac re-use\n- * HmacUtils hm1 = HmacUtils.use(HmacAlgorithms.HMAC_SHA_1).key(key);\n+ * HmacUtils hm1 = HmacUtils.use(\"HmacAlgoName\", key); // use a valid name here!\n  * String hexPom = hm1.update(new File(\"pom.xml\")).doFinalHex();\n  * String hexNot = hm1.update(new File(\"NOTICE.txt\")).doFinalHex();\n- * // Mac key update\n- * String algo = \"HmacNew\";\n- * HmacUtils hm2 = HmacUtils.use(algo).key(key);\n- * byte[] key2 = {1,2,3,4,5}; // don't use this either!\n- * String hexPom2 = hm2.update(new File(\"pom.xml\")).doFinalHex();\n- * String hexNot2 = hm2.key(key2).update(new File(\"NOTICE.txt\")).doFinalHex();\n  * </pre>\n  * @since 1.10\n  * @version $Id$\n         return mac;\n     }\n \n-    // public to maintain binary compatibility\n+    /**\n+     * Preserves binary compatibity only.\n+     * As for previous versions does not provide useful behaviour\n+     * @deprecated since 1.11; only useful to preserve binary compatibility\n+     */\n+    @Deprecated\n     public HmacUtils() {\n         this(null);\n     }\n         this.mac = mac;\n     }\n \n-\n-    /**\n-     * Creates an instance using the provided {@link Mac}\n-     * If necessary, the\n-     * key must be provided using the {@link #key(byte[])} method\n-     * before it can be used further.\n-     *\n-     * @param mac the {@link Mac} to be used.\n+    private HmacUtils(final String algorithm, final byte[] key) {\n+        this(getInitializedMac(algorithm, key));\n+    }\n+\n+\n+    /**\n+     * Creates an instance using the provided algorithm type.\n+     *\n+     * @param algorithm to be used\n+     * @param  key the key to be used\n      * @return the instance\n+     * @throws IllegalArgumentException\n+     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n      * @since 1.11\n      */\n-    public static HmacUtils use(final Mac mac) {\n-        return new HmacUtils(mac);\n+    public static HmacUtils use(final String algorithm, final byte[] key) {\n+        return new HmacUtils(algorithm, key);\n     }\n \n     /**\n      * Creates an instance using the provided algorithm type.\n-     * The key must be provided using the {@link #key(byte[])} method\n-     * before it can be used further.\n      *\n      * @param algorithm to be used.\n      * @return the instance\n+     * @throws IllegalArgumentException\n+     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.\n      * @since 1.11\n      */\n-    public static HmacUtils use(final String algorithm) {\n-        try {\n-            return new HmacUtils(Mac.getInstance(algorithm));\n-        } catch (NoSuchAlgorithmException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n-    }\n-\n-    /**\n-     * Creates an instance using the provided algorithm type.\n-     * The key must be provided using the {@link #key(byte[])} method\n-     * before it can be used further.\n-     *\n-     * @param algorithm to be used.\n-     * @return the instance\n-     * @since 1.11\n-     */\n-    public static HmacUtils use(final HmacAlgorithms algorithm) {\n-        return use(algorithm.getName());\n-    }\n-\n-    /**\n-     * Updates the stored {@link Mac} with the new key.\n-     * This resets the Mac ready for re-use.\n-     *\n-     * @param key the new key\n-     * @return this instance\n-     * @since 1.11\n-     */\n-    public HmacUtils key(byte[] key) {\n-        final SecretKeySpec keySpec = new SecretKeySpec(key, mac.getAlgorithm());\n-        try {\n-            mac.init(keySpec);\n-        } catch (InvalidKeyException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n-        return this;\n+    public static HmacUtils use(final HmacAlgorithms algorithm, final byte[] key) {\n+        return use(algorithm.getName(), key);\n     }\n \n     /**\n     /**\n      * Finishes the MAC operation and returns the result.\n      * The Mac can be re-used to produce further results from the same key.\n-     * Or the key can be reset and the Mac reused.\n      *\n      * @return the result as a byte array\n      * @since 1.11\n     /**\n      * Finishes the MAC operation and returns the result.\n      * The Mac can be re-used to produce further results from the same key.\n-     * Or the key can be reset and the Mac reused.\n      *\n      * @return the result as a Hex String\n      * @since 1.11", "timestamp": 1463926546, "metainfo": ""}