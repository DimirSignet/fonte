{"sha": "279577d8501737836ad0241a63755576f6dbc432", "log": "Javadoc.  ", "commit": "\n--- a/src/java/org/apache/commons/codec/DecoderException.java\n+++ b/src/java/org/apache/commons/codec/DecoderException.java\n package org.apache.commons.codec;\n \n /**\n- * Thrown when a Decoder has encountered a failure condition during a decode.\n+ * Thrown when there is a failure condition during the decoding process. This exception is thrown when a {@link Decoder}\n+ * encounters a decoding specific exception such as invalid data, or characters outside of the expected range.\n  * \n  * @author Apache Software Foundation\n  * @version $Id$\n--- a/src/java/org/apache/commons/codec/EncoderException.java\n+++ b/src/java/org/apache/commons/codec/EncoderException.java\n package org.apache.commons.codec;\n \n /**\n- * Thrown when there is a failure condition during the encoding process. This exception is thrown when an Encoder\n- * encounters a encoding specific exception such as invalid data, inability to calculate a checksum, characters outside\n- * of the expected range.\n+ * Thrown when there is a failure condition during the encoding process. This exception is thrown when an\n+ * {@link Encoder} encounters a encoding specific exception such as invalid data, inability to calculate a checksum,\n+ * characters outside of the expected range.\n  * \n  * @author Apache Software Foundation\n  * @version $Id$\n--- a/src/java/org/apache/commons/codec/StringDecoder.java\n+++ b/src/java/org/apache/commons/codec/StringDecoder.java\n package org.apache.commons.codec;\n \n /**\n- * Decodes a String into a String. \n+ * Defines common decoding methods for String decoders.\n  *\n  * @author Apache Software Foundation\n  * @version $Id$\n--- a/src/java/org/apache/commons/codec/StringEncoder.java\n+++ b/src/java/org/apache/commons/codec/StringEncoder.java\n package org.apache.commons.codec;\n \n /**\n- * Encodes a String into a String. \n+ * Defines common encoding methods for String encoders.\n  *\n  * @author Apache Software Foundation\n  * @version $Id$\n--- a/src/java/org/apache/commons/codec/StringEncoderComparator.java\n+++ b/src/java/org/apache/commons/codec/StringEncoderComparator.java\n import java.util.Comparator;\n \n /**\n- * Strings are comparable, and this comparator allows \n- * you to configure it with an instance of a class\n- * which implements StringEncoder.  This comparator\n- * is used to sort Strings by an encoding scheme such\n- * as Soundex, Metaphone, etc.  This class can come in\n- * handy if one need to sort Strings by an encoded\n- * form of a name such as Soundex.\n- *\n+ * Compares Strings using a {@link StringEncoder}. This comparator is used to sort Strings by an encoding scheme such as\n+ * Soundex, Metaphone, etc. This class can come in handy if one need to sort Strings by an encoded form of a name such\n+ * as Soundex.\n+ * \n  * @author Apache Software Foundation\n  * @version $Id$\n  */\n \n     /**\n      * Constructs a new instance with the given algorithm.\n-     * @param stringEncoder the StringEncoder used for comparisons.\n+     * \n+     * @param stringEncoder\n+     *            the StringEncoder used for comparisons.\n      */\n     public StringEncoderComparator(StringEncoder stringEncoder) {\n         this.stringEncoder = stringEncoder;\n     }\n \n     /**\n-     * Compares two strings based not on the strings \n-     * themselves, but on an encoding of the two \n-     * strings using the StringEncoder this Comparator\n-     * was created with.\n+     * Compares two strings based not on the strings themselves, but on an encoding of the two strings using the\n+     * StringEncoder this Comparator was created with.\n      * \n      * If an {@link EncoderException} is encountered, return <code>0</code>.\n      * \n-     * @param o1 the object to compare\n-     * @param o2 the object to compare to\n+     * @param o1\n+     *            the object to compare\n+     * @param o2\n+     *            the object to compare to\n      * @return the Comparable.compareTo() return code or 0 if an encoding error was caught.\n      * @see Comparable\n      */\n             Comparable s1 = (Comparable) this.stringEncoder.encode(o1);\n             Comparable s2 = (Comparable) this.stringEncoder.encode(o2);\n             compareCode = s1.compareTo(s2);\n-        } \n-        catch (EncoderException ee) {\n+        } catch (EncoderException ee) {\n             compareCode = 0;\n         }\n         return compareCode;\n--- a/src/java/org/apache/commons/codec/binary/BaseNCodec.java\n+++ b/src/java/org/apache/commons/codec/binary/BaseNCodec.java\n import org.apache.commons.codec.EncoderException;\n \n /**\n- * Implements common Base-N codec functions.\n+ * Abstract superclass for Base-N encoders and decoders.\n  *\n  * <p>\n  * This class is not thread-safe.\n--- a/src/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java\n+++ b/src/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java\n import java.io.InputStream;\n \n /**\n- * Common base class for Base-N input streams.\n+ * Abstract superclass for Base-N input streams.\n  * \n  * @since 1.5\n  */\n--- a/src/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java\n+++ b/src/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java\n import java.io.OutputStream;\n \n /**\n- * Common base class for Base-N output streams.\n+ * Abstract superclass for Base-N output streams.\n  * \n  * @since 1.5\n  */\n--- a/src/java/org/apache/commons/codec/binary/BinaryCodec.java\n+++ b/src/java/org/apache/commons/codec/binary/BinaryCodec.java\n import org.apache.commons.codec.EncoderException;\n \n /**\n- * Translates between byte arrays and strings of \"0\"s and \"1\"s.\n+ * Converts between byte arrays and strings of \"0\"s and \"1\"s.\n  * \n  * TODO: may want to add more bit vector functions like and/or/xor/nand \n- * TODO: also might be good to generate boolean[] from byte[] et. cetera.\n+ * TODO: also might be good to generate boolean[] from byte[] et cetera.\n  * \n  * @author Apache Software Foundation\n  * @since 1.3\n--- a/src/java/org/apache/commons/codec/binary/Hex.java\n+++ b/src/java/org/apache/commons/codec/binary/Hex.java\n import org.apache.commons.codec.EncoderException;\n \n /**\n- * Hex encoder and decoder. The charset used for certain operation can be set, the default is set in\n+ * Converts hexadecimal Strings. The charset used for certain operation can be set, the default is set in\n  * {@link #DEFAULT_CHARSET_NAME}\n  * \n  * @since 1.1\n--- a/src/java/org/apache/commons/codec/language/ColognePhonetic.java\n+++ b/src/java/org/apache/commons/codec/language/ColognePhonetic.java\n \n /**\n  * <p>\n- * Implements of the <a href=\"http://de.wikipedia.org/wiki/K%C3%B6lner_Phonetik\">\u201cK\u00f6lner Phonetic\u201d</a> (Cologne\n- * phonetic) algorithm issued by Hans Joachim Postel in 1969.\n+ * Encodes a string into a Cologne Phonetic value.\n+ * </p>\n+ * <p>\n+ * Implements the <a href=\"http://de.wikipedia.org/wiki/K%C3%B6lner_Phonetik\">\u201cK\u00f6lner Phonetic\u201d</a> (Cologne Phonetic)\n+ * algorithm issued by Hans Joachim Postel in 1969.\n  * </p>\n  * \n  * <p>", "timestamp": 1299865947, "metainfo": ""}