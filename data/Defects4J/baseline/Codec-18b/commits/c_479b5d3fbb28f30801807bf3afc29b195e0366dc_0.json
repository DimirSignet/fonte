{"sha": "479b5d3fbb28f30801807bf3afc29b195e0366dc", "log": "Better names: languageArg -> languageSet  ", "commit": "\n--- a/src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java\n+++ b/src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java\n      * @return the encoding of the input\n      */\n     public String encode(String input) {\n-        Set<String> languageArg = this.lang.guessLanguages(input);\n-        return phoneticUtf8(input, languageArg);\n+        Set<String> languageSet = this.lang.guessLanguages(input);\n+        return phoneticUtf8(input, languageSet);\n     }\n \n     /**\n      * \n      * @param input\n      *            String to phoneticise; a String with dashes or spaces separating each word\n-     * @param languageArg\n+     * @param languageSet\n      * @return a phonetic representation of the input; a String containing '-'-separated phonetic representations of the input\n      */\n-    public String phoneticUtf8(String input, final Set<String> languageArg) {\n-        List<Rule> rules = Rule.instance(this.nameType, RuleType.RULES, languageArg);\n+    public String phoneticUtf8(String input, final Set<String> languageSet) {\n+        List<Rule> rules = Rule.instance(this.nameType, RuleType.RULES, languageSet);\n         List<Rule> finalRules1 = Rule.instance(this.nameType, this.ruleType, \"common\");\n-        List<Rule> finalRules2 = Rule.instance(this.nameType, this.ruleType, languageArg);\n+        List<Rule> finalRules2 = Rule.instance(this.nameType, this.ruleType, languageSet);\n \n         // tidy the input\n         // lower case is a locale-dependent operation\n \n         // loop over each char in the input - we will handle the increment manually\n         for (int i = 0; i < input.length();) {\n-            RulesApplication rulesApplication = new RulesApplication(rules, languageArg, input, phonetic, i).invoke();\n+            RulesApplication rulesApplication = new RulesApplication(rules, languageSet, input, phonetic, i).invoke();\n             i = rulesApplication.getI();\n             phonetic = rulesApplication.getPhonetic();\n         }\n \n-        phonetic = applyFinalRules(phonetic, finalRules1, languageArg, false);\n-        phonetic = applyFinalRules(phonetic, finalRules2, languageArg, true);\n+        phonetic = applyFinalRules(phonetic, finalRules1, languageSet, false);\n+        phonetic = applyFinalRules(phonetic, finalRules2, languageSet, true);\n \n         return phonetic;\n     }", "timestamp": 1311735425, "metainfo": ""}