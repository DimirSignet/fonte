{"sha": "83af056059bd781b6104caba38558cc4b5257220", "log": "Remove comments after re-ordering, re-order static fields.  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java\n+++ b/src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java\n         }\n     }\n \n-    // static identifiers used during parsing of the rule file\n-\n     /**\n      * Inner class for storing rules.\n      */\n \n     private static final String COMMENT = \"//\";\n     private static final String DOUBLE_QUOTE = \"\\\"\";\n+\n+    private static final String MULTILINE_COMMENT_END = \"*/\";\n+\n+    private static final String MULTILINE_COMMENT_START = \"/*\";\n+\n+    /** The resource file containing the replacement and folding rules */\n+    private static final String RESOURCE_FILE = \"org/apache/commons/codec/language/dmrules.txt\";\n+\n+    /** The code length of a DM soundex value. */\n+    private static final int MAX_LENGTH = 6;\n+\n+    /** Transformation rules indexed by the first character of their pattern. */\n+    private static final Map<Character, List<Rule>> RULES = new HashMap<Character, List<Rule>>();\n+\n     /** Folding rules. */\n     private static final Map<Character, Character> FOLDINGS = new HashMap<Character, Character>();\n-\n-    /** The code length of a DM soundex value. */\n-    private static final int MAX_LENGTH = 6;\n-    private static final String MULTILINE_COMMENT_END = \"*/\";\n-\n-    private static final String MULTILINE_COMMENT_START = \"/*\";\n-\n-    /** The resource file containing the replacement and folding rules */\n-    private static final String RESOURCE_FILE = \"org/apache/commons/codec/language/dmrules.txt\";\n-\n-    /** Transformation rules indexed by the first character of their pattern. */\n-    private static final Map<Character, List<Rule>> RULES = new HashMap<Character, List<Rule>>();\n \n     static {\n         final InputStream rulesIS = DaitchMokotoffSoundex.class.getClassLoader().getResourceAsStream(RESOURCE_FILE);\n         return sb.toString();\n     }\n \n-    // -- BEGIN STATIC METHODS --//\n-\n     /**\n      * Encodes an Object using the Daitch-Mokotoff soundex algorithm without branching.\n      * <p>\n         }\n         return soundex(source, false)[0];\n     }\n-\n-    // -- BEGIN INNER CLASSES --//\n \n     /**\n      * Encodes a String using the Daitch-Mokotoff soundex algorithm with branching.", "timestamp": 1415086344, "metainfo": ""}