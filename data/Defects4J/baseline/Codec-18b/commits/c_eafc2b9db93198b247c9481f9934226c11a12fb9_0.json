{"sha": "eafc2b9db93198b247c9481f9934226c11a12fb9", "log": "[CODEC-125] Implement a Beider-Morse phonetic matching codec. Applied patch https://issues.apache.org/jira/secure/attachment/12489767/comparator.patch  ", "commit": "\n--- a/src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java\n+++ b/src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java\n             return phonemeBuilder;\n         }\n \n-        Set<Rule.Phoneme> phonemes = new TreeSet<Rule.Phoneme>();\n+        Set<Rule.Phoneme> phonemes = new TreeSet<Rule.Phoneme>(Rule.Phoneme.COMPARATOR);\n \n         for (Rule.Phoneme phoneme : phonemeBuilder.getPhonemes()) {\n             PhonemeBuilder subBuilder = PhonemeBuilder.empty(phoneme.getLanguages());\n--- a/src/java/org/apache/commons/codec/language/bm/Rule.java\n+++ b/src/java/org/apache/commons/codec/language/bm/Rule.java\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n+import java.util.Comparator;\n import java.util.EnumMap;\n import java.util.HashMap;\n import java.util.HashSet;\n  */\n public class Rule {\n \n-    public static final class Phoneme implements PhonemeExpr, Comparable<Phoneme> {\n+    public static final class Phoneme implements PhonemeExpr {\n+        public static final Comparator<Phoneme> COMPARATOR = new Comparator<Phoneme>() {\n+            public int compare(Phoneme o1, Phoneme o2) {\n+                for (int i = 0; i < o1.phonemeText.length(); i++) {\n+                    if (i >= o2.phonemeText.length()) {\n+                        return +1;\n+                    }\n+                    int c = o1.phonemeText.charAt(i) - o2.phonemeText.charAt(i);\n+                    if (c != 0) {\n+                        return c;\n+                    }\n+                }\n+\n+                if (o1.phonemeText.length() < o2.phonemeText.length()) {\n+                    return -1;\n+                }\n+\n+                return 0;\n+            }\n+        };\n \n         private final CharSequence phonemeText;\n         private final Languages.LanguageSet languages;\n \n         public Phoneme append(CharSequence str) {\n             return new Phoneme(this.phonemeText.toString() + str.toString(), this.languages);\n-        }\n-\n-        public int compareTo(Phoneme o) {\n-            for (int i = 0; i < phonemeText.length(); i++) {\n-                if (i >= o.phonemeText.length()) {\n-                    return +1;\n-                }\n-                int c = phonemeText.charAt(i) - o.phonemeText.charAt(i);\n-                if (c != 0) {\n-                    return c;\n-                }\n-            }\n-\n-            if (phonemeText.length() < o.phonemeText.length()) {\n-                return -1;\n-            }\n-\n-            return 0;\n         }\n \n         public Languages.LanguageSet getLanguages() {\n--- a/src/test/org/apache/commons/codec/language/bm/RuleTest.java\n+++ b/src/test/org/apache/commons/codec/language/bm/RuleTest.java\n         for (Rule.Phoneme[] phs : makePhonemes()) {\n             for (int i = 0; i < phs.length; i++) {\n                 for (int j = i + 1; j < phs.length; j++) {\n-                    int c = phs[i].compareTo(phs[j]);\n+                    int c = Rule.Phoneme.COMPARATOR.compare(phs[i], phs[j]);\n \n                     assertThat(\"Comparing \" + phs[i].getPhonemeText() + \" to \" + phs[j].getPhonemeText() + \" should be negative\", c,\n                             new NegativeIntegerBaseMatcher());\n     public void phonemeComparedToSelfIsZero() {\n         for (Rule.Phoneme[] phs : makePhonemes()) {\n             for (Rule.Phoneme ph : phs) {\n-                assertEquals(\"Phoneme compared to itself should be zero: \" + ph.getPhonemeText(), 0, ph.compareTo(ph));\n+                assertEquals(\"Phoneme compared to itself should be zero: \" + ph.getPhonemeText(), 0,\n+                        Rule.Phoneme.COMPARATOR.compare(ph, ph));\n             }\n         }\n     }", "timestamp": 1312852569, "metainfo": ""}