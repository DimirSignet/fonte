{"sha": "403a784b81c5fb845aef1b34aefd56d0d3056964", "log": "[CODEC-132] Make phoneme order deterministic by using a LinkedHashSet, detected as part of the test case in lucene.  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java\n import java.util.EnumMap;\n import java.util.HashSet;\n import java.util.Iterator;\n+import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n          * Creates a new phoneme builder containing all phonemes in this one extended by <code>str</code>.\n          *\n          * @param str   the characters to append to the phonemes\n-         * @return  a new phoneme builder lenghened by <code>str</code>\n+         * @return  a new phoneme builder lenghtened by <code>str</code>\n          */\n         public PhonemeBuilder append(CharSequence str) {\n-            Set<Rule.Phoneme> newPhonemes = new HashSet<Rule.Phoneme>();\n+            Set<Rule.Phoneme> newPhonemes = new LinkedHashSet<Rule.Phoneme>();\n \n             for (Rule.Phoneme ph : this.phonemes) {\n                 newPhonemes.add(ph.append(str));\n          *      in turn\n          */\n         public PhonemeBuilder apply(Rule.PhonemeExpr phonemeExpr, int maxPhonemes) {\n-            Set<Rule.Phoneme> newPhonemes = new HashSet<Rule.Phoneme>();\n+            Set<Rule.Phoneme> newPhonemes = new LinkedHashSet<Rule.Phoneme>();\n \n             EXPR: for (Rule.Phoneme left : this.phonemes) {\n                 for (Rule.Phoneme right : phonemeExpr.getPhonemes()) {", "timestamp": 1332094429, "metainfo": ""}