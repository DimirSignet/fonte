{"sha": "ec225adf2f6ce3ad2681d06ab0aeb83ec1a00f9b", "log": "The StringEncoderComparator used to call o1.toString(), and o2.toString() on the parameters supplied to the compare method.  There is no need to require that only Strings are passed to the StringEncoderComparator - (actually there is no reason why we couldn't have a generic Encoder comparator.  This patch is the first step towards a more generic object, and it allows us to test the exception condition in this compare() method.   ", "commit": "\n--- a/src/java/org/apache/commons/codec/StringEncoderComparator.java\n+++ b/src/java/org/apache/commons/codec/StringEncoderComparator.java\n  *\n  * @author Tim O'Brien\n  * @author Gary Gregory\n- * @version $Id: StringEncoderComparator.java,v 1.6 2003/10/05 21:45:48 tobrien Exp $\n+ * @version $Id: StringEncoderComparator.java,v 1.7 2003/10/12 01:34:06 tobrien Exp $\n  */\n public class StringEncoderComparator implements Comparator {\n \n         int compareCode = 0;\n \n         try {\n-            String s1 = stringEncoder.encode(o1.toString());\n-            String s2 = stringEncoder.encode(o2.toString());\n+            Comparable s1 = (Comparable) ((Encoder) stringEncoder).encode(o1);\n+            Comparable s2 = (Comparable) ((Encoder) stringEncoder).encode(o2);\n             compareCode = s1.compareTo(s2);\n         } \n         catch (EncoderException ee) {", "timestamp": 1065922446, "metainfo": ""}