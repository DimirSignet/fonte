{"sha": "f0299220ba7dc33b1865068db0c184147283a9e4", "log": "Rename to agree with class being tested  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.codec.digest;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Assume;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+/**\n+ * Tests {@link MessageDigestAlgorithms}.\n+ *\n+ * @since 1.11\n+ */\n+@RunWith(Parameterized.class)\n+public class MessageDigestAlgorithmsTest {\n+\n+    @Parameters(name = \"{0}\")\n+    public static Object[] data() {\n+        return MessageDigestAlgorithms.values();\n+    }\n+\n+    private DigestUtilsTest digestUtilsTest;\n+\n+    private final String messageDigestAlgorithm;\n+\n+    public MessageDigestAlgorithmsTest(String messageDigestAlgorithm) {\n+        this.messageDigestAlgorithm = messageDigestAlgorithm;\n+    }\n+\n+    private byte[] digestTestData() throws IOException {\n+        return DigestUtils.digest(DigestUtils.getDigest(messageDigestAlgorithm),getTestData());\n+    }\n+\n+    private byte[] getTestData() {\n+        return digestUtilsTest.getTestData();\n+    }\n+\n+    private File getTestFile() {\n+        return digestUtilsTest.getTestFile();\n+    }\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        digestUtilsTest = new DigestUtilsTest();\n+        digestUtilsTest.setUp();\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        digestUtilsTest.tearDown();\n+        digestUtilsTest = null;\n+    }\n+\n+    @Test\n+    public void testAlgorithm() throws IOException, NoSuchAlgorithmException {\n+        final String algorithm = messageDigestAlgorithm;\n+        Assert.assertNotNull(algorithm);\n+        Assert.assertFalse(algorithm.isEmpty());\n+        Assume.assumeTrue(DigestUtils.isAvailable(messageDigestAlgorithm));\n+        MessageDigest.getInstance(algorithm);\n+    }\n+\n+    @Test\n+    public void testDigestByteArray() throws IOException {\n+        Assume.assumeTrue(DigestUtils.isAvailable(messageDigestAlgorithm));\n+        Assert.assertArrayEquals(digestTestData(),\n+                DigestUtils.digest(DigestUtils.getDigest(messageDigestAlgorithm), getTestData()));\n+        Assert.assertArrayEquals(digestTestData(), DigestUtils.digest(DigestUtils.getDigest(messageDigestAlgorithm),getTestData()));\n+    }\n+\n+    @Test\n+    public void testDigestByteBuffer() throws IOException {\n+        Assume.assumeTrue(DigestUtils.isAvailable(messageDigestAlgorithm));\n+        Assert.assertArrayEquals(digestTestData(),\n+                DigestUtils.digest(DigestUtils.getDigest(messageDigestAlgorithm), ByteBuffer.wrap(getTestData())));\n+        Assert.assertArrayEquals(digestTestData(), DigestUtils.digest(DigestUtils.getDigest(messageDigestAlgorithm),ByteBuffer.wrap(getTestData())));\n+    }\n+\n+    @Test\n+    public void testDigestFile() throws IOException {\n+        Assume.assumeTrue(DigestUtils.isAvailable(messageDigestAlgorithm));\n+        Assert.assertArrayEquals(digestTestData(),\n+                DigestUtils.digest(DigestUtils.getDigest(messageDigestAlgorithm), getTestFile()));\n+        Assert.assertArrayEquals(digestTestData(), DigestUtils.digest(DigestUtils.getDigest(messageDigestAlgorithm),getTestFile()));\n+    }\n+\n+    @Test\n+    public void testDigestInputStream() throws IOException {\n+        Assume.assumeTrue(DigestUtils.isAvailable(messageDigestAlgorithm));\n+        Assert.assertArrayEquals(digestTestData(),\n+                DigestUtils.digest(DigestUtils.getDigest(messageDigestAlgorithm), new ByteArrayInputStream(getTestData())));\n+        Assert.assertArrayEquals(digestTestData(), DigestUtils.digest(DigestUtils.getDigest(messageDigestAlgorithm),new ByteArrayInputStream(getTestData())));\n+    }\n+\n+    @Test\n+    public void testGetMessageDigest() throws IOException, NoSuchAlgorithmException {\n+        Assume.assumeTrue(DigestUtils.isAvailable(messageDigestAlgorithm));\n+        final MessageDigest messageDigest = DigestUtils.getDigest(messageDigestAlgorithm);\n+        Assert.assertEquals(messageDigestAlgorithm, messageDigest.getAlgorithm());\n+    }\n+\n+}", "timestamp": 1463568201, "metainfo": ""}