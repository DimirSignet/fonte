{"sha": "91a01c9c6c0078bbc055a1e05b705edcbefb247f", "log": "Refactor common logic between URLCodec and QuotedPrintableCodec. Code coverage 100%/100% for both classes.  ", "commit": "\n--- a/src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java\n+++ b/src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java\n             int b = bytes[i];\n             if (b == ESCAPE_CHAR) {\n                 try {\n-                    int u = Character.digit((char) bytes[++i], 16);\n-                    int l = Character.digit((char) bytes[++i], 16);\n-                    if (u == -1 || l == -1) {\n-                        throw new DecoderException(\"Invalid quoted-printable encoding\");\n-                    }\n+                    int u = Utils.digit16(bytes[++i]);\n+                    int l = Utils.digit16(bytes[++i]);\n                     buffer.write((char) ((u << 4) + l));\n                 } catch (ArrayIndexOutOfBoundsException e) {\n-                    throw new DecoderException(\"Invalid quoted-printable encoding\");\n+                    throw new DecoderException(\"Invalid quoted-printable encoding\", e);\n                 }\n             } else {\n                 buffer.write(b);\n--- a/src/java/org/apache/commons/codec/net/URLCodec.java\n+++ b/src/java/org/apache/commons/codec/net/URLCodec.java\n     /**\n      * Radix used in encoding and decoding.\n      */\n-    private static final int RADIX = 16;\n+    static final int RADIX = 16;\n     \n     /**\n      * The default charset used for string decoding and encoding. Consider this field final. The next major release may\n     }\n \n     /**\n-     * Encodes an array of bytes into an array of URL safe 7-bit \n-     * characters. Unsafe characters are escaped.\n-     *\n-     * @param urlsafe bitset of characters deemed URL safe\n-     * @param bytes array of bytes to convert to URL safe characters\n+     * Encodes an array of bytes into an array of URL safe 7-bit characters. Unsafe characters are escaped.\n+     * \n+     * @param urlsafe\n+     *            bitset of characters deemed URL safe\n+     * @param bytes\n+     *            array of bytes to convert to URL safe characters\n      * @return array of bytes containing URL safe characters\n      */\n-    public static final byte[] encodeUrl(BitSet urlsafe, byte[] bytes) \n-    {\n+    public static final byte[] encodeUrl(BitSet urlsafe, byte[] bytes) {\n         if (bytes == null) {\n             return null;\n         }\n         if (urlsafe == null) {\n             urlsafe = WWW_FORM_URL;\n         }\n-        \n-        ByteArrayOutputStream buffer = new ByteArrayOutputStream(); \n+\n+        ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n         for (int i = 0; i < bytes.length; i++) {\n             int b = bytes[i];\n             if (b < 0) {\n                 buffer.write(b);\n             } else {\n                 buffer.write('%');\n-                char hex1 = Character.toUpperCase(\n-                  Character.forDigit((b >> 4) & 0xF, RADIX));\n-                char hex2 = Character.toUpperCase(\n-                  Character.forDigit(b & 0xF, RADIX));\n+                char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, RADIX));\n+                char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, RADIX));\n                 buffer.write(hex1);\n                 buffer.write(hex2);\n             }\n         }\n-        return buffer.toByteArray(); \n-    }\n-\n+        return buffer.toByteArray();\n+    }\n \n     /**\n      * Decodes an array of URL safe 7-bit characters into an array of \n                 buffer.write(' ');\n             } else if (b == '%') {\n                 try {\n-                    int u = toCharacterDigit(bytes[++i]);\n-                    int l = toCharacterDigit(bytes[++i]);\n+                    int u = Utils.digit16(bytes[++i]);\n+                    int l = Utils.digit16(bytes[++i]);\n                     buffer.write((char) ((u << 4) + l));\n                 } catch (ArrayIndexOutOfBoundsException e) {\n                     throw new DecoderException(\"Invalid URL encoding: \", e);\n         return buffer.toByteArray();\n     }\n \n-    private static int toCharacterDigit(byte b) throws DecoderException {\n-        int i = Character.digit((char) b, RADIX);\n-        if (i == -1) {\n-            throw new DecoderException(\"Invalid URL encoding: not a valid digit (radix \" + RADIX + \"): \" + b);\n-        }\n-        return i;\n-    }\n     /**\n      * Encodes an array of bytes into an array of URL safe 7-bit \n      * characters. Unsafe characters are escaped.\n--- /dev/null\n+++ b/src/java/org/apache/commons/codec/net/Utils.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.codec.net;\n+\n+import org.apache.commons.codec.DecoderException;\n+\n+/**\n+ * Utility methods for this package.\n+ * \n+ * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n+ * @version $Id: $\n+ */\n+class Utils {\n+\n+    /**\n+     * Returns the numeric value of the character <code>b</code> in radix 16.\n+     * \n+     * @param b\n+     *            the byte to be converted.\n+     * @return the numeric value represented by the character in radix 16.\n+     * \n+     * @throws DecoderException\n+     *             Thrown when the byte is not valid per {@link Character#digit(char,int)}\n+     */\n+    static int digit16(byte b) throws DecoderException {\n+        int i = Character.digit((char) b, 16);\n+        if (i == -1) {\n+            throw new DecoderException(\"Invalid URL encoding: not a valid digit (radix \" + URLCodec.RADIX + \"): \" + b);\n+        }\n+        return i;\n+    }\n+\n+}", "timestamp": 1248477244, "metainfo": ""}