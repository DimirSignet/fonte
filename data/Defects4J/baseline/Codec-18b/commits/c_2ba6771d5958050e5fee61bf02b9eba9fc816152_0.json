{"sha": "2ba6771d5958050e5fee61bf02b9eba9fc816152", "log": "Factor out constant answer in a singleton to save lots of memory on start up.  ", "commit": "\n--- a/src/java/org/apache/commons/codec/language/bm/Rule.java\n+++ b/src/java/org/apache/commons/codec/language/bm/Rule.java\n public class Rule {\n \n     private static class AppendableCharSeqeuence implements CharSequence {\n-        \n+\n         private final CharSequence left;\n         private final CharSequence right;\n         private final int length;\n      */\n     public static interface RMatcher {\n         boolean find();\n+    }\n+\n+    private static class TrueRMatcher implements RMatcher {\n+\n+        static TrueRMatcher INSTANCE = new TrueRMatcher();\n+\n+        public boolean find() {\n+            return true;\n+        }\n+\n     }\n \n     /**\n                 // matches every string\n                 return new RPattern() {\n                     public RMatcher matcher(CharSequence input) {\n-                        return new RMatcher() {\n-                            public boolean find() {\n-                                return true;\n-                            }\n-                        };\n+                        return TrueRMatcher.INSTANCE;\n                     }\n                 };\n             } else if (startsWith) {\n         if (i < 0) {\n             throw new IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n         }\n-        \n+\n         int patternLength = this.pattern.length();\n         int ipl = i + patternLength;\n ", "timestamp": 1312736944, "metainfo": ""}