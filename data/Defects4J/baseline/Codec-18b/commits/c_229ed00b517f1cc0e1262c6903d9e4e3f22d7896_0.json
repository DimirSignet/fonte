{"sha": "229ed00b517f1cc0e1262c6903d9e4e3f22d7896", "log": "[CODEC-63] Added explanation for different results to dropby.com, Raised CC to 100/100  ", "commit": "\n--- a/src/test/java/org/apache/commons/codec/language/NysiisTest.java\n+++ b/src/test/java/org/apache/commons/codec/language/NysiisTest.java\n     }\n \n     @Test\n+    public void testTrueVariant() {\n+        Nysiis encoder = new Nysiis(true);\n+\n+        String encoded = encoder.encode(\"WESTERLUND\");\n+        Assert.assertTrue(encoded.length() <= 6);\n+        Assert.assertEquals(\"WASTAR\", encoded);\n+    }\n+\n+    @Test\n     public void testBran() throws EncoderException {\n         encodeAll(new String[] { \"Brian\", \"Brown\", \"Brun\" }, \"BRAN\");\n     }\n     @Test\n     public void testDan() throws EncoderException {\n         this.encodeAll(new String[] { \"Dane\", \"Dean\", \"Dionne\" }, \"DAN\");\n+    }\n+\n+    @Test\n+    public void testSpecialBranches() throws EncoderException {\n+        this.encodeAll(new String[] { \"Kobwick\" }, \"CABWAC\");\n+        this.encodeAll(new String[] { \"Kocher\" }, \"CACAR\");\n+        this.encodeAll(new String[] { \"Fesca\" }, \"FASC\");\n+        this.encodeAll(new String[] { \"Shom\" }, \"SAN\");\n+        this.encodeAll(new String[] { \"Ohlo\" }, \"OL\");\n+        this.encodeAll(new String[] { \"Uhu\" }, \"UH\");\n+        this.encodeAll(new String[] { \"Um\" }, \"UN\");\n     }\n \n     @Test\n      */\n     @Test\n     public void testDropBy2() throws EncoderException {\n+        // Explanation of differences between this implementation and the one at dropby.com.\n+        //\n+        // Algorithm (taken from www.dropby.com/NYSIIS.html):\n+        //\n+        // 1.  Transcode first characters of name:\n+        //    MAC \u00bb   MCC\n+        //    KN  \u00bb   NN\n+        //    K   \u00bb   C\n+        //    PH  \u00bb   FF\n+        //    PF  \u00bb   FF\n+        //    SCH \u00bb   SSS\n+        //\n+        // 2.  Transcode last characters of name:\n+        //    EE, IE  \u00bb   Y\n+        //    DT,RT,RD,NT,ND  \u00bb   D\n+        //\n+        // 3.  First character of key = first character of name.\n+        //\n+        // 4.  Transcode remaining characters by following these rules, incrementing by one character each time:\n+        //   4a.   EV  \u00bb   AF  else A,E,I,O,U \u00bb A\n+        //   4b.   Q   \u00bb   G\n+        //   4c.   Z   \u00bb   S\n+        //   4d.   M   \u00bb   N\n+        //   4e.   KN  \u00bb   N   else K \u00bb C\n+        //   4f.   SCH     \u00bb   SSS\n+        //   4g.   PH  \u00bb   FF\n+        //   4h.   H   \u00bb   If previous or next is nonvowel, previous\n+        //   4i.   W   \u00bb   If previous is vowel, previous\n+        //   4j.   Add current to key if current != last key character\n+        //\n+        // 5.  If last character is S, remove it\n+        // 6.  If last characters are AY, replace with Y\n+        // 7.  If last character is A, remove it\n+        // 8.  Collapse all strings of repeated characters\n+        // 9.  Add original first character of name as first character of key\n+\n         List<String[]> testValues =\n                 Arrays.asList(\n                         // http://www.dropby.com/indexLF.html?content=/NYSIIS.html\n                         // 1. Transcode first characters of name\n                         new String[] { \"MACINTOSH\", \"MCANT\" },\n-                        //new String[] { \"KNUTH\", \"NNATH\" }, // Original: NNAT; modified: NATH\n-                        //new String[] { \"KOEHN\", \"C\" },\n-                        //new String[] { \"PHILLIPSON\", \"FFALAP\" },\n-                        //new String[] { \"PFEISTER\", \"FFASTA\" },\n-                        //new String[] { \"SCHOENHOEFT\", \"SSANAF\" },\n+                        // violates 4j: the second N should not be added, as the first\n+                        //              key char is already a N\n+                        new String[] { \"KNUTH\", \"NAT\" }, // Original: NNAT; modified: NATH\n+                        // O and E are transcoded to A because of rule 4a\n+                        // H also to A because of rule 4h\n+                        // the N gets mysteriously lost, maybe because of a wrongly implemented rule 4h\n+                        // that skips the next char in such a case?\n+                        // the remaining A is removed because of rule 7\n+                        new String[] { \"KOEHN\", \"CAN\" }, // Original: C\n+                        // violates 4j: see also KNUTH\n+                        new String[] { \"PHILLIPSON\", \"FALAPSAN\" }, // Original: FFALAP[SAN]\n+                        // violates 4j: see also KNUTH\n+                        new String[] { \"PFEISTER\", \"FASTAR\" }, // Original: FFASTA[R]\n+                        // violoates 4j: see also KNUTH\n+                        new String[] { \"SCHOENHOEFT\", \"SANAFT\" }, // Original: SSANAF[T]\n                         // http://www.dropby.com/indexLF.html?content=/NYSIIS.html\n                         // 2.Transcode last characters of name: \n                         new String[] { \"MCKEE\", \"MCY\" },\n                         new String[] { \"BOWMAN\", \"BANAN\" },\n                         new String[] { \"MCKNIGHT\", \"MCNAGT\" },\n                         new String[] { \"RICKERT\", \"RACAD\" },\n-                        //new String[] { \"DEUTSCH\", \"DATS\" },\n+                        // violates 5: the last S is not removed\n+                        // when comparing to DEUTS, which is phonetically similar\n+                        // the result it also DAT, which is correct for DEUTSCH too imo\n+                        new String[] { \"DEUTSCH\", \"DAT\" }, // Original: DATS\n                         new String[] { \"WESTPHAL\", \"WASTFAL\" },\n-                        //new String[] { \"SHRIVER\", \"SHRAVA\" },\n-                        //new String[] { \"KUHL\", \"C\" },\n+                        // violates 4h: the H should be transcoded to S and thus ignored as\n+                        // the first key character is also S\n+                        new String[] { \"SHRIVER\", \"SRAVAR\" }, // Original: SHRAVA[R]\n+                        // same as KOEHN, the L gets mysteriously lost, the correct one\n+                        new String[] { \"KUHL\", \"CAL\" }, // Original: C\n                         new String[] { \"RAWSON\", \"RASAN\" },\n                         // If last character is S, remove it\n                         new String[] { \"JILES\", \"JAL\" },\n-                        //new String[] { \"CARRAWAY\", \"CARAY\" },\n+                        // violates 6: if the last two characters are AY, remove A\n+                        new String[] { \"CARRAWAY\", \"CARY\" }, // Original: CARAY\n                         new String[] { \"YAMADA\", \"YANAD\" });\n \n         for (String[] arr : testValues) {", "timestamp": 1331240195, "metainfo": ""}