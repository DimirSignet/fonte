{"sha": "f2e7938365b6256e6f1a323602aa63d5df346ab1", "log": "[CODEC-155] DigestUtils.getDigest(String) should throw IllegalArgumentException instead of RuntimeException.  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/digest/DigestUtils.java\n+++ b/src/main/java/org/apache/commons/codec/digest/DigestUtils.java\n      *            names.\n      * @return An MD5 digest instance.\n      * @see MessageDigest#getInstance(String)\n-     * @throws RuntimeException\n-     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n+     * @throws IllegalArgumentException\n+     *             when a {@link NoSuchAlgorithmException} is caught.\n      */\n     public static MessageDigest getDigest(String algorithm) {\n         try {\n             return MessageDigest.getInstance(algorithm);\n         } catch (NoSuchAlgorithmException e) {\n-            throw new RuntimeException(e);\n+            throw new IllegalArgumentException(e);\n         }\n     }\n \n      * Returns an MD5 MessageDigest.\n      *\n      * @return An MD5 digest instance.\n-     * @throws RuntimeException\n-     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n+     * @throws IllegalArgumentException\n+     *             when a {@link NoSuchAlgorithmException} is caught, which should never happen because MD5 is a\n+     *             built-in algorithm\n+     * @see MessageDigestAlgorithms#MD5\n      */\n     public static MessageDigest getMd5Digest() {\n         return getDigest(MessageDigestAlgorithms.MD5);\n      * </p>\n      *\n      * @return An SHA-256 digest instance.\n-     * @throws RuntimeException\n-     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n+     * @throws IllegalArgumentException\n+     *             when a {@link NoSuchAlgorithmException} is caught, which should never happen because SHA-256 is a\n+     *             built-in algorithm\n+     * @see MessageDigestAlgorithms#SHA_256\n      */\n     public static MessageDigest getSha256Digest() {\n         return getDigest(MessageDigestAlgorithms.SHA_256);\n      * </p>\n      *\n      * @return An SHA-384 digest instance.\n-     * @throws RuntimeException\n-     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n+     * @throws IllegalArgumentException\n+     *             when a {@link NoSuchAlgorithmException} is caught, which should never happen because SHA-384 is a\n+     *             built-in algorithm\n+     * @see MessageDigestAlgorithms#SHA_384\n      */\n     public static MessageDigest getSha384Digest() {\n         return getDigest(MessageDigestAlgorithms.SHA_384);\n      * </p>\n      *\n      * @return An SHA-512 digest instance.\n-     * @throws RuntimeException\n-     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n+     * @throws IllegalArgumentException\n+     *             when a {@link NoSuchAlgorithmException} is caught, which should never happen because SHA-512 is a\n+     *             built-in algorithm\n+     * @see MessageDigestAlgorithms#SHA_512\n      */\n     public static MessageDigest getSha512Digest() {\n         return getDigest(MessageDigestAlgorithms.SHA_512);\n      * Returns an SHA-1 digest.\n      *\n      * @return An SHA-1 digest instance.\n-     * @throws RuntimeException\n-     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n+     * @throws IllegalArgumentException\n+     *             when a {@link NoSuchAlgorithmException} is caught\n      */\n     public static MessageDigest getShaDigest() {\n         return getDigest(\"SHA\");\n--- a/src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java\n+++ b/src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java\n package org.apache.commons.codec.digest;\n \n import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n import java.util.Arrays;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n      * @return complete hash value including prefix and salt\n      * @throws IllegalArgumentException\n      *             if the given salt is {@code null} or does not match the allowed pattern\n-     * @throws RuntimeException\n-     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n+     * @throws IllegalArgumentException\n+     *             when a {@link NoSuchAlgorithmException} is caught\n+     * @see MessageDigestAlgorithms\n      */\n     private static String sha2Crypt(byte[] keyBytes, String salt, String saltPrefix, int blocksize, String algorithm) {\n ", "timestamp": 1346607457, "metainfo": ""}