{"sha": "ff8ad6dce1ddbca02981fef9a5f79055fabbcf96", "log": "Javadoc.  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java\n+++ b/src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java\n  * into the Public Domain.\n  * <p>\n  * This class is immutable and thread-safe.\n- *\n+ * \n  * @version $Id$\n  * @since 1.7\n  */\n      * Generates a libc crypt() compatible \"$5$\" hash value with random salt.\n      * <p>\n      * See {@link Crypt#crypt(String, String)} for details.\n-     *\n+     * \n+     * @param keyBytes\n+     *            plaintext to hash\n+     * @return complete hash value\n      * @throws RuntimeException\n      *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n      */\n      * Generates a libc6 crypt() compatible \"$5$\" hash value.\n      * <p>\n      * See {@link Crypt#crypt(String, String)} for details.\n-     *\n+     * \n+     * @param keyBytes\n+     *            plaintext to hash\n+     * @param salt\n+     *            real salt value without prefix or \"rounds=\"\n+     * @return complete hash value including salt\n      * @throws IllegalArgumentException\n      *             if the salt does not match the allowed pattern\n      * @throws RuntimeException\n     /**\n      * Generates a libc6 crypt() compatible \"$5$\" or \"$6$\" SHA2 based hash value.\n      * <p>\n-     * This is a nearly line by line conversion of the original C function. The numbered comments are from the\n-     * algorithm description, the short C-style ones from the original C code and the ones with \"Remark\" from me.\n+     * This is a nearly line by line conversion of the original C function. The numbered comments are from the algorithm\n+     * description, the short C-style ones from the original C code and the ones with \"Remark\" from me.\n      * <p>\n      * See {@link Crypt#crypt(String, String)} for details.\n-     *\n+     * \n      * @param keyBytes\n-     *            plaintext that should be hashed\n+     *            plaintext to hash\n      * @param salt\n      *            real salt value without prefix or \"rounds=\"\n      * @param saltPrefix\n      * @see MessageDigestAlgorithms\n      */\n     private static String sha2Crypt(final byte[] keyBytes, final String salt, final String saltPrefix,\n-                                    final int blocksize, final String algorithm) {\n+            final int blocksize, final String algorithm) {\n \n         final int keyLen = keyBytes.length;\n \n      * Generates a libc crypt() compatible \"$6$\" hash value with random salt.\n      * <p>\n      * See {@link Crypt#crypt(String, String)} for details.\n-     *\n+     * \n+     * @param keyBytes\n+     *            plaintext to hash\n+     * @return complete hash value\n      * @throws RuntimeException\n      *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n      */\n      * Generates a libc6 crypt() compatible \"$6$\" hash value.\n      * <p>\n      * See {@link Crypt#crypt(String, String)} for details.\n-     *\n+     * \n+     * @param keyBytes\n+     *            plaintext to hash\n+     * @param salt\n+     *            real salt value without prefix or \"rounds=\"\n+     * @return complete hash value including salt\n      * @throws IllegalArgumentException\n      *             if the salt does not match the allowed pattern\n      * @throws RuntimeException", "timestamp": 1387551694, "metainfo": ""}