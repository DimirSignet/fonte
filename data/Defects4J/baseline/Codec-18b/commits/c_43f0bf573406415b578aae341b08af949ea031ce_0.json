{"sha": "43f0bf573406415b578aae341b08af949ea031ce", "log": "Bullet-proofing: Tests we do not blow up for any char input.  ", "commit": "\n--- a/src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java\n+++ b/src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java\n         Assert.assertFalse(value, bmpm.encode(value).equals(\"\"));\n     }\n \n+    private BeiderMorseEncoder createGenericApproxEncoder() {\n+        BeiderMorseEncoder encoder = new BeiderMorseEncoder();\n+        encoder.setNameType(NameType.GENERIC);\n+        encoder.setRuleType(RuleType.APPROX);\n+        return encoder;\n+    }\n+\n     @Override\n     protected StringEncoder createStringEncoder() {\n         return new BeiderMorseEncoder();\n     }\n \n+    /**\n+     * Tests we do not blow up.\n+     * \n+     * @throws EncoderException\n+     */\n+    @Test\n+    public void testAllChars() throws EncoderException {\n+        BeiderMorseEncoder bmpm = createGenericApproxEncoder();\n+        for (char c = Character.MIN_VALUE; c < Character.MAX_VALUE; c++) {\n+            bmpm.encode(\"\" + c);\n+        }\n+    }\n+\n     @Test\n     public void testAsciiEncodeNotEmpty1Letter() throws EncoderException {\n-        BeiderMorseEncoder bmpm = new BeiderMorseEncoder();\n-        bmpm.setNameType(NameType.GENERIC);\n-        bmpm.setRuleType(RuleType.APPROX);\n+        BeiderMorseEncoder bmpm = createGenericApproxEncoder();\n         for (char c = 'a'; c <= 'z'; c++) {\n             final String value = \"\" + c;\n             final String valueU = value.toUpperCase();\n \n     @Test\n     public void testAsciiEncodeNotEmpty2Letters() throws EncoderException {\n-        BeiderMorseEncoder bmpm = new BeiderMorseEncoder();\n-        bmpm.setNameType(NameType.GENERIC);\n-        bmpm.setRuleType(RuleType.APPROX);\n+        BeiderMorseEncoder bmpm = createGenericApproxEncoder();\n         for (char c1 = 'a'; c1 <= 'z'; c1++) {\n             for (char c2 = 'a'; c2 <= 'z'; c2++) {\n                 final String value = new String(new char[] { c1, c2 });\n \n     @Test\n     public void testEncodeAtzNotEmpty() throws EncoderException {\n-        BeiderMorseEncoder bmpm = new BeiderMorseEncoder();\n-        bmpm.setNameType(NameType.GENERIC);\n-        bmpm.setRuleType(RuleType.APPROX);\n+        BeiderMorseEncoder bmpm = createGenericApproxEncoder();\n         String[] names = { \"\u00e1cz\", \"\u00e1tz\", \"Ign\u00e1cz\", \"Ign\u00e1tz\", \"Ign\u00e1c\" };\n         for (String name : names) {\n             assertNotEmpty(bmpm, name);\n      */\n     @Test\n     public void testEncodeGna() throws EncoderException {\n-        BeiderMorseEncoder bmpm = new BeiderMorseEncoder();\n-        bmpm.setNameType(NameType.GENERIC);\n-        bmpm.setRuleType(RuleType.APPROX);\n+        BeiderMorseEncoder bmpm = createGenericApproxEncoder();\n         bmpm.encode(\"gna\");\n     }\n \n \n     @Test(timeout = 10000L)\n     public void testLongestEnglishSurname() throws EncoderException {\n-        BeiderMorseEncoder bmpm = new BeiderMorseEncoder();\n-        bmpm.setNameType(NameType.GENERIC);\n-        bmpm.setRuleType(RuleType.APPROX);\n+        BeiderMorseEncoder bmpm = createGenericApproxEncoder();\n         bmpm.encode(\"MacGhilleseatheanaich\");\n     }\n \n     @Test(timeout = 20000L)\n     public void testSpeedCheck() throws EncoderException {\n         char[] chars = new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'o', 'u' };\n-        BeiderMorseEncoder bmpm = new BeiderMorseEncoder();\n-        bmpm.setNameType(NameType.GENERIC);\n-        bmpm.setRuleType(RuleType.APPROX);\n+        BeiderMorseEncoder bmpm = createGenericApproxEncoder();\n         StringBuffer stringBuffer = new StringBuffer();\n         Random rand = new Random();\n         stringBuffer.append(chars[rand.nextInt(chars.length)]);", "timestamp": 1312559293, "metainfo": ""}