{"sha": "5563aa731f93b0c3c2dd69fc104164eb4cf025df", "log": "Add missing Javadoc tags on public methods. Compiler warnings WRT unqualified instance variable access (added \"this.\").   ", "commit": "\n--- a/src/java/org/apache/commons/codec/language/DoubleMetaphone.java\n+++ b/src/java/org/apache/commons/codec/language/DoubleMetaphone.java\n  * \n  * @author <a href=\"mailto:ben@walstrum.com\">Benjamin Walstrum</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n- * @version $Id: DoubleMetaphone.java,v 1.15 2003/11/24 00:11:56 ggregory Exp $\n+ * @version $Id: DoubleMetaphone.java,v 1.16 2003/12/04 17:43:04 ggregory Exp $\n  */\n public class DoubleMetaphone implements StringEncoder {\n \n      *\n      * @param obj Object to encode (should be of type String)\n      * @return An encoded Object (will be of type String)\n+     * @throws EncoderException encode parameter is not of type String\n      */\n     public Object encode(Object obj) throws EncoderException {\n \n         if (!(obj instanceof String)) {\n-            throw new EncoderException(\"DoubleMetaphone encode parameter is not of type java.lang.String\"); \n+            throw new EncoderException(\"DoubleMetaphone encode parameter is not of type String\"); \n         } else {\n             return doubleMetaphone((String) obj);\n         }\n \n     /**\n      * Check if the Double Metaphone values of two <code>String</code> values\n-     * are equal\n+     * are equal.\n+     * \n+     * @param value1 The left-hand side of the encoded {@link String#equals(Object)}.\n+     * @param value2 The right-hand side of the encoded {@link String#equals(Object)}.\n+     * @return <code>true</code> if the encoded <code>String</code>s are equal;\n+     *          <code>false</code> otherwise.\n+     * @see #isDoubleMetaphoneEqual(String,String,boolean)\n      */\n     public boolean isDoubleMetaphoneEqual(String value1, String value2) {\n         return isDoubleMetaphoneEqual(value1, value2, false);\n     \n     /**\n      * Check if the Double Metaphone values of two <code>String</code> values\n-     * are equal, optionally using the alternate value\n+     * are equal, optionally using the alternate value.\n+     * \n+     * @param value1 The left-hand side of the encoded {@link String#equals(Object)}.\n+     * @param value2 The right-hand side of the encoded {@link String#equals(Object)}.\n+     * @param alternate use the alternate value if <code>true</code>.\n+     * @return <code>true</code> if the encoded <code>String</code>s are equal;\n+     *          <code>false</code> otherwise.\n      */\n     public boolean isDoubleMetaphoneEqual(String value1, \n                                           String value2, \n--- a/src/java/org/apache/commons/codec/language/Metaphone.java\n+++ b/src/java/org/apache/commons/codec/language/Metaphone.java\n  * @author bayard@generationjava.com\n  * @author Tim O'Brien\n  * @author Gary Gregory\n- * @version $Id: Metaphone.java,v 1.11 2003/11/24 00:11:56 ggregory Exp $\n+ * @version $Id: Metaphone.java,v 1.12 2003/12/04 17:43:04 ggregory Exp $\n  */\n public class Metaphone implements StringEncoder {\n \n                     break;\n                 case 'C' : // lots of C special cases\n                     /* discard if SCI, SCE or SCY */\n-                    if ((n > 0) && (local.charAt(n - 1) == 'S') && (n + 1 < wdsz) && (frontv.indexOf(local.charAt(n + 1)) >= 0)) { \n+                    if ((n > 0) && (local.charAt(n - 1) == 'S') && (n + 1 < wdsz) && (this.frontv.indexOf(local.charAt(n + 1)) >= 0)) { \n                         break ;\n                     }\n                     tmpS = local.toString();\n                     if (tmpS.indexOf(\"CIA\", n) == n) { // \"CIA\" -> X\n                         code.append('X'); mtsz++; break ;\n                     }\n-                    if ((n + 1 < wdsz) && (frontv.indexOf(local.charAt(n + 1)) >= 0)) {\n+                    if ((n + 1 < wdsz) && (this.frontv.indexOf(local.charAt(n + 1)) >= 0)) {\n                         code.append('S');\n                         mtsz++; \n                         break ; // CI,CE,CY -> S\n                         break ;\n                     }\n                     if (tmpS.indexOf(\"CH\", n) == n) { // detect CH\n-                        if ((n == 0) && (wdsz >= 3) && (vowels.indexOf(local.charAt(2)) < 0)) { // CH consonant -> K consonant\n+                        if ((n == 0) && (wdsz >= 3) && (this.vowels.indexOf(local.charAt(2)) < 0)) { // CH consonant -> K consonant\n                             code.append('K');\n                         } else { \n                             code.append('X'); // CHvowel -> X\n                     }\n                     break ;\n                 case 'D' :\n-                    if ((n + 2 < wdsz)   && (local.charAt(n + 1) == 'G') && (frontv.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n+                    if ((n + 2 < wdsz)   && (local.charAt(n + 1) == 'G') && (this.frontv.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J \n                         code.append('J'); n += 2 ;\n                     } else { \n                         code.append('T');\n                     if ((n + 2 == wdsz) && (local.charAt(n + 1) == 'H')) {\n                         break;\n                     }\n-                    if ((n + 2 < wdsz) && (local.charAt(n + 1) == 'H') && (vowels.indexOf(local.charAt(n + 2)) < 0)) {\n+                    if ((n + 2 < wdsz) && (local.charAt(n + 1) == 'H') && (this.vowels.indexOf(local.charAt(n + 2)) < 0)) {\n                         break;\n                     }\n                     tmpS = local.toString();\n                     } else {\n                         hard = false ;\n                     }\n-                    if ((n + 1 < wdsz) && (frontv.indexOf(local.charAt(n + 1)) >= 0) && (!hard)) {\n+                    if ((n + 1 < wdsz) && (this.frontv.indexOf(local.charAt(n + 1)) >= 0) && (!hard)) {\n                         code.append('J');\n                     } else {\n                         code.append('K');\n                     if (n + 1 == wdsz) {\n                         break ; // terminal H\n                     }\n-                    if ((n > 0) && (varson.indexOf(local.charAt(n - 1)) >= 0)) {\n+                    if ((n > 0) && (this.varson.indexOf(local.charAt(n - 1)) >= 0)) {\n                         break;\n                     }\n-                    if (vowels.indexOf(local.charAt(n + 1)) >= 0) {\n+                    if (this.vowels.indexOf(local.charAt(n + 1)) >= 0) {\n                         code.append('H'); \n                         mtsz++;// Hvowel\n                     }\n                 case 'V' :\n                     code.append('F'); mtsz++;break ;\n                 case 'W' : case 'Y' : // silent if not followed by vowel\n-                    if ((n + 1 < wdsz) && (vowels.indexOf(local.charAt(n + 1)) >= 0)) {\n+                    if ((n + 1 < wdsz) && (this.vowels.indexOf(local.charAt(n + 1)) >= 0)) {\n                         code.append(symb);\n                         mtsz++;\n                     }", "timestamp": 1070559784, "metainfo": ""}