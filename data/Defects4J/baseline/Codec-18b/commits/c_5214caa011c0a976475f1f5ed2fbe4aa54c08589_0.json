{"sha": "5214caa011c0a976475f1f5ed2fbe4aa54c08589", "log": "[CODEC-125] Implement a Beider-Morse phonetic matching codec. No need to create 7000+ of the same object on startup and keep it around.  ", "commit": "\n--- a/src/java/org/apache/commons/codec/language/bm/Rule.java\n+++ b/src/java/org/apache/commons/codec/language/bm/Rule.java\n \n     }\n \n+    private static class AllStringsRMatcher implements RPattern {\n+\n+        private static AllStringsRMatcher INSTANCE = new AllStringsRMatcher();\n+\n+        public RMatcher matcher(CharSequence input) {\n+            return TrueRMatcher.INSTANCE;\n+        }\n+\n+    }\n+\n     /**\n      * A minimal wrapper around the functionality of Pattern that we use, to allow for alternate implementations.\n      */\n                 }\n             } else if ((startsWith || endsWith) && content.length() == 0) {\n                 // matches every string\n-                return new RPattern() {\n-                    public RMatcher matcher(CharSequence input) {\n-                        return TrueRMatcher.INSTANCE;\n-                    }\n-                };\n+                return AllStringsRMatcher.INSTANCE;\n             } else if (startsWith) {\n                 // matches from start\n                 return new RPattern() {", "timestamp": 1312808811, "metainfo": ""}