{"sha": "54f7ca3483251eab0621f75a3373231129753767", "log": "Add edge case tests (which may not make sense, I need to check with Matthew)  ", "commit": "\n--- a/src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java\n+++ b/src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java\n import org.apache.commons.codec.StringEncoder;\n import org.apache.commons.codec.StringEncoderAbstractTest;\n import org.junit.Assert;\n+import org.junit.Ignore;\n import org.junit.Test;\n \n /**\n  * @since 2.0\n  */\n public class BeiderMorseEncoderTest extends StringEncoderAbstractTest {\n+    private void assertNotEmpty(BeiderMorseEncoder bmpm, final String value) throws EncoderException {\n+        Assert.assertFalse(value, bmpm.encode(value).equals(\"\"));\n+    }\n+\n     @Override\n     protected StringEncoder createStringEncoder() {\n         return new BeiderMorseEncoder();\n+    }\n+\n+    @Ignore\n+    @Test\n+    public void testAsciiEncodeNotEmpty1Letter() throws EncoderException {\n+        BeiderMorseEncoder bmpm = new BeiderMorseEncoder();\n+        bmpm.setNameType(NameType.GENERIC);\n+        bmpm.setRuleType(RuleType.APPROX);\n+        for (char c = 'a'; c <= 'z'; c++) {\n+            final String value = \"\" + c;\n+            final String valueU = value.toUpperCase();\n+            assertNotEmpty(bmpm, value);\n+            assertNotEmpty(bmpm, valueU);\n+        }\n+    }\n+\n+    @Test\n+    public void testAsciiEncodeNotEmpty2Letters() throws EncoderException {\n+        BeiderMorseEncoder bmpm = new BeiderMorseEncoder();\n+        bmpm.setNameType(NameType.GENERIC);\n+        bmpm.setRuleType(RuleType.APPROX);\n+        for (char c1 = 'a'; c1 <= 'z'; c1++) {\n+            for (char c2 = 'a'; c2 <= 'z'; c2++) {\n+                final String value = new String(new char[] { c1, c2 });\n+                final String valueU = value.toUpperCase();\n+                assertNotEmpty(bmpm, value);\n+                assertNotEmpty(bmpm, valueU);\n+            }\n+        }\n     }\n \n     @Test\n         bmpm.setRuleType(RuleType.APPROX);\n         String[] names = { \"\u00e1cz\", \"\u00e1tz\", \"Ign\u00e1cz\", \"Ign\u00e1tz\", \"Ign\u00e1c\" };\n         for (String name : names) {\n-            Assert.assertFalse(bmpm.encode(name).equals(\"\"));\n+            assertNotEmpty(bmpm, name);\n         }\n     }\n ", "timestamp": 1312148704, "metainfo": ""}