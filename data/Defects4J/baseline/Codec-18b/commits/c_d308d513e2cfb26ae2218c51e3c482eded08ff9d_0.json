{"sha": "d308d513e2cfb26ae2218c51e3c482eded08ff9d", "log": "PR: Bugzilla Bug 27788 \t  \t[Codec][PATCH] Inconsistent use of the word 'encodning' in the URLCodec API Submitted by:\tOleg Kalnichevski Reviewed by:\tGary Gregory   ", "commit": "\n--- a/src/java/org/apache/commons/codec/net/URLCodec.java\n+++ b/src/java/org/apache/commons/codec/net/URLCodec.java\n  * \n  * @author Apache Software Foundation\n  * @since 1.2\n- * @version $Id: URLCodec.java,v 1.17 2004/02/29 04:08:31 tobrien Exp $\n+ * @version $Id: URLCodec.java,v 1.18 2004/03/21 01:58:40 ggregory Exp $\n  */\n public class URLCodec \n         implements BinaryEncoder, BinaryDecoder, \n     private final static String US_ASCII = \"US-ASCII\";\n     \n     /**\n-     * The <code>String</code> encoding used for decoding and encoding.\n-     */\n-    protected String encoding = \"UTF-8\";\n+     * The default charset used for string decoding and encoding.\n+     */\n+    protected String charset = \"UTF-8\";\n     \n+    protected static byte ESCAPE_CHAR = '%';\n     /**\n      * BitSet of www-form-url safe characters.\n      */\n     }\n \n     /**\n-     * Constructor which allows for the selection of an Encoding\n+     * Constructor which allows for the selection of a default charset\n      * \n-     * @param encoding the String encoding to use.\n-     */\n-    public URLCodec(String encoding) {\n+     * @param charset the default string charset to use.\n+     */\n+    public URLCodec(String charset) {\n         super();\n-        this.encoding = encoding;\n+        this.charset = charset;\n     }\n \n     /**\n         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); \n         for (int i = 0; i < pArray.length; i++) {\n             int b = pArray[i];\n-            if (b >= 0 && urlsafe.get(b)) {\n+            if (b < 0) {\n+                b = 256 + b;\n+            }\n+            if (urlsafe.get(b)) {\n                 if (b == ' ') {\n                     b = '+';\n                 }\n \n     /**\n      * Encodes a string into its URL safe form using the specified\n-     * encoding. Unsafe characters are escaped.\n+     * string charset. Unsafe characters are escaped.\n      *\n      * @param pString string to convert to a URL safe form\n-     * @param encoding the encoding for pString\n+     * @param charset the charset for pString\n      * @return URL safe string\n      * @throws UnsupportedEncodingException Thrown if charset is not\n      *                                      supported \n      */\n-    public String encode(String pString, String encoding) \n+    public String encode(String pString, String charset) \n         throws UnsupportedEncodingException  \n     {\n         if (pString == null) {\n             return null;\n         }\n-        return new String(encode(pString.getBytes(encoding)), US_ASCII);\n-    }\n-\n-\n-    /**\n-     * Encodes a string into its URL safe form. Unsafe characters are \n-     * escaped.\n+        return new String(encode(pString.getBytes(charset)), US_ASCII);\n+    }\n+\n+\n+    /**\n+     * Encodes a string into its URL safe form using the default string \n+     * charset. Unsafe characters are escaped.\n      *\n      * @param pString string to convert to a URL safe form\n      * @return URL safe string\n      * @throws EncoderException Thrown if URL encoding is unsuccessful\n+     * \n+     * @see #getDefaultCharset()\n      */\n     public String encode(String pString) throws EncoderException {\n         if (pString == null) {\n             return null;\n         }\n         try {\n-            return encode(pString, this.getEncoding());\n+            return encode(pString, getDefaultCharset());\n         } catch(UnsupportedEncodingException e) {\n             throw new EncoderException(e.getMessage());\n         }\n      * to their original representation.\n      *\n      * @param pString URL safe string to convert into its original form\n-     * @param encoding the original string encoding\n+     * @param charset the original string charset\n      * @return original string \n      * @throws DecoderException Thrown if URL decoding is unsuccessful\n      * @throws UnsupportedEncodingException Thrown if charset is not\n      *                                      supported \n      */\n-    public String decode(String pString, String encoding) \n+    public String decode(String pString, String charset) \n         throws DecoderException, UnsupportedEncodingException \n     {\n         if (pString == null) {\n             return null;\n         }\n-        return new String(decode(pString.getBytes(US_ASCII)), encoding);\n-    }\n-\n-\n-    /**\n-     * Decodes a URL safe string into its original form. Escaped \n-     * characters are converted back to their original representation.\n+        return new String(decode(pString.getBytes(US_ASCII)), charset);\n+    }\n+\n+\n+    /**\n+     * Decodes a URL safe string into its original form using the default\n+     * string charset. Escaped characters are converted back to their \n+     * original representation.\n      *\n      * @param pString URL safe string to convert into its original form\n      * @return original string \n      * @throws DecoderException Thrown if URL decoding is unsuccessful\n+     * \n+     * @see #getDefaultCharset()\n      */\n     public String decode(String pString) throws DecoderException {\n         if (pString == null) {\n             return null;\n         }\n         try {\n-            return decode(pString, this.getEncoding());\n+            return decode(pString, getDefaultCharset());\n         } catch(UnsupportedEncodingException e) {\n             throw new DecoderException(e.getMessage());\n         }\n      * The <code>String</code> encoding used for decoding and encoding.\n      *\n      * @return Returns the encoding.\n+     * \n+     * @deprecated use #getDefaultCharset()\n      */\n     public String getEncoding() {\n-        return this.encoding;\n+        return this.charset;\n+    }\n+\n+    /**\n+     * The default charset used for string decoding and encoding.\n+     *\n+     * @return the default string charset.\n+     */\n+    public String getDefaultCharset() {\n+        return this.charset;\n     }\n \n }", "timestamp": 1079834320, "metainfo": ""}