{"sha": "6d998a12c101a31048fd175e36c5e5ac56dccda9", "log": "Renamed the package private interface StringEncodings to CharacterEncodingNames and added more Javadocs.   ", "commit": "\n--- a/src/java/org/apache/commons/codec/net/BCodec.java\n+++ b/src/java/org/apache/commons/codec/net/BCodec.java\n  * \n  * @author Apache Software Foundation\n  * @since 1.3\n- * @version $Id: BCodec.java,v 1.5 2004/04/13 22:46:37 ggregory Exp $\n+ * @version $Id: BCodec.java,v 1.6 2004/07/26 22:55:40 ggregory Exp $\n  */\n public class BCodec extends RFC1522Codec implements StringEncoder, StringDecoder {\n     /**\n      * The default charset used for string decoding and encoding.\n      */\n-    private String charset = StringEncodings.UTF8;\n+    private String charset = CharacterEncodingNames.UTF8;\n \n     /**\n      * Default constructor.\n--- /dev/null\n+++ b/src/java/org/apache/commons/codec/net/CharacterEncodingNames.java\n+/*\n+ * Copyright 2001-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.codec.net;\n+\n+/**\n+ * Character encoding names required of every implementation of the Java platform.\n+ * \n+ * According to the Java documentation <a\n+ * href=\"http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc\">JRE character encoding names\n+ * </a>:\n+ * <p>\n+ * <cite>Every implementation of the Java platform is required to support the following character encodings. Consult the\n+ * release documentation for your implementation to see if any other encodings are supported. </cite>\n+ * </p>\n+ * \n+ * This interface is private to the package since it perhaps would best belong in the [lang] project with other required\n+ * encoding names. As is, this interface only defines the names used in this package. Even if a similar interface is\n+ * defined in [lang], it is not forseen that [codec] would be made to depend on [lang].\n+ * \n+ * @see <a href=\"http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc\">JRE character encoding\n+ *          names </a>\n+ * @author Apache Software Foundation\n+ * @since 1.4\n+ * @version $Id: CharacterEncodingNames.java,v 1.1 2004/07/26 22:55:40 ggregory Exp $\n+ */\n+interface CharacterEncodingNames {\n+    /**\n+     * <p>\n+     * Seven-bit ASCII, also known as ISO646-US, also known as the Basic Latin block of the Unicode character set.\n+     * </p>\n+     * <p>\n+     * Every implementation of the Java platform is required to support this character encoding.\n+     * </p>\n+     * \n+     * @see <a href=\"http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc\">JRE character\n+     *          encoding names </a>\n+     */\n+    String US_ASCII = \"US-ASCII\";\n+\n+    /**\n+     * <p>\n+     * Eight-bit Unicode Transformation Format.\n+     * </p>\n+     * <p>\n+     * Every implementation of the Java platform is required to support this character encoding.\n+     * </p>\n+     * \n+     * @see <a href=\"http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc\">JRE character\n+     *          encoding names </a>\n+     */\n+    String UTF8 = \"UTF-8\";\n+}\n--- a/src/java/org/apache/commons/codec/net/QCodec.java\n+++ b/src/java/org/apache/commons/codec/net/QCodec.java\n  * \n  * @author Apache Software Foundation\n  * @since 1.3\n- * @version $Id: QCodec.java,v 1.6 2004/05/24 00:24:32 ggregory Exp $\n+ * @version $Id: QCodec.java,v 1.7 2004/07/26 22:55:40 ggregory Exp $\n  */\n public class QCodec extends RFC1522Codec implements StringEncoder, StringDecoder {\n     /**\n      * The default charset used for string decoding and encoding.\n      */\n-    private String charset = StringEncodings.UTF8;\n+    private String charset = CharacterEncodingNames.UTF8;\n \n     /**\n      * BitSet of printable characters as defined in RFC 1522.\n--- a/src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java\n+++ b/src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java\n  * \n  * @author Apache Software Foundation\n  * @since 1.3\n- * @version $Id: QuotedPrintableCodec.java,v 1.7 2004/04/09 22:21:07 ggregory Exp $\n+ * @version $Id: QuotedPrintableCodec.java,v 1.8 2004/07/26 22:55:40 ggregory Exp $\n  */\n public class QuotedPrintableCodec implements BinaryEncoder, BinaryDecoder, StringEncoder, StringDecoder {\n     /**\n      * The default charset used for string decoding and encoding.\n      */\n-    private String charset = StringEncodings.UTF8;\n+    private String charset = CharacterEncodingNames.UTF8;\n \n     /**\n      * BitSet of printable characters as defined in RFC 1521.\n         if (pString == null) {\n             return null;\n         }\n-        return new String(decode(pString.getBytes(StringEncodings.US_ASCII)), charset);\n+        return new String(decode(pString.getBytes(CharacterEncodingNames.US_ASCII)), charset);\n     }\n \n     /**\n         if (pString == null) {\n             return null;\n         }\n-        return new String(encode(pString.getBytes(charset)), StringEncodings.US_ASCII);\n+        return new String(encode(pString.getBytes(charset)), CharacterEncodingNames.US_ASCII);\n     }\n }\n--- a/src/java/org/apache/commons/codec/net/RFC1522Codec.java\n+++ b/src/java/org/apache/commons/codec/net/RFC1522Codec.java\n  * \n  * @author Apache Software Foundation\n  * @since 1.3\n- * @version $Id: RFC1522Codec.java,v 1.2 2004/04/09 22:21:43 ggregory Exp $\n+ * @version $Id: RFC1522Codec.java,v 1.3 2004/07/26 22:55:40 ggregory Exp $\n  */\n abstract class RFC1522Codec {\n     \n         buffer.append(getEncoding()); \n         buffer.append('?');\n         byte [] rawdata = doEncoding(text.getBytes(charset)); \n-        buffer.append(new String(rawdata, StringEncodings.US_ASCII));\n+        buffer.append(new String(rawdata, CharacterEncodingNames.US_ASCII));\n         buffer.append(\"?=\"); \n         return buffer.toString();\n     }\n         }\n         from = to + 1;\n         to = text.indexOf(\"?\", from);\n-        byte[] data = text.substring(from, to).getBytes(StringEncodings.US_ASCII);\n+        byte[] data = text.substring(from, to).getBytes(CharacterEncodingNames.US_ASCII);\n         data = doDecoding(data); \n         return new String(data, charset);\n     }\n--- a/src/java/org/apache/commons/codec/net/URLCodec.java\n+++ b/src/java/org/apache/commons/codec/net/URLCodec.java\n  * \n  * @author Apache Software Foundation\n  * @since 1.2\n- * @version $Id: URLCodec.java,v 1.19 2004/03/29 07:59:00 ggregory Exp $\n+ * @version $Id: URLCodec.java,v 1.20 2004/07/26 22:55:39 ggregory Exp $\n  */\n public class URLCodec implements BinaryEncoder, BinaryDecoder, StringEncoder, StringDecoder {\n     \n     /**\n      * The default charset used for string decoding and encoding.\n      */\n-    protected String charset = StringEncodings.UTF8;\n+    protected String charset = CharacterEncodingNames.UTF8;\n     \n     protected static byte ESCAPE_CHAR = '%';\n     /**\n         if (pString == null) {\n             return null;\n         }\n-        return new String(encode(pString.getBytes(charset)), StringEncodings.US_ASCII);\n+        return new String(encode(pString.getBytes(charset)), CharacterEncodingNames.US_ASCII);\n     }\n \n \n         if (pString == null) {\n             return null;\n         }\n-        return new String(decode(pString.getBytes(StringEncodings.US_ASCII)), charset);\n+        return new String(decode(pString.getBytes(CharacterEncodingNames.US_ASCII)), charset);\n     }\n \n ", "timestamp": 1090882540, "metainfo": ""}