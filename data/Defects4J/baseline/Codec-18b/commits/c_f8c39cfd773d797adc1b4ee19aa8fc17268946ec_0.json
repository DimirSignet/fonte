{"sha": "f8c39cfd773d797adc1b4ee19aa8fc17268946ec", "log": "Handle multiple arguments  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/cli/Digest.java\n+++ b/src/main/java/org/apache/commons/codec/cli/Digest.java\n      * @param args\n      *            {@code args[0]} is one of {@link MessageDigestAlgorithms} name, {@link MessageDigest} name, {@code ALL}\n      *            , or {@code *}. \n-     *            {@code args[1]} is a FILE.\n+     *            {@code args[1+]} is a FILE/DIRECTORY/String.\n      * @throws IOException\n      */\n     public static void main(String[] args) throws IOException {\n \n     private final String algorithm;\n     private final String[] args;\n-    private final String source;\n+    private final String[] inputs;\n \n     private Digest(final String[] args) {\n         if (args == null) {\n         }\n         if (args.length == 0) {\n             throw new IllegalArgumentException(\n-                    String.format(\"Usage: java %s [algorithm] [FILE|DIRECTORY|string]\", Digest.class.getName()));\n+                    String.format(\"Usage: java %s [algorithm] [FILE|DIRECTORY|string] ...\", Digest.class.getName()));\n         }\n         this.args = args;\n         algorithm = args[0];\n-        source = args.length == 1 ? null : args[1];\n+        if (args.length <= 1) {\n+            inputs = null;\n+        } else {\n+            inputs = new String[args.length -1];\n+            System.arraycopy(args, 1, inputs, 0, inputs.length);            \n+        }\n     }\n \n     private void println(final String prefix, final byte[] digest) {\n     }\n \n     private void run(String prefix, final MessageDigest messageDigest) throws IOException {\n-        if (source == null) {\n+        if (inputs == null) {\n             println(prefix, DigestUtils.digest(messageDigest, System.in));\n             return;\n         }\n-        final File file = new File(source);\n-        if (file.isFile()) {\n-            println(prefix, DigestUtils.digest(messageDigest, file), source);\n-        } else if (file.isDirectory()) {\n-            run(prefix, messageDigest, file.listFiles());\n-        } else {\n-            // use the default charset for the command-line parameter\n-            final byte[] bytes = source.getBytes(Charset.defaultCharset());\n-            println(prefix, DigestUtils.digest(messageDigest, bytes));\n+        for(String source : inputs) {\n+            final File file = new File(source);\n+            if (file.isFile()) {\n+                println(prefix, DigestUtils.digest(messageDigest, file), source);\n+            } else if (file.isDirectory()) {\n+                run(prefix, messageDigest, file.listFiles());\n+            } else {\n+                // use the default charset for the command-line parameter\n+                final byte[] bytes = source.getBytes(Charset.defaultCharset());\n+                println(prefix, DigestUtils.digest(messageDigest, bytes));\n+            }\n         }\n     }\n ", "timestamp": 1463745169, "metainfo": ""}