{"sha": "eb8b79300a7ecb3656c476dbac296d25f12cecdc", "log": "Refactor a lot common code in the left and right buffer classes into a new common superclass.  ", "commit": "\n--- a/src/java/org/apache/commons/codec/language/ColognePhonetic.java\n+++ b/src/java/org/apache/commons/codec/language/ColognePhonetic.java\n  */\n public class ColognePhonetic implements StringEncoder {\n \n-    private class CologneLeftBuffer implements CharSequence {\n-\n-        private final char[] data;\n-        private int length = 0;\n-\n-        public CologneLeftBuffer(int buffSize) {\n-            data = new char[buffSize];\n-        }\n-\n-        public CologneLeftBuffer(char[] data) {\n+    private abstract class CologneBuffer implements CharSequence {\n+\n+        protected final char[] data;\n+        protected int length = 0;\n+\n+        public CologneBuffer(char[] data) {\n             this.data = data;\n             this.length = data.length;\n         }\n \n-        public int length() {\n-            return length;\n+        public CologneBuffer(int buffSize) {\n+            data = new char[buffSize];\n         }\n \n         public char charAt(int index) {\n             }\n         }\n \n+        protected abstract char[] copyData(int start, final int length);\n+\n+        protected abstract CologneBuffer createCologneBuffer(char[] data);\n+\n+        public int length() {\n+            return length;\n+        }\n+\n         public CharSequence subSequence(int start, int end) {\n             final int length = end - start;\n-\n-            char[] retData = copyData(start, length);\n-\n-            return new CologneLeftBuffer(retData);\n-        }\n-\n-        private char[] copyData(int start, final int length) {\n+            char[] newData = copyData(start, length);\n+            return createCologneBuffer(newData);\n+        }\n+\n+        public String toString() {\n+            return new String(copyData(0, length));\n+        }\n+    }\n+\n+    private class CologneLeftBuffer extends CologneBuffer {\n+\n+        public CologneLeftBuffer(char[] data) {\n+            super(data);\n+        }\n+\n+        public CologneLeftBuffer(int buffSize) {\n+            super(buffSize);\n+        }\n+\n+        protected char[] copyData(int start, final int length) {\n             char[] retData = new char[length];\n-\n             System.arraycopy(data, start, retData, 0, length);\n             return retData;\n         }\n \n-        public char getLast() {\n-            return data[length - 1];\n+        protected CologneBuffer createCologneBuffer(char[] data) {\n+            return new CologneLeftBuffer(data);\n         }\n \n         public void putRight(char chr) {\n             data[length] = chr;\n             length++;\n         }\n-\n-        public char dropLast() {\n+    }\n+\n+    private class CologneRightBuffer extends CologneBuffer {\n+\n+        public CologneRightBuffer(char[] data) {\n+            super(data);\n+        }\n+\n+        protected char[] copyData(int start, final int length) {\n+            char[] newData = new char[length];\n+            System.arraycopy(data, data.length - this.length + start, newData, 0, length);\n+            return newData;\n+        }\n+\n+        protected CologneBuffer createCologneBuffer(char[] data) {\n+            return new CologneRightBuffer(data);\n+        }\n+\n+        public char dropNext() {\n+            char ch = data[data.length - length];\n             length--;\n-            return data[length];\n-        }\n-\n-        public String toString() {\n-            return new String(copyData(0, length));\n-        }\n-    }\n-\n-    private class CologneRightBuffer implements CharSequence {\n-\n-        private int length = 0;\n-        private final char[] data;\n-\n-        public CologneRightBuffer(int buffSize) {\n-            data = new char[buffSize];\n-        }\n-\n-        public CologneRightBuffer(char[] data) {\n-            this.data = data;\n-            this.length = data.length;\n-        }\n-\n-        public int length() {\n-            return length;\n-        }\n-\n-        public char charAt(int index) {\n-            if (index < length) {\n-                return data[data.length - length + index];\n-            } else {\n-                throw new IndexOutOfBoundsException();\n-            }\n-        }\n-\n-        public CharSequence subSequence(int start, int end) {\n-            final int length = end - start;\n-            char[] newData = copyData(start, length);\n-\n-            return new CologneRightBuffer(newData);\n-        }\n-\n-        private char[] copyData(int start, final int length) {\n-            char[] newData = new char[length];\n-\n-            System.arraycopy(data, data.length - this.length + start, newData,\n-                    0, length);\n-            return newData;\n-        }\n-\n-        public void putLeft(char chr) {\n-            length++;\n-            data[data.length - length] = chr;\n+            return ch;\n         }\n \n         public char getNext() {\n             return data[data.length - length];\n         }\n-\n-        public char dropNext() {\n-            char ret = data[data.length - length];\n-            length--;\n-\n-            return ret;\n-        }\n-\n-        public String toString() {\n-            return new String(copyData(0, length));\n-        }\n-\n+        \n+        public void putLeft(char ch) {\n+            length++;\n+            data[data.length - length] = ch;\n+        }\n     }\n \n     private static final char[][] PRE_REPLACEMENTS = new char[][] {\n      * @return the corresponding encoding according to the <i>K\u00f6lner\n      *         Phonetik</i> algorithm\n      */\n-\n     public String colognePhonetic(String text) {\n         if (text == null) {\n             return null;\n             lastChar = chr;\n             lastCode = code;\n         }\n-\n         return left.toString();\n     }\n \n                 return true;\n             }\n         }\n-\n         return false;\n     }\n ", "timestamp": 1295974328, "metainfo": ""}