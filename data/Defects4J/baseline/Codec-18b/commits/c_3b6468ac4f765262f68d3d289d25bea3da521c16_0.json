{"sha": "3b6468ac4f765262f68d3d289d25bea3da521c16", "log": "CODEC-206 Add java.io.File APIs to DigestUtils Drop algo-specific methods in favour of generic ones  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/digest/DigestUtils.java\n+++ b/src/main/java/org/apache/commons/codec/digest/DigestUtils.java\n  * import static org.apache.commons.codec.digest.MessageDigestAlgorithms.SHA_224;\n  * ...\n  * byte [] digest = DigestUtils.digest(SHA_224, dataToDigest);\n+ * byte [] pommed = DigestUtils.digest(SHA_224, new File(\"pom.xml\"));\n  * </pre>\n  * </code>\n  * @see MessageDigestAlgorithms\n      * @return MD2 digest\n      * @throws IOException\n      *             On error reading from the stream\n-     * @since 1.11\n-     */\n-    public static byte[] md2(final File data) throws IOException {\n-        return digest(getMd2Digest(), data);\n-    }\n-\n-    /**\n-     * Calculates the MD2 digest and returns the value as a 16 element <code>byte[]</code>.\n-     *\n-     * @param data\n-     *            Data to digest\n-     * @return MD2 digest\n-     * @throws IOException\n-     *             On error reading from the stream\n      * @since 1.7\n      */\n     public static byte[] md2(final InputStream data) throws IOException {\n      * @return MD2 digest as a hex string\n      * @throws IOException\n      *             On error reading from the stream\n-     * @since 1.11\n-     */\n-    public static String md2Hex(final File data) throws IOException {\n-        return Hex.encodeHexString(md2(data));\n-    }\n-\n-    /**\n-     * Calculates the MD2 digest and returns the value as a 32 character hex string.\n-     *\n-     * @param data\n-     *            Data to digest\n-     * @return MD2 digest as a hex string\n-     * @throws IOException\n-     *             On error reading from the stream\n      * @since 1.7\n      */\n     public static String md2Hex(final InputStream data) throws IOException {\n      * @return MD5 digest\n      * @throws IOException\n      *             On error reading from the stream\n-     * @since 1.11\n-     */\n-    public static byte[] md5(final File data) throws IOException {\n-        return digest(getMd5Digest(), data);\n-    }\n-\n-    /**\n-     * Calculates the MD5 digest and returns the value as a 16 element <code>byte[]</code>.\n-     *\n-     * @param data\n-     *            Data to digest\n-     * @return MD5 digest\n-     * @throws IOException\n-     *             On error reading from the stream\n      * @since 1.4\n      */\n     public static byte[] md5(final InputStream data) throws IOException {\n      * @since 1.11\n      */\n     public static String md5Hex(final ByteBuffer data) {\n-        return Hex.encodeHexString(md5(data));\n-    }\n-\n-    /**\n-     * Calculates the MD5 digest and returns the value as a 32 character hex string.\n-     *\n-     * @param data\n-     *            Data to digest\n-     * @return MD5 digest as a hex string\n-     * @throws IOException\n-     *             On error reading from the stream\n-     * @since 1.11\n-     */\n-    public static String md5Hex(final File data) throws IOException {\n         return Hex.encodeHexString(md5(data));\n     }\n \n      * @return SHA-1 digest\n      * @throws IOException\n      *             On error reading from the stream\n-     * @since 1.11\n-     */\n-    public static byte[] sha1(final File data) throws IOException {\n-        return digest(getSha1Digest(), data);\n-    }\n-\n-    /**\n-     * Calculates the SHA-1 digest and returns the value as a <code>byte[]</code>.\n-     *\n-     * @param data\n-     *            Data to digest\n-     * @return SHA-1 digest\n-     * @throws IOException\n-     *             On error reading from the stream\n      * @since 1.7\n      */\n     public static byte[] sha1(final InputStream data) throws IOException {\n      * @return SHA-1 digest as a hex string\n      * @throws IOException\n      *             On error reading from the stream\n-     * @since 1.11\n-     */\n-    public static String sha1Hex(final File data) throws IOException {\n-        return Hex.encodeHexString(sha1(data));\n-    }\n-\n-    /**\n-     * Calculates the SHA-1 digest and returns the value as a hex string.\n-     *\n-     * @param data\n-     *            Data to digest\n-     * @return SHA-1 digest as a hex string\n-     * @throws IOException\n-     *             On error reading from the stream\n      * @since 1.7\n      */\n     public static String sha1Hex(final InputStream data) throws IOException {\n      * </p>\n      *\n      * @param data\n-     *            File to digest\n-     * @return SHA-256 digest\n-     * @throws IOException\n-     *             On error reading from the stream\n-     * @since 1.11\n-     */\n-    public static byte[] sha256(final File data) throws IOException {\n-        return digest(getSha256Digest(), data);\n-    }\n-\n-    /**\n-     * Calculates the SHA-256 digest and returns the value as a <code>byte[]</code>.\n-     * <p>\n-     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n-     * </p>\n-     *\n-     * @param data\n      *            Data to digest\n      * @return SHA-256 digest\n      * @throws IOException\n      * @return SHA-256 digest as a hex string\n      * @throws IOException\n      *             On error reading from the stream\n-     * @since 1.11\n-     */\n-    public static String sha256Hex(final File data) throws IOException {\n-        return Hex.encodeHexString(sha256(data));\n-    }\n-\n-    /**\n-     * Calculates the SHA-256 digest and returns the value as a hex string.\n-     * <p>\n-     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n-     * </p>\n-     *\n-     * @param data\n-     *            Data to digest\n-     * @return SHA-256 digest as a hex string\n-     * @throws IOException\n-     *             On error reading from the stream\n      * @since 1.4\n      */\n     public static String sha256Hex(final InputStream data) throws IOException {\n      * </p>\n      *\n      * @param data\n-     *            File to digest\n-     * @return SHA-384 digest\n-     * @throws IOException\n-     *             On error reading from the stream\n-     * @since 1.11\n-     */\n-    public static byte[] sha384(final File data) throws IOException {\n-        return digest(getSha384Digest(), data);\n-    }\n-\n-    /**\n-     * Calculates the SHA-384 digest and returns the value as a <code>byte[]</code>.\n-     * <p>\n-     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n-     * </p>\n-     *\n-     * @param data\n      *            Data to digest\n      * @return SHA-384 digest\n      * @throws IOException\n      * @return SHA-384 digest as a hex string\n      * @throws IOException\n      *             On error reading from the stream\n-     * @since 1.11\n-     */\n-    public static String sha384Hex(final File data) throws IOException {\n-        return Hex.encodeHexString(sha384(data));\n-    }\n-\n-    /**\n-     * Calculates the SHA-384 digest and returns the value as a hex string.\n-     * <p>\n-     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n-     * </p>\n-     *\n-     * @param data\n-     *            Data to digest\n-     * @return SHA-384 digest as a hex string\n-     * @throws IOException\n-     *             On error reading from the stream\n      * @since 1.4\n      */\n     public static String sha384Hex(final InputStream data) throws IOException {\n      * </p>\n      *\n      * @param data\n-     *            File to digest\n-     * @return SHA-512 digest\n-     * @throws IOException\n-     *             On error reading from the stream\n-     * @since 1.11\n-     */\n-    public static byte[] sha512(final File data) throws IOException {\n-        return digest(getSha512Digest(), data);\n-    }\n-\n-    /**\n-     * Calculates the SHA-512 digest and returns the value as a <code>byte[]</code>.\n-     * <p>\n-     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n-     * </p>\n-     *\n-     * @param data\n      *            Data to digest\n      * @return SHA-512 digest\n      * @throws IOException\n      * @since 1.11\n      */\n     public static String sha512Hex(final ByteBuffer data) {\n-        return Hex.encodeHexString(sha512(data));\n-    }\n-\n-    /**\n-     * Calculates the SHA-512 digest and returns the value as a hex string.\n-     * <p>\n-     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n-     * </p>\n-     *\n-     * @param data\n-     *            File to digest\n-     * @return SHA-512 digest as a hex string\n-     * @throws IOException\n-     *             On error reading from the stream\n-     * @since 1.11\n-     */\n-    public static String sha512Hex(File data) throws IOException {\n         return Hex.encodeHexString(sha512(data));\n     }\n ", "timestamp": 1463579699, "metainfo": ""}