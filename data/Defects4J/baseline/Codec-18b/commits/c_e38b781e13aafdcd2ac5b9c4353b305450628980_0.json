{"sha": "e38b781e13aafdcd2ac5b9c4353b305450628980", "log": "Renamed Binary to BinaryCodec.   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/codec/binary/BinaryCodec.java\n+/*\n+ * Copyright 2001-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */ \n+\n+package org.apache.commons.codec.binary;\n+\n+import org.apache.commons.codec.BinaryDecoder;\n+import org.apache.commons.codec.BinaryEncoder;\n+import org.apache.commons.codec.DecoderException;\n+import org.apache.commons.codec.EncoderException;\n+\n+/**\n+ * Encodes and decodes byte arrays to and from ASCII bit Strings.\n+ * \n+ * @todo may want to add more bit vector functions like and/or/xor/nand \n+ * @todo also might be good to generate boolean[]\n+ * from byte[] et. cetera.\n+ * \n+ * @author Apache Software Foundation\n+ * @since 1.3\n+ * @version $Id $\n+ */\n+public class BinaryCodec implements BinaryDecoder, BinaryEncoder {\n+    /*\n+     * tried to avoid using ArrayUtils to minimize dependencies while using these empty arrays - dep is just not worth\n+     * it.\n+     */\n+    /** Empty char array. */\n+    private static final char[] EMPTY_CHAR_ARRAY = new char[0];\n+\n+    /** Empty byte array. */\n+    private static final byte[] EMPTY_BYTE_ARRAY = new byte[0];\n+\n+    /** Mask for bit 0 of a byte. */\n+    private static final int BIT_0 = 1;\n+\n+    /** Mask for bit 1 of a byte. */\n+    private static final int BIT_1 = 0x02;\n+\n+    /** Mask for bit 2 of a byte. */\n+    private static final int BIT_2 = 0x04;\n+\n+    /** Mask for bit 3 of a byte. */\n+    private static final int BIT_3 = 0x08;\n+\n+    /** Mask for bit 4 of a byte. */\n+    private static final int BIT_4 = 0x10;\n+\n+    /** Mask for bit 5 of a byte. */\n+    private static final int BIT_5 = 0x20;\n+\n+    /** Mask for bit 6 of a byte. */\n+    private static final int BIT_6 = 0x40;\n+\n+    /** Mask for bit 7 of a byte. */\n+    private static final int BIT_7 = 0x80;\n+\n+    private static final int[] BITS = {BIT_0, BIT_1, BIT_2, BIT_3, BIT_4, BIT_5, BIT_6, BIT_7};\n+\n+    /**\n+     * Converts an array of raw binary data into an array of ascii 0 and 1 characters.\n+     * \n+     * @param raw\n+     *                  the raw binary data to convert\n+     * @return 0 and 1 ascii character bytes one for each bit of the argument\n+     * @see org.apache.commons.codec.BinaryEncoder#encode(byte[])\n+     */\n+    public byte[] encode(byte[] raw) {\n+        return toAsciiBytes(raw);\n+    }\n+\n+    /**\n+     * Converts an array of raw binary data into an array of ascii 0 and 1 chars.\n+     * \n+     * @param raw\n+     *                  the raw binary data to convert\n+     * @return 0 and 1 ascii character chars one for each bit of the argument\n+     * @throws EncoderException\n+     *                  if the argument is not a byte[]\n+     * @see org.apache.commons.codec.Encoder#encode(java.lang.Object)\n+     */\n+    public Object encode(Object raw) throws EncoderException {\n+        if (!(raw instanceof byte[])) {\n+            throw new EncoderException(\"argument not a byte array\");\n+        }\n+        return toAsciiChars((byte[]) raw);\n+    }\n+\n+    /**\n+     * Decodes a byte array where each byte represents an ascii '0' or '1'.\n+     * \n+     * @param ascii\n+     *                  each byte represents an ascii '0' or '1'\n+     * @return the raw encoded binary where each bit corresponds to a byte in the byte array argument\n+     * @throws DecoderException\n+     *                  if argument is not a byte[], char[] or String\n+     * @see org.apache.commons.codec.Decoder#decode(java.lang.Object)\n+     */\n+    public Object decode(Object ascii) throws DecoderException {\n+        if (ascii == null) {\n+            return EMPTY_BYTE_ARRAY;\n+        }\n+        if (ascii instanceof byte[]) {\n+            return fromAscii((byte[]) ascii);\n+        }\n+        if (ascii instanceof char[]) {\n+            return fromAscii((char[]) ascii);\n+        }\n+        if (ascii instanceof String) {\n+            return fromAscii(((String) ascii).toCharArray());\n+        }\n+        throw new DecoderException(\"argument not a byte array\");\n+    }\n+\n+    /**\n+     * Decodes a byte array where each byte represents an ascii '0' or '1'.\n+     * \n+     * @param ascii\n+     *                  each byte represents an ascii '0' or '1'\n+     * @return the raw encoded binary where each bit corresponds to a byte in the byte array argument\n+     * @see org.apache.commons.codec.Decoder#decode(Object)\n+     */\n+    public byte[] decode(byte[] ascii) {\n+        return fromAscii(ascii);\n+    }\n+\n+    /**\n+     * Decodes a String where each char of the String represents an ascii '0' or '1'.\n+     * \n+     * @param ascii\n+     *                  String of '0' and '1' characters\n+     * @return the raw encoded binary where each bit corresponds to a byte in the byte array argument\n+     * @see org.apache.commons.codec.Decoder#decode(Object)\n+     */\n+    public byte[] toByteArray(String ascii) {\n+        if (ascii == null) {\n+            return EMPTY_BYTE_ARRAY;\n+        }\n+        return fromAscii(ascii.toCharArray());\n+    }\n+\n+    // ------------------------------------------------------------------------\n+    //\n+    // static codec operations\n+    //\n+    // ------------------------------------------------------------------------\n+    /**\n+     * Decodes a byte array where each char represents an ascii '0' or '1'.\n+     * \n+     * @param ascii\n+     *                  each char represents an ascii '0' or '1'\n+     * @return the raw encoded binary where each bit corresponds to a char in the char array argument\n+     */\n+    public static byte[] fromAscii(char[] ascii) {\n+        if (ascii == null || ascii.length == 0) {\n+            return EMPTY_BYTE_ARRAY;\n+        }\n+        // get length/8 times bytes with 3 bit shifts to the right of the length\n+        byte[] l_raw = new byte[ascii.length >> 3];\n+        /*\n+         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n+         * loop.\n+         */\n+        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n+            for (int bits = 0; bits < BITS.length; ++bits) {\n+                if (ascii[jj - bits] == '1') {\n+                    l_raw[ii] |= BITS[bits];\n+                }\n+            }\n+        }\n+        return l_raw;\n+    }\n+\n+    /**\n+     * Decodes a byte array where each byte represents an ascii '0' or '1'.\n+     * \n+     * @param ascii\n+     *                  each byte represents an ascii '0' or '1'\n+     * @return the raw encoded binary where each bit corresponds to a byte in the byte array argument\n+     */\n+    public static byte[] fromAscii(byte[] ascii) {\n+        if (ascii == null || ascii.length == 0) {\n+            return EMPTY_BYTE_ARRAY;\n+        }\n+        // get length/8 times bytes with 3 bit shifts to the right of the length\n+        byte[] l_raw = new byte[ascii.length >> 3];\n+        /*\n+         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n+         * loop.\n+         */\n+        for (int ii = 0, jj = ascii.length - 1; ii < l_raw.length; ii++, jj -= 8) {\n+            for (int bits = 0; bits < BITS.length; ++bits) {\n+                if (ascii[jj - bits] == '1') {\n+                    l_raw[ii] |= BITS[bits];\n+                }\n+            }\n+        }\n+        return l_raw;\n+    }\n+\n+    /**\n+     * Converts an array of raw binary data into an array of ascii 0 and 1 character bytes - each byte is a truncated\n+     * char.\n+     * \n+     * @param raw\n+     *                  the raw binary data to convert\n+     * @return an array of 0 and 1 character bytes for each bit of the argument\n+     * @see org.apache.commons.codec.BinaryEncoder#encode(byte[])\n+     */\n+    public static byte[] toAsciiBytes(byte[] raw) {\n+        if (raw == null || raw.length == 0) {\n+            return EMPTY_BYTE_ARRAY;\n+        }\n+        // get 8 times the bytes with 3 bit shifts to the left of the length\n+        byte[] l_ascii = new byte[raw.length << 3];\n+        /*\n+         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n+         * loop.\n+         */\n+        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n+            for (int bits = 0; bits < BITS.length; ++bits) {\n+                if ((raw[ii] & BITS[bits]) == 0) {\n+                    l_ascii[jj - bits] = '0';\n+                } else {\n+                    l_ascii[jj - bits] = '1';\n+                }\n+            }\n+        }\n+        return l_ascii;\n+    }\n+\n+    /**\n+     * Converts an array of raw binary data into an array of ascii 0 and 1 characters.\n+     * \n+     * @param raw\n+     *                  the raw binary data to convert\n+     * @return an array of 0 and 1 characters for each bit of the argument\n+     * @see org.apache.commons.codec.BinaryEncoder#encode(byte[])\n+     */\n+    public static char[] toAsciiChars(byte[] raw) {\n+        if (raw == null || raw.length == 0) {\n+            return EMPTY_CHAR_ARRAY;\n+        }\n+        // get 8 times the bytes with 3 bit shifts to the left of the length\n+        char[] l_ascii = new char[raw.length << 3];\n+        /*\n+         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the\n+         * loop.\n+         */\n+        for (int ii = 0, jj = l_ascii.length - 1; ii < raw.length; ii++, jj -= 8) {\n+            for (int bits = 0; bits < BITS.length; ++bits) {\n+                if ((raw[ii] & BITS[bits]) == 0) {\n+                    l_ascii[jj - bits] = '0';\n+                } else {\n+                    l_ascii[jj - bits] = '1';\n+                }\n+            }\n+        }\n+        return l_ascii;\n+    }\n+\n+    /**\n+     * Converts an array of raw binary data into a String of ascii 0 and 1 characters.\n+     * \n+     * @param raw\n+     *                  the raw binary data to convert\n+     * @return a String of 0 and 1 characters representing the binary data\n+     * @see org.apache.commons.codec.BinaryEncoder#encode(byte[])\n+     */\n+    public static String toAsciiString(byte[] raw) {\n+        return new String(toAsciiChars(raw));\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/codec/binary/BinaryCodecTest.java\n+/*\n+ * Copyright 2001-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.codec.binary;\n+\n+import junit.framework.TestCase;\n+import org.apache.commons.codec.DecoderException;\n+import org.apache.commons.codec.EncoderException;\n+\n+/**\n+ * TestCase for BinaryCodec class.\n+ * \n+ * @author Apache Software Foundation\n+ * @version $Id: BinaryCodecTest.java,v 1.1 2004/03/29 23:04:41 ggregory Exp $\n+ */\n+public class BinaryCodecTest extends TestCase {\n+    /** mask with bit zero based index 0 raised */\n+    private static final int BIT_0 = 0x01;\n+\n+    /** mask with bit zero based index 0 raised */\n+    private static final int BIT_1 = 0x02;\n+\n+    /** mask with bit zero based index 0 raised */\n+    private static final int BIT_2 = 0x04;\n+\n+    /** mask with bit zero based index 0 raised */\n+    private static final int BIT_3 = 0x08;\n+\n+    /** mask with bit zero based index 0 raised */\n+    private static final int BIT_4 = 0x10;\n+\n+    /** mask with bit zero based index 0 raised */\n+    private static final int BIT_5 = 0x20;\n+\n+    /** mask with bit zero based index 0 raised */\n+    private static final int BIT_6 = 0x40;\n+\n+    /** mask with bit zero based index 0 raised */\n+    private static final int BIT_7 = 0x80;\n+\n+    /** an instance of the binary codec */\n+    BinaryCodec instance = null;\n+\n+    /*\n+     * @see TestCase#setUp()\n+     */\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        this.instance = new BinaryCodec();\n+    }\n+\n+    /*\n+     * @see TestCase#tearDown()\n+     */\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+        this.instance = null;\n+    }\n+\n+    /**\n+     * Constructor for BinaryTest.\n+     * \n+     * @param arg0\n+     */\n+    public BinaryCodecTest(String arg0) {\n+        super(arg0);\n+    }\n+\n+    // ------------------------------------------------------------------------\n+    //\n+    // Test decode(Object)\n+    //\n+    // ------------------------------------------------------------------------\n+    /**\n+     * Tests for Object decode(Object)\n+     */\n+    public void testDecodeObjectException() {\n+        try {\n+            this.instance.decode(new Object());\n+        } catch (DecoderException e) {\n+            // all is well.\n+            return;\n+        }\n+        fail(\"Expected DecoderException\");\n+    }\n+\n+    /**\n+     * Tests for Object decode(Object)\n+     */\n+    public void testDecodeObject() throws Exception {\n+        byte[] bits;\n+        // With a single raw binary\n+        bits = new byte[1];\n+        assertDecodeObject(bits, \"00000000\");\n+        bits = new byte[1];\n+        bits[0] = BIT_0;\n+        assertDecodeObject(bits, \"00000001\");\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1;\n+        assertDecodeObject(bits, \"00000011\");\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2;\n+        assertDecodeObject(bits, \"00000111\");\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n+        assertDecodeObject(bits, \"00001111\");\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n+        assertDecodeObject(bits, \"00011111\");\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n+        assertDecodeObject(bits, \"00111111\");\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n+        assertDecodeObject(bits, \"01111111\");\n+        bits = new byte[1];\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        assertDecodeObject(bits, \"11111111\");\n+        // With a two raw binaries\n+        bits = new byte[2];\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        assertDecodeObject(bits, \"0000000011111111\");\n+        bits = new byte[2];\n+        bits[1] = BIT_0;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        assertDecodeObject(bits, \"0000000111111111\");\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        assertDecodeObject(bits, \"0000001111111111\");\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        assertDecodeObject(bits, \"0000011111111111\");\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        assertDecodeObject(bits, \"0000111111111111\");\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        assertDecodeObject(bits, \"0001111111111111\");\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        assertDecodeObject(bits, \"0011111111111111\");\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        assertDecodeObject(bits, \"0111111111111111\");\n+        bits = new byte[2];\n+        bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        assertDecodeObject(bits, \"1111111111111111\");\n+        assertDecodeObject(new byte[0], null);\n+    }\n+\n+    // ------------------------------------------------------------------------\n+    //\n+    // Test decode(byte[])\n+    //\n+    // ------------------------------------------------------------------------\n+    /**\n+     * Utility used to assert the encoded and decoded values.\n+     * \n+     * @param bits\n+     *                  the pre-encoded data\n+     * @param encodeMe\n+     *                  data to encode and compare\n+     */\n+    void assertDecodeObject(byte[] bits, String encodeMe) throws DecoderException {\n+        byte[] decoded;\n+        decoded = (byte[]) instance.decode(encodeMe);\n+        assertEquals(new String(bits), new String(decoded));\n+        if (encodeMe == null) {\n+            decoded = instance.decode((byte[]) null);\n+        } else {\n+            decoded = (byte[]) instance.decode((Object) encodeMe.getBytes());\n+        }\n+        assertEquals(new String(bits), new String(decoded));\n+        if (encodeMe == null) {\n+            decoded = (byte[]) instance.decode((char[]) null);\n+        } else {\n+            decoded = (byte[]) instance.decode(encodeMe.toCharArray());\n+        }\n+        assertEquals(new String(bits), new String(decoded));\n+    }\n+\n+    /*\n+     * Tests for byte[] decode(byte[])\n+     */\n+    public void testDecodebyteArray() {\n+        // With a single raw binary\n+        byte[] bits = new byte[1];\n+        byte[] decoded = instance.decode(\"00000000\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0;\n+        decoded = instance.decode(\"00000001\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1;\n+        decoded = instance.decode(\"00000011\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2;\n+        decoded = instance.decode(\"00000111\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n+        decoded = instance.decode(\"00001111\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n+        decoded = instance.decode(\"00011111\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n+        decoded = instance.decode(\"00111111\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n+        decoded = instance.decode(\"01111111\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = instance.decode(\"11111111\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        // With a two raw binaries\n+        bits = new byte[2];\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = instance.decode(\"0000000011111111\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[2];\n+        bits[1] = BIT_0;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = instance.decode(\"0000000111111111\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = instance.decode(\"0000001111111111\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = instance.decode(\"0000011111111111\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = instance.decode(\"0000111111111111\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = instance.decode(\"0001111111111111\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = instance.decode(\"0011111111111111\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = instance.decode(\"0111111111111111\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[2];\n+        bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = instance.decode(\"1111111111111111\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+    }\n+\n+    // ------------------------------------------------------------------------\n+    //\n+    // Test toByteArray(String)\n+    //\n+    // ------------------------------------------------------------------------\n+    /*\n+     * Tests for byte[] toByteArray(String)\n+     */\n+    public void testToByteArrayFromString() {\n+        // With a single raw binary\n+        byte[] bits = new byte[1];\n+        byte[] decoded = instance.toByteArray(\"00000000\");\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0;\n+        decoded = instance.toByteArray(\"00000001\");\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1;\n+        decoded = instance.toByteArray(\"00000011\");\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2;\n+        decoded = instance.toByteArray(\"00000111\");\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n+        decoded = instance.toByteArray(\"00001111\");\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n+        decoded = instance.toByteArray(\"00011111\");\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n+        decoded = instance.toByteArray(\"00111111\");\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n+        decoded = instance.toByteArray(\"01111111\");\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = instance.toByteArray(\"11111111\");\n+        assertEquals(new String(bits), new String(decoded));\n+        // With a two raw binaries\n+        bits = new byte[2];\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = instance.toByteArray(\"0000000011111111\");\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[2];\n+        bits[1] = BIT_0;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = instance.toByteArray(\"0000000111111111\");\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = instance.toByteArray(\"0000001111111111\");\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = instance.toByteArray(\"0000011111111111\");\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = instance.toByteArray(\"0000111111111111\");\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = instance.toByteArray(\"0001111111111111\");\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = instance.toByteArray(\"0011111111111111\");\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = instance.toByteArray(\"0111111111111111\");\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[2];\n+        bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = instance.toByteArray(\"1111111111111111\");\n+        assertEquals(new String(bits), new String(decoded));\n+        assertEquals(0, instance.toByteArray((String) null).length);\n+    }\n+\n+    // ------------------------------------------------------------------------\n+    //\n+    // Test fromAscii(char[])\n+    //\n+    // ------------------------------------------------------------------------\n+    /*\n+     * Tests for byte[] fromAscii(char[])\n+     */\n+    public void testFromAsciicharArray() {\n+        // With a single raw binary\n+        byte[] bits = new byte[1];\n+        byte[] decoded = BinaryCodec.fromAscii(\"00000000\".toCharArray());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0;\n+        decoded = BinaryCodec.fromAscii(\"00000001\".toCharArray());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1;\n+        decoded = BinaryCodec.fromAscii(\"00000011\".toCharArray());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2;\n+        decoded = BinaryCodec.fromAscii(\"00000111\".toCharArray());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n+        decoded = BinaryCodec.fromAscii(\"00001111\".toCharArray());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n+        decoded = BinaryCodec.fromAscii(\"00011111\".toCharArray());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n+        decoded = BinaryCodec.fromAscii(\"00111111\".toCharArray());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n+        decoded = BinaryCodec.fromAscii(\"01111111\".toCharArray());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = BinaryCodec.fromAscii(\"11111111\".toCharArray());\n+        assertEquals(new String(bits), new String(decoded));\n+        // With a two raw binaries\n+        bits = new byte[2];\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = BinaryCodec.fromAscii(\"0000000011111111\".toCharArray());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[2];\n+        bits[1] = BIT_0;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = BinaryCodec.fromAscii(\"0000000111111111\".toCharArray());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = BinaryCodec.fromAscii(\"0000001111111111\".toCharArray());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = BinaryCodec.fromAscii(\"0000011111111111\".toCharArray());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = BinaryCodec.fromAscii(\"0000111111111111\".toCharArray());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = BinaryCodec.fromAscii(\"0001111111111111\".toCharArray());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = BinaryCodec.fromAscii(\"0011111111111111\".toCharArray());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = BinaryCodec.fromAscii(\"0111111111111111\".toCharArray());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[2];\n+        bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = BinaryCodec.fromAscii(\"1111111111111111\".toCharArray());\n+        assertEquals(new String(bits), new String(decoded));\n+        assertEquals(0, BinaryCodec.fromAscii((char[]) null).length);\n+    }\n+\n+    // ------------------------------------------------------------------------\n+    //\n+    // Test fromAscii(byte[])\n+    //\n+    // ------------------------------------------------------------------------\n+    /*\n+     * Tests for byte[] fromAscii(byte[])\n+     */\n+    public void testFromAsciibyteArray() {\n+        // With a single raw binary\n+        byte[] bits = new byte[1];\n+        byte[] decoded = BinaryCodec.fromAscii(\"00000000\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0;\n+        decoded = BinaryCodec.fromAscii(\"00000001\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1;\n+        decoded = BinaryCodec.fromAscii(\"00000011\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2;\n+        decoded = BinaryCodec.fromAscii(\"00000111\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n+        decoded = BinaryCodec.fromAscii(\"00001111\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n+        decoded = BinaryCodec.fromAscii(\"00011111\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n+        decoded = BinaryCodec.fromAscii(\"00111111\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n+        decoded = BinaryCodec.fromAscii(\"01111111\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = BinaryCodec.fromAscii(\"11111111\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        // With a two raw binaries\n+        bits = new byte[2];\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = BinaryCodec.fromAscii(\"0000000011111111\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[2];\n+        bits[1] = BIT_0;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = BinaryCodec.fromAscii(\"0000000111111111\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = BinaryCodec.fromAscii(\"0000001111111111\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = BinaryCodec.fromAscii(\"0000011111111111\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = BinaryCodec.fromAscii(\"0000111111111111\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = BinaryCodec.fromAscii(\"0001111111111111\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = BinaryCodec.fromAscii(\"0011111111111111\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = BinaryCodec.fromAscii(\"0111111111111111\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[2];\n+        bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = BinaryCodec.fromAscii(\"1111111111111111\".getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        assertEquals(0, BinaryCodec.fromAscii((byte[]) null).length);\n+    }\n+\n+    // ------------------------------------------------------------------------\n+    //\n+    // Test encode(byte[])\n+    //\n+    // ------------------------------------------------------------------------\n+    /*\n+     * Tests for byte[] encode(byte[])\n+     */\n+    public void testEncodebyteArray() {\n+        // With a single raw binary\n+        byte[] bits = new byte[1];\n+        String l_encoded = new String(instance.encode(bits));\n+        assertEquals(\"00000000\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = BIT_0;\n+        l_encoded = new String(instance.encode(bits));\n+        assertEquals(\"00000001\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1;\n+        l_encoded = new String(instance.encode(bits));\n+        assertEquals(\"00000011\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2;\n+        l_encoded = new String(instance.encode(bits));\n+        assertEquals(\"00000111\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n+        l_encoded = new String(instance.encode(bits));\n+        assertEquals(\"00001111\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n+        l_encoded = new String(instance.encode(bits));\n+        assertEquals(\"00011111\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n+        l_encoded = new String(instance.encode(bits));\n+        assertEquals(\"00111111\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n+        l_encoded = new String(instance.encode(bits));\n+        assertEquals(\"01111111\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String(instance.encode(bits));\n+        assertEquals(\"11111111\", l_encoded);\n+        // With a two raw binaries\n+        bits = new byte[2];\n+        l_encoded = new String(instance.encode(bits));\n+        assertEquals(\"0000000000000000\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = BIT_0;\n+        l_encoded = new String(instance.encode(bits));\n+        assertEquals(\"0000000000000001\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = BIT_0 | BIT_1;\n+        l_encoded = new String(instance.encode(bits));\n+        assertEquals(\"0000000000000011\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2;\n+        l_encoded = new String(instance.encode(bits));\n+        assertEquals(\"0000000000000111\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n+        l_encoded = new String(instance.encode(bits));\n+        assertEquals(\"0000000000001111\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n+        l_encoded = new String(instance.encode(bits));\n+        assertEquals(\"0000000000011111\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n+        l_encoded = new String(instance.encode(bits));\n+        assertEquals(\"0000000000111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n+        l_encoded = new String(instance.encode(bits));\n+        assertEquals(\"0000000001111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String(instance.encode(bits));\n+        assertEquals(\"0000000011111111\", l_encoded);\n+        // work on the other byte now\n+        bits = new byte[2];\n+        bits[1] = BIT_0;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String(instance.encode(bits));\n+        assertEquals(\"0000000111111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String(instance.encode(bits));\n+        assertEquals(\"0000001111111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String(instance.encode(bits));\n+        assertEquals(\"0000011111111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String(instance.encode(bits));\n+        assertEquals(\"0000111111111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String(instance.encode(bits));\n+        assertEquals(\"0001111111111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String(instance.encode(bits));\n+        assertEquals(\"0011111111111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String(instance.encode(bits));\n+        assertEquals(\"0111111111111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String(instance.encode(bits));\n+        assertEquals(\"1111111111111111\", l_encoded);\n+        assertEquals(0, instance.encode((byte[]) null).length);\n+    }\n+\n+    // ------------------------------------------------------------------------\n+    //\n+    // Test toAsciiBytes\n+    //\n+    // ------------------------------------------------------------------------\n+    public void testToAsciiBytes() {\n+        // With a single raw binary\n+        byte[] bits = new byte[1];\n+        String l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n+        assertEquals(\"00000000\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = BIT_0;\n+        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n+        assertEquals(\"00000001\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1;\n+        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n+        assertEquals(\"00000011\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2;\n+        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n+        assertEquals(\"00000111\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n+        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n+        assertEquals(\"00001111\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n+        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n+        assertEquals(\"00011111\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n+        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n+        assertEquals(\"00111111\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n+        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n+        assertEquals(\"01111111\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n+        assertEquals(\"11111111\", l_encoded);\n+        // With a two raw binaries\n+        bits = new byte[2];\n+        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n+        assertEquals(\"0000000000000000\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = BIT_0;\n+        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n+        assertEquals(\"0000000000000001\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = BIT_0 | BIT_1;\n+        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n+        assertEquals(\"0000000000000011\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2;\n+        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n+        assertEquals(\"0000000000000111\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n+        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n+        assertEquals(\"0000000000001111\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n+        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n+        assertEquals(\"0000000000011111\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n+        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n+        assertEquals(\"0000000000111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n+        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n+        assertEquals(\"0000000001111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n+        assertEquals(\"0000000011111111\", l_encoded);\n+        // work on the other byte now\n+        bits = new byte[2];\n+        bits[1] = BIT_0;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n+        assertEquals(\"0000000111111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n+        assertEquals(\"0000001111111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n+        assertEquals(\"0000011111111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n+        assertEquals(\"0000111111111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n+        assertEquals(\"0001111111111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n+        assertEquals(\"0011111111111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n+        assertEquals(\"0111111111111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String(BinaryCodec.toAsciiBytes(bits));\n+        assertEquals(\"1111111111111111\", l_encoded);\n+        assertEquals(0, BinaryCodec.toAsciiBytes((byte[]) null).length);\n+    }\n+\n+    // ------------------------------------------------------------------------\n+    //\n+    // Test toAsciiChars\n+    //\n+    // ------------------------------------------------------------------------\n+    public void testToAsciiChars() {\n+        // With a single raw binary\n+        byte[] bits = new byte[1];\n+        String l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n+        assertEquals(\"00000000\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = BIT_0;\n+        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n+        assertEquals(\"00000001\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1;\n+        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n+        assertEquals(\"00000011\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2;\n+        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n+        assertEquals(\"00000111\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n+        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n+        assertEquals(\"00001111\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n+        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n+        assertEquals(\"00011111\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n+        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n+        assertEquals(\"00111111\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n+        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n+        assertEquals(\"01111111\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n+        assertEquals(\"11111111\", l_encoded);\n+        // With a two raw binaries\n+        bits = new byte[2];\n+        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n+        assertEquals(\"0000000000000000\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = BIT_0;\n+        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n+        assertEquals(\"0000000000000001\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = BIT_0 | BIT_1;\n+        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n+        assertEquals(\"0000000000000011\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2;\n+        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n+        assertEquals(\"0000000000000111\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n+        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n+        assertEquals(\"0000000000001111\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n+        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n+        assertEquals(\"0000000000011111\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n+        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n+        assertEquals(\"0000000000111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n+        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n+        assertEquals(\"0000000001111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n+        assertEquals(\"0000000011111111\", l_encoded);\n+        // work on the other byte now\n+        bits = new byte[2];\n+        bits[1] = BIT_0;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n+        assertEquals(\"0000000111111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n+        assertEquals(\"0000001111111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n+        assertEquals(\"0000011111111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n+        assertEquals(\"0000111111111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n+        assertEquals(\"0001111111111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n+        assertEquals(\"0011111111111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n+        assertEquals(\"0111111111111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String(BinaryCodec.toAsciiChars(bits));\n+        assertEquals(\"1111111111111111\", l_encoded);\n+        assertEquals(0, BinaryCodec.toAsciiChars((byte[]) null).length);\n+    }\n+\n+    // ------------------------------------------------------------------------\n+    //\n+    // Test toAsciiString\n+    //\n+    // ------------------------------------------------------------------------\n+    /**\n+     * Tests the toAsciiString(byte[]) method\n+     */\n+    public void testToAsciiString() {\n+        // With a single raw binary\n+        byte[] bits = new byte[1];\n+        String l_encoded = BinaryCodec.toAsciiString(bits);\n+        assertEquals(\"00000000\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = BIT_0;\n+        l_encoded = BinaryCodec.toAsciiString(bits);\n+        assertEquals(\"00000001\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1;\n+        l_encoded = BinaryCodec.toAsciiString(bits);\n+        assertEquals(\"00000011\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2;\n+        l_encoded = BinaryCodec.toAsciiString(bits);\n+        assertEquals(\"00000111\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n+        l_encoded = BinaryCodec.toAsciiString(bits);\n+        assertEquals(\"00001111\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n+        l_encoded = BinaryCodec.toAsciiString(bits);\n+        assertEquals(\"00011111\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n+        l_encoded = BinaryCodec.toAsciiString(bits);\n+        assertEquals(\"00111111\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n+        l_encoded = BinaryCodec.toAsciiString(bits);\n+        assertEquals(\"01111111\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = BinaryCodec.toAsciiString(bits);\n+        assertEquals(\"11111111\", l_encoded);\n+        // With a two raw binaries\n+        bits = new byte[2];\n+        l_encoded = BinaryCodec.toAsciiString(bits);\n+        assertEquals(\"0000000000000000\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = BIT_0;\n+        l_encoded = BinaryCodec.toAsciiString(bits);\n+        assertEquals(\"0000000000000001\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = BIT_0 | BIT_1;\n+        l_encoded = BinaryCodec.toAsciiString(bits);\n+        assertEquals(\"0000000000000011\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2;\n+        l_encoded = BinaryCodec.toAsciiString(bits);\n+        assertEquals(\"0000000000000111\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n+        l_encoded = BinaryCodec.toAsciiString(bits);\n+        assertEquals(\"0000000000001111\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n+        l_encoded = BinaryCodec.toAsciiString(bits);\n+        assertEquals(\"0000000000011111\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n+        l_encoded = BinaryCodec.toAsciiString(bits);\n+        assertEquals(\"0000000000111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n+        l_encoded = BinaryCodec.toAsciiString(bits);\n+        assertEquals(\"0000000001111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = BinaryCodec.toAsciiString(bits);\n+        assertEquals(\"0000000011111111\", l_encoded);\n+        // work on the other byte now\n+        bits = new byte[2];\n+        bits[1] = BIT_0;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = BinaryCodec.toAsciiString(bits);\n+        assertEquals(\"0000000111111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = BinaryCodec.toAsciiString(bits);\n+        assertEquals(\"0000001111111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = BinaryCodec.toAsciiString(bits);\n+        assertEquals(\"0000011111111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = BinaryCodec.toAsciiString(bits);\n+        assertEquals(\"0000111111111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = BinaryCodec.toAsciiString(bits);\n+        assertEquals(\"0001111111111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = BinaryCodec.toAsciiString(bits);\n+        assertEquals(\"0011111111111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = BinaryCodec.toAsciiString(bits);\n+        assertEquals(\"0111111111111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = BinaryCodec.toAsciiString(bits);\n+        assertEquals(\"1111111111111111\", l_encoded);\n+    }\n+\n+    // ------------------------------------------------------------------------\n+    //\n+    // Test encode(Object)\n+    //\n+    // ------------------------------------------------------------------------\n+    /*\n+     * Tests for Object encode(Object)\n+     */\n+    public void testEncodeObjectNull() throws Exception {\n+        Object obj = new byte[0];\n+        assertEquals(0, ((char[]) instance.encode(obj)).length);\n+    }\n+\n+    /*\n+     * Tests for Object encode(Object)\n+     */\n+    public void testEncodeObjectException() {\n+        try {\n+            instance.encode(\"\");\n+        } catch (EncoderException e) {\n+            // all is well.\n+            return;\n+        }\n+        fail(\"Expected EncoderException\");\n+    }\n+\n+    /*\n+     * Tests for Object encode(Object)\n+     */\n+    public void testEncodeObject() throws Exception {\n+        // With a single raw binary\n+        byte[] bits = new byte[1];\n+        String l_encoded = new String((char[]) instance.encode((Object) bits));\n+        assertEquals(\"00000000\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = BIT_0;\n+        l_encoded = new String((char[]) instance.encode((Object) bits));\n+        assertEquals(\"00000001\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1;\n+        l_encoded = new String((char[]) instance.encode((Object) bits));\n+        assertEquals(\"00000011\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2;\n+        l_encoded = new String((char[]) instance.encode((Object) bits));\n+        assertEquals(\"00000111\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n+        l_encoded = new String((char[]) instance.encode((Object) bits));\n+        assertEquals(\"00001111\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n+        l_encoded = new String((char[]) instance.encode((Object) bits));\n+        assertEquals(\"00011111\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n+        l_encoded = new String((char[]) instance.encode((Object) bits));\n+        assertEquals(\"00111111\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n+        l_encoded = new String((char[]) instance.encode((Object) bits));\n+        assertEquals(\"01111111\", l_encoded);\n+        bits = new byte[1];\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String((char[]) instance.encode((Object) bits));\n+        assertEquals(\"11111111\", l_encoded);\n+        // With a two raw binaries\n+        bits = new byte[2];\n+        l_encoded = new String((char[]) instance.encode((Object) bits));\n+        assertEquals(\"0000000000000000\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = BIT_0;\n+        l_encoded = new String((char[]) instance.encode((Object) bits));\n+        assertEquals(\"0000000000000001\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = BIT_0 | BIT_1;\n+        l_encoded = new String((char[]) instance.encode((Object) bits));\n+        assertEquals(\"0000000000000011\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2;\n+        l_encoded = new String((char[]) instance.encode((Object) bits));\n+        assertEquals(\"0000000000000111\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n+        l_encoded = new String((char[]) instance.encode((Object) bits));\n+        assertEquals(\"0000000000001111\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n+        l_encoded = new String((char[]) instance.encode((Object) bits));\n+        assertEquals(\"0000000000011111\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n+        l_encoded = new String((char[]) instance.encode((Object) bits));\n+        assertEquals(\"0000000000111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n+        l_encoded = new String((char[]) instance.encode((Object) bits));\n+        assertEquals(\"0000000001111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String((char[]) instance.encode((Object) bits));\n+        assertEquals(\"0000000011111111\", l_encoded);\n+        // work on the other byte now\n+        bits = new byte[2];\n+        bits[1] = BIT_0;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String((char[]) instance.encode((Object) bits));\n+        assertEquals(\"0000000111111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String((char[]) instance.encode((Object) bits));\n+        assertEquals(\"0000001111111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String((char[]) instance.encode((Object) bits));\n+        assertEquals(\"0000011111111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String((char[]) instance.encode((Object) bits));\n+        assertEquals(\"0000111111111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String((char[]) instance.encode((Object) bits));\n+        assertEquals(\"0001111111111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String((char[]) instance.encode((Object) bits));\n+        assertEquals(\"0011111111111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String((char[]) instance.encode((Object) bits));\n+        assertEquals(\"0111111111111111\", l_encoded);\n+        bits = new byte[2];\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        l_encoded = new String((char[]) instance.encode((Object) bits));\n+        assertEquals(\"1111111111111111\", l_encoded);\n+    }\n+}", "timestamp": 1080601481, "metainfo": ""}