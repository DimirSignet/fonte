{"sha": "437ae4586cadb054e2a7a078578a4213dd45d47e", "log": "Make static final field all caps.  ", "commit": "\n--- a/src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java\n+++ b/src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java\n  * @since 2.0\n  */\n public class PhoneticEngine {\n-    private static final Map<NameType, Set<String>> namePfxs = new EnumMap<NameType, Set<String>>(NameType.class);\n+    private static final Map<NameType, Set<String>> NAME_PREFIXES = new EnumMap<NameType, Set<String>>(NameType.class);\n \n     static {\n-        namePfxs.put(NameType.ASHKENAZI,\n+        NAME_PREFIXES.put(NameType.ASHKENAZI,\n                 Collections.unmodifiableSet(new HashSet<String>(Arrays.asList(\"bar\", \"ben\", \"da\", \"de\", \"van\", \"von\"))));\n-        namePfxs.put(NameType.SEPHARDIC, Collections.unmodifiableSet(new HashSet<String>(Arrays.asList(\"al\", \"el\", \"da\", \"dal\", \"de\",\n+        NAME_PREFIXES.put(NameType.SEPHARDIC, Collections.unmodifiableSet(new HashSet<String>(Arrays.asList(\"al\", \"el\", \"da\", \"dal\", \"de\",\n                 \"del\", \"dela\", \"de la\", \"della\", \"des\", \"di\", \"do\", \"dos\", \"du\", \"van\", \"von\"))));\n-        namePfxs.put(NameType.GENERIC, Collections.unmodifiableSet(new HashSet<String>(Arrays.asList(\"da\", \"dal\", \"de\", \"del\", \"dela\",\n+        NAME_PREFIXES.put(NameType.GENERIC, Collections.unmodifiableSet(new HashSet<String>(Arrays.asList(\"da\", \"dal\", \"de\", \"del\", \"dela\",\n                 \"de la\", \"della\", \"des\", \"di\", \"do\", \"dos\", \"du\", \"van\", \"von\"))));\n     }\n \n         input = input.toLowerCase(Locale.ENGLISH).replace('-', ' ').trim();\n \n         if (this.nameType == NameType.GENERIC) {\n-            for (String l : namePfxs.get(this.nameType)) {\n+            for (String l : NAME_PREFIXES.get(this.nameType)) {\n                 // handle generic prefixes\n                 if (input.startsWith(l + \" \")) {\n                     // check for any prefix in the words list\n                 String lastPart = parts[parts.length - 1];\n                 words2.add(lastPart);\n             }\n-            words2.removeAll(namePfxs.get(this.nameType));\n+            words2.removeAll(NAME_PREFIXES.get(this.nameType));\n             break;\n         case ASHKENAZI:\n             words2.addAll(words);\n-            words2.removeAll(namePfxs.get(this.nameType));\n+            words2.removeAll(NAME_PREFIXES.get(this.nameType));\n             break;\n         case GENERIC:\n             words2.addAll(words);\n     }\n \n     /**\n-     * Applied to a single alternative at a time -- not to a parenthisized list it removes all embedded bracketed attributes,\n-     * logically-ands them together, and places them at the end.\n+     * Applied to a single alternative at a time -- not to a parenthisized list it removes all embedded bracketed attributes, logically-ands\n+     * them together, and places them at the end.\n      * \n      * However if strip is true, this can indeed remove embedded bracketed attributes from a parenthesized list\n      * ", "timestamp": 1311790593, "metainfo": ""}