{"sha": "895315e100486f5778f13106c4ea4f3440eb1298", "log": "[CODEC-206] Add java.io.File APIs to DigestUtils.  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/digest/DigestUtils.java\n+++ b/src/main/java/org/apache/commons/codec/digest/DigestUtils.java\n \n package org.apache.commons.codec.digest;\n \n+import java.io.BufferedInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n import java.nio.ByteBuffer;\n     private static byte[] digest(final MessageDigest messageDigest, final ByteBuffer data) {\n         messageDigest.update(data);\n         return messageDigest.digest();\n+    }\n+\n+    /**\n+     * Read through a File and returns the digest for the data\n+     *\n+     * @param digest\n+     *            The MessageDigest to use (e.g. MD5)\n+     * @param data\n+     *            Data to digest\n+     * @return the digest\n+     * @throws IOException\n+     *             On error reading from the stream\n+     */\n+    private static byte[] digest(final MessageDigest digest, final File data) throws IOException {\n+        return updateDigest(digest, data).digest();\n     }\n \n     /**\n      * @return MD2 digest\n      * @throws IOException\n      *             On error reading from the stream\n+     * @since 1.11\n+     */\n+    public static byte[] md2(final File data) throws IOException {\n+        return digest(getMd2Digest(), data);\n+    }\n+\n+    /**\n+     * Calculates the MD2 digest and returns the value as a 16 element <code>byte[]</code>.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return MD2 digest\n+     * @throws IOException\n+     *             On error reading from the stream\n      * @since 1.7\n      */\n     public static byte[] md2(final InputStream data) throws IOException {\n      * @return MD2 digest as a hex string\n      * @throws IOException\n      *             On error reading from the stream\n+     * @since 1.11\n+     */\n+    public static String md2Hex(final File data) throws IOException {\n+        return Hex.encodeHexString(md2(data));\n+    }\n+\n+    /**\n+     * Calculates the MD2 digest and returns the value as a 32 character hex string.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return MD2 digest as a hex string\n+     * @throws IOException\n+     *             On error reading from the stream\n      * @since 1.7\n      */\n     public static String md2Hex(final InputStream data) throws IOException {\n      * @return MD5 digest\n      * @throws IOException\n      *             On error reading from the stream\n+     * @since 1.11\n+     */\n+    public static byte[] md5(final File data) throws IOException {\n+        return digest(getMd5Digest(), data);\n+    }\n+\n+    /**\n+     * Calculates the MD5 digest and returns the value as a 16 element <code>byte[]</code>.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return MD5 digest\n+     * @throws IOException\n+     *             On error reading from the stream\n      * @since 1.4\n      */\n     public static byte[] md5(final InputStream data) throws IOException {\n     }\n \n     /**\n-         * Calculates the MD5 digest and returns the value as a 32 character hex string.\n-         *\n-         * @param data\n-         *            Data to digest\n-         * @return MD5 digest as a hex string\n-         * @throws IOException\n-         *             On error reading from the stream\n-         * @since 1.4\n-         */\n-        public static String md5Hex(final InputStream data) throws IOException {\n-            return Hex.encodeHexString(md5(data));\n-        }\n+     * Calculates the MD5 digest and returns the value as a 32 character hex string.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return MD5 digest as a hex string\n+     * @throws IOException\n+     *             On error reading from the stream\n+     * @since 1.11\n+     */\n+    public static String md5Hex(final File data) throws IOException {\n+        return Hex.encodeHexString(md5(data));\n+    }\n+\n+    /**\n+     * Calculates the MD5 digest and returns the value as a 32 character hex string.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return MD5 digest as a hex string\n+     * @throws IOException\n+     *             On error reading from the stream\n+     * @since 1.4\n+     */\n+    public static String md5Hex(final InputStream data) throws IOException {\n+        return Hex.encodeHexString(md5(data));\n+    }\n \n     /**\n      * Calculates the MD5 digest and returns the value as a 32 character hex string.\n     }\n \n     /**\n-     * Calculates the SHA-1 digest and returns the value as a <code>byte[]</code>.\n-     *\n-     * @param data\n-     *            Data to digest\n-     * @return SHA-1 digest\n-     * @deprecated Use {@link #sha1(byte[])}\n-     */\n-    @Deprecated\n-    public static byte[] sha(final byte[] data) {\n-        return sha1(data);\n-    }\n-\n-/**\n  * Calculates the SHA-1 digest and returns the value as a <code>byte[]</code>.\n  *\n  * @param data\n  *            Data to digest\n  * @return SHA-1 digest\n- * @throws IOException\n- *             On error reading from the stream\n- * @since 1.4\n- * @deprecated Use {@link #sha1(InputStream)}\n+ * @deprecated Use {@link #sha1(byte[])}\n  */\n @Deprecated\n-public static byte[] sha(final InputStream data) throws IOException {\n+public static byte[] sha(final byte[] data) {\n     return sha1(data);\n }\n+\n+    /**\n+     * Calculates the SHA-1 digest and returns the value as a <code>byte[]</code>.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return SHA-1 digest\n+     * @throws IOException\n+     *             On error reading from the stream\n+     * @since 1.4\n+     * @deprecated Use {@link #sha1(InputStream)}\n+     */\n+    @Deprecated\n+    public static byte[] sha(final InputStream data) throws IOException {\n+        return sha1(data);\n+    }\n \n     /**\n      * Calculates the SHA-1 digest and returns the value as a <code>byte[]</code>.\n      * @return SHA-1 digest\n      * @throws IOException\n      *             On error reading from the stream\n+     * @since 1.11\n+     */\n+    public static byte[] sha1(final File data) throws IOException {\n+        return digest(getSha1Digest(), data);\n+    }\n+\n+    /**\n+     * Calculates the SHA-1 digest and returns the value as a <code>byte[]</code>.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return SHA-1 digest\n+     * @throws IOException\n+     *             On error reading from the stream\n      * @since 1.7\n      */\n     public static byte[] sha1(final InputStream data) throws IOException {\n      * @return SHA-1 digest as a hex string\n      * @throws IOException\n      *             On error reading from the stream\n+     * @since 1.11\n+     */\n+    public static String sha1Hex(final File data) throws IOException {\n+        return Hex.encodeHexString(sha1(data));\n+    }\n+\n+    /**\n+     * Calculates the SHA-1 digest and returns the value as a hex string.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return SHA-1 digest as a hex string\n+     * @throws IOException\n+     *             On error reading from the stream\n      * @since 1.7\n      */\n     public static String sha1Hex(final InputStream data) throws IOException {\n      * @since 1.11\n      */\n     public static byte[] sha224(final ByteBuffer data) {\n+        return digest(getSha224Digest(), data);\n+    }\n+\n+    /**\n+     * Calculates the SHA-224 digest and returns the value as a <code>byte[]</code>.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     *\n+     * @param data\n+     *            File to digest\n+     * @return SHA-224 digest\n+     * @throws IOException\n+     *             On error reading from the stream\n+     * @since 1.11\n+     */\n+    public static byte[] sha224(final File data) throws IOException {\n         return digest(getSha224Digest(), data);\n     }\n \n      * @throws IllegalArgumentException thrown on JRE versions prior to 1.8.0.\n      * @since 1.11\n      */\n+    public static String sha224Hex(final File data) throws IOException {\n+        return Hex.encodeHexString(sha224(data));\n+    }\n+\n+    /**\n+     * Calculates the SHA-224 digest and returns the value as a hex string.\n+     * <p>\n+     * Throws a {@link IllegalArgumentException} on JRE versions prior to 1.4.0.\n+     * </p>\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return SHA-224 digest as a hex string\n+     * @throws IOException\n+     *             On error reading from the stream\n+     * @throws IllegalArgumentException thrown on JRE versions prior to 1.8.0.\n+     * @since 1.11\n+     */\n     public static String sha224Hex(final InputStream data) throws IOException {\n         return Hex.encodeHexString(sha224(data));\n     }\n     public static String sha224Hex(final String data) {\n         return Hex.encodeHexString(sha224(data));\n     }\n-    \n+\n     /**\n      * Calculates the SHA-256 digest and returns the value as a <code>byte[]</code>.\n      * <p>\n      * </p>\n      *\n      * @param data\n+     *            File to digest\n+     * @return SHA-256 digest\n+     * @throws IOException\n+     *             On error reading from the stream\n+     * @since 1.11\n+     */\n+    public static byte[] sha256(final File data) throws IOException {\n+        return digest(getSha256Digest(), data);\n+    }\n+\n+    /**\n+     * Calculates the SHA-256 digest and returns the value as a <code>byte[]</code>.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     *\n+     * @param data\n      *            Data to digest\n      * @return SHA-256 digest\n      * @throws IOException\n      * @return SHA-256 digest as a hex string\n      * @throws IOException\n      *             On error reading from the stream\n+     * @since 1.11\n+     */\n+    public static String sha256Hex(final File data) throws IOException {\n+        return Hex.encodeHexString(sha256(data));\n+    }\n+\n+    /**\n+     * Calculates the SHA-256 digest and returns the value as a hex string.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return SHA-256 digest as a hex string\n+     * @throws IOException\n+     *             On error reading from the stream\n      * @since 1.4\n      */\n     public static String sha256Hex(final InputStream data) throws IOException {\n      * </p>\n      *\n      * @param data\n+     *            File to digest\n+     * @return SHA-384 digest\n+     * @throws IOException\n+     *             On error reading from the stream\n+     * @since 1.11\n+     */\n+    public static byte[] sha384(final File data) throws IOException {\n+        return digest(getSha384Digest(), data);\n+    }\n+\n+    /**\n+     * Calculates the SHA-384 digest and returns the value as a <code>byte[]</code>.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     *\n+     * @param data\n      *            Data to digest\n      * @return SHA-384 digest\n      * @throws IOException\n      * @return SHA-384 digest as a hex string\n      * @throws IOException\n      *             On error reading from the stream\n+     * @since 1.11\n+     */\n+    public static String sha384Hex(final File data) throws IOException {\n+        return Hex.encodeHexString(sha384(data));\n+    }\n+\n+    /**\n+     * Calculates the SHA-384 digest and returns the value as a hex string.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return SHA-384 digest as a hex string\n+     * @throws IOException\n+     *             On error reading from the stream\n      * @since 1.4\n      */\n     public static String sha384Hex(final InputStream data) throws IOException {\n      * </p>\n      *\n      * @param data\n+     *            File to digest\n+     * @return SHA-512 digest\n+     * @throws IOException\n+     *             On error reading from the stream\n+     * @since 1.11\n+     */\n+    public static byte[] sha512(final File data) throws IOException {\n+        return digest(getSha512Digest(), data);\n+    }\n+\n+    /**\n+     * Calculates the SHA-512 digest and returns the value as a <code>byte[]</code>.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     *\n+     * @param data\n      *            Data to digest\n      * @return SHA-512 digest\n      * @throws IOException\n      * @since 1.11\n      */\n     public static String sha512Hex(final ByteBuffer data) {\n+        return Hex.encodeHexString(sha512(data));\n+    }\n+\n+    /**\n+     * Calculates the SHA-512 digest and returns the value as a hex string.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     *\n+     * @param data\n+     *            File to digest\n+     * @return SHA-512 digest as a hex string\n+     * @throws IOException\n+     *             On error reading from the stream\n+     * @since 1.11\n+     */\n+    public static String sha512Hex(File data) throws IOException {\n         return Hex.encodeHexString(sha512(data));\n     }\n \n     public static MessageDigest updateDigest(final MessageDigest messageDigest, final ByteBuffer valueToDigest) {\n         messageDigest.update(valueToDigest);\n         return messageDigest;\n+    }\n+\n+    /**\n+     * Reads through a File and updates the digest for the data\n+     *\n+     * @param digest\n+     *            The MessageDigest to use (e.g. MD5)\n+     * @param data\n+     *            Data to digest\n+     * @return the digest\n+     * @throws IOException\n+     *             On error reading from the stream\n+     * @since 1.11\n+     */\n+    public static MessageDigest updateDigest(final MessageDigest digest, final File data) throws IOException {\n+        final BufferedInputStream stream = new BufferedInputStream(new FileInputStream(data));\n+        try {\n+            return updateDigest(digest, stream);\n+        } finally {\n+            stream.close();\n+        }\n     }\n \n     /**\n         messageDigest.update(StringUtils.getBytesUtf8(valueToDigest));\n         return messageDigest;\n     }\n+\n }\n--- a/src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java\n+++ b/src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java\n \n package org.apache.commons.codec.digest;\n \n+import static org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8;\n import static org.apache.commons.codec.binary.StringUtils.getBytesUtf8;\n-import static org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n \n import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n import java.io.IOException;\n import java.nio.ByteBuffer;\n import java.security.MessageDigest;\n import org.apache.commons.codec.binary.StringUtils;\n import org.apache.commons.lang3.JavaVersion;\n import org.apache.commons.lang3.SystemUtils;\n+import org.junit.After;\n import org.junit.Assume;\n+import org.junit.Before;\n import org.junit.Test;\n \n /**\n public class DigestUtilsTest {\n \n     private final byte[] testData = new byte[1024 * 1024];\n-\n-    /* (non-Javadoc)\n-     * @see junit.framework.TestCase#setUp()\n-     */\n-    protected void setUp() throws Exception {\n+    \n+    private File testFile;\n+\n+    @Before\n+    public void setUp() throws Exception {\n         new Random().nextBytes(testData);\n+        testFile = File.createTempFile(DigestUtilsTest.class.getName(), \".dat\");\n+        FileOutputStream fos = new FileOutputStream(testFile);\n+        fos.write(testData);\n+        fos.close();\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        if (!testFile.delete()) {\n+            testFile.deleteOnExit();\n+        }\n     }\n \n     @Test\n                 DigestUtils.md2Hex(ByteBuffer.wrap(testData)));\n }\n \n+    @Test\n+    public void testMd2HexFile() throws IOException {\n+        assertEquals(DigestUtils.md2Hex(testData), DigestUtils.md2Hex(testFile));\n+    }\n+\n     /**\n      * An MD2 hash converted to hex should always be 32 characters.\n      */\n         assertEquals(DigestUtils.md5Hex(testData),\n                 DigestUtils.md5Hex(ByteBuffer.wrap(testData)));\n }\n+\n+    @Test\n+    public void testMd5HexFile() throws IOException {\n+        assertEquals(DigestUtils.md5Hex(testData), DigestUtils.md5Hex(testFile));\n+    }\n \n     /**\n      * An MD5 hash converted to hex should always be 32 characters.\n     }\n \n     @Test\n+    public void testSha1HexFile() throws IOException {\n+        assertEquals(DigestUtils.sha1Hex(testData), DigestUtils.sha1Hex(testFile));\n+    }\n+\n+    @Test\n     public void testSha1UpdateWithByteArray(){\n         final String d1 = \"C'est un homme qui rentre dans un caf\u00e9, et plouf\";\n         final String d2 = \"C'est un homme, c'est qu'une t\u00eate, on lui offre un cadeau: 'oh... encore un chapeau!'\";\n \n     @Test\n     public void testSha224() throws IOException {\n-        Assume.assumeTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_8));\n+        assumeJava8();\n         assertEquals(\"d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f\", DigestUtils.sha224Hex(\"\"));\n         assertEquals(\"730e109bd7a8a32b1cb9d9a09aa2325d2430587ddbc0c38bad911525\",\n                 DigestUtils.sha224Hex(\"The quick brown fox jumps over the lazy dog\"));\n \n         // Examples from FIPS 180-4?\n+    }\n+\n+    private void assumeJava8() {\n+        Assume.assumeTrue(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_8));\n+    }\n+\n+    @Test\n+    public void testSha224HexFile() throws IOException {\n+        assumeJava8();\n+        assertEquals(DigestUtils.sha224Hex(testData), DigestUtils.sha224Hex(testFile));\n     }\n \n     @Test\n             DigestUtils.sha256Hex(new ByteArrayInputStream(testData)));\n     assertEquals(DigestUtils.sha256Hex(testData),\n             DigestUtils.sha256Hex(ByteBuffer.wrap(testData)));\n+    }\n+\n+    @Test\n+    public void testSha256HexFile() throws IOException {\n+        assertEquals(DigestUtils.sha256Hex(testData), DigestUtils.sha256Hex(testFile));\n     }\n \n     @Test\n     }\n \n     @Test\n+    public void testSha384HexFile() throws IOException {\n+        assertEquals(DigestUtils.sha384Hex(testData), DigestUtils.sha384Hex(testFile));\n+    }\n+\n+    @Test\n     public void testSha512() throws IOException {\n     // Examples from FIPS 180-2\n     assertEquals(\"ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a\" +\n              \"501d289e4900f7e4331b99dec4b5433ac7d329eeb6dd26545e96e55b874be909\",\n              DigestUtils.sha512Hex(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn\" +\n                        \"hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu\"));\n-    assertEquals(DigestUtils.sha512Hex(testData),\n-            DigestUtils.sha512Hex(new ByteArrayInputStream(testData)));\n-    assertEquals(DigestUtils.sha512Hex(testData),\n-            DigestUtils.sha512Hex(ByteBuffer.wrap(testData)));\n+    }\n+\n+    @Test\n+    public void testSha512HexByteBuffer() throws IOException {\n+        assertEquals(DigestUtils.sha512Hex(testData), DigestUtils.sha512Hex(ByteBuffer.wrap(testData)));\n+    }\n+\n+    @Test\n+    public void testSha512HexFile() throws IOException {\n+        assertEquals(DigestUtils.sha512Hex(testData), DigestUtils.sha512Hex(testFile));\n+    }\n+\n+    @Test\n+    public void testSha512HexInputStream() throws IOException {\n+        assertEquals(DigestUtils.sha512Hex(testData),\n+                DigestUtils.sha512Hex(new ByteArrayInputStream(testData)));\n     }\n \n     @SuppressWarnings(\"deprecation\") // deliberate tests of deprecated code", "timestamp": 1463172545, "metainfo": ""}