{"sha": "622088ba07b5b9452b73e2b2867549540e431732", "log": "Organize imports.  ", "commit": "\n--- a/src/test/java/org/apache/commons/codec/binary/Base32Test.java\n+++ b/src/test/java/org/apache/commons/codec/binary/Base32Test.java\n \n import java.util.Arrays;\n \n+import org.apache.commons.codec.Charsets;\n import org.junit.Test;\n \n public class Base32Test {\n     public void testBase32Samples() throws Exception {\n         Base32 codec = new Base32();\n         for (String[] element : BASE32_TEST_CASES) {\n-                assertEquals(element[1], codec.encodeAsString(element[0].getBytes(\"UTF-8\")));\n+                assertEquals(element[1], codec.encodeAsString(element[0].getBytes(Charsets.UTF_8)));\n         }\n     }\n \n     public void testBase32HexSamples() throws Exception {\n         Base32 codec = new Base32(true);\n         for (String[] element : BASE32HEX_TEST_CASES) {\n-                assertEquals(element[1], codec.encodeAsString(element[0].getBytes(\"UTF-8\")));\n+                assertEquals(element[1], codec.encodeAsString(element[0].getBytes(Charsets.UTF_8)));\n         }\n     }\n \n     public void testBase32Chunked () throws Exception {\n         Base32 codec = new Base32(20);\n         for (String[] element : BASE32_TEST_CASES_CHUNKED) {\n-                assertEquals(element[1], codec.encodeAsString(element[0].getBytes(\"UTF-8\")));\n+                assertEquals(element[1], codec.encodeAsString(element[0].getBytes(Charsets.UTF_8)));\n         }        \n     }\n \n--- a/src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java\n+++ b/src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java\n \n import static org.junit.Assert.assertTrue;\n \n-import java.io.UnsupportedEncodingException;\n import java.util.Arrays;\n \n import org.apache.commons.codec.BinaryDecoder;\n import org.apache.commons.codec.BinaryEncoder;\n+import org.apache.commons.codec.Charsets;\n import org.apache.commons.codec.Decoder;\n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.Encoder;\n         // need this class to be able to run against commons-codec-1.3.jar, hence the\n         // duplication here.\n         \n-        try {\n-            return s != null ? s.getBytes(\"UTF-8\") : null;\n-        } catch (UnsupportedEncodingException e) {\n-            throw new IllegalStateException(e.toString());\n-        }\n+        return s != null ? s.getBytes(Charsets.UTF_8) : null;\n     }\n }\n--- a/src/test/java/org/apache/commons/codec/binary/Base64Test.java\n+++ b/src/test/java/org/apache/commons/codec/binary/Base64Test.java\n import java.util.Arrays;\n import java.util.Random;\n \n+import org.apache.commons.codec.Charsets;\n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n import org.junit.Ignore;\n         BigInteger bigInt1 = new BigInteger(\"85739377120809420210425962799\" + \"0318636601332086981\");\n \n         assertEquals(encodedInt1, new String(Base64.encodeInteger(bigInt1)));\n-        assertEquals(bigInt1, Base64.decodeInteger(encodedInt1.getBytes(\"UTF-8\")));\n+        assertEquals(bigInt1, Base64.decodeInteger(encodedInt1.getBytes(Charsets.UTF_8)));\n     }\n \n     @Test\n         BigInteger bigInt2 = new BigInteger(\"13936727572861167254666467268\" + \"91466679477132949611\");\n \n         assertEquals(encodedInt2, new String(Base64.encodeInteger(bigInt2)));\n-        assertEquals(bigInt2, Base64.decodeInteger(encodedInt2.getBytes(\"UTF-8\")));\n+        assertEquals(bigInt2, Base64.decodeInteger(encodedInt2.getBytes(Charsets.UTF_8)));\n     }\n \n     @Test\n             + \"4495062430572478766856090958495998158114332651671116876320938126\");\n \n         assertEquals(encodedInt3, new String(Base64.encodeInteger(bigInt3)));\n-        assertEquals(bigInt3, Base64.decodeInteger(encodedInt3.getBytes(\"UTF-8\")));\n+        assertEquals(bigInt3, Base64.decodeInteger(encodedInt3.getBytes(Charsets.UTF_8)));\n     }\n \n     @Test\n             + \"53542091716518238707344493641683483917\");\n \n         assertEquals(encodedInt4, new String(Base64.encodeInteger(bigInt4)));\n-        assertEquals(bigInt4, Base64.decodeInteger(encodedInt4.getBytes(\"UTF-8\")));\n+        assertEquals(bigInt4, Base64.decodeInteger(encodedInt4.getBytes(Charsets.UTF_8)));\n     }\n \n     @Test\n      */\n     @Test\n     public void testDecodePadMarkerIndex2() throws UnsupportedEncodingException {\n-        assertEquals(\"A\", new String(Base64.decodeBase64(\"QQ==\".getBytes(\"UTF-8\"))));\n+        assertEquals(\"A\", new String(Base64.decodeBase64(\"QQ==\".getBytes(Charsets.UTF_8))));\n     }\n \n     /**\n      */\n     @Test\n     public void testDecodePadMarkerIndex3() throws UnsupportedEncodingException {\n-        assertEquals(\"AA\", new String(Base64.decodeBase64(\"QUE=\".getBytes(\"UTF-8\"))));\n-        assertEquals(\"AAA\", new String(Base64.decodeBase64(\"QUFB\".getBytes(\"UTF-8\"))));\n+        assertEquals(\"AA\", new String(Base64.decodeBase64(\"QUE=\".getBytes(Charsets.UTF_8))));\n+        assertEquals(\"AAA\", new String(Base64.decodeBase64(\"QUFB\".getBytes(Charsets.UTF_8))));\n     }\n \n     @Test\n     public void testDecodePadOnly() throws UnsupportedEncodingException {\n-        assertEquals(0, Base64.decodeBase64(\"====\".getBytes(\"UTF-8\")).length);\n-        assertEquals(\"\", new String(Base64.decodeBase64(\"====\".getBytes(\"UTF-8\"))));\n+        assertEquals(0, Base64.decodeBase64(\"====\".getBytes(Charsets.UTF_8)).length);\n+        assertEquals(\"\", new String(Base64.decodeBase64(\"====\".getBytes(Charsets.UTF_8))));\n         // Test truncated padding\n-        assertEquals(0, Base64.decodeBase64(\"===\".getBytes(\"UTF-8\")).length);\n-        assertEquals(0, Base64.decodeBase64(\"==\".getBytes(\"UTF-8\")).length);\n-        assertEquals(0, Base64.decodeBase64(\"=\".getBytes(\"UTF-8\")).length);\n-        assertEquals(0, Base64.decodeBase64(\"\".getBytes(\"UTF-8\")).length);\n+        assertEquals(0, Base64.decodeBase64(\"===\".getBytes(Charsets.UTF_8)).length);\n+        assertEquals(0, Base64.decodeBase64(\"==\".getBytes(Charsets.UTF_8)).length);\n+        assertEquals(0, Base64.decodeBase64(\"=\".getBytes(Charsets.UTF_8)).length);\n+        assertEquals(0, Base64.decodeBase64(\"\".getBytes(Charsets.UTF_8)).length);\n     }\n \n     @Test\n     public void testDecodePadOnlyChunked() throws UnsupportedEncodingException {\n-        assertEquals(0, Base64.decodeBase64(\"====\\n\".getBytes(\"UTF-8\")).length);\n-        assertEquals(\"\", new String(Base64.decodeBase64(\"====\\n\".getBytes(\"UTF-8\"))));\n+        assertEquals(0, Base64.decodeBase64(\"====\\n\".getBytes(Charsets.UTF_8)).length);\n+        assertEquals(\"\", new String(Base64.decodeBase64(\"====\\n\".getBytes(Charsets.UTF_8))));\n         // Test truncated padding\n-        assertEquals(0, Base64.decodeBase64(\"===\\n\".getBytes(\"UTF-8\")).length);\n-        assertEquals(0, Base64.decodeBase64(\"==\\n\".getBytes(\"UTF-8\")).length);\n-        assertEquals(0, Base64.decodeBase64(\"=\\n\".getBytes(\"UTF-8\")).length);\n-        assertEquals(0, Base64.decodeBase64(\"\\n\".getBytes(\"UTF-8\")).length);\n+        assertEquals(0, Base64.decodeBase64(\"===\\n\".getBytes(Charsets.UTF_8)).length);\n+        assertEquals(0, Base64.decodeBase64(\"==\\n\".getBytes(Charsets.UTF_8)).length);\n+        assertEquals(0, Base64.decodeBase64(\"=\\n\".getBytes(Charsets.UTF_8)).length);\n+        assertEquals(0, Base64.decodeBase64(\"\\n\".getBytes(Charsets.UTF_8)).length);\n     }\n \n     @Test\n \n         String orig = \"I am a late night coder.\";\n \n-        byte[] encodedArray = Base64.encodeBase64(orig.getBytes(\"UTF-8\"));\n+        byte[] encodedArray = Base64.encodeBase64(orig.getBytes(Charsets.UTF_8));\n         StringBuffer intermediate = new StringBuffer(new String(encodedArray));\n \n         intermediate.insert(2, ' ');\n         intermediate.insert(10, '\\r');\n         intermediate.insert(15, '\\n');\n \n-        byte[] encodedWithWS = intermediate.toString().getBytes(\"UTF-8\");\n+        byte[] encodedWithWS = intermediate.toString().getBytes(Charsets.UTF_8);\n         byte[] decodedWithWS = Base64.decodeBase64(encodedWithWS);\n \n         String dest = new String(decodedWithWS);\n     @Test\n     public void testIgnoringNonBase64InDecode() throws Exception {\n         assertEquals(\"The quick brown fox jumped over the lazy dogs.\", new String(Base64\n-                .decodeBase64(\"VGhlIH@$#$@%F1aWN@#@#@@rIGJyb3duIGZve\\n\\r\\t%#%#%#%CBqd##$#$W1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\".getBytes(\"UTF-8\"))));\n+                .decodeBase64(\"VGhlIH@$#$@%F1aWN@#@#@@rIGJyb3duIGZve\\n\\r\\t%#%#%#%CBqd##$#$W1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\".getBytes(Charsets.UTF_8))));\n     }\n \n     @Test\n     @Test\n     public void testKnownDecodings() throws UnsupportedEncodingException {\n         assertEquals(\"The quick brown fox jumped over the lazy dogs.\", new String(Base64\n-                .decodeBase64(\"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\".getBytes(\"UTF-8\"))));\n+                .decodeBase64(\"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\".getBytes(Charsets.UTF_8))));\n         assertEquals(\"It was the best of times, it was the worst of times.\", new String(Base64\n-                .decodeBase64(\"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==\".getBytes(\"UTF-8\"))));\n+                .decodeBase64(\"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==\".getBytes(Charsets.UTF_8))));\n         assertEquals(\"http://jakarta.apache.org/commmons\", new String(Base64\n-                .decodeBase64(\"aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==\".getBytes(\"UTF-8\"))));\n+                .decodeBase64(\"aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==\".getBytes(Charsets.UTF_8))));\n         assertEquals(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\", new String(Base64\n-                .decodeBase64(\"QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==\".getBytes(\"UTF-8\"))));\n+                .decodeBase64(\"QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==\".getBytes(Charsets.UTF_8))));\n         assertEquals(\"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\", new String(Base64.decodeBase64(\"eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0=\"\n-                .getBytes(\"UTF-8\"))));\n-        assertEquals(\"xyzzy!\", new String(Base64.decodeBase64(\"eHl6enkh\".getBytes(\"UTF-8\"))));\n+                .getBytes(Charsets.UTF_8))));\n+        assertEquals(\"xyzzy!\", new String(Base64.decodeBase64(\"eHl6enkh\".getBytes(Charsets.UTF_8))));\n     }\n \n     @Test\n     public void testKnownEncodings() throws UnsupportedEncodingException {\n         assertEquals(\"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\", new String(Base64\n-                .encodeBase64(\"The quick brown fox jumped over the lazy dogs.\".getBytes(\"UTF-8\"))));\n+                .encodeBase64(\"The quick brown fox jumped over the lazy dogs.\".getBytes(Charsets.UTF_8))));\n         assertEquals(\n                 \"YmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJs\\r\\nYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFo\\r\\nIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBi\\r\\nbGFoIGJsYWg=\\r\\n\",\n                 new String(\n                         Base64\n                                 .encodeBase64Chunked(\"blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah\"\n-                                        .getBytes(\"UTF-8\"))));\n+                                        .getBytes(Charsets.UTF_8))));\n         assertEquals(\"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==\", new String(Base64\n-                .encodeBase64(\"It was the best of times, it was the worst of times.\".getBytes(\"UTF-8\"))));\n+                .encodeBase64(\"It was the best of times, it was the worst of times.\".getBytes(Charsets.UTF_8))));\n         assertEquals(\"aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==\", new String(Base64\n-                .encodeBase64(\"http://jakarta.apache.org/commmons\".getBytes(\"UTF-8\"))));\n+                .encodeBase64(\"http://jakarta.apache.org/commmons\".getBytes(Charsets.UTF_8))));\n         assertEquals(\"QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==\", new String(Base64\n-                .encodeBase64(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\".getBytes(\"UTF-8\"))));\n+                .encodeBase64(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\".getBytes(Charsets.UTF_8))));\n         assertEquals(\"eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0=\", new String(Base64.encodeBase64(\"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\"\n-                .getBytes(\"UTF-8\"))));\n-        assertEquals(\"eHl6enkh\", new String(Base64.encodeBase64(\"xyzzy!\".getBytes(\"UTF-8\"))));\n+                .getBytes(Charsets.UTF_8))));\n+        assertEquals(\"eHl6enkh\", new String(Base64.encodeBase64(\"xyzzy!\".getBytes(Charsets.UTF_8))));\n     }\n \n     @Test\n     public void testObjectDecodeWithValidParameter() throws Exception {\n \n         String original = \"Hello World!\";\n-        Object o = Base64.encodeBase64(original.getBytes(\"UTF-8\"));\n+        Object o = Base64.encodeBase64(original.getBytes(Charsets.UTF_8));\n \n         Base64 b64 = new Base64();\n         Object oDecoded = b64.decode(o);\n     public void testObjectEncodeWithValidParameter() throws Exception {\n \n         String original = \"Hello World!\";\n-        Object origObj = original.getBytes(\"UTF-8\");\n+        Object origObj = original.getBytes(Charsets.UTF_8);\n \n         Base64 b64 = new Base64();\n         Object oEncoded = b64.encode(origObj);\n     @Test\n     public void testObjectEncode() throws Exception {\n         Base64 b64 = new Base64();\n-        assertEquals(\"SGVsbG8gV29ybGQ=\", new String(b64.encode(\"Hello World\".getBytes(\"UTF-8\"))));\n+        assertEquals(\"SGVsbG8gV29ybGQ=\", new String(b64.encode(\"Hello World\".getBytes(Charsets.UTF_8))));\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java\n+++ b/src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java\n \n import java.io.UnsupportedEncodingException;\n \n+import org.apache.commons.codec.Charsets;\n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n import org.junit.After;\n         if (encodeMe == null) {\n             decoded = instance.decode((byte[]) null);\n         } else {\n-            decoded = (byte[]) instance.decode((Object) encodeMe.getBytes(\"UTF-8\"));\n+            decoded = (byte[]) instance.decode((Object) encodeMe.getBytes(Charsets.UTF_8));\n         }\n         assertEquals(new String(bits), new String(decoded));\n         if (encodeMe == null) {\n     public void testDecodeByteArray() throws UnsupportedEncodingException {\n         // With a single raw binary\n         byte[] bits = new byte[1];\n-        byte[] decoded = instance.decode(\"00000000\".getBytes(\"UTF-8\"));\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0;\n-        decoded = instance.decode(\"00000001\".getBytes(\"UTF-8\"));\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1;\n-        decoded = instance.decode(\"00000011\".getBytes(\"UTF-8\"));\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1 | BIT_2;\n-        decoded = instance.decode(\"00000111\".getBytes(\"UTF-8\"));\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n-        decoded = instance.decode(\"00001111\".getBytes(\"UTF-8\"));\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n-        decoded = instance.decode(\"00011111\".getBytes(\"UTF-8\"));\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n-        decoded = instance.decode(\"00111111\".getBytes(\"UTF-8\"));\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n-        decoded = instance.decode(\"01111111\".getBytes(\"UTF-8\"));\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = instance.decode(\"11111111\".getBytes(\"UTF-8\"));\n+        byte[] decoded = instance.decode(\"00000000\".getBytes(Charsets.UTF_8));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0;\n+        decoded = instance.decode(\"00000001\".getBytes(Charsets.UTF_8));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1;\n+        decoded = instance.decode(\"00000011\".getBytes(Charsets.UTF_8));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2;\n+        decoded = instance.decode(\"00000111\".getBytes(Charsets.UTF_8));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n+        decoded = instance.decode(\"00001111\".getBytes(Charsets.UTF_8));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n+        decoded = instance.decode(\"00011111\".getBytes(Charsets.UTF_8));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n+        decoded = instance.decode(\"00111111\".getBytes(Charsets.UTF_8));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n+        decoded = instance.decode(\"01111111\".getBytes(Charsets.UTF_8));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = instance.decode(\"11111111\".getBytes(Charsets.UTF_8));\n         assertEquals(new String(bits), new String(decoded));\n         // With a two raw binaries\n         bits = new byte[2];\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = instance.decode(\"0000000011111111\".getBytes(\"UTF-8\"));\n+        decoded = instance.decode(\"0000000011111111\".getBytes(Charsets.UTF_8));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = instance.decode(\"0000000111111111\".getBytes(\"UTF-8\"));\n+        decoded = instance.decode(\"0000000111111111\".getBytes(Charsets.UTF_8));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = instance.decode(\"0000001111111111\".getBytes(\"UTF-8\"));\n+        decoded = instance.decode(\"0000001111111111\".getBytes(Charsets.UTF_8));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1 | BIT_2;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = instance.decode(\"0000011111111111\".getBytes(\"UTF-8\"));\n+        decoded = instance.decode(\"0000011111111111\".getBytes(Charsets.UTF_8));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = instance.decode(\"0000111111111111\".getBytes(\"UTF-8\"));\n+        decoded = instance.decode(\"0000111111111111\".getBytes(Charsets.UTF_8));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = instance.decode(\"0001111111111111\".getBytes(\"UTF-8\"));\n+        decoded = instance.decode(\"0001111111111111\".getBytes(Charsets.UTF_8));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = instance.decode(\"0011111111111111\".getBytes(\"UTF-8\"));\n+        decoded = instance.decode(\"0011111111111111\".getBytes(Charsets.UTF_8));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = instance.decode(\"0111111111111111\".getBytes(\"UTF-8\"));\n+        decoded = instance.decode(\"0111111111111111\".getBytes(Charsets.UTF_8));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = instance.decode(\"1111111111111111\".getBytes(\"UTF-8\"));\n+        decoded = instance.decode(\"1111111111111111\".getBytes(Charsets.UTF_8));\n         assertEquals(new String(bits), new String(decoded));\n     }\n \n         assertEquals(0, BinaryCodec.fromAscii(new byte[0]).length);\n         // With a single raw binary\n         byte[] bits = new byte[1];\n-        byte[] decoded = BinaryCodec.fromAscii(\"00000000\".getBytes(\"UTF-8\"));\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0;\n-        decoded = BinaryCodec.fromAscii(\"00000001\".getBytes(\"UTF-8\"));\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1;\n-        decoded = BinaryCodec.fromAscii(\"00000011\".getBytes(\"UTF-8\"));\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1 | BIT_2;\n-        decoded = BinaryCodec.fromAscii(\"00000111\".getBytes(\"UTF-8\"));\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n-        decoded = BinaryCodec.fromAscii(\"00001111\".getBytes(\"UTF-8\"));\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n-        decoded = BinaryCodec.fromAscii(\"00011111\".getBytes(\"UTF-8\"));\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n-        decoded = BinaryCodec.fromAscii(\"00111111\".getBytes(\"UTF-8\"));\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n-        decoded = BinaryCodec.fromAscii(\"01111111\".getBytes(\"UTF-8\"));\n-        assertEquals(new String(bits), new String(decoded));\n-        bits = new byte[1];\n-        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = BinaryCodec.fromAscii(\"11111111\".getBytes(\"UTF-8\"));\n+        byte[] decoded = BinaryCodec.fromAscii(\"00000000\".getBytes(Charsets.UTF_8));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0;\n+        decoded = BinaryCodec.fromAscii(\"00000001\".getBytes(Charsets.UTF_8));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1;\n+        decoded = BinaryCodec.fromAscii(\"00000011\".getBytes(Charsets.UTF_8));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2;\n+        decoded = BinaryCodec.fromAscii(\"00000111\".getBytes(Charsets.UTF_8));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n+        decoded = BinaryCodec.fromAscii(\"00001111\".getBytes(Charsets.UTF_8));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n+        decoded = BinaryCodec.fromAscii(\"00011111\".getBytes(Charsets.UTF_8));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n+        decoded = BinaryCodec.fromAscii(\"00111111\".getBytes(Charsets.UTF_8));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n+        decoded = BinaryCodec.fromAscii(\"01111111\".getBytes(Charsets.UTF_8));\n+        assertEquals(new String(bits), new String(decoded));\n+        bits = new byte[1];\n+        bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n+        decoded = BinaryCodec.fromAscii(\"11111111\".getBytes(Charsets.UTF_8));\n         assertEquals(new String(bits), new String(decoded));\n         // With a two raw binaries\n         bits = new byte[2];\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = BinaryCodec.fromAscii(\"0000000011111111\".getBytes(\"UTF-8\"));\n+        decoded = BinaryCodec.fromAscii(\"0000000011111111\".getBytes(Charsets.UTF_8));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = BinaryCodec.fromAscii(\"0000000111111111\".getBytes(\"UTF-8\"));\n+        decoded = BinaryCodec.fromAscii(\"0000000111111111\".getBytes(Charsets.UTF_8));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = BinaryCodec.fromAscii(\"0000001111111111\".getBytes(\"UTF-8\"));\n+        decoded = BinaryCodec.fromAscii(\"0000001111111111\".getBytes(Charsets.UTF_8));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1 | BIT_2;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = BinaryCodec.fromAscii(\"0000011111111111\".getBytes(\"UTF-8\"));\n+        decoded = BinaryCodec.fromAscii(\"0000011111111111\".getBytes(Charsets.UTF_8));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = BinaryCodec.fromAscii(\"0000111111111111\".getBytes(\"UTF-8\"));\n+        decoded = BinaryCodec.fromAscii(\"0000111111111111\".getBytes(Charsets.UTF_8));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = BinaryCodec.fromAscii(\"0001111111111111\".getBytes(\"UTF-8\"));\n+        decoded = BinaryCodec.fromAscii(\"0001111111111111\".getBytes(Charsets.UTF_8));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = BinaryCodec.fromAscii(\"0011111111111111\".getBytes(\"UTF-8\"));\n+        decoded = BinaryCodec.fromAscii(\"0011111111111111\".getBytes(Charsets.UTF_8));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6;\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = BinaryCodec.fromAscii(\"0111111111111111\".getBytes(\"UTF-8\"));\n+        decoded = BinaryCodec.fromAscii(\"0111111111111111\".getBytes(Charsets.UTF_8));\n         assertEquals(new String(bits), new String(decoded));\n         bits = new byte[2];\n         bits[1] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n         bits[0] = (byte) (BIT_0 | BIT_1 | BIT_2 | BIT_3 | BIT_4 | BIT_5 | BIT_6 | BIT_7);\n-        decoded = BinaryCodec.fromAscii(\"1111111111111111\".getBytes(\"UTF-8\"));\n+        decoded = BinaryCodec.fromAscii(\"1111111111111111\".getBytes(Charsets.UTF_8));\n         assertEquals(new String(bits), new String(decoded));\n         assertEquals(0, BinaryCodec.fromAscii((byte[]) null).length);\n     }\n--- a/src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java\n+++ b/src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java\n import java.nio.charset.UnsupportedCharsetException;\n \n import org.apache.commons.codec.CharEncoding;\n+import org.apache.commons.codec.Charsets;\n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n import org.junit.Ignore;\n         QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();\n         String plain = \"1+1 = 2\";\n         String encoded = new String(QuotedPrintableCodec.\n-            encodeQuotedPrintable(null, plain.getBytes(\"UTF-8\")));\n+            encodeQuotedPrintable(null, plain.getBytes(Charsets.UTF_8)));\n         assertEquals(\"Basic quoted-printable encoding test\", \n             \"1+1 =3D 2\", encoded);\n         assertEquals(\"Basic quoted-printable decoding test\", \n         assertEquals(\"Basic quoted-printable encoding test\", \n             \"1+1 =3D 2\", encoded);\n \n-        byte[] plainBA = plain.getBytes(\"UTF-8\");\n+        byte[] plainBA = plain.getBytes(Charsets.UTF_8);\n         byte[] encodedBA = (byte[]) qpcodec.encode((Object) plainBA);\n         encoded = new String(encodedBA);\n         assertEquals(\"Basic quoted-printable encoding test\", \n         assertEquals(\"Basic quoted-printable decoding test\", \n             \"1+1 = 2\", decoded);\n \n-        byte[] plainBA = plain.getBytes(\"UTF-8\");\n+        byte[] plainBA = plain.getBytes(Charsets.UTF_8);\n         byte[] decodedBA = (byte[]) qpcodec.decode((Object) plainBA);\n         decoded = new String(decodedBA);\n         assertEquals(\"Basic quoted-printable decoding test\", \n--- a/src/test/java/org/apache/commons/codec/net/URLCodecTest.java\n+++ b/src/test/java/org/apache/commons/codec/net/URLCodecTest.java\n import java.io.UnsupportedEncodingException;\n \n import org.apache.commons.codec.CharEncoding;\n+import org.apache.commons.codec.Charsets;\n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n import org.junit.Test;\n     public void testEncodeUrlWithNullBitSet() throws Exception {\n         URLCodec urlCodec = new URLCodec();\n         String plain = \"Hello there!\";\n-        String encoded = new String( URLCodec.encodeUrl(null, plain.getBytes(\"UTF-8\")));\n+        String encoded = new String( URLCodec.encodeUrl(null, plain.getBytes(Charsets.UTF_8)));\n         assertEquals(\"Basic URL encoding test\", \n             \"Hello+there%21\", encoded);\n         assertEquals(\"Basic URL decoding test\", \n         assertEquals(\"Basic URL encoding test\", \n             \"Hello+there%21\", encoded);\n \n-        byte[] plainBA = plain.getBytes(\"UTF-8\");\n+        byte[] plainBA = plain.getBytes(Charsets.UTF_8);\n         byte[] encodedBA = (byte[]) urlCodec.encode((Object) plainBA);\n         encoded = new String(encodedBA);\n         assertEquals(\"Basic URL encoding test\", \n         assertEquals(\"Basic URL decoding test\", \n             \"Hello there!\", decoded);\n \n-        byte[] plainBA = plain.getBytes(\"UTF-8\");\n+        byte[] plainBA = plain.getBytes(Charsets.UTF_8);\n         byte[] decodedBA = (byte[]) urlCodec.decode((Object) plainBA);\n         decoded = new String(decodedBA);\n         assertEquals(\"Basic URL decoding test\", ", "timestamp": 1333287106, "metainfo": ""}