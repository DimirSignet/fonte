{"sha": "ce66f92033c01bcbb8ea2b22f59e1e9a5961e8c7", "log": "[CODEC-125] Implement a Beider-Morse phonetic matching codec. Fix test method names.  ", "commit": "\n--- a/src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java\n+++ b/src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java\n     }\n \n     @Test(expected = IllegalStateException.class)\n-    public void invalidLangResourceShouldRaiseException() {\n+    public void testInvalidLangIllegalStateException() {\n         Lang.loadFromResource(\"thisIsAMadeUpResourceName\", Languages.instance(NameType.GENERIC));\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n-    public void invalidLangShouldRaiseException() {\n+    public void testInvalidLangIllegalArgumentException() {\n         Rule.instance(NameType.GENERIC, RuleType.APPROX, \"noSuchLanguage\");\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n-    public void invalidLanguageResourceShouldRaiseException() {\n+    public void testInvalidLanguageIllegalArgumentException() {\n         Languages.instance(\"thereIsNoSuchLanguage\");\n     }\n \n     @Test(expected = IndexOutOfBoundsException.class)\n-    public void negativeIndexForRuleMatchShouldRaiseException() {\n+    public void testNegativeIndexForRuleMatchIndexOutOfBoundsException() {\n         Rule r = new Rule(\"a\", \"\", \"\", \"\", Collections.<String> emptySet(), \"bob\");\n         r.patternAndContextMatches(\"bob\", -1);\n     }\n \n     @Test\n-    public void setConcat() {\n+    public void testSetConcat() {\n         BeiderMorseEncoder bmpm = new BeiderMorseEncoder();\n         bmpm.setConcat(false);\n         assertEquals(\"Should be able to set concat to false\", false, bmpm.isConcat());\n     }\n \n     @Test\n-    public void setNameTypeAsh() {\n+    public void testSetNameTypeAsh() {\n         BeiderMorseEncoder bmpm = new BeiderMorseEncoder();\n         bmpm.setNameType(NameType.ASHKENAZI);\n         assertEquals(\"Name type should have been set to ash\", NameType.ASHKENAZI, bmpm.getNameType());\n     }\n \n     @Test\n-    public void setRuleTypeExact() {\n+    public void testSetRuleTypeExact() {\n         BeiderMorseEncoder bmpm = new BeiderMorseEncoder();\n         bmpm.setRuleType(RuleType.EXACT);\n         assertEquals(\"Rule type should have been set to exact\", RuleType.EXACT, bmpm.getRuleType());\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n-    public void setRuleTypeToRulesShouldRaiseException() {\n+    public void testSetRuleTypeToRulesIllegalArgumentException() {\n         BeiderMorseEncoder bmpm = new BeiderMorseEncoder();\n         bmpm.setRuleType(RuleType.RULES);\n     }\n--- /dev/null\n+++ b/src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.codec.language.bm;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+/**\n+ * Tests PhoneticEngine.\n+ * \n+ * @author Apache Software Foundation\n+ * @since 2.0\n+ */\n+@RunWith(Parameterized.class)\n+public class PhoneticEngineTest {\n+\n+    @Parameterized.Parameters\n+    public static List<Object[]> data() {\n+        return Arrays\n+                .asList(new Object[] { \"Renault\", \"rinolt|rino|rinDlt|rinalt|rinult|rinD|rina|rinu\", NameType.GENERIC, RuleType.APPROX,\n+                        true },\n+                        new Object[] { \"Renault\", \"rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinult\", NameType.ASHKENAZI, RuleType.APPROX, true },\n+                        new Object[] { \"Renault\", \"(rinDlt)\", NameType.SEPHARDIC, RuleType.APPROX, true },\n+                        new Object[] { \"SntJohn-Smith\", \"(sntjonsmit)\", NameType.GENERIC, RuleType.EXACT, true },\n+                        new Object[] { \"d'ortley\", \"ortlaj|ortlej|ortlaj|ortlej-dortlaj|dortlej|dortlaj|dortlej\", NameType.GENERIC,\n+                                RuleType.EXACT, true },\n+                        new Object[] {\n+                                \"van helsing\",\n+                                \"helSink|helsink|helzink|xelSink|xelsink|xelzink|HelSink|Helsink|Helzink-vanhelSink|vanhelsink|vanhelzink|vanjelSink|vanjelsink|vanjelzink|fanhelSink|fanhelsink|fanhelzink|fanjelSink|fanjelsink|fanjelzink|banhelSink|banhelsink|banhelzink|banjelSink|banjelsink|banjelzink\",\n+                                NameType.GENERIC, RuleType.EXACT, false });\n+    }\n+\n+    private final boolean concat;\n+    private final String name;\n+    private final NameType nameType;\n+    private final String phoneticExpected;\n+    private final RuleType ruleType;\n+\n+    public PhoneticEngineTest(String name, String phoneticExpected, NameType nameType, RuleType ruleType, boolean concat) {\n+        this.name = name;\n+        this.phoneticExpected = phoneticExpected;\n+        this.nameType = nameType;\n+        this.ruleType = ruleType;\n+        this.concat = concat;\n+    }\n+\n+    @Test(timeout = 10000L)\n+    public void testPhonetic() {\n+        PhoneticEngine engine = new PhoneticEngine(this.nameType, this.ruleType, this.concat);\n+\n+        String phoneticActual = engine.encode(this.name);\n+\n+        assertEquals(\"phoneme incorrect\", this.phoneticExpected, phoneticActual);\n+    }\n+}", "timestamp": 1311772800, "metainfo": ""}