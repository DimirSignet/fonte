{"sha": "026d5047d108ddd36bd807a3c119dd5057814161", "log": "Resolved FIXME comments: throw IAE when failed to parse resource files.  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/language/bm/Lang.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/Lang.java\n                     String[] parts = line.split(\"\\\\s+\");\n \n                     if (parts.length != 3) {\n-                        // FIXME: consider throwing an IllegalStateException like in Rule\n-                        // System.err.println(\"Warning: malformed line '\" + rawLine + \"'\");\n-                        continue;\n+                        throw new IllegalArgumentException(\"Malformed line '\" + rawLine + \"' in language resource '\" +\n+                                                           languageRulesResourceName + \"'\");\n                     }\n \n                     Pattern pattern = Pattern.compile(parts[0]);\n--- a/src/main/java/org/apache/commons/codec/language/bm/Rule.java\n+++ b/src/main/java/org/apache/commons/codec/language/bm/Rule.java\n                         // include statement\n                         String incl = line.substring(HASH_INCLUDE.length()).trim();\n                         if (incl.contains(\" \")) {\n-                            // FIXME: consider throwing an IllegalStateException like in parsePhonemeExpr\n-                            // System.err.println(\"Warning: malformed import statement: \" + rawLine);\n+                            throw new IllegalArgumentException(\"Malformed import statement '\" + rawLine + \"' in \" +\n+                                                               location);\n                         } else {\n                             lines.addAll(parseRules(createScanner(incl), location + \"->\" + incl));\n                         }\n                         // rule\n                         String[] parts = line.split(\"\\\\s+\");\n                         if (parts.length != 4) {\n-                            // FIXME: consider throwing an IllegalStateException like in parsePhonemeExpr\n-//                            System.err.println(\"Warning: malformed rule statement split into \" + parts.length +\n-//                                               \" parts: \" + rawLine);\n+                            throw new IllegalArgumentException(\"Malformed rule statement split into \" + parts.length +\n+                                                               \" parts: \" + rawLine + \" in \" + location);\n                         } else {\n                             try {\n                                 String pat = stripQuotes(parts[0]);\n                                 };\n                                 lines.add(r);\n                             } catch (IllegalArgumentException e) {\n-                                throw new IllegalStateException(\"Problem parsing line \" + currentLine, e);\n+                                throw new IllegalStateException(\"Problem parsing line '\" + currentLine + \"' in \" +\n+                                                                location, e);\n                             }\n                         }\n                     }", "timestamp": 1346358977, "metainfo": ""}