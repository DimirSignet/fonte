{"sha": "f282e951f122c9d4a8d65d92cab1949a98da786c", "log": "Rename pString to str, pObject to obj  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/binary/BaseNCodec.java\n+++ b/src/main/java/org/apache/commons/codec/binary/BaseNCodec.java\n      * Encodes an Object using the Base-N algorithm. This method is provided in order to satisfy the requirements of the\n      * Encoder interface, and will throw an EncoderException if the supplied object is not of type byte[].\n      *\n-     * @param pObject\n+     * @param obj\n      *            Object to encode\n      * @return An object (of type byte[]) containing the Base-N encoded data which corresponds to the byte[] supplied.\n      * @throws EncoderException\n      *             if the parameter supplied is not of type byte[]\n      */\n-    public Object encode(Object pObject) throws EncoderException {\n-        if (!(pObject instanceof byte[])) {\n+    public Object encode(Object obj) throws EncoderException {\n+        if (!(obj instanceof byte[])) {\n             throw new EncoderException(\"Parameter supplied to Base-N encode is not a byte[]\");\n         }\n-        return encode((byte[]) pObject);\n+        return encode((byte[]) obj);\n     }\n \n     /**\n      * Decodes an Object using the Base-N algorithm. This method is provided in order to satisfy the requirements of the\n      * Decoder interface, and will throw a DecoderException if the supplied object is not of type byte[] or String.\n      *\n-     * @param pObject\n+     * @param obj\n      *            Object to decode\n      * @return An object (of type byte[]) containing the binary data which corresponds to the byte[] or String supplied.\n      * @throws DecoderException\n      *             if the parameter supplied is not of type byte[]\n      */\n-    public Object decode(Object pObject) throws DecoderException {        \n-        if (pObject instanceof byte[]) {\n-            return decode((byte[]) pObject);\n-        } else if (pObject instanceof String) {\n-            return decode((String) pObject);\n+    public Object decode(Object obj) throws DecoderException {        \n+        if (obj instanceof byte[]) {\n+            return decode((byte[]) obj);\n+        } else if (obj instanceof String) {\n+            return decode((String) obj);\n         } else {\n             throw new DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\");\n         }\n--- a/src/main/java/org/apache/commons/codec/language/Caverphone.java\n+++ b/src/main/java/org/apache/commons/codec/language/Caverphone.java\n      * Encodes an Object using the caverphone algorithm. This method is provided in order to satisfy the requirements of\n      * the Encoder interface, and will throw an EncoderException if the supplied object is not of type java.lang.String.\n      * \n-     * @param pObject\n+     * @param obj\n      *            Object to encode\n      * @return An object (or type java.lang.String) containing the caverphone code which corresponds to the String\n      *         supplied.\n      * @throws EncoderException\n      *             if the parameter supplied is not of type java.lang.String\n      */\n-    public Object encode(Object pObject) throws EncoderException {\n-        if (!(pObject instanceof String)) {\n+    public Object encode(Object obj) throws EncoderException {\n+        if (!(obj instanceof String)) {\n             throw new EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\");\n         }\n-        return this.caverphone((String) pObject);\n+        return this.caverphone((String) obj);\n     }\n \n     /**\n      * Encodes a String using the Caverphone algorithm.\n      * \n-     * @param pString\n+     * @param str\n      *            String object to encode\n      * @return The caverphone code corresponding to the String supplied\n      */\n-    public String encode(String pString) {\n-        return this.caverphone(pString);\n+    public String encode(String str) {\n+        return this.caverphone(str);\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/codec/language/Metaphone.java\n+++ b/src/main/java/org/apache/commons/codec/language/Metaphone.java\n      * Encoder interface, and will throw an EncoderException if the\n      * supplied object is not of type java.lang.String.\n      *\n-     * @param pObject Object to encode\n+     * @param obj Object to encode\n      * @return An object (or type java.lang.String) containing the \n      *         metaphone code which corresponds to the String supplied.\n      * @throws EncoderException if the parameter supplied is not\n      *                          of type java.lang.String\n      */\n-    public Object encode(Object pObject) throws EncoderException {\n-        if (!(pObject instanceof String)) {\n+    public Object encode(Object obj) throws EncoderException {\n+        if (!(obj instanceof String)) {\n             throw new EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\"); \n         }\n-        return metaphone((String) pObject);\n+        return metaphone((String) obj);\n     }\n \n     /**\n      * Encodes a String using the Metaphone algorithm. \n      *\n-     * @param pString String object to encode\n+     * @param str String object to encode\n      * @return The metaphone code corresponding to the String supplied\n      */\n-    public String encode(String pString) {\n-        return metaphone(pString);   \n+    public String encode(String str) {\n+        return metaphone(str);   \n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/codec/language/Nysiis.java\n+++ b/src/main/java/org/apache/commons/codec/language/Nysiis.java\n      * Encoder interface, and will throw an {@link EncoderException} if the supplied object is not of type\n      * {@link String}.\n      *\n-     * @param pObject\n+     * @param obj\n      *            Object to encode\n      * @return An object (or a {@link String}) containing the NYSIIS code which corresponds to the given String.\n      * @throws EncoderException\n      * @throws IllegalArgumentException\n      *            if a character is not mapped\n      */\n-    public Object encode(Object pObject) throws EncoderException {\n-        if (!(pObject instanceof String)) {\n+    public Object encode(Object obj) throws EncoderException {\n+        if (!(obj instanceof String)) {\n             throw new EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\");\n         }\n-        return this.nysiis((String) pObject);\n+        return this.nysiis((String) obj);\n     }\n \n     /**\n      * Encodes a String using the NYSIIS algorithm.\n      *\n-     * @param pString\n+     * @param str\n      *            A String object to encode\n      * @return A Nysiis code corresponding to the String supplied\n      * @throws IllegalArgumentException\n      *            if a character is not mapped\n      */\n-    public String encode(String pString) {\n-        return this.nysiis(pString);\n+    public String encode(String str) {\n+        return this.nysiis(str);\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/codec/language/RefinedSoundex.java\n+++ b/src/main/java/org/apache/commons/codec/language/RefinedSoundex.java\n      * and will throw an EncoderException if the supplied object is not of type\n      * java.lang.String.\n      * \n-     * @param pObject\n+     * @param obj\n      *                  Object to encode\n      * @return An object (or type java.lang.String) containing the refined\n      *             soundex code which corresponds to the String supplied.\n      * @throws EncoderException\n      *                  if the parameter supplied is not of type java.lang.String\n      */\n-    public Object encode(Object pObject) throws EncoderException {\n-        if (!(pObject instanceof String)) {\n+    public Object encode(Object obj) throws EncoderException {\n+        if (!(obj instanceof String)) {\n             throw new EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\");\n         }\n-        return soundex((String) pObject);\n+        return soundex((String) obj);\n     }\n \n     /**\n      * Encodes a String using the refined soundex algorithm.\n      * \n-     * @param pString\n+     * @param str\n      *                  A String object to encode\n      * @return A Soundex code corresponding to the String supplied\n      */\n-    public String encode(String pString) {\n-        return soundex(pString);\n+    public String encode(String str) {\n+        return soundex(str);\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/codec/language/Soundex.java\n+++ b/src/main/java/org/apache/commons/codec/language/Soundex.java\n      * Encodes an Object using the soundex algorithm. This method is provided in order to satisfy the requirements of\n      * the Encoder interface, and will throw an EncoderException if the supplied object is not of type java.lang.String.\n      * \n-     * @param pObject\n+     * @param obj\n      *                  Object to encode\n      * @return An object (or type java.lang.String) containing the soundex code which corresponds to the String\n      *             supplied.\n      * @throws IllegalArgumentException\n      *                  if a character is not mapped\n      */\n-    public Object encode(Object pObject) throws EncoderException {\n-        if (!(pObject instanceof String)) {\n+    public Object encode(Object obj) throws EncoderException {\n+        if (!(obj instanceof String)) {\n             throw new EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\");\n         }\n-        return soundex((String) pObject);\n+        return soundex((String) obj);\n     }\n \n     /**\n      * Encodes a String using the soundex algorithm.\n      * \n-     * @param pString\n+     * @param str\n      *                  A String object to encode\n      * @return A Soundex code corresponding to the String supplied\n      * @throws IllegalArgumentException\n      *                  if a character is not mapped\n      */\n-    public String encode(String pString) {\n-        return soundex(pString);\n+    public String encode(String str) {\n+        return soundex(str);\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/codec/net/QCodec.java\n+++ b/src/main/java/org/apache/commons/codec/net/QCodec.java\n     /**\n      * Encodes a string into its quoted-printable form using the specified charset. Unsafe characters are escaped.\n      * \n-     * @param pString\n+     * @param str\n      *                  string to convert to quoted-printable form\n      * @param charset\n-     *                  the charset for pString\n+     *                  the charset for str\n      * @return quoted-printable string\n      * \n      * @throws EncoderException\n      *                  thrown if a failure condition is encountered during the encoding process.\n      */\n-    public String encode(final String pString, final Charset charset) throws EncoderException {\n-        if (pString == null) {\n-            return null;\n-        }\n-        return encodeText(pString, charset);\n+    public String encode(final String str, final Charset charset) throws EncoderException {\n+        if (str == null) {\n+            return null;\n+        }\n+        return encodeText(str, charset);\n     }\n \n     /**\n      * Encodes a string into its quoted-printable form using the specified charset. Unsafe characters are escaped.\n      * \n-     * @param pString\n+     * @param str\n      *                  string to convert to quoted-printable form\n      * @param charset\n-     *                  the charset for pString\n+     *                  the charset for str\n      * @return quoted-printable string\n      * \n      * @throws EncoderException\n      *                  thrown if a failure condition is encountered during the encoding process.\n      */\n-    public String encode(final String pString, final String charset) throws EncoderException {\n-        if (pString == null) {\n+    public String encode(final String str, final String charset) throws EncoderException {\n+        if (str == null) {\n             return null;\n         }\n         try {\n-            return encodeText(pString, charset);\n+            return encodeText(str, charset);\n         } catch (UnsupportedEncodingException e) {\n             throw new EncoderException(e.getMessage(), e);\n         }\n     /**\n      * Encodes a string into its quoted-printable form using the default charset. Unsafe characters are escaped.\n      * \n-     * @param pString\n+     * @param str\n      *                  string to convert to quoted-printable form\n      * @return quoted-printable string\n      * \n      * @throws EncoderException\n      *                  thrown if a failure condition is encountered during the encoding process.\n      */\n-    public String encode(String pString) throws EncoderException {\n-        if (pString == null) {\n-            return null;\n-        }\n-        return encode(pString, getCharset());\n+    public String encode(String str) throws EncoderException {\n+        if (str == null) {\n+            return null;\n+        }\n+        return encode(str, getCharset());\n     }\n \n     /**\n      * Decodes a quoted-printable string into its original form. Escaped characters are converted back to their original\n      * representation.\n      * \n-     * @param pString\n+     * @param str\n      *                  quoted-printable string to convert into its original form\n      * \n      * @return original string\n      * @throws DecoderException\n      *                  A decoder exception is thrown if a failure condition is encountered during the decode process.\n      */\n-    public String decode(String pString) throws DecoderException {\n-        if (pString == null) {\n+    public String decode(String str) throws DecoderException {\n+        if (str == null) {\n             return null;\n         }\n         try {\n-            return decodeText(pString);\n+            return decodeText(str);\n         } catch (UnsupportedEncodingException e) {\n             throw new DecoderException(e.getMessage(), e);\n         }\n     /**\n      * Encodes an object into its quoted-printable form using the default charset. Unsafe characters are escaped.\n      * \n-     * @param pObject\n+     * @param obj\n      *                  object to convert to quoted-printable form\n      * @return quoted-printable object\n      * \n      * @throws EncoderException\n      *                  thrown if a failure condition is encountered during the encoding process.\n      */\n-    public Object encode(Object pObject) throws EncoderException {\n-        if (pObject == null) {\n-            return null;\n-        } else if (pObject instanceof String) {\n-            return encode((String) pObject);\n+    public Object encode(Object obj) throws EncoderException {\n+        if (obj == null) {\n+            return null;\n+        } else if (obj instanceof String) {\n+            return encode((String) obj);\n         } else {\n             throw new EncoderException(\"Objects of type \" + \n-                  pObject.getClass().getName() + \n+                  obj.getClass().getName() + \n                   \" cannot be encoded using Q codec\");\n         }\n     }\n      * Decodes a quoted-printable object into its original form. Escaped characters are converted back to their original\n      * representation.\n      * \n-     * @param pObject\n+     * @param obj\n      *                  quoted-printable object to convert into its original form\n      * \n      * @return original object\n      *                  Thrown if the argument is not a <code>String</code>. Thrown if a failure condition is\n      *                  encountered during the decode process.\n      */\n-    public Object decode(Object pObject) throws DecoderException {\n-        if (pObject == null) {\n-            return null;\n-        } else if (pObject instanceof String) {\n-            return decode((String) pObject);\n+    public Object decode(Object obj) throws DecoderException {\n+        if (obj == null) {\n+            return null;\n+        } else if (obj instanceof String) {\n+            return decode((String) obj);\n         } else {\n             throw new DecoderException(\"Objects of type \" + \n-                  pObject.getClass().getName() + \n+                  obj.getClass().getName() + \n                   \" cannot be decoded using Q codec\");\n         }\n     }\n--- a/src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java\n+++ b/src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java\n      * RFC 1521 and is suitable for encoding binary data.\n      * </p>\n      * \n-     * @param pString\n+     * @param str\n      *                  string to convert to quoted-printable form\n      * @return quoted-printable string\n      * \n      * \n      * @see #getCharset()\n      */\n-    public String encode(String pString) throws EncoderException {\n-        return this.encode(pString, getCharset());\n+    public String encode(String str) throws EncoderException {\n+        return this.encode(str, getCharset());\n     }\n \n     /**\n      * Decodes a quoted-printable string into its original form using the specified string charset. Escaped characters\n      * are converted back to their original representation.\n      * \n-     * @param pString\n+     * @param str\n      *                  quoted-printable string to convert into its original form\n      * @param charset\n      *                  the original string charset\n      * @throws DecoderException\n      *                  Thrown if quoted-printable decoding is unsuccessful\n      */\n-    public String decode(String pString, Charset charset) throws DecoderException {\n-        if (pString == null) {\n-            return null;\n-        }\n-        return new String(this.decode(StringUtils.getBytesUsAscii(pString)), charset);\n+    public String decode(String str, Charset charset) throws DecoderException {\n+        if (str == null) {\n+            return null;\n+        }\n+        return new String(this.decode(StringUtils.getBytesUsAscii(str)), charset);\n     }\n \n     /**\n      * Decodes a quoted-printable string into its original form using the specified string charset. Escaped characters\n      * are converted back to their original representation.\n      * \n-     * @param pString\n+     * @param str\n      *                  quoted-printable string to convert into its original form\n      * @param charset\n      *                  the original string charset\n      * @throws UnsupportedEncodingException\n      *                  Thrown if charset is not supported\n      */\n-    public String decode(String pString, String charset) throws DecoderException, UnsupportedEncodingException {\n-        if (pString == null) {\n-            return null;\n-        }\n-        return new String(decode(StringUtils.getBytesUsAscii(pString)), charset);\n+    public String decode(String str, String charset) throws DecoderException, UnsupportedEncodingException {\n+        if (str == null) {\n+            return null;\n+        }\n+        return new String(decode(StringUtils.getBytesUsAscii(str)), charset);\n     }\n \n     /**\n      * Decodes a quoted-printable string into its original form using the default string charset. Escaped characters are\n      * converted back to their original representation.\n      * \n-     * @param pString\n+     * @param str\n      *                  quoted-printable string to convert into its original form\n      * @return original string\n      * @throws DecoderException\n      *                  Thrown if charset is not supported.\n      * @see #getCharset()\n      */\n-    public String decode(String pString) throws DecoderException {\n-        return this.decode(pString, this.getCharset());\n+    public String decode(String str) throws DecoderException {\n+        return this.decode(str, this.getCharset());\n     }\n \n     /**\n      * Encodes an object into its quoted-printable safe form. Unsafe characters are escaped.\n      * \n-     * @param pObject\n+     * @param obj\n      *                  string to convert to a quoted-printable form\n      * @return quoted-printable object\n      * @throws EncoderException\n      *                  Thrown if quoted-printable encoding is not applicable to objects of this type or if encoding is\n      *                  unsuccessful\n      */\n-    public Object encode(Object pObject) throws EncoderException {\n-        if (pObject == null) {\n-            return null;\n-        } else if (pObject instanceof byte[]) {\n-            return encode((byte[]) pObject);\n-        } else if (pObject instanceof String) {\n-            return encode((String) pObject);\n+    public Object encode(Object obj) throws EncoderException {\n+        if (obj == null) {\n+            return null;\n+        } else if (obj instanceof byte[]) {\n+            return encode((byte[]) obj);\n+        } else if (obj instanceof String) {\n+            return encode((String) obj);\n         } else {\n             throw new EncoderException(\"Objects of type \" + \n-                  pObject.getClass().getName() + \n+                  obj.getClass().getName() + \n                   \" cannot be quoted-printable encoded\");\n         }\n     }\n      * Decodes a quoted-printable object into its original form. Escaped characters are converted back to their original\n      * representation.\n      * \n-     * @param pObject\n+     * @param obj\n      *                  quoted-printable object to convert into its original form\n      * @return original object\n      * @throws DecoderException\n      *                  Thrown if the argument is not a <code>String</code> or <code>byte[]</code>. Thrown if a failure condition is\n      *                  encountered during the decode process.\n      */\n-    public Object decode(Object pObject) throws DecoderException {\n-        if (pObject == null) {\n-            return null;\n-        } else if (pObject instanceof byte[]) {\n-            return decode((byte[]) pObject);\n-        } else if (pObject instanceof String) {\n-            return decode((String) pObject);\n+    public Object decode(Object obj) throws DecoderException {\n+        if (obj == null) {\n+            return null;\n+        } else if (obj instanceof byte[]) {\n+            return decode((byte[]) obj);\n+        } else if (obj instanceof String) {\n+            return decode((String) obj);\n         } else {\n             throw new DecoderException(\"Objects of type \" + \n-                  pObject.getClass().getName() + \n+                  obj.getClass().getName() + \n                   \" cannot be quoted-printable decoded\");\n         }\n     }\n      * RFC 1521 and is suitable for encoding binary data and unformatted text.\n      * </p>\n      * \n-     * @param pString\n+     * @param str\n      *                  string to convert to quoted-printable form\n      * @param charset\n-     *                  the charset for pString\n+     *                  the charset for str\n      * @return quoted-printable string\n      */\n-    public String encode(String pString, Charset charset) {\n-        if (pString == null) {\n-            return null;\n-        }\n-        return StringUtils.newStringUsAscii(this.encode(pString.getBytes(charset)));\n+    public String encode(String str, Charset charset) {\n+        if (str == null) {\n+            return null;\n+        }\n+        return StringUtils.newStringUsAscii(this.encode(str.getBytes(charset)));\n     }\n \n     /**\n      * RFC 1521 and is suitable for encoding binary data and unformatted text.\n      * </p>\n      * \n-     * @param pString\n+     * @param str\n      *                  string to convert to quoted-printable form\n      * @param charset\n-     *                  the charset for pString\n+     *                  the charset for str\n      * @return quoted-printable string\n      * \n      * @throws UnsupportedEncodingException\n      *                  Thrown if the charset is not supported\n      */\n-    public String encode(String pString, String charset) throws UnsupportedEncodingException {\n-        if (pString == null) {\n-            return null;\n-        }\n-        return StringUtils.newStringUsAscii(encode(pString.getBytes(charset)));\n+    public String encode(String str, String charset) throws UnsupportedEncodingException {\n+        if (str == null) {\n+            return null;\n+        }\n+        return StringUtils.newStringUsAscii(encode(str.getBytes(charset)));\n     }\n }\n--- a/src/main/java/org/apache/commons/codec/net/URLCodec.java\n+++ b/src/main/java/org/apache/commons/codec/net/URLCodec.java\n     /**\n      * Encodes a string into its URL safe form using the specified string charset. Unsafe characters are escaped.\n      * \n-     * @param pString\n+     * @param str\n      *            string to convert to a URL safe form\n      * @param charset\n-     *            the charset for pString\n+     *            the charset for str\n      * @return URL safe string\n      * @throws UnsupportedEncodingException\n      *             Thrown if charset is not supported\n      */\n-    public String encode(String pString, String charset) throws UnsupportedEncodingException {\n-        if (pString == null) {\n-            return null;\n-        }\n-        return StringUtils.newStringUsAscii(encode(pString.getBytes(charset)));\n+    public String encode(String str, String charset) throws UnsupportedEncodingException {\n+        if (str == null) {\n+            return null;\n+        }\n+        return StringUtils.newStringUsAscii(encode(str.getBytes(charset)));\n     }\n \n     /**\n      * Encodes a string into its URL safe form using the default string \n      * charset. Unsafe characters are escaped.\n      *\n-     * @param pString string to convert to a URL safe form\n+     * @param str string to convert to a URL safe form\n      * @return URL safe string\n      * @throws EncoderException Thrown if URL encoding is unsuccessful\n      * \n      * @see #getDefaultCharset()\n      */\n-    public String encode(String pString) throws EncoderException {\n-        if (pString == null) {\n+    public String encode(String str) throws EncoderException {\n+        if (str == null) {\n             return null;\n         }\n         try {\n-            return encode(pString, getDefaultCharset());\n+            return encode(str, getDefaultCharset());\n         } catch (UnsupportedEncodingException e) {\n             throw new EncoderException(e.getMessage(), e);\n         }\n      * specified encoding. Escaped characters are converted back \n      * to their original representation.\n      *\n-     * @param pString URL safe string to convert into its original form\n+     * @param str URL safe string to convert into its original form\n      * @param charset the original string charset\n      * @return original string \n      * @throws DecoderException Thrown if URL decoding is unsuccessful\n      * @throws UnsupportedEncodingException Thrown if charset is not\n      *                                      supported \n      */\n-    public String decode(String pString, String charset) throws DecoderException, UnsupportedEncodingException {\n-        if (pString == null) {\n-            return null;\n-        }\n-        return new String(decode(StringUtils.getBytesUsAscii(pString)), charset);\n+    public String decode(String str, String charset) throws DecoderException, UnsupportedEncodingException {\n+        if (str == null) {\n+            return null;\n+        }\n+        return new String(decode(StringUtils.getBytesUsAscii(str)), charset);\n     }\n \n     /**\n      * string charset. Escaped characters are converted back to their \n      * original representation.\n      *\n-     * @param pString URL safe string to convert into its original form\n+     * @param str URL safe string to convert into its original form\n      * @return original string \n      * @throws DecoderException Thrown if URL decoding is unsuccessful\n      * \n      * @see #getDefaultCharset()\n      */\n-    public String decode(String pString) throws DecoderException {\n-        if (pString == null) {\n+    public String decode(String str) throws DecoderException {\n+        if (str == null) {\n             return null;\n         }\n         try {\n-            return decode(pString, getDefaultCharset());\n+            return decode(str, getDefaultCharset());\n         } catch (UnsupportedEncodingException e) {\n             throw new DecoderException(e.getMessage(), e);\n         }\n      * Encodes an object into its URL safe form. Unsafe characters are \n      * escaped.\n      *\n-     * @param pObject string to convert to a URL safe form\n+     * @param obj string to convert to a URL safe form\n      * @return URL safe object\n      * @throws EncoderException Thrown if URL encoding is not \n      *                          applicable to objects of this type or\n      *                          if encoding is unsuccessful\n      */\n-    public Object encode(Object pObject) throws EncoderException {\n-        if (pObject == null) {\n-            return null;\n-        } else if (pObject instanceof byte[]) {\n-            return encode((byte[])pObject);\n-        } else if (pObject instanceof String) {\n-            return encode((String)pObject);\n+    public Object encode(Object obj) throws EncoderException {\n+        if (obj == null) {\n+            return null;\n+        } else if (obj instanceof byte[]) {\n+            return encode((byte[])obj);\n+        } else if (obj instanceof String) {\n+            return encode((String)obj);\n         } else {\n             throw new EncoderException(\"Objects of type \" +\n-                pObject.getClass().getName() + \" cannot be URL encoded\"); \n+                obj.getClass().getName() + \" cannot be URL encoded\"); \n               \n         }\n     }\n      * Decodes a URL safe object into its original form. Escaped characters are converted back to their original\n      * representation.\n      * \n-     * @param pObject\n+     * @param obj\n      *                  URL safe object to convert into its original form\n      * @return original object\n      * @throws DecoderException\n      *                  Thrown if the argument is not a <code>String</code> or <code>byte[]</code>. Thrown if a failure condition is\n      *                  encountered during the decode process.\n      */\n-    public Object decode(Object pObject) throws DecoderException {\n-        if (pObject == null) {\n-            return null;\n-        } else if (pObject instanceof byte[]) {\n-            return decode((byte[]) pObject);\n-        } else if (pObject instanceof String) {\n-            return decode((String) pObject);\n+    public Object decode(Object obj) throws DecoderException {\n+        if (obj == null) {\n+            return null;\n+        } else if (obj instanceof byte[]) {\n+            return decode((byte[]) obj);\n+        } else if (obj instanceof String) {\n+            return decode((String) obj);\n         } else {\n-            throw new DecoderException(\"Objects of type \" + pObject.getClass().getName() + \" cannot be URL decoded\");\n+            throw new DecoderException(\"Objects of type \" + obj.getClass().getName() + \" cannot be URL decoded\");\n \n         }\n     }", "timestamp": 1332951928, "metainfo": ""}