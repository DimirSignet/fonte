{"sha": "f1994bd1aebbd9fe53917c67b3b89b6725fec385", "log": "Use test data example from PHP impl http://repo.magdev.de/src/Text_ColognePhonetic-0.2.2/test/Text_ColognePhoneticTest.php  ", "commit": "\n--- a/src/test/org/apache/commons/codec/language/ColognePhoneticTest.java\n+++ b/src/test/org/apache/commons/codec/language/ColognePhoneticTest.java\n \n package org.apache.commons.codec.language;\n \n+import junit.framework.Assert;\n+\n import org.apache.commons.codec.StringEncoder;\n import org.apache.commons.codec.StringEncoderAbstractTest;\n \n public class ColognePhoneticTest extends StringEncoderAbstractTest {\n \n+    private ColognePhonetic colognePhonetic = new ColognePhonetic();\n+\n     public ColognePhoneticTest(String name) {\n         super(name);\n+    }\n+\n+    public void checkEncoding(String expected, String source) {\n+        Assert.assertEquals(\"Source: \" + source, expected, this.colognePhonetic.encode(source));\n     }\n \n     protected StringEncoder createEncoder() {\n     }\n \n     public void testAabjoe() {\n-        assertEquals(\"01\", new ColognePhonetic().encode(\"Aabjoe\"));\n+        this.checkEncoding(\"01\", \"Aabjoe\");\n     }\n \n-    public void testBorderCases() {\n-        ColognePhonetic koellePhon = new ColognePhonetic();\n+    public void testAaclan() {\n+        this.checkEncoding(\"0856\", \"Aaclan\");\n+    }\n \n+    public void testEdgeCases() {\n         String[][] data = {\n             {\"a\", \"0\"},\n             {\"e\", \"0\"},\n             {\"r\", \"7\"}};\n \n         for (int i = 0; i < data.length; i++) {\n-            assertEquals(\"Failed to correctly convert element of index: \" + i, data[i][1], koellePhon.colognePhonetic(data[i][0]));\n+            Assert.assertEquals(\"Failed to correctly convert element of index: \" + i, data[i][1],\n+                    this.colognePhonetic.colognePhonetic(data[i][0]));\n         }\n     }\n \n     public void testExamples() {\n-        ColognePhonetic koellePhon = new ColognePhonetic();\n         String[][] data = {{\"M\u00fcller-L\u00fcdenscheidt\", \"65752682\"}, {\"Breschnew\", \"17863\"}, {\"Wikipedia\", \"3412\"}};\n         for (int i = 0; i < data.length; i++) {\n-            assertEquals(data[i][1], koellePhon.colognePhonetic(data[i][0]));\n+            this.checkEncoding(data[i][1], data[i][0]);\n         }\n     }\n \n+    public void testHyphen() {\n+        this.checkEncoding(\"174845214\", \"bergisch-gladbach\");\n+    }\n+\n     public void testIsCologneEquals() {\n-        ColognePhonetic koellePhon = new ColognePhonetic();\n-        assertFalse(\"Cologne-phonetic encodings should not be equal\", koellePhon.isCologneEqual(\"Meyer\", \"M\u00fcller\"));\n-        assertTrue(\"Cologne-phonetic encodings should be equal\", koellePhon.isCologneEqual(\"Meyer\", \"Mayr\"));\n+        Assert.assertFalse(\"Cologne-phonetic encodings should not be equal\", this.colognePhonetic.isCologneEqual(\"Meyer\", \"M\u00fcller\"));\n+        Assert.assertTrue(\"Cologne-phonetic encodings should be equal\", this.colognePhonetic.isCologneEqual(\"Meyer\", \"Mayr\"));\n+    }\n+\n+    public void testIsCologneEqualsPhpData() {\n+        String[][] data = {\n+            {\"house\", \"house\"},\n+            {\"House\", \"house\"},\n+            {\"Haus\", \"house\"},\n+            {\"ganz\", \"Gans\"},\n+            {\"ganz\", \"G\u00e4nse\"},\n+            {\"Miyagi\", \"Miyako\"}};\n+        for (int i = 0; i < data.length; i++) {\n+            this.colognePhonetic.isCologneEqual(data[i][1], data[i][0]);\n+        }\n+    }\n+\n+    /**\n+     * Test data from http://repo.magdev.de/src/Text_ColognePhonetic-0.2.2/test/Text_ColognePhoneticTest.php\n+     */\n+    public void testPhpData() {\n+        String[][] data = {\n+            {\"peter\", \"127\"},\n+            {\"pharma\", \"376\"},\n+            {\"bergisch-gladbach\", \"174845214\"},\n+            {\"m\u00f6nchengladbach\", \"664645214\"},\n+           // {\"deutsch\", \"288\"}, // Probably a bug\n+            {\"deutz\", \"28\"},\n+           // {\"hamburg\", \"6174\"},\n+           // {\"hannover\", \"637\"},\n+           // {\"christstollen\", \"4788256\"},\n+            {\"Xanthippe\", \"48621\"},\n+            {\"Zacharias\", \"8478\"},\n+           // {\"Holzbau\", \"581\"},\n+           // {\"matsch\", \"688\"},\n+            {\"matz\", \"68\"},\n+            {\"Arbeitsamt\", \"071862\"},\n+            {\"Eberhard\", \"01772\"},\n+            {\"Eberhardt\", \"01772\"},\n+           // {\"heithabu\", \"21\"},\n+            {\"M\u00fcller-L\u00fcdenscheidt\", \"65752682\"},};\n+        for (int i = 0; i < data.length; i++) {\n+            this.checkEncoding(data[i][1], data[i][0]);\n+        }\n     }\n }", "timestamp": 1298396771, "metainfo": ""}