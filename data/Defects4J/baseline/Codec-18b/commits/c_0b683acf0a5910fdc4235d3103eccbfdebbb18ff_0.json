{"sha": "0b683acf0a5910fdc4235d3103eccbfdebbb18ff", "log": "Simplify  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/digest/DigestUtils.java\n+++ b/src/main/java/org/apache/commons/codec/digest/DigestUtils.java\n  * <pre>\n  * import static org.apache.commons.codec.digest.MessageDigestAlgorithms.SHA_224;\n  * ...\n- * byte [] digest = DigestUtils.with(SHA_224).update(dataToDigest).done();\n- * String hdigest = DigestUtils.with(SHA_224).update(new File(\"pom.xml\")).asHex();\n+ * byte [] digest = new DigestUtils(SHA_224).digest(dataToDigest);\n+ * String hdigest = new DigestUtils(SHA_224).digestAsHex(new File(\"pom.xml\"));\n  * </pre>\n  * @see MessageDigestAlgorithms\n  * @version $Id$\n      * @return the digest\n      * @throws IOException\n      *             On error reading from the stream\n-     * @since 1.11 (was private previously)\n+     * @since 1.11 (was private)\n      */\n     public static byte[] digest(final MessageDigest messageDigest, final InputStream data) throws IOException {\n         return updateDigest(messageDigest, data).digest();\n         return getDigest(messageDigestAlgorithm, null) != null;\n     }\n \n-    // Fluent interface\n-\n     private final MessageDigest messageDigest;\n \n     // public to maintain binary compatibility\n         this.messageDigest = null;\n     }\n \n-    private DigestUtils(MessageDigest digest) {\n+    /**\n+     * Creates an instance using the provided {@link MessageDigest} parameter.\n+     *\n+     * This can then be used to create digests using methods such as\n+     * {@link #digest(byte[])} and {@link #digestAsHex(File)}.\n+     *\n+     * @param digest the {@link MessageDigest} to use\n+     * @since 1.11\n+     */\n+    public DigestUtils(MessageDigest digest) {\n         this.messageDigest = digest;\n     }\n \n     /**\n-     * Returns a fluent instance for the digest algorithm.\n-     * Does not reset the digest before use.\n-     * @param digest the digest instance to use\n-     * @return the fluent instance\n-     * @since 1.11\n-     */\n-    public static DigestUtils with(MessageDigest digest) {\n-        return new DigestUtils(digest);\n-    }\n-\n-    /**\n-     * Creates a {@link MessageDigest} and returns a fluent instance.\n-     *\n-     * @param name the name of digest algorithm to create, e.g. {@link MessageDigestAlgorithms#MD5}\n-     * @return the fluent instance\n-     * @since 1.11\n-     */\n-    public static DigestUtils with(String name) {\n-        return new DigestUtils(getDigest(name));\n+     * Creates an instance using the provided {@link MessageDigest} parameter.\n+     *\n+     * This can then be used to create digests using methods such as\n+     * {@link #digest(byte[])} and {@link #digestAsHex(File)}.\n+     *\n+     * @param name the name of the {@link MessageDigest} to use\n+     * @see #getDigest(String)\n+     * @throws IllegalArgumentException\n+     *             when a {@link NoSuchAlgorithmException} is caught.\n+     * @since 1.11\n+     */\n+    public DigestUtils(String name) {\n+        this(getDigest(name));\n     }\n \n     /**\n     }\n \n     /**\n-     * Completes the hash computation and returns the hash\n-     * accumulated by one or more invocations of an update method.\n-     *\n-     * @return the hash as a byte array\n-     *\n-     * @since 1.11\n-     */\n-    public byte[] done() {\n-        return messageDigest.digest();\n-    }\n-\n-    /**\n-     * Completes the hash computation and returns the hash\n-     * accumulated by one or more invocations of an update method.\n-     *\n-     * @return the hash as a hex String\n-     *\n-     * @since 1.11\n-     */\n-    public String asHex() {\n-        return Hex.encodeHexString(messageDigest.digest());\n-    }\n-\n-    /**\n-     * Updates the {@link MessageDigest} in the {@link DigestUtils} instance\n-     *\n-     * @param data\n-     *            the data to update the {@link MessageDigest} with\n-     * @return the updated {@link DigestUtils}\n-     * @since 1.11\n-     */\n-    public DigestUtils update(final byte[] data) {\n-        messageDigest.update(data);\n-        return this;\n-    }\n-\n-    /**\n-     * Updates the {@link MessageDigest} in the {@link DigestUtils} instance\n-     *\n-     * @param data\n-     *            the data to update the {@link MessageDigest} with\n-     * @return the updated {@link DigestUtils}\n-     * @since 1.11\n-     */\n-    public DigestUtils update(final ByteBuffer data) {\n-        messageDigest.update(data);\n-        return this;\n-    }\n-\n-    /**\n-     * Updates the {@link MessageDigest} in the {@link DigestUtils} instance\n-     *\n-     * @param data\n-     *            the data to update the {@link MessageDigest} with\n-     * @return the updated {@link DigestUtils}\n-     * @since 1.11\n-     */\n-    public DigestUtils update(final String data) {\n-        messageDigest.update(StringUtils.getBytesUtf8(data));\n-        return this;\n-    }\n-\n-    /**\n-     * Updates the {@link MessageDigest} in the {@link DigestUtils} instance\n-     *\n-     * @param data\n-     *            the data to update the {@link MessageDigest} with\n-     * @return the updated {@link DigestUtils}\n-     * @throws IOException\n-     *             If some I/O error occurs.\n-     * @since 1.11\n-     */\n-    public DigestUtils update(final InputStream data) throws IOException {\n-        final byte[] buffer = new byte[STREAM_BUFFER_LENGTH];\n-        int read = data.read(buffer, 0, STREAM_BUFFER_LENGTH);\n-\n-        while (read > -1) {\n-            messageDigest.update(buffer, 0, read);\n-            read = data.read(buffer, 0, STREAM_BUFFER_LENGTH);\n-        }\n-        return this;\n-    }\n-\n-    /**\n-     * Updates the {@link MessageDigest} in the {@link DigestUtils} instance\n-     *\n-     * @param data\n-     *            the data to update the {@link MessageDigest} with\n-     * @return the updated {@link DigestUtils}\n-     * @throws IOException\n-     *             If some I/O error occurs.\n-     * @throws SecurityException\n-     *             if a security manager exists and its {@code checkRead} method denies read access to the file.\n-     * @since 1.11\n-     */\n-    public DigestUtils update(final File data) throws IOException {\n-        final BufferedInputStream stream = new BufferedInputStream(new FileInputStream(data));\n-        try {\n-            return update(stream);\n-        } finally {\n-            stream.close();\n-        }\n-    }\n+     * Reads through a byte array and returns the digest for the data.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return the digest\n+     * @since 1.11\n+     */\n+    public byte[] digest(final byte[] data) {\n+        return updateDigest(messageDigest, data).digest();\n+    }\n+\n+    /**\n+     * Reads through a byte array and returns the digest for the data.\n+     *\n+     * @param data\n+     *            Data to digest treated as UTF-8 string\n+     * @return the digest\n+     * @since 1.11\n+     */\n+    public byte[] digest(final String data) {\n+        return updateDigest(messageDigest, data).digest();\n+    }\n+\n+    /**\n+     * Reads through a ByteBuffer and returns the digest for the data\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return the digest\n+     *\n+     * @since 1.11\n+     */\n+    public byte[] digest(final ByteBuffer data) {\n+        return updateDigest(messageDigest, data).digest();\n+    }\n+\n+    /**\n+     * Reads through a File and returns the digest for the data\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return the digest\n+     * @throws IOException\n+     *             On error reading from the stream\n+     * @since 1.11\n+     */\n+    public byte[] digest(final File data) throws IOException {\n+        return updateDigest(messageDigest, data).digest();\n+    }\n+\n+    /**\n+     * Reads through an InputStream and returns the digest for the data\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return the digest\n+     * @throws IOException\n+     *             On error reading from the stream\n+     * @since 1.11\n+     */\n+    public byte[] digest(final InputStream data) throws IOException {\n+        return updateDigest(messageDigest, data).digest();\n+    }\n+\n+    /**\n+     * Reads through a byte array and returns the digest for the data.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return the digest as a hex string\n+     * @since 1.11\n+     */\n+    public String digestAsHex(final byte[] data) {\n+        return Hex.encodeHexString(digest(data));\n+    }\n+\n+    /**\n+     * Reads through a byte array and returns the digest for the data.\n+     *\n+     * @param data\n+     *            Data to digest treated as UTF-8 string\n+     * @return the digest as a hex string\n+     * @since 1.11\n+     */\n+    public String digestAsHex(final String data) {\n+        return Hex.encodeHexString(digest(data));\n+    }\n+\n+    /**\n+     * Reads through a ByteBuffer and returns the digest for the data\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return the digest as a hex string\n+     *\n+     * @since 1.11\n+     */\n+    public String digestAsHex(final ByteBuffer data) {\n+        return Hex.encodeHexString(digest(data));\n+    }\n+\n+    /**\n+     * Reads through a File and returns the digest for the data\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return the digest as a hex string\n+     * @throws IOException\n+     *             On error reading from the stream\n+     * @since 1.11\n+     */\n+    public String digestAsHex(final File data) throws IOException {\n+        return Hex.encodeHexString(digest(data));\n+    }\n+\n+    /**\n+     * Reads through an InputStream and returns the digest for the data\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return the digest as a hex string\n+     * @throws IOException\n+     *             On error reading from the stream\n+     * @since 1.11\n+     */\n+    public String digestAsHex(final InputStream data) throws IOException {\n+        return Hex.encodeHexString(digest(data));\n+    }\n+\n }\n--- a/src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java\n+++ b/src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java\n     public void testSha224() throws IOException {\n         assumeJava8();\n         assertEquals(\"d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f\",\n-                DigestUtils.with(MessageDigestAlgorithms.SHA_224).update((\"\")).asHex());\n+                new DigestUtils(MessageDigestAlgorithms.SHA_224).digestAsHex((\"\")));\n         assertEquals(\"730e109bd7a8a32b1cb9d9a09aa2325d2430587ddbc0c38bad911525\",\n-                DigestUtils.with(MessageDigestAlgorithms.SHA_224).update(\"The quick brown fox jumps over the lazy dog\").asHex());\n+                new DigestUtils(MessageDigestAlgorithms.SHA_224).digestAsHex(\"The quick brown fox jumps over the lazy dog\"));\n \n         // Examples from FIPS 180-4?\n     }", "timestamp": 1464001967, "metainfo": ""}