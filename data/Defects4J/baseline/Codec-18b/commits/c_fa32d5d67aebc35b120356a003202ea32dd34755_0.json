{"sha": "fa32d5d67aebc35b120356a003202ea32dd34755", "log": "CODEC-167 - Test our decode with pad character in the middle  ", "commit": "\n--- a/src/test/java/org/apache/commons/codec/binary/Base64Test.java\n+++ b/src/test/java/org/apache/commons/codec/binary/Base64Test.java\n         final byte[] decode = b64.decode(\"SGVsbG{\\u00e9\\u00e9\\u00e9\\u00e9\\u00e9\\u00e9}8gV29ybGQ=\");\n         final String decodeString = StringUtils.newStringUtf8(decode);\n         assertEquals(\"decode hello world\", \"Hello World\", decodeString);\n+    }\n+\n+    /**\n+     * Test our decode with pad character in the middle.\n+     * (Our current implementation:  halt decode and return what we've got so far).\n+     *\n+     * The point of this test is not to say \"this is the correct way to decode base64.\"\n+     * The point is simply to keep us aware of the current logic since 1.4 so we\n+     * don't accidentally break it without realizing.\n+     *\n+     * Note for historians.  The 1.3 logic would decode to:\n+     * \"Hello World\\u0000Hello World\" -- null in the middle ---\n+     * and 1.4 unwittingly changed it to current logic.\n+     */\n+    @Test\n+    public void testDecodeWithInnerPad() {\n+        final String content = \"SGVsbG8gV29ybGQ=SGVsbG8gV29ybGQ=\";\n+        byte[] result = Base64.decodeBase64(content);\n+        byte[] shouldBe = StringUtils.getBytesUtf8(\"Hello World\");\n+        assertTrue(\"decode should halt at pad (=)\", Arrays.equals(result, shouldBe));\n     }\n \n     /**", "timestamp": 1361214047, "metainfo": ""}