{"sha": "bedf8732cf2d09f4d5fd1360e2f23e7891af48aa", "log": "CODEC-160 Base64.encodeBase64URLSafeString doesn't add padding characters at the end. Javadoc updated to clarify this  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/binary/Base64.java\n+++ b/src/main/java/org/apache/commons/codec/binary/Base64.java\n      * @param urlSafe\n      *            Instead of emitting '+' and '/' we emit '-' and '_' respectively. urlSafe is only applied to encode\n      *            operations. Decoding seamlessly handles both modes.\n+     *            <b>Note: no padding is added when using the URL-safe alphabet.</b>\n      * @throws IllegalArgumentException\n      *             The provided lineSeparator included some base64 characters. That's not going to work!\n      * @since 1.4\n     /**\n      * <p>\n      * Encodes all of the provided data, starting at inPos, for inAvail bytes. Must be called at least twice: once with\n-     * the data to encode, and once with inAvail set to \"-1\" to alert encoder that EOF has been reached, so flush last\n+     * the data to encode, and once with inAvail set to \"-1\" to alert encoder that EOF has been reached, to flush last\n      * remaining bytes (if not multiple of 3).\n      * </p>\n+     * <p><b>Note: no padding is added when encoding using the URL-safe alphabet.</b></p>\n      * <p>\n      * Thanks to \"commons\" project in ws.apache.org for the bitwise operations, and general approach.\n      * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/\n     /**\n      * Encodes binary data using a URL-safe variation of the base64 algorithm but does not chunk the output. The\n      * url-safe variation emits - and _ instead of + and / characters.\n-     *\n+     * <b>Note: no padding is added.</b>\n      * @param binaryData\n      *            binary data to encode\n      * @return byte[] containing Base64 characters in their UTF-8 representation.\n     /**\n      * Encodes binary data using a URL-safe variation of the base64 algorithm but does not chunk the output. The\n      * url-safe variation emits - and _ instead of + and / characters.\n-     *\n+     * <b>Note: no padding is added.</b>\n      * @param binaryData\n      *            binary data to encode\n      * @return String containing Base64 characters\n      *            if {@code true} this encoder will chunk the base64 output into 76 character blocks\n      * @param urlSafe\n      *            if {@code true} this encoder will emit - and _ instead of the usual + and / characters.\n+     *            <b>Note: no padding is added when encoding using the URL-safe alphabet.</b>\n      * @return Base64-encoded data.\n      * @throws IllegalArgumentException\n      *             Thrown when the input array needs an output array bigger than {@link Integer#MAX_VALUE}\n      *            if {@code true} this encoder will chunk the base64 output into 76 character blocks\n      * @param urlSafe\n      *            if {@code true} this encoder will emit - and _ instead of the usual + and / characters.\n+     *            <b>Note: no padding is added when encoding using the URL-safe alphabet.</b>\n      * @param maxResultSize\n      *            The maximum result size to accept.\n      * @return Base64-encoded data.", "timestamp": 1349807182, "metainfo": ""}