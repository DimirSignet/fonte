{"sha": "bdf8e5c049a7f6bbe706c6d35bff55a79bba1e65", "log": "Add back code for 1.6 to keep binary compatibility.  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/binary/Base64.java\n+++ b/src/main/java/org/apache/commons/codec/binary/Base64.java\n     }\n \n     /**\n+     * Tests a given byte array to see if it contains only valid characters within the Base64 alphabet. Currently the\n+     * method treats whitespace as valid.\n+     * \n+     * @param arrayOctet\n+     *            byte array to test\n+     * @return <code>true</code> if all bytes are valid characters in the Base64 alphabet or if the byte array is empty;\n+     *         <code>false</code>, otherwise\n+     * @deprecated 1.5 Use {@link #isBase64(byte[])}, will be removed in 2.0.\n+     */\n+    public static boolean isArrayByteBase64(byte[] arrayOctet) {\n+        return isBase64(arrayOctet);\n+    }\n+\n+    /**\n      * Returns whether or not the <code>octet</code> is in the base 64 alphabet.\n      * \n      * @param octet\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/codec/language/Caverphone.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.codec.language;\n+\n+import org.apache.commons.codec.EncoderException;\n+import org.apache.commons.codec.StringEncoder;\n+\n+/**\n+ * Encodes a string into a Caverphone 2.0 value. Delegate to a {@link Caverphone2} instance.\n+ * \n+ * This is an algorithm created by the Caversham Project at the University of Otago. It implements the Caverphone 2.0\n+ * algorithm:\n+ * \n+ * @author Apache Software Foundation\n+ * @version $Id: Caverphone.java 1079535 2011-03-08 20:54:37Z ggregory $\n+ * @see <a href=\"http://en.wikipedia.org/wiki/Caverphone\">Wikipedia - Caverphone</a>\n+ * @see <a href=\"http://caversham.otago.ac.nz/files/working/ctp150804.pdf\">Caverphone 2.0 specification</a>\n+ * @since 1.4\n+ * @deprecated 1.5 Replaced by {@link Caverphone2}, will be removed in 2.0.\n+ */\n+public class Caverphone implements StringEncoder {\n+\n+    /**\n+     * Delegate to a {@link Caverphone2} instance to avoid code duplication.\n+     */\n+    final private Caverphone2 encoder = new Caverphone2();\n+\n+    /**\n+     * Creates an instance of the Caverphone encoder\n+     */\n+    public Caverphone() {\n+        super();\n+    }\n+\n+    /**\n+     * Encodes the given String into a Caverphone value.\n+     * \n+     * @param source\n+     *            String the source string\n+     * @return A caverphone code for the given String\n+     */\n+    public String caverphone(String source) {\n+        return this.encoder.encode(source);\n+    }\n+\n+    /**\n+     * Encodes an Object using the caverphone algorithm. This method is provided in order to satisfy the requirements of\n+     * the Encoder interface, and will throw an EncoderException if the supplied object is not of type java.lang.String.\n+     * \n+     * @param pObject\n+     *            Object to encode\n+     * @return An object (or type java.lang.String) containing the caverphone code which corresponds to the String\n+     *         supplied.\n+     * @throws EncoderException\n+     *             if the parameter supplied is not of type java.lang.String\n+     */\n+    public Object encode(Object pObject) throws EncoderException {\n+        if (!(pObject instanceof String)) {\n+            throw new EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\");\n+        }\n+        return this.caverphone((String) pObject);\n+    }\n+\n+    /**\n+     * Encodes a String using the Caverphone algorithm.\n+     * \n+     * @param pString\n+     *            String object to encode\n+     * @return The caverphone code corresponding to the String supplied\n+     */\n+    public String encode(String pString) {\n+        return this.caverphone(pString);\n+    }\n+\n+    /**\n+     * Tests if the caverphones of two strings are identical.\n+     * \n+     * @param str1\n+     *            First of two strings to compare\n+     * @param str2\n+     *            Second of two strings to compare\n+     * @return <code>true</code> if the caverphones of these strings are identical, <code>false</code> otherwise.\n+     */\n+    public boolean isCaverphoneEqual(String str1, String str2) {\n+        return this.caverphone(str1).equals(this.caverphone(str2));\n+    }\n+\n+}\n--- a/src/main/java/org/apache/commons/codec/language/Soundex.java\n+++ b/src/main/java/org/apache/commons/codec/language/Soundex.java\n      */\n     public static final Soundex US_ENGLISH = new Soundex();\n \n+    /**\n+     * The maximum length of a Soundex code - Soundex codes are only four characters by definition.\n+     * \n+     * @deprecated This feature is not needed since the encoding size must be constant. Will be removed in 2.0.\n+     */\n+    private int maxLength = 4;\n+\n+    /**\n+     * Every letter of the alphabet is \"mapped\" to a numerical value. This char array holds the values to which each\n+     * letter is mapped. This implementation contains a default map for US_ENGLISH\n+     */\n+    private final char[] soundexMapping;\n+\n+    /**\n+     * Creates an instance using US_ENGLISH_MAPPING\n+     * \n+     * @see Soundex#Soundex(char[])\n+     * @see Soundex#US_ENGLISH_MAPPING\n+     */\n+    public Soundex() {\n+        this.soundexMapping = US_ENGLISH_MAPPING;\n+    }\n+\n+    /**\n+     * Creates a soundex instance using the given mapping. This constructor can be used to provide an internationalized\n+     * mapping for a non-Western character set.\n+     * \n+     * Every letter of the alphabet is \"mapped\" to a numerical value. This char array holds the values to which each\n+     * letter is mapped. This implementation contains a default map for US_ENGLISH\n+     * \n+     * @param mapping\n+     *                  Mapping array to use when finding the corresponding code for a given character\n+     */\n+    public Soundex(char[] mapping) {\n+        this.soundexMapping = new char[mapping.length];\n+        System.arraycopy(mapping, 0, this.soundexMapping, 0, mapping.length);\n+    }\n+\n+    /**\n+     * Creates a refined soundex instance using a custom mapping. This constructor can be used to customize the mapping,\n+     * and/or possibly provide an internationalized mapping for a non-Western character set.\n+     * \n+     * @param mapping\n+     *            Mapping string to use when finding the corresponding code for a given character\n+     * @since 1.4\n+     */\n+    public Soundex(String mapping) {\n+        this.soundexMapping = mapping.toCharArray();\n+    }\n \n     /**\n      * Encodes the Strings and returns the number of characters in the two encoded Strings that are the same. This\n      */\n     public int difference(String s1, String s2) throws EncoderException {\n         return SoundexUtils.difference(this, s1, s2);\n-    }\n-\n-    /**\n-     * Every letter of the alphabet is \"mapped\" to a numerical value. This char array holds the values to which each\n-     * letter is mapped. This implementation contains a default map for US_ENGLISH\n-     */\n-    private final char[] soundexMapping;\n-\n-    /**\n-     * Creates an instance using US_ENGLISH_MAPPING\n-     * \n-     * @see Soundex#Soundex(char[])\n-     * @see Soundex#US_ENGLISH_MAPPING\n-     */\n-    public Soundex() {\n-        this.soundexMapping = US_ENGLISH_MAPPING;\n-    }\n-\n-    /**\n-     * Creates a soundex instance using the given mapping. This constructor can be used to provide an internationalized\n-     * mapping for a non-Western character set.\n-     * \n-     * Every letter of the alphabet is \"mapped\" to a numerical value. This char array holds the values to which each\n-     * letter is mapped. This implementation contains a default map for US_ENGLISH\n-     * \n-     * @param mapping\n-     *                  Mapping array to use when finding the corresponding code for a given character\n-     */\n-    public Soundex(char[] mapping) {\n-        this.soundexMapping = new char[mapping.length];\n-        System.arraycopy(mapping, 0, this.soundexMapping, 0, mapping.length);\n-    }\n-\n-    /**\n-     * Creates a refined soundex instance using a custom mapping. This constructor can be used to customize the mapping,\n-     * and/or possibly provide an internationalized mapping for a non-Western character set.\n-     * \n-     * @param mapping\n-     *            Mapping string to use when finding the corresponding code for a given character\n-     * @since 1.4\n-     */\n-    public Soundex(String mapping) {\n-        this.soundexMapping = mapping.toCharArray();\n     }\n \n     /**\n     }\n \n     /**\n+     * Returns the maxLength. Standard Soundex\n+     * \n+     * @deprecated This feature is not needed since the encoding size must be constant. Will be removed in 2.0.\n+     * @return int\n+     */\n+    public int getMaxLength() {\n+        return this.maxLength;\n+    }\n+\n+    /**\n      * Returns the soundex mapping.\n      * \n      * @return soundexMapping.\n         return this.getSoundexMapping()[index];\n     }\n \n+    /**\n+     * Sets the maxLength.\n+     * \n+     * @deprecated This feature is not needed since the encoding size must be constant. Will be removed in 2.0.\n+     * @param maxLength\n+     *                  The maxLength to set\n+     */\n+    public void setMaxLength(int maxLength) {\n+        this.maxLength = maxLength;\n+    }\n+    \n     /**\n      * Retrieves the Soundex code for a given String object.\n      * \n--- a/src/main/java/org/apache/commons/codec/net/URLCodec.java\n+++ b/src/main/java/org/apache/commons/codec/net/URLCodec.java\n     \n     /**\n      * The default charset used for string decoding and encoding.\n-     */\n-    protected final String charset;\n+     * \n+     * TODO: This field will be final in 2.0.\n+     */\n+    protected String charset;\n     \n     /**\n      * Release 1.5 made this field final.\n         return this.charset;\n     }\n \n+    /**\n+     * The <code>String</code> encoding used for decoding and encoding.\n+     * \n+     * @return Returns the encoding.\n+     * \n+     * @deprecated Use {@link #getDefaultCharset()}, will be removed in 2.0.\n+     */\n+    public String getEncoding() {\n+        return this.charset;\n+    }\n+\n }", "timestamp": 1321221436, "metainfo": ""}