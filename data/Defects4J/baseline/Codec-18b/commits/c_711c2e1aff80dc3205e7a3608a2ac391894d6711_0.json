{"sha": "711c2e1aff80dc3205e7a3608a2ac391894d6711", "log": "[CODEC-187] Beider Morse Phonetic Matching producing incorrect tokens. Apply patch https://issues.apache.org/jira/secure/attachment/12651251/CODEC-187_ashkenazi_approx_any_v2.patch  ", "commit": "\n--- a/src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java\n+++ b/src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java\n         // concat is true, ruleType is EXACT\n         args = new TreeMap<String, String>();\n         args.put(\"nameType\", \"ASHKENAZI\");\n-        assertEquals(encode(args, true, \"Angelo\"), \"AnElO|AnSelO|AngElO|AngzelO|AnkselO|AnzelO\");\n+        assertEquals(encode(args, true, \"Angelo\"), \"YngYlo|Yngilo|angYlo|angilo|anilo|anxilo|anzilo|ongYlo|ongilo|onilo|onxilo|onzilo\");\n         args.put(\"ruleType\", \"EXACT\");\n         assertEquals(encode(args, true, \"Angelo\"), \"andZelo|angelo|anhelo|anxelo\");\n         assertEquals(encode(args, true, \"D'Angelo\"), \"dandZelo|dangelo|danhelo|danxelo\");\n         // concat is false, ruleType is EXACT\n         args = new TreeMap<String, String>();\n         args.put(\"nameType\", \"ASHKENAZI\");\n-        assertEquals(encode(args, false, \"Angelo\"), \"AnElO|AnSelO|AngElO|AngzelO|AnkselO|AnzelO\");\n+        assertEquals(encode(args, false, \"Angelo\"), \"YngYlo|Yngilo|angYlo|angilo|anilo|anxilo|anzilo|ongYlo|ongilo|onilo|onxilo|onzilo\");\n         args.put(\"ruleType\", \"EXACT\");\n         assertEquals(encode(args, false, \"Angelo\"), \"andZelo|angelo|anhelo|anxelo\");\n         assertEquals(encode(args, false, \"D'Angelo\"), \"dandZelo|dangelo|danhelo|danxelo\");\n         // concat is true, ruleType is APPROX\n         args = new TreeMap<String, String>();\n         args.put(\"nameType\", \"ASHKENAZI\");\n-        assertEquals(encode(args, true, \"Angelo\"), \"AnElO|AnSelO|AngElO|AngzelO|AnkselO|AnzelO\");\n-        args.put(\"ruleType\", \"APPROX\");\n-        assertEquals(encode(args, true, \"Angelo\"), \"AnElO|AnSelO|AngElO|AngzelO|AnkselO|AnzelO\");\n-        assertEquals(encode(args, true, \"D'Angelo\"), \"dAnElO|dAnSelO|dAngElO|dAngzelO|dAnkselO|dAnzelO\");\n-        args.put(\"languageSet\", \"italian,greek,spanish\");\n-        assertEquals(encode(args, true, \"Angelo\"), \"AnSelO|AngElO|AngzelO|AnkselO\");\n+        assertEquals(encode(args, true, \"Angelo\"), \"YngYlo|Yngilo|angYlo|angilo|anilo|anxilo|anzilo|ongYlo|ongilo|onilo|onxilo|onzilo\");\n+        args.put(\"ruleType\", \"APPROX\");\n+        assertEquals(encode(args, true, \"Angelo\"), \"YngYlo|Yngilo|angYlo|angilo|anilo|anxilo|anzilo|ongYlo|ongilo|onilo|onxilo|onzilo\");\n+        assertEquals(encode(args, true, \"D'Angelo\"), \"dYngYlo|dYngilo|dangYlo|dangilo|danilo|danxilo|danzilo|dongYlo|dongilo|donilo|donxilo|donzilo\");\n+        args.put(\"languageSet\", \"italian,greek,spanish\");\n+        assertEquals(encode(args, true, \"Angelo\"), \"angilo|anxilo|ongilo|onxilo\");\n         assertEquals(encode(args, true, \"1234\"), \"\");\n \n         // concat is false, ruleType is APPROX\n         args = new TreeMap<String, String>();\n         args.put(\"nameType\", \"ASHKENAZI\");\n-        assertEquals(encode(args, false, \"Angelo\"), \"AnElO|AnSelO|AngElO|AngzelO|AnkselO|AnzelO\");\n-        args.put(\"ruleType\", \"APPROX\");\n-        assertEquals(encode(args, false, \"Angelo\"), \"AnElO|AnSelO|AngElO|AngzelO|AnkselO|AnzelO\");\n-        assertEquals(encode(args, false, \"D'Angelo\"), \"dAnElO|dAnSelO|dAngElO|dAngzelO|dAnkselO|dAnzelO\");\n-        args.put(\"languageSet\", \"italian,greek,spanish\");\n-        assertEquals(encode(args, false, \"Angelo\"), \"AnSelO|AngElO|AngzelO|AnkselO\");\n+        assertEquals(encode(args, false, \"Angelo\"), \"YngYlo|Yngilo|angYlo|angilo|anilo|anxilo|anzilo|ongYlo|ongilo|onilo|onxilo|onzilo\");\n+        args.put(\"ruleType\", \"APPROX\");\n+        assertEquals(encode(args, false, \"Angelo\"), \"YngYlo|Yngilo|angYlo|angilo|anilo|anxilo|anzilo|ongYlo|ongilo|onilo|onxilo|onzilo\");\n+        assertEquals(encode(args, false, \"D'Angelo\"), \"dYngYlo|dYngilo|dangYlo|dangilo|danilo|danxilo|danzilo|dongYlo|dongilo|donilo|donxilo|donzilo\");\n+        args.put(\"languageSet\", \"italian,greek,spanish\");\n+        assertEquals(encode(args, false, \"Angelo\"), \"angilo|anxilo|ongilo|onxilo\");\n         assertEquals(encode(args, false, \"1234\"), \"\");\n     }\n \n         args.put(\"nameType\", \"GENERIC\");\n         args.put(\"ruleType\", \"APPROX\");\n         assertEquals(encode(args, true, \"abram\"), \"Ybram|Ybrom|abram|abran|abrom|abron|avram|avrom|obram|obran|obrom|obron|ovram|ovrom\");\n+\n+        args.put(\"nameType\", \"ASHKENAZI\");\n+        args.put(\"ruleType\", \"APPROX\");\n+        assertEquals(encode(args, true, \"abram\"), \"Ybram|Ybrom|abram|abrom|avram|avrom|imbram|imbrom|obram|obrom|ombram|ombrom|ovram|ovrom\");\n     }\n \n     /**", "timestamp": 1403138499, "metainfo": ""}