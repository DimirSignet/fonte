{"sha": "531b5dcb45b80f1d72a305603e32105962b14ce7", "log": "[CODEC-156] DigestUtils: add APIs named after standard alg name SHA-1.  ", "commit": "\n--- a/src/main/java/org/apache/commons/codec/digest/DigestUtils.java\n+++ b/src/main/java/org/apache/commons/codec/digest/DigestUtils.java\n     }\n \n     /**\n+     * Returns an SHA-1 digest.\n+     *\n+     * @return An SHA-1 digest instance.\n+     * @throws IllegalArgumentException\n+     *             when a {@link NoSuchAlgorithmException} is caught, which should never happen because SHA-1 is a\n+     *             built-in algorithm\n+     * @see MessageDigestAlgorithms#SHA_1\n+     * @since 1.7\n+     */\n+    public static MessageDigest getSha1Digest() {\n+        return getDigest(MessageDigestAlgorithms.SHA_1);\n+    }\n+\n+    /**\n      * Returns an SHA-256 digest.\n      * <p>\n      * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n      * @param data\n      *            Data to digest\n      * @return SHA-1 digest\n+     * @since 1.7\n+     */\n+    public static byte[] sha1(byte[] data) {\n+        return getSha1Digest().digest(data);\n+    }\n+\n+    /**\n+     * Calculates the SHA-1 digest and returns the value as a <code>byte[]</code>.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return SHA-1 digest\n      * @throws IOException\n      *             On error reading from the stream\n      * @since 1.4\n      */\n     public static byte[] sha(InputStream data) throws IOException {\n         return digest(getShaDigest(), data);\n+    }\n+\n+    /**\n+     * Calculates the SHA-1 digest and returns the value as a <code>byte[]</code>.\n+     *\n+     * @param data\n+     *            Data to digest\n+     * @return SHA-1 digest\n+     * @throws IOException\n+     *             On error reading from the stream\n+     * @since 1.7\n+     */\n+    public static byte[] sha1(InputStream data) throws IOException {\n+        return digest(getSha1Digest(), data);\n     }\n \n     /**\n      * @return the updated {@link MessageDigest}\n      * @since 1.7\n      */\n-    public static MessageDigest updateDigest(final MessageDigest messageDigest, final String valueToDigest) {\n-        messageDigest.update(getBytesUtf8(valueToDigest));\n+    public static MessageDigest updateDigest(final MessageDigest messageDigest, byte[] valueToDigest) {\n+        messageDigest.update(valueToDigest);\n         return messageDigest;\n     }\n \n      * @return the updated {@link MessageDigest}\n      * @since 1.7\n      */\n-    public static MessageDigest updateDigest(final MessageDigest messageDigest, byte[] valueToDigest) {\n-        messageDigest.update(valueToDigest);\n+    public static MessageDigest updateDigest(final MessageDigest messageDigest, final String valueToDigest) {\n+        messageDigest.update(getBytesUtf8(valueToDigest));\n         return messageDigest;\n     }\n }\n--- a/src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java\n+++ b/src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java\n     }\n \n     @Test\n-    public void testUpdateWithByteArray(){\n+    public void testSha1UpdateWithByteArray(){\n+        final String d1 = \"C'est un homme qui rentre dans un caf\u00e9, et plouf\";\n+        final String d2 = \"C'est un homme, c'est qu'une t\u00eate, on lui offre un cadeau: 'oh... encore un chapeau!'\";\n+\n+        MessageDigest messageDigest = DigestUtils.getSha1Digest();\n+        messageDigest.update(d1.getBytes());\n+        messageDigest.update(d2.getBytes());\n+        final String expectedResult = Hex.encodeHexString(messageDigest.digest());\n+\n+        messageDigest = DigestUtils.getSha1Digest();\n+        DigestUtils.updateDigest(messageDigest, d1.getBytes());\n+        DigestUtils.updateDigest(messageDigest, d2.getBytes());\n+        final String actualResult = Hex.encodeHexString(messageDigest.digest());\n+\n+        assertEquals(expectedResult, actualResult);\n+    }\n+\n+    @Test\n+    public void testShaUpdateWithByteArray(){\n         final String d1 = \"C'est un homme qui rentre dans un caf\u00e9, et plouf\";\n         final String d2 = \"C'est un homme, c'est qu'une t\u00eate, on lui offre un cadeau: 'oh... encore un chapeau!'\";\n \n     }\n \n     @Test\n-    public void testUpdateWithString(){\n+    public void testSha1UpdateWithString(){\n+        final String d1 = \"C'est un homme qui rentre dans un caf\u00e9, et plouf\";\n+        final String d2 = \"C'est un homme, c'est qu'une t\u00eate, on lui offre un cadeau: 'oh... encore un chapeau!'\";\n+\n+        MessageDigest messageDigest = DigestUtils.getSha1Digest();\n+        messageDigest.update(StringUtils.getBytesUtf8(d1));\n+        messageDigest.update(StringUtils.getBytesUtf8(d2));\n+        final String expectedResult = Hex.encodeHexString(messageDigest.digest());\n+\n+        messageDigest = DigestUtils.getSha1Digest();\n+        DigestUtils.updateDigest(messageDigest, d1);\n+        DigestUtils.updateDigest(messageDigest, d2);\n+        final String actualResult = Hex.encodeHexString(messageDigest.digest());\n+\n+        assertEquals(expectedResult, actualResult);\n+    }\n+\n+    @Test\n+    public void testShaUpdateWithString(){\n         final String d1 = \"C'est un homme qui rentre dans un caf\u00e9, et plouf\";\n         final String d2 = \"C'est un homme, c'est qu'une t\u00eate, on lui offre un cadeau: 'oh... encore un chapeau!'\";\n ", "timestamp": 1346609325, "metainfo": ""}