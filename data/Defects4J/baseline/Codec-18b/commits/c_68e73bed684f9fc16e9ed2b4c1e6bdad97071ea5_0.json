{"sha": "68e73bed684f9fc16e9ed2b4c1e6bdad97071ea5", "log": "PR: Bugzilla Bug 27813 Alterations to Binary.java and its unit test for 1.3 release Submitted by:\tAlex Karasulu Reviewed by:\tGary Gregory Patch partially applied and modified:  (1) The bitset methods and tests do not compile on <1.4. I've fixed that in another patch attached to this ticket if/when we want to use it here.  (2) I did not include the bit set methods in this pass as they seem to be out of context for this class but would like to discuss this. The Binary codec as is today converts between byte arrays and \"0/1\" strings. If we want to convert to and from BitSet objects, maybe this is another codec or a BitSetUtils class in [lang]?  (3) All Java strings are Unicode, so the use of \"ASCII\" in comments and method names is misleading IMO, especially when what is meant are \"Strings of 0s and 1s\" so I'd like to not use \"Ascii\" in method names. I'll try to address that on commons-dev.  (4) I've also renamed the instance method \"byte[] decode(Object)\" to \"toByteArray\" because the name \"decode\" was being overloaded but not overriden, which to makes the class more confusing to understand IMHO considering the codec interfaces Decoder, StringDecoder, and BinaryDecoder. I found this tricky since Binary is NOT a StringDecoder but a BinaryDecoder. Using \"decode\" the method look like a framework implementation method when it is not. This is all I suppose a reflection on how truly useful these interfaces are in the first place, a different topic I know.   ", "commit": "\n--- a/src/java/org/apache/commons/codec/binary/Binary.java\n+++ b/src/java/org/apache/commons/codec/binary/Binary.java\n import org.apache.commons.codec.EncoderException;\n \n /**\n- * Encodes and decodes binary to and from ascii bit Strings.\n+ * Encodes and decodes byte arrays to and from ASCII bit Strings.\n  *\n  * @todo may want to add more bit vector functions like and/or/xor/nand\n  * @todo also might be good to generate boolean[] from byte[] et. cetera.\n  * @author Apache Software Foundation\n  * @since 1.3\n- * @version $Revision: 1.6 $\n+ * @version $Id $\n  */\n public class Binary implements BinaryDecoder, BinaryEncoder\n {\n+    /*\n+     * tried to avoid using ArrayUtils to minimize dependencies\n+     * while using these empty arrays - dep is just not worth it. \n+     */\n+    /** Empty char array. */\n+    private static final char[] EMPTY_CHAR_ARRAY = new char[0] ;\n+    /** Empty byte array. */\n+    private static final byte[] EMPTY_BYTE_ARRAY = new byte[0] ;\n+\n     /** Mask for bit 0 of a byte. */\n-    public static final int BIT_0 = 1 ;\n+    private static final int BIT_0 = 1 ;\n     /** Mask for bit 1 of a byte. */\n-    public static final int BIT_1 = 1 << 1 ;\n+    private static final int BIT_1 = 0x02 ;\n     /** Mask for bit 2 of a byte. */\n-    public static final int BIT_2 = 1 << 2 ;\n+    private static final int BIT_2 = 0x04 ;\n     /** Mask for bit 3 of a byte. */\n-    public static final int BIT_3 = 1 << 3 ;\n+    private static final int BIT_3 = 0x08 ;\n     /** Mask for bit 4 of a byte. */\n-    public static final int BIT_4 = 1 << 4 ;\n+    private static final int BIT_4 = 0x10 ;\n     /** Mask for bit 5 of a byte. */\n-    public static final int BIT_5 = 1 << 5 ;\n+    private static final int BIT_5 = 0x20 ;\n     /** Mask for bit 6 of a byte. */\n-    public static final int BIT_6 = 1 << 6 ;\n+    private static final int BIT_6 = 0x40 ;\n     /** Mask for bit 7 of a byte. */\n-    public static final int BIT_7 = 1 << 7 ;\n-    \n-    public static final int [] BITS = \n+    private static final int BIT_7 = 0x80 ;\n+    \n+    private static final int [] BITS = \n     {\n       BIT_0, BIT_1, BIT_2, BIT_3, BIT_4, BIT_5, BIT_6, BIT_7\n     } ;\n      */\n     public Object decode( Object ascii ) throws DecoderException\n     {\n+        if ( ascii == null )\n+        {\n+            return EMPTY_BYTE_ARRAY ;\n+        }\n+    \n         if ( ascii instanceof byte[] )\n         {\n             return fromAscii( ( byte[] ) ascii ) ;\n      *      the byte array argument \n      * @see org.apache.commons.codec.Decoder#decode(Object)\n      */\n-    public byte[] decode( String ascii )\n-    {\n+    public byte[] toByteArray( String ascii )\n+    {\n+        if (ascii == null) {\n+            return EMPTY_BYTE_ARRAY;\n+        }\n         return fromAscii( ascii.toCharArray() ) ;\n     }\n     \n+    \n+    // ------------------------------------------------------------------------\n+    //\n+    // static codec operations\n+    //\n+    // ------------------------------------------------------------------------\n     \n     /**\n      * Decodes a byte array where each char represents an ascii '0' or '1'.\n      */\n     public static byte[] fromAscii( char[] ascii )\n     {\n+        if ( ascii == null || ascii.length == 0 )\n+        {\n+            return EMPTY_BYTE_ARRAY ;\n+        }\n+    \n         // get length/8 times bytes with 3 bit shifts to the right of the length\n         byte[] l_raw = new byte[ ascii.length >> 3 ] ;\n         \n         /*\n-         * Yah its long and repetitive but I unraveled an internal loop to \n-         * check each bit of a byte for speed using the bit masks that are\n-         * precomputed which is another PITA but it makes it faster.\n-         * \n-         * We also decr index jj by 8 as we go along to not recompute indices\n-         * using multiplication every time inside the loop.\n-         * \n-         * @todo might want another nested loop to use BITS[] now that its here\n+         * We decr index jj by 8 as we go along to not recompute indices using \n+         * multiplication every time inside the loop.\n          */\n         for ( int ii=0, jj=ascii.length-1; ii < l_raw.length; ii++, jj-=8 )\n         {\n-            if ( ascii[jj] == '1' )\n+            for ( int bits=0; bits < BITS.length; ++bits) \n             {\n-                l_raw[ii] |= BIT_0 ;\n-            }\n+                if ( ascii[jj-bits] == '1' )\n+                {\n+                    l_raw[ii] |= BITS[bits] ;\n+                }\n+            }        \n             \n-            if ( ascii[jj - 1] == '1' )\n-            {\n-                l_raw[ii] |= BIT_1 ;\n-            }\n-\n-            if ( ascii[jj - 2] == '1' )\n-            {\n-                l_raw[ii] |= BIT_2 ;\n-            }\n-\n-            if ( ascii[jj - 3] == '1' )\n-            {\n-                l_raw[ii] |= BIT_3 ;\n-            }\n-\n-            if ( ascii[jj - 4] == '1' )\n-            {\n-                l_raw[ii] |= BIT_4 ;\n-            }\n-\n-            if ( ascii[jj - 5] == '1' )\n-            {\n-                l_raw[ii] |= BIT_5 ;\n-            }\n-\n-            if ( ascii[jj - 6] == '1' )\n-            {\n-                l_raw[ii] |= BIT_6 ;\n-            }\n-\n-            if ( ascii[jj - 7] == '1' )\n-            {\n-                l_raw[ii] |= BIT_7 ;\n-            }\n         }\n         \n         return l_raw ;\n      */\n     public static byte[] fromAscii( byte[] ascii )\n     {\n+        if ( ascii == null || ascii.length == 0 )\n+        {\n+            return EMPTY_BYTE_ARRAY ;\n+        }\n+    \n         // get length/8 times bytes with 3 bit shifts to the right of the length\n         byte[] l_raw = new byte[ ascii.length >> 3 ] ;\n         \n         /*\n-         * Yah its long and repetitive but I unraveled an internal loop to \n-         * check each bit of a byte for speed using the bit masks that are\n-         * precomputed which is another PITA but it makes it faster.\n-         * \n-         * We also decr index jj by 8 as we go along to not recompute indices\n-         * using multiplication every time inside the loop.\n-         * \n-         * @todo might want another nested loop to use BITS[] now that its here\n+         * We decr index jj by 8 as we go along to not recompute indices using \n+         * multiplication every time inside the loop.\n          */\n         for ( int ii=0, jj=ascii.length-1; ii < l_raw.length; ii++, jj-=8 )\n         {\n-            if ( ascii[jj] == '1' )\n+            for ( int bits=0; bits < BITS.length; ++bits) \n             {\n-                l_raw[ii] |= BIT_0 ;\n-            }\n-            \n-            if ( ascii[jj - 1] == '1' )\n-            {\n-                l_raw[ii] |= BIT_1 ;\n-            }\n-\n-            if ( ascii[jj - 2] == '1' )\n-            {\n-                l_raw[ii] |= BIT_2 ;\n-            }\n-\n-            if ( ascii[jj - 3] == '1' )\n-            {\n-                l_raw[ii] |= BIT_3 ;\n-            }\n-\n-            if ( ascii[jj - 4] == '1' )\n-            {\n-                l_raw[ii] |= BIT_4 ;\n-            }\n-\n-            if ( ascii[jj - 5] == '1' )\n-            {\n-                l_raw[ii] |= BIT_5 ;\n-            }\n-\n-            if ( ascii[jj - 6] == '1' )\n-            {\n-                l_raw[ii] |= BIT_6 ;\n-            }\n-\n-            if ( ascii[jj - 7] == '1' )\n-            {\n-                l_raw[ii] |= BIT_7 ;\n-            }\n+                if ( ascii[jj-bits] == '1' )\n+                {\n+                    l_raw[ii] |= BITS[bits] ;\n+                }\n+            }        \n         }\n         \n         return l_raw ;\n      */\n     public static byte[] toAsciiBytes( byte[] raw )\n     {\n+        if ( raw == null || raw.length == 0 )\n+        {\n+            return EMPTY_BYTE_ARRAY ;\n+        }\n+    \n         // get 8 times the bytes with 3 bit shifts to the left of the length\n         byte [] l_ascii = new byte[ raw.length << 3 ] ;\n         \n         /*\n-         * Yah its long and repetitive but I unraveled an internal loop to \n-         * check each bit of a byte for speed using the bit masks that are\n-         * precomputed which is another PITA but it makes it faster.\n-         * \n-         * We also decr index jj by 8 as we go along to not recompute indices\n-         * using multiplication every time inside the loop.\n-         * \n-         * @todo might want another nested loop to use BITS[] now that its here\n+         * We decr index jj by 8 as we go along to not recompute indices using \n+         * multiplication every time inside the loop.\n          */\n         for ( int ii=0, jj=l_ascii.length-1; ii < raw.length; ii++, jj-=8 )\n         {\n-            if ( ( raw[ii] & BIT_0 ) == 0 )\n+            for ( int bits=0; bits < BITS.length; ++bits) \n             {\n-                l_ascii[jj] = '0' ;\n-            }\n-            else\n-            {\n-                l_ascii[jj] = '1' ;\n-            }\n-            \n-            if ( ( raw[ii] & BIT_1 ) == 0 )\n-            {\n-                l_ascii[jj - 1] = '0' ;\n-            }\n-            else\n-            {\n-                l_ascii[jj - 1] = '1' ;\n-            }\n-\n-            if ( ( raw[ii] & BIT_2 ) == 0 )\n-            {\n-                l_ascii[jj - 2] = '0' ;\n-            }\n-            else\n-            {\n-                l_ascii[jj - 2] = '1' ;\n-            }\n-\n-            if ( ( raw[ii] & BIT_3 ) == 0 )\n-            {\n-                l_ascii[jj - 3] = '0' ;\n-            }\n-            else\n-            {\n-                l_ascii[jj - 3] = '1' ;\n-            }\n-\n-            if ( ( raw[ii] & BIT_4 ) == 0 )\n-            {\n-                l_ascii[jj - 4] = '0' ;\n-            }\n-            else\n-            {\n-                l_ascii[jj - 4] = '1' ;\n-            }\n-\n-            if ( ( raw[ii] & BIT_5 ) == 0 )\n-            {\n-                l_ascii[jj - 5] = '0' ;\n-            }\n-            else\n-            {\n-                l_ascii[jj - 5] = '1' ;\n-            }\n-\n-            if ( ( raw[ii] & BIT_6 ) == 0 )\n-            {\n-                l_ascii[jj - 6] = '0' ;\n-            }\n-            else\n-            {\n-                l_ascii[jj - 6] = '1' ;\n-            }\n-\n-            if ( ( raw[ii] & BIT_7 ) == 0 )\n-            {\n-                l_ascii[jj - 7] = '0' ;\n-            }\n-            else\n-            {\n-                l_ascii[jj - 7] = '1' ;\n-            }\n+                if ( ( raw[ii] & BITS[bits] ) == 0 )\n+                {\n+                    l_ascii[jj-bits] = '0' ;\n+                }\n+                else\n+                {\n+                    l_ascii[jj-bits] = '1' ;\n+                }\n+            }        \n         }\n         \n         return l_ascii ;\n      */\n     public static char[] toAsciiChars( byte[] raw )\n     {\n+        if ( raw == null || raw.length == 0 )\n+        {\n+            return EMPTY_CHAR_ARRAY ;\n+        }\n+        \n         // get 8 times the bytes with 3 bit shifts to the left of the length\n         char [] l_ascii = new char[ raw.length << 3 ] ;\n         \n         /*\n-         * Yah its long and repetitive but I unraveled an internal loop to \n-         * check each bit of a byte for speed using the bit masks that are\n-         * precomputed which is another PITA but it makes it faster.\n-         * \n-         * We also grow index jj by 8 as we go along to not recompute indices\n-         * using multiplication every time inside the loop.\n-         * \n-         * @todo might want another nested loop to use BITS[] now that its here\n+         * We decr index jj by 8 as we go along to not recompute indices using \n+         * multiplication every time inside the loop.\n          */\n         for ( int ii=0, jj=l_ascii.length-1; ii < raw.length; ii++, jj-=8 )\n         {\n-            if ( ( raw[ii] & BIT_0 ) == 0 )\n+            for ( int bits=0; bits < BITS.length; ++bits )\n             {\n-                l_ascii[jj] = '0' ;\n-            }\n-            else\n-            {\n-                l_ascii[jj] = '1' ;\n-            }\n-            \n-            if ( ( raw[ii] & BIT_1 ) == 0 )\n-            {\n-                l_ascii[jj - 1] = '0' ;\n-            }\n-            else\n-            {\n-                l_ascii[jj - 1] = '1' ;\n-            }\n-\n-            if ( ( raw[ii] & BIT_2 ) == 0 )\n-            {\n-                l_ascii[jj - 2] = '0' ;\n-            }\n-            else\n-            {\n-                l_ascii[jj - 2] = '1' ;\n-            }\n-\n-            if ( ( raw[ii] & BIT_3 ) == 0 )\n-            {\n-                l_ascii[jj - 3] = '0' ;\n-            }\n-            else\n-            {\n-                l_ascii[jj - 3] = '1' ;\n-            }\n-\n-            if ( ( raw[ii] & BIT_4 ) == 0 )\n-            {\n-                l_ascii[jj - 4] = '0' ;\n-            }\n-            else\n-            {\n-                l_ascii[jj - 4] = '1' ;\n-            }\n-\n-            if ( ( raw[ii] & BIT_5 ) == 0 )\n-            {\n-                l_ascii[jj - 5] = '0' ;\n-            }\n-            else\n-            {\n-                l_ascii[jj - 5] = '1' ;\n-            }\n-\n-            if ( ( raw[ii] & BIT_6 ) == 0 )\n-            {\n-                l_ascii[jj - 6] = '0' ;\n-            }\n-            else\n-            {\n-                l_ascii[jj - 6] = '1' ;\n-            }\n-\n-            if ( ( raw[ii] & BIT_7 ) == 0 )\n-            {\n-                l_ascii[jj - 7] = '0' ;\n-            }\n-            else\n-            {\n-                l_ascii[jj - 7] = '1' ;\n+                if ( ( raw[ii] & BITS[bits] ) == 0 )\n+                {\n+                    l_ascii[jj-bits] = '0' ;\n+                }\n+                else\n+                {\n+                    l_ascii[jj-bits] = '1' ;\n+                }\n             }\n         }\n         \n--- a/src/test/org/apache/commons/codec/binary/BinaryTest.java\n+++ b/src/test/org/apache/commons/codec/binary/BinaryTest.java\n \n package org.apache.commons.codec.binary ;\n \n+import java.util.BitSet;\n+\n import junit.framework.TestCase;\n+\n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n \n  * TestCase for Binary class.\n  *\n  * @author Apache Software Foundation\n- * @version $Id: BinaryTest.java,v 1.6 2004/03/17 19:54:27 ggregory Exp $\n+ * @version $Id: BinaryTest.java,v 1.7 2004/03/21 01:18:56 ggregory Exp $\n  */\n public class BinaryTest extends TestCase\n {\n+    /** mask with bit zero based index 0 raised */\n+    private static final int BIT_0 = 0x01 ;\n+    /** mask with bit zero based index 0 raised */\n+    private static final int BIT_1 = 0x02 ;\n+    /** mask with bit zero based index 0 raised */\n+    private static final int BIT_2 = 0x04 ;\n+    /** mask with bit zero based index 0 raised */\n+    private static final int BIT_3 = 0x08 ;\n+    /** mask with bit zero based index 0 raised */\n+    private static final int BIT_4 = 0x10 ;\n+    /** mask with bit zero based index 0 raised */\n+    private static final int BIT_5 = 0x20 ;\n+    /** mask with bit zero based index 0 raised */\n+    private static final int BIT_6 = 0x40 ;\n+    /** mask with bit zero based index 0 raised */\n+    private static final int BIT_7 = 0x80 ;\n+    \n+    /** an instance of the binary codec */\n     Binary instance = null ;\n \n+    \n     /*\n      * @see TestCase#setUp()\n      */\n         assertDecodeObject(bits, \"00000000\");\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 ;\n+        bits[0] = BIT_0 ;\n         assertDecodeObject(bits, \"00000001\");\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n+        bits[0] = BIT_0 | BIT_1 ;\n         assertDecodeObject(bits, \"00000011\");\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 ;\n         assertDecodeObject(bits, \"00000111\");\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 ;\n         assertDecodeObject(bits, \"00001111\");\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 ;\n         assertDecodeObject(bits, \"00011111\");\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 ;\n         assertDecodeObject(bits, \"00111111\");\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 ;\n         assertDecodeObject(bits, \"01111111\");\n \n         bits = new byte[1] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         assertDecodeObject(bits, \"11111111\");\n \n         // With a two raw binaries\n         \n         bits = new byte[2] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         assertDecodeObject(bits, \"0000000011111111\");\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         assertDecodeObject(bits, \"0000000111111111\");\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         assertDecodeObject(bits, \"0000001111111111\");\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         assertDecodeObject(bits, \"0000011111111111\");\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         assertDecodeObject(bits, \"0000111111111111\");\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         assertDecodeObject(bits, \"0001111111111111\");\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         assertDecodeObject(bits, \"0011111111111111\");\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         assertDecodeObject(bits, \"0111111111111111\");\n \n         bits = new byte[2] ;\n-        bits[1] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         assertDecodeObject(bits, \"1111111111111111\");\n+        \n+        assertDecodeObject(new byte[0], null);\n     }\n \n \n     // ------------------------------------------------------------------------\n \n     \n-    void assertDecodeObject(byte[] bits, String encodeMe) throws DecoderException {\n+    /**\n+     * Utility used to assert the encoded and decoded values.\n+     * \n+     * @param bits the pre-encoded data\n+     * @param encodeMe data to encode and compare\n+     */\n+    void assertDecodeObject(byte[] bits, String encodeMe) \n+        throws DecoderException \n+    {\n         byte[] decoded;\n+        \n         decoded = (byte[]) instance.decode((Object) encodeMe);\n         assertEquals(new String(bits), new String(decoded));\n-        decoded = (byte[]) instance.decode((Object) encodeMe.getBytes());\n+\n+        if ( encodeMe == null )\n+        {\n+            decoded = (byte[]) instance.decode((byte[])null);\n+        }\n+        else\n+        {    \n+            decoded = (byte[]) instance.decode((Object) encodeMe.getBytes());\n+        }\n         assertEquals(new String(bits), new String(decoded));\n-        decoded = (byte[]) instance.decode((Object) encodeMe.toCharArray());\n+        \n+        if ( encodeMe == null )\n+        {\n+            decoded = (byte[]) instance.decode((char[])null);\n+        }\n+        else\n+        {    \n+            decoded = (byte[]) instance.decode((Object) encodeMe.toCharArray());\n+        }\n         assertEquals(new String(bits), new String(decoded));\n     }\n \n+    \n     /*\n      * Tests for byte[] decode(byte[])\n      */\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 ;\n+        bits[0] = BIT_0 ;\n         decoded = instance.decode( \"00000001\".getBytes() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n+        bits[0] = BIT_0 | BIT_1 ;\n         decoded = instance.decode( \"00000011\".getBytes() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 ;\n         decoded = instance.decode( \"00000111\".getBytes() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 ;\n         decoded = instance.decode( \"00001111\".getBytes() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 ;\n         decoded = instance.decode( \"00011111\".getBytes() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 ;\n         decoded = instance.decode( \"00111111\".getBytes() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 ;\n         decoded = instance.decode( \"01111111\".getBytes() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         decoded = instance.decode( \"11111111\".getBytes() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         // With a two raw binaries\n         \n         bits = new byte[2] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         decoded = instance.decode( \"0000000011111111\".getBytes() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         decoded = instance.decode( \"0000000111111111\".getBytes() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         decoded = instance.decode( \"0000001111111111\".getBytes() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         decoded = instance.decode( \"0000011111111111\".getBytes() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         decoded = instance.decode( \"0000111111111111\".getBytes() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         decoded = instance.decode( \"0001111111111111\".getBytes() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         decoded = instance.decode( \"0011111111111111\".getBytes() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         decoded = instance.decode( \"0111111111111111\".getBytes() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         decoded = instance.decode( \"1111111111111111\".getBytes() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n     }\n \n     // ------------------------------------------------------------------------\n     //\n-    // Test decode(String)\n+    // Test toByteArray(String)\n     //\n     // ------------------------------------------------------------------------\n \n     \n     /*\n-     * Tests for byte[] decode(String)\n+     * Tests for byte[] toByteArray(String)\n      */\n-    public void testDecodeString()\n+    public void testToByteArrayFromString()\n     {\n         // With a single raw binary\n         \n         byte [] bits = new byte[1] ;\n-        byte [] decoded = instance.decode( \"00000000\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 ;\n-        decoded = instance.decode( \"00000001\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n-        decoded = instance.decode( \"00000011\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        decoded = instance.decode( \"00000111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        decoded = instance.decode( \"00001111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        decoded = instance.decode( \"00011111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        decoded = instance.decode( \"00111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        decoded = instance.decode( \"01111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = instance.decode( \"11111111\" ) ;\n+        byte [] decoded = instance.toByteArray( \"00000000\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = BIT_0 ;\n+        decoded = instance.toByteArray( \"00000001\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = BIT_0 | BIT_1 ;\n+        decoded = instance.toByteArray( \"00000011\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 ;\n+        decoded = instance.toByteArray( \"00000111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 ;\n+        decoded = instance.toByteArray( \"00001111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 ;\n+        decoded = instance.toByteArray( \"00011111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 ;\n+        decoded = instance.toByteArray( \"00111111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 ;\n+        decoded = instance.toByteArray( \"01111111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n+        decoded = instance.toByteArray( \"11111111\" ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         // With a two raw binaries\n         \n         bits = new byte[2] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = instance.decode( \"0000000011111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = instance.decode( \"0000000111111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = instance.decode( \"0000001111111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = instance.decode( \"0000011111111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = instance.decode( \"0000111111111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = instance.decode( \"0001111111111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = instance.decode( \"0011111111111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = instance.decode( \"0111111111111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = instance.decode( \"1111111111111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n+        decoded = instance.toByteArray( \"0000000011111111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = BIT_0 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n+        decoded = instance.toByteArray( \"0000000111111111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = BIT_0 | BIT_1 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n+        decoded = instance.toByteArray( \"0000001111111111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n+        decoded = instance.toByteArray( \"0000011111111111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n+        decoded = instance.toByteArray( \"0000111111111111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n+        decoded = instance.toByteArray( \"0001111111111111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n+        decoded = instance.toByteArray( \"0011111111111111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n+        decoded = instance.toByteArray( \"0111111111111111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[2] ;\n+        bits[1] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n+        decoded = instance.toByteArray( \"1111111111111111\" ) ;\n+        assertEquals( new String( bits ), new String( decoded ) ) ;\n+        \n+        assertEquals( 0, instance.toByteArray( ( String ) null ).length ) ;\n     }\n \n \n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 ;\n+        bits[0] = BIT_0 ;\n         decoded = Binary.fromAscii( \"00000001\".toCharArray() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n+        bits[0] = BIT_0 | BIT_1 ;\n         decoded = Binary.fromAscii( \"00000011\".toCharArray() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 ;\n         decoded = Binary.fromAscii( \"00000111\".toCharArray() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 ;\n         decoded = Binary.fromAscii( \"00001111\".toCharArray() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 ;\n         decoded = Binary.fromAscii( \"00011111\".toCharArray() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 ;\n         decoded = Binary.fromAscii( \"00111111\".toCharArray() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 ;\n         decoded = Binary.fromAscii( \"01111111\".toCharArray() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         decoded = Binary.fromAscii( \"11111111\".toCharArray() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         // With a two raw binaries\n         \n         bits = new byte[2] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         decoded = Binary.fromAscii( \"0000000011111111\".toCharArray() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         decoded = Binary.fromAscii( \"0000000111111111\".toCharArray() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         decoded = Binary.fromAscii( \"0000001111111111\".toCharArray() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         decoded = Binary.fromAscii( \"0000011111111111\".toCharArray() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         decoded = Binary.fromAscii( \"0000111111111111\".toCharArray() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         decoded = Binary.fromAscii( \"0001111111111111\".toCharArray() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         decoded = Binary.fromAscii( \"0011111111111111\".toCharArray() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         decoded = Binary.fromAscii( \"0111111111111111\".toCharArray() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         decoded = Binary.fromAscii( \"1111111111111111\".toCharArray() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n+        \n+        assertEquals( 0, Binary.fromAscii( ( char[] ) null ).length ) ;\n     }\n \n     \n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 ;\n+        bits[0] = BIT_0 ;\n         decoded = Binary.fromAscii( \"00000001\".getBytes() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n+        bits[0] = BIT_0 | BIT_1 ;\n         decoded = Binary.fromAscii( \"00000011\".getBytes() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 ;\n         decoded = Binary.fromAscii( \"00000111\".getBytes() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 ;\n         decoded = Binary.fromAscii( \"00001111\".getBytes() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 ;\n         decoded = Binary.fromAscii( \"00011111\".getBytes() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 ;\n         decoded = Binary.fromAscii( \"00111111\".getBytes() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 ;\n         decoded = Binary.fromAscii( \"01111111\".getBytes() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         decoded = Binary.fromAscii( \"11111111\".getBytes() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         // With a two raw binaries\n         \n         bits = new byte[2] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         decoded = Binary.fromAscii( \"0000000011111111\".getBytes() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         decoded = Binary.fromAscii( \"0000000111111111\".getBytes() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         decoded = Binary.fromAscii( \"0000001111111111\".getBytes() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         decoded = Binary.fromAscii( \"0000011111111111\".getBytes() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         decoded = Binary.fromAscii( \"0000111111111111\".getBytes() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         decoded = Binary.fromAscii( \"0001111111111111\".getBytes() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         decoded = Binary.fromAscii( \"0011111111111111\".getBytes() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         decoded = Binary.fromAscii( \"0111111111111111\".getBytes() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         decoded = Binary.fromAscii( \"1111111111111111\".getBytes() ) ;\n         assertEquals( new String( bits ), new String( decoded ) ) ;\n \n+        assertEquals( 0, Binary.fromAscii( ( byte[] ) null ).length ) ;\n     }\n     \n     \n         assertEquals( \"00000000\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 ;\n+        bits[0] = BIT_0 ;\n         l_encoded = new String( instance.encode( bits ) ) ;\n         assertEquals( \"00000001\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n+        bits[0] = BIT_0 | BIT_1 ;\n         l_encoded = new String( instance.encode( bits ) ) ;\n         assertEquals( \"00000011\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 ;\n         l_encoded = new String( instance.encode( bits ) ) ;\n         assertEquals( \"00000111\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 ;\n         l_encoded = new String( instance.encode( bits ) ) ;\n         assertEquals( \"00001111\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 ;\n         l_encoded = new String( instance.encode( bits ) ) ;\n         assertEquals( \"00011111\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 ;\n         l_encoded = new String( instance.encode( bits ) ) ;\n         assertEquals( \"00111111\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 ;\n         l_encoded = new String( instance.encode( bits ) ) ;\n         assertEquals( \"01111111\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( instance.encode( bits ) ) ;\n         assertEquals( \"11111111\", l_encoded ) ;\n \n         assertEquals( \"0000000000000000\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 ;\n+        bits[0] = BIT_0 ;\n         l_encoded = new String( instance.encode( bits ) ) ;\n         assertEquals( \"0000000000000001\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n+        bits[0] = BIT_0 | BIT_1 ;\n         l_encoded = new String( instance.encode( bits ) ) ;\n         assertEquals( \"0000000000000011\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 ;\n         l_encoded = new String( instance.encode( bits ) ) ;\n         assertEquals( \"0000000000000111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 ;\n         l_encoded = new String( instance.encode( bits ) ) ;\n         assertEquals( \"0000000000001111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 ;\n         l_encoded = new String( instance.encode( bits ) ) ;\n         assertEquals( \"0000000000011111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 ;\n         l_encoded = new String( instance.encode( bits ) ) ;\n         assertEquals( \"0000000000111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 ;\n         l_encoded = new String( instance.encode( bits ) ) ;\n         assertEquals( \"0000000001111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( instance.encode( bits ) ) ;\n         assertEquals( \"0000000011111111\", l_encoded ) ;\n \n                     // work on the other byte now\n         \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( instance.encode( bits ) ) ;\n         assertEquals( \"0000000111111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( instance.encode( bits ) ) ;\n         assertEquals( \"0000001111111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( instance.encode( bits ) ) ;\n         assertEquals( \"0000011111111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( instance.encode( bits ) ) ;\n         assertEquals( \"0000111111111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( instance.encode( bits ) ) ;\n         assertEquals( \"0001111111111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( instance.encode( bits ) ) ;\n         assertEquals( \"0011111111111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( instance.encode( bits ) ) ;\n         assertEquals( \"0111111111111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        bits[1] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n+        bits[1] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( instance.encode( bits ) ) ;\n         assertEquals( \"1111111111111111\", l_encoded ) ;\n+        \n+        assertEquals( 0, instance.encode((byte[])null).length ) ;\n     }\n \n \n         assertEquals( \"00000000\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 ;\n+        bits[0] = BIT_0 ;\n         l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n         assertEquals( \"00000001\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n+        bits[0] = BIT_0 | BIT_1 ;\n         l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n         assertEquals( \"00000011\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 ;\n         l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n         assertEquals( \"00000111\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 ;\n         l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n         assertEquals( \"00001111\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 ;\n         l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n         assertEquals( \"00011111\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 ;\n         l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n         assertEquals( \"00111111\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 ;\n         l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n         assertEquals( \"01111111\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n         assertEquals( \"11111111\", l_encoded ) ;\n \n         assertEquals( \"0000000000000000\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 ;\n+        bits[0] = BIT_0 ;\n         l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n         assertEquals( \"0000000000000001\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n+        bits[0] = BIT_0 | BIT_1 ;\n         l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n         assertEquals( \"0000000000000011\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 ;\n         l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n         assertEquals( \"0000000000000111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 ;\n         l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n         assertEquals( \"0000000000001111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 ;\n         l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n         assertEquals( \"0000000000011111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 ;\n         l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n         assertEquals( \"0000000000111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 ;\n         l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n         assertEquals( \"0000000001111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n         assertEquals( \"0000000011111111\", l_encoded ) ;\n \n                     // work on the other byte now\n         \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n         assertEquals( \"0000000111111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n         assertEquals( \"0000001111111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n         assertEquals( \"0000011111111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n         assertEquals( \"0000111111111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n         assertEquals( \"0001111111111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n         assertEquals( \"0011111111111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n         assertEquals( \"0111111111111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        bits[1] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n+        bits[1] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( Binary.toAsciiBytes( bits ) ) ;\n         assertEquals( \"1111111111111111\", l_encoded ) ;\n+        \n+        assertEquals( 0, Binary.toAsciiBytes( ( byte[] ) null ).length ) ;\n     }\n+    \n \n     // ------------------------------------------------------------------------\n     //\n         assertEquals( \"00000000\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 ;\n+        bits[0] = BIT_0 ;\n         l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n         assertEquals( \"00000001\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n+        bits[0] = BIT_0 | BIT_1 ;\n         l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n         assertEquals( \"00000011\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 ;\n         l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n         assertEquals( \"00000111\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 ;\n         l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n         assertEquals( \"00001111\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 ;\n         l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n         assertEquals( \"00011111\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 ;\n         l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n         assertEquals( \"00111111\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 ;\n         l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n         assertEquals( \"01111111\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n         assertEquals( \"11111111\", l_encoded ) ;\n \n         assertEquals( \"0000000000000000\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 ;\n+        bits[0] = BIT_0 ;\n         l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n         assertEquals( \"0000000000000001\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n+        bits[0] = BIT_0 | BIT_1 ;\n         l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n         assertEquals( \"0000000000000011\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 ;\n         l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n         assertEquals( \"0000000000000111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 ;\n         l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n         assertEquals( \"0000000000001111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 ;\n         l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n         assertEquals( \"0000000000011111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 ;\n         l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n         assertEquals( \"0000000000111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 ;\n         l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n         assertEquals( \"0000000001111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n         assertEquals( \"0000000011111111\", l_encoded ) ;\n \n                     // work on the other byte now\n         \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n         assertEquals( \"0000000111111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n         assertEquals( \"0000001111111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n         assertEquals( \"0000011111111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n         assertEquals( \"0000111111111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n         assertEquals( \"0001111111111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n         assertEquals( \"0011111111111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n         assertEquals( \"0111111111111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        bits[1] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n+        bits[1] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( Binary.toAsciiChars( bits ) ) ;\n         assertEquals( \"1111111111111111\", l_encoded ) ;\n+        \n+        assertEquals( 0, Binary.toAsciiChars( ( byte[] ) null ).length ) ;\n     }\n \n \n     // ------------------------------------------------------------------------\n \n     \n+    /**\n+     * Tests the toAsciiString(byte[]) method\n+     */\n     public void testToAsciiString()\n     {\n         // With a single raw binary\n         assertEquals( \"00000000\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 ;\n+        bits[0] = BIT_0 ;\n         l_encoded = Binary.toAsciiString( bits ) ;\n         assertEquals( \"00000001\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n+        bits[0] = BIT_0 | BIT_1 ;\n         l_encoded = Binary.toAsciiString( bits ) ;\n         assertEquals( \"00000011\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 ;\n         l_encoded = Binary.toAsciiString( bits ) ;\n         assertEquals( \"00000111\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 ;\n         l_encoded = Binary.toAsciiString( bits ) ;\n         assertEquals( \"00001111\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 ;\n         l_encoded = Binary.toAsciiString( bits ) ;\n         assertEquals( \"00011111\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 ;\n         l_encoded = Binary.toAsciiString( bits ) ;\n         assertEquals( \"00111111\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 ;\n         l_encoded = Binary.toAsciiString( bits ) ;\n         assertEquals( \"01111111\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = Binary.toAsciiString( bits ) ;\n         assertEquals( \"11111111\", l_encoded ) ;\n \n         assertEquals( \"0000000000000000\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 ;\n+        bits[0] = BIT_0 ;\n         l_encoded = Binary.toAsciiString( bits ) ;\n         assertEquals( \"0000000000000001\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n+        bits[0] = BIT_0 | BIT_1 ;\n         l_encoded = Binary.toAsciiString( bits ) ;\n         assertEquals( \"0000000000000011\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 ;\n         l_encoded = Binary.toAsciiString( bits ) ;\n         assertEquals( \"0000000000000111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 ;\n         l_encoded = Binary.toAsciiString( bits ) ;\n         assertEquals( \"0000000000001111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 ;\n         l_encoded = Binary.toAsciiString( bits ) ;\n         assertEquals( \"0000000000011111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 ;\n         l_encoded = Binary.toAsciiString( bits ) ;\n         assertEquals( \"0000000000111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 ;\n         l_encoded = Binary.toAsciiString( bits ) ;\n         assertEquals( \"0000000001111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = Binary.toAsciiString( bits ) ;\n         assertEquals( \"0000000011111111\", l_encoded ) ;\n \n                     // work on the other byte now\n         \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = Binary.toAsciiString( bits ) ;\n         assertEquals( \"0000000111111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = Binary.toAsciiString( bits ) ;\n         assertEquals( \"0000001111111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = Binary.toAsciiString( bits ) ;\n         assertEquals( \"0000011111111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = Binary.toAsciiString( bits ) ;\n         assertEquals( \"0000111111111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = Binary.toAsciiString( bits ) ;\n         assertEquals( \"0001111111111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = Binary.toAsciiString( bits ) ;\n         assertEquals( \"0011111111111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = Binary.toAsciiString( bits ) ;\n         assertEquals( \"0111111111111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        bits[1] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n+        bits[1] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = Binary.toAsciiString( bits ) ;\n         assertEquals( \"1111111111111111\", l_encoded ) ;\n     }\n     //\n     // ------------------------------------------------------------------------\n \n+    \n+    /*\n+     * Tests for Object encode(Object)\n+     */\n+    public void testEncodeObjectNull() throws Exception\n+    {\n+        Object obj = new byte[0] ;\n+        assertEquals( 0, ((char[])instance.encode(obj)).length ) ;\n+    }\n+    \n+    \n     /*\n      * Tests for Object encode(Object)\n      */\n         fail(\"Expected EncoderException\");\n     }\n     \n+    \n     /*\n      * Tests for Object encode(Object)\n      */\n         assertEquals( \"00000000\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 ;\n+        bits[0] = BIT_0 ;\n         l_encoded = new String( ( char [] ) \n                 instance.encode( ( Object ) bits ) ) ;\n         assertEquals( \"00000001\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n+        bits[0] = BIT_0 | BIT_1 ;\n         l_encoded = new String( ( char [] ) \n                 instance.encode( ( Object ) bits ) ) ;\n         assertEquals( \"00000011\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 ;\n         l_encoded = new String( ( char [] ) \n                 instance.encode( ( Object ) bits ) ) ;\n         assertEquals( \"00000111\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 ;\n         l_encoded = new String( ( char [] ) \n                 instance.encode( ( Object ) bits ) ) ;\n         assertEquals( \"00001111\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 ;\n         l_encoded = new String( ( char [] ) \n                 instance.encode( ( Object ) bits ) ) ;\n         assertEquals( \"00011111\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 ;\n         l_encoded = new String( ( char [] ) \n                 instance.encode( ( Object ) bits ) ) ;\n         assertEquals( \"00111111\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 ;\n         l_encoded = new String( ( char [] ) \n                 instance.encode( ( Object ) bits ) ) ;\n         assertEquals( \"01111111\", l_encoded ) ;\n \n         bits = new byte[1] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( ( char [] ) \n                 instance.encode( ( Object ) bits ) ) ;\n         assertEquals( \"11111111\", l_encoded ) ;\n         assertEquals( \"0000000000000000\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 ;\n+        bits[0] = BIT_0 ;\n         l_encoded = new String( ( char [] ) \n                 instance.encode( ( Object ) bits ) ) ;\n         assertEquals( \"0000000000000001\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n+        bits[0] = BIT_0 | BIT_1 ;\n         l_encoded = new String( ( char [] ) \n                 instance.encode( ( Object ) bits ) ) ;\n         assertEquals( \"0000000000000011\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 ;\n         l_encoded = new String( ( char [] ) \n                 instance.encode( ( Object ) bits ) ) ;\n         assertEquals( \"0000000000000111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 ;\n         l_encoded = new String( ( char [] ) \n                 instance.encode( ( Object ) bits ) ) ;\n         assertEquals( \"0000000000001111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 ;\n         l_encoded = new String( ( char [] ) \n                 instance.encode( ( Object ) bits ) ) ;\n         assertEquals( \"0000000000011111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 ;\n         l_encoded = new String( ( char [] ) \n                 instance.encode( ( Object ) bits ) ) ;\n         assertEquals( \"0000000000111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        bits[0] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 ;\n         l_encoded = new String( ( char [] ) \n                 instance.encode( ( Object ) bits ) ) ;\n         assertEquals( \"0000000001111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( ( char [] ) \n                 instance.encode( ( Object ) bits ) ) ;\n         assertEquals( \"0000000011111111\", l_encoded ) ;\n                     // work on the other byte now\n         \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( ( char [] ) \n                 instance.encode( ( Object ) bits ) ) ;\n         assertEquals( \"0000000111111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( ( char [] ) \n                 instance.encode( ( Object ) bits ) ) ;\n         assertEquals( \"0000001111111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( ( char [] ) \n                 instance.encode( ( Object ) bits ) ) ;\n         assertEquals( \"0000011111111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( ( char [] ) \n                 instance.encode( ( Object ) bits ) ) ;\n         assertEquals( \"0000111111111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( ( char [] ) \n                 instance.encode( ( Object ) bits ) ) ;\n         assertEquals( \"0001111111111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( ( char [] ) \n                 instance.encode( ( Object ) bits ) ) ;\n         assertEquals( \"0011111111111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[1] = BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( ( char [] ) \n                 instance.encode( ( Object ) bits ) ) ;\n         assertEquals( \"0111111111111111\", l_encoded ) ;\n \n         bits = new byte[2] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        bits[1] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n+        bits[0] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n+        bits[1] = ( byte ) ( BIT_0 | BIT_1 | BIT_2 \n+            | BIT_3 | BIT_4 | BIT_5 | BIT_6 \n+            | BIT_7 ) ;\n         l_encoded = new String( ( char [] ) \n                 instance.encode( ( Object ) bits ) ) ;\n         assertEquals( \"1111111111111111\", l_encoded ) ;\n     }\n+    \n }", "timestamp": 1079831936, "metainfo": ""}