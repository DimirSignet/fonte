{"sha": "c2809b4b7ebbf2153114f0803d6b12e7f35cf5fd", "log": "Prefix @Test method names with \"test\".  ", "commit": "\n--- a/src/test/org/apache/commons/codec/language/bm/RuleTest.java\n+++ b/src/test/org/apache/commons/codec/language/bm/RuleTest.java\n     }\n \n     @Test\n-    public void phonemeComparedToLaterIsNegative() {\n+    public void testPhonemeComparedToLaterIsNegative() {\n         for (Rule.Phoneme[] phs : makePhonemes()) {\n             for (int i = 0; i < phs.length; i++) {\n                 for (int j = i + 1; j < phs.length; j++) {\n     }\n \n     @Test\n-    public void phonemeComparedToSelfIsZero() {\n+    public void testPhonemeComparedToSelfIsZero() {\n         for (Rule.Phoneme[] phs : makePhonemes()) {\n             for (Rule.Phoneme ph : phs) {\n                 assertEquals(\"Phoneme compared to itself should be zero: \" + ph.getPhonemeText(), 0,\n     }\n \n     @Test\n-    public void subSequenceWorks() {\n+    public void testSubSequenceWorks() {\n         // AppendableCharSequence is private to Rule. We can only make it through a Phoneme.\n \n         Rule.Phoneme a = new Rule.Phoneme(\"a\", null);", "timestamp": 1312852646, "metainfo": ""}