{"sha": "57381cea8e6287999e996da37f41f20f1d2c220a", "log": "Use test data from http://caversham.otago.ac.nz/files/working/ctp150804.pdf.  ", "commit": "\n--- a/src/test/org/apache/commons/codec/language/CaverphoneTest.java\n+++ b/src/test/org/apache/commons/codec/language/CaverphoneTest.java\n \n package org.apache.commons.codec.language;\n \n+import junit.framework.Assert;\n+\n import org.apache.commons.codec.EncoderException;\n import org.apache.commons.codec.StringEncoder;\n import org.apache.commons.codec.StringEncoderAbstractTest;\n \n     protected StringEncoder createStringEncoder() {\n         return new Caverphone();\n+    }\n+\n+    /**\n+     * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf\n+     * \n+     * AT11111111 words: add, aid, at, art, eat, earth, head, hit, hot, hold, hard, heart, it, out, old\n+     * \n+     * @throws EncoderException\n+     */\n+    public void testDavidHoodRevisitedCommonCodeAT11111111() throws EncoderException {\n+        this.checkEncodingVariations(\"AT11111111\", new String[]{\n+            \"add\",\n+            \"aid\",\n+            \"at\",\n+            \"art\",\n+            \"eat\",\n+            \"earth\",\n+            \"head\",\n+            \"hit\",\n+            \"hot\",\n+            \"hold\",\n+            \"hard\",\n+            \"heart\",\n+            \"it\",\n+            \"out\",\n+            \"old\"});\n+    }\n+\n+    /**\n+     * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf\n+     * \n+     * @throws EncoderException\n+     */\n+    public void testDavidHoodRevisitedExamples() throws EncoderException {\n+        String[][] data = {{\"Stevenson\", \"STFNSN1111\"}, {\"Peter\", \"PTA1111111\"}};\n+        this.checkEncodings(data);\n+    }\n+\n+    /**\n+     * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf\n+     * \n+     * @throws EncoderException\n+     */\n+    public void testDavidHoodRevisitedRandomNameKLN1111111() throws EncoderException {\n+        this.checkEncodingVariations(\"KLN1111111\", new String[]{\n+            \"Cailean\",\n+            \"Calan\",\n+            \"Calen\",\n+            \"Callahan\",\n+            \"Callan\",\n+            \"Callean\",\n+            \"Carleen\",\n+            \"Carlen\",\n+            \"Carlene\",\n+            \"Carlin\",\n+            \"Carline\",\n+            \"Carlyn\",\n+            \"Carlynn\",\n+            \"Carlynne\",\n+            \"Charlean\",\n+            \"Charleen\",\n+            \"Charlene\",\n+            \"Charline\",\n+            \"Cherlyn\",\n+            \"Chirlin\",\n+            \"Clein\",\n+            \"Cleon\",\n+            \"Cline\",\n+            \"Cohleen\",\n+            \"Colan\",\n+            \"Coleen\",\n+            \"Colene\",\n+            \"Colin\",\n+            \"Colleen\",\n+            \"Collen\",\n+            \"Collin\",\n+            \"Colline\",\n+            \"Colon\",\n+            \"Cullan\",\n+            \"Cullen\",\n+            \"Cullin\",\n+            \"Gaelan\",\n+            \"Galan\",\n+            \"Galen\",\n+            \"Garlan\",\n+            \"Garlen\",\n+            \"Gaulin\",\n+            \"Gayleen\",\n+            \"Gaylene\",\n+            \"Giliane\",\n+            \"Gillan\",\n+            \"Gillian\",\n+            \"Glen\",\n+            \"Glenn\",\n+            \"Glyn\",\n+            \"Glynn\",\n+            \"Gollin\",\n+            \"Gorlin\",\n+            \"Kalin\",\n+            \"Karlan\",\n+            \"Karleen\",\n+            \"Karlen\",\n+            \"Karlene\",\n+            \"Karlin\",\n+            \"Karlyn\",\n+            \"Kaylyn\",\n+            \"Keelin\",\n+            \"Kellen\",\n+            \"Kellene\",\n+            \"Kellyann\",\n+            \"Kellyn\",\n+            \"Khalin\",\n+            \"Kilan\",\n+            \"Kilian\",\n+            \"Killen\",\n+            \"Killian\",\n+            \"Killion\",\n+            \"Klein\",\n+            \"Kleon\",\n+            \"Kline\",\n+            \"Koerlin\",\n+            \"Kylen\",\n+            \"Kylynn\",\n+            \"Quillan\",\n+            \"Quillon\",\n+            \"Qulllon\",\n+            \"Xylon\"});\n+    }\n+\n+    /**\n+     * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf\n+     * \n+     * @throws EncoderException\n+     */\n+    public void testDavidHoodRevisitedRandomNameTTA1111111() throws EncoderException {\n+        this.checkEncodingVariations(\"TTA1111111\", new String[]{\n+            \"Darda\",\n+            \"Datha\",\n+            \"Dedie\",\n+            \"Deedee\",\n+            \"Deerdre\",\n+            \"Deidre\",\n+            \"Deirdre\",\n+            \"Detta\",\n+            \"Didi\",\n+            \"Didier\",\n+            \"Dido\",\n+            \"Dierdre\",\n+            \"Dieter\",\n+            \"Dita\",\n+            \"Ditter\",\n+            \"Dodi\",\n+            \"Dodie\",\n+            \"Dody\",\n+            \"Doherty\",\n+            \"Dorthea\",\n+            \"Dorthy\",\n+            \"Doti\",\n+            \"Dotti\",\n+            \"Dottie\",\n+            \"Dotty\",\n+            \"Doty\",\n+            \"Doughty\",\n+            \"Douty\",\n+            \"Dowdell\",\n+            \"Duthie\",\n+            \"Tada\",\n+            \"Taddeo\",\n+            \"Tadeo\",\n+            \"Tadio\",\n+            \"Tati\",\n+            \"Teador\",\n+            \"Tedda\",\n+            \"Tedder\",\n+            \"Teddi\",\n+            \"Teddie\",\n+            \"Teddy\",\n+            \"Tedi\",\n+            \"Tedie\",\n+            \"Teeter\",\n+            \"Teodoor\",\n+            \"Teodor\",\n+            \"Terti\",\n+            \"Theda\",\n+            \"Theodor\",\n+            \"Theodore\",\n+            \"Theta\",\n+            \"Thilda\",\n+            \"Thordia\",\n+            \"Tilda\",\n+            \"Tildi\",\n+            \"Tildie\",\n+            \"Tildy\",\n+            \"Tita\",\n+            \"Tito\",\n+            \"Tjader\",\n+            \"Toddie\",\n+            \"Toddy\",\n+            \"Torto\",\n+            \"Tuddor\",\n+            \"Tudor\",\n+            \"Turtle\",\n+            \"Tuttle\",\n+            \"Tutto\"});\n+    }\n+\n+    /**\n+     * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf\n+     * \n+     * @throws EncoderException\n+     */\n+    public void testDavidHoodRevisitedRandomNameTN11111111() throws EncoderException {\n+        this.checkEncodingVariations(\"TN11111111\", new String[]{\n+            \"Dan\",\n+            \"Dane\",\n+            \"Dann\",\n+            \"Darn\",\n+            \"Daune\",\n+            \"Dawn\",\n+            \"Ddene\",\n+            \"Dean\",\n+            \"Deane\",\n+            \"Deanne\",\n+            \"DeeAnn\",\n+            \"Deeann\",\n+            \"Deeanne\",\n+            \"Deeyn\",\n+            \"Den\",\n+            \"Dene\",\n+            \"Denn\",\n+            \"Deonne\",\n+            \"Diahann\",\n+            \"Dian\",\n+            \"Diane\",\n+            \"Diann\",\n+            \"Dianne\",\n+            \"Diannne\",\n+            \"Dine\",\n+            \"Dion\",\n+            \"Dione\",\n+            \"Dionne\",\n+            \"Doane\",\n+            \"Doehne\",\n+            \"Don\",\n+            \"Donn\",\n+            \"Doone\",\n+            \"Dorn\",\n+            \"Down\",\n+            \"Downe\",\n+            \"Duane\",\n+            \"Dun\",\n+            \"Dunn\",\n+            \"Duyne\",\n+            \"Dyan\",\n+            \"Dyane\",\n+            \"Dyann\",\n+            \"Dyanne\",\n+            \"Dyun\",\n+            \"Tan\",\n+            \"Tann\",\n+            \"Teahan\",\n+            \"Ten\",\n+            \"Tenn\",\n+            \"Terhune\",\n+            \"Thain\",\n+            \"Thaine\",\n+            \"Thane\",\n+            \"Thanh\",\n+            \"Thayne\",\n+            \"Theone\",\n+            \"Thin\",\n+            \"Thorn\",\n+            \"Thorne\",\n+            \"Thun\",\n+            \"Thynne\",\n+            \"Tien\",\n+            \"Tine\",\n+            \"Tjon\",\n+            \"Town\",\n+            \"Towne\",\n+            \"Turne\",\n+            \"Tyne\"});\n+    }\n+\n+    /**\n+     * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf\n+     * \n+     * @throws EncoderException\n+     */\n+    public void testDavidHoodRevisitedRandomWords() throws EncoderException {\n+        this.checkEncodingVariations(\"RTA1111111\", new String[]{\"rather\", \"ready\", \"writer\"});\n+        this.checkEncoding(\"SSA1111111\", \"social\");\n+        this.checkEncodingVariations(\"APA1111111\", new String[]{\"able\", \"appear\"});\n+    }\n+\n+    // Caverphone Revisited\n+    public void testIsCaverphoneEquals() {\n+        Caverphone caverphone = new Caverphone();\n+        Assert.assertFalse(\"Caverphone encodings should not be equal\", caverphone.isCaverphoneEqual(\"Peter\", \"Stevenson\"));\n+        Assert.assertTrue(\"Caverphone encodings should be equal\", caverphone.isCaverphoneEqual(\"Peter\", \"Peady\"));\n     }\n \n     public void testSpecificationExamples() throws EncoderException {\n         // this.checkEncodings(data);\n     }\n \n-    // Caverphone Revisited\n-    public void testIsCaverphoneEquals() {\n-        Caverphone caverphone = new Caverphone();\n-        assertFalse(\"Caverphone encodings should not be equal\", caverphone.isCaverphoneEqual(\"Peter\", \"Stevenson\"));\n-        assertTrue(\"Caverphone encodings should be equal\", caverphone.isCaverphoneEqual(\"Peter\", \"Peady\"));\n-    }\n-\n }", "timestamp": 1298915304, "metainfo": ""}