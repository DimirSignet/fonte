{"sha": "bd7eae72878323f479f50a5eafe610924ecf63c8", "log": "Add support for indexOf, lastIndexOf and contains for ArrayUtils from Nikolay Metchev, bug ref 15438   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang/ArrayUtils.java\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * @author Stephen Colebourne\n  * @author Moritz Petersen\n  * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n+ * @author Nikolay Metchev\n  * @since 2.0\n- * @version $Id: ArrayUtils.java,v 1.7 2002/12/23 00:32:24 scolebourne Exp $\n+ * @version $Id: ArrayUtils.java,v 1.8 2003/02/04 22:06:24 scolebourne Exp $\n  */\n public class ArrayUtils {\n \n     }\n \n     // Basic methods handling multi-dimensional arrays\n-    //--------------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n     \n     /**\n      * <p>Outputs an array as a String, treating <code>null</code> as an empty array.</p>\n         return new EqualsBuilder().append(array1, array2).isEquals();\n     }\n     \n-    //--------------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n     \n     /**\n      * <p>Converts the given array into a {@link Map}. Each element of the array\n //        return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();\n //    }\n     \n-    //--------------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n \n     /**\n      * <p>Shallow clones an array returning a typecast result and handling\n         return (boolean[]) array.clone();\n     }\n \n-    //--------------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n \n     /**\n      * <p>Checks whether two arrays are the same length, treating\n         return array1.getClass().getName().equals(array2.getClass().getName());\n     }\n     \n+    //-----------------------------------------------------------------------\n+    \n     /** \n      * Reverses the order of the given array.\n      * <p>\n      * <p>\n      * The method does nothing if <code>null</code> is passed in.\n      * \n-     * @param array  the array to reverse\n+     * @param array  the array to reverse, may be <code>null</code>\n      */\n     public static void reverse(Object[] array) {\n         if (array == null) {\n      * <p>\n      * The method does nothing if <code>null</code> is passed in.\n      * \n-     * @param array  the array to reverse\n+     * @param array  the array to reverse, may be <code>null</code>\n      */\n     public static void reverse(long[] array) {\n         if (array == null) {\n      * <p>\n      * The method does nothing if <code>null</code> is passed in.\n      * \n-     * @param array  the array to reverse\n+     * @param array  the array to reverse, may be <code>null</code>\n      */\n     public static void reverse(int[] array) {\n         if (array == null) {\n      * <p>\n      * There is no special handling for multi-dimensional arrays.\n      * \n-     * @param array  the array to reverse\n+     * @param array  the array to reverse, may be <code>null</code>\n      */\n     public static void reverse(short[] array) {\n         if (array == null) {\n      * <p>\n      * The method does nothing if <code>null</code> is passed in.\n      * \n-     * @param array  the array to reverse\n+     * @param array  the array to reverse, may be <code>null</code>\n      */\n     public static void reverse(char[] array) {\n         if (array == null) {\n      * <p>\n      * The method does nothing if <code>null</code> is passed in.\n      * \n-     * @param array  the array to reverse\n+     * @param array  the array to reverse, may be <code>null</code>\n      */\n     public static void reverse(byte[] array) {\n         if (array == null) {\n      * <p>\n      * The method does nothing if <code>null</code> is passed in.\n      * \n-     * @param array  the array to reverse\n+     * @param array  the array to reverse, may be <code>null</code>\n      */\n     public static void reverse(double[] array) {\n         if (array == null) {\n      * <p>\n      * The method does nothing if <code>null</code> is passed in.\n      * \n-     * @param array  the array to reverse\n+     * @param array  the array to reverse, may be <code>null</code>\n      */\n     public static void reverse(float[] array) {\n         if (array == null) {\n      * <p>\n      * The method does nothing if <code>null</code> is passed in.\n      * \n-     * @param array  the array to reverse\n+     * @param array  the array to reverse, may be <code>null</code>\n      */\n     public static void reverse(boolean[] array) {\n         if (array == null) {\n             i++;\n         }\n     }\n-\n+    \n+    //-----------------------------------------------------------------------\n+    \n+    /**\n+     * Find the index of the given object in the array.\n+     * <p>\n+     * The method returns -1 if a <code>null</code> array is passed in.\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param objectToFind  the object to find, may be <code>null</code>\n+     * @return the index of the object within the array, or -1 if not found\n+     */\n+    public static int indexOf(Object[] array, Object objectToFind) {\n+        return indexOf(array, objectToFind, 0);\n+    }\n+    \n+    /**\n+     * Find the index of the given object in the array starting at the given index.\n+     * <p>\n+     * The method returns -1 if a <code>null</code> array is passed in.\n+     * <p>\n+     * A negative startIndex is treated as zero. A startIndex larger than the array\n+     * length will return -1.\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param objectToFind  the object to find, may be <code>null</code>\n+     * @param startIndex  the index to start searching at\n+     * @return the index of the object within the array starting at the\n+     *  given index, or -1 if not found\n+     */\n+    public static int indexOf(Object[] array, Object objectToFind, int startIndex) {\n+        if (array == null) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            startIndex = 0;\n+        }\n+        if (objectToFind == null) {\n+            for (int i = startIndex; i < array.length; i++) {\n+                if (array[i] == null) {\n+                    return i;\n+                }\n+            }\n+        } else {\n+            for (int i = startIndex; i < array.length; i++) {\n+                if (objectToFind.equals(array[i])) {\n+                    return i;\n+                }\n+            }\n+        }\n+        return -1;\n+    }\n+    \n+    /**\n+     * Find the last index of the given object within the array.\n+     * <p>\n+     * The method returns -1 if a <code>null</code> array is passed in.\n+     * \n+     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n+     * @param objectToFind  the object to find, may be <code>null</code>\n+     * @return the last index of the object to find, or -1 if not found\n+     */\n+    public static int lastIndexOf(Object[] array, Object objectToFind) {\n+        if (array == null) {\n+            return -1;\n+        }\n+        return lastIndexOf(array, objectToFind, array.length - 1);\n+    }\n+    \n+    /**\n+     * Find the last index of the given object in the array starting at the given index.\n+     * <p>\n+     * The method returns -1 if a <code>null</code> array is passed in.\n+     * <p>\n+     * A negative startIndex will return -1. A startIndex larger than the array\n+     * length will search from the end of the array.\n+     * \n+     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n+     * @param objectToFind  the object to find, may be <code>null</code>\n+     * @param startIndex  the start index to travers backwards from\n+     * @return the last index of the object within the array starting at the given index,\n+     *  or -1 if not found\n+     */\n+    public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {\n+        if (array == null) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            return -1;\n+        } else if (startIndex >= array.length) {\n+            startIndex = array.length - 1;\n+        }\n+        if (objectToFind == null) {\n+            for (int i = startIndex; i >= 0; i--) {\n+                if (array[i] == null) {\n+                    return i;\n+                }\n+            }\n+        } else {\n+            for (int i = startIndex; i >= 0; i--) {\n+                if (objectToFind.equals(array[i])) {\n+                    return i;\n+                }\n+            }\n+        }\n+        return -1;\n+    }\n+    \n+    /**\n+     * Checks if the object is in the given array.\n+     * <p>\n+     * The method returns <code>false</code> if a <code>null</code> array is passed in.\n+     * \n+     * @param array  the array to search through\n+     * @param objectToFind  the object to find\n+     * @return <code>true</code> if the array contains the object\n+     */\n+    public static boolean contains(Object[] array, Object objectToFind) {\n+        return (indexOf(array, objectToFind) != -1);\n+    }\n+    \n }\n--- a/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author Moritz Petersen\n- * @version $Id: ArrayUtilsTest.java,v 1.4 2002/12/15 15:00:46 scolebourne Exp $\n+ * @author Nikolay Metchev\n+ * @version $Id: ArrayUtilsTest.java,v 1.5 2003/02/04 22:06:24 scolebourne Exp $\n  */\n public class ArrayUtilsTest extends TestCase {\n \n         assertEquals(null, array);\n     }\n     \n+    //-----------------------------------------------------------------------\n+    public void testIndexOf() {\n+        Object[] array = new Object[] { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\n+        assertEquals(-1, ArrayUtils.indexOf(null, null));\n+        assertEquals(-1, ArrayUtils.indexOf(null, \"0\"));\n+        assertEquals(0, ArrayUtils.indexOf(array, \"0\"));\n+        assertEquals(1, ArrayUtils.indexOf(array, \"1\"));\n+        assertEquals(2, ArrayUtils.indexOf(array, \"2\"));\n+        assertEquals(3, ArrayUtils.indexOf(array, \"3\"));\n+        assertEquals(4, ArrayUtils.indexOf(array, null));\n+        assertEquals(-1, ArrayUtils.indexOf(array, \"notInArray\"));\n+    }\n+\n+    public void testIndexOfWithStartIndex() {\n+        Object[] array = new Object[] { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\n+        assertEquals(-1, ArrayUtils.indexOf(null, null, 2));\n+        assertEquals(-1, ArrayUtils.indexOf(null, \"0\", 2));\n+        assertEquals(5, ArrayUtils.indexOf(array, \"0\", 2));\n+        assertEquals(-1, ArrayUtils.indexOf(array, \"1\", 2));\n+        assertEquals(2, ArrayUtils.indexOf(array, \"2\", 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, \"3\", 2));\n+        assertEquals(4, ArrayUtils.indexOf(array, null, 2));\n+        assertEquals(-1, ArrayUtils.indexOf(array, \"notInArray\"));\n+        \n+        assertEquals(4, ArrayUtils.indexOf(array, null, -1));\n+        assertEquals(-1, ArrayUtils.indexOf(array, \"0\", 6));\n+    }\n+\n+    public void testLastIndexOf() {\n+        Object[] array = new Object[] { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\n+        assertEquals(-1, ArrayUtils.lastIndexOf(null, null));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(null, \"0\"));\n+        assertEquals(5, ArrayUtils.lastIndexOf(array, \"0\"));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, \"1\"));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, \"2\"));\n+        assertEquals(3, ArrayUtils.lastIndexOf(array, \"3\"));\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, null));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, \"notInArray\"));\n+    }\n+\n+    public void testLastIndexOfWithStartIndex() {\n+        Object[] array = new Object[] { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\n+        assertEquals(-1, ArrayUtils.lastIndexOf(null, null, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(null, \"0\", 2));\n+        assertEquals(0, ArrayUtils.lastIndexOf(array, \"0\", 2));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, \"1\", 2));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, \"2\", 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, \"3\", 2));\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, null, 5));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, null, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, \"notInArray\"));\n+        \n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, null, -1));\n+        assertEquals(5, ArrayUtils.lastIndexOf(array, \"0\", 88));\n+    }\n+\n+    public void testContains() {\n+        Object[] array = new Object[] { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\n+        assertEquals(false, ArrayUtils.contains(null, null));\n+        assertEquals(false, ArrayUtils.contains(null, \"1\"));\n+        assertEquals(true, ArrayUtils.contains(array, \"0\"));\n+        assertEquals(true, ArrayUtils.contains(array, \"1\"));\n+        assertEquals(true, ArrayUtils.contains(array, \"2\"));\n+        assertEquals(true, ArrayUtils.contains(array, \"3\"));\n+        assertEquals(true, ArrayUtils.contains(array, null));\n+        assertEquals(false, ArrayUtils.contains(array, \"notInArray\"));\n+    }\n }", "timestamp": 1044396384, "metainfo": ""}