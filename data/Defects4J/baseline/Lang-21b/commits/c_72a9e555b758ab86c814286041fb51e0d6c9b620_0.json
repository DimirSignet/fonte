{"sha": "72a9e555b758ab86c814286041fb51e0d6c9b620", "log": "Rename slice functions to substringAfter/substringBefore   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  *      - index of any of a set of Strings\n  *  <li><b>ContainsOnly/ContainsNone</b>\n  *      - does String contain only/none of these characters\n- *  <li><b>SubString/Left/Right/Mid</b>\n+ *  <li><b>SubString/Left/Right/Mid/SubStringBefore/SubStringAfter</b>\n  *      - null-safe substring extraction\n  *  <li><b>Split</b>\n  *      - splits a String into an array of subtrings based on a separator\n  *      - joins an array of Strings into one with optional separator\n  *  <li><b>Replace/Delete/Overlay</b>\n  *      - Searches a String and replaces one String with another\n- *  <li><b>Chomp/Chop/Slice</b>\n- *      - searches a String and returns the substring before/after the separator\n+ *  <li><b>Chomp/Chop</b>\n+ *      - removes the last part of a String\n  *  <li><b>LeftPad/RightPad/Center/Repeat</b>\n  *      - pads a String\n  *  <li><b>UpperCase/LowerCase/SwapCase/Capitalise/Uncapitalise</b>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.78 2003/07/25 00:50:00 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.79 2003/07/25 22:22:30 scolebourne Exp $\n  */\n public class StringUtils {\n     // Performance testing notes (JDK 1.4, Jul03, scolebourne)\n         } else {\n             return str.substring(pos, pos + len);\n         }\n+    }\n+\n+    // SubStringAfter/SubStringBefore\n+    //-----------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets the substring before the first occurance of a separator.\n+     * The separator is not returned.</p>\n+     *\n+     * <p>A <code>null</code> string input will return <code>null</code>.\n+     * An empty (\"\") string input will return the empty string.\n+     * A <code>null</code> separator will return the input string.</p>\n+     *\n+     * <pre>\n+     * StringUtils.substringBefore(null, *)      = null\n+     * StringUtils.substringBefore(\"\", *)        = \"\"\n+     * StringUtils.substringBefore(\"abc\", \"a\")   = \"\"\n+     * StringUtils.substringBefore(\"abcba\", \"b\") = \"a\"\n+     * StringUtils.substringBefore(\"abc\", \"c\")   = \"ab\"\n+     * StringUtils.substringBefore(\"abc\", \"d\")   = \"abc\"\n+     * StringUtils.substringBefore(\"abc\", \"\")    = \"\"\n+     * StringUtils.substringBefore(\"abc\", null)  = \"abc\"\n+     * </pre>\n+     *\n+     * @param str  the String to get a substring from, may be null\n+     * @param separator  the String to search for, may be null\n+     * @return the substring before the first occurance of the separator,\n+     *  <code>null</code> if null String input\n+     */\n+    public static String substringBefore(String str, String separator) {\n+        if (str == null || separator == null || str.length() == 0) {\n+            return str;\n+        }\n+        if (separator.length() == 0) {\n+            return \"\";\n+        }\n+        int pos = str.indexOf(separator);\n+        if (pos == -1) {\n+            return str;\n+        }\n+        return str.substring(0, pos);\n+    }\n+\n+    /**\n+     * <p>Gets the substring after the first occurance of a separator.\n+     * The separator is not returned.</p>\n+     *\n+     * <p>A <code>null</code> string input will return <code>null</code>.\n+     * An empty (\"\") string input will return the empty string.\n+     * A <code>null</code> separator will return the empty string if the\n+     * input string is not <code>null</code>.</p>\n+     * \n+     * <pre>\n+     * StringUtils.substringAfter(null, *)      = null\n+     * StringUtils.substringAfter(\"\", *)        = \"\"\n+     * StringUtils.substringAfter(*, null)      = \"\"\n+     * StringUtils.substringAfter(\"abc\", \"a\")   = \"bc\"\n+     * StringUtils.substringAfter(\"abcba\", \"b\") = \"cba\"\n+     * StringUtils.substringAfter(\"abc\", \"c\")   = \"\"\n+     * StringUtils.substringAfter(\"abc\", \"d\")   = \"\"\n+     * StringUtils.substringAfter(\"abc\", \"\")    = \"abc\"\n+     * </pre>\n+     *\n+     * @param str  the String to get a substring from, may be null\n+     * @param separator  the String to search for, may be null\n+     * @return the substring after the first occurance of the separator,\n+     *  <code>null</code> if null String input\n+     */\n+    public static String substringAfter(String str, String separator) {\n+        if (str == null || str.length() == 0) {\n+            return str;\n+        }\n+        if (separator == null) {\n+            return \"\";\n+        }\n+        int pos = str.indexOf(separator);\n+        if (pos == -1) {\n+            return \"\";\n+        }\n+        return str.substring(pos + separator.length());\n+    }\n+\n+    /**\n+     * <p>Gets the substring before the last occurance of a separator.\n+     * The separator is not returned.</p>\n+     *\n+     * <p>A <code>null</code> string input will return <code>null</code>.\n+     * An empty (\"\") string input will return the empty string.\n+     * An empty or <code>null</code> separator will return the input string.</p>\n+     * \n+     * <pre>\n+     * StringUtils.substringBeforeLast(null, *)      = null\n+     * StringUtils.substringBeforeLast(\"\", *)        = \"\"\n+     * StringUtils.substringBeforeLast(\"abcba\", \"b\") = \"abc\"\n+     * StringUtils.substringBeforeLast(\"abc\", \"c\")   = \"ab\"\n+     * StringUtils.substringBeforeLast(\"a\", \"a\")     = \"\"\n+     * StringUtils.substringBeforeLast(\"a\", \"z\")     = \"a\"\n+     * StringUtils.substringBeforeLast(\"a\", null)    = \"a\"\n+     * StringUtils.substringBeforeLast(\"a\", \"\")      = \"a\"\n+     * </pre>\n+     *\n+     * @param str  the String to get a substring from, may be null\n+     * @param separator  the String to search for, may be null\n+     * @return the substring before the last occurance of the separator,\n+     *  <code>null</code> if null String input\n+     */\n+    public static String substringBeforeLast(String str, String separator) {\n+        if (str == null || separator == null || str.length() == 0 || separator.length() == 0) {\n+            return str;\n+        }\n+        int pos = str.lastIndexOf(separator);\n+        if (pos == -1) {\n+            return str;\n+        }\n+        return str.substring(0, pos);\n+    }\n+\n+    /**\n+     * <p>Gets the substring after the last occurance of a separator.\n+     * The separator is not returned.</p>\n+     *\n+     * <p>A <code>null</code> string input will return <code>null</code>.\n+     * An empty (\"\") string input will return the empty string.\n+     * An empty or <code>null</code> separator will return the empty string if\n+     * the input string is not <code>null</code>.</p>\n+     *\n+     * <pre>\n+     * StringUtils.substringAfterLast(null, *)      = null\n+     * StringUtils.substringAfterLast(\"\", *)        = \"\"\n+     * StringUtils.substringAfterLast(*, \"\")        = \"\"\n+     * StringUtils.substringAfterLast(*, null)      = \"\"\n+     * StringUtils.substringAfterLast(\"abc\", \"a\")   = \"bc\"\n+     * StringUtils.substringAfterLast(\"abcba\", \"b\") = \"a\"\n+     * StringUtils.substringAfterLast(\"abc\", \"c\")   = \"\"\n+     * StringUtils.substringAfterLast(\"a\", \"a\")     = \"\"\n+     * StringUtils.substringAfterLast(\"a\", \"z\")     = \"\"\n+     * </pre>\n+     *\n+     * @param str  the String to get a substring from, may be null\n+     * @param separator  the String to search for, may be null\n+     * @return the substring after the last occurance of the separator,\n+     *  <code>null</code> if null String input\n+     */\n+    public static String substringAfterLast(String str, String separator) {\n+        if (str == null || str.length() == 0) {\n+            return str;\n+        }\n+        if (separator == null || separator.length() == 0) {\n+            return \"\";\n+        }\n+        int pos = str.lastIndexOf(separator);\n+        if (pos == -1 || pos == (str.length() - separator.length())) {\n+            return \"\";\n+        }\n+        return str.substring(pos + separator.length());\n     }\n \n     // Splitting\n      * &quot;<code>\\r</code>&quot;, or &quot;<code>\\r\\n</code>&quot;.</p>\n      *\n      * <p>NOTE: This method changed in 2.0.\n-     * It now more closely matches Perl chomp.\n-     * For the previous behavior, use {@link #slice(String)}.</p>\n+     * It now more closely matches Perl chomp.</p>\n      *\n      * <pre>\n      * StringUtils.chomp(null)          = null\n      *\n      * <p>NOTE: This method changed in version 2.0.\n      * It now more closely matches Perl chomp.\n-     * For the previous behavior, use {@link #slice(String,String)}.\n+     * For the previous behavior, use {@link #substringBeforeLast(String, String)}.\n      * This method uses {@link String#endsWith(String)}.</p>\n      *\n      * <pre>\n \n     /** \n      * <p>Remove everything and return the last value of a supplied String, and\n-     * everything after it from a String.\n-     * [That makes no sense. Just use sliceRemainder() :-)]</p>\n+     * everything after it from a String.</p>\n      *\n      * @param str  the String to chomp from, must not be null\n      * @param sep  the String to chomp, must not be null\n      * @return String chomped\n      * @throws NullPointerException if str or sep is <code>null</code>\n-     * @deprecated Use {@link #sliceRemainder(String,String)} instead.\n+     * @deprecated Use {@link #substringAfterLast(String, String)} instead\n+     *             (although this doesn't include the separator)\n      *             Method will be removed in Commons Lang 3.0.\n      */\n     public static String getChomp(String str, String sep) {\n      * @param sep  the String to chomp, must not be null\n      * @return String without chomped beginning\n      * @throws NullPointerException if str or sep is <code>null</code>\n-     * @deprecated Use {@link #sliceFirstRemainder(String,String)} instead.\n+     * @deprecated Use {@link #substringAfter(String,String)} instead.\n      *             Method will be removed in Commons Lang 3.0.\n      */\n     public static String prechomp(String str, String sep) {\n      * @param sep  the String to chomp, must not be null\n      * @return String prechomped\n      * @throws NullPointerException if str or sep is <code>null</code>\n-     * @deprecated Use {@link #sliceFirst(String,String)} instead.\n+     * @deprecated Use {@link #substringBefore(String,String)} instead\n+     *             (although this doesn't include the separator)\n      *             Method will be removed in Commons Lang 3.0.\n      */\n     public static String getPrechomp(String str, String sep) {\n         return str.substring(0, lastIdx);\n     }\n \n-\n-    // Slicing\n-    //-----------------------------------------------------------------------\n-\n-    /**\n-     * <p>Removes the last newline, and everything after it from a String.</p>\n-     *\n-     * <p>A <code>null</code> string input will return <code>null</code>.\n-     * An empty (\"\") string input will return the empty string.</p>\n-     *\n-     * <pre>\n-     * StringUtils.slice(null)          = null\n-     * StringUtils.slice(\"\")            = \"\"\n-     * StringUtils.slice(\"abc \\n\")      = \"abc \"\n-     * StringUtils.slice(\"abc\\n\")       = \"abc\"\n-     * StringUtils.slice(\"abc\\r\\n\")     = \"abc\\r\"\n-     * StringUtils.slice(\"abc\")         = \"abc\"\n-     * StringUtils.slice(\"abc\\nabc\")    = \"abc\"\n-     * StringUtils.slice(\"abc\\nabc\\n\")  = \"abc\\nabc\"\n-     * StringUtils.slice(\"\\n\")          = \"\"\n-     * </pre>\n-     *\n-     * <p><em>(This method was formerly named chomp or chopNewline.)</em></p>\n-     *\n-     * @param str  the String to slice the newline from, may be null\n-     * @return String without sliced newline, <code>null</code> if null String input\n-     */\n-    public static String slice(String str) {\n-        return slice(str, \"\\n\");\n-    }\n-\n-    /**\n-     * <p>Finds the last occurence of a separator String,\n-     * returning everything before it. The separator is not returned.</p>\n-     *\n-     * <p>A <code>null</code> string input will return <code>null</code>.\n-     * An empty (\"\") string input will return the empty string.\n-     * An empty or <code>null</code> separator will return the input string.</p>\n-     * \n-     * <pre>\n-     * StringUtils.slice(null, *)      = null\n-     * StringUtils.slice(\"\", *)        = \"\"\n-     * StringUtils.slice(\"abcba\", \"b\") = \"abc\"\n-     * StringUtils.slice(\"abc\", \"c\")   = \"ab\"\n-     * StringUtils.slice(\"a\", \"a\")     = \"\"\n-     * StringUtils.slice(\"a\", \"z\")     = \"a\"\n-     * StringUtils.slice(\"a\", null)    = \"a\"\n-     * StringUtils.slice(\"a\", \"\")      = \"a\"\n-     * </pre>\n-     *\n-     * <p><em>(This method was formerly named chomp.)</em></p>\n-     *\n-     * @param str  the String to slice from, may be null\n-     * @param separator  the String to slice, may be null\n-     * @return String without sliced ending, <code>null</code> if null String input\n-     */\n-    public static String slice(String str, String separator) {\n-        if (str == null || separator == null || str.length() == 0 || separator.length() == 0) {\n-            return str;\n-        }\n-        int pos = str.lastIndexOf(separator);\n-        if (pos == -1) {\n-            return str;\n-        }\n-        return str.substring(0, pos);\n-    }\n-\n-    /**\n-     * <p>Finds the last occurence of a separator String,\n-     * returning everything after it.</p>\n-     *\n-     * <p>A <code>null</code> string input will return <code>null</code>.\n-     * An empty (\"\") string input will return the empty string.\n-     * An empty or <code>null</code> separator will return the empty string if\n-     * the input string is not <code>null</code>.</p>\n-     *\n-     * <pre>\n-     * StringUtils.sliceRemainder(null, *)         = null\n-     * StringUtils.sliceRemainder(\"\", *)           = \"\"\n-     * StringUtils.sliceRemainder(*, \"\")           = \"\"\n-     * StringUtils.sliceRemainder(*, null)         = \"\"\n-     * StringUtils.sliceRemainder(\"abc\", \"a\")      = \"bc\"\n-     * StringUtils.sliceRemainder(\"abcba\", \"b\")    = \"a\"\n-     * StringUtils.sliceRemainder(\"abc\", \"c\")      = \"\"\n-     * StringUtils.sliceRemainder(\"a\", \"a\")        = \"\"\n-     * StringUtils.sliceRemainder(\"a\", \"z\")        = \"\"\n-     * </pre>\n-     *\n-     * <p><em>(This method was formerly named getchomp. Also, now it does not\n-     * include the separator in the return value.)</em></p>\n-     *\n-     * @param str  the String to slice from, may be null\n-     * @param separator  the String to slice, may be null\n-     * @return String sliced, <code>null</code> if null String input\n-     */\n-    public static String sliceRemainder(String str, String separator) {\n-        if (str == null || str.length() == 0) {\n-            return str;\n-        }\n-        if (separator == null || separator.length() == 0) {\n-            return \"\";\n-        }\n-        int pos = str.lastIndexOf(separator);\n-        if (pos == -1 || pos == (str.length() - separator.length())) {\n-            return \"\";\n-        }\n-        return str.substring(pos + separator.length());\n-    }\n-\n-    /**\n-     * <p>Finds the first occurence of a separator String,\n-     * returning everything before it. The separator is not returned.</p>\n-     *\n-     * <p>A <code>null</code> string input will return <code>null</code>.\n-     * An empty (\"\") string input will return the empty string.\n-     * A <code>null</code> separator will return the input string.</p>\n-     *\n-     * <pre>\n-     * StringUtils.sliceFirst(null, *)         = null\n-     * StringUtils.sliceFirst(\"\", *)           = \"\"\n-     * StringUtils.sliceFirst(\"abc\", \"a\")      = \"\"\n-     * StringUtils.sliceFirst(\"abcba\", \"b\")    = \"a\"\n-     * StringUtils.sliceFirst(\"abc\", \"c\")      = \"ab\"\n-     * StringUtils.sliceFirst(\"abc\", \"d\")      = \"abc\"\n-     * StringUtils.sliceFirst(\"abc\", \"\")       = \"\"\n-     * StringUtils.sliceFirst(\"abc\", null)     = \"abc\"\n-     * </pre>\n-     *\n-     * <p><em>(This method was formerly named getPrechomp.  Also, it used to\n-     * include the separator, but now it does not.)</em></p>\n-     *\n-     * @param str  the String to slice from, may be null\n-     * @param separator  the String to slice, may be null\n-     * @return sliced String, <code>null</code> if null String input\n-     */\n-    public static String sliceFirst(String str, String separator) {\n-        if (str == null || separator == null || str.length() == 0) {\n-            return str;\n-        }\n-        if (separator.length() == 0) {\n-            return \"\";\n-        }\n-        int pos = str.indexOf(separator);\n-        if (pos == -1) {\n-            return str;\n-        }\n-        return str.substring(0, pos);\n-    }\n-\n-    /**\n-     * <p>Finds the first occurence of a separator String,\n-     * returning everything after it.</p>\n-     *\n-     * <p>A <code>null</code> string input will return <code>null</code>.\n-     * An empty (\"\") string input will return the empty string.\n-     * A <code>null</code> separator will return the empty string if the\n-     * input string is not <code>null</code>.</p>\n-     * \n-     * <pre>\n-     * StringUtils.sliceFirstRemainder(null, *)      = null\n-     * StringUtils.sliceFirstRemainder(\"\", *)        = \"\"\n-     * StringUtils.sliceFirstRemainder(*, null)      = \"\"\n-     * StringUtils.sliceFirstRemainder(\"abc\", \"a\")   = \"bc\"\n-     * StringUtils.sliceFirstRemainder(\"abcba\", \"b\") = \"cba\"\n-     * StringUtils.sliceFirstRemainder(\"abc\", \"c\")   = \"\"\n-     * StringUtils.sliceFirstRemainder(\"abc\", \"d\")   = \"\"\n-     * StringUtils.sliceFirstRemainder(\"abc\", \"\")    = \"abc\"\n-     * </pre>\n-     *\n-     * <p><em>(This method was formerly named prechomp.  Also, previously\n-     * it included the separator in the return value; now it does not.)</em></p>\n-     *\n-     * @param str  the String to slice from, may be null\n-     * @param separator  the String to slice, may be null\n-     * @return String without sliced beginning, <code>null</code> if null String input\n-     */\n-    public static String sliceFirstRemainder(String str, String separator) {\n-        if (str == null || str.length() == 0) {\n-            return str;\n-        }\n-        if (separator == null) {\n-            return \"\";\n-        }\n-        int pos = str.indexOf(separator);\n-        if (pos == -1) {\n-            return \"\";\n-        }\n-        return str.substring(pos + separator.length());\n-    }\n \n     // Conversion\n     //-----------------------------------------------------------------------\n--- a/src/test/org/apache/commons/lang/StringUtilsSubstringTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsSubstringTest.java\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author Phil Steitz\n- * @version $Id: StringUtilsSubstringTest.java,v 1.8 2003/07/21 00:41:13 scolebourne Exp $\n+ * @version $Id: StringUtilsSubstringTest.java,v 1.9 2003/07/25 22:22:30 scolebourne Exp $\n  */\n public class StringUtilsSubstringTest extends TestCase {\n     private static final String FOO = \"foo\";\n         } catch (IllegalArgumentException ex) {}\n     }\n     \n+    //-----------------------------------------------------------------------\n+    public void testSubstringBefore_StringString() {\n+        assertEquals(\"foo\", StringUtils.substringBefore(\"fooXXbarXXbaz\", \"XX\"));\n+\n+        assertEquals(null, StringUtils.substringBefore(null, null));\n+        assertEquals(null, StringUtils.substringBefore(null, \"\"));\n+        assertEquals(null, StringUtils.substringBefore(null, \"XX\"));\n+        assertEquals(\"\", StringUtils.substringBefore(\"\", null));\n+        assertEquals(\"\", StringUtils.substringBefore(\"\", \"\"));\n+        assertEquals(\"\", StringUtils.substringBefore(\"\", \"XX\"));\n+        \n+        assertEquals(\"foo\", StringUtils.substringBefore(\"foo\", null));\n+        assertEquals(\"foo\", StringUtils.substringBefore(\"foo\", \"b\"));\n+        assertEquals(\"f\", StringUtils.substringBefore(\"foot\", \"o\"));\n+        assertEquals(\"\", StringUtils.substringBefore(\"abc\", \"a\"));\n+        assertEquals(\"a\", StringUtils.substringBefore(\"abcba\", \"b\"));\n+        assertEquals(\"ab\", StringUtils.substringBefore(\"abc\", \"c\"));\n+        assertEquals(\"\", StringUtils.substringBefore(\"abc\", \"\"));\n+    }\n+    \n+    public void testSubstringAfter_StringString() {\n+        assertEquals(\"barXXbaz\", StringUtils.substringAfter(\"fooXXbarXXbaz\", \"XX\"));\n+        \n+        assertEquals(null, StringUtils.substringAfter(null, null));\n+        assertEquals(null, StringUtils.substringAfter(null, \"\"));\n+        assertEquals(null, StringUtils.substringAfter(null, \"XX\"));\n+        assertEquals(\"\", StringUtils.substringAfter(\"\", null));\n+        assertEquals(\"\", StringUtils.substringAfter(\"\", \"\"));\n+        assertEquals(\"\", StringUtils.substringAfter(\"\", \"XX\"));\n+        \n+        assertEquals(\"\", StringUtils.substringAfter(\"foo\", null));\n+        assertEquals(\"ot\", StringUtils.substringAfter(\"foot\", \"o\"));\n+        assertEquals(\"bc\", StringUtils.substringAfter(\"abc\", \"a\"));\n+        assertEquals(\"cba\", StringUtils.substringAfter(\"abcba\", \"b\"));\n+        assertEquals(\"\", StringUtils.substringAfter(\"abc\", \"c\"));\n+        assertEquals(\"abc\", StringUtils.substringAfter(\"abc\", \"\"));\n+        assertEquals(\"\", StringUtils.substringAfter(\"abc\", \"d\"));\n+    }\n+\n+    public void testSubstringBeforeLast_StringString() {\n+        assertEquals(\"fooXXbar\", StringUtils.substringBeforeLast(\"fooXXbarXXbaz\", \"XX\"));\n+\n+        assertEquals(null, StringUtils.substringBeforeLast(null, null));\n+        assertEquals(null, StringUtils.substringBeforeLast(null, \"\"));\n+        assertEquals(null, StringUtils.substringBeforeLast(null, \"XX\"));\n+        assertEquals(\"\", StringUtils.substringBeforeLast(\"\", null));\n+        assertEquals(\"\", StringUtils.substringBeforeLast(\"\", \"\"));\n+        assertEquals(\"\", StringUtils.substringBeforeLast(\"\", \"XX\"));\n+\n+        assertEquals(\"foo\", StringUtils.substringBeforeLast(\"foo\", null));\n+        assertEquals(\"foo\", StringUtils.substringBeforeLast(\"foo\", \"b\"));\n+        assertEquals(\"fo\", StringUtils.substringBeforeLast(\"foo\", \"o\"));\n+        assertEquals(\"abc\\r\\n\", StringUtils.substringBeforeLast(\"abc\\r\\n\", \"d\"));\n+        assertEquals(\"abc\", StringUtils.substringBeforeLast(\"abcdabc\", \"d\"));\n+        assertEquals(\"abcdabc\", StringUtils.substringBeforeLast(\"abcdabcd\", \"d\"));\n+        assertEquals(\"a\", StringUtils.substringBeforeLast(\"abc\", \"b\"));\n+        assertEquals(\"abc \", StringUtils.substringBeforeLast(\"abc \\n\", \"\\n\"));\n+        assertEquals(\"a\", StringUtils.substringBeforeLast(\"a\", null));\n+        assertEquals(\"a\", StringUtils.substringBeforeLast(\"a\", \"\"));\n+        assertEquals(\"\", StringUtils.substringBeforeLast(\"a\", \"a\"));\n+    }\n+    \n+    public void testSubstringAfterLast_StringString() {\n+        assertEquals(\"baz\", StringUtils.substringAfterLast(\"fooXXbarXXbaz\", \"XX\"));\n+\n+        assertEquals(null, StringUtils.substringAfterLast(null, null));\n+        assertEquals(null, StringUtils.substringAfterLast(null, \"\"));\n+        assertEquals(null, StringUtils.substringAfterLast(null, \"XX\"));\n+        assertEquals(\"\", StringUtils.substringAfterLast(\"\", null));\n+        assertEquals(\"\", StringUtils.substringAfterLast(\"\", \"\"));\n+        assertEquals(\"\", StringUtils.substringAfterLast(\"\", \"a\"));\n+\n+        assertEquals(\"\", StringUtils.substringAfterLast(\"foo\", null));\n+        assertEquals(\"\", StringUtils.substringAfterLast(\"foo\", \"b\"));\n+        assertEquals(\"t\", StringUtils.substringAfterLast(\"foot\", \"o\"));\n+        assertEquals(\"bc\", StringUtils.substringAfterLast(\"abc\", \"a\"));\n+        assertEquals(\"a\", StringUtils.substringAfterLast(\"abcba\", \"b\"));\n+        assertEquals(\"\", StringUtils.substringAfterLast(\"abc\", \"c\"));\n+        assertEquals(\"\", StringUtils.substringAfterLast(\"\", \"d\"));\n+        assertEquals(\"\", StringUtils.substringAfterLast(\"abc\", \"\"));\n+    }        \n+        \n+    //-----------------------------------------------------------------------\n     public void testCountMatches_String() {\n         assertEquals(0, StringUtils.countMatches(null, null));\n         assertEquals(0, StringUtils.countMatches(\"blah\", null));\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n  * @author Holger Krauth\n  * @author <a href=\"hps@intermeta.de\">Henning P. Schmiedehausen</a>\n  * @author Phil Steitz\n- * @version $Id: StringUtilsTest.java,v 1.38 2003/07/25 00:50:00 scolebourne Exp $\n+ * @version $Id: StringUtilsTest.java,v 1.39 2003/07/25 22:22:30 scolebourne Exp $\n  */\n public class StringUtilsTest extends TestCase {\n     \n       }\n     }\n \n-    public void testSliceFunctions() {\n-\n-        String[][] sliceCases = {\n-            {\"foo\\n\", \"foo\"},\n-            {\"foo\\nbar\", \"foo\"},\n-            {\"foo\\nbar\\n\", \"foo\\nbar\"},\n-            {\"foo\\nbar\\nbaz\", \"foo\\nbar\"},\n-            {null, null},\n-            {\"\", \"\"},\n-            {\"\\n\", \"\"},\n-            {\"abc \\n\", \"abc \"},\n-            {\"abc\\r\\n\", \"abc\\r\"},\n-            {\"foo\", \"foo\"},\n-        };\n-        for (int i = 0; i < sliceCases.length; i++) {\n-            String original = sliceCases[i][0];\n-            String expectedResult = sliceCases[i][1];\n-            assertEquals(\"slice(String) failed\",\n-                    expectedResult, StringUtils.slice(original));\n-        }\n-    }\n-    \n-    public void testSlice_StringString() {\n-        assertEquals(\"fooXXbar\", StringUtils.slice(\"fooXXbarXXbaz\", \"XX\"));\n-\n-        assertEquals(null, StringUtils.slice(null, null));\n-        assertEquals(null, StringUtils.slice(null, \"\"));\n-        assertEquals(null, StringUtils.slice(null, \"XX\"));\n-        assertEquals(\"\", StringUtils.slice(\"\", null));\n-        assertEquals(\"\", StringUtils.slice(\"\", \"\"));\n-        assertEquals(\"\", StringUtils.slice(\"\", \"XX\"));\n-\n-        assertEquals(\"foo\", StringUtils.slice(\"foo\", null));\n-        assertEquals(\"foo\", StringUtils.slice(\"foo\", \"b\"));\n-        assertEquals(\"fo\", StringUtils.slice(\"foo\", \"o\"));\n-        assertEquals(\"abc\\r\\n\", StringUtils.slice(\"abc\\r\\n\", \"d\"));\n-        assertEquals(\"abc\", StringUtils.slice(\"abcdabc\", \"d\"));\n-        assertEquals(\"abcdabc\", StringUtils.slice(\"abcdabcd\", \"d\"));\n-        assertEquals(\"a\", StringUtils.slice(\"abc\", \"b\"));\n-        assertEquals(\"abc \", StringUtils.slice(\"abc \\n\", \"\\n\"));\n-        assertEquals(\"a\", StringUtils.slice(\"a\", null));\n-        assertEquals(\"a\", StringUtils.slice(\"a\", \"\"));\n-        assertEquals(\"\", StringUtils.slice(\"a\", \"a\"));\n-    }\n-    \n-    public void testSliceRemainder_StringString() {\n-        assertEquals(\"baz\", StringUtils.sliceRemainder(\"fooXXbarXXbaz\", \"XX\"));\n-\n-        assertEquals(null, StringUtils.sliceRemainder(null, null));\n-        assertEquals(null, StringUtils.sliceRemainder(null, \"\"));\n-        assertEquals(null, StringUtils.sliceRemainder(null, \"XX\"));\n-        assertEquals(\"\", StringUtils.sliceRemainder(\"\", null));\n-        assertEquals(\"\", StringUtils.sliceRemainder(\"\", \"\"));\n-        assertEquals(\"\", StringUtils.sliceRemainder(\"\", \"a\"));\n-\n-        assertEquals(\"\", StringUtils.sliceRemainder(\"foo\", null));\n-        assertEquals(\"\", StringUtils.sliceRemainder(\"foo\", \"b\"));\n-        assertEquals(\"t\", StringUtils.sliceRemainder(\"foot\", \"o\"));\n-        assertEquals(\"bc\", StringUtils.sliceRemainder(\"abc\", \"a\"));\n-        assertEquals(\"a\", StringUtils.sliceRemainder(\"abcba\", \"b\"));\n-        assertEquals(\"\", StringUtils.sliceRemainder(\"abc\", \"c\"));\n-        assertEquals(\"\", StringUtils.sliceRemainder(\"\", \"d\"));\n-        assertEquals(\"\", StringUtils.sliceRemainder(\"abc\", \"\"));\n-    }        \n-        \n-    public void testSliceFirst_StringString() {\n-        assertEquals(\"foo\", StringUtils.sliceFirst(\"fooXXbarXXbaz\", \"XX\"));\n-\n-        assertEquals(null, StringUtils.sliceFirst(null, null));\n-        assertEquals(null, StringUtils.sliceFirst(null, \"\"));\n-        assertEquals(null, StringUtils.sliceFirst(null, \"XX\"));\n-        assertEquals(\"\", StringUtils.sliceFirst(\"\", null));\n-        assertEquals(\"\", StringUtils.sliceFirst(\"\", \"\"));\n-        assertEquals(\"\", StringUtils.sliceFirst(\"\", \"XX\"));\n-        \n-        assertEquals(\"foo\", StringUtils.sliceFirst(\"foo\", null));\n-        assertEquals(\"foo\", StringUtils.sliceFirst(\"foo\", \"b\"));\n-        assertEquals(\"f\", StringUtils.sliceFirst(\"foot\", \"o\"));\n-        assertEquals(\"\", StringUtils.sliceFirst(\"abc\", \"a\"));\n-        assertEquals(\"a\", StringUtils.sliceFirst(\"abcba\", \"b\"));\n-        assertEquals(\"ab\", StringUtils.sliceFirst(\"abc\", \"c\"));\n-        assertEquals(\"\", StringUtils.sliceFirst(\"abc\", \"\"));\n-    }\n-    \n-    public void testSliceFirstRemainder_StringString() {\n-        assertEquals(\"barXXbaz\", StringUtils.sliceFirstRemainder(\"fooXXbarXXbaz\", \"XX\"));\n-        \n-        assertEquals(null, StringUtils.sliceFirstRemainder(null, null));\n-        assertEquals(null, StringUtils.sliceFirstRemainder(null, \"\"));\n-        assertEquals(null, StringUtils.sliceFirstRemainder(null, \"XX\"));\n-        assertEquals(\"\", StringUtils.sliceFirstRemainder(\"\", null));\n-        assertEquals(\"\", StringUtils.sliceFirstRemainder(\"\", \"\"));\n-        assertEquals(\"\", StringUtils.sliceFirstRemainder(\"\", \"XX\"));\n-        \n-        assertEquals(\"\", StringUtils.sliceFirstRemainder(\"foo\", null));\n-        assertEquals(\"ot\", StringUtils.sliceFirstRemainder(\"foot\", \"o\"));\n-        assertEquals(\"bc\", StringUtils.sliceFirstRemainder(\"abc\", \"a\"));\n-        assertEquals(\"cba\", StringUtils.sliceFirstRemainder(\"abcba\", \"b\"));\n-        assertEquals(\"\", StringUtils.sliceFirstRemainder(\"abc\", \"c\"));\n-        assertEquals(\"abc\", StringUtils.sliceFirstRemainder(\"abc\", \"\"));\n-        assertEquals(\"\", StringUtils.sliceFirstRemainder(\"abc\", \"d\"));\n-    }\n-\n     //-----------------------------------------------------------------------\n     public void testRightPad_StringInt() {\n         assertEquals(null, StringUtils.rightPad(null, 5));", "timestamp": 1059171750, "metainfo": ""}