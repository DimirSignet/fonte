{"sha": "bd0701593aae656483c1740965a1690eb3ad40a5", "log": "Update with @since tags   ", "commit": "\n--- a/src/java/org/apache/commons/lang/NotImplementedException.java\n+++ b/src/java/org/apache/commons/lang/NotImplementedException.java\n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: NotImplementedException.java,v 1.7 2004/03/04 00:13:38 scolebourne Exp $\n+ * @version $Id: NotImplementedException.java,v 1.8 2004/03/16 22:42:58 scolebourne Exp $\n  */\n public class NotImplementedException\n         extends UnsupportedOperationException implements Nestable {\n     /**\n      * The exception helper to delegate nested exception handling to.\n      */\n-    protected NestableDelegate delegate = new NestableDelegate(this);\n+    private NestableDelegate delegate = new NestableDelegate(this);\n \n     /**\n      * Holds the reference to the exception or error that caused\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Constructs a new <code>NotImplementedException</code> with default\n-     * detail message.\n+     * Constructs a new <code>NotImplementedException</code> with default message.\n+     * \n+     * @since 2.1\n      */\n     public NotImplementedException() {\n         super(\"Code is not implemented\");\n      * Constructs a new <code>NotImplementedException</code> with specified\n      * detail message.\n      *\n-     * @param msg The error message.\n+     * @param msg  the error message.\n      */\n     public NotImplementedException(String msg) {\n         super(msg == null ? \"Code is not implemented\" : msg);\n      * Constructs a new <code>NotImplementedException</code> with specified\n      * nested <code>Throwable</code> and default message.\n      *\n-     * @param cause the exception or error that caused this exception to be\n-     * thrown\n+     * @param cause  the exception that caused this exception to be thrown\n+     * @since 2.1\n      */\n     public NotImplementedException(Throwable cause) {\n         super(\"Code is not implemented\");\n      * Constructs a new <code>NotImplementedException</code> with specified\n      * detail message and nested <code>Throwable</code>.\n      *\n-     * @param msg    the error message\n-     * @param cause  the exception or error that caused this exception to be\n-     * thrown\n+     * @param msg  the error message\n+     * @param cause  the exception that caused this exception to be thrown\n+     * @since 2.1\n      */\n     public NotImplementedException(String msg, Throwable cause) {\n         super(msg == null ? \"Code is not implemented\" : msg);\n     }\n \n     //-----------------------------------------------------------------------\n+    /**\n+     * Gets the root cause of this exception.\n+     * \n+     * @since 2.1\n+     */\n     public Throwable getCause() {\n         return cause;\n     }\n \n     /**\n-     * Returns the detail message string of this throwable. If it was\n-     * created with a null message, returns the following:\n-     * (cause==null ? null : cause.toString()).\n+     * Gets the combined the error message of this and any nested errors.\n+     *\n+     * @return the error message\n+     * @since 2.1\n      */\n     public String getMessage() {\n         if (super.getMessage() != null) {\n         }\n     }\n \n+    /**\n+     * Returns the error message of the <code>Throwable</code> in the chain\n+     * of <code>Throwable</code>s at the specified index, numbered from 0.\n+     *\n+     * @param index  the index of the <code>Throwable</code> in the chain\n+     * @return the error message, or null if the <code>Throwable</code> at the\n+     *  specified index in the chain does not contain a message\n+     * @throws IndexOutOfBoundsException if the <code>index</code> argument is\n+     *  negative or not less than the count of <code>Throwable</code>s in the chain\n+     * @since 2.1\n+     */\n     public String getMessage(int index) {\n         if (index == 0) {\n             return super.getMessage();\n         }\n     }\n \n+    /**\n+     * Returns the error message of this and any nested <code>Throwable</code> objects.\n+     * Each throwable returns a message, a null string is included in the array if\n+     * there is no message for a particular <code>Throwable</code>.\n+     *\n+     * @return the error messages\n+     * @since 2.1\n+     */\n     public String[] getMessages() {\n         return delegate.getMessages();\n     }\n \n+    /**\n+     * Returns the <code>Throwable</code> in the chain by index.\n+     *\n+     * @param index  the index to retrieve\n+     * @return the <code>Throwable</code>\n+     * @throws IndexOutOfBoundsException if the <code>index</code> argument is\n+     *  negative or not less than the count of <code>Throwable</code>s in the chain\n+     * @since 2.1\n+     */\n     public Throwable getThrowable(int index) {\n         return delegate.getThrowable(index);\n     }\n \n+    /**\n+     * Returns the number of nested <code>Throwable</code>s represented by\n+     * this <code>Nestable</code>, including this <code>Nestable</code>.\n+     *\n+     * @return the throwable count\n+     * @since 2.1\n+     */\n     public int getThrowableCount() {\n         return delegate.getThrowableCount();\n     }\n \n+    /**\n+     * Returns this <code>Nestable</code> and any nested <code>Throwable</code>s\n+     * in an array of <code>Throwable</code>s, one element for each\n+     * <code>Throwable</code>.\n+     *\n+     * @return the <code>Throwable</code>s\n+     * @since 2.1\n+     */\n     public Throwable[] getThrowables() {\n         return delegate.getThrowables();\n     }\n \n+    /**\n+     * Returns the index of the first occurrence of the specified type.\n+     * If there is no match, <code>-1</code> is returned.\n+     *\n+     * @param type  the type to search for\n+     * @return index of the first occurrence of the type in the chain, or -1 if\n+     *  the type is not found\n+     * @since 2.1\n+     */\n     public int indexOfThrowable(Class type) {\n         return delegate.indexOfThrowable(type, 0);\n     }\n \n+    /**\n+     * Returns the index of the first occurrence of the specified type starting\n+     * from the specified index. If there is no match, <code>-1</code> is returned.\n+     *\n+     * @param type  the type to search for\n+     * @param fromIndex  the index of the starting position in the chain to be searched\n+     * @return index of the first occurrence of the type in the chain, or -1 if\n+     *  the type is not found\n+     * @throws IndexOutOfBoundsException if the <code>fromIndex</code> argument\n+     *  is negative or not less than the count of <code>Throwable</code>s in the chain\n+     * @since 2.1\n+     */\n     public int indexOfThrowable(Class type, int fromIndex) {\n         return delegate.indexOfThrowable(type, fromIndex);\n     }\n \n+    /**\n+     * Prints the stack trace of this exception.\n+     * Includes information from the exception, if any, which caused this exception.\n+     * \n+     * @since 2.1\n+     */\n     public void printStackTrace() {\n         delegate.printStackTrace();\n     }\n \n+    /**\n+     * Prints the stack trace of this exception to the specified stream.\n+     * Includes information from the exception, if any, which caused this exception.\n+     *\n+     * @param out  the stream to write to\n+     * @since 2.1\n+     */\n     public void printStackTrace(PrintStream out) {\n         delegate.printStackTrace(out);\n     }\n \n+    /**\n+     * Prints the stack trace of this exception to the specified writer.\n+     * Includes information from the exception, if any, which caused this exception.\n+     *\n+     * @param out  the writer to write to\n+     * @since 2.1\n+     */\n     public void printStackTrace(PrintWriter out) {\n         delegate.printStackTrace(out);\n     }\n \n+    /**\n+     * Prints the stack trace for this exception only (root cause not included)\n+     * using the specified writer.\n+     * \n+     * @param out  the writer to write to\n+     * @since 2.1\n+     */\n     public final void printPartialStackTrace(PrintWriter out) {\n         super.printStackTrace(out);\n     }", "timestamp": 1079476978, "metainfo": ""}