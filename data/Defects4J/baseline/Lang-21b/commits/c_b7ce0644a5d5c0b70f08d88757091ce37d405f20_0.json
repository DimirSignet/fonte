{"sha": "b7ce0644a5d5c0b70f08d88757091ce37d405f20", "log": "Add ability to build compound equals using superclass   ", "commit": "\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n  *   }\n  *  MyClass rhs = (MyClass) o;\n  *  return new EqualsBuilder()\n+ *                 .appendSuper(super.equals(o))\n  *                 .append(field1, rhs.field1)\n  *                 .append(field2, rhs.field2)\n  *                 .append(field3, rhs.field3)\n  * \n  * @author <a href=\"mailto:steve.downey@netfolio.com\">Steve Downey</a>\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: EqualsBuilder.java,v 1.6 2002/11/17 21:46:42 scolebourne Exp $\n+ * @version $Id: EqualsBuilder.java,v 1.7 2002/12/08 21:10:42 scolebourne Exp $\n  */\n public class EqualsBuilder {\n     /**\n         return equalsBuilder.isEquals();\n     }\n \n+    //-------------------------------------------------------------------------\n+    \n+    /**\n+     * <p>Adds the result of super.equals() to this builder.</p>\n+     *\n+     * @param superEquals  the result of calling <code>super.equals()</code>\n+     * @return EqualsBuilder - used to chain calls.\n+     */\n+    public EqualsBuilder appendSuper(boolean superEquals) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = superEquals;\n+        return this;\n+    }\n+    \n     //-------------------------------------------------------------------------\n     \n     /**\n--- a/src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java\n  *\n  * @author <a href=\"mailto:sdowney@panix.com\">Steve Downey</a>\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: EqualsBuilderTest.java,v 1.1 2002/09/12 22:00:35 scolebourne Exp $\n+ * @version $Id: EqualsBuilderTest.java,v 1.2 2002/12/08 21:10:11 scolebourne Exp $\n  */\n public class EqualsBuilderTest extends TestCase {\n \n         assertTrue(!EqualsBuilder.reflectionEquals(o1, null));\n         assertTrue(!EqualsBuilder.reflectionEquals(null, o2));\n         assertTrue(EqualsBuilder.reflectionEquals((Object) null, (Object) null));\n+    }\n+\n+    public void testSuper() {\n+        TestObject o1 = new TestObject(4);\n+        TestObject o2 = new TestObject(5);\n+        assertEquals(true, new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals());\n+        assertEquals(false, new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals());\n+        assertEquals(false, new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals());\n+        assertEquals(false, new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals());\n     }\n \n     public void testObject() {", "timestamp": 1039381842, "metainfo": ""}