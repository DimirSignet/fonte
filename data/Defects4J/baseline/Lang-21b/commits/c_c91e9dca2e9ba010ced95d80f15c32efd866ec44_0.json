{"sha": "c91e9dca2e9ba010ced95d80f15c32efd866ec44", "log": "Add append(String, int, int)  ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n     }\n \n     /**\n+     * Appends a string to the string builder.\n+     * Appending null will call {@link #appendNull()}.\n+     *\n+     * @param str  the string to append\n+     * @param startIndex  the start index, inclusive, must be valid\n+     * @param length  the length to append, must be valid\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder append(String str, int startIndex, int length) {\n+        if (str == null) {\n+            return appendNull();\n+        }\n+        if (startIndex < 0 || startIndex > str.length()) {\n+            throw new StringIndexOutOfBoundsException(\"startIndex must be valid\");\n+        }\n+        if (length < 0 || (startIndex + length) > str.length()) {\n+            throw new StringIndexOutOfBoundsException(\"length must be valid\");\n+        }\n+        if (length > 0) {\n+            int len = length();\n+            ensureCapacity(len + length);\n+            str.getChars(startIndex, startIndex + length, buffer, len);\n+            size += length;\n+        }\n+        return this;\n+    }\n+\n+    /**\n      * Appends a string buffer to the string builder.\n      * Appending null will call {@link #appendNull()}.\n      *\n         if (startIndex < 0 || startIndex > chars.length) {\n             throw new StringIndexOutOfBoundsException(\"startIndex must be valid\");\n         }\n-        if (length < 0) {\n-            throw new StringIndexOutOfBoundsException(\"length must not be negative\");\n+        if (length < 0 || (startIndex + length) > chars.length) {\n+            throw new StringIndexOutOfBoundsException(\"length must be valid\");\n         }\n         if (length > 0) {\n             int len = length();\n--- a/src/test/org/apache/commons/lang/text/StrBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/text/StrBuilderTest.java\n         sb.append(FOO);\n         assertEquals(\"foo\", sb.toString());\n \n+        sb.append((StringBuffer) null);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(new StringBuffer(\"baz\"));\n+        assertEquals(\"foobaz\", sb.toString());\n+\n+        sb.append(new StrBuilder(\"yes\"));\n+        assertEquals(\"foobazyes\", sb.toString());\n+    }\n+\n+    public void testAppend_String() {\n+        StrBuilder sb = new StrBuilder();\n+\n+        sb.append(\"foo\");\n+        assertEquals(\"foo\", sb.toString());\n+\n         sb.append((String) null);\n         assertEquals(\"foo\", sb.toString());\n \n \n         sb.append(\"bar\");\n         assertEquals(\"foobar\", sb.toString());\n-\n-        sb.append((StringBuffer) null);\n+    }\n+\n+    public void testAppend_String_int_int() {\n+        StrBuilder sb = new StrBuilder();\n+        \n+        sb.append(\"foo\", 0, 3);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append((String) null, 0, 1);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        try {\n+            sb.append(\"bar\", -1, 1);\n+            fail(\"append(char[], -1,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(\"bar\", 3, 1);\n+            fail(\"append(char[], 3,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(\"bar\", 1, -1);\n+            fail(\"append(char[],, -1) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(\"bar\", 1, 3);\n+            fail(\"append(char[], 1, 3) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(\"bar\", -1, 3);\n+            fail(\"append(char[], -1, 3) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(\"bar\", 4, 0);\n+            fail(\"append(char[], 4, 0) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.append(\"bar\", 3, 0);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(\"abcbardef\", 3, 3);\n         assertEquals(\"foobar\", sb.toString());\n-\n-        sb.append(new StringBuffer(\"baz\"));\n-        assertEquals(\"foobarbaz\", sb.toString());\n-\n-        sb.append(new StrBuilder(\"yes\"));\n-        assertEquals(\"foobarbazyes\", sb.toString());\n     }\n \n     public void testAppend_CharArray() {\n         assertEquals(\"\", sb.toString());\n \n         sb.append(new char[]{'f', 'o', 'o'});\n+        assertEquals(\"foo\", sb.toString());\n+    }\n+\n+    public void testAppend_CharArray_int_int() {\n+        StrBuilder sb = new StrBuilder();\n+        \n+        sb.append(new char[]{'f', 'o', 'o'}, 0, 3);\n         assertEquals(\"foo\", sb.toString());\n \n         sb.append((char[]) null, 0, 1);", "timestamp": 1123537419, "metainfo": ""}