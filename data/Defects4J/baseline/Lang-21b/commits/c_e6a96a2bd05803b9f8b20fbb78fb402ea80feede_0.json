{"sha": "e6a96a2bd05803b9f8b20fbb78fb402ea80feede", "log": "Javadoc fixing patch applied form Fredrik Westermark   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author <a href=\"mailto:gcoladonato@yahoo.com\">Greg Coladonato</a>\n  * @author <a href=\"mailto:bayard@generationjava.com\">Henri Yandell</a>\n  * @author <a href=\"mailto:ed@apache.org\">Ed Korthof</a>\n- * @author <a href=\"mailto:rand_mcneely@yahoo.com>Rand McNeely</a>\n- * @author <a href=\"mailto:scolebourne@joda.org>Stephen Colebourne</a>\n- * @author <a href=\"mailto:fredrik@westermarck.com>Fredrik Westermarck</a>\n- * @version $Id: StringUtils.java,v 1.18 2002/09/30 00:50:10 bayard Exp $\n+ * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n+ * @version $Id: StringUtils.java,v 1.19 2002/10/19 17:18:49 bayard Exp $\n  */\n public class StringUtils {\n \n     //--------------------------------------------------------------------------\n \n     /**\n-     * Removes control characters, including whitespace,  from both ends of this \n-     * string, handling null by returning an empty string.\n+     * Removes control characters, including whitespace, from both ends of this\n+     * String, handling <code>null</code> by returning an empty String.\n      *\n      * @see java.lang.String#trim()\n-     * @param str  the string to check\n+     * @param str the String to check\n      * @return the trimmed text (never <code>null</code>)\n      */\n     public static String clean(String str) {\n     }\n \n     /**\n-     * Removes control characters,  including whitespace, from both ends of this\n-     * string, handling null by returning null. \n+     * Removes control characters, including whitespace, from both ends of this\n+     * String, handling <code>null</code> by returning <code>null</code>.\n      *\n      * @see java.lang.String#trim()\n-     * @param str  the string to check\n+     * @param str the String to check\n      * @return the trimmed text (or <code>null</code>)\n      */\n     public static String trim(String str) {\n      * Spaces are defined as {' ', '\\t', '\\r', '\\n', '\\b'}\n      * in line with the deprecated Character.isSpace\n      *\n-     * @param str  String target to delete spaces from\n-     * @return the text without spaces\n+     * @param str String target to delete spaces from\n+     * @return the String without spaces\n      * @throws NullPointerException\n      */\n     public static String deleteSpaces(String str) {\n     }\n \n     /**\n-     * Deletes all whitespace from a String.\n+     * Deletes all whitespaces from a String.\n      * Whitespace is defined by Character.isWhitespace\n      *\n-     * @param str  String target to delete whitespace from\n-     * @return the text without whitespace\n+     * @param str String target to delete whitespace from\n+     * @return the String without whitespaces\n      * @throws NullPointerException\n      */\n     public static String deleteWhitespace(String str) {\n     /**\n      * Checks if a String is non null and is not empty (length > 0).\n      *\n-     * @param str  the string to check\n+     * @param str the String to check\n      * @return true if the String is non-null, and not length zero\n      */\n     public static boolean isNotEmpty(String str) {\n     }\n \n     /**\n-     * Checks if a (trimmed) String is null or empty.\n-     *\n-     * @param str  the string to check\n-     * @return true if the String is null, or length zero once trimmed\n+     * Checks if a (trimmed) String is <code>null</code> or empty.\n+     *\n+     * @param str the String to check\n+     * @return true if the String is <code>null</code>, or length zero once trimmed\n      */\n     public static boolean isEmpty(String str) {\n         return (str == null || str.trim().length() == 0);\n     //--------------------------------------------------------------------------\n \n     /**\n-     * Compares two Strings, returning true if they are equal.\n-     * Nulls are handled without exceptions. Two <code>null</code>\n-     * references are considered equal. Comparison is case sensitive.\n+     * Compares two Strings, returning <code>true</code> if they are equal.\n+     * <code>null</code>s are handled without exceptions. Two <code>null</code>\n+     * references are considered to be equal. The comparison is case sensitive.\n      *\n      * @see java.lang.String#equals(Object)\n-     * @param str1  the first string\n-     * @param str2  the second string\n-     * @return true if the Strings are equal, case sensitive, or both null\n+     * @param str1 the first string\n+     * @param str2 the second string\n+     * @return true if the Strings are equal, case sensitive, or both <code>null</code>\n      */\n     public static boolean equals(String str1, String str2) {\n         return (str1 == null ? str2 == null : str1.equals(str2));\n     }\n \n     /**\n-     * Compares two Strings, returning true if they are equal ignoring case.\n-     * Nulls are handled without exceptions. Two <code>null</code>\n+     * Compares two Strings, returning <code>true</code> if they are equal ignoring\n+     * the case. Nulls are handled without exceptions. Two <code>null</code>\n      * references are considered equal. Comparison is case insensitive.\n+     *\n      * @see java.lang.String#equalsIgnoreCase(String)\n      * @param str1  the first string\n      * @param str2  the second string\n-     * @return true if the Strings are equal, case insensitive, or both null\n+     * @return true if the Strings are equal, case insensitive, or both <code>null</code>\n      */\n     public static boolean equalsIgnoreCase(String str1, String str2) {\n         return (str1 == null ? str2 == null : str1.equalsIgnoreCase(str2));\n     }\n \n     /**\n-     * Find the earliest index of any of a set of potential substrings.\n-     * Null string will return -1.\n-     * \n-     * @param str  the string to check\n-     * @param searchStrs  the strings to search for\n-     * @return the earliest index of any of the strings\n-     * @throws NullPointerException if any of searchStrs[i] is null\n+     * Find the first index of any of a set of potential substrings.\n+     * <code>null</code> String will return <code>-1</code>.\n+     * \n+     * @param str the String to check\n+     * @param searchStrs the Strings to search for\n+     * @return the first index of any of the searchStrs in str\n+     * @throws NullPointerException if any of searchStrs[i] is <code>null</code>\n      */\n     public static int indexOfAny(String str, String[] searchStrs) {\n         if ((str == null) || (searchStrs == null)) {\n \n     /**\n      * Find the latest index of any of a set of potential substrings.\n-     * Null string will return -1.\n-     * \n-     * @param str  the string to check\n-     * @param searchStrs  the strings to search for\n-     * @return the last index of any of the strings\n-     * @throws NullPointerException if any of searchStrs[i] is null\n+     * <code>null</code> string will return <code>-1</code>.\n+     * \n+     * @param str  the String to check\n+     * @param searchStrs  the Strings to search for\n+     * @return the last index of any of the Strings\n+     * @throws NullPointerException if any of searchStrs[i] is <code>null</code>\n      */\n     public static int lastIndexOfAny(String str, String[] searchStrs) {\n         if ((str == null) || (searchStrs == null)) {\n     //--------------------------------------------------------------------------\n     \n     /**\n-     * Gets a substring of the specified string avoiding exceptions.\n+     * Gets a substring from the specified string avoiding exceptions.\n      * A negative start position can be used to start n characters from\n-     * the end of the string.\n-     * \n-     * @param str  the string to get the substring from\n-     * @param start  the position to start from,  negative means \n-     * count back from the end of the string by this many characters\n+     * the end of the String.\n+     * \n+     * @param str the String to get the substring from\n+     * @param start the position to start from, negative means\n+     * count back from the end of the String by this many characters\n      * @return substring from start position\n      */\n     public static String substring(String str, int start) {\n     }\n     \n     /**\n-     * Gets a substring of the specified string avoiding exceptions.\n+     * Gets a substring from the specified String avoiding exceptions.\n      * A negative start position can be used to start/end n characters\n-     * from the end of the string.\n-     * \n-     * @param str  the string to get the substring from\n-     * @param start  the position to start from, negative means \n+     * from the end of the String.\n+     * \n+     * @param str the String to get the substring from\n+     * @param start the position to start from, negative means\n      * count back from the end of the string by this many characters\n-     * @param end  the position to end at (exclusive),  negative means \n-     * count back from the end of the string by this many characters\n+     * @param end the position to end at (exclusive), negative means\n+     * count back from the end of the String by this many characters\n      * @return substring from start position to end positon\n      */\n     public static String substring(String str, int start, int end) {\n     }\n \n     /**\n-     * Gets the leftmost n characters of a string. If n characters are not \n-     * available, or the string is null, the string will be returned \n-     * without an exception.\n-     *\n-     * @param str  the string to get the leftmost characters from\n-     * @param len  the length of the required string\n+     * Gets the leftmost n characters of a String. If n characters are not\n+     * available, or the String is <code>null</code>, the String will be\n+     * returned without an exception.\n+     *\n+     * @param str the String to get the leftmost characters from\n+     * @param len the length of the required String\n      * @return the leftmost characters\n      * @throws IllegalArgumentException if len is less than zero\n      */\n     }\n \n     /**\n-     * Gets the rightmost n characters of a string. If n characters are not \n-     * available, or the string is null, the string will be returned \n-     * without an exception.\n-     *\n-     * @param str  the string to get the rightmost characters from\n-     * @param len  the length of the required string\n+     * Gets the rightmost n characters of a String. If n characters are not\n+     * available, or the String is <code>null</code>, the String will be\n+     * returned without an exception.\n+     *\n+     * @param str the String to get the rightmost characters from\n+     * @param len the length of the required String\n      * @return the leftmost characters\n      * @throws IllegalArgumentException if len is less than zero\n      */\n     }\n \n     /**\n-     * Gets n characters from the middle of a string. If n characters are \n-     * not available, the remainder of the string will be returned \n-     * without an exception. If the string is null, null will be returned.\n-     *\n-     * @param str  the string to get the characters from\n-     * @param pos  the position to start from\n-     * @param len  the length of the required string\n+     * Gets n characters from the middle of a String. If n characters are\n+     * not available, the remainder of the String will be returned\n+     * without an exception. If the String is <code>null</code>,\n+     * <code>null</code> will be returned.\n+     *\n+     * @param str the String to get the characters from\n+     * @param pos the position to start from\n+     * @param len the length of the required String\n      * @return the leftmost characters\n      * @throws IndexOutOfBoundsException if pos is out of bounds\n      * @throws IllegalArgumentException if len is less than zero\n     //--------------------------------------------------------------------------\n     \n     /**\n-     * Splits the provided text into a list, using whitespace as the separator.\n+     * Splits the provided text into a array, using whitespace as the separator.\n      * The separator is not included in the returned String array.\n      *\n-     * @param str  the string to parse\n+     * @param str the String to parse\n      * @return an array of parsed Strings \n      */\n     public static String[] split(String str) {\n     }\n \n     /**\n-     * Splits the provided text into a list, based on a given separator.\n+     * Splits the provided text into a array, based on a given separator.\n      * The separator is not included in the returned String array.\n      * The maximum number of splits to perfom can be controlled.\n-     * A null separator will cause parsing to be on whitespace.\n-     *\n-     * <p>This is useful for quickly splitting a string directly into\n+     * A <code>null</code> separator will cause parsing to be on whitespace.\n+     *\n+     * <p>This is useful for quickly splitting a String directly into\n      * an array of tokens, instead of an enumeration of tokens (as\n      * <code>StringTokenizer</code> does).\n      *\n      * @param separator Characters used as the delimiters. If\n      * <code>null</code>, splits on whitespace.\n      * @param max The maximum number of elements to include in the\n-     * list.  A zero or negative value implies no limit.\n+     * array.  A zero or negative value implies no limit.\n      * @return an array of parsed Strings \n      */\n     public static String[] split(String str, String separator, int max) {\n     // Joining\n     //--------------------------------------------------------------------------\n     /**\n-     * Concatenates elements of an array into a single string.\n+     * Concatenates elements of an array into a single String.\n      * The difference from join is that concatenate has no delimiter.\n      * \n-     * @param array  the array of values to concatenate.\n+     * @param array the array of values to concatenate.\n      * @return the concatenated string.\n      */\n     public static String concatenate(Object[] array) {\n     }\n     \n     /**\n-     * Joins the elements of the provided array into a single string\n+     * Joins the elements of the provided array into a single String\n      * containing the provided list of elements. \n      * No delimiter is added before or after the list.\n-     * A null separator is the same as a blank String.\n-     *\n-     * @param array  the array of values to join together\n-     * @param separator  the separator character to use\n+     * A <code>null</code> separator is the same as a blank String.\n+     *\n+     * @param array the array of values to join together\n+     * @param separator the separator character to use\n      * @return the joined String\n      */\n     public static String join(Object[] array, String separator) {\n     }\n \n     /**\n-     * Joins the elements of the provided iterator into a single string\n-     * containing the provided elements.\n+     * Joins the elements of the provided <code>Iterator</code> into a\n+     * single String containing the provided elements.\n      * No delimiter is added before or after the list.\n-     * A null separator is the same as a blank String.\n-     *\n-     * @param iterator  the iterator of values to join together\n+     * A <code>null</code> separator is the same as a blank String.\n+     *\n+     * @param iterator the <code>Iterator</code> of values to join together\n      * @param separator  the separator character to use\n      * @return the joined String\n      */\n     //--------------------------------------------------------------------------\n     \n     /**\n-     * Replace a string with another string inside a larger string, once.\n+     * Replace a String with another String inside a larger String, once.\n      *\n      * @see #replace(String text, String repl, String with, int max)\n-     * @param text  text to search and replace in\n-     * @param repl  String to search for\n-     * @param with  String to replace with\n+     * @param text text to search and replace in\n+     * @param repl String to search for\n+     * @param with String to replace with\n      * @return the text with any replacements processed\n      */\n     public static String replaceOnce(String text, String repl, String with) {\n     }\n \n     /**\n-     * Replace all occurances of a string within another string.\n+     * Replace all occurances of a String within another String.\n      *\n      * @see #replace(String text, String repl, String with, int max)\n-     * @param text  text to search and replace in\n-     * @param repl  String to search for\n-     * @param with  String to replace with\n+     * @param text text to search and replace in\n+     * @param repl String to search for\n+     * @param with String to replace with\n      * @return the text with any replacements processed\n      */\n     public static String replace(String text, String repl, String with) {\n     }\n \n     /**\n-     * Replace a string with another string inside a larger string,\n-     * for the first <code>max</code> values of the search string.  A\n+     * Replace a String with another String inside a larger String,\n+     * for the first <code>max</code> values of the search String.  A\n      * <code>null</code> reference is passed to this method is a\n      * no-op.\n      *\n-     * @param text  text to search and replace in\n-     * @param repl  String to search for\n-     * @param with  String to replace with\n-     * @param max  maximum number of values to replace, or\n+     * @param text text to search and replace in\n+     * @param repl String to search for\n+     * @param with String to replace with\n+     * @param max maximum number of values to replace, or\n      * <code>-1</code> if no maximum\n      * @return the text with any replacements processed\n      * @throws NullPointerException if repl is null\n     }\n \n     /**\n-     * Overlay a part of a string with another string.\n+     * Overlay a part of a String with another String.\n      *\n      * @param text String to do overlaying in\n      * @param overlay String to overlay\n      * @param start int to start overlaying at\n-     * @param end   int to stop overlaying before\n+     * @param end int to stop overlaying before\n      * @return String with overlayed text\n      * @throws NullPointerException if text or overlay is null\n      */\n     //--------------------------------------------------------------------------\n     \n     /**\n-     * Center a string in a larger string of size n.\n+     * Center a String in a larger String of size n.\n      * Uses spaces as the value to buffer the string with.\n-     * Equivalent to <code>center(str, size, \"\")</code>\n-     *\n-     * @param str  String to center\n-     * @param size  int size of new String\n+     * Equivalent to <code>center(str, size, \" \")</code>\n+     *\n+     * @param str String to center\n+     * @param size int size of new String\n      * @return String containing centered String\n      * @throws NullPointerException if str is null\n      */\n     }\n \n     /**\n-     * Center a string in a larger string of size n.\n-     * Uses a supplied String as the value to buffer the string with..\n-     *\n-     * @param str  String to center\n-     * @param size  int size of new String\n-     * @param delim  String to buffer the new String with\n+     * Center a String in a larger String of size n.\n+     * Uses a supplied String as the value to buffer the String with.\n+     *\n+     * @param str String to center\n+     * @param size int size of new String\n+     * @param delim String to buffer the new String with\n      * @return String containing centered String\n      * @throws NullPointerException if str or delim is null\n-     * @throws ArithmeticException if delim is the empty string\n+     * @throws ArithmeticException if delim is the empty String\n      */\n     public static String center(String str, int size, String delim) {\n         int sz = str.length();\n     /** \n      * Remove the last newline, and everything after it from a String.\n      *\n-     * @param str  String to chomp the newline from\n+     * @param str String to chomp the newline from\n      * @return String without chomped newline\n      * @throws NullPointerException if str is null\n      */\n      * Remove the last value of a supplied String, and everything after it \n      * from a String.\n      *\n-     * @param str  String to chomp from\n-     * @param sep  String to chomp\n+     * @param str String to chomp from\n+     * @param sep String to chomp\n      * @return String without chomped ending\n      * @throws NullPointerException if str or sep is null\n      */\n     \n     /**\n      * Remove a newline if and only if it is at the end \n-     * of the supplied string.\n-     * \n-     * @param str  String to chomp from\n+     * of the supplied String.\n+     * \n+     * @param str String to chomp from\n      * @return String without chomped ending\n      * @throws NullPointerException if str is null\n      */\n     }\n     \n     /**\n-     * Remove a value if and only if the string ends with that value.\n-     * \n-     * @param str  String to chomp from\n-     * @param sep  String to chomp\n+     * Remove a value if and only if the String ends with that value.\n+     * \n+     * @param str String to chomp from\n+     * @param sep String to chomp\n      * @return String without chomped ending\n      * @throws NullPointerException if str or sep is null\n      */\n      * So a tab becomes the characters '\\\\' and 't'.\n      *\n      * @param str String to escape values in\n-     *\n      * @return String with escaped values\n      * @throws NullPointerException if str is null\n      */\n     //--------------------------------------------------------------------------\n     \n     /**\n-     * Repeat a string n times to form a new string.\n-     *\n-     * @param str  String to repeat\n-     * @param repeat  int number of times to repeat\n-     * @return String with repeated string\n+     * Repeat a String n times to form a new string.\n+     *\n+     * @param str String to repeat\n+     * @param repeat number of times to repeat str\n+     * @return String with repeated String\n      * @throws NegativeArraySizeException if repeat < 0\n      * @throws NullPointerException if str is null\n      */\n     /**\n      * Right pad a String with spaces. Pad to a size of n.\n      * \n-     * @param str  String to repeat\n-     * @param size  int number of times to repeat\n+     * @param str String to repeat\n+     * @param size number of times to repeat str\n      * @return right padded String\n      * @throws NullPointerException if str is null\n      */\n     /**\n      * Right pad a String with a specified string. Pad to a size of n.\n      *\n-     * @param str  String to pad out\n-     * @param size  int size to pad to\n-     * @param delim  String to pad with\n+     * @param str String to pad out\n+     * @param size size to pad to\n+     * @param delim String to pad with\n      * @return right padded String\n      * @throws NullPointerException if str or delim is null\n      * @throws ArithmeticException if delim is the empty string\n     /**\n      * Left pad a String with spaces. Pad to a size of n.\n      *\n-     * @param str  String to pad out\n-     * @param size  int size to pad to\n+     * @param str String to pad out\n+     * @param size size to pad to\n      * @return left padded String\n      * @throws NullPointerException if str or delim is null\n      */\n     /**\n      * Left pad a String with a specified string. Pad to a size of n.\n      *\n-     * @param str  String to pad out\n-     * @param size  int size to pad to\n-     * @param delim  String to pad with\n+     * @param str String to pad out\n+     * @param size size to pad to\n+     * @param delim String to pad with\n      * @return left padded String\n      * @throws NullPointerException if str or delim is null\n      * @throws ArithmeticException if delim is the empty string\n     /**\n      * Remove whitespace from the front and back of a String.\n      * \n-     * @param str  the string to remove whitespace from\n-     * @return the stripped string\n+     * @param str the String to remove whitespace from\n+     * @return the stripped String\n      */\n     public static String strip(String str) {\n         return strip(str, null);\n      * String. If Whitespace is wanted to be removed, used the \n      * strip(String) method.\n      * \n-     * @param str  the string to remove a string from\n-     * @param delim  the string to remove at start and end\n-     * @return the stripped string\n+     * @param str the String to remove a string from\n+     * @param delim the String to remove at start and end\n+     * @return the stripped String\n      */\n     public static String strip(String str, String delim) {\n         str = stripStart(str, delim);\n     }\n \n     /**\n-     * Strip whitespace from the front and back of every string\n+     * Strip whitespace from the front and back of every String\n      * in the array.\n      * \n-     * @param strs  the strings to remove whitespace from\n-     * @return the stripped strings\n+     * @param strs the Strings to remove whitespace from\n+     * @return the stripped Strings\n      */\n     public static String[] stripAll(String[] strs) {\n         return stripAll(strs, null);\n      * Strip the specified delimiter from the front and back of\n      * every String in the array.\n      * \n-     * @param strs  the strings to remove a string from\n-     * @param delimiter  the string to remove at start and end\n-     * @return the stripped strings\n+     * @param strs the Strings to remove a string from\n+     * @param delimiter the String to remove at start and end\n+     * @return the stripped Strings\n      */\n     public static String[] stripAll(String[] strs, String delimiter) {\n         if ((strs == null) || (strs.length == 0)) {\n     }   \n \n     /**\n-     * Strip any of a supplied string from the end of a String..\n-     * If the strip string is null, whitespace is stripped.\n-     * \n-     * @param str  the string to remove characters from\n-     * @param strip  the string to remove\n-     * @return the stripped string\n+     * Strip any of a supplied String from the end of a String..\n+     * If the strip String is <code>null</code>, whitespace is stripped.\n+     * \n+     * @param str the String to remove characters from\n+     * @param strip the String to remove\n+     * @return the stripped String\n      */\n     public static String stripEnd(String str, String strip) {\n         if (str == null) {\n     }\n \n     /**\n-     * Strip any of a supplied string from the start of a String.\n-     * If the strip string is null, whitespace is stripped.\n-     * \n-     * @param str  the string to remove characters from\n-     * @param strip  the string to remove\n-     * @return the stripped string\n+     * Strip any of a supplied String from the start of a String.\n+     * If the strip String is <code>null</code>, whitespace is stripped.\n+     * \n+     * @param str the String to remove characters from\n+     * @param strip the String to remove\n+     * @return the stripped String\n      */\n     public static String stripStart(String str, String strip) {\n         if (str == null) {\n     //--------------------------------------------------------------------------\n     \n     /**\n-     * Convert a String to upper case, null string returns null.\n-     * \n-     * @param str  the string to uppercase\n-     * @return the upper cased string\n+     * Convert a String to upper case, <code>null</code> String returns\n+     * <code>null</code>.\n+     * \n+     * @param str the String to uppercase\n+     * @return the upper cased String\n      */\n     public static String upperCase(String str) {\n         if (str == null) {\n     }\n \n     /**\n-     * Convert a String to lower case, null string returns null.\n-     * \n-     * @param str  the string to lowercase\n-     * @return the lower cased string\n+     * Convert a String to lower case, <code>null</code> String returns\n+     * <code>null</code>.\n+     * \n+     * @param str the string to lowercase\n+     * @return the lower cased String\n      */\n     public static String lowerCase(String str) {\n         if (str == null) {\n     }\n \n     /**\n-     * Uncapitalise a string. That is, convert the first character into \n-     * lower-case. Null is returned as null.\n-     *\n-     * @param str  the string to uncapitalise\n-     * @return uncapitalised string\n+     * Uncapitalise a String. That is, convert the first character into\n+     * lower-case. <code>null</code> is returned as <code>null</code>.\n+     *\n+     * @param str the String to uncapitalise\n+     * @return uncapitalised String\n      */\n     public static String uncapitalise(String str) {\n         if (str == null) {\n     }\n \n     /**\n-     * Capitalise a string. That is, convert the first character into \n-     * title-case. Null is returned as null.\n-     *\n-     * @param str  the string to capitalise\n-     * @return capitalised string\n+     * Capitalise a String. That is, convert the first character into\n+     * title-case. <code>null</code> is returned as <code>null</code>.\n+     *\n+     * @param str the String to capitalise\n+     * @return capitalised String\n      */\n     public static String capitalise(String str) {\n         if (str == null) {\n     /**\n      * Swaps the case of String. Properly looks after \n      * making sure the start of words are Titlecase and not \n-     * Uppercase. Null is returned as null.\n-     * \n-     * @param str  the string to swap the case of\n-     * @return the modified string\n+     * Uppercase. <code>null</code> is returned as\n+     * <code>null</code>.\n+     * \n+     * @param str the String to swap the case of\n+     * @return the modified String\n      */\n     public static String swapCase(String str) {\n         if (str == null) {\n \n \n     /**\n-     * Capitalise all the words in a string. Uses Character.isWhitespace \n-     * as a separator between words. Null will return null.\n-     *\n-     * @param str  the string to capitalise\n-     * @return capitalised string\n+     * Capitalise all the words in a String. Uses Character.isWhitespace\n+     * as a separator between words. <code>null</code> will return\n+     * <code>null</code>.\n+     *\n+     * @param str the String to capitalise\n+     * @return capitalised String\n      */\n     public static String capitaliseAllWords(String str) {\n         if (str == null) {\n     \n     /**\n      * Get the String that is nested in between two instances of the \n-     * same String. If str is null, will return null\n-     *\n-     * @param str  the string containing nested-string\n-     * @param tag  the string before and after nested-string\n-     * @return the string that was nested, or null\n+     * same String. If <code>str</code> is <code>null</code>, will\n+     * return <code>null</code>.\n+     *\n+     * @param str the String containing nested-string\n+     * @param tag the String before and after nested-string\n+     * @return the String that was nested, or null\n      * @throws NullPointerException if tag is null\n      */\n     public static String getNestedString(String str, String tag) {\n     }\n     \n     /**\n-     * Get the string that is nested in between two strings.\n-     *\n-     * @param str  the string containing nested-string\n-     * @param open  the string before nested-string\n-     * @param close  the string after nested-string\n-     * @return the string that was nested, or null\n-     * @throws NullPointerException if open or close  is null\n+     * Get the String that is nested in between two Strings.\n+     *\n+     * @param str the String containing nested-string\n+     * @param open the String before nested-string\n+     * @param close the String after nested-string\n+     * @return the String that was nested, or null\n+     * @throws NullPointerException if open or close is null\n      */\n     public static String getNestedString(String str, String open, String close) {\n         if (str == null) {\n     }\n \n     /**\n-     * How many times is the substring in the larger string.\n-     * Null returns 0.\n-     * \n-     * @param str  the string to check\n-     * @param sub  the substring to count\n-     * @return the number of occurances, 0 if the string is null\n+     * How many times is the substring in the larger String.\n+     * <code>null</code> returns 0.\n+     * \n+     * @param str the String to check\n+     * @param sub the substring to count\n+     * @return the number of occurances, 0 if the String is null\n      * @throws NullPointerException if sub is null\n      */\n     public static int countMatches(String str, String sub) {\n     //--------------------------------------------------------------------------\n     \n     /**\n-     * Checks if the string contains only unicode letters.\n-     * Null will return false. The empty string will return true.\n-     * \n-     * @param str  the string to check\n+     * Checks if the String contains only unicode letters.\n+     * <code>null</code> will return <code>false</code>.\n+     * The empty String will return <code>true</code>.\n+     * \n+     * @param str the String to check\n      * @return true if only contains letters, and is non-null\n      */\n     public static boolean isAlpha(String str) {\n     }\n \n     /**\n-     * Checks if the string contains only unicode letters and space (' ').\n-     * Null will return false.  The empty string will return true.\n-     * \n-     * @param str  the string to check\n+     * Checks if the String contains only unicode letters and space (' ').\n+     * <code>null</code> will return <code>false</code>.  The empty String\n+     * will return <code>true</code>.\n+     * \n+     * @param str the String to check\n      * @return true if only contains letters and space, and is non-null\n      */\n     public static boolean isAlphaSpace(String str) {\n     }\n \n     /**\n-     * Checks if the string contains only unicode letters or digits.\n-     * Null will return false. The empty string will return true.\n-     * \n-     * @param str  the string to check\n+     * Checks if the String contains only unicode letters or digits.\n+     * <code>null</code> will return <code>false</code>. The empty\n+     * String will return <code>true</code>.\n+     * \n+     * @param str the String to check\n      * @return true if only contains letters or digits, and is non-null\n      */\n     public static boolean isAlphanumeric(String str) {\n     }\n \n     /**\n-     * Checks if the string contains only unicode letters, digits or space (' ').\n-     * Null will return false. The empty string will return true.\n-     * \n-     * @param str  the string to check\n+     * Checks if the String contains only unicode letters, digits or space (' ').\n+     * <code>null</code> will return <code>false</code>. The empty String will\n+     * return <code>true</code>.\n+     * \n+     * @param str the String to check\n      * @return true if only contains letters, digits or space, and is non-null\n      */\n     public static boolean isAlphanumericSpace(String str) {\n     }\n \n     /**\n-     * Checks if the string contains only unicode digits.\n-     * Null will return false. The empty string will return true.\n-     * \n-     * @param str  the string to check\n+     * Checks if the String contains only unicode digits.\n+     * <code>null</code> will return <code>false</code>.\n+     * The empty String will return <code>true</code>.\n+     * \n+     * @param str the String to check\n      * @return true if only contains digits, and is non-null\n      */\n     public static boolean isNumeric(String str) {\n     }\n \n     /**\n-     * Checks if the string contains only unicode digits or space (' ').\n-     * Null will return false. The empty string will return true.\n-     * \n-     * @param str  the string to check\n+     * Checks if the String contains only unicode digits or space (' ').\n+     * <code>null</code> will return <code>false</code>. The empty\n+     * String will return <code>true</code>.\n+     * \n+     * @param str the String to check\n      * @return true if only contains digits or space, and is non-null\n      */\n     public static boolean isNumericSpace(String str) {\n     //--------------------------------------------------------------------------\n     \n     /**\n-     * Return either the passed in String, or if it is null, \n+     * Return either the passed in String, or if it is <code>null</code>,\n      * then an empty String.\n      * \n-     * @param str  the string to check\n-     * @return the passed in string, or blank if it was null\n+     * @param str the String to check\n+     * @return the passed in String, or blank if it was null\n      */\n     public static String defaultString(String str) {\n         return defaultString(str, \"\");\n     }\n \n     /**\n-     * Return either the passed in String, or if it is null, \n+     * Return either the passed in String, or if it is <code>null</code>,\n      * then a passed in default String.\n      * \n-     * @param str  the string to check\n-     * @param defaultString  the default string to return is str is null\n+     * @param str the String to check\n+     * @param defaultString  the default String to return is str is null\n      * @return the passed in string, or the default if it was null\n      */\n     public static String defaultString(String str, String defaultString) {\n     //--------------------------------------------------------------------------\n \n     /**\n-     * Reverse a String, null string returns null.\n-     * \n-     * @param str  the string to reverse\n-     * @return the reversed string\n+     * Reverse a String, <code>null</code> String returns\n+     * <code>null</code>.\n+     * \n+     * @param str the String to reverse\n+     * @return the reversed String\n      */\n     public static String reverse(String str) {\n         if (str == null) {\n     }\n \n     /**\n-     * Reverses a string that is delimited by a specific character.\n-     * The strings between the delimiters are not reversed.\n+     * Reverses a String that is delimited by a specific character.\n+     * The Strings between the delimiters are not reversed.\n      * Thus java.lang.String becomes String.lang.java (if the delimiter is '.').\n      * \n-     * @param str  the string to reverse\n-     * @param delimiter  the delimiter to use\n-     * @return the reversed string\n+     * @param str the String to reverse\n+     * @param delimiter the delimiter to use\n+     * @return the reversed String\n      */\n     public static String reverseDelimitedString(String str, String delimiter) {\n         // could implement manually, but simple way is to reuse other, \n     /**\n      * Reverses an array. \n      * TAKEN FROM CollectionsUtils.\n+     *\n      * @param array  the array to reverse\n      */\n     private static void reverseArray(Object[] array) {\n     //--------------------------------------------------------------------------\n \n     /**\n-     * Find the Levenshtein distance between two strings.\n-     * This is the number of changes needed to change one string into \n+     * Find the Levenshtein distance between two Strings.\n+     * This is the number of changes needed to change one String into\n      * another. Where each change is a single character modification.\n      *\n      * This implemmentation of the levenshtein distance algorithm \n      * is from http://www.merriampark.com/ld.htm\n      * \n-     * @param s  the first String\n-     * @param t  the second String\n-     * @return int result distance\n+     * @param s the first String\n+     * @param t the second String\n+     * @return result distance\n      * @throws NullPointerException if s or t is null\n      */\n     public static int getLevenshteinDistance(String s, String t) {", "timestamp": 1035047929, "metainfo": ""}