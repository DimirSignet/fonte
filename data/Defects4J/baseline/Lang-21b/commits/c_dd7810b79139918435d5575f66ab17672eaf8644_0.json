{"sha": "dd7810b79139918435d5575f66ab17672eaf8644", "log": "Fixup raw types for private variables (non-API)  ", "commit": "\n--- a/src/java/org/apache/commons/lang/Validate.java\n+++ b/src/java/org/apache/commons/lang/Validate.java\n      */\n     public static void noNullElements(Collection collection, String message) {\n         Validate.notNull(collection);\n-        for (Iterator it = collection.iterator(); it.hasNext();) {\n+        for (Iterator<?> it = collection.iterator(); it.hasNext();) {\n             if (it.next() == null) {\n                 throw new IllegalArgumentException(message);\n             }\n     public static void noNullElements(Collection collection) {\n         Validate.notNull(collection);\n         int i = 0;\n-        for (Iterator it = collection.iterator(); it.hasNext(); i++) {\n+        for (Iterator<?> it = collection.iterator(); it.hasNext(); i++) {\n             if (it.next() == null) {\n                 throw new IllegalArgumentException(\"The validated collection contains null element at index: \" + i);\n             }\n     public static void allElementsOfType(Collection collection, Class clazz, String message) {\n         Validate.notNull(collection);\n         Validate.notNull(clazz);\n-        for (Iterator it = collection.iterator(); it.hasNext(); ) {\n+        for (Iterator<?> it = collection.iterator(); it.hasNext(); ) {\n             if (clazz.isInstance(it.next()) == false) {\n                 throw new IllegalArgumentException(message);\n             }\n         Validate.notNull(collection);\n         Validate.notNull(clazz);\n         int i = 0;\n-        for (Iterator it = collection.iterator(); it.hasNext(); i++) {\n+        for (Iterator<?> it = collection.iterator(); it.hasNext(); i++) {\n             if (clazz.isInstance(it.next()) == false) {\n                 throw new IllegalArgumentException(\"The validated collection contains an element not of type \"\n                     + clazz.getName() + \" at index: \" + i);\n--- a/src/java/org/apache/commons/lang/math/NumberRange.java\n+++ b/src/java/org/apache/commons/lang/math/NumberRange.java\n         if (num == null) {\n             throw new IllegalArgumentException(\"The number must not be null\");\n         }\n-        if (num instanceof Comparable == false) {\n+        if (num instanceof Comparable<?> == false) {\n             throw new IllegalArgumentException(\"The number must implement Comparable\");\n         }\n         if (num instanceof Double && ((Double) num).isNaN()) {\n         if (num1.getClass() != num2.getClass()) {\n             throw new IllegalArgumentException(\"The numbers must be of the same type\");\n         }\n-        if (num1 instanceof Comparable == false) {\n+        if (num1 instanceof Comparable<?> == false) {\n             throw new IllegalArgumentException(\"The numbers must implement Comparable\");\n         }\n         if (num1 instanceof Double) {", "timestamp": 1254168876, "metainfo": ""}