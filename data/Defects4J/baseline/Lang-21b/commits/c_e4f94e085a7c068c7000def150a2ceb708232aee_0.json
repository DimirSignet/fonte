{"sha": "e4f94e085a7c068c7000def150a2ceb708232aee", "log": "Adding javadoc  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityEscaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityEscaper.java\n     private final int above;\n     private final boolean between;\n \n+    /**\n+     * <p>Constructs a <code>NumericEntityEscaper</code> for the specified range. This is \n+     * the underlying method for the other constructors/builders. The <code>below</code>\n+     * and <code>above</code> boundaries are inclusive when <code>between</code> is \n+     * <code>true</code> and exclusive when it is <code>false</code>. </p>\n+     *\n+     * @param below int value representing the lowest codepoint boundary\n+     * @param above int value representing the highest codepoint boundary\n+     * @param between whether to escape between the boundaries or outside them\n+     */\n     private NumericEntityEscaper(int below, int above, boolean between) {\n         this.below = below;\n         this.above = above;\n         this.between = between;\n     }\n \n+    /**\n+     * <p>Constructs a <code>NumericEntityEscaper</code> for all characters. </p>\n+     */\n     public NumericEntityEscaper() { \n         this(0, Integer.MAX_VALUE, true);\n     }\n \n+    /**\n+     * <p>Constructs a <code>NumericEntityEscaper</code> below the specified value (exclusive). </p>\n+     *\n+     * @param codepoint below which to escape\n+     */\n     public static NumericEntityEscaper below(int codepoint) {\n         return outsideOf(codepoint, Integer.MAX_VALUE);\n     }\n \n+    /**\n+     * <p>Constructs a <code>NumericEntityEscaper</code> above the specified value (exclusive). </p>\n+     *\n+     * @param codepoint above which to escape\n+     */\n     public static NumericEntityEscaper above(int codepoint) {\n         return outsideOf(0, codepoint);\n     }\n \n+    /**\n+     * <p>Constructs a <code>NumericEntityEscaper</code> between the specified values (inclusive). </p>\n+     *\n+     * @param codepointLow above which to escape\n+     * @param codepointHigh below which to escape\n+     */\n     public static NumericEntityEscaper between(int codepointLow, int codepointHigh) {\n         return new NumericEntityEscaper(codepointLow, codepointHigh, true);\n     }\n \n+    /**\n+     * <p>Constructs a <code>NumericEntityEscaper</code> outside of the specified values (exclusive). </p>\n+     *\n+     * @param codepointLow below which to escape\n+     * @param codepointHigh above which to escape\n+     */\n     public static NumericEntityEscaper outsideOf(int codepointLow, int codepointHigh) {\n         return new NumericEntityEscaper(codepointLow, codepointHigh, false);\n     }\n--- a/src/main/java/org/apache/commons/lang3/text/translate/UnicodeEscaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/UnicodeEscaper.java\n     private final int above;\n     private final boolean between;\n \n+    /**\n+     * <p>Constructs a <code>UnicodeEscaper</code> for all characters. </p>\n+     */\n     public UnicodeEscaper(){\n         this(0, Integer.MAX_VALUE, true);\n     }\n \n+    /**\n+     * <p>Constructs a <code>UnicodeEscaper</code> for the specified range. This is \n+     * the underlying method for the other constructors/builders. The <code>below</code>\n+     * and <code>above</code> boundaries are inclusive when <code>between</code> is \n+     * <code>true</code> and exclusive when it is <code>false</code>. </p>\n+     *\n+     * @param below int value representing the lowest codepoint boundary\n+     * @param above int value representing the highest codepoint boundary\n+     * @param between whether to escape between the boundaries or outside them\n+     */\n     private UnicodeEscaper(int below, int above, boolean between) {\n         this.below = below;\n         this.above = above;\n         this.between = between;\n     }\n \n+    /**\n+     * <p>Constructs a <code>UnicodeEscaper</code> below the specified value (exclusive). </p>\n+     *\n+     * @param codepoint below which to escape\n+     */\n     public static UnicodeEscaper below(int codepoint) {\n         return outsideOf(codepoint, Integer.MAX_VALUE);\n     }\n \n+    /**\n+     * <p>Constructs a <code>UnicodeEscaper</code> above the specified value (exclusive). </p>\n+     *\n+     * @param codepoint above which to escape\n+     */\n     public static UnicodeEscaper above(int codepoint) {\n         return outsideOf(0, codepoint);\n     }\n \n+    /**\n+     * <p>Constructs a <code>UnicodeEscaper</code> outside of the specified values (exclusive). </p>\n+     *\n+     * @param codepointLow below which to escape\n+     * @param codepointHigh above which to escape\n+     */\n     public static UnicodeEscaper outsideOf(int codepointLow, int codepointHigh) {\n         UnicodeEscaper escaper = new UnicodeEscaper(codepointLow, codepointHigh, false);\n         return escaper;\n     }\n \n+    /**\n+     * <p>Constructs a <code>UnicodeEscaper</code> between the specified values (inclusive). </p>\n+     *\n+     * @param codepointLow above which to escape\n+     * @param codepointHigh below which to escape\n+     */\n     public static UnicodeEscaper between(int codepointLow, int codepointHigh) {\n         UnicodeEscaper escaper = new UnicodeEscaper(codepointLow, codepointHigh, true);\n         return escaper;", "timestamp": 1296628790, "metainfo": ""}