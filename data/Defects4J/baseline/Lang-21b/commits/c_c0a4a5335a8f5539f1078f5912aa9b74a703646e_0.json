{"sha": "c0a4a5335a8f5539f1078f5912aa9b74a703646e", "log": "Minimise scope of @SuppressWarnings  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/reflect/ConstructorUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/reflect/ConstructorUtils.java\n      * @param parameterTypes find method with compatible parameters\n      * @return a valid Constructor object. If there's no matching constructor, returns <code>null</code>.\n      */\n-    @SuppressWarnings(\"unchecked\")\n     public static <T> Constructor<T> getMatchingAccessibleConstructor(Class<T> cls,\n             Class<?>... parameterTypes) {\n         // see if we can find the constructor directly\n             if (ClassUtils.isAssignable(parameterTypes, ctors[i]\n                     .getParameterTypes(), true)) {\n                 // get accessible version of method\n+                @SuppressWarnings(\"unchecked\") // TODO is this OK? If so, why?\n                 Constructor<T> ctor = getAccessibleConstructor((Constructor<T>) ctors[i]);\n                 if (ctor != null) {\n                     MemberUtils.setAccessibleWorkaround(ctor);", "timestamp": 1281348291, "metainfo": ""}