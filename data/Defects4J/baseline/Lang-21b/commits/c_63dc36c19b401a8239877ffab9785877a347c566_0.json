{"sha": "63dc36c19b401a8239877ffab9785877a347c566", "log": "Applying Valentin Rocher's patch to LANG-579, adding new regexp and in range methods to Validate  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/Validate.java\n+++ b/src/main/java/org/apache/commons/lang3/Validate.java\n import java.util.Collection;\n import java.util.Iterator;\n import java.util.Map;\n+import java.util.regex.Pattern;\n \n /**\n  * <p>This class assists in validating arguments. The validation methods are \n  */\n public class Validate {\n \n+    private static final String DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE = \"The value %s is not in the specified exclusive range of %s to %s\";\n+    private static final String DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE = \"The value %s is not in the specified inclusive range of %s to %s\";\n+    private static final String DEFAULT_MATCHES_PATTERN_EX = \"The string %s does not match the pattern %s\";\n     private static final String DEFAULT_IS_NULL_EX_MESSAGE = \"The validated object is null\";\n     private static final String DEFAULT_IS_TRUE_EX_MESSAGE = \"The validated expression is false\";\n     private static final String DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE = \"The validated array contains null element at index: %d\";\n             throw new IllegalStateException(String.format(message, values));\n         }\n     }\n-\n+    \n+    /**\n+     * <p>Validate that the specified argument character sequence matches the specified regular\n+     * expression pattern; otherwise throwing an exception.</p>\n+     *\n+     * <pre>Validate.matchesPattern(\"hi\", \"[a-z]*\");</pre>\n+     * \n+     * <p>The syntax of the pattern is the one used in the {@link Pattern} class.</p>\n+     * \n+     * @param input the character sequence to validate\n+     * @param pattern regular expression pattern\n+     * @throws IllegalArgumentException if the character sequence does not match the pattern\n+     * @see #matchesPattern(String, String, String, Object...)\n+     */\n+    public static void matchesPattern(CharSequence input, String pattern)\n+    {\n+        if (Pattern.matches(pattern, input) == false)\n+        {\n+            throw new IllegalArgumentException(String.format(DEFAULT_MATCHES_PATTERN_EX, input, pattern));\n+        }\n+    }\n+    \n+    /**\n+     * <p>Validate that the specified argument character sequence matches the specified regular\n+     * expression pattern; otherwise throwing an exception with the specified message.</p>\n+     *\n+     * <pre>Validate.matchesPattern(\"hi\", \"[a-z]*\", \"%s does not match %s\", \"hi\" \"[a-z]*\");</pre>\n+     * \n+     * <p>The syntax of the pattern is the one used in the {@link Pattern} class.</p>\n+     * \n+     * @param input the character sequence to validate\n+     * @param pattern regular expression pattern\n+     * @param message the exception message\n+     * @param optional values to replace in the exception message\n+     * @throws IllegalArgumentException if the character sequence does not match the pattern\n+     * @see #matchesPattern(String, String)\n+     */\n+    public static void matchesPattern(CharSequence input, String pattern, String message, Object... values)\n+    {\n+        if (Pattern.matches(pattern, input) == false)\n+        {\n+            throw new IllegalArgumentException(String.format(message, values));\n+        }\n+    }\n+    \n+    /**\n+     * <p>Validate that the specified argument object fall between the two\n+     * inclusive values specified; otherwise, throws an exception.</p>\n+     *\n+     * <pre>Validate.inclusiveBetween(0, 2, 1);</pre>\n+     * \n+     * @param value the object to validate\n+     * @param start the inclusive start value\n+     * @param end the inclusive end value\n+     * @throws IllegalArgumentException if the value falls out of the boundaries\n+     * @see #inclusiveBetween(Object, Object, Comparable, String, Object...)\n+     */\n+    public static <T> void inclusiveBetween(T start, T end, Comparable<T> value)\n+    {\n+        if (value.compareTo(start) < 0 || value.compareTo(end) > 0)\n+        {\n+            throw new IllegalArgumentException(String.format(DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE, value, start, end));\n+        }\n+    }\n+    \n+    /**\n+     * <p>Validate that the specified argument object fall between the two\n+     * inclusive values specified; otherwise, throws an exception with the\n+     * specified message.</p>\n+     *\n+     * <pre>Validate.inclusiveBetween(0, 2, 1, \"Not in boundaries\");</pre>\n+     * \n+     * @param value the object to validate\n+     * @param start the inclusive start value\n+     * @param end the inclusive end value\n+     * @param message the exception message\n+     * @param optional values to replace in the exception message\n+     * @throws IllegalArgumentException if the value falls out of the boundaries\n+     * @see #inclusiveBetween(Object, Object, Comparable)\n+     */\n+    public static <T> void inclusiveBetween(T start, T end, Comparable<T> value, String message, Object... values)\n+    {\n+        if (value.compareTo(start) < 0 || value.compareTo(end) > 0)\n+        {\n+            throw new IllegalArgumentException(String.format(message, values));\n+        }\n+    }\n+    \n+    /**\n+     * <p>Validate that the specified argument object fall between the two\n+     * exclusive values specified; otherwise, throws an exception.</p>\n+     *\n+     * <pre>Validate.inclusiveBetween(0, 2, 1);</pre>\n+     * \n+     * @param value the object to validate\n+     * @param start the exclusive start value\n+     * @param end the exclusive end value\n+     * @throws IllegalArgumentException if the value falls out of the boundaries\n+     * @see #exclusiveBetween(Object, Object, Comparable, String, Object...)\n+     */\n+    public static <T> void exclusiveBetween(T start, T end, Comparable<T> value)\n+    {\n+        if (value.compareTo(start) <= 0 || value.compareTo(end) >= 0)\n+        {\n+            throw new IllegalArgumentException(String.format(DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE, value, start, end));\n+        }\n+    }\n+    \n+    /**\n+     * <p>Validate that the specified argument object fall between the two\n+     * exclusive values specified; otherwise, throws an exception with the\n+     * specified message.</p>\n+     *\n+     * <pre>Validate.inclusiveBetween(0, 2, 1, \"Not in boundaries\");</pre>\n+     * \n+     * @param value the object to validate\n+     * @param start the exclusive start value\n+     * @param end the exclusive end value\n+     * @param message the exception message\n+     * @param optional values to replace in the exception message\n+     * @throws IllegalArgumentException if the value falls out of the boundaries\n+     * @see #exclusiveBetween(Object, Object, Comparable)\n+     */\n+    public static <T> void exclusiveBetween(T start, T end, Comparable<T> value, String message, Object... values)\n+    {\n+        if (value.compareTo(start) <= 0 || value.compareTo(end) >= 0)\n+        {\n+            throw new IllegalArgumentException(String.format(message, values));\n+        }\n+    }\n }\n--- a/src/test/java/org/apache/commons/lang3/ValidateTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ValidateTest.java\n         String test = Validate.validIndex(input, 0);\n         assertSame(input, test);\n     }\n-\n+    \n+    public void testMatchesPattern()\n+    {\n+        CharSequence str = \"hi\";\n+        Validate.matchesPattern(str, \"[a-z]*\");\n+        try\n+        {\n+            Validate.matchesPattern(str, \"[0-9]*\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        }\n+        catch (IllegalArgumentException e)\n+        {\n+            assertEquals(\"The string hi does not match the pattern [0-9]*\", e.getMessage());\n+        }\n+    }\n+    \n+    public void testMatchesPattern_withMessage()\n+    {\n+        CharSequence str = \"hi\";\n+        Validate.matchesPattern(str, \"[a-z]*\", \"Does not match\");\n+        try\n+        {\n+            Validate.matchesPattern(str, \"[0-9]*\", \"Does not match\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        }\n+        catch (IllegalArgumentException e)\n+        {\n+            assertEquals(\"Does not match\", e.getMessage());\n+        }\n+    }\n+    \n+    public void testInclusiveBetween()\n+    {\n+        Validate.inclusiveBetween(\"a\", \"c\", \"b\");\n+        Validate.inclusiveBetween(0, 2, 1);\n+        Validate.inclusiveBetween(0, 2, 2);\n+        try {\n+            Validate.inclusiveBetween(0, 5, 6);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            assertEquals(\"The value 6 is not in the specified inclusive range of 0 to 5\", e.getMessage());\n+        }\n+    }\n+    \n+    public void testInclusiveBetween_withMessage()\n+    {\n+        Validate.inclusiveBetween(\"a\", \"c\", \"b\", \"Error\");\n+        Validate.inclusiveBetween(0, 2, 1, \"Error\");\n+        Validate.inclusiveBetween(0, 2, 2, \"Error\");\n+        try {\n+            Validate.inclusiveBetween(0, 5, 6, \"Error\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            assertEquals(\"Error\", e.getMessage());\n+        }\n+    }\n+    \n+    public void testExclusiveBetween()\n+    {\n+        Validate.exclusiveBetween(\"a\", \"c\", \"b\");\n+        Validate.exclusiveBetween(0, 2, 1);\n+        try {\n+            Validate.exclusiveBetween(0, 5, 6);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            assertEquals(\"The value 6 is not in the specified exclusive range of 0 to 5\", e.getMessage());\n+        }\n+        try {\n+            Validate.exclusiveBetween(0, 5, 5);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            assertEquals(\"The value 5 is not in the specified exclusive range of 0 to 5\", e.getMessage());\n+        }\n+    }\n+    \n+    public void testExclusiveBetween_withMessage()\n+    {\n+        Validate.exclusiveBetween(\"a\", \"c\", \"b\", \"Error\");\n+        Validate.exclusiveBetween(0, 2, 1, \"Error\");\n+        try {\n+            Validate.exclusiveBetween(0, 5, 6, \"Error\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            assertEquals(\"Error\", e.getMessage());\n+        }\n+        try {\n+            Validate.exclusiveBetween(0, 5, 5, \"Error\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            assertEquals(\"Error\", e.getMessage());\n+        }\n+    }\n }", "timestamp": 1265521210, "metainfo": ""}