{"sha": "0efd8fd3c64c7231922af6757c3078de693558c7", "log": "Fix some raw types  ", "commit": "\n--- a/src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java\n     private PublicChild publicChild;\n     private PubliclyShadowedChild publiclyShadowedChild;\n     private PrivatelyShadowedChild privatelyShadowedChild;\n-    private Class parentClass = PublicChild.class.getSuperclass();\n+    private Class<?> parentClass = PublicChild.class.getSuperclass();\n \n     /**\n      * Run the test cases as a suite.\n--- a/src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java\n     }\n \n     private TestBean testBean;\n-    private Map classCache;\n+    private Map<Class<?>, Class<?>[]> classCache;\n \n     public MethodUtilsTest(String name) {\n         super(name);\n-        classCache = new HashMap();\n+        classCache = new HashMap<Class<?>, Class<?>[]>();\n     }\n \n     /**\n \n     public void testGetAccessibleInterfaceMethod() throws Exception {\n \n-        Class[][] p = { ArrayUtils.EMPTY_CLASS_ARRAY, null };\n+        Class<?>[][] p = { ArrayUtils.EMPTY_CLASS_ARRAY, null };\n         for (int i = 0; i < p.length; i++) {\n             Method method = TestMutable.class.getMethod(\"getValue\", p[i]);\n             Method accessibleMethod = MethodUtils.getAccessibleMethod(method);\n \n     public void testGetAccessibleInterfaceMethodFromDescription()\n             throws Exception {\n-        Class[][] p = { ArrayUtils.EMPTY_CLASS_ARRAY, null };\n+        Class<?>[][] p = { ArrayUtils.EMPTY_CLASS_ARRAY, null };\n         for (int i = 0; i < p.length; i++) {\n             Method accessibleMethod = MethodUtils.getAccessibleMethod(\n                     TestMutable.class, \"getValue\", p[i]);\n                 singletonArray(Double.TYPE), singletonArray(Double.TYPE));\n     }\n \n-    private void expectMatchingAccessibleMethodParameterTypes(Class cls,\n-            String methodName, Class[] requestTypes, Class[] actualTypes) {\n+    private void expectMatchingAccessibleMethodParameterTypes(Class<?> cls,\n+            String methodName, Class<?>[] requestTypes, Class<?>[] actualTypes) {\n         Method m = MethodUtils.getMatchingAccessibleMethod(cls, methodName,\n                 requestTypes);\n         assertTrue(toString(m.getParameterTypes()) + \" not equals \"\n                 .getParameterTypes()));\n     }\n \n-    private String toString(Class[] c) {\n+    private String toString(Class<?>[] c) {\n         return Arrays.asList(c).toString();\n     }\n \n-    private Class[] singletonArray(Class c) {\n-        Class[] result = (Class[]) classCache.get(c);\n+    private Class<?>[] singletonArray(Class<?> c) {\n+        Class<?>[] result = classCache.get(c);\n         if (result == null) {\n             result = new Class[] { c };\n             classCache.put(c, result);", "timestamp": 1256468877, "metainfo": ""}