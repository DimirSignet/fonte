{"sha": "808cfa79b4cdf250313ef25baed207337cc5bde9", "log": "Fixed small bug and created test case   ", "commit": "\n--- a/src/java/org/apache/commons/lang/reflect/ReflectionUtils.java\n+++ b/src/java/org/apache/commons/lang/reflect/ReflectionUtils.java\n  * reflection.\n  *\n  * @author <a href=\"mailto:scolebourne@apache.org\">Stephen Colebourne</a>\n- * @version $Id: ReflectionUtils.java,v 1.1 2002/10/24 23:12:54 scolebourne Exp $\n+ * @version $Id: ReflectionUtils.java,v 1.2 2002/11/18 23:01:36 rdonkin Exp $\n  */\n public class ReflectionUtils {\n     \n \n     /**\n      * Tests whether the specified field or method is \n-     * <code>static</code>.\n+     * <code>final</code>.\n      * \n      * @param member  the member to test, must not be null\n      * @return true if the member is final\n         if (member == null) {\n             throw new IllegalArgumentException(\"The member must not be null\");\n         }    \n-        return Modifier.isStatic(member.getModifiers());\n+        return Modifier.isPublic(member.getModifiers());\n     }\n \n     /**\n--- a/src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java\n+++ b/src/test/org/apache/commons/lang/reflect/ReflectTestSuite.java\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a> (of original copied from)\n  * @author Robert Burrell Donkin\n- * @version $Id: ReflectTestSuite.java,v 1.1 2002/11/14 18:53:36 rdonkin Exp $\n+ * @version $Id: ReflectTestSuite.java,v 1.2 2002/11/18 23:01:36 rdonkin Exp $\n  */\n public class ReflectTestSuite extends TestCase {\n     \n     public static Test suite() {\n         TestSuite suite = new TestSuite();\n         suite.addTest(MethodUtilsTestCase.suite());\n+        suite.addTest(ReflectionUtilsTestCase.suite());\n         return suite;\n     }\n+\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java\n+/*\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+\n+package org.apache.commons.lang.reflect;\n+\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Member;\n+import java.lang.reflect.Modifier;\n+\n+import org.apache.commons.lang.reflect.priv.PrivateBeanFactory;\n+import org.apache.commons.lang.reflect.priv.PublicSubBean;\n+\n+import junit.framework.TestCase;\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+\n+/**\n+ * <p> Test case for <code>ReflectionUtils</code> </p>\n+ *\n+ */\n+public class ReflectionUtilsTestCase extends TestCase {\n+\n+    // ---------------------------------------------------- Instance Variables\n+\n+    // ---------------------------------------------------------- Constructors\n+\n+    /**\n+     * Construct a new instance of this test case.\n+     *\n+     * @param name Name of the test case\n+     */\n+    public ReflectionUtilsTestCase(String name) {\n+        super(name);\n+    }\n+\n+\n+    // -------------------------------------------------- Overall Test Methods\n+\n+\n+    /**\n+     * Set up instance variables required by this test case.\n+     */\n+    public void setUp() {\n+        // any set up goes here\n+    }\n+\n+\n+    /**\n+     * Return the tests included in this test suite.\n+     */\n+    public static Test suite() {\n+        return (new TestSuite(ReflectionUtilsTestCase.class));\n+    }\n+\n+    /**\n+     * Tear down instance variables required by this test case.\n+     */\n+    public void tearDown() {\n+        // any tear down goes here\n+    }\n+\n+\n+    // ------------------------------------------------ Individual Test Methods\n+    \n+    \n+    public void testScopeUtils() throws Exception {\n+        ScopeBean bean = new ScopeBean();\n+        Member field = bean.getPrivateField();        \n+        assertEquals(\"Private scope (field) [isFinal]\", false ,ReflectionUtils.isFinal(field));\n+        assertEquals(\"Private scope (field) [isPackageScope]\", false, ReflectionUtils.isPackageScope(field));\n+        assertEquals(\"Private scope (field) [isPrivateScope]\", true, ReflectionUtils.isPrivateScope(field));\n+        assertEquals(\"Private scope (field) [isProtectedScope]\", false, ReflectionUtils.isProtectedScope(field));\n+        assertEquals(\"Private scope (field) [isPublicScope]\", false, ReflectionUtils.isPublicScope(field));\n+        assertEquals(\"Private scope (field) [isStatic]\", false, ReflectionUtils.isStatic(field));\n+        \n+        Member method = bean.getPrivateMethod();\n+        assertEquals(\"Private scope (method) [isFinal]\", false, ReflectionUtils.isFinal(method));\n+        assertEquals(\"Private scope (method) [isPackageScope]\", false, ReflectionUtils.isPackageScope(method));\n+        assertEquals(\"Private scope (method) [isPrivateScope]\", true, ReflectionUtils.isPrivateScope(method));\n+        assertEquals(\"Private scope (method) [isProtectedScope]\", false, ReflectionUtils.isProtectedScope(method));\n+        assertEquals(\"Private scope (method) [isPublicScope]\", false, ReflectionUtils.isPublicScope(method));\n+        assertEquals(\"Private scope (method) [isStatic]\", false, ReflectionUtils.isStatic(method));\n+        \n+        field = bean.getPackageField();        \n+        assertEquals(\"Package scope (field) [isFinal]\", false, ReflectionUtils.isFinal(field));\n+        assertEquals(\"Package scope (field) [isPackageScope]\", true, ReflectionUtils.isPackageScope(field));\n+        assertEquals(\"Package scope (field) [isPrivateScope]\", false, ReflectionUtils.isPrivateScope(field));\n+        assertEquals(\"Package scope (field) [isProtectedScope]\", false, ReflectionUtils.isProtectedScope(field));\n+        assertEquals(\"Package scope (field) [isPublicScope]\", false, ReflectionUtils.isPublicScope(field));\n+        assertEquals(\"Package scope (field) [isStatic]\", false, ReflectionUtils.isStatic(field));\n+        \n+        method = bean.getPackageMethod();\n+        assertEquals(\"Package scope (method) [isFinal]\", false, ReflectionUtils.isFinal(method));\n+        assertEquals(\"Package scope (method) [isPackageScope]\", true, ReflectionUtils.isPackageScope(method));\n+        assertEquals(\"Package scope (method) [isPrivateScope]\", false, ReflectionUtils.isPrivateScope(method));\n+        assertEquals(\"Package scope (method) [isProtectedScope]\", false, ReflectionUtils.isProtectedScope(method));\n+        assertEquals(\"Package scope (method) [isPublicScope]\", false, ReflectionUtils.isPublicScope(method));\n+        assertEquals(\"Packages scope (method) [isStatic]\", false, ReflectionUtils.isStatic(method));\n+        \n+        field = bean.getPublicField();        \n+        assertEquals(\"Public scope (field) [isFinal]\", false, ReflectionUtils.isFinal(field));\n+        assertEquals(\"Public scope (field) [isPackageScope]\", false, ReflectionUtils.isPackageScope(field));\n+        assertEquals(\"Public scope (field) [isPrivateScope]\", false, ReflectionUtils.isPrivateScope(field));\n+        assertEquals(\"Public scope (field) [isProtectedScope]\", false, ReflectionUtils.isProtectedScope(field));\n+        assertEquals(\"Public scope (field) [isPublicScope]\", true, ReflectionUtils.isPublicScope(field));\n+        assertEquals(\"Public scope (field) [isStatic]\", false, ReflectionUtils.isStatic(field));\n+        \n+        method = bean.getPublicMethod();\n+        assertEquals(\"Public scope (method) [isFinal]\", false, ReflectionUtils.isFinal(method));\n+        assertEquals(\"Public scope (method) [isPackageScope]\", false, ReflectionUtils.isPackageScope(method));\n+        assertEquals(\"Public scope (method) [isPrivateScope]\", false, ReflectionUtils.isPrivateScope(method));\n+        assertEquals(\"Public scope (method) [isProtectedScope]\", false, ReflectionUtils.isProtectedScope(method));\n+        assertEquals(\"Public scope (method) [isPublicScope]\", true, ReflectionUtils.isPublicScope(method));\n+        assertEquals(\"Public scope (method) [isStatic]\", false, ReflectionUtils.isStatic(method));\n+        \n+        field = bean.getFinalField();        \n+        assertEquals(\"Final scope (field) [isFinal]\", true, ReflectionUtils.isFinal(field));\n+        assertEquals(\"Final scope (field) [isPackageScope]\", false, ReflectionUtils.isPackageScope(field));\n+        assertEquals(\"Final scope (field) [isPrivateScope]\", false, ReflectionUtils.isPrivateScope(field));\n+        assertEquals(\"Final scope (field) [isProtectedScope]\", false, ReflectionUtils.isProtectedScope(field));\n+        assertEquals(\"Final scope (field) [isPublicScope]\", true, ReflectionUtils.isPublicScope(field));\n+        assertEquals(\"Final scope (field) [isStatic]\", false, ReflectionUtils.isStatic(field));\n+        \n+        method = bean.getFinalMethod();\n+        assertEquals(\"Final scope (method) [isFinal]\", true, ReflectionUtils.isFinal(method));\n+        assertEquals(\"Final scope (method) [isPackageScope]\", false, ReflectionUtils.isPackageScope(method));\n+        assertEquals(\"Final scope (method) [isPrivateScope]\", false, ReflectionUtils.isPrivateScope(method));\n+        assertEquals(\"Final scope (method) [isProtectedScope]\", false, ReflectionUtils.isProtectedScope(method));\n+        assertEquals(\"Final scope (method) [isPublicScope]\", true, ReflectionUtils.isPublicScope(method));\n+        assertEquals(\"Final scope (method) [isStatic]\", false, ReflectionUtils.isStatic(method));\n+        \n+        field = bean.getStaticField();        \n+        assertEquals(\"Static scope (field) [isFinal]\", false, ReflectionUtils.isFinal(field));\n+        assertEquals(\"Static scope (field) [isPackageScope]\", false, ReflectionUtils.isPackageScope(field));\n+        assertEquals(\"Static scope (field) [isPrivateScope]\", false, ReflectionUtils.isPrivateScope(field));\n+        assertEquals(\"Static scope (field) [isProtectedScope]\", false, ReflectionUtils.isProtectedScope(field));\n+        assertEquals(\"Static scope (field) [isPublicScope]\", true, ReflectionUtils.isPublicScope(field));\n+        assertEquals(\"Static scope (field) [isStatic]\", true, ReflectionUtils.isStatic(field));\n+        \n+        method = bean.getStaticMethod();\n+        assertEquals(\"Static scope (method) [isFinal]\", false, ReflectionUtils.isFinal(method));\n+        assertEquals(\"Static scope (method) [isPackageScope]\", false, ReflectionUtils.isPackageScope(method));\n+        assertEquals(\"Static scope (method) [isPrivateScope]\", false, ReflectionUtils.isPrivateScope(method));\n+        assertEquals(\"Static scope (method) [isProtectedScope]\", false, ReflectionUtils.isProtectedScope(method));\n+        assertEquals(\"Static scope (method) [isPublicScope]\", true, ReflectionUtils.isPublicScope(method));\n+        assertEquals(\"Static scope (method) [isStatic]\", true, ReflectionUtils.isStatic(method));\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/reflect/ScopeBean.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.reflect;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Field;\n+\n+/**\n+ * Bean with examples of different scoped fields and methods.\n+ */\n+public class ScopeBean {\n+\n+    private int privateField;\n+    int packageField;\n+    protected int protectedField;\n+    public int publicField;\n+    public static int staticField;\n+    public final int finalField = 42;\n+    \n+    public ScopeBean() {}\n+    \n+    private void privateMethod() {}\n+    protected void protectedMethod() {}\n+    void packageMethod() {}\n+    public void publicMethod() {}\n+    public static void staticMethod() {}\n+    public final void finalMethod() {}\n+    \n+    public Field getPrivateField() throws NoSuchFieldException {\n+        return ScopeBean.class.getDeclaredField(\"privateField\");\n+    }\n+    \n+    public Field getProtectedField() throws NoSuchFieldException {\n+        return ScopeBean.class.getDeclaredField(\"protectedField\");\n+    }    \n+    \n+    public Field getPackageField() throws NoSuchFieldException {\n+        return ScopeBean.class.getDeclaredField(\"packageField\");\n+    }    \n+\n+    public Field getPublicField() throws NoSuchFieldException {\n+        return ScopeBean.class.getDeclaredField(\"publicField\");\n+    }    \n+\n+    public Field getStaticField() throws NoSuchFieldException {\n+        return ScopeBean.class.getDeclaredField(\"staticField\");\n+    }    \n+\n+    public Field getFinalField() throws NoSuchFieldException {\n+        return ScopeBean.class.getDeclaredField(\"finalField\");\n+    }   \n+    \n+    public Method getPrivateMethod() throws NoSuchMethodException {\n+        return ScopeBean.class.getDeclaredMethod(\"privateMethod\", null);\n+    }\n+    \n+    public Method getProtectedMethod() throws NoSuchMethodException {\n+        return ScopeBean.class.getDeclaredMethod(\"protectedMethod\", null);\n+    }    \n+    \n+    public Method getPackageMethod() throws NoSuchMethodException {\n+        return ScopeBean.class.getDeclaredMethod(\"packageMethod\", null);\n+    }    \n+\n+    public Method getPublicMethod() throws NoSuchMethodException {\n+        return ScopeBean.class.getDeclaredMethod(\"publicMethod\", null);\n+    }    \n+\n+    public Method getStaticMethod() throws NoSuchMethodException {\n+        return ScopeBean.class.getDeclaredMethod(\"staticMethod\", null);\n+    }    \n+\n+    public Method getFinalMethod() throws NoSuchMethodException {\n+        return ScopeBean.class.getDeclaredMethod(\"finalMethod\", null);\n+    }  \n+}", "timestamp": 1037660496, "metainfo": ""}