{"sha": "58fc7702c6d94c864c9580326da53982abdc1576", "log": "Added isEmpty for Object and primitives arrays. RFE in bugzilla (#26243).   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang/ArrayUtils.java\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2002-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * @author Pete Gieser\n  * @author Gary Gregory\n  * @author <a href=\"mailto:equinus100@hotmail.com\">Ashwin S</a>\n+ * @author Fredrik Westermarck\n  * @since 2.0\n- * @version $Id: ArrayUtils.java,v 1.31 2004/01/08 17:50:40 fredrik Exp $\n+ * @version $Id: ArrayUtils.java,v 1.32 2004/01/19 21:50:06 fredrik Exp $\n  */\n public class ArrayUtils {\n \n         return result;\n     }\n \n+    // ----------------------------------------------------------------------\n+    /**\n+     * <p>Checks if an array of Objects is empty or <code>null</code>.</p>\n+     *\n+     * @param array  the array to test\n+     * @return <code>true</code> if the array is empty or <code>null</code>\n+     * @since 2.1\n+     */\n+    public static boolean isEmpty(final Object[] array) {\n+        if (array == null || array.length == 0) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * <p>Checks if an array of primitive longs is empty or <code>null</code>.</p>\n+     *\n+     * @param array  the array to test\n+     * @return <code>true</code> if the array is empty or <code>null</code>\n+     * @since 2.1\n+     */\n+    public static boolean isEmpty(final long[] array) {\n+        if (array == null || array.length == 0) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * <p>Checks if an array of primitive ints is empty or <code>null</code>.</p>\n+     *\n+     * @param array  the array to test\n+     * @return <code>true</code> if the array is empty or <code>null</code>\n+     * @since 2.1\n+     */\n+    public static boolean isEmpty(final int[] array) {\n+        if (array == null || array.length == 0) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * <p>Checks if an array of primitive shorts is empty or <code>null</code>.</p>\n+     *\n+     * @param array  the array to test\n+     * @return <code>true</code> if the array is empty or <code>null</code>\n+     * @since 2.1\n+     */\n+    public static boolean isEmpty(final short[] array) {\n+        if (array == null || array.length == 0) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * <p>Checks if an array of primitive chars is empty or <code>null</code>.</p>\n+     *\n+     * @param array  the array to test\n+     * @return <code>true</code> if the array is empty or <code>null</code>\n+     * @since 2.1\n+     */\n+    public static boolean isEmpty(final char[] array) {\n+        if (array == null || array.length == 0) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * <p>Checks if an array of primitive bytes is empty or <code>null</code>.</p>\n+     *\n+     * @param array  the array to test\n+     * @return <code>true</code> if the array is empty or <code>null</code>\n+     * @since 2.1\n+     */\n+    public static boolean isEmpty(final byte[] array) {\n+        if (array == null || array.length == 0) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * <p>Checks if an array of primitive doubles is empty or <code>null</code>.</p>\n+     *\n+     * @param array  the array to test\n+     * @return <code>true</code> if the array is empty or <code>null</code>\n+     * @since 2.1\n+     */\n+    public static boolean isEmpty(final double[] array) {\n+        if (array == null || array.length == 0) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * <p>Checks if an array of primitive floats is empty or <code>null</code>.</p>\n+     *\n+     * @param array  the array to test\n+     * @return <code>true</code> if the array is empty or <code>null</code>\n+     * @since 2.1\n+     */\n+    public static boolean isEmpty(final float[] array) {\n+        if (array == null || array.length == 0) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * <p>Checks if an array of primitive booleans is empty or <code>null</code>.</p>\n+     *\n+     * @param array  the array to test\n+     * @return <code>true</code> if the array is empty or <code>null</code>\n+     * @since 2.1\n+     */\n+    public static boolean isEmpty(final boolean[] array) {\n+        if (array == null || array.length == 0) {\n+            return true;\n+        }\n+        return false;\n+    }\n }\n--- a/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2002-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * @author Matthew Hawthorne\n  * @author Tim O'Brien\n  * @author <a href=\"mailto:equinus100@hotmail.com\">Ashwin S</a>\n- * @version $Id: ArrayUtilsTest.java,v 1.19 2004/01/08 17:54:28 fredrik Exp $\n+ * @author Fredrik Westermarck\n+ * @version $Id: ArrayUtilsTest.java,v 1.20 2004/01/19 21:50:06 fredrik Exp $\n  */\n public class ArrayUtilsTest extends TestCase {\n \n         assertEquals(true, ArrayUtils.hashCode(array3) == ArrayUtils.hashCode(array3));\n         assertEquals(true, ArrayUtils.hashCode(array3) == ArrayUtils.hashCode(array4));\n     }\n-    \n+\n     //-----------------------------------------------------------------------\n     public void testIsEquals() {\n         long[][] array1 = new long[][] {{2,5}, {4,5}};\n                 new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 })));\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test for {@link ArrayUtils#isEmpty(java.lang.Object[])}.\n+     */\n+    public void testIsEmptyObject() {\n+        Object[] emptyArray = new Object[] {};\n+        Object[] notEmptyArray = new Object[] { new String(\"Value\") };\n+        assertEquals(true, ArrayUtils.isEmpty(emptyArray));\n+        assertEquals(false, ArrayUtils.isEmpty(notEmptyArray));\n+    }\n+\n+    /**\n+     * Tests for {@link ArrayUtils#isEmpty(long[])},\n+     * {@link ArrayUtils#isEmpty(int[])},\n+     * {@link ArrayUtils#isEmpty(short[])},\n+     * {@link ArrayUtils#isEmpty(char[])},\n+     * {@link ArrayUtils#isEmpty(byte[])},\n+     * {@link ArrayUtils#isEmpty(double[])},\n+     * {@link ArrayUtils#isEmpty(float[])} and\n+     * {@link ArrayUtils#isEmpty(boolean[])}.\n+     */\n+    public void testIsEmptyPrimitives() {\n+        long[] emptyLongArray = new long[] {};\n+        long[] notEmptyLongArray = new long[] { 1L };\n+        assertEquals(true, ArrayUtils.isEmpty(emptyLongArray));\n+        assertEquals(false, ArrayUtils.isEmpty(notEmptyLongArray));\n+\n+        int[] emptyIntArray = new int[] {};\n+        int[] notEmptyIntArray = new int[] { 1 };\n+        assertEquals(true, ArrayUtils.isEmpty(emptyIntArray));\n+        assertEquals(false, ArrayUtils.isEmpty(notEmptyIntArray));\n+\n+        short[] emptyShortArray = new short[] {};\n+        short[] notEmptyShortArray = new short[] { 1 };\n+        assertEquals(true, ArrayUtils.isEmpty(emptyShortArray));\n+        assertEquals(false, ArrayUtils.isEmpty(notEmptyShortArray));\n+\n+        char[] emptyCharArray = new char[] {};\n+        char[] notEmptyCharArray = new char[] { 1 };\n+        assertEquals(true, ArrayUtils.isEmpty(emptyCharArray));\n+        assertEquals(false, ArrayUtils.isEmpty(notEmptyCharArray));\n+\n+        byte[] emptyByteArray = new byte[] {};\n+        byte[] notEmptyByteArray = new byte[] { 1 };\n+        assertEquals(true, ArrayUtils.isEmpty(emptyByteArray));\n+        assertEquals(false, ArrayUtils.isEmpty(notEmptyByteArray));\n+\n+        double[] emptyDoubleArray = new double[] {};\n+        double[] notEmptyDoubleArray = new double[] { 1.0 };\n+        assertEquals(true, ArrayUtils.isEmpty(emptyDoubleArray));\n+        assertEquals(false, ArrayUtils.isEmpty(notEmptyDoubleArray));\n+\n+        float[] emptyFloatArray = new float[] {};\n+        float[] notEmptyFloatArray = new float[] { 1.0F };\n+        assertEquals(true, ArrayUtils.isEmpty(emptyFloatArray));\n+        assertEquals(false, ArrayUtils.isEmpty(notEmptyFloatArray));\n+\n+        boolean[] emptyBooleanArray = new boolean[] {};\n+        boolean[] notEmptyBooleanArray = new boolean[] { true };\n+        assertEquals(true, ArrayUtils.isEmpty(emptyBooleanArray));\n+        assertEquals(false, ArrayUtils.isEmpty(notEmptyBooleanArray));\n+    }\n }", "timestamp": 1074549006, "metainfo": ""}