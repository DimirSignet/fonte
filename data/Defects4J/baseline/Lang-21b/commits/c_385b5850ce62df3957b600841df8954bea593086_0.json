{"sha": "385b5850ce62df3957b600841df8954bea593086", "log": "removed deprecated methods getLength() and indexOfThrowable(int, Class)   ", "commit": "\n--- a/src/java/org/apache/commons/lang/exception/Nestable.java\n+++ b/src/java/org/apache/commons/lang/exception/Nestable.java\n  * @author <a href=\"mailto:dlr@collab.net\">Daniel Rall</a>\n  * @author <a href=\"mailto:knielsen@apache.org\">Kasper Nielsen</a>\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n- * @version $Id: Nestable.java,v 1.2 2002/07/26 20:30:10 stevencaswell Exp $\n+ * @version $Id: Nestable.java,v 1.3 2002/08/25 13:20:59 stevencaswell Exp $\n  */\n public interface Nestable\n {\n      */\n     public Throwable getCause();\n \n-    /**\n-     * Returns the number of nested <code>Throwable</code>s represented by\n-     * this <code>Nestable</code>, including this <code>Nestable</code>.\n-     * @deprecated replaced by {@link #getThrowableCount()}\n-     */\n-    public int getLength();\n-    \n     /**\n      * Returns the error message of this and any nested\n      * <code>Throwable</code>.\n     public int indexOfThrowable(Class type, int fromIndex);\n     \n     /**\n-     * Returns the index, numbered from 0, of the first <code>Throwable</code>\n-     * that matches the specified type in the chain of <code>Throwable</code>s\n-     * with an index greater than or equal to the specified position, or -1 if\n-     * the type is not found. If <code>pos</code> is negative, the effect is the\n-     * same as if it were 0. If <code>pos</code> is greater than or equal to the\n-     * length of the chain, the effect is the same as if it were the index of\n-     * the last element in the chain.\n-     *\n-     * @param pos index, numbered from 0, of the starting position in the chain\n-     * to be searched\n-     * @param type <code>Class</code> to be found\n-     * \n-     * @return index of the first occurrence of the type in the chain, or -1 if\n-     * the type is not found\n-     * @deprecated replaced by {@link #indexOfThrowable(Class, int)}\n-     */\n-    public int indexOfThrowable(int pos, Class type);\n-    \n-    /**\n      * Prints the stack trace of this exception to the specified print\n      * writer.  Includes inforamation from the exception--if\n      * any--which caused this exception.\n--- a/src/java/org/apache/commons/lang/exception/NestableException.java\n+++ b/src/java/org/apache/commons/lang/exception/NestableException.java\n  * @author <a href=\"mailto:dlr@collab.net\">Daniel Rall</a>\n  * @author <a href=\"mailto:knielsen@apache.org\">Kasper Nielsen</a>\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n- * @version $Id: NestableException.java,v 1.2 2002/07/26 20:30:10 stevencaswell Exp $\n+ * @version $Id: NestableException.java,v 1.3 2002/08/25 13:20:59 stevencaswell Exp $\n  */\n public class NestableException extends Exception implements Nestable\n {\n         return cause;\n     }\n \n-    /**\n-     * @deprecated replaced by {@link #getThrowableCount()}\n-     */\n-    public int getLength()\n-    {\n-        return delegate.getThrowableCount();\n-    }\n-    \n     public String getMessage()\n     {\n         StringBuffer msg = new StringBuffer();\n         return delegate.indexOfThrowable(type, fromIndex);\n     }\n \n-    /**\n-     * @deprecated replaced by {@link #indexOfThrowable(Class, int)}\n-     */\n-    public int indexOfThrowable(int pos, Class type)\n-    {\n-        if(pos < 0)\n-        {\n-            pos = 0;\n-        }\n-        else if(pos >= this.getThrowableCount())\n-        {\n-            pos = this.getThrowableCount() - 1;\n-        }\n-        return delegate.indexOfThrowable(type, pos);\n-    }\n-    \n     public void printStackTrace()\n     {\n         delegate.printStackTrace();\n--- a/src/java/org/apache/commons/lang/exception/NestableRuntimeException.java\n+++ b/src/java/org/apache/commons/lang/exception/NestableRuntimeException.java\n  * @author <a href=\"mailto:dlr@collab.net\">Daniel Rall</a>\n  * @author <a href=\"mailto:knielsen@apache.org\">Kasper Nielsen</a>\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n- * @version $Id: NestableRuntimeException.java,v 1.2 2002/07/26 20:30:10 stevencaswell Exp $\n+ * @version $Id: NestableRuntimeException.java,v 1.3 2002/08/25 13:20:59 stevencaswell Exp $\n  */\n public class NestableRuntimeException extends RuntimeException\n     implements Nestable\n         return cause;\n     }\n \n-    /**\n-     * @deprecated replaced by {@link #getThrowableCount()}\n-     */\n-    public int getLength()\n-    {\n-        return delegate.getThrowableCount();\n-    }\n-    \n     public String getMessage()\n     {\n         StringBuffer msg = new StringBuffer();\n         return delegate.indexOfThrowable(type, fromIndex);\n     }\n     \n-    /**\n-     * @deprecated replaced by {@link #indexOfThrowable(Class, int)}\n-     */\n-    public int indexOfThrowable(int pos, Class type)\n-    {\n-        if(pos < 0)\n-        {\n-            pos = 0;\n-        }\n-        else if(pos >= this.getThrowableCount())\n-        {\n-            pos = this.getThrowableCount() - 1;\n-        }\n-        return delegate.indexOfThrowable(type, pos);\n-    }\n-    \n     public void printStackTrace()\n     {\n         delegate.printStackTrace();", "timestamp": 1030281659, "metainfo": ""}