{"sha": "3fc8366239792213ddab1bc276a57b7bf47583d2", "log": "Applying third patch from LANG-381. Fixes the minimum(float[]) type methods to correctly return NaN when it is in the array, and adds an IEEE754rUtils class that obeys the IEEE 754r update in which NaN in min/max methods should be ignored unless all values are NaN.   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/math/IEEE754rUtils.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.math;\n+\n+/**\n+ * <p>Provides IEEE-754r variants of NumberUtils methods. </p>\n+ *\n+ * <p>See: <a href=\"http://en.wikipedia.org/wiki/IEEE_754r\">http://en.wikipedia.org/wiki/IEEE_754r</a></p>\n+ *\n+ * @since 2.4\n+ * @version $Id: IEEE754rUtils.java 491076 2006-12-29 18:48:37Z bayard $\n+ */\n+public class IEEE754rUtils {\n+    \n+     /**\n+     * <p>Returns the minimum value in an array.</p>\n+     * \n+     * @param array  an array, must not be null or empty\n+     * @return the minimum value in the array\n+     * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n+     * @throws IllegalArgumentException if <code>array</code> is empty\n+     */\n+    public static double min(double[] array) {\n+        // Validates input\n+        if (array == null) {\n+            throw new IllegalArgumentException(\"The Array must not be null\");\n+        } else if (array.length == 0) {\n+            throw new IllegalArgumentException(\"Array cannot be empty.\");\n+        }\n+    \n+        // Finds and returns min\n+        double min = array[0];\n+        for (int i = 1; i < array.length; i++) {\n+            min = min(array[i], min);\n+        }\n+    \n+        return min;\n+    }\n+\n+    /**\n+     * <p>Returns the minimum value in an array.</p>\n+     * \n+     * @param array  an array, must not be null or empty\n+     * @return the minimum value in the array\n+     * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n+     * @throws IllegalArgumentException if <code>array</code> is empty\n+     */\n+    public static float min(float[] array) {\n+        // Validates input\n+        if (array == null) {\n+            throw new IllegalArgumentException(\"The Array must not be null\");\n+        } else if (array.length == 0) {\n+            throw new IllegalArgumentException(\"Array cannot be empty.\");\n+        }\n+    \n+        // Finds and returns min\n+        float min = array[0];\n+        for (int i = 1; i < array.length; i++) {\n+            min = min(array[i], min);\n+        }\n+    \n+        return min;\n+    }\n+\n+    /**\n+     * <p>Gets the minimum of three <code>double</code> values.</p>\n+     * \n+     * <p>NaN is only returned if all numbers are NaN as per IEEE-754r. </p>\n+     * \n+     * @param a  value 1\n+     * @param b  value 2\n+     * @param c  value 3\n+     * @return  the smallest of the values\n+     */\n+    public static double min(double a, double b, double c) {\n+        return min(min(a, b), c);\n+    }\n+\n+    /**\n+     * <p>Gets the minimum of two <code>double</code> values.</p>\n+     * \n+     * <p>NaN is only returned if all numbers are NaN as per IEEE-754r. </p>\n+     * \n+     * @param a  value 1\n+     * @param b  value 2\n+     * @return  the smallest of the values\n+     */\n+    public static double min(double a, double b) {\n+        if(Double.isNaN(a)) {\n+            return b;\n+        } else\n+        if(Double.isNaN(b)) {\n+            return a;\n+        } else {\n+            return Math.min(a, b);\n+        }\n+    }\n+\n+    /**\n+     * <p>Gets the minimum of three <code>float</code> values.</p>\n+     * \n+     * <p>NaN is only returned if all numbers are NaN as per IEEE-754r. </p>\n+     *\n+     * @param a  value 1\n+     * @param b  value 2\n+     * @param c  value 3\n+     * @return  the smallest of the values\n+     */\n+    public static float min(float a, float b, float c) {\n+        return min(min(a, b), c);\n+    }\n+\n+    /**\n+     * <p>Gets the minimum of two <code>float</code> values.</p>\n+     * \n+     * <p>NaN is only returned if all numbers are NaN as per IEEE-754r. </p>\n+     *\n+     * @param a  value 1\n+     * @param b  value 2\n+     * @return  the smallest of the values\n+     */\n+    public static float min(float a, float b) {\n+        if(Float.isNaN(a)) {\n+            return b;\n+        } else\n+        if(Float.isNaN(b)) {\n+            return a;\n+        } else {\n+            return Math.min(a, b);\n+        }\n+    }\n+\n+    /**\n+     * <p>Returns the maximum value in an array.</p>\n+     * \n+     * @param array  an array, must not be null or empty\n+     * @return the minimum value in the array\n+     * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n+     * @throws IllegalArgumentException if <code>array</code> is empty\n+     */\n+    public static double max(double[] array) {\n+        // Validates input\n+        if (array== null) {\n+            throw new IllegalArgumentException(\"The Array must not be null\");\n+        } else if (array.length == 0) {\n+            throw new IllegalArgumentException(\"Array cannot be empty.\");\n+        }\n+    \n+        // Finds and returns max\n+        double max = array[0];\n+        for (int j = 1; j < array.length; j++) {\n+            max = max(array[j], max);\n+        }\n+    \n+        return max;\n+    }\n+\n+    /**\n+     * <p>Returns the maximum value in an array.</p>\n+     * \n+     * @param array  an array, must not be null or empty\n+     * @return the minimum value in the array\n+     * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n+     * @throws IllegalArgumentException if <code>array</code> is empty\n+     */\n+    public static float max(float[] array) {\n+        // Validates input\n+        if (array == null) {\n+            throw new IllegalArgumentException(\"The Array must not be null\");\n+        } else if (array.length == 0) {\n+            throw new IllegalArgumentException(\"Array cannot be empty.\");\n+        }\n+\n+        // Finds and returns max\n+        float max = array[0];\n+        for (int j = 1; j < array.length; j++) {\n+            max = max(array[j], max);\n+        }\n+\n+        return max;\n+    }\n+     \n+    /**\n+     * <p>Gets the maximum of three <code>double</code> values.</p>\n+     * \n+     * <p>NaN is only returned if all numbers are NaN as per IEEE-754r. </p>\n+     *\n+     * @param a  value 1\n+     * @param b  value 2\n+     * @param c  value 3\n+     * @return  the largest of the values\n+     */\n+    public static double max(double a, double b, double c) {\n+        return max(max(a, b), c);\n+    }\n+\n+    /**\n+     * <p>Gets the maximum of two <code>double</code> values.</p>\n+     * \n+     * <p>NaN is only returned if all numbers are NaN as per IEEE-754r. </p>\n+     *\n+     * @param a  value 1\n+     * @param b  value 2\n+     * @return  the largest of the values\n+     */\n+    public static double max(double a, double b) {\n+        if(Double.isNaN(a)) {\n+            return b;\n+        } else\n+        if(Double.isNaN(b)) {\n+            return a;\n+        } else {\n+            return Math.max(a, b);\n+        }\n+    }\n+\n+    /**\n+     * <p>Gets the maximum of three <code>float</code> values.</p>\n+     * \n+     * <p>NaN is only returned if all numbers are NaN as per IEEE-754r. </p>\n+     *\n+     * @param a  value 1\n+     * @param b  value 2\n+     * @param c  value 3\n+     * @return  the largest of the values\n+     */\n+    public static float max(float a, float b, float c) {\n+        return max(max(a, b), c);\n+    }\n+\n+    /**\n+     * <p>Gets the maximum of two <code>float</code> values.</p>\n+     * \n+     * <p>NaN is only returned if all numbers are NaN as per IEEE-754r. </p>\n+     *\n+     * @param a  value 1\n+     * @param b  value 2\n+     * @return  the largest of the values\n+     */\n+    public static float max(float a, float b) {\n+        if(Float.isNaN(a)) {\n+            return b;\n+        } else\n+        if(Float.isNaN(b)) {\n+            return a;\n+        } else {\n+            return Math.max(a, b);\n+        }\n+    }\n+\n+}\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n      * @return the minimum value in the array\n      * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is empty\n+     * @see IEEE754rUtils#min(double[]) IEEE754rUtils for a version of this method that handles NaN differently\n      */\n     public static double min(double[] array) {\n         // Validates input\n         // Finds and returns min\n         double min = array[0];\n         for (int i = 1; i < array.length; i++) {\n+            if (Double.isNaN(array[i])) {\n+                return Double.NaN;\n+            }\n             if (array[i] < min) {\n                 min = array[i];\n             }\n      * @return the minimum value in the array\n      * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is empty\n+     * @see IEEE754rUtils#min(float[]) IEEE754rUtils for a version of this method that handles NaN differently\n      */\n     public static float min(float[] array) {\n         // Validates input\n         // Finds and returns min\n         float min = array[0];\n         for (int i = 1; i < array.length; i++) {\n+            if (Float.isNaN(array[i])) {\n+                return Float.NaN;\n+            }\n             if (array[i] < min) {\n                 min = array[i];\n             }\n      * @return the minimum value in the array\n      * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is empty\n+     * @see IEEE754rUtils#max(double[]) IEEE754rUtils for a version of this method that handles NaN differently\n      */\n     public static double max(double[] array) {\n         // Validates input\n         // Finds and returns max\n         double max = array[0];\n         for (int j = 1; j < array.length; j++) {\n+            if (Double.isNaN(array[j])) {\n+                return Double.NaN;\n+            }\n             if (array[j] > max) {\n                 max = array[j];\n             }\n      * @return the minimum value in the array\n      * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is empty\n+     * @see IEEE754rUtils#max(float[]) IEEE754rUtils for a version of this method that handles NaN differently\n      */\n     public static float max(float[] array) {\n         // Validates input\n         // Finds and returns max\n         float max = array[0];\n         for (int j = 1; j < array.length; j++) {\n+            if (Float.isNaN(array[j])) {\n+                return Float.NaN;\n+            }\n             if (array[j] > max) {\n                 max = array[j];\n             }\n      * @param b  value 2\n      * @param c  value 3\n      * @return  the smallest of the values\n+     * @see IEEE754rUtils#min(double, double, double) for a version of this method that handles NaN differently\n      */\n     public static double min(double a, double b, double c) {\n         return Math.min(Math.min(a, b), c);\n      * @param b  value 2\n      * @param c  value 3\n      * @return  the smallest of the values\n+     * @see IEEE754rUtils#min(float, float, float) for a version of this method that handles NaN differently\n      */\n     public static float min(float a, float b, float c) {\n         return Math.min(Math.min(a, b), c);\n      * @param b  value 2\n      * @param c  value 3\n      * @return  the largest of the values\n+     * @see IEEE754rUtils#max(double, double, double) for a version of this method that handles NaN differently\n      */\n     public static double max(double a, double b, double c) {\n         return Math.max(Math.max(a, b), c);\n      * @param b  value 2\n      * @param c  value 3\n      * @return  the largest of the values\n+     * @see IEEE754rUtils#max(float, float, float) for a version of this method that handles NaN differently\n      */\n     public static float max(float a, float b, float c) {\n         return Math.max(Math.max(a, b), c);\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.math;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang.math.IEEE754rUtils}.\n+ *\n+ * @version $Id: IEEE754rUtilsTest.java 583665 2007-10-11 01:34:13Z ggregory $\n+ */\n+public class IEEE754rUtilsTest extends TestCase {\n+\n+    public void testLang381() {\n+        assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01);\n+        assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01);\n+        assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN)));\n+        assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01);\n+        assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01);\n+        assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN)));\n+\n+        double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN };\n+        assertEquals(42.0, IEEE754rUtils.max(a), 0.01);\n+        assertEquals(1.2, IEEE754rUtils.min(a), 0.01);\n+\n+        double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN };\n+        assertEquals(42.0, IEEE754rUtils.max(b), 0.01);\n+        assertEquals(1.2, IEEE754rUtils.min(b), 0.01);\n+\n+        float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN };\n+        assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01);\n+        assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01);\n+\n+        float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN };\n+        assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01);\n+        assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01);\n+    }\n+    \n+}\n--- a/src/test/org/apache/commons/lang/math/NumberUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/math/NumberUtilsTest.java\n         NumberUtils.createNumber(\"01l\");\n         NumberUtils.createNumber(\"1l\");\n     }\n+\n+    public void testLang381() {\n+        assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN)));\n+        assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN)));\n+        assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN)));\n+        assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN)));\n+\n+        double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN };\n+        assertTrue(Double.isNaN(NumberUtils.max(a)));\n+        assertTrue(Double.isNaN(NumberUtils.min(a)));\n+\n+        double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN };\n+        assertTrue(Double.isNaN(NumberUtils.max(b)));\n+        assertTrue(Double.isNaN(NumberUtils.min(b)));\n+\n+        float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN };\n+        assertTrue(Float.isNaN(NumberUtils.max(aF)));\n+\n+        float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN };\n+        assertTrue(Float.isNaN(NumberUtils.max(bF)));\n+    }\n     \n }", "timestamp": 1199663939, "metainfo": ""}