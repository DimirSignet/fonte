{"sha": "a95e76eefb91bdd9cf1c22734874a3d3c95ed327", "log": "Fixing LANG-538 - you need to call getTime() on a calendar sometimes to get it in the right state, otherwise the timezone gets out of whack.   ", "commit": "\n--- a/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n      */\n     public StringBuffer format(Calendar calendar, StringBuffer buf) {\n         if (mTimeZoneForced) {\n+            calendar.getTime(); /// LANG-538\n             calendar = (Calendar) calendar.clone();\n             calendar.setTimeZone(mTimeZone);\n         }\n--- a/src/test/org/apache/commons/lang3/time/FastDateFormatTest.java\n+++ b/src/test/org/apache/commons/lang3/time/FastDateFormatTest.java\n         format = (FastDateFormat) SerializationUtils.deserialize( SerializationUtils.serialize( format ) );\n         assertEquals(output, format.format(cal));\n     }\n+\n+    public void testLang538() {\n+        final String dateTime = \"2009-10-16T16:42:16.000Z\";\n+\n+        // more commonly constructed with: cal = new GregorianCalendar(2009, 9, 16, 8, 42, 16)\n+        // for the unit test to work in any time zone, constructing with GMT-8 rather than default locale time zone\n+        GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone(\"GMT-8\"));\n+        cal.clear();\n+        cal.set(2009, 9, 16, 8, 42, 16);\n+\n+        FastDateFormat format = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", TimeZone.getTimeZone(\"GMT\"));\n+        assertEquals(\"dateTime\", dateTime, format.format(cal));\n+    }\n }", "timestamp": 1261029868, "metainfo": ""}