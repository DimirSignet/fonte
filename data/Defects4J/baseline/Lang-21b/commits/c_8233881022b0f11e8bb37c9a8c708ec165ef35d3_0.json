{"sha": "8233881022b0f11e8bb37c9a8c708ec165ef35d3", "log": "Redo null/empty string checking for performance   ", "commit": "\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n  * @author Matthew Hawthorne\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 2.0\n- * @version $Id: NumberUtils.java,v 1.7 2003/07/26 19:12:03 ggregory Exp $\n+ * @version $Id: NumberUtils.java,v 1.8 2003/07/28 21:37:32 scolebourne Exp $\n  */\n public class NumberUtils {\n     \n      * @throws NumberFormatException if the value cannot be converted\n      */\n     public static Number createNumber(String str) throws NumberFormatException {\n-        if (!validateNumber(str)) {\n+        if (str == null) {\n             return null;\n         }\n+        if (StringUtils.isBlank(str)) {\n+            throw new NumberFormatException(\"A blank string is not a valid number\");\n+        }  \n         if (str.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear \n      * @throws NumberFormatException if the value cannot be converted\n      */\n     public static Float createFloat(String str) {\n-        if (!validateNumber(str)) {\n+        if (str == null) {\n             return null;\n         }\n         return Float.valueOf(str);\n      * @throws NumberFormatException if the value cannot be converted\n      */\n     public static Double createDouble(String str) {\n-        if (!validateNumber(str)) {\n+        if (str == null) {\n             return null;\n         }\n         return Double.valueOf(str);\n      * @throws NumberFormatException if the value cannot be converted\n      */\n     public static Integer createInteger(String str) {\n+        if (str == null) {\n+            return null;\n+        }\n         // decode() handles 0xAABD and 0777 (hex and octal) as well.\n-        if (!validateNumber(str)) {\n-            return null;\n-        }\n         return Integer.decode(str);\n     }\n \n      * @throws NumberFormatException if the value cannot be converted\n      */\n     public static Long createLong(String str) {\n-        if (!validateNumber(str)) {\n+        if (str == null) {\n             return null;\n         }\n         return Long.valueOf(str);\n      * @throws NumberFormatException if the value cannot be converted\n      */\n     public static BigInteger createBigInteger(String str) {\n-        if (!validateNumber(str)) {\n+        if (str == null) {\n             return null;\n         }\n         return new BigInteger(str);\n      * @throws NumberFormatException if the value cannot be converted\n      */\n     public static BigDecimal createBigDecimal(String str) {\n-        if (!validateNumber(str)) {\n+        if (str == null) {\n             return null;\n         }\n+        // handle JDK1.3.1 bug where \"\" throws IndexOutOfBoundsException\n+        if (StringUtils.isBlank(str)) {\n+            throw new NumberFormatException(\"A blank string is not a valid number\");\n+        }  \n         return new BigDecimal(str);\n     }\n \n-    /**\n-     * Checks the validitiy of a <code>String</code> for conversion it to a number.\n-     * <ol>\n-     * <li>If <code>str</code> is <code>null</code>, return <code>false</code>;</li>\n-     * <li>If <code>str</code> is <i>blank</i>, throw a <code>NumberFormatException</code>;</li>\n-     * <li>Otherewise return <code>true</code>.</li>\n-     * </ol>\n-     *  \n-     * @param str The <code>String</code> to check.\n-     * @return Whether or not the argument is suitable for conversion.\n-     */\n-    protected static boolean validateNumber(String str) {\n-        if (str == null) {\n-            return false;\n-        }\n-        if (StringUtils.isBlank(str)) {\n-            throw new NumberFormatException(\"A blank string is not a valid number.\");\n-        }  \n-        return true;\n-    }\n-    \n     // Min in array\n     //--------------------------------------------------------------------\n     /**", "timestamp": 1059428252, "metainfo": ""}