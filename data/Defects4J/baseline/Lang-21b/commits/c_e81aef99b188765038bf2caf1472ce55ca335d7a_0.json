{"sha": "e81aef99b188765038bf2caf1472ce55ca335d7a", "log": "Update mutable package for release 2.1   ", "commit": "\n--- a/src/java/org/apache/commons/lang/mutable/MutableByte.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableByte.java\n /*\n- * Copyright 2002-2004 The Apache Software Foundation.\n+ * Copyright 2004 The Apache Software Foundation.\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  */\n package org.apache.commons.lang.mutable;\n \n+import java.io.Serializable;\n+\n /**\n- * A mutable <code>Byte</code>.\n+ * A mutable <code>byte</code>.\n  * \n  * @since 2.1\n- * @version $Id: MutableByte.java,v 1.3 2004/06/24 04:20:46 bayard Exp $\n+ * @version $Id: MutableByte.java,v 1.4 2004/07/07 23:50:28 scolebourne Exp $\n  */\n-public class MutableByte extends MutableNumber {\n+public class MutableByte extends Number\n+        implements Comparable, Mutable, Serializable {\n+\n+    /** Serialization lock. */\n+    private static final long serialVersionUID = -1585823265L;\n+\n+    /** The mutable value. */\n+    private byte value;\n \n     /**\n-     * Internal value.\n+     * Constructs a new MutableByte with the default value of zero.\n      */\n-    private byte value;\n-    \n+    public MutableByte() {\n+        super();\n+    }\n+\n     /**\n-     * Instantiates with the specified value\n+     * Constructs a new MutableByte with the specified value.\n+     * \n      * @param value a value.\n      */\n     public MutableByte(byte value) {\n         this.value = value;\n     }\n \n-    public void setValue(byte value) {\n-        this.value = value;\n+    /**\n+     * Constructs a new MutableByte with the specified value.\n+     * \n+     * @param value a value.\n+     * @throws NullPointerException if the object is null\n+     */\n+    public MutableByte(Number value) {\n+        super();\n+        this.value = value.byteValue();\n     }\n \n-    public long longValue() {\n-        return this.value;\n-    }\n-\n-    public double doubleValue() {\n-        return this.value;\n-    }\n-\n-    public int intValue() {\n-        return this.value;\n-    }\n-\n+    //-----------------------------------------------------------------------\n     /**\n-     * @return a <code>Byte</code>\n+     * Gets the value as a Byte instance.\n+     * \n+     * @return the value as a Byte\n      */\n     public Object getValue() {\n         return new Byte(this.value);\n     }\n \n     /**\n-     * @param value a <code>Byte</code>\n+     * Sets the value.\n+     * \n+     * @param value  the value to set\n+     */\n+    public void setValue(byte value) {\n+        this.value = value;\n+    }\n+\n+    /**\n+     * Sets the value from any Number instance.\n+     * \n+     * @param value  the value to set\n+     * @throws NullPointerException if the object is null\n+     * @throws ClassCastException if the type is invalid\n      */\n     public void setValue(Object value) {\n-        setValue(((Number)value).byteValue());\n+        setValue(((Number) value).byteValue());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public byte byteValue() {\n+        return value;\n+    }\n+\n+    public int intValue() {\n+        return (int) value;\n+    }\n+\n+    public long longValue() {\n+        return (long) value;\n+    }\n+\n+    public float floatValue() {\n+        return (float) value;\n+    }\n+\n+    public double doubleValue() {\n+        return (double) value;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Checks if this object equals the specified object.\n+     * <p>\n+     * The object must be a MutableByte with the same value to be equal.\n+     *\n+     * @param obj  the object to compare to\n+     * @return true if equal\n+     */\n+    public boolean equals(Object obj) {\n+        if (obj instanceof MutableByte) {\n+            return (value == ((MutableByte) obj).value);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Returns a suitable hashcode for this mutable.\n+     *\n+     * @return a suitable hashcode\n+     */\n+    public int hashCode() {\n+        return (int) value;\n+    }\n+\n+    /**\n+     * Compares this mutable to another in ascending order.\n+     *\n+     * @param obj  the mutable to compare to\n+     * @return negative if this is less, zero if equal, positive if greater\n+     */\n+    public int compareTo(Object obj) {\n+        MutableByte other = (MutableByte) obj;\n+        byte anotherVal = other.value;\n+        return (value < anotherVal ? -1 : (value == anotherVal ? 0 : 1));\n+    }\n+\n+    /**\n+     * Returns the String value of this mutable.\n+     *\n+     * @return the mutable value as a string\n+     */\n+    public String toString() {\n+        return String.valueOf((int) value);\n     }\n \n }\n--- a/src/java/org/apache/commons/lang/mutable/MutableDouble.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableDouble.java\n /*\n- * Copyright 2002-2004 The Apache Software Foundation.\n+ * Copyright 2004 The Apache Software Foundation.\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  */\n package org.apache.commons.lang.mutable;\n \n+import java.io.Serializable;\n+\n+import org.apache.commons.lang.math.NumberUtils;\n+\n /**\n- * A mutable <code>Double</code>\n+ * A mutable <code>double</code>.\n  * \n  * @since 2.1\n- * @version $Id: MutableDouble.java,v 1.3 2004/06/24 04:20:46 bayard Exp $\n+ * @version $Id: MutableDouble.java,v 1.4 2004/07/07 23:50:28 scolebourne Exp $\n  */\n-public class MutableDouble extends MutableNumber {\n+public class MutableDouble extends Number\n+        implements Comparable, Mutable, Serializable {\n \n-    /**\n-     * Internal value.\n-     */\n+    /** Serialization lock. */\n+    private static final long serialVersionUID = 1587163916L;\n+\n+    /** The mutable value. */\n     private double value;\n \n     /**\n-     * Instantiates with the specified value\n+     * Constructs a new MutableDouble with the default value of zero.\n+     */\n+    public MutableDouble() {\n+        super();\n+    }\n+\n+    /**\n+     * Constructs a new MutableDouble with the specified value.\n+     * \n      * @param value a value.\n      */\n     public MutableDouble(double value) {\n         this.value = value;\n     }\n \n+    /**\n+     * Constructs a new MutableDouble with the specified value.\n+     * \n+     * @param value a value.\n+     * @throws NullPointerException if the object is null\n+     */\n+    public MutableDouble(Number value) {\n+        super();\n+        this.value = value.doubleValue();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the value as a Double instance.\n+     * \n+     * @return the value as a Double\n+     */\n+    public Object getValue() {\n+        return new Double(this.value);\n+    }\n+\n+    /**\n+     * Sets the value.\n+     * \n+     * @param value  the value to set\n+     */\n     public void setValue(double value) {\n         this.value = value;\n     }\n \n-    public double doubleValue() {\n-        return this.value;\n+    /**\n+     * Sets the value from any Number instance.\n+     * \n+     * @param value  the value to set\n+     * @throws NullPointerException if the object is null\n+     * @throws ClassCastException if the type is invalid\n+     */\n+    public void setValue(Object value) {\n+        setValue(((Number) value).doubleValue());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public int intValue() {\n+        return (int) value;\n     }\n \n     public long longValue() {\n-        return (long)this.value;\n+        return (long) value;\n     }\n \n-    public int intValue() {\n-        return (int)this.value;\n+    public float floatValue() {\n+        return (float) value;\n     }\n \n-    public Object getValue() {\n-        return new Double(this.value);\n+    public double doubleValue() {\n+        return value;\n     }\n \n-    public void setValue(Object value) {\n-        setValue(((Number)value).doubleValue());\n+    /**\n+     * Checks whether the double value is the special NaN value.\n+     *\n+     * @return true if NaN\n+     */\n+    public boolean isNaN() {\n+        return Double.isNaN(value);\n+    }\n+\n+    /**\n+     * Checks whether the double value is infinite.\n+     *\n+     * @return true if infinite\n+     */\n+    public boolean isInfinite() {\n+        return Double.isInfinite(value);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Checks if this object equals the specified object.\n+     * <p>\n+     * The object must be a MutableDouble with the same value to be equal.\n+     *\n+     * @param obj  the object to compare to\n+     * @return true if equal\n+     */\n+    public boolean equals(Object obj) {\n+        if (obj instanceof MutableDouble) {\n+            double other = ((MutableDouble) obj).value;\n+            return (Double.doubleToLongBits(other) == Double.doubleToLongBits(value));\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Returns a suitable hashcode for this mutable.\n+     *\n+     * @return a suitable hashcode\n+     */\n+    public int hashCode() {\n+        long bits = Double.doubleToLongBits(value);\n+        return (int)(bits ^ (bits >>> 32));\n+    }\n+\n+    /**\n+     * Compares this mutable to another in ascending order.\n+     *\n+     * @param obj  the mutable to compare to\n+     * @return negative if this is less, zero if equal, positive if greater\n+     */\n+    public int compareTo(Object obj) {\n+        MutableDouble other = (MutableDouble) obj;\n+        double anotherVal = other.value;\n+        return NumberUtils.compare(value, anotherVal);\n+    }\n+\n+    /**\n+     * Returns the String value of this mutable.\n+     *\n+     * @return the mutable value as a string\n+     */\n+    public String toString() {\n+        return String.valueOf(value);\n     }\n \n }\n--- a/src/java/org/apache/commons/lang/mutable/MutableFloat.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableFloat.java\n /*\n- * Copyright 2002-2004 The Apache Software Foundation.\n+ * Copyright 2004 The Apache Software Foundation.\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  */\n package org.apache.commons.lang.mutable;\n \n+import java.io.Serializable;\n+\n+import org.apache.commons.lang.math.NumberUtils;\n+\n /**\n- * A mutable <code>Float</code>\n+ * A mutable <code>float</code>.\n  * \n  * @since 2.1\n- * @version $Id: MutableFloat.java,v 1.3 2004/06/24 04:20:46 bayard Exp $\n+ * @version $Id: MutableFloat.java,v 1.4 2004/07/07 23:50:28 scolebourne Exp $\n  */\n-public class MutableFloat extends MutableNumber {\n+public class MutableFloat extends Number\n+        implements Comparable, Mutable, Serializable {\n \n-    /**\n-     * Internal value.\n-     */\n+    /** Serialization lock. */\n+    private static final long serialVersionUID = 5787169186L;\n+\n+    /** The mutable value. */\n     private float value;\n \n     /**\n-     * Instantiates with the specified value\n+     * Constructs a new MutableFloat with the default value of zero.\n+     */\n+    public MutableFloat() {\n+        super();\n+    }\n+\n+    /**\n+     * Constructs a new MutableFloat with the specified value.\n      * \n      * @param value a value.\n      */\n         this.value = value;\n     }\n \n+    /**\n+     * Constructs a new MutableFloat with the specified value.\n+     * \n+     * @param value a value.\n+     * @throws NullPointerException if the object is null\n+     */\n+    public MutableFloat(Number value) {\n+        super();\n+        this.value = value.floatValue();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the value as a Float instance.\n+     * \n+     * @return the value as a Float\n+     */\n+    public Object getValue() {\n+        return new Float(this.value);\n+    }\n+\n+    /**\n+     * Sets the value.\n+     * \n+     * @param value  the value to set\n+     */\n     public void setValue(float value) {\n         this.value = value;\n     }\n \n-    public double doubleValue() {\n-        return this.value;\n+    /**\n+     * Sets the value from any Number instance.\n+     * \n+     * @param value  the value to set\n+     * @throws NullPointerException if the object is null\n+     * @throws ClassCastException if the type is invalid\n+     */\n+    public void setValue(Object value) {\n+        setValue(((Number) value).floatValue());\n     }\n \n+    //-----------------------------------------------------------------------\n     public int intValue() {\n-        return (int)this.value;\n+        return (int) value;\n     }\n \n     public long longValue() {\n-        return (long)this.value;\n+        return (long) value;\n     }\n \n-    public Object getValue() {\n-        return new Float(this.value);\n+    public float floatValue() {\n+        return value;\n     }\n \n-    public void setValue(Object value) {\n-        setValue(((Number)value).floatValue());\n+    public double doubleValue() {\n+        return (double) value;\n+    }\n+\n+    /**\n+     * Checks whether the float value is the special NaN value.\n+     *\n+     * @return true if NaN\n+     */\n+    public boolean isNaN() {\n+        return Float.isNaN(value);\n+    }\n+\n+    /**\n+     * Checks whether the float value is infinite.\n+     *\n+     * @return true if infinite\n+     */\n+    public boolean isInfinite() {\n+        return Float.isInfinite(value);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Checks if this object equals the specified object.\n+     * <p>\n+     * The object must be a MutableFloat with the same value to be equal.\n+     *\n+     * @param obj  the object to compare to\n+     * @return true if equal\n+     */\n+    public boolean equals(Object obj) {\n+        if (obj instanceof MutableFloat) {\n+            float other = ((MutableFloat) obj).value;\n+            return (Float.floatToIntBits(other) == Float.floatToIntBits(value));\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Returns a suitable hashcode for this mutable.\n+     *\n+     * @return a suitable hashcode\n+     */\n+    public int hashCode() {\n+        return Float.floatToIntBits(value);\n+    }\n+\n+    /**\n+     * Compares this mutable to another in ascending order.\n+     *\n+     * @param obj  the mutable to compare to\n+     * @return negative if this is less, zero if equal, positive if greater\n+     */\n+    public int compareTo(Object obj) {\n+        MutableFloat other = (MutableFloat) obj;\n+        float anotherVal = other.value;\n+        return NumberUtils.compare(value, anotherVal);\n+    }\n+\n+    /**\n+     * Returns the String value of this mutable.\n+     *\n+     * @return the mutable value as a string\n+     */\n+    public String toString() {\n+        return String.valueOf(value);\n     }\n \n }\n--- a/src/java/org/apache/commons/lang/mutable/MutableInt.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableInt.java\n  * A mutable <code>int</code>.\n  * \n  * @since 2.1\n- * @version $Id: MutableInt.java,v 1.1 2004/07/05 22:15:33 scolebourne Exp $\n+ * @version $Id: MutableInt.java,v 1.2 2004/07/07 23:50:28 scolebourne Exp $\n  */\n public class MutableInt extends Number\n         implements Comparable, Mutable, Serializable {\n         this.value = value;\n     }\n \n+    /**\n+     * Constructs a new MutableInt with the specified value.\n+     * \n+     * @param value a value.\n+     * @throws NullPointerException if the object is null\n+     */\n+    public MutableInt(Number value) {\n+        super();\n+        this.value = value.intValue();\n+    }\n+\n     //-----------------------------------------------------------------------\n+    /**\n+     * Gets the value as a Integer instance.\n+     * \n+     * @return the value as a Integer\n+     */\n     public Object getValue() {\n         return new Integer(this.value);\n     }\n \n+    /**\n+     * Sets the value.\n+     * \n+     * @param value  the value to set\n+     */\n     public void setValue(int value) {\n         this.value = value;\n     }\n \n+    /**\n+     * Sets the value from any Number instance.\n+     * \n+     * @param value  the value to set\n+     * @throws NullPointerException if the object is null\n+     * @throws ClassCastException if the type is invalid\n+     */\n     public void setValue(Object value) {\n         setValue(((Number) value).intValue());\n     }\n--- a/src/java/org/apache/commons/lang/mutable/MutableLong.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableLong.java\n /*\n- * Copyright 2002-2004 The Apache Software Foundation.\n+ * Copyright 2004 The Apache Software Foundation.\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  */\n package org.apache.commons.lang.mutable;\n \n+import java.io.Serializable;\n+\n /**\n- * A mutable <code>Long</code>\n+ * A mutable <code>long</code>.\n  * \n  * @since 2.1\n- * @version $Id: MutableLong.java,v 1.3 2004/06/24 04:20:46 bayard Exp $\n+ * @version $Id: MutableLong.java,v 1.4 2004/07/07 23:50:28 scolebourne Exp $\n  */\n-public class MutableLong extends MutableNumber {\n+public class MutableLong extends Number\n+        implements Comparable, Mutable, Serializable {\n \n-    /**\n-     * Internal value.\n-     */\n+    /** Serialization lock. */\n+    private static final long serialVersionUID = 62986528375L;\n+\n+    /** The mutable value. */\n     private long value;\n \n     /**\n-     * Instantiates with the specified value\n+     * Constructs a new MutableLong with the default value of zero.\n+     */\n+    public MutableLong() {\n+        super();\n+    }\n+\n+    /**\n+     * Constructs a new MutableLong with the specified value.\n+     * \n      * @param value a value.\n      */\n     public MutableLong(long value) {\n         super();\n-        setValue(value);\n+        this.value = value;\n     }\n \n+    /**\n+     * Constructs a new MutableLong with the specified value.\n+     * \n+     * @param value a value.\n+     * @throws NullPointerException if the object is null\n+     */\n+    public MutableLong(Number value) {\n+        super();\n+        this.value = value.longValue();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the value as a Long instance.\n+     * \n+     * @return the value as a Long\n+     */\n+    public Object getValue() {\n+        return new Long(this.value);\n+    }\n+\n+    /**\n+     * Sets the value.\n+     * \n+     * @param value  the value to set\n+     */\n     public void setValue(long value) {\n         this.value = value;\n     }\n \n-    public double doubleValue() {\n-        return this.value;\n+    /**\n+     * Sets the value from any Number instance.\n+     * \n+     * @param value  the value to set\n+     * @throws NullPointerException if the object is null\n+     * @throws ClassCastException if the type is invalid\n+     */\n+    public void setValue(Object value) {\n+        setValue(((Number) value).longValue());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public int intValue() {\n+        return (int) value;\n     }\n \n     public long longValue() {\n-        return this.value;\n+        return value;\n     }\n \n-    public int intValue() {\n-        return (int)this.value;\n+    public float floatValue() {\n+        return (float) value;\n     }\n \n-    public Object getValue() {\n-        return new Long(this.value);\n+    public double doubleValue() {\n+        return (double) value;\n     }\n \n-    public void setValue(Object value) {\n-        setValue(((Number)value).longValue());\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Checks if this object equals the specified object.\n+     * <p>\n+     * The object must be a MutableLong with the same value to be equal.\n+     *\n+     * @param obj  the object to compare to\n+     * @return true if equal\n+     */\n+    public boolean equals(Object obj) {\n+        if (obj instanceof MutableLong) {\n+            return (value == ((MutableLong) obj).value);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Returns a suitable hashcode for this mutable.\n+     *\n+     * @return a suitable hashcode\n+     */\n+    public int hashCode() {\n+        return (int)(value ^ (value >>> 32));\n+    }\n+\n+    /**\n+     * Compares this mutable to another in ascending order.\n+     *\n+     * @param obj  the mutable to compare to\n+     * @return negative if this is less, zero if equal, positive if greater\n+     */\n+    public int compareTo(Object obj) {\n+        MutableLong other = (MutableLong) obj;\n+        long anotherVal = other.value;\n+        return (value < anotherVal ? -1 : (value == anotherVal ? 0 : 1));\n+    }\n+\n+    /**\n+     * Returns the String value of this mutable.\n+     *\n+     * @return the mutable value as a string\n+     */\n+    public String toString() {\n+        return String.valueOf(value);\n     }\n \n }\n--- a/src/java/org/apache/commons/lang/mutable/MutableShort.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableShort.java\n /*\n- * Copyright 2002-2004 The Apache Software Foundation.\n+ * Copyright 2004 The Apache Software Foundation.\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  */\n package org.apache.commons.lang.mutable;\n \n+import java.io.Serializable;\n+\n /**\n- * A mutable <code>Short</code>\n+ * A mutable <code>short</code>.\n  * \n  * @since 2.1\n- * @version $Id: MutableShort.java,v 1.3 2004/06/24 04:20:46 bayard Exp $\n+ * @version $Id: MutableShort.java,v 1.4 2004/07/07 23:50:28 scolebourne Exp $\n  */\n-public class MutableShort extends MutableNumber {\n+public class MutableShort extends Number\n+        implements Comparable, Mutable, Serializable {\n \n-    /**\n-     * Internal value.\n-     */\n+    /** Serialization lock. */\n+    private static final long serialVersionUID = -2135791679L;\n+\n+    /** The mutable value. */\n     private short value;\n \n     /**\n-     * Instantiates with the specified value\n+     * Constructs a new MutableShort with the default value of zero.\n+     */\n+    public MutableShort() {\n+        super();\n+    }\n+\n+    /**\n+     * Constructs a new MutableShort with the specified value.\n+     * \n      * @param value a value.\n      */\n     public MutableShort(short value) {\n         this.value = value;\n     }\n \n+    /**\n+     * Constructs a new MutableShort with the specified value.\n+     * \n+     * @param value a value.\n+     * @throws NullPointerException if the object is null\n+     */\n+    public MutableShort(Number value) {\n+        super();\n+        this.value = value.shortValue();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the value as a Short instance.\n+     * \n+     * @return the value as a Short\n+     */\n+    public Object getValue() {\n+        return new Short(this.value);\n+    }\n+\n+    /**\n+     * Sets the value.\n+     * \n+     * @param value  the value to set\n+     */\n     public void setValue(short value) {\n         this.value = value;\n     }\n \n-    public double doubleValue() {\n-        return this.value;\n+    /**\n+     * Sets the value from any Number instance.\n+     * \n+     * @param value  the value to set\n+     * @throws NullPointerException if the object is null\n+     * @throws ClassCastException if the type is invalid\n+     */\n+    public void setValue(Object value) {\n+        setValue(((Number) value).shortValue());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public short shortValue() {\n+        return value;\n     }\n \n     public int intValue() {\n-        return this.value;\n+        return (int) value;\n     }\n \n     public long longValue() {\n-        return this.value;\n+        return (long) value;\n     }\n \n-    public Object getValue() {\n-        return new Short(this.value);\n+    public float floatValue() {\n+        return (float) value;\n     }\n \n-    public void setValue(Object value) {\n-        setValue(((Number)value).shortValue());\n+    public double doubleValue() {\n+        return (double) value;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Checks if this object equals the specified object.\n+     * <p>\n+     * The object must be a MutableShort with the same value to be equal.\n+     *\n+     * @param obj  the object to compare to\n+     * @return true if equal\n+     */\n+    public boolean equals(Object obj) {\n+        if (obj instanceof MutableShort) {\n+            return (value == ((MutableShort) obj).value);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Returns a suitable hashcode for this mutable.\n+     *\n+     * @return a suitable hashcode\n+     */\n+    public int hashCode() {\n+        return (int) value;\n+    }\n+\n+    /**\n+     * Compares this mutable to another in ascending order.\n+     *\n+     * @param obj  the mutable to compare to\n+     * @return negative if this is less, zero if equal, positive if greater\n+     */\n+    public int compareTo(Object obj) {\n+        MutableShort other = (MutableShort) obj;\n+        short anotherVal = other.value;\n+        return (value < anotherVal ? -1 : (value == anotherVal ? 0 : 1));\n+    }\n+\n+    /**\n+     * Returns the String value of this mutable.\n+     *\n+     * @return the mutable value as a string\n+     */\n+    public String toString() {\n+        return String.valueOf((int) value);\n     }\n \n }\n--- a/src/test/org/apache/commons/lang/AllLangTestSuite.java\n+++ b/src/test/org/apache/commons/lang/AllLangTestSuite.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n import junit.textui.TestRunner;\n+\n import org.apache.commons.lang.builder.BuilderTestSuite;\n import org.apache.commons.lang.enums.EnumTestSuite;\n import org.apache.commons.lang.exception.ExceptionTestSuite;\n import org.apache.commons.lang.math.MathTestSuite;\n+import org.apache.commons.lang.mutable.MutableTestSuite;\n import org.apache.commons.lang.time.TimeTestSuite;\n \n /**\n  * Test suite for [lang].\n  *\n  * @author Stephen Colebourne\n- * @version $Id: AllLangTestSuite.java,v 1.6 2004/06/01 20:55:28 scolebourne Exp $\n+ * @version $Id: AllLangTestSuite.java,v 1.7 2004/07/07 23:50:28 scolebourne Exp $\n  */\n public class AllLangTestSuite extends TestCase {\n     \n         suite.addTest(org.apache.commons.lang.enum.EnumTestSuite.suite());\n         suite.addTest(ExceptionTestSuite.suite());\n         suite.addTest(MathTestSuite.suite());\n+        suite.addTest(MutableTestSuite.suite());\n         suite.addTest(TimeTestSuite.suite());\n         return suite;\n     }\n--- a/src/test/org/apache/commons/lang/mutable/MutableByteTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableByteTest.java\n package org.apache.commons.lang.mutable;\n \n import junit.framework.Test;\n+import junit.framework.TestCase;\n import junit.framework.TestSuite;\n import junit.textui.TestRunner;\n \n /**\n  * JUnit tests.\n  * \n- * @version $Id: MutableByteTest.java,v 1.1 2004/06/11 02:26:32 matth Exp $\n+ * @version $Id: MutableByteTest.java,v 1.2 2004/07/07 23:50:28 scolebourne Exp $\n  * @see MutableByte\n  */\n-public class MutableByteTest extends MutableNumberTest {\n-\n-    public static void main(String[] args) {\n-        TestRunner.run(suite());\n-    }\n-    \n-    public static Test suite() {\n-        return new TestSuite(MutableByteTest.class);\n-    }\n+public class MutableByteTest extends TestCase {\n \n     public MutableByteTest(String testName) {\n         super(testName);\n     }\n \n-    public MutableNumber getMutableNumber(double value) {\n-        return new MutableByte((byte)value);\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(MutableByteTest.class);\n     }\n \n     // ----------------------------------------------------------------\n-    //  Converters\n-    // ----------------------------------------------------------------\n-\n-    public byte byteValue(double value) {\n-        return (byte)value;\n+    public void testConstructors() {\n+        assertEquals((byte) 0, new MutableByte().byteValue());\n+        \n+        assertEquals((byte) 1, new MutableByte((byte) 1).byteValue());\n+        \n+        assertEquals((byte) 2, new MutableByte(new Byte((byte) 2)).byteValue());\n+        assertEquals((byte) 3, new MutableByte(new MutableByte((byte) 3)).byteValue());\n+        try {\n+            new MutableByte(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n     }\n \n-    public short shortValue(double value) {\n-        return (byte)value;\n+    public void testGetSet() {\n+        final MutableByte mutNum = new MutableByte((byte) 0);\n+        assertEquals((byte) 0, new MutableByte().byteValue());\n+        assertEquals(new Byte((byte) 0), new MutableByte().getValue());\n+        \n+        mutNum.setValue((byte) 1);\n+        assertEquals((byte) 1, mutNum.byteValue());\n+        assertEquals(new Byte((byte) 1), mutNum.getValue());\n+        \n+        mutNum.setValue(new Byte((byte) 2));\n+        assertEquals((byte) 2, mutNum.byteValue());\n+        assertEquals(new Byte((byte) 2), mutNum.getValue());\n+        \n+        mutNum.setValue(new MutableByte((byte) 3));\n+        assertEquals((byte) 3, mutNum.byteValue());\n+        assertEquals(new Byte((byte) 3), mutNum.getValue());\n+        try {\n+            mutNum.setValue(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+        try {\n+            mutNum.setValue(\"0\");\n+            fail();\n+        } catch (ClassCastException ex) {}\n     }\n \n-    public int intValue(double value) {\n-        return (byte)value;\n+    public void testEquals() {\n+        final MutableByte mutNumA = new MutableByte((byte) 0);\n+        final MutableByte mutNumB = new MutableByte((byte) 0);\n+        final MutableByte mutNumC = new MutableByte((byte) 1);\n+\n+        assertEquals(true, mutNumA.equals(mutNumA));\n+        assertEquals(true, mutNumA.equals(mutNumB));\n+        assertEquals(true, mutNumB.equals(mutNumA));\n+        assertEquals(true, mutNumB.equals(mutNumB));\n+        assertEquals(false, mutNumA.equals(mutNumC));\n+        assertEquals(false, mutNumB.equals(mutNumC));\n+        assertEquals(true, mutNumC.equals(mutNumC));\n+        assertEquals(false, mutNumA.equals(null));\n+        assertEquals(false, mutNumA.equals(new Byte((byte) 0)));\n+        assertEquals(false, mutNumA.equals(\"0\"));\n     }\n \n-    public long longValue(double value) {\n-        return (byte)value;\n+    public void testHashCode() {\n+        final MutableByte mutNumA = new MutableByte((byte) 0);\n+        final MutableByte mutNumB = new MutableByte((byte) 0);\n+        final MutableByte mutNumC = new MutableByte((byte) 1);\n+\n+        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n+        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n+        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n+        assertEquals(true, mutNumA.hashCode() == new Byte((byte) 0).hashCode());\n     }\n \n-    public float floatValue(double value) {\n-        return (byte)value;\n+    public void testCompareTo() {\n+        final MutableByte mutNum = new MutableByte((byte) 0);\n+\n+        assertEquals((byte) 0, mutNum.compareTo(new MutableByte((byte) 0)));\n+        assertEquals((byte) +1, mutNum.compareTo(new MutableByte((byte) -1)));\n+        assertEquals((byte) -1, mutNum.compareTo(new MutableByte((byte) 1)));\n+        try {\n+            mutNum.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+        try {\n+            mutNum.compareTo(new Byte((byte) 0));\n+            fail();\n+        } catch (ClassCastException ex) {}\n+        try {\n+            mutNum.compareTo(\"0\");\n+            fail();\n+        } catch (ClassCastException ex) {}\n     }\n \n-    public double doubleValue(double value) {\n-        return (byte)value;\n+    public void testToString() {\n+        assertEquals(\"0\", new MutableByte((byte) 0).toString());\n+        assertEquals(\"10\", new MutableByte((byte) 10).toString());\n+        assertEquals(\"-123\", new MutableByte((byte) -123).toString());\n     }\n \n-} // MutableByteTest\n+}\n--- a/src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java\n-/*\n- * Copyright 2002-2004 The Apache Software Foundation.\n- * \n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- * \n- *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.commons.lang.mutable;\n-\n-import junit.framework.Test;\n-import junit.framework.TestSuite;\n-import junit.textui.TestRunner;\n-\n-/**\n- * JUnit tests.\n- * \n- * @version $Id: MutableDoubleTest.java,v 1.1 2004/06/11 02:26:32 matth Exp $\n- * @see MutableDouble\n- */\n-public class MutableDoubleTest extends MutableNumberTest {\n-\n-    public static void main(String[] args) {\n-        TestRunner.run(suite());\n-    }\n-    \n-    public static Test suite() {\n-        return new TestSuite(MutableDoubleTest.class);\n-    }\n-\n-    public MutableDoubleTest(String testName) {\n-        super(testName);\n-    }\n-\n-    public MutableNumber getMutableNumber(double value) {\n-        return new MutableDouble(value);\n-    }\n-\n-    // Converters\n-    // ----------------------------------------------------------------\n-    \n-    public byte byteValue(double value) {\n-        return (byte)value;\n-    }\n-\n-    public short shortValue(double value) {\n-        return (short)value;\n-    }\n-\n-    public int intValue(double value) {\n-        return (int)value;\n-    }\n-\n-    public long longValue(double value) {\n-        return (long)value;\n-    }\n-\n-    public float floatValue(double value) {\n-        return (float)value;\n-    }\n-\n-    public double doubleValue(double value) {\n-        return value;\n-    }\n-\n-}\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.mutable;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * JUnit tests.\n+ * \n+ * @version $Id: MutableDoubleTest.java,v 1.2 2004/07/07 23:50:28 scolebourne Exp $\n+ * @see MutableDouble\n+ */\n+public class MutableDoubleTest extends TestCase {\n+\n+    public MutableDoubleTest(String testName) {\n+        super(testName);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(MutableDoubleTest.class);\n+    }\n+\n+    // ----------------------------------------------------------------\n+    public void testConstructors() {\n+        assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d);\n+        \n+        assertEquals(1d, new MutableDouble(1d).doubleValue(), 0.0001d);\n+        \n+        assertEquals(2d, new MutableDouble(new Double(2d)).doubleValue(), 0.0001d);\n+        assertEquals(3d, new MutableDouble(new MutableDouble(3d)).doubleValue(), 0.0001d);\n+        try {\n+            new MutableDouble(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    public void testGetSet() {\n+        final MutableDouble mutNum = new MutableDouble(0d);\n+        assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d);\n+        assertEquals(new Double(0), new MutableDouble().getValue());\n+        \n+        mutNum.setValue(1);\n+        assertEquals(1d, mutNum.doubleValue(), 0.0001d);\n+        assertEquals(new Double(1d), mutNum.getValue());\n+        \n+        mutNum.setValue(new Double(2d));\n+        assertEquals(2d, mutNum.doubleValue(), 0.0001d);\n+        assertEquals(new Double(2d), mutNum.getValue());\n+        \n+        mutNum.setValue(new MutableDouble(3d));\n+        assertEquals(3d, mutNum.doubleValue(), 0.0001d);\n+        assertEquals(new Double(3d), mutNum.getValue());\n+        try {\n+            mutNum.setValue(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+        try {\n+            mutNum.setValue(\"0\");\n+            fail();\n+        } catch (ClassCastException ex) {}\n+    }\n+\n+    public void testNanInfinite() {\n+        MutableDouble mutNum = new MutableDouble(Double.NaN);\n+        assertEquals(true, mutNum.isNaN());\n+        \n+        mutNum = new MutableDouble(Double.POSITIVE_INFINITY);\n+        assertEquals(true, mutNum.isInfinite());\n+        \n+        mutNum = new MutableDouble(Double.NEGATIVE_INFINITY);\n+        assertEquals(true, mutNum.isInfinite());\n+    }\n+\n+    public void testEquals() {\n+        final MutableDouble mutNumA = new MutableDouble(0d);\n+        final MutableDouble mutNumB = new MutableDouble(0d);\n+        final MutableDouble mutNumC = new MutableDouble(1d);\n+\n+        assertEquals(true, mutNumA.equals(mutNumA));\n+        assertEquals(true, mutNumA.equals(mutNumB));\n+        assertEquals(true, mutNumB.equals(mutNumA));\n+        assertEquals(true, mutNumB.equals(mutNumB));\n+        assertEquals(false, mutNumA.equals(mutNumC));\n+        assertEquals(false, mutNumB.equals(mutNumC));\n+        assertEquals(true, mutNumC.equals(mutNumC));\n+        assertEquals(false, mutNumA.equals(null));\n+        assertEquals(false, mutNumA.equals(new Double(0d)));\n+        assertEquals(false, mutNumA.equals(\"0\"));\n+    }\n+\n+    public void testHashCode() {\n+        final MutableDouble mutNumA = new MutableDouble(0d);\n+        final MutableDouble mutNumB = new MutableDouble(0d);\n+        final MutableDouble mutNumC = new MutableDouble(1d);\n+\n+        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n+        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n+        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n+        assertEquals(true, mutNumA.hashCode() == new Double(0d).hashCode());\n+    }\n+\n+    public void testCompareTo() {\n+        final MutableDouble mutNum = new MutableDouble(0d);\n+\n+        assertEquals(0, mutNum.compareTo(new MutableDouble(0d)));\n+        assertEquals(+1, mutNum.compareTo(new MutableDouble(-1d)));\n+        assertEquals(-1, mutNum.compareTo(new MutableDouble(1d)));\n+        try {\n+            mutNum.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+        try {\n+            mutNum.compareTo(new Double(0d));\n+            fail();\n+        } catch (ClassCastException ex) {}\n+        try {\n+            mutNum.compareTo(\"0\");\n+            fail();\n+        } catch (ClassCastException ex) {}\n+    }\n+\n+    public void testToString() {\n+        assertEquals(\"0.0\", new MutableDouble(0d).toString());\n+        assertEquals(\"10.0\", new MutableDouble(10d).toString());\n+        assertEquals(\"-123.0\", new MutableDouble(-123d).toString());\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/lang/mutable/MutableFloatTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableFloatTest.java\n-/*\n- * Copyright 2002-2004 The Apache Software Foundation.\n- * \n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- * \n- *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.commons.lang.mutable;\n-\n-import junit.framework.Test;\n-import junit.framework.TestSuite;\n-import junit.textui.TestRunner;\n-\n-/**\n- * JUnit tests.\n- * \n- * @version $Id: MutableFloatTest.java,v 1.1 2004/06/11 02:26:32 matth Exp $\n- * @see MutableFloat\n- */\n-public class MutableFloatTest extends MutableNumberTest {\n-\n-    public static void main(String[] args) {\n-        TestRunner.run(suite());\n-    }\n-\n-    public static Test suite() {\n-        return new TestSuite(MutableFloatTest.class);\n-    }\n-\n-    /**\n-     * @param testName\n-     */\n-    public MutableFloatTest(String testName) {\n-        super(testName);\n-    }\n-\n-    public MutableNumber getMutableNumber(double value) {\n-        return new MutableFloat((float)value);\n-    }\n-\n-    //  Converters\n-    // ----------------------------------------------------------------\n-    public byte byteValue(double value) {\n-        return (byte)(float)value;\n-    }\n-\n-    public short shortValue(double value) {\n-        return (short)(float)value;\n-    }\n-\n-    public int intValue(double value) {\n-        return (int)(float)value;\n-    }\n-\n-    public long longValue(double value) {\n-        return (long)(float)value;\n-    }\n-\n-    public float floatValue(double value) {\n-        return (float)value;\n-    }\n-\n-    public double doubleValue(double value) {\n-        return (float)value;\n-    }\n-\n-}\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.mutable;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * JUnit tests.\n+ * \n+ * @version $Id: MutableFloatTest.java,v 1.2 2004/07/07 23:50:28 scolebourne Exp $\n+ * @see MutableFloat\n+ */\n+public class MutableFloatTest extends TestCase {\n+\n+    public MutableFloatTest(String testName) {\n+        super(testName);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(MutableFloatTest.class);\n+    }\n+\n+    // ----------------------------------------------------------------\n+    public void testConstructors() {\n+        assertEquals(0f, new MutableFloat().floatValue(), 0.0001f);\n+        \n+        assertEquals(1f, new MutableFloat(1f).floatValue(), 0.0001f);\n+        \n+        assertEquals(2f, new MutableFloat(new Float(2f)).floatValue(), 0.0001f);\n+        assertEquals(3f, new MutableFloat(new MutableFloat(3f)).floatValue(), 0.0001f);\n+        try {\n+            new MutableFloat(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    public void testGetSet() {\n+        final MutableFloat mutNum = new MutableFloat(0f);\n+        assertEquals(0f, new MutableFloat().floatValue(), 0.0001f);\n+        assertEquals(new Float(0), new MutableFloat().getValue());\n+        \n+        mutNum.setValue(1);\n+        assertEquals(1f, mutNum.floatValue(), 0.0001f);\n+        assertEquals(new Float(1f), mutNum.getValue());\n+        \n+        mutNum.setValue(new Float(2f));\n+        assertEquals(2f, mutNum.floatValue(), 0.0001f);\n+        assertEquals(new Float(2f), mutNum.getValue());\n+        \n+        mutNum.setValue(new MutableFloat(3f));\n+        assertEquals(3f, mutNum.floatValue(), 0.0001f);\n+        assertEquals(new Float(3f), mutNum.getValue());\n+        try {\n+            mutNum.setValue(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+        try {\n+            mutNum.setValue(\"0\");\n+            fail();\n+        } catch (ClassCastException ex) {}\n+    }\n+\n+    public void testNanInfinite() {\n+        MutableFloat mutNum = new MutableFloat(Float.NaN);\n+        assertEquals(true, mutNum.isNaN());\n+        \n+        mutNum = new MutableFloat(Float.POSITIVE_INFINITY);\n+        assertEquals(true, mutNum.isInfinite());\n+        \n+        mutNum = new MutableFloat(Float.NEGATIVE_INFINITY);\n+        assertEquals(true, mutNum.isInfinite());\n+    }\n+\n+    public void testEquals() {\n+        final MutableFloat mutNumA = new MutableFloat(0f);\n+        final MutableFloat mutNumB = new MutableFloat(0f);\n+        final MutableFloat mutNumC = new MutableFloat(1f);\n+\n+        assertEquals(true, mutNumA.equals(mutNumA));\n+        assertEquals(true, mutNumA.equals(mutNumB));\n+        assertEquals(true, mutNumB.equals(mutNumA));\n+        assertEquals(true, mutNumB.equals(mutNumB));\n+        assertEquals(false, mutNumA.equals(mutNumC));\n+        assertEquals(false, mutNumB.equals(mutNumC));\n+        assertEquals(true, mutNumC.equals(mutNumC));\n+        assertEquals(false, mutNumA.equals(null));\n+        assertEquals(false, mutNumA.equals(new Float(0f)));\n+        assertEquals(false, mutNumA.equals(\"0\"));\n+    }\n+\n+    public void testHashCode() {\n+        final MutableFloat mutNumA = new MutableFloat(0f);\n+        final MutableFloat mutNumB = new MutableFloat(0f);\n+        final MutableFloat mutNumC = new MutableFloat(1f);\n+\n+        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n+        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n+        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n+        assertEquals(true, mutNumA.hashCode() == new Float(0f).hashCode());\n+    }\n+\n+    public void testCompareTo() {\n+        final MutableFloat mutNum = new MutableFloat(0f);\n+\n+        assertEquals(0, mutNum.compareTo(new MutableFloat(0f)));\n+        assertEquals(+1, mutNum.compareTo(new MutableFloat(-1f)));\n+        assertEquals(-1, mutNum.compareTo(new MutableFloat(1f)));\n+        try {\n+            mutNum.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+        try {\n+            mutNum.compareTo(new Float(0f));\n+            fail();\n+        } catch (ClassCastException ex) {}\n+        try {\n+            mutNum.compareTo(\"0\");\n+            fail();\n+        } catch (ClassCastException ex) {}\n+    }\n+\n+    public void testToString() {\n+        assertEquals(\"0.0\", new MutableFloat(0f).toString());\n+        assertEquals(\"10.0\", new MutableFloat(10f).toString());\n+        assertEquals(\"-123.0\", new MutableFloat(-123f).toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/mutable/MutableIntTest.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.mutable;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * JUnit tests.\n+ * \n+ * @version $Id: MutableIntTest.java,v 1.1 2004/07/07 23:50:28 scolebourne Exp $\n+ * @see MutableInt\n+ */\n+public class MutableIntTest extends TestCase {\n+\n+    public MutableIntTest(String testName) {\n+        super(testName);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(MutableIntTest.class);\n+    }\n+\n+    // ----------------------------------------------------------------\n+    public void testConstructors() {\n+        assertEquals(0, new MutableInt().intValue());\n+        \n+        assertEquals(1, new MutableInt(1).intValue());\n+        \n+        assertEquals(2, new MutableInt(new Integer(2)).intValue());\n+        assertEquals(3, new MutableInt(new MutableLong(3)).intValue());\n+        try {\n+            new MutableInt(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    public void testGetSet() {\n+        final MutableInt mutNum = new MutableInt(0);\n+        assertEquals(0, new MutableInt().intValue());\n+        assertEquals(new Integer(0), new MutableInt().getValue());\n+        \n+        mutNum.setValue(1);\n+        assertEquals(1, mutNum.intValue());\n+        assertEquals(new Integer(1), mutNum.getValue());\n+        \n+        mutNum.setValue(new Integer(2));\n+        assertEquals(2, mutNum.intValue());\n+        assertEquals(new Integer(2), mutNum.getValue());\n+        \n+        mutNum.setValue(new MutableLong(3));\n+        assertEquals(3, mutNum.intValue());\n+        assertEquals(new Integer(3), mutNum.getValue());\n+        try {\n+            mutNum.setValue(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+        try {\n+            mutNum.setValue(\"0\");\n+            fail();\n+        } catch (ClassCastException ex) {}\n+    }\n+\n+    public void testEquals() {\n+        final MutableInt mutNumA = new MutableInt(0);\n+        final MutableInt mutNumB = new MutableInt(0);\n+        final MutableInt mutNumC = new MutableInt(1);\n+\n+        assertEquals(true, mutNumA.equals(mutNumA));\n+        assertEquals(true, mutNumA.equals(mutNumB));\n+        assertEquals(true, mutNumB.equals(mutNumA));\n+        assertEquals(true, mutNumB.equals(mutNumB));\n+        assertEquals(false, mutNumA.equals(mutNumC));\n+        assertEquals(false, mutNumB.equals(mutNumC));\n+        assertEquals(true, mutNumC.equals(mutNumC));\n+        assertEquals(false, mutNumA.equals(null));\n+        assertEquals(false, mutNumA.equals(new Integer(0)));\n+        assertEquals(false, mutNumA.equals(\"0\"));\n+    }\n+\n+    public void testHashCode() {\n+        final MutableInt mutNumA = new MutableInt(0);\n+        final MutableInt mutNumB = new MutableInt(0);\n+        final MutableInt mutNumC = new MutableInt(1);\n+\n+        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n+        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n+        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n+        assertEquals(true, mutNumA.hashCode() == new Integer(0).hashCode());\n+    }\n+\n+    public void testCompareTo() {\n+        final MutableInt mutNum = new MutableInt(0);\n+\n+        assertEquals(0, mutNum.compareTo(new MutableInt(0)));\n+        assertEquals(+1, mutNum.compareTo(new MutableInt(-1)));\n+        assertEquals(-1, mutNum.compareTo(new MutableInt(1)));\n+        try {\n+            mutNum.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+        try {\n+            mutNum.compareTo(new Integer(0));\n+            fail();\n+        } catch (ClassCastException ex) {}\n+        try {\n+            mutNum.compareTo(\"0\");\n+            fail();\n+        } catch (ClassCastException ex) {}\n+    }\n+\n+    public void testToString() {\n+        assertEquals(\"0\", new MutableInt(0).toString());\n+        assertEquals(\"10\", new MutableInt(10).toString());\n+        assertEquals(\"-123\", new MutableInt(-123).toString());\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/lang/mutable/MutableLongTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableLongTest.java\n-/*\n- * Copyright 2002-2004 The Apache Software Foundation.\n- * \n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- * \n- *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.commons.lang.mutable;\n-\n-import junit.framework.Test;\n-import junit.framework.TestSuite;\n-import junit.textui.TestRunner;\n-\n-/**\n- * JUnit tests.\n- * \n- * @version $Id: MutableLongTest.java,v 1.1 2004/06/11 02:26:32 matth Exp $\n- * @see MutableLong\n- */\n-public class MutableLongTest extends MutableNumberTest {\n-\n-    public static void main(String[] args) {\n-        TestRunner.run(suite());\n-    }\n-\n-    public static Test suite() {\n-        return new TestSuite(MutableLongTest.class);\n-    }\n-\n-    public MutableLongTest(String testName) {\n-        super(testName);\n-    }\n-\n-    public MutableNumber getMutableNumber(double value) {\n-        return new MutableLong((long)value);\n-    }\n-\n-    // ----------------------------------------------------------------\n-    // Converters\n-    // ----------------------------------------------------------------    \n-\n-    public byte byteValue(double value) {\n-        return (byte)(long)value;\n-    }\n-\n-    public short shortValue(double value) {\n-        return (short)(long)value;\n-    }\n-\n-    public int intValue(double value) {\n-        return (int)(long)value;\n-    }\n-\n-    public long longValue(double value) {\n-        return (long)value;\n-    }\n-\n-    public float floatValue(double value) {\n-        return (long)value;\n-    }\n-\n-    public double doubleValue(double value) {\n-        return (long)value;\n-    }\n-\n-}\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.mutable;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * JUnit tests.\n+ * \n+ * @version $Id: MutableLongTest.java,v 1.2 2004/07/07 23:50:28 scolebourne Exp $\n+ * @see MutableLong\n+ */\n+public class MutableLongTest extends TestCase {\n+\n+    public MutableLongTest(String testName) {\n+        super(testName);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(MutableLongTest.class);\n+    }\n+\n+    // ----------------------------------------------------------------\n+    public void testConstructors() {\n+        assertEquals(0, new MutableLong().longValue());\n+        \n+        assertEquals(1, new MutableLong(1).longValue());\n+        \n+        assertEquals(2, new MutableLong(new Long(2)).longValue());\n+        assertEquals(3, new MutableLong(new MutableLong(3)).longValue());\n+        try {\n+            new MutableLong(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    public void testGetSet() {\n+        final MutableLong mutNum = new MutableLong(0);\n+        assertEquals(0, new MutableLong().longValue());\n+        assertEquals(new Long(0), new MutableLong().getValue());\n+        \n+        mutNum.setValue(1);\n+        assertEquals(1, mutNum.longValue());\n+        assertEquals(new Long(1), mutNum.getValue());\n+        \n+        mutNum.setValue(new Long(2));\n+        assertEquals(2, mutNum.longValue());\n+        assertEquals(new Long(2), mutNum.getValue());\n+        \n+        mutNum.setValue(new MutableLong(3));\n+        assertEquals(3, mutNum.longValue());\n+        assertEquals(new Long(3), mutNum.getValue());\n+        try {\n+            mutNum.setValue(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+        try {\n+            mutNum.setValue(\"0\");\n+            fail();\n+        } catch (ClassCastException ex) {}\n+    }\n+\n+    public void testEquals() {\n+        final MutableLong mutNumA = new MutableLong(0);\n+        final MutableLong mutNumB = new MutableLong(0);\n+        final MutableLong mutNumC = new MutableLong(1);\n+\n+        assertEquals(true, mutNumA.equals(mutNumA));\n+        assertEquals(true, mutNumA.equals(mutNumB));\n+        assertEquals(true, mutNumB.equals(mutNumA));\n+        assertEquals(true, mutNumB.equals(mutNumB));\n+        assertEquals(false, mutNumA.equals(mutNumC));\n+        assertEquals(false, mutNumB.equals(mutNumC));\n+        assertEquals(true, mutNumC.equals(mutNumC));\n+        assertEquals(false, mutNumA.equals(null));\n+        assertEquals(false, mutNumA.equals(new Long(0)));\n+        assertEquals(false, mutNumA.equals(\"0\"));\n+    }\n+\n+    public void testHashCode() {\n+        final MutableLong mutNumA = new MutableLong(0);\n+        final MutableLong mutNumB = new MutableLong(0);\n+        final MutableLong mutNumC = new MutableLong(1);\n+\n+        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n+        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n+        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n+        assertEquals(true, mutNumA.hashCode() == new Long(0).hashCode());\n+    }\n+\n+    public void testCompareTo() {\n+        final MutableLong mutNum = new MutableLong(0);\n+\n+        assertEquals(0, mutNum.compareTo(new MutableLong(0)));\n+        assertEquals(+1, mutNum.compareTo(new MutableLong(-1)));\n+        assertEquals(-1, mutNum.compareTo(new MutableLong(1)));\n+        try {\n+            mutNum.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+        try {\n+            mutNum.compareTo(new Long(0));\n+            fail();\n+        } catch (ClassCastException ex) {}\n+        try {\n+            mutNum.compareTo(\"0\");\n+            fail();\n+        } catch (ClassCastException ex) {}\n+    }\n+\n+    public void testToString() {\n+        assertEquals(\"0\", new MutableLong(0).toString());\n+        assertEquals(\"10\", new MutableLong(10).toString());\n+        assertEquals(\"-123\", new MutableLong(-123).toString());\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/lang/mutable/MutableShortTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableShortTest.java\n package org.apache.commons.lang.mutable;\n \n import junit.framework.Test;\n+import junit.framework.TestCase;\n import junit.framework.TestSuite;\n import junit.textui.TestRunner;\n \n /**\n  * JUnit tests.\n  * \n- * @version $Id: MutableShortTest.java,v 1.1 2004/06/11 02:26:32 matth Exp $\n+ * @version $Id: MutableShortTest.java,v 1.2 2004/07/07 23:50:28 scolebourne Exp $\n  * @see MutableShort\n  */\n-public class MutableShortTest extends MutableNumberTest {\n+public class MutableShortTest extends TestCase {\n+\n+    public MutableShortTest(String testName) {\n+        super(testName);\n+    }\n \n     public static void main(String[] args) {\n         TestRunner.run(suite());\n         return new TestSuite(MutableShortTest.class);\n     }\n \n-    public MutableShortTest(String testName) {\n-        super(testName);\n+    // ----------------------------------------------------------------\n+    public void testConstructors() {\n+        assertEquals((short) 0, new MutableShort().shortValue());\n+        \n+        assertEquals((short) 1, new MutableShort((short) 1).shortValue());\n+        \n+        assertEquals((short) 2, new MutableShort(new Short((short) 2)).shortValue());\n+        assertEquals((short) 3, new MutableShort(new MutableShort((short) 3)).shortValue());\n+        try {\n+            new MutableShort(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n     }\n \n-    // ----------------------------------------------------------------\n-    //  Converters\n-    // ----------------------------------------------------------------\n-\n-    public MutableNumber getMutableNumber(double value) {\n-        return new MutableShort((short)value);\n+    public void testGetSet() {\n+        final MutableShort mutNum = new MutableShort((short) 0);\n+        assertEquals((short) 0, new MutableShort().shortValue());\n+        assertEquals(new Short((short) 0), new MutableShort().getValue());\n+        \n+        mutNum.setValue((short) 1);\n+        assertEquals((short) 1, mutNum.shortValue());\n+        assertEquals(new Short((short) 1), mutNum.getValue());\n+        \n+        mutNum.setValue(new Short((short) 2));\n+        assertEquals((short) 2, mutNum.shortValue());\n+        assertEquals(new Short((short) 2), mutNum.getValue());\n+        \n+        mutNum.setValue(new MutableShort((short) 3));\n+        assertEquals((short) 3, mutNum.shortValue());\n+        assertEquals(new Short((short) 3), mutNum.getValue());\n+        try {\n+            mutNum.setValue(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+        try {\n+            mutNum.setValue(\"0\");\n+            fail();\n+        } catch (ClassCastException ex) {}\n     }\n \n-    public byte byteValue(double value) {\n-        return (byte)(short)value;\n+    public void testEquals() {\n+        final MutableShort mutNumA = new MutableShort((short) 0);\n+        final MutableShort mutNumB = new MutableShort((short) 0);\n+        final MutableShort mutNumC = new MutableShort((short) 1);\n+\n+        assertEquals(true, mutNumA.equals(mutNumA));\n+        assertEquals(true, mutNumA.equals(mutNumB));\n+        assertEquals(true, mutNumB.equals(mutNumA));\n+        assertEquals(true, mutNumB.equals(mutNumB));\n+        assertEquals(false, mutNumA.equals(mutNumC));\n+        assertEquals(false, mutNumB.equals(mutNumC));\n+        assertEquals(true, mutNumC.equals(mutNumC));\n+        assertEquals(false, mutNumA.equals(null));\n+        assertEquals(false, mutNumA.equals(new Short((short) 0)));\n+        assertEquals(false, mutNumA.equals(\"0\"));\n     }\n \n-    public short shortValue(double value) {\n-        return (short)value;\n+    public void testHashCode() {\n+        final MutableShort mutNumA = new MutableShort((short) 0);\n+        final MutableShort mutNumB = new MutableShort((short) 0);\n+        final MutableShort mutNumC = new MutableShort((short) 1);\n+\n+        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n+        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n+        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n+        assertEquals(true, mutNumA.hashCode() == new Short((short) 0).hashCode());\n     }\n \n-    public int intValue(double value) {\n-        return (short)value;\n+    public void testCompareTo() {\n+        final MutableShort mutNum = new MutableShort((short) 0);\n+\n+        assertEquals((short) 0, mutNum.compareTo(new MutableShort((short) 0)));\n+        assertEquals((short) +1, mutNum.compareTo(new MutableShort((short) -1)));\n+        assertEquals((short) -1, mutNum.compareTo(new MutableShort((short) 1)));\n+        try {\n+            mutNum.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+        try {\n+            mutNum.compareTo(new Short((short) 0));\n+            fail();\n+        } catch (ClassCastException ex) {}\n+        try {\n+            mutNum.compareTo(\"0\");\n+            fail();\n+        } catch (ClassCastException ex) {}\n     }\n \n-    public long longValue(double value) {\n-        return (short)value;\n-    }\n-\n-    public float floatValue(double value) {\n-        return (short)value;\n-    }\n-\n-    public double doubleValue(double value) {\n-        return (short)value;\n+    public void testToString() {\n+        assertEquals(\"0\", new MutableShort((short) 0).toString());\n+        assertEquals(\"10\", new MutableShort((short) 10).toString());\n+        assertEquals(\"-123\", new MutableShort((short) -123).toString());\n     }\n \n }\n-\n--- a/src/test/org/apache/commons/lang/mutable/MutableTestSuite.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableTestSuite.java\n /**\n  * JUnit tests.\n  *\n- * @version $Id: MutableTestSuite.java,v 1.2 2004/06/27 06:28:32 bayard Exp $\n+ * @version $Id: MutableTestSuite.java,v 1.3 2004/07/07 23:50:28 scolebourne Exp $\n  */\n-public final class MutableTestSuite {\n+public class MutableTestSuite {\n \n     public static void main(String[] args) {\n         TestRunner.run(suite());\n \n         suite.addTest(MutableByteTest.suite());\n         suite.addTest(MutableShortTest.suite());\n-        suite.addTest(MutableIntegerTest.suite());\n+        suite.addTest(MutableIntTest.suite());\n         suite.addTest(MutableLongTest.suite());\n         suite.addTest(MutableFloatTest.suite());\n         suite.addTest(MutableDoubleTest.suite());", "timestamp": 1089244228, "metainfo": ""}