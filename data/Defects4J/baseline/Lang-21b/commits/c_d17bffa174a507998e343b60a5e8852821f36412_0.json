{"sha": "d17bffa174a507998e343b60a5e8852821f36412", "log": "lang.enum.*: \tDeprecated and replaced by org.apache.commons.lang.enums.* and will be \tremoved in version 3.0. All classes in this package are deprecated and  \trepackaged to org.apache.commons.lang.enums since enum is a Java 1.5  \tkeyword.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/enum/Enum.java\n+++ b/src/java/org/apache/commons/lang/enum/Enum.java\n  * \n  * <p>For more details, see the 'Nested' test cases.\n  * \n+ * @deprecated Replaced by {@link org.apache.commons.lang.enums.Enum org.apache.commons.lang.enums.Enum} \n+ *          and will be removed in version 3.0. All classes in this package are deprecated and repackaged to \n+ *          <a href=\"../enums/package-summary.html\">org.apache.commons.lang.enums</a> since <code>enum</code> \n+ *          is a Java 1.5 keyword. \n+ * @see org.apache.commons.lang.enums.Enum\n  * @author Apache Avalon project\n  * @author Stephen Colebourne\n  * @author Chris Webb\n  * @author Mike Bowler\n  * @since 1.0\n- * @version $Id: Enum.java,v 1.27 2004/02/18 22:53:51 ggregory Exp $\n+ * @version $Id: Enum.java,v 1.28 2004/02/23 04:34:20 ggregory Exp $\n  */\n public abstract class Enum implements Comparable, Serializable {\n \n--- a/src/java/org/apache/commons/lang/enum/EnumUtils.java\n+++ b/src/java/org/apache/commons/lang/enum/EnumUtils.java\n /**\n  * <p>Utility class for accessing and manipulating {@link Enum}s.</p>\n  *\n+ * @deprecated Replaced by {@link org.apache.commons.lang.enums.EnumUtils org.apache.commons.lang.enums.EnumUtils} \n+ *          and will be removed in version 3.0. All classes in this package are deprecated and repackaged to \n+ *          <a href=\"../enums/package-summary.html\">org.apache.commons.lang.enums</a> since <code>enum</code> \n+ *          is a Java 1.5 keyword. \n+ * @see org.apache.commons.lang.enums.EnumUtils\n  * @see Enum\n  * @see ValuedEnum\n  * @author Stephen Colebourne\n  * @author Gary Gregory\n  * @since 1.0\n- * @version $Id: EnumUtils.java,v 1.11 2004/02/18 22:53:51 ggregory Exp $\n+ * @version $Id: EnumUtils.java,v 1.12 2004/02/23 04:34:20 ggregory Exp $\n  */\n public class EnumUtils {\n \n--- a/src/java/org/apache/commons/lang/enum/ValuedEnum.java\n+++ b/src/java/org/apache/commons/lang/enum/ValuedEnum.java\n  * Unfortunately, Java restrictions require these to be coded as shown in each subclass.\n  * An alternative choice is to use the {@link EnumUtils} class.</p>\n  *\n+ * @deprecated Replaced by {@link org.apache.commons.lang.enums.ValuedEnum org.apache.commons.lang.enums.ValuedEnum}\n+ *          and will be removed in version 3.0. All classes in this package are deprecated and repackaged to \n+ *          <a href=\"../enums/package-summary.html\">org.apache.commons.lang.enums</a> since <code>enum</code> \n+ *          is a Java 1.5 keyword. \n+ * @see org.apache.commons.lang.enums.ValuedEnum\n  * @author Apache Avalon project\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: ValuedEnum.java,v 1.15 2004/02/18 22:53:51 ggregory Exp $\n+ * @version $Id: ValuedEnum.java,v 1.16 2004/02/23 04:34:20 ggregory Exp $\n  */\n public abstract class ValuedEnum extends Enum {\n     \n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/enums/Enum.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.enums;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.lang.ClassUtils;\n+import org.apache.commons.lang.StringUtils;\n+\n+/**\n+ * <p>Abstract superclass for type-safe enums.</p>\n+ *\n+ * <p>One feature of the C programming language lacking in Java is enumerations. The\n+ * C implementation based on ints was poor and open to abuse. The original Java\n+ * recommendation and most of the JDK also uses int constants. It has been recognised\n+ * however that a more robust type-safe class-based solution can be designed. This\n+ * class follows the basic Java type-safe enumeration pattern.</p>\n+ *\n+ * <p><em>NOTE:</em>Due to the way in which Java ClassLoaders work, comparing\n+ * Enum objects should always be done using <code>equals()</code>, not <code>==</code>.\n+ * The equals() method will try == first so in most cases the effect is the same.</p>\n+ * \n+ * <p>Of course, if you actually want (or don't mind) Enums in different class\n+ * loaders being non-equal, then you can use <code>==</code>.</p>\n+ * \n+ * <h4>Simple Enums</h4>\n+ *\n+ * <p>To use this class, it must be subclassed. For example:</p>\n+ *\n+ * <pre>\n+ * public final class ColorEnum extends Enum {\n+ *   public static final ColorEnum RED = new ColorEnum(\"Red\");\n+ *   public static final ColorEnum GREEN = new ColorEnum(\"Green\");\n+ *   public static final ColorEnum BLUE = new ColorEnum(\"Blue\");\n+ *\n+ *   private ColorEnum(String color) {\n+ *     super(color);\n+ *   }\n+ * \n+ *   public static ColorEnum getEnum(String color) {\n+ *     return (ColorEnum) getEnum(ColorEnum.class, color);\n+ *   }\n+ * \n+ *   public static Map getEnumMap() {\n+ *     return getEnumMap(ColorEnum.class);\n+ *   }\n+ * \n+ *   public static List getEnumList() {\n+ *     return getEnumList(ColorEnum.class);\n+ *   }\n+ * \n+ *   public static Iterator iterator() {\n+ *     return iterator(ColorEnum.class);\n+ *   }\n+ * }\n+ * </pre>\n+ *\n+ * <p>As shown, each enum has a name. This can be accessed using <code>getName</code>.</p>\n+ *\n+ * <p>The <code>getEnum</code> and <code>iterator</code> methods are recommended.\n+ * Unfortunately, Java restrictions require these to be coded as shown in each subclass.\n+ * An alternative choice is to use the {@link EnumUtils} class.</p>\n+ * \n+ * <h4>Subclassed Enums</h4>\n+ * <p>A hierarchy of Enum classes can be built. In this case, the superclass is\n+ * unaffected by the addition of subclasses (as per normal Java). The subclasses\n+ * may add additional Enum constants <em>of the type of the superclass</em>. The\n+ * query methods on the subclass will return all of the Enum constants from the\n+ * superclass and subclass.</p>\n+ *\n+ * <pre>\n+ * public final class ExtraColorEnum extends ColorEnum {\n+ *   // NOTE: Color enum declared above is final, change that to get this\n+ *   // example to compile.\n+ *   public static final ColorEnum YELLOW = new ExtraColorEnum(\"Yellow\");\n+ *\n+ *   private ExtraColorEnum(String color) {\n+ *     super(color);\n+ *   }\n+ * \n+ *   public static ColorEnum getEnum(String color) {\n+ *     return (ColorEnum) getEnum(ExtraColorEnum.class, color);\n+ *   }\n+ * \n+ *   public static Map getEnumMap() {\n+ *     return getEnumMap(ExtraColorEnum.class);\n+ *   }\n+ * \n+ *   public static List getEnumList() {\n+ *     return getEnumList(ExtraColorEnum.class);\n+ *   }\n+ * \n+ *   public static Iterator iterator() {\n+ *     return iterator(ExtraColorEnum.class);\n+ *   }\n+ * }\n+ * </pre>\n+ *\n+ * <p>This example will return RED, GREEN, BLUE, YELLOW from the List and iterator\n+ * methods in that order. The RED, GREEN and BLUE instances will be the same (==) \n+ * as those from the superclass ColorEnum. Note that YELLOW is declared as a\n+ * ColorEnum and not an ExtraColorEnum.</p>\n+ * \n+ * <h4>Functional Enums</h4>\n+ *\n+ * <p>The enums can have functionality by defining subclasses and\n+ * overriding the <code>getEnumClass()</code> method:</p>\n+ * \n+ * <pre>\n+ *   public static final OperationEnum PLUS = new PlusOperation();\n+ *   private static final class PlusOperation extends OperationEnum {\n+ *     private PlusOperation() {\n+ *       super(\"Plus\");\n+ *     }\n+ *     public int eval(int a, int b) {\n+ *       return (a + b);\n+ *     }\n+ *   }\n+ *   public static final OperationEnum MINUS = new MinusOperation();\n+ *   private static final class MinusOperation extends OperationEnum {\n+ *     private MinusOperation() {\n+ *       super(\"Minus\");\n+ *     }\n+ *     public int eval(int a, int b) {\n+ *       return (a - b);\n+ *     }\n+ *   }\n+ *\n+ *   private OperationEnum(String color) {\n+ *     super(color);\n+ *   }\n+ * \n+ *   public final Class getEnumClass() {     // NOTE: new method!\n+ *     return OperationEnum.class;\n+ *   }\n+ *\n+ *   public abstract double eval(double a, double b);\n+ * \n+ *   public static OperationEnum getEnum(String name) {\n+ *     return (OperationEnum) getEnum(OperationEnum.class, name);\n+ *   }\n+ * \n+ *   public static Map getEnumMap() {\n+ *     return getEnumMap(OperationEnum.class);\n+ *   }\n+ * \n+ *   public static List getEnumList() {\n+ *     return getEnumList(OperationEnum.class);\n+ *   }\n+ * \n+ *   public static Iterator iterator() {\n+ *     return iterator(OperationEnum.class);\n+ *   }\n+ * }\n+ * </pre>\n+ * <p>The code above will work on JDK 1.2. If JDK1.3 and later is used,\n+ * the subclasses may be defined as anonymous.</p>\n+ * \n+ * <h4>Nested class Enums</h4>\n+ *\n+ * <p>Care must be taken with class loading when defining a static nested class\n+ * for enums. The static nested class can be loaded without the surrounding outer\n+ * class being loaded. This can result in an empty list/map/iterator being returned.\n+ * One solution is to define a static block that references the outer class where\n+ * the constants are defined. For example:</p>\n+ *\n+ * <pre>\n+ * public final class Outer {\n+ *   public static final BWEnum BLACK = new BWEnum(\"Black\");\n+ *   public static final BWEnum WHITE = new BWEnum(\"White\");\n+ *\n+ *   // static nested enum class\n+ *   public static final class BWEnum extends Enum {\n+ * \n+ *     static {\n+ *       // explicitly reference BWEnum class to force constants to load\n+ *       Object obj = Outer.BLACK;\n+ *     }\n+ * \n+ *     // ... other methods omitted\n+ *   }\n+ * }\n+ * </pre>\n+ * \n+ * <p>Although the above solves the problem, it is not recommended. The best solution\n+ * is to define the constants in the enum class, and hold references in the outer class:\n+ *\n+ * <pre>\n+ * public final class Outer {\n+ *   public static final BWEnum BLACK = BWEnum.BLACK;\n+ *   public static final BWEnum WHITE = BWEnum.WHITE;\n+ *\n+ *   // static nested enum class\n+ *   public static final class BWEnum extends Enum {\n+ *     // only define constants in enum classes - private if desired\n+ *     private static final BWEnum BLACK = new BWEnum(\"Black\");\n+ *     private static final BWEnum WHITE = new BWEnum(\"White\");\n+ * \n+ *     // ... other methods omitted\n+ *   }\n+ * }\n+ * </pre>\n+ * \n+ * <p>For more details, see the 'Nested' test cases.\n+ * \n+ * @author Apache Avalon project\n+ * @author Stephen Colebourne\n+ * @author Chris Webb\n+ * @author Mike Bowler\n+ * @since 1.0\n+ * @version $Id: Enum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ */\n+public abstract class Enum implements Comparable, Serializable {\n+\n+    /** Lang version 1.0.1 serial compatibility */\n+    private static final long serialVersionUID = -487045951170455942L;\n+    \n+    // After discussion, the default size for HashMaps is used, as the\n+    // sizing algorithm changes across the JDK versions\n+    /**\n+     * An empty <code>Map</code>, as JDK1.2 didn't have an empty map.\n+     */\n+    private static final Map EMPTY_MAP = Collections.unmodifiableMap(new HashMap(0));\n+    \n+    /**\n+     * <code>Map</code>, key of class name, value of <code>Entry</code>.\n+     */\n+    private static final Map cEnumClasses = new HashMap();\n+    \n+    /**\n+     * The string representation of the Enum.\n+     */\n+    private final String iName;\n+    \n+    /**\n+     * The hashcode representation of the Enum.\n+     */\n+    private transient final int iHashCode;\n+    \n+    /**\n+     * The toString representation of the Enum.\n+     * @since 2.0\n+     */\n+    protected transient String iToString = null;\n+\n+    /**\n+     * <p>Enable the iterator to retain the source code order.</p>\n+     */\n+    private static class Entry {\n+        /**\n+         * Map of Enum name to Enum.\n+         */\n+        final Map map = new HashMap();\n+        /**\n+         * Map of Enum name to Enum.\n+         */\n+        final Map unmodifiableMap = Collections.unmodifiableMap(map);\n+        /**\n+         * List of Enums in source code order.\n+         */\n+        final List list = new ArrayList(25);\n+        /**\n+         * Map of Enum name to Enum.\n+         */\n+        final List unmodifiableList = Collections.unmodifiableList(list);\n+\n+        /**\n+         * <p>Restrictive constructor.</p>\n+         */\n+        private Entry() {\n+        }\n+    }\n+\n+    /**\n+     * <p>Constructor to add a new named item to the enumeration.</p>\n+     *\n+     * @param name  the name of the enum object,\n+     *  must not be empty or <code>null</code>\n+     * @throws IllegalArgumentException if the name is <code>null</code>\n+     *  or an empty string\n+     * @throws IllegalArgumentException if the getEnumClass() method returns\n+     *  a null or invalid Class\n+     */\n+    protected Enum(String name) {\n+        super();\n+        init(name);\n+        iName = name;\n+        iHashCode = 7 + getEnumClass().hashCode() + 3 * name.hashCode();\n+        // cannot create toString here as subclasses may want to include other data\n+    }\n+\n+    /**\n+     * Initializes the enumeration.\n+     * \n+     * @param name  the enum name\n+     * @throws IllegalArgumentException if the name is null or empty or duplicate\n+     * @throws IllegalArgumentException if the enumClass is null or invalid\n+     */\n+    private void init(String name) {\n+        if (StringUtils.isEmpty(name)) {\n+            throw new IllegalArgumentException(\"The Enum name must not be empty or null\");\n+        }\n+        \n+        Class enumClass = getEnumClass();\n+        if (enumClass == null) {\n+            throw new IllegalArgumentException(\"getEnumClass() must not be null\");\n+        }\n+        Class cls = getClass();\n+        boolean ok = false;\n+        while (cls != null && cls != Enum.class && cls != ValuedEnum.class) {\n+            if (cls == enumClass) {\n+                ok = true;\n+                break;\n+            }\n+            cls = cls.getSuperclass();\n+        }\n+        if (ok == false) {\n+            throw new IllegalArgumentException(\"getEnumClass() must return a superclass of this class\");\n+        }\n+        \n+        // create entry\n+        Entry entry = (Entry) cEnumClasses.get(enumClass);\n+        if (entry == null) {\n+            entry = createEntry(enumClass);\n+            cEnumClasses.put(enumClass, entry);\n+        }\n+        if (entry.map.containsKey(name)) {\n+            throw new IllegalArgumentException(\"The Enum name must be unique, '\" + name + \"' has already been added\");\n+        }\n+        entry.map.put(name, this);\n+        entry.list.add(this);\n+    }\n+\n+    /**\n+     * <p>Handle the deserialization of the class to ensure that multiple\n+     * copies are not wastefully created, or illegal enum types created.</p>\n+     *\n+     * @return the resolved object\n+     */\n+    protected Object readResolve() {\n+        Entry entry = (Entry) cEnumClasses.get(getEnumClass());\n+        if (entry == null) {\n+            return null;\n+        }\n+        return (Enum) entry.map.get(getName());\n+    }\n+    \n+    //--------------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets an <code>Enum</code> object by class and name.</p>\n+     * \n+     * @param enumClass  the class of the Enum to get, must not\n+     *  be <code>null</code>\n+     * @param name  the name of the <code>Enum</code> to get,\n+     *  may be <code>null</code>\n+     * @return the enum object, or null if the enum does not exist\n+     * @throws IllegalArgumentException if the enum class\n+     *  is <code>null</code>\n+     */\n+    protected static Enum getEnum(Class enumClass, String name) {\n+        Entry entry = getEntry(enumClass);\n+        if (entry == null) {\n+            return null;\n+        }\n+        return (Enum) entry.map.get(name);\n+    }\n+\n+    /**\n+     * <p>Gets the <code>Map</code> of <code>Enum</code> objects by\n+     * name using the <code>Enum</code> class.</p>\n+     *\n+     * <p>If the requested class has no enum objects an empty\n+     * <code>Map</code> is returned.</p>\n+     * \n+     * @param enumClass  the class of the <code>Enum</code> to get,\n+     *  must not be <code>null</code>\n+     * @return the enum object Map\n+     * @throws IllegalArgumentException if the enum class is <code>null</code>\n+     * @throws IllegalArgumentException if the enum class is not a subclass of Enum\n+     */\n+    protected static Map getEnumMap(Class enumClass) {\n+        Entry entry = getEntry(enumClass);\n+        if (entry == null) {\n+            return EMPTY_MAP;\n+        }\n+        return entry.unmodifiableMap;\n+    }\n+\n+    /**\n+     * <p>Gets the <code>List</code> of <code>Enum</code> objects using the\n+     * <code>Enum</code> class.</p>\n+     *\n+     * <p>The list is in the order that the objects were created (source code order).\n+     * If the requested class has no enum objects an empty <code>List</code> is\n+     * returned.</p>\n+     * \n+     * @param enumClass  the class of the <code>Enum</code> to get,\n+     *  must not be <code>null</code>\n+     * @return the enum object Map\n+     * @throws IllegalArgumentException if the enum class is <code>null</code>\n+     * @throws IllegalArgumentException if the enum class is not a subclass of Enum\n+     */\n+    protected static List getEnumList(Class enumClass) {\n+        Entry entry = getEntry(enumClass);\n+        if (entry == null) {\n+            return Collections.EMPTY_LIST;\n+        }\n+        return entry.unmodifiableList;\n+    }\n+\n+    /**\n+     * <p>Gets an <code>Iterator</code> over the <code>Enum</code> objects in\n+     * an <code>Enum</code> class.</p>\n+     *\n+     * <p>The <code>Iterator</code> is in the order that the objects were\n+     * created (source code order). If the requested class has no enum\n+     * objects an empty <code>Iterator</code> is returned.</p>\n+     * \n+     * @param enumClass  the class of the <code>Enum</code> to get,\n+     *  must not be <code>null</code>\n+     * @return an iterator of the Enum objects\n+     * @throws IllegalArgumentException if the enum class is <code>null</code>\n+     * @throws IllegalArgumentException if the enum class is not a subclass of Enum\n+     */\n+    protected static Iterator iterator(Class enumClass) {\n+        return Enum.getEnumList(enumClass).iterator();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Gets an <code>Entry</code> from the map of Enums.</p>\n+     * \n+     * @param enumClass  the class of the <code>Enum</code> to get\n+     * @return the enum entry\n+     */\n+    private static Entry getEntry(Class enumClass) {\n+        if (enumClass == null) {\n+            throw new IllegalArgumentException(\"The Enum Class must not be null\");\n+        }\n+        if (Enum.class.isAssignableFrom(enumClass) == false) {\n+            throw new IllegalArgumentException(\"The Class must be a subclass of Enum\");\n+        }\n+        Entry entry = (Entry) cEnumClasses.get(enumClass);\n+        return entry;\n+    }\n+    \n+    /**\n+     * <p>Creates an <code>Entry</code> for storing the Enums.</p>\n+     *\n+     * <p>This accounts for subclassed Enums.</p>\n+     * \n+     * @param enumClass  the class of the <code>Enum</code> to get\n+     * @return the enum entry\n+     */\n+    private static Entry createEntry(Class enumClass) {\n+        Entry entry = new Entry();\n+        Class cls = enumClass.getSuperclass();\n+        while (cls != null && cls != Enum.class && cls != ValuedEnum.class) {\n+            Entry loopEntry = (Entry) cEnumClasses.get(cls);\n+            if (loopEntry != null) {\n+                entry.list.addAll(loopEntry.list);\n+                entry.map.putAll(loopEntry.map);\n+                break;  // stop here, as this will already have had superclasses added\n+            }\n+            cls = cls.getSuperclass();\n+        }\n+        return entry;\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Retrieve the name of this Enum item, set in the constructor.</p>\n+     * \n+     * @return the <code>String</code> name of this Enum item\n+     */\n+    public final String getName() {\n+        return iName;\n+    }\n+\n+    /**\n+     * <p>Retrieves the Class of this Enum item, set in the constructor.</p>\n+     * \n+     * <p>This is normally the same as <code>getClass()</code>, but for\n+     * advanced Enums may be different. If overridden, it must return a\n+     * constant value.</p>\n+     * \n+     * @return the <code>Class</code> of the enum\n+     * @since 2.0\n+     */\n+    public Class getEnumClass() {\n+        return getClass();\n+    }\n+\n+    /**\n+     * <p>Tests for equality.</p>\n+     *\n+     * <p>Two Enum objects are considered equal\n+     * if they have the same class names and the same names.\n+     * Identity is tested for first, so this method usually runs fast.</p>\n+     * \n+     * <p>If the parameter is in a different class loader than this instance,\n+     * reflection is used to compare the names.</p>\n+     *\n+     * @param other  the other object to compare for equality\n+     * @return <code>true</code> if the Enums are equal\n+     */\n+    public final boolean equals(Object other) {\n+        if (other == this) {\n+            return true;\n+        } else if (other == null) {\n+            return false;\n+        } else if (other.getClass() == this.getClass()) {\n+            // Ok to do a class cast to Enum here since the test above\n+            // guarantee both\n+            // classes are in the same class loader.\n+            return iName.equals(((Enum) other).iName);\n+        } else {\n+            // This and other are in different class loaders, we must use reflection.\n+            try {\n+                Method mth = other.getClass().getMethod(\"getName\", null);\n+                String name = (String) mth.invoke(other, null);\n+                return iName.equals(name);\n+            } catch (NoSuchMethodException e) {\n+                // ignore - should never happen\n+            } catch (IllegalAccessException e) {\n+                // ignore - should never happen\n+            } catch (InvocationTargetException e) {\n+                // ignore - should never happen\n+            }\n+            return false;\n+        }\n+    }\n+    \n+    /**\n+     * <p>Returns a suitable hashCode for the enumeration.</p>\n+     *\n+     * @return a hashcode based on the name\n+     */\n+    public final int hashCode() {\n+        return iHashCode;\n+    }\n+\n+    /**\n+     * <p>Tests for order.</p>\n+     *\n+     * <p>The default ordering is alphabetic by name, but this\n+     * can be overridden by subclasses.</p>\n+     * \n+     * @see java.lang.Comparable#compareTo(Object)\n+     * @param other  the other object to compare to\n+     * @return -ve if this is less than the other object, +ve if greater\n+     *  than, <code>0</code> of equal\n+     * @throws ClassCastException if other is not an Enum\n+     * @throws NullPointerException if other is <code>null</code>\n+     */\n+    public int compareTo(Object other) {\n+        if (other == this) {\n+            return 0;\n+        }\n+        return iName.compareTo(((Enum) other).iName);\n+    }\n+\n+    /**\n+     * <p>Human readable description of this Enum item.</p>\n+     * \n+     * @return String in the form <code>type[name]</code>, for example:\n+     * <code>Color[Red]</code>. Note that the package name is stripped from\n+     * the type name.\n+     */\n+    public String toString() {\n+        if (iToString == null) {\n+            String shortName = ClassUtils.getShortClassName(getEnumClass());\n+            iToString = shortName + \"[\" + getName() + \"]\";\n+        }\n+        return iToString;\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/enums/EnumUtils.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.enums;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * <p>Utility class for accessing and manipulating {@link Enum}s.</p>\n+ *\n+ * @see Enum\n+ * @see ValuedEnum\n+ * @author Stephen Colebourne\n+ * @author Gary Gregory\n+ * @since 1.0\n+ * @version $Id: EnumUtils.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ */\n+public class EnumUtils {\n+\n+    /**\n+     * Public constructor. This class should not normally be instantiated.\n+     * @since 2.0\n+     */\n+    public EnumUtils() {\n+    }\n+\n+    /**\n+     * <p>Gets an <code>Enum</code> object by class and name.</p>\n+     * \n+     * @param enumClass  the class of the <code>Enum</code> to get\n+     * @param name  the name of the Enum to get, may be <code>null</code>\n+     * @return the enum object\n+     * @throws IllegalArgumentException if the enum class is <code>null</code>\n+     */\n+    public static Enum getEnum(Class enumClass, String name) {\n+        return Enum.getEnum(enumClass, name);\n+    }\n+\n+    /**\n+     * <p>Gets a <code>ValuedEnum</code> object by class and value.</p>\n+     * \n+     * @param enumClass  the class of the <code>Enum</code> to get\n+     * @param value  the value of the <code>Enum</code> to get\n+     * @return the enum object, or null if the enum does not exist\n+     * @throws IllegalArgumentException if the enum class is <code>null</code>\n+     */\n+    public static ValuedEnum getEnum(Class enumClass, int value) {\n+        return (ValuedEnum) ValuedEnum.getEnum(enumClass, value);\n+    }\n+\n+    /**\n+     * <p>Gets the <code>Map</code> of <code>Enum</code> objects by\n+     * name using the <code>Enum</code> class.</p>\n+     *\n+     * <p>If the requested class has no enum objects an empty\n+     * <code>Map</code> is returned. The <code>Map</code> is unmodifiable.</p>\n+     * \n+     * @param enumClass  the class of the <code>Enum</code> to get\n+     * @return the enum object Map\n+     * @throws IllegalArgumentException if the enum class is <code>null</code>\n+     * @throws IllegalArgumentException if the enum class is not a subclass\n+     *  of <code>Enum</code>\n+     */\n+    public static Map getEnumMap(Class enumClass) {\n+        return Enum.getEnumMap(enumClass);\n+    }\n+\n+    /**\n+     * <p>Gets the <code>List</code> of <code>Enum</code> objects using\n+     * the <code>Enum</code> class.</p>\n+     *\n+     * <p>The list is in the order that the objects were created\n+     * (source code order).</p>\n+     *\n+     * <p>If the requested class has no enum objects an empty\n+     * <code>List</code> is returned. The <code>List</code> is unmodifiable.</p>\n+     * \n+     * @param enumClass  the class of the Enum to get\n+     * @return the enum object Map\n+     * @throws IllegalArgumentException if the enum class is <code>null</code>\n+     * @throws IllegalArgumentException if the enum class is not a subclass\n+     *  of <code>Enum</code>\n+     */\n+    public static List getEnumList(Class enumClass) {\n+        return Enum.getEnumList(enumClass);\n+    }\n+\n+    /**\n+     * <p>Gets an <code>Iterator</code> over the <code>Enum</code> objects\n+     * in an <code>Enum</code> class.</p>\n+     *\n+     * <p>The iterator is in the order that the objects were created\n+     * (source code order).</p>\n+     *\n+     * <p>If the requested class has no enum objects an empty\n+     * <code>Iterator</code> is returned. The <code>Iterator</code>\n+     * is unmodifiable.</p>\n+     * \n+     * @param enumClass  the class of the <code>Enum</code> to get\n+     * @return an <code>Iterator</code> of the <code>Enum</code> objects\n+     * @throws IllegalArgumentException if the enum class is <code>null</code>\n+     * @throws IllegalArgumentException if the enum class is not a subclass of <code>Enum</code>\n+     */\n+    public static Iterator iterator(Class enumClass) {\n+        return Enum.getEnumList(enumClass).iterator();\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/enums/ValuedEnum.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.enums;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.apache.commons.lang.ClassUtils;\n+\n+/**\n+ * <p>Abstract superclass for type-safe enums with integer values suitable\n+ * for use in <code>switch</code> statements.</p>\n+ *\n+ * <p><em>NOTE:</em>Due to the way in which Java ClassLoaders work, comparing\n+ * <code>Enum</code> objects should always be done using the equals() method,\n+ * not <code>==</code>. The equals() method will try <code>==</code> first so\n+ * in most cases the effect is the same.</p>\n+ *\n+ * <p>To use this class, it must be subclassed. For example:</p>\n+ *\n+ * <pre>\n+ * public final class JavaVersionEnum extends ValuedEnum {\n+ *   //standard enums for version of JVM\n+ *   public static final int  JAVA1_0_VALUE  = 100;\n+ *   public static final int  JAVA1_1_VALUE  = 110;\n+ *   public static final int  JAVA1_2_VALUE  = 120;\n+ *   public static final int  JAVA1_3_VALUE  = 130;\n+ *   public static final JavaVersionEnum  JAVA1_0  = new JavaVersionEnum( \"Java 1.0\", JAVA1_0_VALUE );\n+ *   public static final JavaVersionEnum  JAVA1_1  = new JavaVersionEnum( \"Java 1.1\", JAVA1_1_VALUE );\n+ *   public static final JavaVersionEnum  JAVA1_2  = new JavaVersionEnum( \"Java 1.2\", JAVA1_2_VALUE );\n+ *   public static final JavaVersionEnum  JAVA1_3  = new JavaVersionEnum( \"Java 1.3\", JAVA1_3_VALUE );\n+ *\n+ *   private JavaVersionEnum(String name, int value) {\n+ *     super( name, value );\n+ *   }\n+ * \n+ *   public static JavaVersionEnum getEnum(String javaVersion) {\n+ *     return (JavaVersionEnum) getEnum(JavaVersionEnum.class, javaVersion);\n+ *   }\n+ * \n+ *   public static JavaVersionEnum getEnum(int javaVersion) {\n+ *     return (JavaVersionEnum) getEnum(JavaVersionEnum.class, javaVersion);\n+ *   }\n+ * \n+ *   public static Map getEnumMap() {\n+ *     return getEnumMap(JavaVersionEnum.class);\n+ *   }\n+ * \n+ *   public static List getEnumList() {\n+ *     return getEnumList(JavaVersionEnum.class);\n+ *   }\n+ * \n+ *   public static Iterator iterator() {\n+ *     return iterator(JavaVersionEnum.class);\n+ *   }\n+ * }\n+ * </pre>\n+ *\n+ * <p>The above class could then be used as follows:</p>\n+ *\n+ * <pre>\n+ * public void doSomething(JavaVersion ver) {\n+ *   switch (ver.getValue()) {\n+ *     case JAVA1_0_VALUE:\n+ *       // ...\n+ *       break;\n+ *     case JAVA1_1_VALUE:\n+ *       // ...\n+ *       break;\n+ *     //...\n+ *   }\n+ * }\n+ * </pre>\n+ *\n+ * <p>As shown, each enum has a name and a value. These can be accessed using\n+ * <code>getName</code> and <code>getValue</code>.</p>\n+ *\n+ * <p>The <code>getEnum</code> and <code>iterator</code> methods are recommended.\n+ * Unfortunately, Java restrictions require these to be coded as shown in each subclass.\n+ * An alternative choice is to use the {@link EnumUtils} class.</p>\n+ *\n+ * @author Apache Avalon project\n+ * @author Stephen Colebourne\n+ * @since 1.0\n+ * @version $Id: ValuedEnum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ */\n+public abstract class ValuedEnum extends Enum {\n+    \n+    /** Lang version 1.0.1 serial compatibility */\n+    private static final long serialVersionUID = -7129650521543789085L;\n+    \n+    /**\n+     * The value contained in enum.\n+     */\n+    private final int iValue;\n+\n+    /**\n+     * Constructor for enum item.\n+     *\n+     * @param name  the name of enum item\n+     * @param value  the value of enum item\n+     */\n+    protected ValuedEnum(String name, int value) {\n+        super(name);\n+        iValue = value;\n+    }\n+\n+    /**\n+     * <p>Gets an <code>Enum</code> object by class and value.</p>\n+     *\n+     * <p>This method loops through the list of <code>Enum</code>,\n+     * thus if there are many <code>Enum</code>s this will be\n+     * slow.</p>\n+     * \n+     * @param enumClass  the class of the <code>Enum</code> to get\n+     * @param value  the value of the <code>Enum</code> to get\n+     * @return the enum object, or null if the enum does not exist\n+     * @throws IllegalArgumentException if the enum class is <code>null</code>\n+     */\n+    protected static Enum getEnum(Class enumClass, int value) {\n+        if (enumClass == null) {\n+            throw new IllegalArgumentException(\"The Enum Class must not be null\");\n+        }\n+        List list = Enum.getEnumList(enumClass);\n+        for (Iterator it = list.iterator(); it.hasNext();) {\n+            ValuedEnum enum = (ValuedEnum) it.next();\n+            if (enum.getValue() == value) {\n+                return enum;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * <p>Get value of enum item.</p>\n+     *\n+     * @return the enum item's value.\n+     */\n+    public final int getValue() {\n+        return iValue;\n+    }\n+\n+    /**\n+     * <p>Tests for order.</p>\n+     *\n+     * <p>The default ordering is numeric by value, but this\n+     * can be overridden by subclasses.</p>\n+     * \n+     * @see java.lang.Comparable#compareTo(Object)\n+     * @param other  the other object to compare to\n+     * @return -ve if this is less than the other object, +ve if greater than,\n+     *  <code>0</code> of equal\n+     * @throws ClassCastException if other is not an <code>Enum</code>\n+     * @throws NullPointerException if other is <code>null</code>\n+     */\n+    public int compareTo(Object other) {\n+        return iValue - ((ValuedEnum) other).iValue;\n+    }\n+\n+    /**\n+     * <p>Human readable description of this <code>Enum</code> item.</p>\n+     *\n+     * @return String in the form <code>type[name=value]</code>, for example:\n+     *  <code>JavaVersion[Java 1.0=100]</code>. Note that the package name is\n+     *  stripped from the type name.\n+     */\n+    public String toString() {\n+        if (iToString == null) {\n+            String shortName = ClassUtils.getShortClassName(getEnumClass());\n+            iToString = shortName + \"[\" + getName() + \"=\" + getValue() + \"]\";\n+        }\n+        return iToString;\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enums/Broken1Enum.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.enums;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Broken color enumeration.\n+ *\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: Broken1Enum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ */\n+public final class Broken1Enum extends Enum {\n+    public static final Broken1Enum RED = new Broken1Enum(\"Red\");\n+    public static final Broken1Enum GREEN = new Broken1Enum(\"Green\");\n+    public static final Broken1Enum GREENISH = new Broken1Enum(\"Green\");  // duplicate not allowed\n+\n+    private Broken1Enum(String color) {\n+        super(color);\n+    }\n+\n+    public static Broken1Enum getEnum(String color) {\n+        return (Broken1Enum) getEnum(Broken1Enum.class, color);\n+    }\n+\n+    public static Map getEnumMap() {\n+        return getEnumMap(Broken1Enum.class);\n+    }\n+\n+    public static List getEnumList() {\n+        return getEnumList(Broken1Enum.class);\n+    }\n+\n+    public static Iterator iterator() {\n+        return iterator(Broken1Enum.class);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enums/Broken1OperationEnum.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.enums;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Broken Operator enumeration, null class.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: Broken1OperationEnum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ */\n+public abstract class Broken1OperationEnum extends Enum {\n+    // This syntax works for JDK 1.3 and upwards:\n+//    public static final OperationEnum PLUS = new OperationEnum(\"Plus\") {\n+//        public int eval(int a, int b) {\n+//            return (a + b);\n+//        }\n+//    };\n+//    public static final OperationEnum MINUS = new OperationEnum(\"Minus\") {\n+//        public int eval(int a, int b) {\n+//            return (a - b);\n+//        }\n+//    };\n+    // This syntax works for JDK 1.2 and upwards:\n+    public static final Broken1OperationEnum PLUS = new PlusOperation();\n+    private static class PlusOperation extends Broken1OperationEnum {\n+        private PlusOperation() {\n+            super(\"Plus\");\n+        }\n+        public int eval(int a, int b) {\n+            return (a + b);\n+        }\n+    }\n+    public static final Broken1OperationEnum MINUS = new MinusOperation();\n+    private static class MinusOperation extends Broken1OperationEnum {\n+        private MinusOperation() {\n+            super(\"Minus\");\n+        }\n+        public int eval(int a, int b) {\n+            return (a - b);\n+        }\n+    }\n+\n+    private Broken1OperationEnum(String name) {\n+        super(name);\n+    }\n+    \n+    public final Class getEnumClass() {\n+        return null;\n+    }\n+\n+    public abstract int eval(int a, int b);\n+\n+    public static Broken1OperationEnum getEnum(String name) {\n+        return (Broken1OperationEnum) getEnum(Broken1OperationEnum.class, name);\n+    }\n+\n+    public static Map getEnumMap() {\n+        return getEnumMap(Broken1OperationEnum.class);\n+    }\n+\n+    public static List getEnumList() {\n+        return getEnumList(Broken1OperationEnum.class);\n+    }\n+\n+    public static Iterator iterator() {\n+        return iterator(Broken1OperationEnum.class);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enums/Broken2Enum.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.enums;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Broken color enumeration.\n+ *\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: Broken2Enum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ */\n+public final class Broken2Enum extends Enum {\n+    public static final Broken2Enum RED = new Broken2Enum(\"Red\");\n+    public static final Broken2Enum GREEN = new Broken2Enum(\"Green\");\n+    public static final Broken2Enum BLUE = new Broken2Enum(\"\");  // blank not allowed\n+\n+    private Broken2Enum(String color) {\n+        super(color);\n+    }\n+\n+    public static Broken2Enum getEnum(String color) {\n+        return (Broken2Enum) getEnum(Broken2Enum.class, color);\n+    }\n+\n+    public static Map getEnumMap() {\n+        return getEnumMap(Broken2Enum.class);\n+    }\n+\n+    public static List getEnumList() {\n+        return getEnumList(Broken2Enum.class);\n+    }\n+\n+    public static Iterator iterator() {\n+        return iterator(Broken2Enum.class);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enums/Broken2OperationEnum.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.enums;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Broken Operator enumeration, getEnumClass() not superclass.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: Broken2OperationEnum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ */\n+public abstract class Broken2OperationEnum extends Enum {\n+    // This syntax works for JDK 1.3 and upwards:\n+//    public static final OperationEnum PLUS = new OperationEnum(\"Plus\") {\n+//        public int eval(int a, int b) {\n+//            return (a + b);\n+//        }\n+//    };\n+//    public static final OperationEnum MINUS = new OperationEnum(\"Minus\") {\n+//        public int eval(int a, int b) {\n+//            return (a - b);\n+//        }\n+//    };\n+    // This syntax works for JDK 1.2 and upwards:\n+    public static final Broken2OperationEnum PLUS = new PlusOperation();\n+    private static class PlusOperation extends Broken2OperationEnum {\n+        private PlusOperation() {\n+            super(\"Plus\");\n+        }\n+        public int eval(int a, int b) {\n+            return (a + b);\n+        }\n+    }\n+    public static final Broken2OperationEnum MINUS = new MinusOperation();\n+    private static class MinusOperation extends Broken2OperationEnum {\n+        private MinusOperation() {\n+            super(\"Minus\");\n+        }\n+        public int eval(int a, int b) {\n+            return (a - b);\n+        }\n+    }\n+\n+    private Broken2OperationEnum(String name) {\n+        super(name);\n+    }\n+    \n+    public final Class getEnumClass() {\n+        return ColorEnum.class;\n+    }\n+\n+    public abstract int eval(int a, int b);\n+\n+    public static Broken2OperationEnum getEnum(String name) {\n+        return (Broken2OperationEnum) getEnum(Broken2OperationEnum.class, name);\n+    }\n+\n+    public static Map getEnumMap() {\n+        return getEnumMap(Broken2OperationEnum.class);\n+    }\n+\n+    public static List getEnumList() {\n+        return getEnumList(Broken2OperationEnum.class);\n+    }\n+\n+    public static Iterator iterator() {\n+        return iterator(Broken2OperationEnum.class);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enums/Broken3Enum.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.enums;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Broken color enumeration.\n+ *\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: Broken3Enum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ */\n+public final class Broken3Enum extends Enum {\n+    public static final Broken3Enum RED = new Broken3Enum(\"Red\");\n+    public static final Broken3Enum GREEN = new Broken3Enum(\"Green\");\n+    public static final Broken3Enum BLUE = new Broken3Enum(null);  // null not allowed\n+\n+    private Broken3Enum(String color) {\n+        super(color);\n+    }\n+\n+    public static Broken3Enum getEnum(String color) {\n+        return (Broken3Enum) getEnum(Broken3Enum.class, color);\n+    }\n+\n+    public static Map getEnumMap() {\n+        return getEnumMap(Broken3Enum.class);\n+    }\n+\n+    public static List getEnumList() {\n+        return getEnumList(Broken3Enum.class);\n+    }\n+\n+    public static Iterator iterator() {\n+        return iterator(Broken3Enum.class);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enums/Broken3OperationEnum.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.enums;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Broken Operator enumeration, getEnumClass() is Enum.class.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: Broken3OperationEnum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ */\n+public abstract class Broken3OperationEnum extends Enum {\n+    // This syntax works for JDK 1.3 and upwards:\n+//    public static final OperationEnum PLUS = new OperationEnum(\"Plus\") {\n+//        public int eval(int a, int b) {\n+//            return (a + b);\n+//        }\n+//    };\n+//    public static final OperationEnum MINUS = new OperationEnum(\"Minus\") {\n+//        public int eval(int a, int b) {\n+//            return (a - b);\n+//        }\n+//    };\n+    // This syntax works for JDK 1.2 and upwards:\n+    public static final Broken3OperationEnum PLUS = new PlusOperation();\n+    private static class PlusOperation extends Broken3OperationEnum {\n+        private PlusOperation() {\n+            super(\"Plus\");\n+        }\n+        public int eval(int a, int b) {\n+            return (a + b);\n+        }\n+    }\n+    public static final Broken3OperationEnum MINUS = new MinusOperation();\n+    private static class MinusOperation extends Broken3OperationEnum {\n+        private MinusOperation() {\n+            super(\"Minus\");\n+        }\n+        public int eval(int a, int b) {\n+            return (a - b);\n+        }\n+    }\n+\n+    private Broken3OperationEnum(String name) {\n+        super(name);\n+    }\n+    \n+    public final Class getEnumClass() {\n+        return Enum.class;\n+    }\n+\n+    public abstract int eval(int a, int b);\n+\n+    public static Broken3OperationEnum getEnum(String name) {\n+        return (Broken3OperationEnum) getEnum(Broken3OperationEnum.class, name);\n+    }\n+\n+    public static Map getEnumMap() {\n+        return getEnumMap(Broken3OperationEnum.class);\n+    }\n+\n+    public static List getEnumList() {\n+        return getEnumList(Broken3OperationEnum.class);\n+    }\n+\n+    public static Iterator iterator() {\n+        return iterator(Broken3OperationEnum.class);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enums/Broken4OperationEnum.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.enums;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Broken Operator enumeration, getEnumClass() is ValuedEnum.class.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: Broken4OperationEnum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ */\n+public abstract class Broken4OperationEnum extends Enum {\n+    // This syntax works for JDK 1.3 and upwards:\n+//    public static final OperationEnum PLUS = new OperationEnum(\"Plus\") {\n+//        public int eval(int a, int b) {\n+//            return (a + b);\n+//        }\n+//    };\n+//    public static final OperationEnum MINUS = new OperationEnum(\"Minus\") {\n+//        public int eval(int a, int b) {\n+//            return (a - b);\n+//        }\n+//    };\n+    // This syntax works for JDK 1.2 and upwards:\n+    public static final Broken4OperationEnum PLUS = new PlusOperation();\n+    private static class PlusOperation extends Broken4OperationEnum {\n+        private PlusOperation() {\n+            super(\"Plus\");\n+        }\n+        public int eval(int a, int b) {\n+            return (a + b);\n+        }\n+    }\n+    public static final Broken4OperationEnum MINUS = new MinusOperation();\n+    private static class MinusOperation extends Broken4OperationEnum {\n+        private MinusOperation() {\n+            super(\"Minus\");\n+        }\n+        public int eval(int a, int b) {\n+            return (a - b);\n+        }\n+    }\n+\n+    private Broken4OperationEnum(String name) {\n+        super(name);\n+    }\n+    \n+    public final Class getEnumClass() {\n+        return ValuedEnum.class;\n+    }\n+\n+    public abstract int eval(int a, int b);\n+\n+    public static Broken4OperationEnum getEnum(String name) {\n+        return (Broken4OperationEnum) getEnum(Broken4OperationEnum.class, name);\n+    }\n+\n+    public static Map getEnumMap() {\n+        return getEnumMap(Broken4OperationEnum.class);\n+    }\n+\n+    public static List getEnumList() {\n+        return getEnumList(Broken4OperationEnum.class);\n+    }\n+\n+    public static Iterator iterator() {\n+        return iterator(Broken4OperationEnum.class);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enums/Broken5OperationEnum.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.enums;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Broken Operator enumeration, getEnumClass() is not an Enum class.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: Broken5OperationEnum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ */\n+public abstract class Broken5OperationEnum extends Enum {\n+    // This syntax works for JDK 1.3 and upwards:\n+//    public static final OperationEnum PLUS = new OperationEnum(\"Plus\") {\n+//        public int eval(int a, int b) {\n+//            return (a + b);\n+//        }\n+//    };\n+//    public static final OperationEnum MINUS = new OperationEnum(\"Minus\") {\n+//        public int eval(int a, int b) {\n+//            return (a - b);\n+//        }\n+//    };\n+    // This syntax works for JDK 1.2 and upwards:\n+    public static final Broken5OperationEnum PLUS = new PlusOperation();\n+    private static class PlusOperation extends Broken5OperationEnum {\n+        private PlusOperation() {\n+            super(\"Plus\");\n+        }\n+        public int eval(int a, int b) {\n+            return (a + b);\n+        }\n+    }\n+    public static final Broken5OperationEnum MINUS = new MinusOperation();\n+    private static class MinusOperation extends Broken5OperationEnum {\n+        private MinusOperation() {\n+            super(\"Minus\");\n+        }\n+        public int eval(int a, int b) {\n+            return (a - b);\n+        }\n+    }\n+\n+    private Broken5OperationEnum(String name) {\n+        super(name);\n+    }\n+    \n+    public final Class getEnumClass() {\n+        return String.class;\n+    }\n+\n+    public abstract int eval(int a, int b);\n+\n+    public static Broken5OperationEnum getEnum(String name) {\n+        return (Broken5OperationEnum) getEnum(Broken5OperationEnum.class, name);\n+    }\n+\n+    public static Map getEnumMap() {\n+        return getEnumMap(Broken5OperationEnum.class);\n+    }\n+\n+    public static List getEnumList() {\n+        return getEnumList(Broken5OperationEnum.class);\n+    }\n+\n+    public static Iterator iterator() {\n+        return iterator(Broken5OperationEnum.class);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enums/ColorEnum.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.enums;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Color enumeration.\n+ *\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: ColorEnum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ */\n+\n+public final class ColorEnum extends Enum {\n+    public static final ColorEnum RED = new ColorEnum(\"Red\");\n+    public static final ColorEnum GREEN = new ColorEnum(\"Green\");\n+    public static final ColorEnum BLUE = new ColorEnum(\"Blue\");\n+\n+    private ColorEnum(String color) {\n+        super(color);\n+    }\n+\n+    public static ColorEnum getEnum(String color) {\n+        return (ColorEnum) getEnum(ColorEnum.class, color);\n+    }\n+\n+    public static Map getEnumMap() {\n+        return getEnumMap(ColorEnum.class);\n+    }\n+\n+    public static List getEnumList() {\n+        return getEnumList(ColorEnum.class);\n+    }\n+\n+    public static Iterator iterator() {\n+        return iterator(ColorEnum.class);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enums/DummyEnum.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.enums;\n+\n+/**\n+ * Dummy enumeration - no values.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: DummyEnum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ */\n+public abstract class DummyEnum extends Enum {\n+\n+    private DummyEnum(String name) {\n+        super(name);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enums/EnumTest.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.enums;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import junit.framework.AssertionFailedError;\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import org.apache.commons.lang.ClassUtilsTest;\n+import org.apache.commons.lang.SerializationUtils;\n+\n+/**\n+ * Test cases for the {@link Enum} class.\n+ *\n+ * @author Stephen Colebourne\n+ * @author Gary D. Gregory\n+ * @version $Id: EnumTest.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ */\n+\n+public final class EnumTest extends TestCase {\n+\n+    public EnumTest(String name) {\n+        super(name);\n+    }\n+\n+    public void setUp() {\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(EnumTest.class);\n+        suite.setName(\"Enum Tests\");\n+        return suite;\n+    }\n+\n+    public void testName() {\n+        assertEquals(\"Red\", ColorEnum.RED.getName());\n+        assertEquals(\"Green\", ColorEnum.GREEN.getName());\n+        assertEquals(\"Blue\", ColorEnum.BLUE.getName());\n+    }\n+\n+    public void testCompareTo() {\n+        assertTrue(ColorEnum.BLUE.compareTo(ColorEnum.BLUE) == 0);\n+        assertTrue(ColorEnum.RED.compareTo(ColorEnum.BLUE) > 0);\n+        assertTrue(ColorEnum.BLUE.compareTo(ColorEnum.RED) < 0);\n+        try {\n+            ColorEnum.RED.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+        try {\n+            ColorEnum.RED.compareTo(new Object());\n+            fail();\n+        } catch (ClassCastException ex) {}\n+    }\n+\n+    public void testEquals() {\n+        assertSame(ColorEnum.RED, ColorEnum.RED);\n+        assertSame(ColorEnum.getEnum(\"Red\"), ColorEnum.RED);\n+        assertEquals(false, ColorEnum.RED.equals(null));\n+        assertEquals(true, ColorEnum.RED.equals(ColorEnum.RED));\n+        assertEquals(true, ColorEnum.RED.equals(ColorEnum.getEnum(\"Red\")));\n+    }\n+\n+    public void testHashCode() {\n+        assertEquals(ColorEnum.RED.hashCode(), ColorEnum.RED.hashCode());\n+        assertEquals(7 + ColorEnum.class.hashCode() + 3 * \"Red\".hashCode(), ColorEnum.RED.hashCode());\n+    }\n+\n+    public void testToString() {\n+        String toString = ColorEnum.RED.toString();\n+        assertEquals(\"ColorEnum[Red]\", toString);\n+        assertSame(toString, ColorEnum.RED.toString());\n+    }\n+\n+    public void testIterator() {\n+        Iterator it = ColorEnum.iterator();\n+        assertSame(ColorEnum.RED, it.next());\n+        assertSame(ColorEnum.GREEN, it.next());\n+        assertSame(ColorEnum.BLUE, it.next());\n+    }\n+\n+    public void testList() {\n+        List list = new ArrayList(ColorEnum.getEnumList());\n+        \n+        assertNotNull(list);\n+        \n+        assertEquals( list.size(),\n+        \t\t\t\tColorEnum.getEnumMap().keySet().size());\n+        \n+        Iterator it = list.iterator();\n+        assertSame(ColorEnum.RED, it.next());\n+        assertSame(ColorEnum.GREEN, it.next());\n+        assertSame(ColorEnum.BLUE, it.next());\n+    }\n+\n+    public void testMap() {\n+        Map map = new HashMap(ColorEnum.getEnumMap());\n+        \n+        assertNotNull(map);\n+        assertTrue(map.containsValue(ColorEnum.RED));\n+        assertTrue(map.containsValue(ColorEnum.GREEN));\n+        assertTrue(map.containsValue(ColorEnum.BLUE));\n+        assertSame(ColorEnum.RED, map.get(\"Red\"));\n+        assertSame(ColorEnum.GREEN, map.get(\"Green\"));\n+        assertSame(ColorEnum.BLUE, map.get(\"Blue\"));\n+        assertEquals( map.keySet().size(),\n+                        ColorEnum.getEnumList().size());\n+    }\n+\n+    public void testGet() {\n+        assertSame(ColorEnum.RED, ColorEnum.getEnum(\"Red\"));\n+        assertSame(ColorEnum.GREEN, ColorEnum.getEnum(\"Green\"));\n+        assertSame(ColorEnum.BLUE, ColorEnum.getEnum(\"Blue\"));\n+        assertSame(null, ColorEnum.getEnum(\"Pink\"));\n+    }\n+\n+    public void testSerialization() {\n+        int hashCode = ColorEnum.RED.hashCode();\n+        assertSame(ColorEnum.RED, SerializationUtils.clone(ColorEnum.RED));\n+        assertEquals(hashCode, SerializationUtils.clone(ColorEnum.RED).hashCode());\n+        assertSame(ColorEnum.GREEN, SerializationUtils.clone(ColorEnum.GREEN));\n+        assertSame(ColorEnum.BLUE, SerializationUtils.clone(ColorEnum.BLUE));\n+    }\n+\n+    public void testBroken1() {\n+        try {\n+            Broken1Enum.RED.getName();\n+            fail();\n+        } catch (ExceptionInInitializerError ex) {\n+            assertTrue(ex.getException() instanceof IllegalArgumentException);\n+        }\n+    }\n+\n+    public void testBroken2() {\n+        try {\n+            Broken2Enum.RED.getName();\n+            fail();\n+        } catch (ExceptionInInitializerError ex) {\n+            assertTrue(ex.getException() instanceof IllegalArgumentException);\n+        }\n+    }\n+\n+    public void testBroken3() {\n+        try {\n+            Broken3Enum.RED.getName();\n+            fail();\n+        } catch (ExceptionInInitializerError ex) {\n+            assertTrue(ex.getException() instanceof IllegalArgumentException);\n+        }\n+    }\n+\n+    public void testBroken1Operation() {\n+        try {\n+            Broken1OperationEnum.PLUS.getName();\n+            fail();\n+        } catch (ExceptionInInitializerError ex) {\n+            assertTrue(ex.getException() instanceof IllegalArgumentException);\n+        }\n+    }\n+\n+    public void testBroken2Operation() {\n+        try {\n+            Broken2OperationEnum.PLUS.getName();\n+            fail();\n+        } catch (ExceptionInInitializerError ex) {\n+            assertTrue(ex.getException() instanceof IllegalArgumentException);\n+        }\n+    }\n+\n+    public void testBroken3Operation() {\n+        try {\n+            Broken3OperationEnum.PLUS.getName();\n+            fail();\n+        } catch (ExceptionInInitializerError ex) {\n+            assertTrue(ex.getException() instanceof IllegalArgumentException);\n+        }\n+    }\n+\n+    public void testBroken4Operation() {\n+        try {\n+            Broken4OperationEnum.PLUS.getName();\n+            fail();\n+        } catch (ExceptionInInitializerError ex) {\n+            assertTrue(ex.getException() instanceof IllegalArgumentException);\n+        }\n+    }\n+\n+    public void testBroken5Operation() {\n+        try {\n+            Broken5OperationEnum.PLUS.getName();\n+            fail();\n+        } catch (ExceptionInInitializerError ex) {\n+            assertTrue(ex.getException() instanceof IllegalArgumentException);\n+        }\n+    }\n+\n+    public void testOperationGet() {\n+        assertSame(OperationEnum.PLUS, OperationEnum.getEnum(\"Plus\"));\n+        assertSame(OperationEnum.MINUS, OperationEnum.getEnum(\"Minus\"));\n+        assertSame(null, OperationEnum.getEnum(\"Pink\"));\n+    }\n+\n+    public void testOperationSerialization() {\n+        assertSame(OperationEnum.PLUS, SerializationUtils.clone(OperationEnum.PLUS));\n+        assertSame(OperationEnum.MINUS, SerializationUtils.clone(OperationEnum.MINUS));\n+    }\n+\n+    public void testOperationToString() {\n+        assertEquals(\"OperationEnum[Plus]\", OperationEnum.PLUS.toString());\n+    }\n+\n+    public void testOperationList() {\n+        List list = OperationEnum.getEnumList();\n+        assertNotNull(list);\n+        assertEquals(2, list.size());\n+        assertEquals(list.size(), OperationEnum.getEnumMap().keySet().size());\n+        \n+        Iterator it = list.iterator();\n+        assertSame(OperationEnum.PLUS, it.next());\n+        assertSame(OperationEnum.MINUS, it.next());\n+    }\n+\n+    public void testOperationMap() {\n+        Map map = OperationEnum.getEnumMap();\n+        assertNotNull(map);\n+        assertEquals(map.keySet().size(), OperationEnum.getEnumList().size());\n+        \n+        assertTrue(map.containsValue(OperationEnum.PLUS));\n+        assertTrue(map.containsValue(OperationEnum.MINUS));\n+        assertSame(OperationEnum.PLUS, map.get(\"Plus\"));\n+        assertSame(OperationEnum.MINUS, map.get(\"Minus\"));\n+    }\n+\n+    public void testOperationCalculation() {\n+        assertEquals(3, OperationEnum.PLUS.eval(1, 2));\n+        assertEquals(-1, OperationEnum.MINUS.eval(1, 2));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testExtended1Get() {\n+        assertSame(Extended1Enum.ALPHA, Extended1Enum.getEnum(\"Alpha\"));\n+        assertSame(Extended1Enum.BETA, Extended1Enum.getEnum(\"Beta\"));\n+        assertSame(null, Extended1Enum.getEnum(\"Gamma\"));\n+        assertSame(null, Extended1Enum.getEnum(\"Delta\"));\n+    }\n+            \n+    public void testExtended2Get() {\n+        assertSame(Extended1Enum.ALPHA, Extended2Enum.ALPHA);\n+        assertSame(Extended1Enum.BETA, Extended2Enum.BETA);\n+        \n+        assertSame(Extended2Enum.ALPHA, Extended2Enum.getEnum(\"Alpha\"));\n+        assertSame(Extended2Enum.BETA, Extended2Enum.getEnum(\"Beta\"));\n+        assertSame(Extended2Enum.GAMMA, Extended2Enum.getEnum(\"Gamma\"));\n+        assertSame(null, Extended2Enum.getEnum(\"Delta\"));\n+    }\n+\n+    public void testExtended3Get() {\n+        assertSame(Extended2Enum.ALPHA, Extended3Enum.ALPHA);\n+        assertSame(Extended2Enum.BETA, Extended3Enum.BETA);\n+        assertSame(Extended2Enum.GAMMA, Extended3Enum.GAMMA);\n+        \n+        assertSame(Extended3Enum.ALPHA, Extended3Enum.getEnum(\"Alpha\"));\n+        assertSame(Extended3Enum.BETA, Extended3Enum.getEnum(\"Beta\"));\n+        assertSame(Extended3Enum.GAMMA, Extended3Enum.getEnum(\"Gamma\"));\n+        assertSame(Extended3Enum.DELTA, Extended3Enum.getEnum(\"Delta\"));\n+    }\n+\n+    public void testExtendedSerialization() {\n+        assertSame(Extended1Enum.ALPHA, SerializationUtils.clone(Extended1Enum.ALPHA));\n+        assertSame(Extended1Enum.BETA, SerializationUtils.clone(Extended1Enum.BETA));\n+        assertSame(Extended2Enum.GAMMA, SerializationUtils.clone(Extended2Enum.GAMMA));\n+        assertSame(Extended3Enum.DELTA, SerializationUtils.clone(Extended3Enum.DELTA));\n+    }\n+\n+    public void testExtendedToString() {\n+        assertEquals(\"Extended1Enum[Alpha]\", Extended1Enum.ALPHA.toString());\n+        assertEquals(\"Extended1Enum[Beta]\", Extended1Enum.BETA.toString());\n+        \n+        assertEquals(\"Extended1Enum[Alpha]\", Extended2Enum.ALPHA.toString());\n+        assertEquals(\"Extended1Enum[Beta]\", Extended2Enum.BETA.toString());\n+        assertEquals(\"Extended2Enum[Gamma]\", Extended2Enum.GAMMA.toString());\n+        \n+        assertEquals(\"Extended1Enum[Alpha]\", Extended3Enum.ALPHA.toString());\n+        assertEquals(\"Extended1Enum[Beta]\", Extended3Enum.BETA.toString());\n+        assertEquals(\"Extended2Enum[Gamma]\", Extended3Enum.GAMMA.toString());\n+        assertEquals(\"Extended3Enum[Delta]\", Extended3Enum.DELTA.toString());\n+    }\n+\n+    public void testExtended1List() {\n+        List list = Extended1Enum.getEnumList();\n+        assertNotNull(list);\n+        assertEquals(2, list.size());\n+        assertEquals(list.size(), Extended1Enum.getEnumMap().keySet().size());\n+        \n+        Iterator it = list.iterator();\n+        assertSame(Extended1Enum.ALPHA, it.next());\n+        assertSame(Extended1Enum.BETA, it.next());\n+    }\n+\n+    public void testExtended2List() {\n+        List list = Extended2Enum.getEnumList();\n+        assertNotNull(list);\n+        assertEquals(3, list.size());\n+        assertEquals(list.size(), Extended2Enum.getEnumMap().keySet().size());\n+        \n+        Iterator it = list.iterator();\n+        assertSame(Extended2Enum.ALPHA, it.next());\n+        assertSame(Extended2Enum.BETA, it.next());\n+        assertSame(Extended2Enum.GAMMA, it.next());\n+    }\n+\n+    public void testExtended3List() {\n+        List list = Extended3Enum.getEnumList();\n+        assertNotNull(list);\n+        assertEquals(4, list.size());\n+        assertEquals(list.size(), Extended3Enum.getEnumMap().keySet().size());\n+        \n+        Iterator it = list.iterator();\n+        assertSame(Extended3Enum.ALPHA, it.next());\n+        assertSame(Extended3Enum.BETA, it.next());\n+        assertSame(Extended3Enum.GAMMA, it.next());\n+        assertSame(Extended3Enum.DELTA, it.next());\n+    }\n+\n+    public void testExtended1Map() {\n+        Map map = Extended1Enum.getEnumMap();\n+        assertNotNull(map);\n+        assertEquals(map.keySet().size(), Extended1Enum.getEnumList().size());\n+        \n+        assertTrue(map.containsValue(Extended1Enum.ALPHA));\n+        assertTrue(map.containsValue(Extended1Enum.BETA));\n+        assertSame(Extended1Enum.ALPHA, map.get(\"Alpha\"));\n+        assertSame(Extended1Enum.BETA, map.get(\"Beta\"));\n+    }\n+\n+    public void testExtended2Map() {\n+        Map map = Extended2Enum.getEnumMap();\n+        assertNotNull(map);\n+        assertEquals(map.keySet().size(), Extended2Enum.getEnumList().size());\n+        \n+        assertTrue(map.containsValue(Extended2Enum.ALPHA));\n+        assertTrue(map.containsValue(Extended2Enum.BETA));\n+        assertTrue(map.containsValue(Extended2Enum.GAMMA));\n+        assertSame(Extended2Enum.ALPHA, map.get(\"Alpha\"));\n+        assertSame(Extended2Enum.BETA, map.get(\"Beta\"));\n+        assertSame(Extended2Enum.GAMMA, map.get(\"Gamma\"));\n+    }\n+\n+    public void testExtended3Map() {\n+        Map map = Extended3Enum.getEnumMap();\n+        assertNotNull(map);\n+        assertEquals(map.keySet().size(), Extended3Enum.getEnumList().size());\n+        \n+        assertTrue(map.containsValue(Extended3Enum.ALPHA));\n+        assertTrue(map.containsValue(Extended3Enum.BETA));\n+        assertTrue(map.containsValue(Extended3Enum.GAMMA));\n+        assertTrue(map.containsValue(Extended3Enum.DELTA));\n+        assertSame(Extended3Enum.ALPHA, map.get(\"Alpha\"));\n+        assertSame(Extended3Enum.BETA, map.get(\"Beta\"));\n+        assertSame(Extended3Enum.GAMMA, map.get(\"Gamma\"));\n+        assertSame(Extended3Enum.DELTA, map.get(\"Delta\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNested() {\n+        List list = new ArrayList(Nest.ColorEnum.getEnumList());\n+        assertEquals(3, list.size());  // all is well\n+        Iterator it = list.iterator();\n+        assertSame(Nest.ColorEnum.RED, it.next());\n+        assertSame(Nest.ColorEnum.GREEN, it.next());\n+        assertSame(Nest.ColorEnum.BLUE, it.next());\n+        // This nesting works because the enum constants are defined in the SAME\n+        // class as the getEnumList(). It just acts as a normal enum.\n+    }\n+\n+    public void testNestedBroken() {\n+        List list = new ArrayList(NestBroken.ColorEnum.getEnumList());\n+        try {\n+            assertEquals(0, list.size());  // no enums!!! \n+            // this is BROKEN because the enum constants are defined in a DIFFERENT\n+            // class from getEnumList(). Once NestBroken class is referenced,\n+            // and thus class loaded with its enum constants, the getEnumList works:\n+        } catch (AssertionFailedError ex) {\n+            // this actually works and isn't broken on Linux SunJDK1.4.1, so...\n+            assertEquals(3, list.size());\n+        }\n+        new NestBroken();\n+        list = new ArrayList(NestBroken.ColorEnum.getEnumList());\n+        assertEquals(3, list.size());  // all is well!!!\n+        Iterator it = list.iterator();\n+        assertSame(NestBroken.RED, it.next());\n+        assertSame(NestBroken.GREEN, it.next());\n+        assertSame(NestBroken.BLUE, it.next());\n+    }\n+\n+    public void testNestedLinked() {\n+        List list = new ArrayList(NestLinked.ColorEnum.getEnumList());\n+        assertEquals(3, list.size());  // all is well\n+        Iterator it = list.iterator();\n+        assertSame(NestLinked.RED, it.next());\n+        assertSame(NestLinked.GREEN, it.next());\n+        assertSame(NestLinked.BLUE, it.next());\n+        // This nesting works because a static block in the enum class forces a\n+        // class load of the outer class which defines the enum constants.\n+    }\n+\n+    public void testNestedReferenced() {\n+        List list = new ArrayList(NestReferenced.ColorEnum.getEnumList());\n+        assertEquals(3, list.size());  // all is well\n+        Iterator it = list.iterator();\n+        assertSame(NestReferenced.RED, it.next());\n+        assertSame(NestReferenced.GREEN, it.next());\n+        assertSame(NestReferenced.BLUE, it.next());\n+        // This nesting works because the enum constants are actually defined in\n+        // the SAME class as the getEnumList(). The references in the outer class\n+        // are just extra references.\n+    }\n+    \n+    public void testColorEnumEqualsWithDifferentClassLoaders() throws SecurityException, IllegalArgumentException,\n+            ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {\n+        this.testEqualsTrueWithDifferentClassLoaders(ColorEnum.BLUE);\n+        this.testEqualsTrueWithDifferentClassLoaders(ColorEnum.GREEN);\n+        this.testEqualsTrueWithDifferentClassLoaders(ColorEnum.RED);\n+    }\n+\n+    void testEqualsTrueWithDifferentClassLoaders(ColorEnum colorEnum) throws ClassNotFoundException, SecurityException,\n+            NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {\n+        // Sanity checks:\n+        assertTrue(colorEnum.equals(colorEnum));\n+        assertNotNull(ColorEnum.class.getClassLoader());\n+        // set up:\n+        ClassLoader classLoader = ClassUtilsTest.newSystemClassLoader();\n+        Object enumObjectFromOtherClassLoader = this.getColorEnum(classLoader, colorEnum.getName());\n+        // the real test, part 1.\n+        try {\n+            ColorEnum testCase = (ColorEnum) enumObjectFromOtherClassLoader;\n+            fail(\"Should have thrown a ClassCastException for \" + testCase);\n+        } catch (ClassCastException e) {\n+            // normal.\n+        }\n+        // the real test, part 2.\n+        assertEquals(\"The two objects should match even though they are from different class loaders\", colorEnum,\n+                enumObjectFromOtherClassLoader);\n+        // the real test, part 3.\n+        int falseCount = 0;\n+        for (Iterator iter = ColorEnum.iterator(); iter.hasNext();) {\n+            ColorEnum element = (ColorEnum) iter.next();\n+            if (!colorEnum.equals(element)) {\n+                falseCount++;\n+                assertFalse(enumObjectFromOtherClassLoader.equals(element));\n+            }\n+        }\n+        assertEquals(ColorEnum.getEnumList().size() - 1, falseCount);\n+    }\n+\n+    Object getColorEnum(ClassLoader classLoader, String color) throws ClassNotFoundException, SecurityException,\n+            NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {\n+        // Sanity check:\n+        ColorEnum.RED.equals(ColorEnum.RED);\n+        assertNotNull(ColorEnum.class.getClassLoader());\n+        // set up:\n+        assertNotNull(classLoader);\n+        assertFalse(classLoader.equals(ColorEnum.class.getClassLoader()));\n+        Class otherColorEnumClass = classLoader.loadClass(\"org.apache.commons.lang.enums.ColorEnum\");\n+        assertNotNull(otherColorEnumClass);\n+        assertNotNull(otherColorEnumClass.getClassLoader());\n+        assertTrue(classLoader.equals(otherColorEnumClass.getClassLoader()));\n+        assertFalse(otherColorEnumClass.getClassLoader().equals(ColorEnum.class.getClassLoader()));\n+        Method method = otherColorEnumClass.getMethod(\"getEnum\", new Class[]{String.class});\n+        Object enumObject = method.invoke(otherColorEnumClass, new Object[]{color});\n+        assertNotNull(enumObject);\n+        assertFalse(ColorEnum.class.equals(enumObject.getClass()));\n+        assertFalse(ColorEnum.class == enumObject.getClass());\n+        return enumObject;\n+    }\n+\n+    public void testEqualsToWrongInstance() {\n+        for (Iterator iter = ColorEnum.iterator(); iter.hasNext();) {\n+            ColorEnum element = (ColorEnum) iter.next();\n+            this.testEqualsToWrongInstance(element);\n+        }\n+    }\n+\n+    void testEqualsToWrongInstance(ColorEnum colorEnum) {\n+        assertEquals(false, colorEnum.equals(\"test\"));\n+        assertEquals(false, colorEnum.equals(new Integer(1)));\n+        assertEquals(false, colorEnum.equals(new Boolean(true)));\n+        assertEquals(false, colorEnum.equals(new StringBuffer(\"test\")));\n+        assertEquals(false, colorEnum.equals(new Object()));\n+        assertEquals(false, colorEnum.equals(null));\n+        assertEquals(false, colorEnum.equals(\"\"));\n+        assertEquals(false, colorEnum.equals(ColorEnum.getEnum(null)));\n+        assertEquals(false, colorEnum.equals(ColorEnum.getEnum(\"\")));\n+        assertEquals(false, colorEnum.equals(ColorEnum.getEnum(\"This ColorEnum does not exist.\")));\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enums/EnumTestSuite.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.enums;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Test suite for the Enum package.\n+ *\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: EnumTestSuite.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ */\n+public class EnumTestSuite extends TestCase {\n+    \n+    /**\n+     * Construct a new instance.\n+     */\n+    public EnumTestSuite(String name) {\n+        super(name);\n+    }\n+\n+    /**\n+     * Command-line interface.\n+     */\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    /**\n+     * Get the suite of tests\n+     */\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite();\n+        suite.setName(\"Commons-Lang-Enum Tests\");\n+        suite.addTest(EnumTest.suite());\n+        suite.addTest(EnumUtilsTest.suite());\n+        suite.addTest(ValuedEnumTest.suite());\n+        return suite;\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enums/EnumUtilsTest.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.enums;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test cases for the {@link Enum} class.\n+ *\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: EnumUtilsTest.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ */\n+\n+public final class EnumUtilsTest extends TestCase {\n+\n+    public EnumUtilsTest(String name) {\n+        super(name);\n+    }\n+\n+    public void setUp() {\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(EnumUtilsTest.class);\n+        suite.setName(\"EnumUtils Tests\");\n+        return suite;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor() {\n+        assertNotNull(new EnumUtils());\n+        Constructor[] cons = EnumUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(EnumUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(EnumUtils.class.getModifiers()));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIterator() {\n+        Iterator it = EnumUtils.iterator(ColorEnum.class);\n+        assertSame(ColorEnum.RED, it.next());\n+        assertSame(ColorEnum.GREEN, it.next());\n+        assertSame(ColorEnum.BLUE, it.next());\n+        it = EnumUtils.iterator(DummyEnum.class);\n+        assertEquals(false, it.hasNext());\n+    }\n+\n+    public void testIteratorEx() {\n+        try {\n+            EnumUtils.iterator(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            EnumUtils.iterator(Object.class);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testList() {\n+        List list = EnumUtils.getEnumList(ColorEnum.class);\n+        Iterator it = list.iterator();\n+        assertSame(ColorEnum.RED, it.next());\n+        assertSame(ColorEnum.GREEN, it.next());\n+        assertSame(ColorEnum.BLUE, it.next());\n+        list = EnumUtils.getEnumList(DummyEnum.class);\n+        assertEquals(0, list.size());\n+    }\n+\n+    public void testListEx() {\n+        try {\n+            EnumUtils.getEnumList(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            EnumUtils.getEnumList(Object.class);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMap() {\n+        Map map = EnumUtils.getEnumMap(ColorEnum.class);\n+        assertTrue(map.containsValue(ColorEnum.RED));\n+        assertTrue(map.containsValue(ColorEnum.GREEN));\n+        assertTrue(map.containsValue(ColorEnum.BLUE));\n+        assertSame(ColorEnum.RED, map.get(\"Red\"));\n+        assertSame(ColorEnum.GREEN, map.get(\"Green\"));\n+        assertSame(ColorEnum.BLUE, map.get(\"Blue\"));\n+        map = EnumUtils.getEnumMap(DummyEnum.class);\n+        assertEquals(0, map.size());\n+    }\n+\n+    public void testMapEx() {\n+        try {\n+            EnumUtils.getEnumMap(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            EnumUtils.getEnumMap(Object.class);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGet() {\n+        assertSame(ColorEnum.RED, EnumUtils.getEnum(ColorEnum.class, \"Red\"));\n+        assertSame(ColorEnum.GREEN, EnumUtils.getEnum(ColorEnum.class, \"Green\"));\n+        assertSame(ColorEnum.BLUE, EnumUtils.getEnum(ColorEnum.class, \"Blue\"));\n+        assertSame(null, EnumUtils.getEnum(ColorEnum.class, \"Pink\"));\n+        assertSame(null, EnumUtils.getEnum(DummyEnum.class, \"Pink\"));\n+    }\n+\n+    public void testGetEx() {\n+        try {\n+            EnumUtils.getEnum(null, \"\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            EnumUtils.getEnum(Object.class, \"Red\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetValue() {\n+        assertSame(ValuedColorEnum.RED, EnumUtils.getEnum(ValuedColorEnum.class, 1));\n+        assertSame(ValuedColorEnum.GREEN, EnumUtils.getEnum(ValuedColorEnum.class, 2));\n+        assertSame(ValuedColorEnum.BLUE, EnumUtils.getEnum(ValuedColorEnum.class, 3));\n+        assertSame(null, EnumUtils.getEnum(ValuedColorEnum.class, 4));\n+        assertSame(null, EnumUtils.getEnum(DummyEnum.class, 5));\n+    }\n+\n+    public void testGetValueEx() {\n+        try {\n+            EnumUtils.getEnum(null, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            EnumUtils.getEnum(Object.class, 2);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enums/Extended1Enum.java\n+/*\n+ * Copyright 2003,2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.enums;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Base extended enumeration.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: Extended1Enum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ */\n+public class Extended1Enum extends Enum {\n+    public static final Extended1Enum ALPHA = new Extended1Enum(\"Alpha\");\n+    public static final Extended1Enum BETA = new Extended1Enum(\"Beta\");\n+\n+    protected Extended1Enum(String name) {\n+        super(name);\n+    }\n+\n+    public static Extended1Enum getEnum(String name) {\n+        return (Extended1Enum) getEnum(Extended1Enum.class, name);\n+    }\n+\n+    public static Map getEnumMap() {\n+        return getEnumMap(Extended1Enum.class);\n+    }\n+\n+    public static List getEnumList() {\n+        return getEnumList(Extended1Enum.class);\n+    }\n+\n+    public static Iterator iterator() {\n+        return iterator(Extended1Enum.class);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enums/Extended2Enum.java\n+/*\n+ * Copyright 2003,2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.enums;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Extended enumeration.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: Extended2Enum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ */\n+public class Extended2Enum extends Extended1Enum {\n+    public static final Extended1Enum GAMMA = new Extended2Enum(\"Gamma\");\n+\n+    protected Extended2Enum(String color) {\n+        super(color);\n+    }\n+\n+    public static Extended1Enum getEnum(String name) {\n+        return (Extended1Enum) getEnum(Extended2Enum.class, name);\n+    }\n+\n+    public static Map getEnumMap() {\n+        return getEnumMap(Extended2Enum.class);\n+    }\n+\n+    public static List getEnumList() {\n+        return getEnumList(Extended2Enum.class);\n+    }\n+\n+    public static Iterator iterator() {\n+        return iterator(Extended2Enum.class);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enums/Extended3Enum.java\n+/*\n+ * Copyright 2003,2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.enums;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Extended enumeration.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: Extended3Enum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ */\n+public class Extended3Enum extends Extended2Enum {\n+    public static final Extended1Enum DELTA = new Extended3Enum(\"Delta\");\n+\n+    protected Extended3Enum(String name) {\n+        super(name);\n+    }\n+\n+    public static Extended1Enum getEnum(String name) {\n+        return (Extended1Enum) Enum.getEnum(Extended3Enum.class, name);\n+    }\n+\n+    public static Map getEnumMap() {\n+        return Enum.getEnumMap(Extended3Enum.class);\n+    }\n+\n+    public static List getEnumList() {\n+        return Enum.getEnumList(Extended3Enum.class);\n+    }\n+\n+    public static Iterator iterator() {\n+        return Enum.iterator(Extended3Enum.class);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enums/Nest.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.enums;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Color enumeration demonstrating a normal simple nesting case.\n+ * All is well here as the nested enum class is really no different\n+ * to any other class.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: Nest.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ */\n+\n+public final class Nest {\n+    \n+    public Nest() {\n+        super();\n+    }\n+    \n+    public static final class ColorEnum extends Enum {\n+        public static final ColorEnum RED = new ColorEnum(\"Red\");\n+        public static final ColorEnum GREEN = new ColorEnum(\"Green\");\n+        public static final ColorEnum BLUE = new ColorEnum(\"Blue\");\n+\n+        private ColorEnum(String color) {\n+            super(color);\n+        }\n+\n+        public static ColorEnum getEnum(String color) {\n+            return (ColorEnum) getEnum(ColorEnum.class, color);\n+        }\n+\n+        public static Map getEnumMap() {\n+            return getEnumMap(ColorEnum.class);\n+        }\n+\n+        public static List getEnumList() {\n+            return getEnumList(ColorEnum.class);\n+        }\n+\n+        public static Iterator iterator() {\n+            return iterator(ColorEnum.class);\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enums/NestBroken.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.enums;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Color enumeration which demonstrates how to break the enum system.\n+ * <p>\n+ * The class loader sees the two classes here as independent - the enum\n+ * class is nested, not an inner class. Calling getEnumList() on ColorEnum\n+ * will return an empty list, unless and until the NestBroken class is\n+ * referenced.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: NestBroken.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ */\n+\n+public final class NestBroken {\n+    \n+    public static final ColorEnum RED = new ColorEnum(\"Red\");\n+    public static final ColorEnum GREEN = new ColorEnum(\"Green\");\n+    public static final ColorEnum BLUE = new ColorEnum(\"Blue\");\n+    \n+    public NestBroken() {\n+        super();\n+    }\n+    \n+    public static final class ColorEnum extends Enum {\n+\n+        private ColorEnum(String color) {\n+            super(color);\n+        }\n+\n+        public static ColorEnum getEnum(String color) {\n+            return (ColorEnum) getEnum(ColorEnum.class, color);\n+        }\n+\n+        public static Map getEnumMap() {\n+            return getEnumMap(ColorEnum.class);\n+        }\n+\n+        public static List getEnumList() {\n+            return getEnumList(ColorEnum.class);\n+        }\n+\n+        public static Iterator iterator() {\n+            return iterator(ColorEnum.class);\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enums/NestLinked.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.enums;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Color enumeration which demonstrates how to define the constants in a\n+ * different class to the Enum. The extra <code>static{}</code> block is\n+ * needed to ensure that the enum constants are created before the\n+ * static methods on the ColorEnum are used.\n+ * <p>\n+ * The class loader sees the two classes here as independent - the enum\n+ * class is nested, not an inner class. The static block thus forces the\n+ * class load of the outer class, which is needed to initialise the enums.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: NestLinked.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ */\n+\n+public final class NestLinked {\n+    \n+    public static final ColorEnum RED = new ColorEnum(\"Red\");\n+    public static final ColorEnum GREEN = new ColorEnum(\"Green\");\n+    public static final ColorEnum BLUE = new ColorEnum(\"Blue\");\n+    \n+    public NestLinked() {\n+        super();\n+    }\n+    \n+    public static final class ColorEnum extends Enum {\n+\n+        static {\n+            // Explicitly reference the class where the enums are defined\n+            Object obj = NestLinked.RED;\n+        }\n+        \n+        private ColorEnum(String color) {\n+            super(color);\n+        }\n+\n+        public static ColorEnum getEnum(String color) {\n+            return (ColorEnum) getEnum(ColorEnum.class, color);\n+        }\n+\n+        public static Map getEnumMap() {\n+            return getEnumMap(ColorEnum.class);\n+        }\n+\n+        public static List getEnumList() {\n+            return getEnumList(ColorEnum.class);\n+        }\n+\n+        public static Iterator iterator() {\n+            return iterator(ColorEnum.class);\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enums/NestReferenced.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.enums;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Color enumeration which demonstrates how to provide a view of the constants\n+ * in a different class to the Enum. This technique is the safest, however it\n+ * is obviously inconvenient as it involves defining two sets of constants.\n+ * See NestedLinked for an alternative.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: NestReferenced.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ */\n+\n+public final class NestReferenced {\n+    \n+    public static final ColorEnum RED = ColorEnum.RED;\n+    public static final ColorEnum GREEN = ColorEnum.GREEN;\n+    public static final ColorEnum BLUE = ColorEnum.BLUE;\n+    \n+    public NestReferenced() {\n+        super();\n+    }\n+    \n+    public static final class ColorEnum extends Enum {\n+\n+        // must be defined here, not just in outer class\n+        private static final ColorEnum RED = new ColorEnum(\"Red\");\n+        private static final ColorEnum GREEN = new ColorEnum(\"Green\");\n+        private static final ColorEnum BLUE = new ColorEnum(\"Blue\");\n+        \n+        private ColorEnum(String color) {\n+            super(color);\n+        }\n+\n+        public static ColorEnum getEnum(String color) {\n+            return (ColorEnum) getEnum(ColorEnum.class, color);\n+        }\n+\n+        public static Map getEnumMap() {\n+            return getEnumMap(ColorEnum.class);\n+        }\n+\n+        public static List getEnumList() {\n+            return getEnumList(ColorEnum.class);\n+        }\n+\n+        public static Iterator iterator() {\n+            return iterator(ColorEnum.class);\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enums/OperationEnum.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.enums;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Operator enumeration.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: OperationEnum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ */\n+public abstract class OperationEnum extends Enum {\n+    // This syntax works for JDK 1.3 and upwards:\n+//    public static final OperationEnum PLUS = new OperationEnum(\"Plus\") {\n+//        public int eval(int a, int b) {\n+//            return (a + b);\n+//        }\n+//    };\n+//    public static final OperationEnum MINUS = new OperationEnum(\"Minus\") {\n+//        public int eval(int a, int b) {\n+//            return (a - b);\n+//        }\n+//    };\n+    // This syntax works for JDK 1.2 and upwards:\n+    public static final OperationEnum PLUS = new PlusOperation();\n+    private static class PlusOperation extends OperationEnum {\n+        private PlusOperation() {\n+            super(\"Plus\");\n+        }\n+        public int eval(int a, int b) {\n+            return (a + b);\n+        }\n+    }\n+    public static final OperationEnum MINUS = new MinusOperation();\n+    private static class MinusOperation extends OperationEnum {\n+        private MinusOperation() {\n+            super(\"Minus\");\n+        }\n+        public int eval(int a, int b) {\n+            return (a - b);\n+        }\n+    }\n+\n+    private OperationEnum(String name) {\n+        super(name);\n+    }\n+    \n+    public final Class getEnumClass() {\n+        return OperationEnum.class;\n+    }\n+\n+    public abstract int eval(int a, int b);\n+\n+    public static OperationEnum getEnum(String name) {\n+        return (OperationEnum) getEnum(OperationEnum.class, name);\n+    }\n+\n+    public static Map getEnumMap() {\n+        return getEnumMap(OperationEnum.class);\n+    }\n+\n+    public static List getEnumList() {\n+        return getEnumList(OperationEnum.class);\n+    }\n+\n+    public static Iterator iterator() {\n+        return iterator(OperationEnum.class);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enums/ValuedColorEnum.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.enums;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Color enumeration.\n+ *\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: ValuedColorEnum.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ */\n+\n+public final class ValuedColorEnum extends ValuedEnum {\n+    public static final ValuedColorEnum RED = new ValuedColorEnum(\"Red\", 1);\n+    public static final ValuedColorEnum GREEN = new ValuedColorEnum(\"Green\", 2);\n+    public static final ValuedColorEnum BLUE = new ValuedColorEnum(\"Blue\", 3);\n+\n+    private ValuedColorEnum(String color, int value) {\n+        super(color, value);\n+    }\n+\n+    public static ValuedColorEnum getEnum(String color) {\n+        return (ValuedColorEnum) getEnum(ValuedColorEnum.class, color);\n+    }\n+\n+    public static ValuedColorEnum getEnum(int value) {\n+        return (ValuedColorEnum) getEnum(ValuedColorEnum.class, value);\n+    }\n+\n+    public static Map getEnumMap() {\n+        return getEnumMap(ValuedColorEnum.class);\n+    }\n+\n+    public static List getEnumList() {\n+        return getEnumList(ValuedColorEnum.class);\n+    }\n+\n+    public static Iterator iterator() {\n+        return iterator(ValuedColorEnum.class);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enums/ValuedEnumTest.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.enums;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import org.apache.commons.lang.SerializationUtils;\n+\n+/**\n+ * Test cases for the {@link Enum} class.\n+ *\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: ValuedEnumTest.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ */\n+\n+public final class ValuedEnumTest extends TestCase {\n+\n+    public ValuedEnumTest(String name) {\n+        super(name);\n+    }\n+\n+    public void setUp() {\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(ValuedEnumTest.class);\n+        suite.setName(\"ValuedEnum Tests\");\n+        return suite;\n+    }\n+\n+    public void testName() {\n+        assertEquals(\"Red\", ValuedColorEnum.RED.getName());\n+        assertEquals(\"Green\", ValuedColorEnum.GREEN.getName());\n+        assertEquals(\"Blue\", ValuedColorEnum.BLUE.getName());\n+    }\n+\n+    public void testValue() {\n+        assertEquals(1, ValuedColorEnum.RED.getValue());\n+        assertEquals(2, ValuedColorEnum.GREEN.getValue());\n+        assertEquals(3, ValuedColorEnum.BLUE.getValue());\n+    }\n+\n+    public void testCompareTo() {\n+        assertTrue(ValuedColorEnum.BLUE.compareTo(ValuedColorEnum.BLUE) == 0);\n+        assertTrue(ValuedColorEnum.RED.compareTo(ValuedColorEnum.BLUE) < 0);\n+        assertTrue(ValuedColorEnum.BLUE.compareTo(ValuedColorEnum.RED) > 0);\n+    }\n+\n+    public void testEquals() {\n+        assertSame(ValuedColorEnum.RED, ValuedColorEnum.RED);\n+        assertSame(ValuedColorEnum.getEnum(\"Red\"), ValuedColorEnum.RED);\n+    }\n+\n+    public void testToString() {\n+        String toString = ValuedColorEnum.RED.toString();\n+        assertEquals(\"ValuedColorEnum[Red=1]\", toString);\n+        assertSame(toString, ValuedColorEnum.RED.toString());\n+    }\n+\n+    public void testIterator() {\n+        Iterator it = ValuedColorEnum.iterator();\n+        assertSame(ValuedColorEnum.RED, it.next());\n+        assertSame(ValuedColorEnum.GREEN, it.next());\n+        assertSame(ValuedColorEnum.BLUE, it.next());\n+    }\n+\n+    public void testList() {\n+        List list = ValuedColorEnum.getEnumList();\n+        \n+        assertNotNull(list);\n+        \n+        assertEquals( list.size(),\n+        \t\t\t ValuedColorEnum.getEnumMap().keySet().size());\n+        \n+        Iterator it = list.iterator();\n+        assertSame(ValuedColorEnum.RED, it.next());\n+        assertSame(ValuedColorEnum.GREEN, it.next());\n+        assertSame(ValuedColorEnum.BLUE, it.next());\n+    }\n+\n+    public void testMap() {\n+        Map map = ValuedColorEnum.getEnumMap();\n+        \n+        assertNotNull(map);\n+        \n+        assertEquals( map.keySet().size(),\n+        \t\t\t ValuedColorEnum.getEnumList().size());\n+        \t\t\t \n+        assertTrue(map.containsValue(ValuedColorEnum.RED));\n+        assertTrue(map.containsValue(ValuedColorEnum.GREEN));\n+        assertTrue(map.containsValue(ValuedColorEnum.BLUE));\n+        assertSame(ValuedColorEnum.RED, map.get(\"Red\"));\n+        assertSame(ValuedColorEnum.GREEN, map.get(\"Green\"));\n+        assertSame(ValuedColorEnum.BLUE, map.get(\"Blue\"));\n+    }\n+\n+    public void testGet() {\n+        assertSame(ValuedColorEnum.RED, ValuedColorEnum.getEnum(\"Red\"));\n+        assertSame(ValuedColorEnum.GREEN, ValuedColorEnum.getEnum(\"Green\"));\n+        assertSame(ValuedColorEnum.BLUE, ValuedColorEnum.getEnum(\"Blue\"));\n+        assertSame(null, ValuedColorEnum.getEnum(\"Pink\"));\n+    }\n+\n+    public void testGetValue() {\n+        assertSame(ValuedColorEnum.RED, ValuedColorEnum.getEnum(1));\n+        assertSame(ValuedColorEnum.GREEN, ValuedColorEnum.getEnum(2));\n+        assertSame(ValuedColorEnum.BLUE, ValuedColorEnum.getEnum(3));\n+        assertSame(null, ValuedColorEnum.getEnum(4));\n+    }\n+\n+    public void testSerialization() {\n+        assertSame(ValuedColorEnum.RED, SerializationUtils.clone(ValuedColorEnum.RED));\n+        assertSame(ValuedColorEnum.GREEN, SerializationUtils.clone(ValuedColorEnum.GREEN));\n+        assertSame(ValuedColorEnum.BLUE, SerializationUtils.clone(ValuedColorEnum.BLUE));\n+    }\n+\n+}", "timestamp": 1077510860, "metainfo": ""}