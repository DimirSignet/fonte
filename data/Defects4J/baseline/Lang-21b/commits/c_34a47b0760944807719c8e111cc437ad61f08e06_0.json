{"sha": "34a47b0760944807719c8e111cc437ad61f08e06", "log": "Tab police  ", "commit": "\n--- a/src/pending/CalendarUtilsTest.java\n+++ b/src/pending/CalendarUtilsTest.java\n     }\n \n     public static Test suite() {\n-    \tTestSuite suite = new TestSuite(CalendarUtilsTest.class);\n-    \tsuite.setName(\"CalendarUtilsTest Tests\");\n+        TestSuite suite = new TestSuite(CalendarUtilsTest.class);\n+        suite.setName(\"CalendarUtilsTest Tests\");\n         return suite;\n     }\n \n--- a/src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java\n+++ b/src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java\n         return suite;\n     }\n \n-\tprivate static final int months = 7;   // second final prime before 12\n-\tprivate static final int days = 23;    // second final prime before 31 (and valid)\n-\tprivate static final int hours = 19;   // second final prime before 24\n-\tprivate static final int minutes = 53; // second final prime before 60\n-\tprivate static final int seconds = 47; // third final prime before 60\n-\tprivate static final int millis = 991; // second final prime before 1000\n-\n-\tprivate Date aDate;\n-\tprivate Calendar aCalendar;\n-\n-\t@Override\n+    private static final int months = 7;   // second final prime before 12\n+    private static final int days = 23;    // second final prime before 31 (and valid)\n+    private static final int hours = 19;   // second final prime before 24\n+    private static final int minutes = 53; // second final prime before 60\n+    private static final int seconds = 47; // third final prime before 60\n+    private static final int millis = 991; // second final prime before 1000\n+\n+    private Date aDate;\n+    private Calendar aCalendar;\n+\n+    @Override\n     protected void setUp() {\n-\t\taCalendar = Calendar.getInstance();\n-\t\taCalendar.set(2005, months, days, hours, minutes, seconds);\n-\t\taCalendar.set(Calendar.MILLISECOND, millis);\n-\t\taDate = aCalendar.getTime();\n-\t}\n-\t\n-\tpublic void testNullDate() {\n-\t\ttry {\n-\t\t\tDateUtils.getFragmentInMilliseconds((Date) null, Calendar.MILLISECOND);\n-\t\t\tfail();\n-\t\t} catch(IllegalArgumentException iae) {}\n-\n-\t\ttry {\n-\t\t\tDateUtils.getFragmentInSeconds((Date) null, Calendar.MILLISECOND);\n-\t\t\tfail();\n-\t\t} catch(IllegalArgumentException iae) {}\n-\n-\t\ttry {\n-\t\t\tDateUtils.getFragmentInMinutes((Date) null, Calendar.MILLISECOND);\n-\t\t\tfail();\n-\t\t} catch(IllegalArgumentException iae) {}\n-\n-\t\ttry {\n-\t\t\tDateUtils.getFragmentInHours((Date) null, Calendar.MILLISECOND);\n-\t\t\tfail();\n-\t\t} catch(IllegalArgumentException iae) {}\n-\n-\t\ttry {\n-\t\t\tDateUtils.getFragmentInDays((Date) null, Calendar.MILLISECOND);\n-\t\t\tfail();\n-\t\t} catch(IllegalArgumentException iae) {}\n-\t}\n-\n-\tpublic void testNullCalendar() {\n-\t\ttry {\n-\t\t\tDateUtils.getFragmentInMilliseconds((Calendar) null, Calendar.MILLISECOND);\n-\t\t\tfail();\n-\t\t} catch(IllegalArgumentException iae) {}\n-\n-\t\ttry {\n-\t\t\tDateUtils.getFragmentInSeconds((Calendar) null, Calendar.MILLISECOND);\n-\t\t\tfail();\n-\t\t} catch(IllegalArgumentException iae) {}\n-\n-\t\ttry {\n-\t\t\tDateUtils.getFragmentInMinutes((Calendar) null, Calendar.MILLISECOND);\n-\t\t\tfail();\n-\t\t} catch(IllegalArgumentException iae) {}\n-\n-\t\ttry {\n-\t\t\tDateUtils.getFragmentInHours((Calendar) null, Calendar.MILLISECOND);\n-\t\t\tfail();\n-\t\t} catch(IllegalArgumentException iae) {}\n-\n-\t\ttry {\n-\t\t\tDateUtils.getFragmentInDays((Calendar) null, Calendar.MILLISECOND);\n-\t\t\tfail();\n-\t\t} catch(IllegalArgumentException iae) {}\n-\t}\n-\t\n-\tpublic void testInvalidFragmentWithDate() {\n-\t\ttry {\n-\t\t\tDateUtils.getFragmentInMilliseconds(aDate, 0);\n-\t\t\tfail();\n-\t\t} catch(IllegalArgumentException iae) {}\n-\n-\t\ttry {\n-\t\t\tDateUtils.getFragmentInSeconds(aDate, 0);\n-\t\t\tfail();\n-\t\t} catch(IllegalArgumentException iae) {}\n-\n-\t\ttry {\n-\t\t\tDateUtils.getFragmentInMinutes(aDate, 0);\n-\t\t\tfail();\n-\t\t} catch(IllegalArgumentException iae) {}\n-\n-\t\ttry {\n-\t\t\tDateUtils.getFragmentInHours(aDate, 0);\n-\t\t\tfail();\n-\t\t} catch(IllegalArgumentException iae) {}\n-\n-\t\ttry {\n-\t\t\tDateUtils.getFragmentInDays(aDate, 0);\n-\t\t\tfail();\n-\t\t} catch(IllegalArgumentException iae) {}\n-\t}\n-\n-\tpublic void testInvalidFragmentWithCalendar() {\n-\t\ttry {\n-\t\t\tDateUtils.getFragmentInMilliseconds(aCalendar, 0);\n-\t\t\tfail();\n-\t\t} catch(IllegalArgumentException iae) {}\n-\n-\t\ttry {\n-\t\t\tDateUtils.getFragmentInSeconds(aCalendar, 0);\n-\t\t\tfail();\n-\t\t} catch(IllegalArgumentException iae) {}\n-\n-\t\ttry {\n-\t\t\tDateUtils.getFragmentInMinutes(aCalendar, 0);\n-\t\t\tfail();\n-\t\t} catch(IllegalArgumentException iae) {}\n-\n-\t\ttry {\n-\t\t\tDateUtils.getFragmentInHours(aCalendar, 0);\n-\t\t\tfail();\n-\t\t} catch(IllegalArgumentException iae) {}\n-\n-\t\ttry {\n-\t\t\tDateUtils.getFragmentInDays(aCalendar, 0);\n-\t\t\tfail();\n-\t\t} catch(IllegalArgumentException iae) {}\n-\t}\n-\n-\tpublic void testMillisecondFragmentInLargerUnitWithDate() {\n-\t\tassertEquals(0, DateUtils.getFragmentInMilliseconds(aDate, Calendar.MILLISECOND));\n-\t\tassertEquals(0, DateUtils.getFragmentInSeconds(aDate, Calendar.MILLISECOND));\n-\t\tassertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MILLISECOND));\n-\t\tassertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MILLISECOND));\n-\t\tassertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MILLISECOND));\n-\t}\n-\n-\tpublic void testMillisecondFragmentInLargerUnitWithCalendar() {\n-\t\tassertEquals(0, DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MILLISECOND));\n-\t\tassertEquals(0, DateUtils.getFragmentInSeconds(aCalendar, Calendar.MILLISECOND));\n-\t\tassertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.MILLISECOND));\n-\t\tassertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.MILLISECOND));\n-\t\tassertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.MILLISECOND));\n-\t}\n-\t\n-\tpublic void testSecondFragmentInLargerUnitWithDate() {\n-\t\tassertEquals(0, DateUtils.getFragmentInSeconds(aDate, Calendar.SECOND));\n-\t\tassertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.SECOND));\n-\t\tassertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.SECOND));\n-\t\tassertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.SECOND));\n-\t}\n-\n-\tpublic void testSecondFragmentInLargerUnitWithCalendar() {\n-\t\tassertEquals(0, DateUtils.getFragmentInSeconds(aCalendar, Calendar.SECOND));\n-\t\tassertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.SECOND));\n-\t\tassertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.SECOND));\n-\t\tassertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.SECOND));\n-\t}\n-\t\n-\tpublic void testMinuteFragmentInLargerUnitWithDate() {\n-\t\tassertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE));\n-\t\tassertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE));\n-\t\tassertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE));\n-\t}\n-\n-\tpublic void testMinuteFragmentInLargerUnitWithCalendar() {\n-\t\tassertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.MINUTE));\n-\t\tassertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.MINUTE));\n-\t\tassertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.MINUTE));\n-\t}\n-\n-\tpublic void testHourOfDayFragmentInLargerUnitWithDate() {\n-\t\tassertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.HOUR_OF_DAY));\n-\t\tassertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.HOUR_OF_DAY));\n-\t}\n-\n-\tpublic void testHourOfDayFragmentInLargerUnitWithCalendar() {\n-\t\tassertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.HOUR_OF_DAY));\n-\t\tassertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.HOUR_OF_DAY));\n-\t}\n-\n-\tpublic void testDayOfYearFragmentInLargerUnitWithDate() {\n-\t\tassertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.DAY_OF_YEAR));\n-\t}\n-\n-\tpublic void testDayOfYearFragmentInLargerUnitWithCalendar() {\n-\t\tassertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DAY_OF_YEAR));\n-\t}\n-\n-\tpublic void testDateFragmentInLargerUnitWithDate() {\n-\t\tassertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.DATE));\n-\t}\n-\n-\tpublic void testDateFragmentInLargerUnitWithCalendar() {\n-\t\tassertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DATE));\n-\t}\n-\n-\t//Calendar.SECOND as useful fragment\n-\t\n-\tpublic void testMillisecondsOfSecondWithDate() {\n-\t\tlong testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.SECOND);\n-\t\tassertEquals(millis, testResult);\n-\t}\n-\n-\tpublic void testMillisecondsOfSecondWithCalendar() {\n-\t\tlong testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.SECOND);\n-\t\tassertEquals(millis, testResult);\n-\t\tassertEquals(aCalendar.get(Calendar.MILLISECOND), testResult);\n-\t}\n-\n-\t//Calendar.MINUTE as useful fragment\n-\n-\tpublic void testMillisecondsOfMinuteWithDate() {\n-\t\tlong testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.MINUTE);\n-\t\tassertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND), testResult);\n-\t}\n-\n-\tpublic void testMillisecondsOfMinuteWithCalender() {\n-\t\tlong testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MINUTE);\n-\t\tassertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND), testResult);\n-\t}\n-\n-\tpublic void testSecondsofMinuteWithDate() {\n-\t\tlong testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.MINUTE);\n-\t\tassertEquals(seconds, testResult);\n-\t}\n-\n-\tpublic void testSecondsofMinuteWithCalendar() {\n-\t\tlong testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.MINUTE);\n-\t\tassertEquals(seconds, testResult);\n-\t\tassertEquals(aCalendar.get(Calendar.SECOND), testResult);\n-\t}\n-\n-\t//Calendar.HOUR_OF_DAY as useful fragment\n-\t\n-\tpublic void testMillisecondsOfHourWithDate() {\n-\t\tlong testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.HOUR_OF_DAY);\n-\t\tassertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE), testResult);\n-\t}\n-\t\n-\tpublic void testMillisecondsOfHourWithCalendar() {\n-\t\tlong testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.HOUR_OF_DAY);\n-\t\tassertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE), testResult);\n-\t}\n-\n-\tpublic void testSecondsofHourWithDate() {\n-\t\tlong testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.HOUR_OF_DAY);\n-\t\tassertEquals(\n-\t\t\t\tseconds\n-\t\t\t\t\t\t+ (minutes\n-\t\t\t\t\t\t\t\t* DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND),\n-\t\t\t\ttestResult);\n-\t}\n-\n-\tpublic void testSecondsofHourWithCalendar() {\n-\t\tlong testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.HOUR_OF_DAY);\n-\t\tassertEquals(\n-\t\t\t\tseconds\n-\t\t\t\t\t\t+ (minutes\n-\t\t\t\t\t\t\t\t* DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND),\n-\t\t\t\ttestResult);\n-\t}\n-\n-\tpublic void testMinutesOfHourWithDate() {\n-\t\tlong testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.HOUR_OF_DAY);\n-\t\tassertEquals(minutes, testResult);\n-\t}\n-\n-\tpublic void testMinutesOfHourWithCalendar() {\n-\t\tlong testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.HOUR_OF_DAY);\n-\t\tassertEquals(minutes, testResult);\n-\t}\n-\n-\t//Calendar.DATE and Calendar.DAY_OF_YEAR as useful fragment\n-\tpublic void testMillisecondsOfDayWithDate() {\n-\t\tlong testresult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.DATE);\n-\t\tlong expectedValue = millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR); \n-\t\tassertEquals(expectedValue, testresult);\n-\t\ttestresult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.DAY_OF_YEAR);\n-\t\tassertEquals(expectedValue, testresult);\n-\t}\n-\t\n-\tpublic void testMillisecondsOfDayWithCalendar() {\n-\t\tlong testresult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.DATE);\n-\t\tlong expectedValue = millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR); \n-\t\tassertEquals(expectedValue, testresult);\n-\t\ttestresult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.DAY_OF_YEAR);\n-\t\tassertEquals(expectedValue, testresult);\n-\t}\n-\n-\tpublic void testSecondsOfDayWithDate() {\n-\t\tlong testresult = DateUtils.getFragmentInSeconds(aDate, Calendar.DATE);\n-\t\tlong expectedValue = seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_SECOND;\n-\t\tassertEquals(expectedValue, testresult);\n-\t\ttestresult = DateUtils.getFragmentInSeconds(aDate, Calendar.DAY_OF_YEAR);\n-\t\tassertEquals(expectedValue, testresult);\n-\t}\n-\n-\tpublic void testSecondsOfDayWithCalendar() {\n-\t\tlong testresult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.DATE);\n-\t\tlong expectedValue = seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_SECOND;\n-\t\tassertEquals(expectedValue, testresult);\n-\t\ttestresult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.DAY_OF_YEAR);\n-\t\tassertEquals(expectedValue, testresult);\n-\t}\n-\n-\tpublic void testMinutesOfDayWithDate() {\n-\t\tlong testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.DATE);\n-\t\tlong expectedValue = minutes + ((hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_MINUTE; \n-\t\tassertEquals(expectedValue,testResult);\n-\t\ttestResult = DateUtils.getFragmentInMinutes(aDate, Calendar.DAY_OF_YEAR);\n-\t\tassertEquals(expectedValue,testResult);\n-\t}\n-\n-\tpublic void testMinutesOfDayWithCalendar() {\n-\t\tlong testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.DATE);\n-\t\tlong expectedValue = minutes + ((hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_MINUTE; \n-\t\tassertEquals(expectedValue, testResult);\n-\t\ttestResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.DAY_OF_YEAR);\n-\t\tassertEquals(expectedValue, testResult);\n-\t}\n-\t\n-\tpublic void testHoursOfDayWithDate() {\n-\t\tlong testResult = DateUtils.getFragmentInHours(aDate, Calendar.DATE);\n-\t\tlong expectedValue = hours; \n-\t\tassertEquals(expectedValue,testResult);\n-\t\ttestResult = DateUtils.getFragmentInHours(aDate, Calendar.DAY_OF_YEAR);\n-\t\tassertEquals(expectedValue,testResult);\n-\t}\n-\n-\tpublic void testHoursOfDayWithCalendar() {\n-\t\tlong testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.DATE);\n-\t\tlong expectedValue = hours; \n-\t\tassertEquals(expectedValue, testResult);\n-\t\ttestResult = DateUtils.getFragmentInHours(aCalendar, Calendar.DAY_OF_YEAR);\n-\t\tassertEquals(expectedValue, testResult);\n-\t}\n-\t\n-\t\n-\t//Calendar.MONTH as useful fragment\n-\tpublic void testMillisecondsOfMonthWithDate() {\n-\t\tlong testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.MONTH);\n-\t\tassertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)\n-\t\t\t\t\t\t\t\t+ (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY),\n-\t\t\t\ttestResult);\n-\t}\n-\n-\tpublic void testMillisecondsOfMonthWithCalendar() {\n-\t\tlong testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MONTH);\n-\t\tassertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)\n-\t\t\t\t+ (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY),\n+        aCalendar = Calendar.getInstance();\n+        aCalendar.set(2005, months, days, hours, minutes, seconds);\n+        aCalendar.set(Calendar.MILLISECOND, millis);\n+        aDate = aCalendar.getTime();\n+    }\n+    \n+    public void testNullDate() {\n+        try {\n+            DateUtils.getFragmentInMilliseconds((Date) null, Calendar.MILLISECOND);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+\n+        try {\n+            DateUtils.getFragmentInSeconds((Date) null, Calendar.MILLISECOND);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+\n+        try {\n+            DateUtils.getFragmentInMinutes((Date) null, Calendar.MILLISECOND);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+\n+        try {\n+            DateUtils.getFragmentInHours((Date) null, Calendar.MILLISECOND);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+\n+        try {\n+            DateUtils.getFragmentInDays((Date) null, Calendar.MILLISECOND);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+    }\n+\n+    public void testNullCalendar() {\n+        try {\n+            DateUtils.getFragmentInMilliseconds((Calendar) null, Calendar.MILLISECOND);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+\n+        try {\n+            DateUtils.getFragmentInSeconds((Calendar) null, Calendar.MILLISECOND);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+\n+        try {\n+            DateUtils.getFragmentInMinutes((Calendar) null, Calendar.MILLISECOND);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+\n+        try {\n+            DateUtils.getFragmentInHours((Calendar) null, Calendar.MILLISECOND);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+\n+        try {\n+            DateUtils.getFragmentInDays((Calendar) null, Calendar.MILLISECOND);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+    }\n+    \n+    public void testInvalidFragmentWithDate() {\n+        try {\n+            DateUtils.getFragmentInMilliseconds(aDate, 0);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+\n+        try {\n+            DateUtils.getFragmentInSeconds(aDate, 0);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+\n+        try {\n+            DateUtils.getFragmentInMinutes(aDate, 0);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+\n+        try {\n+            DateUtils.getFragmentInHours(aDate, 0);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+\n+        try {\n+            DateUtils.getFragmentInDays(aDate, 0);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+    }\n+\n+    public void testInvalidFragmentWithCalendar() {\n+        try {\n+            DateUtils.getFragmentInMilliseconds(aCalendar, 0);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+\n+        try {\n+            DateUtils.getFragmentInSeconds(aCalendar, 0);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+\n+        try {\n+            DateUtils.getFragmentInMinutes(aCalendar, 0);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+\n+        try {\n+            DateUtils.getFragmentInHours(aCalendar, 0);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+\n+        try {\n+            DateUtils.getFragmentInDays(aCalendar, 0);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+    }\n+\n+    public void testMillisecondFragmentInLargerUnitWithDate() {\n+        assertEquals(0, DateUtils.getFragmentInMilliseconds(aDate, Calendar.MILLISECOND));\n+        assertEquals(0, DateUtils.getFragmentInSeconds(aDate, Calendar.MILLISECOND));\n+        assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MILLISECOND));\n+        assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MILLISECOND));\n+        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MILLISECOND));\n+    }\n+\n+    public void testMillisecondFragmentInLargerUnitWithCalendar() {\n+        assertEquals(0, DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MILLISECOND));\n+        assertEquals(0, DateUtils.getFragmentInSeconds(aCalendar, Calendar.MILLISECOND));\n+        assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.MILLISECOND));\n+        assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.MILLISECOND));\n+        assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.MILLISECOND));\n+    }\n+    \n+    public void testSecondFragmentInLargerUnitWithDate() {\n+        assertEquals(0, DateUtils.getFragmentInSeconds(aDate, Calendar.SECOND));\n+        assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.SECOND));\n+        assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.SECOND));\n+        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.SECOND));\n+    }\n+\n+    public void testSecondFragmentInLargerUnitWithCalendar() {\n+        assertEquals(0, DateUtils.getFragmentInSeconds(aCalendar, Calendar.SECOND));\n+        assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.SECOND));\n+        assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.SECOND));\n+        assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.SECOND));\n+    }\n+    \n+    public void testMinuteFragmentInLargerUnitWithDate() {\n+        assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE));\n+        assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE));\n+        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE));\n+    }\n+\n+    public void testMinuteFragmentInLargerUnitWithCalendar() {\n+        assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.MINUTE));\n+        assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.MINUTE));\n+        assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.MINUTE));\n+    }\n+\n+    public void testHourOfDayFragmentInLargerUnitWithDate() {\n+        assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.HOUR_OF_DAY));\n+        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.HOUR_OF_DAY));\n+    }\n+\n+    public void testHourOfDayFragmentInLargerUnitWithCalendar() {\n+        assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.HOUR_OF_DAY));\n+        assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.HOUR_OF_DAY));\n+    }\n+\n+    public void testDayOfYearFragmentInLargerUnitWithDate() {\n+        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.DAY_OF_YEAR));\n+    }\n+\n+    public void testDayOfYearFragmentInLargerUnitWithCalendar() {\n+        assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DAY_OF_YEAR));\n+    }\n+\n+    public void testDateFragmentInLargerUnitWithDate() {\n+        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.DATE));\n+    }\n+\n+    public void testDateFragmentInLargerUnitWithCalendar() {\n+        assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DATE));\n+    }\n+\n+    //Calendar.SECOND as useful fragment\n+    \n+    public void testMillisecondsOfSecondWithDate() {\n+        long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.SECOND);\n+        assertEquals(millis, testResult);\n+    }\n+\n+    public void testMillisecondsOfSecondWithCalendar() {\n+        long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.SECOND);\n+        assertEquals(millis, testResult);\n+        assertEquals(aCalendar.get(Calendar.MILLISECOND), testResult);\n+    }\n+\n+    //Calendar.MINUTE as useful fragment\n+\n+    public void testMillisecondsOfMinuteWithDate() {\n+        long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.MINUTE);\n+        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND), testResult);\n+    }\n+\n+    public void testMillisecondsOfMinuteWithCalender() {\n+        long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MINUTE);\n+        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND), testResult);\n+    }\n+\n+    public void testSecondsofMinuteWithDate() {\n+        long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.MINUTE);\n+        assertEquals(seconds, testResult);\n+    }\n+\n+    public void testSecondsofMinuteWithCalendar() {\n+        long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.MINUTE);\n+        assertEquals(seconds, testResult);\n+        assertEquals(aCalendar.get(Calendar.SECOND), testResult);\n+    }\n+\n+    //Calendar.HOUR_OF_DAY as useful fragment\n+    \n+    public void testMillisecondsOfHourWithDate() {\n+        long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.HOUR_OF_DAY);\n+        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE), testResult);\n+    }\n+    \n+    public void testMillisecondsOfHourWithCalendar() {\n+        long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.HOUR_OF_DAY);\n+        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE), testResult);\n+    }\n+\n+    public void testSecondsofHourWithDate() {\n+        long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.HOUR_OF_DAY);\n+        assertEquals(\n+                seconds\n+                        + (minutes\n+                                * DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND),\n+                testResult);\n+    }\n+\n+    public void testSecondsofHourWithCalendar() {\n+        long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.HOUR_OF_DAY);\n+        assertEquals(\n+                seconds\n+                        + (minutes\n+                                * DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND),\n+                testResult);\n+    }\n+\n+    public void testMinutesOfHourWithDate() {\n+        long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.HOUR_OF_DAY);\n+        assertEquals(minutes, testResult);\n+    }\n+\n+    public void testMinutesOfHourWithCalendar() {\n+        long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.HOUR_OF_DAY);\n+        assertEquals(minutes, testResult);\n+    }\n+\n+    //Calendar.DATE and Calendar.DAY_OF_YEAR as useful fragment\n+    public void testMillisecondsOfDayWithDate() {\n+        long testresult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.DATE);\n+        long expectedValue = millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR); \n+        assertEquals(expectedValue, testresult);\n+        testresult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.DAY_OF_YEAR);\n+        assertEquals(expectedValue, testresult);\n+    }\n+    \n+    public void testMillisecondsOfDayWithCalendar() {\n+        long testresult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.DATE);\n+        long expectedValue = millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR); \n+        assertEquals(expectedValue, testresult);\n+        testresult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.DAY_OF_YEAR);\n+        assertEquals(expectedValue, testresult);\n+    }\n+\n+    public void testSecondsOfDayWithDate() {\n+        long testresult = DateUtils.getFragmentInSeconds(aDate, Calendar.DATE);\n+        long expectedValue = seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_SECOND;\n+        assertEquals(expectedValue, testresult);\n+        testresult = DateUtils.getFragmentInSeconds(aDate, Calendar.DAY_OF_YEAR);\n+        assertEquals(expectedValue, testresult);\n+    }\n+\n+    public void testSecondsOfDayWithCalendar() {\n+        long testresult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.DATE);\n+        long expectedValue = seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_SECOND;\n+        assertEquals(expectedValue, testresult);\n+        testresult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.DAY_OF_YEAR);\n+        assertEquals(expectedValue, testresult);\n+    }\n+\n+    public void testMinutesOfDayWithDate() {\n+        long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.DATE);\n+        long expectedValue = minutes + ((hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_MINUTE; \n+        assertEquals(expectedValue,testResult);\n+        testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.DAY_OF_YEAR);\n+        assertEquals(expectedValue,testResult);\n+    }\n+\n+    public void testMinutesOfDayWithCalendar() {\n+        long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.DATE);\n+        long expectedValue = minutes + ((hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_MINUTE; \n+        assertEquals(expectedValue, testResult);\n+        testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.DAY_OF_YEAR);\n+        assertEquals(expectedValue, testResult);\n+    }\n+    \n+    public void testHoursOfDayWithDate() {\n+        long testResult = DateUtils.getFragmentInHours(aDate, Calendar.DATE);\n+        long expectedValue = hours; \n+        assertEquals(expectedValue,testResult);\n+        testResult = DateUtils.getFragmentInHours(aDate, Calendar.DAY_OF_YEAR);\n+        assertEquals(expectedValue,testResult);\n+    }\n+\n+    public void testHoursOfDayWithCalendar() {\n+        long testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.DATE);\n+        long expectedValue = hours; \n+        assertEquals(expectedValue, testResult);\n+        testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.DAY_OF_YEAR);\n+        assertEquals(expectedValue, testResult);\n+    }\n+    \n+    \n+    //Calendar.MONTH as useful fragment\n+    public void testMillisecondsOfMonthWithDate() {\n+        long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.MONTH);\n+        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)\n+                                + (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY),\n+                testResult);\n+    }\n+\n+    public void testMillisecondsOfMonthWithCalendar() {\n+        long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MONTH);\n+        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)\n+                + (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY),\n testResult);\n-\t}\n-\t\n-\tpublic void testSecondsOfMonthWithDate() {\n-\t\tlong testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.MONTH);\n-\t\tassertEquals(\n-\t\t\t\tseconds\n-\t\t\t\t\t\t+ ((minutes * DateUtils.MILLIS_PER_MINUTE)\n-\t\t\t\t\t\t\t\t+ (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))\n-\t\t\t\t\t\t/ DateUtils.MILLIS_PER_SECOND,\n-\t\t\t\ttestResult);\n-\t}\n-\n-\tpublic void testSecondsOfMonthWithCalendar() {\n-\t\tlong testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.MONTH);\n-\t\tassertEquals(\n-\t\t\t\tseconds\n-\t\t\t\t\t\t+ ((minutes * DateUtils.MILLIS_PER_MINUTE)\n-\t\t\t\t\t\t\t\t+ (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))\n-\t\t\t\t\t\t/ DateUtils.MILLIS_PER_SECOND,\n-\t\t\t\ttestResult);\n-\t}\n-\n-\tpublic void testMinutesOfMonthWithDate() {\n-\t\tlong testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.MONTH);\n-\t\tassertEquals(minutes\n-\t\t\t\t\t\t\t\t+ ((hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))\n-\t\t\t\t\t\t/ DateUtils.MILLIS_PER_MINUTE,\n-\t\t\t\ttestResult);\n-\t}\n-\n-\tpublic void testMinutesOfMonthWithCalendar() {\n-\t\tlong testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.MONTH);\n-\t\tassertEquals( minutes  +((hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))\n-\t\t\t\t\t\t/ DateUtils.MILLIS_PER_MINUTE,\n-\t\t\t\ttestResult);\n-\t}\n-\n-\tpublic void testHoursOfMonthWithDate() {\n-\t\tlong testResult = DateUtils.getFragmentInHours(aDate, Calendar.MONTH);\n-\t\tassertEquals(hours + ((days * DateUtils.MILLIS_PER_DAY))\n-\t\t\t\t\t\t/ DateUtils.MILLIS_PER_HOUR,\n-\t\t\t\ttestResult);\n-\t}\n-\n-\tpublic void testHoursOfMonthWithCalendar() {\n-\t\tlong testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.MONTH);\n-\t\tassertEquals( hours +((days * DateUtils.MILLIS_PER_DAY))\n-\t\t\t\t\t\t/ DateUtils.MILLIS_PER_HOUR,\n-\t\t\t\ttestResult);\n-\t}\n-\t\n-\t//Calendar.YEAR as useful fragment\n-\tpublic void testMillisecondsOfYearWithDate() {\n-\t\tlong testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.YEAR);\n-\t\tCalendar cal = Calendar.getInstance();\n-\t\tcal.setTime(aDate);\n-\t\tassertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)\n-\t\t\t\t\t\t\t\t+ (hours * DateUtils.MILLIS_PER_HOUR) + (cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY),\n-\t\t\t\ttestResult);\n-\t}\n-\n-\tpublic void testMillisecondsOfYearWithCalendar() {\n-\t\tlong testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.YEAR);\n-\t\tassertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)\n-\t\t\t\t+ (hours * DateUtils.MILLIS_PER_HOUR) + (aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY),\n+    }\n+    \n+    public void testSecondsOfMonthWithDate() {\n+        long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.MONTH);\n+        assertEquals(\n+                seconds\n+                        + ((minutes * DateUtils.MILLIS_PER_MINUTE)\n+                                + (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))\n+                        / DateUtils.MILLIS_PER_SECOND,\n+                testResult);\n+    }\n+\n+    public void testSecondsOfMonthWithCalendar() {\n+        long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.MONTH);\n+        assertEquals(\n+                seconds\n+                        + ((minutes * DateUtils.MILLIS_PER_MINUTE)\n+                                + (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))\n+                        / DateUtils.MILLIS_PER_SECOND,\n+                testResult);\n+    }\n+\n+    public void testMinutesOfMonthWithDate() {\n+        long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.MONTH);\n+        assertEquals(minutes\n+                                + ((hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))\n+                        / DateUtils.MILLIS_PER_MINUTE,\n+                testResult);\n+    }\n+\n+    public void testMinutesOfMonthWithCalendar() {\n+        long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.MONTH);\n+        assertEquals( minutes  +((hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))\n+                        / DateUtils.MILLIS_PER_MINUTE,\n+                testResult);\n+    }\n+\n+    public void testHoursOfMonthWithDate() {\n+        long testResult = DateUtils.getFragmentInHours(aDate, Calendar.MONTH);\n+        assertEquals(hours + ((days * DateUtils.MILLIS_PER_DAY))\n+                        / DateUtils.MILLIS_PER_HOUR,\n+                testResult);\n+    }\n+\n+    public void testHoursOfMonthWithCalendar() {\n+        long testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.MONTH);\n+        assertEquals( hours +((days * DateUtils.MILLIS_PER_DAY))\n+                        / DateUtils.MILLIS_PER_HOUR,\n+                testResult);\n+    }\n+    \n+    //Calendar.YEAR as useful fragment\n+    public void testMillisecondsOfYearWithDate() {\n+        long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.YEAR);\n+        Calendar cal = Calendar.getInstance();\n+        cal.setTime(aDate);\n+        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)\n+                                + (hours * DateUtils.MILLIS_PER_HOUR) + (cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY),\n+                testResult);\n+    }\n+\n+    public void testMillisecondsOfYearWithCalendar() {\n+        long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.YEAR);\n+        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)\n+                + (hours * DateUtils.MILLIS_PER_HOUR) + (aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY),\n testResult);\n-\t}\n-\t\n-\tpublic void testSecondsOfYearWithDate() {\n-\t\tlong testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.YEAR);\n-\t\tCalendar cal = Calendar.getInstance();\n-\t\tcal.setTime(aDate);\n-\t\tassertEquals(\n-\t\t\t\tseconds\n-\t\t\t\t\t\t+ ((minutes * DateUtils.MILLIS_PER_MINUTE)\n-\t\t\t\t\t\t\t\t+ (hours * DateUtils.MILLIS_PER_HOUR) + (cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))\n-\t\t\t\t\t\t/ DateUtils.MILLIS_PER_SECOND,\n-\t\t\t\ttestResult);\n-\t}\n-\n-\tpublic void testSecondsOfYearWithCalendar() {\n-\t\tlong testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.YEAR);\n-\t\tassertEquals(\n-\t\t\t\tseconds\n-\t\t\t\t\t\t+ ((minutes * DateUtils.MILLIS_PER_MINUTE)\n-\t\t\t\t\t\t\t\t+ (hours * DateUtils.MILLIS_PER_HOUR) + (aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))\n-\t\t\t\t\t\t/ DateUtils.MILLIS_PER_SECOND,\n-\t\t\t\ttestResult);\n-\t}\n-\n-\tpublic void testMinutesOfYearWithDate() {\n-\t\tlong testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.YEAR);\n-\t\tCalendar cal = Calendar.getInstance();\n-\t\tcal.setTime(aDate);\n-\t\tassertEquals(minutes\n-\t\t\t\t\t\t\t\t+ ((hours * DateUtils.MILLIS_PER_HOUR) + (cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))\n-\t\t\t\t\t\t/ DateUtils.MILLIS_PER_MINUTE,\n-\t\t\t\ttestResult);\n-\t}\n-\n-\tpublic void testMinutesOfYearWithCalendar() {\n-\t\tlong testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.YEAR);\n-\t\tassertEquals( minutes  +((hours * DateUtils.MILLIS_PER_HOUR) + (aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))\n-\t\t\t\t\t\t/ DateUtils.MILLIS_PER_MINUTE,\n-\t\t\t\ttestResult);\n-\t}\n-\n-\tpublic void testHoursOfYearWithDate() {\n-\t\tlong testResult = DateUtils.getFragmentInHours(aDate, Calendar.YEAR);\n-\t\tCalendar cal = Calendar.getInstance();\n-\t\tcal.setTime(aDate);\n-\t\tassertEquals(hours + ((cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))\n-\t\t\t\t\t\t/ DateUtils.MILLIS_PER_HOUR,\n-\t\t\t\ttestResult);\n-\t}\n-\n-\tpublic void testHoursOfYearWithCalendar() {\n-\t\tlong testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.YEAR);\n-\t\tassertEquals( hours +((aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))\n-\t\t\t\t\t\t/ DateUtils.MILLIS_PER_HOUR,\n-\t\t\t\ttestResult);\n-\t}\n+    }\n+    \n+    public void testSecondsOfYearWithDate() {\n+        long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.YEAR);\n+        Calendar cal = Calendar.getInstance();\n+        cal.setTime(aDate);\n+        assertEquals(\n+                seconds\n+                        + ((minutes * DateUtils.MILLIS_PER_MINUTE)\n+                                + (hours * DateUtils.MILLIS_PER_HOUR) + (cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))\n+                        / DateUtils.MILLIS_PER_SECOND,\n+                testResult);\n+    }\n+\n+    public void testSecondsOfYearWithCalendar() {\n+        long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.YEAR);\n+        assertEquals(\n+                seconds\n+                        + ((minutes * DateUtils.MILLIS_PER_MINUTE)\n+                                + (hours * DateUtils.MILLIS_PER_HOUR) + (aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))\n+                        / DateUtils.MILLIS_PER_SECOND,\n+                testResult);\n+    }\n+\n+    public void testMinutesOfYearWithDate() {\n+        long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.YEAR);\n+        Calendar cal = Calendar.getInstance();\n+        cal.setTime(aDate);\n+        assertEquals(minutes\n+                                + ((hours * DateUtils.MILLIS_PER_HOUR) + (cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))\n+                        / DateUtils.MILLIS_PER_MINUTE,\n+                testResult);\n+    }\n+\n+    public void testMinutesOfYearWithCalendar() {\n+        long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.YEAR);\n+        assertEquals( minutes  +((hours * DateUtils.MILLIS_PER_HOUR) + (aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))\n+                        / DateUtils.MILLIS_PER_MINUTE,\n+                testResult);\n+    }\n+\n+    public void testHoursOfYearWithDate() {\n+        long testResult = DateUtils.getFragmentInHours(aDate, Calendar.YEAR);\n+        Calendar cal = Calendar.getInstance();\n+        cal.setTime(aDate);\n+        assertEquals(hours + ((cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))\n+                        / DateUtils.MILLIS_PER_HOUR,\n+                testResult);\n+    }\n+\n+    public void testHoursOfYearWithCalendar() {\n+        long testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.YEAR);\n+        assertEquals( hours +((aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))\n+                        / DateUtils.MILLIS_PER_HOUR,\n+                testResult);\n+    }\n }\n--- a/src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java\n+++ b/src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java\n         return suite;\n     }\n \n-\tDateFormat dateTimeParser;\n-\t\n-\tDate januaryOneDate;\n-\tDate targetYearDate;\n-\t//No targetMonths, these must be tested for every type of month(28-31 days)\n-\tDate targetDateDate, targetDayOfMonthDate, targetAmDate, targetPmDate;\n-\tDate targetHourOfDayDate, targetHourDate;\n-\tDate targetMinuteDate;\n-\tDate targetSecondDate;\n-\tDate targetMilliSecondDate;\n-\n-\tCalendar januaryOneCalendar;\n-\tFastDateFormat fdf = DateFormatUtils.ISO_DATETIME_FORMAT;\n-\n-\t@Override\n+    DateFormat dateTimeParser;\n+    \n+    Date januaryOneDate;\n+    Date targetYearDate;\n+    //No targetMonths, these must be tested for every type of month(28-31 days)\n+    Date targetDateDate, targetDayOfMonthDate, targetAmDate, targetPmDate;\n+    Date targetHourOfDayDate, targetHourDate;\n+    Date targetMinuteDate;\n+    Date targetSecondDate;\n+    Date targetMilliSecondDate;\n+\n+    Calendar januaryOneCalendar;\n+    FastDateFormat fdf = DateFormatUtils.ISO_DATETIME_FORMAT;\n+\n+    @Override\n     protected void setUp() throws Exception {\n-\t\tsuper.setUp();\n-\t\tdateTimeParser = new SimpleDateFormat(\"MMM dd, yyyy H:mm:ss.SSS\", Locale.ENGLISH);\n-\t\t\n-\t\ttargetYearDate = dateTimeParser.parse(\"January 1, 2007 0:00:00.000\");\n-\t\ttargetDateDate = targetDayOfMonthDate = dateTimeParser.parse(\"June 1, 2008 0:00:00.000\");\n-\t\ttargetAmDate =  dateTimeParser.parse(\"June 1, 2008 0:00:00.000\");\n-\t\ttargetPmDate = dateTimeParser.parse(\"June 1, 2008 12:00:00.000\");\n-\t\ttargetHourDate = dateTimeParser.parse(\"June 1, 2008 8:00:00.000\");\n-\t\ttargetHourOfDayDate = dateTimeParser.parse(\"June 1, 2008 8:00:00.000\");\n-\t\ttargetMinuteDate =  dateTimeParser.parse(\"June 1, 2008 8:15:00.000\");\n-\t\ttargetSecondDate =  dateTimeParser.parse(\"June 1, 2008 8:15:14.000\");\n-\t\ttargetMilliSecondDate =  dateTimeParser.parse(\"June 1, 2008 8:15:14.231\");\n-\t\t\n-\t\tjanuaryOneDate = dateTimeParser.parse(\"January 1, 2008 0:00:00.000\");\n-\t\tjanuaryOneCalendar = Calendar.getInstance();\n-\t\tjanuaryOneCalendar.setTime(januaryOneDate);\n-\t}\n-\n-\t/**\n-\t * Tests DateUtils.round()-method with Calendar.Year\n-\t * \n-\t * @throws Exception\n-\t * @since 3.0\n-\t */\n-\tpublic void testRoundYear() throws Exception {\n-\t\tfinal int calendarField = Calendar.YEAR;\n-\t\tDate roundedUpDate = dateTimeParser.parse(\"January 1, 2008 0:00:00.000\");\n-\t\tDate roundedDownDate = targetYearDate;\n-\t\tDate lastRoundedDownDate = dateTimeParser.parse(\"June 30, 2007 23:59:59.999\");\n-\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n-\t}\n-\t\n-\t/**\n-\t * Tests DateUtils.round()-method with Calendar.MONTH\n-\t * Includes rounding months with 28, 29, 30 and 31 days\n-\t * Includes rounding to January 1\n-\t * \n-\t * @throws Exception\n-\t * @since 3.0\n-\t */\n-\tpublic void testRoundMonth() throws Exception {\n-\t\tfinal int calendarField = Calendar.MONTH;\n-\t\tDate roundedUpDate, roundedDownDate, lastRoundedDownDate;\n-\t\tDate minDate, maxDate;\n-\t\t\n-\t\t//month with 28 days\n-\t\troundedUpDate = dateTimeParser.parse(\"March 1, 2007 0:00:00.000\");\n-\t\troundedDownDate = dateTimeParser.parse(\"February 1, 2007 0:00:00.000\");\n-\t\tlastRoundedDownDate = dateTimeParser.parse(\"February 14, 2007 23:59:59.999\");\n-\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n-\n-\t\t//month with 29 days\n-\t\troundedUpDate = dateTimeParser.parse(\"March 1, 2008 0:00:00.000\");\n-\t\troundedDownDate = dateTimeParser.parse(\"February 1, 2008 0:00:00.000\");\n-\t\tlastRoundedDownDate = dateTimeParser.parse(\"February 15, 2008 23:59:59.999\");\n-\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n-\t\t\n-\t\t//month with 30 days\n-\t\troundedUpDate = dateTimeParser.parse(\"May 1, 2008 0:00:00.000\");\n-\t\troundedDownDate = dateTimeParser.parse(\"April 1, 2008 0:00:00.000\");\n-\t\tlastRoundedDownDate = dateTimeParser.parse(\"April 15, 2008 23:59:59.999\");\n-\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n-\t\t\n-\t\t//month with 31 days\n-\t\troundedUpDate = dateTimeParser.parse(\"June 1, 2008 0:00:00.000\");\n-\t\troundedDownDate = dateTimeParser.parse(\"May 1, 2008 0:00:00.000\");\n-\t\tlastRoundedDownDate = dateTimeParser.parse(\"May 16, 2008 23:59:59.999\");\n-\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n-\t\t\n-\t\t//round to January 1\n-\t\tminDate = dateTimeParser.parse(\"December 17, 2007 00:00:00.000\");\n-\t\tmaxDate = dateTimeParser.parse(\"January 16, 2008 23:59:59.999\");\n-\t\troundToJanuaryFirst(minDate, maxDate, calendarField);\n-\t}\n-\t\n-\t/**\n-\t * Tests DateUtils.round()-method with DateUtils.SEMI_MONTH\n-\t * Includes rounding months with 28, 29, 30 and 31 days, each with first and second half \n-\t * Includes rounding to January 1\n-\t * \t \n-\t * @throws Exception\n-\t * @since 3.0\n-\t */\n-\tpublic void testRoundSemiMonth() throws Exception {\n-\t\tfinal int calendarField = DateUtils.SEMI_MONTH;\n-\t\tDate roundedUpDate, roundedDownDate, lastRoundedDownDate;\n-\t\tDate minDate, maxDate;\n-\t\t\n-\t\t//month with 28 days (1)\n-\t\troundedUpDate = dateTimeParser.parse(\"February 16, 2007 0:00:00.000\");\n-\t\troundedDownDate = dateTimeParser.parse(\"February 1, 2007 0:00:00.000\");\n-\t\tlastRoundedDownDate = dateTimeParser.parse(\"February 8, 2007 23:59:59.999\");\n-\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n-\n-\t\t//month with 28 days (2)\n-\t\troundedUpDate = dateTimeParser.parse(\"March 1, 2007 0:00:00.000\");\n-\t\troundedDownDate = dateTimeParser.parse(\"February 16, 2007 0:00:00.000\");\n-\t\tlastRoundedDownDate = dateTimeParser.parse(\"February 23, 2007 23:59:59.999\");\n-\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n-\n-\t\t//month with 29 days (1)\n-\t\troundedUpDate = dateTimeParser.parse(\"February 16, 2008 0:00:00.000\");\n-\t\troundedDownDate = dateTimeParser.parse(\"February 1, 2008 0:00:00.000\");\n-\t\tlastRoundedDownDate = dateTimeParser.parse(\"February 8, 2008 23:59:59.999\");\n-\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n-\t\t\n-\t\t//month with 29 days (2)\n-\t\troundedUpDate = dateTimeParser.parse(\"March 1, 2008 0:00:00.000\");\n-\t\troundedDownDate = dateTimeParser.parse(\"February 16, 2008 0:00:00.000\");\n-\t\tlastRoundedDownDate = dateTimeParser.parse(\"February 23, 2008 23:59:59.999\");\n-\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n-\n-\t\t//month with 30 days (1)\n-\t\troundedUpDate = dateTimeParser.parse(\"April 16, 2008 0:00:00.000\");\n-\t\troundedDownDate = dateTimeParser.parse(\"April 1, 2008 0:00:00.000\");\n-\t\tlastRoundedDownDate = dateTimeParser.parse(\"April 8, 2008 23:59:59.999\");\n-\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n-\n-\t\t//month with 30 days (2)\n-\t\troundedUpDate = dateTimeParser.parse(\"May 1, 2008 0:00:00.000\");\n-\t\troundedDownDate = dateTimeParser.parse(\"April 16, 2008 0:00:00.000\");\n-\t\tlastRoundedDownDate = dateTimeParser.parse(\"April 23, 2008 23:59:59.999\");\n-\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n-\t\t\n-\t\t//month with 31 days (1)\n-\t\troundedUpDate = dateTimeParser.parse(\"May 16, 2008 0:00:00.000\");\n-\t\troundedDownDate = dateTimeParser.parse(\"May 1, 2008 0:00:00.000\");\n-\t\tlastRoundedDownDate = dateTimeParser.parse(\"May 8, 2008 23:59:59.999\");\n-\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n-\n-\t\t//month with 31 days (2)\n-\t\troundedUpDate = dateTimeParser.parse(\"June 1, 2008 0:00:00.000\");\n-\t\troundedDownDate = dateTimeParser.parse(\"May 16, 2008 0:00:00.000\");\n-\t\tlastRoundedDownDate = dateTimeParser.parse(\"May 23, 2008 23:59:59.999\");\n-\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n-\t\t\n-\t\t//round to January 1\n-\t\tminDate = dateTimeParser.parse(\"December 24, 2007 00:00:00.000\");\n-\t\tmaxDate = dateTimeParser.parse(\"January 8, 2008 23:59:59.999\");\n-\t\troundToJanuaryFirst(minDate, maxDate, calendarField);\n-\t}\n-\t\n-\t/**\n-\t * Tests DateUtils.round()-method with Calendar.DATE\n-\t * Includes rounding the extremes of one day \n-\t * Includes rounding to January 1\n-\t * \n-\t * @throws Exception\n-\t * @since 3.0\n-\t */\n-\tpublic void testRoundDate() throws Exception {\n-\t\tfinal int calendarField = Calendar.DATE;\n-\t\tDate roundedUpDate, roundedDownDate, lastRoundedDownDate;\n-\t\tDate minDate, maxDate;\n-\n-\t\troundedUpDate = dateTimeParser.parse(\"June 2, 2008 0:00:00.000\");\n-\t\troundedDownDate = targetDateDate;\n-\t\tlastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 11:59:59.999\");\n-\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n-\t\t\n-\t\t//round to January 1\n-\t\tminDate = dateTimeParser.parse(\"December 31, 2007 12:00:00.000\");\n-\t\tmaxDate = dateTimeParser.parse(\"January 1, 2008 11:59:59.999\");\n-\t\troundToJanuaryFirst(minDate, maxDate, calendarField);\n-\t}\n-\t\n-\t/**\n-\t * Tests DateUtils.round()-method with Calendar.DAY_OF_MONTH\n-\t * Includes rounding the extremes of one day \n-\t * Includes rounding to January 1\n-\t * \n-\t * @throws Exception\n-\t * @since 3.0\n-\t */\n-\tpublic void testRoundDayOfMonth() throws Exception {\n-\t\tfinal int calendarField = Calendar.DAY_OF_MONTH;\n-\t\tDate roundedUpDate, roundedDownDate, lastRoundedDownDate;\n-\t\tDate minDate, maxDate;\n-\n-\t\troundedUpDate = dateTimeParser.parse(\"June 2, 2008 0:00:00.000\");\n-\t\troundedDownDate = targetDayOfMonthDate;\n-\t\tlastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 11:59:59.999\");\n-\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n-\t\t\n-\t\t//round to January 1\n-\t\tminDate = dateTimeParser.parse(\"December 31, 2007 12:00:00.000\");\n-\t\tmaxDate = dateTimeParser.parse(\"January 1, 2008 11:59:59.999\");\n-\t\troundToJanuaryFirst(minDate, maxDate, calendarField);\n-\t}\n-\t\n-\t/**\n-\t * Tests DateUtils.round()-method with Calendar.AM_PM\n-\t * Includes rounding the extremes of both AM and PM of one day \n-\t * Includes rounding to January 1\n-\t * \n-\t * @throws Exception\n-\t * @3.0\n-\t */\n-\tpublic void testRoundAmPm() throws Exception {\n-\t\tfinal int calendarField = Calendar.AM_PM;\n-\t\tDate roundedUpDate, roundedDownDate, lastRoundedDownDate;\n-\t\tDate minDate, maxDate;\n-\n-\t\t//AM\n-\t\troundedUpDate = dateTimeParser.parse(\"June 1, 2008 12:00:00.000\");\n-\t\troundedDownDate = targetAmDate;\n-\t\tlastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 5:59:59.999\");\n-\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n-\n-\t\t//PM\n-\t\troundedUpDate = dateTimeParser.parse(\"June 2, 2008 0:00:00.000\");\n-\t\troundedDownDate = targetPmDate;\n-\t\tlastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 17:59:59.999\");\n-\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n-\n-\t\t//round to January 1\n-\t\tminDate = dateTimeParser.parse(\"December 31, 2007 18:00:00.000\");\n-\t\tmaxDate = dateTimeParser.parse(\"January 1, 2008 5:59:59.999\");\n-\t\troundToJanuaryFirst(minDate, maxDate, calendarField);\n-\t}\n-\t\n-\t/**\n-\t * Tests DateUtils.round()-method with Calendar.HOUR_OF_DAY\n-\t * Includes rounding the extremes of one hour \n-\t * Includes rounding to January 1\n-\t * \n-\t * @throws Exception\n-\t * @since 3.0\n-\t */\n-\tpublic void testRoundHourOfDay() throws Exception {\n-\t\tfinal int calendarField = Calendar.HOUR_OF_DAY;\n-\t\tDate roundedUpDate, roundedDownDate, lastRoundedDownDate;\n-\t\tDate minDate, maxDate;\n-\n-\t\troundedUpDate = dateTimeParser.parse(\"June 1, 2008 9:00:00.000\");\n-\t\troundedDownDate = targetHourOfDayDate;\n-\t\tlastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 8:29:59.999\");\n-\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n-\t\t\n-\t\t//round to January 1\n-\t\tminDate = dateTimeParser.parse(\"December 31, 2007 23:30:00.000\");\n-\t\tmaxDate = dateTimeParser.parse(\"January 1, 2008 0:29:59.999\");\n-\t\troundToJanuaryFirst(minDate, maxDate, calendarField);\n-\t}\n-\t\n-\t/**\n-\t * Tests DateUtils.round()-method with Calendar.HOUR\n-\t * Includes rounding the extremes of one hour \n-\t * Includes rounding to January 1\n-\t * \n-\t * @throws Exception\n-\t * @since 3.0\n-\t */\n-\tpublic void testRoundHour() throws Exception {\n-\t\tfinal int calendarField = Calendar.HOUR;\n-\t\tDate roundedUpDate, roundedDownDate, lastRoundedDownDate;\n-\t\tDate minDate, maxDate;\n-\n-\t\troundedUpDate = dateTimeParser.parse(\"June 1, 2008 9:00:00.000\");\n-\t\troundedDownDate = targetHourDate;\n-\t\tlastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 8:29:59.999\");\n-\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n-\t\t\n-\t\t//round to January 1\n-\t\tminDate = dateTimeParser.parse(\"December 31, 2007 23:30:00.000\");\n-\t\tmaxDate = dateTimeParser.parse(\"January 1, 2008 0:29:59.999\");\n-\t\troundToJanuaryFirst(minDate, maxDate, calendarField);\n-\t}\n-\t\n-\t/**\n-\t * Tests DateUtils.round()-method with Calendar.MINUTE\n-\t * Includes rounding the extremes of one minute \n-\t * Includes rounding to January 1\n-\t * \n-\t * @throws Exception\n-\t * @since 3.0\n-\t */\n-\tpublic void testRoundMinute() throws Exception {\n-\t\tfinal int calendarField = Calendar.MINUTE;\n-\t\tDate roundedUpDate, roundedDownDate, lastRoundedDownDate;\n-\t\tDate minDate, maxDate;\n-\n-\t\troundedUpDate = dateTimeParser.parse(\"June 1, 2008 8:16:00.000\");\n-\t\troundedDownDate = targetMinuteDate;\n-\t\tlastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 8:15:29.999\");\n-\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n-\t\t\n-\t\t//round to January 1\n-\t\tminDate = dateTimeParser.parse(\"December 31, 2007 23:59:30.000\");\n-\t\tmaxDate = dateTimeParser.parse(\"January 1, 2008 0:00:29.999\");\n-\t\troundToJanuaryFirst(minDate, maxDate, calendarField);\n-\t}\n-\t\n-\t/**\n-\t * Tests DateUtils.round()-method with Calendar.SECOND\n-\t * Includes rounding the extremes of one second \n-\t * Includes rounding to January 1\n-\t * \n-\t * @throws Exception\n-\t * @since 3.0\n-\t */\n-\tpublic void testRoundSecond() throws Exception {\n-\t\tfinal int calendarField = Calendar.SECOND;\n-\t\tDate roundedUpDate, roundedDownDate, lastRoundedDownDate;\n-\t\tDate minDate, maxDate;\n-\n-\t\troundedUpDate = dateTimeParser.parse(\"June 1, 2008 8:15:15.000\");\n-\t\troundedDownDate = targetSecondDate;\n-\t\tlastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 8:15:14.499\");\n-\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n-\t\t\n-\t\t//round to January 1\n-\t\tminDate = dateTimeParser.parse(\"December 31, 2007 23:59:59.500\");\n-\t\tmaxDate = dateTimeParser.parse(\"January 1, 2008 0:00:00.499\");\n-\t\troundToJanuaryFirst(minDate, maxDate, calendarField);\n-\t}\n-\t\n-\t/**\n-\t * Tests DateUtils.round()-method with Calendar.MILLISECOND\n-\t * Includes rounding the extremes of one second \n-\t * Includes rounding to January 1\n-\t * \n-\t * @throws Exception\n-\t * @since 3.0\n-\t */\n-\tpublic void testRoundMilliSecond() throws Exception {\n-\t\tfinal int calendarField = Calendar.MILLISECOND;\n-\t\tDate roundedUpDate, roundedDownDate, lastRoundedDownDate;\n-\t\tDate minDate, maxDate;\n-\n-\t\troundedDownDate = lastRoundedDownDate = targetMilliSecondDate;\n-\t\troundedUpDate = dateTimeParser.parse(\"June 1, 2008 8:15:14.232\");\n-\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n-\t\t\n-\t\t//round to January 1\n-\t\tminDate = maxDate = januaryOneDate;\n-\t\troundToJanuaryFirst(minDate, maxDate, calendarField);\n-\t}\n-\t\n-\t/**\n-\t * Test DateUtils.truncate()-method with Calendar.YEAR\n-\t * \n-\t * @throws Exception\n-\t * @since 3.0\n-\t */\n-\tpublic void testTruncateYear() throws Exception {\n-\t\tfinal int calendarField = Calendar.YEAR;\n-\t\tDate lastTruncateDate = dateTimeParser.parse(\"December 31, 2007 23:59:59.999\");\n-\t\tbaseTruncateTest(targetYearDate, lastTruncateDate, calendarField);\n-\t}\n-\n-\t/**\n-\t * Test DateUtils.truncate()-method with Calendar.MONTH\n-\t * \n-\t * @throws Exception\n-\t * @since 3.0\n-\t */\n-\tpublic void testTruncateMonth() throws Exception {\n-\t\tfinal int calendarField = Calendar.MONTH;\n-\t\tDate truncatedDate = dateTimeParser.parse(\"March 1, 2008 0:00:00.000\");\n-\t\tDate lastTruncateDate = dateTimeParser.parse(\"March 31, 2008 23:59:59.999\");\n-\t\tbaseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n-\t}\n-\n-\t/**\n-\t * Test DateUtils.truncate()-method with DateUtils.SEMI_MONTH\n-\t * Includes truncating months with 28, 29, 30 and 31 days, each with first and second half\n-\t * \n-\t * @throws Exception\n-\t * @since 3.0\n-\t */\n-\tpublic void testTruncateSemiMonth() throws Exception {\n-\t\tfinal int calendarField = DateUtils.SEMI_MONTH;\n-\t\tDate truncatedDate, lastTruncateDate;\n-\t\t\n-\t\t//month with 28 days (1)\n-\t\ttruncatedDate = dateTimeParser.parse(\"February 1, 2007 0:00:00.000\");\n-\t\tlastTruncateDate = dateTimeParser.parse(\"February 15, 2007 23:59:59.999\");\n-\t\tbaseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n-\n-\t\t//month with 28 days (2)\n-\t\ttruncatedDate = dateTimeParser.parse(\"February 16, 2007 0:00:00.000\");\n-\t\tlastTruncateDate = dateTimeParser.parse(\"February 28, 2007 23:59:59.999\");\n-\t\tbaseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n-\n-\t\t//month with 29 days (1)\n-\t\ttruncatedDate = dateTimeParser.parse(\"February 1, 2008 0:00:00.000\");\n-\t\tlastTruncateDate = dateTimeParser.parse(\"February 15, 2008 23:59:59.999\");\n-\t\tbaseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n-\n-\t\t//month with 29 days (2)\n-\t\ttruncatedDate = dateTimeParser.parse(\"February 16, 2008 0:00:00.000\");\n-\t\tlastTruncateDate = dateTimeParser.parse(\"February 29, 2008 23:59:59.999\");\n-\t\tbaseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n-\n-\t\t//month with 30 days (1)\n-\t\ttruncatedDate = dateTimeParser.parse(\"April 1, 2008 0:00:00.000\");\n-\t\tlastTruncateDate = dateTimeParser.parse(\"April 15, 2008 23:59:59.999\");\n-\t\tbaseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n-\n-\t\t//month with 30 days (2)\n-\t\ttruncatedDate = dateTimeParser.parse(\"April 16, 2008 0:00:00.000\");\n-\t\tlastTruncateDate = dateTimeParser.parse(\"April 30, 2008 23:59:59.999\");\n-\t\tbaseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n-\t\t\n-\t\t//month with 31 days (1)\n-\t\ttruncatedDate = dateTimeParser.parse(\"March 1, 2008 0:00:00.000\");\n-\t\tlastTruncateDate = dateTimeParser.parse(\"March 15, 2008 23:59:59.999\");\n-\t\tbaseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n-\n-\t\t//month with 31 days (2)\n-\t\ttruncatedDate = dateTimeParser.parse(\"March 16, 2008 0:00:00.000\");\n-\t\tlastTruncateDate = dateTimeParser.parse(\"March 31, 2008 23:59:59.999\");\n-\t\tbaseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n-\n-\t}\n-\n-\t/**\n-\t * Test DateUtils.truncate()-method with Calendar.DATE\n-\t * \n-\t * @throws Exception\n-\t * @since 3.0\n-\t */\n-\tpublic void testTruncateDate() throws Exception {\n-\t\tfinal int calendarField = Calendar.DATE;\n-\t\tDate lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 23:59:59.999\");\n-\t\tbaseTruncateTest(targetDateDate, lastTruncateDate, calendarField);\n-\t}\n-\t\n-\t/**\n-\t * Test DateUtils.truncate()-method with Calendar.DAY_OF_MONTH\n-\t * \n-\t * @throws Exception\n-\t * @since 3.0\n-\t */\n-\tpublic void testTruncateDayOfMonth() throws Exception {\n-\t\tfinal int calendarField = Calendar.DAY_OF_MONTH;\n-\t\tDate lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 23:59:59.999\");\n-\t\tbaseTruncateTest(targetDayOfMonthDate, lastTruncateDate, calendarField);\n-\t}\n-\t\n-\t/**\n-\t * Test DateUtils.truncate()-method with Calendar.AM_PM\n-\t * Includes truncating the extremes of both AM and PM of one day \n-\t * \n-\t * @throws Exception\n-\t * @since 3.0\n-\t */\n-\tpublic void testTruncateAmPm() throws Exception {\n-\t\tfinal int calendarField = Calendar.AM_PM;\n-\t\t\n-\t\t//AM\n-\t\tDate lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 11:59:59.999\");\n-\t\tbaseTruncateTest(targetAmDate, lastTruncateDate, calendarField);\n-\n-\t\t//PM\n-\t\tlastTruncateDate = dateTimeParser.parse(\"June 1, 2008 23:59:59.999\");\n-\t\tbaseTruncateTest(targetPmDate, lastTruncateDate, calendarField);\n-\t}\n-\t\n-\t/**\n-\t * Test DateUtils.truncate()-method with Calendar.HOUR\n-\t * \n-\t * @throws Exception\n-\t * @since 3.0\n-\t */\n-\tpublic void testTruncateHour() throws Exception {\n-\t\tfinal int calendarField = Calendar.HOUR;\n-\t\tDate lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 8:59:59.999\");\n-\t\tbaseTruncateTest(targetHourDate, lastTruncateDate, calendarField);\n-\t}\n-\t\n-\t/**\n-\t * Test DateUtils.truncate()-method with Calendar.HOUR_OF_DAY\n-\t * \n-\t * @throws Exception\n-\t * @since 3.0\n-\t */\n-\tpublic void testTruncateHourOfDay() throws Exception {\n-\t\tfinal int calendarField = Calendar.HOUR_OF_DAY;\n-\t\tDate lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 8:59:59.999\");\n-\t\tbaseTruncateTest(targetHourOfDayDate, lastTruncateDate, calendarField);\n-\t}\n-\t\n-\t/**\n-\t * Test DateUtils.truncate()-method with Calendar.MINUTE\n-\t * \n-\t * @throws Exception\n-\t * @since 3.0\n-\t */\n-\tpublic void testTruncateMinute() throws Exception {\n-\t\tfinal int calendarField = Calendar.MINUTE;\n-\t\tDate lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 8:15:59.999\");\n-\t\tbaseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField);\n-\t}\n-\t\n-\t/**\n-\t * Test DateUtils.truncate()-method with Calendar.SECOND\n-\t * \n-\t * @throws Exception\n-\t * @since 3.0\n-\t */\n-\tpublic void testTruncateSecond() throws Exception {\n-\t\tfinal int calendarField = Calendar.SECOND;\n-\t\tDate lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 8:15:14.999\");\n-\t\tbaseTruncateTest(targetSecondDate, lastTruncateDate, calendarField);\n-\t}\n-\t\n-\t/**\n-\t * Test DateUtils.truncate()-method with Calendar.SECOND\n-\t * \n-\t * @throws Exception\n-\t * @since 3.0\n-\t */\n-\tpublic void testTruncateMilliSecond() throws Exception {\n-\t\tfinal int calendarField = Calendar.MILLISECOND;\n-\t\tbaseTruncateTest(targetMilliSecondDate, targetMilliSecondDate, calendarField);\n-\t}\n-\t\t\n-\t/**\n-\t * When using this basetest all extremes are tested.<br> \n-\t * It will test the Date, Calendar and Object-implementation<br>\n-\t * lastRoundDownDate should round down to roundedDownDate<br>\n-\t * lastRoundDownDate + 1 millisecond should round up to roundedUpDate\n-\t * \n-\t * @param roundedUpDate the next rounded date after <strong>roundedDownDate</strong> when using <strong>calendarField</strong>\n-\t * @param roundedDownDate the result if <strong>lastRoundDownDate</strong> was rounded with <strong>calendarField</strong>\n-\t * @param lastRoundDownDate rounding this value with <strong>calendarField</strong> will result in <strong>roundedDownDate</strong>\n-\t * @param calendarField\n-\t * @since 3.0\n-\t */\n-\tprotected void baseRoundTest(final Date roundedUpDate, final Date roundedDownDate, final Date lastRoundDownDate, final int calendarField) {\n-\t\tDate firstRoundUpDate = DateUtils.addMilliseconds(lastRoundDownDate, 1);\n-\t\t\n-\t\t//Date-comparison\n-\t\tassertEquals(roundedDownDate, DateUtils.round(roundedDownDate, calendarField));\n-\t\tassertEquals(roundedUpDate, DateUtils.round(roundedUpDate, calendarField));\n-\t\tassertEquals(roundedDownDate, DateUtils.round(lastRoundDownDate, calendarField));\n-\t\tassertEquals(roundedUpDate, DateUtils.round(firstRoundUpDate, calendarField));\n-\t\t\n-\t\t//Calendar-initiations\n-\t\tCalendar roundedUpCalendar, roundedDownCalendar, lastRoundDownCalendar, firstRoundUpCalendar; \n-\t\troundedDownCalendar = Calendar.getInstance();\n-\t\troundedUpCalendar = Calendar.getInstance();\n-\t\tlastRoundDownCalendar = Calendar.getInstance();\n-\t\tfirstRoundUpCalendar = Calendar.getInstance();\n-\t\troundedDownCalendar.setTime(roundedDownDate);\n-\t\troundedUpCalendar.setTime(roundedUpDate);\n-\t\tlastRoundDownCalendar.setTime(lastRoundDownDate);\n-\t\tfirstRoundUpCalendar.setTime(firstRoundUpDate);\n-\n-\t\t//Calendar-comparison\n-\t\tassertEquals(roundedDownCalendar, DateUtils.round(roundedDownCalendar, calendarField));\n-\t\tassertEquals(roundedUpCalendar, DateUtils.round(roundedUpCalendar, calendarField));\n-\t\tassertEquals(roundedDownCalendar, DateUtils.round(lastRoundDownCalendar, calendarField));\n-\t\tassertEquals(roundedUpCalendar, DateUtils.round(firstRoundUpCalendar, calendarField));\n-\n-\t\t//Object-comparison\n-\t\tassertEquals(roundedDownDate, DateUtils.round((Object) roundedDownDate, calendarField));\n-\t\tassertEquals(roundedUpDate, DateUtils.round((Object) roundedUpDate, calendarField));\n-\t\tassertEquals(roundedDownDate, DateUtils.round((Object) lastRoundDownDate, calendarField));\n-\t\tassertEquals(roundedUpDate, DateUtils.round((Object) firstRoundUpDate, calendarField));\n-\t\tassertEquals(roundedDownDate, DateUtils.round((Object) roundedDownCalendar, calendarField));\n-\t\tassertEquals(roundedUpDate, DateUtils.round((Object) roundedUpCalendar, calendarField));\n-\t\tassertEquals(roundedDownDate, DateUtils.round((Object) lastRoundDownDate, calendarField));\n-\t\tassertEquals(roundedUpDate, DateUtils.round((Object) firstRoundUpDate, calendarField));\n-\t}\n-\t\n-\t/**\n-\t * When using this basetest all extremes are tested.<br> \n-\t * It will test the Date, Calendar and Object-implementation<br>\n-\t * lastTruncateDate should round down to truncatedDate<br>\n-\t * lastTruncateDate + 1 millisecond should never round down to truncatedDate\n-\t * \n-\t * @param truncatedDate expected Date when <strong>lastTruncateDate</strong> is truncated with <strong>calendarField</strong>\n-\t * @param lastTruncateDate the last possible Date which will truncate to <strong>truncatedDate</strong> with <strong>calendarField</strong>\n-\t * @param calendarField a Calendar.field value\n-\t * @since 3.0\n-\t */\n-\tprotected void baseTruncateTest(final Date truncatedDate, final Date lastTruncateDate, final int calendarField) {\n-\t\tDate nextTruncateDate = DateUtils.addMilliseconds(lastTruncateDate, 1);\n-\t\t\n-\t\t//Date-comparison\n-\t\tassertEquals(\"Truncating \"+ fdf.format(truncatedDate) +\" as Date with CalendarField-value \"+ calendarField +\" must return itself\", truncatedDate, DateUtils.truncate(truncatedDate, calendarField));\n-\t\tassertEquals(truncatedDate, DateUtils.truncate(lastTruncateDate, calendarField));\n-\t\tassertFalse(fdf.format(lastTruncateDate) +\" is not an extreme when truncating as Date with CalendarField-value \"+ calendarField, truncatedDate.equals(DateUtils.truncate(nextTruncateDate, calendarField)));\n-\t\t\n-\t\t//Calendar-initiations\n-\t\tCalendar truncatedCalendar, lastTruncateCalendar, nextTruncateCalendar; \n-\t\ttruncatedCalendar = Calendar.getInstance();\n-\t\tlastTruncateCalendar = Calendar.getInstance();\n-\t\tnextTruncateCalendar = Calendar.getInstance();\n-\t\ttruncatedCalendar.setTime(truncatedDate);\n-\t\tlastTruncateCalendar.setTime(lastTruncateDate);\n-\t\tnextTruncateCalendar.setTime(nextTruncateDate);\n-\n-\t\t//Calendar-comparison\n-\t\tassertEquals(\"Truncating \"+ fdf.format(truncatedCalendar) +\" as Calendar with CalendarField-value \"+ calendarField +\" must return itself\", truncatedCalendar, DateUtils.truncate(truncatedCalendar, calendarField));\n-\t\tassertEquals(truncatedCalendar, DateUtils.truncate(lastTruncateCalendar, calendarField));\n-\t\tassertFalse(fdf.format(lastTruncateCalendar) +\" is not an extreme when truncating as Calendar with CalendarField-value \"+ calendarField, truncatedCalendar.equals(DateUtils.truncate(nextTruncateCalendar, calendarField)));\n-\n-\t\t//Object-comparison\n-\t\tassertEquals(\"Truncating \"+ fdf.format(truncatedDate) +\" as Date cast to Object with CalendarField-value \"+ calendarField +\" must return itself as Date\", truncatedDate, DateUtils.truncate((Object) truncatedDate, calendarField));\n-\t\tassertEquals(truncatedDate, DateUtils.truncate((Object) lastTruncateDate, calendarField));\n-\t\tassertFalse(fdf.format(lastTruncateDate) +\" is not an extreme when truncating as Date cast to Object with CalendarField-value \"+ calendarField, truncatedDate.equals(DateUtils.truncate((Object) nextTruncateDate, calendarField)));\n-\t\tassertEquals(\"Truncating \"+ fdf.format(truncatedCalendar) +\" as Calendar cast to Object with CalendarField-value \"+ calendarField +\" must return itself as Date\", truncatedDate, DateUtils.truncate((Object) truncatedCalendar, calendarField));\n-\t\tassertEquals(truncatedDate, DateUtils.truncate((Object) lastTruncateCalendar, calendarField));\n-\t\tassertFalse(fdf.format(lastTruncateCalendar) +\" is not an extreme when truncating as Calendar cast to Object with CalendarField-value \"+ calendarField, truncatedDate.equals(DateUtils.truncate((Object) nextTruncateCalendar, calendarField)));\n-\t}\n-\t\n-\t/**\n-\t * \n-\t * Any January 1 could be considered as the ultimate extreme.\n-\t * Instead of comparing the results if the input has a difference of 1 millisecond we check the output to be exactly January first. \n-\t * \n-\t * @param minDate\n-\t * @param maxDate\n-\t * @param calendarField\n-\t * @since 3.0\n-\t */\n-\tprotected void roundToJanuaryFirst(Date minDate, Date maxDate, int calendarField) {\n-\t\tassertEquals(\"Rounding \"+ fdf.format(januaryOneDate) +\" as Date with CalendarField-value \"+ calendarField +\" must return itself\", januaryOneDate, DateUtils.round(januaryOneDate, calendarField));\n-\t\tassertEquals(januaryOneDate, DateUtils.round(minDate, calendarField));\n-\t\tassertEquals(januaryOneDate, DateUtils.round(maxDate, calendarField));\n-\t\t\n-\t\tCalendar minCalendar = Calendar.getInstance();\n-\t\tminCalendar.setTime(minDate);\n-\t\tCalendar maxCalendar = Calendar.getInstance();\n-\t\tmaxCalendar.setTime(maxDate);\n-\t\tassertEquals(\"Rounding \"+ fdf.format(januaryOneCalendar) +\" as Date with CalendarField-value \"+ calendarField +\" must return itself\", januaryOneCalendar, DateUtils.round(januaryOneCalendar, calendarField));\n-\t\tassertEquals(januaryOneCalendar, DateUtils.round(minCalendar, calendarField));\n-\t\tassertEquals(januaryOneCalendar, DateUtils.round(maxCalendar, calendarField));\n-\n-\t\tDate toPrevRoundDate = DateUtils.addMilliseconds(minDate, -1);\n-\t\tDate toNextRoundDate = DateUtils.addMilliseconds(maxDate, 1);\n-\t\tassertFalse(fdf.format(minDate) +\" is not an lower-extreme when rounding as Date with CalendarField-value \"+ calendarField, januaryOneDate.equals(DateUtils.round(toPrevRoundDate, calendarField)));\n-\t\tassertFalse(fdf.format(maxDate) +\" is not an upper-extreme when rounding as Date with CalendarField-value \"+ calendarField, januaryOneDate.equals(DateUtils.round(toNextRoundDate, calendarField)));\n-\t\t\n-\t\tCalendar toPrevRoundCalendar = Calendar.getInstance();\n-\t\ttoPrevRoundCalendar.setTime(toPrevRoundDate);\n-\t\tCalendar toNextRoundCalendar = Calendar.getInstance();\n-\t\ttoNextRoundCalendar.setTime(toNextRoundDate);\n-\t\tassertFalse(fdf.format(minCalendar) +\" is not an lower-extreme when rounding as Date with CalendarField-value \"+ calendarField, januaryOneDate.equals(DateUtils.round(toPrevRoundDate, calendarField)));\n-\t\tassertFalse(fdf.format(maxCalendar) +\" is not an upper-extreme when rounding as Date with CalendarField-value \"+ calendarField, januaryOneDate.equals(DateUtils.round(toNextRoundDate, calendarField)));\n-\t}\n+        super.setUp();\n+        dateTimeParser = new SimpleDateFormat(\"MMM dd, yyyy H:mm:ss.SSS\", Locale.ENGLISH);\n+        \n+        targetYearDate = dateTimeParser.parse(\"January 1, 2007 0:00:00.000\");\n+        targetDateDate = targetDayOfMonthDate = dateTimeParser.parse(\"June 1, 2008 0:00:00.000\");\n+        targetAmDate =  dateTimeParser.parse(\"June 1, 2008 0:00:00.000\");\n+        targetPmDate = dateTimeParser.parse(\"June 1, 2008 12:00:00.000\");\n+        targetHourDate = dateTimeParser.parse(\"June 1, 2008 8:00:00.000\");\n+        targetHourOfDayDate = dateTimeParser.parse(\"June 1, 2008 8:00:00.000\");\n+        targetMinuteDate =  dateTimeParser.parse(\"June 1, 2008 8:15:00.000\");\n+        targetSecondDate =  dateTimeParser.parse(\"June 1, 2008 8:15:14.000\");\n+        targetMilliSecondDate =  dateTimeParser.parse(\"June 1, 2008 8:15:14.231\");\n+        \n+        januaryOneDate = dateTimeParser.parse(\"January 1, 2008 0:00:00.000\");\n+        januaryOneCalendar = Calendar.getInstance();\n+        januaryOneCalendar.setTime(januaryOneDate);\n+    }\n+\n+    /**\n+     * Tests DateUtils.round()-method with Calendar.Year\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testRoundYear() throws Exception {\n+        final int calendarField = Calendar.YEAR;\n+        Date roundedUpDate = dateTimeParser.parse(\"January 1, 2008 0:00:00.000\");\n+        Date roundedDownDate = targetYearDate;\n+        Date lastRoundedDownDate = dateTimeParser.parse(\"June 30, 2007 23:59:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+    }\n+    \n+    /**\n+     * Tests DateUtils.round()-method with Calendar.MONTH\n+     * Includes rounding months with 28, 29, 30 and 31 days\n+     * Includes rounding to January 1\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testRoundMonth() throws Exception {\n+        final int calendarField = Calendar.MONTH;\n+        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n+        Date minDate, maxDate;\n+        \n+        //month with 28 days\n+        roundedUpDate = dateTimeParser.parse(\"March 1, 2007 0:00:00.000\");\n+        roundedDownDate = dateTimeParser.parse(\"February 1, 2007 0:00:00.000\");\n+        lastRoundedDownDate = dateTimeParser.parse(\"February 14, 2007 23:59:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\n+        //month with 29 days\n+        roundedUpDate = dateTimeParser.parse(\"March 1, 2008 0:00:00.000\");\n+        roundedDownDate = dateTimeParser.parse(\"February 1, 2008 0:00:00.000\");\n+        lastRoundedDownDate = dateTimeParser.parse(\"February 15, 2008 23:59:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+        \n+        //month with 30 days\n+        roundedUpDate = dateTimeParser.parse(\"May 1, 2008 0:00:00.000\");\n+        roundedDownDate = dateTimeParser.parse(\"April 1, 2008 0:00:00.000\");\n+        lastRoundedDownDate = dateTimeParser.parse(\"April 15, 2008 23:59:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+        \n+        //month with 31 days\n+        roundedUpDate = dateTimeParser.parse(\"June 1, 2008 0:00:00.000\");\n+        roundedDownDate = dateTimeParser.parse(\"May 1, 2008 0:00:00.000\");\n+        lastRoundedDownDate = dateTimeParser.parse(\"May 16, 2008 23:59:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+        \n+        //round to January 1\n+        minDate = dateTimeParser.parse(\"December 17, 2007 00:00:00.000\");\n+        maxDate = dateTimeParser.parse(\"January 16, 2008 23:59:59.999\");\n+        roundToJanuaryFirst(minDate, maxDate, calendarField);\n+    }\n+    \n+    /**\n+     * Tests DateUtils.round()-method with DateUtils.SEMI_MONTH\n+     * Includes rounding months with 28, 29, 30 and 31 days, each with first and second half \n+     * Includes rounding to January 1\n+     *      \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testRoundSemiMonth() throws Exception {\n+        final int calendarField = DateUtils.SEMI_MONTH;\n+        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n+        Date minDate, maxDate;\n+        \n+        //month with 28 days (1)\n+        roundedUpDate = dateTimeParser.parse(\"February 16, 2007 0:00:00.000\");\n+        roundedDownDate = dateTimeParser.parse(\"February 1, 2007 0:00:00.000\");\n+        lastRoundedDownDate = dateTimeParser.parse(\"February 8, 2007 23:59:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\n+        //month with 28 days (2)\n+        roundedUpDate = dateTimeParser.parse(\"March 1, 2007 0:00:00.000\");\n+        roundedDownDate = dateTimeParser.parse(\"February 16, 2007 0:00:00.000\");\n+        lastRoundedDownDate = dateTimeParser.parse(\"February 23, 2007 23:59:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\n+        //month with 29 days (1)\n+        roundedUpDate = dateTimeParser.parse(\"February 16, 2008 0:00:00.000\");\n+        roundedDownDate = dateTimeParser.parse(\"February 1, 2008 0:00:00.000\");\n+        lastRoundedDownDate = dateTimeParser.parse(\"February 8, 2008 23:59:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+        \n+        //month with 29 days (2)\n+        roundedUpDate = dateTimeParser.parse(\"March 1, 2008 0:00:00.000\");\n+        roundedDownDate = dateTimeParser.parse(\"February 16, 2008 0:00:00.000\");\n+        lastRoundedDownDate = dateTimeParser.parse(\"February 23, 2008 23:59:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\n+        //month with 30 days (1)\n+        roundedUpDate = dateTimeParser.parse(\"April 16, 2008 0:00:00.000\");\n+        roundedDownDate = dateTimeParser.parse(\"April 1, 2008 0:00:00.000\");\n+        lastRoundedDownDate = dateTimeParser.parse(\"April 8, 2008 23:59:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\n+        //month with 30 days (2)\n+        roundedUpDate = dateTimeParser.parse(\"May 1, 2008 0:00:00.000\");\n+        roundedDownDate = dateTimeParser.parse(\"April 16, 2008 0:00:00.000\");\n+        lastRoundedDownDate = dateTimeParser.parse(\"April 23, 2008 23:59:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+        \n+        //month with 31 days (1)\n+        roundedUpDate = dateTimeParser.parse(\"May 16, 2008 0:00:00.000\");\n+        roundedDownDate = dateTimeParser.parse(\"May 1, 2008 0:00:00.000\");\n+        lastRoundedDownDate = dateTimeParser.parse(\"May 8, 2008 23:59:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\n+        //month with 31 days (2)\n+        roundedUpDate = dateTimeParser.parse(\"June 1, 2008 0:00:00.000\");\n+        roundedDownDate = dateTimeParser.parse(\"May 16, 2008 0:00:00.000\");\n+        lastRoundedDownDate = dateTimeParser.parse(\"May 23, 2008 23:59:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+        \n+        //round to January 1\n+        minDate = dateTimeParser.parse(\"December 24, 2007 00:00:00.000\");\n+        maxDate = dateTimeParser.parse(\"January 8, 2008 23:59:59.999\");\n+        roundToJanuaryFirst(minDate, maxDate, calendarField);\n+    }\n+    \n+    /**\n+     * Tests DateUtils.round()-method with Calendar.DATE\n+     * Includes rounding the extremes of one day \n+     * Includes rounding to January 1\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testRoundDate() throws Exception {\n+        final int calendarField = Calendar.DATE;\n+        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n+        Date minDate, maxDate;\n+\n+        roundedUpDate = dateTimeParser.parse(\"June 2, 2008 0:00:00.000\");\n+        roundedDownDate = targetDateDate;\n+        lastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 11:59:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+        \n+        //round to January 1\n+        minDate = dateTimeParser.parse(\"December 31, 2007 12:00:00.000\");\n+        maxDate = dateTimeParser.parse(\"January 1, 2008 11:59:59.999\");\n+        roundToJanuaryFirst(minDate, maxDate, calendarField);\n+    }\n+    \n+    /**\n+     * Tests DateUtils.round()-method with Calendar.DAY_OF_MONTH\n+     * Includes rounding the extremes of one day \n+     * Includes rounding to January 1\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testRoundDayOfMonth() throws Exception {\n+        final int calendarField = Calendar.DAY_OF_MONTH;\n+        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n+        Date minDate, maxDate;\n+\n+        roundedUpDate = dateTimeParser.parse(\"June 2, 2008 0:00:00.000\");\n+        roundedDownDate = targetDayOfMonthDate;\n+        lastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 11:59:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+        \n+        //round to January 1\n+        minDate = dateTimeParser.parse(\"December 31, 2007 12:00:00.000\");\n+        maxDate = dateTimeParser.parse(\"January 1, 2008 11:59:59.999\");\n+        roundToJanuaryFirst(minDate, maxDate, calendarField);\n+    }\n+    \n+    /**\n+     * Tests DateUtils.round()-method with Calendar.AM_PM\n+     * Includes rounding the extremes of both AM and PM of one day \n+     * Includes rounding to January 1\n+     * \n+     * @throws Exception\n+     * @3.0\n+     */\n+    public void testRoundAmPm() throws Exception {\n+        final int calendarField = Calendar.AM_PM;\n+        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n+        Date minDate, maxDate;\n+\n+        //AM\n+        roundedUpDate = dateTimeParser.parse(\"June 1, 2008 12:00:00.000\");\n+        roundedDownDate = targetAmDate;\n+        lastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 5:59:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\n+        //PM\n+        roundedUpDate = dateTimeParser.parse(\"June 2, 2008 0:00:00.000\");\n+        roundedDownDate = targetPmDate;\n+        lastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 17:59:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\n+        //round to January 1\n+        minDate = dateTimeParser.parse(\"December 31, 2007 18:00:00.000\");\n+        maxDate = dateTimeParser.parse(\"January 1, 2008 5:59:59.999\");\n+        roundToJanuaryFirst(minDate, maxDate, calendarField);\n+    }\n+    \n+    /**\n+     * Tests DateUtils.round()-method with Calendar.HOUR_OF_DAY\n+     * Includes rounding the extremes of one hour \n+     * Includes rounding to January 1\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testRoundHourOfDay() throws Exception {\n+        final int calendarField = Calendar.HOUR_OF_DAY;\n+        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n+        Date minDate, maxDate;\n+\n+        roundedUpDate = dateTimeParser.parse(\"June 1, 2008 9:00:00.000\");\n+        roundedDownDate = targetHourOfDayDate;\n+        lastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 8:29:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+        \n+        //round to January 1\n+        minDate = dateTimeParser.parse(\"December 31, 2007 23:30:00.000\");\n+        maxDate = dateTimeParser.parse(\"January 1, 2008 0:29:59.999\");\n+        roundToJanuaryFirst(minDate, maxDate, calendarField);\n+    }\n+    \n+    /**\n+     * Tests DateUtils.round()-method with Calendar.HOUR\n+     * Includes rounding the extremes of one hour \n+     * Includes rounding to January 1\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testRoundHour() throws Exception {\n+        final int calendarField = Calendar.HOUR;\n+        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n+        Date minDate, maxDate;\n+\n+        roundedUpDate = dateTimeParser.parse(\"June 1, 2008 9:00:00.000\");\n+        roundedDownDate = targetHourDate;\n+        lastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 8:29:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+        \n+        //round to January 1\n+        minDate = dateTimeParser.parse(\"December 31, 2007 23:30:00.000\");\n+        maxDate = dateTimeParser.parse(\"January 1, 2008 0:29:59.999\");\n+        roundToJanuaryFirst(minDate, maxDate, calendarField);\n+    }\n+    \n+    /**\n+     * Tests DateUtils.round()-method with Calendar.MINUTE\n+     * Includes rounding the extremes of one minute \n+     * Includes rounding to January 1\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testRoundMinute() throws Exception {\n+        final int calendarField = Calendar.MINUTE;\n+        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n+        Date minDate, maxDate;\n+\n+        roundedUpDate = dateTimeParser.parse(\"June 1, 2008 8:16:00.000\");\n+        roundedDownDate = targetMinuteDate;\n+        lastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 8:15:29.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+        \n+        //round to January 1\n+        minDate = dateTimeParser.parse(\"December 31, 2007 23:59:30.000\");\n+        maxDate = dateTimeParser.parse(\"January 1, 2008 0:00:29.999\");\n+        roundToJanuaryFirst(minDate, maxDate, calendarField);\n+    }\n+    \n+    /**\n+     * Tests DateUtils.round()-method with Calendar.SECOND\n+     * Includes rounding the extremes of one second \n+     * Includes rounding to January 1\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testRoundSecond() throws Exception {\n+        final int calendarField = Calendar.SECOND;\n+        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n+        Date minDate, maxDate;\n+\n+        roundedUpDate = dateTimeParser.parse(\"June 1, 2008 8:15:15.000\");\n+        roundedDownDate = targetSecondDate;\n+        lastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 8:15:14.499\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+        \n+        //round to January 1\n+        minDate = dateTimeParser.parse(\"December 31, 2007 23:59:59.500\");\n+        maxDate = dateTimeParser.parse(\"January 1, 2008 0:00:00.499\");\n+        roundToJanuaryFirst(minDate, maxDate, calendarField);\n+    }\n+    \n+    /**\n+     * Tests DateUtils.round()-method with Calendar.MILLISECOND\n+     * Includes rounding the extremes of one second \n+     * Includes rounding to January 1\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testRoundMilliSecond() throws Exception {\n+        final int calendarField = Calendar.MILLISECOND;\n+        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n+        Date minDate, maxDate;\n+\n+        roundedDownDate = lastRoundedDownDate = targetMilliSecondDate;\n+        roundedUpDate = dateTimeParser.parse(\"June 1, 2008 8:15:14.232\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+        \n+        //round to January 1\n+        minDate = maxDate = januaryOneDate;\n+        roundToJanuaryFirst(minDate, maxDate, calendarField);\n+    }\n+    \n+    /**\n+     * Test DateUtils.truncate()-method with Calendar.YEAR\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testTruncateYear() throws Exception {\n+        final int calendarField = Calendar.YEAR;\n+        Date lastTruncateDate = dateTimeParser.parse(\"December 31, 2007 23:59:59.999\");\n+        baseTruncateTest(targetYearDate, lastTruncateDate, calendarField);\n+    }\n+\n+    /**\n+     * Test DateUtils.truncate()-method with Calendar.MONTH\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testTruncateMonth() throws Exception {\n+        final int calendarField = Calendar.MONTH;\n+        Date truncatedDate = dateTimeParser.parse(\"March 1, 2008 0:00:00.000\");\n+        Date lastTruncateDate = dateTimeParser.parse(\"March 31, 2008 23:59:59.999\");\n+        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n+    }\n+\n+    /**\n+     * Test DateUtils.truncate()-method with DateUtils.SEMI_MONTH\n+     * Includes truncating months with 28, 29, 30 and 31 days, each with first and second half\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testTruncateSemiMonth() throws Exception {\n+        final int calendarField = DateUtils.SEMI_MONTH;\n+        Date truncatedDate, lastTruncateDate;\n+        \n+        //month with 28 days (1)\n+        truncatedDate = dateTimeParser.parse(\"February 1, 2007 0:00:00.000\");\n+        lastTruncateDate = dateTimeParser.parse(\"February 15, 2007 23:59:59.999\");\n+        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n+\n+        //month with 28 days (2)\n+        truncatedDate = dateTimeParser.parse(\"February 16, 2007 0:00:00.000\");\n+        lastTruncateDate = dateTimeParser.parse(\"February 28, 2007 23:59:59.999\");\n+        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n+\n+        //month with 29 days (1)\n+        truncatedDate = dateTimeParser.parse(\"February 1, 2008 0:00:00.000\");\n+        lastTruncateDate = dateTimeParser.parse(\"February 15, 2008 23:59:59.999\");\n+        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n+\n+        //month with 29 days (2)\n+        truncatedDate = dateTimeParser.parse(\"February 16, 2008 0:00:00.000\");\n+        lastTruncateDate = dateTimeParser.parse(\"February 29, 2008 23:59:59.999\");\n+        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n+\n+        //month with 30 days (1)\n+        truncatedDate = dateTimeParser.parse(\"April 1, 2008 0:00:00.000\");\n+        lastTruncateDate = dateTimeParser.parse(\"April 15, 2008 23:59:59.999\");\n+        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n+\n+        //month with 30 days (2)\n+        truncatedDate = dateTimeParser.parse(\"April 16, 2008 0:00:00.000\");\n+        lastTruncateDate = dateTimeParser.parse(\"April 30, 2008 23:59:59.999\");\n+        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n+        \n+        //month with 31 days (1)\n+        truncatedDate = dateTimeParser.parse(\"March 1, 2008 0:00:00.000\");\n+        lastTruncateDate = dateTimeParser.parse(\"March 15, 2008 23:59:59.999\");\n+        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n+\n+        //month with 31 days (2)\n+        truncatedDate = dateTimeParser.parse(\"March 16, 2008 0:00:00.000\");\n+        lastTruncateDate = dateTimeParser.parse(\"March 31, 2008 23:59:59.999\");\n+        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n+\n+    }\n+\n+    /**\n+     * Test DateUtils.truncate()-method with Calendar.DATE\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testTruncateDate() throws Exception {\n+        final int calendarField = Calendar.DATE;\n+        Date lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 23:59:59.999\");\n+        baseTruncateTest(targetDateDate, lastTruncateDate, calendarField);\n+    }\n+    \n+    /**\n+     * Test DateUtils.truncate()-method with Calendar.DAY_OF_MONTH\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testTruncateDayOfMonth() throws Exception {\n+        final int calendarField = Calendar.DAY_OF_MONTH;\n+        Date lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 23:59:59.999\");\n+        baseTruncateTest(targetDayOfMonthDate, lastTruncateDate, calendarField);\n+    }\n+    \n+    /**\n+     * Test DateUtils.truncate()-method with Calendar.AM_PM\n+     * Includes truncating the extremes of both AM and PM of one day \n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testTruncateAmPm() throws Exception {\n+        final int calendarField = Calendar.AM_PM;\n+        \n+        //AM\n+        Date lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 11:59:59.999\");\n+        baseTruncateTest(targetAmDate, lastTruncateDate, calendarField);\n+\n+        //PM\n+        lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 23:59:59.999\");\n+        baseTruncateTest(targetPmDate, lastTruncateDate, calendarField);\n+    }\n+    \n+    /**\n+     * Test DateUtils.truncate()-method with Calendar.HOUR\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testTruncateHour() throws Exception {\n+        final int calendarField = Calendar.HOUR;\n+        Date lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 8:59:59.999\");\n+        baseTruncateTest(targetHourDate, lastTruncateDate, calendarField);\n+    }\n+    \n+    /**\n+     * Test DateUtils.truncate()-method with Calendar.HOUR_OF_DAY\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testTruncateHourOfDay() throws Exception {\n+        final int calendarField = Calendar.HOUR_OF_DAY;\n+        Date lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 8:59:59.999\");\n+        baseTruncateTest(targetHourOfDayDate, lastTruncateDate, calendarField);\n+    }\n+    \n+    /**\n+     * Test DateUtils.truncate()-method with Calendar.MINUTE\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testTruncateMinute() throws Exception {\n+        final int calendarField = Calendar.MINUTE;\n+        Date lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 8:15:59.999\");\n+        baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField);\n+    }\n+    \n+    /**\n+     * Test DateUtils.truncate()-method with Calendar.SECOND\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testTruncateSecond() throws Exception {\n+        final int calendarField = Calendar.SECOND;\n+        Date lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 8:15:14.999\");\n+        baseTruncateTest(targetSecondDate, lastTruncateDate, calendarField);\n+    }\n+    \n+    /**\n+     * Test DateUtils.truncate()-method with Calendar.SECOND\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testTruncateMilliSecond() throws Exception {\n+        final int calendarField = Calendar.MILLISECOND;\n+        baseTruncateTest(targetMilliSecondDate, targetMilliSecondDate, calendarField);\n+    }\n+        \n+    /**\n+     * When using this basetest all extremes are tested.<br> \n+     * It will test the Date, Calendar and Object-implementation<br>\n+     * lastRoundDownDate should round down to roundedDownDate<br>\n+     * lastRoundDownDate + 1 millisecond should round up to roundedUpDate\n+     * \n+     * @param roundedUpDate the next rounded date after <strong>roundedDownDate</strong> when using <strong>calendarField</strong>\n+     * @param roundedDownDate the result if <strong>lastRoundDownDate</strong> was rounded with <strong>calendarField</strong>\n+     * @param lastRoundDownDate rounding this value with <strong>calendarField</strong> will result in <strong>roundedDownDate</strong>\n+     * @param calendarField\n+     * @since 3.0\n+     */\n+    protected void baseRoundTest(final Date roundedUpDate, final Date roundedDownDate, final Date lastRoundDownDate, final int calendarField) {\n+        Date firstRoundUpDate = DateUtils.addMilliseconds(lastRoundDownDate, 1);\n+        \n+        //Date-comparison\n+        assertEquals(roundedDownDate, DateUtils.round(roundedDownDate, calendarField));\n+        assertEquals(roundedUpDate, DateUtils.round(roundedUpDate, calendarField));\n+        assertEquals(roundedDownDate, DateUtils.round(lastRoundDownDate, calendarField));\n+        assertEquals(roundedUpDate, DateUtils.round(firstRoundUpDate, calendarField));\n+        \n+        //Calendar-initiations\n+        Calendar roundedUpCalendar, roundedDownCalendar, lastRoundDownCalendar, firstRoundUpCalendar; \n+        roundedDownCalendar = Calendar.getInstance();\n+        roundedUpCalendar = Calendar.getInstance();\n+        lastRoundDownCalendar = Calendar.getInstance();\n+        firstRoundUpCalendar = Calendar.getInstance();\n+        roundedDownCalendar.setTime(roundedDownDate);\n+        roundedUpCalendar.setTime(roundedUpDate);\n+        lastRoundDownCalendar.setTime(lastRoundDownDate);\n+        firstRoundUpCalendar.setTime(firstRoundUpDate);\n+\n+        //Calendar-comparison\n+        assertEquals(roundedDownCalendar, DateUtils.round(roundedDownCalendar, calendarField));\n+        assertEquals(roundedUpCalendar, DateUtils.round(roundedUpCalendar, calendarField));\n+        assertEquals(roundedDownCalendar, DateUtils.round(lastRoundDownCalendar, calendarField));\n+        assertEquals(roundedUpCalendar, DateUtils.round(firstRoundUpCalendar, calendarField));\n+\n+        //Object-comparison\n+        assertEquals(roundedDownDate, DateUtils.round((Object) roundedDownDate, calendarField));\n+        assertEquals(roundedUpDate, DateUtils.round((Object) roundedUpDate, calendarField));\n+        assertEquals(roundedDownDate, DateUtils.round((Object) lastRoundDownDate, calendarField));\n+        assertEquals(roundedUpDate, DateUtils.round((Object) firstRoundUpDate, calendarField));\n+        assertEquals(roundedDownDate, DateUtils.round((Object) roundedDownCalendar, calendarField));\n+        assertEquals(roundedUpDate, DateUtils.round((Object) roundedUpCalendar, calendarField));\n+        assertEquals(roundedDownDate, DateUtils.round((Object) lastRoundDownDate, calendarField));\n+        assertEquals(roundedUpDate, DateUtils.round((Object) firstRoundUpDate, calendarField));\n+    }\n+    \n+    /**\n+     * When using this basetest all extremes are tested.<br> \n+     * It will test the Date, Calendar and Object-implementation<br>\n+     * lastTruncateDate should round down to truncatedDate<br>\n+     * lastTruncateDate + 1 millisecond should never round down to truncatedDate\n+     * \n+     * @param truncatedDate expected Date when <strong>lastTruncateDate</strong> is truncated with <strong>calendarField</strong>\n+     * @param lastTruncateDate the last possible Date which will truncate to <strong>truncatedDate</strong> with <strong>calendarField</strong>\n+     * @param calendarField a Calendar.field value\n+     * @since 3.0\n+     */\n+    protected void baseTruncateTest(final Date truncatedDate, final Date lastTruncateDate, final int calendarField) {\n+        Date nextTruncateDate = DateUtils.addMilliseconds(lastTruncateDate, 1);\n+        \n+        //Date-comparison\n+        assertEquals(\"Truncating \"+ fdf.format(truncatedDate) +\" as Date with CalendarField-value \"+ calendarField +\" must return itself\", truncatedDate, DateUtils.truncate(truncatedDate, calendarField));\n+        assertEquals(truncatedDate, DateUtils.truncate(lastTruncateDate, calendarField));\n+        assertFalse(fdf.format(lastTruncateDate) +\" is not an extreme when truncating as Date with CalendarField-value \"+ calendarField, truncatedDate.equals(DateUtils.truncate(nextTruncateDate, calendarField)));\n+        \n+        //Calendar-initiations\n+        Calendar truncatedCalendar, lastTruncateCalendar, nextTruncateCalendar; \n+        truncatedCalendar = Calendar.getInstance();\n+        lastTruncateCalendar = Calendar.getInstance();\n+        nextTruncateCalendar = Calendar.getInstance();\n+        truncatedCalendar.setTime(truncatedDate);\n+        lastTruncateCalendar.setTime(lastTruncateDate);\n+        nextTruncateCalendar.setTime(nextTruncateDate);\n+\n+        //Calendar-comparison\n+        assertEquals(\"Truncating \"+ fdf.format(truncatedCalendar) +\" as Calendar with CalendarField-value \"+ calendarField +\" must return itself\", truncatedCalendar, DateUtils.truncate(truncatedCalendar, calendarField));\n+        assertEquals(truncatedCalendar, DateUtils.truncate(lastTruncateCalendar, calendarField));\n+        assertFalse(fdf.format(lastTruncateCalendar) +\" is not an extreme when truncating as Calendar with CalendarField-value \"+ calendarField, truncatedCalendar.equals(DateUtils.truncate(nextTruncateCalendar, calendarField)));\n+\n+        //Object-comparison\n+        assertEquals(\"Truncating \"+ fdf.format(truncatedDate) +\" as Date cast to Object with CalendarField-value \"+ calendarField +\" must return itself as Date\", truncatedDate, DateUtils.truncate((Object) truncatedDate, calendarField));\n+        assertEquals(truncatedDate, DateUtils.truncate((Object) lastTruncateDate, calendarField));\n+        assertFalse(fdf.format(lastTruncateDate) +\" is not an extreme when truncating as Date cast to Object with CalendarField-value \"+ calendarField, truncatedDate.equals(DateUtils.truncate((Object) nextTruncateDate, calendarField)));\n+        assertEquals(\"Truncating \"+ fdf.format(truncatedCalendar) +\" as Calendar cast to Object with CalendarField-value \"+ calendarField +\" must return itself as Date\", truncatedDate, DateUtils.truncate((Object) truncatedCalendar, calendarField));\n+        assertEquals(truncatedDate, DateUtils.truncate((Object) lastTruncateCalendar, calendarField));\n+        assertFalse(fdf.format(lastTruncateCalendar) +\" is not an extreme when truncating as Calendar cast to Object with CalendarField-value \"+ calendarField, truncatedDate.equals(DateUtils.truncate((Object) nextTruncateCalendar, calendarField)));\n+    }\n+    \n+    /**\n+     * \n+     * Any January 1 could be considered as the ultimate extreme.\n+     * Instead of comparing the results if the input has a difference of 1 millisecond we check the output to be exactly January first. \n+     * \n+     * @param minDate\n+     * @param maxDate\n+     * @param calendarField\n+     * @since 3.0\n+     */\n+    protected void roundToJanuaryFirst(Date minDate, Date maxDate, int calendarField) {\n+        assertEquals(\"Rounding \"+ fdf.format(januaryOneDate) +\" as Date with CalendarField-value \"+ calendarField +\" must return itself\", januaryOneDate, DateUtils.round(januaryOneDate, calendarField));\n+        assertEquals(januaryOneDate, DateUtils.round(minDate, calendarField));\n+        assertEquals(januaryOneDate, DateUtils.round(maxDate, calendarField));\n+        \n+        Calendar minCalendar = Calendar.getInstance();\n+        minCalendar.setTime(minDate);\n+        Calendar maxCalendar = Calendar.getInstance();\n+        maxCalendar.setTime(maxDate);\n+        assertEquals(\"Rounding \"+ fdf.format(januaryOneCalendar) +\" as Date with CalendarField-value \"+ calendarField +\" must return itself\", januaryOneCalendar, DateUtils.round(januaryOneCalendar, calendarField));\n+        assertEquals(januaryOneCalendar, DateUtils.round(minCalendar, calendarField));\n+        assertEquals(januaryOneCalendar, DateUtils.round(maxCalendar, calendarField));\n+\n+        Date toPrevRoundDate = DateUtils.addMilliseconds(minDate, -1);\n+        Date toNextRoundDate = DateUtils.addMilliseconds(maxDate, 1);\n+        assertFalse(fdf.format(minDate) +\" is not an lower-extreme when rounding as Date with CalendarField-value \"+ calendarField, januaryOneDate.equals(DateUtils.round(toPrevRoundDate, calendarField)));\n+        assertFalse(fdf.format(maxDate) +\" is not an upper-extreme when rounding as Date with CalendarField-value \"+ calendarField, januaryOneDate.equals(DateUtils.round(toNextRoundDate, calendarField)));\n+        \n+        Calendar toPrevRoundCalendar = Calendar.getInstance();\n+        toPrevRoundCalendar.setTime(toPrevRoundDate);\n+        Calendar toNextRoundCalendar = Calendar.getInstance();\n+        toNextRoundCalendar.setTime(toNextRoundDate);\n+        assertFalse(fdf.format(minCalendar) +\" is not an lower-extreme when rounding as Date with CalendarField-value \"+ calendarField, januaryOneDate.equals(DateUtils.round(toPrevRoundDate, calendarField)));\n+        assertFalse(fdf.format(maxCalendar) +\" is not an upper-extreme when rounding as Date with CalendarField-value \"+ calendarField, januaryOneDate.equals(DateUtils.round(toNextRoundDate, calendarField)));\n+    }\n }\n--- a/src/test/org/apache/commons/lang/time/DateUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/time/DateUtilsTest.java\n         assertDate(result, 2000, 6, 5, 4, 3, 2, 0);\n     }\n \n-\t// -----------------------------------------------------------------------\n-\tpublic void testSetYears() throws Exception {\n-\t\tDate base = new Date(MILLIS_TEST);\n-\t\tDate result = DateUtils.setYears(base, 2000);\n-\t\tassertNotSame(base, result);\n-\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n-\t\tassertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n-\n-\t\tresult = DateUtils.setYears(base, 2008);\n-\t\tassertNotSame(base, result);\n-\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n-\t\tassertDate(result, 2008, 6, 5, 4, 3, 2, 1);\n-\n-\t\tresult = DateUtils.setYears(base, 2005);\n-\t\tassertNotSame(base, result);\n-\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n-\t\tassertDate(result, 2005, 6, 5, 4, 3, 2, 1);\n-\t}\n-\n-\t// -----------------------------------------------------------------------\n-\tpublic void testSetMonths() throws Exception {\n-\t\tDate base = new Date(MILLIS_TEST);\n-\t\tDate result = DateUtils.setMonths(base, 5);\n-\t\tassertNotSame(base, result);\n-\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n-\t\tassertDate(result, 2000, 5, 5, 4, 3, 2, 1);\n-\n-\t\tresult = DateUtils.setMonths(base, 1);\n-\t\tassertNotSame(base, result);\n-\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n-\t\tassertDate(result, 2000, 1, 5, 4, 3, 2, 1);\n-\n-\t\ttry {\n-\t\t\tresult = DateUtils.setMonths(base, 12);\n-\t\t\tfail(\"DateUtils.setMonths did not throw an expected IllegalArguementException.\");\n-\t\t} catch (IllegalArgumentException e) {\n-\n-\t\t}\n-\t}\n-\n-\t// -----------------------------------------------------------------------\n-\tpublic void testSetDays() throws Exception {\n-\t\tDate base = new Date(MILLIS_TEST);\n-\t\tDate result = DateUtils.setDays(base, 1);\n-\t\tassertNotSame(base, result);\n-\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n-\t\tassertDate(result, 2000, 6, 1, 4, 3, 2, 1);\n-\n-\t\tresult = DateUtils.setDays(base, 29);\n-\t\tassertNotSame(base, result);\n-\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n-\t\tassertDate(result, 2000, 6, 29, 4, 3, 2, 1);\n-\n-\t\ttry {\n-\t\t\tresult = DateUtils.setDays(base, 32);\n-\t\t\tfail(\"DateUtils.setDays did not throw an expected IllegalArguementException.\");\n-\t\t} catch (IllegalArgumentException e) {\n-\n-\t\t}\n-\t}\n-\n-\t// -----------------------------------------------------------------------\n-\tpublic void testSetHours() throws Exception {\n-\t\tDate base = new Date(MILLIS_TEST);\n-\t\tDate result = DateUtils.setHours(base, 0);\n-\t\tassertNotSame(base, result);\n-\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n-\t\tassertDate(result, 2000, 6, 5, 0, 3, 2, 1);\n-\n-\t\tresult = DateUtils.setHours(base, 23);\n-\t\tassertNotSame(base, result);\n-\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n-\t\tassertDate(result, 2000, 6, 5, 23, 3, 2, 1);\n-\n-\t\ttry {\n-\t\t\tresult = DateUtils.setHours(base, 24);\n-\t\t\tfail(\"DateUtils.setHours did not throw an expected IllegalArguementException.\");\n-\t\t} catch (IllegalArgumentException e) {\n-\n-\t\t}\n-\t}\n-\n-\t// -----------------------------------------------------------------------\n-\tpublic void testSetMinutes() throws Exception {\n-\t\tDate base = new Date(MILLIS_TEST);\n-\t\tDate result = DateUtils.setMinutes(base, 0);\n-\t\tassertNotSame(base, result);\n-\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n-\t\tassertDate(result, 2000, 6, 5, 4, 0, 2, 1);\n-\n-\t\tresult = DateUtils.setMinutes(base, 59);\n-\t\tassertNotSame(base, result);\n-\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n-\t\tassertDate(result, 2000, 6, 5, 4, 59, 2, 1);\n-\n-\t\ttry {\n-\t\t\tresult = DateUtils.setMinutes(base, 60);\n-\t\t\tfail(\"DateUtils.setMinutes did not throw an expected IllegalArguementException.\");\n-\t\t} catch (IllegalArgumentException e) {\n-\n-\t\t}\n-\t}\n-\n-\t// -----------------------------------------------------------------------\n-\tpublic void testSetSeconds() throws Exception {\n-\t\tDate base = new Date(MILLIS_TEST);\n-\t\tDate result = DateUtils.setSeconds(base, 0);\n-\t\tassertNotSame(base, result);\n-\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n-\t\tassertDate(result, 2000, 6, 5, 4, 3, 0, 1);\n-\n-\t\tresult = DateUtils.setSeconds(base, 59);\n-\t\tassertNotSame(base, result);\n-\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n-\t\tassertDate(result, 2000, 6, 5, 4, 3, 59, 1);\n-\n-\t\ttry {\n-\t\t\tresult = DateUtils.setSeconds(base, 60);\n-\t\t\tfail(\"DateUtils.setSeconds did not throw an expected IllegalArguementException.\");\n-\t\t} catch (IllegalArgumentException e) {\n-\n-\t\t}\n-\t}\n-\n-\t// -----------------------------------------------------------------------\n-\tpublic void testSetMilliseconds() throws Exception {\n-\t\tDate base = new Date(MILLIS_TEST);\n-\t\tDate result = DateUtils.setMilliseconds(base, 0);\n-\t\tassertNotSame(base, result);\n-\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n-\t\tassertDate(result, 2000, 6, 5, 4, 3, 2, 0);\n-\n-\t\tresult = DateUtils.setMilliseconds(base, 999);\n-\t\tassertNotSame(base, result);\n-\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n-\t\tassertDate(result, 2000, 6, 5, 4, 3, 2, 999);\n-\n-\t\ttry {\n-\t\t\tresult = DateUtils.setMilliseconds(base, 1000);\n-\t\t\tfail(\"DateUtils.setMilliseconds did not throw an expected IllegalArguementException.\");\n-\t\t} catch (IllegalArgumentException e) {\n-\n-\t\t}\n-\t}\n+    // -----------------------------------------------------------------------\n+    public void testSetYears() throws Exception {\n+        Date base = new Date(MILLIS_TEST);\n+        Date result = DateUtils.setYears(base, 2000);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n+\n+        result = DateUtils.setYears(base, 2008);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2008, 6, 5, 4, 3, 2, 1);\n+\n+        result = DateUtils.setYears(base, 2005);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2005, 6, 5, 4, 3, 2, 1);\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testSetMonths() throws Exception {\n+        Date base = new Date(MILLIS_TEST);\n+        Date result = DateUtils.setMonths(base, 5);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 5, 5, 4, 3, 2, 1);\n+\n+        result = DateUtils.setMonths(base, 1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 1, 5, 4, 3, 2, 1);\n+\n+        try {\n+            result = DateUtils.setMonths(base, 12);\n+            fail(\"DateUtils.setMonths did not throw an expected IllegalArguementException.\");\n+        } catch (IllegalArgumentException e) {\n+\n+        }\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testSetDays() throws Exception {\n+        Date base = new Date(MILLIS_TEST);\n+        Date result = DateUtils.setDays(base, 1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 1, 4, 3, 2, 1);\n+\n+        result = DateUtils.setDays(base, 29);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 29, 4, 3, 2, 1);\n+\n+        try {\n+            result = DateUtils.setDays(base, 32);\n+            fail(\"DateUtils.setDays did not throw an expected IllegalArguementException.\");\n+        } catch (IllegalArgumentException e) {\n+\n+        }\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testSetHours() throws Exception {\n+        Date base = new Date(MILLIS_TEST);\n+        Date result = DateUtils.setHours(base, 0);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 0, 3, 2, 1);\n+\n+        result = DateUtils.setHours(base, 23);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 23, 3, 2, 1);\n+\n+        try {\n+            result = DateUtils.setHours(base, 24);\n+            fail(\"DateUtils.setHours did not throw an expected IllegalArguementException.\");\n+        } catch (IllegalArgumentException e) {\n+\n+        }\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testSetMinutes() throws Exception {\n+        Date base = new Date(MILLIS_TEST);\n+        Date result = DateUtils.setMinutes(base, 0);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 0, 2, 1);\n+\n+        result = DateUtils.setMinutes(base, 59);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 59, 2, 1);\n+\n+        try {\n+            result = DateUtils.setMinutes(base, 60);\n+            fail(\"DateUtils.setMinutes did not throw an expected IllegalArguementException.\");\n+        } catch (IllegalArgumentException e) {\n+\n+        }\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testSetSeconds() throws Exception {\n+        Date base = new Date(MILLIS_TEST);\n+        Date result = DateUtils.setSeconds(base, 0);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 3, 0, 1);\n+\n+        result = DateUtils.setSeconds(base, 59);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 3, 59, 1);\n+\n+        try {\n+            result = DateUtils.setSeconds(base, 60);\n+            fail(\"DateUtils.setSeconds did not throw an expected IllegalArguementException.\");\n+        } catch (IllegalArgumentException e) {\n+\n+        }\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testSetMilliseconds() throws Exception {\n+        Date base = new Date(MILLIS_TEST);\n+        Date result = DateUtils.setMilliseconds(base, 0);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 3, 2, 0);\n+\n+        result = DateUtils.setMilliseconds(base, 999);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 3, 2, 999);\n+\n+        try {\n+            result = DateUtils.setMilliseconds(base, 1000);\n+            fail(\"DateUtils.setMilliseconds did not throw an expected IllegalArguementException.\");\n+        } catch (IllegalArgumentException e) {\n+\n+        }\n+    }\n \n     //-----------------------------------------------------------------------\n     private void assertDate(Date date, int year, int month, int day, int hour, int min, int sec, int mil) throws Exception {", "timestamp": 1237039513, "metainfo": ""}