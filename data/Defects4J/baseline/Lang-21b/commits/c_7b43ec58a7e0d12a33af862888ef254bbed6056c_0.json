{"sha": "7b43ec58a7e0d12a33af862888ef254bbed6056c", "log": "Switched StringBuffer to StringBuilder whenever a local usage (and not subsequently used in an API) as per LANG-541  ", "commit": "\n--- a/src/java/org/apache/commons/lang/CharRange.java\n+++ b/src/java/org/apache/commons/lang/CharRange.java\n     @Override\n     public String toString() {\n         if (iToString == null) {\n-            StringBuffer buf = new StringBuffer(4);\n+            StringBuilder buf = new StringBuilder(4);\n             if (isNegated()) {\n                 buf.append('^');\n             }\n--- a/src/java/org/apache/commons/lang/CharSetUtils.java\n+++ b/src/java/org/apache/commons/lang/CharSetUtils.java\n             return str;\n         }\n         CharSet chars = CharSet.getInstance(set);\n-        StringBuffer buffer = new StringBuffer(str.length());\n+        StringBuilder buffer = new StringBuilder(str.length());\n         char[] chrs = str.toCharArray();\n         int sz = chrs.length;\n         char lastChar = ' ';\n      */\n     private static String modify(String str, String[] set, boolean expect) {\n         CharSet chars = CharSet.getInstance(set);\n-        StringBuffer buffer = new StringBuffer(str.length());\n+        StringBuilder buffer = new StringBuilder(str.length());\n         char[] chrs = str.toCharArray();\n         int sz = chrs.length;\n         for(int i=0; i<sz; i++) {\n--- a/src/java/org/apache/commons/lang/ClassUtils.java\n+++ b/src/java/org/apache/commons/lang/ClassUtils.java\n             return StringUtils.EMPTY;\n         }\n \n-        StringBuffer arrayPrefix = new StringBuffer();\n+        StringBuilder arrayPrefix = new StringBuilder();\n \n         // Handle array encoding\n         if (className.startsWith(\"[\")) {\n         if (className == null) {\n             throw new NullPointerException(\"className must not be null.\");\n         } else if (className.endsWith(\"[]\")) {\n-            StringBuffer classNameBuffer = new StringBuffer();\n+            StringBuilder classNameBuffer = new StringBuilder();\n             while (className.endsWith(\"[]\")) {\n                 className = className.substring(0, className.length() - 2);\n                 classNameBuffer.append(\"[\");\n                         className = reverseAbbreviationMap.get(className.substring(0, 1));\n                     }\n                 }\n-                StringBuffer canonicalClassNameBuffer = new StringBuffer(className);\n+                StringBuilder canonicalClassNameBuffer = new StringBuilder(className);\n                 for (int i = 0; i < dim; i++) {\n                     canonicalClassNameBuffer.append(\"[]\");\n                 }\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n         }\n \n         bufSize *= ((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1);\n-        StringBuffer buf = new StringBuffer(bufSize);\n+        StringBuilder buf = new StringBuilder(bufSize);\n \n         for (int i = startIndex; i < endIndex; i++) {\n             if (i > startIndex) {\n         bufSize *= ((array[startIndex] == null ? 16 : array[startIndex].toString().length())\n                         + separator.length());\n \n-        StringBuffer buf = new StringBuffer(bufSize);\n+        StringBuilder buf = new StringBuilder(bufSize);\n \n         for (int i = startIndex; i < endIndex; i++) {\n             if (i > startIndex) {\n         }\n \n         // two or more elements\n-        StringBuffer buf = new StringBuffer(256); // Java default is 16, probably too small\n+        StringBuilder buf = new StringBuilder(256); // Java default is 16, probably too small\n         if (first != null) {\n             buf.append(first);\n         }\n         }\n \n         // two or more elements\n-        StringBuffer buf = new StringBuffer(256); // Java default is 16, probably too small\n+        StringBuilder buf = new StringBuilder(256); // Java default is 16, probably too small\n         if (first != null) {\n             buf.append(first);\n         }\n         int increase = replacement.length() - replLength;\n         increase = (increase < 0 ? 0 : increase);\n         increase *= (max < 0 ? 16 : (max > 64 ? 64 : max));\n-        StringBuffer buf = new StringBuffer(text.length() + increase);\n+        StringBuilder buf = new StringBuilder(text.length() + increase);\n         while (end != -1) {\n             buf.append(text.substring(start, end)).append(replacement);\n             start = end + replLength;\n         // have upper-bound at 20% increase, then let Java take over\n         increase = Math.min(increase, text.length() / 5);\n \n-        StringBuffer buf = new StringBuffer(text.length() + increase);\n+        StringBuilder buf = new StringBuilder(text.length() + increase);\n \n         while (textIndex != -1) {\n \n         boolean modified = false;\n         int replaceCharsLength = replaceChars.length();\n         int strLength = str.length();\n-        StringBuffer buf = new StringBuffer(strLength);\n+        StringBuilder buf = new StringBuilder(strLength);\n         for (int i = 0; i < strLength; i++) {\n             char ch = str.charAt(i);\n             int index = searchChars.indexOf(ch);\n             start = end;\n             end = temp;\n         }\n-        return new StringBuffer(len + start - end + overlay.length() + 1)\n+        return new StringBuilder(len + start - end + overlay.length() + 1)\n             .append(str.substring(0, start))\n             .append(overlay)\n             .append(str.substring(end))\n                 }\n                 return new String(output2);\n             default :\n-                StringBuffer buf = new StringBuffer(outputLength);\n+                StringBuilder buf = new StringBuilder(outputLength);\n                 for (int i = 0; i < repeat; i++) {\n                     buf.append(str);\n                 }\n         if (str == null || (strLen = str.length()) == 0) {\n             return str;\n         }\n-        return new StringBuffer(strLen)\n+        return new StringBuilder(strLen)\n             .append(Character.toTitleCase(str.charAt(0)))\n             .append(str.substring(1))\n             .toString();\n         if (str == null || (strLen = str.length()) == 0) {\n             return str;\n         }\n-        return new StringBuffer(strLen)\n+        return new StringBuilder(strLen)\n             .append(Character.toLowerCase(str.charAt(0)))\n             .append(str.substring(1))\n             .toString();\n         if (str == null || (strLen = str.length()) == 0) {\n             return str;\n         }\n-        StringBuffer buffer = new StringBuffer(strLen);\n+        StringBuilder buffer = new StringBuilder(strLen);\n \n         char ch = 0;\n         for (int i = 0; i < strLen; i++) {\n     // Reversing\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Reverses a String as per {@link StringBuffer#reverse()}.</p>\n+     * <p>Reverses a String as per {@link StringBuilder#reverse()}.</p>\n      *\n      * <p>A <code>null</code> String returns <code>null</code>.</p>\n      *\n         if (str == null) {\n             return null;\n         }\n-        return new StringBuffer(str).reverse().toString();\n+        return new StringBuilder(str).reverse().toString();\n     }\n \n     /**\n--- a/src/java/org/apache/commons/lang/WordUtils.java\n+++ b/src/java/org/apache/commons/lang/WordUtils.java\n         }\n         int inputLineLength = str.length();\n         int offset = 0;\n-        StringBuffer wrappedLine = new StringBuffer(inputLineLength + 32);\n+        StringBuilder wrappedLine = new StringBuilder(inputLineLength + 32);\n         \n         while ((inputLineLength - offset) > wrapLength) {\n             if (str.charAt(offset) == ' ') {\n             return str;\n         }\n         int strLen = str.length();\n-        StringBuffer buffer = new StringBuffer(strLen);\n+        StringBuilder buffer = new StringBuilder(strLen);\n         boolean capitalizeNext = true;\n         for (int i = 0; i < strLen; i++) {\n             char ch = str.charAt(i);\n             return str;\n         }\n         int strLen = str.length();\n-        StringBuffer buffer = new StringBuffer(strLen);\n+        StringBuilder buffer = new StringBuilder(strLen);\n         boolean uncapitalizeNext = true;\n         for (int i = 0; i < strLen; i++) {\n             char ch = str.charAt(i);\n         if (str == null || (strLen = str.length()) == 0) {\n             return str;\n         }\n-        StringBuffer buffer = new StringBuffer(strLen);\n+        StringBuilder buffer = new StringBuilder(strLen);\n \n         boolean whitespace = true;\n         char ch = 0;\n             upper = lower;\n         }\n \n-        StringBuffer result = new StringBuffer();\n+        StringBuilder result = new StringBuilder();\n         int index = StringUtils.indexOf(str, \" \", lower);\n         if (index == -1) {\n             result.append(str.substring(0, upper));\n--- a/src/java/org/apache/commons/lang/exception/DefaultExceptionContext.java\n+++ b/src/java/org/apache/commons/lang/exception/DefaultExceptionContext.java\n      * @since 3.0\n      */\n     public String getFormattedExceptionMessage(String baseMessage){\n-        StringBuffer buffer = new StringBuffer(256);\n+        StringBuilder buffer = new StringBuilder(256);\n         if (baseMessage != null) {\n             buffer.append(baseMessage);\n         }\n         return buffer.toString();\n     }\n     \n-}\n+}\n--- a/src/java/org/apache/commons/lang/math/DoubleRange.java\n+++ b/src/java/org/apache/commons/lang/math/DoubleRange.java\n     @Override\n     public String toString() {\n         if (toString == null) {\n-            StringBuffer buf = new StringBuffer(32);\n+            StringBuilder buf = new StringBuilder(32);\n             buf.append(\"Range[\");\n             buf.append(min);\n             buf.append(',');\n--- a/src/java/org/apache/commons/lang/math/FloatRange.java\n+++ b/src/java/org/apache/commons/lang/math/FloatRange.java\n     @Override\n     public String toString() {\n         if (toString == null) {\n-            StringBuffer buf = new StringBuffer(32);\n+            StringBuilder buf = new StringBuilder(32);\n             buf.append(\"Range[\");\n             buf.append(min);\n             buf.append(',');\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n     @Override\n     public String toString() {\n         if (toString == null) {\n-            toString = new StringBuffer(32)\n+            toString = new StringBuilder(32)\n                 .append(getNumerator())\n                 .append('/')\n                 .append(getDenominator()).toString();\n                 if (properNumerator == 0) {\n                     toProperString = Integer.toString(getProperWhole());\n                 } else {\n-                    toProperString = new StringBuffer(32)\n+                    toProperString = new StringBuilder(32)\n                         .append(getProperWhole()).append(' ')\n                         .append(properNumerator).append('/')\n                         .append(getDenominator()).toString();\n                 }\n             } else {\n-                toProperString = new StringBuffer(32)\n+                toProperString = new StringBuilder(32)\n                     .append(getNumerator()).append('/')\n                     .append(getDenominator()).toString();\n             }\n--- a/src/java/org/apache/commons/lang/math/IntRange.java\n+++ b/src/java/org/apache/commons/lang/math/IntRange.java\n     @Override\n     public String toString() {\n         if (toString == null) {\n-            StringBuffer buf = new StringBuffer(32);\n+            StringBuilder buf = new StringBuilder(32);\n             buf.append(\"Range[\");\n             buf.append(min);\n             buf.append(',');\n--- a/src/java/org/apache/commons/lang/math/LongRange.java\n+++ b/src/java/org/apache/commons/lang/math/LongRange.java\n     @Override\n     public String toString() {\n         if (toString == null) {\n-            StringBuffer buf = new StringBuffer(32);\n+            StringBuilder buf = new StringBuilder(32);\n             buf.append(\"Range[\");\n             buf.append(min);\n             buf.append(',');\n--- a/src/java/org/apache/commons/lang/math/NumberRange.java\n+++ b/src/java/org/apache/commons/lang/math/NumberRange.java\n     @Override\n     public String toString() {\n         if (toString == null) {\n-            StringBuffer buf = new StringBuffer(32);\n+            StringBuilder buf = new StringBuilder(32);\n             buf.append(\"Range[\");\n             buf.append(min);\n             buf.append(',');\n--- a/src/java/org/apache/commons/lang/math/Range.java\n+++ b/src/java/org/apache/commons/lang/math/Range.java\n      */\n     @Override\n     public String toString() {\n-        StringBuffer buf = new StringBuffer(32);\n+        StringBuilder buf = new StringBuilder(32);\n         buf.append(\"Range[\");\n         buf.append(getMinimumNumber());\n         buf.append(',');", "timestamp": 1256016946, "metainfo": ""}