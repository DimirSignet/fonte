{"sha": "036e87cd0b6bb99287469d206775cdc349753870", "log": "Removed my author tag, typo, trailing spaces.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java\n+++ b/src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * <pre>\n  *   The variable ${${name}} must be used.\n  * </pre>\n- * Here only the variable's name refered to in the text should be replaced resulting\n+ * Here only the variable's name referred to in the text should be replaced resulting\n  * in the text (assuming that the value of the <code>name</code> variable is <code>x</code>):\n  * <pre>\n  *   The variable ${x} must be used.\n  * </pre>\n  *\n  * @author Apache Software Foundation\n- * @author Oliver Heger\n  * @version $Id$\n  * @since 2.2\n  */\n     /**\n      * Replaces all the occurrences of variables in the given source object with their matching\n      * values from the properties.\n-     * \n+     *\n      * @param source the source text containing the variables to substitute, null returns null\n      * @param valueProperties the properties with values, may be null\n      * @return the result of the replace operation\n         }\n         return StrSubstitutor.replace(source, valueMap);\n     }\n-    \n+\n     /**\n      * Replaces all the occurrences of variables in the given source object with\n      * their matching values from the system properties.\n         StrMatcher prefixMatcher = getVariablePrefixMatcher();\n         StrMatcher suffixMatcher = getVariableSuffixMatcher();\n         char escape = getEscapeChar();\n-        \n+\n         boolean top = (priorVariables == null);\n         boolean altered = false;\n         int lengthChange = 0;\n                             pos++;\n                         } else {\n                             // found variable end marker\n-                            String varName = new String(chars, startPos + startMatchLen, \n+                            String varName = new String(chars, startPos + startMatchLen,\n                                                         pos - startPos - startMatchLen);\n                             pos += endMatchLen;\n                             int endPos = pos;\n-                            \n+\n                             // on the first call initialize priorVariables\n                             if (priorVariables == null) {\n                                 priorVariables = new ArrayList<String>();\n                                 priorVariables.add(new String(chars, offset, length));\n                             }\n-                            \n+\n                             // handle cyclic substitution\n                             checkCyclicSubstitution(varName, priorVariables);\n                             priorVariables.add(varName);\n-                            \n+\n                             // resolve the variable\n                             String varValue = resolveVariable(varName, buf, startPos, endPos);\n                             if (varValue != null) {\n                                 lengthChange += change;\n                                 chars = buf.buffer;  // in case buffer was altered\n                             }\n-                            \n+\n                             // remove variable from the cyclic stack\n                             priorVariables.remove(priorVariables.size() - 1);\n                             break;", "timestamp": 1286044670, "metainfo": ""}