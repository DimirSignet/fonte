{"sha": "6e5791f24dacdb2e1720c7823c8294bf58f4bb6c", "log": "Fixing javadoc warnings from checkstyle  ", "commit": "\n--- a/src/java/org/apache/commons/lang/Entities.java\n+++ b/src/java/org/apache/commons/lang/Entities.java\n             try {\n                 this.doUnescape(stringWriter, str, firstAmp);\n             } catch (IOException e) {\n-                // This should never happen because ALL the StringWriter methods called by #escape(Writer, String) do not\n-                // throw IOExceptions.\n+                // This should never happen because ALL the StringWriter methods called by #escape(Writer, String) \n+                // do not throw IOExceptions.\n                 throw new UnhandledException(e);\n             }\n             return stringWriter.toString();\n         }\n     }\n \n+    /**\n+     * Make the StringWriter 10% larger than the source String to avoid growing the writer\n+     *\n+     * @param str The source string\n+     * @return A newly created StringWriter\n+     */\n     private StringWriter createStringWriter(String str) {\n-        // Make the StringWriter 10% larger than the source String to avoid growing the writer\n         return new StringWriter((int) (str.length() + (str.length() * 0.1)));\n     }\n \n      * @param writer\n      *            The <code>Writer</code> to write the results to; assumed to be non-null.\n      * @param str\n-     *            The <code>String</code> to write the results to; assumed to be non-null.\n+     *            The source <code>String</code> to unescape; assumed to be non-null.\n      * @throws IOException\n      *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}\n      *             methods.\n         }\n     }\n \n+    /**\n+     * Underlying unescape method that allows the optimisation of not starting from the 0 index again.\n+     *\n+     * @param writer\n+     *            The <code>Writer</code> to write the results to; assumed to be non-null.\n+     * @param str\n+     *            The source <code>String</code> to unescape; assumed to be non-null.\n+     * @param firstAmp\n+     *            The <code>int</code> index of the first ampersand in the source String.\n+     * @throws IOException\n+     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}\n+     *             methods.\n+     */\n     private void doUnescape(Writer writer, String str, int firstAmp) throws IOException {\n         writer.write(str, 0, firstAmp);\n         int len = str.length();\n--- a/src/java/org/apache/commons/lang/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang/time/FastDateFormat.java\n \n     // Serializing\n     //-----------------------------------------------------------------------\n+    /**\n+     * Create the object after serialization. This implementation reinitializes the \n+     * transient properties.\n+     *\n+     * @param ObjectInputStream from which the object is being deserialized.\n+     * @throws IOException if there is an IO issue.\n+     * @throws ClassNotFoundException if a class cannot be found.\n+     */\n     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n         in.defaultReadObject();\n         init();", "timestamp": 1170801612, "metainfo": ""}