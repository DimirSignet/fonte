{"sha": "7eca20f5a3e1a4c1deaad869f334e1abec316258", "log": "Refactoring toBoolean(String) and toBooleanObject(String) so that the latter has the same optimizations. I did this by pointing the former to the latter. I had to rewrite the optimizations a bit so they didn't auto-return as the latter considers null and false to be different. I also had to add specific support for false, no and off for the same reason. LANG-633  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/BooleanUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/BooleanUtils.java\n      *  <code>null</code> if no match or <code>null</code> input\n      */\n     public static Boolean toBooleanObject(String str) {\n-        if (\"true\".equalsIgnoreCase(str)) {\n+        // Previously used equalsIgnoreCase, which was fast for interned 'true'.\n+        // Non interned 'true' matched 15 times slower.\n+        // \n+        // Optimisation provides same performance as before for interned 'true'.\n+        // Similar performance for null, 'false', and other strings not length 2/3/4.\n+        // 'true'/'TRUE' match 4 times slower, 'tRUE'/'True' 7 times slower.\n+        if (str == \"true\") {\n             return Boolean.TRUE;\n-        } else if (\"false\".equalsIgnoreCase(str)) {\n-            return Boolean.FALSE;\n-        } else if (\"on\".equalsIgnoreCase(str)) {\n-            return Boolean.TRUE;\n-        } else if (\"off\".equalsIgnoreCase(str)) {\n-            return Boolean.FALSE;\n-        } else if (\"yes\".equalsIgnoreCase(str)) {\n-            return Boolean.TRUE;\n-        } else if (\"no\".equalsIgnoreCase(str)) {\n-            return Boolean.FALSE;\n-        }\n-        // no match\n+        }\n+        if (str == null) {\n+            return null;\n+        }\n+        switch (str.length()) {\n+            case 2: {\n+                char ch0 = str.charAt(0);\n+                char ch1 = str.charAt(1);\n+                if ((ch0 == 'o' || ch0 == 'O') && \n+                    (ch1 == 'n' || ch1 == 'N') ) \n+                {\n+                    return true;\n+                }\n+                if ((ch0 == 'n' || ch0 == 'N') && \n+                    (ch1 == 'o' || ch1 == 'O') ) \n+                {\n+                    return false;\n+                }\n+                break;\n+            }\n+            case 3: {\n+                char ch0 = str.charAt(0);\n+                char ch1 = str.charAt(1);\n+                char ch2 = str.charAt(2);\n+                if ((ch0 == 'y' || ch0 == 'Y') &&\n+                    (ch1 == 'e' || ch1 == 'E') &&\n+                    (ch2 == 's' || ch2 == 'S') ) \n+                {\n+                    return true;\n+                }\n+                if ((ch0 == 'o' || ch0 == 'O') &&\n+                    (ch1 == 'f' || ch1 == 'F') &&\n+                    (ch2 == 'f' || ch2 == 'F') ) \n+                {\n+                    return false;\n+                }\n+                break;\n+            }\n+            case 4: {\n+                char ch0 = str.charAt(0);\n+                char ch1 = str.charAt(1);\n+                char ch2 = str.charAt(2);\n+                char ch3 = str.charAt(3);\n+                if ((ch0 == 't' || ch0 == 'T') &&\n+                    (ch1 == 'r' || ch1 == 'R') &&\n+                    (ch2 == 'u' || ch2 == 'U') &&\n+                    (ch3 == 'e' || ch3 == 'E') ) \n+                {\n+                    return true;\n+                }\n+                break;\n+            }\n+            case 5: {\n+                char ch0 = str.charAt(0);\n+                char ch1 = str.charAt(1);\n+                char ch2 = str.charAt(2);\n+                char ch3 = str.charAt(3);\n+                char ch4 = str.charAt(4);\n+                if ((ch0 == 'f' || ch0 == 'F') &&\n+                    (ch1 == 'a' || ch1 == 'A') &&\n+                    (ch2 == 'l' || ch2 == 'L') &&\n+                    (ch3 == 's' || ch3 == 'S') &&\n+                    (ch4 == 'e' || ch4 == 'E') ) \n+                {\n+                    return false;\n+                }\n+                break;\n+            }\n+        }\n+\n         return null;\n     }\n \n      * @return the boolean value of the string, <code>false</code> if no match\n      */\n     public static boolean toBoolean(String str) {\n-        // Previously used equalsIgnoreCase, which was fast for interned 'true'.\n-        // Non interned 'true' matched 15 times slower.\n-        // \n-        // Optimisation provides same performance as before for interned 'true'.\n-        // Similar performance for null, 'false', and other strings not length 2/3/4.\n-        // 'true'/'TRUE' match 4 times slower, 'tRUE'/'True' 7 times slower.\n-        if (str == \"true\") {\n-            return true;\n-        }\n-        if (str == null) {\n-            return false;\n-        }\n-        switch (str.length()) {\n-            case 2: {\n-                char ch0 = str.charAt(0);\n-                char ch1 = str.charAt(1);\n-                return \n-                    (ch0 == 'o' || ch0 == 'O') &&\n-                    (ch1 == 'n' || ch1 == 'N');\n-            }\n-            case 3: {\n-                char ch = str.charAt(0);\n-                if (ch == 'y') {\n-                    return \n-                        (str.charAt(1) == 'e' || str.charAt(1) == 'E') &&\n-                        (str.charAt(2) == 's' || str.charAt(2) == 'S');\n-                }\n-                if (ch == 'Y') {\n-                    return \n-                        (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n-                        (str.charAt(2) == 'S' || str.charAt(2) == 's');\n-                }\n-                return false;\n-            }\n-            case 4: {\n-                char ch = str.charAt(0);\n-                if (ch == 't') {\n-                    return \n-                        (str.charAt(1) == 'r' || str.charAt(1) == 'R') &&\n-                        (str.charAt(2) == 'u' || str.charAt(2) == 'U') &&\n-                        (str.charAt(3) == 'e' || str.charAt(3) == 'E');\n-                }\n-                if (ch == 'T') {\n-                    return \n-                        (str.charAt(1) == 'R' || str.charAt(1) == 'r') &&\n-                        (str.charAt(2) == 'U' || str.charAt(2) == 'u') &&\n-                        (str.charAt(3) == 'E' || str.charAt(3) == 'e');\n-                }\n-            }\n-        }\n-        return false;\n+        return toBooleanObject(str) == Boolean.TRUE;\n     }\n     \n     /**\n--- a/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java\n         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"ON\"));\n         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"YES\"));\n         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"TruE\"));\n+\n+        assertEquals(null, BooleanUtils.toBooleanObject(\"ab\"));\n+        assertEquals(null, BooleanUtils.toBooleanObject(\"yoo\"));\n     }\n     \n     public void test_toBooleanObject_String_String_String_String() {\n         assertEquals(true, BooleanUtils.toBoolean(\"YES\"));\n         assertEquals(false, BooleanUtils.toBoolean(\"yes?\"));\n         assertEquals(false, BooleanUtils.toBoolean(\"tru\"));\n+\n+        assertEquals(false, BooleanUtils.toBoolean(\"no\"));\n+        assertEquals(false, BooleanUtils.toBoolean(\"off\"));\n+        assertEquals(false, BooleanUtils.toBoolean(\"yoo\"));\n     }\n \n     public void test_toBoolean_String_String_String() {", "timestamp": 1279653034, "metainfo": ""}