{"sha": "e53a0c9d92b174ba8684867433f015cdbdbdf371", "log": "default autoboxing depending on RT Java version  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/ClassUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ClassUtils.java\n      * <em><a href=\"http://java.sun.com/docs/books/jls/\">The Java Language Specification</a></em>,\n      * sections 5.1.1, 5.1.2 and 5.1.4 for details.</p>\n      *\n+     * <p><strong>Since Lang 3.0,</strong> this method will default behavior for\n+     * calculating assignability between primitive and wrapper types <em>corresponding\n+     * to the running Java version</em>; i.e. autoboxing will be the default\n+     * behavior in VMs running Java versions >= 1.5.</p>\n+     *\n      * @param cls  the Class to check, may be null\n      * @param toClass  the Class to try to assign into, returns false if null\n      * @return <code>true</code> if assignment possible\n      */\n-    //TODO when we bump the major version we should default autoboxing to true on platforms >= 1.5\n     public static boolean isAssignable(Class<?> cls, Class<?> toClass) {\n-        return isAssignable(cls, toClass, false);\n+        return isAssignable(cls, toClass, SystemUtils.isJavaVersionAtLeast(1.5f));\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n     private static class Inner {\n     }\n-    \n+\n     //-----------------------------------------------------------------------\n     public void testConstructor() {\n         assertNotNull(new ClassUtils());\n         assertEquals(true, Modifier.isPublic(ClassUtils.class.getModifiers()));\n         assertEquals(false, Modifier.isFinal(ClassUtils.class.getModifiers()));\n     }\n-    \n+\n     // -------------------------------------------------------------------------\n     public void test_getShortClassName_Object() {\n         assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(new ClassUtils(), \"<null>\"));\n         assertEquals(\"String\", ClassUtils.getShortClassName(\"hello\", \"<null>\"));\n         assertEquals(\"<null>\", ClassUtils.getShortClassName(null, \"<null>\"));\n     }\n-    \n+\n     public void test_getShortClassName_Class() {\n         assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));\n         assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));\n         assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));\n         assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));\n     }\n-    \n+\n     public void test_getShortClassName_String() {\n         assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class.getName()));\n         assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class.getName()));\n         assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageName(new Inner(), \"<null>\"));\n         assertEquals(\"<null>\", ClassUtils.getPackageName(null, \"<null>\"));\n     }\n-    \n+\n     public void test_getPackageName_Class() {\n         assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));\n         assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));\n         assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));\n         assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));\n     }\n-    \n+\n     public void test_getPackageName_String() {\n         assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageName(ClassUtils.class.getName()));\n         assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class.getName()));\n         assertEquals(\"\", ClassUtils.getPackageName((String)null));\n         assertEquals(\"\", ClassUtils.getPackageName(\"\"));\n     }\n-    \n+\n     // -------------------------------------------------------------------------\n     public void test_getAllSuperclasses_Class() {\n         List<?> list = ClassUtils.getAllSuperclasses(CY.class);\n         assertEquals(2, list.size());\n         assertEquals(CX.class, list.get(0));\n         assertEquals(Object.class, list.get(1));\n-        \n+\n         assertEquals(null, ClassUtils.getAllSuperclasses(null));\n     }\n-    \n+\n     public void test_getAllInterfaces_Class() {\n         List<?> list = ClassUtils.getAllInterfaces(CY.class);\n         assertEquals(6, list.size());\n         assertEquals(IE.class, list.get(3));\n         assertEquals(IF.class, list.get(4));\n         assertEquals(IA.class, list.get(5));\n-        \n+\n         assertEquals(null, ClassUtils.getAllInterfaces(null));\n     }\n-    \n+\n     private static interface IA {\n     }\n     private static interface IB {\n     }\n     private static class CY extends CX implements IB, IC {\n     }\n-    \n+\n     // -------------------------------------------------------------------------\n     public void test_convertClassNamesToClasses_List() {\n         List<String> list = new ArrayList<String>();\n         List<Class<?>> result = ClassUtils.convertClassNamesToClasses(list);\n         assertEquals(0, result.size());\n-        \n+\n         list.add(\"java.lang.String\");\n         list.add(\"java.lang.xxx\");\n         list.add(\"java.lang.Object\");\n         assertEquals(Object.class, result.get(2));\n \n         @SuppressWarnings(\"unchecked\") // test what happens when non-gneric code adds wrong type of element\n-        List<Object> olist = (List<Object>)(List<?>)list; \n+        List<Object> olist = (List<Object>)(List<?>)list;\n         olist.add(new Object());\n         try {\n             ClassUtils.convertClassNamesToClasses(list);\n         } catch (ClassCastException expected) {}\n         assertEquals(null, ClassUtils.convertClassNamesToClasses(null));\n     }\n-    \n+\n     public void test_convertClassesToClassNames_List() {\n         List<Class<?>> list = new ArrayList<Class<?>>();\n         List<String> result = ClassUtils.convertClassesToClassNames(list);\n         assertEquals(0, result.size());\n-        \n+\n         list.add(String.class);\n         list.add(null);\n         list.add(Object.class);\n         assertEquals(\"java.lang.Object\", result.get(2));\n \n         @SuppressWarnings(\"unchecked\") // test what happens when non-gneric code adds wrong type of element\n-        List<Object> olist = (List<Object>)(List<?>)list; \n+        List<Object> olist = (List<Object>)(List<?>)list;\n         olist.add(new Object());\n         try {\n             ClassUtils.convertClassesToClassNames(list);\n         } catch (ClassCastException expected) {}\n         assertEquals(null, ClassUtils.convertClassesToClassNames(null));\n     }\n-    \n+\n     // -------------------------------------------------------------------------\n     public void test_isInnerClass_Class() {\n         assertEquals(true, ClassUtils.isInnerClass(Inner.class));\n         assertEquals(false, ClassUtils.isInnerClass(String.class));\n         assertEquals(false, ClassUtils.isInnerClass(null));\n     }\n-    \n+\n     // -------------------------------------------------------------------------\n     public void test_isAssignable_ClassArray_ClassArray() throws Exception {\n         Class<?>[] array2 = new Class[] {Object.class, Object.class};\n         assertTrue(ClassUtils.isAssignable(array0, array0));\n         assertTrue(ClassUtils.isAssignable(array0, null));\n         assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null));\n-        \n+\n         assertFalse(ClassUtils.isAssignable(array1, array1s));\n         assertTrue(ClassUtils.isAssignable(array1s, array1s));\n         assertTrue(ClassUtils.isAssignable(array1s, array1));\n     }\n-    \n+\n     public void test_isAssignable() throws Exception {\n         assertFalse(ClassUtils.isAssignable((Class<?>) null, null));\n         assertFalse(ClassUtils.isAssignable(String.class, null));\n-        \n+\n         assertTrue(ClassUtils.isAssignable(null, Object.class));\n         assertTrue(ClassUtils.isAssignable(null, Integer.class));\n         assertFalse(ClassUtils.isAssignable(null, Integer.TYPE));\n         assertTrue(ClassUtils.isAssignable(String.class, Object.class));\n         assertTrue(ClassUtils.isAssignable(String.class, String.class));\n         assertFalse(ClassUtils.isAssignable(Object.class, String.class));\n-        assertFalse(ClassUtils.isAssignable(Integer.TYPE, Integer.class));\n-        assertFalse(ClassUtils.isAssignable(Integer.class, Integer.TYPE));\n+\n+        boolean autoboxing = SystemUtils.isJavaVersionAtLeast(1.5f);\n+\n+        assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Integer.class));\n+        assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE));\n         assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE));\n         assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class));\n-        assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Boolean.class));\n-        assertFalse(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE));\n+        assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Boolean.class));\n+        assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Boolean.TYPE));\n         assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE));\n         assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class));\n     }\n-    \n+\n     public void test_isAssignable_Autoboxing() throws Exception {\n         assertFalse(ClassUtils.isAssignable((Class<?>) null, null, true));\n         assertFalse(ClassUtils.isAssignable(String.class, null, true));\n         assertTrue(\"byte -> float\", ClassUtils.isAssignable(Byte.TYPE, Float.TYPE));\n         assertTrue(\"byte -> double\", ClassUtils.isAssignable(Byte.TYPE, Double.TYPE));\n         assertFalse(\"byte -> boolean\", ClassUtils.isAssignable(Byte.TYPE, Boolean.TYPE));\n-        \n+\n         // test short conversions\n         assertFalse(\"short -> char\", ClassUtils.isAssignable(Short.TYPE, Character.TYPE));\n         assertFalse(\"short -> byte\", ClassUtils.isAssignable(Short.TYPE, Byte.TYPE));\n         assertTrue(\"short -> float\", ClassUtils.isAssignable(Short.TYPE, Float.TYPE));\n         assertTrue(\"short -> double\", ClassUtils.isAssignable(Short.TYPE, Double.TYPE));\n         assertFalse(\"short -> boolean\", ClassUtils.isAssignable(Short.TYPE, Boolean.TYPE));\n-        \n+\n         // test char conversions\n         assertTrue(\"char -> char\", ClassUtils.isAssignable(Character.TYPE, Character.TYPE));\n         assertFalse(\"char -> byte\", ClassUtils.isAssignable(Character.TYPE, Byte.TYPE));\n         assertTrue(\"char -> float\", ClassUtils.isAssignable(Character.TYPE, Float.TYPE));\n         assertTrue(\"char -> double\", ClassUtils.isAssignable(Character.TYPE, Double.TYPE));\n         assertFalse(\"char -> boolean\", ClassUtils.isAssignable(Character.TYPE, Boolean.TYPE));\n-        \n+\n         // test int conversions\n         assertFalse(\"int -> char\", ClassUtils.isAssignable(Integer.TYPE, Character.TYPE));\n         assertFalse(\"int -> byte\", ClassUtils.isAssignable(Integer.TYPE, Byte.TYPE));\n         assertTrue(\"int -> float\", ClassUtils.isAssignable(Integer.TYPE, Float.TYPE));\n         assertTrue(\"int -> double\", ClassUtils.isAssignable(Integer.TYPE, Double.TYPE));\n         assertFalse(\"int -> boolean\", ClassUtils.isAssignable(Integer.TYPE, Boolean.TYPE));\n- \n+\n         // test long conversions\n         assertFalse(\"long -> char\", ClassUtils.isAssignable(Long.TYPE, Character.TYPE));\n         assertFalse(\"long -> byte\", ClassUtils.isAssignable(Long.TYPE, Byte.TYPE));\n         assertTrue(\"long -> float\", ClassUtils.isAssignable(Long.TYPE, Float.TYPE));\n         assertTrue(\"long -> double\", ClassUtils.isAssignable(Long.TYPE, Double.TYPE));\n         assertFalse(\"long -> boolean\", ClassUtils.isAssignable(Long.TYPE, Boolean.TYPE));\n- \n+\n         // test float conversions\n         assertFalse(\"float -> char\", ClassUtils.isAssignable(Float.TYPE, Character.TYPE));\n         assertFalse(\"float -> byte\", ClassUtils.isAssignable(Float.TYPE, Byte.TYPE));\n         assertTrue(\"float -> float\", ClassUtils.isAssignable(Float.TYPE, Float.TYPE));\n         assertTrue(\"float -> double\", ClassUtils.isAssignable(Float.TYPE, Double.TYPE));\n         assertFalse(\"float -> boolean\", ClassUtils.isAssignable(Float.TYPE, Boolean.TYPE));\n-        \n+\n         // test double conversions\n         assertFalse(\"double -> char\", ClassUtils.isAssignable(Double.TYPE, Character.TYPE));\n         assertFalse(\"double -> byte\", ClassUtils.isAssignable(Double.TYPE, Byte.TYPE));\n         assertFalse(\"double -> float\", ClassUtils.isAssignable(Double.TYPE, Float.TYPE));\n         assertTrue(\"double -> double\", ClassUtils.isAssignable(Double.TYPE, Double.TYPE));\n         assertFalse(\"double -> boolean\", ClassUtils.isAssignable(Double.TYPE, Boolean.TYPE));\n-        \n+\n         // test boolean conversions\n         assertFalse(\"boolean -> char\", ClassUtils.isAssignable(Boolean.TYPE, Character.TYPE));\n         assertFalse(\"boolean -> byte\", ClassUtils.isAssignable(Boolean.TYPE, Byte.TYPE));\n         assertFalse(\"boolean -> double\", ClassUtils.isAssignable(Boolean.TYPE, Double.TYPE));\n         assertTrue(\"boolean -> boolean\", ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE));\n     }\n-    \n+\n     public void test_isAssignable_Unboxing_Widening() throws Exception {\n         // test byte conversions\n         assertFalse(\"byte -> char\", ClassUtils.isAssignable(Byte.class, Character.TYPE, true));\n         assertTrue(\"byte -> float\", ClassUtils.isAssignable(Byte.class, Float.TYPE, true));\n         assertTrue(\"byte -> double\", ClassUtils.isAssignable(Byte.class, Double.TYPE, true));\n         assertFalse(\"byte -> boolean\", ClassUtils.isAssignable(Byte.class, Boolean.TYPE, true));\n-        \n+\n         // test short conversions\n         assertFalse(\"short -> char\", ClassUtils.isAssignable(Short.class, Character.TYPE, true));\n         assertFalse(\"short -> byte\", ClassUtils.isAssignable(Short.class, Byte.TYPE, true));\n         assertTrue(\"short -> float\", ClassUtils.isAssignable(Short.class, Float.TYPE, true));\n         assertTrue(\"short -> double\", ClassUtils.isAssignable(Short.class, Double.TYPE, true));\n         assertFalse(\"short -> boolean\", ClassUtils.isAssignable(Short.class, Boolean.TYPE, true));\n-        \n+\n         // test char conversions\n         assertTrue(\"char -> char\", ClassUtils.isAssignable(Character.class, Character.TYPE, true));\n         assertFalse(\"char -> byte\", ClassUtils.isAssignable(Character.class, Byte.TYPE, true));\n         assertTrue(\"char -> float\", ClassUtils.isAssignable(Character.class, Float.TYPE, true));\n         assertTrue(\"char -> double\", ClassUtils.isAssignable(Character.class, Double.TYPE, true));\n         assertFalse(\"char -> boolean\", ClassUtils.isAssignable(Character.class, Boolean.TYPE, true));\n-        \n+\n         // test int conversions\n         assertFalse(\"int -> char\", ClassUtils.isAssignable(Integer.class, Character.TYPE, true));\n         assertFalse(\"int -> byte\", ClassUtils.isAssignable(Integer.class, Byte.TYPE, true));\n         assertTrue(\"int -> float\", ClassUtils.isAssignable(Integer.class, Float.TYPE, true));\n         assertTrue(\"int -> double\", ClassUtils.isAssignable(Integer.class, Double.TYPE, true));\n         assertFalse(\"int -> boolean\", ClassUtils.isAssignable(Integer.class, Boolean.TYPE, true));\n-        \n+\n         // test long conversions\n         assertFalse(\"long -> char\", ClassUtils.isAssignable(Long.class, Character.TYPE, true));\n         assertFalse(\"long -> byte\", ClassUtils.isAssignable(Long.class, Byte.TYPE, true));\n         assertTrue(\"long -> float\", ClassUtils.isAssignable(Long.class, Float.TYPE, true));\n         assertTrue(\"long -> double\", ClassUtils.isAssignable(Long.class, Double.TYPE, true));\n         assertFalse(\"long -> boolean\", ClassUtils.isAssignable(Long.class, Boolean.TYPE, true));\n-        \n+\n         // test float conversions\n         assertFalse(\"float -> char\", ClassUtils.isAssignable(Float.class, Character.TYPE, true));\n         assertFalse(\"float -> byte\", ClassUtils.isAssignable(Float.class, Byte.TYPE, true));\n         assertTrue(\"float -> float\", ClassUtils.isAssignable(Float.class, Float.TYPE, true));\n         assertTrue(\"float -> double\", ClassUtils.isAssignable(Float.class, Double.TYPE, true));\n         assertFalse(\"float -> boolean\", ClassUtils.isAssignable(Float.class, Boolean.TYPE, true));\n-        \n+\n         // test double conversions\n         assertFalse(\"double -> char\", ClassUtils.isAssignable(Double.class, Character.TYPE, true));\n         assertFalse(\"double -> byte\", ClassUtils.isAssignable(Double.class, Byte.TYPE, true));\n         assertFalse(\"double -> float\", ClassUtils.isAssignable(Double.class, Float.TYPE, true));\n         assertTrue(\"double -> double\", ClassUtils.isAssignable(Double.class, Double.TYPE, true));\n         assertFalse(\"double -> boolean\", ClassUtils.isAssignable(Double.class, Boolean.TYPE, true));\n-        \n+\n         // test boolean conversions\n         assertFalse(\"boolean -> char\", ClassUtils.isAssignable(Boolean.class, Character.TYPE, true));\n         assertFalse(\"boolean -> byte\", ClassUtils.isAssignable(Boolean.class, Byte.TYPE, true));\n         assertFalse(\"boolean -> double\", ClassUtils.isAssignable(Boolean.class, Double.TYPE, true));\n         assertTrue(\"boolean -> boolean\", ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, true));\n     }\n-    \n+\n     public void testPrimitiveToWrapper() {\n-       \n+\n         // test primitive classes\n-        assertEquals(\"boolean -> Boolean.class\", \n-            Boolean.class, ClassUtils.primitiveToWrapper(Boolean.TYPE));   \n+        assertEquals(\"boolean -> Boolean.class\",\n+            Boolean.class, ClassUtils.primitiveToWrapper(Boolean.TYPE));\n         assertEquals(\"byte -> Byte.class\",\n             Byte.class, ClassUtils.primitiveToWrapper(Byte.TYPE));\n         assertEquals(\"char -> Character.class\",\n             Double.class, ClassUtils.primitiveToWrapper(Double.TYPE));\n         assertEquals(\"float -> Float.class\",\n             Float.class, ClassUtils.primitiveToWrapper(Float.TYPE));\n-        \n+\n         // test a few other classes\n         assertEquals(\"String.class -> String.class\",\n             String.class, ClassUtils.primitiveToWrapper(String.class));\n         assertEquals(\"ClassUtils.class -> ClassUtils.class\",\n-            org.apache.commons.lang3.ClassUtils.class, \n+            org.apache.commons.lang3.ClassUtils.class,\n             ClassUtils.primitiveToWrapper(org.apache.commons.lang3.ClassUtils.class));\n         assertEquals(\"Void.TYPE -> Void.TYPE\",\n             Void.TYPE, ClassUtils.primitiveToWrapper(Void.TYPE));\n-            \n-        // test null     \n+\n+        // test null\n         assertNull(\"null -> null\",\n             ClassUtils.primitiveToWrapper(null));\n     }\n \n         // test an array of various classes\n         final Class<?>[] primitives = new Class[] {\n-                Boolean.TYPE, Byte.TYPE, Character.TYPE, Short.TYPE, \n+                Boolean.TYPE, Byte.TYPE, Character.TYPE, Short.TYPE,\n                 Integer.TYPE, Long.TYPE, Double.TYPE, Float.TYPE,\n                 String.class, ClassUtils.class\n         };\n         Class<?>[] wrappers= ClassUtils.primitivesToWrappers(primitives);\n-        \n+\n         for (int i=0; i < primitives.length; i++) {\n             // test each returned wrapper\n             Class<?> primitive = primitives[i];\n             Class<?> expectedWrapper = ClassUtils.primitiveToWrapper(primitive);\n-            \n+\n             assertEquals(primitive + \" -> \" + expectedWrapper, expectedWrapper, wrappers[i]);\n         }\n \n         Set<?> set = Collections.unmodifiableSet(new HashSet<Object>());\n         Method isEmptyMethod = ClassUtils.getPublicMethod(set.getClass(), \"isEmpty\",  new Class[0]);\n             assertTrue(Modifier.isPublic(isEmptyMethod.getDeclaringClass().getModifiers()));\n- \n+\n         try {\n             isEmptyMethod.invoke(set, new Object[0]);\n         } catch(java.lang.IllegalAccessException iae) {\n             fail(\"Should not have thrown IllegalAccessException\");\n         }\n-               \n+\n         // Tests with a public Class\n         Method toStringMethod = ClassUtils.getPublicMethod(Object.class, \"toString\",  new Class[0]);\n             assertEquals(Object.class.getMethod(\"toString\", new Class[0]), toStringMethod);\n     }\n- \n+\n     public void testToClass_object() {\n         assertEquals(null, ClassUtils.toClass(null));\n \n     }\n \n     public void test_getPackageCanonicalName_String() {\n-        assertEquals(\"org.apache.commons.lang3\", \n+        assertEquals(\"org.apache.commons.lang3\",\n             ClassUtils.getPackageCanonicalName(\"org.apache.commons.lang3.ClassUtils\"));\n-        assertEquals(\"org.apache.commons.lang3\", \n+        assertEquals(\"org.apache.commons.lang3\",\n             ClassUtils.getPackageCanonicalName(\"[Lorg.apache.commons.lang3.ClassUtils;\"));\n-        assertEquals(\"org.apache.commons.lang3\", \n+        assertEquals(\"org.apache.commons.lang3\",\n             ClassUtils.getPackageCanonicalName(\"[[Lorg.apache.commons.lang3.ClassUtils;\"));\n-        assertEquals(\"org.apache.commons.lang3\", \n+        assertEquals(\"org.apache.commons.lang3\",\n             ClassUtils.getPackageCanonicalName(\"org.apache.commons.lang3.ClassUtils[]\"));\n-        assertEquals(\"org.apache.commons.lang3\", \n+        assertEquals(\"org.apache.commons.lang3\",\n             ClassUtils.getPackageCanonicalName(\"org.apache.commons.lang3.ClassUtils[][]\"));\n         assertEquals(\"\", ClassUtils.getPackageCanonicalName(\"[I\"));\n         assertEquals(\"\", ClassUtils.getPackageCanonicalName(\"[[I\"));", "timestamp": 1265127766, "metainfo": ""}