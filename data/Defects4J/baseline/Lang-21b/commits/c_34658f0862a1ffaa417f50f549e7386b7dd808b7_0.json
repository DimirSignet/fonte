{"sha": "34658f0862a1ffaa417f50f549e7386b7dd808b7", "log": "svn ps svn:eol-style native src/main/java/org/apache/commons/lang3/CharSequenceUtils.java svn ps svn:eol-style native src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java   ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/CharSequenceUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/CharSequenceUtils.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.commons.lang3;\n-\n-/**\n- * Null-safe CharSequence utility methods.\n- *\n- * @author Gary Gregory\n- */\n-public class CharSequenceUtils {\n-\n-    /**\n-     * Gets a CharSequence length or <code>0</code> if the CharSequence is\n-     * <code>null</code>.\n-     *\n-     * @param cs\n-     *            a CharSequence or <code>null</code>\n-     * @return CharSequence length or <code>0</code> if the CharSequence is\n-     *         <code>null</code>.\n-     * @since 3.0\n-     */\n-    public static int length(CharSequence cs) {\n-        return cs == null ? 0 : cs.length();\n-    }\n-\n-    /**\n-     * Returns a new <code>CharSequence</code> that is a subsequence of this\n-     * sequence starting with the <code>char</code> value at the specified\n-     * index. The length (in <code>char</code>s) of the returned sequence is\n-     * <code>length() - start</code>, so if <code>start == end</code> then an\n-     * empty sequence is returned. </p>\n-     *\n-     * @param cs\n-     *            the specified subsequence, may be null\n-     * @param start\n-     *            the start index, inclusive\n-     * @return a new subsequence or null\n-     *\n-     * @throws IndexOutOfBoundsException\n-     *             if <code>start</code> is negative or if <code>start</code> is\n-     *             greater than <code>length()</code>\n-     * @since 3.0\n-     */\n-    public static CharSequence subSequence(CharSequence cs, int start) {\n-        return cs == null ? null : cs.subSequence(start, cs.length());\n-    }\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3;\n+\n+/**\n+ * Null-safe CharSequence utility methods.\n+ *\n+ * @author Gary Gregory\n+ */\n+public class CharSequenceUtils {\n+\n+    /**\n+     * Gets a CharSequence length or <code>0</code> if the CharSequence is\n+     * <code>null</code>.\n+     *\n+     * @param cs\n+     *            a CharSequence or <code>null</code>\n+     * @return CharSequence length or <code>0</code> if the CharSequence is\n+     *         <code>null</code>.\n+     * @since 3.0\n+     */\n+    public static int length(CharSequence cs) {\n+        return cs == null ? 0 : cs.length();\n+    }\n+\n+    /**\n+     * Returns a new <code>CharSequence</code> that is a subsequence of this\n+     * sequence starting with the <code>char</code> value at the specified\n+     * index. The length (in <code>char</code>s) of the returned sequence is\n+     * <code>length() - start</code>, so if <code>start == end</code> then an\n+     * empty sequence is returned. </p>\n+     *\n+     * @param cs\n+     *            the specified subsequence, may be null\n+     * @param start\n+     *            the start index, inclusive\n+     * @return a new subsequence or null\n+     *\n+     * @throws IndexOutOfBoundsException\n+     *             if <code>start</code> is negative or if <code>start</code> is\n+     *             greater than <code>length()</code>\n+     * @since 3.0\n+     */\n+    public static CharSequence subSequence(CharSequence cs, int start) {\n+        return cs == null ? null : cs.subSequence(start, cs.length());\n+    }\n+}\n--- a/src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.commons.lang3;\n-\n-import java.nio.CharBuffer;\n-\n-import junit.framework.Assert;\n-import junit.framework.TestCase;\n-\n-/**\n- * Tests CharSequenceUtils\n- *\n- * @author Gary Gregory\n- */\n-public class CharSequenceUtilsTest extends TestCase {\n-\n-    public void testLength_CharBuffer() {\n-        Assert.assertEquals(0, CharSequenceUtils.length(CharBuffer.wrap(\"\")));\n-        Assert.assertEquals(1, CharSequenceUtils.length(CharBuffer.wrap(\"A\")));\n-        Assert.assertEquals(1, CharSequenceUtils.length(CharBuffer.wrap(\" \")));\n-        Assert.assertEquals(8, CharSequenceUtils.length(CharBuffer.wrap(\"ABCDEFGH\")));\n-    }\n-\n-    public void testLength_String() {\n-        Assert.assertEquals(0, CharSequenceUtils.length(null));\n-        Assert.assertEquals(0, CharSequenceUtils.length(\"\"));\n-        Assert.assertEquals(1, CharSequenceUtils.length(\"A\"));\n-        Assert.assertEquals(1, CharSequenceUtils.length(\" \"));\n-        Assert.assertEquals(8, CharSequenceUtils.length(\"ABCDEFGH\"));\n-    }\n-\n-    public void testLength_StringBuffer() {\n-        Assert.assertEquals(0, CharSequenceUtils.length(new StringBuffer(\"\")));\n-        Assert.assertEquals(1, CharSequenceUtils.length(new StringBuffer(\"A\")));\n-        Assert.assertEquals(1, CharSequenceUtils.length(new StringBuffer(\" \")));\n-        Assert.assertEquals(8, CharSequenceUtils.length(new StringBuffer(\"ABCDEFGH\")));\n-    }\n-\n-    public void testLength_StringBuilder() {\n-        Assert.assertEquals(0, CharSequenceUtils.length(new StringBuilder(\"\")));\n-        Assert.assertEquals(1, CharSequenceUtils.length(new StringBuilder(\"A\")));\n-        Assert.assertEquals(1, CharSequenceUtils.length(new StringBuilder(\" \")));\n-        Assert.assertEquals(8, CharSequenceUtils.length(new StringBuilder(\"ABCDEFGH\")));\n-    }\n-\n-    public void testSubSequence() {\n-        //\n-        // null input\n-        //\n-        Assert.assertEquals(null, CharSequenceUtils.subSequence(null, -1));\n-        Assert.assertEquals(null, CharSequenceUtils.subSequence(null, 0));\n-        Assert.assertEquals(null, CharSequenceUtils.subSequence(null, 1));\n-        //\n-        // non-null input\n-        //\n-        Assert.assertEquals(StringUtils.EMPTY, CharSequenceUtils.subSequence(StringUtils.EMPTY, 0));\n-        Assert.assertEquals(\"012\", CharSequenceUtils.subSequence(\"012\", 0));\n-        Assert.assertEquals(\"12\", CharSequenceUtils.subSequence(\"012\", 1));\n-        Assert.assertEquals(\"2\", CharSequenceUtils.subSequence(\"012\", 2));\n-        Assert.assertEquals(StringUtils.EMPTY, CharSequenceUtils.subSequence(\"012\", 3));\n-        //\n-        // Exception expected\n-        //\n-        try {\n-            Assert.assertEquals(null, CharSequenceUtils.subSequence(StringUtils.EMPTY, -1));\n-            Assert.fail(\"Expected \" + IndexOutOfBoundsException.class.getName());\n-        } catch (IndexOutOfBoundsException e) {\n-            // Expected\n-        }\n-        try {\n-            Assert.assertEquals(null, CharSequenceUtils.subSequence(StringUtils.EMPTY, 1));\n-            Assert.fail(\"Expected \" + IndexOutOfBoundsException.class.getName());\n-        } catch (IndexOutOfBoundsException e) {\n-            // Expected\n-        }\n-    }\n-\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3;\n+\n+import java.nio.CharBuffer;\n+\n+import junit.framework.Assert;\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests CharSequenceUtils\n+ *\n+ * @author Gary Gregory\n+ */\n+public class CharSequenceUtilsTest extends TestCase {\n+\n+    public void testLength_CharBuffer() {\n+        Assert.assertEquals(0, CharSequenceUtils.length(CharBuffer.wrap(\"\")));\n+        Assert.assertEquals(1, CharSequenceUtils.length(CharBuffer.wrap(\"A\")));\n+        Assert.assertEquals(1, CharSequenceUtils.length(CharBuffer.wrap(\" \")));\n+        Assert.assertEquals(8, CharSequenceUtils.length(CharBuffer.wrap(\"ABCDEFGH\")));\n+    }\n+\n+    public void testLength_String() {\n+        Assert.assertEquals(0, CharSequenceUtils.length(null));\n+        Assert.assertEquals(0, CharSequenceUtils.length(\"\"));\n+        Assert.assertEquals(1, CharSequenceUtils.length(\"A\"));\n+        Assert.assertEquals(1, CharSequenceUtils.length(\" \"));\n+        Assert.assertEquals(8, CharSequenceUtils.length(\"ABCDEFGH\"));\n+    }\n+\n+    public void testLength_StringBuffer() {\n+        Assert.assertEquals(0, CharSequenceUtils.length(new StringBuffer(\"\")));\n+        Assert.assertEquals(1, CharSequenceUtils.length(new StringBuffer(\"A\")));\n+        Assert.assertEquals(1, CharSequenceUtils.length(new StringBuffer(\" \")));\n+        Assert.assertEquals(8, CharSequenceUtils.length(new StringBuffer(\"ABCDEFGH\")));\n+    }\n+\n+    public void testLength_StringBuilder() {\n+        Assert.assertEquals(0, CharSequenceUtils.length(new StringBuilder(\"\")));\n+        Assert.assertEquals(1, CharSequenceUtils.length(new StringBuilder(\"A\")));\n+        Assert.assertEquals(1, CharSequenceUtils.length(new StringBuilder(\" \")));\n+        Assert.assertEquals(8, CharSequenceUtils.length(new StringBuilder(\"ABCDEFGH\")));\n+    }\n+\n+    public void testSubSequence() {\n+        //\n+        // null input\n+        //\n+        Assert.assertEquals(null, CharSequenceUtils.subSequence(null, -1));\n+        Assert.assertEquals(null, CharSequenceUtils.subSequence(null, 0));\n+        Assert.assertEquals(null, CharSequenceUtils.subSequence(null, 1));\n+        //\n+        // non-null input\n+        //\n+        Assert.assertEquals(StringUtils.EMPTY, CharSequenceUtils.subSequence(StringUtils.EMPTY, 0));\n+        Assert.assertEquals(\"012\", CharSequenceUtils.subSequence(\"012\", 0));\n+        Assert.assertEquals(\"12\", CharSequenceUtils.subSequence(\"012\", 1));\n+        Assert.assertEquals(\"2\", CharSequenceUtils.subSequence(\"012\", 2));\n+        Assert.assertEquals(StringUtils.EMPTY, CharSequenceUtils.subSequence(\"012\", 3));\n+        //\n+        // Exception expected\n+        //\n+        try {\n+            Assert.assertEquals(null, CharSequenceUtils.subSequence(StringUtils.EMPTY, -1));\n+            Assert.fail(\"Expected \" + IndexOutOfBoundsException.class.getName());\n+        } catch (IndexOutOfBoundsException e) {\n+            // Expected\n+        }\n+        try {\n+            Assert.assertEquals(null, CharSequenceUtils.subSequence(StringUtils.EMPTY, 1));\n+            Assert.fail(\"Expected \" + IndexOutOfBoundsException.class.getName());\n+        } catch (IndexOutOfBoundsException e) {\n+            // Expected\n+        }\n+    }\n+\n+}", "timestamp": 1279768236, "metainfo": ""}