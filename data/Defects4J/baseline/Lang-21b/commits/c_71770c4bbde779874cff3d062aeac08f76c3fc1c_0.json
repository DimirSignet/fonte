{"sha": "71770c4bbde779874cff3d062aeac08f76c3fc1c", "log": "Suppress warnings for unread/unused fields  ", "commit": "\n--- a/src/test/org/apache/commons/lang/CharRangeTest.java\n+++ b/src/test/org/apache/commons/lang/CharRangeTest.java\n     public void testContainsNullArg() {\n         CharRange range = new CharRange('a');\n         try {\n+            @SuppressWarnings(\"unused\")\n             boolean contains = range.contains(null);\n         } catch(IllegalArgumentException e) {\n             assertEquals(\"The Range must not be null\", e.getMessage());\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n         assertEquals(8, StringUtils.getLevenshteinDistance(\"zzzzzzzz\", \"hippo\") );\n         assertEquals(1, StringUtils.getLevenshteinDistance(\"hello\", \"hallo\") );\n         try {\n+            @SuppressWarnings(\"unused\")\n             int d = StringUtils.getLevenshteinDistance(\"a\", null);\n             fail(\"expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             // empty\n         }\n         try {\n+            @SuppressWarnings(\"unused\")\n             int d = StringUtils.getLevenshteinDistance(null, \"a\");\n             fail(\"expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n--- a/src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java\n     }\n \n     static class TestTSubObject extends TestObject {\n+        @SuppressWarnings(\"unused\")\n         private transient int t;\n         public TestTSubObject(int a, int t) {\n             super(a);\n     }\n \n     static class TestTTSubObject extends TestTSubObject {\n+        @SuppressWarnings(\"unused\")\n         private transient int tt;\n         public TestTTSubObject(int a, int t, int tt) {\n             super(a, t);\n     }\n \n     static class TestTTLeafObject extends TestTTSubObject {\n+        @SuppressWarnings(\"unused\")\n         private int leafValue;\n         public TestTTLeafObject(int a, int t, int tt, int leafValue) {\n             super(a, t, tt);\n     }\n \n     static class TestObjectWithMultipleFields {\n+        @SuppressWarnings(\"unused\")\n         private TestObject one;\n+        @SuppressWarnings(\"unused\")\n         private TestObject two;\n+        @SuppressWarnings(\"unused\")\n         private TestObject three;\n \n         public TestObjectWithMultipleFields(int one, int two, int three) {\n--- a/src/test/org/apache/commons/lang/builder/ReflectionToStringBuilderExcludeTest.java\n+++ b/src/test/org/apache/commons/lang/builder/ReflectionToStringBuilderExcludeTest.java\n public class ReflectionToStringBuilderExcludeTest extends TestCase {\n \n     class TestFixture {\n+        @SuppressWarnings(\"unused\")\n         private String secretField = SECRET_VALUE;\n \n+        @SuppressWarnings(\"unused\")\n         private String showField = NOT_SECRET_VALUE;\n     }\n \n--- a/src/test/org/apache/commons/lang/exception/AbstractNestableTest.java\n+++ b/src/test/org/apache/commons/lang/exception/AbstractNestableTest.java\n         // Test for index out of bounds\n         try\n         {\n+            @SuppressWarnings(\"unused\")\n             String msg = ne.getMessage(-1);\n             fail(\"getMessage(-1) should have thrown IndexOutOfBoundsException\");\n         }\n         }\n         try\n         {\n+            @SuppressWarnings(\"unused\")\n             String msg = ne.getMessage(msgs.length + 100);\n             fail(\"getMessage(999) should have thrown IndexOutOfBoundsException\");\n         }\n         // Test for index out of bounds\n         try\n         {\n+            @SuppressWarnings(\"unused\")\n             int index = n.indexOfThrowable(getTester1Class(), -1);\n             fail(\"method should have thrown IndexOutOfBoundsException\");\n         }\n         }\n         try\n         {\n+            @SuppressWarnings(\"unused\")\n             int index = n.indexOfThrowable(getTester1Class(), 5);\n             fail(\"method should have thrown IndexOutOfBoundsException\");\n         }", "timestamp": 1237050081, "metainfo": ""}