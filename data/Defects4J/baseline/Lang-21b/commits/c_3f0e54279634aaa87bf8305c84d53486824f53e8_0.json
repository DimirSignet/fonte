{"sha": "3f0e54279634aaa87bf8305c84d53486824f53e8", "log": "LANG-487 - Make default style thread-safe  ", "commit": "\n--- a/src/java/org/apache/commons/lang/builder/ToStringBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/ToStringBuilder.java\n     /**\n      * The default style of output to use.\n      */\n-    private static ToStringStyle defaultStyle = ToStringStyle.DEFAULT_STYLE;\n+    private static volatile ToStringStyle defaultStyle = ToStringStyle.DEFAULT_STYLE;\n \n     //----------------------------------------------------------------------------\n \n     /**\n      * <p>Gets the default <code>ToStringStyle</code> to use.</p>\n-     *\n-     * <p>This could allow the <code>ToStringStyle</code> to be\n-     * controlled for an entire application with one call.</p>\n-     *\n-     * <p>This might be used to have a verbose\n-     * <code>ToStringStyle</code> during development and a compact\n-     * <code>ToStringStyle</code> in production.</p>\n-     * \n-     * @return the default <code>ToStringStyle</code>\n+     * \n+     * <p>This method gets a singleton default value, typically for the whole JVM.\n+     * Changing this default should generally only be done during application startup.\n+     * It is recommended to pass a <code>ToStringStyle</code> to the constructor instead\n+     * of using this global default.</p>\n+     * \n+     * <p>This method is thread-safe, as a <code>volatile</code variable is used internally.</p>\n+     * \n+     * <p>One reason for changing the default could be to have a verbose style during\n+     * development and a compact style in production.</p>\n+     * \n+     * @return the default <code>ToStringStyle</code>, never null\n      */\n     public static ToStringStyle getDefaultStyle() {\n         return defaultStyle;\n     }\n \n+    /**\n+     * <p>Sets the default <code>ToStringStyle</code> to use.</p>\n+     * \n+     * <p>This method sets a singleton default value, typically for the whole JVM.\n+     * Changing this default should generally only be done during application startup.\n+     * It is recommended to pass a <code>ToStringStyle</code> to the constructor instead\n+     * of changing this global default.</p>\n+     * \n+     * <p>This method is thread-safe, as a <code>volatile</code variable is used internally.</p>\n+     * \n+     * @param style  the default <code>ToStringStyle</code>\n+     * @throws IllegalArgumentException if the style is <code>null</code>\n+     */\n+    public static void setDefaultStyle(ToStringStyle style) {\n+        if (style == null) {\n+            throw new IllegalArgumentException(\"The style must not be null\");\n+        }\n+        defaultStyle = style;\n+    }\n+\n+    //----------------------------------------------------------------------------\n     /**\n      * <p>Forwards to <code>ReflectionToStringBuilder</code>.</p>\n      * \n         return ReflectionToStringBuilder.toString(object, style, outputTransients, false, reflectUpToClass);\n     }\n \n-    /**\n-     * <p>Sets the default <code>ToStringStyle</code> to use.</p>\n-     * \n-     * @param style  the default <code>ToStringStyle</code>\n-     * @throws IllegalArgumentException if the style is <code>null</code>\n-     */\n-    public static void setDefaultStyle(ToStringStyle style) {\n-        if (style == null) {\n-            throw new IllegalArgumentException(\"The style must not be null\");\n-        }\n-        defaultStyle = style;\n-    }\n+    //----------------------------------------------------------------------------\n \n     /**\n      * Current toString buffer.\n      *  <code>null</code>\n      */\n     public ToStringBuilder(Object object) {\n-        this(object, getDefaultStyle(), null);\n+        this(object, null, null);\n     }\n \n     /**", "timestamp": 1256594206, "metainfo": ""}