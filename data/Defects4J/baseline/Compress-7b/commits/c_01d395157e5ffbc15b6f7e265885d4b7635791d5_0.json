{"sha": "01d395157e5ffbc15b6f7e265885d4b7635791d5", "log": "cleanups and nitpicking    ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java\n \t\n \tpublic ArchiveEntry getNextEntry() throws IOException {\n \t\tZipArchiveEntry entry = (ZipArchiveEntry)super.getNextEntry();\n-\t\tif(entry == null){\n+\t\tif(entry == null) {\n \t\t\treturn null;\n-\t\t}else{\n+\t\t} else {\n \t\t\treturn (ArchiveEntry)new JarArchiveEntry(entry);\n \t\t}\n \t}\n--- a/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java\n \n \tpublic void putArchiveEntry(ArchiveEntry entry) throws IOException {\n \t\t// TODO special jar stuff\n-\t\t super.putArchiveEntry((ZipArchiveEntry) entry);\n+\t\tsuper.putArchiveEntry((ZipArchiveEntry) entry);\n \t}\n }\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n import org.apache.commons.compress.archivers.ArchiveInputStream;\n \n public class TarArchiveInputStream extends ArchiveInputStream {\n-    private final TarInputStream in;\n+\n+\tprivate final TarInputStream in;\n     \n \tpublic TarArchiveInputStream( InputStream inputStream ) {\n \t\tin = new TarInputStream(inputStream);\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n \n public class TarArchiveOutputStream extends ArchiveOutputStream {\n \n-    private TarOutputStream out = null;\n+    private final TarOutputStream out;\n     \n     public TarArchiveOutputStream(OutputStream out) {\n         this.out = new TarOutputStream(out);\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java\n \n import java.io.FilterOutputStream;\n import java.io.IOException;\n-import java.io.InputStream;\n import java.io.OutputStream;\n \n /**\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n         zipOut.putNextEntry((ZipArchiveEntry) entry);\n     }\n \n-    public String getDefaultFileExtension() {\n-        return \"zip\";\n-    }\n-\n-    public byte[] getHeader() {\n-        // TODO Auto-generated method stub\n-        return null;\n-    }\n-\n-    public String getName() {\n-        return \"zip\";\n-    }\n-\n     public void close() throws IOException {\n         zipOut.close();\n     }\n--- a/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n \t\tdir.mkdir();\n \t}\n \n+\tprotected File getFile( String path ) {\n+\t\treturn new File(getClass().getClassLoader().getResource(path).getFile());\t\t\n+\t}\n+\t\n \tprotected void tearDown() throws Exception {\n \t\tdir.delete();\n \t\tdir = null;\n--- a/src/test/java/org/apache/commons/compress/archivers/ArTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ArTestCase.java\n \tpublic void testArArchiveCreation() throws Exception {\n \t\tfinal File output = new File(dir, \"bla.ar\");\n \t\t\n-\t\tfinal File file1 = new File(getClass().getClassLoader().getResource(\"test1.xml\").getFile());\n-\t\tfinal File file2 = new File(getClass().getClassLoader().getResource(\"test2.xml\").getFile());\n+\t\tfinal File file1 = getFile(\"test1.xml\");\n+\t\tfinal File file2 = getFile(\"test2.xml\");\n \t\t\n \t\tfinal OutputStream out = new FileOutputStream(output);\n         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out);\n \tpublic void testArUnarchive() throws Exception {\n \t\tfinal File output = new File(dir, \"bla.ar\");\n \t\t{\n-\t\t\tfinal File file1 = new File(getClass().getClassLoader().getResource(\"test1.xml\").getFile());\n-\t\t\tfinal File file2 = new File(getClass().getClassLoader().getResource(\"test2.xml\").getFile());\n+\t\t\tfinal File file1 = getFile(\"test1.xml\");\n+\t\t\tfinal File file2 = getFile(\"test2.xml\");\n \t\t\t\n \t\t\tfinal OutputStream out = new FileOutputStream(output);\n \t        final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out);\n--- a/src/test/java/org/apache/commons/compress/archivers/JarTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/JarTestCase.java\n \tpublic void testJarArchiveCreation() throws Exception {\n \t\tfinal File output = new File(dir, \"bla.jar\");\n \n-\t\tfinal File file1 = new File(getClass().getClassLoader().getResource(\"test1.xml\").getFile());\n-\t\tfinal File file2 = new File(getClass().getClassLoader().getResource(\"test2.xml\").getFile());\n+\t\tfinal File file1 = getFile(\"test1.xml\");\n+\t\tfinal File file2 = getFile(\"test2.xml\");\n \t\t\n         final OutputStream out = new FileOutputStream(output);\n         \n \n \t\n \tpublic void testJarUnarchive() throws Exception {\n-\t\tfinal File input = new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile());\n+\t\tfinal File input = getFile(\"bla.jar\");\n         final InputStream is = new FileInputStream(input);\n         final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is);\n         \n     }\n \t\n \tpublic void testJarUnarchiveAll() throws Exception {\n-\t\tfinal File input = new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile());\n+\t\tfinal File input = getFile(\"bla.jar\");\n         final InputStream is = new FileInputStream(input);\n         final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is);\n         \n--- a/src/test/java/org/apache/commons/compress/archivers/TarTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/TarTestCase.java\n public final class TarTestCase extends AbstractTestCase {\n     public void testTarArchiveCreation() throws Exception {\n \t\tfinal File output = new File(dir, \"bla.tar\");\n-\t\tfinal File file1 = new File(getClass().getClassLoader().getResource(\"test1.xml\").getFile());\n+\t\tfinal File file1 = getFile(\"test1.xml\");\n     \tfinal OutputStream out = new FileOutputStream(output);\n         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out);\n         final TarArchiveEntry entry = new TarArchiveEntry(\"testdata/test1.xml\");\n     \tassertEquals(bytes.length, 99);\n     \t\n \t\tfinal File output = new File(dir, \"bla.tar\");\n-\t\tfinal File file1 = new File(getClass().getClassLoader().getResource(\"test1.xml\").getFile());\n+\t\tfinal File file1 = getFile(\"test1.xml\");\n     \tfinal OutputStream out = new FileOutputStream(output);\n         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out);\n         final TarArchiveEntry entry = new TarArchiveEntry(name);\n     }\n     \n     public void testTarUnarchive() throws Exception {\n-\t\tfinal File input = new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile());\n+\t\tfinal File input = getFile(\"bla.tar\");\n \t\tfinal InputStream is = new FileInputStream(input);\n         final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is);\n         final TarArchiveEntry entry = (TarArchiveEntry)in.getNextEntry();\n--- a/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n \t\t\n \t\tfinal File output = new File(dir, \"bla.zip\");\n \t\t\n-\t\tfinal File file1 = new File(getClass().getClassLoader().getResource(\"test1.xml\").getFile());\n-\t\tfinal File file2 = new File(getClass().getClassLoader().getResource(\"test2.xml\").getFile());\n+\t\tfinal File file1 = getFile(\"test1.xml\");\n+\t\tfinal File file2 = getFile(\"test2.xml\");\n \t\t\n         final OutputStream out = new FileOutputStream(output);\n         \n     }\n     public void testZipUnarchive() throws Exception {\n \n-\t\tfinal File input = new File(getClass().getClassLoader().getResource(\"bla.zip\").getFile());\n+\t\tfinal File input = getFile(\"bla.zip\");\n     \t\n         final InputStream is = new FileInputStream(input);\n         final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n--- a/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java\n import java.io.FileOutputStream;\n import java.io.InputStream;\n \n-import junit.framework.TestCase;\n-\n+import org.apache.commons.compress.AbstractTestCase;\n import org.apache.commons.compress.archivers.ArchiveInputStream;\n import org.apache.commons.compress.archivers.ArchiveOutputStream;\n import org.apache.commons.compress.archivers.ArchiveStreamFactory;\n import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n \n-public final class ChangeSetTestCase extends TestCase {\n+public final class ChangeSetTestCase extends AbstractTestCase {\n \n \tpublic void testDeleteFromZip() throws Exception {\n \t\tArchiveOutputStream out = null;\n \t\t\tChangeSet changes = new ChangeSet();\n \t\t\tchanges.delete(\"test2.xml\");\n \t\t\t\n-\t\t\tfinal File input = new File(getClass().getClassLoader().getResource(\"bla.zip\").getFile());\n+\t\t\tfinal File input = getFile(\"bla.zip\");\n \t\t\tfinal InputStream is = new FileInputStream(input);\n \t\t\tais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n \t\t\t\n \t\t\tChangeSet changes = new ChangeSet();\n \t\t\tchanges.delete(\"test2.xml\");\n \t\t\t\n-\t\t\tfinal File input = new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile());\n+\t\t\tfinal File input = getFile(\"bla.tar\");\n \t\t\tfinal InputStream is = new FileInputStream(input);\n \t\t\tais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is);\n \t\t\t\n-\t\t\tFile temp = File.createTempFile(\"test\", \".tar\");\n+\t\t\tFile temp = new File(dir, \"bla.tar\");\n \t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp));\n \t\t\t\n \t\t\tSystem.out.println(temp.getAbsolutePath());\n \t\t\tchanges.delete(\"test2.xml\");\n \t\t\tchanges.delete(\"META-INF/MANIFEST.MF\");\n \t\t\t\n-\t\t\tfinal File input = new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile());\n+\t\t\tfinal File input = getFile(\"bla.jar\");\n \t\t\tfinal InputStream is = new FileInputStream(input);\n \t\t\tais = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is);\n \t\t\t\n-\t\t\tFile temp = File.createTempFile(\"test\", \".jar\");\n+\t\t\tFile temp = new File(dir, \"bla.jar\");\n \t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"jar\", new FileOutputStream(temp));\n \t\t\t\n \t\t\tSystem.out.println(temp.getAbsolutePath());\n \t\t\tChangeSet changes = new ChangeSet();\n \t\t\tchanges.delete(\"test2.xml\");\n \t\t\t\n-\t\t\tfinal File input = new File(getClass().getClassLoader().getResource(\"bla.ar\").getFile());\n+\t\t\tfinal File input = getFile(\"bla.ar\");\n \t\t\tfinal InputStream is = new FileInputStream(input);\n \t\t\tais = new ArchiveStreamFactory().createArchiveInputStream(\"ar\", is);\n \t\t\t\n-\t\t\tFile temp = File.createTempFile(\"test\", \".ar\");\n+\t\t\tFile temp = new File(dir, \"bla.ar\");\n \t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", new FileOutputStream(temp));\n \t\t\t\n \t\t\tSystem.out.println(temp.getAbsolutePath());\n \t\t\tchanges.delete(\"test2.xml\");\n \t\t\t\n \t\t\t\n-\t\t\tfinal File file1 = new File(getClass().getClassLoader().getResource(\"test.txt\").getFile());\n+\t\t\tfinal File file1 = getFile(\"test.txt\");\n \t\t\tZipArchiveEntry entry = new ZipArchiveEntry(\"testdata/test.txt\");\n \t        changes.add(entry, new FileInputStream(file1));\n \t\t\t\n-\t\t\tfinal File input = new File(getClass().getClassLoader().getResource(\"bla.zip\").getFile());\n+\t\t\tfinal File input = getFile(\"bla.zip\");\n \t\t\tfinal InputStream is = new FileInputStream(input);\n \t\t\tais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n \t\t\t\n-\t\t\tFile temp = File.createTempFile(\"test\", \".zip\");\n+\t\t\tFile temp = new File(dir, \"bla.zip\");\n \t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(temp));\n \t\t\t\n \t\t\tSystem.out.println(temp.getAbsolutePath());\n \t\t\tchanges.delete(\"test2.xml\");\n \t\t\t\n \t\t\t\n-\t\t\tfinal File file1 = new File(getClass().getClassLoader().getResource(\"test.txt\").getFile());\n+\t\t\tfinal File file1 = getFile(\"test.txt\");\n \t\t\t\n \t\t\tfinal TarArchiveEntry entry = new TarArchiveEntry(\"testdata/test.txt\");\n \t\t    entry.setModTime(0);\n \t\t\t\n \t        changes.add(entry, new FileInputStream(file1));\n \t\t\t\n-\t\t\tfinal File input = new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile());\n+\t\t\tfinal File input = getFile(\"bla.tar\");\n \t\t\tfinal InputStream is = new FileInputStream(input);\n \t\t\tais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is);\n \t\t\t\n-\t\t\tFile temp = File.createTempFile(\"test\", \".tar\");\n+\t\t\tFile temp = new File(dir, \"bla.tar\");\n \t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp));\n \t\t\t\n \t\t\tSystem.out.println(temp.getAbsolutePath());\n \t\t\tChangeSet changes = new ChangeSet();\n \t\t\tchanges.delete(\"test2.xml\");\n \t\t\t\n-\t\t\tfinal File file1 = new File(getClass().getClassLoader().getResource(\"test.txt\").getFile());\n+\t\t\tfinal File file1 = getFile(\"test.txt\");\n \t\t\tJarArchiveEntry entry = new JarArchiveEntry(\"testdata/test.txt\");\n \t        changes.add(entry, new FileInputStream(file1));\n \t\t\t\n-\t\t\tfinal File input = new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile());\n+\t\t\tfinal File input = getFile(\"bla.jar\");\n \t\t\tfinal InputStream is = new FileInputStream(input);\n \t\t\tais = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is);\n \t\t\t\n-\t\t\tFile temp = File.createTempFile(\"test\", \".jar\");\n+\t\t\tFile temp = new File(dir, \"bla.jar\");\n \t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"jar\", new FileOutputStream(temp));\n \t\t\t\n \t\t\tSystem.out.println(temp.getAbsolutePath());\n \t\t\tChangeSet changes = new ChangeSet();\n \t\t\tchanges.delete(\"test2.xml\");\n \t\t\t\n-\t\t\tfinal File file1 = new File(getClass().getClassLoader().getResource(\"test.txt\").getFile());\n+\t\t\tfinal File file1 = getFile(\"test.txt\");\n \t\t\t\n \t\t\tfinal ArArchiveEntry entry = new ArArchiveEntry(\"test.txt\", file1.length());\n \t\t   \n \t        changes.add(entry, new FileInputStream(file1));\n \t\t\t\n-\t\t\tfinal File input = new File(getClass().getClassLoader().getResource(\"bla.ar\").getFile());\n+\t\t\tfinal File input = getFile(\"bla.ar\");\n \t\t\tfinal InputStream is = new FileInputStream(input);\n \t\t\tais = new ArchiveStreamFactory().createArchiveInputStream(\"ar\", is);\n \t\t\t\n-\t\t\tFile temp = File.createTempFile(\"test\", \".ar\");\n+\t\t\tFile temp = new File(dir, \"bla.ar\");\n \t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", new FileOutputStream(temp));\n \t\t\t\n \t\t\tSystem.out.println(temp.getAbsolutePath());\n--- a/src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java\n import java.io.OutputStream;\n \n import org.apache.commons.compress.AbstractTestCase;\n-import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;\n import org.apache.commons.compress.utils.IOUtils;\n \n public final class BZip2TestCase extends AbstractTestCase {\n+\n \tpublic void testBzipCreation()  throws Exception {\n-\t\tfinal File output = new File(dir, \"bla.txt.bz2\");\n-\t\tSystem.out.println(dir);\n-\t\tfinal File file1 = new File(getClass().getClassLoader().getResource(\"test.txt\").getFile());\n+\t\tfinal File input = getFile(\"test.txt\");\n+\t\tfinal File output = new File(dir, \"test.txt.bz2\");\n \t\tfinal OutputStream out = new FileOutputStream(output);\n-\t\tCompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out);\n-\t\tIOUtils.copy(new FileInputStream(file1), cos);\n+\t\tfinal CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out);\n+\t\tIOUtils.copy(new FileInputStream(input), cos);\n \t\tcos.close();\n \t}\n \t\n \tpublic void testBzip2Unarchive() throws Exception {\n-\t\tfinal File output = new File(dir, \"test-entpackt.txt\");\n-\t\tSystem.out.println(dir);\n-\t\tfinal File input = new File(getClass().getClassLoader().getResource(\"bla.txt.bz2\").getFile());\n+\t\tfinal File input = getFile(\"bla.txt.bz2\");\n+\t\tfinal File output = new File(dir, \"bla.txt\");\n         final InputStream is = new FileInputStream(input);\n-        //final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is);\n-        final CompressorInputStream in = new BZip2CompressorInputStream(is);\n+        final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is);\n         IOUtils.copy(in, new FileOutputStream(output));\n \t\tin.close();\n     }\n--- a/src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java\n import org.apache.commons.compress.utils.IOUtils;\n \n public final class GZipTestCase extends AbstractTestCase {\n+\n \tpublic void testGzipCreation()  throws Exception {\n-\t\tfinal File output = new File(dir, \"bla.gz\");\n-\t\tfinal File file1 = new File(getClass().getClassLoader().getResource(\"test1.xml\").getFile());\n+\t\tfinal File input = getFile(\"test1.xml\");\n+\t\tfinal File output = new File(dir, \"test1.xml.gz\");\n \t\tfinal OutputStream out = new FileOutputStream(output);\n-\t\tCompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"gz\", out);\n-\t\tIOUtils.copy(new FileInputStream(file1), cos);\n+\t\tfinal CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"gz\", out);\n+\t\tIOUtils.copy(new FileInputStream(input), cos);\n \t\tcos.close();\n \t}\n \t\n \tpublic void testGzipUnarchive() throws Exception {\n-\t\tfinal File output = new File(dir, \"bla-entpackt.tar\");\n-\t\tfinal File input = new File(getClass().getClassLoader().getResource(\"bla.tgz\").getFile());\n+\t\tfinal File input = getFile(\"bla.tgz\");\n+\t\tfinal File output = new File(dir, \"bla.tar\");\n         final InputStream is = new FileInputStream(input);\n         final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"gz\", is);\n         IOUtils.copy(in, new FileOutputStream(output));", "timestamp": 1231549151, "metainfo": ""}