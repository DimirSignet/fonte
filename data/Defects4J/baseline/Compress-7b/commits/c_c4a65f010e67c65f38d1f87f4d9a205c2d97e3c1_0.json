{"sha": "c4a65f010e67c65f38d1f87f4d9a205c2d97e3c1", "log": "Improve and unify exception handling in StreamFactories.  Submitted by Christian Grobmeier.  SANDBOX-299  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;\n \n /**\n- * Factory to create Archive[In|Out]putStreams from names\n- * or the first bytes of the InputStream. In order add other\n- * implementations you should extend ArchiveStreamFactory\n- * and override the appropriate methods (and call their implementation\n- * from super of course)\n+ * Factory to create Archive[In|Out]putStreams from names or the first bytes of\n+ * the InputStream. In order add other implementations you should extend\n+ * ArchiveStreamFactory and override the appropriate methods (and call their\n+ * implementation from super of course)\n  * \n- * TODO add example here \n+ * TODO add example here\n  * \n  */\n-\n public class ArchiveStreamFactory {\n \n-    public ArchiveInputStream createArchiveInputStream( final String archiverName, final InputStream in ) throws ArchiveException {\n+    public ArchiveInputStream createArchiveInputStream(\n+            final String archiverName, final InputStream in)\n+            throws ArchiveException {\n+        if (archiverName == null || in == null) {\n+            throw new IllegalArgumentException(\"Archivername must not be null.\");\n+        }\n+\n         if (\"ar\".equalsIgnoreCase(archiverName)) {\n             return new ArArchiveInputStream(in);\n-        } else if(\"zip\".equalsIgnoreCase(archiverName)) {\n+        } else if (\"zip\".equalsIgnoreCase(archiverName)) {\n             return new ZipArchiveInputStream(in);\n-        } else if(\"tar\".equalsIgnoreCase(archiverName)) {\n+        } else if (\"tar\".equalsIgnoreCase(archiverName)) {\n             return new TarArchiveInputStream(in);\n-        } else if(\"jar\".equalsIgnoreCase(archiverName)) {\n+        } else if (\"jar\".equalsIgnoreCase(archiverName)) {\n             return new JarArchiveInputStream(in);\n-        } else if(\"cpio\".equalsIgnoreCase(archiverName)) {\n+        } else if (\"cpio\".equalsIgnoreCase(archiverName)) {\n             return new CpioArchiveInputStream(in);\n         }\n-        return null;\n+        throw new ArchiveException(\"Archiver: \" + archiverName + \" not found.\");\n     }\n \n-    public ArchiveOutputStream createArchiveOutputStream( final String archiverName, final OutputStream out ) throws ArchiveException {\n+    public ArchiveOutputStream createArchiveOutputStream(\n+            final String archiverName, final OutputStream out)\n+            throws ArchiveException {\n+        if (archiverName == null || out == null) {\n+            throw new IllegalArgumentException(\n+                    \"Archivername and stream must not be null.\");\n+        }\n+\n         if (\"ar\".equalsIgnoreCase(archiverName)) {\n             return new ArArchiveOutputStream(out);\n-        } else if(\"zip\".equalsIgnoreCase(archiverName)) {\n+        } else if (\"zip\".equalsIgnoreCase(archiverName)) {\n             return new ZipArchiveOutputStream(out);\n-        } else if(\"tar\".equalsIgnoreCase(archiverName)) {\n+        } else if (\"tar\".equalsIgnoreCase(archiverName)) {\n             return new TarArchiveOutputStream(out);\n-        } else if(\"jar\".equalsIgnoreCase(archiverName)) {\n+        } else if (\"jar\".equalsIgnoreCase(archiverName)) {\n             return new JarArchiveOutputStream(out);\n-        } else if(\"cpio\".equalsIgnoreCase(archiverName)) {\n+        } else if (\"cpio\".equalsIgnoreCase(archiverName)) {\n             return new CpioArchiveOutputStream(out);\n         }\n-        return null;\n+        throw new ArchiveException(\"Archiver: \" + archiverName + \" not found.\");\n     }\n \n-    public ArchiveInputStream createArchiveInputStream( final InputStream input ) throws IOException {\n+    public ArchiveInputStream createArchiveInputStream(final InputStream in)\n+            throws ArchiveException {\n+        if (in == null) {\n+            throw new IllegalArgumentException(\"Stream must not be null.\");\n+        }\n+\n+        if (!in.markSupported()) {\n+            throw new IllegalArgumentException(\"Mark is not supported.\");\n+        }\n \n         final byte[] signature = new byte[12];\n-        input.mark(signature.length);\n-        int signatureLength = input.read(signature);\n-        // TODO if reset is not supported pass on the IOException or return null?\n-        input.reset();\n+        in.mark(signature.length);\n+        try {\n+            int signatureLength = in.read(signature);\n+            in.reset();\n+            if (ZipArchiveInputStream.matches(signature, signatureLength)) {\n+                return new ZipArchiveInputStream(in);\n+            } else if (JarArchiveInputStream\n+                    .matches(signature, signatureLength)) {\n+                return new JarArchiveInputStream(in);\n+            } else if (TarArchiveInputStream\n+                    .matches(signature, signatureLength)) {\n+                return new TarArchiveInputStream(in);\n+            } else if (ArArchiveInputStream.matches(signature, signatureLength)) {\n+                return new ArArchiveInputStream(in);\n+            } else if (CpioArchiveInputStream.matches(signature,\n+                    signatureLength)) {\n+                return new CpioArchiveInputStream(in);\n+            }\n+        } catch (IOException e) {\n+            throw new ArchiveException(\n+                    \"Could not use reset and mark operations.\", e);\n+        }\n \n-        if(ZipArchiveInputStream.matches(signature, signatureLength)) {\n-            return new ZipArchiveInputStream(input);\n-        } else if(JarArchiveInputStream.matches(signature, signatureLength)) {\n-            return new JarArchiveInputStream(input);\n-        } else if(TarArchiveInputStream.matches(signature, signatureLength)) {\n-            return new TarArchiveInputStream(input);\n-        } else if(ArArchiveInputStream.matches(signature, signatureLength)) {\n-            return new ArArchiveInputStream(input);\n-        } else if(CpioArchiveInputStream.matches(signature, signatureLength)) {\n-            return new CpioArchiveInputStream(input);\n-        } \n-        return null;\n+        throw new ArchiveException(\n+                \"No Archiver not found for this stream signature\");\n     }\n }\n--- a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;\n \n /**\n- * Factory to create Compressor[In|Out]putStreams from names\n- * In order add other implementations you should extend CompressorStreamFactory\n- * and override the appropriate methods (and call their implementation\n- * from super of course)\n+ * Factory to create Compressor[In|Out]putStreams from names In order add other\n+ * implementations you should extend CompressorStreamFactory and override the\n+ * appropriate methods (and call their implementation from super of course)\n  * \n- * TODO add example here \n+ * TODO add example here\n  * \n  */\n public class CompressorStreamFactory {\n \n-\tpublic CompressorInputStream createCompressorInputStream( final String name, final InputStream in ) throws CompressorException {\n-\t\ttry {\n+    public CompressorInputStream createCompressorInputStream(final String name,\n+            final InputStream in) throws CompressorException {\n+        if (name == null || in == null) {\n+            throw new IllegalArgumentException(\n+                    \"Compressor name and stream must not be null.\");\n+        }\n \n-\t\t\tif(\"gz\".equalsIgnoreCase(name)) {\n-\t\t\t\treturn new GzipCompressorInputStream(in);\n-\t\t\t} else if(\"bzip2\".equalsIgnoreCase(name)) {\n-\t\t\t\treturn new BZip2CompressorInputStream(in);\n-\t\t\t} \n-\n-\t\t\treturn null;\n-\t\t\n-\t\t} catch (IOException e) {\n-\t\t\tthrow new CompressorException(\"Could not create CompressorInputStream\", e);\n-\t\t}\n+        try {\n+            if (\"gz\".equalsIgnoreCase(name)) {\n+                return new GzipCompressorInputStream(in);\n+            } else if (\"bzip2\".equalsIgnoreCase(name)) {\n+                return new BZip2CompressorInputStream(in);\n+            }\n+            throw new CompressorException(\"Compressor: \" + name + \" not found.\");\n+        } catch (IOException e) {\n+            throw new CompressorException(\n+                    \"Could not create CompressorInputStream\", e);\n+        }\n     }\n \n-    public CompressorOutputStream createCompressorOutputStream( final String name, final OutputStream out ) throws CompressorException {\n-\t\ttry {\n+    public CompressorOutputStream createCompressorOutputStream(\n+            final String name, final OutputStream out)\n+            throws CompressorException {\n+        if (name == null || out == null) {\n+            throw new IllegalArgumentException(\n+                    \"Compressor name and stream must not be null.\");\n+        }\n \n-\t\t\tif(\"gz\".equalsIgnoreCase(name)) {\n-\t\t\t\t\treturn new GzipCompressorOutputStream(out);\n-\t\t\t} else if(\"bzip2\".equalsIgnoreCase(name)) {\n-\t\t\t\t\treturn new BZip2CompressorOutputStream(out);\n-\t\t\t} \n-\t\t\treturn null;\n-\n-\t\t} catch (IOException e) {\n-\t\t\tthrow new CompressorException(\"Could not create CompressorOutputStream\", e);\n-\t\t}\n+        try {\n+            if (\"gz\".equalsIgnoreCase(name)) {\n+                return new GzipCompressorOutputStream(out);\n+            } else if (\"bzip2\".equalsIgnoreCase(name)) {\n+                return new BZip2CompressorOutputStream(out);\n+            }\n+            throw new CompressorException(\"Compressor: \" + name + \" not found.\");\n+        } catch (IOException e) {\n+            throw new CompressorException(\n+                    \"Could not create CompressorOutputStream\", e);\n+        }\n     }\n }", "timestamp": 1236921802, "metainfo": ""}