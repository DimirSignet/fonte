{"sha": "ccc77aa055e4e7362da064d9e478e58f2158b181", "log": "make sure UnicodeField sees the same bytes that are actually written to the archive when calculating the CRC  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java\n     }\n \n     /**\n-     * Assemble as unicode path extension form the name and encoding\n-     * of the orginal zip entry.\n+     * Assemble as unicode extension from the name/comment and\n+     * encoding of the orginal zip entry.\n      * \n-     * @param name The file name or comment.\n+     * @param text The file name or comment.\n      * @param zipEncoding The encoding of the filenames in the zip\n      * file, usually <code>\"CP437\"</code>.\n      */\n-    protected AbstractUnicodeExtraField(String name, String zipEncoding) {\n+    protected AbstractUnicodeExtraField(String text, String zipEncoding) {\n+        this(text, ZipEncodingHelper.encodeName(text, zipEncoding));\n+    }\n \n-        byte[] filename = ZipEncodingHelper.encodeName(name, zipEncoding);\n-\n+    /**\n+     * Assemble as unicode extension from the name/comment and\n+     * encoding of the orginal zip entry.\n+     * \n+     * @param text The file name or comment.\n+     * @param zipEncoding The encoding of the filenames in the zip\n+     * file, usually <code>\"CP437\"</code>.\n+     */\n+    protected AbstractUnicodeExtraField(String text, byte[] bytes) {\n         CRC32 crc32 = new CRC32();\n-        crc32.update(filename);\n+        crc32.update(bytes);\n         nameCRC32 = crc32.getValue();\n \n         try {\n-            unicodeName = name.getBytes(\"UTF-8\");\n+            unicodeName = text.getBytes(\"UTF-8\");\n         } catch (UnsupportedEncodingException e) {\n             throw new RuntimeException(\"FATAL: UTF-8 encoding not supported.\",\n                                        e);\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java\n     }\n \n     /**\n-     * Assemble as unicode comment extension form the comment and\n+     * Assemble as unicode comment extension from the comment and\n      * encoding of the orginal zip entry.\n      * \n-     * @param name The file name\n+     * @param comment The file comment\n      * @param zipEncoding The encoding of the comment in the zip file,\n      * usually <code>\"CP437\"</code>.\n      */\n-    public UnicodeCommentExtraField(String name, String zipEncoding) {\n-        super(name, zipEncoding);\n+    public UnicodeCommentExtraField(String comment, String zipEncoding) {\n+        super(comment, zipEncoding);\n+    }\n+\n+    /**\n+     * Assemble as unicode comment extension from the comment given as\n+     * text as well as the bytes actually written to the archive.\n+     * \n+     * @param comment The file comment\n+     * @param bytes the bytes actually written to the archive\n+     */\n+    public UnicodeCommentExtraField(String comment, byte[] bytes) {\n+        super(comment, bytes);\n     }\n \n     public ZipShort getHeaderId() {\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java\n     }\n \n     /**\n-     * Assemble as unicode path extension form the name and encoding\n+     * Assemble as unicode path extension from the name and encoding\n      * of the orginal zip entry.\n      * \n      * @param name The file name\n         super(name, zipEncoding);\n     }\n \n+    /**\n+     * Assemble as unicode path extension from the name given as\n+     * text as well as the bytes actually written to the archive.\n+     * \n+     * @param name The file name\n+     * @param bytes the bytes actually written to the archive\n+     */\n+    public UnicodePathExtraField(String name, byte[] bytes) {\n+        super(name, bytes);\n+    }\n+\n     public ZipShort getHeaderId() {\n         return UPATH_ID;\n     }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n         closeEntry();\n \n         entry = ze;\n-        if (createUnicodeExtraFields) {\n-            ze.addExtraField(new UnicodePathExtraField(ze.getName(),\n-                                                       encoding));\n-            if (ze.getComment() != null) {\n-                ze.addExtraField(new UnicodeCommentExtraField(ze.getComment(),\n-                                                              encoding));\n-            }\n-        }\n         entries.add(entry);\n \n         if (entry.getMethod() == -1) { // not specified\n      * @since 1.1\n      */\n     protected void writeLocalFileHeader(ZipArchiveEntry ze) throws IOException {\n+\n+        byte[] name = getBytes(ze.getName());\n+        if (createUnicodeExtraFields) {\n+            ze.addExtraField(new UnicodePathExtraField(ze.getName(), name));\n+            String comm = ze.getComment();\n+            if (comm != null && !\"\".equals(comm)) {\n+                byte[] commentB = getBytes(comm);\n+                ze.addExtraField(new UnicodeCommentExtraField(comm, commentB));\n+            }\n+        }\n+\n         offsets.put(ze, ZipLong.getBytes(written));\n \n         writeOut(LFH_SIG);\n         // CheckStyle:MagicNumber ON\n \n         // file name length\n-        byte[] name = getBytes(ze.getName());\n         writeOut(ZipShort.getBytes(name.length));\n         written += SHORT;\n ", "timestamp": 1235639243, "metainfo": ""}