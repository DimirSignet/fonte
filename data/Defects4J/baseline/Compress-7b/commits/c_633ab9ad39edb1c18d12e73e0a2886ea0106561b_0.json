{"sha": "633ab9ad39edb1c18d12e73e0a2886ea0106561b", "log": "coding style  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java\n package org.apache.commons.compress.archivers.zip;\n \n /**\n- * Simple placeholder for all those extra fields we don't want to deal with. <p>\n+ * Simple placeholder for all those extra fields we don't want to deal\n+ * with.\n  *\n- * Assumes local file data and central directory entries are identical - unless\n- * told the opposite.</p>\n+ * <p>Assumes local file data and central directory entries are\n+ * identical - unless told the opposite.</p>\n+ *\n  */\n-public class UnrecognizedExtraField\n-    implements ZipExtraField\n-{\n-    /**\n-     * Extra field data in central directory - without Header-ID or length\n-     * specifier.\n-     */\n-    private byte[] m_centralData;\n+public class UnrecognizedExtraField implements ZipExtraField {\n \n     /**\n      * The Header-ID.\n      */\n-    private ZipShort m_headerID;\n+    private ZipShort headerId;\n \n     /**\n-     * Extra field data in local file data - without Header-ID or length\n-     * specifier.\n+     * Set the header id.\n+     * @param headerId the header id to use\n      */\n-    private byte[] m_localData;\n-\n-    /**\n-     * Set the central directory data\n-     *\n-     * @param centralData the central directory data\n-     */\n-    public void setCentralDirectoryData( final byte[] centralData )\n-    {\n-        m_centralData = copy(centralData);\n-    }\n-\n-       /**\n-     * Set the header ID.\n-     *\n-     * @param headerID the header ID\n-     */\n-    public void setHeaderId( final ZipShort headerID )\n-    {\n-        m_headerID = headerID;\n+    public void setHeaderId(ZipShort headerId) {\n+        this.headerId = headerId;\n     }\n \n     /**\n-     * Set the local file data.\n-     *\n-     * @param localData the local file data\n+     * Get the header id.\n+     * @return the header id\n      */\n-    public void setLocalFileDataData( final byte[] localData )\n-    {\n-        m_localData = copy(localData);\n+    public ZipShort getHeaderId() {\n+        return headerId;\n     }\n \n     /**\n-     * Get the central directory data.\n-     *\n-     * @return the central directory data.\n+     * Extra field data in local file data - without\n+     * Header-ID or length specifier.\n      */\n-    public byte[] getCentralDirectoryData()\n-    {\n-        if( m_centralData != null )\n-        {\n-            return copy(m_centralData);\n+    private byte[] localData;\n+\n+    /**\n+     * Set the extra field data in the local file data -\n+     * without Header-ID or length specifier.\n+     * @param data the field data to use\n+     */\n+    public void setLocalFileDataData(byte[] data) {\n+        localData = copy(data);\n+    }\n+\n+    /**\n+     * Get the length of the local data.\n+     * @return the length of the local data\n+     */\n+    public ZipShort getLocalFileDataLength() {\n+        return new ZipShort(localData.length);\n+    }\n+\n+    /**\n+     * Get the local data.\n+     * @return the local data\n+     */\n+    public byte[] getLocalFileDataData() {\n+        return copy(localData);\n+    }\n+\n+    /**\n+     * Extra field data in central directory - without\n+     * Header-ID or length specifier.\n+     */\n+    private byte[] centralData;\n+\n+    /**\n+     * Set the extra field data in central directory.\n+     * @param data the data to use\n+     */\n+    public void setCentralDirectoryData(byte[] data) {\n+        centralData = copy(data);\n+    }\n+\n+    /**\n+     * Get the central data length.\n+     * If there is no central data, get the local file data length.\n+     * @return the central data length\n+     */\n+    public ZipShort getCentralDirectoryLength() {\n+        if (centralData != null) {\n+            return new ZipShort(centralData.length);\n+        }\n+        return getLocalFileDataLength();\n+    }\n+\n+    /**\n+     * Get the central data.\n+     * @return the central data if present, else return the local file data\n+     */\n+    public byte[] getCentralDirectoryData() {\n+        if (centralData != null) {\n+            return copy(centralData);\n         }\n         return getLocalFileDataData();\n     }\n \n     /**\n-     * Get the length of the central directory in bytes.\n-     *\n-     * @return the length of the central directory in bytes.\n+     * @param data the array of bytes.\n+     * @param offset the source location in the data array.\n+     * @param length the number of bytes to use in the data array.\n+     * @see ZipExtraField#parseFromLocalFileData(byte[], int, int)\n      */\n-    public ZipShort getCentralDirectoryLength()\n-    {\n-        if( m_centralData != null )\n-        {\n-            return new ZipShort( m_centralData.length );\n-        }\n-        return getLocalFileDataLength();\n-    }\n-\n-    /**\n-     * Get the HeaderID.\n-     *\n-     * @return the HeaderID\n-     */\n-    public ZipShort getHeaderId()\n-    {\n-        return m_headerID;\n-    }\n-\n-    /**\n-     * Get the local file data.\n-     *\n-     * @return the local file data\n-     */\n-    public byte[] getLocalFileDataData()\n-    {\n-        return copy(m_localData);\n-    }\n-\n-    /**\n-     * Get the length of local file data in bytes.\n-     *\n-     * @return the length of local file data in bytes\n-     */\n-    public ZipShort getLocalFileDataLength()\n-    {\n-        return new ZipShort( m_localData.length );\n-    }\n-\n-    /**\n-     * Parse LocalFiledata out of supplied buffer.\n-     *\n-     * @param buffer the buffer to use\n-     * @param offset the offset into buffer\n-     * @param length then length of data\n-     */\n-    public void parseFromLocalFileData( final byte[] buffer,\n-                                        final int offset,\n-                                        final int length )\n-    {\n-        final byte[] fileData = new byte[ length ];\n-        System.arraycopy( buffer, offset, fileData, 0, length );\n-        setLocalFileDataData( fileData );\n+    public void parseFromLocalFileData(byte[] data, int offset, int length) {\n+        byte[] tmp = new byte[length];\n+        System.arraycopy(data, offset, tmp, 0, length);\n+        setLocalFileDataData(tmp);\n     }\n \n     private static byte[] copy(byte[] from) {", "timestamp": 1236066703, "metainfo": ""}