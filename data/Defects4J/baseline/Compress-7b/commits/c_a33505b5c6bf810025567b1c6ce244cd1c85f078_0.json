{"sha": "a33505b5c6bf810025567b1c6ce244cd1c85f078", "log": "move canRead/canWrite up.  Remove isSupportedCompressionMethod.  COMPRESS-93  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java\n      * Doesn't increment if the EOF has been hit (read == -1)\n      * \n      * @param read the number of bytes read\n+     * @since Apache Commons Compress 1.1\n      */\n     protected void count(long read) {\n         if (read != -1) {\n      * Decrements the counter of already read bytes.\n      * \n      * @param read the number of bytes pushed back.\n+     * @since Apache Commons Compress 1.1\n      */\n     protected void pushedBackBytes(long pushedBack) {\n         bytesRead -= pushedBack;\n     /**\n      * Returns the current number of bytes read from this stream.\n      * @return the number of read bytes\n+     * @since Apache Commons Compress 1.1\n      */\n     public long getBytesRead() {\n         return bytesRead;\n     }\n+\n+    /**\n+     * Whether this stream is able to read the given entry.\n+     *\n+     * <p>Some archive formats support variants or details that are\n+     * not supported (yet).</p>\n+     *\n+     * <p>This implementation always returns true.\n+     *\n+     * @since Apache Commons Compress 1.1\n+     */\n+    public boolean canRead(ArchiveEntry ae) {\n+        return true;\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java\n      * Doesn't increment if the EOF has been hit (read == -1)\n      * \n      * @param written the number of bytes written\n+     * @since Apache Commons Compress 1.1\n      */\n     protected void count(long written) {\n         if (written != -1) {\n     /**\n      * Returns the current number of bytes written to this stream.\n      * @return the number of written bytes\n+     * @since Apache Commons Compress 1.1\n      */\n     public long getBytesWritten() {\n         return bytesWritten;\n     }\n+\n+    /**\n+     * Whether this stream is able to write the given entry.\n+     *\n+     * <p>Some archive formats support variants or details that are\n+     * not supported (yet).</p>\n+     *\n+     * <p>This implementation always returns true.\n+     * @since Apache Commons Compress 1.1\n+     */\n+    public boolean canWrite(ArchiveEntry ae) {\n+        return true;\n+    }\n }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n         e.setExternalAttributes(getExternalAttributes());\n         e.setExtraFields(getExtraFields(true));\n         return e;\n-    }\n-\n-    /**\n-     * Checks whether the compression method of this entry is supported,\n-     * i.e. whether the content of this entry can be accessed.\n-     *\n-     * @since Commons Compress 1.1\n-     * @see <a href=\"https://issues.apache.org/jira/browse/COMPRESS-93\"\n-     *         >COMPRESS-93</a>\n-     * @return <code>true</code> if the compression method is known\n-     *         and supported, <code>false</code> otherwise\n-     */\n-    public boolean isSupportedCompressionMethod() {\n-        return method == STORED || method == DEFLATED;\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n      * compression method that hasn't been implemented yet.</p>\n      * @since Apache Commons Compress 1.1\n      */\n-    public boolean canRead(ZipArchiveEntry ze) {\n-        return !ze.isEncrypted() &&\n-            (ze.getMethod() == ZipArchiveEntry.STORED\n-             || ze.getMethod() == ZipArchiveEntry.DEFLATED);\n+    public boolean canRead(ArchiveEntry ae) {\n+        if (ae instanceof ZipArchiveEntry) {\n+            ZipArchiveEntry ze = (ZipArchiveEntry) ae;\n+            return !ze.isEncrypted() &&\n+                (ze.getMethod() == ZipArchiveEntry.STORED\n+                 || ze.getMethod() == ZipArchiveEntry.DEFLATED);\n+        }\n+        return super.canRead(ae);\n     }\n \n     public int read(byte[] buffer, int start, int length) throws IOException {\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n      * compression method that hasn't been implemented yet.</p>\n      * @since Apache Commons Compress 1.1\n      */\n-    public boolean canWrite(ZipArchiveEntry ze) {\n-        return !ze.isEncrypted() &&\n-            (ze.getMethod() == STORED || ze.getMethod() == DEFLATED);\n+    public boolean canWrite(ArchiveEntry ae) {\n+        if (ae instanceof ZipArchiveEntry) {\n+            ZipArchiveEntry ze = (ZipArchiveEntry) ae;\n+            return !ze.isEncrypted() &&\n+                (ze.getMethod() == STORED || ze.getMethod() == DEFLATED);\n+        }\n+        return super.canWrite(ae);\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n      */\n     public void testSupportedCompressionMethod() throws IOException {\n         ZipFile bla = new ZipFile(getFile(\"bla.zip\"));\n-        assertTrue(bla.getEntry(\"test1.xml\").isSupportedCompressionMethod());\n+        assertTrue(bla.canRead(bla.getEntry(\"test1.xml\")));\n         bla.close();\n \n         ZipFile moby = new ZipFile(getFile(\"moby.zip\"));\n-        assertFalse(moby.getEntry(\"README\").isSupportedCompressionMethod());\n+        assertFalse(moby.canRead(moby.getEntry(\"README\")));\n         moby.close();\n     }\n \n         try {\n             ZipArchiveEntry entry = zip.getNextZipEntry();\n             assertEquals(\"README\", entry.getName());\n-            assertFalse(entry.isSupportedCompressionMethod());\n+            assertFalse(zip.canRead(entry));\n             try {\n                 assertNull(zip.getNextZipEntry());\n             } catch (IOException e) {\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java\n      * >COMPRESS-93</a>.\n      */\n     public void testCompressionMethod() {\n+        ZipArchiveOutputStream zos =\n+            new ZipArchiveOutputStream((java.io.OutputStream) null);\n         ZipArchiveEntry entry = new ZipArchiveEntry(\"foo\");\n         assertEquals(-1, entry.getMethod());\n-        assertFalse(entry.isSupportedCompressionMethod());\n+        assertFalse(zos.canWrite(entry));\n \n         entry.setMethod(ZipArchiveEntry.STORED);\n         assertEquals(ZipArchiveEntry.STORED, entry.getMethod());\n-        assertTrue(entry.isSupportedCompressionMethod());\n+        assertTrue(zos.canWrite(entry));\n \n         entry.setMethod(ZipArchiveEntry.DEFLATED);\n         assertEquals(ZipArchiveEntry.DEFLATED, entry.getMethod());\n-        assertTrue(entry.isSupportedCompressionMethod());\n+        assertTrue(zos.canWrite(entry));\n \n         // Test the unsupported \"imploded\" compression method (6)\n         entry.setMethod(6);\n         assertEquals(6, entry.getMethod());\n-        assertFalse(entry.isSupportedCompressionMethod());\n+        assertFalse(zos.canWrite(entry));\n     }\n \n     /**", "timestamp": 1266582207, "metainfo": ""}