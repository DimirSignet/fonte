{"sha": "d30ff4d5df2559dd1c6162ccaa0c22c75558b35f", "log": "Ensure temp archives are deleted  ", "commit": "\n--- a/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n     protected File dir;\n     protected File resultDir;\n \n+    private File archive;\n+\n     protected void setUp() throws Exception {\n         dir = mkdir(\"dir\");\n         resultDir = mkdir(\"dir-result\");\n+        archive = null;\n     }\n \n     protected static File mkdir(String name) throws IOException {\n         rmdir(dir);\n         rmdir(resultDir);\n         dir = resultDir = null;\n-    }\n-\n-    protected static void rmdir(File f) throws IOException {\n+        if (archive != null) {\n+            if (!archive.delete()){\n+                throw new Exception(\"Could not delete \"+archive.getPath());\n+            }\n+        }\n+    }\n+\n+    protected static void rmdir(File f) {\n         String[] s = f.list();\n         if (s != null) {\n             for (int i = 0; i < s.length; i++) {\n         ArchiveOutputStream out = null;\n         OutputStream stream = null;\n         try {\n-            File temp = File.createTempFile(\"test\", \".\" + archivename);\n-\n-            stream = new FileOutputStream(temp);\n+            archive = File.createTempFile(\"test\", \".\" + archivename);\n+\n+            stream = new FileOutputStream(archive);\n             out = new ArchiveStreamFactory().createArchiveOutputStream(\n                     archivename, stream);\n \n             IOUtils.copy(new FileInputStream(file6), out);\n             out.closeArchiveEntry();\n \n-            return temp;\n+            return archive;\n         } finally {\n             if (out != null) {\n                 out.close();", "timestamp": 1238091529, "metainfo": ""}