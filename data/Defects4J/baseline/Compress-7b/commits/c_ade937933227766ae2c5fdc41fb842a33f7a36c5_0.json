{"sha": "ade937933227766ae2c5fdc41fb842a33f7a36c5", "log": "return Zipentries in predictable order.  COMPRESS-99  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.RandomAccessFile;\n+import java.util.Arrays;\n import java.util.Collections;\n+import java.util.Comparator;\n import java.util.Enumeration;\n import java.util.HashMap;\n+import java.util.LinkedHashMap;\n import java.util.Map;\n import java.util.zip.Inflater;\n import java.util.zip.InflaterInputStream;\n      * Maps ZipArchiveEntrys to Longs, recording the offsets of the local\n      * file headers.\n      */\n-    private final Map entries = new HashMap(HASH_SIZE);\n+    private final Map entries = new LinkedHashMap(HASH_SIZE);\n \n     /**\n      * Maps String to ZipArchiveEntrys, name -> actual entry.\n \n     /**\n      * Returns all entries.\n+     *\n+     * <p>Entries will be returned in the same order they appear\n+     * within the archive's central directory.</p>\n+     *\n      * @return all entries as {@link ZipArchiveEntry} instances\n      */\n     public Enumeration getEntries() {\n         return Collections.enumeration(entries.keySet());\n+    }\n+\n+    /**\n+     * Returns all entries in physical order.\n+     *\n+     * <p>Entries will be returned in the same order their contents\n+     * appear within the archive.</p>\n+     *\n+     * @return all entries as {@link ZipArchiveEntry} instances\n+     *\n+     * @since Commons Compress 1.1\n+     */\n+    public Enumeration getEntriesInPhysicalOrder() {\n+        Object[] allEntries = entries.keySet().toArray();\n+        Arrays.sort(allEntries, OFFSET_COMPARATOR);\n+        return Collections.enumeration(Arrays.asList(allEntries));\n     }\n \n     /**\n             this.comment = comment;\n         }\n     }\n+\n+    /**\n+     * Compares two ZupArchiveEntries based on their offset within the archive.\n+     *\n+     * <p>Won't return any meaningful results if one of the entries\n+     * isn't part of the archive at all.</p>\n+     *\n+     * @since Commons Compress 1.1\n+     */\n+    private final Comparator OFFSET_COMPARATOR =\n+        new Comparator() {\n+            public int compare(Object o1, Object o2) {\n+                if (o1 == o2)\n+                    return 0;\n+\n+                ZipArchiveEntry e1 = (ZipArchiveEntry) o1;\n+                ZipArchiveEntry e2 = (ZipArchiveEntry) o2;\n+\n+                OffsetEntry off1 = (OffsetEntry) entries.get(e1);\n+                OffsetEntry off2 = (OffsetEntry) entries.get(e2);\n+                if (off1 == null) {\n+                    return 1;\n+                }\n+                if (off2 == null) {\n+                    return -1;\n+                }\n+                return (int) Math.signum(off1.headerOffset - off2.headerOffset);\n+            }\n+            public boolean equals(Object o) {\n+                return o == this;\n+            }\n+        };\n }\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.apache.commons.compress.archivers.zip;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import junit.framework.TestCase;\n+\n+public class ZipFileTest extends TestCase {\n+    private ZipFile zf = null;\n+\n+    public void tearDown() {\n+        ZipFile.closeQuietly(zf);\n+    }\n+\n+    public void testCDOrder() throws Exception {\n+        readOrderTest();\n+        ArrayList l = Collections.list(zf.getEntries());\n+        assertEntryName(l, 0, \"AbstractUnicodeExtraField\");\n+        assertEntryName(l, 1, \"AsiExtraField\");\n+        assertEntryName(l, 2, \"ExtraFieldUtils\");\n+        assertEntryName(l, 3, \"FallbackZipEncoding\");\n+        assertEntryName(l, 4, \"GeneralPurposeBit\");\n+        assertEntryName(l, 5, \"JarMarker\");\n+        assertEntryName(l, 6, \"NioZipEncoding\");\n+        assertEntryName(l, 7, \"Simple8BitZipEncoding\");\n+        assertEntryName(l, 8, \"UnicodeCommentExtraField\");\n+        assertEntryName(l, 9, \"UnicodePathExtraField\");\n+        assertEntryName(l, 10, \"UnixStat\");\n+        assertEntryName(l, 11, \"UnparseableExtraFieldData\");\n+        assertEntryName(l, 12, \"UnrecognizedExtraField\");\n+        assertEntryName(l, 13, \"ZipArchiveEntry\");\n+        assertEntryName(l, 14, \"ZipArchiveInputStream\");\n+        assertEntryName(l, 15, \"ZipArchiveOutputStream\");\n+        assertEntryName(l, 16, \"ZipEncoding\");\n+        assertEntryName(l, 17, \"ZipEncodingHelper\");\n+        assertEntryName(l, 18, \"ZipExtraField\");\n+        assertEntryName(l, 19, \"ZipUtil\");\n+        assertEntryName(l, 20, \"ZipLong\");\n+        assertEntryName(l, 21, \"ZipShort\");\n+        assertEntryName(l, 22, \"ZipFile\");\n+    }\n+\n+    public void testPhysicalOrder() throws Exception {\n+        readOrderTest();\n+        ArrayList l = Collections.list(zf.getEntriesInPhysicalOrder());\n+        assertEntryName(l, 0, \"AbstractUnicodeExtraField\");\n+        assertEntryName(l, 1, \"AsiExtraField\");\n+        assertEntryName(l, 2, \"ExtraFieldUtils\");\n+        assertEntryName(l, 3, \"FallbackZipEncoding\");\n+        assertEntryName(l, 4, \"GeneralPurposeBit\");\n+        assertEntryName(l, 5, \"JarMarker\");\n+        assertEntryName(l, 6, \"NioZipEncoding\");\n+        assertEntryName(l, 7, \"Simple8BitZipEncoding\");\n+        assertEntryName(l, 8, \"UnicodeCommentExtraField\");\n+        assertEntryName(l, 9, \"UnicodePathExtraField\");\n+        assertEntryName(l, 10, \"UnixStat\");\n+        assertEntryName(l, 11, \"UnparseableExtraFieldData\");\n+        assertEntryName(l, 12, \"UnrecognizedExtraField\");\n+        assertEntryName(l, 13, \"ZipArchiveEntry\");\n+        assertEntryName(l, 14, \"ZipArchiveInputStream\");\n+        assertEntryName(l, 15, \"ZipArchiveOutputStream\");\n+        assertEntryName(l, 16, \"ZipEncoding\");\n+        assertEntryName(l, 17, \"ZipEncodingHelper\");\n+        assertEntryName(l, 18, \"ZipExtraField\");\n+        assertEntryName(l, 19, \"ZipFile\");\n+        assertEntryName(l, 20, \"ZipLong\");\n+        assertEntryName(l, 21, \"ZipShort\");\n+        assertEntryName(l, 22, \"ZipUtil\");\n+    }\n+\n+    /*\n+     * ordertest.zip has been handcrafted.\n+     *\n+     * It contains enough files so any random coincidence of\n+     * entries.keySet() and central directory order would be unlikely\n+     * - in fact testCDOrder fails in svn revision 920284.\n+     *\n+     * The central directory has ZipFile and ZipUtil swapped so\n+     * central directory order is different from entry data order.\n+     */\n+    private void readOrderTest() throws Exception {\n+        URL zip = getClass().getResource(\"/ordertest.zip\");\n+        File archive = new File(new URI(zip.toString()));\n+        zf = new ZipFile(archive);\n+    }\n+\n+    private static void assertEntryName(ArrayList entries, int index,\n+                                        String expectedName) {\n+        ZipArchiveEntry ze = (ZipArchiveEntry) entries.get(index);\n+        assertEquals(\"src/main/java/org/apache/commons/compress/archivers/zip/\"\n+                     + expectedName + \".java\",\n+                     ze.getName());\n+    }\n+}", "timestamp": 1268049625, "metainfo": ""}