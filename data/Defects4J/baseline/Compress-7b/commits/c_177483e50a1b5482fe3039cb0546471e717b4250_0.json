{"sha": "177483e50a1b5482fe3039cb0546471e717b4250", "log": "Remove unused code  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n                                         9841, 29524, 88573, 265720, 797161,\n                                         2391484 };\n \n-    /**\n-     * This method is accessible by subclasses for historical\n-     * purposes. If you don't know what it does then you don't need\n-     * it.\n-     */\n-    protected static void hbMakeCodeLengths(char[] len, int[] freq,\n-                                            int alphaSize, int maxLen) {\n-        /*\n-         * Nodes and heap entries run from 1. Entry 0 for both the heap and\n-         * nodes is a sentinel.\n-         */\n-        final int[] heap = new int[MAX_ALPHA_SIZE * 2];\n-        final int[] weight = new int[MAX_ALPHA_SIZE * 2];\n-        final int[] parent = new int[MAX_ALPHA_SIZE * 2];\n-\n-        for (int i = alphaSize; --i >= 0;) {\n-            weight[i + 1] = (freq[i] == 0 ? 1 : freq[i]) << 8;\n-        }\n-\n-        for (boolean tooLong = true; tooLong;) {\n-            tooLong = false;\n-\n-            int nNodes = alphaSize;\n-            int nHeap = 0;\n-            heap[0] = 0;\n-            weight[0] = 0;\n-            parent[0] = -2;\n-\n-            for (int i = 1; i <= alphaSize; i++) {\n-                parent[i] = -1;\n-                nHeap++;\n-                heap[nHeap] = i;\n-\n-                int zz = nHeap;\n-                int tmp = heap[zz];\n-                while (weight[tmp] < weight[heap[zz >> 1]]) {\n-                    heap[zz] = heap[zz >> 1];\n-                    zz >>= 1;\n-                }\n-                heap[zz] = tmp;\n-            }\n-\n-            // assert (nHeap < (MAX_ALPHA_SIZE + 2)) : nHeap;\n-\n-            while (nHeap > 1) {\n-                int n1 = heap[1];\n-                heap[1] = heap[nHeap];\n-                nHeap--;\n-\n-                int yy = 0;\n-                int zz = 1;\n-                int tmp = heap[1];\n-\n-                while (true) {\n-                    yy = zz << 1;\n-\n-                    if (yy > nHeap) {\n-                        break;\n-                    }\n-\n-                    if ((yy < nHeap)\n-                        && (weight[heap[yy + 1]] < weight[heap[yy]])) {\n-                        yy++;\n-                    }\n-\n-                    if (weight[tmp] < weight[heap[yy]]) {\n-                        break;\n-                    }\n-\n-                    heap[zz] = heap[yy];\n-                    zz = yy;\n-                }\n-\n-                heap[zz] = tmp;\n-\n-                int n2 = heap[1];\n-                heap[1] = heap[nHeap];\n-                nHeap--;\n-\n-                yy = 0;\n-                zz = 1;\n-                tmp = heap[1];\n-\n-                while (true) {\n-                    yy = zz << 1;\n-\n-                    if (yy > nHeap) {\n-                        break;\n-                    }\n-\n-                    if ((yy < nHeap)\n-                        && (weight[heap[yy + 1]] < weight[heap[yy]])) {\n-                        yy++;\n-                    }\n-\n-                    if (weight[tmp] < weight[heap[yy]]) {\n-                        break;\n-                    }\n-\n-                    heap[zz] = heap[yy];\n-                    zz = yy;\n-                }\n-\n-                heap[zz] = tmp;\n-                nNodes++;\n-                parent[n1] = parent[n2] = nNodes;\n-\n-                final int weight_n1 = weight[n1];\n-                final int weight_n2 = weight[n2];\n-                weight[nNodes] = (((weight_n1 & 0xffffff00)\n-                                   + (weight_n2 & 0xffffff00))\n-                                  |\n-                                  (1 + (((weight_n1 & 0x000000ff)\n-                                         > (weight_n2 & 0x000000ff))\n-                                        ? (weight_n1 & 0x000000ff)\n-                                        : (weight_n2 & 0x000000ff))\n-                                   ));\n-\n-                parent[nNodes] = -1;\n-                nHeap++;\n-                heap[nHeap] = nNodes;\n-\n-                tmp = 0;\n-                zz = nHeap;\n-                tmp = heap[zz];\n-                final int weight_tmp = weight[tmp];\n-                while (weight_tmp < weight[heap[zz >> 1]]) {\n-                    heap[zz] = heap[zz >> 1];\n-                    zz >>= 1;\n-                }\n-                heap[zz] = tmp;\n-\n-            }\n-\n-            // assert (nNodes < (MAX_ALPHA_SIZE * 2)) : nNodes;\n-\n-            for (int i = 1; i <= alphaSize; i++) {\n-                int j = 0;\n-                int k = i;\n-\n-                for (int parent_k; (parent_k = parent[k]) >= 0;) {\n-                    k = parent_k;\n-                    j++;\n-                }\n-\n-                len[i - 1] = (char) j;\n-                if (j > maxLen) {\n-                    tooLong = true;\n-                }\n-            }\n-\n-            if (tooLong) {\n-                for (int i = 1; i < alphaSize; i++) {\n-                    int j = weight[i] >> 8;\n-                    j = 1 + (j >> 1);\n-                    weight[i] = j << 8;\n-                }\n-            }\n-        }\n-    }\n-\n     private static void hbMakeCodeLengths(final byte[] len, final int[] freq,\n                                           final Data dat, final int alphaSize,\n                                           final int maxLen) {", "timestamp": 1239755253, "metainfo": ""}