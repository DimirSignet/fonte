{"sha": "fec51a1551f6657e29aaa0438abc1e68285577a4", "log": "Add generic methods for creating Archive Entries. This helps with testing, and will make it easier to implement put(File) later  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java\n  */\n package org.apache.commons.compress.archivers;\n \n+import java.io.File;\n import java.io.IOException;\n import java.io.OutputStream;\n \n      */\n     public abstract void closeArchiveEntry() throws IOException;\n \n+    /**\n+     * Create an archive entry using the inputFile and entryName provided.\n+     * \n+     * @param inputFile\n+     * @param entryName \n+     * @return the ArchiveEntry set up with details from the file\n+     * \n+     * @throws IOException\n+     */\n+    public abstract ArchiveEntry createArchiveEntry(File inputFile, String entryName) throws IOException;\n+    \n     // Generic implementations of OutputStream methods that may be useful to sub-classes\n     \n     /**\n--- a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java\n  * under the License.\n  */\n package org.apache.commons.compress.archivers.ar;\n+\n+import java.io.File;\n \n import org.apache.commons.compress.archivers.ArchiveEntry;\n \n \t\tthis.lastModified = lastModified;\n \t}\n \n-\tpublic long getSize() {\n+\tpublic ArArchiveEntry(File inputFile, String entryName) {\n+\t    // TODO sort out mode\n+        this(entryName, inputFile.length(), 0, 0, 0, inputFile.lastModified());\n+    }\n+\n+    public long getSize() {\n \t\treturn this.getLength();\n \t}\n \t\n--- a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\n  */\n package org.apache.commons.compress.archivers.ar;\n \n+import java.io.File;\n import java.io.IOException;\n import java.io.OutputStream;\n \n \n         final String n = pEntry.getName();\n         if (n.length() > 16) {\n-            throw new IOException(\"filename too long\");\n+            throw new IOException(\"filename too long, > 16 chars: \"+n);\n         }\n         offset += write(n);\n \n         prevEntry = null;\n     }\n \n+    public ArchiveEntry createArchiveEntry(File inputFile, String entryName)\n+            throws IOException {\n+        return new ArArchiveEntry(inputFile, entryName);\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java\n  * under the License.\n  */\n package org.apache.commons.compress.archivers.cpio;\n+\n+import java.io.File;\n \n import org.apache.commons.compress.archivers.ArchiveEntry;\n \n         this.setSize(size);\n     }\n \n+    public CpioArchiveEntry(File inputFile, String entryName) {\n+        this(entryName, inputFile.length());\n+        long mode=0;\n+        if (inputFile.isDirectory()){\n+            mode |= C_ISDIR;\n+        } else if (inputFile.isFile()){\n+            mode |= C_ISREG;\n+        } else {\n+            throw new IllegalArgumentException(\"Cannot determine type of file \"+inputFile.getName());\n+        }\n+        // TODO set other fields as needed\n+        setMode(mode);\n+    }\n+\n     /**\n      * Check if the method is allowed for the defined format.\n      */\n--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n  */\n package org.apache.commons.compress.archivers.cpio;\n \n+import java.io.File;\n import java.io.FilterOutputStream;\n import java.io.IOException;\n import java.io.OutputStream;\n         out.write('\\0');\n     }\n \n+    public ArchiveEntry createArchiveEntry(File inputFile, String entryName)\n+            throws IOException {\n+        return new CpioArchiveEntry(inputFile, entryName);\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n     /**\n      * Construct an entry for a file. File is set to file, and the\n      * header is constructed from information from the file.\n+     * The name is set from the normalized file path.\n      *\n      * @param file The file that the entry represents.\n      */\n     public TarArchiveEntry(File file) {\n+        this(file, normalizeFileName(file.getPath()));\n+    }\n+    \n+    /**\n+     * Construct an entry for a file. File is set to file, and the\n+     * header is constructed from information from the file.\n+     *\n+     * @param file The file that the entry represents.\n+     * @param fileName the name to be used for the entry.\n+     */\n+    public TarArchiveEntry(File file, String fileName) {\n         this();\n \n         this.file = file;\n \n-        String fileName = normalizeFileName(file.getPath());\n         this.linkName = new StringBuffer(\"\");\n         this.name = new StringBuffer(fileName);\n \n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n  */\n package org.apache.commons.compress.archivers.tar;\n \n+import java.io.File;\n import java.io.IOException;\n import java.io.OutputStream;\n import org.apache.commons.compress.archivers.ArchiveEntry;\n         return \"tar\";\n     }\n \n+    public ArchiveEntry createArchiveEntry(File inputFile, String entryName)\n+            throws IOException {\n+        return new TarArchiveEntry(inputFile, entryName);\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n  */\n package org.apache.commons.compress.archivers.zip;\n \n+import java.io.File;\n import java.util.LinkedHashMap;\n import java.util.zip.ZipException;\n import org.apache.commons.compress.archivers.ArchiveEntry;\n      */\n     protected ZipArchiveEntry() {\n         super(\"\");\n+    }\n+\n+    public ZipArchiveEntry(File inputFile, String entryName) {\n+        this(entryName);\n+        // TODO are there any other fields we can set here?\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n             return name;\n         }\n     }\n+\n+    public ArchiveEntry createArchiveEntry(File inputFile, String entryName)\n+            throws IOException {\n+        return new ZipArchiveEntry(inputFile, entryName);\n+    }\n }", "timestamp": 1238459756, "metainfo": ""}