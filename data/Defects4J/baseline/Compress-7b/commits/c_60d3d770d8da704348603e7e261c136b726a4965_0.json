{"sha": "60d3d770d8da704348603e7e261c136b726a4965", "log": "Make CompressorOutputStream extend FilterStream  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java\n  */\n package org.apache.commons.compress.compressors;\n \n+import java.io.FilterOutputStream;\n import java.io.OutputStream;\n \n-public abstract class CompressorOutputStream extends OutputStream {\n+public abstract class CompressorOutputStream extends FilterOutputStream {\n     // TODO\n+    protected CompressorOutputStream(final OutputStream o) {\n+        super(o);\n+    }\n }\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n \n     public BZip2CompressorOutputStream(OutputStream inStream, int inBlockSize)\n         throws IOException {\n+        super(inStream);\n         block = null;\n         quadrant = null;\n         zptr = null;\n         }\n         finish();\n         super.close();\n-        bsStream.close();\n+        out.close();\n         closed = true;\n     }\n \n \n     public void flush() throws IOException {\n         super.flush();\n-        bsStream.flush();\n+        out.flush();\n     }\n \n     private int blockCRC, combinedCRC;\n     }\n \n     private void bsSetStream(OutputStream f) {\n-        bsStream = f;\n+        out = f;\n         bsLive = 0;\n         bsBuff = 0;\n         bytesOut = 0;\n         while (bsLive > 0) {\n             int ch = (bsBuff >> 24);\n             try {\n-                bsStream.write(ch); // write 8-bit\n+                out.write(ch); // write 8-bit\n             } catch (IOException e) {\n                 throw  e;\n             }\n         while (bsLive >= 8) {\n             int ch = (bsBuff >> 24);\n             try {\n-                bsStream.write(ch); // write 8-bit\n+                out.write(ch); // write 8-bit\n             } catch (IOException e) {\n                 throw e;\n             }\n         generateMTFValues();\n         sendMTFValues();\n     }\n-\n-    private OutputStream bsStream;\n \n     private void simpleSort(int lo, int hi, int d) {\n         int i, j, h, bigN, hp;\n--- a/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java\n \n public class GzipCompressorOutputStream extends CompressorOutputStream {\n \n-    private final GZIPOutputStream out;\n-\n     public GzipCompressorOutputStream( final OutputStream outputStream ) throws IOException {\n-        out = new GZIPOutputStream(outputStream);\n-    }\n-\n-    public void write(int b) throws IOException {\n-        out.write(b);\n-    }\n-\n-    public void close() throws IOException {\n-        out.close();\n+        super(new GZIPOutputStream(outputStream));\n     }\n \n }", "timestamp": 1234277108, "metainfo": ""}