{"sha": "99696beab393fbaf96cf040c64b798c76e921cd9", "log": "reproduce https://issues.apache.org/jira/browse/COMPRESS-11    ", "commit": "\n--- a/src/test/java/org/apache/commons/compress/archivers/ArTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ArTestCase.java\n  */\n package org.apache.commons.compress.archivers;\n \n+import java.io.BufferedInputStream;\n+import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n import java.io.InputStream;\n import java.io.OutputStream;\n \n+import org.apache.commons.compress.AbstractTestCase;\n import org.apache.commons.compress.archivers.ar.ArArchiveEntry;\n import org.apache.commons.compress.utils.IOUtils;\n \n-import org.apache.commons.compress.AbstractTestCase;\n+public final class ArTestCase extends AbstractTestCase {\n \n-public final class ArTestCase extends AbstractTestCase {\n \tpublic void testArArchiveCreation() throws Exception {\n \t\tfinal File output = new File(dir, \"bla.ar\");\n \t\t\n \t\t// UnArArchive Operation\n \t\tfinal File input = output;\n \t\tfinal InputStream is = new FileInputStream(input);\n-\t\tfinal ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"ar\", is);\n+\t\tfinal ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(new BufferedInputStream(is));\n \t\tfinal ArArchiveEntry entry = (ArArchiveEntry)in.getNextEntry();\n \t\t\n \t\tFile target = new File(dir, entry.getName());\n         is.close();\n \t}\n \n+\tpublic void testArDelete() throws Exception {\n+\t\tfinal File output = new File(dir, \"bla.ar\");\n+\t\t\n+\t\t{\n+\t\t\t// create\n+\t\t\tfinal File file1 = getFile(\"test1.xml\");\n+\t\t\tfinal File file2 = getFile(\"test2.xml\");\n+\t\t\t\n+\t\t\tfinal OutputStream out = new FileOutputStream(output);\n+\t        final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out);\n+\t\t\tos.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length()));\n+\t\t\tIOUtils.copy(new FileInputStream(file1), os);\n+\t\t\tos.closeArchiveEntry();\n+\t\t\t\n+\t\t\tos.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length()));\n+\t\t\tIOUtils.copy(new FileInputStream(file2), os);\n+\t\t\tos.closeArchiveEntry();\n+\t\t\tos.close();\n+\t\t\tout.close();\n+\t\t}\n+\t\t\n+\t\tfinal File output2 = new File(dir, \"bla2.ar\");\t\t\n+\n+\t\t{\n+\t\t\t// remove all but one file\n+\t\t\tfinal InputStream is = new FileInputStream(output);\n+\t\t\tfinal OutputStream os = new FileOutputStream(output2);\n+\t\t\tfinal ArchiveOutputStream aos = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", os);\n+\t\t\tfinal ArchiveInputStream ais = new ArchiveStreamFactory().createArchiveInputStream(new BufferedInputStream(is));\n+\t\t\twhile(true) {\n+\t\t\t\tfinal ArArchiveEntry entry = (ArArchiveEntry)ais.getNextEntry();\n+\t\t\t\tif (entry == null) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tif (\"test1.xml\".equals(entry.getName())) {\n+\t\t\t\t\taos.putArchiveEntry(entry);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tais.close();\n+\t\t\taos.close();\n+\t\t\tis.close();\n+\t\t\tos.close();\t\t\t\n+\t\t}\n+\n+\t\t\n+\t\tlong sum = 0;\n+\n+\t\t{\n+\t\t\tfinal InputStream is = new FileInputStream(output2);\n+\t\t\tfinal ArchiveInputStream ais = new ArchiveStreamFactory().createArchiveInputStream(is);\n+\t\t\twhile(true) {\n+\t\t\t\tfinal ArArchiveEntry entry = (ArArchiveEntry)ais.getNextEntry();\n+\t\t\t\tif (entry == null) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tfinal ByteArrayOutputStream os = new ByteArrayOutputStream();\n+\t\t        IOUtils.copy(ais, os);\n+\t\t        \n+\t\t        sum +=  entry.getLength();\n+\t\t\t}\n+\t\t\tais.close();\n+\t\t\tis.close();\t\t\t\n+\t\t}\n+\n+\t\tassertEquals(0, sum);\n+\t\t\n+\t}\n+\n }", "timestamp": 1238184580, "metainfo": ""}