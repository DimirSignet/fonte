{"sha": "c3097e6019ef2b1b61b4a8f2d0fca6970f16a29a", "log": "Improved Changeset support with re-enabled tests, submitted by Christian Grobmeier, SANDBOX-183  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/changes/ChangeSet.java\n+++ b/src/main/java/org/apache/commons/compress/changes/ChangeSet.java\n \n import java.io.IOException;\n import java.io.InputStream;\n+import java.util.Collections;\n import java.util.Iterator;\n import java.util.LinkedHashSet;\n import java.util.Set;\n import org.apache.commons.compress.archivers.ArchiveOutputStream;\n import org.apache.commons.compress.utils.IOUtils;\n \n-\n public final class ChangeSet {\n \n-\tprivate final Set changes = new LinkedHashSet();\n-\t\n-\tpublic void delete( final String pFilename ) {\n-\t\tchanges.add(new Change(pFilename));\n-\t}\n+    private final Set changes = Collections\n+            .synchronizedSet(new LinkedHashSet());;\n \n-//\tpublic void move( final String pFrom, final String pTo ) {\n-//\t\tchanges.add(new Change(pFrom, pTo));\n-//\t}\n-\t\n-\tpublic void add( final ArchiveEntry pEntry, final InputStream pInput) {\n-\t\tchanges.add(new Change(pEntry, pInput));\n-\t}\n-\t\n-\tpublic Set asSet() {\n-\t\treturn changes;\n-\t}\n-\t\n-\tpublic void perform(ArchiveInputStream in, ArchiveOutputStream out) throws IOException {\n-\t\tArchiveEntry entry = null;\t\n-\t\twhile((entry = in.getNextEntry()) != null) {\n-\t\t\tboolean copy = true;\n-\t\t\t\n-\t\t\tfor (Iterator it = changes.iterator(); it.hasNext();) {\n-\t\t\t\tChange change = (Change)it.next();\n-\t\t\t\t\n-\t\t\t\tif(change.type() == Change.TYPE_ADD) {\n-\t\t\t\t\tcopyStream(change.getInput(), out, change.getEntry());\n-\t\t\t\t\tit.remove();\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tif( change.type() == Change.TYPE_DELETE &&\n-\t\t\t\t\tentry.getName() != null &&\n-\t\t\t\t\tentry.getName().equals(change.targetFile())) {\n-\t\t\t\t\tcopy = false;\n-\t\t\t\t\tit.remove();\n-\t\t\t\t\tbreak;\n-\t\t\t\t} \n-\t\t\t}\n-\t\t\t\n-\t\t\tif(copy) {\n-\t\t\t\tcopyStream(in, out, entry);\n-\t\t\t}\n-\t\t}\n-\t}\n+    public void delete(final String pFilename) {\n+        addDeletion(new Change(pFilename));\n+    }\n \n-\tprivate static void copyStream(InputStream in, ArchiveOutputStream out, ArchiveEntry entry) throws IOException {\n-\t\tout.putArchiveEntry(entry);\n-\t\tIOUtils.copy(in, out);\n-\t\tout.closeArchiveEntry();\n-\t}\n+    // public void move( final String pFrom, final String pTo ) {\n+    // changes.add(new Change(pFrom, pTo));\n+    // }\n+\n+    public void add(final ArchiveEntry pEntry, final InputStream pInput) {\n+        changes.add(new Change(pEntry, pInput));\n+    }\n+\n+    public Set asSet() {\n+        return changes;\n+    }\n+\n+    public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n+            throws IOException {\n+        ArchiveEntry entry = null;\n+        while ((entry = in.getNextEntry()) != null) {\n+            boolean copy = true;\n+\n+            for (Iterator it = changes.iterator(); it.hasNext();) {\n+                Change change = (Change) it.next();\n+\n+                if (change.type() == Change.TYPE_ADD) {\n+                    copyStream(change.getInput(), out, change.getEntry());\n+                    it.remove();\n+                }\n+\n+                if (change.type() == Change.TYPE_DELETE\n+                        && entry.getName() != null) {\n+                    if (entry.getName().equals(change.targetFile())) {\n+                        copy = false;\n+                        it.remove();\n+                        break;\n+                    } else if (entry.getName().matches(\n+                            change.targetFile() + \"/.*\")) {\n+                        copy = false;\n+                        break;\n+                    }\n+                }\n+            }\n+\n+            if (copy) {\n+                if (!isDeletedLater(entry)) {\n+                    copyStream(in, out, entry);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void addDeletion(Change pChange) {\n+        if (Change.TYPE_DELETE != pChange.type()\n+                || pChange.targetFile() == null) {\n+            return;\n+        }\n+        String source = pChange.targetFile();\n+\n+        if (!changes.isEmpty()) {\n+            for (Iterator it = changes.iterator(); it.hasNext();) {\n+                Change change = (Change) it.next();\n+                if (change.type() == Change.TYPE_ADD\n+                        && change.getEntry() != null) {\n+                    String target = change.getEntry().getName();\n+\n+                    if (source.equals(target)) {\n+                        it.remove();\n+                    } else if (target.matches(source + \"/.*\")) {\n+                        it.remove();\n+                    }\n+                }\n+            }\n+        }\n+        changes.add(pChange);\n+    }\n+\n+    private boolean isDeletedLater(ArchiveEntry entry) {\n+        String source = entry.getName();\n+\n+        if (!changes.isEmpty()) {\n+            for (Iterator it = changes.iterator(); it.hasNext();) {\n+                Change change = (Change) it.next();\n+                if (change.type() == Change.TYPE_DELETE) {\n+                    String target = change.targetFile();\n+\n+                    if (source.equals(target)) {\n+                        return true;\n+                    }\n+\n+                    return source.matches(target + \"/.*\");\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private static void copyStream(InputStream in, ArchiveOutputStream out,\n+            ArchiveEntry entry) throws IOException {\n+        out.putArchiveEntry(entry);\n+        IOUtils.copy(in, out);\n+        out.closeArchiveEntry();\n+    }\n }\n--- a/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n import java.lang.reflect.Method;\n import java.net.URL;\n import java.net.URLClassLoader;\n+import java.util.Iterator;\n import java.util.List;\n \n import junit.framework.TestCase;\n         addURL(new File(\"src/test/resources\").toURL());\n     }\n \n-    protected File getFile( String path ) {\n+    protected File getFile(String path) {\n         return new File(getClass().getClassLoader().getResource(path).getFile());\n     }\n \n     }\n \n     /**\n-     * Adds a URL to the classpath. This method is necessary when running \n-     * junit tests from within eclipse.\n-     * @param url the url to add\n-     * @throws Exception if an error occurs\n+     * Adds a URL to the classpath. This method is necessary when running junit\n+     * tests from within eclipse.\n+     * \n+     * @param url\n+     *            the url to add\n+     * @throws Exception\n+     *             if an error occurs\n      */\n     public void addURL(URL url) throws Exception {\n-        URLClassLoader classLoader = (URLClassLoader) ClassLoader.getSystemClassLoader();\n+        URLClassLoader classLoader = (URLClassLoader) ClassLoader\n+                .getSystemClassLoader();\n         Class clazz = URLClassLoader.class;\n \n-        Method method= clazz.getDeclaredMethod(\"addURL\", new Class[] { URL.class });\n+        Method method = clazz.getDeclaredMethod(\"addURL\",\n+                new Class[] { URL.class });\n         method.setAccessible(true);\n         method.invoke(classLoader, new Object[] { url });\n     }\n \n     /**\n-     * Creates an archive of 5 textbased files in several directories.\n-     * The archivername is the factory identifier for the archiver, for example\n-     * zip, tar, cpio, jar, ar.\n-     * The archive is created as a temp file.\n+     * Creates an archive of 5 textbased files in several directories. The\n+     * archivername is the factory identifier for the archiver, for example zip,\n+     * tar, cpio, jar, ar. The archive is created as a temp file.\n      * \n      * The archive contains the following files:\n      * <ul>\n      * <li>test with spaces.txt</li>\n      * </ul>\n      * \n-     * @param archivename the identifier of this archive\n+     * @param archivename\n+     *            the identifier of this archive\n      * @return the newly created file\n-     * @throws Exception in case something goes wrong\n+     * @throws Exception\n+     *             in case something goes wrong\n      */\n     protected File createArchive(String archivename) throws Exception {\n         ArchiveOutputStream out = null;\n             File temp = File.createTempFile(\"test\", \".\" + archivename);\n \n             final OutputStream stream = new FileOutputStream(temp);\n-            out = new ArchiveStreamFactory().createArchiveOutputStream(archivename, stream);\n+            out = new ArchiveStreamFactory().createArchiveOutputStream(\n+                    archivename, stream);\n \n             final File file1 = getFile(\"test1.xml\");\n             final File file2 = getFile(\"test2.xml\");\n             IOUtils.copy(new FileInputStream(file1), out);\n             out.closeArchiveEntry();\n \n-            out.putArchiveEntry(new ZipArchiveEntry(\"testdata/test2.xml\"));\n+            entry = new ZipArchiveEntry(\"testdata/test2.xml\");\n+            entry.setSize(file1.length());\n+            out.putArchiveEntry(entry);\n             IOUtils.copy(new FileInputStream(file2), out);\n             out.closeArchiveEntry();\n \n-            out.putArchiveEntry(new ZipArchiveEntry(\"test/test3.xml\"));\n+            entry = new ZipArchiveEntry(\"test/test3.xml\");\n+            entry.setSize(file1.length());\n+            out.putArchiveEntry(entry);\n             IOUtils.copy(new FileInputStream(file3), out);\n             out.closeArchiveEntry();\n \n-            out.putArchiveEntry(new ZipArchiveEntry(\"bla/test4.xml\"));\n+            entry = new ZipArchiveEntry(\"bla/test4.xml\");\n+            entry.setSize(file1.length());\n+            out.putArchiveEntry(entry);\n             IOUtils.copy(new FileInputStream(file4), out);\n             out.closeArchiveEntry();\n \n-            out.putArchiveEntry(new ZipArchiveEntry(\"test.txt\"));\n+            entry = new ZipArchiveEntry(\"bla/test5.xml\");\n+            entry.setSize(file1.length());\n+            out.putArchiveEntry(entry);\n+            IOUtils.copy(new FileInputStream(file4), out);\n+            out.closeArchiveEntry();\n+\n+            entry = new ZipArchiveEntry(\"bla/blubber/test6.xml\");\n+            entry.setSize(file1.length());\n+            out.putArchiveEntry(entry);\n+            IOUtils.copy(new FileInputStream(file4), out);\n+            out.closeArchiveEntry();\n+\n+            entry = new ZipArchiveEntry(\"test.txt\");\n+            entry.setSize(file1.length());\n+            out.putArchiveEntry(entry);\n             IOUtils.copy(new FileInputStream(file5), out);\n             out.closeArchiveEntry();\n \n-            out.putArchiveEntry(new ZipArchiveEntry(\"something/bla\"));\n+            entry = new ZipArchiveEntry(\"something/bla\");\n+            entry.setSize(file1.length());\n+            out.putArchiveEntry(entry);\n             IOUtils.copy(new FileInputStream(file6), out);\n             out.closeArchiveEntry();\n \n-            out.putArchiveEntry(new ZipArchiveEntry(\"test with spaces.txt\"));\n+            entry = new ZipArchiveEntry(\"test with spaces.txt\");\n+            entry.setSize(file1.length());\n+            out.putArchiveEntry(entry);\n             IOUtils.copy(new FileInputStream(file6), out);\n             out.closeArchiveEntry();\n \n             return temp;\n         } finally {\n-            if(out != null) out.close();\n+            if (out != null)\n+                out.close();\n         }\n     }\n \n     /**\n      * Checks if an archive contains all expected files.\n      * \n-     * @param archive \n-     *                              the archive to check\n-     * @param expected \n-     *                              a list with expected string filenames\n+     * @param archive\n+     *            the archive to check\n+     * @param expected\n+     *            a list with expected string filenames\n      * @throws Exception\n      */\n-    protected void checkArchiveContent(File archive, List expected) \n-        throws Exception {\n+    protected void checkArchiveContent(File archive, List expected)\n+            throws Exception {\n         final InputStream is = new FileInputStream(archive);\n         final BufferedInputStream buf = new BufferedInputStream(is);\n-        final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(buf);\n-\n+        final ArchiveInputStream in = new ArchiveStreamFactory()\n+                .createArchiveInputStream(buf);\n+        this.checkArchiveContent(in, expected);\n+    }\n+\n+    protected void checkArchiveContent(ArchiveInputStream in, List expected)\n+            throws Exception {\n         File result = File.createTempFile(\"dir-result\", \"\");\n         result.delete();\n         result.mkdir();\n \n         ArchiveEntry entry = null;\n-        while((entry = in.getNextEntry()) != null) {\n-            File outfile = new File(result.getCanonicalPath() + \"/result/\" + entry.getName());\n+        while ((entry = in.getNextEntry()) != null) {\n+            File outfile = new File(result.getCanonicalPath() + \"/result/\"\n+                    + entry.getName());\n             outfile.getParentFile().mkdirs();\n             OutputStream out = new FileOutputStream(outfile);\n-            if(!expected.remove(entry.getName())) {\n-                fail(\"unexpected entry: \" + entry.getName());\n-            } \n             IOUtils.copy(in, out);\n             out.close();\n+\n+            if (!outfile.exists()) {\n+                fail(\"extraction failed: \" + entry.getName());\n+            }\n+            if (!expected.remove(entry.getName())) {\n+                fail(\"unexpected entry: \" + entry.getName());\n+            }\n         }\n         in.close();\n-        assertEquals(expected.size(), 0);\n+        if (expected.size() > 0) {\n+            for (Iterator iterator = expected.iterator(); iterator.hasNext();) {\n+                String name = (String) iterator.next();\n+                fail(\"Expected entry: \" + name);\n+            }\n+        }\n+        assertEquals(0, expected.size());\n     }\n }\n--- a/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java\n  */\n public final class ChangeSetTestCase extends AbstractTestCase {\n     /**\n-     * Tries to delete the folder \"bla\" from a zip file.\n-     * This should result in the deletion of bla/*, which \n-     * actually means bla/test4.xml should be removed from this zipfile.\n-     * The file something/bla (without ending, named like the folder) should\n-     * not be deleted.\n-     * \n-     * @throws Exception\n-     */\n-    public void XtestDeleteDir() throws Exception {\n+     * Tries to delete the folder \"bla\" from a zip file. This should result in\n+     * the deletion of bla/*, which actually means bla/test4.xml should be\n+     * removed from this zipfile. The file something/bla (without ending, named\n+     * like the folder) should not be deleted.\n+     * \n+     * @throws Exception\n+     */\n+    public void testDeleteDir() throws Exception {\n         File input = this.createArchive(\"zip\");\n \n         ArchiveOutputStream out = null;\n         try {\n \n             final InputStream is = new FileInputStream(input);\n-            ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n-\n-            out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result));\n+            ais = new ArchiveStreamFactory()\n+                    .createArchiveInputStream(\"zip\", is);\n+\n+            out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\",\n+                    new FileOutputStream(result));\n \n             ChangeSet changes = new ChangeSet();\n             changes.delete(\"bla\");\n             changes.perform(ais, out);\n \n         } finally {\n-            if(out != null) out.close();\n-            if(ais != null) ais.close();\n+            if (out != null)\n+                out.close();\n+            if (ais != null)\n+                ais.close();\n         }\n \n         List expected = new ArrayList();\n     }\n \n     /**\n-     * Tries to delete a directory with a file and adds \n-     * a new directory with a new file and with the same name.\n-     * Should delete dir1/* and add dir1/test.txt at the end\n-     * \n-     * @throws Exception\n-     */\n-    public void XtestDeletePlusAdd() throws Exception {\n+     * Tries to delete the file \"bla/test5.xml\" from a zip file. This should\n+     * result in the deletion of \"bla/test5.xml\".\n+     * \n+     * @throws Exception\n+     */\n+    public void testDeleteFile() throws Exception {\n         File input = this.createArchive(\"zip\");\n \n         ArchiveOutputStream out = null;\n         try {\n \n             final InputStream is = new FileInputStream(input);\n-            ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n-            out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result));\n+            ais = new ArchiveStreamFactory()\n+                    .createArchiveInputStream(\"zip\", is);\n+\n+            out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\",\n+                    new FileOutputStream(result));\n+\n+            ChangeSet changes = new ChangeSet();\n+            changes.delete(\"bla/test5.xml\");\n+            changes.perform(ais, out);\n+\n+        } finally {\n+            if (out != null)\n+                out.close();\n+            if (ais != null)\n+                ais.close();\n+        }\n+\n+        List expected = new ArrayList();\n+        expected.add(\"testdata/test1.xml\");\n+        expected.add(\"testdata/test2.xml\");\n+        expected.add(\"test/test3.xml\");\n+        expected.add(\"test.txt\");\n+        expected.add(\"something/bla\");\n+        expected.add(\"test with spaces.txt\");\n+        expected.add(\"bla/test4.xml\");\n+        expected.add(\"bla/blubber/test6.xml\");\n+        this.checkArchiveContent(result, expected);\n+    }\n+\n+    /**\n+     * Tries to delete a directory with a file and adds a new directory with a\n+     * new file and with the same name. Should delete dir1/* and add\n+     * dir1/test.txt at the end\n+     * \n+     * @throws Exception\n+     */\n+    public void testDeletePlusAdd() throws Exception {\n+        File input = this.createArchive(\"zip\");\n+\n+        ArchiveOutputStream out = null;\n+        ArchiveInputStream ais = null;\n+        File result = File.createTempFile(\"test\", \".zip\");\n+        try {\n+\n+            final InputStream is = new FileInputStream(input);\n+            ais = new ArchiveStreamFactory()\n+                    .createArchiveInputStream(\"zip\", is);\n+            out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\",\n+                    new FileOutputStream(result));\n \n             ChangeSet changes = new ChangeSet();\n             changes.delete(\"bla\");\n             changes.perform(ais, out);\n \n         } finally {\n-            if(out != null) out.close();\n-            if(ais != null) ais.close();\n+            if (out != null)\n+                out.close();\n+            if (ais != null)\n+                ais.close();\n         }\n \n         List expected = new ArrayList();\n \n     /**\n      * Adds a file to a zip archive. Deletes an other file.\n-     * @throws Exception\n-     */\n-    public void XtestDeleteFromAndAddToZip() throws Exception {\n+     * \n+     * @throws Exception\n+     */\n+    public void testDeleteFromAndAddToZip() throws Exception {\n         File input = this.createArchive(\"zip\");\n \n         ArchiveOutputStream out = null;\n         try {\n \n             final InputStream is = new FileInputStream(input);\n-            ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n-            out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result));\n+            ais = new ArchiveStreamFactory()\n+                    .createArchiveInputStream(\"zip\", is);\n+            out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\",\n+                    new FileOutputStream(result));\n \n             ChangeSet changes = new ChangeSet();\n \n             changes.perform(ais, out);\n \n         } finally {\n-            if(out != null) out.close();\n-            if(ais != null) ais.close();\n+            if (out != null)\n+                out.close();\n+            if (ais != null)\n+                ais.close();\n         }\n \n         List expected = new ArrayList();\n         expected.add(\"testdata/test2.xml\");\n         expected.add(\"test/test3.xml\");\n         expected.add(\"blub/test.txt\");\n+        expected.add(\"bla/test5.xml\");\n+        expected.add(\"bla/blubber/test6.xml\");\n         expected.add(\"test.txt\");\n         expected.add(\"something/bla\");\n         expected.add(\"bla/test4.xml\");\n     }\n \n     /**\n-     * add blub/test.txt + delete blub\n-     * Should add dir1/test.txt and delete it afterwards. In this example,\n-     * the zip archive should stay untouched.\n-     * @throws Exception\n-     */\n-    public void XtestAddDeleteAdd() throws Exception {\n+     * add blub/test.txt + delete blub Should add dir1/test.txt and delete it\n+     * afterwards. In this example, the zip archive should stay untouched.\n+     * \n+     * @throws Exception\n+     */\n+    public void testAddDeleteAdd() throws Exception {\n         File input = this.createArchive(\"zip\");\n \n         ArchiveOutputStream out = null;\n         try {\n \n             final InputStream is = new FileInputStream(input);\n-            ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n-            out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result));\n+            ais = new ArchiveStreamFactory()\n+                    .createArchiveInputStream(\"zip\", is);\n+            out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\",\n+                    new FileOutputStream(result));\n \n             ChangeSet changes = new ChangeSet();\n \n             changes.perform(ais, out);\n \n         } finally {\n-            if(out != null) out.close();\n-            if(ais != null) ais.close();\n+            if (out != null)\n+                out.close();\n+            if (ais != null)\n+                ais.close();\n         }\n \n         List expected = new ArrayList();\n         expected.add(\"testdata/test2.xml\");\n         expected.add(\"test/test3.xml\");\n         expected.add(\"test.txt\");\n+        expected.add(\"bla/test5.xml\");\n+        expected.add(\"bla/blubber/test6.xml\");\n         expected.add(\"something/bla\");\n         expected.add(\"bla/test4.xml\");\n         expected.add(\"test with spaces.txt\");\n         this.checkArchiveContent(result, expected);\n     }\n \n-\n-    /**\n-     * delete bla + add bla/test.txt + delete bla\n-     * Deletes dir1/* first, then surpresses the add of bla.txt cause there\n-     * is a delete operation later.\n-     * @throws Exception\n-     */\n-    public void XtestDeleteAddDelete() throws Exception {\n+    /**\n+     * delete bla + add bla/test.txt + delete bla Deletes dir1/* first, then\n+     * surpresses the add of bla.txt cause there is a delete operation later.\n+     * \n+     * @throws Exception\n+     */\n+    public void testDeleteAddDelete() throws Exception {\n         File input = this.createArchive(\"zip\");\n \n         ArchiveOutputStream out = null;\n         try {\n \n             final InputStream is = new FileInputStream(input);\n-            ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n-            out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result));\n+            ais = new ArchiveStreamFactory()\n+                    .createArchiveInputStream(\"zip\", is);\n+            out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\",\n+                    new FileOutputStream(result));\n \n             ChangeSet changes = new ChangeSet();\n \n             changes.perform(ais, out);\n \n         } finally {\n-            if(out != null) out.close();\n-            if(ais != null) ais.close();\n+            if (out != null)\n+                out.close();\n+            if (ais != null)\n+                ais.close();\n         }\n \n         List expected = new ArrayList();\n \n     /**\n      * Simple Delete from a zip file.\n+     * \n      * @throws Exception\n      */\n     public void testDeleteFromZip() throws Exception {\n         ArchiveOutputStream out = null;\n         ArchiveInputStream ais = null;\n+        File temp = null;\n         try {\n             ChangeSet changes = new ChangeSet();\n             changes.delete(\"test2.xml\");\n \n             final File input = getFile(\"bla.zip\");\n             final InputStream is = new FileInputStream(input);\n-            ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n-\n-            File temp = File.createTempFile(\"test\", \".zip\");\n-            out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(temp));\n-\n-            changes.perform(ais, out);\n-        } finally {\n-            if(out != null) out.close();\n-            if(ais != null) ais.close();\n-        }\n-        // TODO add asserts\n+            ais = new ArchiveStreamFactory()\n+                    .createArchiveInputStream(\"zip\", is);\n+\n+            temp = File.createTempFile(\"test\", \".zip\");\n+            out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\",\n+                    new FileOutputStream(temp));\n+\n+            changes.perform(ais, out);\n+        } finally {\n+            if (out != null)\n+                out.close();\n+            if (ais != null)\n+                ais.close();\n+        }\n+\n+        List expected = new ArrayList();\n+        expected.add(\"test1.xml\");\n+\n+        this.checkArchiveContent(temp, expected);\n     }\n \n     /**\n      * Simple delete from a tar file\n+     * \n      * @throws Exception\n      */\n     public void testDeleteFromTar() throws Exception {\n         ArchiveOutputStream out = null;\n         ArchiveInputStream ais = null;\n+        File temp = null;\n         try {\n             ChangeSet changes = new ChangeSet();\n             changes.delete(\"test2.xml\");\n \n             final File input = getFile(\"bla.tar\");\n             final InputStream is = new FileInputStream(input);\n-            ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is);\n-\n-            File temp = new File(dir, \"bla.tar\");\n-            out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp));\n-\n-            changes.perform(ais, out);\n-        } finally {\n-            if(out != null) out.close();\n-            if(ais != null) ais.close();\n-        }\n-        // TODO add asserts\n+            ais = new ArchiveStreamFactory()\n+                    .createArchiveInputStream(\"tar\", is);\n+\n+            temp = new File(dir, \"bla.tar\");\n+            out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\",\n+                    new FileOutputStream(temp));\n+\n+            changes.perform(ais, out);\n+        } finally {\n+            if (out != null)\n+                out.close();\n+            if (ais != null)\n+                ais.close();\n+        }\n+        List expected = new ArrayList();\n+        expected.add(\"test1.xml\");\n+        this.checkArchiveContent(temp, expected);\n     }\n \n     /**\n      * Simple delete from a jar file\n+     * \n      * @throws Exception\n      */\n     public void testDeleteFromJar() throws Exception {\n         ArchiveOutputStream out = null;\n         ArchiveInputStream ais = null;\n+        File temp = null;\n         try {\n             ChangeSet changes = new ChangeSet();\n             changes.delete(\"test2.xml\");\n-            changes.delete(\"META-INF/MANIFEST.MF\");\n+            changes.delete(\"META-INF\");\n+            changes.delete(\".classpath\");\n+            changes.delete(\".project\");\n \n             final File input = getFile(\"bla.jar\");\n             final InputStream is = new FileInputStream(input);\n-            ais = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is);\n-\n-            File temp = new File(dir, \"bla.jar\");\n-            out = new ArchiveStreamFactory().createArchiveOutputStream(\"jar\", new FileOutputStream(temp));\n-\n-            changes.perform(ais, out);\n-        } finally {\n-            if(out != null) out.close();\n-            if(ais != null) ais.close();\n-        }\n-        // TODO add asserts\n-    }\n-\n-    /**\n-     * Simple delete from an ar file\n-     * @throws Exception\n-     */\n-    public void testDeleteFromAr() throws Exception {\n-        ArchiveOutputStream out = null;\n-        ArchiveInputStream ais = null;\n+            ais = new ArchiveStreamFactory()\n+                    .createArchiveInputStream(\"jar\", is);\n+\n+            temp = new File(dir, \"bla.jar\");\n+            out = new ArchiveStreamFactory().createArchiveOutputStream(\"jar\",\n+                    new FileOutputStream(temp));\n+\n+            changes.perform(ais, out);\n+        } finally {\n+            if (out != null)\n+                out.close();\n+            if (ais != null)\n+                ais.close();\n+        }\n+        List expected = new ArrayList();\n+        expected.add(\"test1.xml\");\n+        this.checkArchiveContent(temp, expected);\n+    }\n+\n+    public void testDeleteFromAndAddToTar() throws Exception {\n+        ArchiveOutputStream out = null;\n+        ArchiveInputStream ais = null;\n+        File temp = null;\n         try {\n             ChangeSet changes = new ChangeSet();\n             changes.delete(\"test2.xml\");\n \n-            final File input = getFile(\"bla.ar\");\n-            final InputStream is = new FileInputStream(input);\n-            ais = new ArchiveStreamFactory().createArchiveInputStream(\"ar\", is);\n-\n-            File temp = new File(dir, \"bla.ar\");\n-            out = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", new FileOutputStream(temp));\n-\n-            changes.perform(ais, out);\n-        } finally {\n-            if(out != null) out.close();\n-            if(ais != null) ais.close();\n-        }\n-        // TODO add asserts\n-    }\n-\n-    public void testDeleteFromAndAddToTar() throws Exception {\n-        ArchiveOutputStream out = null;\n-        ArchiveInputStream ais = null;\n-        try {\n-            ChangeSet changes = new ChangeSet();\n-            changes.delete(\"test2.xml\");\n-\n             final File file1 = getFile(\"test.txt\");\n \n-            final TarArchiveEntry entry = new TarArchiveEntry(\"testdata/test.txt\");\n+            final TarArchiveEntry entry = new TarArchiveEntry(\n+                    \"testdata/test.txt\");\n             entry.setModTime(0);\n             entry.setSize(file1.length());\n             entry.setUserId(0);\n \n             final File input = getFile(\"bla.tar\");\n             final InputStream is = new FileInputStream(input);\n-            ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is);\n-\n-            File temp = new File(dir, \"bla.tar\");\n-            out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp));\n-\n-            changes.perform(ais, out);\n-        } finally {\n-            if(out != null) out.close();\n-            if(ais != null) ais.close();\n-        }\n-        // TODO add asserts\n+            ais = new ArchiveStreamFactory()\n+                    .createArchiveInputStream(\"tar\", is);\n+\n+            temp = new File(dir, \"bla.tar\");\n+            out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\",\n+                    new FileOutputStream(temp));\n+\n+            changes.perform(ais, out);\n+        } finally {\n+            if (out != null)\n+                out.close();\n+            if (ais != null)\n+                ais.close();\n+        }\n+        List expected = new ArrayList();\n+        expected.add(\"test1.xml\");\n+        expected.add(\"testdata/test.txt\");\n+        // TODO: automatic detection of TAR archive temp fails here\n+        final ArchiveInputStream in = new ArchiveStreamFactory()\n+                .createArchiveInputStream(\"tar\", new FileInputStream(temp));\n+        this.checkArchiveContent(in, expected);\n     }\n \n     /**\n      * Delete from a jar file and add another file\n+     * \n      * @throws Exception\n      */\n     public void testDeleteFromAndAddToJar() throws Exception {\n         ArchiveOutputStream out = null;\n         ArchiveInputStream ais = null;\n+        File temp = null;\n         try {\n             ChangeSet changes = new ChangeSet();\n             changes.delete(\"test2.xml\");\n+            changes.delete(\"META-INF\");\n+            changes.delete(\".classpath\");\n+            changes.delete(\".project\");\n \n             final File file1 = getFile(\"test.txt\");\n             JarArchiveEntry entry = new JarArchiveEntry(\"testdata/test.txt\");\n \n             final File input = getFile(\"bla.jar\");\n             final InputStream is = new FileInputStream(input);\n-            ais = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is);\n-\n-            File temp = new File(dir, \"bla.jar\");\n-            out = new ArchiveStreamFactory().createArchiveOutputStream(\"jar\", new FileOutputStream(temp));\n-\n-            changes.perform(ais, out);\n-        } finally {\n-            if(out != null) out.close();\n-            if(ais != null) ais.close();\n-        }\n-        // TODO add asserts\n+            ais = new ArchiveStreamFactory()\n+                    .createArchiveInputStream(\"jar\", is);\n+\n+            temp = new File(dir, \"bla.jar\");\n+            out = new ArchiveStreamFactory().createArchiveOutputStream(\"jar\",\n+                    new FileOutputStream(temp));\n+\n+            changes.perform(ais, out);\n+        } finally {\n+            if (out != null)\n+                out.close();\n+            if (ais != null)\n+                ais.close();\n+        }\n+        List expected = new ArrayList();\n+        expected.add(\"test1.xml\");\n+        expected.add(\"testdata/test.txt\");\n+        this.checkArchiveContent(temp, expected);\n+    }\n+\n+    /**\n+     * Simple delete from an ar file\n+     * \n+     * @throws Exception\n+     */\n+    public void XtestDeleteFromAr() throws Exception {\n+        ArchiveOutputStream out = null;\n+        ArchiveInputStream ais = null;\n+        File temp = null;\n+        try {\n+            ChangeSet changes = new ChangeSet();\n+            changes.delete(\"test2.xml\");\n+\n+            final File input = getFile(\"bla.ar\");\n+            final InputStream is = new FileInputStream(input);\n+            ais = new ArchiveStreamFactory().createArchiveInputStream(\"ar\", is);\n+\n+            temp = new File(dir, \"bla.ar\");\n+            out = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\",\n+                    new FileOutputStream(temp));\n+\n+            changes.perform(ais, out);\n+        } finally {\n+            if (out != null)\n+                out.close();\n+            if (ais != null)\n+                ais.close();\n+        }\n+\n+        // TODO: check ar file. getNextEntry returns null, but ar -t tempfile.ar\n+        // shows still two files\n+        List expected = new ArrayList();\n+        expected.add(\"test1.xml\");\n+        this.checkArchiveContent(temp, expected);\n     }\n \n     /**\n      * Deletes a file from an AR-archive and adds another\n-     * @throws Exception\n-     */\n-    public void testDeleteFromAndAddToAr() throws Exception {\n-        ArchiveOutputStream out = null;\n-        ArchiveInputStream ais = null;\n+     * \n+     * @throws Exception\n+     */\n+    public void XtestDeleteFromAndAddToAr() throws Exception {\n+        ArchiveOutputStream out = null;\n+        ArchiveInputStream ais = null;\n+        File temp = null;\n         try {\n             ChangeSet changes = new ChangeSet();\n             changes.delete(\"test2.xml\");\n \n             final File file1 = getFile(\"test.txt\");\n \n-            final ArArchiveEntry entry = new ArArchiveEntry(\"test.txt\", file1.length());\n+            final ArArchiveEntry entry = new ArArchiveEntry(\"test.txt\", file1\n+                    .length());\n \n             changes.add(entry, new FileInputStream(file1));\n \n             final InputStream is = new FileInputStream(input);\n             ais = new ArchiveStreamFactory().createArchiveInputStream(\"ar\", is);\n \n-            File temp = new File(dir, \"bla.ar\");\n-            out = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", new FileOutputStream(temp));\n-\n-            changes.perform(ais, out);\n-        } finally {\n-            if(out != null) out.close();\n-            if(ais != null) ais.close();\n-        }\n-        // TODO add asserts\n+            temp = new File(dir, \"bla.ar\");\n+            out = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\",\n+                    new FileOutputStream(temp));\n+\n+            changes.perform(ais, out);\n+        } finally {\n+            if (out != null)\n+                out.close();\n+            if (ais != null)\n+                ais.close();\n+        }\n+        System.out.println(temp.getAbsolutePath());\n+        List expected = new ArrayList();\n+        expected.add(\"test1.xml\");\n+        expected.add(\"test.txt\");\n+        this.checkArchiveContent(temp, expected);\n     }\n \n     /**\n      * TODO: Move operations are not supported currently\n      * \n-     * mv dir1/test.text dir2/test.txt + delete dir1\n-     * Moves the file to dir2 and deletes everything in dir1\n+     * mv dir1/test.text dir2/test.txt + delete dir1 Moves the file to dir2 and\n+     * deletes everything in dir1\n+     * \n      * @throws Exception\n      */\n     public void testRenameAndDelete() throws Exception {", "timestamp": 1236007125, "metainfo": ""}