{"sha": "90a05f7e6428d3cdf1a3c159bd166372b7a2a787", "log": "revert Filter*Stream patches since they do more harm than help  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\n         entryOffset += len;\n     }\n \n+    public void write(byte[] b) throws IOException {\n+        out.write(b);\n+        entryOffset += b.length;\n+    }\n+\n     public void close() throws IOException {\n         closeArchiveEntry();\n         out.close();\n--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n         this.putNextEntry((CpioArchiveEntry)entry);\n     }\n \n+    /* (non-Javadoc)\n+     * @see java.io.OutputStream#write(int)\n+     */\n+    public void write(int b) throws IOException {\n+        out.write(b);\n+    }\n }\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java\n     }\n \n     /**\n+     * Writes bytes to the current tar archive entry.\n+     *\n+     * This method simply calls write( byte[], int, int ).\n+     *\n+     * @param wBuf The buffer to write to the archive.\n+     * @throws IOException on error\n+     */\n+    public void write(byte[] wBuf) throws IOException {\n+        write(wBuf, 0, wBuf.length);\n+    }\n+\n+    /**\n      * Writes bytes to the current tar archive entry. This method\n      * is aware of the current entry and will throw an exception if\n      * you attempt to write bytes past the length specified for the\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n         }\n     }\n \n+    /**\n+     * Flushes this output stream and forces any buffered output bytes\n+     * to be written out to the stream.\n+     *\n+     * @exception  IOException  if an I/O error occurs.\n+     * @since 1.14\n+     */\n+    public void flush() throws IOException {\n+        if (out != null) {\n+            out.flush();\n+        }\n+    }\n+\n     public void putArchiveEntry(ArchiveEntry entry) throws IOException {\n         putNextEntry((ZipArchiveEntry) entry);\n     }\n--- a/src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java\n  */\n package org.apache.commons.compress.compressors;\n \n-import java.io.FilterInputStream;\n import java.io.InputStream;\n \n-public abstract class CompressorInputStream extends FilterInputStream {\n+public abstract class CompressorInputStream extends InputStream {\n     // TODO \n-    protected CompressorInputStream(final InputStream i) {\n-        super(i);\n-    }\n }\n--- a/src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java\n  */\n package org.apache.commons.compress.compressors;\n \n-import java.io.FilterOutputStream;\n import java.io.OutputStream;\n \n-public abstract class CompressorOutputStream extends FilterOutputStream {\n+public abstract class CompressorOutputStream extends OutputStream {\n     // TODO\n-    protected CompressorOutputStream(final OutputStream o) {\n-        super(o);\n-    }\n }\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java\n \n     private int nInUse;\n \n+    private InputStream in;\n+\n     private int currentChar = -1;\n \n     private static final int EOF                  = 0;\n      *  if <tt>in == null</tt>\n      */\n     public BZip2CompressorInputStream(final InputStream in) throws IOException {\n-        super(in);\n-\n+        super();\n+\n+        this.in = in;\n         init();\n     }\n \n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n \n     public BZip2CompressorOutputStream(OutputStream inStream, int inBlockSize)\n         throws IOException {\n-        super(inStream);\n         block = null;\n         quadrant = null;\n         zptr = null;\n         }\n         finish();\n         super.close();\n-        out.close();\n+        bsStream.close();\n         closed = true;\n     }\n \n \n     public void flush() throws IOException {\n         super.flush();\n-        out.flush();\n+        bsStream.flush();\n     }\n \n     private int blockCRC, combinedCRC;\n     }\n \n     private void bsSetStream(OutputStream f) {\n-        out = f;\n+        bsStream = f;\n         bsLive = 0;\n         bsBuff = 0;\n         bytesOut = 0;\n         while (bsLive > 0) {\n             int ch = (bsBuff >> 24);\n             try {\n-                out.write(ch); // write 8-bit\n+                bsStream.write(ch); // write 8-bit\n             } catch (IOException e) {\n                 throw  e;\n             }\n         while (bsLive >= 8) {\n             int ch = (bsBuff >> 24);\n             try {\n-                out.write(ch); // write 8-bit\n+                bsStream.write(ch); // write 8-bit\n             } catch (IOException e) {\n                 throw e;\n             }\n         generateMTFValues();\n         sendMTFValues();\n     }\n+\n+    private OutputStream bsStream;\n \n     private void simpleSort(int lo, int hi, int d) {\n         int i, j, h, bigN, hp;\n--- a/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java\n \n public class GzipCompressorInputStream extends CompressorInputStream {\n \n+    private final GZIPInputStream in; \n+\n     public GzipCompressorInputStream(InputStream inputStream) throws IOException {\n-        super(new GZIPInputStream(inputStream));\n+        in = new GZIPInputStream(inputStream);\n+    }\n+\n+    public int read() throws IOException {\n+        return in.read();\n     }\n \n }\n--- a/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java\n \n public class GzipCompressorOutputStream extends CompressorOutputStream {\n \n+    private final GZIPOutputStream out;\n+\n     public GzipCompressorOutputStream( final OutputStream outputStream ) throws IOException {\n-        super(new GZIPOutputStream(outputStream));\n+        out = new GZIPOutputStream(outputStream);\n+    }\n+\n+    public void write(int b) throws IOException {\n+        out.write(b);\n+    }\n+\n+    public void close() throws IOException {\n+        out.close();\n     }\n \n }", "timestamp": 1234278682, "metainfo": ""}