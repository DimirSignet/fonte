{"sha": "b35d1e7194b727c034ce56817059b3c3c6a0fca7", "log": "more resource savings  ", "commit": "\n--- a/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n+import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n import java.util.Iterator;\n public abstract class AbstractTestCase extends TestCase {\n \n     protected File dir;\n+    protected File resultDir;\n \n     protected void setUp() throws Exception {\n-        dir = File.createTempFile(\"dir\", \"\");\n-        dir.delete();\n-        dir.mkdir();\n+        dir = mkdir(\"dir\");\n+        resultDir = mkdir(\"dir-result\");\n+    }\n+\n+    protected static File mkdir(String name) throws IOException {\n+        File f = File.createTempFile(name, \"\");\n+        f.delete();\n+        f.mkdir();\n+        return f;\n     }\n \n     protected File getFile(String path) {\n     }\n \n     protected void tearDown() throws Exception {\n-        String[] f = dir.list();\n-        if (f != null) {\n-            for (int i = 0; i < f.length; i++) {\n-                new File(dir, f[i]).delete();\n-            }\n-        }\n-        dir.delete();\n-        dir = null;\n+        rmdir(dir);\n+        rmdir(resultDir);\n+        dir = resultDir = null;\n+    }\n+\n+    protected static void rmdir(File f) throws IOException {\n+        String[] s = f.list();\n+        if (s != null) {\n+            for (int i = 0; i < s.length; i++) {\n+                new File(f, s[i]).delete();\n+            }\n+        }\n+        f.delete();\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n         final File file1 = getFile(\"test1.xml\");\n         final File file2 = getFile(\"test2.xml\");\n \n-        {\n-            final OutputStream out = new FileOutputStream(output);\n-            final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", out);\n-\n+        final OutputStream out = new FileOutputStream(output);\n+        ArchiveOutputStream os = null;\n+        try {\n+            os = new ArchiveStreamFactory()\n+                .createArchiveOutputStream(\"zip\", out);\n             os.putArchiveEntry(new ZipArchiveEntry(\"testdata/test1.xml\"));\n             IOUtils.copy(new FileInputStream(file1), os);\n             os.closeArchiveEntry();\n             os.putArchiveEntry(new ZipArchiveEntry(\"testdata/test2.xml\"));\n             IOUtils.copy(new FileInputStream(file2), os);\n             os.closeArchiveEntry();\n-            os.close();\n+        } finally {\n+            if (os != null) {\n+                os.close();\n+            } else {\n+                out.close();\n+            }\n         }\n \n         // Unarchive the same\n         List results = new ArrayList();\n \n-        {\n-            final InputStream is = new FileInputStream(output);\n-            final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n-\n-            File result = File.createTempFile(\"dir-result\", \"\");\n-            result.delete();\n-            result.mkdir();\n+        final InputStream is = new FileInputStream(output);\n+        ArchiveInputStream in = null;\n+        try {\n+            in = new ArchiveStreamFactory()\n+                .createArchiveInputStream(\"zip\", is);\n \n             ZipArchiveEntry entry = null;\n             while((entry = (ZipArchiveEntry)in.getNextEntry()) != null) {\n-                File outfile = new File(result.getCanonicalPath() + \"/result/\" + entry.getName());\n+                File outfile = new File(resultDir.getCanonicalPath() + \"/result/\" + entry.getName());\n                 outfile.getParentFile().mkdirs();\n-                OutputStream out = new FileOutputStream(outfile);\n-                IOUtils.copy(in, out);\n-                out.close();\n+                OutputStream o = new FileOutputStream(outfile);\n+                try {\n+                    IOUtils.copy(in, o);\n+                } finally {\n+                    o.close();\n+                }\n                 results.add(outfile);\n             }\n-            in.close();\n+        } finally {\n+            if (in != null) {\n+                in.close();\n+            } else {\n+                is.close();\n+            }\n         }\n \n         assertEquals(results.size(), 2);\n--- a/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java\n         ArchiveOutputStream out = null;\n         ArchiveInputStream ais = null;\n         File result = File.createTempFile(\"test\", \".zip\");\n+        result.deleteOnExit();\n         try {\n \n             final InputStream is = new FileInputStream(input);\n         ArchiveOutputStream out = null;\n         ArchiveInputStream ais = null;\n         File result = File.createTempFile(\"test\", \".zip\");\n+        result.deleteOnExit();\n         try {\n \n             final InputStream is = new FileInputStream(input);\n         ArchiveOutputStream out = null;\n         ArchiveInputStream ais = null;\n         File result = File.createTempFile(\"test\", \".zip\");\n+        result.deleteOnExit();\n         try {\n \n             final InputStream is = new FileInputStream(input);\n         ArchiveOutputStream out = null;\n         ArchiveInputStream ais = null;\n         File result = File.createTempFile(\"test\", \".zip\");\n+        result.deleteOnExit();\n         try {\n \n             final InputStream is = new FileInputStream(input);\n         ArchiveOutputStream out = null;\n         ArchiveInputStream ais = null;\n         File result = File.createTempFile(\"test\", \".zip\");\n+        result.deleteOnExit();\n         try {\n \n             final InputStream is = new FileInputStream(input);\n         ArchiveOutputStream out = null;\n         ArchiveInputStream ais = null;\n         File result = File.createTempFile(\"test\", \".zip\");\n+        result.deleteOnExit();\n         try {\n \n             final InputStream is = new FileInputStream(input);\n                     .createArchiveInputStream(\"zip\", is);\n \n             temp = File.createTempFile(\"test\", \".zip\");\n+            temp.deleteOnExit();\n             out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\",\n                     new FileOutputStream(temp));\n ", "timestamp": 1238087987, "metainfo": ""}