{"sha": "c828c1dec5de089b43c6c9d2824814baafc3146a", "log": "take advantage of FilterOutputStream  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\n         entryOffset += len;\n     }\n \n-    public void write(byte[] b) throws IOException {\n-        out.write(b);\n-        entryOffset += b.length;\n-    }\n-\n     public void close() throws IOException {\n         closeArchiveEntry();\n         out.close();\n--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n         this.putNextEntry((CpioArchiveEntry)entry);\n     }\n \n-    /* (non-Javadoc)\n-     * @see java.io.OutputStream#write(int)\n-     */\n-    public void write(int b) throws IOException {\n-        out.write(b);\n-    }\n }\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java\n     }\n \n     /**\n-     * Writes bytes to the current tar archive entry.\n-     *\n-     * This method simply calls write( byte[], int, int ).\n-     *\n-     * @param wBuf The buffer to write to the archive.\n-     * @throws IOException on error\n-     */\n-    public void write(byte[] wBuf) throws IOException {\n-        write(wBuf, 0, wBuf.length);\n-    }\n-\n-    /**\n      * Writes bytes to the current tar archive entry. This method\n      * is aware of the current entry and will throw an exception if\n      * you attempt to write bytes past the length specified for the\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n         }\n     }\n \n-    /**\n-     * Flushes this output stream and forces any buffered output bytes\n-     * to be written out to the stream.\n-     *\n-     * @exception  IOException  if an I/O error occurs.\n-     * @since 1.14\n-     */\n-    public void flush() throws IOException {\n-        if (out != null) {\n-            out.flush();\n-        }\n-    }\n-\n     public void putArchiveEntry(ArchiveEntry entry) throws IOException {\n         putNextEntry((ZipArchiveEntry) entry);\n     }", "timestamp": 1234276620, "metainfo": ""}