{"sha": "bed564b55d405bea0be8379576676e5a9be83493", "log": "equalsIgnoreCase does not depend on the current Locale.  My bad.  Revert unnecessary part of earlier changes.  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n-import java.util.Locale;\n \n import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;\n import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;\n  */\n public class ArchiveStreamFactory {\n \n-    // constants used for case- and locale-insensitive comparisons.\n-\n-    private static final String AR_LC = \"ar\";\n-    private static final String CPIO_LC = \"cpio\";\n-    private static final String JAR_LC = \"jar\";\n-    private static final String TAR_LC = \"tar\";\n-    private static final String ZIP_LC = \"zip\";\n+    private static final String AR = \"ar\";\n+    private static final String CPIO = \"cpio\";\n+    private static final String JAR = \"jar\";\n+    private static final String TAR = \"tar\";\n+    private static final String ZIP = \"zip\";\n \n     /**\n      * Create an archive input stream from an archiver name and an input stream.\n         \tthrow new IllegalArgumentException(\"InputStream must not be null.\");\n         }\n \n-        String archiverNameToCompare = archiverName.toLowerCase(Locale.ENGLISH);\n-\n-        if (AR_LC.equals(archiverNameToCompare)) {\n+        if (AR.equalsIgnoreCase(archiverName)) {\n             return new ArArchiveInputStream(in);\n         }\n-        if (ZIP_LC.equals(archiverNameToCompare)) {\n+        if (ZIP.equalsIgnoreCase(archiverName)) {\n             return new ZipArchiveInputStream(in);\n         }\n-        if (TAR_LC.equals(archiverNameToCompare)) {\n+        if (TAR.equalsIgnoreCase(archiverName)) {\n             return new TarArchiveInputStream(in);\n         }\n-        if (JAR_LC.equals(archiverNameToCompare)) {\n+        if (JAR.equalsIgnoreCase(archiverName)) {\n             return new JarArchiveInputStream(in);\n         }\n-        if (CPIO_LC.equals(archiverNameToCompare)) {\n+        if (CPIO.equalsIgnoreCase(archiverName)) {\n             return new CpioArchiveInputStream(in);\n         }\n         \n         \tthrow new IllegalArgumentException(\"OutputStream must not be null.\");\n         }\n \n-        String archiverNameToCompare = archiverName.toLowerCase(Locale.ENGLISH);\n-\n-        if (AR_LC.equals(archiverNameToCompare)) {\n+        if (AR.equalsIgnoreCase(archiverName)) {\n             return new ArArchiveOutputStream(out);\n         }\n-        if (ZIP_LC.equals(archiverNameToCompare)) {\n+        if (ZIP.equalsIgnoreCase(archiverName)) {\n             return new ZipArchiveOutputStream(out);\n         }\n-        if (TAR_LC.equals(archiverNameToCompare)) {\n+        if (TAR.equalsIgnoreCase(archiverName)) {\n             return new TarArchiveOutputStream(out);\n         }\n-        if (JAR_LC.equals(archiverNameToCompare)) {\n+        if (JAR.equalsIgnoreCase(archiverName)) {\n             return new JarArchiveOutputStream(out);\n         }\n-        if (CPIO_LC.equals(archiverNameToCompare)) {\n+        if (CPIO.equalsIgnoreCase(archiverName)) {\n             return new CpioArchiveOutputStream(out);\n         }\n         throw new ArchiveException(\"Archiver: \" + archiverName + \" not found.\");\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n      */\n     private static String normalizeFileName(String fileName,\n                                             boolean preserveLeadingSlashes) {\n-        String osname = System.getProperty(\"os.name\").toLowerCase(Locale.US);\n+        String osname = System.getProperty(\"os.name\").toLowerCase(Locale.ENGLISH);\n \n         if (osname != null) {\n \n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java\n import java.nio.charset.Charset;\n import java.nio.charset.UnsupportedCharsetException;\n import java.util.HashMap;\n-import java.util.Locale;\n import java.util.Map;\n \n /**\n     static final String UTF8 = \"UTF8\";\n \n     /**\n-     * name of the encoding UTF-8 used for comparisions.\n-     */\n-    private static final String UTF8_LC = UTF8.toLowerCase(Locale.ENGLISH);\n-\n-    /**\n      * variant name of the encoding UTF-8 used for comparisions.\n      */\n-    private static final String UTF_DASH_8_LC = \"utf-8\";\n+    private static final String UTF_DASH_8 = \"utf-8\";\n \n     /**\n      * name of the encoding UTF-8\n             // check platform's default encoding\n             encoding = System.getProperty(\"file.encoding\");\n         }\n-        String enc = encoding.toLowerCase(Locale.ENGLISH);\n-        return UTF8_LC.equals(enc) || UTF_DASH_8_LC.equals(enc);\n+        return UTF8.equalsIgnoreCase(encoding)\n+            || UTF_DASH_8.equalsIgnoreCase(encoding);\n     }\n }\n--- a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n-import java.util.Locale;\n \n import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;\n import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;\n  */\n public class CompressorStreamFactory {\n \n-    // constants used for case- and locale-insensitive comparisons.\n-    private static final String BZ_LC = \"bzip2\";\n-    private static final String GZ_LC = \"gz\";\n+    private static final String BZ = \"bzip2\";\n+    private static final String GZ = \"gz\";\n \n     /**\n      * Create an compressor input stream from an input stream, autodetecting\n                     \"Compressor name and stream must not be null.\");\n         }\n \n-        String nameToCompare = name.toLowerCase(Locale.ENGLISH);\n-\n         try {\n             \n-            if (GZ_LC.equals(nameToCompare)) {\n+            if (GZ.equalsIgnoreCase(name)) {\n                 return new GzipCompressorInputStream(in);\n             }\n             \n-            if (BZ_LC.equals(nameToCompare)) {\n+            if (BZ.equalsIgnoreCase(name)) {\n                 return new BZip2CompressorInputStream(in);\n             }\n             \n                     \"Compressor name and stream must not be null.\");\n         }\n \n-        String nameToCompare = name.toLowerCase(Locale.ENGLISH);\n-\n         try {\n \n-            if (GZ_LC.equals(nameToCompare)) {\n+            if (GZ.equalsIgnoreCase(name)) {\n                 return new GzipCompressorOutputStream(out);\n             }\n             \n-            if (BZ_LC.equals(nameToCompare)) {\n+            if (BZ.equalsIgnoreCase(name)) {\n                 return new BZip2CompressorOutputStream(out);\n             }\n         ", "timestamp": 1266496442, "metainfo": ""}