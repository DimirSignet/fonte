{"sha": "e0b8b9495baf6d69ba7d773539faec09405c6014", "log": "whitespace  ", "commit": "\n--- a/src/test/java/org/apache/commons/compress/archivers/ArTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ArTestCase.java\n \n public final class ArTestCase extends AbstractTestCase {\n \n-\tpublic void testArArchiveCreation() throws Exception {\n-\t\tfinal File output = new File(dir, \"bla.ar\");\n-\t\t\n-\t\tfinal File file1 = getFile(\"test1.xml\");\n-\t\tfinal File file2 = getFile(\"test2.xml\");\n-\t\t\n-\t\tfinal OutputStream out = new FileOutputStream(output);\n+    public void testArArchiveCreation() throws Exception {\n+        final File output = new File(dir, \"bla.ar\");\n+\n+        final File file1 = getFile(\"test1.xml\");\n+        final File file2 = getFile(\"test2.xml\");\n+\n+        final OutputStream out = new FileOutputStream(output);\n         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out);\n-\t\tos.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length()));\n-\t\tIOUtils.copy(new FileInputStream(file1), os);\n-\t\tos.closeArchiveEntry();\n-\t\t\n-\t\tos.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length()));\n-\t\tIOUtils.copy(new FileInputStream(file2), os);\n-\t\tos.closeArchiveEntry();\n-\t\t\n-\t\tos.close();\n-\t}\n+        os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length()));\n+        IOUtils.copy(new FileInputStream(file1), os);\n+        os.closeArchiveEntry();\n \n-\tpublic void testArUnarchive() throws Exception {\n-\t\tfinal File output = new File(dir, \"bla.ar\");\n-\t\t{\n-\t\t\tfinal File file1 = getFile(\"test1.xml\");\n-\t\t\tfinal File file2 = getFile(\"test2.xml\");\n-\t\t\t\n-\t\t\tfinal OutputStream out = new FileOutputStream(output);\n-\t        final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out);\n-\t\t\tos.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length()));\n-\t\t\tIOUtils.copy(new FileInputStream(file1), os);\n-\t\t\tos.closeArchiveEntry();\n-\t\t\t\n-\t\t\tos.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length()));\n-\t\t\tIOUtils.copy(new FileInputStream(file2), os);\n-\t\t\tos.closeArchiveEntry();\n-\t\t\tos.close();\n-\t\t\tout.close();\n-\t\t}\n-\t\t\n-\t\t// UnArArchive Operation\n-\t\tfinal File input = output;\n-\t\tfinal InputStream is = new FileInputStream(input);\n-\t\tfinal ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(new BufferedInputStream(is));\n-\t\tfinal ArArchiveEntry entry = (ArArchiveEntry)in.getNextEntry();\n-\t\t\n-\t\tFile target = new File(dir, entry.getName());\n+        os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length()));\n+        IOUtils.copy(new FileInputStream(file2), os);\n+        os.closeArchiveEntry();\n+\n+        os.close();\n+    }\n+\n+    public void testArUnarchive() throws Exception {\n+        final File output = new File(dir, \"bla.ar\");\n+        {\n+            final File file1 = getFile(\"test1.xml\");\n+            final File file2 = getFile(\"test2.xml\");\n+\n+            final OutputStream out = new FileOutputStream(output);\n+            final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out);\n+            os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length()));\n+            IOUtils.copy(new FileInputStream(file1), os);\n+            os.closeArchiveEntry();\n+\n+            os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length()));\n+            IOUtils.copy(new FileInputStream(file2), os);\n+            os.closeArchiveEntry();\n+            os.close();\n+            out.close();\n+        }\n+\n+        // UnArArchive Operation\n+        final File input = output;\n+        final InputStream is = new FileInputStream(input);\n+        final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(new BufferedInputStream(is));\n+        final ArArchiveEntry entry = (ArArchiveEntry)in.getNextEntry();\n+\n+        File target = new File(dir, entry.getName());\n         final OutputStream out = new FileOutputStream(target);\n-        \n+\n         IOUtils.copy(in, out);\n-    \n+\n         out.close();\n         in.close();\n         is.close();\n-\t}\n+    }\n \n-\tpublic void testArDelete() throws Exception {\n-\t\tfinal File output = new File(dir, \"bla.ar\");\n-\t\t\n-\t\t{\n-\t\t\t// create\n-\t\t\tfinal File file1 = getFile(\"test1.xml\");\n-\t\t\tfinal File file2 = getFile(\"test2.xml\");\n-\t\t\t\n-\t\t\tfinal OutputStream out = new FileOutputStream(output);\n-\t        final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out);\n-\t\t\tos.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length()));\n-\t\t\tIOUtils.copy(new FileInputStream(file1), os);\n-\t\t\tos.closeArchiveEntry();\n-\t\t\t\n-\t\t\tos.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length()));\n-\t\t\tIOUtils.copy(new FileInputStream(file2), os);\n-\t\t\tos.closeArchiveEntry();\n-\t\t\tos.close();\n-\t\t\tout.close();\n-\t\t}\n-\t\t\n-\t\tassertEquals(282, output.length());\n-\t\t\n-\t\tfinal File output2 = new File(dir, \"bla2.ar\");\t\t\n+    public void testArDelete() throws Exception {\n+        final File output = new File(dir, \"bla.ar\");\n \n-\t\tint copied = 0;\n-\t\tint deleted = 0;\n+        {\n+            // create\n+            final File file1 = getFile(\"test1.xml\");\n+            final File file2 = getFile(\"test2.xml\");\n \n-\t\t{\n-\t\t\t// remove all but one file\n+            final OutputStream out = new FileOutputStream(output);\n+            final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out);\n+            os.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length()));\n+            IOUtils.copy(new FileInputStream(file1), os);\n+            os.closeArchiveEntry();\n \n-\t\t\tfinal InputStream is = new FileInputStream(output);\n-\t\t\tfinal OutputStream os = new FileOutputStream(output2);\n-\t\t\tfinal ArchiveOutputStream aos = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", os);\n-\t\t\tfinal ArchiveInputStream ais = new ArchiveStreamFactory().createArchiveInputStream(new BufferedInputStream(is));\n-\t\t\twhile(true) {\n-\t\t\t\tfinal ArArchiveEntry entry = (ArArchiveEntry)ais.getNextEntry();\n-\t\t\t\tif (entry == null) {\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tif (\"test1.xml\".equals(entry.getName())) {\n-\t\t\t\t\taos.putArchiveEntry(entry);\n-\t\t\t\t\tIOUtils.copy(ais, aos);\n-\t\t\t\t\taos.closeArchiveEntry();\n-\t\t\t\t\tcopied++;\n-\t\t\t\t} else {\n-\t\t\t        IOUtils.copy(ais, new ByteArrayOutputStream());\n-\t\t\t        deleted++;\n-\t\t\t\t}\n-\t\t\t\n-\t\t\t}\n-\t\t\tais.close();\n-\t\t\taos.close();\n-\t\t\tis.close();\n-\t\t\tos.close();\t\t\t\n-\t\t}\n+            os.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length()));\n+            IOUtils.copy(new FileInputStream(file2), os);\n+            os.closeArchiveEntry();\n+            os.close();\n+            out.close();\n+        }\n \n-\t\tassertEquals(1, copied);\n-\t\tassertEquals(1, deleted);\n-\t\tassertEquals(144, output2.length());\n-\t\t\n-\t\tlong files = 0;\n-\t\tlong sum = 0;\n+        assertEquals(282, output.length());\n \n-\t\t{\n-\t\t\tfinal InputStream is = new FileInputStream(output2);\n-\t\t\tfinal ArchiveInputStream ais = new ArchiveStreamFactory().createArchiveInputStream(new BufferedInputStream(is));\n-\t\t\twhile(true) {\n-\t\t\t\tfinal ArArchiveEntry entry = (ArArchiveEntry)ais.getNextEntry();\n-\t\t\t\tif (entry == null) {\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t        IOUtils.copy(ais, new ByteArrayOutputStream());\n-\t\t        \n-\t\t        sum +=  entry.getLength();\n-\t\t        files++;\n-\t\t\t}\n-\t\t\tais.close();\n-\t\t\tis.close();\t\t\t\n-\t\t}\n+        final File output2 = new File(dir, \"bla2.ar\");\n \n-\t\tassertEquals(1, files);\n-\t\tassertEquals(76, sum);\n-\t\t\n-\t}\n+        int copied = 0;\n+        int deleted = 0;\n+\n+        {\n+            // remove all but one file\n+\n+            final InputStream is = new FileInputStream(output);\n+            final OutputStream os = new FileOutputStream(output2);\n+            final ArchiveOutputStream aos = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", os);\n+            final ArchiveInputStream ais = new ArchiveStreamFactory().createArchiveInputStream(new BufferedInputStream(is));\n+            while(true) {\n+                final ArArchiveEntry entry = (ArArchiveEntry)ais.getNextEntry();\n+                if (entry == null) {\n+                    break;\n+                }\n+\n+                if (\"test1.xml\".equals(entry.getName())) {\n+                    aos.putArchiveEntry(entry);\n+                    IOUtils.copy(ais, aos);\n+                    aos.closeArchiveEntry();\n+                    copied++;\n+                } else {\n+                    IOUtils.copy(ais, new ByteArrayOutputStream());\n+                    deleted++;\n+                }\n+\n+            }\n+            ais.close();\n+            aos.close();\n+            is.close();\n+            os.close();\n+        }\n+\n+        assertEquals(1, copied);\n+        assertEquals(1, deleted);\n+        assertEquals(144, output2.length());\n+\n+        long files = 0;\n+        long sum = 0;\n+\n+        {\n+            final InputStream is = new FileInputStream(output2);\n+            final ArchiveInputStream ais = new ArchiveStreamFactory().createArchiveInputStream(new BufferedInputStream(is));\n+            while(true) {\n+                final ArArchiveEntry entry = (ArArchiveEntry)ais.getNextEntry();\n+                if (entry == null) {\n+                    break;\n+                }\n+\n+                IOUtils.copy(ais, new ByteArrayOutputStream());\n+\n+                sum +=  entry.getLength();\n+                files++;\n+            }\n+            ais.close();\n+            is.close();\n+        }\n+\n+        assertEquals(1, files);\n+        assertEquals(76, sum);\n+\n+    }\n \n }", "timestamp": 1238424074, "metainfo": ""}