{"sha": "6117cc1f45661fb42037b95d4c04b541db85dbc9", "log": "Remove unnecessary override methods  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java\n         currentEntry = null;\n     }\n \n-    public int read() throws IOException {\n-        byte[] single = new byte[1];\n-        int num = read(single, 0, 1);\n-        return num == -1 ? -1 : single[0] & 0xff;\n-    }\n-\n-    public int read(byte[] b) throws IOException {\n-        return read(b, 0, b.length);\n-    }\n-\n     public int read(byte[] b, final int off, final int len) throws IOException {\n         int toRead = len;\n         if (currentEntry != null) {\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n     private static final int SMALL_BUFFER_SIZE = 256;\n     private static final int BUFFER_SIZE = 8 * 1024;\n     private static final int LARGE_BUFFER_SIZE = 32 * 1024;\n-    private static final int BYTE_MASK = 0xFF;\n \n     private boolean debug;\n     private boolean hasHitEOF;\n     private TarArchiveEntry currEntry;\n \n     /**\n-     * This contents of this array is not used at all in this class,\n-     * it is only here to avoid repeated object creation during calls\n-     * to the no-arg read method.\n-     */\n-    private final byte[] oneBuf;\n-\n-    /**\n      * Constructor for TarInputStream.\n      * @param is the input stream to use\n      */\n     public TarArchiveInputStream(InputStream is, int blockSize, int recordSize) {\n         this.buffer = new TarBuffer(is, blockSize, recordSize);\n         this.readBuf = null;\n-        this.oneBuf = new byte[1];\n         this.debug = false;\n         this.hasHitEOF = false;\n     }\n     }\n \n     /**\n-     * Reads a byte from the current tar archive entry.\n-     *\n-     * This method simply calls read( byte[], int, int ).\n-     *\n-     * @return The byte read, or -1 at EOF.\n-     * @throws IOException on error\n-     */\n-    public int read() throws IOException {\n-        int num = read(oneBuf, 0, 1);\n-        return num == -1 ? -1 : oneBuf[0] & BYTE_MASK;\n-    }\n-\n-    /**\n      * Reads bytes from the current tar archive entry.\n      *\n      * This method is aware of the boundaries of the current\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n     private final Inflater inf = new Inflater(true);\n     private final CRC32 crc = new CRC32();\n \n-    private final byte[] SINGLE = new byte[1];\n     private final byte[] buf = new byte[ZipArchiveOutputStream.BUFFER_SIZE];\n \n     private ZipArchiveEntry current = null;\n         }\n     }\n \n-    public int read() throws IOException {\n-        int num = read(SINGLE, 0, 1);\n-        return num == -1 ? -1 : SINGLE[0] & ZipArchiveOutputStream.BYTE_MASK;\n-    }\n-\n     public long skip(long value) throws IOException {\n         if (value >= 0) {\n             long skipped = 0;", "timestamp": 1238436706, "metainfo": ""}