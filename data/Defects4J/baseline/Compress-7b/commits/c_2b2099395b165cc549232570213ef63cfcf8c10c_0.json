{"sha": "2b2099395b165cc549232570213ef63cfcf8c10c", "log": "EFS in APPNOTE.TXT stands for 'Early Feature Specification' so our usage of it as 'use the general purpose field to signal UTF8' is wrong.  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n                             & ZipFile.NIBLET_MASK);\n \n         final int generalPurposeFlag = ZipShort.getValue(lfh, off);\n-        final boolean hasEFS = \n-            (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0;\n+        final boolean hasUTF8Flag = \n+            (generalPurposeFlag & ZipArchiveOutputStream.UFT8_NAMES_FLAG) != 0;\n         final ZipEncoding entryEncoding =\n-            hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n+            hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n         hasDataDescriptor = (generalPurposeFlag & 8) != 0;\n \n         off += SHORT;\n         readFully(extraData);\n         current.setExtra(extraData);\n \n-        if (!hasEFS && useUnicodeExtraFields) {\n+        if (!hasUTF8Flag && useUnicodeExtraFields) {\n             ZipUtil.setNameAndCommentFromExtraFields(current, fileName, null);\n         }\n         return current;\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n      */\n     static final String DEFAULT_ENCODING = ZipEncodingHelper.UTF8;\n \n-     /**\n+    /**\n      * General purpose flag, which indicates that filenames are\n      * written in utf-8.\n      */\n-    public static final int EFS_FLAG = 1 << 11;\n+    public static final int UFT8_NAMES_FLAG = 1 << 11;\n+\n+    /**\n+     * General purpose flag, which indicates that filenames are\n+     * written in utf-8.\n+     * @deprecated use {@link #UFT8_NAMES_FLAG} instead\n+     */\n+    public static final int EFS_FLAG = UFT8_NAMES_FLAG;\n \n     /**\n      * Current entry.\n     private final OutputStream out;\n \n     /**\n-     * whether to use the EFS flag when writing UTF-8 filenames or not.\n-     */\n-    private boolean useEFS = true; \n+     * whether to use the general purpose bit flag when writing UTF-8\n+     * filenames or not.\n+     */\n+    private boolean useUTF8Flag = true; \n \n     /**\n      * Whether to encode non-encodable file names as UTF-8.\n     public void setEncoding(final String encoding) {\n         this.encoding = encoding;\n         this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n-        useEFS &= ZipEncodingHelper.isUTF8(encoding);\n+        useUTF8Flag &= ZipEncodingHelper.isUTF8(encoding);\n     }\n \n     /**\n      * <p>Defaults to true.</p>\n      */\n     public void setUseLanguageEncodingFlag(boolean b) {\n-        useEFS = b && ZipEncodingHelper.isUTF8(encoding);\n+        useUTF8Flag = b && ZipEncodingHelper.isUTF8(encoding);\n     }\n \n     /**\n \n         // CheckStyle:MagicNumber OFF\n         int versionNeededToExtract = 10;\n-        int generalPurposeFlag = (useEFS || utfFallback) ? EFS_FLAG : 0;\n+        int generalPurposeFlag = (useUTF8Flag || utfFallback) ? UFT8_NAMES_FLAG : 0;\n         if (zipMethod == DEFLATED && raf == null) {\n             // requires version 2 as we are going to store length info\n             // in the data descriptor\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n         archive = new RandomAccessFile(f, \"r\");\n         boolean success = false;\n         try {\n-            Map entriesWithoutEFS = populateFromCentralDirectory();\n-            resolveLocalFileHeaderData(entriesWithoutEFS);\n+            Map entriesWithoutUTF8Flag = populateFromCentralDirectory();\n+            resolveLocalFileHeaderData(entriesWithoutUTF8Flag);\n             success = true;\n         } finally {\n             if (!success) {\n      */\n     private Map populateFromCentralDirectory()\n         throws IOException {\n-        HashMap noEFS = new HashMap();\n+        HashMap noUTF8Flag = new HashMap();\n \n         positionAtCentralDirectory();\n \n             off += SHORT; // skip version info\n \n             final int generalPurposeFlag = ZipShort.getValue(cfh, off);\n-            final boolean hasEFS = \n-                (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0;\n+            final boolean hasUTF8Flag = \n+                (generalPurposeFlag & ZipArchiveOutputStream.UFT8_NAMES_FLAG) != 0;\n             final ZipEncoding entryEncoding =\n-                hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n+                hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n \n             off += SHORT;\n \n             archive.readFully(signatureBytes);\n             sig = ZipLong.getValue(signatureBytes);\n \n-            if (!hasEFS && useUnicodeExtraFields) {\n-                noEFS.put(ze, new NameAndComment(fileName, comment));\n-            }\n-        }\n-        return noEFS;\n+            if (!hasUTF8Flag && useUnicodeExtraFields) {\n+                noUTF8Flag.put(ze, new NameAndComment(fileName, comment));\n+            }\n+        }\n+        return noUTF8Flag;\n     }\n \n     private static final int MIN_EOCD_SIZE =\n      * <p>Also records the offsets for the data to read from the\n      * entries.</p>\n      */\n-    private void resolveLocalFileHeaderData(Map entriesWithoutEFS)\n+    private void resolveLocalFileHeaderData(Map entriesWithoutUTF8Flag)\n         throws IOException {\n         Enumeration e = getEntries();\n         while (e.hasMoreElements()) {\n             offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                 + SHORT + SHORT + fileNameLen + extraFieldLen;\n \n-            if (entriesWithoutEFS.containsKey(ze)) {\n+            if (entriesWithoutUTF8Flag.containsKey(ze)) {\n                 String orig = ze.getName();\n-                NameAndComment nc = (NameAndComment) entriesWithoutEFS.get(ze);\n+                NameAndComment nc = (NameAndComment) entriesWithoutUTF8Flag.get(ze);\n                 ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,\n                                                          nc.comment);\n                 if (!orig.equals(ze.getName())) {", "timestamp": 1266568883, "metainfo": ""}