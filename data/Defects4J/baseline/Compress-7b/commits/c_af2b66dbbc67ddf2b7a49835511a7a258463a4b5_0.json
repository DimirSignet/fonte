{"sha": "af2b66dbbc67ddf2b7a49835511a7a258463a4b5", "log": "merge ZipEntry and ZipArchiveEntry into a single class  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java\n import java.security.cert.Certificate;\n import java.util.jar.Attributes;\n import java.util.jar.JarEntry;\n-import java.util.zip.ZipEntry;\n import java.util.zip.ZipException;\n \n import org.apache.commons.compress.archivers.ArchiveEntry;\n-import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n+import org.apache.commons.compress.archivers.zip.ZipEntry;\n \n-public class JarArchiveEntry extends ZipArchiveEntry implements ArchiveEntry {\n+public class JarArchiveEntry extends ZipEntry implements ArchiveEntry {\n \n \tprivate Attributes manifestAttributes = null;\n \tprivate Certificate[] certificates = null; \n \t\n-\tpublic JarArchiveEntry(ZipEntry entry) throws ZipException {\n+\tpublic JarArchiveEntry(java.util.zip.ZipEntry entry) throws ZipException {\n \t\tsuper(entry);\n \t}\n \n \t\tsuper(name);\n \t}\n \n-\tpublic JarArchiveEntry(ZipArchiveEntry entry) throws ZipException {\n+\tpublic JarArchiveEntry(ZipEntry entry) throws ZipException {\n \t\tsuper(entry);\n \t}\n \n--- a/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java\n import java.io.InputStream;\n \n import org.apache.commons.compress.archivers.ArchiveEntry;\n-import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n+import org.apache.commons.compress.archivers.zip.ZipEntry;\n import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;\n \n public class JarArchiveInputStream extends ZipArchiveInputStream {\n     }\n         \n     public ArchiveEntry getNextEntry() throws IOException {\n-        ZipArchiveEntry entry = (ZipArchiveEntry)super.getNextEntry();\n+        ZipEntry entry = (ZipEntry)super.getNextEntry();\n         if(entry == null) {\n             return null;\n         } else {\n--- a/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java\n import java.io.OutputStream;\n \n import org.apache.commons.compress.archivers.ArchiveEntry;\n-import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n+import org.apache.commons.compress.archivers.zip.ZipEntry;\n import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;\n \n public class JarArchiveOutputStream extends ZipArchiveOutputStream {\n \n \tpublic void putArchiveEntry(ArchiveEntry entry) throws IOException {\n \t\t// TODO special jar stuff\n-\t\tsuper.putArchiveEntry((ZipArchiveEntry) entry);\n+\t\tsuper.putArchiveEntry((ZipEntry) entry);\n \t}\n }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n         if(entry == null) {\n             return null;\n         }\n-        return (ArchiveEntry)new ZipArchiveEntry(entry);\n+        return (ArchiveEntry)new ZipEntry(entry);\n     }\n \n     public int read(byte[] b, int off, int len) throws IOException {\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n     }\n     \n     public void putArchiveEntry(ArchiveEntry entry) throws IOException {\n-        zipOut.putNextEntry((ZipArchiveEntry) entry);\n+        zipOut.putNextEntry((ZipEntry) entry);\n     }\n \n     public void close() throws IOException {\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java\n \n import java.util.LinkedHashMap;\n import java.util.zip.ZipException;\n+import org.apache.commons.compress.archivers.ArchiveEntry;\n \n /**\n  * Extension that adds better handling of extra fields and provides\n  * access to the internal and external file attributes.\n  *\n  */\n-public class ZipEntry extends java.util.zip.ZipEntry implements Cloneable {\n+public class ZipEntry extends java.util.zip.ZipEntry\n+    implements ArchiveEntry, Cloneable {\n \n     public static final int PLATFORM_UNIX = 3;\n     public static final int PLATFORM_FAT  = 0;\n--- a/src/test/java/org/apache/commons/compress/archivers/JarTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/JarTestCase.java\n import java.io.InputStream;\n import java.io.OutputStream;\n \n-import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n+import org.apache.commons.compress.archivers.zip.ZipEntry;\n import org.apache.commons.compress.utils.IOUtils;\n \n import org.apache.commons.compress.AbstractTestCase;\n         \n         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"jar\", out);\n \n-        os.putArchiveEntry(new ZipArchiveEntry(\"testdata/test1.xml\"));\n+        os.putArchiveEntry(new ZipEntry(\"testdata/test1.xml\"));\n         IOUtils.copy(new FileInputStream(file1), os);\n         os.closeArchiveEntry();\n         \n-        os.putArchiveEntry(new ZipArchiveEntry(\"testdata/test2.xml\"));\n+        os.putArchiveEntry(new ZipEntry(\"testdata/test2.xml\"));\n         IOUtils.copy(new FileInputStream(file2), os);\n         os.closeArchiveEntry();\n \n         final InputStream is = new FileInputStream(input);\n         final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is);\n         \n-        ZipArchiveEntry entry = (ZipArchiveEntry)in.getNextEntry();\n+        ZipEntry entry = (ZipEntry)in.getNextEntry();\n         File o = new File(dir, entry.getName());\n         o.getParentFile().mkdirs();\n         OutputStream out = new FileOutputStream(o);\n         IOUtils.copy(in, out);\n         out.close();\n         \n-        entry = (ZipArchiveEntry)in.getNextEntry();\n+        entry = (ZipEntry)in.getNextEntry();\n         o = new File(dir, entry.getName());\n         o.getParentFile().mkdirs();\n         out = new FileOutputStream(o);\n         IOUtils.copy(in, out);\n         out.close();\n         \n-        entry = (ZipArchiveEntry)in.getNextEntry();\n+        entry = (ZipEntry)in.getNextEntry();\n         o = new File(dir, entry.getName());\n         o.getParentFile().mkdirs();\n         out = new FileOutputStream(o);\n--- a/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n import java.io.InputStream;\n import java.io.OutputStream;\n \n-import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n+import org.apache.commons.compress.archivers.zip.ZipEntry;\n import org.apache.commons.compress.utils.IOUtils;\n \n import org.apache.commons.compress.AbstractTestCase;\n         \n         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", out);\n \n-        os.putArchiveEntry(new ZipArchiveEntry(\"testdata/test1.xml\"));\n+        os.putArchiveEntry(new ZipEntry(\"testdata/test1.xml\"));\n         IOUtils.copy(new FileInputStream(file1), os);\n         os.closeArchiveEntry();\n         \n-        os.putArchiveEntry(new ZipArchiveEntry(\"testdata/test2.xml\"));\n+        os.putArchiveEntry(new ZipEntry(\"testdata/test2.xml\"));\n         IOUtils.copy(new FileInputStream(file2), os);\n         os.closeArchiveEntry();\n         \n         final InputStream is = new FileInputStream(input);\n         final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n  \n-        final ZipArchiveEntry entry = (ZipArchiveEntry)in.getNextEntry();\n+        final ZipEntry entry = (ZipEntry)in.getNextEntry();\n         final OutputStream out = new FileOutputStream(new File(dir, entry.getName()));\n         \n         IOUtils.copy(in, out);\n--- a/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java\n import org.apache.commons.compress.archivers.ar.ArArchiveEntry;\n import org.apache.commons.compress.archivers.jar.JarArchiveEntry;\n import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n-import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n+import org.apache.commons.compress.archivers.zip.ZipEntry;\n \n public final class ChangeSetTestCase extends AbstractTestCase {\n \n \t\t\t\n \t\t\t\n \t\t\tfinal File file1 = getFile(\"test.txt\");\n-\t\t\tZipArchiveEntry entry = new ZipArchiveEntry(\"testdata/test.txt\");\n+\t\t\tZipEntry entry = new ZipEntry(\"testdata/test.txt\");\n \t        changes.add(entry, new FileInputStream(file1));\n \t\t\t\n \t\t\tfinal File input = getFile(\"bla.zip\");", "timestamp": 1233939741, "metainfo": ""}