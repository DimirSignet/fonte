{"sha": "c3a330520888c81eb87482b1e15c6cb6651b620d", "log": "fix whitespace  ", "commit": "\n--- a/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n \n public abstract class AbstractTestCase extends TestCase {\n \n-\tprotected File dir;\n-\t\n-\tprotected void setUp() throws Exception {\n-\t\tdir = File.createTempFile(\"dir\", \"\");\n-\t\tdir.delete();\n-\t\tdir.mkdir();\n+    protected File dir;\n \n-\t\taddURL(new File(\"src/test/resources\").toURL());\n-\t}\n+    protected void setUp() throws Exception {\n+        dir = File.createTempFile(\"dir\", \"\");\n+        dir.delete();\n+        dir.mkdir();\n \n-\tprotected File getFile( String path ) {\n-\t\treturn new File(getClass().getClassLoader().getResource(path).getFile());\t\t\n-\t}\n-\t\n-\tprotected void tearDown() throws Exception {\n-\t\tdir.delete();\n-\t\tdir = null;\n-\t}\n+        addURL(new File(\"src/test/resources\").toURL());\n+    }\n \n-\t/**\n-\t * Adds a URL to the classpath. This method is necessary when running \n-\t * junit tests from within eclipse.\n-\t * @param url the url to add\n-\t * @throws Exception if an error occurs\n-\t */\n-\tpublic void addURL(URL url) throws Exception {\n-\t\tURLClassLoader classLoader = (URLClassLoader) ClassLoader.getSystemClassLoader();\n-\t\tClass clazz = URLClassLoader.class;\n+    protected File getFile( String path ) {\n+        return new File(getClass().getClassLoader().getResource(path).getFile());\n+    }\n \n-\t\tMethod method= clazz.getDeclaredMethod(\"addURL\", new Class[] { URL.class });\n-\t\tmethod.setAccessible(true);\n-\t\tmethod.invoke(classLoader, new Object[] { url });\n-\t}\n+    protected void tearDown() throws Exception {\n+        dir.delete();\n+        dir = null;\n+    }\n \n-\t/**\n-\t * Creates an archive of 5 textbased files in several directories.\n-\t * The archivername is the factory identifier for the archiver, for example\n-\t * zip, tar, cpio, jar, ar.\n-\t * The archive is created as a temp file.\n-\t * \n-\t * The archive contains the following files:\n-\t * <ul>\n-\t * <li>testdata/test1.xml</li>\n-\t * <li>testdata/test2.xml</li>\n-\t * <li>test/test3.xml</li>\n-\t * <li>bla/test4.xml</li>\n-\t * <li>test.txt</li>\n-\t * <li>something/bla</li>\n-\t * <li>test with spaces.txt</li>\n-\t * </ul>\n-\t * \n-\t * @param archivename the identifier of this archive\n-\t * @return the newly created file\n-\t * @throws Exception in case something goes wrong\n-\t */\n-\tprotected File createArchive(String archivename) throws Exception {\n-\t\tArchiveOutputStream out = null;\n-\t\tArchiveInputStream ais = null;\n-\t\ttry {\n-\t\t\tFile temp = File.createTempFile(\"test\", \".\" + archivename);\n-\t\t\t\n-\t\t\tfinal OutputStream stream = new FileOutputStream(temp);\n-\t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(archivename, stream);\n-\t\t\t\n-\t\t\tfinal File file1 = getFile(\"test1.xml\");\n-\t\t\tfinal File file2 = getFile(\"test2.xml\");\n-\t\t\tfinal File file3 = getFile(\"test3.xml\");\n-\t\t\tfinal File file4 = getFile(\"test4.xml\");\n-\t\t\tfinal File file5 = getFile(\"test.txt\");\n-\t\t\tfinal File file6 = getFile(\"test with spaces.txt\");\n-\t\t\t\n-\t\t\tZipArchiveEntry entry = new ZipArchiveEntry(\"testdata/test1.xml\");\n-\t\t\tentry.setSize(file1.length());\n-\t        out.putArchiveEntry(entry);\n-\t        IOUtils.copy(new FileInputStream(file1), out);\n-\t        out.closeArchiveEntry();\n-\t        \n-\t        out.putArchiveEntry(new ZipArchiveEntry(\"testdata/test2.xml\"));\n-\t        IOUtils.copy(new FileInputStream(file2), out);\n-\t        out.closeArchiveEntry();\n+    /**\n+     * Adds a URL to the classpath. This method is necessary when running \n+     * junit tests from within eclipse.\n+     * @param url the url to add\n+     * @throws Exception if an error occurs\n+     */\n+    public void addURL(URL url) throws Exception {\n+        URLClassLoader classLoader = (URLClassLoader) ClassLoader.getSystemClassLoader();\n+        Class clazz = URLClassLoader.class;\n \n-\t        out.putArchiveEntry(new ZipArchiveEntry(\"test/test3.xml\"));\n-\t        IOUtils.copy(new FileInputStream(file3), out);\n-\t        out.closeArchiveEntry();\n-\t        \n-\t        out.putArchiveEntry(new ZipArchiveEntry(\"bla/test4.xml\"));\n-\t        IOUtils.copy(new FileInputStream(file4), out);\n-\t        out.closeArchiveEntry();\n-\t        \n-\t        out.putArchiveEntry(new ZipArchiveEntry(\"test.txt\"));\n-\t        IOUtils.copy(new FileInputStream(file5), out);\n-\t        out.closeArchiveEntry();\n-\t        \n-\t        out.putArchiveEntry(new ZipArchiveEntry(\"something/bla\"));\n-\t        IOUtils.copy(new FileInputStream(file6), out);\n-\t        out.closeArchiveEntry();\n-\t        \n-\t        out.putArchiveEntry(new ZipArchiveEntry(\"test with spaces.txt\"));\n-\t        IOUtils.copy(new FileInputStream(file6), out);\n-\t        out.closeArchiveEntry();\n-\t        \n-\t     \treturn temp;\n-\t\t} finally {\n-\t\t\tif(out != null) out.close();\n-\t\t\tif(ais != null) ais.close();\n-\t\t}\n-\t}\n-\t\n-\t/**\n-\t * Checks if an archive contains all expected files.\n-\t * \n-\t * @param archive \n-\t * \t\t\t\tthe archive to check\n-\t * @param expected \n-\t * \t\t\t\ta list with expected string filenames\n-\t * @throws Exception\n-\t */\n-\tprotected void checkArchiveContent(File archive, List expected) \n-\t \tthrows Exception {\n-\t    final InputStream is = new FileInputStream(archive);\n-\t    final BufferedInputStream buf = new BufferedInputStream(is);\n-\t    final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(buf);\n-\t \n-\t    File result = File.createTempFile(\"dir-result\", \"\");\n-\t    result.delete();\n-\t    result.mkdir();\n-\t\t\t\n-\t    ArchiveEntry entry = null;\n-\t    while((entry = (ArchiveEntry)in.getNextEntry()) != null) {\n-\t      \tFile outfile = new File(result.getCanonicalPath() + \"/result/\" + entry.getName());\n-\t       \toutfile.getParentFile().mkdirs();\n-\t       \tOutputStream out = new FileOutputStream(outfile);\n-\t\t    if(!expected.remove(entry.getName())) {\n-\t\t       \tfail(\"unexpected entry: \" + entry.getName());\n-\t\t    } \n-\t\t    IOUtils.copy(in, out);\n-\t\t    out.close();\n-\t    }\n-\t    in.close();\n-\t    assertEquals(expected.size(), 0);\n-\t}\n+        Method method= clazz.getDeclaredMethod(\"addURL\", new Class[] { URL.class });\n+        method.setAccessible(true);\n+        method.invoke(classLoader, new Object[] { url });\n+    }\n+\n+    /**\n+     * Creates an archive of 5 textbased files in several directories.\n+     * The archivername is the factory identifier for the archiver, for example\n+     * zip, tar, cpio, jar, ar.\n+     * The archive is created as a temp file.\n+     * \n+     * The archive contains the following files:\n+     * <ul>\n+     * <li>testdata/test1.xml</li>\n+     * <li>testdata/test2.xml</li>\n+     * <li>test/test3.xml</li>\n+     * <li>bla/test4.xml</li>\n+     * <li>test.txt</li>\n+     * <li>something/bla</li>\n+     * <li>test with spaces.txt</li>\n+     * </ul>\n+     * \n+     * @param archivename the identifier of this archive\n+     * @return the newly created file\n+     * @throws Exception in case something goes wrong\n+     */\n+    protected File createArchive(String archivename) throws Exception {\n+        ArchiveOutputStream out = null;\n+        ArchiveInputStream ais = null;\n+        try {\n+            File temp = File.createTempFile(\"test\", \".\" + archivename);\n+\n+            final OutputStream stream = new FileOutputStream(temp);\n+            out = new ArchiveStreamFactory().createArchiveOutputStream(archivename, stream);\n+\n+            final File file1 = getFile(\"test1.xml\");\n+            final File file2 = getFile(\"test2.xml\");\n+            final File file3 = getFile(\"test3.xml\");\n+            final File file4 = getFile(\"test4.xml\");\n+            final File file5 = getFile(\"test.txt\");\n+            final File file6 = getFile(\"test with spaces.txt\");\n+\n+            ZipArchiveEntry entry = new ZipArchiveEntry(\"testdata/test1.xml\");\n+            entry.setSize(file1.length());\n+            out.putArchiveEntry(entry);\n+            IOUtils.copy(new FileInputStream(file1), out);\n+            out.closeArchiveEntry();\n+\n+            out.putArchiveEntry(new ZipArchiveEntry(\"testdata/test2.xml\"));\n+            IOUtils.copy(new FileInputStream(file2), out);\n+            out.closeArchiveEntry();\n+\n+            out.putArchiveEntry(new ZipArchiveEntry(\"test/test3.xml\"));\n+            IOUtils.copy(new FileInputStream(file3), out);\n+            out.closeArchiveEntry();\n+\n+            out.putArchiveEntry(new ZipArchiveEntry(\"bla/test4.xml\"));\n+            IOUtils.copy(new FileInputStream(file4), out);\n+            out.closeArchiveEntry();\n+\n+            out.putArchiveEntry(new ZipArchiveEntry(\"test.txt\"));\n+            IOUtils.copy(new FileInputStream(file5), out);\n+            out.closeArchiveEntry();\n+\n+            out.putArchiveEntry(new ZipArchiveEntry(\"something/bla\"));\n+            IOUtils.copy(new FileInputStream(file6), out);\n+            out.closeArchiveEntry();\n+\n+            out.putArchiveEntry(new ZipArchiveEntry(\"test with spaces.txt\"));\n+            IOUtils.copy(new FileInputStream(file6), out);\n+            out.closeArchiveEntry();\n+\n+            return temp;\n+        } finally {\n+            if(out != null) out.close();\n+            if(ais != null) ais.close();\n+        }\n+    }\n+\n+    /**\n+     * Checks if an archive contains all expected files.\n+     * \n+     * @param archive \n+     *                              the archive to check\n+     * @param expected \n+     *                              a list with expected string filenames\n+     * @throws Exception\n+     */\n+    protected void checkArchiveContent(File archive, List expected) \n+        throws Exception {\n+        final InputStream is = new FileInputStream(archive);\n+        final BufferedInputStream buf = new BufferedInputStream(is);\n+        final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(buf);\n+\n+        File result = File.createTempFile(\"dir-result\", \"\");\n+        result.delete();\n+        result.mkdir();\n+\n+        ArchiveEntry entry = null;\n+        while((entry = (ArchiveEntry)in.getNextEntry()) != null) {\n+            File outfile = new File(result.getCanonicalPath() + \"/result/\" + entry.getName());\n+            outfile.getParentFile().mkdirs();\n+            OutputStream out = new FileOutputStream(outfile);\n+            if(!expected.remove(entry.getName())) {\n+                fail(\"unexpected entry: \" + entry.getName());\n+            } \n+            IOUtils.copy(in, out);\n+            out.close();\n+        }\n+        in.close();\n+        assertEquals(expected.size(), 0);\n+    }\n }\n--- a/src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java\n import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;\n \n public final class DetectArchiverTestCase extends AbstractTestCase {\n-\tpublic void testDetection() throws Exception {\n-\t\tfinal ArchiveStreamFactory factory = new ArchiveStreamFactory();\n+    public void testDetection() throws Exception {\n+        final ArchiveStreamFactory factory = new ArchiveStreamFactory();\n \n-\t\tfinal ArchiveInputStream ar = factory.createArchiveInputStream(\n-\t\t\t\tnew BufferedInputStream(new FileInputStream(\n-\t\t\t\t\t\tnew File(getClass().getClassLoader().getResource(\"bla.ar\").getFile())))); \n-\t\tassertNotNull(ar);\n-\t\tassertTrue(ar instanceof ArArchiveInputStream);\n+        final ArchiveInputStream ar = factory.createArchiveInputStream(\n+                                                                       new BufferedInputStream(new FileInputStream(\n+                                                                                                                   new File(getClass().getClassLoader().getResource(\"bla.ar\").getFile())))); \n+        assertNotNull(ar);\n+        assertTrue(ar instanceof ArArchiveInputStream);\n \n-\t\tfinal ArchiveInputStream tar = factory.createArchiveInputStream(\n-\t\t\t\tnew BufferedInputStream(new FileInputStream(\n-\t\t\t\t\t\tnew File(getClass().getClassLoader().getResource(\"bla.tar\").getFile()))));\n-\t\tassertNotNull(tar);\n-\t\tassertTrue(tar instanceof TarArchiveInputStream);\n+        final ArchiveInputStream tar = factory.createArchiveInputStream(\n+                                                                        new BufferedInputStream(new FileInputStream(\n+                                                                                                                    new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile()))));\n+        assertNotNull(tar);\n+        assertTrue(tar instanceof TarArchiveInputStream);\n \n-\t\tfinal ArchiveInputStream zip = factory.createArchiveInputStream(\n-\t\t\t\tnew BufferedInputStream(new FileInputStream(\n-\t\t\t\t\t\tnew File(getClass().getClassLoader().getResource(\"bla.zip\").getFile()))));\n-\t\tassertNotNull(zip);\n-\t\tassertTrue(zip instanceof ZipArchiveInputStream);\n+        final ArchiveInputStream zip = factory.createArchiveInputStream(\n+                                                                        new BufferedInputStream(new FileInputStream(\n+                                                                                                                    new File(getClass().getClassLoader().getResource(\"bla.zip\").getFile()))));\n+        assertNotNull(zip);\n+        assertTrue(zip instanceof ZipArchiveInputStream);\n \n-\t\tfinal ArchiveInputStream jar = factory.createArchiveInputStream(\n-\t\t\t\tnew BufferedInputStream(new FileInputStream(\n-\t\t\t\t\t\tnew File(getClass().getClassLoader().getResource(\"bla.jar\").getFile()))));\n-\t\tassertNotNull(jar);\n-\t\tassertTrue(jar instanceof JarArchiveInputStream);\n+        final ArchiveInputStream jar = factory.createArchiveInputStream(\n+                                                                        new BufferedInputStream(new FileInputStream(\n+                                                                                                                    new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile()))));\n+        assertNotNull(jar);\n+        assertTrue(jar instanceof JarArchiveInputStream);\n \n-\t\tfinal ArchiveInputStream cpio = factory.createArchiveInputStream(\n-\t\t\t\tnew BufferedInputStream(new FileInputStream(\n-\t\t\t\t\t\tnew File(getClass().getClassLoader().getResource(\"bla.cpio\").getFile()))));\n-\t\tassertNotNull(cpio);\n-\t\tassertTrue(cpio instanceof CpioArchiveInputStream);\n+        final ArchiveInputStream cpio = factory.createArchiveInputStream(\n+                                                                         new BufferedInputStream(new FileInputStream(\n+                                                                                                                     new File(getClass().getClassLoader().getResource(\"bla.cpio\").getFile()))));\n+        assertNotNull(cpio);\n+        assertTrue(cpio instanceof CpioArchiveInputStream);\n \n-//\t\tfinal ArchiveInputStream tgz = factory.createArchiveInputStream(\n-//\t\t\t\tnew BufferedInputStream(new FileInputStream(\n-//\t\t\t\t\t\tnew File(getClass().getClassLoader().getResource(\"bla.tgz\").getFile()))));\n-//\t\tassertTrue(tgz instanceof TarArchiveInputStream);\n-\t\t\n-\t}\n+        //              final ArchiveInputStream tgz = factory.createArchiveInputStream(\n+        //                              new BufferedInputStream(new FileInputStream(\n+        //                                              new File(getClass().getClassLoader().getResource(\"bla.tgz\").getFile()))));\n+        //              assertTrue(tgz instanceof TarArchiveInputStream);\n+\n+    }\n \n }\n--- a/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n import org.apache.commons.compress.utils.IOUtils;\n \n public final class ZipTestCase extends AbstractTestCase {\n-\t/**\n-\t * Archives 2 files and unarchives it again. If the file length of result\n-\t * and source is the same, it looks like the operations have worked\n-\t * @throws Exception\n-\t */\n-\tpublic void testZipArchiveCreation() throws Exception {\n-\t\t// Archive\n-\t\tfinal File output = new File(dir, \"bla.zip\");\n-\t\tfinal File file1 = getFile(\"test1.xml\");\n-\t\tfinal File file2 = getFile(\"test2.xml\");\n+    /**\n+     * Archives 2 files and unarchives it again. If the file length of result\n+     * and source is the same, it looks like the operations have worked\n+     * @throws Exception\n+     */\n+    public void testZipArchiveCreation() throws Exception {\n+        // Archive\n+        final File output = new File(dir, \"bla.zip\");\n+        final File file1 = getFile(\"test1.xml\");\n+        final File file2 = getFile(\"test2.xml\");\n \n-\t\t{\n-\t\t\tfinal OutputStream out = new FileOutputStream(output);\n-\t        final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", out);\n-\t\n-\t        os.putArchiveEntry(new ZipArchiveEntry(\"testdata/test1.xml\"));\n-\t        IOUtils.copy(new FileInputStream(file1), os);\n-\t        os.closeArchiveEntry();\n-\t        \n-\t        os.putArchiveEntry(new ZipArchiveEntry(\"testdata/test2.xml\"));\n-\t        IOUtils.copy(new FileInputStream(file2), os);\n-\t        os.closeArchiveEntry();\n-\t        os.close();\n-\t\t}\n-\t\t\n-\t\t// Unarchive the same\n-\t\tList results = new ArrayList();\n-\t\t\n         {\n-\t        final InputStream is = new FileInputStream(output);\n-\t        final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n-\t \n-\t        File result = File.createTempFile(\"dir-result\", \"\");\n-\t        result.delete();\n-\t        result.mkdir();\n-\t\t\t\n-\t        ZipArchiveEntry entry = null;\n-\t        while((entry = (ZipArchiveEntry)in.getNextEntry()) != null) {\n-\t        \tFile outfile = new File(result.getCanonicalPath() + \"/result/\" + entry.getName());\n-\t        \toutfile.getParentFile().mkdirs();\n-\t        \tOutputStream out = new FileOutputStream(outfile);\n-\t\t        IOUtils.copy(in, out);\n-\t\t        out.close();\n-\t\t        results.add(outfile);\n-\t        }\n-\t        in.close();\n+            final OutputStream out = new FileOutputStream(output);\n+            final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", out);\n+\n+            os.putArchiveEntry(new ZipArchiveEntry(\"testdata/test1.xml\"));\n+            IOUtils.copy(new FileInputStream(file1), os);\n+            os.closeArchiveEntry();\n+\n+            os.putArchiveEntry(new ZipArchiveEntry(\"testdata/test2.xml\"));\n+            IOUtils.copy(new FileInputStream(file2), os);\n+            os.closeArchiveEntry();\n+            os.close();\n         }\n-        \n+\n+        // Unarchive the same\n+        List results = new ArrayList();\n+\n+        {\n+            final InputStream is = new FileInputStream(output);\n+            final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n+\n+            File result = File.createTempFile(\"dir-result\", \"\");\n+            result.delete();\n+            result.mkdir();\n+\n+            ZipArchiveEntry entry = null;\n+            while((entry = (ZipArchiveEntry)in.getNextEntry()) != null) {\n+                File outfile = new File(result.getCanonicalPath() + \"/result/\" + entry.getName());\n+                outfile.getParentFile().mkdirs();\n+                OutputStream out = new FileOutputStream(outfile);\n+                IOUtils.copy(in, out);\n+                out.close();\n+                results.add(outfile);\n+            }\n+            in.close();\n+        }\n+\n         assertEquals(results.size(), 2);\n         File result = (File)results.get(0);\n         assertEquals(file1.length(), result.length());\n         result = (File)results.get(1);\n         assertEquals(file2.length(), result.length());\n     }\n-\t\n+\n     /**\n      * Simple unarchive test. Asserts nothing.\n      * @throws Exception\n      */\n     public void testZipUnarchive() throws Exception {\n-\t\tfinal File input = getFile(\"bla.zip\");\n+        final File input = getFile(\"bla.zip\");\n         final InputStream is = new FileInputStream(input);\n         final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n         final ZipArchiveEntry entry = (ZipArchiveEntry)in.getNextEntry();\n--- a/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java\n  * Checks several ChangeSet business logics.\n  */\n public final class ChangeSetTestCase extends AbstractTestCase {\n-\t/**\n-\t * Tries to delete the folder \"bla\" from a zip file.\n-\t * This should result in the deletion of bla/*, which \n-\t * actually means bla/test4.xml should be removed from this zipfile.\n-\t * The file something/bla (without ending, named like the folder) should\n-\t * not be deleted.\n-\t * \n-\t * @throws Exception\n-\t */\n-\tpublic void XtestDeleteDir() throws Exception {\n-\t\tFile input = this.createArchive(\"zip\");\n-\t\t\n-\t\tArchiveOutputStream out = null;\n-\t\tArchiveInputStream ais = null;\n-\t\tFile result = File.createTempFile(\"test\", \".zip\");\n-\t\ttry {\n-\t\t\t\n-\t\t\tfinal InputStream is = new FileInputStream(input);\n-\t\t\tais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n-\t\t\t\n-\t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result));\n-\n-\t\t\tChangeSet changes = new ChangeSet();\n-\t\t\tchanges.delete(\"bla\");\n-\t\t\tchanges.perform(ais, out);\n-\t\t\t\n-\t\t} finally {\n-\t\t\tif(out != null) out.close();\n-\t\t\tif(ais != null) ais.close();\n-\t\t}\n-\t\t\n-\t\tList expected = new ArrayList();\n-\t\texpected.add(\"testdata/test1.xml\");\n-\t\texpected.add(\"testdata/test2.xml\");\n-\t\texpected.add(\"test/test3.xml\");\n-\t\texpected.add(\"test.txt\");\n-\t\texpected.add(\"something/bla\");\n-\t\texpected.add(\"test with spaces.txt\");\n-\t\t\n-\t\tthis.checkArchiveContent(result, expected);\n-\t}\n-\t\n-\t/**\n-\t * Tries to delete a directory with a file and adds \n-\t * a new directory with a new file and with the same name.\n+    /**\n+     * Tries to delete the folder \"bla\" from a zip file.\n+     * This should result in the deletion of bla/*, which \n+     * actually means bla/test4.xml should be removed from this zipfile.\n+     * The file something/bla (without ending, named like the folder) should\n+     * not be deleted.\n+     * \n+     * @throws Exception\n+     */\n+    public void XtestDeleteDir() throws Exception {\n+        File input = this.createArchive(\"zip\");\n+\n+        ArchiveOutputStream out = null;\n+        ArchiveInputStream ais = null;\n+        File result = File.createTempFile(\"test\", \".zip\");\n+        try {\n+\n+            final InputStream is = new FileInputStream(input);\n+            ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n+\n+            out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result));\n+\n+            ChangeSet changes = new ChangeSet();\n+            changes.delete(\"bla\");\n+            changes.perform(ais, out);\n+\n+        } finally {\n+            if(out != null) out.close();\n+            if(ais != null) ais.close();\n+        }\n+\n+        List expected = new ArrayList();\n+        expected.add(\"testdata/test1.xml\");\n+        expected.add(\"testdata/test2.xml\");\n+        expected.add(\"test/test3.xml\");\n+        expected.add(\"test.txt\");\n+        expected.add(\"something/bla\");\n+        expected.add(\"test with spaces.txt\");\n+\n+        this.checkArchiveContent(result, expected);\n+    }\n+\n+    /**\n+     * Tries to delete a directory with a file and adds \n+     * a new directory with a new file and with the same name.\n      * Should delete dir1/* and add dir1/test.txt at the end\n      * \n-\t * @throws Exception\n-\t */\n-\tpublic void XtestDeletePlusAdd() throws Exception {\n-\t\tFile input = this.createArchive(\"zip\");\n-\t\t\n-\t\tArchiveOutputStream out = null;\n-\t\tArchiveInputStream ais = null;\n-\t\tFile result = File.createTempFile(\"test\", \".zip\");\n-\t\ttry {\n-\t\t\t\n-\t\t\tfinal InputStream is = new FileInputStream(input);\n-\t\t\tais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n-\t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result));\n-\n-\t\t\tChangeSet changes = new ChangeSet();\n-\t\t\tchanges.delete(\"bla\");\n-\t\t\t\n-\t\t\t// Add a file\n-\t\t\tfinal File file1 = getFile(\"test.txt\");\n-\t\t\tArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\");\n-\t\t\tchanges.add(entry, new FileInputStream(file1));\n-\n-\t\t\tchanges.perform(ais, out);\n-\t\t\t\n-\t\t} finally {\n-\t\t\tif(out != null) out.close();\n-\t\t\tif(ais != null) ais.close();\n-\t\t}\n-\t\t\n-\t\tList expected = new ArrayList();\n-\t\texpected.add(\"testdata/test1.xml\");\n-\t\texpected.add(\"testdata/test2.xml\");\n-\t\texpected.add(\"test/test3.xml\");\n-\t\texpected.add(\"test.txt\");\n-\t\texpected.add(\"something/bla\");\n-\t\texpected.add(\"bla/test.txt\");\n-\t\texpected.add(\"test with spaces.txt\");\n-\t\t\n-\t\tthis.checkArchiveContent(result, expected);\n-\t}\n-\t\n-\t/**\n-\t * Adds a file to a zip archive. Deletes an other file.\n-\t * @throws Exception\n-\t */\n-\tpublic void testDeleteFromAndAddToZip() throws Exception {\n-\t\tFile input = this.createArchive(\"zip\");\n-\t\t\n-\t\tArchiveOutputStream out = null;\n-\t\tArchiveInputStream ais = null;\n-\t\tFile result = File.createTempFile(\"test\", \".zip\");\n-\t\ttry {\n-\t\t\t\n-\t\t\tfinal InputStream is = new FileInputStream(input);\n-\t\t\tais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n-\t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result));\n-\n-\t\t\tChangeSet changes = new ChangeSet();\n-\t\t\t\n-\t\t\tfinal File file1 = getFile(\"test.txt\");\n-\t\t\tArchiveEntry entry = new ZipArchiveEntry(\"blub/test.txt\");\n-\t\t\tchanges.add(entry, new FileInputStream(file1));\n-\t\t\t\n-\t\t\tchanges.delete(\"testdata/test1.xml\");\n-\t\t\t\n-\t\t\tchanges.perform(ais, out);\n-\t\t\t\n-\t\t} finally {\n-\t\t\tif(out != null) out.close();\n-\t\t\tif(ais != null) ais.close();\n-\t\t}\n-\t\t\n-\t\tList expected = new ArrayList();\n-\t\texpected.add(\"testdata/test2.xml\");\n-\t\texpected.add(\"test/test3.xml\");\n-\t\texpected.add(\"blub/test.txt\");\n-\t\texpected.add(\"test.txt\");\n-\t\texpected.add(\"something/bla\");\n-\t\texpected.add(\"bla/test4.xml\");\n-\t\texpected.add(\"test with spaces.txt\");\n-\t\t\n-\t\tthis.checkArchiveContent(result, expected);\n-\t}\n-\t\n-\t/**\n-\t * add blub/test.txt + delete blub\n+     * @throws Exception\n+     */\n+    public void XtestDeletePlusAdd() throws Exception {\n+        File input = this.createArchive(\"zip\");\n+\n+        ArchiveOutputStream out = null;\n+        ArchiveInputStream ais = null;\n+        File result = File.createTempFile(\"test\", \".zip\");\n+        try {\n+\n+            final InputStream is = new FileInputStream(input);\n+            ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n+            out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result));\n+\n+            ChangeSet changes = new ChangeSet();\n+            changes.delete(\"bla\");\n+\n+            // Add a file\n+            final File file1 = getFile(\"test.txt\");\n+            ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\");\n+            changes.add(entry, new FileInputStream(file1));\n+\n+            changes.perform(ais, out);\n+\n+        } finally {\n+            if(out != null) out.close();\n+            if(ais != null) ais.close();\n+        }\n+\n+        List expected = new ArrayList();\n+        expected.add(\"testdata/test1.xml\");\n+        expected.add(\"testdata/test2.xml\");\n+        expected.add(\"test/test3.xml\");\n+        expected.add(\"test.txt\");\n+        expected.add(\"something/bla\");\n+        expected.add(\"bla/test.txt\");\n+        expected.add(\"test with spaces.txt\");\n+\n+        this.checkArchiveContent(result, expected);\n+    }\n+\n+    /**\n+     * Adds a file to a zip archive. Deletes an other file.\n+     * @throws Exception\n+     */\n+    public void testDeleteFromAndAddToZip() throws Exception {\n+        File input = this.createArchive(\"zip\");\n+\n+        ArchiveOutputStream out = null;\n+        ArchiveInputStream ais = null;\n+        File result = File.createTempFile(\"test\", \".zip\");\n+        try {\n+\n+            final InputStream is = new FileInputStream(input);\n+            ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n+            out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result));\n+\n+            ChangeSet changes = new ChangeSet();\n+\n+            final File file1 = getFile(\"test.txt\");\n+            ArchiveEntry entry = new ZipArchiveEntry(\"blub/test.txt\");\n+            changes.add(entry, new FileInputStream(file1));\n+\n+            changes.delete(\"testdata/test1.xml\");\n+\n+            changes.perform(ais, out);\n+\n+        } finally {\n+            if(out != null) out.close();\n+            if(ais != null) ais.close();\n+        }\n+\n+        List expected = new ArrayList();\n+        expected.add(\"testdata/test2.xml\");\n+        expected.add(\"test/test3.xml\");\n+        expected.add(\"blub/test.txt\");\n+        expected.add(\"test.txt\");\n+        expected.add(\"something/bla\");\n+        expected.add(\"bla/test4.xml\");\n+        expected.add(\"test with spaces.txt\");\n+\n+        this.checkArchiveContent(result, expected);\n+    }\n+\n+    /**\n+     * add blub/test.txt + delete blub\n      * Should add dir1/test.txt and delete it afterwards. In this example,\n      * the zip archive should stay untouched.\n-\t * @throws Exception\n-\t */\n-\tpublic void XtestAddDeleteAdd() throws Exception {\n-\t\tFile input = this.createArchive(\"zip\");\n-\t\t\n-\t\tArchiveOutputStream out = null;\n-\t\tArchiveInputStream ais = null;\n-\t\tFile result = File.createTempFile(\"test\", \".zip\");\n-\t\ttry {\n-\t\t\t\n-\t\t\tfinal InputStream is = new FileInputStream(input);\n-\t\t\tais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n-\t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result));\n-\n-\t\t\tChangeSet changes = new ChangeSet();\n-\t\t\t\n-\t\t\tfinal File file1 = getFile(\"test.txt\");\n-\t\t\tArchiveEntry entry = new ZipArchiveEntry(\"blub/test.txt\");\n-\t\t\tchanges.add(entry, new FileInputStream(file1));\n-\t\t\t\n-\t\t\tchanges.delete(\"blub\");\n-\t\t\t\n-\t\t\tchanges.perform(ais, out);\n-\t\t\t\n-\t\t} finally {\n-\t\t\tif(out != null) out.close();\n-\t\t\tif(ais != null) ais.close();\n-\t\t}\n-\t\t\n-\t\tList expected = new ArrayList();\n-\t\texpected.add(\"testdata/test1.xml\");\n-\t\texpected.add(\"testdata/test2.xml\");\n-\t\texpected.add(\"test/test3.xml\");\n-\t\texpected.add(\"test.txt\");\n-\t\texpected.add(\"something/bla\");\n-\t\texpected.add(\"bla/test4.xml\");\n-\t\texpected.add(\"test with spaces.txt\");\n-\t\t\n-\t\tthis.checkArchiveContent(result, expected);\n-\t}\n-\t\n-\t\n-\t/**\n-\t * delete bla + add bla/test.txt + delete bla\n-\t * Deletes dir1/* first, then surpresses the add of bla.txt cause there\n-\t * is a delete operation later.\n-\t * @throws Exception\n-\t */\n-\tpublic void XtestDeleteAddDelete() throws Exception {\n-\t\tFile input = this.createArchive(\"zip\");\n-\t\t\n-\t\tArchiveOutputStream out = null;\n-\t\tArchiveInputStream ais = null;\n-\t\tFile result = File.createTempFile(\"test\", \".zip\");\n-\t\ttry {\n-\t\t\t\n-\t\t\tfinal InputStream is = new FileInputStream(input);\n-\t\t\tais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n-\t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result));\n-\n-\t\t\tChangeSet changes = new ChangeSet();\n-\t\t\t\n-\t\t\tchanges.delete(\"bla\");\n-\t\t\t\n-\t\t\tfinal File file1 = getFile(\"test.txt\");\n-\t\t\tArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\");\n-\t\t\tchanges.add(entry, new FileInputStream(file1));\n-\t\t\t\n-\t\t\tchanges.delete(\"bla\");\n-\t\t\t\n-\t\t\tchanges.perform(ais, out);\n-\t\t\t\n-\t\t} finally {\n-\t\t\tif(out != null) out.close();\n-\t\t\tif(ais != null) ais.close();\n-\t\t}\n-\t\t\n-\t\tList expected = new ArrayList();\n-\t\texpected.add(\"testdata/test1.xml\");\n-\t\texpected.add(\"testdata/test2.xml\");\n-\t\texpected.add(\"test/test3.xml\");\n-\t\texpected.add(\"test.txt\");\n-\t\texpected.add(\"something/bla\");\n-\t\texpected.add(\"test with spaces.txt\");\n-\t\t\n-\t\tthis.checkArchiveContent(result, expected);\n-\t}\n-\t\n-\t/**\n-\t * Simple Delete from a zip file.\n-\t * @throws Exception\n-\t */\n-\tpublic void testDeleteFromZip() throws Exception {\n-\t\tArchiveOutputStream out = null;\n-\t\tArchiveInputStream ais = null;\n-\t\ttry {\n-\t\t\tChangeSet changes = new ChangeSet();\n-\t\t\tchanges.delete(\"test2.xml\");\n-\t\t\t\n-\t\t\tfinal File input = getFile(\"bla.zip\");\n-\t\t\tfinal InputStream is = new FileInputStream(input);\n-\t\t\tais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n-\t\t\t\n-\t\t\tFile temp = File.createTempFile(\"test\", \".zip\");\n-\t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(temp));\n-\n-\t\t\tchanges.perform(ais, out);\n-\t\t} finally {\n-\t\t\tif(out != null) out.close();\n-\t\t\tif(ais != null) ais.close();\n-\t\t}\n-\t\t// TODO add asserts\n-\t}\n-\n-\t/**\n-\t * Simple delete from a tar file\n-\t * @throws Exception\n-\t */\n-\tpublic void testDeleteFromTar() throws Exception {\n-\t\tArchiveOutputStream out = null;\n-\t\tArchiveInputStream ais = null;\n-\t\ttry {\n-\t\t\tChangeSet changes = new ChangeSet();\n-\t\t\tchanges.delete(\"test2.xml\");\n-\t\t\t\n-\t\t\tfinal File input = getFile(\"bla.tar\");\n-\t\t\tfinal InputStream is = new FileInputStream(input);\n-\t\t\tais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is);\n-\t\t\t\n-\t\t\tFile temp = new File(dir, \"bla.tar\");\n-\t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp));\n-\n-\t\t\tchanges.perform(ais, out);\n-\t\t} finally {\n-\t\t\tif(out != null) out.close();\n-\t\t\tif(ais != null) ais.close();\n-\t\t}\n-\t\t// TODO add asserts\n-\t}\n-\n-\t/**\n-\t * Simple delete from a jar file\n-\t * @throws Exception\n-\t */\n-\tpublic void testDeleteFromJar() throws Exception {\n-\t\tArchiveOutputStream out = null;\n-\t\tArchiveInputStream ais = null;\n-\t\ttry {\n-\t\t\tChangeSet changes = new ChangeSet();\n-\t\t\tchanges.delete(\"test2.xml\");\n-\t\t\tchanges.delete(\"META-INF/MANIFEST.MF\");\n-\t\t\t\n-\t\t\tfinal File input = getFile(\"bla.jar\");\n-\t\t\tfinal InputStream is = new FileInputStream(input);\n-\t\t\tais = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is);\n-\t\t\t\n-\t\t\tFile temp = new File(dir, \"bla.jar\");\n-\t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"jar\", new FileOutputStream(temp));\n-\n-\t\t\tchanges.perform(ais, out);\n-\t\t} finally {\n-\t\t\tif(out != null) out.close();\n-\t\t\tif(ais != null) ais.close();\n-\t\t}\n-\t\t// TODO add asserts\n-\t}\n-\n-\t/**\n-\t * Simple delete from an ar file\n-\t * @throws Exception\n-\t */\n-\tpublic void testDeleteFromAr() throws Exception {\n-\t\tArchiveOutputStream out = null;\n-\t\tArchiveInputStream ais = null;\n-\t\ttry {\n-\t\t\tChangeSet changes = new ChangeSet();\n-\t\t\tchanges.delete(\"test2.xml\");\n-\t\t\t\n-\t\t\tfinal File input = getFile(\"bla.ar\");\n-\t\t\tfinal InputStream is = new FileInputStream(input);\n-\t\t\tais = new ArchiveStreamFactory().createArchiveInputStream(\"ar\", is);\n-\t\t\t\n-\t\t\tFile temp = new File(dir, \"bla.ar\");\n-\t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", new FileOutputStream(temp));\n-\n-\t\t\tchanges.perform(ais, out);\n-\t\t} finally {\n-\t\t\tif(out != null) out.close();\n-\t\t\tif(ais != null) ais.close();\n-\t\t}\n-\t\t// TODO add asserts\n-\t}\n-\n-\tpublic void testDeleteFromAndAddToTar() throws Exception {\n-\t\tArchiveOutputStream out = null;\n-\t\tArchiveInputStream ais = null;\n-\t\ttry {\n-\t\t\tChangeSet changes = new ChangeSet();\n-\t\t\tchanges.delete(\"test2.xml\");\n-\t\t\t\n-\t\t\tfinal File file1 = getFile(\"test.txt\");\n-\t\t\t\n-\t\t\tfinal TarArchiveEntry entry = new TarArchiveEntry(\"testdata/test.txt\");\n-\t\t    entry.setModTime(0);\n-\t\t    entry.setSize(file1.length());\n-\t\t    entry.setUserId(0);\n-\t\t    entry.setGroupId(0);\n-\t\t    entry.setUserName(\"avalon\");\n-\t\t    entry.setGroupName(\"excalibur\");\n-\t\t    entry.setMode(0100000);\n-\t\t\t\n-\t        changes.add(entry, new FileInputStream(file1));\n-\t\t\t\n-\t\t\tfinal File input = getFile(\"bla.tar\");\n-\t\t\tfinal InputStream is = new FileInputStream(input);\n-\t\t\tais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is);\n-\t\t\t\n-\t\t\tFile temp = new File(dir, \"bla.tar\");\n-\t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp));\n-\n-\t\t\tchanges.perform(ais, out);\n-\t\t} finally {\n-\t\t\tif(out != null) out.close();\n-\t\t\tif(ais != null) ais.close();\n-\t\t}\n-\t\t// TODO add asserts\n-\t}\n-\t\n-\t/**\n-\t * Delete from a jar file and add another file\n-\t * @throws Exception\n-\t */\n-\tpublic void testDeleteFromAndAddToJar() throws Exception {\n-\t\tArchiveOutputStream out = null;\n-\t\tArchiveInputStream ais = null;\n-\t\ttry {\n-\t\t\tChangeSet changes = new ChangeSet();\n-\t\t\tchanges.delete(\"test2.xml\");\n-\t\t\t\n-\t\t\tfinal File file1 = getFile(\"test.txt\");\n-\t\t\tJarArchiveEntry entry = new JarArchiveEntry(\"testdata/test.txt\");\n-\t        changes.add(entry, new FileInputStream(file1));\n-\t\t\t\n-\t\t\tfinal File input = getFile(\"bla.jar\");\n-\t\t\tfinal InputStream is = new FileInputStream(input);\n-\t\t\tais = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is);\n-\t\t\t\n-\t\t\tFile temp = new File(dir, \"bla.jar\");\n-\t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"jar\", new FileOutputStream(temp));\n-\n-\t\t\tchanges.perform(ais, out);\n-\t\t} finally {\n-\t\t\tif(out != null) out.close();\n-\t\t\tif(ais != null) ais.close();\n-\t\t}\n-\t\t// TODO add asserts\n-\t}\n-\n-\t/**\n-\t * Deletes a file from an AR-archive and adds another\n-\t * @throws Exception\n-\t */\n-\tpublic void testDeleteFromAndAddToAr() throws Exception {\n-\t\tArchiveOutputStream out = null;\n-\t\tArchiveInputStream ais = null;\n-\t\ttry {\n-\t\t\tChangeSet changes = new ChangeSet();\n-\t\t\tchanges.delete(\"test2.xml\");\n-\t\t\t\n-\t\t\tfinal File file1 = getFile(\"test.txt\");\n-\t\t\t\n-\t\t\tfinal ArArchiveEntry entry = new ArArchiveEntry(\"test.txt\", file1.length());\n-\t\t   \n-\t        changes.add(entry, new FileInputStream(file1));\n-\t\t\t\n-\t\t\tfinal File input = getFile(\"bla.ar\");\n-\t\t\tfinal InputStream is = new FileInputStream(input);\n-\t\t\tais = new ArchiveStreamFactory().createArchiveInputStream(\"ar\", is);\n-\t\t\t\n-\t\t\tFile temp = new File(dir, \"bla.ar\");\n-\t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", new FileOutputStream(temp));\n-\n-\t\t\tchanges.perform(ais, out);\n-\t\t} finally {\n-\t\t\tif(out != null) out.close();\n-\t\t\tif(ais != null) ais.close();\n-\t\t}\n-\t\t// TODO add asserts\n-\t}\n-\t\n-\t/**\n-\t * TODO: Move operations are not supported currently\n-\t * \n-\t * mv dir1/test.text dir2/test.txt + delete dir1\n-\t * Moves the file to dir2 and deletes everything in dir1\n-\t * @throws Exception\n-\t */\n-\tpublic void testRenameAndDelete() throws Exception {\n-\t}\n-\t\n-\t/**\n-\t * TODO: Move operations are not supported currently\n-\t * \n-\t * add dir1/bla.txt + mv dir1/test.text dir2/test.txt + delete dir1\n-\t * \n-\t * Add dir1/bla.txt should be surpressed. All other dir1 files will be\n-\t * deleted, except dir1/test.text will be moved\n-\t * \n-\t * @throws Exception\n-\t */\n-\tpublic void testAddMoveDelete() throws Exception {\n-\t}\n+     * @throws Exception\n+     */\n+    public void XtestAddDeleteAdd() throws Exception {\n+        File input = this.createArchive(\"zip\");\n+\n+        ArchiveOutputStream out = null;\n+        ArchiveInputStream ais = null;\n+        File result = File.createTempFile(\"test\", \".zip\");\n+        try {\n+\n+            final InputStream is = new FileInputStream(input);\n+            ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n+            out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result));\n+\n+            ChangeSet changes = new ChangeSet();\n+\n+            final File file1 = getFile(\"test.txt\");\n+            ArchiveEntry entry = new ZipArchiveEntry(\"blub/test.txt\");\n+            changes.add(entry, new FileInputStream(file1));\n+\n+            changes.delete(\"blub\");\n+\n+            changes.perform(ais, out);\n+\n+        } finally {\n+            if(out != null) out.close();\n+            if(ais != null) ais.close();\n+        }\n+\n+        List expected = new ArrayList();\n+        expected.add(\"testdata/test1.xml\");\n+        expected.add(\"testdata/test2.xml\");\n+        expected.add(\"test/test3.xml\");\n+        expected.add(\"test.txt\");\n+        expected.add(\"something/bla\");\n+        expected.add(\"bla/test4.xml\");\n+        expected.add(\"test with spaces.txt\");\n+\n+        this.checkArchiveContent(result, expected);\n+    }\n+\n+\n+    /**\n+     * delete bla + add bla/test.txt + delete bla\n+     * Deletes dir1/* first, then surpresses the add of bla.txt cause there\n+     * is a delete operation later.\n+     * @throws Exception\n+     */\n+    public void XtestDeleteAddDelete() throws Exception {\n+        File input = this.createArchive(\"zip\");\n+\n+        ArchiveOutputStream out = null;\n+        ArchiveInputStream ais = null;\n+        File result = File.createTempFile(\"test\", \".zip\");\n+        try {\n+\n+            final InputStream is = new FileInputStream(input);\n+            ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n+            out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result));\n+\n+            ChangeSet changes = new ChangeSet();\n+\n+            changes.delete(\"bla\");\n+\n+            final File file1 = getFile(\"test.txt\");\n+            ArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\");\n+            changes.add(entry, new FileInputStream(file1));\n+\n+            changes.delete(\"bla\");\n+\n+            changes.perform(ais, out);\n+\n+        } finally {\n+            if(out != null) out.close();\n+            if(ais != null) ais.close();\n+        }\n+\n+        List expected = new ArrayList();\n+        expected.add(\"testdata/test1.xml\");\n+        expected.add(\"testdata/test2.xml\");\n+        expected.add(\"test/test3.xml\");\n+        expected.add(\"test.txt\");\n+        expected.add(\"something/bla\");\n+        expected.add(\"test with spaces.txt\");\n+\n+        this.checkArchiveContent(result, expected);\n+    }\n+\n+    /**\n+     * Simple Delete from a zip file.\n+     * @throws Exception\n+     */\n+    public void testDeleteFromZip() throws Exception {\n+        ArchiveOutputStream out = null;\n+        ArchiveInputStream ais = null;\n+        try {\n+            ChangeSet changes = new ChangeSet();\n+            changes.delete(\"test2.xml\");\n+\n+            final File input = getFile(\"bla.zip\");\n+            final InputStream is = new FileInputStream(input);\n+            ais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n+\n+            File temp = File.createTempFile(\"test\", \".zip\");\n+            out = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(temp));\n+\n+            changes.perform(ais, out);\n+        } finally {\n+            if(out != null) out.close();\n+            if(ais != null) ais.close();\n+        }\n+        // TODO add asserts\n+    }\n+\n+    /**\n+     * Simple delete from a tar file\n+     * @throws Exception\n+     */\n+    public void testDeleteFromTar() throws Exception {\n+        ArchiveOutputStream out = null;\n+        ArchiveInputStream ais = null;\n+        try {\n+            ChangeSet changes = new ChangeSet();\n+            changes.delete(\"test2.xml\");\n+\n+            final File input = getFile(\"bla.tar\");\n+            final InputStream is = new FileInputStream(input);\n+            ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is);\n+\n+            File temp = new File(dir, \"bla.tar\");\n+            out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp));\n+\n+            changes.perform(ais, out);\n+        } finally {\n+            if(out != null) out.close();\n+            if(ais != null) ais.close();\n+        }\n+        // TODO add asserts\n+    }\n+\n+    /**\n+     * Simple delete from a jar file\n+     * @throws Exception\n+     */\n+    public void testDeleteFromJar() throws Exception {\n+        ArchiveOutputStream out = null;\n+        ArchiveInputStream ais = null;\n+        try {\n+            ChangeSet changes = new ChangeSet();\n+            changes.delete(\"test2.xml\");\n+            changes.delete(\"META-INF/MANIFEST.MF\");\n+\n+            final File input = getFile(\"bla.jar\");\n+            final InputStream is = new FileInputStream(input);\n+            ais = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is);\n+\n+            File temp = new File(dir, \"bla.jar\");\n+            out = new ArchiveStreamFactory().createArchiveOutputStream(\"jar\", new FileOutputStream(temp));\n+\n+            changes.perform(ais, out);\n+        } finally {\n+            if(out != null) out.close();\n+            if(ais != null) ais.close();\n+        }\n+        // TODO add asserts\n+    }\n+\n+    /**\n+     * Simple delete from an ar file\n+     * @throws Exception\n+     */\n+    public void testDeleteFromAr() throws Exception {\n+        ArchiveOutputStream out = null;\n+        ArchiveInputStream ais = null;\n+        try {\n+            ChangeSet changes = new ChangeSet();\n+            changes.delete(\"test2.xml\");\n+\n+            final File input = getFile(\"bla.ar\");\n+            final InputStream is = new FileInputStream(input);\n+            ais = new ArchiveStreamFactory().createArchiveInputStream(\"ar\", is);\n+\n+            File temp = new File(dir, \"bla.ar\");\n+            out = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", new FileOutputStream(temp));\n+\n+            changes.perform(ais, out);\n+        } finally {\n+            if(out != null) out.close();\n+            if(ais != null) ais.close();\n+        }\n+        // TODO add asserts\n+    }\n+\n+    public void testDeleteFromAndAddToTar() throws Exception {\n+        ArchiveOutputStream out = null;\n+        ArchiveInputStream ais = null;\n+        try {\n+            ChangeSet changes = new ChangeSet();\n+            changes.delete(\"test2.xml\");\n+\n+            final File file1 = getFile(\"test.txt\");\n+\n+            final TarArchiveEntry entry = new TarArchiveEntry(\"testdata/test.txt\");\n+            entry.setModTime(0);\n+            entry.setSize(file1.length());\n+            entry.setUserId(0);\n+            entry.setGroupId(0);\n+            entry.setUserName(\"avalon\");\n+            entry.setGroupName(\"excalibur\");\n+            entry.setMode(0100000);\n+\n+            changes.add(entry, new FileInputStream(file1));\n+\n+            final File input = getFile(\"bla.tar\");\n+            final InputStream is = new FileInputStream(input);\n+            ais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is);\n+\n+            File temp = new File(dir, \"bla.tar\");\n+            out = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp));\n+\n+            changes.perform(ais, out);\n+        } finally {\n+            if(out != null) out.close();\n+            if(ais != null) ais.close();\n+        }\n+        // TODO add asserts\n+    }\n+\n+    /**\n+     * Delete from a jar file and add another file\n+     * @throws Exception\n+     */\n+    public void testDeleteFromAndAddToJar() throws Exception {\n+        ArchiveOutputStream out = null;\n+        ArchiveInputStream ais = null;\n+        try {\n+            ChangeSet changes = new ChangeSet();\n+            changes.delete(\"test2.xml\");\n+\n+            final File file1 = getFile(\"test.txt\");\n+            JarArchiveEntry entry = new JarArchiveEntry(\"testdata/test.txt\");\n+            changes.add(entry, new FileInputStream(file1));\n+\n+            final File input = getFile(\"bla.jar\");\n+            final InputStream is = new FileInputStream(input);\n+            ais = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is);\n+\n+            File temp = new File(dir, \"bla.jar\");\n+            out = new ArchiveStreamFactory().createArchiveOutputStream(\"jar\", new FileOutputStream(temp));\n+\n+            changes.perform(ais, out);\n+        } finally {\n+            if(out != null) out.close();\n+            if(ais != null) ais.close();\n+        }\n+        // TODO add asserts\n+    }\n+\n+    /**\n+     * Deletes a file from an AR-archive and adds another\n+     * @throws Exception\n+     */\n+    public void testDeleteFromAndAddToAr() throws Exception {\n+        ArchiveOutputStream out = null;\n+        ArchiveInputStream ais = null;\n+        try {\n+            ChangeSet changes = new ChangeSet();\n+            changes.delete(\"test2.xml\");\n+\n+            final File file1 = getFile(\"test.txt\");\n+\n+            final ArArchiveEntry entry = new ArArchiveEntry(\"test.txt\", file1.length());\n+\n+            changes.add(entry, new FileInputStream(file1));\n+\n+            final File input = getFile(\"bla.ar\");\n+            final InputStream is = new FileInputStream(input);\n+            ais = new ArchiveStreamFactory().createArchiveInputStream(\"ar\", is);\n+\n+            File temp = new File(dir, \"bla.ar\");\n+            out = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", new FileOutputStream(temp));\n+\n+            changes.perform(ais, out);\n+        } finally {\n+            if(out != null) out.close();\n+            if(ais != null) ais.close();\n+        }\n+        // TODO add asserts\n+    }\n+\n+    /**\n+     * TODO: Move operations are not supported currently\n+     * \n+     * mv dir1/test.text dir2/test.txt + delete dir1\n+     * Moves the file to dir2 and deletes everything in dir1\n+     * @throws Exception\n+     */\n+    public void testRenameAndDelete() throws Exception {\n+    }\n+\n+    /**\n+     * TODO: Move operations are not supported currently\n+     * \n+     * add dir1/bla.txt + mv dir1/test.text dir2/test.txt + delete dir1\n+     * \n+     * Add dir1/bla.txt should be surpressed. All other dir1 files will be\n+     * deleted, except dir1/test.text will be moved\n+     * \n+     * @throws Exception\n+     */\n+    public void testAddMoveDelete() throws Exception {\n+    }\n }", "timestamp": 1234794072, "metainfo": ""}