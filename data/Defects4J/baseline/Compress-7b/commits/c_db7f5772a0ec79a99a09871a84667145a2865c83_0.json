{"sha": "db7f5772a0ec79a99a09871a84667145a2865c83", "log": "The default value for fileFormat must be chosen so checkNewFormat() and checkOldFormat() both fail; -1 is not suitable. Initialise other fields to zero as that is what the trailer needs. Update Javadoc  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java\n  */\n public class CpioArchiveEntry implements CpioConstants, ArchiveEntry {\n \n+    // Header description fields - should be same throughout an archive\n+    \n+    /**\n+     * See {@link CpioArchiveEntry#setFormat(short)} for possible values.\n+     */\n+    private short fileFormat = 0; // Default chosen so checkNewFormat() and checkOldFormat() both fail \n+\n+    /** The number of bytes in each header record; depends on the file format */\n+    private long headerSize = -1;\n+\n+    // Header fields\n+    \n     private long chksum = 0;\n \n-    /**\n-     * See {@link CpioArchiveEntry#setFormat(short)} for possible values.\n-     */\n-   private short fileFormat = -1;\n-\n     private long filesize = 0;\n \n     private long gid = 0;\n \n-    private long headerSize = -1;\n-\n     private long inode = 0;\n \n     private long maj = 0;\n \n     private long min = 0;\n \n-    private long mode = -1;\n-\n-    private long mtime = -1;\n+    private long mode = 0;\n+\n+    private long mtime = 0;\n \n     private String name;\n \n     }\n \n     /**\n-     * Ceates a CPIOArchiveEntry with a specified name. The format of this entry\n+     * Creates a CPIOArchiveEntry with a specified name. The format of this entry\n      * will be the new format.\n      * \n      * @param name\n     }\n \n     /**\n-     * Set the format for this entry. Possible values are:\n+     * Set the header format for this entry.\n+     * <br/>\n+     * Possible values are:\n      * <p>\n-     * {@link CPIOConstants.FORMAT_NEW}<br/>\n-     * {@link CPIOConstants.FORMAT_NEW_CRC}<br/>\n-     * {@link CPIOConstants.FORMAT_OLD_BINARY}<br/>\n-     * {@link CPIOConstants.FORMAT_OLD_ASCII}<br/>\n+     * {@link CpioConstants.FORMAT_NEW}<br/>\n+     * {@link CpioConstants.FORMAT_NEW_CRC}<br/>\n+     * {@link CpioConstants.FORMAT_OLD_BINARY}<br/>\n+     * {@link CpioConstants.FORMAT_OLD_ASCII}<br/>\n      * \n      * @param format\n      *            The format to set.\n     final void setFormat(final short format) {\n         switch (format) {\n         case FORMAT_NEW:\n-            this.fileFormat = FORMAT_NEW;\n             this.headerSize = 110;\n             break;\n         case FORMAT_NEW_CRC:\n-            this.fileFormat = FORMAT_NEW_CRC;\n             this.headerSize = 110;\n             break;\n         case FORMAT_OLD_ASCII:\n-            this.fileFormat = FORMAT_OLD_ASCII;\n             this.headerSize = 76;\n             break;\n         case FORMAT_OLD_BINARY:\n-            this.fileFormat = FORMAT_OLD_BINARY;\n             this.headerSize = 26;\n             break;\n         default:\n             throw new IllegalArgumentException(\"Unknown header type\");\n         }\n+        this.fileFormat = format;\n     }\n \n     /**", "timestamp": 1238099245, "metainfo": ""}