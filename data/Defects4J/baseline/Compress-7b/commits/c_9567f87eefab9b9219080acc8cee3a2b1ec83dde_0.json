{"sha": "9567f87eefab9b9219080acc8cee3a2b1ec83dde", "log": "Add some utility methods and tests  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java\n+++ b/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java\n  */\n \n package org.apache.commons.compress.utils;\n+\n+import java.io.UnsupportedEncodingException;\n \n import org.apache.commons.compress.archivers.ArchiveEntry;\n \n         sb.append(' ').append(entry.getName());\n         return sb.toString();\n     }\n+\n+    /**\n+     * Check if buffer contents matches Ascii String.\n+     * \n+     * @param expected\n+     * @param buffer\n+     * @param offset\n+     * @param length\n+     * @return <code>true</code> if buffer is the same as the expected string\n+     */\n+    public static boolean matchAsciiBuffer(\n+            String expected, byte[] buffer, int offset, int length){\n+        byte[] buffer1;\n+        try {\n+            buffer1 = expected.getBytes(\"ASCII\");\n+        } catch (UnsupportedEncodingException e) {\n+            throw new RuntimeException(e); // Should not happen\n+        }\n+        return isEqual(buffer1, 0, buffer1.length, buffer, offset, length, false);\n+    }\n+    \n+    /**\n+     * Check if buffer contents matches Ascii String.\n+     * \n+     * @param expected\n+     * @param buffer\n+     * @return <code>true</code> if buffer is the same as the expected string\n+     */\n+    public static boolean matchAsciiBuffer(String expected, byte[] buffer){\n+        byte[] buffer1;\n+        try {\n+            buffer1 = expected.getBytes(\"ASCII\");\n+        } catch (UnsupportedEncodingException e) {\n+            throw new RuntimeException(e); // Should not happen\n+        }\n+        return isEqual(buffer1, 0, buffer1.length, buffer, 0, buffer.length, false);\n+    }\n+    \n+    /**\n+     * Compare byte buffers, optionally ignoring trailing nulls\n+     * \n+     * @param buffer1\n+     * @param offset1\n+     * @param length1\n+     * @param buffer2\n+     * @param offset2\n+     * @param length2\n+     * @param ignoreTrailingNulls\n+     * @return <code>true</code> if buffer1 and buffer2 have same contents, having regard to trailing nulls\n+     */\n+    public static boolean isEqual(\n+            final byte[] buffer1, final int offset1, final int length1,\n+            final byte[] buffer2, final int offset2, final int length2,\n+            boolean ignoreTrailingNulls){\n+        int minLen=length1 < length2 ? length1 : length2;\n+        for (int i=0; i < minLen; i++){\n+            if (buffer1[offset1+i] != buffer2[offset2+i]){\n+                return false;\n+            }\n+        }\n+        if (length1 == length2){\n+            return true;\n+        }\n+        if (ignoreTrailingNulls){\n+            if (length1 > length2){\n+                for(int i = length2; i < length1; i++){\n+                    if (buffer1[offset1+i] != 0){\n+                        return false;\n+                    }\n+                }\n+            } else {\n+                for(int i = length1; i < length2; i++){\n+                    if (buffer2[offset2+i] != 0){\n+                        return false;\n+                    }\n+                }                \n+            }\n+            return true;\n+        }\n+        return false;\n+    }\n+    \n+    /**\n+     * Compare byte buffers\n+     * \n+     * @param buffer1\n+     * @param offset1\n+     * @param length1\n+     * @param buffer2\n+     * @param offset2\n+     * @param length2\n+     * @return <code>true</code> if buffer1 and buffer2 have same contents\n+     */\n+    public static boolean isEqual(\n+            final byte[] buffer1, final int offset1, final int length1,\n+            final byte[] buffer2, final int offset2, final int length2){\n+        return isEqual(buffer1, offset1, length1, buffer2, offset2, length2, false);\n+    }\n+    \n+    /**\n+     * Compare byte buffers\n+     * \n+     * @param buffer1\n+     * @param buffer2\n+     * @return <code>true</code> if buffer1 and buffer2 have same contents\n+     */\n+    public static boolean isEqual(final byte[] buffer1, final byte[] buffer2 ){\n+        return isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, false);\n+    }\n+    \n+    /**\n+     * Compare byte buffers, optionally ignoring trailing nulls\n+     * \n+     * @param buffer1\n+     * @param buffer2\n+     * @param ignoreTrailingNulls\n+     * @return <code>true</code> if buffer1 and buffer2 have same contents\n+     */\n+    public static boolean isEqual(final byte[] buffer1, final byte[] buffer2, boolean ignoreTrailingNulls){\n+        return isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, ignoreTrailingNulls);\n+    }\n+    \n+    /**\n+     * Compare byte buffers, ignoring trailing nulls\n+     * \n+     * @param buffer1\n+     * @param offset1\n+     * @param length1\n+     * @param buffer2\n+     * @param offset2\n+     * @param length2\n+     * @return <code>true</code> if buffer1 and buffer2 have same contents, having regard to trailing nulls\n+     */\n+    public static boolean isEqualWithNull(\n+            final byte[] buffer1, final int offset1, final int length1,\n+            final byte[] buffer2, final int offset2, final int length2){\n+        return isEqual(buffer1, offset1, length1, buffer2, offset2, length2, true);\n+    }\n+    \n }\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \n+ */\n+\n+package org.apache.commons.compress;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+import org.apache.commons.compress.archivers.ArchiveEntry;\n+import org.apache.commons.compress.archivers.ArchiveInputStream;\n+import org.apache.commons.compress.archivers.ArchiveOutputStream;\n+import org.apache.commons.compress.archivers.ar.ArArchiveEntry;\n+import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;\n+import org.apache.commons.compress.archivers.jar.JarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n+import org.apache.commons.compress.utils.ArchiveUtils;\n+\n+/**\n+ * Check that the different write methods create the same output.\n+ * TODO perform the same checks for reads.\n+ */\n+public class ArchiveUtilsTest extends AbstractTestCase {\n+\n+    private static final int bytesToTest = 50;\n+    private static final byte[] byteTest = new byte[bytesToTest];\n+    static {\n+        for(int i=0; i < byteTest.length ;) {\n+            byteTest[i]=(byte) i;\n+            byteTest[i+1]=(byte) -i;\n+            i += 2;\n+        }\n+    }\n+    public void testCompareBA(){\n+        byte[] buffer1 = {1,2,3};\n+        byte[] buffer2 = {1,2,3,0};\n+        byte[] buffer3 = {1,2,3};\n+        assertTrue(ArchiveUtils.isEqual(buffer1, buffer2, true));\n+        assertFalse(ArchiveUtils.isEqual(buffer1, buffer2, false));\n+        assertFalse(ArchiveUtils.isEqual(buffer1, buffer2));\n+        assertTrue(ArchiveUtils.isEqual(buffer2, buffer1, true));\n+        assertFalse(ArchiveUtils.isEqual(buffer2, buffer1, false));\n+        assertFalse(ArchiveUtils.isEqual(buffer2, buffer1));\n+        assertTrue(ArchiveUtils.isEqual(buffer1, buffer3));\n+        assertTrue(ArchiveUtils.isEqual(buffer3, buffer1));\n+    }\n+    \n+    public void testCompareAscii(){\n+        byte[] buffer1 = {'a','b','c'};\n+        byte[] buffer2 = {'d','e','f',0};\n+        assertTrue(ArchiveUtils.matchAsciiBuffer(\"abc\", buffer1));\n+        assertFalse(ArchiveUtils.matchAsciiBuffer(\"abc\\0\", buffer1));\n+        assertTrue(ArchiveUtils.matchAsciiBuffer(\"def\\0\", buffer2));        \n+        assertFalse(ArchiveUtils.matchAsciiBuffer(\"def\", buffer2));\n+    }\n+}", "timestamp": 1238715223, "metainfo": ""}