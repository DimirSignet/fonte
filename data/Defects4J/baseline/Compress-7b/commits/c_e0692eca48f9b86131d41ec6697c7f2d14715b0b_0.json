{"sha": "e0692eca48f9b86131d41ec6697c7f2d14715b0b", "log": "canRead => canReadEntryData as discussed on the list  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java\n      *\n      * @since Apache Commons Compress 1.1\n      */\n-    public boolean canRead(ArchiveEntry ae) {\n+    public boolean canReadEntryData(ArchiveEntry ae) {\n         return true;\n     }\n \n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java\n      * <p>This implementation always returns true.\n      * @since Apache Commons Compress 1.1\n      */\n-    public boolean canWrite(ArchiveEntry ae) {\n+    public boolean canWriteEntryData(ArchiveEntry ae) {\n         return true;\n     }\n }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n      * compression method that hasn't been implemented yet.</p>\n      * @since Apache Commons Compress 1.1\n      */\n-    public boolean canRead(ArchiveEntry ae) {\n+    public boolean canReadEntryData(ArchiveEntry ae) {\n         if (ae instanceof ZipArchiveEntry) {\n             ZipArchiveEntry ze = (ZipArchiveEntry) ae;\n             return !ze.isEncrypted() &&\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n      * compression method that hasn't been implemented yet.</p>\n      * @since Apache Commons Compress 1.1\n      */\n-    public boolean canWrite(ArchiveEntry ae) {\n+    public boolean canWriteEntryData(ArchiveEntry ae) {\n         if (ae instanceof ZipArchiveEntry) {\n             ZipArchiveEntry ze = (ZipArchiveEntry) ae;\n             return !ze.isEncrypted() &&\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n      * compression method that hasn't been implemented yet.</p>\n      * @since Apache Commons Compress 1.1\n      */\n-    public boolean canRead(ZipArchiveEntry ze) {\n+    public boolean canReadEntryData(ZipArchiveEntry ze) {\n         return !ze.isEncrypted() &&\n             (ze.getMethod() == ZipArchiveEntry.STORED\n              || ze.getMethod() == ZipArchiveEntry.DEFLATED);\n--- a/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n      */\n     public void testSupportedCompressionMethod() throws IOException {\n         ZipFile bla = new ZipFile(getFile(\"bla.zip\"));\n-        assertTrue(bla.canRead(bla.getEntry(\"test1.xml\")));\n+        assertTrue(bla.canReadEntryData(bla.getEntry(\"test1.xml\")));\n         bla.close();\n \n         ZipFile moby = new ZipFile(getFile(\"moby.zip\"));\n-        assertFalse(moby.canRead(moby.getEntry(\"README\")));\n+        assertFalse(moby.canReadEntryData(moby.getEntry(\"README\")));\n         moby.close();\n     }\n \n         try {\n             ZipArchiveEntry entry = zip.getNextZipEntry();\n             assertEquals(\"README\", entry.getName());\n-            assertFalse(zip.canRead(entry));\n+            assertFalse(zip.canReadEntryData(entry));\n             try {\n                 assertNull(zip.getNextZipEntry());\n             } catch (IOException e) {\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java\n             ZipArchiveEntry zae = zf.getEntry(\"LICENSE.txt\");\n             assertTrue(zae.isEncrypted());\n             assertFalse(zae.isStronglyEncrypted());\n-            assertFalse(zf.canRead(zae));\n+            assertFalse(zf.canReadEntryData(zae));\n             try {\n                 zf.getInputStream(zae);\n                 fail(\"expected an exception\");\n             assertEquals(\"LICENSE.txt\", zae.getName());\n             assertTrue(zae.isEncrypted());\n             assertFalse(zae.isStronglyEncrypted());\n-            assertFalse(zin.canRead(zae));\n+            assertFalse(zin.canReadEntryData(zae));\n             try {\n                 byte[] buf = new byte[1024];\n                 zin.read(buf, 0, buf.length);\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java\n             new ZipArchiveOutputStream((java.io.OutputStream) null);\n         ZipArchiveEntry entry = new ZipArchiveEntry(\"foo\");\n         assertEquals(-1, entry.getMethod());\n-        assertFalse(zos.canWrite(entry));\n+        assertFalse(zos.canWriteEntryData(entry));\n \n         entry.setMethod(ZipArchiveEntry.STORED);\n         assertEquals(ZipArchiveEntry.STORED, entry.getMethod());\n-        assertTrue(zos.canWrite(entry));\n+        assertTrue(zos.canWriteEntryData(entry));\n \n         entry.setMethod(ZipArchiveEntry.DEFLATED);\n         assertEquals(ZipArchiveEntry.DEFLATED, entry.getMethod());\n-        assertTrue(zos.canWrite(entry));\n+        assertTrue(zos.canWriteEntryData(entry));\n \n         // Test the unsupported \"imploded\" compression method (6)\n         entry.setMethod(6);\n         assertEquals(6, entry.getMethod());\n-        assertFalse(zos.canWrite(entry));\n+        assertFalse(zos.canWriteEntryData(entry));\n     }\n \n     /**", "timestamp": 1267025747, "metainfo": ""}