{"sha": "1b01c3730af79c363390fc2496df345eaf2eb88b", "log": "Rollback the new ambiguous function def warning, because it still has false positives.    ", "commit": "\n--- a/src/com/google/javascript/jscomp/VariableReferenceCheck.java\n+++ b/src/com/google/javascript/jscomp/VariableReferenceCheck.java\n   static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.warning(\n       \"JSC_REDECLARED_VARIABLE\",\n       \"Redeclared variable: {0}\");\n+\n+  static final boolean CHECK_UNHOISTED_NAMED_FUNCTIONS = false;\n \n   static final DiagnosticType AMBIGUOUS_FUNCTION_DECL =\n     DiagnosticType.warning(\"AMBIGUIOUS_FUNCTION_DECL\",\n           }\n         }\n \n-        if (!isDeclaration && isDeclaredInScope && isUnhoistedNamedFunction) {\n+        if (CHECK_UNHOISTED_NAMED_FUNCTIONS && isUnhoistedNamedFunction\n+            && !isDeclaration && isDeclaredInScope) {\n           // Only allow an unhoisted named function to be used within the\n           // block it is declared.\n           for (BasicBlock declaredBlock : blocksWithDeclarations) {\n--- a/test/com/google/javascript/jscomp/VariableReferenceCheckTest.java\n+++ b/test/com/google/javascript/jscomp/VariableReferenceCheckTest.java\n   }\n \n   public void testNonHoistedFunction4() {\n-    assertAmbiguous(\"if (false) { function f() {} }  f();\");\n+    if (VariableReferenceCheck.CHECK_UNHOISTED_NAMED_FUNCTIONS) {\n+      assertAmbiguous(\"if (false) { function f() {} }  f();\");\n+    }\n   }\n \n   public void testNonHoistedFunction5() {\n-    assertAmbiguous(\"function g() { if (false) { function f() {} }  f(); }\");\n+    if (VariableReferenceCheck.CHECK_UNHOISTED_NAMED_FUNCTIONS) {\n+      assertAmbiguous(\"function g() { if (false) { function f() {} }  f(); }\");\n+    }\n   }\n \n   public void testNonHoistedFunction6() {", "timestamp": 1261073205, "metainfo": ""}