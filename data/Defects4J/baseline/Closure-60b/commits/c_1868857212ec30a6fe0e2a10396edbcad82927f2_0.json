{"sha": "1868857212ec30a6fe0e2a10396edbcad82927f2", "log": "Add names and toString methods to Diagnostic groups helpful for debugging.  R=johnlenz DELTA=98  (49 added, 10 deleted, 39 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1256   ", "commit": "\n--- a/src/com/google/javascript/jscomp/ComposeWarningsGuard.java\n+++ b/src/com/google/javascript/jscomp/ComposeWarningsGuard.java\n \n package com.google.javascript.jscomp;\n \n+import com.google.common.base.Joiner;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n import com.google.javascript.jscomp.CheckLevel;\n   List<WarningsGuard> getGuards() {\n     return Collections.unmodifiableList(Lists.newArrayList(guards));\n   }\n+\n+  @Override\n+  public String toString() {\n+    return Joiner.on(\", \").join(guards);\n+  }\n }\n--- a/src/com/google/javascript/jscomp/DiagnosticGroup.java\n+++ b/src/com/google/javascript/jscomp/DiagnosticGroup.java\n   // The set of types represented by this group, hashed by key.\n   private final Set<DiagnosticType> types;\n \n+  // A human-readable name for the group.\n+  private final String name;\n+\n+  /**\n+   * Create a group that matches all errors of the given types.\n+   */\n+  DiagnosticGroup(String name, DiagnosticType ...types) {\n+    this.name = name;\n+    this.types = ImmutableSet.copyOf(Arrays.asList(types));\n+  }\n+\n   /**\n    * Create a group that matches all errors of the given types.\n    */\n   public DiagnosticGroup(DiagnosticType ...types) {\n-    this.types = ImmutableSet.copyOf(Arrays.asList(types));\n+    this(null, types);\n   }\n \n   /**\n    * Create a diagnostic group with no name that only matches the given type.\n    */\n   private DiagnosticGroup(DiagnosticType type) {\n+    this.name = null;\n     this.types = ImmutableSet.of(type);\n   }\n \n    * Create a composite group.\n    */\n   public DiagnosticGroup(DiagnosticGroup ...groups) {\n+    this(null, groups);\n+  }\n+\n+  /**\n+   * Create a composite group.\n+   */\n+  public DiagnosticGroup(String name, DiagnosticGroup ...groups) {\n     Set<DiagnosticType> set = Sets.newHashSet();\n \n     for (DiagnosticGroup group : groups) {\n       set.addAll(group.types);\n     }\n \n+    this.name = name;\n     this.types = ImmutableSet.copyOf(set);\n   }\n \n   Collection<DiagnosticType> getTypes() {\n     return types;\n   }\n+\n+  public String toString() {\n+    return name == null ? super.toString() : \"DiagnosticGroup<\" + name + \">\";\n+  }\n }\n--- a/src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java\n+++ b/src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java\n \n     return false;\n   }\n+\n+  @Override\n+  public String toString() {\n+    return group + \"(\" + level + \")\";\n+  }\n }\n--- a/src/com/google/javascript/jscomp/DiagnosticGroups.java\n+++ b/src/com/google/javascript/jscomp/DiagnosticGroups.java\n     return group;\n   }\n \n+  static DiagnosticGroup registerGroup(String name,\n+      DiagnosticType ... types) {\n+    DiagnosticGroup group = new DiagnosticGroup(name, types);\n+    groupsByName.put(name, group);\n+    return group;\n+  }\n+\n+  static DiagnosticGroup registerGroup(String name,\n+      DiagnosticGroup ... groups) {\n+    DiagnosticGroup group = new DiagnosticGroup(name, groups);\n+    groupsByName.put(name, group);\n+    return group;\n+  }\n+\n   /** Get the registered diagnostic groups, indexed by name. */\n   protected Map<String, DiagnosticGroup> getRegisteredGroups() {\n     return ImmutableMap.copyOf(groupsByName);\n \n   public static DiagnosticGroup GLOBAL_THIS = DiagnosticGroups\n       .registerGroup(\"globalThis\",\n-          new DiagnosticGroup(\n-              CheckGlobalThis.GLOBAL_THIS));\n+          CheckGlobalThis.GLOBAL_THIS);\n \n   public static DiagnosticGroup DEPRECATED = DiagnosticGroups\n       .registerGroup(\"deprecated\",\n-          new DiagnosticGroup(\n-              CheckAccessControls.DEPRECATED_NAME,\n-              CheckAccessControls.DEPRECATED_NAME_REASON,\n-              CheckAccessControls.DEPRECATED_PROP,\n-              CheckAccessControls.DEPRECATED_PROP_REASON,\n-              CheckAccessControls.DEPRECATED_CLASS,\n-              CheckAccessControls.DEPRECATED_CLASS_REASON));\n+          CheckAccessControls.DEPRECATED_NAME,\n+          CheckAccessControls.DEPRECATED_NAME_REASON,\n+          CheckAccessControls.DEPRECATED_PROP,\n+          CheckAccessControls.DEPRECATED_PROP_REASON,\n+          CheckAccessControls.DEPRECATED_CLASS,\n+          CheckAccessControls.DEPRECATED_CLASS_REASON);\n \n   public static DiagnosticGroup VISIBILITY = DiagnosticGroups\n       .registerGroup(\"visibility\",\n-          new DiagnosticGroup(\n-              CheckAccessControls.BAD_PRIVATE_GLOBAL_ACCESS,\n-              CheckAccessControls.BAD_PRIVATE_PROPERTY_ACCESS,\n-              CheckAccessControls.BAD_PROTECTED_PROPERTY_ACCESS,\n-              CheckAccessControls.PRIVATE_OVERRIDE,\n-              CheckAccessControls.VISIBILITY_MISMATCH));\n+          CheckAccessControls.BAD_PRIVATE_GLOBAL_ACCESS,\n+          CheckAccessControls.BAD_PRIVATE_PROPERTY_ACCESS,\n+          CheckAccessControls.BAD_PROTECTED_PROPERTY_ACCESS,\n+          CheckAccessControls.PRIVATE_OVERRIDE,\n+          CheckAccessControls.VISIBILITY_MISMATCH);\n \n   public static DiagnosticGroup CONSTANT_PROPERTY = DiagnosticGroups\n       .registerGroup(\"constantProperty\",\n-          new DiagnosticGroup(\n-              CheckAccessControls.CONST_PROPERTY_REASSIGNED_VALUE));\n+          CheckAccessControls.CONST_PROPERTY_REASSIGNED_VALUE);\n \n   public static DiagnosticGroup NON_STANDARD_JSDOC =\n-    DiagnosticGroups.registerGroup(\"nonStandardJsDocs\",\n-          new DiagnosticGroup(RhinoErrorReporter.BAD_JSDOC_ANNOTATION));\n+      DiagnosticGroups.registerGroup(\"nonStandardJsDocs\",\n+          RhinoErrorReporter.BAD_JSDOC_ANNOTATION);\n \n   public static DiagnosticGroup ACCESS_CONTROLS =\n       DiagnosticGroups.registerGroup(\"accessControls\",\n-          new DiagnosticGroup(DEPRECATED, VISIBILITY));\n+          DEPRECATED, VISIBILITY);\n \n   public static DiagnosticGroup INVALID_CASTS = DiagnosticGroups\n       .registerGroup(\"invalidCasts\",\n-          new DiagnosticGroup(TypeValidator.INVALID_CAST));\n+          TypeValidator.INVALID_CAST);\n \n   public static DiagnosticGroup FILEOVERVIEW_JSDOC =\n       DiagnosticGroups.registerGroup(\"fileoverviewTags\",\n-          new DiagnosticGroup(RhinoErrorReporter.EXTRA_FILEOVERVIEW));\n+          RhinoErrorReporter.EXTRA_FILEOVERVIEW);\n \n   public static DiagnosticGroup STRICT_MODULE_DEP_CHECK =\n       DiagnosticGroups.registerGroup(\"strictModuleDepCheck\",\n-          new DiagnosticGroup(VarCheck.STRICT_MODULE_DEP_ERROR,\n-                              CheckGlobalNames.STRICT_MODULE_DEP_QNAME));\n+          VarCheck.STRICT_MODULE_DEP_ERROR,\n+          CheckGlobalNames.STRICT_MODULE_DEP_QNAME);\n \n   public static DiagnosticGroup EXTERNS_VALIDATION =\n       DiagnosticGroups.registerGroup(\"externsValidation\",\n-          new DiagnosticGroup(VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR,\n-                              VarCheck.UNDEFINED_EXTERN_VAR_ERROR));\n+          VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR,\n+          VarCheck.UNDEFINED_EXTERN_VAR_ERROR);\n \n   public static DiagnosticGroup AMBIGUOUS_FUNCTION_DECL =\n       DiagnosticGroups.registerGroup(\"ambiguousFunctionDecl\",\n-          new DiagnosticGroup(VariableReferenceCheck.AMBIGUOUS_FUNCTION_DECL));\n+          VariableReferenceCheck.AMBIGUOUS_FUNCTION_DECL);\n \n   public static DiagnosticGroup UNKNOWN_DEFINES =\n       DiagnosticGroups.registerGroup(\"unknownDefines\",\n-          new DiagnosticGroup(ProcessDefines.UNKNOWN_DEFINE_WARNING));\n+          ProcessDefines.UNKNOWN_DEFINE_WARNING);\n \n   public static DiagnosticGroup TWEAKS =\n       DiagnosticGroups.registerGroup(\"tweakValidation\",\n-          new DiagnosticGroup(\n-              ProcessTweaks.INVALID_TWEAK_DEFAULT_VALUE_WARNING,\n-              ProcessTweaks.TWEAK_WRONG_GETTER_TYPE_WARNING,\n-              ProcessTweaks.UNKNOWN_TWEAK_WARNING));\n+          ProcessTweaks.INVALID_TWEAK_DEFAULT_VALUE_WARNING,\n+          ProcessTweaks.TWEAK_WRONG_GETTER_TYPE_WARNING,\n+          ProcessTweaks.UNKNOWN_TWEAK_WARNING);\n \n   public static DiagnosticGroup MISSING_PROPERTIES =\n       DiagnosticGroups.registerGroup(\"missingProperties\",\n-          new DiagnosticGroup(TypeCheck.INEXISTENT_PROPERTY));\n+          TypeCheck.INEXISTENT_PROPERTY);\n \n   // TODO: add more IE specific checks here.\n   public static DiagnosticGroup INTERNET_EXPLORER_CHECKS =\n       DiagnosticGroups.registerGroup(\"internetExplorerChecks\",\n-          new DiagnosticGroup(RhinoErrorReporter.TRAILING_COMMA));\n+          RhinoErrorReporter.TRAILING_COMMA);\n \n   public static DiagnosticGroup UNDEFINED_VARIABLES =\n       DiagnosticGroups.registerGroup(\"undefinedVars\",\n-          new DiagnosticGroup(VarCheck.UNDEFINED_VAR_ERROR));\n+          VarCheck.UNDEFINED_VAR_ERROR);\n \n   public static DiagnosticGroup CHECK_REGEXP =\n       DiagnosticGroups.registerGroup(\"checkRegExp\",\n-          new DiagnosticGroup(\n-              CheckRegExp.REGEXP_REFERENCE));\n+          CheckRegExp.REGEXP_REFERENCE);\n \n   public static DiagnosticGroup CHECK_TYPES =\n       DiagnosticGroups.registerGroup(\"checkTypes\",\n-          new DiagnosticGroup(\n-              TypeValidator.ALL_DIAGNOSTICS,\n-              TypeCheck.ALL_DIAGNOSTICS));\n+          TypeValidator.ALL_DIAGNOSTICS,\n+          TypeCheck.ALL_DIAGNOSTICS);\n \n   public static DiagnosticGroup CHECK_VARIABLES =\n       DiagnosticGroups.registerGroup(\"checkVars\",\n-          new DiagnosticGroup(\n-              VarCheck.UNDEFINED_VAR_ERROR,\n-              SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR));\n+          VarCheck.UNDEFINED_VAR_ERROR,\n+          SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);\n \n   public static DiagnosticGroup CHECK_USELESS_CODE =\n       DiagnosticGroups.registerGroup(\"uselessCode\",\n-          new DiagnosticGroup(\n-              CheckSideEffects.USELESS_CODE_ERROR,\n-              CheckUnreachableCode.UNREACHABLE_CODE));\n+          CheckSideEffects.USELESS_CODE_ERROR,\n+          CheckUnreachableCode.UNREACHABLE_CODE);\n \n   public static DiagnosticGroup TYPE_INVALIDATION =\n     DiagnosticGroups.registerGroup(\"typeInvalidation\",\n-        new DiagnosticGroup(\n-            DisambiguateProperties.Warnings.INVALIDATION));\n+        DisambiguateProperties.Warnings.INVALIDATION);\n \n   /**\n    * Adds warning levels by name.", "timestamp": 1301955886, "metainfo": ""}