{"sha": "fcccf543e85a214f0948d1ac5cab3fa05363e845", "log": "Create new command-line parsers so that jscomp_off, jscomp_warning jscomp_error get interpreted in the correct order relative to one another. Fixes issue 407  R=zhuyi,acleung DELTA=239  (181 added, 33 deleted, 25 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1281   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n       throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n \n-    diagnosticGroups.setWarningLevels(\n-        options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(\n-        options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(\n-        options, config.jscompOff, CheckLevel.OFF);\n+    if (config.warningGuards != null) {\n+      for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n+        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n+      }\n+    }\n \n     createDefineOrTweakReplacements(config.define, options, false);\n \n       return this;\n     }\n \n-    private final List<String> jscompError = Lists.newArrayList();\n-\n-    /**\n-     * Make the named class of warnings an error.\n-     */\n-    CommandLineConfig setJscompError(List<String> jscompError) {\n-      this.jscompError.clear();\n-      this.jscompError.addAll(jscompError);\n-      return this;\n-    }\n-\n-    private final List<String> jscompWarning = Lists.newArrayList();\n-\n-    /**\n-     * Make the named class of warnings a normal warning.\n-     */\n-    CommandLineConfig setJscompWarning(List<String> jscompWarning) {\n-      this.jscompWarning.clear();\n-      this.jscompWarning.addAll(jscompWarning);\n-      return this;\n-    }\n-\n-    private final List<String> jscompOff = Lists.newArrayList();\n-\n-    /**\n-     * Turn off the named class of warnings.\n-     */\n-    CommandLineConfig setJscompOff(List<String> jscompOff) {\n-      this.jscompOff.clear();\n-      this.jscompOff.addAll(jscompOff);\n+    private WarningGuardSpec warningGuards = null;\n+\n+    /**\n+     * Add warning guards.\n+     */\n+    CommandLineConfig setWarningGuardSpec(WarningGuardSpec spec) {\n+      this.warningGuards = spec;\n       return this;\n     }\n \n       return this;\n     }\n   }\n+\n+  /**\n+   * A little helper class to make it easier to collect warning types\n+   * from --jscomp_error, --jscomp_warning, and --jscomp_off.\n+   */\n+  protected static class WarningGuardSpec {\n+    private static class Entry {\n+      private final CheckLevel level;\n+      private final String groupName;\n+\n+      private Entry(CheckLevel level, String groupName) {\n+        this.level = level;\n+        this.groupName = groupName;\n+      }\n+    }\n+\n+    // The entries, in the order that they were added.\n+    private final List<Entry> entries = Lists.newArrayList();\n+\n+    protected void add(CheckLevel level, String groupName) {\n+      entries.add(new Entry(level, groupName));\n+    }\n+\n+    protected void clear() {\n+      entries.clear();\n+    }\n+  }\n }\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n import com.google.common.collect.Sets;\n import com.google.common.io.Files;\n import com.google.common.io.LimitInputStream;\n+import com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec;\n \n import org.kohsuke.args4j.CmdLineException;\n import org.kohsuke.args4j.CmdLineParser;\n import org.kohsuke.args4j.spi.OptionHandler;\n import org.kohsuke.args4j.spi.Parameters;\n import org.kohsuke.args4j.spi.Setter;\n+import org.kohsuke.args4j.spi.StringOptionHandler;\n \n import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.PrintStream;\n+import java.nio.charset.Charset;\n import java.util.List;\n import java.util.Map;\n import java.util.ResourceBundle;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipInputStream;\n \n-import java.nio.charset.Charset;\n-\n /**\n  * CommandLineRunner translates flags into Java API calls on the Compiler.\n  *\n  *   }\n  * }\n  * </pre>\n+ *\n+ * This class is totally not thread-safe.\n+ *\n  * @author bolinfest@google.com (Michael Bolin)\n  */\n public class CommandLineRunner extends\n     AbstractCommandLineRunner<Compiler, CompilerOptions> {\n-\n+  // I don't really care about unchecked warnings in this class.\n+  @SuppressWarnings(\"unchecked\")\n   private static class Flags {\n+    private static final WarningGuardSpec warningGuardSpec =\n+        new WarningGuardSpec();\n+\n     @Option(name = \"--help\",\n         handler = BooleanOptionHandler.class,\n         usage = \"Displays this message\")\n     private String create_source_map = \"\";\n \n     @Option(name = \"--jscomp_error\",\n+        handler = WarningGuardErrorOptionHandler.class,\n         usage = \"Make the named class of warnings an error. Options:\" +\n         DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n     private List<String> jscomp_error = Lists.newArrayList();\n \n     @Option(name = \"--jscomp_warning\",\n+        handler = WarningGuardWarningOptionHandler.class,\n         usage = \"Make the named class of warnings a normal warning. \" +\n         \"Options:\" + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n-    private List<String> jscomp_warning =  Lists.newArrayList();\n+    private List<String> jscomp_warning = Lists.newArrayList();\n \n     @Option(name = \"--jscomp_off\",\n+        handler = WarningGuardOffOptionHandler.class,\n         usage = \"Turn off the named class of warnings. Options:\" +\n         DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n     private List<String> jscomp_off = Lists.newArrayList();\n         return null;\n       }\n     }\n+\n+    // Our own parser for warning guards that preserves the original order\n+    // of the flags.\n+    public static class WarningGuardErrorOptionHandler\n+        extends StringOptionHandler {\n+      public WarningGuardErrorOptionHandler(\n+          CmdLineParser parser, OptionDef option,\n+          Setter<? super String> setter) {\n+        super(parser, option, new WarningGuardSetter(setter, CheckLevel.ERROR));\n+      }\n+    }\n+\n+    public static class WarningGuardWarningOptionHandler\n+        extends StringOptionHandler {\n+      public WarningGuardWarningOptionHandler(\n+          CmdLineParser parser, OptionDef option,\n+          Setter<? super String> setter) {\n+        super(parser, option,\n+            new WarningGuardSetter(setter, CheckLevel.WARNING));\n+      }\n+    }\n+\n+    public static class WarningGuardOffOptionHandler\n+        extends StringOptionHandler {\n+      public WarningGuardOffOptionHandler(\n+          CmdLineParser parser, OptionDef option,\n+          Setter<? super String> setter) {\n+        super(parser, option, new WarningGuardSetter(setter, CheckLevel.OFF));\n+      }\n+    }\n+\n+    private static class WarningGuardSetter implements Setter {\n+      private final Setter proxy;\n+      private final CheckLevel level;\n+\n+      private WarningGuardSetter(Setter proxy, CheckLevel level) {\n+        this.proxy = proxy;\n+        this.level = level;\n+      }\n+\n+      @Override public boolean isMultiValued() { return proxy.isMultiValued(); }\n+\n+      @Override public Class getType() { return proxy.getType(); }\n+\n+      @Override public void addValue(Object value) throws CmdLineException {\n+        proxy.addValue((String) value);\n+        warningGuardSpec.add(level, (String) value);\n+      }\n+    }\n   }\n \n   /**\n     List<String> processedFileArgs\n         = processArgs(argsInFile.toArray(new String[] {}));\n     CmdLineParser parserFileArgs = new CmdLineParser(flags);\n+    Flags.warningGuardSpec.clear();\n     parserFileArgs.parseArgument(processedFileArgs.toArray(new String[] {}));\n \n     // Currently we are not supporting this (prevent direct/indirect loops)\n     List<String> processedArgs = processArgs(args);\n \n     CmdLineParser parser = new CmdLineParser(flags);\n+    Flags.warningGuardSpec.clear();\n     isConfigValid = true;\n     try {\n       parser.parseArgument(processedArgs.toArray(new String[] {}));\n           .setModuleWrapper(flags.module_wrapper)\n           .setModuleOutputPathPrefix(flags.module_output_path_prefix)\n           .setCreateSourceMap(flags.create_source_map)\n-          .setJscompError(flags.jscomp_error)\n-          .setJscompWarning(flags.jscomp_warning)\n-          .setJscompOff(flags.jscomp_off)\n+          .setWarningGuardSpec(Flags.warningGuardSpec)\n           .setDefine(flags.define)\n           .setCharset(flags.charset)\n           .setManageClosureDependencies(flags.manage_closure_dependencies)\n--- a/src/com/google/javascript/jscomp/DiagnosticGroups.java\n+++ b/src/com/google/javascript/jscomp/DiagnosticGroups.java\n import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.Maps;\n \n-import java.util.List;\n import java.util.Map;\n \n /**\n   /**\n    * Adds warning levels by name.\n    */\n-  void setWarningLevels(CompilerOptions options,\n-      List<String> diagnosticGroups, CheckLevel level) {\n-    for (String name : diagnosticGroups) {\n-      DiagnosticGroup group = forName(name);\n-      Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n-      options.setWarningLevel(group, level);\n-    }\n+  void setWarningLevel(CompilerOptions options,\n+      String name, CheckLevel level) {\n+    DiagnosticGroup group = forName(name);\n+    Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n+    options.setWarningLevel(group, level);\n   }\n }\n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n     super.tearDown();\n   }\n \n+  public void testWarningGuardOrdering1() {\n+    args.add(\"--jscomp_error=globalThis\");\n+    args.add(\"--jscomp_off=globalThis\");\n+    testSame(\"function f() { this.a = 3; }\");\n+  }\n+\n+  public void testWarningGuardOrdering2() {\n+    args.add(\"--jscomp_off=globalThis\");\n+    args.add(\"--jscomp_error=globalThis\");\n+    test(\"function f() { this.a = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n+  }\n+\n+  public void testWarningGuardOrdering3() {\n+    args.add(\"--jscomp_warning=globalThis\");\n+    args.add(\"--jscomp_off=globalThis\");\n+    testSame(\"function f() { this.a = 3; }\");\n+  }\n+\n+  public void testWarningGuardOrdering4() {\n+    args.add(\"--jscomp_off=globalThis\");\n+    args.add(\"--jscomp_warning=globalThis\");\n+    test(\"function f() { this.a = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n+  }\n+\n   public void testCheckGlobalThisOffByDefault() {\n     testSame(\"function f() { this.a = 3; }\");\n   }", "timestamp": 1302113790, "metainfo": ""}