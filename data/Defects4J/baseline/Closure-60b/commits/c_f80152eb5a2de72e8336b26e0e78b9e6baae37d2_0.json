{"sha": "f80152eb5a2de72e8336b26e0e78b9e6baae37d2", "log": "Make the global-this a true subtype of window. Declare 'goog' at scope-declaration time.   R=johnlenz DELTA=166  (126 added, 11 deleted, 29 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=784   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n import static com.google.javascript.rhino.jstype.JSTypeNative.ERROR_FUNCTION_TYPE;\n import static com.google.javascript.rhino.jstype.JSTypeNative.EVAL_ERROR_FUNCTION_TYPE;\n import static com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_FUNCTION_TYPE;\n+import static com.google.javascript.rhino.jstype.JSTypeNative.GLOBAL_THIS;\n import static com.google.javascript.rhino.jstype.JSTypeNative.NO_OBJECT_TYPE;\n import static com.google.javascript.rhino.jstype.JSTypeNative.NO_TYPE;\n import static com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE;\n      *\n      * @param n the defining NAME or GETPROP or object literal key node.\n      * @param parent the {@code n}'s parent.\n-     * @param name The name that this should be known by.\n+     * @param variableName The name that this should be known by.\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      * @param inferred Whether the type is inferred or declared.\n         JSType type, boolean inferred) {\n       Preconditions.checkArgument(!variableName.isEmpty());\n \n+      boolean isGlobalVar = n.getType() == Token.NAME && scope.isGlobal();\n       boolean shouldDeclareOnGlobalThis =\n-          n.getType() == Token.NAME && scope.isGlobal() &&\n+          isGlobalVar &&\n           (parent.getType() == Token.VAR ||\n            parent.getType() == Token.FUNCTION);\n \n \n         if (shouldDeclareOnGlobalThis) {\n           ObjectType globalThis =\n-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+              typeRegistry.getNativeObjectType(GLOBAL_THIS);\n           if (inferred) {\n             globalThis.defineInferredProperty(variableName,\n                 type == null ?\n           }\n         }\n       }\n+\n+      if (isGlobalVar && \"Window\".equals(variableName)\n+          && type instanceof FunctionType) {\n+        FunctionType globalThisCtor =\n+            typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();\n+        globalThisCtor.getInstanceType().clearCachedValues();\n+        globalThisCtor.getPrototype().clearCachedValues();\n+        globalThisCtor\n+            .setPrototypeBasedOn(((FunctionType) type).getInstanceType());\n+      }\n     }\n \n     /**\n         } else if (info.isConstructor() || info.isInterface()) {\n           return createFunctionTypeFromNodes(\n               rValue, lValue.getQualifiedName(), info, lValue);\n-        } else if (info.isConstant() && rValue != null\n-            && rValue.getJSType() != null\n-            && !rValue.getJSType().isUnknownType()) {\n-          return rValue.getJSType();\n+        } else {\n+          // Check if this is constant, and if it has a known type.\n+          if (info.isConstant()) {\n+            JSType knownType = null;\n+            if (rValue != null) {\n+              if (rValue.getJSType() != null\n+                  && !rValue.getJSType().isUnknownType()) {\n+                return rValue.getJSType();\n+              } else if (rValue.getType() == Token.OR) {\n+                // Check for a very specific JS idiom:\n+                // var x = x || TYPE;\n+                // This is used by Closure's base namespace for esoteric\n+                // reasons.\n+                Node firstClause = rValue.getFirstChild();\n+                Node secondClause = firstClause.getNext();\n+                boolean namesMatch = firstClause.getType() == Token.NAME\n+                    && lValue.getType() == Token.NAME\n+                    && firstClause.getString().equals(lValue.getString());\n+                if (namesMatch && secondClause.getJSType() != null\n+                    && !secondClause.getJSType().isUnknownType()) {\n+                  return secondClause.getJSType();\n+                }\n+              }\n+            }\n+          }\n         }\n       }\n \n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n     return typeOfThis;\n   }\n \n-  /** Sets the instance type. This should only be used for special native types. */\n+  /**\n+   * Sets the instance type. This should only be used for special\n+   * native types.\n+   */\n   void setInstanceType(ObjectType instanceType) {\n     typeOfThis = instanceType;\n   }\n   }\n \n   @Override\n-  void clearCachedValues() {\n+  public void clearCachedValues() {\n     super.clearCachedValues();\n \n     if (subTypes != null) {\n--- a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n+++ b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n             null, null, true, true);\n     ObjectType booleanPrototype = BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype();\n     registerNativeType(\n-        JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE, BOOLEAN_OBJECT_FUNCTION_TYPE);\n+        JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE,\n+        BOOLEAN_OBJECT_FUNCTION_TYPE);\n \n     ObjectType BOOLEAN_OBJECT_TYPE =\n         BOOLEAN_OBJECT_FUNCTION_TYPE.getInstanceType();\n         new ErrorFunctionType(this, \"ReferenceError\");\n     REFERENCE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n     registerNativeType(\n-        JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE, REFERENCE_ERROR_FUNCTION_TYPE);\n+        JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE,\n+        REFERENCE_ERROR_FUNCTION_TYPE);\n \n     ObjectType REFERENCE_ERROR_TYPE =\n         REFERENCE_ERROR_FUNCTION_TYPE.getInstanceType();\n     registerNativeType(JSTypeNative.LEAST_FUNCTION_TYPE, LEAST_FUNCTION_TYPE);\n \n     // the 'this' object in the global scope\n-    ObjectType GLOBAL_THIS = createObjectType(\"global this\", null,\n-        UNKNOWN_TYPE /* to be resolved later */);\n+    FunctionType GLOBAL_THIS_CTOR =\n+        new FunctionType(this, \"global this\", null,\n+            createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE),\n+            null, null, true, true);\n+    ObjectType GLOBAL_THIS = GLOBAL_THIS_CTOR.getInstanceType();\n     registerNativeType(JSTypeNative.GLOBAL_THIS, GLOBAL_THIS);\n \n     // greatest function type, i.e. (NoType...) -> All\n   }\n \n   /**\n-   * Flushes out the current resolved and unresovled Named Types from the type registry.\n-   * This is intended to be used ONLY before a compile is run.\n+   * Flushes out the current resolved and unresovled Named Types from\n+   * the type registry.  This is intended to be used ONLY before a\n+   * compile is run.\n    */\n   public void clearNamedTypes() {\n     resolvedNamedTypes.clear();\n--- a/src/com/google/javascript/rhino/jstype/ObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/ObjectType.java\n     return !unknown;\n   }\n \n-  void clearCachedValues() {\n+  /**\n+   * Clear cached values. Should be called before making changes to a prototype\n+   * that may have been changed since creation.\n+   */\n+  public void clearCachedValues() {\n     unknown = true;\n   }\n \n--- a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n         \"/** @param {string} msg */ \" +\n         \"Bindow.prototype.alert = function(msg) {};\" +\n         \"this.alert = 3;\" +\n-        \"(new Bindow()).alert(this.alert)\",\n-        \"actual parameter 1 of Bindow.prototype.alert \" +\n+        \"(new Bindow()).alert(this.alert)\");\n+  }\n+\n+  public void testGlobalThis3() throws Exception {\n+    testTypes(\n+        \"/** @param {string} msg */ \" +\n+        \"function alert(msg) {};\" +\n+        \"this.alert(3);\",\n+        \"actual parameter 1 of global this.alert \" +\n         \"does not match formal parameter\\n\" +\n         \"found   : number\\n\" +\n         \"required: string\");\n   }\n \n-  public void testGlobalThis3() throws Exception {\n-    testTypes(\n-        \"/** @param {string} msg */ \" +\n-        \"function alert(msg) {};\" +\n-        \"this.alert(3);\",\n-        \"actual parameter 1 of this.alert \" +\n-        \"does not match formal parameter\\n\" +\n-        \"found   : number\\n\" +\n-        \"required: string\");\n-  }\n-\n   public void testGlobalThis4() throws Exception {\n     testTypes(\n         \"/** @param {string} msg */ \" +\n         \"var alert = function(msg) {};\" +\n         \"this.alert(3);\",\n-        \"actual parameter 1 of this.alert \" +\n+        \"actual parameter 1 of global this.alert \" +\n         \"does not match formal parameter\\n\" +\n         \"found   : number\\n\" +\n         \"required: string\");\n         \"  var alert = function(msg) {};\" +\n         \"}\" +\n         \"this.alert(3);\",\n-        \"Property alert never defined on this\");\n+        \"Property alert never defined on global this\");\n   }\n \n   public void testGlobalThis6() throws Exception {\n--- a/test/com/google/javascript/jscomp/ReplaceStringsTest.java\n+++ b/test/com/google/javascript/jscomp/ReplaceStringsTest.java\n \n   public void testLoggerOnThis() {\n     testDebugStrings(\n-        \"this.logger_ = goog.debug.Logger.getLogger('foo');\" +\n-        \"this.logger_.info('Some message');\",\n-        \"this.logger_ = goog.debug.Logger.getLogger('a');\" +\n-        \"this.logger_.info('b');\",\n+        \"function f() {\" +\n+        \"  this.logger_ = goog.debug.Logger.getLogger('foo');\" +\n+        \"  this.logger_.info('Some message');\" +\n+        \"}\",\n+        \"function f() {\" +\n+        \"  this.logger_ = goog.debug.Logger.getLogger('a');\" +\n+        \"  this.logger_.info('b');\" +\n+        \"}\",\n         new String[] {\n             \"a\", \"foo\",\n             \"b\", \"Some message\"});\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n   }\n \n   public void testGlobalThis2() throws Exception {\n+    // this.alert = 3 doesn't count as a declaration, so this isn't a warning.\n     testTypes(\"/** @constructor */ function Bindow() {}\" +\n         \"/** @param {string} msg */ \" +\n         \"Bindow.prototype.alert = function(msg) {};\" +\n         \"this.alert = 3;\" +\n-        \"(new Bindow()).alert(this.alert)\",\n+        \"(new Bindow()).alert(this.alert)\");\n+  }\n+\n+\n+  public void testGlobalThis2b() throws Exception {\n+    testTypes(\"/** @constructor */ function Bindow() {}\" +\n+        \"/** @param {string} msg */ \" +\n+        \"Bindow.prototype.alert = function(msg) {};\" +\n+        \"/** @return {number} */ this.alert = function() { return 3; };\" +\n+        \"(new Bindow()).alert(this.alert())\",\n         \"actual parameter 1 of Bindow.prototype.alert \" +\n         \"does not match formal parameter\\n\" +\n         \"found   : number\\n\" +\n         \"/** @param {string} msg */ \" +\n         \"function alert(msg) {};\" +\n         \"this.alert(3);\",\n-        \"actual parameter 1 of this.alert \" +\n+        \"actual parameter 1 of global this.alert \" +\n         \"does not match formal parameter\\n\" +\n         \"found   : number\\n\" +\n         \"required: string\");\n         \"/** @param {string} msg */ \" +\n         \"var alert = function(msg) {};\" +\n         \"this.alert(3);\",\n-        \"actual parameter 1 of this.alert \" +\n+        \"actual parameter 1 of global this.alert \" +\n         \"does not match formal parameter\\n\" +\n         \"found   : number\\n\" +\n         \"required: string\");\n         \"  var alert = function(msg) {};\" +\n         \"}\" +\n         \"this.alert(3);\",\n-        \"Property alert never defined on this\");\n+        \"Property alert never defined on global this\");\n   }\n \n   public void testGlobalThis6() throws Exception {\n         \"var x = 3;\" +\n         \"x = 'msg';\" +\n         \"this.alert(this.x);\");\n+  }\n+\n+  public void testGlobalThis7() throws Exception {\n+    testTypes(\n+        \"/** @constructor */ function Window() {}\" +\n+        \"/** @param {Window} msg */ \" +\n+        \"var foo = function(msg) {};\" +\n+        \"foo(this);\");\n+  }\n+\n+  public void testGlobalThis8() throws Exception {\n+    testTypes(\n+        \"/** @constructor */ function Window() {}\" +\n+        \"/** @param {number} msg */ \" +\n+        \"var foo = function(msg) {};\" +\n+        \"foo(this);\",\n+        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n+        \"found   : global this\\n\" +\n+        \"required: number\");\n   }\n \n   public void testControlFlowRestrictsType1() throws Exception {\n--- a/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java\n+++ b/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java\n     assertTrue(fooType.isPropertyTypeDeclared(\"z\"));\n   }\n \n+  public void testDeclaredConstType5() throws Exception {\n+    testSame(\n+        \"/** @const */ var goog = goog || {};\" +\n+        \"/** @const */ var foo = goog || {};\" +\n+        \"function f() { var y = goog; var z = foo; }\");\n+    JSType yType = lastLocalScope.getVar(\"y\").getType();\n+    assertEquals(\"{}\", yType.toString());\n+\n+    JSType zType = lastLocalScope.getVar(\"z\").getType();\n+    assertEquals(\"?\", zType.toString());\n+  }\n+\n   public void testBadCtorInit1() throws Exception {\n     testSame(\"/** @constructor */ var f;\", CTOR_INITIALIZER);\n   }", "timestamp": 1299546482, "metainfo": ""}