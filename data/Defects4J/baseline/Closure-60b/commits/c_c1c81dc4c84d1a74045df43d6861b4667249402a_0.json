{"sha": "c1c81dc4c84d1a74045df43d6861b4667249402a", "log": "Expose more if-then to && folding opportunities.  R=johnlenz DELTA=16  (5 added, 0 deleted, 11 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=430   ", "commit": "\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n         }\n \n         // if(x)foo(); -> x&&foo();\n-        if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) ||\n+        if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&\n             isLowerPrecedenceInExpression(expr.getFirstChild(),\n                 AND_PRECEDENCE)) {\n-          // One additional set of parentheses isn't worth it.\n+          // One additional set of parentheses is worth the change even if\n+          // there is no immediate code size win. However, two extra pair of\n+          // {}, we would have to think twice. (unless we know for sure the\n+          // we can further optimize its parent.\n           return n;\n         }\n \n--- a/test/com/google/javascript/jscomp/PeepholeIntegrationTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeIntegrationTest.java\n   @Override\n   protected int getNumRepetitions() {\n     // Reduce this to 2 if we get better expression evaluators.\n-    return 2;\n+    return 4;\n   }\n \n   private void foldSame(String js) {\n     fold(\"if(x || 3) z()\", \"z()\");\n     fold(\"if(x || false) z()\", \"x&&z()\");\n     test(\"if(x==y && false) z()\", \"\");\n-    fold(\"if(y() || x || 3) z()\", \"y();z()\");\n+    // TODO(user): This can be further optimized.\n+    fold(\"if(y() || x || 3) z()\", \"(y()||1)&&z()\");\n   }\n \n   public void testFoldBitwiseOpStringCompareIntegration() {\n     fold(\"(x && true) && y()\", \"x && y()\");\n     fold(\"(x && false) && y()\", \"\");\n     fold(\"a = x || false ? b : c\", \"a=x?b:c\");\n-    fold(\"do {x()} while((x && false) && y())\", \"{x()}\");\n+    fold(\"do {x()} while((x && false) && y())\", \"x()\");\n   }\n }\n--- a/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java\n \n     // Try it out with properties and methods\n     fold(\"function(){if(x){a.b=1}}\", \"function(){if(x)a.b=1}\");\n-    fold(\"function(){if(x){a.b*=1}}\", \"function(){if(x)a.b*=1}\");\n-    fold(\"function(){if(x){a.b+=1}}\", \"function(){if(x)a.b+=1}\");\n+    fold(\"function(){if(x){a.b*=1}}\", \"function(){x&&(a.b*=1)}\");\n+    fold(\"function(){if(x){a.b+=1}}\", \"function(){x&&(a.b+=1)}\");\n     fold(\"function(){if(x){++a.b}}\", \"function(){x&&++a.b}\");\n     fold(\"function(){if(x){a.foo()}}\", \"function(){x&&a.foo()}\");\n \n     fold(\"function(){if(x){if(y)foo()}}\",\n          \"function(){x&&y&&foo()}\");\n     fold(\"function(){if(x){if(y)foo();else bar()}}\",\n-         \"function(){if(x)y?foo():bar()}\");\n+         \"function(){x&&(y?foo():bar())}\");\n     fold(\"function(){if(x){if(y)foo()}else bar()}\",\n          \"function(){if(x)y&&foo();else bar()}\");\n     fold(\"function(){if(x){if(y)foo();else bar()}else{baz()}}\",\n   public void testNotCond() {\n     fold(\"function(){if(!x)foo()}\", \"function(){x||foo()}\");\n     fold(\"function(){if(!x)b=1}\", \"function(){x||(b=1)}\");\n-    fold(\"if(!x)z=1;else if(y)z=2\", \"if(x){if(y)z=2}else z=1\");\n+    fold(\"if(!x)z=1;else if(y)z=2\", \"if(x){y&&(z=2)}else z=1\");\n     foldSame(\"function(){if(!(x=1))a.b=1}\");\n   }\n \n   public void testAndParenthesesCount() {\n-    foldSame(\"function(){if(x||y)a.foo()}\");\n+    fold(\"function(){if(x||y)a.foo()}\", \"function(){(x||y)&&a.foo()}\");\n+    foldSame(\"function(){if(x()||y()){x()||y()}}\");\n   }\n \n   public void testFoldLogicalOpStringCompare() {\n     fold(\"if(x) y=1;else var y=2\", \"var y=x?1:2\");\n \n     foldSame(\"if(x) var y = 1; z = 2\");\n-    foldSame(\"if(x) y = 1; var z = 2\");\n+    foldSame(\"if(x||y) y = 1; var z = 2\");\n \n     foldSame(\"if(x) { var y = 1; print(y)} else y = 2 \");\n     foldSame(\"if(x) var y = 1; else {y = 2; print(y)}\");", "timestamp": 1296842766, "metainfo": ""}