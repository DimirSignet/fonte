{"sha": "74121ba8a381f96a209260617f969ef71900bff7", "log": "Ensure that the function information map preserves the original source names.   R=johnlenz DELTA=229  (136 added, 66 deleted, 27 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=162002   ", "commit": "\n--- a/src/com/google/javascript/jscomp/RecordFunctionInformation.java\n+++ b/src/com/google/javascript/jscomp/RecordFunctionInformation.java\n     JSModule module = t.getModule();\n     mapBuilder.addEntry(FunctionInformationMap.Entry.newBuilder()\n       .setId(id)\n-      .setSourceName(t.getSourceName())\n+      .setSourceName(NodeUtil.getSourceName(n))\n       .setLineNumber(n.getLineno())\n       .setModuleName(moduleGraph == null ? \"\" : module.getName())\n       .setSize(compiledSource.length())\n--- a/test/com/google/javascript/jscomp/RecordFunctionInformationTest.java\n+++ b/test/com/google/javascript/jscomp/RecordFunctionInformationTest.java\n  *\n  */\n public class RecordFunctionInformationTest extends TestCase {\n+\n+  public void testFunction() {\n+    String g = \"function g(){}\";\n+    String fAndG = \"function f(){\" + g + \"}\";\n+    String js = \"var h=\" + fAndG + \";h()\";\n+\n+    FunctionInformationMap.Builder expected =\n+        FunctionInformationMap.newBuilder();\n+    expected.addEntry(\n+        FunctionInformationMap.Entry.newBuilder()\n+        .setId(0)\n+        .setSourceName(\"testcode\")\n+        .setLineNumber(1)\n+        .setModuleName(\"\")\n+        .setSize(g.length())\n+        .setName(\"f::g\")\n+        .setCompiledSource(g).build());\n+    expected.addEntry(\n+        FunctionInformationMap.Entry.newBuilder()\n+        .setId(1)\n+        .setSourceName(\"testcode\")\n+        .setLineNumber(1)\n+        .setModuleName(\"\")\n+        .setSize(fAndG.length())\n+        .setName(\"f\")\n+        .setCompiledSource(fAndG).build());\n+    expected.addModule(\n+        FunctionInformationMap.Module.newBuilder()\n+        .setName(\"\")\n+        .setCompiledSource(js + \";\").build());\n+\n+    test(js, expected.build());\n+  }\n+\n+  public void testModule() {\n+    String g = \"function g(){}\";\n+    String fAndG = \"function f(){\" + g + \"}\";\n+    String m0_js = \"var h=\" + fAndG + \";h()\";\n+    String sum = \"function(a,b){return a+b}\";\n+    String m1_js = \"var x=\" + sum + \"(1,2)\";\n+\n+    FunctionInformationMap.Builder expected =\n+        FunctionInformationMap.newBuilder();\n+    expected.addEntry(\n+        FunctionInformationMap.Entry.newBuilder()\n+        .setId(0)\n+        .setSourceName(\"i0\")\n+        .setLineNumber(1)\n+        .setModuleName(\"m0\")\n+        .setSize(g.length())\n+        .setName(\"f::g\")\n+        .setCompiledSource(g).build());\n+    expected.addEntry(\n+        FunctionInformationMap.Entry.newBuilder()\n+        .setId(1)\n+        .setSourceName(\"i0\")\n+        .setLineNumber(1)\n+        .setModuleName(\"m0\")\n+        .setSize(fAndG.length())\n+        .setName(\"f\")\n+        .setCompiledSource(fAndG).build());\n+    expected.addEntry(\n+        FunctionInformationMap.Entry.newBuilder()\n+        .setId(2)\n+        .setSourceName(\"i1\")\n+        .setLineNumber(1)\n+        .setModuleName(\"m1\")\n+        .setSize(sum.length())\n+        .setName(\"<anonymous>\")\n+        .setCompiledSource(sum).build());\n+    expected.addModule(\n+        FunctionInformationMap.Module.newBuilder()\n+        .setName(\"m0\")\n+        .setCompiledSource(m0_js + \";\").build());\n+    expected.addModule(\n+        FunctionInformationMap.Module.newBuilder()\n+        .setName(\"m1\")\n+        .setCompiledSource(m1_js + \";\").build());\n+\n+    test(CompilerTestCase.createModules(m0_js, m1_js), expected.build());\n+  }\n+\n+  public void testMotionPreservesOriginalSourceName() {\n+    String f = \"function f(){}\";\n+    String g = \"function g(){}\";\n+\n+    String m0_before = f + g;\n+    String m1_before = \"\";\n+\n+    JSModule[] modules = CompilerTestCase.createModules(m0_before, m1_before);\n+    Compiler compiler = compilerFor(modules);\n+    Node root = root(compiler);\n+    Node externsRoot = externs(root);\n+    Node mainRoot = main(root);\n+\n+    String m0_after = f;\n+    String m1_after = g;\n+    Node nodeG = mainRoot.getFirstChild().getLastChild();\n+    mainRoot.getFirstChild().removeChild(nodeG);\n+    mainRoot.getLastChild().addChildrenToBack(nodeG.cloneTree());\n+\n+    FunctionInformationMap.Builder expected =\n+      FunctionInformationMap.newBuilder();\n+    expected.addEntry(\n+        FunctionInformationMap.Entry.newBuilder()\n+        .setId(0)\n+        .setSourceName(\"i0\")\n+        .setLineNumber(1)\n+        .setModuleName(\"m0\")\n+        .setSize(g.length())\n+        .setName(\"f\")\n+        .setCompiledSource(f).build());\n+    expected.addEntry(\n+        FunctionInformationMap.Entry.newBuilder()\n+        .setId(1)\n+        .setSourceName(\"i0\")\n+        .setLineNumber(1)\n+        .setModuleName(\"m1\")\n+        .setSize(g.length())\n+        .setName(\"g\")\n+        .setCompiledSource(g).build());\n+    expected.addModule(\n+        FunctionInformationMap.Module.newBuilder()\n+        .setName(\"m0\")\n+        .setCompiledSource(m0_after + \";\").build());\n+    expected.addModule(\n+        FunctionInformationMap.Module.newBuilder()\n+        .setName(\"m1\")\n+        .setCompiledSource(m1_after + \";\").build());\n+\n+    test(compiler, externsRoot, mainRoot, expected.build());\n+  }\n+\n+\n   private void test(String js, FunctionInformationMap expected) {\n     Compiler compiler = new Compiler();\n     compiler.init(new JSSourceFile[] { JSSourceFile.fromCode(\"externs\", \"\") },\n   }\n \n   private void test(JSModule[] modules, FunctionInformationMap expected) {\n-    Compiler compiler = new Compiler();\n-    compiler.init(new JSSourceFile[] { JSSourceFile.fromCode(\"externs\", \"\") },\n-                  modules,\n-                  new CompilerOptions());\n-    test(compiler, expected);\n+    test(compilerFor(modules), expected);\n   }\n \n   private void test(Compiler compiler, FunctionInformationMap expected) {\n-    Node root = compiler.parseInputs();\n-    Node externsRoot = root.getFirstChild();\n-    Node mainRoot = externsRoot.getNext();\n-\n+    Node root = root(compiler);\n+    test(compiler, externs(root), main(root), expected);\n+  }\n+\n+  private void test(Compiler compiler, Node externsRoot, Node mainRoot,\n+      FunctionInformationMap expected) {\n     FunctionNames functionNames = new FunctionNames(compiler);\n     functionNames.process(externsRoot, mainRoot);\n \n         new RecordFunctionInformation(compiler, functionNames);\n     processor.process(externsRoot, mainRoot);\n     FunctionInformationMap result = processor.getMap();\n-    assertTrue(\"\\nExpected: \" + expected.toString() + \"\\nResult: \" +\n-               result.toString() + \"\\n\", result.equals(expected));\n-  }\n-\n-  public void testFunction() {\n-    String g = \"function g(){}\";\n-    String fAndG = \"function f(){\" + g + \"}\";\n-    String js = \"var h=\" + fAndG + \";h()\";\n-\n-    FunctionInformationMap.Builder expected =\n-        FunctionInformationMap.newBuilder();\n-    expected.addEntry(\n-        FunctionInformationMap.Entry.newBuilder()\n-        .setId(0)\n-        .setSourceName(\"testcode\")\n-        .setLineNumber(1)\n-        .setModuleName(\"\")\n-        .setSize(g.length())\n-        .setName(\"f::g\")\n-        .setCompiledSource(g).build());\n-    expected.addEntry(\n-        FunctionInformationMap.Entry.newBuilder()\n-        .setId(1)\n-        .setSourceName(\"testcode\")\n-        .setLineNumber(1)\n-        .setModuleName(\"\")\n-        .setSize(fAndG.length())\n-        .setName(\"f\")\n-        .setCompiledSource(fAndG).build());\n-    expected.addModule(\n-        FunctionInformationMap.Module.newBuilder()\n-        .setName(\"\")\n-        .setCompiledSource(js + \";\").build());\n-\n-    test(js, expected.build());\n-  }\n-\n-  public void testModule() {\n-    String g = \"function g(){}\";\n-    String fAndG = \"function f(){\" + g + \"}\";\n-    String m0_js = \"var h=\" + fAndG + \";h()\";\n-    String sum = \"function(a,b){return a+b}\";\n-    String m1_js = \"var x=\" + sum + \"(1,2)\";\n-\n-    FunctionInformationMap.Builder expected =\n-        FunctionInformationMap.newBuilder();\n-    expected.addEntry(\n-        FunctionInformationMap.Entry.newBuilder()\n-        .setId(0)\n-        .setSourceName(\"i0\")\n-        .setLineNumber(1)\n-        .setModuleName(\"m0\")\n-        .setSize(g.length())\n-        .setName(\"f::g\")\n-        .setCompiledSource(g).build());\n-    expected.addEntry(\n-        FunctionInformationMap.Entry.newBuilder()\n-        .setId(1)\n-        .setSourceName(\"i0\")\n-        .setLineNumber(1)\n-        .setModuleName(\"m0\")\n-        .setSize(fAndG.length())\n-        .setName(\"f\")\n-        .setCompiledSource(fAndG).build());\n-    expected.addEntry(\n-        FunctionInformationMap.Entry.newBuilder()\n-        .setId(2)\n-        .setSourceName(\"i1\")\n-        .setLineNumber(1)\n-        .setModuleName(\"m1\")\n-        .setSize(sum.length())\n-        .setName(\"<anonymous>\")\n-        .setCompiledSource(sum).build());\n-    expected.addModule(\n-        FunctionInformationMap.Module.newBuilder()\n-        .setName(\"m0\")\n-        .setCompiledSource(m0_js + \";\").build());\n-    expected.addModule(\n-        FunctionInformationMap.Module.newBuilder()\n-        .setName(\"m1\")\n-        .setCompiledSource(m1_js + \";\").build());\n-\n-    test(CompilerTestCase.createModules(m0_js, m1_js), expected.build());\n+    assertEquals(expected, result);\n+  }\n+\n+  private Compiler compilerFor(JSModule[] modules) {\n+      Compiler compiler = new Compiler();\n+      compiler.init(new JSSourceFile[] { JSSourceFile.fromCode(\"externs\", \"\") },\n+                    modules,\n+                    new CompilerOptions());\n+      return compiler;\n+  }\n+\n+  private Node root(Compiler compiler) {\n+    return compiler.parseInputs();\n+  }\n+\n+  private Node externs(Node root) {\n+    return root.getFirstChild();\n+  }\n+\n+  private Node main(Node root) {\n+    return root.getFirstChild().getNext();\n   }\n }", "timestamp": 1282164391, "metainfo": ""}