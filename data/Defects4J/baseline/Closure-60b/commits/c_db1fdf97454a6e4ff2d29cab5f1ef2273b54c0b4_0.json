{"sha": "db1fdf97454a6e4ff2d29cab5f1ef2273b54c0b4", "log": "Emit a warning when a private property overrides another private property, with both defined in the ctor. Fixes issue 254    R=zhuyi,pupius DELTA=152  (134 added, 10 deleted, 8 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1860   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n  * control restrictions indicated by JSDoc annotations, like\n  * {@code @private} and {@code @deprecated}.\n  *\n- * There are two parts to this pass:\n- * 1) JSDoc Inference: Attaching the appropriate JSDoc to\n- *    all programmer-defined types and properties.\n- * 2) Access Control Enforcement: Emitting warnings when the code does not\n- *    obey the restrictions attached to JSTypes in step 1.\n- *\n  * Because access control restrictions are attached to type information,\n- * it's important that TypeCheck runs before this pass, so that all types\n- * are correctly resolved and propagated before this pass runs.\n+ * it's important that TypedScopeCreator, TypeInference, and InferJSDocInfo\n+ * all run before this pass. TypedScopeCreator creates and resolves types,\n+ * TypeInference propagates those types across the AST, and InferJSDocInfo\n+ * propagates JSDoc across the types.\n  *\n  * @author nicksantos@google.com (Nick Santos)\n  */\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+      boolean isOverride = parent.getJSDocInfo() != null &&\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n \n--- a/test/com/google/javascript/jscomp/CheckAccessControlsTest.java\n+++ b/test/com/google/javascript/jscomp/CheckAccessControlsTest.java\n       \"/** @constructor \\n * @extends {Foo} */ \" +\n       \"function SubFoo() {};\" +\n       \"SubFoo.prototype.bar_ = function() {};\"\n-    }, null, PRIVATE_OVERRIDE);\n+    }, null, BAD_PRIVATE_PROPERTY_ACCESS);\n   }\n \n   public void testNoPrivateAccessForProperties7() {\n       \"SubFoo.prototype.bar_ = function() {};\",\n       \"SubFoo.prototype.baz = function() { this.bar_(); }\"\n     }, null, BAD_PRIVATE_PROPERTY_ACCESS);\n+  }\n+\n+  public void testNoPrivateAccessForProperties8() {\n+    test(new String[] {\n+      \"/** @constructor */ function Foo() { /** @private */ this.bar_ = 3; }\",\n+      \"/** @constructor \\n * @extends {Foo} */ \" +\n+      \"function SubFoo() { /** @private */ this.bar_ = 3; };\"\n+    }, null, PRIVATE_OVERRIDE);\n   }\n \n   public void testProtectedAccessForProperties1() {", "timestamp": 1305226145, "metainfo": ""}