{"sha": "be0104009f06fafdb7428398d2c8299d13a1df12", "log": "Automated g4 rollback.  *** Reason for rollback ***  Fixed a stack size issue.  *** Original change description ***  Automated g4 rollback.  *** Reason for rollback ***  To investigate why this breaks builds.  *** Original change description ***  Add whitespace only mode support for ES5 getters and setters.  R=acleung DELTA=318  (263 added, 31 deleted, 24 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=87   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AbstractCompiler.java\n+++ b/src/com/google/javascript/jscomp/AbstractCompiler.java\n   abstract boolean isIdeMode();\n \n   /**\n+   * @return Whether the compiler is in ES5Mode.\n+   */\n+  abstract boolean acceptEcmaScript5();\n+\n+  /**\n    * Returns the parser configuration.\n    */\n   abstract Config getParserConfig();\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n         }\n         break;\n \n+      case Token.GET:\n+      case Token.SET:\n+        Preconditions.checkState(n.getParent().getType() == Token.OBJECTLIT);\n+        Preconditions.checkState(childCount == 1);\n+        Preconditions.checkState(first.getType() == Token.FUNCTION);\n+\n+        // Get methods are unnamed\n+        Preconditions.checkState(first.getFirstChild().getString().isEmpty());\n+        if (type == Token.GET) {\n+          // Get methods have no parameters.\n+          Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());\n+          add(\"get \");\n+        } else {\n+          // Set methods have one parameter.\n+          Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());\n+          add(\"set \");\n+        }\n+\n+        // The name is on the GET or SET node.\n+        String name = n.getString();\n+        Node fn = first;\n+        Node parameters = fn.getChildAtIndex(1);\n+        Node body = fn.getLastChild();\n+\n+        // Add the property name.\n+        if (TokenStream.isJSIdentifier(name) &&\n+            // do not encode literally any non-literal characters that were\n+            // unicode escaped.\n+            NodeUtil.isLatin(name)) {\n+          add(name);\n+        } else {\n+          add(jsString(n.getString(), outputCharsetEncoder));\n+        }\n+\n+        add(parameters);\n+        add(body, Context.PRESERVE_BLOCK);\n+        break;\n+\n       case Token.SCRIPT:\n       case Token.BLOCK: {\n         if (n.getClass() != Node.class) {\n             cc.listSeparator();\n           }\n \n-          // Object literal property names don't have to be quoted if they are\n-          // not JavaScript keywords\n-          if (c.getType() == Token.STRING &&\n-              !TokenStream.isKeyword(c.getString()) &&\n-              TokenStream.isJSIdentifier(c.getString()) &&\n-              // do not encode literally any non-literal characters that were\n-              // unicode escaped.\n-              NodeUtil.isLatin(c.getString())) {\n-            add(c.getString());\n+          if (c.getType() == Token.GET || c.getType() == Token.SET) {\n+            add(c);\n           } else {\n-            addExpr(c, 1);\n+            // Object literal property names don't have to be quoted if they are\n+            // not JavaScript keywords\n+            if (c.getType() == Token.STRING &&\n+                !TokenStream.isKeyword(c.getString()) &&\n+                TokenStream.isJSIdentifier(c.getString()) &&\n+                // do not encode literally any non-literal characters that were\n+                // unicode escaped.\n+                NodeUtil.isLatin(c.getString())) {\n+              add(c.getString());\n+            } else {\n+              addExpr(c, 1);\n+            }\n+            add(\":\");\n+            addExpr(c.getFirstChild(), 1);\n           }\n-          add(\":\");\n-          addExpr(c.getFirstChild(), 1);\n         }\n         add(\"}\");\n         if (needsParens) {\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n import com.google.javascript.jscomp.CompilerOptions.DevMode;\n+import com.google.javascript.jscomp.CompilerOptions.LanguageMode;\n import com.google.javascript.jscomp.CompilerOptions.TracerMode;\n import com.google.javascript.jscomp.deps.SortedDependencies.CircularDependencyException;\n import com.google.javascript.jscomp.deps.SortedDependencies.MissingProvideException;\n   }\n \n   @Override\n+  public boolean acceptEcmaScript5() {\n+    return options.languageIn == LanguageMode.ECMASCRIPT5;\n+  }\n+\n+  @Override\n   Config getParserConfig() {\n     if (parserConfig == null) {\n-      parserConfig = ParserRunner.createConfig(isIdeMode());\n+      parserConfig = ParserRunner.createConfig(\n+        isIdeMode(), acceptEcmaScript5());\n     }\n     return parserConfig;\n   }\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n   private static final long serialVersionUID = 7L;\n \n   /**\n+   * The JavaScript language version accepted.\n+   */\n+  LanguageMode languageIn;\n+\n+  // TODO(johnlenz): Add an language output mode.\n+\n+  /**\n    * Configures the compiler for use as an IDE backend.  In this mode:\n    * <ul>\n    *  <li>No optimization passes will run.</li>\n    * like a builder.\n    */\n   public CompilerOptions() {\n+    // Accepted language\n+    languageIn = LanguageMode.ECMASCRIPT3;\n+\n     // Checks\n     skipAllPasses = false;\n     nameAnonymousFunctionsOnly = false;\n   // Enums\n \n   /** When to do the extra sanity checks */\n+  static enum LanguageMode {\n+    /**\n+     * Tranditional JavaScript\n+     */\n+    ECMASCRIPT3,\n+\n+    /**\n+     * Shiny new JavaScript\n+     */\n+    ECMASCRIPT5,\n+  }\n+\n+  /** When to do the extra sanity checks */\n   static enum DevMode {\n     /**\n      * Don't do any extra sanity checks.\n--- a/src/com/google/javascript/jscomp/parsing/Config.java\n+++ b/src/com/google/javascript/jscomp/parsing/Config.java\n   final Set<String> suppressionNames;\n \n   /**\n+   * Recognized names in a {@code @suppress} tag.\n+   */\n+  final boolean acceptES5;\n+\n+  /**\n    * Annotation names.\n    */\n \n   Config(Set<String> annotationWhitelist, Set<String> suppressionNames,\n-      boolean isIdeMode) {\n+      boolean isIdeMode, boolean acceptES5) {\n     this.annotationNames = buildAnnotationNames(annotationWhitelist);\n     this.parseJsDocDocumentation = isIdeMode;\n     this.suppressionNames = suppressionNames;\n     this.isIdeMode = isIdeMode;\n+    this.acceptES5 = acceptES5;\n   }\n \n   /**\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n \n       Node node = newNode(Token.OBJECTLIT);\n       for (ObjectProperty el : literalNode.getElements()) {\n+        if (!config.acceptES5) {\n+          if (el.isGetter()) {\n+            reportGetter(el);\n+            continue;\n+          } else if (el.isSetter()) {\n+            reportSetter(el);\n+            continue;\n+          }\n+        }\n+\n+        Node key = transformAsString(el.getLeft());\n         if (el.isGetter()) {\n-          reportGetter(el);\n+          key.setType(Token.GET);\n         } else if (el.isSetter()) {\n-          reportSetter(el);\n-        } else {\n-          Node key = transformAsString(el.getLeft());\n-          key.addChildToFront(transform(el.getRight()));\n-          node.addChildToBack(key);\n+          key.setType(Token.SET);\n         }\n+        key.addChildToFront(transform(el.getRight()));\n+        node.addChildToBack(key);\n       }\n       return node;\n     }\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n     Config config = new Config(\n         Sets.<String>newHashSet(),\n         Sets.<String>newHashSet(),\n+        false,\n         false);\n     JsDocInfoParser parser = new JsDocInfoParser(\n         new JsDocTokenStream(typeString),\n--- a/src/com/google/javascript/jscomp/parsing/ParserRunner.java\n+++ b/src/com/google/javascript/jscomp/parsing/ParserRunner.java\n   // Should never need to instantiate class of static methods.\n   private ParserRunner() {}\n \n+  @Deprecated\n   public static Config createConfig(boolean isIdeMode) {\n+    return createConfig(isIdeMode, false);\n+  }\n+\n+  public static Config createConfig(boolean isIdeMode, boolean isES5Mode) {\n     initResourceConfig();\n-    return new Config(annotationNames, suppressionNames, isIdeMode);\n+    return new Config(annotationNames, suppressionNames, isIdeMode, isES5Mode);\n   }\n \n   private static synchronized void initResourceConfig() {\n--- a/test/com/google/javascript/jscomp/CodePrinterTest.java\n+++ b/test/com/google/javascript/jscomp/CodePrinterTest.java\n \n package com.google.javascript.jscomp;\n \n+import com.google.javascript.jscomp.CompilerOptions.LanguageMode;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n \n \n   static Node parse(String js, boolean checkTypes) {\n     Compiler compiler = new Compiler();\n+    CompilerOptions options = new CompilerOptions();\n+    options.languageIn = LanguageMode.ECMASCRIPT5; // Allow getters and setters.\n+    compiler.initOptions(options);\n     Node n = compiler.parseTestCode(js);\n \n     if (checkTypes) {\n       inferTypes.process(externs, n);\n     }\n \n-    assertEquals(\"Errors for: \" + js, 0, compiler.getErrorCount());\n+    checkUnexpectedErrorsOrWarnings(compiler, 0);\n     return n;\n+  }\n+\n+  private static void checkUnexpectedErrorsOrWarnings(\n+      Compiler compiler, int expected) {\n+    int actual = compiler.getErrors().length + compiler.getWarnings().length;\n+    if (actual != expected) {\n+      String msg = \"\";\n+      for (JSError err : compiler.getErrors()) {\n+        msg += \"Error:\" + err.toString() + \"\\n\";\n+      }\n+      for (JSError err : compiler.getWarnings()) {\n+        msg += \"Warning:\" + err.toString() + \"\\n\";\n+      }\n+      assertEquals(\"Unexpected warnings or errors.\\n \" + msg, expected, actual);\n+    }\n   }\n \n   String parsePrint(String js, boolean prettyprint, int lineThreshold) {\n     String result = new CodePrinter.Builder(ast).setPrettyPrint(true).build();\n     assertEquals(\"\\\"f\\\";\\n\\\"g\\\"\", result);\n   }\n+\n+  public void testGetter() {\n+    assertPrint(\"var x = {}\", \"var x={}\");\n+    assertPrint(\"var x = {get a() {return 1}}\", \"var x={get a(){return 1}}\");\n+    assertPrint(\n+      \"var x = {get a() {}, get b(){}}\",\n+      \"var x={get a(){},get b(){}}\");\n+\n+    // Valid ES5 but Rhino doesn't accept this yet.\n+    // assertPrint(\n+    //  \"var x = {get 1() {return 1}}\",\n+    //  \"var x={get \\\"1\\\"(){return 1}}\");\n+\n+    // Valid ES5 but Rhino doesn't accept this yet.\n+    // assertPrint(\n+    //  \"var x = {get \\\"()\\\"() {return 1}}\",\n+    //   \"var x={get \\\"()\\\"(){return 1}}\");\n+  }\n+\n+  public void testSetter() {\n+    assertPrint(\"var x = {}\", \"var x={}\");\n+    assertPrint(\"var x = {set a(x) {return 1}}\", \"var x={set a(x){return 1}}\");\n+\n+    // Valid ES5 but Rhino doesn't accept this yet.\n+    // assertPrint(\n+    //  \"var x = {set 1(x) {return 1}}\",\n+    //  \"var x={set \\\"1\\\"(x){return 1}}\");\n+\n+    // Valid ES5 but Rhino doesn't accept this yet.\n+    // assertPrint(\n+    //  \"var x = {set \\\"(x)\\\"() {return 1}}\",\n+    //   \"var x={set \\\"(x)\\\"(){return 1}}\");\n+  }\n }\n--- a/test/com/google/javascript/jscomp/parsing/IRFactoryTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/IRFactoryTest.java\n  */\n public class IRFactoryTest extends BaseJSTypeTestCase {\n \n+  private boolean es5mode = false;\n+\n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    es5mode = false;\n+  }\n+\n   public void testScript() throws Exception {\n     parse(\"\");\n   }\n       \"            NUMBER -2.0 0\\n\");\n   }\n \n+  public void testGetter() {\n+    this.es5mode = true;\n+    testNewParser(\"({get a() {}})\",\n+      \"SCRIPT 0\\n\" +\n+      \"    EXPR_RESULT 0\\n\" +\n+      \"        OBJECTLIT 0 [parenthesized: true]\\n\" +\n+      \"            GET a 0\\n\" +\n+      \"                FUNCTION  0\\n\" +\n+      \"                    NAME  0\\n\" +\n+      \"                    LP 0\\n\" +\n+      \"                    BLOCK 0\\n\");\n+  }\n+\n+  public void testSetter() {\n+    this.es5mode = true;\n+    testNewParser(\"({set a(x) {}})\",\n+      \"SCRIPT 0\\n\" +\n+      \"    EXPR_RESULT 0\\n\" +\n+      \"        OBJECTLIT 0 [parenthesized: true]\\n\" +\n+      \"            SET a 0\\n\" +\n+      \"                FUNCTION  0\\n\" +\n+      \"                    NAME  0\\n\" +\n+      \"                    LP 0\\n\" +\n+      \"                        NAME x 0\\n\" +\n+      \"                    BLOCK 0\\n\");\n+  }\n+\n   public void testSwitch() {\n     parse(\"switch (e) {\" +\n         \"case 'a': a(); break;\" +\n     Parser p = new Parser(environment);\n     AstRoot script = p.parse(string, null, 0);\n \n-    Config config = ParserRunner.createConfig(true);\n+    Config config = ParserRunner.createConfig(true, es5mode);\n     Node root = IRFactory.transformTree(script, string, config,\n         new TestErrorReporter(null, null));\n \n--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n     super.setUp();\n     extraAnnotations =\n         Sets.newHashSet(\n-            ParserRunner.createConfig(true).annotationNames.keySet());\n+            ParserRunner.createConfig(true, false).annotationNames.keySet());\n     extraSuppressions =\n         Sets.newHashSet(\n-            ParserRunner.createConfig(true).suppressionNames);\n+            ParserRunner.createConfig(true, false).suppressionNames);\n \n     extraSuppressions.add(\"x\");\n     extraSuppressions.add(\"y\");\n   }\n \n   public void testBadModifies6() throws Exception {\n-    parse(\"@modifies {this} \\n * @modifies {this} */\", \n+    parse(\"@modifies {this} \\n * @modifies {this} */\",\n         \"conflicting @modifies tag\");\n   }\n \n     AstRoot script = p.parse(code, null, 0);\n \n     Config config =\n-        new Config(extraAnnotations, extraSuppressions, true);\n+        new Config(extraAnnotations, extraSuppressions, true, false);\n     for (Comment comment : script.getComments()) {\n       JsDocInfoParser jsdocParser =\n         new JsDocInfoParser(\n     TestErrorReporter errorReporter = new TestErrorReporter(null, warnings);\n \n     Config config = new Config(extraAnnotations, extraSuppressions,\n-        parseDocumentation);\n+        parseDocumentation, false);\n     JsDocInfoParser jsdocParser = new JsDocInfoParser(stream(comment),\n         \"testcode\", config, errorReporter);\n \n--- a/test/com/google/javascript/jscomp/parsing/ParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/ParserTest.java\n import com.google.javascript.rhino.JSDocInfo;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n-import com.google.javascript.rhino.jstype.JSType;\n-import com.google.javascript.rhino.jstype.JSTypeNative;\n import com.google.javascript.rhino.testing.BaseJSTypeTestCase;\n \n import java.io.IOException;\n       com.google.javascript.rhino.ScriptRuntime.getMessage0(\n           \"msg.jsdoc.missing.gt\");\n \n-  private JSType getNativeType(JSTypeNative typeId) {\n-    return registry.getNativeType(typeId);\n+  private boolean es5mode;\n+\n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    es5mode = false;\n   }\n \n   public void testLinenoCharnoAssign1() throws Exception {\n     parse(\"function foo(x, x) {}\", \"Duplicate parameter name \\\"x\\\".\");\n   }\n \n+  public void testGetter() {\n+    this.es5mode = false;\n+    parseError(\"var x = {get a(){}};\",\n+        \"getters are not supported in Internet Explorer\");\n+    this.es5mode = true;\n+    parse(\"var x = {get a(){}};\");\n+  }\n+\n+  public void testSetter() {\n+    this.es5mode = false;\n+    parseError(\"var x = {set a(x){}};\",\n+        \"setters are not supported in Internet Explorer\");\n+    this.es5mode = true;\n+    parse(\"var x = {set a(x){}};\");\n+  }\n+\n   public void testLamestWarningEver() {\n     // This used to be a warning.\n     parse(\"var x = /** @type {undefined} */ (y);\");\n     Node script = null;\n     try {\n       script = ParserRunner.parse(\n-          \"input\", string, ParserRunner.createConfig(true),\n+          \"input\", string, ParserRunner.createConfig(true, es5mode),\n           testErrorReporter, Logger.getAnonymousLogger());\n     } catch (IOException e) {\n       throw new RuntimeException(e);\n     Node script = null;\n     try {\n       script = ParserRunner.parse(\n-          \"input\", string, ParserRunner.createConfig(true),\n+          \"input\", string, ParserRunner.createConfig(true, es5mode),\n           testErrorReporter, Logger.getAnonymousLogger());\n     } catch (IOException e) {\n       throw new RuntimeException(e);", "timestamp": 1291754915, "metainfo": ""}