{"sha": "4cede4f156740b7ce93d92d824066e9a42257541", "log": "Unify output encoding for real this time Fixes issue 224.  Revision created by MOE tool push_codebase.  R=johnlenz DELTA=39  (5 added, 5 deleted, 29 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=196345   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n import com.google.protobuf.CodedOutputStream;\n \n import java.io.BufferedWriter;\n+import java.io.Closeable;\n import java.io.File;\n import java.io.FileOutputStream;\n-import java.io.FileWriter;\n import java.io.IOException;\n+import java.io.OutputStream;\n import java.io.OutputStreamWriter;\n import java.io.PrintStream;\n import java.io.StringWriter;\n   private final PrintStream err;\n   private A compiler;\n \n-  private static Charset inputCharset;\n+  private Charset inputCharset;\n+  private String outputCharset;\n \n   private boolean testMode = false;\n   private Supplier<List<JSSourceFile>> externsSupplierForTesting = null;\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n \n-    options.outputCharset = getOutputCharset();\n+    outputCharset = options.outputCharset = getOutputCharset();\n     inputCharset = getInputCharset();\n \n     if (config.jsOutputFile.length() > 0) {\n    *        stdin. If true, '-' is only allowed to appear once.\n    * @return An array of inputs\n    */\n-  private static List<JSSourceFile> createInputs(List<String> files,\n+  private List<JSSourceFile> createInputs(List<String> files,\n       boolean allowStdIn) throws FlagUsageException, IOException {\n     List<JSSourceFile> inputs = new ArrayList<JSSourceFile>(files.size());\n     boolean usingStdin = false;\n   /**\n    * Creates js extern inputs from a list of files.\n    */\n-  private static List<JSSourceFile> createExternInputs(List<String> files)\n+  private List<JSSourceFile> createExternInputs(List<String> files)\n       throws FlagUsageException, IOException {\n     if (files.isEmpty()) {\n       return ImmutableList.of(JSSourceFile.fromCode(\"/dev/null\", \"\"));\n \n     boolean writeOutputToFile = !options.jsOutputFile.isEmpty();\n     if (writeOutputToFile) {\n-      out = toWriter(options.jsOutputFile, inputCharset.name());\n+      out = fileNameToOutputWriter(options.jsOutputFile);\n+    } else if (out instanceof OutputStream) {\n+      out = streamToOutputWriter((OutputStream) out);\n     }\n \n     List<String> jsFiles = config.js;\n \n     int errCode = processResults(result, modules, options);\n     // Close the output if we are writing to a file.\n-    if (writeOutputToFile) {\n-      ((Writer)out).close();\n+    if (out instanceof Closeable) {\n+      ((Closeable)out).close();\n     }\n     return errCode;\n   }\n         Writer mapOut = null;\n \n         if (!shouldGenerateMapPerModule(options)) {\n-          mapOut = toWriter(expandSourceMapPath(options, null));\n+          mapOut = fileNameToOutputWriter(expandSourceMapPath(options, null));\n         }\n \n         for (JSModule m : modules) {\n           if (shouldGenerateMapPerModule(options)) {\n-            mapOut = toWriter(expandSourceMapPath(options, m));\n+            mapOut = fileNameToOutputWriter(expandSourceMapPath(options, m));\n           }\n \n-          Writer writer = toWriter(\n+          Writer writer = fileNameToOutputWriter(\n               moduleFilePrefix + m.getName() + \".js\");\n \n           if (options.sourceMapOutputPath != null) {\n       exPath = outputFile.getParent() + File.separatorChar + exPath;\n     }\n \n-    return toWriter(exPath);\n+    return fileNameToOutputWriter(exPath);\n   }\n \n   /**\n    * Converts a file name into a Writer.\n    * Returns null if the file name is null.\n    */\n-  private Writer toWriter(String fileName) throws IOException {\n+  private Writer fileNameToOutputWriter(String fileName) throws IOException {\n     if (fileName == null) {\n       return null;\n     }\n     if (testMode) {\n       return new StringWriter();\n     }\n-    // Use a FileWriter if the charset translation isn't required.\n-    return new BufferedWriter(new FileWriter(fileName));\n-  }\n-\n-  /**\n-   * Converts a file name into a Writer.\n-   * Returns null if the file name is null.\n-   */\n-  private Writer toWriter(String fileName, String charSet)\n+    return streamToOutputWriter(new FileOutputStream(fileName));\n+  }\n+\n+  /**\n+   * Create a writer.\n+   */\n+  private Writer streamToOutputWriter(OutputStream stream)\n       throws IOException {\n-    if (fileName == null) {\n-      return null;\n-    }\n-    if (testMode) {\n-      return new StringWriter();\n-    }\n-    // Use a FileOutputStream for a non-default charset.\n-    return new BufferedWriter(\n-        new OutputStreamWriter(new FileOutputStream(fileName), charSet));\n+    if (outputCharset == null) {\n+      return new BufferedWriter(\n+          new OutputStreamWriter(stream));\n+    } else {\n+      return new BufferedWriter(\n+          new OutputStreamWriter(stream, outputCharset));\n+    }\n   }\n \n   /**\n     }\n \n     String outName = expandSourceMapPath(options, null);\n-    Writer out = toWriter(outName);\n+    Writer out = fileNameToOutputWriter(outName);\n     compiler.getSourceMap().appendTo(out, outName);\n     out.close();\n   }\n       // Generate per-module manifests.\n       Iterable<JSModule> modules = graph.getAllModules();\n       for (JSModule module : modules) {\n-        Writer out = toWriter(expandManifest(module));\n+        Writer out = fileNameToOutputWriter(expandManifest(module));\n         printManifestTo(module.getInputs(), out);\n         out.close();\n       }\n     } else {\n       // Generate a single file manifest.\n-      Writer out = toWriter(expandManifest(null));\n+      Writer out = fileNameToOutputWriter(expandManifest(null));\n       if (graph == null) {\n         printManifestTo(compiler.getInputsInOrder(), out);\n       } else {", "timestamp": 1283210208, "metainfo": ""}