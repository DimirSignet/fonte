{"sha": "0d3b4994ebd199eb7dc76278c31656db9c2afb56", "log": "-Make RemoveUnusedVars know about goog.inherits  R=nicksantos DELTA=135  (132 added, 0 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=449   ", "commit": "\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n import com.google.common.collect.Maps;\n import com.google.common.collect.Multimap;\n import com.google.common.collect.Sets;\n+import com.google.javascript.jscomp.CodingConvention.SubclassRelationship;\n import com.google.javascript.jscomp.DefinitionsRemover.Definition;\n import com.google.javascript.jscomp.Scope.Var;\n import com.google.javascript.rhino.Node;\n \n   private final AbstractCompiler compiler;\n \n+  private final CodingConvention codingConvention;\n+\n   private final boolean removeGlobals;\n \n   private boolean preserveFunctionExpressionNames;\n    * The assigns, indexed by the NAME node that they assign to.\n    */\n   private final Map<Node, Assign> assignsByNode = Maps.newHashMap();\n+\n+  /**\n+   * Subclass name -> inherits call EXPR node.\n+   */\n+  private final Multimap<Var, Node> inheritsCalls =\n+      ArrayListMultimap.create();\n \n   /**\n    * Keep track of continuations that are finished iff the variable they're\n       boolean preserveFunctionExpressionNames,\n       boolean modifyCallSites) {\n     this.compiler = compiler;\n+    this.codingConvention = compiler.getCodingConvention();\n     this.removeGlobals = removeGlobals;\n     this.preserveFunctionExpressionNames = preserveFunctionExpressionNames;\n     this.modifyCallSites = modifyCallSites;\n    * may occur to ensure all unused variables are removed.\n    */\n   public void process(Node externs, Node root) {\n+    Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());\n     SimpleDefinitionFinder defFinder = null;\n+\n     if (modifyCallSites) {\n       // For testing, allow the SimpleDefinitionFinder to be build now.\n       defFinder = new SimpleDefinitionFinder(compiler);\n               continuations.put(var, new Continuation(n, scope));\n               return;\n             }\n+          }\n+        }\n+        break;\n+\n+      case Token.CALL:\n+        // Look for calls to inheritance-defining calls (such as goog.inherits).\n+        SubclassRelationship subclassRelationship =\n+            codingConvention.getClassesDefinedByCall(n);\n+        if (subclassRelationship != null) {\n+          Var subclassVar = scope.getVar(subclassRelationship.subclassName);\n+          if (!referenced.contains(subclassVar)) {\n+            // Save a reference to the EXPR node.\n+            inheritsCalls.put(subclassVar, parent);\n+            continuations.put(subclassVar, new Continuation(n, scope));\n+            return;\n           }\n         }\n         break;\n     }\n \n     // Exported variables are off-limits.\n-    if (compiler.getCodingConvention().isExported(var.getName())) {\n+    if (codingConvention.isExported(var.getName())) {\n       return false;\n     }\n \n    */\n   private boolean markReferencedVar(Var var) {\n     if (referenced.add(var)) {\n+      // If a subclass is referenced, mark its superclasses as referenced.\n       for (Continuation c : continuations.get(var)) {\n         c.apply();\n       }\n \n   /**\n    * Removes any vars in the scope that were not referenced. Removes any\n-   * assigments to those variables as well.\n+   * assignments to those variables as well.\n    */\n   private void removeUnreferencedVars() {\n-    CodingConvention convention = compiler.getCodingConvention();\n+    CodingConvention convention = codingConvention;\n \n     for (Iterator<Var> it = maybeUnreferenced.iterator(); it.hasNext(); ) {\n       Var var = it.next();\n+\n+      // Remove calls to inheritance-defining functions where the unreferenced\n+      // class is the subclass.\n+      for (Node exprCallNode : inheritsCalls.get(var)) {\n+        NodeUtil.removeChild(exprCallNode.getParent(), exprCallNode);\n+        compiler.reportCodeChange();\n+      }\n \n       // Regardless of what happens to the original declaration,\n       // we need to remove all assigns, because they may contain references\n--- a/test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java\n+++ b/test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java\n     // this.modifyCallSites = false;\n     testSame(\"({set s(a) {}})\");\n   }\n+  \n+  public void testRemoveInheritedClass1() {\n+    test(\"function goog$inherits(){}\" +\n+        \"/**@constructor*/function a(){}\" +\n+        \"/**@constructor*/function b(){}\" +\n+        \"goog$inherits(b,a); new a\",\n+        \"function a(){} new a\");\n+  }\n+  \n+  public void testRemoveInheritedClass2() {\n+    test(\"function goog$inherits(){}\" +\n+        \"function goog$mixin(){}\" +\n+        \"/**@constructor*/function a(){}\" +\n+        \"/**@constructor*/function b(){}\" +\n+        \"/**@constructor*/function c(){}\" +\n+        \"goog$inherits(b,a);\" +\n+        \"goog$mixin(c.prototype,b.prototype);\",\n+        \"\");\n+  }\n+\n+  public void testRemoveInheritedClass3() {\n+    testSame(\"/**@constructor*/function a(){}\" +\n+        \"/**@constructor*/function b(){}\" +\n+        \"goog$inherits(b,a); new b\");\n+  }\n+\n+  public void testRemoveInheritedClass4() {\n+    testSame(\"function goog$inherits(){}\" +\n+        \"/**@constructor*/function a(){}\" +\n+        \"/**@constructor*/function b(){}\" +\n+        \"goog$inherits(b,a);\" +\n+        \"/**@constructor*/function c(){}\" +\n+        \"goog$inherits(c,b); new c\");\n+  }\n+\n+  public void testRemoveInheritedClass5() {\n+    test(\"function goog$inherits(){}\" +\n+        \"/**@constructor*/function a(){}\" +\n+        \"/**@constructor*/function b(){}\" +\n+        \"goog$inherits(b,a);\" +\n+        \"/**@constructor*/function c(){}\" +\n+        \"goog$inherits(c,b); new b\",\n+        \"function goog$inherits(){}\" +\n+        \"function a(){}\" +\n+        \"function b(){}\" +\n+        \"goog$inherits(b,a); new b\");\n+  }\n+\n+  public void testRemoveInheritedClass6() {\n+    test(\"function goog$mixin(){}\" +\n+        \"/**@constructor*/function a(){}\" +\n+        \"/**@constructor*/function b(){}\" +\n+        \"/**@constructor*/function c(){}\" +\n+        \"/**@constructor*/function d(){}\" +\n+        \"goog$mixin(b.prototype,a.prototype);\" +\n+        \"goog$mixin(c.prototype,a.prototype); new c;\" +\n+        \"goog$mixin(d.prototype,a.prototype)\",\n+        \"function goog$mixin(){}\" +\n+        \"function a(){}\" +\n+        \"function c(){}\" +\n+        \"goog$mixin(c.prototype,a.prototype); new c\");\n+  }\n+  \n+  public void testRemoveInheritedClass7() {\n+    test(\"function goog$mixin(){}\" +\n+        \"/**@constructor*/function a(){alert(goog$mixin(a, a))}\" +\n+        \"/**@constructor*/function b(){}\" +\n+        \"goog$mixin(b.prototype,a.prototype); new a\",\n+        \"function goog$mixin(){}\" +\n+        \"function a(){alert(goog$mixin(a, a))} new a\");\n+  }\n+  \n+  public void testRemoveInheritedClass8() {\n+    test(\"/**@constructor*/function a(){}\" +\n+        \"/**@constructor*/function b(){}\" +\n+        \"/**@constructor*/function c(){}\" +\n+        \"b.inherits(a);c.mixin(b.prototype)\",\n+        \"\");\n+  }\n+\n+  public void testRemoveInheritedClass9() {\n+    testSame(\"/**@constructor*/function a(){}\" +\n+        \"/**@constructor*/function b(){}\" +\n+        \"/**@constructor*/function c(){}\" +\n+        \"b.inherits(a);c.mixin(b.prototype);new c\");\n+  }\n+\n+  public void testRemoveInheritedClass10() {\n+    test(\"function goog$inherits(){}\" +\n+        \"/**@constructor*/function a(){}\" +\n+        \"/**@constructor*/function b(){}\" +\n+        \"goog$inherits(b,a); new a;\" +\n+        \"var c = a; var d = a.g; new b\",\n+        \"function goog$inherits(){}\" +\n+        \"function a(){} function b(){} goog$inherits(b,a); new a; new b\");\n+  }\n+  \n }", "timestamp": 1297099118, "metainfo": ""}