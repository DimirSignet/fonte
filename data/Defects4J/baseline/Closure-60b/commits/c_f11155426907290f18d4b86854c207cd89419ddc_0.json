{"sha": "f11155426907290f18d4b86854c207cd89419ddc", "log": "Handle aliases used in \"instanceof\" checks.  R=nicksantos DELTA=57  (55 added, 0 deleted, 2 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1814   ", "commit": "\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n   }\n \n   /**\n-   * Callback that propagates side effect information across call sites.\n+   * Callback that propagates reference information.\n    */\n   private static class ReferencePropagationCallback\n       implements EdgeCallback<JsName, RefType> {\n \n     /** Whether the name has descendants that are written to. */\n     boolean hasWrittenDescendants = false;\n+\n+    /** Whether the name is used in a instanceof check */\n+    boolean hasInstanceOfReference = false;\n \n     /**\n      * Output the node as a string\n         refNodes.add(\n             new InstanceOfCheckNode(\n                 checkedClass, n, parent, parent.getParent()));\n+        checkedClass.hasInstanceOfReference = true;\n         return;\n       }\n \n    * directional reference from the original name to the alias. For example,\n    * in this case, the assign to {@code a.foo} triggers a reference from\n    * {@code b} to {@code a}, but NOT from a to b.\n+   *\n+   * Similarly, \"instanceof\" checks do not prevent the removal\n+   * of a unaliased name but an instanceof check on an alias can only be removed\n+   * if the other aliases are also removed, so we add a connection here.\n    */\n   private void referenceAliases() {\n     for (Map.Entry<String, AliasSet> entry : aliases.entrySet()) {\n       JsName name = getName(entry.getKey(), false);\n-      if (name.hasWrittenDescendants) {\n+      if (name.hasWrittenDescendants || name.hasInstanceOfReference) {\n         for (String alias : entry.getValue().names) {\n           recordReference(alias, entry.getKey(), RefType.REGULAR);\n         }\n--- a/test/com/google/javascript/jscomp/NameAnalyzerTest.java\n+++ b/test/com/google/javascript/jscomp/NameAnalyzerTest.java\n       \"}\");\n   }\n \n+  public void testExternalAliasInstanceof1() {\n+    test(\n+      \"Array$X = Array;\" +\n+      \"function Array$X() {}\" +\n+      \"var y = [];\" +\n+      \"if (y instanceof Array) {}\",\n+      \"var y = [];\" +\n+      \"if (y instanceof Array) {}\"\n+      );\n+  }\n+\n+  public void testExternalAliasInstanceof2() {\n+    testSame(\n+      \"Array$X = Array;\" +\n+      \"function Array$X() {}\" +\n+      \"var y = [];\" +\n+      \"if (y instanceof Array$X) {}\");\n+  }\n+\n+  public void testExternalAliasInstanceof3() {\n+    testSame(\n+      \"var b = Array;\" +\n+      \"var y = [];\" +\n+      \"if (y instanceof b) {}\");\n+  }\n+\n+  public void testAliasInstanceof4() {\n+    testSame(\n+      \"function Foo() {};\" +\n+      \"var b = Foo;\" +\n+      \"var y = new Foo();\" +\n+      \"if (y instanceof b) {}\");\n+  }\n+\n+  public void testAliasInstanceof5() {\n+    // TODO(johnlenz): fix this. \"b\" should remain.\n+    test(\n+      \"function Foo() {}\" +\n+      \"function Bar() {}\" +\n+      \"var b = x ? Foo : Bar;\" +\n+      \"var y = new Foo();\" +\n+      \"if (y instanceof b) {}\",\n+      \"function Foo() {}\" +\n+      \"var y = new Foo;\" +\n+      \"if (false){}\");\n+  }\n+\n   @Override\n   protected CompilerPass getProcessor(Compiler compiler) {\n     return new MarkNoSideEffectCallsAndNameAnalyzerRunner(compiler);", "timestamp": 1305064872, "metainfo": ""}