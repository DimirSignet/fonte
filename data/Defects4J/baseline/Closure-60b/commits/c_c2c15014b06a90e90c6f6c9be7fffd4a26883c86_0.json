{"sha": "c2c15014b06a90e90c6f6c9be7fffd4a26883c86", "log": "perf improvements to scope creator  R=johnlenz DELTA=29  (7 added, 4 deleted, 18 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=217903   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n import com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast;\n import com.google.javascript.jscomp.CodingConvention.SubclassRelationship;\n import com.google.javascript.jscomp.CodingConvention.SubclassType;\n-import com.google.javascript.jscomp.NodeTraversal.AbstractShallowCallback;\n+import com.google.javascript.jscomp.NodeTraversal.AbstractShallowStatementCallback;\n import com.google.javascript.jscomp.Scope.Var;\n import com.google.javascript.rhino.ErrorReporter;\n import com.google.javascript.rhino.JSDocInfo;\n     scope.declare(name, null, t, null, false);\n   }\n \n-  private static class DiscoverEnums extends AbstractShallowCallback {\n+  private static class DiscoverEnums extends AbstractShallowStatementCallback {\n     private final JSTypeRegistry registry;\n \n     DiscoverEnums(JSTypeRegistry registry) {\n     public void visit(NodeTraversal t, Node node, Node parent) {\n       Node nameNode = null;\n       switch (node.getType()) {\n-        case Token.NAME:\n-          nameNode = node;\n+        case Token.VAR:\n+          for (Node child = node.getFirstChild();\n+               child != null; child = child.getNext()) {\n+            identifyEnumInNameNode(\n+                child, NodeUtil.getInfoForNameNode(child));\n+          }\n           break;\n-        case Token.VAR:\n-          if (node.hasOneChild()) {\n-            nameNode = node.getFirstChild();\n+        case Token.EXPR_RESULT:\n+          Node maybeAssign = node.getFirstChild();\n+          if (maybeAssign.getType() == Token.ASSIGN) {\n+            identifyEnumInNameNode(\n+                maybeAssign.getFirstChild(), maybeAssign.getJSDocInfo());\n           }\n           break;\n-        case Token.ASSIGN:\n-          nameNode = node.getFirstChild();\n-          break;\n-      }\n-\n-      if (nameNode != null) {\n-        JSDocInfo info = node.getJSDocInfo();\n-        if (info != null && info.hasEnumParameterType()) {\n-          registry.identifyEnumName(nameNode.getQualifiedName());\n-        }\n+      }\n+    }\n+\n+    private void identifyEnumInNameNode(Node nameNode, JSDocInfo info) {\n+      if (info != null && info.hasEnumParameterType()) {\n+        registry.identifyEnumName(nameNode.getQualifiedName());\n       }\n     }\n   }\n      * resolves them relative to the global scope.\n      */\n     private final class CollectProperties\n-        extends AbstractShallowCallback {\n+        extends AbstractShallowStatementCallback {\n       private final ObjectType thisType;\n \n       CollectProperties(ObjectType thisType) {\n       }\n \n       public void visit(NodeTraversal t, Node n, Node parent) {\n-        if (parent != null && parent.getType() == Token.EXPR_RESULT) {\n-          switch (n.getType()) {\n+        if (n.getType() == Token.EXPR_RESULT) {\n+          Node child = n.getFirstChild();\n+          switch (child.getType()) {\n             case Token.ASSIGN:\n-              maybeCollectMember(t, n.getFirstChild(), n);\n+              maybeCollectMember(t, child.getFirstChild(), child);\n               break;\n             case Token.GETPROP:\n-              maybeCollectMember(t, n, n);\n+              maybeCollectMember(t, child, child);\n               break;\n           }\n         }", "timestamp": 1284492224, "metainfo": ""}