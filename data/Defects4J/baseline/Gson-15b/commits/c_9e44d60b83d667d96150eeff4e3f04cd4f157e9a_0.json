{"sha": "9e44d60b83d667d96150eeff4e3f04cd4f157e9a", "log": "Eliminating code overhead  * calculating size of the list once in case of loops, avoided creation of string builder object if the length type argument is 0\r * replaced null check boilerplate code with nullSafe()", "commit": "\n--- a/gson/src/main/java/com/google/gson/FieldNamingPolicy.java\n+++ b/gson/src/main/java/com/google/gson/FieldNamingPolicy.java\n    */\n   static String separateCamelCase(String name, String separator) {\n     StringBuilder translation = new StringBuilder();\n-    for (int i = 0; i < name.length(); i++) {\n+    for (int i = 0, length = name.length(); i < length; i++) {\n       char character = name.charAt(i);\n       if (Character.isUpperCase(character) && translation.length() != 0) {\n         translation.append(separator);\n     StringBuilder fieldNameBuilder = new StringBuilder();\n     int index = 0;\n     char firstCharacter = name.charAt(index);\n+    int length = name.length();\n \n-    while (index < name.length() - 1) {\n+    while (index < length - 1) {\n       if (Character.isLetter(firstCharacter)) {\n         break;\n       }\n       firstCharacter = name.charAt(++index);\n     }\n \n-    if (index == name.length()) {\n+    if (index == length) {\n       return fieldNameBuilder.toString();\n     }\n \n--- a/gson/src/main/java/com/google/gson/internal/$Gson$Types.java\n+++ b/gson/src/main/java/com/google/gson/internal/$Gson$Types.java\n   }\n \n   private static int indexOf(Object[] array, Object toFind) {\n-    for (int i = 0; i < array.length; i++) {\n+    for (int i = 0, length = array.length; i < length; i++) {\n       if (toFind.equals(array[i])) {\n         return i;\n       }\n       this.ownerType = ownerType == null ? null : canonicalize(ownerType);\n       this.rawType = canonicalize(rawType);\n       this.typeArguments = typeArguments.clone();\n-      for (int t = 0; t < this.typeArguments.length; t++) {\n+      for (int t = 0, length = this.typeArguments.length; t < length; t++) {\n         checkNotNull(this.typeArguments[t]);\n         checkNotPrimitive(this.typeArguments[t]);\n         this.typeArguments[t] = canonicalize(this.typeArguments[t]);\n     }\n \n     @Override public String toString() {\n-      StringBuilder stringBuilder = new StringBuilder(30 * (typeArguments.length + 1));\n-      stringBuilder.append(typeToString(rawType));\n-\n-      if (typeArguments.length == 0) {\n-        return stringBuilder.toString();\n-      }\n-\n-      stringBuilder.append(\"<\").append(typeToString(typeArguments[0]));\n-      for (int i = 1; i < typeArguments.length; i++) {\n+      int length = typeArguments.length;\n+      if (length == 0) {\n+        return typeToString(rawType);\n+      }\n+\n+      StringBuilder stringBuilder = new StringBuilder(30 * (length + 1));\n+      stringBuilder.append(typeToString(rawType)).append(\"<\").append(typeToString(typeArguments[0]));\n+      for (int i = 1; i < length; i++) {\n         stringBuilder.append(\", \").append(typeToString(typeArguments[i]));\n       }\n       return stringBuilder.append(\">\").toString();\n--- a/gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java\n       list.add(instance);\n     }\n     in.endArray();\n-    Object array = Array.newInstance(componentType, list.size());\n-    for (int i = 0; i < list.size(); i++) {\n+\n+    int size = list.size();\n+    Object array = Array.newInstance(componentType, size);\n+    for (int i = 0; i < size; i++) {\n       Array.set(array, i, list.get(i));\n     }\n     return array;\n--- a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java\n         Type fieldType = $Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n         List<String> fieldNames = getFieldNames(field);\n         BoundField previous = null;\n-        for (int i = 0; i < fieldNames.size(); ++i) {\n+        for (int i = 0, size = fieldNames.size(); i < size; ++i) {\n           String name = fieldNames.get(i);\n           if (i != 0) serialize = false; // only serialize the default name\n           BoundField boundField = createBoundField(context, field, name,\n--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n   public static final TypeAdapter<Class> CLASS = new TypeAdapter<Class>() {\n     @Override\n     public void write(JsonWriter out, Class value) throws IOException {\n-      if (value == null) {\n-        out.nullValue();\n-      } else {\n-        throw new UnsupportedOperationException(\"Attempted to serialize java.lang.Class: \"\n-            + value.getName() + \". Forgot to register a type adapter?\");\n-      }\n+      throw new UnsupportedOperationException(\"Attempted to serialize java.lang.Class: \"\n+              + value.getName() + \". Forgot to register a type adapter?\");\n     }\n     @Override\n     public Class read(JsonReader in) throws IOException {\n-      if (in.peek() == JsonToken.NULL) {\n-        in.nextNull();\n-        return null;\n-      } else {\n-        throw new UnsupportedOperationException(\n-            \"Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?\");\n-      }\n-    }\n-  };\n+      throw new UnsupportedOperationException(\n+              \"Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?\");\n+    }\n+  }.nullSafe();\n+\n   public static final TypeAdapterFactory CLASS_FACTORY = newFactory(Class.class, CLASS);\n \n   public static final TypeAdapter<BitSet> BIT_SET = new TypeAdapter<BitSet>() {\n     @Override public BitSet read(JsonReader in) throws IOException {\n-      if (in.peek() == JsonToken.NULL) {\n-        in.nextNull();\n-        return null;\n-      }\n-\n       BitSet bitset = new BitSet();\n       in.beginArray();\n       int i = 0;\n     }\n \n     @Override public void write(JsonWriter out, BitSet src) throws IOException {\n-      if (src == null) {\n-        out.nullValue();\n-        return;\n-      }\n-\n       out.beginArray();\n-      for (int i = 0; i < src.length(); i++) {\n+      for (int i = 0, length = src.length(); i < length; i++) {\n         int value = (src.get(i)) ? 1 : 0;\n         out.value(value);\n       }\n       out.endArray();\n     }\n-  };\n+  }.nullSafe();\n \n   public static final TypeAdapterFactory BIT_SET_FACTORY = newFactory(BitSet.class, BIT_SET);\n \n       }\n     };\n   }\n-}\n+}", "timestamp": 1488384836, "metainfo": ""}