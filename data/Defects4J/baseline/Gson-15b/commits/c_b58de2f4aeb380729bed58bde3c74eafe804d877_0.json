{"sha": "b58de2f4aeb380729bed58bde3c74eafe804d877", "log": "Merge pull request #1073 from lyubomyr-shaydariv/public-tojson  Remove helper methods mentioned in the TODO list", "commit": "\n--- a/gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n import java.io.IOException;\n-import java.io.StringReader;\n-import java.io.StringWriter;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n   private TypeAdapter<Map<String, Double>> mapAdapter\n       = miniGson.getAdapter(new TypeToken<Map<String, Double>>() {});\n \n-  public void testSerialize() throws IOException {\n+  public void testSerialize() {\n     Truck truck = new Truck();\n     truck.passengers = Arrays.asList(new Person(\"Jesse\", 29), new Person(\"Jodie\", 29));\n     truck.horsePower = 300;\n \n     assertEquals(\"{'horsePower':300.0,\"\n         + \"'passengers':[{'age':29,'name':'Jesse'},{'age':29,'name':'Jodie'}]}\",\n-        toJson(truckAdapter, truck).replace('\\\"', '\\''));\n+        truckAdapter.toJson(truck).replace('\\\"', '\\''));\n   }\n \n   public void testDeserialize() throws IOException {\n     String json = \"{'horsePower':300.0,\"\n         + \"'passengers':[{'age':29,'name':'Jesse'},{'age':29,'name':'Jodie'}]}\";\n-    Truck truck = fromJson(truckAdapter, json);\n+    Truck truck = truckAdapter.fromJson(json.replace('\\'', '\\\"'));\n     assertEquals(300.0, truck.horsePower);\n     assertEquals(Arrays.asList(new Person(\"Jesse\", 29), new Person(\"Jodie\", 29)), truck.passengers);\n   }\n \n-  public void testSerializeNullField() throws IOException {\n+  public void testSerializeNullField() {\n     Truck truck = new Truck();\n     truck.passengers = null;\n     assertEquals(\"{'horsePower':0.0,'passengers':null}\",\n-        toJson(truckAdapter, truck).replace('\\\"', '\\''));\n+        truckAdapter.toJson(truck).replace('\\\"', '\\''));\n   }\n \n   public void testDeserializeNullField() throws IOException {\n-    Truck truck = fromJson(truckAdapter, \"{'horsePower':0.0,'passengers':null}\");\n+    Truck truck = truckAdapter.fromJson(\"{'horsePower':0.0,'passengers':null}\".replace('\\'', '\\\"'));\n     assertNull(truck.passengers);\n   }\n \n-  public void testSerializeNullObject() throws IOException {\n+  public void testSerializeNullObject() {\n     Truck truck = new Truck();\n     truck.passengers = Arrays.asList((Person) null);\n     assertEquals(\"{'horsePower':0.0,'passengers':[null]}\",\n-        toJson(truckAdapter, truck).replace('\\\"', '\\''));\n+        truckAdapter.toJson(truck).replace('\\\"', '\\''));\n   }\n \n   public void testDeserializeNullObject() throws IOException {\n-    Truck truck = fromJson(truckAdapter, \"{'horsePower':0.0,'passengers':[null]}\");\n+    Truck truck = truckAdapter.fromJson(\"{'horsePower':0.0,'passengers':[null]}\".replace('\\'', '\\\"'));\n     assertEquals(Arrays.asList((Person) null), truck.passengers);\n   }\n \n-  public void testSerializeWithCustomTypeAdapter() throws IOException {\n+  public void testSerializeWithCustomTypeAdapter() {\n     usePersonNameAdapter();\n     Truck truck = new Truck();\n     truck.passengers = Arrays.asList(new Person(\"Jesse\", 29), new Person(\"Jodie\", 29));\n     assertEquals(\"{'horsePower':0.0,'passengers':['Jesse','Jodie']}\",\n-        toJson(truckAdapter, truck).replace('\\\"', '\\''));\n+        truckAdapter.toJson(truck).replace('\\\"', '\\''));\n   }\n \n   public void testDeserializeWithCustomTypeAdapter() throws IOException {\n     usePersonNameAdapter();\n-    Truck truck = fromJson(truckAdapter, \"{'horsePower':0.0,'passengers':['Jesse','Jodie']}\");\n+    Truck truck = truckAdapter.fromJson(\"{'horsePower':0.0,'passengers':['Jesse','Jodie']}\".replace('\\'', '\\\"'));\n     assertEquals(Arrays.asList(new Person(\"Jesse\", -1), new Person(\"Jodie\", -1)), truck.passengers);\n   }\n \n     truckAdapter = miniGson.getAdapter(Truck.class);\n   }\n \n-  public void testSerializeMap() throws IOException {\n+  public void testSerializeMap() {\n     Map<String, Double> map = new LinkedHashMap<String, Double>();\n     map.put(\"a\", 5.0);\n     map.put(\"b\", 10.0);\n-    assertEquals(\"{'a':5.0,'b':10.0}\", toJson(mapAdapter, map).replace('\"', '\\''));\n+    assertEquals(\"{'a':5.0,'b':10.0}\", mapAdapter.toJson(map).replace('\"', '\\''));\n   }\n \n   public void testDeserializeMap() throws IOException {\n     Map<String, Double> map = new LinkedHashMap<String, Double>();\n     map.put(\"a\", 5.0);\n     map.put(\"b\", 10.0);\n-    assertEquals(map, fromJson(mapAdapter, \"{'a':5.0,'b':10.0}\"));\n-  }\n-\n-  public void testSerialize1dArray() throws IOException {\n+    assertEquals(map, mapAdapter.fromJson(\"{'a':5.0,'b':10.0}\".replace('\\'', '\\\"')));\n+  }\n+\n+  public void testSerialize1dArray() {\n     TypeAdapter<double[]> arrayAdapter = miniGson.getAdapter(new TypeToken<double[]>() {});\n-    assertEquals(\"[1.0,2.0,3.0]\", toJson(arrayAdapter, new double[]{1.0, 2.0, 3.0}));\n+    assertEquals(\"[1.0,2.0,3.0]\", arrayAdapter.toJson(new double[]{ 1.0, 2.0, 3.0 }));\n   }\n \n   public void testDeserialize1dArray() throws IOException {\n     TypeAdapter<double[]> arrayAdapter = miniGson.getAdapter(new TypeToken<double[]>() {});\n-    double[] array = fromJson(arrayAdapter, \"[1.0,2.0,3.0]\");\n+    double[] array = arrayAdapter.fromJson(\"[1.0,2.0,3.0]\");\n     assertTrue(Arrays.toString(array), Arrays.equals(new double[]{1.0, 2.0, 3.0}, array));\n   }\n \n-  public void testSerialize2dArray() throws IOException {\n+  public void testSerialize2dArray() {\n     TypeAdapter<double[][]> arrayAdapter = miniGson.getAdapter(new TypeToken<double[][]>() {});\n     double[][] array = { {1.0, 2.0 }, { 3.0 } };\n-    assertEquals(\"[[1.0,2.0],[3.0]]\", toJson(arrayAdapter, array));\n+    assertEquals(\"[[1.0,2.0],[3.0]]\", arrayAdapter.toJson(array));\n   }\n \n   public void testDeserialize2dArray() throws IOException {\n     TypeAdapter<double[][]> arrayAdapter = miniGson.getAdapter(new TypeToken<double[][]>() {});\n-    double[][] array = fromJson(arrayAdapter, \"[[1.0,2.0],[3.0]]\");\n+    double[][] array = arrayAdapter.fromJson(\"[[1.0,2.0],[3.0]]\");\n     double[][] expected = { {1.0, 2.0 }, { 3.0 } };\n     assertTrue(Arrays.toString(array), Arrays.deepEquals(expected, array));\n   }\n     assertEquals(\"jesse\", truck.passengers.get(1).name);\n   }\n \n-  public void testSerializeRecursive() throws IOException {\n+  public void testSerializeRecursive() {\n     TypeAdapter<Node> nodeAdapter = miniGson.getAdapter(Node.class);\n     Node root = new Node(\"root\");\n     root.left = new Node(\"left\");\n     assertEquals(\"{'label':'root',\"\n         + \"'left':{'label':'left','left':null,'right':null},\"\n         + \"'right':{'label':'right','left':null,'right':null}}\",\n-        toJson(nodeAdapter, root).replace('\"', '\\''));\n+        nodeAdapter.toJson(root).replace('\"', '\\''));\n   }\n   \n   public void testFromJsonTree() {\n       this.label = label;\n     }\n   }\n-\n-  // TODO: remove this when TypeAdapter.toJson() is public\n-  private static <T> String toJson(TypeAdapter<T> typeAdapter, T value) throws IOException {\n-    StringWriter stringWriter = new StringWriter();\n-    JsonWriter writer = new JsonWriter(stringWriter);\n-    typeAdapter.write(writer, value);\n-    return stringWriter.toString();\n-  }\n-\n-  // TODO: remove this when TypeAdapter.fromJson() is public\n-  private <T> T fromJson(TypeAdapter<T> typeAdapter, String json) throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(json));\n-    reader.setLenient(true); // TODO: non-lenient?\n-    return typeAdapter.read(reader);\n-  }\n }\n--- a/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java\n+++ b/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java\n    * throw an {@link java.lang.UnsupportedOperationException}\n    * @param c instance of the class to be checked\n    */\n-  private static void assertInstantiable(Class<?> c) {\n+  static void assertInstantiable(Class<?> c) {\n     int modifiers = c.getModifiers();\n     if (Modifier.isInterface(modifiers)) {\n       throw new UnsupportedOperationException(\"Interface can't be instantiated! Interface name: \" + c.getName());\n--- a/gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java\n public final class TreeTypeAdapter<T> extends TypeAdapter<T> {\n   private final JsonSerializer<T> serializer;\n   private final JsonDeserializer<T> deserializer;\n-  private final Gson gson;\n+  final Gson gson;\n   private final TypeToken<T> typeToken;\n   private final TypeAdapterFactory skipPast;\n   private final GsonContextImpl context = new GsonContextImpl();\n--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonReader.java\n     return getClass().getSimpleName() + locationString();\n   }\n \n-  private String locationString() {\n+  String locationString() {\n     int line = lineNumber + 1;\n     int column = pos - lineStart + 1;\n     return \" at line \" + line + \" column \" + column + \" path \" + getPath();", "timestamp": 1493735831, "metainfo": ""}