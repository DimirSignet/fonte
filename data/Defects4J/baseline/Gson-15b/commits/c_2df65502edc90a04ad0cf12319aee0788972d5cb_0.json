{"sha": "2df65502edc90a04ad0cf12319aee0788972d5cb", "log": "Don't use ThreadLocals for @JsonAdapter factories and getDelegateAdapter().", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n    * @since 2.2\n    */\n   public <T> TypeAdapter<T> getDelegateAdapter(TypeAdapterFactory skipPast, TypeToken<T> type) {\n-    // If the specified skipPast factory is not registered, ignore it.\n-    boolean skipPastFound = skipPast == null\n-        || (!factories.contains(skipPast) && jsonAdapterFactory.getDelegateAdapterFactory(type) == null);\n+    boolean skipPastFound = false;\n+\n+    // Hack. If the skipPast factory isn't registered, assume the factory is being requested via\n+    // our @JsonAdapter annotation.\n+    if (!factories.contains(skipPast)) {\n+      skipPast = jsonAdapterFactory;\n+    }\n \n     for (TypeAdapterFactory factory : factories) {\n       if (!skipPastFound) {\n-        skipPastFound = factory == skipPast;\n-        if (!skipPastFound && factory instanceof JsonAdapterAnnotationTypeAdapterFactory) {\n-          // Also check if there is a registered JsonAdapter for it\n-          factory = ((JsonAdapterAnnotationTypeAdapterFactory)factory).getDelegateAdapterFactory(type);\n-          skipPastFound = factory == skipPast;\n+        if (factory == skipPast) {\n+          skipPastFound = true;\n         }\n         continue;\n       }\n+\n       TypeAdapter<T> candidate = factory.create(this, type);\n       if (candidate != null) {\n         return candidate;\n       }\n     }\n-    throw new IllegalArgumentException(\"GSON cannot serialize or deserialize \" + type);\n+    throw new IllegalArgumentException(\"GSON cannot serialize \" + type);\n   }\n \n   /**\n--- a/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java\n \n package com.google.gson.internal.bind;\n \n-import java.util.HashMap;\n-import java.util.Map;\n-\n import com.google.gson.Gson;\n import com.google.gson.JsonDeserializer;\n import com.google.gson.JsonSerializer;\n  * @since 2.3\n  */\n public final class JsonAdapterAnnotationTypeAdapterFactory implements TypeAdapterFactory {\n-\n-  @SuppressWarnings(\"rawtypes\")\n-  private final ThreadLocal<Map<Class, TypeAdapterFactory>> activeJsonAdapterFactories = new ThreadLocal<Map<Class, TypeAdapterFactory>>() {\n-    @Override protected Map<Class, TypeAdapterFactory> initialValue() {\n-      // No need for a thread-safe map since we are using it in a single thread\n-      return new HashMap<Class, TypeAdapterFactory>();\n-    }\n-  };\n-\n   private final ConstructorConstructor constructorConstructor;\n \n   public JsonAdapterAnnotationTypeAdapterFactory(ConstructorConstructor constructorConstructor) {\n     return (TypeAdapter<T>) getTypeAdapter(constructorConstructor, gson, targetType, annotation);\n   }\n \n-  public <T> TypeAdapter<T> getDelegateAdapter(Gson gson, TypeAdapterFactory skipPast, TypeToken<T> targetType) {\n-    TypeAdapterFactory factory = getDelegateAdapterFactory(targetType);\n-    if (factory == skipPast) factory = null;\n-    return factory == null ? null: factory.create(gson, targetType);\n-  }\n-\n-  public <T> TypeAdapterFactory getDelegateAdapterFactory(TypeToken<T> targetType) {\n-    Class<?> annotatedClass = targetType.getRawType();\n-    JsonAdapter annotation = annotatedClass.getAnnotation(JsonAdapter.class);\n-    if (annotation == null) {\n-      return null;\n-    }\n-    return getTypeAdapterFactory(annotation, constructorConstructor);\n-  }\n-\n   @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) // Casts guarded by conditionals.\n   TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,\n       TypeToken<?> type, JsonAdapter annotation) {\n-    Class<?> value = annotation.value();\n-    boolean isTypeAdapter = TypeAdapter.class.isAssignableFrom(value);\n-    boolean isJsonSerializer = JsonSerializer.class.isAssignableFrom(value);\n-    boolean isJsonDeserializer = JsonDeserializer.class.isAssignableFrom(value);\n+    Object instance = constructorConstructor.get(TypeToken.get(annotation.value())).construct();\n \n     TypeAdapter<?> typeAdapter;\n-    if (isTypeAdapter || isJsonSerializer || isJsonDeserializer) {\n-      if (isTypeAdapter) {\n-        Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;\n-        typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();\n-      } else if (isJsonSerializer || isJsonDeserializer) {\n-        JsonSerializer serializer = null;\n-        if (isJsonSerializer) {\n-          Class<JsonSerializer<?>> serializerClass = (Class<JsonSerializer<?>>) value;\n-          serializer = constructorConstructor.get(TypeToken.get(serializerClass)).construct();\n-        }\n-        JsonDeserializer deserializer = null;\n-        if (isJsonDeserializer) {\n-          Class<JsonDeserializer<?>> deserializerClass = (Class<JsonDeserializer<?>>) value;\n-          deserializer = constructorConstructor.get(TypeToken.get(deserializerClass)).construct();\n-        }\n-        typeAdapter = new TreeTypeAdapter(serializer, deserializer, gson, type, null);\n-      } else {\n-        typeAdapter = null;\n-      }\n-    } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {\n-      TypeAdapterFactory factory = getTypeAdapterFactory(annotation, constructorConstructor);\n-      typeAdapter = factory == null ? null : factory.create(gson, type);\n+    if (instance instanceof TypeAdapter) {\n+      typeAdapter = (TypeAdapter<?>) instance;\n+    } else if (instance instanceof TypeAdapterFactory) {\n+      typeAdapter = ((TypeAdapterFactory) instance).create(gson, type);\n+    } else if (instance instanceof JsonSerializer || instance instanceof JsonDeserializer) {\n+      JsonSerializer<?> serializer = instance instanceof JsonSerializer\n+          ? (JsonSerializer) instance\n+          : null;\n+      JsonDeserializer<?> deserializer = instance instanceof JsonDeserializer\n+          ? (JsonDeserializer) instance\n+          : null;\n+      typeAdapter = new TreeTypeAdapter(serializer, deserializer, gson, type, null);\n     } else {\n       throw new IllegalArgumentException(\n-          \"@JsonAdapter value must be TypeAdapter, TypeAdapterFactory, JsonSerializer or JsonDeserializer reference.\");\n+          \"@JsonAdapter value must be TypeAdapter, TypeAdapterFactory, \"\n+              + \"JsonSerializer or JsonDeserializer reference.\");\n     }\n+\n     if (typeAdapter != null) {\n       typeAdapter = typeAdapter.nullSafe();\n     }\n+\n     return typeAdapter;\n   }\n-\n-\n-  @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) // Casts guarded by conditionals.\n-  TypeAdapterFactory getTypeAdapterFactory(JsonAdapter annotation, ConstructorConstructor constructorConstructor) {\n-    Class<?> value = annotation.value();\n-    if (!TypeAdapterFactory.class.isAssignableFrom(value)) return null;\n-    Map<Class, TypeAdapterFactory> adapterFactories = activeJsonAdapterFactories.get();\n-    TypeAdapterFactory factory = adapterFactories.get(value);\n-    if (factory == null) {\n-      Class<TypeAdapterFactory> typeAdapterFactoryClass = (Class<TypeAdapterFactory>) value;\n-      factory = constructorConstructor.get(TypeToken.get(typeAdapterFactoryClass))\n-          .construct();\n-      adapterFactories.put(value, factory);\n-    }\n-    return factory;\n-  }\n }\n--- a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonToken;\n import com.google.gson.stream.JsonWriter;\n-\n import java.io.IOException;\n import java.lang.reflect.Field;\n import java.lang.reflect.Type;\n     TypeAdapter<?> mapped = null;\n     if (annotation != null) {\n       mapped = jsonAdapterFactory.getTypeAdapter(\n-                constructorConstructor, context, fieldType, annotation);\n+          constructorConstructor, context, fieldType, annotation);\n     }\n     final boolean jsonAdapterPresent = mapped != null;\n     if (mapped == null) mapped = context.getAdapter(fieldType);\n--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterSerializerDeserializerTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/JsonAdapterSerializerDeserializerTest.java\n /*\n- * Copyright (C) 2008 Google Inc.\n+ * Copyright (C) 2016 Google Inc.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.", "timestamp": 1464841989, "metainfo": ""}