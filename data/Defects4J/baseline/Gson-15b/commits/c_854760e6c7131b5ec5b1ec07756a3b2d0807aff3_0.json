{"sha": "854760e6c7131b5ec5b1ec07756a3b2d0807aff3", "log": "Merge pull request #864 from juandiana/runtimetypeadapterfactory-docs-fix  Minor documentation fix on RuntimeTypeAdapterFactory", "commit": "\n--- a/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java\n+++ b/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java\n  * Create a {@code RuntimeTypeAdapterFactory} by passing the base type and type field\n  * name to the {@link #of} factory method. If you don't supply an explicit type\n  * field name, {@code \"type\"} will be used. <pre>   {@code\n- *   RuntimeTypeAdapterFactory<Shape> shapeAdapter\n+ *   RuntimeTypeAdapterFactory<Shape> shapeAdapterFactory\n  *       = RuntimeTypeAdapterFactory.of(Shape.class, \"type\");\n  * }</pre>\n  * Next register all of your subtypes. Every subtype must be explicitly\n  *   shapeAdapter.registerSubtype(Circle.class, \"Circle\");\n  *   shapeAdapter.registerSubtype(Diamond.class, \"Diamond\");\n  * }</pre>\n- * Finally, register the type adapter in your application's GSON builder:\n+ * Finally, register the type adapter factory in your application's GSON builder:\n  * <pre>   {@code\n  *   Gson gson = new GsonBuilder()\n- *       .registerTypeAdapter(Shape.class, shapeAdapter)\n+ *       .registerTypeAdapterFactory(Shape.class, shapeAdapterFactory)\n  *       .create();\n  * }</pre>\n  * Like {@code GsonBuilder}, this API supports chaining: <pre>   {@code\n- *   RuntimeTypeAdapterFactory<Shape> shapeAdapter = RuntimeTypeAdapterFactory.of(Shape.class)\n+ *   RuntimeTypeAdapterFactory<Shape> shapeAdapterFactory = RuntimeTypeAdapterFactory.of(Shape.class)\n  *       .registerSubtype(Rectangle.class)\n  *       .registerSubtype(Circle.class)\n  *       .registerSubtype(Diamond.class);", "timestamp": 1464123501, "metainfo": ""}