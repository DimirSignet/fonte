{"sha": "943c67427630f3da3f6ad7d8edfdf8b0f5451d9a", "log": "Removed ThreadLocal for activeJsonAdapterClasses", "commit": "\n--- a/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java\n  */\n public final class JsonAdapterAnnotationTypeAdapterFactory implements TypeAdapterFactory {\n \n-  @SuppressWarnings(\"rawtypes\")\n-  private final ThreadLocal<Map<Class, TypeAdapter>> activeJsonAdapterClasses = new ThreadLocal<Map<Class, TypeAdapter>>() {\n-    @Override protected Map<Class, TypeAdapter> initialValue() {\n-      // No need for a thread-safe map since we are using it in a single thread\n-      return new HashMap<Class, TypeAdapter>();\n-    }\n-  };\n   @SuppressWarnings(\"rawtypes\")\n   private final ThreadLocal<Map<Class, TypeAdapterFactory>> activeJsonAdapterFactories = new ThreadLocal<Map<Class, TypeAdapterFactory>>() {\n     @Override protected Map<Class, TypeAdapterFactory> initialValue() {\n \n     TypeAdapter<?> typeAdapter;\n     if (isTypeAdapter || isJsonSerializer || isJsonDeserializer) {\n-      Map<Class, TypeAdapter> adapters = activeJsonAdapterClasses.get();\n-      typeAdapter = adapters.get(value);\n-      if (typeAdapter == null) {\n-        if (isTypeAdapter) {\n-          Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;\n-          typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();\n-        } else if (isJsonSerializer || isJsonDeserializer) {\n-          JsonSerializer serializer = null;\n-          if (isJsonSerializer) {\n-            Class<JsonSerializer<?>> serializerClass = (Class<JsonSerializer<?>>) value;\n-            serializer = constructorConstructor.get(TypeToken.get(serializerClass)).construct();\n-          }\n-          JsonDeserializer deserializer = null;\n-          if (isJsonDeserializer) {\n-            Class<JsonDeserializer<?>> deserializerClass = (Class<JsonDeserializer<?>>) value;\n-            deserializer = constructorConstructor.get(TypeToken.get(deserializerClass)).construct();\n-          }\n-          typeAdapter = new TreeTypeAdapter(serializer, deserializer, gson, type, null);\n+      if (isTypeAdapter) {\n+        Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;\n+        typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();\n+      } else if (isJsonSerializer || isJsonDeserializer) {\n+        JsonSerializer serializer = null;\n+        if (isJsonSerializer) {\n+          Class<JsonSerializer<?>> serializerClass = (Class<JsonSerializer<?>>) value;\n+          serializer = constructorConstructor.get(TypeToken.get(serializerClass)).construct();\n         }\n-        adapters.put(value, typeAdapter);\n+        JsonDeserializer deserializer = null;\n+        if (isJsonDeserializer) {\n+          Class<JsonDeserializer<?>> deserializerClass = (Class<JsonDeserializer<?>>) value;\n+          deserializer = constructorConstructor.get(TypeToken.get(deserializerClass)).construct();\n+        }\n+        typeAdapter = new TreeTypeAdapter(serializer, deserializer, gson, type, null);\n+      } else {\n+        typeAdapter = null;\n       }\n     } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {\n       TypeAdapterFactory factory = getTypeAdapterFactory(annotation, constructorConstructor);", "timestamp": 1464840505, "metainfo": ""}