{"sha": "ecaa57114f3cc51e091d6699c0d82cd2c84a3a7f", "log": "Consolidate location and path rendering for exceptions.", "commit": "\n--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonReader.java\n       pathIndices[stackSize - 1] = 0;\n       peeked = PEEKED_NONE;\n     } else {\n-      throw new IllegalStateException(\"Expected BEGIN_ARRAY but was \" + peek()\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new IllegalStateException(\"Expected BEGIN_ARRAY but was \" + peek() + locationString());\n     }\n   }\n \n       pathIndices[stackSize - 1]++;\n       peeked = PEEKED_NONE;\n     } else {\n-      throw new IllegalStateException(\"Expected END_ARRAY but was \" + peek()\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new IllegalStateException(\"Expected END_ARRAY but was \" + peek() + locationString());\n     }\n   }\n \n       push(JsonScope.EMPTY_OBJECT);\n       peeked = PEEKED_NONE;\n     } else {\n-      throw new IllegalStateException(\"Expected BEGIN_OBJECT but was \" + peek()\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new IllegalStateException(\"Expected BEGIN_OBJECT but was \" + peek() + locationString());\n     }\n   }\n \n       pathIndices[stackSize - 1]++;\n       peeked = PEEKED_NONE;\n     } else {\n-      throw new IllegalStateException(\"Expected END_OBJECT but was \" + peek()\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new IllegalStateException(\"Expected END_OBJECT but was \" + peek() + locationString());\n     }\n   }\n \n     } else if (p == PEEKED_DOUBLE_QUOTED_NAME) {\n       result = nextQuotedValue('\"');\n     } else {\n-      throw new IllegalStateException(\"Expected a name but was \" + peek()\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new IllegalStateException(\"Expected a name but was \" + peek() + locationString());\n     }\n     peeked = PEEKED_NONE;\n     pathNames[stackSize - 1] = result;\n       result = new String(buffer, pos, peekedNumberLength);\n       pos += peekedNumberLength;\n     } else {\n-      throw new IllegalStateException(\"Expected a string but was \" + peek()\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new IllegalStateException(\"Expected a string but was \" + peek() + locationString());\n     }\n     peeked = PEEKED_NONE;\n     pathIndices[stackSize - 1]++;\n       pathIndices[stackSize - 1]++;\n       return false;\n     }\n-    throw new IllegalStateException(\"Expected a boolean but was \" + peek()\n-        + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+    throw new IllegalStateException(\"Expected a boolean but was \" + peek() + locationString());\n   }\n \n   /**\n       peeked = PEEKED_NONE;\n       pathIndices[stackSize - 1]++;\n     } else {\n-      throw new IllegalStateException(\"Expected null but was \" + peek()\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new IllegalStateException(\"Expected null but was \" + peek() + locationString());\n     }\n   }\n \n     } else if (p == PEEKED_UNQUOTED) {\n       peekedString = nextUnquotedValue();\n     } else if (p != PEEKED_BUFFERED) {\n-      throw new IllegalStateException(\"Expected a double but was \" + peek()\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new IllegalStateException(\"Expected a double but was \" + peek() + locationString());\n     }\n \n     peeked = PEEKED_BUFFERED;\n     double result = Double.parseDouble(peekedString); // don't catch this NumberFormatException.\n     if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n-      throw new MalformedJsonException(\"JSON forbids NaN and infinities: \" + result\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new MalformedJsonException(\n+          \"JSON forbids NaN and infinities: \" + result + locationString());\n     }\n     peekedString = null;\n     peeked = PEEKED_NONE;\n         // Fall back to parse as a double below.\n       }\n     } else {\n-      throw new IllegalStateException(\"Expected a long but was \" + peek()\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new IllegalStateException(\"Expected a long but was \" + peek() + locationString());\n     }\n \n     peeked = PEEKED_BUFFERED;\n     double asDouble = Double.parseDouble(peekedString); // don't catch this NumberFormatException.\n     long result = (long) asDouble;\n     if (result != asDouble) { // Make sure no precision was lost casting to 'long'.\n-      throw new NumberFormatException(\"Expected a long but was \" + peekedString\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new NumberFormatException(\"Expected a long but was \" + peekedString + locationString());\n     }\n     peekedString = null;\n     peeked = PEEKED_NONE;\n     if (p == PEEKED_LONG) {\n       result = (int) peekedLong;\n       if (peekedLong != result) { // Make sure no precision was lost casting to 'int'.\n-        throw new NumberFormatException(\"Expected an int but was \" + peekedLong\n-            + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+        throw new NumberFormatException(\"Expected an int but was \" + peekedLong + locationString());\n       }\n       peeked = PEEKED_NONE;\n       pathIndices[stackSize - 1]++;\n         // Fall back to parse as a double below.\n       }\n     } else {\n-      throw new IllegalStateException(\"Expected an int but was \" + peek()\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new IllegalStateException(\"Expected an int but was \" + peek() + locationString());\n     }\n \n     peeked = PEEKED_BUFFERED;\n     double asDouble = Double.parseDouble(peekedString); // don't catch this NumberFormatException.\n     result = (int) asDouble;\n     if (result != asDouble) { // Make sure no precision was lost casting to 'int'.\n-      throw new NumberFormatException(\"Expected an int but was \" + peekedString\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new NumberFormatException(\"Expected an int but was \" + peekedString + locationString());\n     }\n     peekedString = null;\n     peeked = PEEKED_NONE;\n     return false;\n   }\n \n-  int getLineNumber() {\n-    return lineNumber + 1;\n-  }\n-\n-  int getColumnNumber() {\n-    return pos - lineStart + 1;\n-  }\n-\n   /**\n    * Returns the next character in the stream that is neither whitespace nor a\n    * part of a comment. When this returns, the returned character is always at\n       }\n     }\n     if (throwOnEof) {\n-      throw new EOFException(\"End of input\"\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());\n+      throw new EOFException(\"End of input\" + locationString());\n     } else {\n       return -1;\n     }\n   }\n \n   @Override public String toString() {\n-    return getClass().getSimpleName()\n-        + \" at line \" + getLineNumber() + \" column \" + getColumnNumber();\n+    return getClass().getSimpleName() + locationString();\n+  }\n+\n+  private String locationString() {\n+    int line = lineNumber + 1;\n+    int column = pos - lineStart + 1;\n+    return \" at line \" + line + \" column \" + column + \" path \" + getPath();\n   }\n \n   /**\n    * with this reader's content.\n    */\n   private IOException syntaxError(String message) throws IOException {\n-    throw new MalformedJsonException(message\n-        + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+    throw new MalformedJsonException(message + locationString());\n   }\n \n   /**\n         } else if (p == PEEKED_UNQUOTED_NAME) {\n           reader.peeked = PEEKED_UNQUOTED;\n         } else {\n-          throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + \" \"\n-              + \" at line \" + reader.getLineNumber() + \" column \" + reader.getColumnNumber()\n-              + \" path \" + reader.getPath());\n+          throw new IllegalStateException(\n+              \"Expected a name but was \" + reader.peek() + reader.locationString());\n         }\n       }\n     };", "timestamp": 1465509756, "metainfo": ""}