{"sha": "4512f31c698d41cdd97144187fb3ed3b94102768", "log": "Added PostConstruct Factory sample in Extras.", "commit": "\n--- /dev/null\n+++ b/extras/src/main/java/com/google/gson/typeadapters/PostConstructAdapterFactory.java\n+/*\n+ * Copyright (C) 2016 Gson Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.typeadapters;\n+\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+\n+import javax.annotation.PostConstruct;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.TypeAdapter;\n+import com.google.gson.TypeAdapterFactory;\n+import com.google.gson.reflect.TypeToken;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonWriter;\n+\n+public class PostConstructAdapterFactory implements TypeAdapterFactory {\n+    // copied from https://gist.github.com/swankjesse/20df26adaf639ed7fd160f145a0b661a\n+    @Override\n+    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\n+        for (Class<?> t = type.getRawType(); t != Object.class; t = t.getSuperclass()) {\n+            for (Method m : t.getDeclaredMethods()) {\n+                if (m.isAnnotationPresent(PostConstruct.class)) {\n+                    m.setAccessible(true);\n+                    TypeAdapter<T> delegate = gson.getDelegateAdapter(this, type);\n+                    return new PostConstructAdapter<T>(delegate, m);\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    final static class PostConstructAdapter<T> extends TypeAdapter<T> {\n+        private final TypeAdapter<T> delegate;\n+        private final Method method;\n+\n+        public PostConstructAdapter(TypeAdapter<T> delegate, Method method) {\n+            this.delegate = delegate;\n+            this.method = method;\n+        }\n+\n+        @Override public T read(JsonReader in) throws IOException {\n+            T result = delegate.read(in);\n+            if (result != null) {\n+                try {\n+                    method.invoke(result);\n+                } catch (IllegalAccessException e) {\n+                    throw new AssertionError();\n+                } catch (InvocationTargetException e) {\n+                    if (e.getCause() instanceof RuntimeException) throw (RuntimeException) e.getCause();\n+                    throw new RuntimeException(e.getCause());\n+                }\n+            }\n+            return result;\n+        }\n+\n+        @Override public void write(JsonWriter out, T value) throws IOException {\n+            delegate.write(out, value);\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/extras/src/test/java/com/google/gson/typeadapters/PostConstructAdapterFactoryTest.java\n+/*\n+ * Copyright (C) 2016 Gson Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.typeadapters;\n+\n+import javax.annotation.PostConstruct;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+import junit.framework.TestCase;\n+\n+public class PostConstructAdapterFactoryTest extends TestCase {\n+    public void test() throws Exception {\n+        Gson gson = new GsonBuilder()\n+                .registerTypeAdapterFactory(new PostConstructAdapterFactory())\n+                .create();\n+        gson.fromJson(\"{\\\"bread\\\": \\\"white\\\", \\\"cheese\\\": \\\"cheddar\\\"}\", Sandwich.class);\n+        try {\n+            gson.fromJson(\"{\\\"bread\\\": \\\"cheesey bread\\\", \\\"cheese\\\": \\\"swiss\\\"}\", Sandwich.class);\n+            fail();\n+        } catch (IllegalArgumentException expected) {\n+            assertEquals(\"too cheesey\", expected.getMessage());\n+        }\n+    }\n+\n+    static class Sandwich {\n+        String bread;\n+        String cheese;\n+\n+        @PostConstruct void validate() {\n+            if (bread.equals(\"cheesey bread\") && cheese != null) {\n+                throw new IllegalArgumentException(\"too cheesey\");\n+            }\n+        }\n+    }\n+}", "timestamp": 1474072534, "metainfo": ""}