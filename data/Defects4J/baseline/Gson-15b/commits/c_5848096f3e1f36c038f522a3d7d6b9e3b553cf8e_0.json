{"sha": "5848096f3e1f36c038f522a3d7d6b9e3b553cf8e", "log": "Size allocation of StringBuilder (#1047)  Size allocation of StringBuilder", "commit": "\n--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonReader.java\n \n       // use a StringBuilder when the value is too long. This is too long to be a number!\n       if (builder == null) {\n-        builder = new StringBuilder();\n+        builder = new StringBuilder(Math.max(i,16));\n       }\n       builder.append(buffer, pos, i);\n       pos += i;\n         break;\n       }\n     }\n-\n-    String result;\n-    if (builder == null) {\n-      result = new String(buffer, pos, i);\n-    } else {\n-      builder.append(buffer, pos, i);\n-      result = builder.toString();\n-    }\n+   \n+    String result = (null == builder) ? new String(buffer, pos, i) : builder.append(buffer, pos, i).toString();\n     pos += i;\n     return result;\n   }\n    * @param toFind a string to search for. Must not contain a newline.\n    */\n   private boolean skipTo(String toFind) throws IOException {\n+    int length = toFind.length();\n     outer:\n-    for (; pos + toFind.length() <= limit || fillBuffer(toFind.length()); pos++) {\n+    for (; pos + length <= limit || fillBuffer(length); pos++) {\n       if (buffer[pos] == '\\n') {\n         lineNumber++;\n         lineStart = pos + 1;\n         continue;\n       }\n-      for (int c = 0; c < toFind.length(); c++) {\n+      for (int c = 0; c < length; c++) {\n         if (buffer[pos + c] != toFind.charAt(c)) {\n           continue outer;\n         }", "timestamp": 1495666149, "metainfo": ""}