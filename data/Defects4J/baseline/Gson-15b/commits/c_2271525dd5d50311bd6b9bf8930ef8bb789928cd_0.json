{"sha": "2271525dd5d50311bd6b9bf8930ef8bb789928cd", "log": "Merge pull request #900 from google/jw/array-and-parameterized-factories  Add static factories for array and parameterized type tokens.", "commit": "\n--- a/gson/src/main/java/com/google/gson/reflect/TypeToken.java\n+++ b/gson/src/main/java/com/google/gson/reflect/TypeToken.java\n   public static <T> TypeToken<T> get(Class<T> type) {\n     return new TypeToken<T>(type);\n   }\n+\n+  /**\n+   * Gets type literal for the parameterized type represented by applying {@code typeArguments} to\n+   * {@code rawType}.\n+   */\n+  public static TypeToken<?> getParameterized(Type rawType, Type... typeArguments) {\n+    return new TypeToken<Object>($Gson$Types.newParameterizedTypeWithOwner(null, rawType, typeArguments));\n+  }\n+\n+  /**\n+   * Gets type literal for the array type whose elements are all instances of {@code componentType}.\n+   */\n+  public static TypeToken<?> getArray(Type componentType) {\n+    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\n+  }\n }\n--- a/gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java\n+++ b/gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java\n import java.lang.reflect.Type;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Map;\n import java.util.RandomAccess;\n import java.util.Set;\n import junit.framework.TestCase;\n     // listOfSetOfUnknown = listOfSetOfString; // doesn't compile; must be false\n     assertFalse(TypeToken.get(b).isAssignableFrom(a));\n   }\n+\n+  public void testArrayFactory() {\n+    TypeToken<?> expectedStringArray = new TypeToken<String[]>() {};\n+    assertEquals(expectedStringArray, TypeToken.getArray(String.class));\n+\n+    TypeToken<?> expectedListOfStringArray = new TypeToken<List<String>[]>() {};\n+    Type listOfString = new TypeToken<List<String>>() {}.getType();\n+    assertEquals(expectedListOfStringArray, TypeToken.getArray(listOfString));\n+  }\n+\n+  public void testParameterizedFactory() {\n+    TypeToken<?> expectedListOfString = new TypeToken<List<String>>() {};\n+    assertEquals(expectedListOfString, TypeToken.getParameterized(List.class, String.class));\n+\n+    TypeToken<?> expectedMapOfStringToString = new TypeToken<Map<String, String>>() {};\n+    assertEquals(expectedMapOfStringToString, TypeToken.getParameterized(Map.class, String.class, String.class));\n+\n+    TypeToken<?> expectedListOfListOfListOfString = new TypeToken<List<List<List<String>>>>() {};\n+    Type listOfString = TypeToken.getParameterized(List.class, String.class).getType();\n+    Type listOfListOfString = TypeToken.getParameterized(List.class, listOfString).getType();\n+    assertEquals(expectedListOfListOfListOfString, TypeToken.getParameterized(List.class, listOfListOfString));\n+  }\n }", "timestamp": 1471021135, "metainfo": ""}