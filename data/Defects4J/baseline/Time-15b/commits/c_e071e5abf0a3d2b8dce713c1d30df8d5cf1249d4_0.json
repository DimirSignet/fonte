{"sha": "e071e5abf0a3d2b8dce713c1d30df8d5cf1249d4", "log": "Add LocalDateTime.toDateTime() [2465359] providing direct conversion to JDK Date handling DST and time zone data differences  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/LocalDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/LocalDateTime.java\n import java.util.Calendar;\n import java.util.Date;\n import java.util.Locale;\n+import java.util.TimeZone;\n \n import org.joda.time.base.BaseLocal;\n import org.joda.time.chrono.ISOChronology;\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Get the date time as a <code>java.util.Date</code>.\n+     * <p>\n+     * The <code>Date</code> object created has exactly the same fields as this\n+     * date-time, except when the time would be invalid due to a daylight savings\n+     * gap. In that case, the time will be set to the earliest valid time after the gap.\n+     * <p>\n+     * In the case of a daylight savings overlap, the earlier instant is selected.\n+     * <p>\n+     * Converting to a JDK Date is full of complications as the JDK Date constructor\n+     * doesn't behave as you might expect around DST transitions. This method works\n+     * by taking a first guess and then adjusting. This also handles the situation\n+     * where the JDK time zone data differs from the Joda-Time time zone data.\n+     *\n+     * @return a Date initialised with this date-time, never null\n+     */\n+    public Date toDate() {\n+        int dom = getDayOfMonth();\n+        Date date = new Date(getYear() - 1900, getMonthOfYear() - 1, dom,\n+                        getHourOfDay(), getMinuteOfHour(), getSecondOfMinute());\n+        date.setTime(date.getTime() + getMillisOfSecond());\n+        LocalDateTime check = LocalDateTime.fromDateFields(date);\n+        if (check.isBefore(this)) {\n+            // DST gap\n+            // move forward in units of one minute until equal/after\n+            while (check.isBefore(this)) {\n+                date.setTime(date.getTime() + 60000);\n+                check = LocalDateTime.fromDateFields(date);\n+            }\n+            // move back in units of one second until date wrong\n+            while (check.isBefore(this) == false) {\n+                date.setTime(date.getTime() - 1000);\n+                check = LocalDateTime.fromDateFields(date);\n+            }\n+            date.setTime(date.getTime() + 1000);\n+        } else if (check.equals(this)) {\n+            // check for DST overlap\n+            Date earlier = new Date(date.getTime() - TimeZone.getDefault().getDSTSavings());\n+            check = LocalDateTime.fromDateFields(earlier);\n+            if (check.equals(this)) {\n+                date = earlier;\n+            }\n+        }\n+        return date;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Returns a copy of this datetime with different local millis.\n      * <p>\n      * The returned object will be a new instance of the same type.\n--- a/JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n import java.util.Locale;\n+import java.util.SimpleTimeZone;\n+import java.util.TimeZone;\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testToDate_summer() {\n+        LocalDateTime base = new LocalDateTime(2005, 7, 9, 10, 20, 30, 40, COPTIC_PARIS);\n+        \n+        Date test = base.toDate();\n+        check(base, 2005, 7, 9, 10, 20, 30, 40);\n+        \n+        GregorianCalendar gcal = new GregorianCalendar();\n+        gcal.clear();\n+        gcal.set(Calendar.YEAR, 2005);\n+        gcal.set(Calendar.MONTH, Calendar.JULY);\n+        gcal.set(Calendar.DAY_OF_MONTH, 9);\n+        gcal.set(Calendar.HOUR_OF_DAY, 10);\n+        gcal.set(Calendar.MINUTE, 20);\n+        gcal.set(Calendar.SECOND, 30);\n+        gcal.set(Calendar.MILLISECOND, 40);\n+        assertEquals(gcal.getTime(), test);\n+    }\n+\n+    public void testToDate_winter() {\n+        LocalDateTime base = new LocalDateTime(2005, 1, 9, 10, 20, 30, 40, COPTIC_PARIS);\n+        \n+        Date test = base.toDate();\n+        check(base, 2005, 1, 9, 10, 20, 30, 40);\n+        \n+        GregorianCalendar gcal = new GregorianCalendar();\n+        gcal.clear();\n+        gcal.set(Calendar.YEAR, 2005);\n+        gcal.set(Calendar.MONTH, Calendar.JANUARY);\n+        gcal.set(Calendar.DAY_OF_MONTH, 9);\n+        gcal.set(Calendar.HOUR_OF_DAY, 10);\n+        gcal.set(Calendar.MINUTE, 20);\n+        gcal.set(Calendar.SECOND, 30);\n+        gcal.set(Calendar.MILLISECOND, 40);\n+        assertEquals(gcal.getTime(), test);\n+    }\n+\n+    public void testToDate_springDST() {\n+        LocalDateTime base = new LocalDateTime(2007, 4, 2, 0, 20, 0, 0);\n+        \n+        SimpleTimeZone testZone = new SimpleTimeZone(3600000, \"NoMidnight\",\n+                Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000);\n+        TimeZone currentZone = TimeZone.getDefault();\n+        try {\n+            TimeZone.setDefault(testZone);\n+            Date test = base.toDate();\n+            check(base, 2007, 4, 2, 0, 20, 0, 0);\n+            assertEquals(\"Mon Apr 02 01:00:00 GMT+02:00 2007\", test.toString());\n+        } finally {\n+            TimeZone.setDefault(currentZone);\n+        }\n+    }\n+\n+    public void testToDate_springDST_2Hour40Savings() {\n+        LocalDateTime base = new LocalDateTime(2007, 4, 2, 0, 20, 0, 0);\n+        \n+        SimpleTimeZone testZone = new SimpleTimeZone(3600000, \"NoMidnight\",\n+                Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000, (3600000 / 6) * 16);\n+        TimeZone currentZone = TimeZone.getDefault();\n+        try {\n+            TimeZone.setDefault(testZone);\n+            Date test = base.toDate();\n+            check(base, 2007, 4, 2, 0, 20, 0, 0);\n+            assertEquals(\"Mon Apr 02 02:40:00 GMT+03:40 2007\", test.toString());\n+        } finally {\n+            TimeZone.setDefault(currentZone);\n+        }\n+    }\n+\n+    public void testToDate_autumnDST() {\n+        LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0);\n+        \n+        SimpleTimeZone testZone = new SimpleTimeZone(3600000, \"NoMidnight\",\n+                Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000);\n+        TimeZone currentZone = TimeZone.getDefault();\n+        try {\n+            TimeZone.setDefault(testZone);\n+            Date test = base.toDate();\n+            check(base, 2007, 10, 2, 0, 20, 30, 0);\n+            assertEquals(\"Tue Oct 02 00:20:30 GMT+02:00 2007\", test.toString());\n+        } finally {\n+            TimeZone.setDefault(currentZone);\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testProperty() {\n         LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, GJ_UTC);\n         assertEquals(test.year(), test.property(DateTimeFieldType.year()));", "timestamp": 1257601185, "metainfo": ""}