{"sha": "cf252ecc2361b0deeb93dd074dbd077ffed16d4e", "log": "Support object onversion; define duration setting methods   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/MutableInterval.java\n+++ b/JodaTime/src/java/org/joda/time/MutableInterval.java\n  * <p>\n  * If performing significant calculations on an interval, it may be faster to\n  * convert an Interval object to a MutableInterval one.\n+ * <p>\n+ * MutableInterval is mutable and not thread-safe, unless concurrent threads\n+ * are not invoking mutator methods.\n  *\n  * @author Stephen Colebourne\n+ * @author Brian S O'Neill\n  * @since 1.0\n  */\n public final class MutableInterval extends AbstractInterval\n     }\n     \n     /**\n+     * Constructs a time interval as a copy of another.\n+     * \n+     * @param interval the time interval to convert\n+     * @throws IllegalArgumentException if the interval is null\n+     */\n+    public MutableInterval(Object interval) {\n+        super(interval);\n+    }\n+\n+    /**\n      * Constructs an interval from a start and end instant.\n      * \n      * @param startInstant  start of this interval, as milliseconds from\n      * \n      * @param start  start of this interval\n      * @param duration  duration of this interval\n+     * @throws IllegalArgumentException if start or duration is null\n      */\n     public MutableInterval(ReadableInstant start, ReadableDuration duration) {\n         super(start, duration);\n      * \n      * @param duration duration of this interval\n      * @param end end of this interval\n+     * @throws IllegalArgumentException if duration or end is null\n      */\n     public MutableInterval(ReadableDuration duration, ReadableInstant end) {\n         super(duration, end);\n     }\n-    \n-    /**\n-     * Constructors an interval from an ISO format string.\n-     *\n-     * @param intervalStr  an ISO interval string\n-     */\n-    /* TODO\n-    public MutableInterval(String intervalStr) throws ParseException {\n-        Interval interval = (Interval) TimePeriodFormat.ISO_STANDARD_BASIC_FORMAT.parseObject(intervalStr);\n-        iStartMillis = interval.getStartMillis();\n-        iEndMillis = interval.getEndMillis();\n-    }\n-    */\n     \n     //-----------------------------------------------------------------------\n     /**\n         super.setEndMillis(instant.getMillis());\n     }\n \n+    /**\n+     * Sets the duration of this time interval, preserving the start instant.\n+     *\n+     * @param millisDuration  new duration for interval\n+     */\n+    public void setDurationAfterStart(long millisDuration) {\n+        super.setEndMillis(getStartMillis() + millisDuration);\n+    }\n+\n+    /**\n+     * Sets the duration of this time interval, preserving the start instant.\n+     *\n+     * @param duration  new duration for interval\n+     */\n+    public void setDurationAfterStart(ReadableDuration duration) {\n+        if (duration == null) {\n+            throw new IllegalArgumentException(\"The duration must not be null\");\n+        }\n+        super.setEndMillis(duration.addTo(getStartMillis(), 1));\n+    }\n+\n+    /**\n+     * Sets the duration of this time interval, preserving the end instant.\n+     *\n+     * @param millisDuration  new duration for interval\n+     */\n+    public void setDurationBeforeEnd(long millisDuration) {\n+        super.setStartMillis(getEndMillis() - millisDuration);\n+    }\n+\n+    /**\n+     * Sets the duration of this time interval, preserving the end instant.\n+     *\n+     * @param duration  new duration for interval\n+     */\n+    public void setDurationBeforeEnd(ReadableDuration duration) {\n+        if (duration == null) {\n+            throw new IllegalArgumentException(\"The duration must not be null\");\n+        }\n+        super.setStartMillis(duration.addTo(getEndMillis(), -1));\n+    }\n+\n }", "timestamp": 1072051384, "metainfo": ""}