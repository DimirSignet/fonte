{"sha": "a8db2e4be27585dad5c3195937a88395f4cb0314", "log": "Add test for parse formats   ", "commit": "\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/test/time/TestParseISO.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.test.time;\n+\n+import junit.framework.Assert;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.MutableDateTime;\n+import org.joda.time.format.DateTimeParser;\n+import org.joda.time.format.ISODateTimeFormat;\n+\n+/**\n+ * Unit test the parsing of ISO format datetimes\n+ *\n+ * @author Guy Allard\n+ * @author Stephen Colebourne\n+ */\n+public class TestParseISO extends BulkTest {\n+    \n+    private static final int DEFAULT = 99999;\n+\n+    /**\n+     * This is the main class for this test suite.\n+     * @param args command line arguments.\n+     */\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+    \n+    /**\n+     * TestSuite suite() is a junit required method.\n+     * @see org.joda.test.time.BulkTest\n+     */\n+    public static TestSuite suite() {\n+        return BulkTest.makeSuite(TestParseISO.class);\n+    }\n+    \n+    /**\n+     * TestConstructors constructor.\n+     * @param name\n+     */\n+    public TestParseISO(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+    }\n+    \n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    // Dates\n+    //-----------------------------------------------------------------------\n+    public void testSpecCompleteDate() {\n+        new DMatcher(\"5.2.1.1\", \"1999-10-20\", \"19991020\",\n+            19, 99, 10, 20, DEFAULT).run();\n+    }        \n+    //-----------------------------------------------------------------------\n+    public void testSpecReducedPrecisionCYM() {\n+        new DMatcher(\"5.2.1.2\", \"1999-10\", \"199910\",\n+            19, 99, 10, DEFAULT, DEFAULT).run();\n+    }\n+    public void testSpecReducedPrecisionCY() {\n+        new DMatcher(\"5.2.1.2\", \"1999\", \"1999\",\n+            19, 99, DEFAULT, DEFAULT, DEFAULT).run();\n+    }\n+    public void testSpecReducedPrecisionC() {\n+        new DMatcher(\"5.2.1.2\", \"20\", \"20\",\n+            20, DEFAULT, DEFAULT, DEFAULT, DEFAULT).run();\n+        new DMatcher(\"5.2.1.2\", \"19\", \"19\",\n+            19, DEFAULT, DEFAULT, DEFAULT, DEFAULT).run();\n+    }\n+    //-----------------------------------------------------------------------\n+    public void testSpecTruncatedYMD() {\n+        new DMatcher(\"5.2.1.3\", \"85-04-11\", \"850411\",\n+            DEFAULT, 85, 4, 11, DEFAULT).run();\n+    }\n+    public void testSpecTruncatedYM() {\n+        new DMatcher(\"5.2.1.3\", \"-85-04\", \"-8504\",\n+            DEFAULT, 85, 4, DEFAULT, DEFAULT).run();\n+    }\n+    public void testSpecTruncatedY() {\n+        new DMatcher(\"5.2.1.3\", \"-85\", \"-85\",\n+            DEFAULT, 85, DEFAULT, DEFAULT, DEFAULT).run();\n+    }\n+    public void testSpecTruncatedMD() {\n+        new DMatcher(\"5.2.1.3\", \"--04-11\", \"--0411\",\n+            DEFAULT, DEFAULT, 4, 11, DEFAULT).run();\n+    }\n+    public void testSpecTruncatedM() {\n+        new DMatcher(\"5.2.1.3\", \"--04\", \"--04\",\n+            DEFAULT, DEFAULT, 4, DEFAULT, DEFAULT).run();\n+    }\n+    public void testSpecTruncatedD() {\n+        new DMatcher(\"5.2.1.3\", \"---11\", \"---11\",\n+            DEFAULT, DEFAULT, DEFAULT, 11, DEFAULT).run();\n+    }\n+    //-----------------------------------------------------------------------\n+    public void testSpecExpandedCYMD() {\n+        new DMatcher(\"5.2.1.4\", \"+001985-04-11\", \"+0019850411\",\n+            19, 85, 4, 11, DEFAULT).run();\n+    }\n+    public void testSpecExpandedCYM() {\n+        new DMatcher(\"5.2.1.4\", \"+001985-04\", \"+00198504\",\n+            19, 85, 4, DEFAULT, DEFAULT).run();\n+    }\n+    public void testSpecExpandedCY() {\n+        new DMatcher(\"5.2.1.4\", \"+001985\", \"+001985\",\n+            19, 85, DEFAULT, DEFAULT, DEFAULT).run();\n+    }\n+    public void testSpecExpandedC() {\n+        // Not supported - could only tell difference from CY if you knew\n+        // number of digits representing year\n+//        new DMatcher(\"5.2.1.4\", \"+0019\", \"+0019\",\n+//            19, DEFAULT, DEFAULT, DEFAULT, DEFAULT).assert();\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    // Ordinal based date\n+    //-----------------------------------------------------------------------\n+    public void testSpecOrdinalComplete() {\n+        new DMatcher(\"5.2.2.1\", \"1985-101\", \"1985101\",\n+            19, 85, 4, 11, DEFAULT).run();\n+        new DMatcher(\"5.2.2.1\", \"1985-021\", \"1985021\",\n+            19, 85, 1, 21, DEFAULT).run();\n+        new DMatcher(\"5.2.2.1\", \"1985-006\", \"1985006\",\n+            19, 85, 1, 6, DEFAULT).run();\n+    }\n+    //-----------------------------------------------------------------------\n+    public void testSpecOrdinalTruncatedYD() {\n+        new DMatcher(\"5.2.2.2\", \"85-101\", \"85101\",\n+            DEFAULT, 85, 4, 11, DEFAULT).run();\n+    }\n+    public void testSpecOrdinalTruncatedD() {\n+        new DMatcher(\"5.2.2.2\", \"-101\", \"-101\",\n+            DEFAULT, DEFAULT, 4, 11, DEFAULT).run();\n+    }\n+    //-----------------------------------------------------------------------\n+    public void testSpecOrdinalExpandedYD() {\n+        new DMatcher(\"5.2.2.3\", \"+001985-101\", \"+001985101\",\n+            19, 85, 4, 11, DEFAULT).run();\n+    }\n+    //-----------------------------------------------------------------------\n+    // Week based date\n+    //-----------------------------------------------------------------------\n+    public void testSpecWeekComplete() {\n+        new DMatcher(\"5.2.3.1\", \"1985-W15-1\", \"1985W151\",\n+            19, 85, 4, 8, DEFAULT).run();\n+        new DMatcher(\"5.2.3.1\", \"1985-W15-2\", \"1985W152\",\n+            19, 85, 4, 9, DEFAULT).run();\n+        new DMatcher(\"5.2.3.1\", \"1985-W15-3\", \"1985W153\",\n+            19, 85, 4, 10, DEFAULT).run();\n+        new DMatcher(\"5.2.3.1\", \"1985-W15-4\", \"1985W154\",\n+            19, 85, 4, 11, DEFAULT).run();\n+        new DMatcher(\"5.2.3.1\", \"1985-W15-5\", \"1985W155\",\n+            19, 85, 4, 12, DEFAULT).run();\n+        new DMatcher(\"5.2.3.1\", \"1985-W15-6\", \"1985W156\",\n+            19, 85, 4, 13, DEFAULT).run();\n+        new DMatcher(\"5.2.3.1\", \"1985-W15-7\", \"1985W157\",\n+            19, 85, 4, 14, DEFAULT).run();\n+    }\n+    //-----------------------------------------------------------------------\n+    public void testSpecWeekReducedPrecision() {\n+        // test date is Sunday, which should be left alone\n+        new DMatcher(\"5.2.3.2\", \"1985-W15\", \"1985W15\",\n+            19, 85, 4, 14, DEFAULT).run();\n+    }\n+    //-----------------------------------------------------------------------\n+    public void testSpecWeekTruncatedYWD() {\n+        new DMatcher(\"5.2.3.2\", \"85-W154\", \"85W154\",\n+            DEFAULT, 85, 4, 11, DEFAULT).run();\n+    }\n+    public void testSpecWeekTruncatedYW() {\n+        // test date is Sunday, which should be left alone\n+        new DMatcher(\"5.2.3.2\", \"85-W15\", \"85W15\",\n+            DEFAULT, 85, 4, 14, DEFAULT).run();\n+    }\n+    public void testSpecWeekTruncatedDWD() {\n+        // decade not supported\n+    }\n+    public void testSpecWeekTruncatedDW() {\n+        // decade not supported\n+    }\n+    public void testSpecWeekTruncatedWD() {\n+        new DMatcher(\"5.2.3.2\", \"-W154\", \"-W154\",\n+            DEFAULT, DEFAULT, 4, 11, DEFAULT).run();\n+    }\n+    public void testSpecWeekTruncatedW() {\n+        // test date is Sunday, which should be left alone\n+        new DMatcher(\"5.2.3.2\", \"-W15\", \"-W15\",\n+            DEFAULT, DEFAULT, 4, 14, DEFAULT).run();\n+    }\n+    public void testSpecWeekTruncatedD() {\n+        // test date is Sunday 3rd Dec, thus relative Thursday is 30th Nov\n+        new DMatcher(\"5.2.3.3\", \"-W-4\", \"-W-4\",\n+            DEFAULT, DEFAULT, 11, 30, DEFAULT).run();\n+    }\n+    public void testSpecWeekExpandedYWD() {\n+        // test date is Sunday 3rd Dec, thus relative Thursday is 30th Nov\n+        new DMatcher(\"5.2.3.4\", \"+001985-W15-4\", \"+001985W154\",\n+            19, 85, 4, 11, DEFAULT).run();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    // Times\n+    //-----------------------------------------------------------------------\n+    public void testSpecTimeComplete() {\n+        new TMatcher(\"5.3.1.1\", \"23:20:50\", \"232050\",\n+            23, 20, 50, 0, DEFAULT).run();\n+    }\n+    //-----------------------------------------------------------------------\n+    public void testSpecTimeReducedPrecisionHM() {\n+        new TMatcher(\"5.3.1.2\", \"23:20\", \"2320\",\n+            23, 20, DEFAULT, DEFAULT, DEFAULT).run();\n+    }\n+    public void testSpecTimeReducedPrecisionH() {\n+        new TMatcher(\"5.3.1.2\", \"23\", \"23\",\n+            23, DEFAULT, DEFAULT, DEFAULT, DEFAULT).run();\n+    }\n+    //-----------------------------------------------------------------------\n+    public void testSpecTimeFractionalHMS() {\n+        new TMatcher(\"5.3.1.3\", \"23:20:50.607\", \"232050.607\",\n+            23, 20, 50, 607, DEFAULT).run();\n+        new TMatcher(\"5.3.1.3\", \"23:20:50,607\", \"232050,607\",\n+            23, 20, 50, 607, DEFAULT).run();\n+    }\n+    public void testSpecTimeFractionalHM() {\n+        new TMatcher(\"5.3.1.3\", \"23:20.4\", \"2320.4\",\n+            23, 20, 24, 0, DEFAULT).run();\n+        new TMatcher(\"5.3.1.3\", \"23:20,4\", \"2320,4\",\n+            23, 20, 24, 0, DEFAULT).run();\n+    }\n+    public void testSpecTimeFractionalH() {\n+        new TMatcher(\"5.3.1.3\", \"23.25\", \"23.25\",\n+            23, 15, 0, 0, DEFAULT).run();\n+        new TMatcher(\"5.3.1.3\", \"23.25\", \"23,25\",\n+            23, 15, 0, 0, DEFAULT).run();\n+    }\n+    //-----------------------------------------------------------------------\n+    public void testSpecTimeTruncatedMS() {\n+        new TMatcher(\"5.3.1.4\", \"-20:50\", \"-2050\",\n+            DEFAULT, 20, 50, 0, DEFAULT).run();\n+    }\n+    public void testSpecTimeTruncatedM() {\n+        new TMatcher(\"5.3.1.4\", \"-20\", \"-20\",\n+            DEFAULT, 20, DEFAULT, DEFAULT, DEFAULT).run();\n+    }\n+    public void testSpecTimeTruncatedS() {\n+        new TMatcher(\"5.3.1.4\", \"--50\", \"--50\",\n+            DEFAULT, DEFAULT, 50, 0, DEFAULT).run();\n+    }\n+    public void testSpecTimeTruncatedFractionMS() {\n+        new TMatcher(\"5.3.1.4\", \"-20:50.607\", \"-2050.607\",\n+            DEFAULT, 20, 50, 607, DEFAULT).run();\n+    }\n+    public void testSpecTimeTruncatedFractionM() {\n+        new TMatcher(\"5.3.1.4\", \"-20.4\", \"-20.4\",\n+            DEFAULT, 20, 24, 0, DEFAULT).run();\n+    }\n+    public void testSpecTimeTruncatedFractionS() {\n+        new TMatcher(\"5.3.1.4\", \"--50.607\", \"--50.607\",\n+            DEFAULT, DEFAULT, 50, 607, DEFAULT).run();\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Perform test.\n+     */        \n+    protected static abstract class Matcher extends Assert {\n+        String spec, extended, basic;\n+        int century, yearOfCentury, monthOfYear, dayOfMonth, hour, min, sec, milli, zone;\n+        MutableDateTime dt;\n+        \n+        protected Matcher(String spec, String extended, String basic) {\n+            this.spec = spec;\n+            this.extended = extended;\n+            this.basic = basic;\n+        }\n+        \n+        protected abstract void run();\n+        protected void assert() {\n+            String msg = \"\\nSpec:   \" + spec + \"\\nParsed: \" + extended + \"\\nTo:     \" + dt;\n+            assertEquals(msg + \"\\nCentury: \", century, dt.getCenturyOfEra());\n+            assertEquals(msg + \"\\nYear: \", yearOfCentury, dt.getYearOfCentury());\n+            assertEquals(msg + \"\\nMonth: \", monthOfYear, dt.getMonthOfYear());\n+            assertEquals(msg + \"\\nDay: \", dayOfMonth, dt.getDayOfMonth());\n+            assertEquals(msg + \"\\nHour: \", hour, dt.getHourOfDay());\n+            assertEquals(msg + \"\\nMinute: \", min, dt.getMinuteOfHour());\n+            assertEquals(msg + \"\\nSecond: \", sec, dt.getSecondOfMinute());\n+            assertEquals(msg + \"\\nMilli: \", milli, dt.getMillisOfSecond());\n+            DateTimeZone z;\n+            if (zone == DEFAULT) {\n+                z = DateTimeZone.getDefault();\n+            } else if (zone == 0) {\n+                    z = DateTimeZone.UTC;\n+            } else {\n+                String str = \"0\" + Math.abs(zone) + \":00\";\n+                str = str.substring(str.length() - 4);\n+                str = (zone < 0 ? \"-\" : \"+\") + str;\n+                z = DateTimeZone.getInstance(str);\n+            }\n+            assertEquals(msg + \"\\nZone: \", z, dt.getDateTimeZone());\n+        }\n+        protected void parse(DateTimeParser p) {\n+            int result = p.parseInto(dt, extended, 0);\n+            assertTrue(\"\\nSpec:   \" + spec + \"\\nParsed: \" + extended + \"\\nTo:     \"\n+                + dt + \"\\nParse failed at: \" + ~result,\n+                result >= 0);\n+        }\n+    }\n+    protected static class DTMatcher extends Matcher {\n+        protected DTMatcher(String spec, String extended, String basic,\n+                int century, int yearOfCentury, int monthOfYear, int dayOfMonth,\n+                int hour, int min, int sec, int milli, int zone) {\n+            super(spec, extended, basic);\n+            this.century = (century == DEFAULT ? 19 : century);\n+            this.yearOfCentury = (yearOfCentury == DEFAULT ? 72 : yearOfCentury);\n+            this.monthOfYear = (monthOfYear == DEFAULT ? 12 : monthOfYear);\n+            this.dayOfMonth = (dayOfMonth == DEFAULT ? 3 : dayOfMonth);\n+            this.hour = (hour == DEFAULT ? 10 : hour);\n+            this.min = (min == DEFAULT ? 32 : min);\n+            this.sec = (sec == DEFAULT ? 40 : sec);\n+            this.milli = (milli == DEFAULT ? 205 : milli);\n+            this.zone = zone;\n+        }            \n+        protected void run() {\n+            dt = new MutableDateTime(1972, 12, 3, 10, 32, 40, 205);\n+            parse(ISODateTimeFormat.getInstance().dateTimeParser());\n+            super.assert();\n+        }\n+    }\n+    protected static class DMatcher extends Matcher {\n+        protected DMatcher(String spec, String extended, String basic,\n+                int century, int yearOfCentury, int monthOfYear, int dayOfMonth, int zone) {\n+            super(spec, extended, basic);\n+            this.century = (century == DEFAULT ? 19 : century);\n+            this.yearOfCentury = (yearOfCentury == DEFAULT ? 72 : yearOfCentury);\n+            this.monthOfYear = (monthOfYear == DEFAULT ? 12 : monthOfYear);\n+            this.dayOfMonth = (dayOfMonth == DEFAULT ? 3 : dayOfMonth);\n+            this.hour = 10;\n+            this.min = 32;\n+            this.sec = 40;\n+            this.milli = 205;\n+            this.zone = zone;\n+        }\n+        protected void run() {\n+            dt = new MutableDateTime(1972, 12, 3, 10, 32, 40, 205);\n+            parse(ISODateTimeFormat.getInstance().dateParser());\n+            super.assert();\n+        \n+            dt = new MutableDateTime(1972, 12, 3, 10, 32, 40, 205);\n+            parse(ISODateTimeFormat.getInstance().dateTimeParser());\n+            super.assert();\n+        }\n+    }\n+    protected static class TMatcher extends Matcher {\n+        protected TMatcher(String spec, String extended, String basic,\n+                int hour, int min, int sec, int milli, int zone) {\n+            super(spec, extended, basic);\n+            this.century = 19;\n+            this.yearOfCentury = 72;\n+            this.monthOfYear = 12;\n+            this.dayOfMonth = 3;\n+            this.hour = (hour == DEFAULT ? 10 : hour);\n+            this.min = (min == DEFAULT ? 32 : min);\n+            this.sec = (sec == DEFAULT ? 40 : sec);\n+            this.milli = (milli == DEFAULT ? 205 : milli);\n+            this.zone = zone;\n+        }\n+        protected void run() {\n+            dt = new MutableDateTime(1972, 12, 3, 10, 32, 40, 205);\n+            parse(ISODateTimeFormat.getInstance().timeParser());\n+            super.assert();\n+            \n+            extended = \"T\" + extended;\n+            dt = new MutableDateTime(1972, 12, 3, 10, 32, 40, 205);\n+            parse(ISODateTimeFormat.getInstance().timeParser());\n+            super.assert();\n+            \n+            dt = new MutableDateTime(1972, 12, 3, 10, 32, 40, 205);\n+            parse(ISODateTimeFormat.getInstance().dateTimeParser());\n+            super.assert();\n+        }\n+    }\n+}", "timestamp": 1073172089, "metainfo": ""}