{"sha": "7eadd1a45e96f15594dcf734cb9af26e2af508fa", "log": "Select DateTimeUtils methods to keep   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateTimeUtils.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeUtils.java\n         return instant.getMillis();\n     }\n \n-    /**\n-     * Gets the millisecond instant from the specified instant object handling null.\n-     * <p>\n-     * If the instant object is <code>null</code>, the <code>nullMillis</code>\n-     * will be returned. Otherwise, the millis from the object are returned.\n-     * \n-     * @param instant  the instant to examine, null means use nullMillis\n-     * @param nullMillis  the millis to return if null\n-     * @return the time in milliseconds from 1970-01-01T00:00:00Z\n-     */\n-    public static final long getInstantMillis(ReadableInstant instant, long nullMillis) {\n-        if (instant == null) {\n-            return nullMillis;\n-        }\n-        return instant.getMillis();\n-    }\n-\n     //-----------------------------------------------------------------------\n     /**\n      * Gets the chronology from the specified instant object handling null.\n      * <p>\n-     * If the instant object is <code>null</code>, {@link ISOChronology#getInstance()}\n-     * will be returned. Otherwise, the chronology from the object is returned.\n+     * If the instant object is <code>null</code>, or the instant's chronology is\n+     * <code>null</code>, {@link ISOChronology#getInstance()} will be returned.\n+     * Otherwise, the chronology from the object is returned.\n      * \n      * @param instant  the instant to examine, null means ISO in the default zone\n-     * @return the chronology\n+     * @return the chronology, never null\n      */\n     public static final Chronology getInstantChronology(ReadableInstant instant) {\n         if (instant == null) {\n             return ISOChronology.getInstance();\n         }\n-        return instant.getChronology();\n-    }\n-\n+        Chronology chrono = instant.getChronology();\n+        if (chrono == null) {\n+            return ISOChronology.getInstance();\n+        }\n+        return chrono;\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Gets the chronology from the specified instant object handling null.\n      * <p>\n-     * If the instant object is <code>null</code>, <code>nullChrono</code>\n-     * will be returned. Otherwise, the chronology from the object is returned.\n-     * \n-     * @param instant  the instant to examine, null means use <code>nullChrono</code>\n-     * @param nullChrono  the chronology to return if null\n+     * If the instant object is <code>null</code>, or the instant's chronology is\n+     * <code>null</code>, <code>nullChrono</code> will be returned.\n+     * Otherwise, the chronology from the object is returned.\n+     * \n+     * @param instant  the instant to examine, null means returns use nullChrono\n+     * @param nullChrono  the chronology to use in the case of finding null\n      * @return the chronology\n      */\n     public static final Chronology getInstantChronology(ReadableInstant instant, Chronology nullChrono) {\n         if (instant == null) {\n             return nullChrono;\n         }\n-        return instant.getChronology();\n+        Chronology chrono = instant.getChronology();\n+        if (chrono == null) {\n+            return nullChrono;\n+        }\n+        return chrono;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the chronology handling null.\n+     * <p>\n+     * If the chronology is <code>null</code>, {@link ISOChronology#getInstance()}\n+     * will be returned. Otherwise, the chronology is returned.\n+     * \n+     * @param chrono  the chronology to use, null means ISO in the default zone\n+     * @return the chronology, or ISOChronology if null\n+     */\n+    public static final Chronology getChronology(Chronology chrono) {\n+        if (chrono == null) {\n+            return ISOChronology.getInstance();\n+        }\n+        return chrono;\n     }\n \n     //-----------------------------------------------------------------------\n     public static final long getDurationMillis(ReadableDuration duration) {\n         if (duration == null) {\n             return 0L;\n-        }\n-        return duration.getMillis();\n-    }\n-\n-    /**\n-     * Gets the millisecond duration from the specified duration object handling null.\n-     * <p>\n-     * If the duration object is <code>null</code>, <code>nullDuration</code> will be returned.\n-     * Otherwise, the millis from the object are returned.\n-     * \n-     * @param duration  the duration to examine, null means use <code>nullDuration</code>\n-     * @return the duration in milliseconds\n-     */\n-    public static final long getDurationMillis(ReadableDuration duration, long nullDuration) {\n-        if (duration == null) {\n-            return nullDuration;\n         }\n         return duration.getMillis();\n     }", "timestamp": 1092696803, "metainfo": ""}