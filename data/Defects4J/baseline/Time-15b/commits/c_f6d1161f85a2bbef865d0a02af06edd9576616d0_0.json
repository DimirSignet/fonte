{"sha": "f6d1161f85a2bbef865d0a02af06edd9576616d0", "log": "Fixed bug when weekyear changes cross cutover.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/gj/CutoverChronology.java\n     /**\n      * Convert a datetime from one chronology to another.\n      */\n-    private static long convert(long instant, Chronology from, Chronology to) {\n+    private static long convertByYear(long instant, Chronology from, Chronology to) {\n         return to.getDateTimeMillis\n             (from.year().get(instant),\n              from.monthOfYear().get(instant),\n              from.dayOfMonth().get(instant),\n              from.millisOfDay().get(instant));\n+    }\n+\n+    /**\n+     * Convert a datetime from one chronology to another.\n+     */\n+    private static long convertByWeekyear(final long instant, Chronology from, Chronology to) {\n+        long newInstant;\n+        newInstant = to.weekyear().set(0, from.weekyear().get(instant));\n+        newInstant = to.weekOfWeekyear().set(newInstant, from.weekOfWeekyear().get(instant));\n+        newInstant = to.dayOfWeek().set(newInstant, from.dayOfWeek().get(instant));\n+        newInstant = to.millisOfDay().set(newInstant, from.millisOfDay().get(instant));\n+        return newInstant;\n     }\n \n     private static void checkUTC(Chronology chrono) {\n         iCutoverInstant = cutoverInstant;\n \n         // Compute difference between the chronologies at the cutover instant\n-        iGapDuration = cutoverInstant - julianToGregorian(cutoverInstant);\n+        iGapDuration = cutoverInstant - julianToGregorianByYear(cutoverInstant);\n \n         // Begin field definitions.\n \n         {\n             long cutover = gregorian.weekyear().roundCeiling(iCutoverInstant);\n             iWeekOfWeekyearField = new CutoverField\n-                (julian.weekOfWeekyear(), gregorian.weekOfWeekyear(), cutover);\n+                (julian.weekOfWeekyear(), gregorian.weekOfWeekyear(), cutover, true);\n         }\n \n         // These fields are special because they have imprecise durations. The\n             iMonthOfYearField = new ImpreciseCutoverField(julian.monthOfYear(), gregorian.monthOfYear());\n             iMonthsField = iMonthOfYearField.getDurationField();\n             \n-            iWeekyearField = new ImpreciseCutoverField(julian.weekyear(), gregorian.weekyear());\n+            iWeekyearField = new ImpreciseCutoverField(julian.weekyear(), gregorian.weekyear(), true);\n             iWeekyearsField = iWeekyearField.getDurationField();\n         }\n     }\n         return iGregorianChronology.getMinimumDaysInFirstWeek();\n     }\n \n-    long julianToGregorian(long instant) {\n-        return convert(instant, iJulianChronology, iGregorianChronology);\n-    }\n-\n-    long gregorianToJulian(long instant) {\n-        return convert(instant, iGregorianChronology, iJulianChronology);\n+    long julianToGregorianByYear(long instant) {\n+        return convertByYear(instant, iJulianChronology, iGregorianChronology);\n+    }\n+\n+    long gregorianToJulianByYear(long instant) {\n+        return convertByYear(instant, iGregorianChronology, iJulianChronology);\n+    }\n+\n+    long julianToGregorianByWeekyear(long instant) {\n+        return convertByWeekyear(instant, iJulianChronology, iGregorianChronology);\n+    }\n+\n+    long gregorianToJulianByWeekyear(long instant) {\n+        return convertByWeekyear(instant, iGregorianChronology, iJulianChronology);\n     }\n \n     /**\n         final DateTimeField iJulianField;\n         final DateTimeField iGregorianField;\n         final long iCutover;\n+        final boolean iConvertByWeekyear;\n \n         protected DurationField iDurationField;\n \n          * @param gregorianField field from the chronology used at and after the cutover\n          */\n         CutoverField(DateTimeField julianField, DateTimeField gregorianField) {\n-            this(julianField, gregorianField, iCutoverInstant);\n+            this(julianField, gregorianField, iCutoverInstant, false);\n+        }\n+\n+        /**\n+         * @param julianField field from the chronology used before the cutover instant\n+         * @param gregorianField field from the chronology used at and after the cutover\n+         * @param convertByWeekyear\n+         */\n+        CutoverField(DateTimeField julianField, DateTimeField gregorianField, boolean convertByWeekyear) {\n+            this(julianField, gregorianField, iCutoverInstant, convertByWeekyear);\n         }\n \n         CutoverField(DateTimeField julianField, DateTimeField gregorianField, long cutoverInstant) {\n+            this(julianField, gregorianField, cutoverInstant, false);\n+        }\n+\n+        CutoverField(DateTimeField julianField, DateTimeField gregorianField,\n+                     long cutoverInstant, boolean convertByWeekyear) {\n             super(gregorianField.getName());\n             iJulianField = julianField;\n             iGregorianField = gregorianField;\n             iCutover = cutoverInstant;\n+            iConvertByWeekyear = convertByWeekyear;\n             // Although average length of Julian and Gregorian years differ,\n             // use the Gregorian duration field because it is more accurate.\n             iDurationField = gregorianField.getDurationField();\n         public int getMaximumShortTextLength(Locale locale) {\n             return Math.max(iJulianField.getMaximumShortTextLength(locale),\n                             iGregorianField.getMaximumShortTextLength(locale));\n+        }\n+\n+        protected long julianToGregorian(long instant) {\n+            if (iConvertByWeekyear) {\n+                return julianToGregorianByWeekyear(instant);\n+            } else {\n+                return julianToGregorianByYear(instant);\n+            }\n+        }\n+\n+        protected long gregorianToJulian(long instant) {\n+            if (iConvertByWeekyear) {\n+                return gregorianToJulianByWeekyear(instant);\n+            } else {\n+                return gregorianToJulianByYear(instant);\n+            }\n         }\n     }\n \n          * Creates a duration field that links back to this.\n          */\n         ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField) {\n-            this(julianField, gregorianField, null);\n+            this(julianField, gregorianField, null, false);\n+        }\n+\n+        /**\n+         * Creates a duration field that links back to this.\n+         */\n+        ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField,\n+                              boolean convertByWeekyear) {\n+            this(julianField, gregorianField, null, convertByWeekyear);\n         }\n \n         /**\n         ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField,\n                               DurationField durationField)\n         {\n-            super(julianField, gregorianField);\n+            this(julianField, gregorianField, durationField, false);\n+        }\n+\n+        /**\n+         * Uses a shared duration field rather than creating a new one.\n+         *\n+         * @param durationField shared duration field\n+         */\n+        ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField,\n+                              DurationField durationField, boolean convertByWeekyear)\n+        {\n+            super(julianField, gregorianField, convertByWeekyear);\n             if (durationField == null) {\n                 durationField = new LinkedDurationField(iDurationField, this);\n             }", "timestamp": 1073769431, "metainfo": ""}