{"sha": "afa8a34823fb86eb307429749e568b6c42fe641e", "log": "Add type   ", "commit": "\n--- /dev/null\n+++ b/JodaTime/src/java/org/joda/time/DateTimeFieldType.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Identifies a field, such as year or minuteOfHour, in a chronology-neutral way.\n+ *\n+ * @author Stephen Colebourne\n+ * @since 1.0\n+ */\n+public class DateTimeFieldType implements Serializable {\n+\n+    /** Serialization version */\n+    private static final long serialVersionUID = -42615285973990L;\n+\n+    /** The era field. */\n+    private static final DateTimeFieldType ERA = new DateTimeFieldType(\"era\");\n+    /** The yearOfEra field. */\n+    private static final DateTimeFieldType YEAR_OF_ERA = new DateTimeFieldType(\"yearOfEra\");\n+    /** The centuryOfEra field. */\n+    private static final DateTimeFieldType CENTURY_OF_ERA = new DateTimeFieldType(\"centuryOfEra\");\n+    /** The yearOfCentury field. */\n+    private static final DateTimeFieldType YEAR_OF_CENTURY = new DateTimeFieldType(\"yearOfCentury\");\n+    /** The year field. */\n+    private static final DateTimeFieldType YEAR = new DateTimeFieldType(\"year\");\n+    /** The dayOfYear field. */\n+    private static final DateTimeFieldType DAY_OF_YEAR = new DateTimeFieldType(\"dayOfYear\");\n+    /** The monthOfYear field. */\n+    private static final DateTimeFieldType MONTH_OF_YEAR = new DateTimeFieldType(\"monthOfYear\");\n+    /** The dayOfMonth field. */\n+    private static final DateTimeFieldType DAY_OF_MONTH = new DateTimeFieldType(\"dayOfMonth\");\n+    /** The weekyear field. */\n+    private static final DateTimeFieldType WEEKYEAR = new DateTimeFieldType(\"weekyear\");\n+    /** The weekOfWeekyear field. */\n+    private static final DateTimeFieldType WEEK_OF_WEEKYEAR = new DateTimeFieldType(\"weekOfWeekyear\");\n+    /** The dayOfWeek field. */\n+    private static final DateTimeFieldType DAY_OF_WEEK = new DateTimeFieldType(\"dayOfWeek\");\n+\n+    /** The halfday field. */\n+    private static final DateTimeFieldType HALFDAY_OF_DAY = new DateTimeFieldType(\"halfdayOfDay\");\n+    /** The hourOfHalfday field. */\n+    private static final DateTimeFieldType HOUR_OF_HALFDAY = new DateTimeFieldType(\"hourOfHalfday\");\n+    /** The clockhourOfHalfday field. */\n+    private static final DateTimeFieldType CLOCKHOUR_OF_HALFDAY = new DateTimeFieldType(\"clockhourOfHalfday\");\n+    /** The clockhourOfDay field. */\n+    private static final DateTimeFieldType CLOCKHOUR_OF_DAY = new DateTimeFieldType(\"clockhourOfDay\");\n+    /** The hourOfDay field. */\n+    private static final DateTimeFieldType HOUR_OF_DAY = new DateTimeFieldType(\"hourOfDay\");\n+    /** The minuteOfDay field. */\n+    private static final DateTimeFieldType MINUTE_OF_DAY = new DateTimeFieldType(\"minuteOfDay\");\n+    /** The minuteOfHour field. */\n+    private static final DateTimeFieldType MINUTE_OF_HOUR = new DateTimeFieldType(\"minuteOfHour\");\n+    /** The secondOfDay field. */\n+    private static final DateTimeFieldType SECOND_OF_DAY = new DateTimeFieldType(\"secondOfDay\");\n+    /** The secondOfMinute field. */\n+    private static final DateTimeFieldType SECOND_OF_MINUTE = new DateTimeFieldType(\"secondOfMinute\");\n+    /** The millisOfDay field. */\n+    private static final DateTimeFieldType MILLIS_OF_DAY = new DateTimeFieldType(\"millisOfDay\");\n+    /** The millisOfSecond field. */\n+    private static final DateTimeFieldType MILLIS_OF_SECOND = new DateTimeFieldType(\"millisOfSecond\");\n+\n+    /** The cache of name to type used to ensure singletons. */\n+    private static Map cCache = new HashMap();\n+    /** The name of the field. */\n+    private final String iName;\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Factory method to obtain a DateTimeFieldType by name ensuring each\n+     * type is a singleton.\n+     * <p>\n+     * If the name is not found, a new type is created.\n+     * \n+     * @param name  the name to retrieve\n+     * @return the singleton type\n+     */\n+    public static synchronized DateTimeFieldType getInstance(String name) {\n+        DateTimeFieldType type = (DateTimeFieldType) cCache.get(name);\n+        if (type == null) {\n+            return new DateTimeFieldType(name);\n+        }\n+        return type;\n+    }\n+\n+    /**\n+     * Constructor.\n+     * \n+     * @param name  the name to use\n+     */\n+    private DateTimeFieldType(String name) {\n+        super();\n+        iName = name;\n+        cCache.put(name, this);\n+    }\n+\n+    /**\n+     * Ensure a singleton is returned.\n+     * \n+     * @return the singleton type\n+     */\n+    private Object readResolve() {\n+        return getInstance(iName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Get the millis of second field type.\n+     * \n+     * @return the DateTimeFieldType constant\n+     */\n+    public DateTimeFieldType millisOfSecond() {\n+        return MILLIS_OF_SECOND;\n+    }\n+\n+    /**\n+     * Get the millis of day field type.\n+     * \n+     * @return the DateTimeFieldType constant\n+     */\n+    public DateTimeFieldType millisOfDay() {\n+        return MILLIS_OF_DAY;\n+    }\n+\n+    /**\n+     * Get the second of minute field type.\n+     * \n+     * @return the DateTimeFieldType constant\n+     */\n+    public DateTimeFieldType secondOfMinute() {\n+        return SECOND_OF_MINUTE;\n+    }\n+\n+    /**\n+     * Get the second of day field type.\n+     * \n+     * @return the DateTimeFieldType constant\n+     */\n+    public DateTimeFieldType secondOfDay() {\n+        return SECOND_OF_DAY;\n+    }\n+\n+    /**\n+     * Get the minute of hour field type.\n+     * \n+     * @return the DateTimeFieldType constant\n+     */\n+    public DateTimeFieldType minuteOfHour() {\n+        return MINUTE_OF_HOUR;\n+    }\n+\n+    /**\n+     * Get the minute of day field type.\n+     * \n+     * @return the DateTimeFieldType constant\n+     */\n+    public DateTimeFieldType minuteOfDay() {\n+        return MINUTE_OF_DAY;\n+    }\n+\n+    /**\n+     * Get the hour of day (0-23) field type.\n+     * \n+     * @return the DateTimeFieldType constant\n+     */\n+    public DateTimeFieldType hourOfDay() {\n+        return HOUR_OF_DAY;\n+    }\n+\n+    /**\n+     * Get the hour of day (offset to 1-24) field type.\n+     * \n+     * @return the DateTimeFieldType constant\n+     */\n+    public DateTimeFieldType clockhourOfDay() {\n+        return CLOCKHOUR_OF_DAY;\n+    }\n+\n+    /**\n+     * Get the hour of am/pm (0-11) field type.\n+     * \n+     * @return the DateTimeFieldType constant\n+     */\n+    public DateTimeFieldType hourOfHalfday() {\n+        return HOUR_OF_HALFDAY;\n+    }\n+\n+    /**\n+     * Get the hour of am/pm (offset to 1-12) field type.\n+     * \n+     * @return the DateTimeFieldType constant\n+     */\n+    public DateTimeFieldType clockhourOfHalfday() {\n+        return CLOCKHOUR_OF_HALFDAY;\n+    }\n+\n+    /**\n+     * Get the AM(0) PM(1) field type.\n+     * \n+     * @return the DateTimeFieldType constant\n+     */\n+    public DateTimeFieldType halfdayOfDay() {\n+        return HALFDAY_OF_DAY;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Get the day of week field type.\n+     * \n+     * @return the DateTimeFieldType constant\n+     */\n+    public DateTimeFieldType dayOfWeek() {\n+        return DAY_OF_WEEK;\n+    }\n+\n+    /**\n+     * Get the day of month field type.\n+     * \n+     * @return the DateTimeFieldType constant\n+     */\n+    public DateTimeFieldType dayOfMonth() {\n+        return DAY_OF_MONTH;\n+    }\n+\n+    /**\n+     * Get the day of year field type.\n+     * \n+     * @return the DateTimeFieldType constant\n+     */\n+    public DateTimeFieldType dayOfYear() {\n+        return DAY_OF_YEAR;\n+    }\n+\n+    /**\n+     * Get the week of a week based year field type.\n+     * \n+     * @return the DateTimeFieldType constant\n+     */\n+    public DateTimeFieldType weekOfWeekyear() {\n+        return WEEK_OF_WEEKYEAR;\n+    }\n+\n+    /**\n+     * Get the year of a week based year field type.\n+     * \n+     * @return the DateTimeFieldType constant\n+     */\n+    public DateTimeFieldType weekyear() {\n+        return WEEKYEAR;\n+    }\n+\n+    /**\n+     * Get the month of year field type.\n+     * \n+     * @return the DateTimeFieldType constant\n+     */\n+    public DateTimeFieldType monthOfYear() {\n+        return MONTH_OF_YEAR;\n+    }\n+\n+    /**\n+     * Get the year field type.\n+     * \n+     * @return the DateTimeFieldType constant\n+     */\n+    public DateTimeFieldType year() {\n+        return YEAR;\n+    }\n+\n+    /**\n+     * Get the year of era field type.\n+     * \n+     * @return the DateTimeFieldType constant\n+     */\n+    public DateTimeFieldType yearOfEra() {\n+        return YEAR_OF_ERA;\n+    }\n+\n+    /**\n+     * Get the year of century field type.\n+     * \n+     * @return the DateTimeFieldType constant\n+     */\n+    public DateTimeFieldType yearOfCentury() {\n+        return YEAR_OF_CENTURY;\n+    }\n+\n+    /**\n+     * Get the century of era field type.\n+     * \n+     * @return the DateTimeFieldType constant\n+     */\n+    public DateTimeFieldType centuryOfEra() {\n+        return CENTURY_OF_ERA;\n+    }\n+\n+    /**\n+     * Get the era field type.\n+     * \n+     * @return the DateTimeFieldType constant\n+     */\n+    public DateTimeFieldType era() {\n+        return ERA;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Get the name of the field, intended for debugging purposes only.\n+     * By convention, names follow a pattern of \"dddOfRrr\", where \"ddd\" represents\n+     * the (singular) duration field name and \"Rrr\" represents the (singular)\n+     * range duration field name. If the range field is not applicable, then\n+     * the name of the field is simply the (singular) duration field name.\n+     * \n+     * @return field name\n+     */\n+    public String getName() {\n+        return iName;\n+    }\n+\n+    /**\n+     * Get a suitable debug string.\n+     * \n+     * @return debug string\n+     */\n+    public String toString() {\n+        return getName();\n+    }\n+\n+}", "timestamp": 1093298706, "metainfo": ""}