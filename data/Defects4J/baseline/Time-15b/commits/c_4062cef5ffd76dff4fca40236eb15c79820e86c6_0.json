{"sha": "4062cef5ffd76dff4fca40236eb15c79820e86c6", "log": "Add extra factory methods to DateTimeZone   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateTimeZone.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeZone.java\n import java.util.Map;\n import java.util.Set;\n \n+import org.joda.time.field.FieldUtils;\n import org.joda.time.format.DateTimeFormatter;\n import org.joda.time.format.DateTimeFormatterBuilder;\n import org.joda.time.tz.DefaultNameProvider;\n     }\n \n     /**\n+     * Get the time zone by the number of hours difference from UTC.\n+     * <p>\n+     * This factory is a convenient way of constructing zones with a fixed offset.\n+     * \n+     * @param hoursOffset  the offset in hours from UTC\n+     * @return the DateTimeZone object for the offset\n+     * @throws IllegalArgumentException if the offset is too large or too small\n+     */\n+    public static DateTimeZone getInstance(int hoursOffset) throws IllegalArgumentException {\n+        return getInstance(hoursOffset, 0);\n+    }\n+\n+    /**\n+     * Get the time zone by the number of hours and minutes difference from UTC.\n+     * <p>\n+     * This factory is a convenient way of constructing zones with a fixed offset.\n+     * The minutes value is always positive and in the range 0 to 59.\n+     * If constructed with the values (-2, 30), the resultiong zone is '-02:30'.\n+     * \n+     * @param hoursOffset  the offset in hours from UTC\n+     * @param minutesOffset  the offset in minutes from UTC, must be between 0 and 59 inclusive\n+     * @return the DateTimeZone object for the offset\n+     * @throws IllegalArgumentException if the offset or minute is too large or too small\n+     */\n+    public static DateTimeZone getInstance(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n+        if (hoursOffset == 0 && minutesOffset == 0) {\n+            return DateTimeZone.UTC;\n+        }\n+        if (minutesOffset < 0 || minutesOffset > 59) {\n+            throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n+        }\n+        int offset = 0;\n+        try {\n+            int hoursInMinutes = FieldUtils.safeMultiplyToInt(hoursOffset, 60);\n+            if (hoursInMinutes < 0) {\n+                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);\n+            } else {\n+                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\n+            }\n+            offset = FieldUtils.safeMultiplyToInt(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n+        } catch (ArithmeticException ex) {\n+            throw new IllegalArgumentException(\"Offset is too large\");\n+        }\n+        String id = offsetFormatter().print(0, UTC, offset);\n+        return fixedOffsetZone(id, offset);\n+    }\n+\n+    /**\n      * Get the time zone by Java TimeZone.\n      * <p>\n      * DateTimeZone only accepts a subset of the IDs from TimeZone. The\n--- a/JodaTime/src/test/org/joda/time/TestDateTimeZone.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTimeZone.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testGetInstance_int() {\n+        assertEquals(DateTimeZone.UTC, DateTimeZone.getInstance(0));\n+        assertEquals(DateTimeZone.getInstance(\"+03:00\"), DateTimeZone.getInstance(3));\n+        assertEquals(DateTimeZone.getInstance(\"-02:00\"), DateTimeZone.getInstance(-2));\n+        try {\n+            DateTimeZone.getInstance(999999);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }        \n+\n+    //-----------------------------------------------------------------------\n+    public void testGetInstance_int_int() {\n+        assertEquals(DateTimeZone.UTC, DateTimeZone.getInstance(0));\n+        assertEquals(DateTimeZone.getInstance(\"+03:15\"), DateTimeZone.getInstance(3, 15));\n+        assertEquals(DateTimeZone.getInstance(\"-02:00\"), DateTimeZone.getInstance(-2, 0));\n+        assertEquals(DateTimeZone.getInstance(\"-02:30\"), DateTimeZone.getInstance(-2, 30));\n+        try {\n+            DateTimeZone.getInstance(2, 60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateTimeZone.getInstance(-2, 60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateTimeZone.getInstance(2, -1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateTimeZone.getInstance(-2, -1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateTimeZone.getInstance(999999, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }        \n+\n+    //-----------------------------------------------------------------------\n     public void testGetInstance_TimeZone() {\n         assertEquals(DateTimeZone.getDefault(), DateTimeZone.getInstance((TimeZone) null));\n         ", "timestamp": 1093185524, "metainfo": ""}