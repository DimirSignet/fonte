{"sha": "6d0c7db8dd96b9105a415d98770ad271ad6a01ee", "log": "Rename AbstractDurationField to BaseDurationField   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java\n import org.joda.time.DateTimeZone;\n import org.joda.time.DurationField;\n import org.joda.time.field.BaseDateTimeField;\n-import org.joda.time.field.AbstractDurationField;\n+import org.joda.time.field.BaseDurationField;\n \n /**\n  * Wraps another Chronology to add support for time zones.\n      * fields, can nullify or reverse an add when crossing a transition.\n      */\n \n-    static class ZonedDurationField extends AbstractDurationField {\n+    static class ZonedDurationField extends BaseDurationField {\n         static final long serialVersionUID = -485345310999208286L;\n \n         final DurationField iField;\n--- /dev/null\n+++ b/JodaTime/src/java/org/joda/time/field/BaseDurationField.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.field;\n+\n+import java.io.Serializable;\n+import org.joda.time.DurationField;\n+\n+/**\n+ * AbstractDurationField provides the common behaviour for DurationField\n+ * implementations.\n+ * <p>\n+ * This class should generally not be used directly by API users. The\n+ * DurationField interface should be used when different kinds of DurationField\n+ * objects are to be referenced.\n+ * <p>\n+ * AbstractDurationField is thread-safe and immutable, and its subclasses must\n+ * be as well.\n+ *\n+ * @author Brian S O'Neill\n+ * @see DecoratedDurationField\n+ */\n+public abstract class BaseDurationField extends DurationField implements Serializable {\n+\n+    /** Serialization lock. */\n+    private static final long serialVersionUID = -2554245107589433218L;\n+\n+    /** A desriptive name for the field. */\n+    private final String iName;\n+\n+    protected BaseDurationField(String name) {\n+        super();\n+        if (name == null) {\n+            throw new IllegalArgumentException(\"The name must not be null\");\n+        }\n+        iName = name;\n+    }\n+\n+    public final String getName() {\n+        return iName;\n+    }\n+\n+    /**\n+     * @return true always\n+     */\n+    public final boolean isSupported() {\n+        return true;\n+    }\n+\n+    //------------------------------------------------------------------------\n+    /**\n+     * Get the value of this field from the milliseconds, which is approximate\n+     * if this field is imprecise.\n+     *\n+     * @param duration  the milliseconds to query, which may be negative\n+     * @return the value of the field, in the units of the field, which may be\n+     * negative\n+     */\n+    public int getValue(long duration) {\n+        return FieldUtils.safeToInt(getValueAsLong(duration));\n+    }\n+\n+    /**\n+     * Get the value of this field from the milliseconds, which is approximate\n+     * if this field is imprecise.\n+     *\n+     * @param duration  the milliseconds to query, which may be negative\n+     * @return the value of the field, in the units of the field, which may be\n+     * negative\n+     */\n+    public long getValueAsLong(long duration) {\n+        return duration / getUnitMillis();\n+    }\n+\n+    /**\n+     * Get the value of this field from the milliseconds relative to an\n+     * instant.\n+     *\n+     * <p>If the milliseconds is positive, then the instant is treated as a\n+     * \"start instant\". If negative, the instant is treated as an \"end\n+     * instant\".\n+     *\n+     * <p>The default implementation returns\n+     * <code>Utils.safeToInt(getAsLong(millisDuration, instant))</code>.\n+     * \n+     * @param duration  the milliseconds to query, which may be negative\n+     * @param instant  the start instant to calculate relative to\n+     * @return the value of the field, in the units of the field, which may be\n+     * negative\n+     */\n+    public int getValue(long duration, long instant) {\n+        return FieldUtils.safeToInt(getValueAsLong(duration, instant));\n+    }\n+\n+    /**\n+     * Get the millisecond duration of this field from its value, which is\n+     * approximate if this field is imprecise.\n+     * \n+     * @param value  the value of the field, which may be negative\n+     * @return the milliseconds that the field represents, which may be\n+     * negative\n+     */\n+    public long getMillis(int value) {\n+        return value * getUnitMillis();\n+    }\n+\n+    /**\n+     * Get the millisecond duration of this field from its value, which is\n+     * approximate if this field is imprecise.\n+     * \n+     * @param value  the value of the field, which may be negative\n+     * @return the milliseconds that the field represents, which may be\n+     * negative\n+     */\n+    public long getMillis(long value) {\n+        return value * getUnitMillis();\n+    }\n+\n+    // Calculation API\n+    //------------------------------------------------------------------------\n+    public int getDifference(long minuendInstant, long subtrahendInstant) {\n+        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));\n+    }\n+\n+    //------------------------------------------------------------------------\n+    public int compareTo(Object durationField) {\n+        DurationField otherField = (DurationField) durationField;\n+        long otherMillis = otherField.getUnitMillis();\n+        long thisMillis = getUnitMillis();\n+        // cannot do (thisMillis - otherMillis) as can overflow\n+        if (thisMillis == otherMillis) {\n+            return 0;\n+        }\n+        if (thisMillis < otherMillis) {\n+            return -1;\n+        } else {\n+            return 1;\n+        }\n+    }\n+\n+    /**\n+     * Get a suitable debug string.\n+     * \n+     * @return debug string\n+     */\n+    public String toString() {\n+        return \"DurationField[\" + getName() + ']';\n+    }\n+\n+}\n--- a/JodaTime/src/java/org/joda/time/field/DecoratedDurationField.java\n+++ b/JodaTime/src/java/org/joda/time/field/DecoratedDurationField.java\n  * @author Brian S O'Neill\n  * @see DelegatedDurationField\n  */\n-public class DecoratedDurationField extends AbstractDurationField {\n+public class DecoratedDurationField extends BaseDurationField {\n \n     static final long serialVersionUID = 8019982251647420015L;\n \n--- a/JodaTime/src/java/org/joda/time/field/ImpreciseDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/ImpreciseDateTimeField.java\n         return iUnitMillis;\n     }\n \n-    private final class LinkedDurationField extends AbstractDurationField {\n+    private final class LinkedDurationField extends BaseDurationField {\n         static final long serialVersionUID = -203813474600094134L;\n \n         LinkedDurationField(String name) {\n--- a/JodaTime/src/java/org/joda/time/field/PreciseDurationField.java\n+++ b/JodaTime/src/java/org/joda/time/field/PreciseDurationField.java\n  * @author Brian S O'Neill\n  * @since 1.0\n  */\n-public class PreciseDurationField extends AbstractDurationField {\n+public class PreciseDurationField extends BaseDurationField {\n     \n     static final long serialVersionUID = -8346152187724495365L;\n ", "timestamp": 1089412643, "metainfo": ""}