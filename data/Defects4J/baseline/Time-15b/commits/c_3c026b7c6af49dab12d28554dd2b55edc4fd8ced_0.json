{"sha": "3c026b7c6af49dab12d28554dd2b55edc4fd8ced", "log": "Add script that generates the gwt tests from the annotated core tests.  Update gwt tests.  ", "commit": "\n--- /dev/null\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/GwtTestAll.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import com.google.gwt.junit.tools.GWTTestSuite;\n+\n+/**\n+ * Entry point for all tests in this package.\n+ * \n+ * @version $Revision: 1232 $ $Date: 2007-08-04 19:23:22 +0200 (Sat, 04 Aug 2007) $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class GwtTestAll extends TestSuite {\n+\n+//    public TestAll(String testName) {\n+//        super(testName);\n+//    }\n+\n+    public static Test suite() {\n+        GWTTestSuite suite = new GWTTestSuite();\n+        suite.addTestSuite(TestChronology.class);\n+        suite.addTestSuite(TestDateTimeFieldType.class);\n+        suite.addTestSuite(TestDurationFieldType.class);\n+        \n+        suite.addTestSuite(TestInstant_Constructors.class);\n+        suite.addTestSuite(TestInstant_Basics.class);\n+        \n+        suite.addTestSuite(TestDateTime_Constructors.class);\n+        suite.addTestSuite(TestDateTime_Basics.class);\n+        suite.addTestSuite(TestDateTime_Properties.class);\n+        \n+        suite.addTestSuite(TestMutableDateTime_Constructors.class);\n+        suite.addTestSuite(TestMutableDateTime_Basics.class);\n+        suite.addTestSuite(TestMutableDateTime_Sets.class);\n+        suite.addTestSuite(TestMutableDateTime_Adds.class);\n+        suite.addTestSuite(TestMutableDateTime_Properties.class);\n+        \n+        suite.addTestSuite(TestDateMidnight_Constructors.class);\n+        suite.addTestSuite(TestDateMidnight_Basics.class);\n+        suite.addTestSuite(TestDateMidnight_Properties.class);\n+        \n+        suite.addTestSuite(TestDuration_Constructors.class);\n+        suite.addTestSuite(TestDuration_Basics.class);\n+        \n+        suite.addTestSuite(TestInterval_Constructors.class);\n+        suite.addTestSuite(TestInterval_Basics.class);\n+        \n+        suite.addTestSuite(TestLocalDateTime_Constructors.class);\n+        suite.addTestSuite(TestLocalDateTime_Basics.class);\n+        suite.addTestSuite(TestLocalDateTime_Properties.class);\n+        \n+        suite.addTestSuite(TestLocalDate_Constructors.class);\n+        suite.addTestSuite(TestLocalDate_Basics.class);\n+        suite.addTestSuite(TestLocalDate_Properties.class);\n+        \n+        suite.addTestSuite(TestLocalTime_Constructors.class);\n+        suite.addTestSuite(TestLocalTime_Basics.class);\n+        suite.addTestSuite(TestLocalTime_Properties.class);\n+        \n+        suite.addTestSuite(TestMutableInterval_Constructors.class);\n+        suite.addTestSuite(TestMutableInterval_Basics.class);\n+        suite.addTestSuite(TestMutableInterval_Updates.class);\n+        \n+        suite.addTestSuite(TestPeriod_Constructors.class);\n+        suite.addTestSuite(TestPeriod_Basics.class);\n+        \n+        suite.addTestSuite(TestMutablePeriod_Constructors.class);\n+        suite.addTestSuite(TestMutablePeriod_Basics.class);\n+        suite.addTestSuite(TestMutablePeriod_Updates.class);\n+        \n+        suite.addTestSuite(TestBaseSingleFieldPeriod.class);\n+        suite.addTestSuite(TestYears.class);\n+        suite.addTestSuite(TestMonths.class);\n+        suite.addTestSuite(TestWeeks.class);\n+        suite.addTestSuite(TestDays.class);\n+        suite.addTestSuite(TestHours.class);\n+        suite.addTestSuite(TestMinutes.class);\n+        suite.addTestSuite(TestSeconds.class);\n+        \n+        suite.addTestSuite(TestTimeOfDay_Basics.class);\n+        suite.addTestSuite(TestTimeOfDay_Constructors.class);\n+//Removed for GWT        suite.addTestSuite(TestTimeOfDay_Properties.class);\n+        \n+        suite.addTestSuite(TestYearMonthDay_Basics.class);\n+        suite.addTestSuite(TestYearMonthDay_Constructors.class);\n+        suite.addTestSuite(TestYearMonthDay_Properties.class);\n+        \n+        suite.addTestSuite(TestPartial_Basics.class);\n+        suite.addTestSuite(TestPartial_Constructors.class);\n+        suite.addTestSuite(TestPartial_Properties.class);\n+        suite.addTestSuite(TestPartial_Match.class);\n+        \n+        suite.addTestSuite(TestAbstractPartial.class);\n+        suite.addTestSuite(TestBasePartial.class);\n+        \n+        suite.addTestSuite(TestDateTimeComparator.class);\n+        suite.addTestSuite(TestDateTimeConstants.class);\n+        suite.addTestSuite(TestDateTimeUtils.class);\n+        suite.addTestSuite(TestDateTimeZone.class);\n+        suite.addTestSuite(TestDateTimeZoneCutover.class);\n+        suite.addTestSuite(TestPeriodType.class);\n+//        suite.addTestSuite(TestParseISO.class);\n+        suite.addTestSuite(TestDurationField.class);\n+        \n+//Removed for GWT        suite.addTestSuite(TestSerialization.class);\n+        suite.addTestSuite(TestIllegalFieldValueException.class);\n+        return suite;\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = {\n+            GwtTestAll.class.getName()\n+        };\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+}\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestAbstractPartial.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestAbstractPartial.java\n  */\n package org.joda.time;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.field.AbstractPartialFieldProperty;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for YearMonthDay.\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestBasePartial.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestBasePartial.java\n  */\n package org.joda.time;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.base.BasePartial;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for YearMonthDay.\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestBaseSingleFieldPeriod.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestBaseSingleFieldPeriod.java\n  */\n package org.joda.time;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.base.BaseSingleFieldPeriod;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for BaseSingleFieldPeriod.\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestChronology.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestChronology.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.LimitChronology;\n import org.joda.time.chrono.StrictChronology;\n import org.joda.time.chrono.ZonedChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for Chronology.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateMidnight_Basics.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateMidnight_Basics.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.field.UnsupportedDurationField;\n import org.joda.time.format.DateTimeFormat;\n import org.joda.time.format.DateTimeFormatter;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for DateMidnight.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW_UTC);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n     }\n     \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSerialization() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSerialization() throws Exception {\n         DateMidnight test = new DateMidnight(TEST_TIME_NOW_UTC);\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertEquals(test, result);\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n         assertEquals(\"2002-06-09T00:00:00.000+01:00\", test.toString((String) null));\n     }\n \n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testToString_String_String() {\n         DateMidnight test = new DateMidnight(TEST_TIME_NOW_UTC);\n         assertEquals(\"Sun 9/6\", test.toString(\"EEE d/M\", Locale.ENGLISH));\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateMidnight_Constructors.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateMidnight_Constructors.java\n \n import java.util.Date;\n import java.util.Locale;\n-\n-\n+import java.util.TimeZone;\n+\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.convert.ConverterManager;\n import org.joda.time.convert.MockZeroNullIntegerConverter;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for DateMidnight.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW_UTC);\n         zone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         locale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //Locale.setDefault(Locale.UK);\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n+        /* //BEGIN GWT IGNORE\n         Locale.setDefault(locale);\n+        //END GWT IGNORE */\n         zone = null;\n     }\n \n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateMidnight_Properties.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateMidnight_Properties.java\n \n import java.util.Locale;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.LenientChronology;\n import org.joda.time.chrono.StrictChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for DateTime.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         locale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //Locale.setDefault(Locale.UK);\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n+        /* //BEGIN GWT IGNORE\n         Locale.setDefault(locale);\n+        //END GWT IGNORE */\n         zone = null;\n     }\n \n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPropertyGetEra() {\n         DateMidnight test = new DateMidnight(2004, 6, 9);\n         assertSame(test.getChronology().era(), test.era().getField());\n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPropertyGetMonthOfYear() {\n         DateMidnight test = new DateMidnight(2004, 6, 9);\n         assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField());\n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPropertyGetDayOfWeek() {\n         DateMidnight test = new DateMidnight(2004, 6, 9);\n         assertSame(test.getChronology().dayOfWeek(), test.dayOfWeek().getField());\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTimeComparator.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTimeComparator.java\n import java.util.Date;\n import java.util.List;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.ISOChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n /**\n  * This class is a Junit unit test for the\n  * org.joda.time.DateTimeComparator class.\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testClass() {\n+    /* //BEGIN GWT IGNORE\n+    public void testClass() {\n         assertEquals(true, Modifier.isPublic(DateTimeComparator.class.getModifiers()));\n         assertEquals(false, Modifier.isFinal(DateTimeComparator.class.getModifiers()));\n         assertEquals(1, DateTimeComparator.class.getDeclaredConstructors().length);\n         assertEquals(true, Modifier.isProtected(DateTimeComparator.class.getDeclaredConstructors()[0].getModifiers()));\n-    } */\n+    }\n+    //END GWT IGNORE */\n     \n     //-----------------------------------------------------------------------\n     public void testStaticGetInstance() {\n     }\n     \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSerialization1() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSerialization1() throws Exception {\n         DateTimeField f = ISO.dayOfYear();\n         f.toString();\n         DateTimeComparator c = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay(), DateTimeFieldType.dayOfYear());\n         ois.close();\n         \n         assertEquals(c, result);\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSerialization2() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSerialization2() throws Exception {\n         DateTimeComparator c = DateTimeComparator.getInstance();\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertSame(c, result);\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     /**\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTimeConstants.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTimeConstants.java\n package org.joda.time;\n \n import org.joda.time.gwt.JodaGwtTestCase;\n-\n import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n /**\n  * Test case.\n     } */\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testConstructor() {\n+    public void testConstructor() {\n         DateTimeConstants c = new DateTimeConstants() {\n         };\n         c.toString();\n-    } */\n+    }\n \n     public void testHalfdaysOfDay() {\n         assertEquals(0, DateTimeConstants.AM);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTimeFieldType.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTimeFieldType.java\n import java.io.ObjectOutputStream;\n // Removed for GWT import java.lang.reflect.Constructor;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.CopticChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for Chronology.\n         assertEquals(null, DateTimeFieldType.era().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().era(), DateTimeFieldType.era().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().era().isSupported(), DateTimeFieldType.era().isSupported(CopticChronology.getInstanceUTC()));\n-// Removed for GWT         assertSerialization(DateTimeFieldType.era());\n+        assertSerialization(DateTimeFieldType.era());\n     }\n \n     public void test_centuryOfEra() throws Exception {\n         assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC()));\n-// Removed for GWT         assertSerialization(DateTimeFieldType.centuryOfEra());\n+        assertSerialization(DateTimeFieldType.centuryOfEra());\n     }\n \n     public void test_yearOfCentury() throws Exception {\n         assertEquals(DurationFieldType.centuries(), DateTimeFieldType.yearOfCentury().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(CopticChronology.getInstanceUTC()));\n-// Removed for GWT         assertSerialization(DateTimeFieldType.yearOfCentury());\n+        assertSerialization(DateTimeFieldType.yearOfCentury());\n     }\n \n     public void test_yearOfEra() throws Exception {\n         assertEquals(DurationFieldType.eras(), DateTimeFieldType.yearOfEra().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().yearOfEra(), DateTimeFieldType.yearOfEra().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().yearOfEra().isSupported(), DateTimeFieldType.yearOfEra().isSupported(CopticChronology.getInstanceUTC()));\n-// Removed for GWT         assertSerialization(DateTimeFieldType.yearOfEra());\n+        assertSerialization(DateTimeFieldType.yearOfEra());\n     }\n \n     public void test_year() throws Exception {\n         assertEquals(null, DateTimeFieldType.year().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().year(), DateTimeFieldType.year().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().year().isSupported(), DateTimeFieldType.year().isSupported(CopticChronology.getInstanceUTC()));\n-// Removed for GWT         assertSerialization(DateTimeFieldType.year());\n+        assertSerialization(DateTimeFieldType.year());\n     }\n \n     public void test_monthOfYear() throws Exception {\n         assertEquals(DurationFieldType.years(), DateTimeFieldType.monthOfYear().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().monthOfYear(), DateTimeFieldType.monthOfYear().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().monthOfYear().isSupported(), DateTimeFieldType.monthOfYear().isSupported(CopticChronology.getInstanceUTC()));\n-// Removed for GWT         assertSerialization(DateTimeFieldType.monthOfYear());\n+        assertSerialization(DateTimeFieldType.monthOfYear());\n     }\n \n     public void test_weekyearOfCentury() throws Exception {\n         assertEquals(DurationFieldType.centuries(), DateTimeFieldType.weekyearOfCentury().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().weekyearOfCentury(), DateTimeFieldType.weekyearOfCentury().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().weekyearOfCentury().isSupported(), DateTimeFieldType.weekyearOfCentury().isSupported(CopticChronology.getInstanceUTC()));\n-// Removed for GWT         assertSerialization(DateTimeFieldType.weekyearOfCentury());\n+        assertSerialization(DateTimeFieldType.weekyearOfCentury());\n     }\n \n     public void test_weekyear() throws Exception {\n         assertEquals(null, DateTimeFieldType.weekyear().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().weekyear(), DateTimeFieldType.weekyear().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().weekyear().isSupported(), DateTimeFieldType.weekyear().isSupported(CopticChronology.getInstanceUTC()));\n-// Removed for GWT         assertSerialization(DateTimeFieldType.weekyear());\n+        assertSerialization(DateTimeFieldType.weekyear());\n     }\n \n     public void test_weekOfWeekyear() throws Exception {\n         assertEquals(DurationFieldType.weekyears(), DateTimeFieldType.weekOfWeekyear().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().weekOfWeekyear(), DateTimeFieldType.weekOfWeekyear().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().weekOfWeekyear().isSupported(), DateTimeFieldType.weekOfWeekyear().isSupported(CopticChronology.getInstanceUTC()));\n-// Removed for GWT         assertSerialization(DateTimeFieldType.weekOfWeekyear());\n+        assertSerialization(DateTimeFieldType.weekOfWeekyear());\n     }\n \n     public void test_dayOfYear() throws Exception {\n         assertEquals(DurationFieldType.years(), DateTimeFieldType.dayOfYear().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().dayOfYear(), DateTimeFieldType.dayOfYear().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().dayOfYear().isSupported(), DateTimeFieldType.dayOfYear().isSupported(CopticChronology.getInstanceUTC()));\n-// Removed for GWT         assertSerialization(DateTimeFieldType.dayOfYear());\n+        assertSerialization(DateTimeFieldType.dayOfYear());\n     }\n \n     public void test_dayOfMonth() throws Exception {\n         assertEquals(DurationFieldType.months(), DateTimeFieldType.dayOfMonth().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().dayOfMonth(), DateTimeFieldType.dayOfMonth().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().dayOfMonth().isSupported(), DateTimeFieldType.dayOfMonth().isSupported(CopticChronology.getInstanceUTC()));\n-// Removed for GWT         assertSerialization(DateTimeFieldType.dayOfMonth());\n+        assertSerialization(DateTimeFieldType.dayOfMonth());\n     }\n \n     public void test_dayOfWeek() throws Exception {\n         assertEquals(DurationFieldType.weeks(), DateTimeFieldType.dayOfWeek().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().dayOfWeek(), DateTimeFieldType.dayOfWeek().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().dayOfWeek().isSupported(), DateTimeFieldType.dayOfWeek().isSupported(CopticChronology.getInstanceUTC()));\n-// Removed for GWT         assertSerialization(DateTimeFieldType.dayOfWeek());\n+        assertSerialization(DateTimeFieldType.dayOfWeek());\n     }\n \n     public void test_halfdayOfDay() throws Exception {\n         assertEquals(DurationFieldType.days(), DateTimeFieldType.halfdayOfDay().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().halfdayOfDay(), DateTimeFieldType.halfdayOfDay().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().halfdayOfDay().isSupported(), DateTimeFieldType.halfdayOfDay().isSupported(CopticChronology.getInstanceUTC()));\n-// Removed for GWT         assertSerialization(DateTimeFieldType.halfdayOfDay());\n+        assertSerialization(DateTimeFieldType.halfdayOfDay());\n     }\n \n     public void test_clockhourOfDay() throws Exception {\n         assertEquals(DurationFieldType.days(), DateTimeFieldType.clockhourOfDay().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().clockhourOfDay(), DateTimeFieldType.clockhourOfDay().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().clockhourOfDay().isSupported(), DateTimeFieldType.clockhourOfDay().isSupported(CopticChronology.getInstanceUTC()));\n-// Removed for GWT         assertSerialization(DateTimeFieldType.clockhourOfDay());\n+        assertSerialization(DateTimeFieldType.clockhourOfDay());\n     }\n \n     public void test_clockhourOfHalfday() throws Exception {\n         assertEquals(DurationFieldType.halfdays(), DateTimeFieldType.clockhourOfHalfday().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().clockhourOfHalfday(), DateTimeFieldType.clockhourOfHalfday().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().clockhourOfHalfday().isSupported(), DateTimeFieldType.clockhourOfHalfday().isSupported(CopticChronology.getInstanceUTC()));\n-// Removed for GWT         assertSerialization(DateTimeFieldType.clockhourOfHalfday());\n+        assertSerialization(DateTimeFieldType.clockhourOfHalfday());\n     }\n \n     public void test_hourOfHalfday() throws Exception {\n         assertEquals(DurationFieldType.halfdays(), DateTimeFieldType.hourOfHalfday().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().hourOfHalfday(), DateTimeFieldType.hourOfHalfday().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().hourOfHalfday().isSupported(), DateTimeFieldType.hourOfHalfday().isSupported(CopticChronology.getInstanceUTC()));\n-// Removed for GWT         assertSerialization(DateTimeFieldType.hourOfHalfday());\n+        assertSerialization(DateTimeFieldType.hourOfHalfday());\n     }\n \n     public void test_hourOfDay() throws Exception {\n         assertEquals(DurationFieldType.days(), DateTimeFieldType.hourOfDay().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().hourOfDay(), DateTimeFieldType.hourOfDay().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().hourOfDay().isSupported(), DateTimeFieldType.hourOfDay().isSupported(CopticChronology.getInstanceUTC()));\n-// Removed for GWT         assertSerialization(DateTimeFieldType.hourOfDay());\n+        assertSerialization(DateTimeFieldType.hourOfDay());\n     }\n \n     public void test_minuteOfDay() throws Exception {\n         assertEquals(DurationFieldType.days(), DateTimeFieldType.minuteOfDay().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().minuteOfDay(), DateTimeFieldType.minuteOfDay().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().minuteOfDay().isSupported(), DateTimeFieldType.minuteOfDay().isSupported(CopticChronology.getInstanceUTC()));\n-// Removed for GWT         assertSerialization(DateTimeFieldType.minuteOfDay());\n+        assertSerialization(DateTimeFieldType.minuteOfDay());\n     }\n \n     public void test_minuteOfHour() throws Exception {\n         assertEquals(DurationFieldType.hours(), DateTimeFieldType.minuteOfHour().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().minuteOfHour(), DateTimeFieldType.minuteOfHour().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().minuteOfHour().isSupported(), DateTimeFieldType.minuteOfHour().isSupported(CopticChronology.getInstanceUTC()));\n-// Removed for GWT         assertSerialization(DateTimeFieldType.minuteOfHour());\n+        assertSerialization(DateTimeFieldType.minuteOfHour());\n     }\n \n     public void test_secondOfDay() throws Exception {\n         assertEquals(DurationFieldType.days(), DateTimeFieldType.secondOfDay().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().secondOfDay(), DateTimeFieldType.secondOfDay().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().secondOfDay().isSupported(), DateTimeFieldType.secondOfDay().isSupported(CopticChronology.getInstanceUTC()));\n-// Removed for GWT         assertSerialization(DateTimeFieldType.secondOfDay());\n+        assertSerialization(DateTimeFieldType.secondOfDay());\n     }\n \n     public void test_secondOfMinute() throws Exception {\n         assertEquals(DurationFieldType.minutes(), DateTimeFieldType.secondOfMinute().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().secondOfMinute(), DateTimeFieldType.secondOfMinute().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().secondOfMinute().isSupported(), DateTimeFieldType.secondOfMinute().isSupported(CopticChronology.getInstanceUTC()));\n-// Removed for GWT         assertSerialization(DateTimeFieldType.secondOfMinute());\n+        assertSerialization(DateTimeFieldType.secondOfMinute());\n     }\n \n     public void test_millisOfDay() throws Exception {\n         assertEquals(DurationFieldType.days(), DateTimeFieldType.millisOfDay().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().millisOfDay(), DateTimeFieldType.millisOfDay().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().millisOfDay().isSupported(), DateTimeFieldType.millisOfDay().isSupported(CopticChronology.getInstanceUTC()));\n-// Removed for GWT         assertSerialization(DateTimeFieldType.millisOfDay());\n+        assertSerialization(DateTimeFieldType.millisOfDay());\n     }\n \n     public void test_millisOfSecond() throws Exception {\n         assertEquals(DurationFieldType.seconds(), DateTimeFieldType.millisOfSecond().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().millisOfSecond(), DateTimeFieldType.millisOfSecond().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().millisOfSecond().isSupported(), DateTimeFieldType.millisOfSecond().isSupported(CopticChronology.getInstanceUTC()));\n-// Removed for GWT         assertSerialization(DateTimeFieldType.millisOfSecond());\n-    }\n-\n-    /* Removed for GWT public void test_other() throws Exception {\n+        assertSerialization(DateTimeFieldType.millisOfSecond());\n+    }\n+\n+    /* //BEGIN GWT IGNORE\n+    public void test_other() throws Exception {\n         assertEquals(1, DateTimeFieldType.class.getDeclaredClasses().length);\n         Class cls = DateTimeFieldType.class.getDeclaredClasses()[0];\n         assertEquals(1, cls.getDeclaredConstructors().length);\n         DateTimeFieldType result = doSerialization(type);\n         assertEquals(type.getName(), result.getName());\n         assertNotSame(type, result);\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT private void assertSerialization(DateTimeFieldType type) throws Exception {\n+    private void assertSerialization(DateTimeFieldType type) throws Exception {\n+        /* //BEGIN GWT IGNORE\n         DateTimeFieldType result = doSerialization(type);\n         assertSame(type, result);\n-    } */\n-\n-    /* Removed for GWT private DateTimeFieldType doSerialization(DateTimeFieldType type) throws Exception {\n+        //END GWT IGNORE */\n+    }\n+\n+    /* //BEGIN GWT IGNORE\n+   private DateTimeFieldType doSerialization(DateTimeFieldType type) throws Exception {\n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ObjectOutputStream oos = new ObjectOutputStream(baos);\n         oos.writeObject(type);\n         DateTimeFieldType result = (DateTimeFieldType) ois.readObject();\n         ois.close();\n         return result;\n-    } */\n+    }\n+   //END GWT IGNORE */\n \n }\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTimeUtils.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTimeUtils.java\n // Removed for GWT import java.security.Policy;\n // Removed for GWT import java.security.ProtectionDomain;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.GJChronology;\n import org.joda.time.chrono.ISOChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for Instant.\n public class TestDateTimeUtils extends JodaGwtTestCase {\n \n     // Removed for GWT private static final GJChronology GJ = GJChronology.getInstance();\n-    // Removed for GWT private static final boolean OLD_JDK;\n-// Removed for GWT\n-//    static {\n-//        String str = System.getProperty(\"java.version\");\n-//        boolean old = true;\n-//        if (str.length() > 3 &&\n-//            str.charAt(0) == '1' &&\n-//            str.charAt(1) == '.' &&\n-//            (str.charAt(2) == '4' || str.charAt(2) == '5' || str.charAt(2) == '6')) {\n-//            old = false;\n-//        }\n-//        OLD_JDK = old;\n-//    }\n+    /* //BEGIN GWT IGNORE\n+    private static final boolean OLD_JDK;\n+    static {\n+        String str = System.getProperty(\"java.version\");\n+        boolean old = true;\n+        if (str.length() > 3 &&\n+            str.charAt(0) == '1' &&\n+            str.charAt(1) == '.' &&\n+            (str.charAt(2) == '4' || str.charAt(2) == '5' || str.charAt(2) == '6')) {\n+            old = false;\n+        }\n+        OLD_JDK = old;\n+    }\n+    //END GWT IGNORE */\n \n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n             + 14L * DateTimeConstants.MILLIS_PER_HOUR\n             + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n         \n-    // Removed for GWT private static final Policy RESTRICT;\n-    // Removed for GWT private static final Policy ALLOW;\n-// Removed for GWT\n-//    static {\n-//        // don't call Policy.getPolicy()\n-//        RESTRICT = new Policy() {\n-//            public PermissionCollection getPermissions(CodeSource codesource) {\n-//                Permissions p = new Permissions();\n-//                p.add(new AllPermission());  // enable everything\n-//                return p;\n-//            }\n-//            public void refresh() {\n-//            }\n-//            public boolean implies(ProtectionDomain domain, Permission permission) {\n-//                if (permission instanceof JodaTimePermission) {\n-//                    return false;\n-//                }\n-//                return true;\n-////                return super.implies(domain, permission);\n-//            }\n-//        };\n-//        ALLOW = new Policy() {\n-//            public PermissionCollection getPermissions(CodeSource codesource) {\n-//                Permissions p = new Permissions();\n-//                p.add(new AllPermission());  // enable everything\n-//                return p;\n-//            }\n-//            public void refresh() {\n-//            }\n-//        };\n-//    }\n+    /* //BEGIN GWT IGNORE\n+    private static final Policy RESTRICT;\n+    private static final Policy ALLOW;\n+    static {\n+        // don't call Policy.getPolicy()\n+        RESTRICT = new Policy() {\n+            public PermissionCollection getPermissions(CodeSource codesource) {\n+                Permissions p = new Permissions();\n+                p.add(new AllPermission());  // enable everything\n+                return p;\n+            }\n+            public void refresh() {\n+            }\n+            public boolean implies(ProtectionDomain domain, Permission permission) {\n+                if (permission instanceof JodaTimePermission) {\n+                    return false;\n+                }\n+                return true;\n+//                return super.implies(domain, permission);\n+            }\n+        };\n+        ALLOW = new Policy() {\n+            public PermissionCollection getPermissions(CodeSource codesource) {\n+                Permissions p = new Permissions();\n+                p.add(new AllPermission());  // enable everything\n+                return p;\n+            }\n+            public void refresh() {\n+            }\n+        };\n+    }\n+    //END GWT IGNORE */\n     \n     /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testClass() {\n+    /* //BEGIN GWT IGNORE\n+    public void testClass() {\n         Class cls = DateTimeUtils.class;\n         assertEquals(true, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isFinal(cls.getModifiers()));\n         assertEquals(true, Modifier.isProtected(cls.getDeclaredConstructors()[0].getModifiers()));\n         \n         DateTimeUtils utils = new DateTimeUtils() {};\n-    } */\n+    }\n+    //END GWT IGNORE */\n     \n     //-----------------------------------------------------------------------\n     public void testSystemMillis() {\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSystemMillisSecurity() {\n+    /* //BEGIN GWT IGNORE\n+    public void testSystemMillisSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n         } finally {\n             DateTimeUtils.setCurrentMillisSystem();\n         }\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testFixedMillis() {\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testFixedMillisSecurity() {\n+    /* //BEGIN GWT IGNORE\n+    public void testFixedMillisSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n         } finally {\n             DateTimeUtils.setCurrentMillisSystem();\n         }\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testOffsetMillis() {\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testOffsetMillisSecurity() {\n+    /* //BEGIN GWT IGNORE\n+    public void testOffsetMillisSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n         } finally {\n             DateTimeUtils.setCurrentMillisSystem();\n         }\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testGetInstantMillis_RI() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTimeZone.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTimeZone.java\n import java.util.Set;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n-import org.joda.time.gwt.JodaGwtTestCase;\n import org.joda.time.tz.DefaultNameProvider;\n import org.joda.time.tz.NameProvider;\n import org.joda.time.tz.Provider;\n import org.joda.time.tz.UTCProvider;\n-//import org.joda.time.tz.ZoneInfoProvider;\n+import org.joda.time.tz.ZoneInfoProvider;\n \n /**\n  * This class is a JUnit test for DateTimeZone.\n  * @author Stephen Colebourne\n  */\n public class TestDateTimeZone extends JodaGwtTestCase {\n-    // Removed for GWT private static final boolean OLD_JDK;\n-// Removed for GWT\n-//    static {\n-//        String str = System.getProperty(\"java.version\");\n-//        boolean old = true;\n-//        if (str.length() > 3 &&\n-//            str.charAt(0) == '1' &&\n-//            str.charAt(1) == '.' &&\n-//            (str.charAt(2) == '4' || str.charAt(2) == '5' || str.charAt(2) == '6')) {\n-//            old = false;\n-//        }\n-//        OLD_JDK = old;\n-//    }\n+    /* //BEGIN GWT IGNORE\n+    private static final boolean OLD_JDK;\n+    static {\n+        String str = System.getProperty(\"java.version\");\n+        boolean old = true;\n+        if (str.length() > 3 &&\n+            str.charAt(0) == '1' &&\n+            str.charAt(1) == '.' &&\n+            (str.charAt(2) == '4' || str.charAt(2) == '5' || str.charAt(2) == '6')) {\n+            old = false;\n+        }\n+        OLD_JDK = old;\n+    }\n+    //END GWT IGNORE */\n     \n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n //            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n //            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n     \n-    // Removed for GWT private static final Policy RESTRICT;\n-    // Removed for GWT private static final Policy ALLOW;\n-// Removed for GWT\n-//    static {\n-//        // don't call Policy.getPolicy()\n-//        RESTRICT = new Policy() {\n-//            public PermissionCollection getPermissions(CodeSource codesource) {\n-//                Permissions p = new Permissions();\n-//                p.add(new AllPermission());  // enable everything\n-//                return p;\n-//            }\n-//            public void refresh() {\n-//            }\n-//            public boolean implies(ProtectionDomain domain, Permission permission) {\n-//                if (permission instanceof JodaTimePermission) {\n-//                    return false;\n-//                }\n-//                return true;\n-////                return super.implies(domain, permission);\n-//            }\n-//        };\n-//        ALLOW = new Policy() {\n-//            public PermissionCollection getPermissions(CodeSource codesource) {\n-//                Permissions p = new Permissions();\n-//                p.add(new AllPermission());  // enable everything\n-//                return p;\n-//            }\n-//            public void refresh() {\n-//            }\n-//        };\n-//    }\n+    /* //BEGIN GWT IGNORE\n+    private static final Policy RESTRICT;\n+    private static final Policy ALLOW;\n+    static {\n+        // don't call Policy.getPolicy()\n+        RESTRICT = new Policy() {\n+            public PermissionCollection getPermissions(CodeSource codesource) {\n+                Permissions p = new Permissions();\n+                p.add(new AllPermission());  // enable everything\n+                return p;\n+            }\n+            public void refresh() {\n+            }\n+            public boolean implies(ProtectionDomain domain, Permission permission) {\n+                if (permission instanceof JodaTimePermission) {\n+                    return false;\n+                }\n+                return true;\n+//                return super.implies(domain, permission);\n+            }\n+        };\n+        ALLOW = new Policy() {\n+            public PermissionCollection getPermissions(CodeSource codesource) {\n+                Permissions p = new Permissions();\n+                p.add(new AllPermission());  // enable everything\n+                return p;\n+            }\n+            public void refresh() {\n+            }\n+        };\n+    }\n+    //END GWT IGNORE */\n     \n     private DateTimeZone zone;\n     private Locale locale;\n \n     protected void gwtSetUp() throws Exception {\n         super.gwtSetUp();\n+        /* //BEGIN GWT IGNORE\n         locale = Locale.getDefault();\n+        //END GWT IGNORE */\n         zone = DateTimeZone.getDefault();\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //Locale.setDefault(Locale.UK);\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n+        /* //BEGIN GWT IGNORE\n         Locale.setDefault(locale);\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(zone);\n     }\n \n         } catch (IllegalArgumentException ex) {}\n     }\n             \n-    /* Removed for GWT public void testDefaultSecurity() {\n+    /* //BEGIN GWT IGNORE\n+    public void testDefaultSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n             System.setSecurityManager(null);\n             Policy.setPolicy(ALLOW);\n         }\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testForID_String() {\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testProvider() {\n+    /* //BEGIN GWT IGNORE\n+    public void testProvider() {\n         try {\n             assertNotNull(DateTimeZone.getProvider());\n         \n             DateTimeZone.setProvider(null);\n             assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass());\n         }\n-    } */\n-    \n-    /* Removed for GWT public void testProviderSecurity() {\n+    }\n+    //END GWT IGNORE */\n+    \n+    /* //BEGIN GWT IGNORE\n+    public void testProviderSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n             System.setSecurityManager(null);\n             Policy.setPolicy(ALLOW);\n         }\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     static class MockNullIDSProvider implements Provider {\n         public Set getAvailableIDs() {\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testNameProvider() {\n+    public void testNameProvider() {\n         try {\n             assertNotNull(DateTimeZone.getNameProvider());\n         \n             DateTimeZone.setNameProvider(null);\n         }\n         \n+        /* //BEGIN GWT IGNORE\n         try {\n             System.setProperty(\"org.joda.time.DateTimeZone.NameProvider\", \"org.joda.time.tz.DefaultNameProvider\");\n             DateTimeZone.setNameProvider(null);\n             DateTimeZone.setNameProvider(null);\n             assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass());\n         }\n-    } */        \n-    \n-    /* Removed for GWT public void testNameProviderSecurity() {\n+        //END GWT IGNORE */\n+    }        \n+    \n+    /* //BEGIN GWT IGNORE\n+    public void testNameProviderSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n             System.setSecurityManager(null);\n             Policy.setPolicy(ALLOW);\n         }\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     static class MockOKButNullNameProvider implements NameProvider {\n         public String getShortName(Locale locale, String id, String nameKey) {\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testConstructor() {\n+    public void testConstructor() {\n+        /* //BEGIN GWT IGNORE\n         assertEquals(1, DateTimeZone.class.getDeclaredConstructors().length);\n         assertTrue(Modifier.isProtected(DateTimeZone.class.getDeclaredConstructors()[0].getModifiers()));\n+        //END GWT IGNORE */\n         try {\n             new DateTimeZone(null) {\n                 public String getNameKey(long instant) {\n                 }\n             };\n         } catch (IllegalArgumentException ex) {}\n-    } */\n+    }\n \n     //-----------------------------------------------------------------------\n     public void testGetID() {\n         assertEquals(\"Europe/London\", zone.getShortName(TEST_TIME_SUMMER, Locale.ENGLISH));\n     }\n     \n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testGetName() {\n         DateTimeZone zone = DateTimeZone.forID(\"Europe/London\");\n         assertEquals(\"British Summer Time\", zone.getName(TEST_TIME_SUMMER));\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSerialization1() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSerialization1() throws Exception {\n         DateTimeZone zone = DateTimeZone.forID(\"Europe/Paris\");\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertSame(zone, result);\n-    } */\n-\n-    //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSerialization2() throws Exception {\n+    }\n+    //END GWT IGNORE */\n+\n+    //-----------------------------------------------------------------------\n+    /* //BEGIN GWT IGNORE\n+    public void testSerialization2() throws Exception {\n         DateTimeZone zone = DateTimeZone.forID(\"+01:00\");\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertSame(zone, result);\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     public void testCommentParse() throws Exception {\n         // A bug in ZoneInfoCompiler's handling of comments broke Europe/Athens\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTimeZoneCutover.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTimeZoneCutover.java\n  */\n package org.joda.time;\n \n-import org.joda.time.gwt.JodaGwtTestCase;\n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n /**\n  * This class is a JUnit test for DateTimeZone.\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTime_Basics.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTime_Basics.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.field.UnsupportedDurationField;\n import org.joda.time.format.DateTimeFormat;\n import org.joda.time.format.DateTimeFormatter;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for DateTime.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n     }\n     \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSerialization() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSerialization() throws Exception {\n         DateTime test = new DateTime(TEST_TIME_NOW);\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertEquals(test, result);\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n         assertEquals(\"2002-06-09T01:00:00.000+01:00\", test.toString((String) null));\n     }\n \n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testToString_String_Locale() {\n         DateTime test = new DateTime(TEST_TIME_NOW);\n         assertEquals(\"Sun 9/6\", test.toString(\"EEE d/M\", Locale.ENGLISH));\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTime_Constructors.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTime_Constructors.java\n \n import java.util.Date;\n import java.util.Locale;\n-\n-\n+import java.util.TimeZone;\n+\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.convert.ConverterManager;\n import org.joda.time.convert.MockZeroNullIntegerConverter;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for DateTime.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         locale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        java.util.TimeZone.setDefault(LONDON.toTimeZone());\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //java.util.TimeZone.setDefault(LONDON.toTimeZone());\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n+        /* //BEGIN GWT IGNORE\n         java.util.TimeZone.setDefault(zone.toTimeZone());\n         Locale.setDefault(locale);\n+        //END GWT IGNORE */\n         zone = null;\n     }\n \n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTime_Properties.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTime_Properties.java\n package org.joda.time;\n \n import java.util.Locale;\n-\n-\n+import java.util.TimeZone;\n+\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.LenientChronology;\n import org.joda.time.chrono.StrictChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for DateTime.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         locale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //Locale.setDefault(Locale.UK);\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n+\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n+        /* //BEGIN GWT IGNORE\n         Locale.setDefault(locale);\n+        //END GWT IGNORE */\n         zone = null;\n     }\n \n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPropertyGetEra() {\n         DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         assertSame(test.getChronology().era(), test.era().getField());\n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPropertyGetMonthOfYear() {\n         DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField());\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPropertySetTextMonthOfYear() {\n         DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime copy = test.monthOfYear().setCopy(\"12\");\n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPropertyGetDayOfWeek() {\n         DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         assertSame(test.getChronology().dayOfWeek(), test.dayOfWeek().getField());\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPropertySetTextDayOfWeek() {\n         DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime copy = test.dayOfWeek().setCopy(\"4\");\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDays.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDays.java\n import java.io.ObjectOutputStream;\n \n import org.joda.time.gwt.JodaGwtTestCase;\n-\n import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n /**\n  * This class is a Junit unit test for Days.\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSerialization() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSerialization() throws Exception {\n         Days test = Days.SEVEN;\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertSame(test, result);\n-    } */\n-\n-    //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testToStandardWeeks() {\n+    }\n+    //END GWT IGNORE */\n+\n+    //-----------------------------------------------------------------------\n+    public void testToStandardWeeks() {\n         Days test = Days.days(14);\n         Weeks expected = Weeks.weeks(2);\n         assertEquals(expected, test.toStandardWeeks());\n-    } */\n-\n-    /* Removed for GWT public void testToStandardHours() {\n+    }\n+\n+    public void testToStandardHours() {\n         Days test = Days.days(2);\n         Hours expected = Hours.hours(2 * 24);\n         assertEquals(expected, test.toStandardHours());\n         } catch (ArithmeticException ex) {\n             // expected\n         }\n-    } */\n-\n-    /* Removed for GWT public void testToStandardMinutes() {\n+    }\n+\n+    public void testToStandardMinutes() {\n         Days test = Days.days(2);\n         Minutes expected = Minutes.minutes(2 * 24 * 60);\n         assertEquals(expected, test.toStandardMinutes());\n         } catch (ArithmeticException ex) {\n             // expected\n         }\n-    } */\n+    }\n \n     public void testToStandardSeconds() {\n         Days test = Days.days(2);\n         }\n     }\n \n-    /* Removed for GWT public void testToStandardDuration() {\n+    public void testToStandardDuration() {\n         Days test = Days.days(20);\n         Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_DAY);\n         assertEquals(expected, test.toStandardDuration());\n         \n         expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_DAY);\n         assertEquals(expected, Days.MAX_VALUE.toStandardDuration());\n-    } */\n+    }\n \n     //-----------------------------------------------------------------------\n     public void testPlus_int() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDurationField.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDurationField.java\n package org.joda.time;\n \n import org.joda.time.chrono.ISOChronology;\n+\n import org.joda.time.gwt.JodaGwtTestCase;\n-\n-\n import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n /**\n  * This class is a Junit unit test for DurationField.\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDurationFieldType.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDurationFieldType.java\n import java.io.ObjectOutputStream;\n // Removed for GWT import java.lang.reflect.Constructor;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.CopticChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for DurationFieldType.\n         assertEquals(\"eras\", DurationFieldType.eras().getName());\n         assertEquals(CopticChronology.getInstanceUTC().eras(), DurationFieldType.eras().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().eras().isSupported(), DurationFieldType.eras().isSupported(CopticChronology.getInstanceUTC()));\n-// Removed for GWT         assertSerialization(DurationFieldType.eras());\n+        assertSerialization(DurationFieldType.eras());\n     }\n \n     public void test_centuries() throws Exception {\n         assertEquals(\"centuries\", DurationFieldType.centuries().getName());\n         assertEquals(CopticChronology.getInstanceUTC().centuries(), DurationFieldType.centuries().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().centuries().isSupported(), DurationFieldType.centuries().isSupported(CopticChronology.getInstanceUTC()));\n-// Removed for GWT         assertSerialization(DurationFieldType.centuries());\n+        assertSerialization(DurationFieldType.centuries());\n     }\n \n     public void test_years() throws Exception {\n         assertEquals(\"years\", DurationFieldType.years().getName());\n         assertEquals(CopticChronology.getInstanceUTC().years(), DurationFieldType.years().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().years().isSupported(), DurationFieldType.years().isSupported(CopticChronology.getInstanceUTC()));\n-// Removed for GWT         assertSerialization(DurationFieldType.years());\n+        assertSerialization(DurationFieldType.years());\n     }\n \n     public void test_months() throws Exception {\n         assertEquals(\"months\", DurationFieldType.months().getName());\n         assertEquals(CopticChronology.getInstanceUTC().months(), DurationFieldType.months().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().months().isSupported(), DurationFieldType.months().isSupported(CopticChronology.getInstanceUTC()));\n-// Removed for GWT         assertSerialization(DurationFieldType.months());\n+        assertSerialization(DurationFieldType.months());\n     }\n \n     public void test_weekyears() throws Exception {\n         assertEquals(\"weekyears\", DurationFieldType.weekyears().getName());\n         assertEquals(CopticChronology.getInstanceUTC().weekyears(), DurationFieldType.weekyears().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().weekyears().isSupported(), DurationFieldType.weekyears().isSupported(CopticChronology.getInstanceUTC()));\n-// Removed for GWT         assertSerialization(DurationFieldType.weekyears());\n+        assertSerialization(DurationFieldType.weekyears());\n     }\n \n     public void test_weeks() throws Exception {\n         assertEquals(\"weeks\", DurationFieldType.weeks().getName());\n         assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC()));\n-// Removed for GWT         assertSerialization(DurationFieldType.weeks());\n+        assertSerialization(DurationFieldType.weeks());\n     }\n \n     public void test_days() throws Exception {\n         assertEquals(\"days\", DurationFieldType.days().getName());\n         assertEquals(CopticChronology.getInstanceUTC().days(), DurationFieldType.days().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().days().isSupported(), DurationFieldType.days().isSupported(CopticChronology.getInstanceUTC()));\n-// Removed for GWT         assertSerialization(DurationFieldType.days());\n+        assertSerialization(DurationFieldType.days());\n     }\n \n     public void test_halfdays() throws Exception {\n         assertEquals(\"halfdays\", DurationFieldType.halfdays().getName());\n         assertEquals(CopticChronology.getInstanceUTC().halfdays(), DurationFieldType.halfdays().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().halfdays().isSupported(), DurationFieldType.halfdays().isSupported(CopticChronology.getInstanceUTC()));\n-// Removed for GWT         assertSerialization(DurationFieldType.halfdays());\n+        assertSerialization(DurationFieldType.halfdays());\n     }\n \n     public void test_hours() throws Exception {\n         assertEquals(\"hours\", DurationFieldType.hours().getName());\n         assertEquals(CopticChronology.getInstanceUTC().hours(), DurationFieldType.hours().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().hours().isSupported(), DurationFieldType.hours().isSupported(CopticChronology.getInstanceUTC()));\n-// Removed for GWT         assertSerialization(DurationFieldType.hours());\n+        assertSerialization(DurationFieldType.hours());\n     }\n \n     public void test_minutes() throws Exception {\n         assertEquals(\"minutes\", DurationFieldType.minutes().getName());\n         assertEquals(CopticChronology.getInstanceUTC().minutes(), DurationFieldType.minutes().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().minutes().isSupported(), DurationFieldType.minutes().isSupported(CopticChronology.getInstanceUTC()));\n-// Removed for GWT         assertSerialization(DurationFieldType.minutes());\n+        assertSerialization(DurationFieldType.minutes());\n     }\n \n     public void test_seconds() throws Exception {\n         assertEquals(\"seconds\", DurationFieldType.seconds().getName());\n         assertEquals(CopticChronology.getInstanceUTC().seconds(), DurationFieldType.seconds().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().seconds().isSupported(), DurationFieldType.seconds().isSupported(CopticChronology.getInstanceUTC()));\n-// Removed for GWT         assertSerialization(DurationFieldType.seconds());\n+        assertSerialization(DurationFieldType.seconds());\n     }\n \n     public void test_millis() throws Exception {\n         assertEquals(\"millis\", DurationFieldType.millis().getName());\n         assertEquals(CopticChronology.getInstanceUTC().millis(), DurationFieldType.millis().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().millis().isSupported(), DurationFieldType.millis().isSupported(CopticChronology.getInstanceUTC()));\n-// Removed for GWT         assertSerialization(DurationFieldType.millis());\n+        assertSerialization(DurationFieldType.millis());\n     }\n \n-    /* Removed for GWT public void test_other() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void test_other() throws Exception {\n         assertEquals(1, DurationFieldType.class.getDeclaredClasses().length);\n         Class cls = DurationFieldType.class.getDeclaredClasses()[0];\n         assertEquals(1, cls.getDeclaredConstructors().length);\n         DurationFieldType result = doSerialization(type);\n         assertEquals(type.getName(), result.getName());\n         assertNotSame(type, result);\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT private void assertSerialization(DurationFieldType type) throws Exception {\n+    private void assertSerialization(DurationFieldType type) throws Exception {\n+        /* //BEGIN GWT IGNORE\n         DurationFieldType result = doSerialization(type);\n         assertSame(type, result);\n-    } */\n+        //END GWT IGNORE */\n+    }\n \n-    /* Removed for GWT private DurationFieldType doSerialization(DurationFieldType type) throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    private DurationFieldType doSerialization(DurationFieldType type) throws Exception {\n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ObjectOutputStream oos = new ObjectOutputStream(baos);\n         oos.writeObject(type);\n         DurationFieldType result = (DurationFieldType) ois.readObject();\n         ois.close();\n         return result;\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n }\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDuration_Basics.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDuration_Basics.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.base.AbstractDuration;\n import org.joda.time.base.BaseDuration;\n import org.joda.time.chrono.ISOChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for Duration.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n     }\n     \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSerialization() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSerialization() throws Exception {\n         Duration test = new Duration(123L);\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertEquals(test, result);\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testGetStandardSeconds() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDuration_Constructors.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDuration_Constructors.java\n import java.util.TimeZone;\n \n import org.joda.time.gwt.JodaGwtTestCase;\n-\n import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n /**\n  * This class is a JUnit test for Duration.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestHours.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestHours.java\n import java.io.ObjectOutputStream;\n \n import org.joda.time.gwt.JodaGwtTestCase;\n-\n import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n /**\n  * This class is a Junit unit test for Hours.\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSerialization() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSerialization() throws Exception {\n         Hours test = Hours.SEVEN;\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertSame(test, result);\n-    } */\n-\n-    //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testToStandardWeeks() {\n+    }\n+    //END GWT IGNORE */\n+\n+    //-----------------------------------------------------------------------\n+    public void testToStandardWeeks() {\n         Hours test = Hours.hours(24 * 7 * 2);\n         Weeks expected = Weeks.weeks(2);\n         assertEquals(expected, test.toStandardWeeks());\n-    } */\n-\n-    /* Removed for GWT public void testToStandardDays() {\n+    }\n+\n+    public void testToStandardDays() {\n         Hours test = Hours.hours(24 * 2);\n         Days expected = Days.days(2);\n         assertEquals(expected, test.toStandardDays());\n-    } */\n-\n-    /* Removed for GWT public void testToStandardMinutes() {\n+    }\n+\n+    public void testToStandardMinutes() {\n         Hours test = Hours.hours(3);\n         Minutes expected = Minutes.minutes(3 * 60);\n         assertEquals(expected, test.toStandardMinutes());\n         } catch (ArithmeticException ex) {\n             // expected\n         }\n-    } */\n+    }\n \n     public void testToStandardSeconds() {\n         Hours test = Hours.hours(3);\n         }\n     }\n \n-    /* Removed for GWT public void testToStandardDuration() {\n+    public void testToStandardDuration() {\n         Hours test = Hours.hours(20);\n         Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_HOUR);\n         assertEquals(expected, test.toStandardDuration());\n         \n         expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_HOUR);\n         assertEquals(expected, Hours.MAX_VALUE.toStandardDuration());\n-    } */\n+    }\n \n     //-----------------------------------------------------------------------\n     public void testPlus_int() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestIllegalFieldValueException.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestIllegalFieldValueException.java\n  */\n package org.joda.time;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.JulianChronology;\n import org.joda.time.field.FieldUtils;\n import org.joda.time.field.SkipDateTimeField;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * Tests IllegalFieldValueException by triggering it from other methods.\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestInstant_Basics.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestInstant_Basics.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.base.AbstractInstant;\n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for Instant.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n     }\n     \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSerialization() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSerialization() throws Exception {\n         Instant test = new Instant(TEST_TIME_NOW);\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertEquals(test, result);\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n     }\n     \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testImmutable() {\n+    /* //BEGIN GWT IGNORE\n+    public void testImmutable() {\n         assertTrue(Modifier.isFinal(Instant.class.getModifiers()));\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n }\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestInstant_Constructors.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestInstant_Constructors.java\n \n import java.util.Date;\n import java.util.Locale;\n+import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.convert.ConverterManager;\n import org.joda.time.convert.MockZeroNullIntegerConverter;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for Instant.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         locale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        java.util.TimeZone.setDefault(LONDON.toTimeZone());\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //java.util.TimeZone.setDefault(LONDON.toTimeZone());\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n+        /* //BEGIN GWT IGNORE\n         java.util.TimeZone.setDefault(zone.toTimeZone());\n         Locale.setDefault(locale);\n+        //END GWT IGNORE */\n         zone = null;\n     }\n \n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestInterval_Basics.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestInterval_Basics.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.GJChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.LenientChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for Instant.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(PARIS);\n-        TimeZone.setDefault(PARIS.toTimeZone());\n-        Locale.setDefault(Locale.FRANCE);\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(PARIS.toTimeZone());\n+        //Locale.setDefault(Locale.FRANCE);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n         interval37 = new Interval(3, 7);\n         interval33 = new Interval(3, 3);\n     }\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSerialization() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSerialization() throws Exception {\n         Interval test = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertEquals(test, result);\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestInterval_Constructors.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestInterval_Constructors.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.convert.ConverterManager;\n import org.joda.time.convert.IntervalConverter;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a JUnit test for Interval.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(PARIS);\n-        TimeZone.setDefault(PARIS.toTimeZone());\n-        Locale.setDefault(Locale.FRANCE);\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(PARIS.toTimeZone());\n+        //Locale.setDefault(Locale.FRANCE);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalDateTime_Basics.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalDateTime_Basics.java\n import java.util.Date;\n import java.util.Locale;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.format.DateTimeFormat;\n import org.joda.time.format.DateTimeFormatter;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for LocalDate.\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSerialization() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSerialization() throws Exception {\n         LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40, COPTIC_PARIS);\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         assertTrue(Arrays.equals(test.getValues(), result.getValues()));\n         assertTrue(Arrays.equals(test.getFields(), result.getFields()));\n         assertEquals(test.getChronology(), result.getChronology());\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalDateTime_Constructors.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalDateTime_Constructors.java\n import java.util.Date;\n import java.util.GregorianCalendar;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for LocalDateTime.\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalDateTime_Properties.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalDateTime_Properties.java\n \n import java.util.Locale;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.CopticChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for LocalDateTime.\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalDate_Basics.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalDate_Basics.java\n import java.util.Date;\n import java.util.Locale;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.StrictChronology;\n import org.joda.time.format.DateTimeFormat;\n import org.joda.time.format.DateTimeFormatter;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for LocalDate.\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSerialization() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSerialization() throws Exception {\n         LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS);\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         assertTrue(Arrays.equals(test.getValues(), result.getValues()));\n         assertTrue(Arrays.equals(test.getFields(), result.getFields()));\n         assertEquals(test.getChronology(), result.getChronology());\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalDate_Constructors.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalDate_Constructors.java\n import java.util.Date;\n import java.util.GregorianCalendar;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for LocalDate.\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalDate_Properties.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalDate_Properties.java\n \n import java.util.Locale;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.LenientChronology;\n import org.joda.time.chrono.StrictChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for YearMonthDay.\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalTime_Basics.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalTime_Basics.java\n import java.util.Date;\n import java.util.Locale;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.format.DateTimeFormat;\n import org.joda.time.format.DateTimeFormatter;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for LocalTime.\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSerialization() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSerialization() throws Exception {\n         LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_PARIS);\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         assertTrue(Arrays.equals(test.getValues(), result.getValues()));\n         assertTrue(Arrays.equals(test.getFields(), result.getFields()));\n         assertEquals(test.getChronology(), result.getChronology());\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalTime_Constructors.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalTime_Constructors.java\n import java.util.Calendar;\n import java.util.Date;\n import java.util.GregorianCalendar;\n-\n-\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.GJChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for LocalTime.\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n         DateTimeZone.setDefault(LONDON);\n-        java.util.TimeZone.setDefault(LONDON.toTimeZone());\n+        /* //BEGIN GWT IGNORE\n+        //java.util.TimeZone.setDefault(LONDON.toTimeZone());\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        //END GWT IGNORE */\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n+        /* //BEGIN GWT IGNORE\n         java.util.TimeZone.setDefault(zone.toTimeZone());\n+        //END GWT IGNORE */\n         zone = null;\n     }\n \n         assertEquals(4, test.getMillisOfSecond());\n     }\n \n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testConstructor_Object2() throws Throwable {\n         Calendar cal = new GregorianCalendar();\n         cal.setTime(new Date(TEST_TIME1));\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalTime_Properties.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalTime_Properties.java\n import java.util.Locale;\n \n import org.joda.time.gwt.JodaGwtTestCase;\n-\n import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n /**\n  * This class is a Junit unit test for TimeOfDay.\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMinutes.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMinutes.java\n import java.io.ObjectOutputStream;\n \n import org.joda.time.gwt.JodaGwtTestCase;\n-\n import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n /**\n  * This class is a Junit unit test for Minutes.\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSerialization() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSerialization() throws Exception {\n         Minutes test = Minutes.THREE;\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertSame(test, result);\n-    } */\n-\n-    //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testToStandardWeeks() {\n+    }\n+    //END GWT IGNORE */\n+\n+    //-----------------------------------------------------------------------\n+    public void testToStandardWeeks() {\n         Minutes test = Minutes.minutes(60 * 24 * 7 * 2);\n         Weeks expected = Weeks.weeks(2);\n         assertEquals(expected, test.toStandardWeeks());\n-    } */\n-\n-    /* Removed for GWT public void testToStandardDays() {\n+    }\n+\n+    public void testToStandardDays() {\n         Minutes test = Minutes.minutes(60 * 24 * 2);\n         Days expected = Days.days(2);\n         assertEquals(expected, test.toStandardDays());\n-    } */\n-\n-    /* Removed for GWT public void testToStandardHours() {\n+    }\n+\n+    public void testToStandardHours() {\n         Minutes test = Minutes.minutes(3 * 60);\n         Hours expected = Hours.hours(3);\n         assertEquals(expected, test.toStandardHours());\n-    } */\n+    }\n \n     public void testToStandardSeconds() {\n         Minutes test = Minutes.minutes(3);\n         }\n     }\n \n-    /* Removed for GWT public void testToStandardDuration() {\n+    public void testToStandardDuration() {\n         Minutes test = Minutes.minutes(20);\n         Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_MINUTE);\n         assertEquals(expected, test.toStandardDuration());\n         \n         expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_MINUTE);\n         assertEquals(expected, Minutes.MAX_VALUE.toStandardDuration());\n-    } */\n+    }\n \n     //-----------------------------------------------------------------------\n     public void testPlus_int() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMonths.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMonths.java\n import java.io.ObjectOutputStream;\n \n import org.joda.time.gwt.JodaGwtTestCase;\n-\n import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n /**\n  * This class is a Junit unit test for Months.\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSerialization() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSerialization() throws Exception {\n         Months test = Months.THREE;\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertSame(test, result);\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testPlus_int() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutableDateTime_Adds.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutableDateTime_Adds.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.ISOChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a JUnit test for MutableDateTime.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutableDateTime_Basics.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutableDateTime_Basics.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.field.UnsupportedDurationField;\n import org.joda.time.format.DateTimeFormat;\n import org.joda.time.format.DateTimeFormatter;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a JUnit test for MutableDateTime.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n     }\n     \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSerialization() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSerialization() throws Exception {\n         MutableDateTime test = new MutableDateTime(TEST_TIME_NOW);\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertEquals(test, result);\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n         assertEquals(\"2002-06-09T01:00:00.000+01:00\", test.toString((String) null));\n     }\n \n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testToString_String_String() {\n         MutableDateTime test = new MutableDateTime(TEST_TIME_NOW);\n         assertEquals(\"Sun 9/6\", test.toString(\"EEE d/M\", Locale.ENGLISH));\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutableDateTime_Constructors.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutableDateTime_Constructors.java\n \n import java.util.Date;\n import java.util.Locale;\n-\n-\n+import java.util.TimeZone;\n+\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.convert.ConverterManager;\n import org.joda.time.convert.MockZeroNullIntegerConverter;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for MutableDateTime.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         locale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        java.util.TimeZone.setDefault(LONDON.toTimeZone());\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //java.util.TimeZone.setDefault(LONDON.toTimeZone());\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n+        /* //BEGIN GWT IGNORE\n         java.util.TimeZone.setDefault(zone.toTimeZone());\n         Locale.setDefault(locale);\n+        //END GWT IGNORE */\n         zone = null;\n     }\n \n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutableDateTime_Properties.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutableDateTime_Properties.java\n package org.joda.time;\n \n import java.util.Locale;\n+import java.util.TimeZone;\n \n import org.joda.time.gwt.JodaGwtTestCase;\n-\n import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n /**\n  * This class is a Junit unit test for DateTime.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         locale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //Locale.setDefault(Locale.UK);\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n+        /* //BEGIN GWT IGNORE\n         Locale.setDefault(locale);\n+        //END GWT IGNORE */\n         zone = null;\n     }\n \n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPropertyGetEra() {\n         MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n         assertSame(test.getChronology().era(), test.era().getField());\n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPropertyGetMonthOfYear() {\n         MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n         assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField());\n         assertEquals(\"2004-12-09T00:00:00.000Z\", test.toString());\n     }\n \n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPropertySetTextMonthOfYear() {\n         MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n         test.monthOfYear().set(\"12\");\n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPropertyGetDayOfWeek() {\n         MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n         assertSame(test.getChronology().dayOfWeek(), test.dayOfWeek().getField());\n         assertEquals(\"2004-06-10T00:00:00.000+01:00\", test.toString());\n     }\n \n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPropertySetTextDayOfWeek() {\n         MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n         test.dayOfWeek().set(\"4\");\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutableDateTime_Sets.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutableDateTime_Sets.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a JUnit test for MutableDateTime.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n+\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutableInterval_Basics.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutableInterval_Basics.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.GJChronology;\n import org.joda.time.chrono.ISOChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for Instant.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n+\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSerialization() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSerialization() throws Exception {\n         MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertEquals(test, result);\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutableInterval_Constructors.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutableInterval_Constructors.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.convert.ConverterManager;\n import org.joda.time.convert.IntervalConverter;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a JUnit test for Interval.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n+\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutableInterval_Updates.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutableInterval_Updates.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.base.AbstractInterval;\n import org.joda.time.chrono.ISOChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for Instant.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n+\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutablePeriod_Basics.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutablePeriod_Basics.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.base.BasePeriod;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for MutableDuration.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSerialization() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSerialization() throws Exception {\n         MutablePeriod test = new MutablePeriod(123L);\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertEquals(test, result);\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n //    //-----------------------------------------------------------------------\n //    public void testAddTo1() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutablePeriod_Constructors.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutablePeriod_Constructors.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.ISOChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a JUnit test for MutableDuration.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutablePeriod_Updates.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutablePeriod_Updates.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.ISOChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a JUnit test for MutableDuration.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestParseISO.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestParseISO.java\n package org.joda.time;\n \n import junit.framework.Assert;\n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.format.DateTimeFormatter;\n import org.joda.time.format.ISODateTimeFormat;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * Unit test the parsing of ISO format datetimes\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestPartial_Basics.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestPartial_Basics.java\n import java.util.Date;\n import java.util.Locale;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.format.DateTimeFormat;\n import org.joda.time.format.DateTimeFormatter;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for Partial.\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSerialization() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSerialization() throws Exception {\n         Partial test = createHourMinPartial(COPTIC_PARIS);\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         assertTrue(Arrays.equals(test.getValues(), result.getValues()));\n         assertTrue(Arrays.equals(test.getFields(), result.getFields()));\n         assertEquals(test.getChronology(), result.getChronology());\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testGetFormatter1() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestPartial_Constructors.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestPartial_Constructors.java\n \n import java.util.Arrays;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for Partial.\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestPartial_Match.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestPartial_Match.java\n  */\n package org.joda.time;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.ISOChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for Partial.\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestPartial_Properties.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestPartial_Properties.java\n import java.util.Locale;\n \n import org.joda.time.gwt.JodaGwtTestCase;\n-\n import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n /**\n  * This class is a Junit unit test for Partial.\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestPeriodType.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestPeriodType.java\n import java.util.TimeZone;\n \n import org.joda.time.gwt.JodaGwtTestCase;\n-\n import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n /**\n  * This class is a JUnit test for PeriodType.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT private void assertEqualsAfterSerialization(PeriodType type) throws Exception {\n+    private void assertEqualsAfterSerialization(PeriodType type) throws Exception {\n+        /* //BEGIN GWT IGNORE\n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ObjectOutputStream oos = new ObjectOutputStream(baos);\n         oos.writeObject(type);\n         ois.close();\n         \n         assertEquals(type, result);\n-    } */\n-\n-    /* Removed for GWT private void assertSameAfterSerialization(PeriodType type) throws Exception {\n+        //END GWT IGNORE */\n+    }\n+\n+    private void assertSameAfterSerialization(PeriodType type) throws Exception {\n+        /* //BEGIN GWT IGNORE\n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ObjectOutputStream oos = new ObjectOutputStream(baos);\n         oos.writeObject(type);\n         ois.close();\n         \n         assertEquals(type, result);\n-    } */\n+        //END GWT IGNORE */\n+    }\n \n     //-----------------------------------------------------------------------\n     public void testStandard() throws Exception {\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.standard().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n-// Removed for GWT         assertSameAfterSerialization(type);\n+        assertSameAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.yearMonthDayTime().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n-// Removed for GWT         assertSameAfterSerialization(type);\n+        assertSameAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.yearMonthDay().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n-// Removed for GWT         assertSameAfterSerialization(type);\n+        assertSameAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.yearWeekDayTime().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n-// Removed for GWT         assertSameAfterSerialization(type);\n+        assertSameAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.yearWeekDay().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n-// Removed for GWT         assertSameAfterSerialization(type);\n+        assertSameAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.yearDayTime().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n-// Removed for GWT         assertSameAfterSerialization(type);\n+        assertSameAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.yearDay().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n-// Removed for GWT         assertSameAfterSerialization(type);\n+        assertSameAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.dayTime().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n-// Removed for GWT         assertSameAfterSerialization(type);\n+        assertSameAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.time().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n-// Removed for GWT         assertSameAfterSerialization(type);\n+        assertSameAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.years().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.standard().hashCode());\n-// Removed for GWT         assertSameAfterSerialization(type);\n+        assertSameAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.months().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.standard().hashCode());\n-// Removed for GWT         assertSameAfterSerialization(type);\n+        assertSameAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.weeks().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.standard().hashCode());\n-// Removed for GWT         assertSameAfterSerialization(type);\n+        assertSameAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.days().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.standard().hashCode());\n-// Removed for GWT         assertSameAfterSerialization(type);\n+        assertSameAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.hours().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.standard().hashCode());\n-// Removed for GWT         assertSameAfterSerialization(type);\n+        assertSameAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.minutes().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.standard().hashCode());\n-// Removed for GWT         assertSameAfterSerialization(type);\n+        assertSameAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.seconds().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.standard().hashCode());\n-// Removed for GWT         assertSameAfterSerialization(type);\n+        assertSameAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.millis().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.standard().hashCode());\n-// Removed for GWT         assertSameAfterSerialization(type);\n+        assertSameAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.forFields(types).hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n-// Removed for GWT         assertSameAfterSerialization(type);\n+        assertSameAfterSerialization(type);\n     }\n \n     public void testForFields3() throws Exception {\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.forFields(types).hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n-// Removed for GWT         assertSameAfterSerialization(type);\n+        assertSameAfterSerialization(type);\n     }\n \n     public void testForFields4() throws Exception {\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n         assertEquals(\"StandardNoYears\", type.getName());\n         assertEquals(\"PeriodType[StandardNoYears]\", type.toString());\n-// Removed for GWT         assertEqualsAfterSerialization(type);\n+        assertEqualsAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n         assertEquals(\"StandardNoMonths\", type.getName());\n         assertEquals(\"PeriodType[StandardNoMonths]\", type.toString());\n-// Removed for GWT         assertEqualsAfterSerialization(type);\n+        assertEqualsAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n         assertEquals(\"StandardNoWeeks\", type.getName());\n         assertEquals(\"PeriodType[StandardNoWeeks]\", type.toString());\n-// Removed for GWT         assertEqualsAfterSerialization(type);\n+        assertEqualsAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n         assertEquals(\"StandardNoDays\", type.getName());\n         assertEquals(\"PeriodType[StandardNoDays]\", type.toString());\n-// Removed for GWT         assertEqualsAfterSerialization(type);\n+        assertEqualsAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n         assertEquals(\"StandardNoHours\", type.getName());\n         assertEquals(\"PeriodType[StandardNoHours]\", type.toString());\n-// Removed for GWT         assertEqualsAfterSerialization(type);\n+        assertEqualsAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n         assertEquals(\"StandardNoMinutes\", type.getName());\n         assertEquals(\"PeriodType[StandardNoMinutes]\", type.toString());\n-// Removed for GWT         assertEqualsAfterSerialization(type);\n+        assertEqualsAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n         assertEquals(\"StandardNoSeconds\", type.getName());\n         assertEquals(\"PeriodType[StandardNoSeconds]\", type.toString());\n-// Removed for GWT         assertEqualsAfterSerialization(type);\n+        assertEqualsAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n         assertEquals(\"StandardNoMillis\", type.getName());\n         assertEquals(\"PeriodType[StandardNoMillis]\", type.toString());\n-// Removed for GWT         assertEqualsAfterSerialization(type);\n+        assertEqualsAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n         assertEquals(\"StandardNoHoursNoMinutesNoSeconds\", type.getName());\n         assertEquals(\"PeriodType[StandardNoHoursNoMinutesNoSeconds]\", type.toString());\n-// Removed for GWT         assertEqualsAfterSerialization(type);\n+        assertEqualsAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestPeriod_Basics.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestPeriod_Basics.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.base.BasePeriod;\n import org.joda.time.format.PeriodFormat;\n import org.joda.time.format.PeriodFormatter;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for Duration.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSerialization() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSerialization() throws Exception {\n         Period test = new Period(123L);\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertEquals(test, result);\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n //    //-----------------------------------------------------------------------\n //    public void testAddTo1() {\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testToStandardWeeks() {\n+    /* //BEGIN GWT IGNORE\n+    public void testToStandardWeeks() {\n         Period test = new Period(0, 0, 3, 4, 5, 6, 7, 8);\n         assertEquals(3, test.toStandardWeeks().getWeeks());\n         \n             test.toStandardWeeks();\n             fail();\n         } catch (ArithmeticException ex) {}\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     public void testToStandardWeeks_years() {\n         Period test = Period.years(1);\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testToStandardDays() {\n+    /* //BEGIN GWT IGNORE\n+    public void testToStandardDays() {\n         Period test = new Period(0, 0, 0, 4, 5, 6, 7, 8);\n         assertEquals(4, test.toStandardDays().getDays());\n         \n             test.toStandardDays();\n             fail();\n         } catch (ArithmeticException ex) {}\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     public void testToStandardDays_years() {\n         Period test = Period.years(1);\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testToStandardHours() {\n+    /* //BEGIN GWT IGNORE\n+    public void testToStandardHours() {\n         Period test = new Period(0, 0, 0, 0, 5, 6, 7, 8);\n         assertEquals(5, test.toStandardHours().getHours());\n         \n             test.toStandardHours();\n             fail();\n         } catch (ArithmeticException ex) {}\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     public void testToStandardHours_years() {\n         Period test = Period.years(1);\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testToStandardMinutes() {\n+    /* //BEGIN GWT IGNORE\n+    public void testToStandardMinutes() {\n         Period test = new Period(0, 0, 0, 0, 0, 6, 7, 8);\n         assertEquals(6, test.toStandardMinutes().getMinutes());\n         \n             test.toStandardMinutes();\n             fail();\n         } catch (ArithmeticException ex) {}\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     public void testToStandardMinutes_years() {\n         Period test = Period.years(1);\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testToStandardDuration() {\n+    /* //BEGIN GWT IGNORE\n+    public void testToStandardDuration() {\n         Period test = new Period(0, 0, 0, 0, 0, 0, 0, 8);\n         assertEquals(8, test.toStandardDuration().getMillis());\n         \n //            test.toStandardDuration();\n //            fail();\n //        } catch (ArithmeticException ex) {}\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     public void testToStandardDuration_years() {\n         Period test = Period.years(1);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestPeriod_Constructors.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestPeriod_Constructors.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.ISOChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a JUnit test for Duration.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestSeconds.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestSeconds.java\n import java.io.ObjectOutputStream;\n \n import org.joda.time.gwt.JodaGwtTestCase;\n-\n import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n /**\n  * This class is a Junit unit test for Seconds.\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSerialization() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSerialization() throws Exception {\n         Seconds test = Seconds.THREE;\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertSame(test, result);\n-    } */\n-\n-    //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testToStandardWeeks() {\n+    }\n+    //END GWT IGNORE */\n+\n+    //-----------------------------------------------------------------------\n+    public void testToStandardWeeks() {\n         Seconds test = Seconds.seconds(60 * 60 * 24 * 7 * 2);\n         Weeks expected = Weeks.weeks(2);\n         assertEquals(expected, test.toStandardWeeks());\n-    } */\n-\n-    /* Removed for GWT public void testToStandardDays() {\n+    }\n+\n+    public void testToStandardDays() {\n         Seconds test = Seconds.seconds(60 * 60 * 24 * 2);\n         Days expected = Days.days(2);\n         assertEquals(expected, test.toStandardDays());\n-    } */\n-\n-    /* Removed for GWT public void testToStandardHours() {\n+    }\n+\n+    public void testToStandardHours() {\n         Seconds test = Seconds.seconds(60 * 60 * 2);\n         Hours expected = Hours.hours(2);\n         assertEquals(expected, test.toStandardHours());\n-    } */\n-\n-    /* Removed for GWT public void testToStandardMinutes() {\n+    }\n+\n+    public void testToStandardMinutes() {\n         Seconds test = Seconds.seconds(60 * 2);\n         Minutes expected = Minutes.minutes(2);\n         assertEquals(expected, test.toStandardMinutes());\n-    } */\n-\n-    /* Removed for GWT public void testToStandardDuration() {\n+    }\n+\n+    public void testToStandardDuration() {\n         Seconds test = Seconds.seconds(20);\n         Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_SECOND);\n         assertEquals(expected, test.toStandardDuration());\n         \n         expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_SECOND);\n         assertEquals(expected, Seconds.MAX_VALUE.toStandardDuration());\n-    } */\n+    }\n \n     //-----------------------------------------------------------------------\n     public void testPlus_int() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestTimeOfDay_Basics.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestTimeOfDay_Basics.java\n import java.util.Date;\n import java.util.Locale;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.format.DateTimeFormat;\n import org.joda.time.format.DateTimeFormatter;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for TimeOfDay.\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSerialization() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSerialization() throws Exception {\n         TimeOfDay test = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS);\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         assertTrue(Arrays.equals(test.getValues(), result.getValues()));\n         assertTrue(Arrays.equals(test.getFields(), result.getFields()));\n         assertEquals(test.getChronology(), result.getChronology());\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestTimeOfDay_Constructors.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestTimeOfDay_Constructors.java\n import java.util.Calendar;\n import java.util.Date;\n import java.util.GregorianCalendar;\n-\n-\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.GJChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for TimeOfDay.\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n         DateTimeZone.setDefault(LONDON);\n-        java.util.TimeZone.setDefault(LONDON.toTimeZone());\n+        /* //BEGIN GWT IGNORE\n+        //java.util.TimeZone.setDefault(LONDON.toTimeZone());\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        //END GWT IGNORE */\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n+        /* //BEGIN GWT IGNORE\n         java.util.TimeZone.setDefault(zone.toTimeZone());\n+        //END GWT IGNORE */\n         zone = null;\n     }\n \n     /**\n      * Test constructor (Object)\n      */\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testConstructor_Object2() throws Throwable {\n         Calendar cal = new GregorianCalendar();\n         cal.setTime(new Date(TEST_TIME1));\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestTimeOfDay_Properties.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestTimeOfDay_Properties.java\n import java.util.Locale;\n \n import org.joda.time.gwt.JodaGwtTestCase;\n-\n import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n /**\n  * This class is a Junit unit test for TimeOfDay.\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestWeeks.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestWeeks.java\n import java.io.ObjectOutputStream;\n \n import org.joda.time.gwt.JodaGwtTestCase;\n-\n import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n /**\n  * This class is a Junit unit test for Weeks.\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSerialization() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSerialization() throws Exception {\n         Weeks test = Weeks.THREE;\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertSame(test, result);\n-    } */\n-\n-    //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testToStandardDays() {\n+    }\n+    //END GWT IGNORE */\n+\n+    //-----------------------------------------------------------------------\n+    public void testToStandardDays() {\n         Weeks test = Weeks.weeks(2);\n         Days expected = Days.days(14);\n         assertEquals(expected, test.toStandardDays());\n         } catch (ArithmeticException ex) {\n             // expected\n         }\n-    } */\n-\n-    /* Removed for GWT public void testToStandardHours() {\n+    }\n+\n+    public void testToStandardHours() {\n         Weeks test = Weeks.weeks(2);\n         Hours expected = Hours.hours(2 * 7 * 24);\n         assertEquals(expected, test.toStandardHours());\n         } catch (ArithmeticException ex) {\n             // expected\n         }\n-    } */\n-\n-    /* Removed for GWT public void testToStandardMinutes() {\n+    }\n+\n+    public void testToStandardMinutes() {\n         Weeks test = Weeks.weeks(2);\n         Minutes expected = Minutes.minutes(2 * 7 * 24 * 60);\n         assertEquals(expected, test.toStandardMinutes());\n         } catch (ArithmeticException ex) {\n             // expected\n         }\n-    } */\n+    }\n \n     public void testToStandardSeconds() {\n         Weeks test = Weeks.weeks(2);\n         }\n     }\n \n-    /* Removed for GWT public void testToStandardDuration() {\n+    public void testToStandardDuration() {\n         Weeks test = Weeks.weeks(20);\n         Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_WEEK);\n         assertEquals(expected, test.toStandardDuration());\n         \n         expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_WEEK);\n         assertEquals(expected, Weeks.MAX_VALUE.toStandardDuration());\n-    } */\n+    }\n \n     //-----------------------------------------------------------------------\n     public void testPlus_int() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestYearMonthDay_Basics.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestYearMonthDay_Basics.java\n import java.util.Date;\n import java.util.Locale;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.format.DateTimeFormat;\n import org.joda.time.format.DateTimeFormatter;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for YearMonthDay.\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSerialization() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSerialization() throws Exception {\n         YearMonthDay test = new YearMonthDay(1972, 6, 9, COPTIC_PARIS);\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         assertTrue(Arrays.equals(test.getValues(), result.getValues()));\n         assertTrue(Arrays.equals(test.getFields(), result.getFields()));\n         assertEquals(test.getChronology(), result.getChronology());\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestYearMonthDay_Constructors.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestYearMonthDay_Constructors.java\n import java.util.Date;\n import java.util.GregorianCalendar;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for YearMonthDay.\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestYearMonthDay_Properties.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestYearMonthDay_Properties.java\n \n import java.util.Locale;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.LenientChronology;\n import org.joda.time.chrono.StrictChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for YearMonthDay.\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestYears.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestYears.java\n import java.io.ObjectOutputStream;\n \n import org.joda.time.gwt.JodaGwtTestCase;\n-\n import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n /**\n  * This class is a Junit unit test for Years.\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSerialization() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSerialization() throws Exception {\n         Years test = Years.THREE;\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertSame(test, result);\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testPlus_int() {\n--- /dev/null\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/GwtTestAll.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.chrono;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import com.google.gwt.junit.tools.GWTTestSuite;\n+\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Entry point for all tests in this package.\n+ * \n+ * @version $Revision: 1217 $ $Date: 2007-05-08 05:49:47 +0200 (Tue, 08 May 2007) $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class GwtTestAll extends TestSuite {\n+\n+    public static boolean FAST = false;\n+\n+//    public TestAll(String testName) {\n+//        super(testName);\n+//    }\n+\n+    public static Test suite() {\n+        GWTTestSuite suite = new GWTTestSuite();\n+        \n+        suite.addTestSuite(TestBuddhistChronology.class);\n+        suite.addTestSuite(TestCopticChronology.class);\n+        suite.addTestSuite(TestEthiopicChronology.class);\n+        suite.addTestSuite(TestGJChronology.class);\n+        suite.addTestSuite(TestGregorianChronology.class);\n+        suite.addTestSuite(TestIslamicChronology.class);\n+        suite.addTestSuite(TestJulianChronology.class);\n+        suite.addTestSuite(TestISOChronology.class);\n+        suite.addTestSuite(TestLenientChronology.class);\n+        \n+        return suite;\n+    }\n+\n+    public static void main(String args[]) {\n+        FAST = false;\n+        TestRunner.run(GwtTestAll.class);\n+    }\n+\n+}\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestBuddhistChronology.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestBuddhistChronology.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.DateTimeUtils;\n import org.joda.time.DateTimeZone;\n import org.joda.time.Period;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for BuddhistChronology.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestCopticChronology.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestCopticChronology.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.DurationField;\n import org.joda.time.DurationFieldType;\n import org.joda.time.DateTime.Property;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for CopticChronology.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestEthiopicChronology.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestEthiopicChronology.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.DurationField;\n import org.joda.time.DurationFieldType;\n import org.joda.time.DateTime.Property;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for EthiopicChronology.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestGJChronology.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestGJChronology.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.Period;\n import org.joda.time.TimeOfDay;\n import org.joda.time.YearMonthDay;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for GJChronology.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n         }\n     }\n \n+    //GWT: result depends on the locale\n     public void testPartialGetAsText() {\n         GJChronology chrono = GJChronology.getInstance(TOKYO);\n         assertEquals(\"January\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsText());\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestGregorianChronology.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestGregorianChronology.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.DateTimeUtils;\n import org.joda.time.DateTimeZone;\n import org.joda.time.YearMonthDay;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for GregorianChronology.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestISOChronology.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestISOChronology.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.Partial;\n import org.joda.time.TimeOfDay;\n import org.joda.time.YearMonthDay;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for ISOChronology.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestIslamicChronology.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestIslamicChronology.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.DateTimeZone;\n import org.joda.time.DurationFieldType;\n import org.joda.time.DateTime.Property;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for IslamicChronology.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestJulianChronology.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestJulianChronology.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.DateTimeConstants;\n import org.joda.time.DateTimeUtils;\n import org.joda.time.DateTimeZone;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for JulianChronology.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n-        DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        //END GWT IGNORE */\n+       DateTimeZone.setDefault(LONDON);\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestLenientChronology.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestLenientChronology.java\n  */\n package org.joda.time.chrono;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.DateTime;\n import org.joda.time.DateTimeZone;\n import org.joda.time.MockZone;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  *\n--- /dev/null\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/GwtTestAll.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.convert;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import com.google.gwt.junit.tools.GWTTestSuite;\n+\n+/**\n+ * Entry point for all tests in this package.\n+ * \n+ * @version $Revision: 662 $ $Date: 2005-02-08 00:51:26 +0100 (Tue, 08 Feb 2005) $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class GwtTestAll extends TestSuite {\n+\n+//    public TestAllGwt(String testName) {\n+//        super(testName);\n+//    }\n+\n+    public static Test suite() {\n+        GWTTestSuite suite = new GWTTestSuite();\n+        suite.addTestSuite(TestConverterManager.class);\n+        suite.addTestSuite(TestConverterSet.class);\n+        \n+        suite.addTestSuite(TestCalendarConverter.class);\n+        suite.addTestSuite(TestDateConverter.class);\n+        suite.addTestSuite(TestLongConverter.class);\n+        suite.addTestSuite(TestNullConverter.class);\n+        suite.addTestSuite(TestReadableDurationConverter.class);\n+        suite.addTestSuite(TestReadableIntervalConverter.class);\n+        suite.addTestSuite(TestReadableInstantConverter.class);\n+        suite.addTestSuite(TestReadablePartialConverter.class);\n+        suite.addTestSuite(TestReadablePeriodConverter.class);\n+        suite.addTestSuite(TestStringConverter.class);\n+        return suite;\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = {\n+            GwtTestAll.class.getName()\n+        };\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+}\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestCalendarConverter.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestCalendarConverter.java\n import java.util.GregorianCalendar;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for CalendarConverter.\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSingleton() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSingleton() throws Exception {\n         Class cls = CalendarConverter.class;\n         assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n         assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n         assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n         assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testSupportedType() throws Exception {\n         Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone(\"Europe/Moscow\"));\n         assertEquals(ISOChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(uc, PARIS));\n         \n+        /* //BEGIN GWT IGNORE\n         try {\n             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n             bc.setTimeZone(TimeZone.getTimeZone(\"Europe/Moscow\"));\n         } catch (ClassNotFoundException ex) {\n             // ignore\n         }\n+        //END GWT IGNORE */\n     }\n \n     public void testGetChronology_Object_nullChronology() throws Exception {\n         Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone(\"Europe/Moscow\"));\n         assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null));\n         \n+        /* //BEGIN GWT IGNORE\n         try {\n             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n             bc.setTimeZone(TimeZone.getTimeZone(\"Europe/Moscow\"));\n         } catch (ClassNotFoundException ex) {\n             // ignore\n         }\n+        //END GWT IGNORE */\n     }\n \n     public void testGetChronology_Object_Chronology() throws Exception {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestConverterManager.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestConverterManager.java\n import java.util.Date;\n import java.util.GregorianCalendar;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.ReadableInterval;\n import org.joda.time.TimeOfDay;\n import org.joda.time.format.DateTimeFormatter;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a JUnit test for ConverterManager.\n  * @author Stephen Colebourne\n  */\n public class TestConverterManager extends JodaGwtTestCase {\n-    // Removed for GWT private static final boolean OLD_JDK;\n-// Removed for GWT\n-//    static {\n-//        String str = System.getProperty(\"java.version\");\n-//        boolean old = true;\n-//        if (str.length() > 3 &&\n-//            str.charAt(0) == '1' &&\n-//            str.charAt(1) == '.' &&\n-//            (str.charAt(2) == '4' || str.charAt(2) == '5' || str.charAt(2) == '6')) {\n-//            old = false;\n-//        }\n-//        OLD_JDK = old;\n-//    }\n-\n-    // Removed for GWT private static final Policy RESTRICT;\n-    // Removed for GWT private static final Policy ALLOW;\n-// Removed for GWT\n-//    static {\n-//        // don't call Policy.getPolicy()\n-//        RESTRICT = new Policy() {\n-//            public PermissionCollection getPermissions(CodeSource codesource) {\n-//                Permissions p = new Permissions();\n-//                p.add(new AllPermission());  // enable everything\n-//                return p;\n-//            }\n-//            public void refresh() {\n-//            }\n-//            public boolean implies(ProtectionDomain domain, Permission permission) {\n-//                if (permission instanceof JodaTimePermission) {\n-//                    return false;\n-//                }\n-//                return true;\n-////                return super.implies(domain, permission);\n-//            }\n-//        };\n-//        ALLOW = new Policy() {\n-//            public PermissionCollection getPermissions(CodeSource codesource) {\n-//                Permissions p = new Permissions();\n-//                p.add(new AllPermission());  // enable everything\n-//                return p;\n-//            }\n-//            public void refresh() {\n-//            }\n-//        };\n-//    }\n+    /* //BEGIN GWT IGNORE\n+    private static final boolean OLD_JDK;\n+    static {\n+        String str = System.getProperty(\"java.version\");\n+        boolean old = true;\n+        if (str.length() > 3 &&\n+            str.charAt(0) == '1' &&\n+            str.charAt(1) == '.' &&\n+            (str.charAt(2) == '4' || str.charAt(2) == '5' || str.charAt(2) == '6')) {\n+            old = false;\n+        }\n+        OLD_JDK = old;\n+    }\n+\n+    private static final Policy RESTRICT;\n+    private static final Policy ALLOW;\n+    static {\n+        // don't call Policy.getPolicy()\n+        RESTRICT = new Policy() {\n+            public PermissionCollection getPermissions(CodeSource codesource) {\n+                Permissions p = new Permissions();\n+                p.add(new AllPermission());  // enable everything\n+                return p;\n+            }\n+            public void refresh() {\n+            }\n+            public boolean implies(ProtectionDomain domain, Permission permission) {\n+                if (permission instanceof JodaTimePermission) {\n+                    return false;\n+                }\n+                return true;\n+//                return super.implies(domain, permission);\n+            }\n+        };\n+        ALLOW = new Policy() {\n+            public PermissionCollection getPermissions(CodeSource codesource) {\n+                Permissions p = new Permissions();\n+                p.add(new AllPermission());  // enable everything\n+                return p;\n+            }\n+            public void refresh() {\n+            }\n+        };\n+    }\n+    //END GWT IGNORE */\n \n     /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n     } */\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSingleton() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSingleton() throws Exception {\n         Class cls = ConverterManager.class;\n         assertEquals(true, Modifier.isPublic(cls.getModifiers()));\n         \n         \n         Field fld = cls.getDeclaredField(\"INSTANCE\");\n         assertEquals(true, Modifier.isPrivate(fld.getModifiers()));\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testGetInstantConverter() {\n         assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n     }\n \n-    /* Removed for GWT public void testAddInstantConverterSecurity() {\n+    /* //BEGIN GWT IGNORE\n+    public void testAddInstantConverterSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n             Policy.setPolicy(ALLOW);\n         }\n         assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testRemoveInstantConverter1() {\n         assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n     }\n \n-    /* Removed for GWT public void testRemoveInstantConverterSecurity() {\n+    /* //BEGIN GWT IGNORE\n+    public void testRemoveInstantConverterSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n             Policy.setPolicy(ALLOW);\n         }\n         assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n         assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n     }\n \n-    /* Removed for GWT public void testAddPartialConverterSecurity() {\n+    /* //BEGIN GWT IGNORE\n+    public void testAddPartialConverterSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n             Policy.setPolicy(ALLOW);\n         }\n         assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testRemovePartialConverter1() {\n         assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n     }\n \n-    /* Removed for GWT public void testRemovePartialConverterSecurity() {\n+    /* //BEGIN GWT IGNORE\n+    public void testRemovePartialConverterSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n             Policy.setPolicy(ALLOW);\n         }\n         assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n         assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length);\n     }\n \n-    /* Removed for GWT public void testAddDurationConverterSecurity() {\n+    /* //BEGIN GWT IGNORE\n+    public void testAddDurationConverterSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n             Policy.setPolicy(ALLOW);\n         }\n         assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length);\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testRemoveDurationConverter1() {\n         assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length);\n     }\n \n-    /* Removed for GWT public void testRemoveDurationConverterSecurity() {\n+    /* //BEGIN GWT IGNORE\n+    public void testRemoveDurationConverterSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n             Policy.setPolicy(ALLOW);\n         }\n         assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length);\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n         assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length);\n     }\n \n-    /* Removed for GWT public void testAddPeriodConverterSecurity() {\n+    /* //BEGIN GWT IGNORE\n+    public void testAddPeriodConverterSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n             Policy.setPolicy(ALLOW);\n         }\n         assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length);\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testRemovePeriodConverter1() {\n         assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length);\n     }\n \n-    /* Removed for GWT public void testRemovePeriodConverterSecurity() {\n+    /* //BEGIN GWT IGNORE\n+    public void testRemovePeriodConverterSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n             Policy.setPolicy(ALLOW);\n         }\n         assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length);\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n         assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length);\n     }\n \n-    /* Removed for GWT public void testAddIntervalConverterSecurity() {\n+    /* //BEGIN GWT IGNORE\n+    public void testAddIntervalConverterSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n             Policy.setPolicy(ALLOW);\n         }\n         assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length);\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testRemoveIntervalConverter1() {\n         assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length);\n     }\n \n-    /* Removed for GWT public void testRemoveIntervalConverterSecurity() {\n+    /* //BEGIN GWT IGNORE\n+    public void testRemoveIntervalConverterSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n             Policy.setPolicy(ALLOW);\n         }\n         assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length);\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestConverterSet.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestConverterSet.java\n import java.util.Calendar;\n import java.util.GregorianCalendar;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.ReadWritableInstant;\n import org.joda.time.ReadableDateTime;\n import org.joda.time.ReadableInstant;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a JUnit test for ConverterSet.\n     } */\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testClass() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testClass() throws Exception {\n         Class cls = ConverterSet.class;\n         assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n         assertEquals(false, Modifier.isPublic(con.getModifiers()));\n         assertEquals(false, Modifier.isProtected(con.getModifiers()));\n         assertEquals(false, Modifier.isPrivate(con.getModifiers()));\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testBigHashtable() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestDateConverter.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestDateConverter.java\n import java.util.Arrays;\n import java.util.Date;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for DateConverter.\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSingleton() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSingleton() throws Exception {\n         Class cls = DateConverter.class;\n         assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n         assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n         assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n         assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testSupportedType() throws Exception {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestLongConverter.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestLongConverter.java\n // Removed for GWT import java.lang.reflect.Modifier;\n import java.util.Arrays;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.TimeOfDay;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for LongConverter.\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSingleton() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSingleton() throws Exception {\n         Class cls = LongConverter.class;\n         assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n         assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n         assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n         assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testSupportedType() throws Exception {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestNullConverter.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestNullConverter.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.GJChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for NullConverter.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(DateTimeZone.forID(\"Europe/London\"));\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n         \n         ISO = ISOChronology.getInstance();\n         JULIAN = JulianChronology.getInstance();\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSingleton() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSingleton() throws Exception {\n         Class cls = NullConverter.class;\n         assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n         assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n         assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n         assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testSupportedType() throws Exception {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestReadableDurationConverter.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestReadableDurationConverter.java\n // Removed for GWT import java.lang.reflect.Field;\n // Removed for GWT import java.lang.reflect.Modifier;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.ReadableDuration;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for ReadableDurationConverter.\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSingleton() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSingleton() throws Exception {\n         Class cls = ReadableDurationConverter.class;\n         assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n         assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n         assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n         assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testSupportedType() throws Exception {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestReadableInstantConverter.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestReadableInstantConverter.java\n // Removed for GWT import java.lang.reflect.Modifier;\n import java.util.Arrays;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.TimeOfDay;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for ReadableInstantConverter.\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSingleton() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSingleton() throws Exception {\n         Class cls = ReadableInstantConverter.class;\n         assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n         assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n         assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n         assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testSupportedType() throws Exception {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestReadableIntervalConverter.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestReadableIntervalConverter.java\n // Removed for GWT import java.lang.reflect.Field;\n // Removed for GWT import java.lang.reflect.Modifier;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.GJChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a JUnit test for ReadableIntervalConverter.\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSingleton() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSingleton() throws Exception {\n         Class cls = ReadableIntervalConverter.class;\n         assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n         assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n         assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n         assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testSupportedType() throws Exception {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestReadablePartialConverter.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestReadablePartialConverter.java\n // Removed for GWT import java.lang.reflect.Modifier;\n import java.util.Arrays;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for ReadablePartialConverter.\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSingleton() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSingleton() throws Exception {\n         Class cls = ReadablePartialConverter.class;\n         assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n         assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n         assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n         assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testSupportedType() throws Exception {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestReadablePeriodConverter.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestReadablePeriodConverter.java\n // Removed for GWT import java.lang.reflect.Field;\n // Removed for GWT import java.lang.reflect.Modifier;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.Period;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for ReadablePeriodConverter.\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSingleton() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSingleton() throws Exception {\n         Class cls = ReadablePeriodConverter.class;\n         assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n         assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n         assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n         assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testSupportedType() throws Exception {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestStringConverter.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestStringConverter.java\n // Removed for GWT import java.lang.reflect.Modifier;\n import java.util.Arrays;\n import java.util.Locale;\n-\n-\n+import java.util.TimeZone;\n+\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for StringConverter.\n     protected void gwtSetUp() throws Exception {\n         super.gwtSetUp();\n         zone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         locale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //Locale.setDefault(Locale.UK);\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n         \n         JULIAN = JulianChronology.getInstance();\n         ISO = ISOChronology.getInstance();\n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeZone.setDefault(zone);\n+        /* //BEGIN GWT IGNORE\n         Locale.setDefault(locale);\n+        //END GWT IGNORE */\n         zone = null;\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSingleton() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSingleton() throws Exception {\n         Class cls = StringConverter.class;\n         assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n         assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n         assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n         assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testSupportedType() throws Exception {\n--- /dev/null\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/GwtTestAll.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.field;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Entry point for all tests in this package.\n+ * \n+ * @version $Id: TestAll.java 1204 2007-03-27 01:56:38Z jrricka $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class GwtTestAll extends TestSuite {\n+\n+//    public TestAllGwt(String testName) {\n+//        super(testName);\n+//    }\n+\n+//    public static void main(String args[]) {\n+//        String[] testCaseName = {\n+//            TestAllGwt.class.getName()\n+//        };\n+//        junit.textui.TestRunner.main(testCaseName);\n+//    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite();\n+        \n+        suite.addTestSuite(TestFieldUtils.class);\n+\n+        suite.addTestSuite(TestBaseDateTimeField.class);\n+        suite.addTestSuite(TestOffsetDateTimeField.class);\n+        suite.addTestSuite(TestPreciseDurationDateTimeField.class);\n+        suite.addTestSuite(TestPreciseDateTimeField.class);\n+        \n+        suite.addTestSuite(TestMillisDurationField.class);\n+        suite.addTestSuite(TestPreciseDurationField.class);\n+        suite.addTestSuite(TestScaledDurationField.class);\n+        suite.addTestSuite(TestUnsupportedDateTimeField.class);\n+        return suite;\n+    }\n+\n+}\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestBaseDateTimeField.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestBaseDateTimeField.java\n import java.util.Arrays;\n import java.util.Locale;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.TimeOfDay;\n import org.joda.time.base.BasePartial;\n import org.joda.time.chrono.ISOChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for BaseDateTimeField.\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestFieldUtils.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestFieldUtils.java\n package org.joda.time.field;\n \n import org.joda.time.gwt.JodaGwtTestCase;\n-\n import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n /**\n  * \n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestMillisDurationField.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestMillisDurationField.java\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.DurationField;\n import org.joda.time.DurationFieldType;\n import org.joda.time.chrono.ISOChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for PeriodFormatterBuilder.\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSerialization() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSerialization() throws Exception {\n         DurationField test = MillisDurationField.INSTANCE;\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertSame(test, result);\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n }\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestOffsetDateTimeField.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestOffsetDateTimeField.java\n import java.util.Arrays;\n import java.util.Locale;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.DurationFieldType;\n import org.joda.time.TimeOfDay;\n import org.joda.time.chrono.ISOChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for PreciseDateTimeField.\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestPreciseDateTimeField.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestPreciseDateTimeField.java\n import java.util.Arrays;\n import java.util.Locale;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.DurationFieldType;\n import org.joda.time.TimeOfDay;\n import org.joda.time.chrono.ISOChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for PreciseDateTimeField.\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestPreciseDurationDateTimeField.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestPreciseDurationDateTimeField.java\n import java.util.Arrays;\n import java.util.Locale;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.DurationFieldType;\n import org.joda.time.TimeOfDay;\n import org.joda.time.chrono.ISOChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for PreciseDurationDateTimeField.\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestPreciseDurationField.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestPreciseDurationField.java\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.DurationField;\n import org.joda.time.DurationFieldType;\n import org.joda.time.chrono.ISOChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for PreciseDurationField.\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSerialization() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSerialization() throws Exception {\n         DurationField test = iField;\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertEquals(test, result);\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n }\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestScaledDurationField.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestScaledDurationField.java\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.DurationField;\n import org.joda.time.DurationFieldType;\n import org.joda.time.chrono.ISOChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for PreciseDurationField.\n     }\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testSerialization() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testSerialization() throws Exception {\n         DurationField test = iField;\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertEquals(test, result);\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n }\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestUnsupportedDateTimeField.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestUnsupportedDateTimeField.java\n \n import java.util.Locale;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.DurationFieldType;\n import org.joda.time.LocalTime;\n import org.joda.time.ReadablePartial;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a JUnit test to test only the UnsupportedDateTimeField class.\n--- /dev/null\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/GwtTestAll.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.format;\n+\n+import junit.framework.Test;\n+\n+import com.google.gwt.junit.tools.GWTTestSuite;\n+\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Entry point for all tests in this package.\n+ * \n+ * @version $Revision: 1091 $ $Date: 2006-06-17 14:46:03 +0200 (Sat, 17 Jun 2006) $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class GwtTestAll extends TestSuite {\n+\n+//    public TestAll(String testName) {\n+//        super(testName);\n+//    }\n+\n+    public static Test suite() {\n+        GWTTestSuite suite = new GWTTestSuite();\n+        \n+        suite.addTestSuite(TestDateTimeFormatter.class);\n+        suite.addTestSuite(TestDateTimeFormat.class);\n+//Removed for GWT        suite.addTestSuite(TestDateTimeFormatStyle.class);\n+        suite.addTestSuite(TestISODateTimeFormat.class);\n+        suite.addTestSuite(TestISODateTimeFormat_Fields.class);\n+        suite.addTestSuite(TestISODateTimeFormatParsing.class);\n+        suite.addTestSuite(TestDateTimeFormatterBuilder.class);\n+        \n+        suite.addTestSuite(TestPeriodFormatter.class);\n+        suite.addTestSuite(TestPeriodFormat.class);\n+        suite.addTestSuite(TestISOPeriodFormat.class);\n+        suite.addTestSuite(TestISOPeriodFormatParsing.class);\n+        suite.addTestSuite(TestPeriodFormatParsing.class);\n+        suite.addTestSuite(TestPeriodFormatterBuilder.class);\n+\n+        suite.addTestSuite(TestTextFields.class);\n+\n+        return suite;\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = {\n+            GwtTestAll.class.getName()\n+        };\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+}\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestDateTimeFormat.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestDateTimeFormat.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.DateTimeUtils;\n import org.joda.time.DateTimeZone;\n import org.joda.time.chrono.GJChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for DateTime Formating.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestDateTimeFormatter.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestDateTimeFormatter.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.ReadablePartial;\n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.ISOChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for DateTime Formating.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n         f = new DateTimeFormatterBuilder()\n                 .appendDayOfWeekShortText()\n                 .appendLiteral(' ')\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPrint_simple() {\n         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n         assertEquals(\"Wed 2004-06-09T10:20:30Z\", f.print(dt));\n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPrint_locale() {\n         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n         assertEquals(\"mer. 2004-06-09T10:20:30Z\", f.withLocale(Locale.FRENCH).print(dt));\n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPrint_zone() {\n         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n         assertEquals(\"Wed 2004-06-09T06:20:30-04:00\", f.withZone(NEWYORK).print(dt));\n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPrint_chrono() {\n         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n         assertEquals(\"Wed 2004-06-09T12:20:30+02:00\", f.withChronology(ISO_PARIS).print(dt));\n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPrint_bufferMethods() throws Exception {\n         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n         StringBuffer buf = new StringBuffer();\n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPrint_writerMethods() throws Exception {\n         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n         CharArrayWriter out = new CharArrayWriter();\n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPrint_chrono_and_zone() {\n         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n         assertEquals(\"Wed 2004-06-09T10:20:30Z\",\n         assertSame(f2, f3);\n     }\n \n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPrinterParserMethods() {\n         DateTimeFormatter f2 = new DateTimeFormatter(f.getPrinter(), f.getParser());\n         assertEquals(f.getPrinter(), f2.getPrinter());\n         assertEquals(expect, h.withZone(PARIS).parseDateTime(\"2004-06-09T10:20:30\"));\n     }\n \n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testParseDateTime_simple_precedence() {\n         DateTime expect = null;\n         // use correct day of week\n         assertEquals(expect, h.withZone(PARIS).parseMutableDateTime(\"2004-06-09T10:20:30\"));\n     }\n \n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testParseMutableDateTime_simple_precedence() {\n         MutableDateTime expect = null;\n         // use correct day of week\n         assertEquals(expect, result);\n     }\n \n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testParseInto_simple_precedence() {\n         MutableDateTime expect = null;\n         MutableDateTime result = null;\n \n     //-----------------------------------------------------------------------\n     // Ensure time zone name switches properly at the zone DST transition.\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testZoneNameNearTransition() {\n         DateTime inDST_1  = new DateTime(2005, 10, 30, 1, 0, 0, 0, NEWYORK);\n         DateTime inDST_2  = new DateTime(2005, 10, 30, 1, 59, 59, 999, NEWYORK);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestDateTimeFormatterBuilder.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestDateTimeFormatterBuilder.java\n  */\n package org.joda.time.format;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.DateTime;\n import org.joda.time.DateTimeFieldType;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for DateTimeFormatterBuilder.\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestISODateTimeFormat.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestISODateTimeFormat.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.DateTimeUtils;\n import org.joda.time.DateTimeZone;\n import org.joda.time.Partial;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for ISODateTimeFormat.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n-    }\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n+     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestISODateTimeFormatParsing.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestISODateTimeFormatParsing.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.DateTime;\n import org.joda.time.DateTimeZone;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for ISODateTimeFormat parsing.\n     protected void gwtSetUp() throws Exception {\n         super.gwtSetUp();\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(DateTimeZone.forID(\"Europe/London\"));\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n-    }\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n+     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestISODateTimeFormat_Fields.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestISODateTimeFormat_Fields.java\n import java.util.Collections;\n import java.util.List;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.DateTimeFieldType;\n import org.joda.time.Partial;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for ISODateTimeFormat.\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestISOPeriodFormat.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestISOPeriodFormat.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.DateTimeZone;\n import org.joda.time.Period;\n import org.joda.time.PeriodType;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for ISOPeriodFormat.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n-    }\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n+     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestISOPeriodFormatParsing.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestISOPeriodFormatParsing.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.DateTimeZone;\n import org.joda.time.Period;\n import org.joda.time.PeriodType;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for ISOPeriodFormat.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n-    }\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n+     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestPeriodFormat.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestPeriodFormat.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.DateTimeZone;\n import org.joda.time.Period;\n import org.joda.time.PeriodType;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for PeriodFormat.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n-    }\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n+     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestPeriodFormatParsing.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestPeriodFormatParsing.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.DateTimeZone;\n import org.joda.time.Period;\n import org.joda.time.PeriodType;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for PeriodFormat.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n-    }\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n+     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestPeriodFormatter.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestPeriodFormatter.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.PeriodType;\n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.ISOChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for Period Formating.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n-        f = ISOPeriodFormat.standard();\n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n+         f = ISOPeriodFormat.standard();\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestPeriodFormatterBuilder.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestPeriodFormatterBuilder.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.DateTimeZone;\n import org.joda.time.Period;\n import org.joda.time.PeriodType;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for PeriodFormatterBuilder.\n         super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n-        \n+        /* //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n+         \n         builder = new PeriodFormatterBuilder();\n     }\n \n         super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestTextFields.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestTextFields.java\n package org.joda.time.format;\n \n import java.util.Locale;\n+import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.DateTimeZone;\n import org.joda.time.MutableDateTime;\n import org.joda.time.chrono.ISOChronology;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * Makes sure that text fields are correct for English.\n     protected void gwtSetUp() throws Exception {\n         super.gwtSetUp();\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        /* //BEGIN GWT IGNORE\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE */\n         DateTimeZone.setDefault(ZONES[0]);\n-        Locale.setDefault(Locale.ENGLISH);\n+        /* //BEGIN GWT IGNORE\n+        //Locale.setDefault(Locale.ENGLISH);\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE */\n     }\n \n     protected void gwtTearDown() throws Exception {\n         super.gwtTearDown();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        /* //BEGIN GWT IGNORE\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE */\n         originalDateTimeZone = null;\n         originalLocale = null;\n     }\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/gwt/JodaGwtTestCase.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/gwt/JodaGwtTestCase.java\n \n     @Override\n     public String getModuleName() {\n-        return \"org.joda.Time\";\n+        return \"org.joda.TimeTest\";\n     }\n \n }\n--- /dev/null\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/tz/GwtTestAll.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.tz;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import com.google.gwt.junit.tools.GWTTestSuite;\n+\n+/**\n+ * Entry point for all tests in this package.\n+ * \n+ * @version $Revision: 1000 $ $Date: 2005-12-23 01:17:52 +0100 (Fri, 23 Dec 2005) $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class GwtTestAll extends TestSuite {\n+\n+//    public TestAll(String testName) {\n+//        super(testName);\n+//    }\n+\n+    public static Test suite() {\n+        GWTTestSuite suite = new GWTTestSuite();\n+        suite.addTestSuite(TestUTCProvider.class);\n+        suite.addTestSuite(TestBuilder.class);\n+//Removed for GWT        suite.addTestSuite(TestCompiler.class);\n+        suite.addTestSuite(TestFixedDateTimeZone.class);\n+        return suite;\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = {\n+            GwtTestAll.class.getName()\n+        };\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+}\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/tz/TestBuilder.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/tz/TestBuilder.java\n // Removed for GWT import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.DateTimeZone;\n import org.joda.time.format.DateTimeFormatter;\n import org.joda.time.format.DateTimeFormatterBuilder;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * Test cases for DateTimeZoneBuilder.\n         }\n     }\n \n-    /* Removed for GWT public void testSerialization() throws IOException {\n+    /* //BEGIN GWT IGNORE\n+    public void testSerialization() throws IOException {\n         DateTimeZone tz = testSerialization\n             (buildAmericaLosAngelesBuilder(), \"America/Los_Angeles\");\n \n         assertEquals(false, tz.isFixed());\n         testForwardTransitions(tz, AMERICA_LOS_ANGELES_DATA);\n         testReverseTransitions(tz, AMERICA_LOS_ANGELES_DATA);\n-    } */\n-\n-    /* Removed for GWT static DateTimeZone testSerialization(DateTimeZoneBuilder builder, String id)\n+    }\n+    //END GWT IGNORE */\n+\n+    /* //BEGIN GWT IGNORE\n+    static DateTimeZone testSerialization(DateTimeZoneBuilder builder, String id)\n         throws IOException\n     {\n         ByteArrayOutputStream out = new ByteArrayOutputStream();\n         DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);\n         assertEquals(id, tz.getID());\n         return tz;\n-    } */\n-\n-    /* Removed for GWT public void testFixed() throws IOException {\n+    }\n+    //END GWT IGNORE */\n+\n+    /* //BEGIN GWT IGNORE\n+    public void testFixed() throws IOException {\n         DateTimeZoneBuilder builder = new DateTimeZoneBuilder()\n             .setStandardOffset(3600000)\n             .setFixedSavings(\"LMT\", 0);\n \n             tz = testSerialization(builder, \"Test\");\n         }\n-    } */\n+    }\n+    //END GWT IGNORE */\n }\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/tz/TestFixedDateTimeZone.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/tz/TestFixedDateTimeZone.java\n import java.util.Date;\n import java.util.TimeZone;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.DateTimeZone;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * Test cases for FixedDateTimeZone.\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/tz/TestUTCProvider.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/tz/TestUTCProvider.java\n // Removed for GWT import java.lang.reflect.Modifier;\n import java.util.Set;\n \n-\n+import org.joda.time.gwt.JodaGwtTestCase;\n import static org.joda.time.gwt.TestConstants.*;\n //import junit.framework.TestSuite;\n \n import org.joda.time.DateTimeZone;\n-import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a JUnit test for UTCProvider.\n     } */\n \n     //-----------------------------------------------------------------------\n-    /* Removed for GWT public void testClass() throws Exception {\n+    /* //BEGIN GWT IGNORE\n+    public void testClass() throws Exception {\n         Class cls = UTCProvider.class;\n         assertEquals(true, Modifier.isPublic(cls.getModifiers()));\n         \n         Constructor con = cls.getDeclaredConstructor((Class[]) null);\n         assertEquals(1, cls.getDeclaredConstructors().length);\n         assertEquals(true, Modifier.isPublic(con.getModifiers()));\n-    } */\n+    }\n+    //END GWT IGNORE */\n \n     //-----------------------------------------------------------------------\n     public void testGetAvailableIDs() throws Exception {", "timestamp": 1258644267, "metainfo": ""}