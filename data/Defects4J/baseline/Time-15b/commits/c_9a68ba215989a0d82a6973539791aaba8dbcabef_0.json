{"sha": "9a68ba215989a0d82a6973539791aaba8dbcabef", "log": "Move generator classes so they aren't in the jar  ", "commit": "\n--- /dev/null\n+++ b/JodaTimeContrib/i18n/src/gen/org/joda/time/contrib/i18n/CLDRTerritoryGenerator.java\n+/*\n+ *  Copyright 2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.i18n;\n+\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectOutputStream;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.StringTokenizer;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.SAXParseException;\n+\n+/**\n+ * Generates a file that stores the territory data.\n+ */\n+public class CLDRTerritoryGenerator {\n+\n+    Map firstDOWMap = new HashMap();\n+    Map weekendStartMap = new HashMap();\n+    Map weekendEndMap = new HashMap();\n+    Map zoneMap = new HashMap();\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Output the CLDR data to a file.\n+     *\n+     * @param args\n+     */\n+    public static void main(String[] args) {\n+        try {\n+            CLDRTerritoryGenerator gen = new CLDRTerritoryGenerator();\n+            gen.readXML();\n+            gen.writeFile();\n+            \n+        } catch (RuntimeException ex) {\n+            System.err.println();\n+            ex.printStackTrace();\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Writes the data to a file.\n+     */\n+    private void writeFile() {\n+        File file = new File(\"src/java/org/joda/time/contrib/i18n/CLDRTerritoryData.dat\");\n+        ObjectOutputStream oos = null;\n+        try {\n+            oos = new ObjectOutputStream(\n+                    new BufferedOutputStream(new FileOutputStream(file)));\n+            oos.writeByte(1);  // version\n+            writeData(oos);\n+            oos.writeUTF(\"\");  // end of file id\n+            oos.close();\n+            \n+        } catch (IOException ex) {\n+            ex.printStackTrace();\n+            if (oos != null) {\n+                try {\n+                    oos.close();\n+                } catch (IOException ex2) {\n+                    // ignore\n+                }\n+            }\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Writes the data to the stream.\n+     */\n+    private void writeData(ObjectOutputStream oos) throws IOException {\n+        Set territories = zoneMap.keySet();\n+        for (Iterator it = territories.iterator(); it.hasNext(); ) {\n+            String territory = (String) it.next();\n+            if (\"001\".equals(territory)) {\n+                continue;\n+            }\n+            List zones = (List) zoneMap.get(territory);\n+            if (zones.size() > 1) {\n+                pickPrimaryZone(territory, zones);\n+            }\n+            Integer firstDay = (Integer) firstDOWMap.get(territory);\n+            if (firstDay == null) {\n+                firstDay = (Integer) firstDOWMap.get(\"001\");\n+            }\n+            Integer weekendStart = (Integer) weekendStartMap.get(territory);\n+            if (weekendStart == null) {\n+                weekendStart = (Integer) weekendStartMap.get(\"001\");\n+            }\n+            Integer weekendEnd = (Integer) weekendEndMap.get(territory);\n+            if (weekendEnd == null) {\n+                weekendEnd = (Integer) weekendEndMap.get(\"001\");\n+            }\n+            \n+            int weStart = weekendStart.intValue();\n+            int weEnd = weekendEnd.intValue();\n+            int busStart = (weEnd == 7 ? 1 : weEnd + 1);\n+            int busEnd = (weStart == 1 ? 7 : weStart - 1);\n+            \n+            oos.writeUTF(territory);\n+            oos.writeByte(zones.size());\n+            for (int i = 0; i < zones.size(); i++) {\n+                oos.writeUTF((String) zones.get(i));\n+            }\n+            oos.writeByte(firstDay.intValue());\n+            oos.writeByte(busStart);\n+            oos.writeByte(busEnd);\n+            oos.writeByte(weStart);\n+            oos.writeByte(weEnd);\n+            System.out.print(territory + \" \");\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Reads the CLDR XML data.\n+     */\n+    private void readXML() {\n+        File file = new File(\"src/gen/org/joda/time/contrib/i18n/supplementalData.xml\");\n+        try {\n+            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+            DocumentBuilder builder = factory.newDocumentBuilder();\n+            Document document = builder.parse(file);\n+            Element rootEl = (Element) document.getElementsByTagName(\"supplementalData\").item(0);\n+            \n+            parseFirstDay(rootEl);\n+            parseWeekendStart(rootEl);\n+            parseWeekendEnd(rootEl);\n+            parseZoneFormatting(rootEl);\n+            \n+        } catch (SAXParseException ex) {\n+            ex.printStackTrace();\n+        } catch (SAXException ex) {\n+            ex.printStackTrace();\n+        } catch (IOException ex) {\n+            ex.printStackTrace();\n+        } catch (ParserConfigurationException ex) {\n+            ex.printStackTrace();\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Parses the firstDay elements.\n+     *\n+     * @param rootEl  the root element\n+     */\n+    private void parseFirstDay(Element rootEl) {\n+        Element weekDataEl = (Element) rootEl.getElementsByTagName(\"weekData\").item(0);\n+        NodeList els = weekDataEl.getElementsByTagName(\"firstDay\");\n+        for (int i = 0; i < els.getLength(); i++) {\n+            Element el = (Element) els.item(i);\n+            if (\"true\".equals(el.getAttribute(\"draft\"))) {\n+                continue;\n+            }\n+            String dayStr = el.getAttribute(\"day\");\n+            Integer dow = convertDOW(dayStr);\n+            String territoriesStr = el.getAttribute(\"territories\");\n+            StringTokenizer tkn = new StringTokenizer(territoriesStr);\n+            while (tkn.hasMoreTokens()) {\n+                String territory = tkn.nextToken();\n+                firstDOWMap.put(territory, dow);\n+            }\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Parses the weekendStart elements.\n+     *\n+     * @param rootEl  the root element\n+     */\n+    private void parseWeekendStart(Element rootEl) {\n+        Element weekDataEl = (Element) rootEl.getElementsByTagName(\"weekData\").item(0);\n+        NodeList els = weekDataEl.getElementsByTagName(\"weekendStart\");\n+        for (int i = 0; i < els.getLength(); i++) {\n+            Element el = (Element) els.item(i);\n+            if (\"true\".equals(el.getAttribute(\"draft\"))) {\n+                continue;\n+            }\n+            String dayStr = el.getAttribute(\"day\");\n+            Integer dow = convertDOW(dayStr);\n+            String territoriesStr = el.getAttribute(\"territories\");\n+            StringTokenizer tkn = new StringTokenizer(territoriesStr);\n+            while (tkn.hasMoreTokens()) {\n+                String territory = tkn.nextToken();\n+                weekendStartMap.put(territory, dow);\n+            }\n+        }\n+        // fix CLDR\n+        weekendStartMap.put(\"AF\", new Integer(4));\n+        weekendStartMap.put(\"IR\", new Integer(4));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Parses the weekendEnd elements.\n+     *\n+     * @param rootEl  the root element\n+     */\n+    private void parseWeekendEnd(Element rootEl) {\n+        Element weekDataEl = (Element) rootEl.getElementsByTagName(\"weekData\").item(0);\n+        NodeList els = weekDataEl.getElementsByTagName(\"weekendEnd\");\n+        for (int i = 0; i < els.getLength(); i++) {\n+            Element el = (Element) els.item(i);\n+            if (\"true\".equals(el.getAttribute(\"draft\"))) {\n+                continue;\n+            }\n+            String dayStr = el.getAttribute(\"day\");\n+            Integer dow = convertDOW(dayStr);\n+            String territoriesStr = el.getAttribute(\"territories\");\n+            StringTokenizer tkn = new StringTokenizer(territoriesStr);\n+            while (tkn.hasMoreTokens()) {\n+                String territory = tkn.nextToken();\n+                weekendEndMap.put(territory, dow);\n+            }\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Parses the zoneFormatting element.\n+     *\n+     * @param rootEl  the root element\n+     */\n+    private void parseZoneFormatting(Element rootEl) {\n+        Element weekDataEl = (Element) rootEl.getElementsByTagName(\"zoneFormatting\").item(0);\n+        NodeList els = weekDataEl.getElementsByTagName(\"zoneItem\");\n+        for (int i = 0; i < els.getLength(); i++) {\n+            Element el = (Element) els.item(i);\n+            if (\"true\".equals(el.getAttribute(\"draft\"))) {\n+                continue;\n+            }\n+            String zoneStr = el.getAttribute(\"type\");\n+            String territory = el.getAttribute(\"territory\");\n+            List list = (List) zoneMap.get(territory);\n+            if (list == null) {\n+                list = new ArrayList();\n+                zoneMap.put(territory, list);\n+            }\n+            list.add(zoneStr);\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Converts a day string to a day of week value.\n+     *\n+     * @param dayStr  the day string, such as 'sat'\n+     * @return the dow\n+     */\n+    private Integer convertDOW(String dayStr) {\n+        Integer dowValue = (Integer) CLDR_DAYS.get(dayStr);\n+        if (dowValue == null) {\n+            throw new IllegalStateException(\"Unknown day of week: \" + dayStr);\n+        }\n+        return dowValue;\n+    }\n+\n+    /** The CLDR day of week values. */\n+    private static final Map CLDR_DAYS = new HashMap();\n+    static {\n+        CLDR_DAYS.put(\"mon\", new Integer(1));\n+        CLDR_DAYS.put(\"tue\", new Integer(2));\n+        CLDR_DAYS.put(\"wed\", new Integer(3));\n+        CLDR_DAYS.put(\"thu\", new Integer(4));\n+        CLDR_DAYS.put(\"fri\", new Integer(5));\n+        CLDR_DAYS.put(\"sat\", new Integer(6));\n+        CLDR_DAYS.put(\"sun\", new Integer(7));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Picks the primary zone\n+     * @param zones  the list of zones\n+     */\n+    private void pickPrimaryZone(String territory, List zones) {\n+        String primary = (String) PRIMARY_ZONES.get(territory);\n+        if (primary == null) {\n+            throw new IllegalStateException(\"Unknown primary zone for territory: \" + territory + \": \" + zones);\n+        }\n+        if (zones.contains(primary) == false) {\n+            throw new IllegalStateException(\"Invalid primary zone for territory: \" + territory + \": \" + primary);\n+        }\n+        zones.remove(primary);\n+        zones.add(0, primary);\n+    }\n+\n+    /** The primary zone selections. */\n+    private static final Map PRIMARY_ZONES = new HashMap();\n+    static {\n+        PRIMARY_ZONES.put(\"US\", \"America/New_York\");\n+        PRIMARY_ZONES.put(\"MN\", \"Asia/Ulaanbaatar\");\n+        PRIMARY_ZONES.put(\"CD\", \"Africa/Kinshasa\");\n+        PRIMARY_ZONES.put(\"EC\", \"America/Guayaquil\");\n+        PRIMARY_ZONES.put(\"KZ\", \"Asia/Almaty\");\n+        PRIMARY_ZONES.put(\"GL\", \"America/Godthab\");\n+        PRIMARY_ZONES.put(\"CN\", \"Asia/Shanghai\");\n+        PRIMARY_ZONES.put(\"UA\", \"Europe/Kiev\");\n+        PRIMARY_ZONES.put(\"CL\", \"America/Santiago\");\n+        PRIMARY_ZONES.put(\"ID\", \"Asia/Jakarta\");\n+        PRIMARY_ZONES.put(\"PT\", \"Europe/Lisbon\");\n+        PRIMARY_ZONES.put(\"PF\", \"Pacific/Tahiti\");\n+        PRIMARY_ZONES.put(\"SJ\", \"Arctic/Longyearbyen\");\n+        PRIMARY_ZONES.put(\"KI\", \"Pacific/Tarawa\");\n+        PRIMARY_ZONES.put(\"AQ\", \"Antarctica/McMurdo\");\n+        PRIMARY_ZONES.put(\"AU\", \"Australia/Sydney\");\n+        PRIMARY_ZONES.put(\"MH\", \"Pacific/Majuro\");\n+        PRIMARY_ZONES.put(\"UZ\", \"Asia/Tashkent\");\n+        PRIMARY_ZONES.put(\"RU\", \"Europe/Moscow\");\n+        PRIMARY_ZONES.put(\"MY\", \"Asia/Kuala_Lumpur\");\n+        PRIMARY_ZONES.put(\"MX\", \"America/Mexico_City\");\n+        PRIMARY_ZONES.put(\"BR\", \"America/Sao_Paulo\");\n+        PRIMARY_ZONES.put(\"ES\", \"Europe/Madrid\");\n+        PRIMARY_ZONES.put(\"UM\", \"Pacific/Midway\");\n+        PRIMARY_ZONES.put(\"CA\", \"America/Toronto\");\n+        PRIMARY_ZONES.put(\"FM\", \"Pacific/Ponape\");\n+        PRIMARY_ZONES.put(\"AR\", \"America/Buenos_Aires\");\n+        PRIMARY_ZONES.put(\"NZ\", \"Pacific/Auckland\");\n+    }\n+\n+}", "timestamp": 1156197072, "metainfo": ""}