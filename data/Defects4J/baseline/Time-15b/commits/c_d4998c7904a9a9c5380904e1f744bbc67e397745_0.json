{"sha": "d4998c7904a9a9c5380904e1f744bbc67e397745", "log": "Fix test time zone   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n-import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.GJChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n     private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     private static final ISOChronology ISO_UTC = ISOChronology.getInstanceUTC();\n-    private static final JulianChronology JULIAN = JulianChronology.getInstance();\n+    private static final JulianChronology JULIAN_LONDON = JulianChronology.getInstance(LONDON);\n     private static final JulianChronology JULIAN_PARIS = JulianChronology.getInstance(PARIS);\n     private static final JulianChronology JULIAN_UTC = JulianChronology.getInstanceUTC();\n     private static final int OFFSET_LONDON = LONDON.getOffset(0L) / DateTimeConstants.MILLIS_PER_HOUR;\n \n     //-----------------------------------------------------------------------\n     public void testFactoryMillisOfDay_long_Chronology() throws Throwable {\n-        LocalTime test = LocalTime.fromMillisOfDay(TEST_TIME1, JULIAN);\n+        LocalTime test = LocalTime.fromMillisOfDay(TEST_TIME1, JULIAN_LONDON);\n         assertEquals(JULIAN_UTC, test.getChronology());\n         assertEquals(1, test.getHourOfDay());\n         assertEquals(2, test.getMinuteOfHour());\n \n     //-----------------------------------------------------------------------\n     public void testFactory_now_Chronology() throws Throwable {\n-        LocalTime test = LocalTime.now(JULIAN);\n+        LocalTime test = LocalTime.now(JULIAN_LONDON);\n         assertEquals(JULIAN_UTC, test.getChronology());\n         assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());\n         assertEquals(20, test.getMinuteOfHour());\n     }\n \n     public void testFactory_forInstant_long2_Chronology() throws Throwable {\n-        LocalTime test = LocalTime.forInstant(TEST_TIME2, JULIAN);\n+        LocalTime test = LocalTime.forInstant(TEST_TIME2, JULIAN_LONDON);\n         assertEquals(JULIAN_UTC, test.getChronology());\n         assertEquals(5 + OFFSET_LONDON, test.getHourOfDay());\n         assertEquals(6, test.getMinuteOfHour());\n     //-----------------------------------------------------------------------\n     public void testFactory_forInstant_Object1_Chronology() throws Throwable {\n         Date date = new Date(TEST_TIME1);\n-        LocalTime test = LocalTime.forInstant(date, JULIAN);\n+        LocalTime test = LocalTime.forInstant(date, JULIAN_LONDON);\n         assertEquals(JULIAN_UTC, test.getChronology());\n         assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());\n         assertEquals(2, test.getMinuteOfHour());\n     }\n \n     public void testFactory_forInstant_nullObject_Chronology() throws Throwable {\n-        LocalTime test = LocalTime.forInstant((Object) null, JULIAN);\n+        LocalTime test = LocalTime.forInstant((Object) null, JULIAN_LONDON);\n         assertEquals(JULIAN_UTC, test.getChronology());\n         assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());\n         assertEquals(20, test.getMinuteOfHour());\n     }\n \n     public void testConstructor_int_int_int_int_Chronology() throws Throwable {\n-        LocalTime test = new LocalTime(10, 20, 30, 40, JULIAN);\n+        LocalTime test = new LocalTime(10, 20, 30, 40, JULIAN_LONDON);\n         assertEquals(JULIAN_UTC, test.getChronology());\n         assertEquals(10, test.getHourOfDay());\n         assertEquals(20, test.getMinuteOfHour());\n         assertEquals(30, test.getSecondOfMinute());\n         assertEquals(40, test.getMillisOfSecond());\n         try {\n-            new LocalTime(-1, 20, 30, 40, JULIAN);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            new LocalTime(24, 20, 30, 40, JULIAN);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            new LocalTime(10, -1, 30, 40, JULIAN);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            new LocalTime(10, 60, 30, 40, JULIAN);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            new LocalTime(10, 20, -1, 40, JULIAN);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            new LocalTime(10, 20, 60, 40, JULIAN);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            new LocalTime(10, 20, 30, -1, JULIAN);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            new LocalTime(10, 20, 30, 1000, JULIAN);\n+            new LocalTime(-1, 20, 30, 40, JULIAN_LONDON);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(24, 20, 30, 40, JULIAN_LONDON);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, -1, 30, 40, JULIAN_LONDON);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, 60, 30, 40, JULIAN_LONDON);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, 20, -1, 40, JULIAN_LONDON);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, 20, 60, 40, JULIAN_LONDON);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, 20, 30, -1, JULIAN_LONDON);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, 20, 30, 1000, JULIAN_LONDON);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }", "timestamp": 1139871426, "metainfo": ""}