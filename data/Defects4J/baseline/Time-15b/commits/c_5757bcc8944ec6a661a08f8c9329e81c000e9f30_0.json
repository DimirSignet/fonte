{"sha": "5757bcc8944ec6a661a08f8c9329e81c000e9f30", "log": "Fix date time zone hashcode from FindBugs   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java\n+++ b/JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java\n         }\n         return false;\n     }\n+\n+    public int hashCode() {\n+        return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;\n+    }\n+\n }\n--- a/JodaTime/src/test/org/joda/time/tz/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/tz/TestAll.java\n         suite.addTest(TestUTCProvider.suite());\n         suite.addTest(TestBuilder.suite());\n         suite.addTest(TestCompiler.suite());\n+        suite.addTest(TestFixedDateTimeZone.suite());\n         return suite;\n     }\n \n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.tz;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTimeZone;\n+\n+/**\n+ * Test cases for FixedDateTimeZone.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestFixedDateTimeZone extends TestCase {\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestFixedDateTimeZone.class);\n+    }\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+\n+    public TestFixedDateTimeZone(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+    }\n+\n+    public void testEquals() throws Exception {\n+        FixedDateTimeZone zone1 = new FixedDateTimeZone(\"A\", \"B\", 1, 5);\n+        FixedDateTimeZone zone1b = new FixedDateTimeZone(\"A\", \"B\", 1, 5);\n+        FixedDateTimeZone zone2 = new FixedDateTimeZone(\"A\", \"C\", 1, 5);\n+        FixedDateTimeZone zone3 = new FixedDateTimeZone(\"A\", \"B\", 2, 5);\n+        FixedDateTimeZone zone4 = new FixedDateTimeZone(\"A\", \"B\", 1, 6);\n+        \n+        assertEquals(true, zone1.equals(zone1));\n+        assertEquals(true, zone1.equals(zone1b));\n+        assertEquals(true, zone1.equals(zone2));  // second arg ignored\n+        assertEquals(false, zone1.equals(zone3));\n+        assertEquals(false, zone1.equals(zone4));\n+    }\n+\n+    public void testHashCode() throws Exception {\n+        FixedDateTimeZone zone1 = new FixedDateTimeZone(\"A\", \"B\", 1, 5);\n+        FixedDateTimeZone zone1b = new FixedDateTimeZone(\"A\", \"B\", 1, 5);\n+        FixedDateTimeZone zone2 = new FixedDateTimeZone(\"A\", \"C\", 1, 5);\n+        FixedDateTimeZone zone3 = new FixedDateTimeZone(\"A\", \"B\", 2, 5);\n+        FixedDateTimeZone zone4 = new FixedDateTimeZone(\"A\", \"B\", 1, 6);\n+        \n+        assertEquals(true, zone1.hashCode() == zone1.hashCode());\n+        assertEquals(true, zone1.hashCode() == zone1b.hashCode());\n+        assertEquals(true, zone1.hashCode() == zone2.hashCode());  // second arg ignored\n+        assertEquals(false, zone1.hashCode() == zone3.hashCode());\n+        assertEquals(false, zone1.hashCode() == zone4.hashCode());\n+    }\n+\n+}", "timestamp": 1135297072, "metainfo": ""}