{"sha": "001f56b4c4e8c10598fd5968c316731cd9910b2f", "log": "Added more @since tags   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/Period.java\n+++ b/JodaTime/src/java/org/joda/time/Period.java\n      * @param start  the start of the period, must not be null\n      * @param end  the end of the period, must not be null\n      * @throws IllegalArgumentException if the partials are null or invalid\n+     * @since 1.1\n      */\n     public Period(ReadablePartial start, ReadablePartial end) {\n         super(start, end, null);\n      * @param end  the end of the period, must not be null\n      * @param type  which set of fields this period supports, null means standard\n      * @throws IllegalArgumentException if the partials are null or invalid\n+     * @since 1.1\n      */\n     public Period(ReadablePartial start, ReadablePartial end, PeriodType type) {\n         super(start, end, type);\n--- a/JodaTime/src/java/org/joda/time/PeriodType.java\n+++ b/JodaTime/src/java/org/joda/time/PeriodType.java\n      * </ul>\n      *\n      * @return the period type\n+     * @since 1.1\n      */\n     public static PeriodType yearMonthDay() {\n         PeriodType type = cYMD;\n      * </ul>\n      *\n      * @return the period type\n+     * @since 1.1\n      */\n     public static PeriodType yearWeekDay() {\n         PeriodType type = cYWD;\n      * </ul>\n      *\n      * @return the period type\n+     * @since 1.1\n      */\n     public static PeriodType yearDay() {\n         PeriodType type = cYD;\n--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java\n+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java\n      * @param time  a time to check against, null means now\n      * @return true if this time is after the time passed in\n      * @throws IllegalArgumentException if the specified TimeOfDay is null\n+     * @since 1.1\n      */\n     public boolean isAfter(TimeOfDay time) {\n         if (time == null) {\n      * @param time  a time to check against, null means now\n      * @return true if this time is before the time passed in\n      * @throws IllegalArgumentException if the specified TimeOfDay is null\n+     * @since 1.1\n      */\n     public boolean isBefore(TimeOfDay time) {\n         if (time == null) {\n      * @param time  a time to check against, null means now\n      * @return true if this time is the same as the time passed in\n      * @throws IllegalArgumentException if the specified TimeOfDay is null\n+     * @since 1.1\n      */\n     public boolean isEqual(TimeOfDay time) {\n         if (time == null) {\n--- a/JodaTime/src/java/org/joda/time/YearMonthDay.java\n+++ b/JodaTime/src/java/org/joda/time/YearMonthDay.java\n      * @param date  an date to check against, null means now\n      * @return true if this date is after the date passed in\n      * @throws IllegalArgumentException if the specified YearMonthDay is null\n+     * @since 1.1\n      */\n     public boolean isAfter(YearMonthDay date) {\n         if (date == null) {\n      * @param date  an date to check against, null means now\n      * @return true if this date is before the date passed in\n      * @throws IllegalArgumentException if the specified YearMonthDay is null\n+     * @since 1.1\n      */\n     public boolean isBefore(YearMonthDay date) {\n         if (date == null) {\n      * @param date  an date to check against, null means now\n      * @return true if this date is the same as the date passed in\n      * @throws IllegalArgumentException if the specified YearMonthDay is null\n+     * @since 1.1\n      */\n     public boolean isEqual(YearMonthDay date) {\n         if (date == null) {\n--- a/JodaTime/src/java/org/joda/time/base/BasePartial.java\n+++ b/JodaTime/src/java/org/joda/time/base/BasePartial.java\n      * @throws ClassCastException if the partial is the wrong class\n      *  or if it has field types that don't match\n      * @throws NullPointerException if the partial is null\n+     * @since 1.1\n      */\n     public int compareTo(Object partial) {\n         if (this == partial) {\n--- a/JodaTime/src/java/org/joda/time/base/BasePeriod.java\n+++ b/JodaTime/src/java/org/joda/time/base/BasePeriod.java\n      * @param end  the end of the period, must not be null\n      * @param type  which set of fields this period supports, null means standard\n      * @throws IllegalArgumentException if the partials are null or invalid\n+     * @since 1.1\n      */\n     protected BasePeriod(ReadablePartial start, ReadablePartial end, PeriodType type) {\n         super();\n--- a/JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java\n      * @param chrono  the chronology to use\n      * @param locale  the locale to use\n      * @param pivotYear  the pivot year to use when parsing two-digit years\n+     * @since 1.1\n      */\n     public DateTimeParserBucket(long instantLocal, Chronology chrono, Locale locale, Integer pivotYear) {\n         super();", "timestamp": 1114009460, "metainfo": ""}