{"sha": "5bc953f3cf3629a86991eac7703608603d303b7d", "log": "Optimise when converting local milliseconds to the same zone  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateTimeZone.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeZone.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2006 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         if (newZone == null) {\n             newZone = DateTimeZone.getDefault();\n         }\n+        if (newZone == this) {\n+            return oldInstant;\n+        }\n         long instantLocal = oldInstant + getOffset(oldInstant);\n         return instantLocal - newZone.getOffsetFromLocal(instantLocal);\n     }\n--- a/JodaTime/src/test/org/joda/time/TestDateTimeZone.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTimeZone.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2006 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         long millisLondon = TEST_TIME_SUMMER;\n         long millisParis = TEST_TIME_SUMMER - 1L * DateTimeConstants.MILLIS_PER_HOUR;\n         \n+        assertEquals(millisLondon, LONDON.getMillisKeepLocal(LONDON, millisLondon));\n+        assertEquals(millisParis, LONDON.getMillisKeepLocal(LONDON, millisParis));\n+        assertEquals(millisLondon, PARIS.getMillisKeepLocal(PARIS, millisLondon));\n+        assertEquals(millisParis, PARIS.getMillisKeepLocal(PARIS, millisParis));\n+        \n         assertEquals(millisParis, LONDON.getMillisKeepLocal(PARIS, millisLondon));\n         assertEquals(millisLondon, PARIS.getMillisKeepLocal(LONDON, millisParis));\n         ", "timestamp": 1144492923, "metainfo": ""}