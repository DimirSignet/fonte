{"sha": "f52ef7ef6b6275f64d0681373e413d8fa7984c4f", "log": "Duration.toString Fixed to work correctly for negative values  ", "commit": "\n--- a/JodaTime/src/main/java/org/joda/time/base/AbstractDuration.java\n+++ b/JodaTime/src/main/java/org/joda/time/base/AbstractDuration.java\n         long millis = getMillis();\n         StringBuffer buf = new StringBuffer();\n         buf.append(\"PT\");\n-        FormatUtils.appendUnpaddedInteger(buf, millis / 1000);\n-        long part = Math.abs(millis % 1000);\n-        if (part > 0) {\n-            buf.append('.');\n-            FormatUtils.appendPaddedInteger(buf, part, 3);\n+        boolean negative = (millis < 0);\n+        FormatUtils.appendUnpaddedInteger(buf, millis);\n+        while (buf.length() < (negative ? 7 : 6)) {\n+            buf.insert(negative ? 3 : 2, \"0\");\n+        }\n+        if ((millis / 1000) * 1000 == millis) {\n+            buf.setLength(buf.length() - 3);\n+        } else {\n+            buf.insert(buf.length() - 3, \".\");\n         }\n         buf.append('S');\n         return buf.toString();\n--- a/JodaTime/src/test/java/org/joda/time/TestDuration_Basics.java\n+++ b/JodaTime/src/test/java/org/joda/time/TestDuration_Basics.java\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n         Duration test = new Duration(length);\n         assertEquals(\"PT\" + (length / 1000) + \".\" + (length % 1000) + \"S\", test.toString());\n         \n-        test = new Duration(0L);\n-        assertEquals(\"PT0S\", test.toString());\n-        \n-        test = new Duration(12345L);\n-        assertEquals(\"PT12.345S\", test.toString());\n-        \n-        test = new Duration(-12345L);\n-        assertEquals(\"PT-12.345S\", test.toString());\n+        assertEquals(\"PT0S\", new Duration(0L).toString());\n+        assertEquals(\"PT10S\", new Duration(10000L).toString());\n+        assertEquals(\"PT1S\", new Duration(1000L).toString());\n+        assertEquals(\"PT12.345S\", new Duration(12345L).toString());\n+        assertEquals(\"PT-12.345S\", new Duration(-12345L).toString());\n+        assertEquals(\"PT-1.123S\", new Duration(-1123L).toString());\n+        assertEquals(\"PT-0.123S\", new Duration(-123L).toString());\n+        assertEquals(\"PT-0.012S\", new Duration(-12L).toString());\n+        assertEquals(\"PT-0.001S\", new Duration(-1L).toString());\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1284422164, "metainfo": ""}