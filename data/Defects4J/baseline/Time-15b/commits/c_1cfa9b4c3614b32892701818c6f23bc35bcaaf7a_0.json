{"sha": "1cfa9b4c3614b32892701818c6f23bc35bcaaf7a", "log": "Add LocalDate toDateTimeAtStartOfDay(), toDateTimeAtStartOfDay(DateTimeZone)  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/LocalDate.java\n+++ b/JodaTime/src/java/org/joda/time/LocalDate.java\n         return super.compareTo(partial);\n     }\n \n-    // -----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Converts this LocalDate to a full datetime at the earliest valid time\n+     * for the date using the default time zone.\n+     * <p>\n+     * The time will normally be midnight, as that is the earliest time on\n+     * any given day. However, in some time zones when Daylight Savings Time\n+     * starts, there is no midnight because time jumps from 11:59 to 01:00.\n+     * This method handles that situation by returning 01:00 on that date.\n+     * <p>\n+     * This instance is immutable and unaffected by this method call.\n+     * \n+     * @return this date as a datetime at the start of the day\n+     */\n+    public DateTime toDateTimeAtStartOfDay() {\n+        return toDateTimeAtStartOfDay(null);\n+    }\n+\n+    /**\n+     * Converts this LocalDate to a full datetime at the earliest valid time\n+     * for the date using the specified time zone.\n+     * <p>\n+     * The time will normally be midnight, as that is the earliest time on\n+     * any given day. However, in some time zones when Daylight Savings Time\n+     * starts, there is no midnight because time jumps from 11:59 to 01:00.\n+     * This method handles that situation by returning 01:00 on that date.\n+     * <p>\n+     * This method uses the chronology from this instance plus the time zone\n+     * specified.\n+     * <p>\n+     * This instance is immutable and unaffected by this method call.\n+     *\n+     * @param zone  the zone to use, null means default zone\n+     * @return this date as a datetime at the start of the day\n+     */\n+    public DateTime toDateTimeAtStartOfDay(DateTimeZone zone) {\n+        zone = DateTimeUtils.getZone(zone);\n+        Chronology chrono = getChronology().withZone(zone);\n+        long localMillis = getLocalMillis() + 6L * DateTimeConstants.MILLIS_PER_HOUR;\n+        long instant = zone.convertLocalToUTC(localMillis, false);\n+        instant = chrono.dayOfMonth().roundFloor(instant);\n+        return new DateTime(instant, chrono);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Converts this LocalDate to a full datetime at midnight using the default\n      * time zone.\n      * This instance is immutable and unaffected by this method call.\n      * \n      * @return this date as a datetime at midnight\n+     * @deprecated Use {@link #toDateTimeAtStartOfDay()} which won't throw an exception\n      */\n     public DateTime toDateTimeAtMidnight() {\n         return toDateTimeAtMidnight(null);\n      *\n      * @param zone  the zone to use, null means default zone\n      * @return this date as a datetime at midnight\n+     * @deprecated Use {@link #toDateTimeAtStartOfDay(DateTimeZone)} which won't throw an exception\n      */\n     public DateTime toDateTimeAtMidnight(DateTimeZone zone) {\n         zone = DateTimeUtils.getZone(zone);\n     /**\n      * Converts this LocalDate to a DateMidnight in the default time zone.\n      * <p>\n+     * As from v1.5, you are recommended to avoid DateMidnight and use\n+     * {@link #toDateTimeAtStartOfDay()} instead because of the exception\n+     * detailed below.\n+     * <p>\n      * This method will throw an exception if the default time zone switches\n      * to Daylight Savings Time at midnight and this LocalDate represents\n      * that switchover date. The problem is that there is no such time as\n \n     /**\n      * Converts this LocalDate to a DateMidnight.\n+     * <p>\n+     * As from v1.5, you are recommended to avoid DateMidnight and use\n+     * {@link #toDateTimeAtStartOfDay()} instead because of the exception\n+     * detailed below.\n      * <p>\n      * This method will throw an exception if the time zone switches\n      * to Daylight Savings Time at midnight and this LocalDate represents\n--- a/JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java\n     private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);\n     private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);\n     private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n-    \n+\n+    /** Mock zone simulating Asia/Gaza cutover at midnight 2007-04-01 */\n+    private static long CUTOVER_GAZA = 1175378400000L;\n+    private static int OFFSET_GAZA = 7200000;  // +02:00\n+    private static final DateTimeZone MOCK_GAZA = new MockZone(CUTOVER_GAZA, OFFSET_GAZA);\n+\n     private long TEST_TIME_NOW =\n             (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n             \n     }\n \n     //-----------------------------------------------------------------------\n+    public void testToDateTimeAtStartOfDay() {\n+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);\n+        \n+        DateTime test = base.toDateTimeAtStartOfDay();\n+        check(base, 2005, 6, 9);\n+        assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test);\n+    }\n+\n+    public void testToDateTimeAtStartOfDay_avoidDST() {\n+        LocalDate base = new LocalDate(2007, 4, 1);\n+        \n+        DateTimeZone.setDefault(MOCK_GAZA);\n+        DateTime test = base.toDateTimeAtStartOfDay();\n+        check(base, 2007, 4, 1);\n+        assertEquals(new DateTime(2007, 4, 1, 1, 0, 0, 0, MOCK_GAZA), test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateTimeAtStartOfDay_Zone() {\n+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);\n+        \n+        DateTime test = base.toDateTimeAtStartOfDay(TOKYO);\n+        check(base, 2005, 6, 9);\n+        assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_TOKYO), test);\n+    }\n+\n+    public void testToDateTimeAtStartOfDay_Zone_avoidDST() {\n+        LocalDate base = new LocalDate(2007, 4, 1);\n+        \n+        DateTime test = base.toDateTimeAtStartOfDay(MOCK_GAZA);\n+        check(base, 2007, 4, 1);\n+        assertEquals(new DateTime(2007, 4, 1, 1, 0, 0, 0, MOCK_GAZA), test);\n+    }\n+\n+    public void testToDateTimeAtStartOfDay_nullZone() {\n+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);\n+        \n+        DateTime test = base.toDateTimeAtStartOfDay((DateTimeZone) null);\n+        check(base, 2005, 6, 9);\n+        assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testToDateTimeAtMidnight() {\n         LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);\n         ", "timestamp": 1187959624, "metainfo": ""}