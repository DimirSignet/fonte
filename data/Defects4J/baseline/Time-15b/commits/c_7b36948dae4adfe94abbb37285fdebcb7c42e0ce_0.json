{"sha": "7b36948dae4adfe94abbb37285fdebcb7c42e0ce", "log": "First version   ", "commit": "\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/TestInterval_Constructors.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import org.joda.time.chrono.ISOChronology;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * This class is a JUnit test for Interval.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestInterval_Constructors extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestInterval_Constructors.class);\n+    }\n+\n+    public TestInterval_Constructors(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_long1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Interval test = new Interval(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RI_RI1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Interval test = new Interval(dt1, dt2);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RI2() throws Throwable {\n+        Instant dt1 = new Instant(new DateTime(2004, 6, 9, 0, 0, 0, 0));\n+        Instant dt2 = new Instant(new DateTime(2005, 7, 10, 1, 1, 1, 1));\n+        Interval test = new Interval(dt1, dt2);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+        assertSame(dt1, test.getStartInstant());\n+        assertSame(dt2, test.getEndInstant());\n+    }\n+\n+    public void testConstructor_RI_RI3() throws Throwable {\n+        Interval test = new Interval((ReadableInstant) null, (ReadableInstant) null);\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RI4() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        Interval test = new Interval(dt1, (ReadableInstant) null);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RI5() throws Throwable {\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Interval test = new Interval((ReadableInstant) null, dt2);\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RI_RD1() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Duration dur = new Duration(0, 6, 0, 0, 1, 0, 0, 0);\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().monthOfYear().add(result, 6);\n+        result = ISOChronology.getInstance().hourOfDay().add(result, 1);\n+        \n+        Interval test = new Interval(dt, dur);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(result, test.getEndMillis());\n+        assertEquals(false, dur == test.getDuration());\n+    }\n+\n+    public void testConstructor_RI_RD2() throws Throwable {\n+        Instant dt = new Instant(new DateTime(TEST_TIME_NOW));\n+        Duration dur = new Duration(0, 6, 0, 0, 1, 0, 0, 0);\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstanceUTC().monthOfYear().add(result, 6);\n+        result = ISOChronology.getInstanceUTC().hourOfDay().add(result, 1);\n+        \n+        Interval test = new Interval(dt, dur);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(result, test.getEndMillis());\n+        assertEquals(true, dt == test.getStartInstant());\n+        assertEquals(false, dur == test.getDuration());\n+    }\n+\n+    public void testConstructor_RI_RD3() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Duration dur = new Duration(1 * DateTimeConstants.MILLIS_PER_HOUR + 23L);\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().hourOfDay().add(result, 1);\n+        result = ISOChronology.getInstance().millisOfSecond().add(result, 23);\n+        \n+        Interval test = new Interval(dt, dur);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(result, test.getEndMillis());\n+        assertEquals(true, dur == test.getDuration());\n+    }\n+\n+    public void testConstructor_RI_RD4() throws Throwable {\n+        Interval test = new Interval((ReadableInstant) null, (ReadableDuration) null);\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RD5() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Interval test = new Interval(dt, (ReadableDuration) null);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RD6() throws Throwable {\n+        Duration dur = new Duration(0, 6, 0, 0, 1, 0, 0, 0);\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstanceUTC().monthOfYear().add(result, 6);\n+        result = ISOChronology.getInstanceUTC().hourOfDay().add(result, 1);\n+        \n+        Interval test = new Interval((ReadableInstant) null, dur);\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(result, test.getEndMillis());\n+    }\n+\n+}", "timestamp": 1091389683, "metainfo": ""}