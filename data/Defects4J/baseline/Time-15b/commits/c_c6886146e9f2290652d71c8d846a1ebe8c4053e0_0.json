{"sha": "c6886146e9f2290652d71c8d846a1ebe8c4053e0", "log": "More tests   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java\n         DateTimeZone.setDefault(zone);\n         Locale.setDefault(locale);\n         zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetEra() {\n+        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().era(), test.era().getField());\n+        assertEquals(\"era\", test.era().getName());\n+        assertEquals(\"Property[era]\", test.era().toString());\n+        assertSame(test, test.era().getInstant());\n+        assertSame(test, test.era().getDateTime());\n+        assertEquals(1, test.era().get());\n+        assertEquals(\"AD\", test.era().getAsText());\n+        assertEquals(\"ap. J.-C.\", test.era().getAsText(Locale.FRENCH));\n+        assertEquals(\"AD\", test.era().getAsShortText());\n+        assertEquals(\"ap. J.-C.\", test.era().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().eras(), test.era().getDurationField());\n+        assertEquals(null, test.era().getRangeDurationField());\n+        assertEquals(2, test.era().getMaximumTextLength(null));\n+        assertEquals(9, test.era().getMaximumTextLength(Locale.FRENCH));\n+        assertEquals(2, test.era().getMaximumShortTextLength(null));\n+        assertEquals(9, test.era().getMaximumShortTextLength(Locale.FRENCH));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetYearOfEra() {\n+        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().yearOfEra(), test.yearOfEra().getField());\n+        assertEquals(\"yearOfEra\", test.yearOfEra().getName());\n+        assertEquals(\"Property[yearOfEra]\", test.yearOfEra().toString());\n+        assertSame(test, test.yearOfEra().getInstant());\n+        assertSame(test, test.yearOfEra().getDateTime());\n+        assertEquals(1972, test.yearOfEra().get());\n+        assertEquals(\"1972\", test.yearOfEra().getAsText());\n+        assertEquals(\"1972\", test.yearOfEra().getAsText(Locale.FRENCH));\n+        assertEquals(\"1972\", test.yearOfEra().getAsShortText());\n+        assertEquals(\"1972\", test.yearOfEra().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().years(), test.yearOfEra().getDurationField());\n+        assertEquals(null, test.yearOfEra().getRangeDurationField());\n+        assertEquals(9, test.yearOfEra().getMaximumTextLength(null));\n+        assertEquals(9, test.yearOfEra().getMaximumShortTextLength(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetCenturyOfEra() {\n+        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().centuryOfEra(), test.centuryOfEra().getField());\n+        assertEquals(\"centuryOfEra\", test.centuryOfEra().getName());\n+        assertEquals(\"Property[centuryOfEra]\", test.centuryOfEra().toString());\n+        assertSame(test, test.centuryOfEra().getInstant());\n+        assertSame(test, test.centuryOfEra().getDateTime());\n+        assertEquals(19, test.centuryOfEra().get());\n+        assertEquals(\"19\", test.centuryOfEra().getAsText());\n+        assertEquals(\"19\", test.centuryOfEra().getAsText(Locale.FRENCH));\n+        assertEquals(\"19\", test.centuryOfEra().getAsShortText());\n+        assertEquals(\"19\", test.centuryOfEra().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().centuries(), test.centuryOfEra().getDurationField());\n+        assertEquals(null, test.centuryOfEra().getRangeDurationField());\n+        assertEquals(7, test.centuryOfEra().getMaximumTextLength(null));\n+        assertEquals(7, test.centuryOfEra().getMaximumShortTextLength(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetYearOfCentury() {\n+        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().yearOfCentury(), test.yearOfCentury().getField());\n+        assertEquals(\"yearOfCentury\", test.yearOfCentury().getName());\n+        assertEquals(\"Property[yearOfCentury]\", test.yearOfCentury().toString());\n+        assertSame(test, test.yearOfCentury().getInstant());\n+        assertSame(test, test.yearOfCentury().getDateTime());\n+        assertEquals(72, test.yearOfCentury().get());\n+        assertEquals(\"72\", test.yearOfCentury().getAsText());\n+        assertEquals(\"72\", test.yearOfCentury().getAsText(Locale.FRENCH));\n+        assertEquals(\"72\", test.yearOfCentury().getAsShortText());\n+        assertEquals(\"72\", test.yearOfCentury().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().years(), test.yearOfCentury().getDurationField());\n+        assertEquals(test.getChronology().centuries(), test.yearOfCentury().getRangeDurationField());\n+        assertEquals(2, test.yearOfCentury().getMaximumTextLength(null));\n+        assertEquals(2, test.yearOfCentury().getMaximumShortTextLength(null));\n     }\n \n     //-----------------------------------------------------------------------\n         } catch (IllegalArgumentException ex) {}\n     }\n \n-//    //-----------------------------------------------------------------------\n-//    public void testPropertyGetMonth() {\n-//        DateTime test = new DateTime(1972, 6, 9);\n-//        assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField());\n-//        assertEquals(\"monthOfYear\", test.monthOfYear().getName());\n-//        assertEquals(\"Property[monthOfYear]\", test.monthOfYear().toString());\n-//        assertSame(test, test.monthOfYear().getReadablePartial());\n-//        assertSame(test, test.monthOfYear().getDateTime());\n-//        assertEquals(6, test.monthOfYear().get());\n-//        assertEquals(\"June\", test.monthOfYear().getAsText());\n-//        assertEquals(\"juin\", test.monthOfYear().getAsText(Locale.FRENCH));\n-//        assertEquals(\"Jun\", test.monthOfYear().getAsShortText());\n-//        assertEquals(\"juin\", test.monthOfYear().getAsShortText(Locale.FRENCH));\n-//        assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField());\n-//        assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField());\n-//        assertEquals(9, test.monthOfYear().getMaximumTextLength(null));\n-//        assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null));\n-//        test = new DateTime(1972, 7, 9);\n-//        assertEquals(\"juillet\", test.monthOfYear().getAsText(Locale.FRENCH));\n-//        assertEquals(\"juil.\", test.monthOfYear().getAsShortText(Locale.FRENCH));\n-//    }\n-//\n-//    public void testPropertyGetMaxMinValuesMonth() {\n-//        DateTime test = new DateTime(1972, 6, 9);\n-//        assertEquals(1, test.monthOfYear().getMinimumValue());\n-//        assertEquals(1, test.monthOfYear().getMinimumValueOverall());\n-//        assertEquals(12, test.monthOfYear().getMaximumValue());\n-//        assertEquals(12, test.monthOfYear().getMaximumValueOverall());\n-//    }\n-//\n-//    public void testPropertyAddMonth() {\n-//        DateTime test = new DateTime(1972, 6, 9);\n-//        DateTime copy = test.monthOfYear().addCopy(6);\n-//        check(test, 1972, 6, 9);\n-//        check(copy, 1972, 12, 9);\n-//        \n-//        copy = test.monthOfYear().addCopy(7);\n-//        check(copy, 1973, 1, 9);\n-//        \n-//        copy = test.monthOfYear().addCopy(-5);\n-//        check(copy, 1972, 1, 9);\n-//        \n-//        copy = test.monthOfYear().addCopy(-6);\n-//        check(copy, 1971, 12, 9);\n-//        \n-//        test = new DateTime(1972, 1, 31);\n-//        copy = test.monthOfYear().addCopy(1);\n-//        check(copy, 1972, 2, 29);\n-//        \n-//        copy = test.monthOfYear().addCopy(2);\n-//        check(copy, 1972, 3, 31);\n-//        \n-//        copy = test.monthOfYear().addCopy(3);\n-//        check(copy, 1972, 4, 30);\n-//        \n-//        test = new DateTime(1971, 1, 31);\n-//        copy = test.monthOfYear().addCopy(1);\n-//        check(copy, 1971, 2, 28);\n-//    }\n-//\n-//    public void testPropertyAddInFieldMonth() {\n-//        DateTime test = new DateTime(1972, 6, 9);\n-//        DateTime copy = test.monthOfYear().addWrappedToCopy(4);\n-//        check(test, 1972, 6, 9);\n-//        check(copy, 1972, 10, 9);\n-//        \n-//        copy = test.monthOfYear().addWrappedToCopy(8);\n-//        check(copy, 1972, 2, 9);\n-//        \n-//        copy = test.monthOfYear().addWrappedToCopy(-8);\n-//        check(copy, 1972, 10, 9);\n-//        \n-//        test = new DateTime(1972, 1, 31);\n-//        copy = test.monthOfYear().addWrappedToCopy(1);\n-//        check(copy, 1972, 2, 29);\n-//        \n-//        copy = test.monthOfYear().addWrappedToCopy(2);\n-//        check(copy, 1972, 3, 31);\n-//        \n-//        copy = test.monthOfYear().addWrappedToCopy(3);\n-//        check(copy, 1972, 4, 30);\n-//        \n-//        test = new DateTime(1971, 1, 31);\n-//        copy = test.monthOfYear().addWrappedToCopy(1);\n-//        check(copy, 1971, 2, 28);\n-//    }\n-//\n-//    public void testPropertySetMonth() {\n-//        DateTime test = new DateTime(1972, 6, 9);\n-//        DateTime copy = test.monthOfYear().setCopy(12);\n-//        check(test, 1972, 6, 9);\n-//        check(copy, 1972, 12, 9);\n-//        \n-//        test = new DateTime(1972, 1, 31);\n-//        copy = test.monthOfYear().setCopy(2);\n-//        check(copy, 1972, 2, 29);\n-//        \n-//        try {\n-//            test.monthOfYear().setCopy(13);\n-//            fail();\n-//        } catch (IllegalArgumentException ex) {}\n-//        try {\n-//            test.monthOfYear().setCopy(0);\n-//            fail();\n-//        } catch (IllegalArgumentException ex) {}\n-//    }\n-//\n-//    public void testPropertySetTextMonth() {\n-//        DateTime test = new DateTime(1972, 6, 9);\n-//        DateTime copy = test.monthOfYear().setCopy(\"12\");\n-//        check(test, 1972, 6, 9);\n-//        check(copy, 1972, 12, 9);\n-//        \n-//        copy = test.monthOfYear().setCopy(\"December\");\n-//        check(test, 1972, 6, 9);\n-//        check(copy, 1972, 12, 9);\n-//        \n-//        copy = test.monthOfYear().setCopy(\"Dec\");\n-//        check(test, 1972, 6, 9);\n-//        check(copy, 1972, 12, 9);\n-//    }\n-//\n-//    public void testPropertyCompareToMonth() {\n-//        DateTime test1 = new DateTime(TEST_TIME1);\n-//        DateTime test2 = new DateTime(TEST_TIME2);\n-//        assertEquals(true, test1.monthOfYear().compareTo(test2) < 0);\n-//        assertEquals(true, test2.monthOfYear().compareTo(test1) > 0);\n-//        assertEquals(true, test1.monthOfYear().compareTo(test1) == 0);\n-//        try {\n-//            test1.monthOfYear().compareTo((ReadablePartial) null);\n-//            fail();\n-//        } catch (IllegalArgumentException ex) {}\n-//        \n-//        DateTime dt1 = new DateTime(TEST_TIME1);\n-//        DateTime dt2 = new DateTime(TEST_TIME2);\n-//        assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0);\n-//        assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0);\n-//        assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0);\n-//        try {\n-//            test1.monthOfYear().compareTo((ReadableInstant) null);\n-//            fail();\n-//        } catch (IllegalArgumentException ex) {}\n-//    }\n-//\n-//    //-----------------------------------------------------------------------\n-//    public void testPropertyGetDay() {\n-//        DateTime test = new DateTime(1972, 6, 9);\n-//        assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField());\n-//        assertEquals(\"dayOfMonth\", test.dayOfMonth().getName());\n-//        assertEquals(\"Property[dayOfMonth]\", test.dayOfMonth().toString());\n-//        assertSame(test, test.dayOfMonth().getReadablePartial());\n-//        assertSame(test, test.dayOfMonth().getDateTime());\n-//        assertEquals(9, test.dayOfMonth().get());\n-//        assertEquals(\"9\", test.dayOfMonth().getAsText());\n-//        assertEquals(\"9\", test.dayOfMonth().getAsText(Locale.FRENCH));\n-//        assertEquals(\"9\", test.dayOfMonth().getAsShortText());\n-//        assertEquals(\"9\", test.dayOfMonth().getAsShortText(Locale.FRENCH));\n-//        assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField());\n-//        assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField());\n-//        assertEquals(2, test.dayOfMonth().getMaximumTextLength(null));\n-//        assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null));\n-//    }\n-//\n-//    public void testPropertyGetMaxMinValuesDay() {\n-//        DateTime test = new DateTime(1972, 6, 9);\n-//        assertEquals(1, test.dayOfMonth().getMinimumValue());\n-//        assertEquals(1, test.dayOfMonth().getMinimumValueOverall());\n-//        assertEquals(30, test.dayOfMonth().getMaximumValue());\n-//        assertEquals(31, test.dayOfMonth().getMaximumValueOverall());\n-//        test = new DateTime(1972, 7, 9);\n-//        assertEquals(31, test.dayOfMonth().getMaximumValue());\n-//        test = new DateTime(1972, 2, 9);\n-//        assertEquals(29, test.dayOfMonth().getMaximumValue());\n-//        test = new DateTime(1971, 2, 9);\n-//        assertEquals(28, test.dayOfMonth().getMaximumValue());\n-//    }\n-//\n-//    public void testPropertyAddDay() {\n-//        DateTime test = new DateTime(1972, 6, 9);\n-//        DateTime copy = test.dayOfMonth().addCopy(9);\n-//        check(test, 1972, 6, 9);\n-//        check(copy, 1972, 6, 18);\n-//        \n-//        copy = test.dayOfMonth().addCopy(21);\n-//        check(copy, 1972, 6, 30);\n-//        \n-//        copy = test.dayOfMonth().addCopy(22);\n-//        check(copy, 1972, 7, 1);\n-//        \n-//        copy = test.dayOfMonth().addCopy(22 + 30);\n-//        check(copy, 1972, 7, 31);\n-//        \n-//        copy = test.dayOfMonth().addCopy(22 + 31);\n-//        check(copy, 1972, 8, 1);\n-//\n-//        copy = test.dayOfMonth().addCopy(21 + 31 + 31 + 30 + 31 + 30 + 31);\n-//        check(copy, 1972, 12, 31);\n-//        \n-//        copy = test.dayOfMonth().addCopy(22 + 31 + 31 + 30 + 31 + 30 + 31);\n-//        check(copy, 1973, 1, 1);\n-//        \n-//        copy = test.dayOfMonth().addCopy(-8);\n-//        check(copy, 1972, 6, 1);\n-//        \n-//        copy = test.dayOfMonth().addCopy(-9);\n-//        check(copy, 1972, 5, 31);\n-//        \n-//        copy = test.dayOfMonth().addCopy(-8 - 31 - 30 - 31 - 29 - 31);\n-//        check(copy, 1972, 1, 1);\n-//        \n-//        copy = test.dayOfMonth().addCopy(-9 - 31 - 30 - 31 - 29 - 31);\n-//        check(copy, 1971, 12, 31);\n-//    }\n-//\n-//    public void testPropertyAddInFieldDay() {\n-//        DateTime test = new DateTime(1972, 6, 9);\n-//        DateTime copy = test.dayOfMonth().addWrappedToCopy(21);\n-//        check(test, 1972, 6, 9);\n-//        check(copy, 1972, 6, 30);\n-//        \n-//        copy = test.dayOfMonth().addWrappedToCopy(22);\n-//        check(copy, 1972, 6, 1);\n-//        \n-//        copy = test.dayOfMonth().addWrappedToCopy(-12);\n-//        check(copy, 1972, 6, 27);\n-//        \n-//        test = new DateTime(1972, 7, 9);\n-//        copy = test.dayOfMonth().addWrappedToCopy(21);\n-//        check(copy, 1972, 7, 30);\n-//    \n-//        copy = test.dayOfMonth().addWrappedToCopy(22);\n-//        check(copy, 1972, 7, 31);\n-//    \n-//        copy = test.dayOfMonth().addWrappedToCopy(23);\n-//        check(copy, 1972, 7, 1);\n-//    \n-//        copy = test.dayOfMonth().addWrappedToCopy(-12);\n-//        check(copy, 1972, 7, 28);\n-//    }\n-//\n-//    public void testPropertySetDay() {\n-//        DateTime test = new DateTime(1972, 6, 9);\n-//        DateTime copy = test.dayOfMonth().setCopy(12);\n-//        check(test, 1972, 6, 9);\n-//        check(copy, 1972, 6, 12);\n-//        \n-//        try {\n-//            test.dayOfMonth().setCopy(31);\n-//            fail();\n-//        } catch (IllegalArgumentException ex) {}\n-//        try {\n-//            test.dayOfMonth().setCopy(0);\n-//            fail();\n-//        } catch (IllegalArgumentException ex) {}\n-//    }\n-//\n-//    public void testPropertySetTextDay() {\n-//        DateTime test = new DateTime(1972, 6, 9);\n-//        DateTime copy = test.dayOfMonth().setCopy(\"12\");\n-//        check(test, 1972, 6, 9);\n-//        check(copy, 1972, 6, 12);\n-//    }\n-//\n-//    public void testPropertyCompareToDay() {\n-//        DateTime test1 = new DateTime(TEST_TIME1);\n-//        DateTime test2 = new DateTime(TEST_TIME2);\n-//        assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0);\n-//        assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0);\n-//        assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0);\n-//        try {\n-//            test1.dayOfMonth().compareTo((ReadablePartial) null);\n-//            fail();\n-//        } catch (IllegalArgumentException ex) {}\n-//        \n-//        DateTime dt1 = new DateTime(TEST_TIME1);\n-//        DateTime dt2 = new DateTime(TEST_TIME2);\n-//        assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0);\n-//        assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0);\n-//        assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0);\n-//        try {\n-//            test1.dayOfMonth().compareTo((ReadableInstant) null);\n-//            fail();\n-//        } catch (IllegalArgumentException ex) {}\n-//    }\n-//\n-//    //-----------------------------------------------------------------------\n-//    private void check(DateTime test, int hour, int min, int sec) {\n-//        assertEquals(hour, test.getYear());\n-//        assertEquals(min, test.getMonthOfYear());\n-//        assertEquals(sec, test.getDayOfMonth());\n-//    }\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMonth() {\n+        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField());\n+        assertEquals(\"monthOfYear\", test.monthOfYear().getName());\n+        assertEquals(\"Property[monthOfYear]\", test.monthOfYear().toString());\n+        assertSame(test, test.monthOfYear().getInstant());\n+        assertSame(test, test.monthOfYear().getDateTime());\n+        assertEquals(6, test.monthOfYear().get());\n+        assertEquals(\"June\", test.monthOfYear().getAsText());\n+        assertEquals(\"juin\", test.monthOfYear().getAsText(Locale.FRENCH));\n+        assertEquals(\"Jun\", test.monthOfYear().getAsShortText());\n+        assertEquals(\"juin\", test.monthOfYear().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField());\n+        assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField());\n+        assertEquals(9, test.monthOfYear().getMaximumTextLength(null));\n+        assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null));\n+        test = new DateTime(1972, 7, 9, 0, 0, 0, 0);\n+        assertEquals(\"juillet\", test.monthOfYear().getAsText(Locale.FRENCH));\n+        assertEquals(\"juil.\", test.monthOfYear().getAsShortText(Locale.FRENCH));\n+        assertEquals(1, test.monthOfYear().getMinimumValue());\n+        assertEquals(1, test.monthOfYear().getMinimumValueOverall());\n+        assertEquals(12, test.monthOfYear().getMaximumValue());\n+        assertEquals(12, test.monthOfYear().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyGetMaxMinValuesMonth() {\n+        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        assertEquals(1, test.monthOfYear().getMinimumValue());\n+        assertEquals(1, test.monthOfYear().getMinimumValueOverall());\n+        assertEquals(12, test.monthOfYear().getMaximumValue());\n+        assertEquals(12, test.monthOfYear().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyAddMonth() {\n+        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.monthOfYear().addToCopy(6);\n+        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"1972-12-09T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.monthOfYear().addToCopy(7);\n+        assertEquals(\"1973-01-09T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.monthOfYear().addToCopy(-5);\n+        assertEquals(\"1972-01-09T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.monthOfYear().addToCopy(-6);\n+        assertEquals(\"1971-12-09T00:00:00.000Z\", copy.toString());\n+        \n+        test = new DateTime(1972, 1, 31, 0, 0, 0, 0);\n+        copy = test.monthOfYear().addToCopy(1);\n+        assertEquals(\"1972-01-31T00:00:00.000Z\", test.toString());\n+        assertEquals(\"1972-02-29T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.monthOfYear().addToCopy(2);\n+        assertEquals(\"1972-03-31T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.monthOfYear().addToCopy(3);\n+        assertEquals(\"1972-04-30T00:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateTime(1971, 1, 31, 0, 0, 0, 0);\n+        copy = test.monthOfYear().addToCopy(1);\n+        assertEquals(\"1971-02-28T00:00:00.000Z\", copy.toString());\n+    }\n+\n+    public void testPropertyAddInFieldMonth() {\n+        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.monthOfYear().addWrappedToCopy(4);\n+        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"1972-10-09T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.monthOfYear().addWrappedToCopy(8);\n+        assertEquals(\"1972-02-09T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.monthOfYear().addWrappedToCopy(-8);\n+        assertEquals(\"1972-10-09T00:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateTime(1972, 1, 31, 0, 0, 0, 0);\n+        copy = test.monthOfYear().addWrappedToCopy(1);\n+        assertEquals(\"1972-01-31T00:00:00.000Z\", test.toString());\n+        assertEquals(\"1972-02-29T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.monthOfYear().addWrappedToCopy(2);\n+        assertEquals(\"1972-03-31T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.monthOfYear().addWrappedToCopy(3);\n+        assertEquals(\"1972-04-30T00:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateTime(1971, 1, 31, 0, 0, 0, 0);\n+        copy = test.monthOfYear().addWrappedToCopy(1);\n+        assertEquals(\"1971-01-31T00:00:00.000Z\", test.toString());\n+        assertEquals(\"1971-02-28T00:00:00.000Z\", copy.toString());\n+    }\n+\n+    public void testPropertySetMonth() {\n+        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.monthOfYear().setCopy(12);\n+        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"1972-12-09T00:00:00.000Z\", copy.toString());\n+        \n+        test = new DateTime(1972, 1, 31, 0, 0, 0, 0);\n+        copy = test.monthOfYear().setCopy(2);\n+        assertEquals(\"1972-02-29T00:00:00.000Z\", copy.toString());\n+        \n+        try {\n+            test.monthOfYear().setCopy(13);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.monthOfYear().setCopy(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextMonth() {\n+        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.monthOfYear().setCopy(\"12\");\n+        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"1972-12-09T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.monthOfYear().setCopy(\"December\");\n+        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"1972-12-09T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.monthOfYear().setCopy(\"Dec\");\n+        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"1972-12-09T00:00:00.000Z\", copy.toString());\n+    }\n+\n+    public void testPropertyCompareToMonth() {\n+        DateTime test1 = new DateTime(TEST_TIME1);\n+        DateTime test2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.monthOfYear().compareTo(test2) < 0);\n+        assertEquals(true, test2.monthOfYear().compareTo(test1) > 0);\n+        assertEquals(true, test1.monthOfYear().compareTo(test1) == 0);\n+        try {\n+            test1.monthOfYear().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0);\n+        assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0);\n+        assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0);\n+        try {\n+            test1.monthOfYear().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetDay() {\n+        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField());\n+        assertEquals(\"dayOfMonth\", test.dayOfMonth().getName());\n+        assertEquals(\"Property[dayOfMonth]\", test.dayOfMonth().toString());\n+        assertSame(test, test.dayOfMonth().getInstant());\n+        assertSame(test, test.dayOfMonth().getDateTime());\n+        assertEquals(9, test.dayOfMonth().get());\n+        assertEquals(\"9\", test.dayOfMonth().getAsText());\n+        assertEquals(\"9\", test.dayOfMonth().getAsText(Locale.FRENCH));\n+        assertEquals(\"9\", test.dayOfMonth().getAsShortText());\n+        assertEquals(\"9\", test.dayOfMonth().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField());\n+        assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField());\n+        assertEquals(2, test.dayOfMonth().getMaximumTextLength(null));\n+        assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null));\n+        assertEquals(1, test.dayOfMonth().getMinimumValue());\n+        assertEquals(1, test.dayOfMonth().getMinimumValueOverall());\n+        assertEquals(30, test.dayOfMonth().getMaximumValue());\n+        assertEquals(31, test.dayOfMonth().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyGetMaxMinValuesDay() {\n+        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        assertEquals(1, test.dayOfMonth().getMinimumValue());\n+        assertEquals(1, test.dayOfMonth().getMinimumValueOverall());\n+        assertEquals(30, test.dayOfMonth().getMaximumValue());\n+        assertEquals(31, test.dayOfMonth().getMaximumValueOverall());\n+        test = new DateTime(1972, 7, 9, 0, 0, 0, 0);\n+        assertEquals(31, test.dayOfMonth().getMaximumValue());\n+        test = new DateTime(1972, 2, 9, 0, 0, 0, 0);\n+        assertEquals(29, test.dayOfMonth().getMaximumValue());\n+        test = new DateTime(1971, 2, 9, 0, 0, 0, 0);\n+        assertEquals(28, test.dayOfMonth().getMaximumValue());\n+    }\n+\n+    public void testPropertyAddDay() {\n+        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.dayOfMonth().addToCopy(9);\n+        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"1972-06-18T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfMonth().addToCopy(21);\n+        assertEquals(\"1972-06-30T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfMonth().addToCopy(22);\n+        assertEquals(\"1972-07-01T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfMonth().addToCopy(22 + 30);\n+        assertEquals(\"1972-07-31T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfMonth().addToCopy(22 + 31);\n+        assertEquals(\"1972-08-01T00:00:00.000+01:00\", copy.toString());\n+\n+        copy = test.dayOfMonth().addToCopy(21 + 31 + 31 + 30 + 31 + 30 + 31);\n+        assertEquals(\"1972-12-31T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.dayOfMonth().addToCopy(22 + 31 + 31 + 30 + 31 + 30 + 31);\n+        assertEquals(\"1973-01-01T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.dayOfMonth().addToCopy(-8);\n+        assertEquals(\"1972-06-01T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfMonth().addToCopy(-9);\n+        assertEquals(\"1972-05-31T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfMonth().addToCopy(-8 - 31 - 30 - 31 - 29 - 31);\n+        assertEquals(\"1972-01-01T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.dayOfMonth().addToCopy(-9 - 31 - 30 - 31 - 29 - 31);\n+        assertEquals(\"1971-12-31T00:00:00.000Z\", copy.toString());\n+    }\n+\n+    public void testPropertyAddInFieldDay() {\n+        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.dayOfMonth().addWrappedToCopy(21);\n+        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"1972-06-30T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfMonth().addWrappedToCopy(22);\n+        assertEquals(\"1972-06-01T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfMonth().addWrappedToCopy(-12);\n+        assertEquals(\"1972-06-27T00:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateTime(1972, 7, 9, 0, 0, 0, 0);\n+        copy = test.dayOfMonth().addWrappedToCopy(21);\n+        assertEquals(\"1972-07-30T00:00:00.000+01:00\", copy.toString());\n+    \n+        copy = test.dayOfMonth().addWrappedToCopy(22);\n+        assertEquals(\"1972-07-31T00:00:00.000+01:00\", copy.toString());\n+    \n+        copy = test.dayOfMonth().addWrappedToCopy(23);\n+        assertEquals(\"1972-07-01T00:00:00.000+01:00\", copy.toString());\n+    \n+        copy = test.dayOfMonth().addWrappedToCopy(-12);\n+        assertEquals(\"1972-07-28T00:00:00.000+01:00\", copy.toString());\n+    }\n+\n+    public void testPropertySetDay() {\n+        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.dayOfMonth().setCopy(12);\n+        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"1972-06-12T00:00:00.000+01:00\", copy.toString());\n+        \n+        try {\n+            test.dayOfMonth().setCopy(31);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.dayOfMonth().setCopy(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextDay() {\n+        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.dayOfMonth().setCopy(\"12\");\n+        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"1972-06-12T00:00:00.000+01:00\", copy.toString());\n+    }\n+\n+    public void testPropertyCompareToDay() {\n+        DateTime test1 = new DateTime(TEST_TIME1);\n+        DateTime test2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0);\n+        assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0);\n+        assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0);\n+        try {\n+            test1.dayOfMonth().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0);\n+        assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0);\n+        assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0);\n+        try {\n+            test1.dayOfMonth().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n }", "timestamp": 1089412525, "metainfo": ""}