{"sha": "750176f51260af36de4802e8150862431e9108bf", "log": "More Period methods and tests   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/Period.java\n+++ b/JodaTime/src/java/org/joda/time/Period.java\n  * <p>\n  * A time period is divided into a number of fields, such as hours and seconds.\n  * Which fields are supported is defined by the PeriodType class.\n+ * The default is the standard period type, which supports years, months, weeks, days,\n+ * hours, minutes, seconds and millis.\n  * <p>\n  * When this time period is added to an instant, the effect is of adding each field in turn.\n  * As a result, this takes into account daylight savings time.\n     }\n \n     /**\n-     * Returns a new period with the specified number of years.\n-     * <p>\n-     * This period instance is immutable and unaffected by this method call.\n-     *\n-     * @param years  the amount of years to add, may be negative\n-     * @return the new period with the increased years\n-     * @throws UnsupportedOperationException if the field is not supported\n-     */\n-    public Period withYears(int years) {\n-        int[] values = getValues();  // cloned\n-        getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);\n-        return new Period(values, getPeriodType());\n-    }\n-\n-    /**\n-     * Returns a new period with the specified number of months.\n-     * <p>\n-     * This period instance is immutable and unaffected by this method call.\n-     *\n-     * @param months  the amount of months to add, may be negative\n-     * @return the new period with the increased months\n-     * @throws UnsupportedOperationException if the field is not supported\n-     */\n-    public Period withMonths(int months) {\n-        int[] values = getValues();  // cloned\n-        getPeriodType().setIndexedField(this, PeriodType.MONTH_INDEX, values, months);\n-        return new Period(values, getPeriodType());\n-    }\n-\n-    /**\n-     * Returns a new period with the specified number of weeks.\n-     * <p>\n-     * This period instance is immutable and unaffected by this method call.\n-     *\n-     * @param weeks  the amount of weeks to add, may be negative\n-     * @return the new period with the increased weeks\n-     * @throws UnsupportedOperationException if the field is not supported\n-     */\n-    public Period withWeeks(int weeks) {\n-        int[] values = getValues();  // cloned\n-        getPeriodType().setIndexedField(this, PeriodType.WEEK_INDEX, values, weeks);\n-        return new Period(values, getPeriodType());\n-    }\n-\n-    /**\n-     * Returns a new period with the specified number of days.\n-     * <p>\n-     * This period instance is immutable and unaffected by this method call.\n-     *\n-     * @param days  the amount of days to add, may be negative\n-     * @return the new period with the increased days\n-     * @throws UnsupportedOperationException if the field is not supported\n-     */\n-    public Period withDays(int days) {\n-        int[] values = getValues();  // cloned\n-        getPeriodType().setIndexedField(this, PeriodType.DAY_INDEX, values, days);\n-        return new Period(values, getPeriodType());\n-    }\n-\n-    /**\n-     * Returns a new period with the specified number of hours.\n-     * <p>\n-     * This period instance is immutable and unaffected by this method call.\n-     *\n-     * @param hours  the amount of hours to add, may be negative\n-     * @return the new period with the increased hours\n-     * @throws UnsupportedOperationException if the field is not supported\n-     */\n-    public Period withHours(int hours) {\n-        int[] values = getValues();  // cloned\n-        getPeriodType().setIndexedField(this, PeriodType.HOUR_INDEX, values, hours);\n-        return new Period(values, getPeriodType());\n-    }\n-\n-    /**\n-     * Returns a new period with the specified number of minutes.\n-     * <p>\n-     * This period instance is immutable and unaffected by this method call.\n-     *\n-     * @param minutes  the amount of minutes to add, may be negative\n-     * @return the new period with the increased minutes\n-     * @throws UnsupportedOperationException if the field is not supported\n-     */\n-    public Period withMinutes(int minutes) {\n-        int[] values = getValues();  // cloned\n-        getPeriodType().setIndexedField(this, PeriodType.MINUTE_INDEX, values, minutes);\n-        return new Period(values, getPeriodType());\n-    }\n-\n-    /**\n-     * Returns a new period with the specified number of seconds.\n-     * <p>\n-     * This period instance is immutable and unaffected by this method call.\n-     *\n-     * @param seconds  the amount of seconds to add, may be negative\n-     * @return the new period with the increased seconds\n-     * @throws UnsupportedOperationException if the field is not supported\n-     */\n-    public Period withSeconds(int seconds) {\n-        int[] values = getValues();  // cloned\n-        getPeriodType().setIndexedField(this, PeriodType.SECOND_INDEX, values, seconds);\n-        return new Period(values, getPeriodType());\n-    }\n-\n-    /**\n-     * Returns a new period with the specified number of millis.\n-     * <p>\n-     * This period instance is immutable and unaffected by this method call.\n-     *\n-     * @param millis  the amount of millis to add, may be negative\n-     * @return the new period with the increased millis\n-     * @throws UnsupportedOperationException if the field is not supported\n-     */\n-    public Period withMillis(int millis) {\n-        int[] values = getValues();  // cloned\n-        getPeriodType().setIndexedField(this, PeriodType.MILLI_INDEX, values, millis);\n-        return new Period(values, getPeriodType());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n      * Creates a new Period instance with the valueToAdd added to the specified field.\n      * \n      * @param field  the field to set, null ignored\n      * @return the new period instance\n      * @throws IllegalArgumentException if the field type is unsupported\n      */\n-    public Period plusField(DurationFieldType field, int valueToAdd) {\n+    public Period withFieldAdded(DurationFieldType field, int valueToAdd) {\n         if (valueToAdd == 0 || field == null) {\n             return this;\n         }\n         return new Period(newValues, getPeriodType());\n     }\n \n-    /**\n-     * Returns a new period with the specified number of years added.\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns a new period with the specified number of years.\n      * <p>\n      * This period instance is immutable and unaffected by this method call.\n      *\n      * @return the new period with the increased years\n      * @throws UnsupportedOperationException if the field is not supported\n      */\n+    public Period withYears(int years) {\n+        int[] values = getValues();  // cloned\n+        getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);\n+        return new Period(values, getPeriodType());\n+    }\n+\n+    /**\n+     * Returns a new period with the specified number of months.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param months  the amount of months to add, may be negative\n+     * @return the new period with the increased months\n+     * @throws UnsupportedOperationException if the field is not supported\n+     */\n+    public Period withMonths(int months) {\n+        int[] values = getValues();  // cloned\n+        getPeriodType().setIndexedField(this, PeriodType.MONTH_INDEX, values, months);\n+        return new Period(values, getPeriodType());\n+    }\n+\n+    /**\n+     * Returns a new period with the specified number of weeks.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param weeks  the amount of weeks to add, may be negative\n+     * @return the new period with the increased weeks\n+     * @throws UnsupportedOperationException if the field is not supported\n+     */\n+    public Period withWeeks(int weeks) {\n+        int[] values = getValues();  // cloned\n+        getPeriodType().setIndexedField(this, PeriodType.WEEK_INDEX, values, weeks);\n+        return new Period(values, getPeriodType());\n+    }\n+\n+    /**\n+     * Returns a new period with the specified number of days.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param days  the amount of days to add, may be negative\n+     * @return the new period with the increased days\n+     * @throws UnsupportedOperationException if the field is not supported\n+     */\n+    public Period withDays(int days) {\n+        int[] values = getValues();  // cloned\n+        getPeriodType().setIndexedField(this, PeriodType.DAY_INDEX, values, days);\n+        return new Period(values, getPeriodType());\n+    }\n+\n+    /**\n+     * Returns a new period with the specified number of hours.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param hours  the amount of hours to add, may be negative\n+     * @return the new period with the increased hours\n+     * @throws UnsupportedOperationException if the field is not supported\n+     */\n+    public Period withHours(int hours) {\n+        int[] values = getValues();  // cloned\n+        getPeriodType().setIndexedField(this, PeriodType.HOUR_INDEX, values, hours);\n+        return new Period(values, getPeriodType());\n+    }\n+\n+    /**\n+     * Returns a new period with the specified number of minutes.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param minutes  the amount of minutes to add, may be negative\n+     * @return the new period with the increased minutes\n+     * @throws UnsupportedOperationException if the field is not supported\n+     */\n+    public Period withMinutes(int minutes) {\n+        int[] values = getValues();  // cloned\n+        getPeriodType().setIndexedField(this, PeriodType.MINUTE_INDEX, values, minutes);\n+        return new Period(values, getPeriodType());\n+    }\n+\n+    /**\n+     * Returns a new period with the specified number of seconds.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param seconds  the amount of seconds to add, may be negative\n+     * @return the new period with the increased seconds\n+     * @throws UnsupportedOperationException if the field is not supported\n+     */\n+    public Period withSeconds(int seconds) {\n+        int[] values = getValues();  // cloned\n+        getPeriodType().setIndexedField(this, PeriodType.SECOND_INDEX, values, seconds);\n+        return new Period(values, getPeriodType());\n+    }\n+\n+    /**\n+     * Returns a new period with the specified number of millis.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param millis  the amount of millis to add, may be negative\n+     * @return the new period with the increased millis\n+     * @throws UnsupportedOperationException if the field is not supported\n+     */\n+    public Period withMillis(int millis) {\n+        int[] values = getValues();  // cloned\n+        getPeriodType().setIndexedField(this, PeriodType.MILLI_INDEX, values, millis);\n+        return new Period(values, getPeriodType());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns a new period with the specified number of years added.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param years  the amount of years to add, may be negative\n+     * @return the new period with the increased years\n+     * @throws UnsupportedOperationException if the field is not supported\n+     */\n     public Period plusYears(int years) {\n         if (years == 0) {\n             return this;\n         return new Period(values, getPeriodType());\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns a new period with the specified number of years taken away.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param years  the amount of years to take away, may be negative\n+     * @return the new period with the increased years\n+     * @throws UnsupportedOperationException if the field is not supported\n+     */\n+    public Period minusYears(int years) {\n+        return plusYears(-years);\n+    }\n+\n+    /**\n+     * Returns a new period minus the specified number of months taken away.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param months  the amount of months to take away, may be negative\n+     * @return the new period minus the increased months\n+     * @throws UnsupportedOperationException if the field is not supported\n+     */\n+    public Period minusMonths(int months) {\n+        return plusMonths(-months);\n+    }\n+\n+    /**\n+     * Returns a new period minus the specified number of weeks taken away.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param weeks  the amount of weeks to take away, may be negative\n+     * @return the new period minus the increased weeks\n+     * @throws UnsupportedOperationException if the field is not supported\n+     */\n+    public Period minusWeeks(int weeks) {\n+        return plusWeeks(-weeks);\n+    }\n+\n+    /**\n+     * Returns a new period minus the specified number of days taken away.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param days  the amount of days to take away, may be negative\n+     * @return the new period minus the increased days\n+     * @throws UnsupportedOperationException if the field is not supported\n+     */\n+    public Period minusDays(int days) {\n+        return plusDays(-days);\n+    }\n+\n+    /**\n+     * Returns a new period minus the specified number of hours taken away.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param hours  the amount of hours to take away, may be negative\n+     * @return the new period minus the increased hours\n+     * @throws UnsupportedOperationException if the field is not supported\n+     */\n+    public Period minusHours(int hours) {\n+        return plusHours(-hours);\n+    }\n+\n+    /**\n+     * Returns a new period minus the specified number of minutes taken away.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param minutes  the amount of minutes to take away, may be negative\n+     * @return the new period minus the increased minutes\n+     * @throws UnsupportedOperationException if the field is not supported\n+     */\n+    public Period minusMinutes(int minutes) {\n+        return plusMinutes(-minutes);\n+    }\n+\n+    /**\n+     * Returns a new period minus the specified number of seconds taken away.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param seconds  the amount of seconds to take away, may be negative\n+     * @return the new period minus the increased seconds\n+     * @throws UnsupportedOperationException if the field is not supported\n+     */\n+    public Period minusSeconds(int seconds) {\n+        return plusSeconds(-seconds);\n+    }\n+\n+    /**\n+     * Returns a new period minus the specified number of millis taken away.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param millis  the amount of millis to take away, may be negative\n+     * @return the new period minus the increased millis\n+     * @throws UnsupportedOperationException if the field is not supported\n+     */\n+    public Period minusMillis(int millis) {\n+        return plusMillis(-millis);\n+    }\n+\n }\n--- a/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testWithField1() {\n+        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+        Period result = test.withField(DurationFieldType.years(), 6);\n+        \n+        assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 8), test);\n+        assertEquals(new Period(6, 2, 3, 4, 5, 6, 7, 8), result);\n+    }\n+\n+    public void testWithField2() {\n+        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+        Period result = test.withField(null, 6);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithFieldAdded1() {\n+        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+        Period result = test.withFieldAdded(DurationFieldType.years(), 6);\n+        \n+        assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 8), test);\n+        assertEquals(new Period(7, 2, 3, 4, 5, 6, 7, 8), result);\n+    }\n+\n+    public void testWithFieldAdded2() {\n+        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+        Period result = test.withFieldAdded(null, 6);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testPeriodStatics() {\n         Period test;\n         test = Period.years(1);\n         assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 1, 0, PeriodType.standard()));\n         test = Period.millis(5).withMillis(1);\n         assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.standard()));\n+        \n+        test = new Period(0L, PeriodType.millis());\n+        try {\n+            test.withYears(1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n     }\n \n     //-----------------------------------------------------------------------\n     public void testPlus() {\n         Period test;\n         test = Period.years(1).plusYears(1);\n-        assertEquals(test, new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()));\n+        assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test);\n         test = Period.months(1).plusMonths(1);\n-        assertEquals(test, new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()));\n+        assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test);\n         test = Period.weeks(1).plusWeeks(1);\n-        assertEquals(test, new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()));\n+        assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test);\n         test = Period.days(1).plusDays(1);\n-        assertEquals(test, new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()));\n+        assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test);\n         test = Period.hours(1).plusHours(1);\n-        assertEquals(test, new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()));\n+        assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test);\n         test = Period.minutes(1).plusMinutes(1);\n-        assertEquals(test, new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()));\n+        assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test);\n         test = Period.seconds(1).plusSeconds(1);\n-        assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()));\n+        assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test);\n         test = Period.millis(1).plusMillis(1);\n-        assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()));\n+        assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test);\n+        \n+        test = new Period(0L, PeriodType.millis());\n+        try {\n+            test.plusYears(1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n     }\n \n     public void testPlusZero() {\n         assertSame(test, result);\n     }\n \n+    public void testMinus() {\n+        Period test;\n+        test = Period.years(3).minusYears(1);\n+        assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test);\n+        test = Period.months(3).minusMonths(1);\n+        assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test);\n+        test = Period.weeks(3).minusWeeks(1);\n+        assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test);\n+        test = Period.days(3).minusDays(1);\n+        assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test);\n+        test = Period.hours(3).minusHours(1);\n+        assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test);\n+        test = Period.minutes(3).minusMinutes(1);\n+        assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test);\n+        test = Period.seconds(3).minusSeconds(1);\n+        assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test);\n+        test = Period.millis(3).minusMillis(1);\n+        assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test);\n+        \n+        test = new Period(0L, PeriodType.millis());\n+        try {\n+            test.minusYears(1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n }", "timestamp": 1094498764, "metainfo": ""}