{"sha": "fd192c2d6492fef77ab116c6a3ddedd128551c7a", "log": "Commit class so its not lost   ", "commit": "\n--- /dev/null\n+++ b/JodaTime/src/java/org/joda/time/partial/DayOfWeek.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.partial;\n+\n+import java.io.Serializable;\n+import java.util.Locale;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeField;\n+import org.joda.time.DateTimeUtils;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.ReadWritableInstant;\n+import org.joda.time.ReadableInstant;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.convert.ConverterManager;\n+import org.joda.time.convert.InstantConverter;\n+\n+/**\n+ * DayOfWeek is an immutable partial instant supporting the dayOfWeek field.\n+ * <p>\n+ * The day of week field is restricted to seven values for the ISO chronology.\n+ * These are provided as constants.\n+ * <p>\n+ * Calculations on DayOfWeek are performed using a {@link Chronology}.\n+ * This chronology is set to be in the UTC time zone for all calculations.\n+ * <p>\n+ * The day of week field can be queried in two ways:\n+ * <ul>\n+ * <li><code>getDayOfWeek()</code>\n+ * <li><code>dayOfWeek().get()</code>\n+ * </ul>\n+ * The second technique also provides access to other useful methods on the field:\n+ * <ul>\n+ * <li>numeric value - <code>dayOfWeek().get()</code>\n+ * <li>text value - <code>dayOfWeek().getAsText()</code>\n+ * <li>short text value - <code>dayOfWeek().getAsShortText()</code>\n+ * <li>maximum/minimum values - <code>dayOfWeek().getMaximumValue()</code>\n+ * <li>add/subtract - <code>dayOfWeek().addToCopy()</code>\n+ * <li>set - <code>dayOfWeek().setCopy()</code>\n+ * </ul>\n+ * <p>\n+ * DayOfWeek is thread-safe and immutable, provided that the Chronology is as well.\n+ * All standard Chronology classes supplied are thread-safe and immutable.\n+ *\n+ * @author Stephen Colebourne\n+ * @since 1.0\n+ */\n+public final class DayOfWeek implements PartialInstant, Serializable {\n+\n+    /** Serialization version */\n+    private static final long serialVersionUID = 65294869236483L;\n+\n+    /** The index of the dayOfWeek field in the field array. */\n+    public static final int DAY_OF_WEEK = 0;\n+\n+    /** A day of week constant for Monday in the ISOChronology. */\n+    public static final DayOfWeek MONDAY = new DayOfWeek(1, null);\n+    /** A day of week constant for Monday in the ISOChronology. */\n+    public static final DayOfWeek TUESDAY = new DayOfWeek(2, null);\n+    /** A day of week constant for Monday in the ISOChronology. */\n+    public static final DayOfWeek WEDNESDAY = new DayOfWeek(3, null);\n+    /** A day of week constant for Monday in the ISOChronology. */\n+    public static final DayOfWeek THURSDAY = new DayOfWeek(4, null);\n+    /** A day of week constant for Monday in the ISOChronology. */\n+    public static final DayOfWeek FRIDAY = new DayOfWeek(5, null);\n+    /** A day of week constant for Monday in the ISOChronology. */\n+    public static final DayOfWeek SATURDAY = new DayOfWeek(6, null);\n+    /** A day of week constant for Monday in the ISOChronology. */\n+    public static final DayOfWeek SUNDAY = new DayOfWeek(7, null);\n+    \n+    /** The chronology. */\n+    private final Chronology iChronology;\n+    /** The value. */\n+    private final int iValue;\n+\n+    // Factories\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Obtains a DayOfWeek by day value in the <code>ISOChronology</code>.\n+     *\n+     * @param dayOfWeek  the ISO day of the week, 1 (Monday) - 7 (Sunday)\n+     * @return a DayOfWeek constant\n+     */\n+    public static DayOfWeek getInstance(int dayOfWeek) {\n+        switch (dayOfWeek) {\n+            case 1:\n+            return MONDAY;\n+            case 2:\n+            return TUESDAY;\n+            case 3:\n+            return WEDNESDAY;\n+            case 4:\n+            return THURSDAY;\n+            case 5:\n+            return FRIDAY;\n+            case 6:\n+            return SATURDAY;\n+            case 7:\n+            return SUNDAY;\n+        }\n+        throw new IllegalArgumentException(\"Invalid day of week: \" + dayOfWeek);\n+    }\n+\n+    /**\n+     * Constructs a DayOfWeek with specified day value and chronology.\n+     *\n+     * @param dayOfWeek  the ISO day of the week, 1 (Monday) - 7 (Sunday)\n+     * @param chronology  the chronology, null means ISOChronology\n+     * @return a DayOfWeek\n+     */\n+    public static DayOfWeek getInstance(int dayOfWeek, Chronology chronology) {\n+        if (chronology == null || chronology instanceof ISOChronology) {\n+            return getInstance(dayOfWeek);\n+        }\n+        return new DayOfWeek(dayOfWeek, chronology);\n+    }\n+\n+    /**\n+     * Obtains a DayOfWeek with the current time, using ISOChronology in\n+     * the default zone to extract the fields.\n+     * <p>\n+     * The constructor uses the default time zone, resulting in the local time\n+     * being initialised. Once the constructor is complete, all further calculations\n+     * are performed without reference to a timezone (by switching to UTC).\n+     * \n+     * @return a DayOfWeek constant\n+     */\n+    public static DayOfWeek getInstanceNow() {\n+        return getInstance(DateTimeUtils.currentTimeMillis());\n+    }\n+\n+    /**\n+     * Obtains a DayOfWeek with the current time, using the specified chronology\n+     * and zone to extract the fields.\n+     * <p>\n+     * The constructor uses the time zone of the chronology specified.\n+     * Once the constructor is complete, all further calculations are performed\n+     * without reference to a timezone (by switching to UTC).\n+     *\n+     * @param chronology  the chronology, null means ISOChronology in the default zone\n+     * @return a DayOfWeek\n+     */\n+    public static DayOfWeek getInstanceNow(Chronology chronology) {\n+        return getInstance(DateTimeUtils.currentTimeMillis(), chronology);\n+    }\n+\n+    /**\n+     * Obtains a DayOfWeek by millisecond in the <code>ISOChronology</code>.\n+     *\n+     * @param instant  the milliseconds from 1970-01-01T00:00:00Z\n+     * @return a DayOfWeek constant\n+     */\n+    public static DayOfWeek getInstance(long instant) {\n+        int dayOfWeek = ISOChronology.getInstance().dayOfWeek().get(instant);\n+        return getInstance(dayOfWeek);\n+    }\n+\n+    /**\n+     * Obtains a DayOfWeek extracting the partial fields from the specified\n+     * milliseconds using the chronology provided.\n+     * <p>\n+     * The constructor uses the time zone of the chronology specified.\n+     * Once the constructor is complete, all further calculations are performed\n+     * without reference to a timezone (by switching to UTC).\n+     *\n+     * @param instant  the milliseconds from 1970-01-01T00:00:00Z\n+     * @param chronology  the chronology, null means ISOChronology in the default zone\n+     * @return a DayOfWeek\n+     */\n+    public static DayOfWeek getInstance(long instant, Chronology chronology) {\n+        if (chronology == null) {\n+            chronology = ISOChronology.getInstance();\n+        }\n+        int dayOfWeek = chronology.dayOfWeek().get(instant);\n+        return getInstance(dayOfWeek, chronology);\n+    }\n+\n+    /**\n+     * Obtains a DayOfWeek from an Object that represents a time.\n+     * <p>\n+     * The recognised object types are defined in\n+     * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n+     * include ReadableInstant, String, Calendar and Date.\n+     *\n+     * @param instant  the datetime object, null means now\n+     * @throws IllegalArgumentException if the date is invalid\n+     * @return a DayOfWeek\n+     */\n+    public static DayOfWeek getInstance(Object instant) {\n+        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n+        long millis = converter.getInstantMillis(instant);\n+        Chronology chronology = converter.getChronology(instant);\n+        if (chronology == null) {\n+            chronology = ISOChronology.getInstance();\n+        }\n+        return getInstance(millis, chronology);\n+    }\n+\n+    /**\n+     * Obtains a DayOfWeek from an Object that represents a time, using the\n+     * specified chronology.\n+     * <p>\n+     * The recognised object types are defined in\n+     * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n+     * include ReadableInstant, String, Calendar and Date.\n+     * <p>\n+     * The constructor uses the time zone of the chronology specified.\n+     * Once the constructor is complete, all further calculations are performed\n+     * without reference to a timezone (by switching to UTC).\n+     *\n+     * @param instant  the datetime object, null means now\n+     * @param chronology  the chronology, null means ISOChronology\n+     * @throws IllegalArgumentException if the date is invalid\n+     * @return a DayOfWeek\n+     */\n+    public static DayOfWeek getInstance(Object instant, Chronology chronology) {\n+        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n+        long millis = converter.getInstantMillis(instant, chronology);\n+        chronology = converter.getChronology(instant, chronology);\n+        if (chronology == null) {\n+            chronology = ISOChronology.getInstance();\n+        }\n+        return getInstance(millis, chronology);\n+    }\n+\n+    // Constructors\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructs a DayOfWeek with specified day value and chronology.\n+     *\n+     * @param dayOfWeek  the ISO day of the week, 1 (Monday) - 7 (Sunday)\n+     * @param chronology  the chronology, null means ISOChronology\n+     */\n+    private DayOfWeek(int dayOfWeek, Chronology chronology) {\n+        super();\n+        if (chronology == null) {\n+            chronology = ISOChronology.getInstance();\n+        }\n+        iChronology = chronology.withUTC();\n+        iValue = dayOfWeek;\n+        chronology.validate(this);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the number of fields in this instant.\n+     * \n+     * @return the field count\n+     */\n+    public int getFieldSize() {\n+        return 1;\n+    }\n+\n+    /**\n+     * Gets the field at the specifed index.\n+     * \n+     * @param index  the index\n+     * @return the field\n+     * @throws IndexOutOfBoundsException if the index is invalid\n+     */\n+    public DateTimeField getField(int index) {\n+        if (index != 0) {\n+            throw new IllegalArgumentException(Integer.toString(index));\n+        }\n+        return iChronology.dayOfWeek();\n+    }\n+\n+    /**\n+     * Gets the value of the field at the specifed index.\n+     * \n+     * @param index  the index\n+     * @return the value\n+     * @throws IndexOutOfBoundsException if the index is invalid\n+     */\n+    public int getValue(int index) {\n+        if (index != 0) {\n+            throw new IllegalArgumentException(Integer.toString(index));\n+        }\n+        return iValue;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets an array containing the day of week field.\n+     *\n+     * @return the fields supported (cloned)\n+     */\n+    public DateTimeField[] getFields() {\n+        return new DateTimeField[] {iChronology.dayOfWeek()};\n+    }\n+\n+    /**\n+     * Gets an array containing the day of week value.\n+     *\n+     * @return the current values of each field (cloned)\n+     */\n+    public int[] getValues() {\n+        return new int[] {iValue};\n+    }\n+\n+    /**\n+     * Gets the chronology of the partial which is never null.\n+     * <p>\n+     * The {@link Chronology} is the calculation engine behind the partial and\n+     * provides conversion and validation of the fields in a particular calendar system.\n+     * \n+     * @return the chronology\n+     */\n+    public Chronology getChronology() {\n+        return iChronology;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Get the value of one of the fields of this partial.\n+     * <p>\n+     * The field specified must be one of those that is supported by the partial instant.\n+     *\n+     * @param field  a DateTimeField instance that is supported by this partial\n+     * @return the value of that field\n+     * @throws IllegalArgumentException if the field is null or not supported\n+     */\n+    public int get(DateTimeField field) {\n+        if (iChronology.dayOfWeek() == field) {\n+            return iValue;\n+        }\n+        throw new IllegalArgumentException(\"Field '\" + field + \"' is not supported\");\n+    }\n+\n+    /**\n+     * Checks whether the field specified is supported by this partial instant.\n+     *\n+     * @param field  the field to check, may be null which returns false\n+     * @return true if the field is supported\n+     */\n+    public boolean isSupported(DateTimeField field) {\n+        if (iChronology.dayOfWeek() == field) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Resolves this partial against another complete instant to create a new\n+     * full instant specifying values as milliseconds since 1970-01-01T00:00:00Z.\n+     * <p>\n+     * For example, if this partial represents a time, then the result of this method\n+     * will be the date from the specified base plus the time from this instant.\n+     *\n+     * @param baseMillis  source of missing fields\n+     * @param zone  the zone to use, null means default\n+     * @return the combined instant in milliseconds\n+     */\n+    public long resolve(long baseMillis, DateTimeZone zone) {\n+        Chronology chrono = iChronology.withZone(zone);\n+        return resolve(baseMillis, chrono);\n+    }\n+\n+    /**\n+     * Resolves this partial into another complete instant setting the relevant fields\n+     * on the writable instant. The combination is performed using the chronology of the\n+     * specified instant.\n+     * <p>\n+     * For example, if this partial represents a time, then the input writable instant\n+     * will be updated with the time from this instant.\n+     *\n+     * @param base  the instant to set into, must not be null\n+     * @throws IllegalArgumentException if the base instant is null\n+     */\n+    public void resolveInto(ReadWritableInstant base) {\n+        if (base == null) {\n+            throw new IllegalArgumentException(\"The instant must not be null\");\n+        }\n+        Chronology chrono = base.getChronology();\n+        long resolved = resolve(base.getMillis(), chrono);\n+        base.setMillis(resolved);\n+    }\n+\n+    /**\n+     * Resolves this partial against another complete instant to create a new\n+     * full instant. The combination is performed using the chronology of the\n+     * specified instant.\n+     * <p>\n+     * For example, if this partial represents a time, then the result of this method\n+     * will be the date from the specified base plus the time from this instant.\n+     *\n+     * @param base  the instant that provides the missing fields, null means now\n+     * @return the combined datetime\n+     */\n+    public DateTime resolveDateTime(ReadableInstant base) {\n+        long resolved;\n+        Chronology chrono;\n+        if (base == null) {\n+            chrono = ISOChronology.getInstance();\n+            resolved = resolve(DateTimeUtils.currentTimeMillis(), chrono);\n+        } else {\n+            chrono = base.getChronology();\n+            resolved = resolve(base.getMillis(), chrono);\n+        }\n+        return new DateTime(resolved, chrono);\n+    }\n+\n+    /**\n+     * Resolve this partial instant into the base millis using the specified chronology.\n+     * \n+     * @param baseMillis  the base millis\n+     * @param chrono  the chronology\n+     * @return the new resolved millis\n+     */\n+    protected long resolve(long baseMillis, Chronology chrono) {\n+        return iChronology.dayOfWeek().set(baseMillis, iValue);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Compares this PartialInstant with another returning true if the chronology,\n+     * fields and values are equal.\n+     *\n+     * @param instant  an object to check against\n+     * @return true if fields and values are equal\n+     */\n+    public boolean equals(Object instant) {\n+        if (instant instanceof PartialInstant) {\n+            PartialInstant other = (PartialInstant) instant;\n+            return other.getFieldSize() == 1 &&\n+                   other.isSupported(iChronology.dayOfWeek()) &&\n+                   iValue == other.get(iChronology.dayOfWeek()) &&\n+                   iChronology == other.getChronology();\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Gets a hash code for the PartialInstant that is compatible with the \n+     * equals method.\n+     *\n+     * @return a suitable hash code\n+     */\n+    public int hashCode() {\n+        int total = 157;\n+        total = 23 * total + iValue;\n+        total = 23 * total + iChronology.dayOfWeek().hashCode();\n+        total += iChronology.hashCode();\n+        return total;\n+    }\n+\n+    /**\n+     * Output the time in an ISO8601 format.\n+     * \n+     * @return ISO8601 formatted string\n+     */\n+    public String toString() {\n+        // TODO\n+        return \"\";\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Get the ISO day of week (1-7) field value.\n+     *\n+     * @return the ISO day of the week, 1 (Monday) - 7 (Sunday)\n+     */\n+    public int getDayOfWeek() {\n+        return iValue;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Get the ISO day of week (1-7) field property\n+     * \n+     * @return the ISO day of week property\n+     */\n+    public Property dayOfWeek() {\n+        return new Property(this);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * The property class for DayOfWeek.\n+     */\n+    public static class Property extends AbstractPartialFieldProperty {\n+\n+        /** The instant */\n+        private final DayOfWeek iInstant;\n+\n+        /**\n+         * Constructs a property.\n+         * \n+         * @param instant  the partial instant\n+         */\n+        Property(DayOfWeek instant) {\n+            super();\n+            iInstant = instant;\n+        }\n+\n+        /**\n+         * Gets the field that this property uses.\n+         * \n+         * @return the field\n+         */\n+        public DateTimeField getField() {\n+            return iInstant.iChronology.dayOfWeek();\n+        }\n+\n+        /**\n+         * Gets the instant that this property belongs to.\n+         * \n+         * @return the partial instant\n+         */\n+        public PartialInstant getPartialInstant() {\n+            return iInstant;\n+        }\n+\n+        /**\n+         * Gets the instant that this property belongs to.\n+         * \n+         * @return the partial instant\n+         */\n+        public DayOfWeek getDayOfWeek() {\n+            return iInstant;\n+        }\n+\n+        /**\n+         * Gets the value of the field that the partial instant is set to.\n+         * \n+         * @return the field value\n+         */\n+        public int get() {\n+            return iInstant.iValue;\n+        }\n+\n+        //-----------------------------------------------------------------------\n+        /**\n+         * Adds to the value of this field in a copy of this DayOfWeek.\n+         * <p>\n+         * The value will be added to this field. If the result is too large\n+         * (more than 7) or too small (less than 1) then an exception is thrown.\n+         * <p>\n+         * The DayOfWeek attached to this property is unchanged by this call.\n+         * Instead, a new instance is returned.\n+         * \n+         * @param valueToAdd  the value to add to the field in the copy\n+         * @return a copy of the DayOfWeek with the field value changed\n+         * @throws IllegalArgumentException if the value isn't valid\n+         */\n+        public DayOfWeek addCopy(int valueToAdd) {\n+            int[] newValues = iInstant.getValues();\n+            getField().add(iInstant, 0, newValues, valueToAdd);\n+            return DayOfWeek.getInstance(newValues[0], iInstant.getChronology());\n+        }\n+\n+        /**\n+         * Adds to the value of this field in a copy of this DayOfWeek wrapping\n+         * within this field if the maximum value is reached.\n+         * <p>\n+         * The value will be added to this field. If the result is too large\n+         * (more than 7) or too small (less than 1) then it will wrap.\n+         * <p>\n+         * The DayOfWeek attached to this property is unchanged by this call.\n+         * Instead, a new instance is returned.\n+         * \n+         * @param valueToAdd  the value to add to the field in the copy\n+         * @return a copy of the DayOfWeek with the field value changed\n+         * @throws IllegalArgumentException if the value isn't valid\n+         */\n+        public DayOfWeek addInFieldCopy(int valueToAdd) {\n+            int[] newValues = iInstant.getValues();\n+            getField().addInField(iInstant, 0, newValues, valueToAdd);\n+            return DayOfWeek.getInstance(newValues[0], iInstant.getChronology());\n+        }\n+\n+        //-----------------------------------------------------------------------\n+        /**\n+         * Sets this field in a copy of the DayOfWeek.\n+         * <p>\n+         * The DayOfWeek attached to this property is unchanged by this call.\n+         * Instead, a new instance is returned.\n+         * \n+         * @param value  the value to set the field in the copy to\n+         * @return a copy of the DayOfWeek with the field value changed\n+         * @throws IllegalArgumentException if the value isn't valid\n+         */\n+        public DayOfWeek setCopy(int value) {\n+            int[] newValues = iInstant.getValues();\n+            getField().set(iInstant, 0, newValues, value);\n+            return DayOfWeek.getInstance(newValues[0], iInstant.getChronology());\n+        }\n+\n+        /**\n+         * Sets this field in a copy of the DayOfWeek to a parsed text value.\n+         * <p>\n+         * The DayOfWeek attached to this property is unchanged by this call.\n+         * Instead, a new instance is returned.\n+         * \n+         * @param text  the text value to set\n+         * @param locale  optional locale to use for selecting a text symbol\n+         * @return a copy of the DayOfWeek with the field value changed\n+         * @throws IllegalArgumentException if the text value isn't valid\n+         */\n+        public DayOfWeek setCopy(String text, Locale locale) {\n+            int[] newValues = iInstant.getValues();\n+            getField().set(iInstant, 0, newValues, text, locale);\n+            return DayOfWeek.getInstance(newValues[0], iInstant.getChronology());\n+        }\n+\n+        /**\n+         * Sets this field in a copy of the DayOfWeek to a parsed text value.\n+         * <p>\n+         * The DayOfWeek attached to this property is unchanged by this call.\n+         * Instead, a new instance is returned.\n+         * \n+         * @param text  the text value to set\n+         * @return a copy of the DayOfWeek with the field value changed\n+         * @throws IllegalArgumentException if the text value isn't valid\n+         */\n+        public DayOfWeek setCopy(String text) {\n+            return setCopy(text, null);\n+        }\n+    }\n+\n+}", "timestamp": 1088364679, "metainfo": ""}