{"sha": "82c5e4f9550e4df36e07b66f35f7c3e9d7eb5eba", "log": "Ambiguous date-time when in zone with offset of 00:00 [3424669]", "commit": "\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+        } else if (offsetLocal >= 0) {\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);\n--- a/src/test/java/org/joda/time/TestDateTimeZoneCutover.java\n+++ b/src/test/java/org/joda/time/TestDateTimeZoneCutover.java\n \n     // ensure Summer time picked\n     //-----------------------------------------------------------------------\n-    public void testDateTimeCreation_europe() {\n+    public void testDateTimeCreation_athens() {\n         DateTimeZone zone = DateTimeZone.forID(\"Europe/Athens\");\n         DateTime base = new DateTime(2011, 10, 30, 3, 15, zone);\n         assertEquals(\"2011-10-30T03:15:00.000+03:00\", base.toString());\n         assertEquals(\"2011-10-30T03:15:00.000+02:00\", base.plusHours(1).toString());\n     }\n \n-    public void testDateTimeCreation_us() {\n+    public void testDateTimeCreation_paris() {\n+        DateTimeZone zone = DateTimeZone.forID(\"Europe/Paris\");\n+        DateTime base = new DateTime(2011, 10, 30, 2, 15, zone);\n+        assertEquals(\"2011-10-30T02:15:00.000+02:00\", base.toString());\n+        assertEquals(\"2011-10-30T02:15:00.000+01:00\", base.plusHours(1).toString());\n+    }\n+\n+    public void testDateTimeCreation_london() {\n+        DateTimeZone zone = DateTimeZone.forID(\"Europe/London\");\n+        DateTime base = new DateTime(2011, 10, 30, 1, 15, zone);\n+        assertEquals(\"2011-10-30T01:15:00.000+01:00\", base.toString());\n+        assertEquals(\"2011-10-30T01:15:00.000Z\", base.plusHours(1).toString());\n+    }\n+\n+    public void testDateTimeCreation_newYork() {\n+        DateTimeZone zone = DateTimeZone.forID(\"America/New_York\");\n+        DateTime base = new DateTime(2010, 11, 7, 1, 15, zone);\n+        assertEquals(\"2010-11-07T01:15:00.000-04:00\", base.toString());\n+        assertEquals(\"2010-11-07T01:15:00.000-05:00\", base.plusHours(1).toString());\n+    }\n+\n+    public void testDateTimeCreation_losAngeles() {\n         DateTimeZone zone = DateTimeZone.forID(\"America/Los_Angeles\");\n         DateTime base = new DateTime(2010, 11, 7, 1, 15, zone);\n         assertEquals(\"2010-11-07T01:15:00.000-07:00\", base.toString());", "timestamp": 1319411781, "metainfo": ""}