{"sha": "f574d59dd322be0df10694c296bbdff9a7a2fba2", "log": "Performance optimization for overflow checking multiplications   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateTimeZone.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeZone.java\n         }\n         int offset = 0;\n         try {\n-            int hoursInMinutes = FieldUtils.safeMultiplyToInt(hoursOffset, 60);\n+            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);\n             if (hoursInMinutes < 0) {\n                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);\n             } else {\n                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\n             }\n-            offset = FieldUtils.safeMultiplyToInt(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n+            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n         } catch (ArithmeticException ex) {\n             throw new IllegalArgumentException(\"Offset is too large\");\n         }\n--- a/JodaTime/src/java/org/joda/time/Partial.java\n+++ b/JodaTime/src/java/org/joda/time/Partial.java\n             int index = indexOf(fieldType);\n             if (index >= 0) {\n                 newValues = getField(index).add(this, index, newValues,\n-                        FieldUtils.safeMultiplyToInt(period.getValue(i), scalar));\n+                        FieldUtils.safeMultiply(period.getValue(i), scalar));\n             }\n         }\n         return new Partial(this, newValues);\n--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java\n+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java\n             int index = indexOf(fieldType);\n             if (index >= 0) {\n                 newValues = getField(index).addWrapPartial(this, index, newValues,\n-                        FieldUtils.safeMultiplyToInt(period.getValue(i), scalar));\n+                        FieldUtils.safeMultiply(period.getValue(i), scalar));\n             }\n         }\n         return new TimeOfDay(this, newValues);\n--- a/JodaTime/src/java/org/joda/time/YearMonthDay.java\n+++ b/JodaTime/src/java/org/joda/time/YearMonthDay.java\n             int index = indexOf(fieldType);\n             if (index >= 0) {\n                 newValues = getField(index).add(this, index, newValues,\n-                        FieldUtils.safeMultiplyToInt(period.getValue(i), scalar));\n+                        FieldUtils.safeMultiply(period.getValue(i), scalar));\n             }\n         }\n         return new YearMonthDay(this, newValues);\n--- a/JodaTime/src/java/org/joda/time/field/FieldUtils.java\n+++ b/JodaTime/src/java/org/joda/time/field/FieldUtils.java\n      * @param val2  the second value\n      * @return the new total\n      * @throws ArithmeticException if the value is too big or too small\n+     * @since 1.2\n+     */\n+    public static int safeMultiply(int val1, int val2) {\n+        long total = (long) val1 * (long) val2;\n+        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {\n+            throw new ArithmeticException\n+                (\"The calculation caused an overflow: \" + val1 + \" * \" + val2);\n+        }\n+        return (int) total;\n+    }\n+\n+    /**\n+     * Multiply two values throwing an exception if overflow occurs.\n+     * \n+     * @param val1  the first value\n+     * @param scalar  the second value\n+     * @return the new total\n+     * @throws ArithmeticException if the value is too big or too small\n+     * @since 1.2\n+     */\n+    public static long safeMultiply(long val1, int scalar) {\n+        switch (scalar) {\n+        case -1:\n+            return -val1;\n+        case 0:\n+            return 0L;\n+        case 1:\n+            return val1;\n+        }\n+        long total = val1 * scalar;\n+        if (total / scalar != val1) {\n+            throw new ArithmeticException\n+                (\"The calculation caused an overflow: \" + val1 + \" * \" + scalar);\n+        }\n+        return total;\n+    }\n+\n+    /**\n+     * Multiply two values throwing an exception if overflow occurs.\n+     * \n+     * @param val1  the first value\n+     * @param val2  the second value\n+     * @return the new total\n+     * @throws ArithmeticException if the value is too big or too small\n      */\n     public static long safeMultiply(long val1, long val2) {\n-        if (val1 == 0 || val2 == 0) {\n-            return 0L;\n+        if (val2 == 1) {\n+            return val1;\n+        }\n+        if (val2 == 0) {\n+            return 0;\n         }\n         long total = val1 * val2;\n         if (total / val2 != val1) {", "timestamp": 1127072538, "metainfo": ""}