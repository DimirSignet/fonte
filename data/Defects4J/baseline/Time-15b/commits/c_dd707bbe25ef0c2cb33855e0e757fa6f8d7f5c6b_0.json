{"sha": "dd707bbe25ef0c2cb33855e0e757fa6f8d7f5c6b", "log": "contributing hibernate support for Duration and Period  ", "commit": "\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/AbstractStringBasedJodaType.java\n+package org.joda.time.contrib.hibernate;\n+\n+import org.hibernate.Hibernate;\n+import org.hibernate.HibernateException;\n+import org.hibernate.usertype.UserType;\n+import org.joda.time.Period;\n+\n+import java.io.Serializable;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+\n+/**\n+ * @author gjoseph\n+ * @author $Author: $ (last edit)\n+ * @version $Revision: $\n+ */\n+public abstract class AbstractStringBasedJodaType implements UserType {\n+    private static final int[] SQL_TYPES = new int[]{Types.VARCHAR};\n+\n+    public int[] sqlTypes() {\n+        return SQL_TYPES;\n+    }\n+\n+    public Object nullSafeGet(ResultSet resultSet, String[] strings, Object object) throws HibernateException, SQLException {\n+        String s = (String) Hibernate.STRING.nullSafeGet(resultSet, strings[0]);\n+        if (s == null) {\n+            return null;\n+        }\n+\n+        return fromNonNullString(s);\n+    }\n+\n+    protected abstract Object fromNonNullString(String s);\n+\n+    public void nullSafeSet(PreparedStatement preparedStatement, Object value, int index) throws HibernateException, SQLException {\n+        if (value == null) {\n+            Hibernate.STRING.nullSafeSet(preparedStatement, null, index);\n+        } else {\n+            Hibernate.STRING.nullSafeSet(preparedStatement, toNonNullString(value), index);\n+        }\n+    }\n+\n+    protected abstract String toNonNullString(Object value);\n+\n+    public boolean equals(Object x, Object y) throws HibernateException {\n+        if (x == y) {\n+            return true;\n+        }\n+        if (x == null || y == null) {\n+            return false;\n+        }\n+        // why do this !? .. TODO : maybe we need to check types ?\n+        // Period px = (Period) x;\n+        // Period py = (Period) y;\n+\n+        return x.equals(y);\n+    }\n+\n+    public int hashCode(Object object) throws HibernateException {\n+        return object.hashCode();\n+    }\n+\n+    public Object deepCopy(Object value) throws HibernateException {\n+        if (value == null) {\n+            return null;\n+        }\n+\n+        return new Period(value);\n+    }\n+\n+    public boolean isMutable() {\n+        return false;\n+    }\n+\n+    public Serializable disassemble(Object value) throws HibernateException {\n+        return (Serializable) value;\n+    }\n+\n+    public Object assemble(Serializable cached, Object value) throws HibernateException {\n+        return cached;\n+    }\n+\n+    public Object replace(Object original, Object target, Object owner) throws HibernateException {\n+        return original;\n+    }\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/DurationType.java\n+package org.joda.time.contrib.hibernate;\n+\n+import org.joda.time.Duration;\n+import org.joda.time.convert.ConverterManager;\n+import org.joda.time.convert.DurationConverter;\n+\n+/**\n+ * Converts a org.joda.time.Duration to and from Sql for Hibernate.\n+ * It simply stores the value as a varchar (using Duration.toString),\n+ * and retrieves it using a DurationConverter.\n+ * TODO : are we persisting Chronologies ? is it any relevant ?\n+ *\n+ * @author gjoseph\n+ * @author $Author: $ (last edit)\n+ * @version $Revision: $\n+ */\n+public class DurationType extends AbstractStringBasedJodaType {\n+\n+    public Class returnedClass() {\n+        return Duration.class;\n+    }\n+\n+    protected Object fromNonNullString(String s) {\n+        final DurationConverter converter = ConverterManager.getInstance().getDurationConverter(s);\n+        final long durationMillis = converter.getDurationMillis(s);\n+        return new Duration(durationMillis);\n+    }\n+\n+    protected String toNonNullString(Object value) {\n+        return value.toString();\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PeriodType.java\n+package org.joda.time.contrib.hibernate;\n+\n+import org.joda.time.Period;\n+import org.joda.time.format.PeriodFormat;\n+\n+/**\n+ * Converts a org.joda.time.Period to and from Sql for Hibernate.\n+ * It simply stores and retrieves the value as a varchar, using\n+ * PeriodFormat.\n+ *\n+ * TODO : are we persisting Chronologies ? is it any relevant ?\n+ * TODO : how are we handling conversions that might end up too long for the column ? \n+ *\n+ * @author gjoseph\n+ * @author $Author: $ (last edit)\n+ * @version $Revision: $\n+ */\n+public class PeriodType extends AbstractStringBasedJodaType {\n+\n+    public Class returnedClass() {\n+        return Period.class;\n+    }\n+\n+    protected Object fromNonNullString(String s) {\n+        return PeriodFormat.getDefault().parsePeriod(s);\n+    }\n+\n+    protected String toNonNullString(Object value) {\n+        return PeriodFormat.getDefault().print((Period) value);\n+    }\n+\n+}\n--- a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/HibernateTestCase.java\n+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/HibernateTestCase.java\n import org.hibernate.dialect.HSQLDialect;\n import org.hibernate.tool.hbm2ddl.SchemaUpdate;\n \n+import java.sql.Connection;\n+import java.sql.Statement;\n+\n public abstract class HibernateTestCase extends TestCase\n {\n \tprivate SessionFactory factory;\n+    private Configuration cfg;\n \n-\tprotected SessionFactory getSessionFactory()\n+    protected SessionFactory getSessionFactory()\n \t{\n \t\tif (this.factory == null)\n \t\t{\n-\t\t\tConfiguration cfg = new Configuration();\n+                    cfg = new Configuration();\n \n-\t\t\tsetupConfiguration(cfg);\n+                    setupConfiguration(cfg);\n \n \t\t\tcfg.setProperty(\"hibernate.connection.driver_class\", \"org.hsqldb.jdbcDriver\");\n \t\t\tcfg.setProperty(\"hibernate.connection.url\", \"jdbc:hsqldb:mem:hbmtest\" + getClass().getName());\n \n \tprotected void tearDown() throws Exception\n \t{\n-\t\tif (this.factory != null)\n+            final String[] dropSQLs = cfg.generateDropSchemaScript(new HSQLDialect());\n+            final Connection connection = getSessionFactory().openSession().connection();\n+            try {\n+                Statement stmt = connection.createStatement();\n+                for (int i = 0; i < dropSQLs.length; i++) {\n+                    //System.out.println(\"dropSQLs[i] = \" + dropSQLs[i]);\n+                    stmt.executeUpdate(dropSQLs[i]);\n+                }\n+            } finally {\n+                connection.close();\n+            }\n+\n+            if (this.factory != null)\n \t\t{\n \t\t\tthis.factory.close();\n \t\t\tthis.factory = null;\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestDurationType.java\n+package org.joda.time.contrib.hibernate;\n+\n+import junit.framework.Assert;\n+import org.hibernate.Session;\n+import org.hibernate.cfg.Configuration;\n+import org.joda.time.DateTime;\n+import org.joda.time.Duration;\n+import org.joda.time.Period;\n+import org.joda.time.contrib.hibernate.testmodel.SomethingThatLasts;\n+\n+import java.io.IOException;\n+import java.io.File;\n+import java.sql.SQLException;\n+\n+/**\n+ * @author gjoseph\n+ * @author $Author: $ (last edit)\n+ * @version $Revision: $\n+ */\n+public class TestDurationType extends HibernateTestCase {\n+    protected void setupConfiguration(Configuration cfg) {\n+        cfg.addFile(new File(\"src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatLasts.hbm.xml\"));\n+    }\n+\n+    private Duration[] durations = new Duration[]{\n+            Duration.ZERO, new Duration(30), Period.seconds(30).toDurationTo(new DateTime()), Period.months(3).toDurationFrom(new DateTime())\n+    };\n+\n+    public void testSimpleStore() throws SQLException, IOException {\n+        Session session = getSessionFactory().openSession();\n+\n+        for (int i = 0; i < durations.length; i++) {\n+            SomethingThatLasts thing = new SomethingThatLasts();\n+            thing.setId(i);\n+            thing.setName(\"test_\" + i);\n+            thing.setTheDuration(durations[i]);\n+            session.save(thing);\n+        }\n+\n+        session.flush();\n+        session.connection().commit();\n+        session.close();\n+\n+        for (int i = 0; i < durations.length; i++) {\n+            session = getSessionFactory().openSession();\n+            SomethingThatLasts lastingThing = (SomethingThatLasts) session.get(SomethingThatLasts.class, new Long(i));\n+\n+            Assert.assertNotNull(lastingThing);\n+            Assert.assertEquals(i, lastingThing.getId());\n+            Assert.assertEquals(\"test_\" + i, lastingThing.getName());\n+            Assert.assertEquals(durations[i], lastingThing.getTheDuration());\n+\n+            session.close();\n+        }\n+\n+        // printSqlQueryResults(\"SELECT * FROM lasting\");\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPeriodType.java\n+package org.joda.time.contrib.hibernate;\n+\n+import junit.framework.Assert;\n+import org.hibernate.Session;\n+import org.hibernate.cfg.Configuration;\n+import org.joda.time.Period;\n+import org.joda.time.contrib.hibernate.testmodel.SomethingThatHappens;\n+\n+import java.io.IOException;\n+import java.io.File;\n+import java.sql.SQLException;\n+\n+/**\n+ * @author gjoseph\n+ * @author $Author: $ (last edit)\n+ * @version $Revision: $\n+ */\n+public class TestPeriodType extends HibernateTestCase {\n+    protected void setupConfiguration(Configuration cfg) {\n+        cfg.addFile(new File(\"src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatHappens.hbm.xml\"));\n+    }\n+\n+    private Period[] periods = new Period[]{\n+            Period.days(2), Period.seconds(30), Period.months(3),\n+            new Period(30), new Period(4, 35, 40, 141),\n+            new Period(28, 10, 2, 2, 4, 35, 40, 141), new Period(28, 10, 0, 16, 4, 35, 40, 141),\n+            // new Period(new DateTime()),\n+            // new Period(new YearMonthDay()),\n+            // new Period(new YearMonthDay(2005, 12, 25)),\n+            // new Period(new YearMonthDay(2005, 0, 25)), new Period(new YearMonthDay(2005, 13, 25)),\n+            // new Period(new DateTime(CopticChronology.getInstance())            )\n+    };\n+\n+    public void testSimpleStore() throws SQLException, IOException {\n+        Session session = getSessionFactory().openSession();\n+\n+        for (int i = 0; i < periods.length; i++) {\n+            SomethingThatHappens thing = new SomethingThatHappens();\n+            thing.setId(i);\n+            thing.setName(\"test_\" + i);\n+            thing.setThePeriod(periods[i]);\n+            session.save(thing);\n+        }\n+\n+        session.flush();\n+        session.connection().commit();\n+        session.close();\n+\n+        for (int i = 0; i < periods.length; i++) {\n+            session = getSessionFactory().openSession();\n+            SomethingThatHappens happeningThing = (SomethingThatHappens) session.get(SomethingThatHappens.class, new Long(i));\n+\n+            Assert.assertNotNull(happeningThing);\n+            Assert.assertEquals(i, happeningThing.getId());\n+            Assert.assertEquals(\"test_\" + i, happeningThing.getName());\n+            Assert.assertEquals(periods[i], happeningThing.getThePeriod());\n+\n+            session.close();\n+        }\n+\n+        // printSqlQueryResults(\"SELECT * FROM happening\");\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatHappens.java\n+package org.joda.time.contrib.hibernate.testmodel;\n+\n+import org.joda.time.Period;\n+\n+import java.io.Serializable;\n+\n+/**\n+ *\n+ * @author gjoseph\n+ * @author $Author: $ (last edit)\n+ * @version $Revision: $\n+ */\n+public class SomethingThatHappens implements Serializable {\n+    private long id;\n+    private String name;\n+    private Period thePeriod;\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public Period getThePeriod() {\n+        return thePeriod;\n+    }\n+\n+    public void setThePeriod(Period thePeriod) {\n+        this.thePeriod = thePeriod;\n+    }\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatLasts.java\n+package org.joda.time.contrib.hibernate.testmodel;\n+\n+import org.joda.time.Duration;\n+\n+import java.io.Serializable;\n+\n+/**\n+ *\n+ * @author gjoseph\n+ * @author $Author: $ (last edit)\n+ * @version $Revision: $\n+ */\n+public class SomethingThatLasts implements Serializable {\n+    private long id;\n+    private String name;\n+    private Duration theDuration;\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public Duration getTheDuration() {\n+        return theDuration;\n+    }\n+\n+    public void setTheDuration(Duration theDuration) {\n+        this.theDuration = theDuration;\n+    }\n+\n+}", "timestamp": 1178536315, "metainfo": ""}