{"sha": "f582cd6cc7364f1792e138771a3625beeee10e3a", "log": "Improve javadoc around min printed digits and max parsed digits  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2006 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         return this;\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Append a field prefix which applies only to the next appended field. If\n      * the field is not printed, neither is the prefix.\n         return this;\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Instruct the printer to emit an integer years field, if supported.\n+     * <p>\n+     * The number of printed and parsed digits can be controlled using\n+     * {@link #minimumPrintedDigits(int)} and {@link #maximumParsedDigits(int)}.\n      *\n      * @return this PeriodFormatterBuilder\n      */\n     }\n \n     /**\n-     * Instruct the printer to emit an integer years field, if supported.\n+     * Instruct the printer to emit an integer months field, if supported.\n+     * <p>\n+     * The number of printed and parsed digits can be controlled using\n+     * {@link #minimumPrintedDigits(int)} and {@link #maximumParsedDigits(int)}.\n      *\n      * @return this PeriodFormatterBuilder\n      */\n \n     /**\n      * Instruct the printer to emit an integer weeks field, if supported.\n+     * <p>\n+     * The number of printed and parsed digits can be controlled using\n+     * {@link #minimumPrintedDigits(int)} and {@link #maximumParsedDigits(int)}.\n      *\n      * @return this PeriodFormatterBuilder\n      */\n \n     /**\n      * Instruct the printer to emit an integer days field, if supported.\n+     * <p>\n+     * The number of printed and parsed digits can be controlled using\n+     * {@link #minimumPrintedDigits(int)} and {@link #maximumParsedDigits(int)}.\n      *\n      * @return this PeriodFormatterBuilder\n      */\n \n     /**\n      * Instruct the printer to emit an integer hours field, if supported.\n+     * <p>\n+     * The number of printed and parsed digits can be controlled using\n+     * {@link #minimumPrintedDigits(int)} and {@link #maximumParsedDigits(int)}.\n      *\n      * @return this PeriodFormatterBuilder\n      */\n \n     /**\n      * Instruct the printer to emit an integer minutes field, if supported.\n+     * <p>\n+     * The number of printed and parsed digits can be controlled using\n+     * {@link #minimumPrintedDigits(int)} and {@link #maximumParsedDigits(int)}.\n      *\n      * @return this PeriodFormatterBuilder\n      */\n \n     /**\n      * Instruct the printer to emit an integer seconds field, if supported.\n+     * <p>\n+     * The number of printed and parsed digits can be controlled using\n+     * {@link #minimumPrintedDigits(int)} and {@link #maximumParsedDigits(int)}.\n      *\n      * @return this PeriodFormatterBuilder\n      */\n \n     /**\n      * Instruct the printer to emit an integer millis field, if supported.\n+     * <p>\n+     * The number of printed and parsed digits can be controlled using\n+     * {@link #minimumPrintedDigits(int)} and {@link #maximumParsedDigits(int)}.\n      *\n      * @return this PeriodFormatterBuilder\n      */\n \n     /**\n      * Instruct the printer to emit an integer millis field, if supported.\n+     * <p>\n+     * The number of arsed digits can be controlled using {@link #maximumParsedDigits(int)}.\n      *\n      * @return this PeriodFormatterBuilder\n      */\n         iPrefix = null;\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Append a field suffix which applies only to the last appended field. If\n      * the field is not printed, neither is the suffix.\n         return this;\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Append a separator, which is output if fields are printed both before\n      * and after the separator.\n         return this;\n     }\n \n+    //-----------------------------------------------------------------------\n     private void clearPrefix() throws IllegalStateException {\n         if (iPrefix != null) {\n             throw new IllegalStateException(\"Prefix not followed by field\");", "timestamp": 1162509237, "metainfo": ""}