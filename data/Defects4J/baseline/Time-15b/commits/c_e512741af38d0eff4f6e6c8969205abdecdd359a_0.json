{"sha": "e512741af38d0eff4f6e6c8969205abdecdd359a", "log": "Test LocalDateTime  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/LocalDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/LocalDateTime.java\n      * @throws IllegalArgumentException if the calendar is null\n      * @throws IllegalArgumentException if the date is invalid for the ISO chronology\n      */\n-    public static LocalDateTime forFields(Calendar calendar) {\n+    public static LocalDateTime fromCalendarFields(Calendar calendar) {\n         if (calendar == null) {\n             throw new IllegalArgumentException(\"The calendar must not be null\");\n         }\n      * @throws IllegalArgumentException if the calendar is null\n      * @throws IllegalArgumentException if the date is invalid for the ISO chronology\n      */\n-    public static LocalDateTime forFields(Date date) {\n+    public static LocalDateTime fromDateFields(Date date) {\n         if (date == null) {\n             throw new IllegalArgumentException(\"The date must not be null\");\n         }\n--- a/JodaTime/src/test/org/joda/time/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/TestAll.java\n         suite.addTest(TestInterval_Constructors.suite());\n         suite.addTest(TestInterval_Basics.suite());\n         \n+        suite.addTest(TestLocalDateTime_Constructors.suite());\n         suite.addTest(TestLocalDateTime_Basics.suite());\n+        suite.addTest(TestLocalDateTime_Properties.suite());\n         \n         suite.addTest(TestLocalDate_Constructors.suite());\n         suite.addTest(TestLocalDate_Basics.suite());\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * This class is a Junit unit test for LocalDateTime.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestLocalDateTime_Constructors extends TestCase {\n+\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone MOSCOW = DateTimeZone.forID(\"Europe/Moscow\");\n+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();\n+    private static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);\n+    private static final int OFFSET_PARIS = PARIS.getOffset(0L) / DateTimeConstants.MILLIS_PER_HOUR;\n+    private static final int OFFSET_MOSCOW = MOSCOW.getOffset(0L) / DateTimeConstants.MILLIS_PER_HOUR;\n+    \n+    private long MILLIS_OF_DAY =\n+        10L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 20L * DateTimeConstants.MILLIS_PER_MINUTE\n+        + 30L * DateTimeConstants.MILLIS_PER_SECOND\n+        + 40L;\n+    private long TEST_TIME_NOW =\n+        (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + MILLIS_OF_DAY;\n+\n+    private long TEST_TIME1 =\n+        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    private long TEST_TIME2 =\n+        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+\n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestLocalDateTime_Constructors.class);\n+    }\n+\n+    public TestLocalDateTime_Constructors(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(MOSCOW);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_FromCalendarFields() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n+        cal.set(Calendar.MILLISECOND, 7);\n+        LocalDateTime expected = new LocalDateTime(1970, 2, 3, 4, 5, 6, 7);\n+        assertEquals(expected, LocalDateTime.fromCalendarFields(cal));\n+        try {\n+            LocalDateTime.fromCalendarFields((Calendar) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_FromDateFields() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n+        cal.set(Calendar.MILLISECOND, 7);\n+        LocalDateTime expected = new LocalDateTime(1970, 2, 3, 4, 5 ,6, 7);\n+        assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));\n+        try {\n+            LocalDateTime.fromDateFields((Date) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor() throws Throwable {\n+        LocalDateTime test = new LocalDateTime();\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(10 + OFFSET_MOSCOW, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_DateTimeZone() throws Throwable {\n+        DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        // 23:59 in London is 00:59 the following day in Paris\n+        \n+        LocalDateTime test = new LocalDateTime(LONDON);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(2005, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(8, test.getDayOfMonth());\n+        assertEquals(23, test.getHourOfDay());\n+        assertEquals(59, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+        \n+        test = new LocalDateTime(PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(2005, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(0, test.getHourOfDay());\n+        assertEquals(59, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_nullDateTimeZone() throws Throwable {\n+        LocalDateTime test = new LocalDateTime((DateTimeZone) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(10 + OFFSET_MOSCOW, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_Chronology() throws Throwable {\n+        LocalDateTime test = new LocalDateTime(GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(10 + OFFSET_PARIS, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_nullChronology() throws Throwable {\n+        LocalDateTime test = new LocalDateTime((Chronology) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(10 + OFFSET_MOSCOW, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long1() throws Throwable {\n+        LocalDateTime test = new LocalDateTime(TEST_TIME1);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+        assertEquals(12 + OFFSET_MOSCOW, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_long2() throws Throwable {\n+        LocalDateTime test = new LocalDateTime(TEST_TIME2);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1971, test.getYear());\n+        assertEquals(5, test.getMonthOfYear());\n+        assertEquals(7, test.getDayOfMonth());\n+        assertEquals(14 + OFFSET_MOSCOW, test.getHourOfDay());\n+        assertEquals(28, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long1_DateTimeZone() throws Throwable {\n+        LocalDateTime test = new LocalDateTime(TEST_TIME1, PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+        assertEquals(12 + OFFSET_PARIS, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_long2_DateTimeZone() throws Throwable {\n+        LocalDateTime test = new LocalDateTime(TEST_TIME2, PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1971, test.getYear());\n+        assertEquals(5, test.getMonthOfYear());\n+        assertEquals(7, test.getDayOfMonth());\n+        assertEquals(14 + OFFSET_PARIS, test.getHourOfDay());\n+        assertEquals(28, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_long_nullDateTimeZone() throws Throwable {\n+        LocalDateTime test = new LocalDateTime(TEST_TIME1, (DateTimeZone) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+        assertEquals(12 + OFFSET_MOSCOW, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long1_Chronology() throws Throwable {\n+        LocalDateTime test = new LocalDateTime(TEST_TIME1, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+        assertEquals(12 + OFFSET_PARIS, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_long2_Chronology() throws Throwable {\n+        LocalDateTime test = new LocalDateTime(TEST_TIME2, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1971, test.getYear());\n+        assertEquals(5, test.getMonthOfYear());\n+        assertEquals(7, test.getDayOfMonth());\n+        assertEquals(14 + OFFSET_PARIS, test.getHourOfDay());\n+        assertEquals(28, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_long_nullChronology() throws Throwable {\n+        LocalDateTime test = new LocalDateTime(TEST_TIME1, (Chronology) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+        assertEquals(12 + OFFSET_MOSCOW, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_Object1() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        LocalDateTime test = new LocalDateTime(date);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+        assertEquals(12 + OFFSET_MOSCOW, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_nullObject() throws Throwable {\n+        LocalDateTime test = new LocalDateTime((Object) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(10 + OFFSET_MOSCOW, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_Object_DateTimeZone() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        LocalDateTime test = new LocalDateTime(date, PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+        assertEquals(12 + OFFSET_PARIS, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_nullObject_DateTimeZone() throws Throwable {\n+        LocalDateTime test = new LocalDateTime((Object) null, PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(10 + OFFSET_PARIS, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_Object_nullDateTimeZone() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        LocalDateTime test = new LocalDateTime(date, (DateTimeZone) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+        assertEquals(12 + OFFSET_MOSCOW, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_nullObject_nullDateTimeZone() throws Throwable {\n+        LocalDateTime test = new LocalDateTime((Object) null, (DateTimeZone) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(10 + OFFSET_MOSCOW, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_Object_Chronology() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        LocalDateTime test = new LocalDateTime(date, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+        assertEquals(12 + OFFSET_PARIS, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_nullObject_Chronology() throws Throwable {\n+        LocalDateTime test = new LocalDateTime((Object) null, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(10 + OFFSET_PARIS, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_Object_nullChronology() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        LocalDateTime test = new LocalDateTime(date, (Chronology) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+        assertEquals(12 + OFFSET_MOSCOW, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_nullObject_nullChronology() throws Throwable {\n+        LocalDateTime test = new LocalDateTime((Object) null, (Chronology) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(10 + OFFSET_MOSCOW, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_int_int_int_int_int() throws Throwable {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(2005, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_int_int_int_int_int_int() throws Throwable {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(2005, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_int_int_int_int_int_int_int() throws Throwable {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(2005, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+        try {\n+            new LocalDateTime(Integer.MIN_VALUE, 6, 9, 10, 20, 30, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDateTime(Integer.MAX_VALUE, 6, 9, 10, 20, 30, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDateTime(2005, 0, 9, 10, 20, 30, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDateTime(2005, 13, 9, 10, 20, 30, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDateTime(2005, 6, 0, 10, 20, 30, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDateTime(2005, 6, 31, 10, 20, 30, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        new LocalDateTime(2005, 7, 31, 10, 20, 30, 40);\n+        try {\n+            new LocalDateTime(2005, 7, 32, 10, 20, 30, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_int_int_int_Chronology() throws Throwable {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(2005, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(10, test.getHourOfDay());  // PARIS has no effect\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+        try {\n+            new LocalDateTime(Integer.MIN_VALUE, 6, 9, 10, 20, 30, 40, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDateTime(Integer.MAX_VALUE, 6, 9, 10, 20, 30, 40, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDateTime(2005, 0, 9, 10, 20, 30, 40, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDateTime(2005, 13, 9, 10, 20, 30, 40, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDateTime(2005, 6, 0, 10, 20, 30, 40, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDateTime(2005, 6, 31, 10, 20, 30, 40, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        new LocalDateTime(2005, 7, 31, 10, 20, 30, 40, GREGORIAN_PARIS);\n+        try {\n+            new LocalDateTime(2005, 7, 32, 10, 20, 30, 40, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_int_int_int_nullChronology() throws Throwable {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(2005, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/TestLocalDateTime_Properties.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.CopticChronology;\n+\n+/**\n+ * This class is a Junit unit test for LocalDateTime.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestLocalDateTime_Properties extends TestCase {\n+\n+    private static final CopticChronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+\n+    private int MILLIS_OF_DAY =\n+        (int) (10L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 20L * DateTimeConstants.MILLIS_PER_MINUTE\n+        + 30L * DateTimeConstants.MILLIS_PER_SECOND\n+        + 40L);\n+    private long TEST_TIME_NOW =\n+        (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + MILLIS_OF_DAY;\n+    private long TEST_TIME1 =\n+        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 1L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 2L * DateTimeConstants.MILLIS_PER_MINUTE\n+        + 3L * DateTimeConstants.MILLIS_PER_SECOND\n+        + 4L;\n+    private long TEST_TIME2 =\n+        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 4L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 5L * DateTimeConstants.MILLIS_PER_MINUTE\n+        + 6L * DateTimeConstants.MILLIS_PER_SECOND\n+        + 7L;\n+\n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestLocalDateTime_Properties.class);\n+    }\n+\n+    public TestLocalDateTime_Properties(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetYear() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        assertSame(test.getChronology().year(), test.year().getField());\n+        assertEquals(\"year\", test.year().getName());\n+        assertEquals(\"Property[year]\", test.year().toString());\n+        assertSame(test, test.year().getLocalDateTime());\n+        assertEquals(1972, test.year().get());\n+        assertEquals(\"1972\", test.year().getAsString());\n+        assertEquals(\"1972\", test.year().getAsText());\n+        assertEquals(\"1972\", test.year().getAsText(Locale.FRENCH));\n+        assertEquals(\"1972\", test.year().getAsShortText());\n+        assertEquals(\"1972\", test.year().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().years(), test.year().getDurationField());\n+        assertEquals(null, test.year().getRangeDurationField());\n+        assertEquals(9, test.year().getMaximumTextLength(null));\n+        assertEquals(9, test.year().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesYear() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        assertEquals(-292275054, test.year().getMinimumValue());\n+        assertEquals(-292275054, test.year().getMinimumValueOverall());\n+        assertEquals(292278993, test.year().getMaximumValue());\n+        assertEquals(292278993, test.year().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyPlusYear() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.year().plus(9);\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+        check(copy, 1981, 6, 9, 10, 20, 30, 40);\n+        \n+        copy = test.year().plus(0);\n+        check(copy, 1972, 6, 9, 10, 20, 30, 40);\n+        \n+        copy = test.year().plus(292278993 - 1972);\n+        check(copy, 292278993, 6, 9, 10, 20, 30, 40);\n+        \n+        try {\n+            test.year().plus(292278993 - 1972 + 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+        \n+        copy = test.year().plus(-1972);\n+        check(copy, 0, 6, 9, 10, 20, 30, 40);\n+        \n+        copy = test.year().plus(-1973);\n+        check(copy, -1, 6, 9, 10, 20, 30, 40);\n+        \n+        try {\n+            test.year().plus(-292275054 - 1972 - 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyPlusWrapFieldYear() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.year().plusWrapField(9);\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+        check(copy, 1981, 6, 9, 10, 20, 30, 40);\n+        \n+        copy = test.year().plusWrapField(0);\n+        check(copy, 1972, 6, 9, 10, 20, 30, 40);\n+        \n+        copy = test.year().plusWrapField(292278993 - 1972 + 1);\n+        check(copy, -292275054, 6, 9, 10, 20, 30, 40);\n+        \n+        copy = test.year().plusWrapField(-292275054 - 1972 - 1);\n+        check(copy, 292278993, 6, 9, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyWithYear() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.year().withValue(12);\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+        check(copy, 12, 6, 9, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyWithTextYear() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.year().withValue(\"12\");\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+        check(copy, 12, 6, 9, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyCompareToYear() {\n+        LocalDateTime test1 = new LocalDateTime(TEST_TIME1);\n+        LocalDateTime test2 = new LocalDateTime(TEST_TIME2);\n+        assertEquals(true, test1.year().compareTo(test2) < 0);\n+        assertEquals(true, test2.year().compareTo(test1) > 0);\n+        assertEquals(true, test1.year().compareTo(test1) == 0);\n+        try {\n+            test1.year().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.year().compareTo(dt2) < 0);\n+        assertEquals(true, test2.year().compareTo(dt1) > 0);\n+        assertEquals(true, test1.year().compareTo(dt1) == 0);\n+        try {\n+            test1.year().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMonth() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField());\n+        assertEquals(\"monthOfYear\", test.monthOfYear().getName());\n+        assertEquals(\"Property[monthOfYear]\", test.monthOfYear().toString());\n+        assertSame(test, test.monthOfYear().getLocalDateTime());\n+        assertEquals(6, test.monthOfYear().get());\n+        assertEquals(\"6\", test.monthOfYear().getAsString());\n+        assertEquals(\"June\", test.monthOfYear().getAsText());\n+        assertEquals(\"juin\", test.monthOfYear().getAsText(Locale.FRENCH));\n+        assertEquals(\"Jun\", test.monthOfYear().getAsShortText());\n+        assertEquals(\"juin\", test.monthOfYear().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField());\n+        assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField());\n+        assertEquals(9, test.monthOfYear().getMaximumTextLength(null));\n+        assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null));\n+        test = new LocalDateTime(1972, 7, 9, 10, 20, 30, 40);\n+        assertEquals(\"juillet\", test.monthOfYear().getAsText(Locale.FRENCH));\n+        assertEquals(\"juil.\", test.monthOfYear().getAsShortText(Locale.FRENCH));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesMonth() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        assertEquals(1, test.monthOfYear().getMinimumValue());\n+        assertEquals(1, test.monthOfYear().getMinimumValueOverall());\n+        assertEquals(12, test.monthOfYear().getMaximumValue());\n+        assertEquals(12, test.monthOfYear().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyPlusMonth() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.monthOfYear().plus(6);\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+        check(copy, 1972, 12, 9, 10, 20, 30, 40);\n+        \n+        copy = test.monthOfYear().plus(7);\n+        check(copy, 1973, 1, 9, 10, 20, 30, 40);\n+        \n+        copy = test.monthOfYear().plus(-5);\n+        check(copy, 1972, 1, 9, 10, 20, 30, 40);\n+        \n+        copy = test.monthOfYear().plus(-6);\n+        check(copy, 1971, 12, 9, 10, 20, 30, 40);\n+        \n+        test = new LocalDateTime(1972, 1, 31, 10, 20, 30, 40);\n+        copy = test.monthOfYear().plus(1);\n+        check(copy, 1972, 2, 29, 10, 20, 30, 40);\n+        \n+        copy = test.monthOfYear().plus(2);\n+        check(copy, 1972, 3, 31, 10, 20, 30, 40);\n+        \n+        copy = test.monthOfYear().plus(3);\n+        check(copy, 1972, 4, 30, 10, 20, 30, 40);\n+        \n+        test = new LocalDateTime(1971, 1, 31, 10, 20, 30, 40);\n+        copy = test.monthOfYear().plus(1);\n+        check(copy, 1971, 2, 28, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyPlusWrapFieldMonth() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.monthOfYear().plusWrapField(4);\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+        check(copy, 1972, 10, 9, 10, 20, 30, 40);\n+        \n+        copy = test.monthOfYear().plusWrapField(8);\n+        check(copy, 1972, 2, 9, 10, 20, 30, 40);\n+        \n+        copy = test.monthOfYear().plusWrapField(-8);\n+        check(copy, 1972, 10, 9, 10, 20, 30, 40);\n+        \n+        test = new LocalDateTime(1972, 1, 31, 10, 20, 30, 40);\n+        copy = test.monthOfYear().plusWrapField(1);\n+        check(copy, 1972, 2, 29, 10, 20, 30, 40);\n+        \n+        copy = test.monthOfYear().plusWrapField(2);\n+        check(copy, 1972, 3, 31, 10, 20, 30, 40);\n+        \n+        copy = test.monthOfYear().plusWrapField(3);\n+        check(copy, 1972, 4, 30, 10, 20, 30, 40);\n+        \n+        test = new LocalDateTime(1971, 1, 31, 10, 20, 30, 40);\n+        copy = test.monthOfYear().plusWrapField(1);\n+        check(copy, 1971, 2, 28, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyWithMonth() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.monthOfYear().withValue(12);\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+        check(copy, 1972, 12, 9, 10, 20, 30, 40);\n+        \n+        test = new LocalDateTime(1972, 1, 31, 10, 20, 30, 40);\n+        copy = test.monthOfYear().withValue(2);\n+        check(copy, 1972, 2, 29, 10, 20, 30, 40);\n+        \n+        try {\n+            test.monthOfYear().withValue(13);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.monthOfYear().withValue(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertyWithTextMonth() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.monthOfYear().withValue(\"12\");\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+        check(copy, 1972, 12, 9, 10, 20, 30, 40);\n+        \n+        copy = test.monthOfYear().withValue(\"December\");\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+        check(copy, 1972, 12, 9, 10, 20, 30, 40);\n+        \n+        copy = test.monthOfYear().withValue(\"Dec\");\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+        check(copy, 1972, 12, 9, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyCompareToMonth() {\n+        LocalDateTime test1 = new LocalDateTime(TEST_TIME1);\n+        LocalDateTime test2 = new LocalDateTime(TEST_TIME2);\n+        assertEquals(true, test1.monthOfYear().compareTo(test2) < 0);\n+        assertEquals(true, test2.monthOfYear().compareTo(test1) > 0);\n+        assertEquals(true, test1.monthOfYear().compareTo(test1) == 0);\n+        try {\n+            test1.monthOfYear().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0);\n+        assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0);\n+        assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0);\n+        try {\n+            test1.monthOfYear().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetDay() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField());\n+        assertEquals(\"dayOfMonth\", test.dayOfMonth().getName());\n+        assertEquals(\"Property[dayOfMonth]\", test.dayOfMonth().toString());\n+        assertSame(test, test.dayOfMonth().getLocalDateTime());\n+        assertEquals(9, test.dayOfMonth().get());\n+        assertEquals(\"9\", test.dayOfMonth().getAsString());\n+        assertEquals(\"9\", test.dayOfMonth().getAsText());\n+        assertEquals(\"9\", test.dayOfMonth().getAsText(Locale.FRENCH));\n+        assertEquals(\"9\", test.dayOfMonth().getAsShortText());\n+        assertEquals(\"9\", test.dayOfMonth().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField());\n+        assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField());\n+        assertEquals(2, test.dayOfMonth().getMaximumTextLength(null));\n+        assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesDay() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        assertEquals(1, test.dayOfMonth().getMinimumValue());\n+        assertEquals(1, test.dayOfMonth().getMinimumValueOverall());\n+        assertEquals(30, test.dayOfMonth().getMaximumValue());\n+        assertEquals(31, test.dayOfMonth().getMaximumValueOverall());\n+        test = new LocalDateTime(1972, 7, 9, 10, 20, 30, 40);\n+        assertEquals(31, test.dayOfMonth().getMaximumValue());\n+        test = new LocalDateTime(1972, 2, 9, 10, 20, 30, 40);\n+        assertEquals(29, test.dayOfMonth().getMaximumValue());\n+        test = new LocalDateTime(1971, 2, 9, 10, 20, 30, 40);\n+        assertEquals(28, test.dayOfMonth().getMaximumValue());\n+    }\n+\n+    public void testPropertyPlusDay() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.dayOfMonth().plus(9);\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+        check(copy, 1972, 6, 18, 10, 20, 30, 40);\n+        \n+        copy = test.dayOfMonth().plus(21);\n+        check(copy, 1972, 6, 30, 10, 20, 30, 40);\n+        \n+        copy = test.dayOfMonth().plus(22);\n+        check(copy, 1972, 7, 1, 10, 20, 30, 40);\n+        \n+        copy = test.dayOfMonth().plus(22 + 30);\n+        check(copy, 1972, 7, 31, 10, 20, 30, 40);\n+        \n+        copy = test.dayOfMonth().plus(22 + 31);\n+        check(copy, 1972, 8, 1, 10, 20, 30, 40);\n+\n+        copy = test.dayOfMonth().plus(21 + 31 + 31 + 30 + 31 + 30 + 31);\n+        check(copy, 1972, 12, 31, 10, 20, 30, 40);\n+        \n+        copy = test.dayOfMonth().plus(22 + 31 + 31 + 30 + 31 + 30 + 31);\n+        check(copy, 1973, 1, 1, 10, 20, 30, 40);\n+        \n+        copy = test.dayOfMonth().plus(-8);\n+        check(copy, 1972, 6, 1, 10, 20, 30, 40);\n+        \n+        copy = test.dayOfMonth().plus(-9);\n+        check(copy, 1972, 5, 31, 10, 20, 30, 40);\n+        \n+        copy = test.dayOfMonth().plus(-8 - 31 - 30 - 31 - 29 - 31);\n+        check(copy, 1972, 1, 1, 10, 20, 30, 40);\n+        \n+        copy = test.dayOfMonth().plus(-9 - 31 - 30 - 31 - 29 - 31);\n+        check(copy, 1971, 12, 31, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyPlusWrapFieldDay() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.dayOfMonth().plusWrapField(21);\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+        check(copy, 1972, 6, 30, 10, 20, 30, 40);\n+        \n+        copy = test.dayOfMonth().plusWrapField(22);\n+        check(copy, 1972, 6, 1, 10, 20, 30, 40);\n+        \n+        copy = test.dayOfMonth().plusWrapField(-12);\n+        check(copy, 1972, 6, 27, 10, 20, 30, 40);\n+        \n+        test = new LocalDateTime(1972, 7, 9, 10, 20, 30, 40);\n+        copy = test.dayOfMonth().plusWrapField(21);\n+        check(copy, 1972, 7, 30, 10, 20, 30, 40);\n+    \n+        copy = test.dayOfMonth().plusWrapField(22);\n+        check(copy, 1972, 7, 31, 10, 20, 30, 40);\n+    \n+        copy = test.dayOfMonth().plusWrapField(23);\n+        check(copy, 1972, 7, 1, 10, 20, 30, 40);\n+    \n+        copy = test.dayOfMonth().plusWrapField(-12);\n+        check(copy, 1972, 7, 28, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyWithDay() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.dayOfMonth().withValue(12);\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+        check(copy, 1972, 6, 12, 10, 20, 30, 40);\n+        \n+        try {\n+            test.dayOfMonth().withValue(31);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.dayOfMonth().withValue(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertyWithTextDay() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.dayOfMonth().withValue(\"12\");\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+        check(copy, 1972, 6, 12, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyWithMaximumValueDayOfMonth() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.dayOfMonth().withMaximumValue();\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+        check(copy, 1972, 6, 30, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyWithMinimumValueDayOfMonth() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.dayOfMonth().withMinimumValue();\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+        check(copy, 1972, 6, 1, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyCompareToDay() {\n+        LocalDateTime test1 = new LocalDateTime(TEST_TIME1);\n+        LocalDateTime test2 = new LocalDateTime(TEST_TIME2);\n+        assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0);\n+        assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0);\n+        assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0);\n+        try {\n+            test1.dayOfMonth().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0);\n+        assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0);\n+        assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0);\n+        try {\n+            test1.dayOfMonth().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertyEquals() {\n+        LocalDateTime test1 = new LocalDateTime(2005, 11, 8, 10, 20, 30, 40);\n+        LocalDateTime test2 = new LocalDateTime(2005, 11, 9, 10, 20, 30, 40);\n+        LocalDateTime test3 = new LocalDateTime(2005, 11, 8, 10, 20, 30, 40, COPTIC_UTC);\n+        assertEquals(false, test1.dayOfMonth().equals(test1.year()));\n+        assertEquals(false, test1.dayOfMonth().equals(test1.monthOfYear()));\n+        assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));\n+        assertEquals(false, test1.dayOfMonth().equals(test2.year()));\n+        assertEquals(false, test1.dayOfMonth().equals(test2.monthOfYear()));\n+        assertEquals(false, test1.dayOfMonth().equals(test2.dayOfMonth()));\n+        \n+        assertEquals(false, test1.monthOfYear().equals(test1.year()));\n+        assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear()));\n+        assertEquals(false, test1.monthOfYear().equals(test1.dayOfMonth()));\n+        assertEquals(false, test1.monthOfYear().equals(test2.year()));\n+        assertEquals(true, test1.monthOfYear().equals(test2.monthOfYear()));\n+        assertEquals(false, test1.monthOfYear().equals(test2.dayOfMonth()));\n+        \n+        assertEquals(false, test1.dayOfMonth().equals(null));\n+        assertEquals(false, test1.dayOfMonth().equals(\"any\"));\n+        \n+        // chrono\n+        assertEquals(false, test1.dayOfMonth().equals(test3.dayOfMonth()));\n+    }\n+\n+    public void testPropertyHashCode() {\n+        LocalDateTime test1 = new LocalDateTime(2005, 11, 8, 10, 20, 30, 40);\n+        LocalDateTime test2 = new LocalDateTime(2005, 11, 9, 10, 20, 30, 40);\n+        assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());\n+        assertEquals(false, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());\n+        assertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode());\n+        assertEquals(true, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetHour() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField());\n+        assertEquals(\"hourOfDay\", test.hourOfDay().getName());\n+        assertEquals(\"Property[hourOfDay]\", test.hourOfDay().toString());\n+        assertSame(test, test.hourOfDay().getLocalDateTime());\n+        assertEquals(10, test.hourOfDay().get());\n+        assertEquals(\"10\", test.hourOfDay().getAsString());\n+        assertEquals(\"10\", test.hourOfDay().getAsText());\n+        assertEquals(\"10\", test.hourOfDay().getAsText(Locale.FRENCH));\n+        assertEquals(\"10\", test.hourOfDay().getAsShortText());\n+        assertEquals(\"10\", test.hourOfDay().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField());\n+        assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField());\n+        assertEquals(2, test.hourOfDay().getMaximumTextLength(null));\n+        assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyRoundHour() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20);\n+        check(test.hourOfDay().roundCeiling(), 2005, 6, 9, 11, 0, 0, 0);\n+        check(test.hourOfDay().roundFloor(), 2005, 6, 9, 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfCeiling(), 2005, 6, 9, 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfFloor(), 2005, 6, 9, 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfEven(), 2005, 6, 9, 10, 0, 0, 0);\n+        \n+        test = new LocalDateTime(2005, 6, 9, 10, 40);\n+        check(test.hourOfDay().roundCeiling(), 2005, 6, 9, 11, 0, 0, 0);\n+        check(test.hourOfDay().roundFloor(), 2005, 6, 9, 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfCeiling(), 2005, 6, 9, 11, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfFloor(), 2005, 6, 9, 11, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfEven(), 2005, 6, 9, 11, 0, 0, 0);\n+        \n+        test = new LocalDateTime(2005, 6, 9, 10, 30);\n+        check(test.hourOfDay().roundCeiling(), 2005, 6, 9, 11, 0, 0, 0);\n+        check(test.hourOfDay().roundFloor(), 2005, 6, 9, 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfCeiling(), 2005, 6, 9, 11, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfFloor(), 2005, 6, 9, 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfEven(), 2005, 6, 9, 10, 0, 0, 0);\n+        \n+        test = new LocalDateTime(2005, 6, 9, 11, 30);\n+        check(test.hourOfDay().roundCeiling(), 2005, 6, 9, 12, 0, 0, 0);\n+        check(test.hourOfDay().roundFloor(), 2005, 6, 9, 11, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfCeiling(), 2005, 6, 9, 12, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfFloor(), 2005, 6, 9, 11, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfEven(), 2005, 6, 9, 12, 0, 0, 0);\n+    }\n+\n+    public void testPropertyGetMaxMinValuesHour() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        assertEquals(0, test.hourOfDay().getMinimumValue());\n+        assertEquals(0, test.hourOfDay().getMinimumValueOverall());\n+        assertEquals(23, test.hourOfDay().getMaximumValue());\n+        assertEquals(23, test.hourOfDay().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyWithMaxMinValueHour() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 0, 20, 30, 40);\n+        check(test.hourOfDay().withMaximumValue(), 2005, 6, 9, 23, 20, 30, 40);\n+        check(test.hourOfDay().withMinimumValue(), 2005, 6, 9, 0, 20, 30, 40);\n+    }\n+\n+    public void testPropertyPlusHour() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.hourOfDay().plus(9);\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 19, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().plus(0);\n+        check(copy, 2005, 6, 9, 10, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().plus(13);\n+        check(copy, 2005, 6, 9, 23, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().plus(14);\n+        check(copy, 2005, 6, 10, 0, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().plus(-10);\n+        check(copy, 2005, 6, 9, 0, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().plus(-11);\n+        check(copy, 2005, 6, 8, 23, 20, 30, 40);\n+    }\n+\n+    public void testPropertyPlusWrapFieldHour() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.hourOfDay().plusWrapField(9);\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 19, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().plusWrapField(0);\n+        check(copy, 2005, 6, 9, 10, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().plusWrapField(18);\n+        check(copy, 2005, 6, 9, 4, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().plusWrapField(-15);\n+        check(copy, 2005, 6, 9, 19, 20, 30, 40);\n+    }\n+\n+    public void testPropertySetHour() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.hourOfDay().withValue(12);\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 12, 20, 30, 40);\n+        \n+        try {\n+            test.hourOfDay().withValue(24);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.hourOfDay().withValue(-1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextHour() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.hourOfDay().withValue(\"12\");\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 12, 20, 30, 40);\n+    }\n+\n+    public void testPropertyWithMaximumValueHour() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.hourOfDay().withMaximumValue();\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 23, 20, 30, 40);\n+    }\n+\n+    public void testPropertyWithMinimumValueHour() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.hourOfDay().withMinimumValue();\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 0, 20, 30, 40);\n+    }\n+\n+    public void testPropertyCompareToHour() {\n+        LocalDateTime test1 = new LocalDateTime(TEST_TIME1);\n+        LocalDateTime test2 = new LocalDateTime(TEST_TIME2);\n+        assertEquals(true, test1.hourOfDay().compareTo(test2) < 0);\n+        assertEquals(true, test2.hourOfDay().compareTo(test1) > 0);\n+        assertEquals(true, test1.hourOfDay().compareTo(test1) == 0);\n+        try {\n+            test1.hourOfDay().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.hourOfDay().compareTo(dt2) < 0);\n+        assertEquals(true, test2.hourOfDay().compareTo(dt1) > 0);\n+        assertEquals(true, test1.hourOfDay().compareTo(dt1) == 0);\n+        try {\n+            test1.hourOfDay().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMinute() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField());\n+        assertEquals(\"minuteOfHour\", test.minuteOfHour().getName());\n+        assertEquals(\"Property[minuteOfHour]\", test.minuteOfHour().toString());\n+        assertSame(test, test.minuteOfHour().getLocalDateTime());\n+        assertEquals(20, test.minuteOfHour().get());\n+        assertEquals(\"20\", test.minuteOfHour().getAsString());\n+        assertEquals(\"20\", test.minuteOfHour().getAsText());\n+        assertEquals(\"20\", test.minuteOfHour().getAsText(Locale.FRENCH));\n+        assertEquals(\"20\", test.minuteOfHour().getAsShortText());\n+        assertEquals(\"20\", test.minuteOfHour().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField());\n+        assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField());\n+        assertEquals(2, test.minuteOfHour().getMaximumTextLength(null));\n+        assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesMinute() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        assertEquals(0, test.minuteOfHour().getMinimumValue());\n+        assertEquals(0, test.minuteOfHour().getMinimumValueOverall());\n+        assertEquals(59, test.minuteOfHour().getMaximumValue());\n+        assertEquals(59, test.minuteOfHour().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyWithMaxMinValueMinute() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        check(test.minuteOfHour().withMaximumValue(), 2005, 6, 9, 10, 59, 30, 40);\n+        check(test.minuteOfHour().withMinimumValue(), 2005, 6, 9, 10, 0, 30, 40);\n+    }\n+\n+    public void testPropertyPlusMinute() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.minuteOfHour().plus(9);\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 10, 29, 30, 40);\n+        \n+        copy = test.minuteOfHour().plus(39);\n+        check(copy, 2005, 6, 9, 10, 59, 30, 40);\n+        \n+        copy = test.minuteOfHour().plus(40);\n+        check(copy, 2005, 6, 9, 11, 0, 30, 40);\n+        \n+        copy = test.minuteOfHour().plus(1 * 60 + 45);\n+        check(copy, 2005, 6, 9, 12, 5, 30, 40);\n+        \n+        copy = test.minuteOfHour().plus(13 * 60 + 39);\n+        check(copy, 2005, 6, 9, 23, 59, 30, 40);\n+        \n+        copy = test.minuteOfHour().plus(13 * 60 + 40);\n+        check(copy, 2005, 6, 10, 0, 0, 30, 40);\n+        \n+        copy = test.minuteOfHour().plus(-9);\n+        check(copy, 2005, 6, 9, 10, 11, 30, 40);\n+        \n+        copy = test.minuteOfHour().plus(-19);\n+        check(copy, 2005, 6, 9, 10, 1, 30, 40);\n+        \n+        copy = test.minuteOfHour().plus(-20);\n+        check(copy, 2005, 6, 9, 10, 0, 30, 40);\n+        \n+        copy = test.minuteOfHour().plus(-21);\n+        check(copy, 2005, 6, 9, 9, 59, 30, 40);\n+        \n+        copy = test.minuteOfHour().plus(-(10 * 60 + 20));\n+        check(copy, 2005, 6, 9, 0, 0, 30, 40);\n+        \n+        copy = test.minuteOfHour().plus(-(10 * 60 + 21));\n+        check(copy, 2005, 6, 8, 23, 59, 30, 40);\n+    }\n+\n+    public void testPropertyPlusWrapFieldMinute() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.minuteOfHour().plusWrapField(9);\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 10, 29, 30, 40);\n+        \n+        copy = test.minuteOfHour().plusWrapField(49);\n+        check(copy, 2005, 6, 9, 10, 9, 30, 40);\n+        \n+        copy = test.minuteOfHour().plusWrapField(-47);\n+        check(copy, 2005, 6, 9, 10, 33, 30, 40);\n+    }\n+\n+    public void testPropertySetMinute() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.minuteOfHour().withValue(12);\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 10, 12, 30, 40);\n+        \n+        try {\n+            test.minuteOfHour().withValue(60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.minuteOfHour().withValue(-1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextMinute() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.minuteOfHour().withValue(\"12\");\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 10, 12, 30, 40);\n+    }\n+\n+    public void testPropertyCompareToMinute() {\n+        LocalDateTime test1 = new LocalDateTime(TEST_TIME1);\n+        LocalDateTime test2 = new LocalDateTime(TEST_TIME2);\n+        assertEquals(true, test1.minuteOfHour().compareTo(test2) < 0);\n+        assertEquals(true, test2.minuteOfHour().compareTo(test1) > 0);\n+        assertEquals(true, test1.minuteOfHour().compareTo(test1) == 0);\n+        try {\n+            test1.minuteOfHour().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.minuteOfHour().compareTo(dt2) < 0);\n+        assertEquals(true, test2.minuteOfHour().compareTo(dt1) > 0);\n+        assertEquals(true, test1.minuteOfHour().compareTo(dt1) == 0);\n+        try {\n+            test1.minuteOfHour().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetSecond() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        assertSame(test.getChronology().secondOfMinute(), test.secondOfMinute().getField());\n+        assertEquals(\"secondOfMinute\", test.secondOfMinute().getName());\n+        assertEquals(\"Property[secondOfMinute]\", test.secondOfMinute().toString());\n+        assertSame(test, test.secondOfMinute().getLocalDateTime());\n+        assertEquals(30, test.secondOfMinute().get());\n+        assertEquals(\"30\", test.secondOfMinute().getAsString());\n+        assertEquals(\"30\", test.secondOfMinute().getAsText());\n+        assertEquals(\"30\", test.secondOfMinute().getAsText(Locale.FRENCH));\n+        assertEquals(\"30\", test.secondOfMinute().getAsShortText());\n+        assertEquals(\"30\", test.secondOfMinute().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().seconds(), test.secondOfMinute().getDurationField());\n+        assertEquals(test.getChronology().minutes(), test.secondOfMinute().getRangeDurationField());\n+        assertEquals(2, test.secondOfMinute().getMaximumTextLength(null));\n+        assertEquals(2, test.secondOfMinute().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesSecond() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        assertEquals(0, test.secondOfMinute().getMinimumValue());\n+        assertEquals(0, test.secondOfMinute().getMinimumValueOverall());\n+        assertEquals(59, test.secondOfMinute().getMaximumValue());\n+        assertEquals(59, test.secondOfMinute().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyWithMaxMinValueSecond() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        check(test.secondOfMinute().withMaximumValue(), 2005, 6, 9, 10, 20, 59, 40);\n+        check(test.secondOfMinute().withMinimumValue(), 2005, 6, 9, 10, 20, 0, 40);\n+    }\n+\n+    public void testPropertyPlusSecond() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.secondOfMinute().plus(9);\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 10, 20, 39, 40);\n+        \n+        copy = test.secondOfMinute().plus(29);\n+        check(copy, 2005, 6, 9, 10, 20, 59, 40);\n+        \n+        copy = test.secondOfMinute().plus(30);\n+        check(copy, 2005, 6, 9, 10, 21, 0, 40);\n+        \n+        copy = test.secondOfMinute().plus(39 * 60 + 29);\n+        check(copy, 2005, 6, 9, 10, 59, 59, 40);\n+        \n+        copy = test.secondOfMinute().plus(39 * 60 + 30);\n+        check(copy, 2005, 6, 9, 11, 0, 0, 40);\n+        \n+        copy = test.secondOfMinute().plus(13 * 60 * 60 + 39 * 60 + 30);\n+        check(copy, 2005, 6, 10, 0, 0, 0, 40);\n+        \n+        copy = test.secondOfMinute().plus(-9);\n+        check(copy, 2005, 6, 9, 10, 20, 21, 40);\n+        \n+        copy = test.secondOfMinute().plus(-30);\n+        check(copy, 2005, 6, 9, 10, 20, 0, 40);\n+        \n+        copy = test.secondOfMinute().plus(-31);\n+        check(copy, 2005, 6, 9, 10, 19, 59, 40);\n+        \n+        copy = test.secondOfMinute().plus(-(10 * 60 * 60 + 20 * 60 + 30));\n+        check(copy, 2005, 6, 9, 0, 0, 0, 40);\n+        \n+        copy = test.secondOfMinute().plus(-(10 * 60 * 60 + 20 * 60 + 31));\n+        check(copy, 2005, 6, 8, 23, 59, 59, 40);\n+    }\n+\n+    public void testPropertyPlusWrapFieldSecond() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.secondOfMinute().plusWrapField(9);\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 10, 20, 39, 40);\n+        \n+        copy = test.secondOfMinute().plusWrapField(49);\n+        check(copy, 2005, 6, 9, 10, 20, 19, 40);\n+        \n+        copy = test.secondOfMinute().plusWrapField(-47);\n+        check(copy, 2005, 6, 9, 10, 20, 43, 40);\n+    }\n+\n+    public void testPropertySetSecond() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.secondOfMinute().withValue(12);\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 10, 20, 12, 40);\n+        \n+        try {\n+            test.secondOfMinute().withValue(60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.secondOfMinute().withValue(-1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextSecond() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.secondOfMinute().withValue(\"12\");\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 10, 20, 12, 40);\n+    }\n+\n+    public void testPropertyCompareToSecond() {\n+        LocalDateTime test1 = new LocalDateTime(TEST_TIME1);\n+        LocalDateTime test2 = new LocalDateTime(TEST_TIME2);\n+        assertEquals(true, test1.secondOfMinute().compareTo(test2) < 0);\n+        assertEquals(true, test2.secondOfMinute().compareTo(test1) > 0);\n+        assertEquals(true, test1.secondOfMinute().compareTo(test1) == 0);\n+        try {\n+            test1.secondOfMinute().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.secondOfMinute().compareTo(dt2) < 0);\n+        assertEquals(true, test2.secondOfMinute().compareTo(dt1) > 0);\n+        assertEquals(true, test1.secondOfMinute().compareTo(dt1) == 0);\n+        try {\n+            test1.secondOfMinute().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMilli() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        assertSame(test.getChronology().millisOfSecond(), test.millisOfSecond().getField());\n+        assertEquals(\"millisOfSecond\", test.millisOfSecond().getName());\n+        assertEquals(\"Property[millisOfSecond]\", test.millisOfSecond().toString());\n+        assertSame(test, test.millisOfSecond().getLocalDateTime());\n+        assertEquals(40, test.millisOfSecond().get());\n+        assertEquals(\"40\", test.millisOfSecond().getAsString());\n+        assertEquals(\"40\", test.millisOfSecond().getAsText());\n+        assertEquals(\"40\", test.millisOfSecond().getAsText(Locale.FRENCH));\n+        assertEquals(\"40\", test.millisOfSecond().getAsShortText());\n+        assertEquals(\"40\", test.millisOfSecond().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().millis(), test.millisOfSecond().getDurationField());\n+        assertEquals(test.getChronology().seconds(), test.millisOfSecond().getRangeDurationField());\n+        assertEquals(3, test.millisOfSecond().getMaximumTextLength(null));\n+        assertEquals(3, test.millisOfSecond().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesMilli() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        assertEquals(0, test.millisOfSecond().getMinimumValue());\n+        assertEquals(0, test.millisOfSecond().getMinimumValueOverall());\n+        assertEquals(999, test.millisOfSecond().getMaximumValue());\n+        assertEquals(999, test.millisOfSecond().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyWithMaxMinValueMilli() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        check(test.millisOfSecond().withMaximumValue(), 2005, 6, 9, 10, 20, 30, 999);\n+        check(test.millisOfSecond().withMinimumValue(), 2005, 6, 9, 10, 20, 30, 0);\n+    }\n+\n+    public void testPropertyPlusMilli() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.millisOfSecond().plus(9);\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 10, 20, 30, 49);\n+        \n+        copy = test.millisOfSecond().plus(959);\n+        check(copy, 2005, 6, 9, 10, 20, 30, 999);\n+        \n+        copy = test.millisOfSecond().plus(960);\n+        check(copy, 2005, 6, 9, 10, 20, 31, 0);\n+        \n+        copy = test.millisOfSecond().plus(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959);\n+        check(copy, 2005, 6, 9, 23, 59, 59, 999);\n+        \n+        copy = test.millisOfSecond().plus(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960);\n+        check(copy, 2005, 6, 10, 0, 0, 0, 0);\n+        \n+        copy = test.millisOfSecond().plus(-9);\n+        check(copy, 2005, 6, 9, 10, 20, 30, 31);\n+        \n+        copy = test.millisOfSecond().plus(-40);\n+        check(copy, 2005, 6, 9, 10, 20, 30, 0);\n+        \n+        copy = test.millisOfSecond().plus(-41);\n+        check(copy, 2005, 6, 9, 10, 20, 29, 999);\n+        \n+        copy = test.millisOfSecond().plus(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40));\n+        check(copy, 2005, 6, 9, 0, 0, 0, 0);\n+        \n+        copy = test.millisOfSecond().plus(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41));\n+        check(copy, 2005, 6, 8, 23, 59, 59, 999);\n+    }\n+\n+    public void testPropertyPlusWrapFieldMilli() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.millisOfSecond().plusWrapField(9);\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 10, 20, 30, 49);\n+        \n+        copy = test.millisOfSecond().plusWrapField(995);\n+        check(copy, 2005, 6, 9, 10, 20, 30, 35);\n+        \n+        copy = test.millisOfSecond().plusWrapField(-47);\n+        check(copy, 2005, 6, 9, 10, 20, 30, 993);\n+    }\n+\n+    public void testPropertySetMilli() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.millisOfSecond().withValue(12);\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 10, 20, 30, 12);\n+        \n+        try {\n+            test.millisOfSecond().withValue(1000);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.millisOfSecond().withValue(-1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextMilli() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.millisOfSecond().withValue(\"12\");\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 10, 20, 30, 12);\n+    }\n+\n+    public void testPropertyCompareToMilli() {\n+        LocalDateTime test1 = new LocalDateTime(TEST_TIME1);\n+        LocalDateTime test2 = new LocalDateTime(TEST_TIME2);\n+        assertEquals(true, test1.millisOfSecond().compareTo(test2) < 0);\n+        assertEquals(true, test2.millisOfSecond().compareTo(test1) > 0);\n+        assertEquals(true, test1.millisOfSecond().compareTo(test1) == 0);\n+        try {\n+            test1.millisOfSecond().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.millisOfSecond().compareTo(dt2) < 0);\n+        assertEquals(true, test2.millisOfSecond().compareTo(dt1) > 0);\n+        assertEquals(true, test1.millisOfSecond().compareTo(dt1) == 0);\n+        try {\n+            test1.millisOfSecond().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private void check(LocalDateTime test, int year, int month, int day, int hour, int min, int sec, int mil) {\n+        assertEquals(year, test.getYear());\n+        assertEquals(month, test.getMonthOfYear());\n+        assertEquals(day, test.getDayOfMonth());\n+        assertEquals(hour, test.getHourOfDay());\n+        assertEquals(min, test.getMinuteOfHour());\n+        assertEquals(sec, test.getSecondOfMinute());\n+        assertEquals(mil, test.getMillisOfSecond());\n+    }\n+}", "timestamp": 1143902021, "metainfo": ""}