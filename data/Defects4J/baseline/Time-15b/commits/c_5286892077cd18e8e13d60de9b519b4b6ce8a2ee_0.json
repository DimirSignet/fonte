{"sha": "5286892077cd18e8e13d60de9b519b4b6ce8a2ee", "log": "Support week date formats.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java\n+++ b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java\n \n     private transient DateTimeFormatter\n         ye,  // year element (yyyy)\n-        me,  // month element (-MM)\n-        de,  // day element (-dd)\n-        he,  // hour element (HH)\n-        mne, // minute element (:mm)\n-        se,  // second element (:ss)\n-        fe,  // fraction element (.SSS)\n+        mye, // monthOfYear element (-MM)\n+        dme, // dayOfMonth element (-dd)\n+        we,  // weekyear element (xxxx)\n+        wwe, // weekOfWeekyear element (-ww)\n+        dwe, // dayOfWeek element (-ee)\n+        hde, // hourOfDay element (HH)\n+        mhe, // minuteOfHour element (:mm)\n+        sme, // secondOfMinute element (:ss)\n+        fse, // fractionOfSecond element (.SSS)\n         ze,  // zone offset element\n         \n         //y,   // year (same as year element)\n         ym,  // year month\n         ymd, // year month day\n \n+        //w,   // weekyear (same as weekyear element)\n+        ww,  // weekyear week\n+        wwd, // weekyear week day\n+\n         //h,    // hour (same as hour element)\n         hm,   // hour minute\n         hms,  // hour minute second\n         t,  // time\n         dt, // date time\n \n+        //wd,  // week date (same as wwd)\n+        wdt, // week date time\n+\n         bd,  // basic date\n         bt,  // basic time\n-        bdt; // basic date time\n+        bdt, // basic date time\n+\n+        bwd,  // basic week date\n+        bwdt; // basic week date time\n \n     private transient DateTimeParser\n         dpe, // date parser element\n         tpe, // time parser element\n-        dp, // date parser\n-        tp, // time parser\n+        dp,  // date parser\n+        tp,  // time parser\n         dtp; // date time parser\n \n     /**\n      * Returns a generic ISO date parser. It accepts formats described by\n      * the following syntax:\n      * <pre>\n-     * date         = date-element ['T' offset]\n-     * date-element = yyyy ['-' MM ['-' dd]]\n-     * offset       = 'Z' | (('+' | '-') HH ':' mm)\n+     * date              = date-element ['T' offset]\n+     * date-element      = (yyyy ['-' MM ['-' dd]]) | week-date-element\n+     * week-date-element = xxxx '-W' ww ['-' e]\n+     * offset            = 'Z' | (('+' | '-') HH ':' mm)\n      * </pre>\n      */\n     public DateTimeParser dateParser() {\n      * Returns a generic ISO date parser. It accepts formats described by\n      * the following syntax:\n      * <pre>\n-     * date-element = yyyy ['-' MM ['-' dd]]\n+     * date-element      = (yyyy ['-' MM ['-' dd]]) | week-date-element\n+     * week-date-element = xxxx '-W' ww ['-' e]\n      * </pre>\n      */\n     public DateTimeParser dateElementParser() {\n         if (dpe == null) {\n             dpe = new DateTimeFormatterBuilder(iChrono)\n-                .append(yearElement())\n-                .appendOptional\n-                (new DateTimeFormatterBuilder(iChrono)\n-                 .append(monthElement())\n-                 .appendOptional(dayElement())\n-                 .toParser())\n+                .append(null, new DateTimeParser[] {\n+                    new DateTimeFormatterBuilder(iChrono)\n+                    .append(yearElement())\n+                    .appendOptional\n+                    (new DateTimeFormatterBuilder(iChrono)\n+                     .append(monthElement())\n+                     .appendOptional(dayOfMonthElement())\n+                     .toParser())\n+                    .toParser(),\n+                    new DateTimeFormatterBuilder(iChrono)\n+                    .append(weekyearElement())\n+                    .append(weekElement())\n+                    .appendOptional(dayOfWeekElement())\n+                    .toParser()\n+                })\n                 .toParser();\n         }\n         return dpe;\n      * Returns a generic ISO datetime parser. It accepts formats described by\n      * the following syntax:\n      * <pre>\n-     * datetime     = time | (date-element [time | ('T' offset)])\n-     * time         = 'T' time-element [offset]\n-     * date-element = yyyy ['-' MM ['-' dd]]\n-     * time-element = HH [':' mm [':' ss ['.' SSS]]]\n-     * offset       = 'Z' | (('+' | '-') HH ':' mm)\n+     * datetime          = time | (date-element [time | ('T' offset)])\n+     * time              = 'T' time-element [offset]\n+     * date-element      = (yyyy ['-' MM ['-' dd]]) | week-date-element\n+     * week-date-element = xxxx '-W' ww ['-' e]\n+     * time-element      = HH [':' mm [':' ss ['.' SSS]]]\n+     * offset            = 'Z' | (('+' | '-') HH ':' mm)\n      * </pre>\n      */\n     public DateTimeParser dateTimeParser() {\n     /**\n      * Returns a formatter for a two digit hour of day, two digit minute of\n      * hour, two digit second of minute, three digit fraction of second, and\n-     * time zone offset. (HH:mm:ss.SSSZ) The time zone offset is 'Z' for zero, and\n-     * of the form '\\u00b1HH:mm' for non-zero.\n+     * time zone offset. (HH:mm:ss.SSSZ) The time zone offset is 'Z' for zero,\n+     * and of the form '\\u00b1HH:mm' for non-zero.\n      */\n     public DateTimeFormatter time() {\n         if (t == null) {\n     }\n \n     /**\n-     * Returns a formatter that combines a full date and time, separated by a 'T'.\n-     * (yyyy-MM-ddTHH:mm:ss.SSSZ)\n+     * Returns a formatter that combines a full date and time, separated by a\n+     * 'T'. (yyyy-MM-dd'T'HH:mm:ss.SSSZ)\n      */\n     public DateTimeFormatter dateTime() {\n         if (dt == null) {\n                 .toFormatter();\n         }\n         return dt;\n+    }\n+\n+    /**\n+     * Returns a formatter for a full date as four digit weekyear, two digit\n+     * week of weekyear, and one digit day of week. (xxxx-'W'ww-e)\n+     */\n+    public DateTimeFormatter weekDate() {\n+        return weekyearWeekDay();\n+    }\n+\n+    /**\n+     * Returns a formatter that combines a full weekyear date and time,\n+     * separated by a 'T'. (xxxx-'W'ww-e'T'HH:mm:ss.SSSZ)\n+     */\n+    public DateTimeFormatter weekDateTime() {\n+        if (wdt == null) {\n+            wdt = new DateTimeFormatterBuilder(iChrono)\n+                .append(weekDate())\n+                .appendLiteral('T')\n+                .append(time())\n+                .toFormatter();\n+        }\n+        return wdt;\n     }\n \n     //-----------------------------------------------------------------------\n \n     /**\n      * Returns a basic formatter that combines a basic date and time, separated\n-     * by a 'T'. (yyyyMMddTHHmmssZ)\n+     * by a 'T'. (yyyyMMdd'T'HHmmssZ)\n      */\n     public DateTimeFormatter basicDateTime() {\n         if (bdt == null) {\n                 .toFormatter();\n         }\n         return bdt;\n+    }\n+\n+    /**\n+     * Returns a basic formatter for a full date as four digit weekyear, two\n+     * digit week of weekyear, and one digit day of week. (xxxx'W'wwe)\n+     */\n+    public DateTimeFormatter basicWeekDate() {\n+        if (bwd == null) {\n+            bwd = new DateTimeFormatterBuilder(iChrono)\n+                .appendWeekyear(4, 4)\n+                .appendLiteral('W')\n+                .appendWeekOfWeekyear(2)\n+                .appendDayOfWeek(1)\n+                .toFormatter();\n+        }\n+        return bwd;\n+    }\n+\n+    /**\n+     * Returns a basic formatter that combines a basic weekyear date and time,\n+     * separated by a 'T'. (xxxx'W'wwe'T'HHmmssZ)\n+     */\n+    public DateTimeFormatter basicWeekDateTime() {\n+        if (bwdt == null) {\n+            bwdt = new DateTimeFormatterBuilder(iChrono)\n+                .append(basicWeekDate())\n+                .appendLiteral('T')\n+                .append(basicTime())\n+                .toFormatter();\n+        }\n+        return bwdt;\n     }\n \n     //-----------------------------------------------------------------------\n             ymd = new DateTimeFormatterBuilder(iChrono)\n                 .append(yearElement())\n                 .append(monthElement())\n-                .append(dayElement())\n+                .append(dayOfMonthElement())\n                 .toFormatter();\n         }\n         return ymd;\n+    }\n+\n+    /**\n+     * Returns a formatter for a four digit weekyear. (xxxx)\n+     */\n+    public DateTimeFormatter weekyear() {\n+        return weekyearElement();\n+    }\n+\n+    /**\n+     * Returns a formatter for a four digit weekyear and two digit week of\n+     * weekyear. (xxxx-'W'ww)\n+     */\n+    public DateTimeFormatter weekyearWeek() {\n+        if (ww == null) {\n+            ww = new DateTimeFormatterBuilder(iChrono)\n+                .append(weekyearElement())\n+                .append(weekElement())\n+                .toFormatter();\n+        }\n+        return ww;\n+    }\n+\n+    /**\n+     * Returns a formatter for a four digit weekyear, two digit week of\n+     * weekyear, and one digit day of week. (xxxx-'W'ww-e)\n+     */\n+    public DateTimeFormatter weekyearWeekDay() {\n+        if (wwd == null) {\n+            wwd = new DateTimeFormatterBuilder(iChrono)\n+                .append(weekyearElement())\n+                .append(weekElement())\n+                .append(dayOfWeekElement())\n+                .toFormatter();\n+        }\n+        return wwd;\n     }\n \n     /**\n \n     /**\n      * Returns a formatter that combines a full date and two digit hour of\n-     * day. (yyyy-MM-ddTHH)\n+     * day. (yyyy-MM-dd'T'HH)\n      */\n     public DateTimeFormatter dateHour() {\n         if (dh == null) {\n \n     /**\n      * Returns a formatter that combines a full date, two digit hour of day,\n-     * and two digit minute of hour. (yyyy-MM-ddTHH:mm)\n+     * and two digit minute of hour. (yyyy-MM-dd'T'HH:mm)\n      */\n     public DateTimeFormatter dateHourMinute() {\n         if (dhm == null) {\n     /**\n      * Returns a formatter that combines a full date, two digit hour of day,\n      * two digit minute of hour, and two digit second of\n-     * minute. (yyyy-MM-ddTHH:mm:ss)\n+     * minute. (yyyy-MM-dd'T'HH:mm:ss)\n      */\n     public DateTimeFormatter dateHourMinuteSecond() {\n         if (dhms == null) {\n     /**\n      * Returns a formatter that combines a full date, two digit hour of day,\n      * two digit minute of hour, two digit second of minute, and three digit\n-     * fraction of second. (yyyy-MM-ddTHH:mm:ss.SSS)\n+     * fraction of second. (yyyy-MM-dd'T'HH:mm:ss.SSS)\n      */\n     public DateTimeFormatter dateHourMinuteSecondFraction() {\n         if (dhmsf == null) {\n     }\n \n     private DateTimeFormatter monthElement() {\n-        if (me == null) {\n-            me = new DateTimeFormatterBuilder(iChrono)\n+        if (mye == null) {\n+            mye = new DateTimeFormatterBuilder(iChrono)\n                 .appendLiteral('-')\n                 .appendMonthOfYear(2)\n                 .toFormatter();\n         }\n-        return me;\n-    }\n-\n-    private DateTimeFormatter dayElement() {\n-        if (de == null) {\n-            de = new DateTimeFormatterBuilder(iChrono)\n+        return mye;\n+    }\n+\n+    private DateTimeFormatter dayOfMonthElement() {\n+        if (dme == null) {\n+            dme = new DateTimeFormatterBuilder(iChrono)\n                 .appendLiteral('-')\n                 .appendDayOfMonth(2)\n                 .toFormatter();\n         }\n-        return de;\n+        return dme;\n+    }\n+\n+    private DateTimeFormatter weekyearElement() {\n+        if (we == null) {\n+            we = new DateTimeFormatterBuilder(iChrono)\n+                .appendWeekyear(4, 9)\n+                .toFormatter();\n+        }\n+        return we;\n+    }\n+\n+    private DateTimeFormatter weekElement() {\n+        if (wwe == null) {\n+            wwe = new DateTimeFormatterBuilder(iChrono)\n+                .appendLiteral(\"-W\")\n+                .appendWeekOfWeekyear(2)\n+                .toFormatter();\n+        }\n+        return wwe;\n+    }\n+\n+    private DateTimeFormatter dayOfWeekElement() {\n+        if (dwe == null) {\n+            dwe = new DateTimeFormatterBuilder(iChrono)\n+                .appendLiteral('-')\n+                .appendDayOfWeek(1)\n+                .toFormatter();\n+        }\n+        return dwe;\n     }\n \n     private DateTimeFormatter hourElement() {\n-        if (he == null) {\n-            he = new DateTimeFormatterBuilder(iChrono)\n+        if (hde == null) {\n+            hde = new DateTimeFormatterBuilder(iChrono)\n                 .appendHourOfDay(2)\n                 .toFormatter();\n         }\n-        return he;\n+        return hde;\n     }\n \n     private DateTimeFormatter minuteElement() {\n-        if (mne == null) {\n-            mne = new DateTimeFormatterBuilder(iChrono)\n+        if (mhe == null) {\n+            mhe = new DateTimeFormatterBuilder(iChrono)\n                 .appendLiteral(':')\n                 .appendMinuteOfHour(2)\n                 .toFormatter();\n         }\n-        return mne;\n+        return mhe;\n     }\n \n     private DateTimeFormatter secondElement() {\n-        if (se == null) {\n-            se = new DateTimeFormatterBuilder(iChrono)\n+        if (sme == null) {\n+            sme = new DateTimeFormatterBuilder(iChrono)\n                 .appendLiteral(':')\n                 .appendSecondOfMinute(2)\n                 .toFormatter();\n         }\n-        return se;\n+        return sme;\n     }\n \n     private DateTimeFormatter fractionElement() {\n-        if (fe == null) {\n-            fe = new DateTimeFormatterBuilder(iChrono)\n+        if (fse == null) {\n+            fse = new DateTimeFormatterBuilder(iChrono)\n                 .appendLiteral('.')\n                 // Support parsing up to nanosecond precision even though\n                 // those extra digits will be dropped.\n                 .appendFractionOfSecond(3, 9)\n                 .toFormatter();\n         }\n-        return fe;\n+        return fse;\n     }\n \n     private DateTimeFormatter offsetElement() {", "timestamp": 1073115666, "metainfo": ""}