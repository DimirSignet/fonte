{"sha": "3a68a02d6b0359e623858ab9391f84afdb17052a", "log": "Expanded documentation.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java\n import org.joda.time.DateTimeZone;\n \n /**\n- * Allows fields to be saved in any order, but physically set in a consistent\n- * order.\n+ * Allows fields to be saved in any order, but be physically set in a\n+ * consistent order. This is useful for parsing against formats that allow\n+ * field values to contradict each other.\n+ * <p>\n+ * Field values are applied in an order where the \"larger\" fields are set\n+ * first, making their value less likely to stick.  A field is larger than\n+ * another when it's range duration is longer. If both ranges are the same,\n+ * then the larger field has the longer duration. If it cannot be determined\n+ * which field is larger, then the fields are set in the order they were saved.\n+ * <p>\n+ * For example, these fields were saved in this order: dayOfWeek, monthOfYear,\n+ * dayOfMonth, dayOfYear. When computeMillis is called, the fields are set in\n+ * this order: monthOfYear, dayOfYear, dayOfMonth, dayOfWeek.\n  * <p>\n  * DateTimeParserBucket is mutable and not thread-safe.\n  *\n         }\n \n         /**\n-         * The field with the larger range is ordered first, where null is\n-         * considered infinite. If the ranges match, then the field with the\n-         * larger unit is ordered first. This ordering casues \"smaller\" fields\n-         * to be set last, and thus their value sticks. For example, dayOfMonth\n-         * takes precedence over monthOfYear, and dayOfWeek takes precedence\n-         * over dayOfMonth.\n+         * The field with the longer range duration is ordered first, where\n+         * null is considered infinite. If the ranges match, then the field\n+         * with the longer duration is ordered first.\n          */\n         public int compareTo(Object obj) {\n             DateTimeField other = ((SavedField)obj).iField;", "timestamp": 1073412650, "metainfo": ""}