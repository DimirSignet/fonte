{"sha": "918f2a7b480c8e5a21c1247673f2d4fea669c50b", "log": "Increase coverage   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/TestAbstractPartial.java\n+++ b/JodaTime/src/test/org/joda/time/TestAbstractPartial.java\n         } catch (IndexOutOfBoundsException ex) {}\n     }\n \n+    public void testGetFieldType() throws Throwable {\n+        MockPartial mock = new MockPartial();\n+        assertEquals(DateTimeFieldType.year(), mock.getFieldType(0));\n+        assertEquals(DateTimeFieldType.monthOfYear(), mock.getFieldType(1));\n+        \n+        try {\n+            mock.getFieldType(-1);\n+            fail();\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            mock.getFieldType(2);\n+            fail();\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testGetFieldTypes() throws Throwable {\n+        MockPartial mock = new MockPartial();\n+        DateTimeFieldType[] vals = mock.getFieldTypes();\n+        assertEquals(2, vals.length);\n+        assertEquals(DateTimeFieldType.year(), vals[0]);\n+        assertEquals(DateTimeFieldType.monthOfYear(), vals[1]);\n+    }\n+\n     //-----------------------------------------------------------------------\n     static class MockPartial extends AbstractPartial {\n         \n--- a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java\n     }\n     \n     //-----------------------------------------------------------------------\n+    public void testWithField1() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime result = test.withField(DateTimeFieldType.year(), 2006);\n+        \n+        assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0), test);\n+        assertEquals(new DateTime(2006, 6, 9, 0, 0, 0, 0), result);\n+    }\n+\n+    public void testWithField2() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime result = test.withField(null, 6);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithFieldAdded1() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime result = test.withFieldAdded(DurationFieldType.years(), 6);\n+        \n+        assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0), test);\n+        assertEquals(new DateTime(2010, 6, 9, 0, 0, 0, 0), result);\n+    }\n+\n+    public void testWithFieldAdded2() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime result = test.withFieldAdded(null, 6);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testWithDurationAdded_long() {\n         DateTime test = new DateTime(TEST_TIME1, BuddhistChronology.getInstance());\n         DateTime result = test.withDurationAdded(123456789L);\n--- a/JodaTime/src/test/org/joda/time/TestInterval_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestInterval_Constructors.java\n         }\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testConstructor_Object_Chronology1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Interval base = new Interval(dt1, dt2);\n+        \n+        Interval test = new Interval(base, Chronology.getBuddhist());\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+        assertEquals(Chronology.getBuddhist(), test.getChronology());\n+    }\n+\n+    public void testConstructor_Object_Chronology2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Interval base = new Interval(dt1, dt2);\n+        \n+        Interval test = new Interval(base, null);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+        assertEquals(Chronology.getISO(), test.getChronology());\n+    }\n+\n }\n--- a/JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java\n         }\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testConstructor_Object_Chronology1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Interval base = new Interval(dt1, dt2);\n+        \n+        MutableInterval test = new MutableInterval(base, Chronology.getBuddhist());\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+        assertEquals(Chronology.getBuddhist(), test.getChronology());\n+    }\n+\n+    public void testConstructor_Object_Chronology2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Interval base = new Interval(dt1, dt2);\n+        \n+        MutableInterval test = new MutableInterval(base, null);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+        assertEquals(Chronology.getISO(), test.getChronology());\n+    }\n+\n }\n--- a/JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testConstructor_long_long_Chronology1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getCoptic());\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, Chronology.getCoptic());\n+        MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), Chronology.getCoptic());\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_long_long_Chronology2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), (Chronology) null);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_long_PeriodType_Chronology1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getCoptic());\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, Chronology.getCoptic());\n+        MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), (PeriodType) null, Chronology.getCoptic());\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_long_long_PeriodType_Chronology2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), (PeriodType) null, null);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testConstructor_RI_RI1() throws Throwable {\n         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n--- a/JodaTime/src/test/org/joda/time/TestPeriodType.java\n+++ b/JodaTime/src/test/org/joda/time/TestPeriodType.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testEquals() throws Exception {\n+        PeriodType type = PeriodType.dayTime().withMillisRemoved();\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type.equals(PeriodType.dayTime().withMillisRemoved()));\n+        assertEquals(false, type.equals(null));\n+        assertEquals(false, type.equals(\"\"));\n+    }\n+\n     public void testHashCode() throws Exception {\n         PeriodType type = PeriodType.dayTime().withMillisRemoved();\n         assertEquals(type.hashCode(), type.hashCode());\n--- a/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java\n import java.io.ByteArrayOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n+import java.util.Arrays;\n import java.util.Locale;\n import java.util.TimeZone;\n \n         assertEquals(0, test.getMillis());\n     }\n \n+    public void testValueIndexMethods() {\n+        Period test = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime());\n+        assertEquals(6, test.size());\n+        assertEquals(1, test.getValue(0));\n+        assertEquals(4, test.getValue(1));\n+        assertEquals(5, test.getValue(2));\n+        assertEquals(6, test.getValue(3));\n+        assertEquals(7, test.getValue(4));\n+        assertEquals(8, test.getValue(5));\n+        assertEquals(true, Arrays.equals(new int[] {1, 4, 5, 6, 7, 8}, test.getValues()));\n+    }\n+\n+    public void testTypeIndexMethods() {\n+        Period test = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime());\n+        assertEquals(6, test.size());\n+        assertEquals(DurationFieldType.years(), test.getFieldType(0));\n+        assertEquals(DurationFieldType.days(), test.getFieldType(1));\n+        assertEquals(DurationFieldType.hours(), test.getFieldType(2));\n+        assertEquals(DurationFieldType.minutes(), test.getFieldType(3));\n+        assertEquals(DurationFieldType.seconds(), test.getFieldType(4));\n+        assertEquals(DurationFieldType.millis(), test.getFieldType(5));\n+        assertEquals(true, Arrays.equals(new DurationFieldType[] {\n+            DurationFieldType.years(), DurationFieldType.days(), DurationFieldType.hours(),\n+            DurationFieldType.minutes(), DurationFieldType.seconds(), DurationFieldType.millis()},\n+            test.getFieldTypes()));\n+    }\n+\n+    public void testIsSupported() {\n+        Period test = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime());\n+        assertEquals(true, test.isSupported(DurationFieldType.years()));\n+        assertEquals(false, test.isSupported(DurationFieldType.months()));\n+        assertEquals(false, test.isSupported(DurationFieldType.weeks()));\n+        assertEquals(true, test.isSupported(DurationFieldType.days()));\n+        assertEquals(true, test.isSupported(DurationFieldType.hours()));\n+        assertEquals(true, test.isSupported(DurationFieldType.minutes()));\n+        assertEquals(true, test.isSupported(DurationFieldType.seconds()));\n+        assertEquals(true, test.isSupported(DurationFieldType.millis()));\n+    }        \n+\n+    public void testIndexOf() {\n+        Period test = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime());\n+        assertEquals(0, test.indexOf(DurationFieldType.years()));\n+        assertEquals(-1, test.indexOf(DurationFieldType.months()));\n+        assertEquals(-1, test.indexOf(DurationFieldType.weeks()));\n+        assertEquals(1, test.indexOf(DurationFieldType.days()));\n+        assertEquals(2, test.indexOf(DurationFieldType.hours()));\n+        assertEquals(3, test.indexOf(DurationFieldType.minutes()));\n+        assertEquals(4, test.indexOf(DurationFieldType.seconds()));\n+        assertEquals(5, test.indexOf(DurationFieldType.millis()));\n+    }\n+\n+    public void testGet() {\n+        Period test = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime());\n+        assertEquals(1, test.get(DurationFieldType.years()));\n+        assertEquals(0, test.get(DurationFieldType.months()));\n+        assertEquals(0, test.get(DurationFieldType.weeks()));\n+        assertEquals(4, test.get(DurationFieldType.days()));\n+        assertEquals(5, test.get(DurationFieldType.hours()));\n+        assertEquals(6, test.get(DurationFieldType.minutes()));\n+        assertEquals(7, test.get(DurationFieldType.seconds()));\n+        assertEquals(8, test.get(DurationFieldType.millis()));\n+    }\n+\n     public void testEqualsHashCode() {\n         Period test1 = new Period(123L);\n         Period test2 = new Period(123L);\n--- a/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testConstructor_long_long_Chronology1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getCoptic());\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, Chronology.getCoptic());\n+        Period test = new Period(dt1.getMillis(), dt2.getMillis(), Chronology.getCoptic());\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_long_long_Chronology2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Period test = new Period(dt1.getMillis(), dt2.getMillis(), (Chronology) null);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_long_PeriodType_Chronology1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getCoptic());\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, Chronology.getCoptic());\n+        Period test = new Period(dt1.getMillis(), dt2.getMillis(), (PeriodType) null, Chronology.getCoptic());\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_long_long_PeriodType_Chronology2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Period test = new Period(dt1.getMillis(), dt2.getMillis(), (PeriodType) null, null);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testConstructor_RI_RI1() throws Throwable {\n         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n--- a/JodaTime/src/test/org/joda/time/convert/TestConverterManager.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestConverterManager.java\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    public void testGetIntervalConverterRemovedNull() {\n+        try {\n+            ConverterManager.getInstance().removeIntervalConverter(NullConverter.INSTANCE);\n+            try {\n+                ConverterManager.getInstance().getIntervalConverter(null);\n+                fail();\n+            } catch (IllegalArgumentException ex) {}\n+        } finally {\n+            ConverterManager.getInstance().addIntervalConverter(NullConverter.INSTANCE);\n+        }\n+        assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length);\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testGetIntervalConverters() {\n         IntervalConverter[] array = ConverterManager.getInstance().getIntervalConverters();\n--- a/JodaTime/src/test/org/joda/time/convert/TestNullConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestNullConverter.java\n import org.joda.time.DateTimeConstants;\n import org.joda.time.DateTimeUtils;\n import org.joda.time.DateTimeZone;\n+import org.joda.time.MutableInterval;\n import org.joda.time.MutablePeriod;\n import org.joda.time.PeriodType;\n import org.joda.time.chrono.ISOChronology;\n         assertEquals(false, NullConverter.INSTANCE.isReadableInterval(null, null));\n     }\n \n+    public void testSetInto_Object_Chronology1() throws Exception {\n+        MutableInterval m = new MutableInterval(1000L, 2000L, Chronology.getGJ());\n+        NullConverter.INSTANCE.setInto(m, null, null);\n+        assertEquals(TEST_TIME_NOW, m.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, m.getEndMillis());\n+        assertEquals(Chronology.getISO(), m.getChronology());\n+    }\n+\n+    public void testSetInto_Object_Chronology2() throws Exception {\n+        MutableInterval m = new MutableInterval(1000L, 2000L, Chronology.getGJ());\n+        NullConverter.INSTANCE.setInto(m, null, Chronology.getCoptic());\n+        assertEquals(TEST_TIME_NOW, m.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, m.getEndMillis());\n+        assertEquals(Chronology.getCoptic(), m.getChronology());\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testToString() {\n         assertEquals(\"Converter[null]\", NullConverter.INSTANCE.toString());\n--- a/JodaTime/src/test/org/joda/time/convert/TestStringConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestStringConverter.java\n             StringConverter.INSTANCE.setInto(m, \"PT0SXY\", null);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n+        try {\n+            StringConverter.INSTANCE.setInto(m, \"P2Y4W3DT12H24M48SX\", null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1094505365, "metainfo": ""}