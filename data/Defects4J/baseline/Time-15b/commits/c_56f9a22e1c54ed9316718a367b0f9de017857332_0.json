{"sha": "56f9a22e1c54ed9316718a367b0f9de017857332", "log": "Add noMillis methods, javadoc and fix bugs   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java\n+++ b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java\n         lse, // millisOfSecond element (.SSS)\n         fse, // fractionOfSecond element (.SSSSSSSSS)\n         ze,  // zone offset element\n+        lte, // literal 'T' element\n         \n         //y,   // year (same as year element)\n         ym,  // year month\n \n         //d,  // date (same as ymd)\n         t,  // time\n+        tx,  // time no millis\n         tt,  // Ttime\n+        ttx,  // Ttime no millis\n         dt, // date time\n+        dtx, // date time no millis\n \n         //wd,  // week date (same as wwd)\n         wdt, // week date time\n+        wdtx, // week date time no millis\n \n         bd,  // basic date\n         bt,  // basic time\n+        btx,  // basic time no millis\n         btt, // basic Ttime\n+        bttx, // basic Ttime no millis\n         bdt, // basic date time\n+        bdtx, // basic date time no millis\n \n         bwd,  // basic week date\n-        bwdt; // basic week date time\n+        bwdt, // basic week date time\n+        bwdtx; // basic week date time no millis\n \n     private transient DateTimeParser\n         dpe, // date parser element\n     //-----------------------------------------------------------------------\n     /**\n      * Returns a formatter for a full date as four digit year, two digit month\n-     * of year, and two digit day of month. (yyyy-MM-dd)\n+     * of year, and two digit day of month (yyyy-MM-dd).\n+     * \n+     * @return a formatter for yyyy-MM-dd\n      */\n     public DateTimeFormatter date() {\n         return yearMonthDay();\n     /**\n      * Returns a formatter for a two digit hour of day, two digit minute of\n      * hour, two digit second of minute, three digit fraction of second, and\n-     * time zone offset. (HH:mm:ss.SSSZ) The time zone offset is 'Z' for zero,\n-     * and of the form '\\u00b1HH:mm' for non-zero.\n+     * time zone offset (HH:mm:ss.SSSZ).\n+     * The time zone offset is 'Z' for zero, and of the form '\\u00b1HH:mm' for non-zero.\n+     * \n+     * @return a formatter for HH:mm:ss.SSSZ\n      */\n     public DateTimeFormatter time() {\n         if (t == null) {\n \n     /**\n      * Returns a formatter for a two digit hour of day, two digit minute of\n+     * hour, two digit second of minute, and time zone offset (HH:mm:ssZ).\n+     * The time zone offset is 'Z' for zero, and of the form '\\u00b1HH:mm' for non-zero.\n+     * \n+     * @return a formatter for HH:mm:ssZ\n+     */\n+    public DateTimeFormatter timeNoMillis() {\n+        if (tx == null) {\n+            tx = new DateTimeFormatterBuilder(iChrono)\n+                .append(hourMinuteSecond())\n+                .append(offsetElement())\n+                .toFormatter();\n+        }\n+        return tx;\n+    }\n+\n+    /**\n+     * Returns a formatter for a two digit hour of day, two digit minute of\n      * hour, two digit second of minute, three digit fraction of second, and\n-     * time zone offset prefixed by 'T'. ('T'HH:mm:ss.SSSZ)\n-     * The time zone offset is 'Z' for zero, and of the form '\\u00b1HH:mm' for non-zero.\n+     * time zone offset prefixed by 'T' ('T'HH:mm:ss.SSSZ).\n+     * The time zone offset is 'Z' for zero, and of the form '\\u00b1HH:mm' for non-zero.\n+     * \n+     * @return a formatter for 'T'HH:mm:ss.SSSZ\n      */\n     public DateTimeFormatter tTime() {\n-        if (t == null) {\n-            t = new DateTimeFormatterBuilder(iChrono)\n-                .appendLiteral('T')\n+        if (tt == null) {\n+            tt = new DateTimeFormatterBuilder(iChrono)\n+                .append(literalTElement())\n                 .append(time())\n                 .toFormatter();\n         }\n-        return t;\n-    }\n-\n-    /**\n-     * Returns a formatter that combines a full date and time, separated by a 'T'.\n-     * (yyyy-MM-dd'T'HH:mm:ss.SSSZ)\n+        return tt;\n+    }\n+\n+    /**\n+     * Returns a formatter for a two digit hour of day, two digit minute of\n+     * hour, two digit second of minute, and time zone offset prefixed\n+     * by 'T' ('T'HH:mm:ssZ).\n+     * The time zone offset is 'Z' for zero, and of the form '\\u00b1HH:mm' for non-zero.\n+     * \n+     * @return a formatter for 'T'HH:mm:ssZ\n+     */\n+    public DateTimeFormatter tTimeNoMillis() {\n+        if (ttx == null) {\n+            ttx = new DateTimeFormatterBuilder(iChrono)\n+                .append(literalTElement())\n+                .append(timeNoMillis())\n+                .toFormatter();\n+        }\n+        return ttx;\n+    }\n+\n+    /**\n+     * Returns a formatter that combines a full date and time, separated by a 'T'\n+     * (yyyy-MM-dd'T'HH:mm:ss.SSSZ).\n+     * The time zone offset is 'Z' for zero, and of the form '\\u00b1HH:mm' for non-zero.\n+     * \n+     * @return a formatter for yyyy-MM-dd'T'HH:mm:ss.SSSZ\n      */\n     public DateTimeFormatter dateTime() {\n         if (dt == null) {\n     }\n \n     /**\n+     * Returns a formatter that combines a full date and time without millis,\n+     * separated by a 'T' (yyyy-MM-dd'T'HH:mm:ssZ).\n+     * The time zone offset is 'Z' for zero, and of the form '\\u00b1HH:mm' for non-zero.\n+     * \n+     * @return a formatter for yyyy-MM-dd'T'HH:mm:ssZ\n+     */\n+    public DateTimeFormatter dateTimeNoMillis() {\n+        if (dtx == null) {\n+            dtx = new DateTimeFormatterBuilder(iChrono)\n+                .append(date())\n+                .append(tTimeNoMillis())\n+                .toFormatter();\n+        }\n+        return dtx;\n+    }\n+\n+    /**\n      * Returns a formatter for a full date as four digit weekyear, two digit\n-     * week of weekyear, and one digit day of week. (xxxx-'W'ww-e)\n+     * week of weekyear, and one digit day of week (xxxx-'W'ww-e).\n+     * \n+     * @return a formatter for xxxx-'W'ww-e\n      */\n     public DateTimeFormatter weekDate() {\n         return weekyearWeekDay();\n \n     /**\n      * Returns a formatter that combines a full weekyear date and time,\n-     * separated by a 'T'. (xxxx-'W'ww-e'T'HH:mm:ss.SSSZ)\n+     * separated by a 'T' (xxxx-'W'ww-e'T'HH:mm:ss.SSSZ).\n+     * The time zone offset is 'Z' for zero, and of the form '\\u00b1HH:mm' for non-zero.\n+     * \n+     * @return a formatter for xxxx-'W'ww-e'T'HH:mm:ss.SSSZ\n      */\n     public DateTimeFormatter weekDateTime() {\n         if (wdt == null) {\n             wdt = new DateTimeFormatterBuilder(iChrono)\n                 .append(weekDate())\n-                .appendLiteral('T')\n-                .append(time())\n+                .append(tTime())\n                 .toFormatter();\n         }\n         return wdt;\n     }\n \n+    /**\n+     * Returns a formatter that combines a full weekyear date and time without millis,\n+     * separated by a 'T' (xxxx-'W'ww-e'T'HH:mm:ssZ).\n+     * The time zone offset is 'Z' for zero, and of the form '\\u00b1HH:mm' for non-zero.\n+     * \n+     * @return a formatter for xxxx-'W'ww-e'T'HH:mm:ssZ\n+     */\n+    public DateTimeFormatter weekDateTimeNoMillis() {\n+        if (wdtx == null) {\n+            wdtx = new DateTimeFormatterBuilder(iChrono)\n+                .append(weekDate())\n+                .append(tTimeNoMillis())\n+                .toFormatter();\n+        }\n+        return wdtx;\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Returns a basic formatter for a full date as four digit year, two digit\n-     * month of year, and two digit day of month. (yyyyMMdd)\n+     * month of year, and two digit day of month (yyyyMMdd).\n+     * \n+     * @return a formatter for yyyyMMdd\n      */\n     public DateTimeFormatter basicDate() {\n         if (bd == null) {\n \n     /**\n      * Returns a basic formatter for a two digit hour of day, two digit minute\n-     * of hour, two digit second of minute, and time zone offset. (HHmmssZ) The time zone\n-     * offset is blank for zero, and of the form '\\u00b1HHmm' for non-zero.\n+     * of hour, two digit second of minute, three digit millis, and time zone\n+     * offset (HHmmss.SSSZ).\n+     * The time zone offset is 'Z' for zero, and of the form '\\u00b1HH:mm' for non-zero.\n+     * \n+     * @return a formatter for HHmmss.SSSZ\n      */\n     public DateTimeFormatter basicTime() {\n         if (bt == null) {\n                 .appendHourOfDay(2)\n                 .appendMinuteOfHour(2)\n                 .appendSecondOfMinute(2)\n-                .appendTimeZoneOffset(\"\", false, 1, 2)\n+                .appendLiteral('.')\n+                .appendMillisOfSecond(3)\n+                .appendTimeZoneOffset(\"Z\", false, 2, 2)\n                 .toFormatter();\n         }\n         return bt;\n \n     /**\n      * Returns a basic formatter for a two digit hour of day, two digit minute\n-     * of hour, two digit second of minute, and time zone offset prefixed by 'T'.\n-     * ('T'HHmmssZ)\n-     * The time zone offset is blank for zero, and of the form '\\u00b1HHmm' for non-zero.\n+     * of hour, two digit second of minute, and time zone offset (HHmmssZ).\n+     * The time zone offset is 'Z' for zero, and of the form '\\u00b1HH:mm' for non-zero.\n+     * \n+     * @return a formatter for HHmmssZ\n+     */\n+    public DateTimeFormatter basicTimeNoMillis() {\n+        if (btx == null) {\n+            btx = new DateTimeFormatterBuilder(iChrono)\n+                .appendHourOfDay(2)\n+                .appendMinuteOfHour(2)\n+                .appendSecondOfMinute(2)\n+                .appendTimeZoneOffset(\"Z\", false, 2, 2)\n+                .toFormatter();\n+        }\n+        return btx;\n+    }\n+\n+    /**\n+     * Returns a basic formatter for a two digit hour of day, two digit minute\n+     * of hour, two digit second of minute, three digit millis, and time zone\n+     * offset prefixed by 'T' ('T'HHmmss.SSSZ).\n+     * The time zone offset is 'Z' for zero, and of the form '\\u00b1HH:mm' for non-zero.\n+     * \n+     * @return a formatter for 'T'HHmmss.SSSZ\n      */\n     public DateTimeFormatter basicTTime() {\n-        if (bt == null) {\n-            bt = new DateTimeFormatterBuilder(iChrono)\n-                .appendLiteral('T')\n+        if (btt == null) {\n+            btt = new DateTimeFormatterBuilder(iChrono)\n+                .append(literalTElement())\n                 .append(basicTime())\n                 .toFormatter();\n         }\n-        return bt;\n+        return btt;\n+    }\n+\n+    /**\n+     * Returns a basic formatter for a two digit hour of day, two digit minute\n+     * of hour, two digit second of minute, and time zone offset prefixed by 'T'\n+     * ('T'HHmmssZ).\n+     * The time zone offset is 'Z' for zero, and of the form '\\u00b1HH:mm' for non-zero.\n+     * \n+     * @return a formatter for 'T'HHmmssZ\n+     */\n+    public DateTimeFormatter basicTTimeNoMillis() {\n+        if (bttx == null) {\n+            bttx = new DateTimeFormatterBuilder(iChrono)\n+                .append(literalTElement())\n+                .append(basicTimeNoMillis())\n+                .toFormatter();\n+        }\n+        return bttx;\n     }\n \n     /**\n      * Returns a basic formatter that combines a basic date and time, separated\n-     * by a 'T'. (yyyyMMdd'T'HHmmssZ)\n+     * by a 'T' (yyyyMMdd'T'HHmmss.SSSZ).\n+     * The time zone offset is 'Z' for zero, and of the form '\\u00b1HH:mm' for non-zero.\n+     * \n+     * @return a formatter for yyyyMMdd'T'HHmmss.SSSZ\n      */\n     public DateTimeFormatter basicDateTime() {\n         if (bdt == null) {\n     }\n \n     /**\n+     * Returns a basic formatter that combines a basic date and time without millis,\n+     * separated by a 'T' (yyyyMMdd'T'HHmmssZ).\n+     * The time zone offset is 'Z' for zero, and of the form '\\u00b1HH:mm' for non-zero.\n+     * \n+     * @return a formatter for yyyyMMdd'T'HHmmssZ\n+     */\n+    public DateTimeFormatter basicDateTimeNoMillis() {\n+        if (bdtx == null) {\n+            bdtx = new DateTimeFormatterBuilder(iChrono)\n+                .append(basicDate())\n+                .append(basicTTimeNoMillis())\n+                .toFormatter();\n+        }\n+        return bdtx;\n+    }\n+\n+    /**\n      * Returns a basic formatter for a full date as four digit weekyear, two\n-     * digit week of weekyear, and one digit day of week. (xxxx'W'wwe)\n+     * digit week of weekyear, and one digit day of week (xxxx'W'wwe).\n+     * \n+     * @return a formatter for xxxx'W'wwe\n      */\n     public DateTimeFormatter basicWeekDate() {\n         if (bwd == null) {\n \n     /**\n      * Returns a basic formatter that combines a basic weekyear date and time,\n-     * separated by a 'T'. (xxxx'W'wwe'T'HHmmssZ)\n+     * separated by a 'T' (xxxx'W'wwe'T'HHmmss.SSSZ).\n+     * The time zone offset is 'Z' for zero, and of the form '\\u00b1HH:mm' for non-zero.\n+     * \n+     * @return a formatter for xxxx'W'wwe'T'HHmmss.SSSZ\n      */\n     public DateTimeFormatter basicWeekDateTime() {\n         if (bwdt == null) {\n             bwdt = new DateTimeFormatterBuilder(iChrono)\n                 .append(basicWeekDate())\n-                .appendLiteral('T')\n-                .append(basicTime())\n+                .append(basicTTime())\n                 .toFormatter();\n         }\n         return bwdt;\n     }\n \n+    /**\n+     * Returns a basic formatter that combines a basic weekyear date and time\n+     * without millis, separated by a 'T' (xxxx'W'wwe'T'HHmmssZ).\n+     * The time zone offset is 'Z' for zero, and of the form '\\u00b1HH:mm' for non-zero.\n+     * \n+     * @return a formatter for xxxx'W'wwe'T'HHmmssZ\n+     */\n+    public DateTimeFormatter basicWeekDateTimeNoMillis() {\n+        if (bwdtx == null) {\n+            bwdtx = new DateTimeFormatterBuilder(iChrono)\n+                .append(basicWeekDate())\n+                .append(basicTTimeNoMillis())\n+                .toFormatter();\n+        }\n+        return bwdtx;\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Returns a formatter for a four digit year. (yyyy)\n+     * \n+     * @return a formatter for yyyy\n      */\n     public DateTimeFormatter year() {\n         return yearElement();\n     /**\n      * Returns a formatter for a four digit year and two digit month of\n      * year. (yyyy-MM)\n+     * \n+     * @return a formatter for yyyy-MM\n      */\n     public DateTimeFormatter yearMonth() {\n         if (ym == null) {\n     /**\n      * Returns a formatter for a four digit year, two digit month of year, and\n      * two digit day of month. (yyyy-MM-dd)\n+     * \n+     * @return a formatter for yyyy-MM-dd\n      */\n     public DateTimeFormatter yearMonthDay() {\n         if (ymd == null) {\n \n     /**\n      * Returns a formatter for a four digit weekyear. (xxxx)\n+     * \n+     * @return a formatter for xxxx\n      */\n     public DateTimeFormatter weekyear() {\n         return weekyearElement();\n     /**\n      * Returns a formatter for a four digit weekyear and two digit week of\n      * weekyear. (xxxx-'W'ww)\n+     * \n+     * @return a formatter for xxxx-'W'ww\n      */\n     public DateTimeFormatter weekyearWeek() {\n         if (ww == null) {\n     /**\n      * Returns a formatter for a four digit weekyear, two digit week of\n      * weekyear, and one digit day of week. (xxxx-'W'ww-e)\n+     * \n+     * @return a formatter for xxxx-'W'ww-e\n      */\n     public DateTimeFormatter weekyearWeekDay() {\n         if (wwd == null) {\n \n     /**\n      * Returns a formatter for a two digit hour of day. (HH)\n+     * \n+     * @return a formatter for HH\n      */\n     public DateTimeFormatter hour() {\n         return hourElement();\n     /**\n      * Returns a formatter for a two digit hour of day and two digit minute of\n      * hour. (HH:mm)\n+     * \n+     * @return a formatter for HH:mm\n      */\n     public DateTimeFormatter hourMinute() {\n         if (hm == null) {\n     /**\n      * Returns a formatter for a two digit hour of day, two digit minute of\n      * hour, and two digit second of minute. (HH:mm:ss)\n+     * \n+     * @return a formatter for HH:mm:ss\n      */\n     public DateTimeFormatter hourMinuteSecond() {\n         if (hms == null) {\n      * Returns a formatter for a two digit hour of day, two digit minute of\n      * hour, two digit second of minute, and three digit fraction of\n      * second. (HH:mm:ss.SSS)\n+     * \n+     * @return a formatter for HH:mm:ss.SSS\n      */\n     public DateTimeFormatter hourMinuteSecondMillis() {\n         if (hmsl == null) {\n      * Returns a formatter for a two digit hour of day, two digit minute of\n      * hour, two digit second of minute, and three digit fraction of\n      * second. (HH:mm:ss.SSS)\n+     * \n+     * @return a formatter for HH:mm:ss.SSS\n      */\n     public DateTimeFormatter hourMinuteSecondFraction() {\n         if (hmsf == null) {\n     /**\n      * Returns a formatter that combines a full date and two digit hour of\n      * day. (yyyy-MM-dd'T'HH)\n+     * \n+     * @return a formatter for yyyy-MM-dd'T'HH\n      */\n     public DateTimeFormatter dateHour() {\n         if (dh == null) {\n             dh = new DateTimeFormatterBuilder(iChrono)\n                 .append(date())\n-                .appendLiteral('T')\n+                .append(literalTElement())\n                 .append(hour())\n                 .toFormatter();\n         }\n     /**\n      * Returns a formatter that combines a full date, two digit hour of day,\n      * and two digit minute of hour. (yyyy-MM-dd'T'HH:mm)\n+     * \n+     * @return a formatter for yyyy-MM-dd'T'HH:mm\n      */\n     public DateTimeFormatter dateHourMinute() {\n         if (dhm == null) {\n             dhm = new DateTimeFormatterBuilder(iChrono)\n                 .append(date())\n-                .appendLiteral('T')\n+                .append(literalTElement())\n                 .append(hourMinute())\n                 .toFormatter();\n         }\n      * Returns a formatter that combines a full date, two digit hour of day,\n      * two digit minute of hour, and two digit second of\n      * minute. (yyyy-MM-dd'T'HH:mm:ss)\n+     * \n+     * @return a formatter for yyyy-MM-dd'T'HH:mm:ss\n      */\n     public DateTimeFormatter dateHourMinuteSecond() {\n         if (dhms == null) {\n             dhms = new DateTimeFormatterBuilder(iChrono)\n                 .append(date())\n-                .appendLiteral('T')\n+                .append(literalTElement())\n                 .append(hourMinuteSecond())\n                 .toFormatter();\n         }\n      * Returns a formatter that combines a full date, two digit hour of day,\n      * two digit minute of hour, two digit second of minute, and three digit\n      * fraction of second. (yyyy-MM-dd'T'HH:mm:ss.SSS)\n+     * \n+     * @return a formatter for yyyy-MM-dd'T'HH:mm:ss.SSS\n      */\n     public DateTimeFormatter dateHourMinuteSecondMillis() {\n         if (dhmsl == null) {\n             dhmsl = new DateTimeFormatterBuilder(iChrono)\n                 .append(date())\n-                .appendLiteral('T')\n+                .append(literalTElement())\n                 .append(hourMinuteSecondMillis())\n                 .toFormatter();\n         }\n      * Returns a formatter that combines a full date, two digit hour of day,\n      * two digit minute of hour, two digit second of minute, and three digit\n      * fraction of second. (yyyy-MM-dd'T'HH:mm:ss.SSS)\n+     * \n+     * @return a formatter for yyyy-MM-dd'T'HH:mm:ss.SSS\n      */\n     public DateTimeFormatter dateHourMinuteSecondFraction() {\n         if (dhmsf == null) {\n             dhmsf = new DateTimeFormatterBuilder(iChrono)\n                 .append(date())\n-                .appendLiteral('T')\n+                .append(literalTElement())\n                 .append(hourMinuteSecondFraction())\n                 .toFormatter();\n         }\n                 .toFormatter();\n         }\n         return dye;\n+    }\n+    \n+    private DateTimeFormatter literalTElement() {\n+        if (lte == null) {\n+            lte = new DateTimeFormatterBuilder(iChrono)\n+                .appendLiteral('T')\n+                .toFormatter();\n+        }\n+        return lte;\n     }\n \n     private DateTimeFormatter hourElement() {", "timestamp": 1095509530, "metainfo": ""}