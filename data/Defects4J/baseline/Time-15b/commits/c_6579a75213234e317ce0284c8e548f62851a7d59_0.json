{"sha": "6579a75213234e317ce0284c8e548f62851a7d59", "log": "Fixed javadoc tags.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/AbstractDuration.java\n+++ b/JodaTime/src/java/org/joda/time/AbstractDuration.java\n     }\n \n     /**\n-     * Sets all the fields in one go from a millisecond interval.\n+     * Sets all the fields in one go from a millisecond duration.\n      * <p>\n      * Subclasses that wish to be immutable should override this method with an\n      * empty implementation that is protected and final. This also ensures that\n      * all lower subclasses are also immutable.\n      * \n-     * @param startInstant  interval start, in milliseconds\n-     * @param endInstant  interval end, in milliseconds\n+     * @param length  duration length, in milliseconds\n      */\n     protected void setMillis(long length) {\n         iMillis = length;\n--- a/JodaTime/src/java/org/joda/time/AbstractInterval.java\n+++ b/JodaTime/src/java/org/joda/time/AbstractInterval.java\n      * The time period may not be precise - if you want the millisecond duration\n      * then you should use {@link #getDuration()}.\n      *\n-     * @param type  the requested type of the duration, null means AllType\n      * @return a time period derived from the interval\n      */\n     public final Period toPeriod() {\n      * The time period may not be precise - if you want the millisecond duration\n      * then you should use {@link #getDuration()}.\n      *\n-     * @param type  the requested type of the duration, null means AllType\n+     * @param type  the requested type of the period, null means AllType\n      * @return a time period derived from the interval\n      */\n     public final Period toPeriod(PeriodType type) {\n--- a/JodaTime/src/java/org/joda/time/ReadableInterval.java\n+++ b/JodaTime/src/java/org/joda/time/ReadableInterval.java\n      * The time period may not be precise - if you want the millisecond duration\n      * then you should use {@link #getDuration()}.\n      *\n-     * @param type  the requested type of the duration, null means AllType\n      * @return a time period derived from the interval\n      */\n     Period toPeriod();\n      * The time period may not be precise - if you want the millisecond duration\n      * then you should use {@link #getDuration()}.\n      *\n-     * @param type  the requested type of the duration, null means AllType\n+     * @param type  the requested type of the period, null means AllType\n      * @return a time period derived from the interval\n      */\n     Period toPeriod(PeriodType type);", "timestamp": 1091894962, "metainfo": ""}