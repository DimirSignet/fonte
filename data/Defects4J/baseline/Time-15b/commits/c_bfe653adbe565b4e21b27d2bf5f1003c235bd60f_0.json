{"sha": "bfe653adbe565b4e21b27d2bf5f1003c235bd60f", "log": "Fixed parsing date where format includes era.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/field/UnsupportedDurationField.java\n+++ b/JodaTime/src/java/org/joda/time/field/UnsupportedDurationField.java\n \n     /**\n      * Gets an instance of UnsupportedDurationField for a specific named field.\n-     * Names should be plural, such as 'years' or 'hours'.\n      * The returned instance is cached.\n      * \n      * @param type  the type to obtain\n--- a/JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java\n import org.joda.time.DateTimeFieldType;\n import org.joda.time.DateTimeUtils;\n import org.joda.time.DateTimeZone;\n+import org.joda.time.DurationField;\n \n /**\n  * DateTimeParserBucket is an advanced class, intended mainly for parser\n                 (iField.getDurationField(), other.getDurationField());\n         }\n         \n-        private int compareReverse(Comparable a, Comparable b) {\n-            if (a == null) {\n-                if (b == null) {\n+        private int compareReverse(DurationField a, DurationField b) {\n+            if (a == null || !a.isSupported()) {\n+                if (b == null || !b.isSupported()) {\n                     return 0;\n                 }\n                 return -1;\n             }\n-            if (b == null) {\n+            if (b == null || !b.isSupported()) {\n                 return 1;\n             }\n             return -a.compareTo(b);\n--- a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import org.joda.time.Chronology;\n import org.joda.time.DateTime;\n import org.joda.time.DateTimeConstants;\n import org.joda.time.DateTimeUtils;\n         f.parseDateTime(\"-50\");\n     }\n \n+    public void testFormat_yearOfEraParse() {\n+        Chronology chrono = Chronology.getGJ();\n+\n+        DateTimeFormatter f = DateTimeFormat\n+            .forPattern(\"YYYY-MM GG\")\n+            .withChronology(chrono)\n+            .withLocale(Locale.UK);\n+\n+        DateTime dt = new DateTime(2005, 10, 1, 0, 0, 0, 0, chrono);\n+        assertEquals(dt, f.parseDateTime(\"2005-10 AD\"));\n+\n+        dt = new DateTime(-2005, 10, 1, 0, 0, 0, 0, chrono);\n+        assertEquals(dt, f.parseDateTime(\"2005-10 BC\"));\n+    }        \n+\n     //-----------------------------------------------------------------------\n     public void testFormat_year() {\n         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);", "timestamp": 1117691035, "metainfo": ""}