{"sha": "8a47b508406a9d143348d72a146efb3ee7fa7157", "log": "Refine methods, constructors and javadoc  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/LocalDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/LocalDateTime.java\n  * All standard Chronology classes supplied are thread-safe and immutable.\n  *\n  * @author Stephen Colebourne\n- * @since 1.0\n+ * @since 1.3\n  */\n public final class LocalDateTime\n         extends AbstractPartial\n     private long iLocalMillis;\n     /** The chronology to use in UTC */\n     private Chronology iChronology;\n-\n-    //-----------------------------------------------------------------------\n-    /**\n-     * Constructs an instance set to the current local time evaluated using\n-     * ISO chronology in the default zone.\n-     * <p>\n-     * Once the constructor is completed, the zone is no longer used.\n-     */\n-    public static LocalDateTime nowDefaultZone() {\n-        return forInstant(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());\n-    }\n-\n-    /**\n-     * Constructs an instance set to the current local time evaluated using\n-     * ISO chronology in the specified zone.\n-     * <p>\n-     * If the specified time zone is null, the default zone is used.\n-     * Once the constructor is completed, the zone is no longer used.\n-     *\n-     * @param zone  the time zone, null means default zone\n-     */\n-    public static LocalDateTime now(DateTimeZone zone) {\n-        return forInstant(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));\n-    }\n-\n-    /**\n-     * Constructs an instance set to the current local time evaluated using\n-     * specified chronology.\n-     * <p>\n-     * If the chronology is null, ISO chronology in the default time zone is used.\n-     * Once the constructor is completed, the zone is no longer used.\n-     *\n-     * @param chronology  the chronology, null means ISOChronology in default zone\n-     */\n-    public static LocalDateTime now(Chronology chronology) {\n-        return forInstant(DateTimeUtils.currentTimeMillis(), chronology);\n-    }\n \n     //-----------------------------------------------------------------------\n     /**\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Constructs an instance set to the current local time evaluated using\n+     * ISO chronology in the default zone.\n+     * <p>\n+     * Once the constructor is completed, the zone is no longer used.\n+     */\n+    public LocalDateTime() {\n+        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());\n+    }\n+\n+    /**\n+     * Constructs an instance set to the current local time evaluated using\n+     * ISO chronology in the specified zone.\n+     * <p>\n+     * If the specified time zone is null, the default zone is used.\n+     * Once the constructor is completed, the zone is no longer used.\n+     *\n+     * @param zone  the time zone, null means default zone\n+     */\n+    public LocalDateTime(DateTimeZone zone) {\n+        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));\n+    }\n+\n+    /**\n+     * Constructs an instance set to the current local time evaluated using\n+     * specified chronology.\n+     * <p>\n+     * If the chronology is null, ISO chronology in the default time zone is used.\n+     * Once the constructor is completed, the zone is no longer used.\n+     *\n+     * @param chronology  the chronology, null means ISOChronology in default zone\n+     */\n+    public LocalDateTime(Chronology chronology) {\n+        this(DateTimeUtils.currentTimeMillis(), chronology);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Constructs an instance set to the local time defined by the specified\n      * instant evaluated using ISO chronology in the default zone.\n      * <p>\n      *\n      * @param instant  the milliseconds from 1970-01-01T00:00:00Z\n      */\n-    public static LocalDateTime forInstantDefaultZone(long instant) {\n-        return forInstant(instant, ISOChronology.getInstance());\n+    public LocalDateTime(long instant) {\n+        this(instant, ISOChronology.getInstance());\n     }\n \n     /**\n      * @param instant  the milliseconds from 1970-01-01T00:00:00Z\n      * @param zone  the time zone, null means default zone\n      */\n-    public static LocalDateTime forInstant(long instant, DateTimeZone zone) {\n-        return forInstant(instant, ISOChronology.getInstance(zone));\n+    public LocalDateTime(long instant, DateTimeZone zone) {\n+        this(instant, ISOChronology.getInstance(zone));\n     }\n \n     /**\n      * @param instant  the milliseconds from 1970-01-01T00:00:00Z\n      * @param chronology  the chronology, null means ISOChronology in default zone\n      */\n-    public static LocalDateTime forInstant(long instant, Chronology chronology) {\n+    public LocalDateTime(long instant, Chronology chronology) {\n         chronology = DateTimeUtils.getChronology(chronology);\n+        \n         long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\n-        return new LocalDateTime(localMillis, chronology.withUTC());\n+        iLocalMillis = localMillis;\n+        iChronology = chronology.withUTC();\n     }\n \n     //-----------------------------------------------------------------------\n      * @param instant  the datetime object\n      * @throws IllegalArgumentException if the instant is invalid\n      */\n-    public static LocalDateTime forInstant(Object instant) {\n-        return forInstant(instant, (Chronology) null);\n+    public LocalDateTime(Object instant) {\n+        this(instant, (Chronology) null);\n     }\n \n     /**\n      * @param zone  the time zone\n      * @throws IllegalArgumentException if the instant is invalid\n      */\n-    public static LocalDateTime forInstant(Object instant, DateTimeZone zone) {\n+    public LocalDateTime(Object instant, DateTimeZone zone) {\n         InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n-        Chronology chrono = converter.getChronology(instant, zone);\n-        long millis = converter.getInstantMillis(instant, chrono);\n-        chrono = DateTimeUtils.getChronology(chrono);\n-        return forInstant(millis, chrono);\n+        Chronology chronology = converter.getChronology(instant, zone);\n+        long millis = converter.getInstantMillis(instant, chronology);\n+        chronology = DateTimeUtils.getChronology(chronology);\n+        \n+        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);\n+        iLocalMillis = localMillis;\n+        iChronology = chronology.withUTC();\n     }\n \n     /**\n      * @param chronology  the chronology\n      * @throws IllegalArgumentException if the instant is invalid\n      */\n-    public static LocalDateTime forInstant(Object instant, Chronology chronology) {\n+    public LocalDateTime(Object instant, Chronology chronology) {\n         InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n         Chronology chrono = DateTimeUtils.getChronology(converter.getChronology(instant, chronology));\n-        long millis = converter.getInstantMillis(instant, chronology);\n-        return forInstant(millis, chrono);\n-    }\n-\n-    /**\n-     * Constructs an instance set to the local time defined by the specified\n-     * instant evaluated using the specified local (UTC) chronology.\n-     *\n-     * @param localMillis  the local milliseconds from 1970-01-01T00:00:00\n-     * @param chronology  the UTC chronology, not null\n-     */\n-    LocalDateTime(long localMillis, Chronology chronology) {\n-        super();\n+        long millis = converter.getInstantMillis(instant, chrono);\n+        \n+        long localMillis = chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);\n         iLocalMillis = localMillis;\n-        iChronology = chronology;\n+        iChronology = chrono.withUTC();\n     }\n \n     //-----------------------------------------------------------------------\n         return type.getField(getChronology()).isSupported();\n     }\n \n+    /**\n+     * Checks if the duration type specified is supported by this\n+     * local datetime and chronology.\n+     *\n+     * @param type  a duration type, usually obtained from DurationFieldType\n+     * @return true if the field type is supported\n+     */\n+    public boolean isSupported(DurationFieldType type) {\n+        if (type == null) {\n+            return false;\n+        }\n+        return type.getField(getChronology()).isSupported();\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Gets the milliseconds of the datetime instant from the Java epoch\n      * of 1970-01-01T00:00:00 (not fixed to any specific time zone).\n-     * \n+     *\n      * @return the number of milliseconds since 1970-01-01T00:00:00\n      */\n     long getLocalMillis() {\n \n     /**\n      * Gets the chronology of the datetime.\n-     * \n+     *\n      * @return the Chronology that the datetime is using\n      */\n     public Chronology getChronology() {\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Get this object as a DateTime using the default zone.\n+     * Converts this object to a DateTime using the default zone.\n      * \n      * @return <code>this</code>\n      */\n-    public DateTime toDateTimeDefaultZone() {\n+    public DateTime toDateTime() {\n         return toDateTime((DateTimeZone) null);\n     }\n \n     /**\n-     * Get this object as a DateTime using the specified zone.\n+     * Converts this object to a DateTime using the specified zone.\n      * \n      * @param zone time zone to apply, or default if null\n      * @return a DateTime using the same millis\n     //-----------------------------------------------------------------------\n     /**\n      * Converts this object to a LocalDate with the same date and chronology.\n-     * \n+     *\n      * @return a LocalDate with the same date and chronology\n      */\n-    public LocalDate getDate() {\n+    public LocalDate toLocalDate() {\n         return new LocalDate(getLocalMillis(), getChronology());\n     }\n \n     /**\n      * Converts this object to a LocalTime with the same time and chronology.\n-     * \n+     *\n      * @return a LocalTime with the same time and chronology\n      */\n-    public LocalTime getTime() {\n+    public LocalTime toLocalTime() {\n         return new LocalTime(getLocalMillis(), getChronology());\n     }\n \n \n     //-----------------------------------------------------------------------\n     /**\n-     * Gets a copy of this datetime with the specified date, retaining the time fields.\n+     * Gets a copy of this LocalDateTime with the specified date,\n+     * retaining the time fields.\n      * <p>\n      * If the date is already the date passed in, then <code>this</code> is returned.\n      * <p>\n     }\n \n     /**\n-     * Gets a copy of this datetime with the specified time, retaining the date fields.\n+     * Gets a copy of this LocalDateTime with the specified time,\n+     * retaining the date fields.\n      * <p>\n      * If the time is already the time passed in, then <code>this</code> is returned.\n      * <p>\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Gets a copy of this datetime with the partial set of fields replacing those\n-     * from this instance.\n+     * Gets a copy of this LocalDateTime with the partial set of fields\n+     * replacing those from this instance.\n      * <p>\n      * For example, if the partial is a <code>TimeOfDay</code> then the time fields\n      * would be changed in the returned instance.\n     }\n \n     /**\n-     * Gets a copy of this datetime with the specified field set to a new value.\n+     * Gets a copy of this LocalDateTime with the specified field set to a new value.\n      * <p>\n      * For example, if the field type is <code>hourOfDay</code> then the hour of day\n      * field would be changed in the returned instance.\n     }\n \n     /**\n-     * Gets a copy of this datetime with the value of the specified field increased.\n+     * Gets a copy of this LocalDateTime with the value of the specified\n+     * field increased.\n      * <p>\n      * If the addition is zero or the field is null, then <code>this</code> is returned.\n      * <p>\n      * LocalDateTime added = dt.plusYears(6);\n      * LocalDateTime added = dt.plus(Period.years(6));\n      * </pre>\n-     * \n+     *\n      * @param fieldType  the field type to add to, not null\n      * @param amount  the amount to add\n      * @return a copy of this datetime with the field updated\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Gets a copy of this datetime with the specified duration added.\n+     * Gets a copy of this LocalDateTime with the specified duration added.\n      * <p>\n      * If the addition is zero, then <code>this</code> is returned.\n-     * \n+     *\n      * @param durationToAdd  the duration to add to this one, null means zero\n      * @param scalar  the amount of times to add, such as -1 to subtract once\n      * @return a copy of this datetime with the duration added\n     }\n \n     /**\n-     * Gets a copy of this datetime with the specified period added.\n+     * Gets a copy of this LocalDateTime with the specified period added.\n      * <p>\n      * If the addition is zero, then <code>this</code> is returned.\n      * <p>\n      * period instances. Adding one field is best achieved using methods\n      * like {@link #withFieldAdded(DurationFieldType, int)}\n      * or {@link #plusYears(int)}.\n-     * \n+     *\n      * @param period  the period to add to this one, null means zero\n      * @param scalar  the amount of times to add, such as -1 to subtract once\n      * @return a copy of this datetime with the period added\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Gets a copy of this datetime with the specified duration added.\n+     * Gets a copy of this LocalDateTime with the specified duration added.\n      * <p>\n      * If the amount is zero or null, then <code>this</code> is returned.\n-     * \n+     *\n      * @param duration  the duration to add to this one, null means zero\n      * @return a copy of this datetime with the duration added\n      * @throws ArithmeticException if the result exceeds the internal capacity\n     }\n \n     /**\n-     * Gets a copy of this datetime with the specified period added.\n+     * Gets a copy of this LocalDateTime with the specified period added.\n      * <p>\n      * If the amount is zero or null, then <code>this</code> is returned.\n      * <p>\n      * This method is typically used to add complex period instances.\n      * Adding one field is best achieved using methods\n      * like {@link #plusYears(int)}.\n-     * \n+     *\n      * @param period  the period to add to this one, null means zero\n      * @return a copy of this datetime with the period added\n      * @throws ArithmeticException if the result exceeds the internal capacity\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Returns a new datetime plus the specified number of years.\n-     * <p>\n-     * This datetime instance is immutable and unaffected by this method call.\n+     * Returns a new LocalDateTime plus the specified number of years.\n+     * <p>\n+     * This LocalDateTime instance is immutable and unaffected by this method call.\n      * <p>\n      * The following three lines are identical in effect:\n      * <pre>\n      * </pre>\n      *\n      * @param years  the amount of years to add, may be negative\n-     * @return the new datetime plus the increased years\n+     * @return the new LocalDateTime plus the increased years\n      */\n     public LocalDateTime plusYears(int years) {\n         if (years == 0) {\n     }\n \n     /**\n-     * Returns a new datetime plus the specified number of months.\n-     * <p>\n-     * This datetime instance is immutable and unaffected by this method call.\n+     * Returns a new LocalDateTime plus the specified number of months.\n+     * <p>\n+     * This LocalDateTime instance is immutable and unaffected by this method call.\n      * <p>\n      * The following three lines are identical in effect:\n      * <pre>\n      * </pre>\n      *\n      * @param months  the amount of months to add, may be negative\n-     * @return the new datetime plus the increased months\n+     * @return the new LocalDateTime plus the increased months\n      */\n     public LocalDateTime plusMonths(int months) {\n         if (months == 0) {\n     }\n \n     /**\n-     * Returns a new datetime plus the specified number of weeks.\n-     * <p>\n-     * This datetime instance is immutable and unaffected by this method call.\n+     * Returns a new LocalDateTime plus the specified number of weeks.\n+     * <p>\n+     * This LocalDateTime instance is immutable and unaffected by this method call.\n      * <p>\n      * The following three lines are identical in effect:\n      * <pre>\n      * </pre>\n      *\n      * @param weeks  the amount of weeks to add, may be negative\n-     * @return the new datetime plus the increased weeks\n+     * @return the new LocalDateTime plus the increased weeks\n      */\n     public LocalDateTime plusWeeks(int weeks) {\n         if (weeks == 0) {\n     }\n \n     /**\n-     * Returns a new datetime plus the specified number of days.\n-     * <p>\n-     * This datetime instance is immutable and unaffected by this method call.\n+     * Returns a new LocalDateTime plus the specified number of days.\n+     * <p>\n+     * This LocalDateTime instance is immutable and unaffected by this method call.\n      * <p>\n      * The following three lines are identical in effect:\n      * <pre>\n      * </pre>\n      *\n      * @param days  the amount of days to add, may be negative\n-     * @return the new datetime plus the increased days\n+     * @return the new LocalDateTime plus the increased days\n      */\n     public LocalDateTime plusDays(int days) {\n         if (days == 0) {\n         return withLocalMillis(instant);\n     }\n \n-    /**\n-     * Returns a new datetime plus the specified number of hours.\n-     * <p>\n-     * This datetime instance is immutable and unaffected by this method call.\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns a new LocalDateTime plus the specified number of hours.\n+     * <p>\n+     * This LocalDateTime instance is immutable and unaffected by this method call.\n      * <p>\n      * The following three lines are identical in effect:\n      * <pre>\n      * </pre>\n      *\n      * @param hours  the amount of hours to add, may be negative\n-     * @return the new datetime plus the increased hours\n+     * @return the new LocalDateTime plus the increased hours\n      */\n     public LocalDateTime plusHours(int hours) {\n         if (hours == 0) {\n     }\n \n     /**\n-     * Returns a new datetime plus the specified number of minutes.\n-     * <p>\n-     * This datetime instance is immutable and unaffected by this method call.\n+     * Returns a new LocalDateTime plus the specified number of minutes.\n+     * <p>\n+     * This LocalDateTime instance is immutable and unaffected by this method call.\n      * <p>\n      * The following three lines are identical in effect:\n      * <pre>\n      * </pre>\n      *\n      * @param minutes  the amount of minutes to add, may be negative\n-     * @return the new datetime plus the increased minutes\n+     * @return the new LocalDateTime plus the increased minutes\n      */\n     public LocalDateTime plusMinutes(int minutes) {\n         if (minutes == 0) {\n     }\n \n     /**\n-     * Returns a new datetime plus the specified number of seconds.\n-     * <p>\n-     * This datetime instance is immutable and unaffected by this method call.\n+     * Returns a new LocalDateTime plus the specified number of seconds.\n+     * <p>\n+     * This LocalDateTime instance is immutable and unaffected by this method call.\n      * <p>\n      * The following three lines are identical in effect:\n      * <pre>\n      * </pre>\n      *\n      * @param seconds  the amount of seconds to add, may be negative\n-     * @return the new datetime plus the increased seconds\n+     * @return the new LocalDateTime plus the increased seconds\n      */\n     public LocalDateTime plusSeconds(int seconds) {\n         if (seconds == 0) {\n     }\n \n     /**\n-     * Returns a new datetime plus the specified number of millis.\n-     * <p>\n-     * This datetime instance is immutable and unaffected by this method call.\n+     * Returns a new LocalDateTime plus the specified number of millis.\n+     * <p>\n+     * This LocalDateTime instance is immutable and unaffected by this method call.\n      * <p>\n      * The following three lines are identical in effect:\n      * <pre>\n      * </pre>\n      *\n      * @param millis  the amount of millis to add, may be negative\n-     * @return the new datetime plus the increased millis\n+     * @return the new LocalDateTime plus the increased millis\n      */\n     public LocalDateTime plusMillis(int millis) {\n         if (millis == 0) {\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Gets a copy of this datetime with the specified duration taken away.\n+     * Gets a copy of this LocalDateTime with the specified duration taken away.\n      * <p>\n      * If the amount is zero or null, then <code>this</code> is returned.\n-     * \n+     *\n      * @param duration  the duration to reduce this instant by\n      * @return a copy of this datetime with the duration taken away\n      * @throws ArithmeticException if the result exceeds the internal capacity\n     }\n \n     /**\n-     * Gets a copy of this datetime with the specified period taken away.\n+     * Gets a copy of this LocalDateTime with the specified period taken away.\n      * <p>\n      * If the amount is zero or null, then <code>this</code> is returned.\n      * <p>\n      * This method is typically used to subtract complex period instances.\n      * Subtracting one field is best achieved using methods\n      * like {@link #minusYears(int)}.\n-     * \n+     *\n      * @param period  the period to reduce this instant by\n      * @return a copy of this datetime with the period taken away\n      * @throws ArithmeticException if the result exceeds the internal capacity\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Returns a new datetime minus the specified number of years.\n-     * <p>\n-     * This datetime instance is immutable and unaffected by this method call.\n+     * Returns a new LocalDateTime minus the specified number of years.\n+     * <p>\n+     * This LocalDateTime instance is immutable and unaffected by this method call.\n      * <p>\n      * The following three lines are identical in effect:\n      * <pre>\n      * </pre>\n      *\n      * @param years  the amount of years to subtract, may be negative\n-     * @return the new datetime minus the increased years\n+     * @return the new LocalDateTime minus the increased years\n      */\n     public LocalDateTime minusYears(int years) {\n         if (years == 0) {\n     }\n \n     /**\n-     * Returns a new datetime minus the specified number of months.\n-     * <p>\n-     * This datetime instance is immutable and unaffected by this method call.\n+     * Returns a new LocalDateTime minus the specified number of months.\n+     * <p>\n+     * This LocalDateTime instance is immutable and unaffected by this method call.\n      * <p>\n      * The following three lines are identical in effect:\n      * <pre>\n      * </pre>\n      *\n      * @param months  the amount of months to subtract, may be negative\n-     * @return the new datetime minus the increased months\n+     * @return the new LocalDateTime minus the increased months\n      */\n     public LocalDateTime minusMonths(int months) {\n         if (months == 0) {\n     }\n \n     /**\n-     * Returns a new datetime minus the specified number of weeks.\n-     * <p>\n-     * This datetime instance is immutable and unaffected by this method call.\n+     * Returns a new LocalDateTime minus the specified number of weeks.\n+     * <p>\n+     * This LocalDateTime instance is immutable and unaffected by this method call.\n      * <p>\n      * The following three lines are identical in effect:\n      * <pre>\n      * </pre>\n      *\n      * @param weeks  the amount of weeks to subtract, may be negative\n-     * @return the new datetime minus the increased weeks\n+     * @return the new LocalDateTime minus the increased weeks\n      */\n     public LocalDateTime minusWeeks(int weeks) {\n         if (weeks == 0) {\n     }\n \n     /**\n-     * Returns a new datetime minus the specified number of days.\n-     * <p>\n-     * This datetime instance is immutable and unaffected by this method call.\n+     * Returns a new LocalDateTime minus the specified number of days.\n+     * <p>\n+     * This LocalDateTime instance is immutable and unaffected by this method call.\n      * <p>\n      * The following three lines are identical in effect:\n      * <pre>\n      * </pre>\n      *\n      * @param days  the amount of days to subtract, may be negative\n-     * @return the new datetime minus the increased days\n+     * @return the new LocalDateTime minus the increased days\n      */\n     public LocalDateTime minusDays(int days) {\n         if (days == 0) {\n         return withLocalMillis(instant);\n     }\n \n-    /**\n-     * Returns a new datetime minus the specified number of hours.\n-     * <p>\n-     * This datetime instance is immutable and unaffected by this method call.\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns a new LocalDateTime minus the specified number of hours.\n+     * <p>\n+     * This LocalDateTime instance is immutable and unaffected by this method call.\n      * <p>\n      * The following three lines are identical in effect:\n      * <pre>\n      * </pre>\n      *\n      * @param hours  the amount of hours to subtract, may be negative\n-     * @return the new datetime minus the increased hours\n+     * @return the new LocalDateTime minus the increased hours\n      */\n     public LocalDateTime minusHours(int hours) {\n         if (hours == 0) {\n     }\n \n     /**\n-     * Returns a new datetime minus the specified number of minutes.\n-     * <p>\n-     * This datetime instance is immutable and unaffected by this method call.\n+     * Returns a new LocalDateTime minus the specified number of minutes.\n+     * <p>\n+     * This LocalDateTime instance is immutable and unaffected by this method call.\n      * <p>\n      * The following three lines are identical in effect:\n      * <pre>\n      * </pre>\n      *\n      * @param minutes  the amount of minutes to subtract, may be negative\n-     * @return the new datetime minus the increased minutes\n+     * @return the new LocalDateTime minus the increased minutes\n      */\n     public LocalDateTime minusMinutes(int minutes) {\n         if (minutes == 0) {\n     }\n \n     /**\n-     * Returns a new datetime minus the specified number of seconds.\n-     * <p>\n-     * This datetime instance is immutable and unaffected by this method call.\n+     * Returns a new LocalDateTime minus the specified number of seconds.\n+     * <p>\n+     * This LocalDateTime instance is immutable and unaffected by this method call.\n      * <p>\n      * The following three lines are identical in effect:\n      * <pre>\n      * </pre>\n      *\n      * @param seconds  the amount of seconds to subtract, may be negative\n-     * @return the new datetime minus the increased seconds\n+     * @return the new LocalDateTime minus the increased seconds\n      */\n     public LocalDateTime minusSeconds(int seconds) {\n         if (seconds == 0) {\n     }\n \n     /**\n-     * Returns a new datetime minus the specified number of millis.\n-     * <p>\n-     * This datetime instance is immutable and unaffected by this method call.\n+     * Returns a new LocalDateTime minus the specified number of millis.\n+     * <p>\n+     * This LocalDateTime instance is immutable and unaffected by this method call.\n      * <p>\n      * The following three lines are identical in effect:\n      * <pre>\n      * </pre>\n      *\n      * @param millis  the amount of millis to subtract, may be negative\n-     * @return the new datetime minus the increased millis\n+     * @return the new LocalDateTime minus the increased millis\n      */\n     public LocalDateTime minusMillis(int millis) {\n         if (millis == 0) {\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Gets the property object for the specified type, which contains many useful methods.\n-     *\n-     * @param type  the field type to get the chronology for\n+     * Gets the property object for the specified type, which contains many\n+     * useful methods.\n+     *\n+     * @param fieldType  the field type to get the chronology for\n      * @return the property object\n      * @throws IllegalArgumentException if the field is null or unsupported\n      */\n-    public Property property(DateTimeFieldType type) {\n-        if (type == null) {\n+    public Property property(DateTimeFieldType fieldType) {\n+        if (fieldType == null) {\n             throw new IllegalArgumentException(\"The DateTimeFieldType must not be null\");\n         }\n-        DateTimeField field = type.getField(getChronology());\n-        if (field.isSupported() == false) {\n-            throw new IllegalArgumentException(\"Field '\" + type + \"' is not supported\");\n-        }\n-        return new Property(this, field);\n+        if (isSupported(fieldType) == false) {\n+            throw new IllegalArgumentException(\"Field '\" + fieldType + \"' is not supported\");\n+        }\n+        return new Property(this, fieldType.getField(getChronology()));\n     }\n \n     //-----------------------------------------------------------------------\n     /**\n      * Get the era field value.\n-     * \n+     *\n      * @return the era\n      */\n     public int getEra() {\n \n     /**\n      * Get the year of era field value.\n-     * \n+     *\n      * @return the year of era\n      */\n     public int getCenturyOfEra() {\n \n     /**\n      * Get the year of era field value.\n-     * \n+     *\n      * @return the year of era\n      */\n     public int getYearOfEra() {\n \n     /**\n      * Get the year of century field value.\n-     * \n+     *\n      * @return the year of century\n      */\n     public int getYearOfCentury() {\n \n     /**\n      * Get the year field value.\n-     * \n+     *\n      * @return the year\n      */\n     public int getYear() {\n \n     /**\n      * Get the weekyear field value.\n-     * \n-     * @return the year of a week based year\n+     * <p>\n+     * The weekyear is the year that matches with the weekOfWeekyear field.\n+     * In the standard ISO8601 week algorithm, the first week of the year\n+     * is that in which at least 4 days are in the year. As a result of this\n+     * definition, day 1 of the first week may be in the previous year.\n+     * The weekyear allows you to query the effective year for that day.\n+     *\n+     * @return the weekyear\n      */\n     public int getWeekyear() {\n         return getChronology().weekyear().get(getLocalMillis());\n \n     /**\n      * Get the month of year field value.\n-     * \n+     *\n      * @return the month of year\n      */\n     public int getMonthOfYear() {\n \n     /**\n      * Get the week of weekyear field value.\n-     * \n+     *\n      * @return the week of a week based year\n      */\n     public int getWeekOfWeekyear() {\n \n     /**\n      * Get the day of year field value.\n-     * \n+     *\n      * @return the day of year\n      */\n     public int getDayOfYear() {\n      * Get the day of month field value.\n      * <p>\n      * The values for the day of month are defined in {@link org.joda.time.DateTimeConstants}.\n-     * \n+     *\n      * @return the day of month\n      */\n     public int getDayOfMonth() {\n      * Get the day of week field value.\n      * <p>\n      * The values for the day of week are defined in {@link org.joda.time.DateTimeConstants}.\n-     * \n+     *\n      * @return the day of week\n      */\n     public int getDayOfWeek() {\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Sets the era field in a copy of this LocalDateTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * LocalDateTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * era changed.\n+     *\n+     * @param era  the era to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public LocalDateTime withEra(int era) {\n+        return withLocalMillis(getChronology().era().set(getLocalMillis(), era));\n+    }\n+\n+    /**\n+     * Sets the century of era field in a copy of this LocalDateTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * LocalDateTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * century of era changed.\n+     *\n+     * @param centuryOfEra  the centurey of era to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public LocalDateTime withCenturyOfEra(int centuryOfEra) {\n+        return withLocalMillis(getChronology().centuryOfEra().set(getLocalMillis(), centuryOfEra));\n+    }\n+\n+    /**\n+     * Sets the year of era field in a copy of this LocalDateTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * LocalDateTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * year of era changed.\n+     *\n+     * @param yearOfEra  the year of era to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public LocalDateTime withYearOfEra(int yearOfEra) {\n+        return withLocalMillis(getChronology().yearOfEra().set(getLocalMillis(), yearOfEra));\n+    }\n+\n+    /**\n+     * Sets the year of century field in a copy of this LocalDateTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * LocalDateTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * year of century changed.\n+     *\n+     * @param year of century  the year of century to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public LocalDateTime withYearOfCentury(int yearOfCentury) {\n+        return withLocalMillis(getChronology().yearOfCentury().set(getLocalMillis(), yearOfCentury));\n+    }\n+\n+    /**\n+     * Sets the year field in a copy of this LocalDateTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * LocalDateTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * year changed.\n+     *\n+     * @param year  the year to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public LocalDateTime withYear(int year) {\n+        return withLocalMillis(getChronology().year().set(getLocalMillis(), year));\n+    }\n+\n+    /**\n+     * Sets the weekyear field in a copy of this LocalDateTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * LocalDateTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * weekyear changed.\n+     *\n+     * @param weekyear  the weekyear to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public LocalDateTime withWeekyear(int weekyear) {\n+        return withLocalMillis(getChronology().weekyear().set(getLocalMillis(), weekyear));\n+    }\n+\n+    /**\n+     * Sets the month of year field in a copy of this LocalDateTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * LocalDateTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * month of year changed.\n+     *\n+     * @param monthOfYear  the month of year to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public LocalDateTime withMonthOfYear(int monthOfYear) {\n+        return withLocalMillis(getChronology().monthOfYear().set(getLocalMillis(), monthOfYear));\n+    }\n+\n+    /**\n+     * Sets the week of weekyear field in a copy of this LocalDateTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * LocalDateTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * week of weekyear changed.\n+     *\n+     * @param weekOfWeekyear  the week of weekyear to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public LocalDateTime withWeekOfWeekyear(int weekOfWeekyear) {\n+        return withLocalMillis(getChronology().weekOfWeekyear().set(getLocalMillis(), weekOfWeekyear));\n+    }\n+\n+    /**\n+     * Sets the day of year field in a copy of this LocalDateTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * LocalDateTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * day of year changed.\n+     *\n+     * @param dayOfYear  the day of year to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public LocalDateTime withDayOfYear(int dayOfYear) {\n+        return withLocalMillis(getChronology().dayOfYear().set(getLocalMillis(), dayOfYear));\n+    }\n+\n+    /**\n+     * Sets the day of month field in a copy of this LocalDateTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * LocalDateTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * day of month changed.\n+     *\n+     * @param dayOfMonth  the day of month to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public LocalDateTime withDayOfMonth(int dayOfMonth) {\n+        return withLocalMillis(getChronology().dayOfMonth().set(getLocalMillis(), dayOfMonth));\n+    }\n+\n+    /**\n+     * Sets the day of week field in a copy of this LocalDateTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * LocalDateTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * day of week changed.\n+     *\n+     * @param dayOfWeek  the day of week to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public LocalDateTime withDayOfWeek(int dayOfWeek) {\n+        return withLocalMillis(getChronology().dayOfWeek().set(getLocalMillis(), dayOfWeek));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Sets the hour of day field in a copy of this LocalDateTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * LocalDateTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * hour of day changed.\n+     *\n+     * @param hour  the hour of day to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public LocalDateTime withHourOfDay(int hour) {\n+        return withLocalMillis(getChronology().hourOfDay().set(getLocalMillis(), hour));\n+    }\n+\n+    /**\n+     * Sets the minute of hour field in a copy of this LocalDateTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * LocalDateTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * minute of hour changed.\n+     *\n+     * @param minute  the minute of hour to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public LocalDateTime withMinuteOfHour(int minute) {\n+        return withLocalMillis(getChronology().minuteOfHour().set(getLocalMillis(), minute));\n+    }\n+\n+    /**\n+     * Sets the second of minute field in a copy of this LocalDateTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * LocalDateTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * second of minute changed.\n+     *\n+     * @param second  the second of minute to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public LocalDateTime withSecondOfMinute(int second) {\n+        return withLocalMillis(getChronology().secondOfMinute().set(getLocalMillis(), second));\n+    }\n+\n+    /**\n+     * Sets the millis of second field in a copy of this LocalDateTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * LocalDateTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * millis of second changed.\n+     *\n+     * @param millis  the millis of second to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public LocalDateTime withMillisOfSecond(int millis) {\n+        return withLocalMillis(getChronology().millisOfSecond().set(getLocalMillis(), millis));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Get the era property.\n-     * \n+     *\n      * @return the era property\n      */\n     public Property era() {\n \n     /**\n      * Get the century of era property.\n-     * \n+     *\n      * @return the year of era property\n      */\n     public Property centuryOfEra() {\n \n     /**\n      * Get the year of century property.\n-     * \n+     *\n      * @return the year of era property\n      */\n     public Property yearOfCentury() {\n \n     /**\n      * Get the year of era property.\n-     * \n+     *\n      * @return the year of era property\n      */\n     public Property yearOfEra() {\n \n     /**\n      * Get the year property.\n-     * \n+     *\n      * @return the year property\n      */\n     public Property year() {\n     }\n \n     /**\n-     * Get the year of a week based year property.\n-     * \n-     * @return the year of a week based year property\n+     * Get the weekyear property.\n+     *\n+     * @return the weekyear property\n      */\n     public Property weekyear() {\n         return new Property(this, getChronology().weekyear());\n \n     /**\n      * Get the month of year property.\n-     * \n+     *\n      * @return the month of year property\n      */\n     public Property monthOfYear() {\n \n     /**\n      * Get the week of a week based year property.\n-     * \n+     *\n      * @return the week of a week based year property\n      */\n     public Property weekOfWeekyear() {\n \n     /**\n      * Get the day of year property.\n-     * \n+     *\n      * @return the day of year property\n      */\n     public Property dayOfYear() {\n \n     /**\n      * Get the day of month property.\n-     * \n+     *\n      * @return the day of month property\n      */\n     public Property dayOfMonth() {\n \n     /**\n      * Get the day of week property.\n-     * \n+     *\n      * @return the day of week property\n      */\n     public Property dayOfWeek() {\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Output the date time in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ).\n+     * Output the date time in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSS).\n      * \n      * @return ISO8601 time formatted string.\n      */\n      * of DateTime - they do not modify the original. The example below yields two\n      * independent immutable date objects 20 years apart.\n      * <pre>\n-     * DateTime dt = new DateTime(1972, 12, 3, 0, 0, 0, 0);\n-     * DateTime dt1920 = dt.year().setCopy(1920);\n+     * LocalDateTime dt = new LocalDateTime(1972, 12, 3, 0, 0, 0, 0);\n+     * LocalDateTime dt1920 = dt.year().setCopy(1920);\n      * <p>\n      * LocalDateTime.Propery itself is thread-safe and immutable, as well as the\n      * LocalDateTime being operated on.\n      *\n      * @author Stephen Colebourne\n      * @author Brian S O'Neill\n-     * @since 1.2\n+     * @since 1.3\n      */\n     public static final class Property extends AbstractReadableInstantFieldProperty {\n         \n          *\n          * @return a copy of the LocalDateTime with the field value changed\n          */\n-        public LocalDateTime withRoundedFloor() {\n+        public LocalDateTime roundFloor() {\n             return iInstant.withLocalMillis(iField.roundFloor(iInstant.getLocalMillis()));\n         }\n         \n          *\n          * @return a copy of the LocalDateTime with the field value changed\n          */\n-        public LocalDateTime withRoundedCeiling() {\n+        public LocalDateTime roundCeiling() {\n             return iInstant.withLocalMillis(iField.roundCeiling(iInstant.getLocalMillis()));\n         }\n         \n          *\n          * @return a copy of the LocalDateTime with the field value changed\n          */\n-        public LocalDateTime withRoundedHalfFloor() {\n+        public LocalDateTime roundHalfFloor() {\n             return iInstant.withLocalMillis(iField.roundHalfFloor(iInstant.getLocalMillis()));\n         }\n         \n          *\n          * @return a copy of the LocalDateTime with the field value changed\n          */\n-        public LocalDateTime withRoundedHalfCeiling() {\n+        public LocalDateTime roundHalfCeiling() {\n             return iInstant.withLocalMillis(iField.roundHalfCeiling(iInstant.getLocalMillis()));\n         }\n         \n          *\n          * @return a copy of the LocalDateTime with the field value changed\n          */\n-        public LocalDateTime withRoundedHalfEven() {\n+        public LocalDateTime roundHalfEven() {\n             return iInstant.withLocalMillis(iField.roundHalfEven(iInstant.getLocalMillis()));\n         }\n     }", "timestamp": 1142724402, "metainfo": ""}