{"sha": "b5c8777dd44fcc56679a211169287625bdf51474", "log": "Testing of LocalDate  ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/TestAll.java\n         \n         suite.addTest(TestLocalDate_Constructors.suite());\n         suite.addTest(TestLocalDate_Basics.suite());\n+        suite.addTest(TestLocalDate_Properties.suite());\n         \n         suite.addTest(TestLocalTime_Constructors.suite());\n         suite.addTest(TestLocalTime_Basics.suite());\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.CopticChronology;\n+\n+/**\n+ * This class is a Junit unit test for YearMonthDay.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestLocalDate_Properties extends TestCase {\n+\n+    private long TEST_TIME_NOW =\n+            (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    private long TEST_TIME1 =\n+        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private long TEST_TIME2 =\n+        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestLocalDate_Properties.class);\n+    }\n+\n+    public TestLocalDate_Properties(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetYear() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        assertSame(test.getChronology().year(), test.year().getField());\n+        assertEquals(\"year\", test.year().getName());\n+        assertEquals(\"Property[year]\", test.year().toString());\n+        assertSame(test, test.year().getLocalDate());\n+        assertEquals(1972, test.year().get());\n+        assertEquals(\"1972\", test.year().getAsString());\n+        assertEquals(\"1972\", test.year().getAsText());\n+        assertEquals(\"1972\", test.year().getAsText(Locale.FRENCH));\n+        assertEquals(\"1972\", test.year().getAsShortText());\n+        assertEquals(\"1972\", test.year().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().years(), test.year().getDurationField());\n+        assertEquals(null, test.year().getRangeDurationField());\n+        assertEquals(9, test.year().getMaximumTextLength(null));\n+        assertEquals(9, test.year().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesYear() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        assertEquals(-292275054, test.year().getMinimumValue());\n+        assertEquals(-292275054, test.year().getMinimumValueOverall());\n+        assertEquals(292277023, test.year().getMaximumValue());\n+        assertEquals(292277023, test.year().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyPlusYear() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.year().plus(9);\n+        check(test, 1972, 6, 9);\n+        check(copy, 1981, 6, 9);\n+        \n+        copy = test.year().plus(0);\n+        check(copy, 1972, 6, 9);\n+        \n+        copy = test.year().plus(292277023 - 1972);\n+        check(copy, 292277023, 6, 9);\n+        \n+        try {\n+            test.year().plus(292277023 - 1972 + 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 1972, 6, 9);\n+        \n+        copy = test.year().plus(-1972);\n+        check(copy, 0, 6, 9);\n+        \n+        copy = test.year().plus(-1973);\n+        check(copy, -1, 6, 9);\n+        \n+        try {\n+            test.year().plus(-292275054 - 1972 - 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 1972, 6, 9);\n+    }\n+\n+    public void testPropertyPlusWrapFieldYear() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.year().plusWrapField(9);\n+        check(test, 1972, 6, 9);\n+        check(copy, 1981, 6, 9);\n+        \n+        copy = test.year().plusWrapField(0);\n+        check(copy, 1972, 6, 9);\n+        \n+        copy = test.year().plusWrapField(292277023 - 1972 + 1);\n+        check(copy, -292275054, 6, 9);\n+        \n+        copy = test.year().plusWrapField(-292275054 - 1972 - 1);\n+        check(copy, 292277023, 6, 9);\n+    }\n+\n+    public void testPropertyWithYear() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.year().withValue(12);\n+        check(test, 1972, 6, 9);\n+        check(copy, 12, 6, 9);\n+    }\n+\n+    public void testPropertyWithTextYear() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.year().withValue(\"12\");\n+        check(test, 1972, 6, 9);\n+        check(copy, 12, 6, 9);\n+    }\n+\n+    public void testPropertyCompareToYear() {\n+        LocalDate test1 = new LocalDate(TEST_TIME1);\n+        LocalDate test2 = new LocalDate(TEST_TIME2);\n+        assertEquals(true, test1.year().compareTo(test2) < 0);\n+        assertEquals(true, test2.year().compareTo(test1) > 0);\n+        assertEquals(true, test1.year().compareTo(test1) == 0);\n+        try {\n+            test1.year().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.year().compareTo(dt2) < 0);\n+        assertEquals(true, test2.year().compareTo(dt1) > 0);\n+        assertEquals(true, test1.year().compareTo(dt1) == 0);\n+        try {\n+            test1.year().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMonth() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField());\n+        assertEquals(\"monthOfYear\", test.monthOfYear().getName());\n+        assertEquals(\"Property[monthOfYear]\", test.monthOfYear().toString());\n+        assertSame(test, test.monthOfYear().getLocalDate());\n+        assertEquals(6, test.monthOfYear().get());\n+        assertEquals(\"6\", test.monthOfYear().getAsString());\n+        assertEquals(\"June\", test.monthOfYear().getAsText());\n+        assertEquals(\"juin\", test.monthOfYear().getAsText(Locale.FRENCH));\n+        assertEquals(\"Jun\", test.monthOfYear().getAsShortText());\n+        assertEquals(\"juin\", test.monthOfYear().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField());\n+        assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField());\n+        assertEquals(9, test.monthOfYear().getMaximumTextLength(null));\n+        assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null));\n+        test = new LocalDate(1972, 7, 9);\n+        assertEquals(\"juillet\", test.monthOfYear().getAsText(Locale.FRENCH));\n+        assertEquals(\"juil.\", test.monthOfYear().getAsShortText(Locale.FRENCH));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesMonth() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        assertEquals(1, test.monthOfYear().getMinimumValue());\n+        assertEquals(1, test.monthOfYear().getMinimumValueOverall());\n+        assertEquals(12, test.monthOfYear().getMaximumValue());\n+        assertEquals(12, test.monthOfYear().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyPlusMonth() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.monthOfYear().plus(6);\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 12, 9);\n+        \n+        copy = test.monthOfYear().plus(7);\n+        check(copy, 1973, 1, 9);\n+        \n+        copy = test.monthOfYear().plus(-5);\n+        check(copy, 1972, 1, 9);\n+        \n+        copy = test.monthOfYear().plus(-6);\n+        check(copy, 1971, 12, 9);\n+        \n+        test = new LocalDate(1972, 1, 31);\n+        copy = test.monthOfYear().plus(1);\n+        check(copy, 1972, 2, 29);\n+        \n+        copy = test.monthOfYear().plus(2);\n+        check(copy, 1972, 3, 31);\n+        \n+        copy = test.monthOfYear().plus(3);\n+        check(copy, 1972, 4, 30);\n+        \n+        test = new LocalDate(1971, 1, 31);\n+        copy = test.monthOfYear().plus(1);\n+        check(copy, 1971, 2, 28);\n+    }\n+\n+    public void testPropertyPlusWrapFieldMonth() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.monthOfYear().plusWrapField(4);\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 10, 9);\n+        \n+        copy = test.monthOfYear().plusWrapField(8);\n+        check(copy, 1972, 2, 9);\n+        \n+        copy = test.monthOfYear().plusWrapField(-8);\n+        check(copy, 1972, 10, 9);\n+        \n+        test = new LocalDate(1972, 1, 31);\n+        copy = test.monthOfYear().plusWrapField(1);\n+        check(copy, 1972, 2, 29);\n+        \n+        copy = test.monthOfYear().plusWrapField(2);\n+        check(copy, 1972, 3, 31);\n+        \n+        copy = test.monthOfYear().plusWrapField(3);\n+        check(copy, 1972, 4, 30);\n+        \n+        test = new LocalDate(1971, 1, 31);\n+        copy = test.monthOfYear().plusWrapField(1);\n+        check(copy, 1971, 2, 28);\n+    }\n+\n+    public void testPropertyWithMonth() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.monthOfYear().withValue(12);\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 12, 9);\n+        \n+        test = new LocalDate(1972, 1, 31);\n+        copy = test.monthOfYear().withValue(2);\n+        check(copy, 1972, 2, 29);\n+        \n+        try {\n+            test.monthOfYear().withValue(13);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.monthOfYear().withValue(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertyWithTextMonth() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.monthOfYear().withValue(\"12\");\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 12, 9);\n+        \n+        copy = test.monthOfYear().withValue(\"December\");\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 12, 9);\n+        \n+        copy = test.monthOfYear().withValue(\"Dec\");\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 12, 9);\n+    }\n+\n+    public void testPropertyCompareToMonth() {\n+        LocalDate test1 = new LocalDate(TEST_TIME1);\n+        LocalDate test2 = new LocalDate(TEST_TIME2);\n+        assertEquals(true, test1.monthOfYear().compareTo(test2) < 0);\n+        assertEquals(true, test2.monthOfYear().compareTo(test1) > 0);\n+        assertEquals(true, test1.monthOfYear().compareTo(test1) == 0);\n+        try {\n+            test1.monthOfYear().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0);\n+        assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0);\n+        assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0);\n+        try {\n+            test1.monthOfYear().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetDay() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField());\n+        assertEquals(\"dayOfMonth\", test.dayOfMonth().getName());\n+        assertEquals(\"Property[dayOfMonth]\", test.dayOfMonth().toString());\n+        assertSame(test, test.dayOfMonth().getLocalDate());\n+        assertEquals(9, test.dayOfMonth().get());\n+        assertEquals(\"9\", test.dayOfMonth().getAsString());\n+        assertEquals(\"9\", test.dayOfMonth().getAsText());\n+        assertEquals(\"9\", test.dayOfMonth().getAsText(Locale.FRENCH));\n+        assertEquals(\"9\", test.dayOfMonth().getAsShortText());\n+        assertEquals(\"9\", test.dayOfMonth().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField());\n+        assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField());\n+        assertEquals(2, test.dayOfMonth().getMaximumTextLength(null));\n+        assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesDay() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        assertEquals(1, test.dayOfMonth().getMinimumValue());\n+        assertEquals(1, test.dayOfMonth().getMinimumValueOverall());\n+        assertEquals(30, test.dayOfMonth().getMaximumValue());\n+        assertEquals(31, test.dayOfMonth().getMaximumValueOverall());\n+        test = new LocalDate(1972, 7, 9);\n+        assertEquals(31, test.dayOfMonth().getMaximumValue());\n+        test = new LocalDate(1972, 2, 9);\n+        assertEquals(29, test.dayOfMonth().getMaximumValue());\n+        test = new LocalDate(1971, 2, 9);\n+        assertEquals(28, test.dayOfMonth().getMaximumValue());\n+    }\n+\n+    public void testPropertyPlusDay() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.dayOfMonth().plus(9);\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 6, 18);\n+        \n+        copy = test.dayOfMonth().plus(21);\n+        check(copy, 1972, 6, 30);\n+        \n+        copy = test.dayOfMonth().plus(22);\n+        check(copy, 1972, 7, 1);\n+        \n+        copy = test.dayOfMonth().plus(22 + 30);\n+        check(copy, 1972, 7, 31);\n+        \n+        copy = test.dayOfMonth().plus(22 + 31);\n+        check(copy, 1972, 8, 1);\n+\n+        copy = test.dayOfMonth().plus(21 + 31 + 31 + 30 + 31 + 30 + 31);\n+        check(copy, 1972, 12, 31);\n+        \n+        copy = test.dayOfMonth().plus(22 + 31 + 31 + 30 + 31 + 30 + 31);\n+        check(copy, 1973, 1, 1);\n+        \n+        copy = test.dayOfMonth().plus(-8);\n+        check(copy, 1972, 6, 1);\n+        \n+        copy = test.dayOfMonth().plus(-9);\n+        check(copy, 1972, 5, 31);\n+        \n+        copy = test.dayOfMonth().plus(-8 - 31 - 30 - 31 - 29 - 31);\n+        check(copy, 1972, 1, 1);\n+        \n+        copy = test.dayOfMonth().plus(-9 - 31 - 30 - 31 - 29 - 31);\n+        check(copy, 1971, 12, 31);\n+    }\n+\n+    public void testPropertyPlusWrapFieldDay() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.dayOfMonth().plusWrapField(21);\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 6, 30);\n+        \n+        copy = test.dayOfMonth().plusWrapField(22);\n+        check(copy, 1972, 6, 1);\n+        \n+        copy = test.dayOfMonth().plusWrapField(-12);\n+        check(copy, 1972, 6, 27);\n+        \n+        test = new LocalDate(1972, 7, 9);\n+        copy = test.dayOfMonth().plusWrapField(21);\n+        check(copy, 1972, 7, 30);\n+    \n+        copy = test.dayOfMonth().plusWrapField(22);\n+        check(copy, 1972, 7, 31);\n+    \n+        copy = test.dayOfMonth().plusWrapField(23);\n+        check(copy, 1972, 7, 1);\n+    \n+        copy = test.dayOfMonth().plusWrapField(-12);\n+        check(copy, 1972, 7, 28);\n+    }\n+\n+    public void testPropertyWithDay() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.dayOfMonth().withValue(12);\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 6, 12);\n+        \n+        try {\n+            test.dayOfMonth().withValue(31);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.dayOfMonth().withValue(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertyWithTextDay() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.dayOfMonth().withValue(\"12\");\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 6, 12);\n+    }\n+\n+    public void testPropertyWithMaximumValueDayOfMonth() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.dayOfMonth().withMaximumValue();\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 6, 30);\n+    }\n+\n+    public void testPropertyWithMinimumValueDayOfMonth() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.dayOfMonth().withMinimumValue();\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 6, 1);\n+    }\n+\n+    public void testPropertyCompareToDay() {\n+        LocalDate test1 = new LocalDate(TEST_TIME1);\n+        LocalDate test2 = new LocalDate(TEST_TIME2);\n+        assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0);\n+        assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0);\n+        assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0);\n+        try {\n+            test1.dayOfMonth().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0);\n+        assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0);\n+        assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0);\n+        try {\n+            test1.dayOfMonth().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertyEquals() {\n+        LocalDate test1 = new LocalDate(2005, 11, 8);\n+        LocalDate test2 = new LocalDate(2005, 11, 9);\n+        LocalDate test3 = new LocalDate(2005, 11, 8, CopticChronology.getInstanceUTC());\n+        assertEquals(false, test1.dayOfMonth().equals(test1.year()));\n+        assertEquals(false, test1.dayOfMonth().equals(test1.monthOfYear()));\n+        assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));\n+        assertEquals(false, test1.dayOfMonth().equals(test2.year()));\n+        assertEquals(false, test1.dayOfMonth().equals(test2.monthOfYear()));\n+        assertEquals(false, test1.dayOfMonth().equals(test2.dayOfMonth()));\n+        \n+        assertEquals(false, test1.monthOfYear().equals(test1.year()));\n+        assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear()));\n+        assertEquals(false, test1.monthOfYear().equals(test1.dayOfMonth()));\n+        assertEquals(false, test1.monthOfYear().equals(test2.year()));\n+        assertEquals(true, test1.monthOfYear().equals(test2.monthOfYear()));\n+        assertEquals(false, test1.monthOfYear().equals(test2.dayOfMonth()));\n+        \n+        assertEquals(false, test1.dayOfMonth().equals(null));\n+        assertEquals(false, test1.dayOfMonth().equals(\"any\"));\n+        \n+        // chrono\n+        assertEquals(false, test1.dayOfMonth().equals(test3.dayOfMonth()));\n+    }\n+\n+    public void testPropertyHashCode() {\n+        LocalDate test1 = new LocalDate(2005, 11, 8);\n+        LocalDate test2 = new LocalDate(2005, 11, 9);\n+        assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());\n+        assertEquals(false, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());\n+        assertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode());\n+        assertEquals(true, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private void check(LocalDate test, int year, int month, int day) {\n+        assertEquals(year, test.getYear());\n+        assertEquals(month, test.getMonthOfYear());\n+        assertEquals(day, test.getDayOfMonth());\n+    }\n+}", "timestamp": 1142720569, "metainfo": ""}