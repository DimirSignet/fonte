{"sha": "d9b72f091c8a157695bed7db408e36e839d95430", "log": "Enhance IntervalConverter   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/AbstractInterval.java\n+++ b/JodaTime/src/java/org/joda/time/AbstractInterval.java\n      */\n     public AbstractInterval(Object interval) {\n         super();\n-        Period duration;\n+        IntervalConverter converter = ConverterManager.getInstance().getIntervalConverter(interval);\n+        if (this instanceof ReadWritableInterval) {\n+            converter.setInto((ReadWritableInterval) this, interval);\n+        } else {\n+            long[] millis = converter.getIntervalMillis(interval);\n+            iStartMillis = millis[0];\n+            iEndMillis = millis[1];\n+        }\n         if (interval instanceof AbstractInterval) {\n             AbstractInterval ri = (AbstractInterval) interval;\n-            iStartMillis = ri.iStartMillis;\n-            iStartInstant = ri.iStartInstant;\n-            iEndMillis = ri.iEndMillis;\n-            iEndInstant = ri.iEndInstant;\n-            iDuration = ri.iDuration;\n-            \n-        } else if (interval instanceof ReadableInterval) {\n-            ReadableInterval ri = (ReadableInterval) interval;\n-            iStartMillis = ri.getStartMillis();\n-            iEndMillis = ri.getEndMillis();\n-            \n-        } else {\n-            IntervalConverter converter = ConverterManager.getInstance().getIntervalConverter(interval);\n-            if (this instanceof ReadWritableInterval) {\n-                converter.setInto((ReadWritableInterval) this, interval);\n-            } else {\n-                MutableInterval mi = new MutableInterval();\n-                converter.setInto(mi, interval);\n-                iStartMillis = mi.getStartMillis();\n-                iEndMillis = mi.getEndMillis();\n+            if (iStartMillis == ri.iStartMillis && iEndMillis == ri.iEndMillis) {\n+                // this double checks against weird converters\n+                iStartInstant = ri.iStartInstant;\n+                iEndInstant = ri.iEndInstant;\n+                iDuration = ri.iDuration;\n             }\n         }\n     }\n--- a/JodaTime/src/java/org/joda/time/convert/IntervalConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/IntervalConverter.java\n  * IntervalConverter defines how an object is converted to an interval.\n  *\n  * @author Brian S O'Neill\n+ * @author Stephen Colebourne\n  * @since 1.0\n  */\n public interface IntervalConverter extends Converter {\n+\n+    /**\n+     * Extracts the start and end millisecond instants from the object.\n+     *\n+     * @param object  the object to convert, must not be null\n+     * @return the start millis and end millis in an array of size two\n+     * @throws ClassCastException if the object is invalid\n+     */\n+    long[] getIntervalMillis(Object object);\n \n     /**\n      * Extracts interval endpoint values from an object of this converter's\n--- a/JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Extracts the start and end millisecond instants from the object.\n+     *\n+     * @param object  the object to convert, must not be null\n+     * @return the start millis and end millis in an array of size two\n+     * @throws ClassCastException if the object is invalid\n+     */\n+    public long[] getIntervalMillis(Object object) {\n+        ReadableInterval interval = (ReadableInterval) object;\n+        return new long[] {interval.getStartMillis(), interval.getEndMillis()};\n+    }\n+\n+    /**\n      * Sets the values of the mutable interval from the specified interval.\n      * \n      * @param writableInterval  the interval to set\n--- a/JodaTime/src/java/org/joda/time/convert/StringConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/StringConverter.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Extracts the start and end millisecond instants from the object.\n+     *\n+     * @param object  the object to convert, must not be null\n+     * @return the start millis and end millis in an array\n+     * @throws ClassCastException if the object is invalid\n+     */\n+    public long[] getIntervalMillis(Object object) {\n+        return parseInterval(null, object);\n+    }\n+\n+    /**\n      * Sets the value of the mutable interval from the string.\n      * \n      * @param writableInterval  the interval to set\n      * @param object  the string to set from\n      */\n     public void setInto(ReadWritableInterval writableInterval, Object object) {\n+        parseInterval(writableInterval, object);\n+    }\n+\n+    /**\n+     * Sets the value of the mutable interval from the string.\n+     * \n+     * @param writableInterval  the interval to populate, may be null\n+     * @param object  the string to set from\n+     * @return an array of size two, containing the start and end millis if interval input is null\n+     */\n+    private long[] parseInterval(ReadWritableInterval writableInterval, Object object) {\n         String str = (String) object;\n \n         int separator = str.indexOf('/');\n         }\n \n         DateTimeParser dateTimeParser = ISODateTimeFormat.getInstance().dateTimeParser();\n-        PeriodFormatter durationParser = ISOPeriodFormat.getInstance().standard();\n-        long startInstant;\n+        PeriodFormatter periodParser = ISOPeriodFormat.getInstance().standard();\n+        long startInstant, endInstant;\n         Period period;\n-\n+        \n+        // before slash\n         char c = leftStr.charAt(0);\n         if (c == 'P' || c == 'p') {\n             startInstant = 0;\n-            period = durationParser.parsePeriod(getPeriodType(leftStr, false), leftStr);\n+            period = periodParser.parsePeriod(getPeriodType(leftStr, false), leftStr);\n         } else {\n             startInstant = dateTimeParser.parseMillis(leftStr);\n             period = null;\n         }\n-\n+        \n+        // after slash\n         c = rightStr.charAt(0);\n         if (c == 'P' || c == 'p') {\n             if (period != null) {\n                 throw new IllegalArgumentException(\"Interval composed of two durations: \" + str);\n             }\n-            period = durationParser.parsePeriod(getPeriodType(rightStr, false), rightStr);\n+            period = periodParser.parsePeriod(getPeriodType(rightStr, false), rightStr);\n+            endInstant = period.addTo(startInstant, 1);\n+        } else {\n+            endInstant = dateTimeParser.parseMillis(rightStr);\n+            if (period != null) {\n+                startInstant = period.addTo(endInstant, -1);\n+            }\n+        }\n+        \n+        // return data avoiding object creation and code duplication\n+        if (writableInterval == null) {\n+            return new long[] {startInstant, endInstant};\n+        } else {\n             writableInterval.setStartMillis(startInstant);\n-            writableInterval.setPeriodAfterStart(period);\n-        } else {\n-            long endInstant = dateTimeParser.parseMillis(rightStr);\n             writableInterval.setEndMillis(endInstant);\n-            if (period == null) {\n-                writableInterval.setStartMillis(startInstant);\n-            } else {\n-                writableInterval.setPeriodBeforeEnd(period);\n-            }\n+            return null;\n         }\n     }\n \n--- a/JodaTime/src/test/org/joda/time/TestInterval_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestInterval_Constructors.java\n import java.util.TimeZone;\n \n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.convert.ConverterManager;\n+import org.joda.time.convert.IntervalConverter;\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n         assertEquals(base.getEndMillis(), test.getEndMillis());\n     }\n \n+    public void testConstructor_Object5() throws Throwable {\n+        IntervalConverter oldConv = ConverterManager.getInstance().getIntervalConverter(\"\");\n+        IntervalConverter conv = new IntervalConverter() {\n+            public long[] getIntervalMillis(Object object) {\n+                return new long[] {1234L, 5678L};\n+            }\n+            public void setInto(ReadWritableInterval interval, Object object) {\n+            }\n+            public Class getSupportedType() {\n+                return String.class;\n+            }\n+        };\n+        try {\n+            ConverterManager.getInstance().addIntervalConverter(conv);\n+            DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+            DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+            Interval test = new Interval(dt1.toString() + '/' + dt2.toString());\n+            assertEquals(1234L, test.getStartMillis());\n+            assertEquals(5678L, test.getEndMillis());\n+        } finally {\n+            ConverterManager.getInstance().addIntervalConverter(oldConv);\n+        }\n+    }\n+\n+    public void testConstructor_Object6() throws Throwable {\n+        IntervalConverter oldConv = ConverterManager.getInstance().getIntervalConverter(new Interval(0L, 0L));\n+        IntervalConverter conv = new IntervalConverter() {\n+            public long[] getIntervalMillis(Object object) {\n+                return new long[] {1234L, 5678L};\n+            }\n+            public void setInto(ReadWritableInterval interval, Object object) {\n+            }\n+            public Class getSupportedType() {\n+                return ReadableInterval.class;\n+            }\n+        };\n+        try {\n+            ConverterManager.getInstance().addIntervalConverter(conv);\n+            Interval base = new Interval(-1000L, 1000L);\n+            Duration dur = base.getDuration();\n+            Instant start = base.getStartInstant();\n+            Instant end = base.getEndInstant();\n+            Interval test = new Interval(base);\n+            assertEquals(1234L, test.getStartMillis());\n+            assertEquals(5678L, test.getEndMillis());\n+            assertNotSame(dur, test.getDuration());\n+            assertNotSame(start, test.getStartInstant());\n+            assertNotSame(end, test.getEndInstant());\n+        } finally {\n+            ConverterManager.getInstance().addIntervalConverter(oldConv);\n+        }\n+    }\n+\n     class MockInterval implements ReadableInterval {\n         public long getStartMillis() {\n             return 1234L;\n--- a/JodaTime/src/test/org/joda/time/convert/TestConverterManager.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestConverterManager.java\n     //-----------------------------------------------------------------------\n     public void testAddIntervalConverter1() {\n         IntervalConverter c = new IntervalConverter() {\n+            public long[] getIntervalMillis(Object object) {return null;}\n             public void setInto(ReadWritableInterval interval, Object object) {}\n             public Class getSupportedType() {return Boolean.class;}\n         };\n \n     public void testAddIntervalConverter2() {\n         IntervalConverter c = new IntervalConverter() {\n+            public long[] getIntervalMillis(Object object) {return null;}\n             public void setInto(ReadWritableInterval interval, Object object) {}\n             public Class getSupportedType() {return String.class;}\n         };\n \n     public void testRemoveIntervalConverter2() {\n         IntervalConverter c = new IntervalConverter() {\n+            public long[] getIntervalMillis(Object object) {return null;}\n             public void setInto(ReadWritableInterval interval, Object object) {}\n             public Class getSupportedType() {return Boolean.class;}\n         };\n--- a/JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java\n             ReadableIntervalConverter.INSTANCE.getPeriodType(i, true));\n     }\n \n-    public void testSetInto_Object() throws Exception {\n+    public void testSetIntoPeriod_Object() throws Exception {\n         Interval i = new Interval(100L, 223L);\n         MutablePeriod m = new MutablePeriod(PeriodType.getMillisType());\n         ReadableIntervalConverter.INSTANCE.setInto(m, i);\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testGetIntervalMillis_Object() throws Exception {\n+        Interval i = new Interval(1234L, 5678L);\n+        long[] data = ReadableIntervalConverter.INSTANCE.getIntervalMillis(i);\n+        assertEquals(1234L, data[0]);\n+        assertEquals(5678L, data[1]);\n+    }\n+\n     public void testSetIntoInterval_Object() throws Exception {\n         Interval i = new Interval(0L, 123L);\n         MutableInterval m = new MutableInterval(-1000L, 1000L);\n--- a/JodaTime/src/test/org/joda/time/convert/TestStringConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestStringConverter.java\n             StringConverter.INSTANCE.getPeriodType(\"P2Y6M9D\", true));\n     }\n \n-    public void testSetInto_Object() throws Exception {\n+    public void testSetIntoPeriod_Object1() throws Exception {\n         MutablePeriod m = new MutablePeriod(PeriodType.getYearMonthType());\n         StringConverter.INSTANCE.setInto(m, \"P2Y6M9DT12H24M48S\");\n         assertEquals(2, m.getYears());\n         assertEquals(24, m.getMinutes());\n         assertEquals(48, m.getSeconds());\n         assertEquals(0, m.getMillis());\n-        \n-        m = new MutablePeriod(PeriodType.getYearWeekType());\n+    }\n+\n+    public void testSetIntoPeriod_Object2() throws Exception {\n+        MutablePeriod m = new MutablePeriod(PeriodType.getYearWeekType());\n         StringConverter.INSTANCE.setInto(m, \"P2Y4W3DT12H24M48S\");\n         assertEquals(2, m.getYears());\n         assertEquals(4, m.getWeeks());\n         assertEquals(24, m.getMinutes());\n         assertEquals(48, m.getSeconds());\n         assertEquals(0, m.getMillis());\n-        \n-        m = new MutablePeriod(1, 0, 1, 1, 1, 1, 1, 1, PeriodType.getYearWeekType());\n+    }        \n+\n+    public void testSetIntoPeriod_Object3() throws Exception {\n+        MutablePeriod m = new MutablePeriod(1, 0, 1, 1, 1, 1, 1, 1, PeriodType.getYearWeekType());\n         StringConverter.INSTANCE.setInto(m, \"P2Y4W3D\");\n         assertEquals(2, m.getYears());\n         assertEquals(4, m.getWeeks());\n         assertEquals(0, m.getMinutes());\n         assertEquals(0, m.getSeconds());\n         assertEquals(0, m.getMillis());\n-        \n+    }        \n+\n+    public void testSetIntoPeriod_Object4() throws Exception {\n+        MutablePeriod m = new MutablePeriod();\n         try {\n             StringConverter.INSTANCE.setInto(m, \"\");\n             fail();\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testGetIntervalMillis_Object() throws Exception {\n+        MutableInterval m = new MutableInterval(-1000L, 1000L);\n+        long[] data = StringConverter.INSTANCE.getIntervalMillis(\"2004-06-09/P1Y2M\");\n+        assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0).getMillis(), data[0]);\n+        assertEquals(new DateTime(2005, 8, 9, 0, 0, 0, 0).getMillis(), data[1]);\n+    }\n+\n     public void testSetIntoInterval_Object1() throws Exception {\n         MutableInterval m = new MutableInterval(-1000L, 1000L);\n         StringConverter.INSTANCE.setInto(m, \"2004-06-09/P1Y2M\");", "timestamp": 1091885213, "metainfo": ""}