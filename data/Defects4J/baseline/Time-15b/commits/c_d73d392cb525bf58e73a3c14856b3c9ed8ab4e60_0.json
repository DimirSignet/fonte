{"sha": "d73d392cb525bf58e73a3c14856b3c9ed8ab4e60", "log": "Rename moveDateTimeZone to withDateTimeZoneRetainFields   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/AbstractInstant.java\n+++ b/JodaTime/src/java/org/joda/time/AbstractInstant.java\n      * Gets a copy of this instant with a different time zone, preserving the\n      * millisecond instant.\n      * <p>\n-     * The returned object will be a new instance of the same implementation\n-     * type. Only the time zone of the chronology will change, the millis are\n-     * kept. Immutable subclasses may return <code>this</code> if appropriate.\n+     * This method is useful for finding the local time in another timezone.\n+     * For example, if this instant holds 12:30 in Europe/London, the result\n+     * from this method with Europe/Paris would be 13:30.\n+     * <p>\n+     * The returned object will be a new instance of the same implementation type.\n+     * This method changes alters the time zone, and does not change the\n+     * millisecond instant, with the effect that the field values usually change.\n+     * Immutable implementations may return <code>this</code> if appropriate.\n      *\n      * @param newDateTimeZone  the new time zone\n      * @return a copy of this instant with a different time zone\n-     * @see #withDateTimeZoneMoved\n+     * @see #withDateTimeZoneRetainFields\n      */\n     public ReadableInstant withDateTimeZone(DateTimeZone newDateTimeZone) {\n         final Chronology originalChrono = getChronology();\n      * Gets a copy of this instant with a different time zone, preserving the\n      * field values.\n      * <p>\n-     * The returned object will be a new instance of the same implementation\n-     * type. Moving the time zone alters the millisecond value of this instant\n-     * such that it is relative to the new time zone. Immutable subclasses may\n-     * return <code>this</code> if appropriate.\n+     * This method is useful for finding the millisecond time in another timezone.\n+     * For example, if this instant holds 12:30 in Europe/London (ie. 12:30Z),\n+     * the result from this method with Europe/Paris would be 12:30 (ie. 11:30Z).\n+     * <p>\n+     * The returned object will be a new instance of the same implementation type.\n+     * This method changes alters the time zone and the millisecond instant to keep\n+     * the field values the same.\n+     * Immutable implementations may return <code>this</code> if appropriate.\n      *\n      * @param newDateTimeZone  the new time zone\n      * @return a copy of this instant with a different time zone\n      * @see #withDateTimeZone\n      */\n-    public ReadableInstant withDateTimeZoneMoved(DateTimeZone newDateTimeZone) {\n+    public ReadableInstant withDateTimeZoneRetainFields(DateTimeZone newDateTimeZone) {\n         final long originalMillis = getMillis();\n         final Chronology originalChrono = getChronology();\n         final DateTimeZone originalZone;\n--- a/JodaTime/src/java/org/joda/time/MutableDateOnly.java\n+++ b/JodaTime/src/java/org/joda/time/MutableDateOnly.java\n      *\n      * @param zone  ignored\n      */\n-    public void moveDateTimeZone(DateTimeZone zone) {\n+    public void setDateTimeZoneRetainFields(DateTimeZone zone) {\n     }\n \n     // Add\n--- a/JodaTime/src/java/org/joda/time/MutableDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/MutableDateTime.java\n     // Time zone\n     //-----------------------------------------------------------------------\n     /**\n-     * Sets the time zone of the datetime, which changes the\n+     * Sets the time zone of the datetime, changing the chronology and field values.\n+     * <p>\n+     * Changing the zone using this method retains the millisecond instant.\n+     * The millisecond instant is adjusted in the new zone to compensate.\n+     * \n      * chronology. Setting the time zone does not affect the millisecond value\n      * of this instant.\n      * <p>\n      * If the chronology already has this time zone, no change occurs.\n      *\n      * @param zone  the time zone to use, null means default zone\n-     * @see #moveDateTimeZone\n+     * @see #setDateTimeZoneRetainFields\n      */\n     public void setDateTimeZone(DateTimeZone zone) {\n         super.setDateTimeZone(zone);\n     }\n \n     /**\n-     * Moves the time zone of the datetime, which changes the\n-     * chronology. Moving the time zone alters the millisecond value of this\n-     * instant such that it is relative to the new time zone.\n+     * Sets the time zone of the datetime, changing the chronology and millisecond.\n+     * <p>\n+     * Changing the zone using this method retains the field values.\n+     * The millisecond instant is adjusted in the new zone to compensate.\n      * <p>\n      * If the chronology already has this time zone, no change occurs.\n      *\n      * @param zone  the time zone to use, null means default zone\n      * @see #setDateTimeZone\n      */\n-    public void moveDateTimeZone(DateTimeZone zone) {\n+    public void setDateTimeZoneRetainFields(DateTimeZone zone) {\n         super.moveDateTimeZone(zone);\n     }\n \n--- a/JodaTime/src/java/org/joda/time/MutableTimeOnly.java\n+++ b/JodaTime/src/java/org/joda/time/MutableTimeOnly.java\n      *\n      * @param zone  ignored\n      */\n-    public void moveDateTimeZone(DateTimeZone zone) {\n+    public void setDateTimeZoneRetainFields(DateTimeZone zone) {\n     }\n \n     // Add\n--- a/JodaTime/src/java/org/joda/time/ReadWritableInstant.java\n+++ b/JodaTime/src/java/org/joda/time/ReadWritableInstant.java\n  */\n package org.joda.time;\n \n-// Import for @link support\n-import org.joda.time.convert.ConverterManager;\n-\n /**\n  * Defines an instant in the datetime continuum that can be queried and modified.\n  * This interface expresses the datetime as milliseconds from 1970-01-01T00:00:00Z.\n     /**\n      * Set the value from an Object representing an instant.\n      * <p>\n-     * The recognised object types are defined in {@link ConverterManager} and\n+     * The recognised object types are defined in\n+     * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n      * include ReadableInstant, String, Calendar and Date.\n      * \n      * @param instant  an object representing an instant\n     void setChronology(Chronology chronology);\n \n     /**\n-     * Sets the time zone of the datetime via the chronology, which has no\n-     * effect if not applicable. Setting the time zone does not affect the\n-     * millisecond value of this instant.\n+     * Sets the time zone of the datetime, changing the chronology and field values.\n+     * <p>\n+     * Changing the zone using this method retains the millisecond instant.\n+     * The millisecond instant is adjusted in the new zone to compensate.\n+     * \n+     * chronology. Setting the time zone does not affect the millisecond value\n+     * of this instant.\n+     * <p>\n+     * If the chronology already has this time zone, no change occurs.\n      *\n      * @param zone  the time zone to use, null means default zone\n-     * @throws IllegalArgumentException if the value is invalid\n-     * @see #moveDateTimeZone\n+     * @see #setDateTimeZoneRetainFields\n      */\n     void setDateTimeZone(DateTimeZone zone);\n \n     /**\n-     * Moves the time zone of the datetime via the chronology, which has no\n-     * effect if not applicable. Moving the time zone alters the millisecond\n-     * value of this instant such that it is relative to the new time zone.\n+     * Sets the time zone of the datetime, changing the chronology and millisecond.\n+     * <p>\n+     * Changing the zone using this method retains the field values.\n+     * The millisecond instant is adjusted in the new zone to compensate.\n+     * <p>\n+     * If the chronology already has this time zone, no change occurs.\n      *\n      * @param zone  the time zone to use, null means default zone\n-     * @throws IllegalArgumentException if the value is invalid\n      * @see #setDateTimeZone\n      */\n-    void moveDateTimeZone(DateTimeZone zone);\n+    void setDateTimeZoneRetainFields(DateTimeZone zone);\n \n     //-----------------------------------------------------------------------\n     /**\n--- a/JodaTime/src/java/org/joda/time/ReadableInstant.java\n+++ b/JodaTime/src/java/org/joda/time/ReadableInstant.java\n      * Gets a copy of this instant with a different time zone, preserving the\n      * millisecond instant.\n      * <p>\n-     * The returned object will be a new instance of the same implementation\n-     * type. Only the time zone of the chronology will change, the millis are\n-     * kept. Immutable implementations may return <code>this</code> if\n-     * appropriate.\n+     * This method is useful for finding the local time in another timezone.\n+     * For example, if this instant holds 12:30 in Europe/London, the result\n+     * from this method with Europe/Paris would be 13:30.\n+     * <p>\n+     * The returned object will be a new instance of the same implementation type.\n+     * This method changes alters the time zone, and does not change the\n+     * millisecond instant, with the effect that the field values usually change.\n+     * Immutable implementations may return <code>this</code> if appropriate.\n      *\n      * @param newDateTimeZone  the new time zone\n      * @return a copy of this instant with a different time zone\n-     * @see #withDateTimeZoneMoved\n+     * @see #withDateTimeZoneRetainFields\n      */\n     ReadableInstant withDateTimeZone(DateTimeZone newDateTimeZone);\n \n      * Gets a copy of this instant with a different time zone, preserving the\n      * field values.\n      * <p>\n-     * The returned object will be a new instance of the same implementation\n-     * type. Moving the time zone alters the millisecond value of this instant\n-     * such that it is relative to the new time zone. Immutable implementations\n-     * may return <code>this</code> if appropriate.\n+     * This method is useful for finding the millisecond time in another timezone.\n+     * For example, if this instant holds 12:30 in Europe/London (ie. 12:30Z),\n+     * the result from this method with Europe/Paris would be 12:30 (ie. 11:30Z).\n+     * <p>\n+     * The returned object will be a new instance of the same implementation type.\n+     * This method changes alters the time zone and the millisecond instant to keep\n+     * the field values the same.\n+     * Immutable implementations may return <code>this</code> if appropriate.\n      *\n      * @param newDateTimeZone  the new time zone\n      * @return a copy of this instant with a different time zone\n      * @see #withDateTimeZone\n      */\n-    ReadableInstant withDateTimeZoneMoved(DateTimeZone newDateTimeZone);\n+    ReadableInstant withDateTimeZoneRetainFields(DateTimeZone newDateTimeZone);\n \n     //-----------------------------------------------------------------------\n     /**\n--- a/JodaTime/src/java/org/joda/time/chrono/LimitChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/LimitChronology.java\n         DateTime lowerLimit = iLowerLimit;\n         if (lowerLimit != null) {\n             MutableDateTime mdt = lowerLimit.toMutableDateTime();\n-            mdt.moveDateTimeZone(zone);\n+            mdt.setDateTimeZoneRetainFields(zone);\n             lowerLimit = mdt.toDateTime();\n         }\n \n         DateTime upperLimit = iUpperLimit;\n         if (upperLimit != null) {\n             MutableDateTime mdt = upperLimit.toMutableDateTime();\n-            mdt.moveDateTimeZone(zone);\n+            mdt.setDateTimeZoneRetainFields(zone);\n             upperLimit = mdt.toDateTime();\n         }\n         ", "timestamp": 1081791929, "metainfo": ""}