{"sha": "15cfddf5eeee14d64be2c9491a61a2f3e2566454", "log": "Make abstract with protected coonstructors   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/base/BaseInterval.java\n+++ b/JodaTime/src/java/org/joda/time/base/BaseInterval.java\n  * @author Stephen Colebourne\n  * @since 1.0\n  */\n-public class BaseInterval\n+public abstract class BaseInterval\n         extends AbstractInterval\n         implements ReadableInterval, Serializable {\n \n      * @param endInstant  end of this interval, as milliseconds from 1970-01-01T00:00:00Z.\n      * @throws IllegalArgumentException if the end is before the start\n      */\n-    public BaseInterval(long startInstant, long endInstant) {\n+    protected BaseInterval(long startInstant, long endInstant) {\n         super();\n         checkInterval(startInstant, endInstant);\n         iStartMillis = startInstant;\n      * @param end  end of this interval, null means now\n      * @throws IllegalArgumentException if the end is before the start\n      */\n-    public BaseInterval(ReadableInstant start, ReadableInstant end) {\n+    protected BaseInterval(ReadableInstant start, ReadableInstant end) {\n         super();\n         if (start == null && end == null) {\n             iStartMillis = iEndMillis = DateTimeUtils.currentTimeMillis();\n      * @throws IllegalArgumentException if the end is before the start\n      * @throws ArithmeticException if the end instant exceeds the capacity of a long\n      */\n-    public BaseInterval(ReadableInstant start, ReadableDuration duration) {\n+    protected BaseInterval(ReadableInstant start, ReadableDuration duration) {\n         super();\n         iStartMillis = DateTimeUtils.getInstantMillis(start);\n         long durationMillis = DateTimeUtils.getDurationMillis(duration);\n      * @throws IllegalArgumentException if the end is before the start\n      * @throws ArithmeticException if the start instant exceeds the capacity of a long\n      */\n-    public BaseInterval(ReadableDuration duration, ReadableInstant end) {\n+    protected BaseInterval(ReadableDuration duration, ReadableInstant end) {\n         super();\n         iEndMillis = DateTimeUtils.getInstantMillis(end);\n         long durationMillis = DateTimeUtils.getDurationMillis(duration);\n      * @throws IllegalArgumentException if the end is before the start\n      * @throws ArithmeticException if the end instant exceeds the capacity of a long\n      */\n-    public BaseInterval(ReadableInstant start, ReadablePeriod period) {\n+    protected BaseInterval(ReadableInstant start, ReadablePeriod period) {\n         super();\n         iStartMillis = DateTimeUtils.getInstantMillis(start);\n         if (period == null) {\n      * @throws IllegalArgumentException if the end is before the start\n      * @throws ArithmeticException if the start instant exceeds the capacity of a long\n      */\n-    public BaseInterval(ReadablePeriod period, ReadableInstant end) {\n+    protected BaseInterval(ReadablePeriod period, ReadableInstant end) {\n         super();\n         iEndMillis = DateTimeUtils.getInstantMillis(end);\n         if (period == null) {\n      * @param interval  the time interval to copy\n      * @throws IllegalArgumentException if the interval is null or invalid\n      */\n-    public BaseInterval(Object interval) {\n+    protected BaseInterval(Object interval) {\n         super();\n         IntervalConverter converter = ConverterManager.getInstance().getIntervalConverter(interval);\n         if (this instanceof ReadWritableInterval) {", "timestamp": 1094295592, "metainfo": ""}