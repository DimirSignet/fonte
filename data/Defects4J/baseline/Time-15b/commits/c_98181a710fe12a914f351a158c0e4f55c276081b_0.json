{"sha": "98181a710fe12a914f351a158c0e4f55c276081b", "log": "Change negate() to negated()  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/Days.java\n+++ b/JodaTime/src/java/org/joda/time/Days.java\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Negates the number of days in this period.\n+     * Returns a new instance with the days value negated.\n      *\n      * @return the new period with a negated value\n      * @throws ArithmeticException if the result overflows an int\n      */\n-    public Days negate() {\n+    public Days negated() {\n         return Days.days(FieldUtils.safeNegate(getValue()));\n     }\n \n--- a/JodaTime/src/java/org/joda/time/Hours.java\n+++ b/JodaTime/src/java/org/joda/time/Hours.java\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Negates the number of hours in this period.\n+     * Returns a new instance with the hours value negated.\n      *\n      * @return the new period with a negated value\n      * @throws ArithmeticException if the result overflows an int\n      */\n-    public Hours negate() {\n+    public Hours negated() {\n         return Hours.hours(FieldUtils.safeNegate(getValue()));\n     }\n \n--- a/JodaTime/src/java/org/joda/time/Minutes.java\n+++ b/JodaTime/src/java/org/joda/time/Minutes.java\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Negates the number of minutes in this period.\n+     * Returns a new instance with the minutes value negated.\n      *\n      * @return the new period with a negated value\n      * @throws ArithmeticException if the result overflows an int\n      */\n-    public Minutes negate() {\n+    public Minutes negated() {\n         return Minutes.minutes(FieldUtils.safeNegate(getValue()));\n     }\n \n--- a/JodaTime/src/java/org/joda/time/Months.java\n+++ b/JodaTime/src/java/org/joda/time/Months.java\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Negates the number of months in this period.\n+     * Returns a new instance with the months value negated.\n      *\n      * @return the new period with a negated value\n      * @throws ArithmeticException if the result overflows an int\n      */\n-    public Months negate() {\n+    public Months negated() {\n         return Months.months(FieldUtils.safeNegate(getValue()));\n     }\n \n--- a/JodaTime/src/java/org/joda/time/Seconds.java\n+++ b/JodaTime/src/java/org/joda/time/Seconds.java\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Negates the number of seconds in this period.\n+     * Returns a new instance with the seconds value negated.\n      *\n      * @return the new period with a negated value\n      * @throws ArithmeticException if the result overflows an int\n      */\n-    public Seconds negate() {\n+    public Seconds negated() {\n         return Seconds.seconds(FieldUtils.safeNegate(getValue()));\n     }\n \n--- a/JodaTime/src/java/org/joda/time/Weeks.java\n+++ b/JodaTime/src/java/org/joda/time/Weeks.java\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Negates the number of weeks in this period.\n+     * Returns a new instance with the weeks value negated.\n      *\n      * @return the new period with a negated value\n      * @throws ArithmeticException if the result overflows an int\n      */\n-    public Weeks negate() {\n+    public Weeks negated() {\n         return Weeks.weeks(FieldUtils.safeNegate(getValue()));\n     }\n \n--- a/JodaTime/src/java/org/joda/time/Years.java\n+++ b/JodaTime/src/java/org/joda/time/Years.java\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Negates the number of years in this period.\n+     * Returns a new instance with the years value negated.\n      *\n      * @return the new period with a negated value\n      * @throws ArithmeticException if the result overflows an int\n      */\n-    public Years negate() {\n+    public Years negated() {\n         return Years.years(FieldUtils.safeNegate(getValue()));\n     }\n \n--- a/JodaTime/src/test/org/joda/time/TestDays.java\n+++ b/JodaTime/src/test/org/joda/time/TestDays.java\n         }\n     }\n \n-    public void testNegate() {\n+    public void testNegated() {\n         Days test = Days.days(12);\n-        assertEquals(-12, test.negate().getDays());\n+        assertEquals(-12, test.negated().getDays());\n         assertEquals(12, test.getDays());\n         \n         try {\n-            Days.MIN_VALUE.negate();\n+            Days.MIN_VALUE.negated();\n             fail();\n         } catch (ArithmeticException ex) {\n             // expected\n--- a/JodaTime/src/test/org/joda/time/TestHours.java\n+++ b/JodaTime/src/test/org/joda/time/TestHours.java\n         }\n     }\n \n-    public void testNegate() {\n+    public void testNegated() {\n         Hours test = Hours.hours(12);\n-        assertEquals(-12, test.negate().getHours());\n+        assertEquals(-12, test.negated().getHours());\n         assertEquals(12, test.getHours());\n         \n         try {\n-            Hours.MIN_VALUE.negate();\n+            Hours.MIN_VALUE.negated();\n             fail();\n         } catch (ArithmeticException ex) {\n             // expected\n--- a/JodaTime/src/test/org/joda/time/TestMinutes.java\n+++ b/JodaTime/src/test/org/joda/time/TestMinutes.java\n         }\n     }\n \n-    public void testNegate() {\n+    public void testNegated() {\n         Minutes test = Minutes.minutes(12);\n-        assertEquals(-12, test.negate().getMinutes());\n+        assertEquals(-12, test.negated().getMinutes());\n         assertEquals(12, test.getMinutes());\n         \n         try {\n-            Minutes.MIN_VALUE.negate();\n+            Minutes.MIN_VALUE.negated();\n             fail();\n         } catch (ArithmeticException ex) {\n             // expected\n--- a/JodaTime/src/test/org/joda/time/TestMonths.java\n+++ b/JodaTime/src/test/org/joda/time/TestMonths.java\n         }\n     }\n \n-    public void testNegate() {\n+    public void testNegated() {\n         Months test = Months.months(12);\n-        assertEquals(-12, test.negate().getMonths());\n+        assertEquals(-12, test.negated().getMonths());\n         assertEquals(12, test.getMonths());\n         \n         try {\n-            Months.MIN_VALUE.negate();\n+            Months.MIN_VALUE.negated();\n             fail();\n         } catch (ArithmeticException ex) {\n             // expected\n--- a/JodaTime/src/test/org/joda/time/TestSeconds.java\n+++ b/JodaTime/src/test/org/joda/time/TestSeconds.java\n         }\n     }\n \n-    public void testNegate() {\n+    public void testNegated() {\n         Seconds test = Seconds.seconds(12);\n-        assertEquals(-12, test.negate().getSeconds());\n+        assertEquals(-12, test.negated().getSeconds());\n         assertEquals(12, test.getSeconds());\n         \n         try {\n-            Seconds.MIN_VALUE.negate();\n+            Seconds.MIN_VALUE.negated();\n             fail();\n         } catch (ArithmeticException ex) {\n             // expected\n--- a/JodaTime/src/test/org/joda/time/TestWeeks.java\n+++ b/JodaTime/src/test/org/joda/time/TestWeeks.java\n         }\n     }\n \n-    public void testNegate() {\n+    public void testNegated() {\n         Weeks test = Weeks.weeks(12);\n-        assertEquals(-12, test.negate().getWeeks());\n+        assertEquals(-12, test.negated().getWeeks());\n         assertEquals(12, test.getWeeks());\n         \n         try {\n-            Weeks.MIN_VALUE.negate();\n+            Weeks.MIN_VALUE.negated();\n             fail();\n         } catch (ArithmeticException ex) {\n             // expected\n--- a/JodaTime/src/test/org/joda/time/TestYears.java\n+++ b/JodaTime/src/test/org/joda/time/TestYears.java\n         }\n     }\n \n-    public void testNegate() {\n+    public void testNegated() {\n         Years test = Years.years(12);\n-        assertEquals(-12, test.negate().getYears());\n+        assertEquals(-12, test.negated().getYears());\n         assertEquals(12, test.getYears());\n         \n         try {\n-            Years.MIN_VALUE.negate();\n+            Years.MIN_VALUE.negated();\n             fail();\n         } catch (ArithmeticException ex) {\n             // expected", "timestamp": 1162423542, "metainfo": ""}