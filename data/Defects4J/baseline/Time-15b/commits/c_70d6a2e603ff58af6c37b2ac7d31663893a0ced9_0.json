{"sha": "70d6a2e603ff58af6c37b2ac7d31663893a0ced9", "log": "Add Instant persistance by BIGINT and TIMESTAMP  ", "commit": "\n--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInstant.java\n+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInstant.java\n import org.joda.time.Instant;\n \n /**\n- * Persist {@link org.joda.time.Instant} via hibernate.\n+ * Persist {@link org.joda.time.Instant} via hibernate as a TIMESTAMP.\n  *\n- * @author Martin Grove (marting@optrak.co.uk))\n+ * @author Olav Reinert (oreinert@sourceforge.net)\n  */\n-public class PersistentInstant implements EnhancedUserType, Serializable\n+public class PersistentInstant implements EnhancedUserType\n {\n-\tpublic final static PersistentInstant INSTANCE = new PersistentInstant();\n+    public final static PersistentInstant INSTANCE = new PersistentInstant();\n \n-\tprivate static final int[] SQL_TYPES = new int[]{Types.BIGINT};\n+    private static final int[] SQL_TYPES = new int[] {Types.TIMESTAMP};\n \n-\tpublic int[] sqlTypes()\n-\t{\n-\t\treturn SQL_TYPES;\n-\t}\n+    public int[] sqlTypes()\n+    {\n+        return SQL_TYPES;\n+    }\n \n-\tpublic Class returnedClass()\n-\t{\n-\t\treturn Instant.class;\n-\t}\n+    public Class returnedClass()\n+    {\n+        return Instant.class;\n+    }\n \n-\tpublic boolean equals(Object x, Object y) throws HibernateException\n-\t{\n-\t\tif (x == y)\n-\t\t\treturn true;\n+    public boolean equals(Object x, Object y) throws HibernateException\n+    {\n+        if (x == y)\n+        {\n+            return true;\n+        }\n+        if (x == null || y == null)\n+        {\n+            return false;\n+        }\n+        Instant ix = (Instant) x;\n+        Instant iy = (Instant) y;\n \n-\t\tif (x == null || y == null)\n-\t\t\treturn false;\n+        return ix.equals(iy);\n+    }\n \n-\t\tInstant ix = (Instant)x;\n-\t\tInstant iy = (Instant)y;\n+    public int hashCode(Object object) throws HibernateException\n+    {\n+        return object.hashCode();\n+    }\n \n-\t\treturn ix.equals(iy);\n-\t}\n+    public Object nullSafeGet(ResultSet resultSet, String[] names, Object object) throws HibernateException, SQLException\n+    {\n+        return nullSafeGet(resultSet, names[0]);\n+    }\n \n-\tpublic int hashCode(Object o) throws HibernateException\n-\t{\n-\t\treturn o.hashCode();\n-\t}\n+    public Object nullSafeGet(ResultSet resultSet, String name) throws SQLException\n+    {\n+        Object value = Hibernate.TIMESTAMP.nullSafeGet(resultSet, name);\n+        if (value == null)\n+        {\n+            return null;\n+        }\n \n-\tpublic Object nullSafeGet(ResultSet resultSet, String[] names, Object object) throws HibernateException, SQLException\n-\t{\n-\t\treturn nullSafeGet(resultSet, names[0]);\n-\t}\n+        return new Instant(value);\n+    }\n \n-\tpublic Object nullSafeGet(ResultSet rs, String name) throws HibernateException, SQLException\n-\t{\n-\t\tObject l = Hibernate.LONG.nullSafeGet(rs, name);\n-\t\tif (l == null)\n-\t\t\treturn null;\n+    public void nullSafeSet(PreparedStatement preparedStatement, Object value, int index) throws HibernateException, SQLException\n+    {\n+        if (value == null)\n+        {\n+            Hibernate.TIMESTAMP.nullSafeSet(preparedStatement, null, index);\n+        }\n+        else\n+        {\n+            Hibernate.TIMESTAMP.nullSafeSet(preparedStatement, ((Instant) value).toDate(), index);\n+        }\n+    }\n \n-\t\treturn new Instant(l);\n-\t}\n+    public Object deepCopy(Object value) throws HibernateException\n+    {\n+        if (value == null)\n+        {\n+            return null;\n+        }\n \n-\tpublic void nullSafeSet(PreparedStatement preparedStatement, Object value, int index) throws HibernateException, SQLException\n-\t{\n-\t\tif (value == null)\n-\t\t\tHibernate.LONG.nullSafeSet(preparedStatement, null, index);\n-\t\telse\n-\t\t\tHibernate.LONG.nullSafeSet(preparedStatement, new Long(((Instant)value).getMillis()), index);\n-\t}\n+        return new Instant(value);\n+    }\n \n-\tpublic Object deepCopy(Object value) throws HibernateException\n-\t{\n-\t\tif (value == null)\n-\t\t\treturn null;\n+    public boolean isMutable()\n+    {\n+        return false;\n+    }\n \n-\t\treturn new Instant(value);\n-\t}\n+    public Serializable disassemble(Object value) throws HibernateException\n+    {\n+        return (Serializable) value;\n+    }\n \n-\tpublic boolean isMutable()\n-\t{\n-\t\treturn false;\n-\t}\n+    public Object assemble(Serializable serializable, Object value) throws HibernateException\n+    {\n+        return serializable;\n+    }\n \n-\tpublic Serializable disassemble(Object value) throws HibernateException\n-\t{\n-\t\treturn (Serializable)value;\n-\t}\n-\n-\tpublic Object assemble(Serializable serializable, Object value) throws HibernateException\n-\t{\n-\t\treturn serializable;\n-\t}\n-\n-\tpublic Object replace(Object original, Object target, Object owner) throws HibernateException\n-\t{\n-\t\treturn original;\n-\t}\n+    public Object replace(Object original, Object target, Object owner) throws HibernateException\n+    {\n+        return original;\n+    }\n \n \t// __________ EnhancedUserType ____________________\n \n-\tpublic String objectToSQLString(Object object)\n-\t{\n-\t\tthrow new UnsupportedOperationException();\n-\t}\n+    public String objectToSQLString(Object object)\n+    {\n+        throw new UnsupportedOperationException();\n+    }\n \n-\tpublic String toXMLString(Object object)\n-\t{\n-\t\treturn object.toString();\n-\t}\n+    public String toXMLString(Object object)\n+    {\n+        return object.toString();\n+    }\n \n-\tpublic Object fromXMLString(String string)\n-\t{\n-\t\treturn new Instant(string);\n-\t}\n+    public Object fromXMLString(String string)\n+    {\n+        return new Instant(string);\n+    }\n }\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInstantAsBigInt.java\n+/*\n+ *  Copyright 2001-2009 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.hibernate;\n+\n+import java.io.Serializable;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+\n+import org.hibernate.Hibernate;\n+import org.hibernate.HibernateException;\n+import org.hibernate.usertype.EnhancedUserType;\n+import org.joda.time.Instant;\n+\n+/**\n+ * Persist {@link org.joda.time.Instant} via hibernate as a BIGINT.\n+ *\n+ * @author Martin Grove (marting@optrak.co.uk))\n+ */\n+public class PersistentInstantAsBigInt implements EnhancedUserType, Serializable\n+{\n+\tpublic final static PersistentInstantAsBigInt INSTANCE = new PersistentInstantAsBigInt();\n+\n+\tprivate static final int[] SQL_TYPES = new int[] {Types.BIGINT};\n+\n+\tpublic int[] sqlTypes()\n+\t{\n+\t\treturn SQL_TYPES;\n+\t}\n+\n+\tpublic Class returnedClass()\n+\t{\n+\t\treturn Instant.class;\n+\t}\n+\n+\tpublic boolean equals(Object x, Object y) throws HibernateException\n+\t{\n+\t\tif (x == y)\n+        {\n+\t\t\treturn true;\n+        }\n+\t\tif (x == null || y == null)\n+        {\n+\t\t\treturn false;\n+        }\n+\t\tInstant ix = (Instant) x;\n+\t\tInstant iy = (Instant) y;\n+\n+\t\treturn ix.equals(iy);\n+\t}\n+\n+\tpublic int hashCode(Object object) throws HibernateException\n+\t{\n+\t\treturn object.hashCode();\n+\t}\n+\n+\tpublic Object nullSafeGet(ResultSet resultSet, String[] names, Object object) throws HibernateException, SQLException\n+\t{\n+\t\treturn nullSafeGet(resultSet, names[0]);\n+\t}\n+\n+\tpublic Object nullSafeGet(ResultSet resultSet, String name) throws HibernateException, SQLException\n+\t{\n+\t\tObject value = Hibernate.LONG.nullSafeGet(resultSet, name);\n+\t\tif (value == null)\n+        {\n+\t\t\treturn null;\n+        }\n+\n+\t\treturn new Instant(value);\n+\t}\n+\n+\tpublic void nullSafeSet(PreparedStatement preparedStatement, Object value, int index) throws HibernateException, SQLException\n+\t{\n+\t\tif (value == null)\n+\t\t{\n+\t\t\tHibernate.LONG.nullSafeSet(preparedStatement, null, index);\n+\t    }\n+\t\telse\n+\t\t{\n+\t\t\tHibernate.LONG.nullSafeSet(preparedStatement, new Long(((Instant)value).getMillis()), index);\n+\t\t}\n+\t}\n+\n+\tpublic Object deepCopy(Object value) throws HibernateException\n+\t{\n+\t\tif (value == null)\n+        {\n+\t\t\treturn null;\n+        }\n+\n+\t\treturn new Instant(value);\n+\t}\n+\n+\tpublic boolean isMutable()\n+\t{\n+\t\treturn false;\n+\t}\n+\n+\tpublic Serializable disassemble(Object value) throws HibernateException\n+\t{\n+\t\treturn (Serializable)value;\n+\t}\n+\n+\tpublic Object assemble(Serializable serializable, Object value) throws HibernateException\n+\t{\n+\t\treturn serializable;\n+\t}\n+\n+\tpublic Object replace(Object original, Object target, Object owner) throws HibernateException\n+\t{\n+\t\treturn original;\n+\t}\n+\n+\t// __________ EnhancedUserType ____________________\n+\n+\tpublic String objectToSQLString(Object object)\n+\t{\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\n+\tpublic String toXMLString(Object object)\n+\t{\n+\t\treturn object.toString();\n+\t}\n+\n+\tpublic Object fromXMLString(String string)\n+\t{\n+\t\treturn new Instant(string);\n+\t}\n+}", "timestamp": 1257632998, "metainfo": ""}