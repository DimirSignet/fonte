{"sha": "8fb9bae65a1ad986cec1a01a90cbbceebc4a5d6e", "log": "Annotate test classes that are branched off joda-time core for joda-time-gwt. The annotated test classes are used as a basis to generate the gwt test classes. Also change the default java.util.Locale and java.util.TimeZone to verify which test cases are actually depending on these defaults (these tests are marked in the code as well). In the generated gwt test classes Locale and TimeZone are not supported so these statements will be removed.  ", "commit": "\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestChronology.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestChronology.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestDateMidnight_Basics.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestDateMidnight_Basics.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW_UTC);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n     }\n     \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSerialization() throws Exception {\n         DateMidnight test = new DateMidnight(TEST_TIME_NOW_UTC);\n         \n         \n         assertEquals(test, result);\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n         assertEquals(\"2002-06-09T00:00:00.000+01:00\", test.toString((String) null));\n     }\n \n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testToString_String_String() {\n         DateMidnight test = new DateMidnight(TEST_TIME_NOW_UTC);\n         assertEquals(\"Sun 9/6\", test.toString(\"EEE d/M\", Locale.ENGLISH));\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestDateMidnight_Constructors.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestDateMidnight_Constructors.java\n \n import java.util.Date;\n import java.util.Locale;\n+import java.util.TimeZone;\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW_UTC);\n         zone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         locale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //Locale.setDefault(Locale.UK);\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n+        //BEGIN GWT IGNORE\n         Locale.setDefault(locale);\n+        //END GWT IGNORE\n         zone = null;\n     }\n \n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestDateMidnight_Properties.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestDateMidnight_Properties.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         locale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //Locale.setDefault(Locale.UK);\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n+        //BEGIN GWT IGNORE\n         Locale.setDefault(locale);\n+        //END GWT IGNORE\n         zone = null;\n     }\n \n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPropertyGetEra() {\n         DateMidnight test = new DateMidnight(2004, 6, 9);\n         assertSame(test.getChronology().era(), test.era().getField());\n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPropertyGetMonthOfYear() {\n         DateMidnight test = new DateMidnight(2004, 6, 9);\n         assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField());\n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPropertyGetDayOfWeek() {\n         DateMidnight test = new DateMidnight(2004, 6, 9);\n         assertSame(test.getChronology().dayOfWeek(), test.dayOfWeek().getField());\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestDateTimeComparator.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestDateTimeComparator.java\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testClass() {\n         assertEquals(true, Modifier.isPublic(DateTimeComparator.class.getModifiers()));\n         assertEquals(false, Modifier.isFinal(DateTimeComparator.class.getModifiers()));\n         assertEquals(1, DateTimeComparator.class.getDeclaredConstructors().length);\n         assertEquals(true, Modifier.isProtected(DateTimeComparator.class.getDeclaredConstructors()[0].getModifiers()));\n     }\n+    //END GWT IGNORE\n     \n     //-----------------------------------------------------------------------\n     public void testStaticGetInstance() {\n     }\n     \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSerialization1() throws Exception {\n         DateTimeField f = ISO.dayOfYear();\n         f.toString();\n         \n         assertEquals(c, result);\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSerialization2() throws Exception {\n         DateTimeComparator c = DateTimeComparator.getInstance();\n         \n         \n         assertSame(c, result);\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     /**\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestDateTimeFieldType.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestDateTimeFieldType.java\n         assertSerialization(DateTimeFieldType.millisOfSecond());\n     }\n \n+    //BEGIN GWT IGNORE\n     public void test_other() throws Exception {\n         assertEquals(1, DateTimeFieldType.class.getDeclaredClasses().length);\n         Class cls = DateTimeFieldType.class.getDeclaredClasses()[0];\n         assertEquals(type.getName(), result.getName());\n         assertNotSame(type, result);\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     private void assertSerialization(DateTimeFieldType type) throws Exception {\n+        //BEGIN GWT IGNORE\n         DateTimeFieldType result = doSerialization(type);\n         assertSame(type, result);\n-    }\n-\n-    private DateTimeFieldType doSerialization(DateTimeFieldType type) throws Exception {\n+        //END GWT IGNORE\n+    }\n+\n+    //BEGIN GWT IGNORE\n+   private DateTimeFieldType doSerialization(DateTimeFieldType type) throws Exception {\n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ObjectOutputStream oos = new ObjectOutputStream(baos);\n         oos.writeObject(type);\n         ois.close();\n         return result;\n     }\n+   //END GWT IGNORE\n \n }\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestDateTimeUtils.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestDateTimeUtils.java\n public class TestDateTimeUtils extends TestCase {\n \n     private static final GJChronology GJ = GJChronology.getInstance();\n+    //BEGIN GWT IGNORE\n     private static final boolean OLD_JDK;\n     static {\n         String str = System.getProperty(\"java.version\");\n         }\n         OLD_JDK = old;\n     }\n+    //END GWT IGNORE\n \n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n             + 14L * DateTimeConstants.MILLIS_PER_HOUR\n             + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n         \n+    //BEGIN GWT IGNORE\n     private static final Policy RESTRICT;\n     private static final Policy ALLOW;\n     static {\n             }\n         };\n     }\n+    //END GWT IGNORE\n     \n     public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testClass() {\n         Class cls = DateTimeUtils.class;\n         assertEquals(true, Modifier.isPublic(cls.getModifiers()));\n         \n         DateTimeUtils utils = new DateTimeUtils() {};\n     }\n+    //END GWT IGNORE\n     \n     //-----------------------------------------------------------------------\n     public void testSystemMillis() {\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSystemMillisSecurity() {\n         if (OLD_JDK) {\n             return;\n             DateTimeUtils.setCurrentMillisSystem();\n         }\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testFixedMillis() {\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testFixedMillisSecurity() {\n         if (OLD_JDK) {\n             return;\n             DateTimeUtils.setCurrentMillisSystem();\n         }\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testOffsetMillis() {\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testOffsetMillisSecurity() {\n         if (OLD_JDK) {\n             return;\n             DateTimeUtils.setCurrentMillisSystem();\n         }\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testGetInstantMillis_RI() {\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestDateTimeZone.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestDateTimeZone.java\n  * @author Stephen Colebourne\n  */\n public class TestDateTimeZone extends TestCase {\n+    //BEGIN GWT IGNORE\n     private static final boolean OLD_JDK;\n     static {\n         String str = System.getProperty(\"java.version\");\n         }\n         OLD_JDK = old;\n     }\n+    //END GWT IGNORE\n     \n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n //            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n //            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n     \n+    //BEGIN GWT IGNORE\n     private static final Policy RESTRICT;\n     private static final Policy ALLOW;\n     static {\n             }\n         };\n     }\n+    //END GWT IGNORE\n     \n     private DateTimeZone zone;\n     private Locale locale;\n     }\n \n     protected void setUp() throws Exception {\n+        //BEGIN GWT IGNORE\n         locale = Locale.getDefault();\n+        //END GWT IGNORE\n         zone = DateTimeZone.getDefault();\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //Locale.setDefault(Locale.UK);\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n+        //BEGIN GWT IGNORE\n         Locale.setDefault(locale);\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(zone);\n     }\n \n         } catch (IllegalArgumentException ex) {}\n     }\n             \n+    //BEGIN GWT IGNORE\n     public void testDefaultSecurity() {\n         if (OLD_JDK) {\n             return;\n             Policy.setPolicy(ALLOW);\n         }\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testForID_String() {\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testProvider() {\n         try {\n             assertNotNull(DateTimeZone.getProvider());\n             assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass());\n         }\n     }\n-    \n+    //END GWT IGNORE\n+    \n+    //BEGIN GWT IGNORE\n     public void testProviderSecurity() {\n         if (OLD_JDK) {\n             return;\n             Policy.setPolicy(ALLOW);\n         }\n     }\n+    //END GWT IGNORE\n \n     static class MockNullIDSProvider implements Provider {\n         public Set getAvailableIDs() {\n             DateTimeZone.setNameProvider(null);\n         }\n         \n+        //BEGIN GWT IGNORE\n         try {\n             System.setProperty(\"org.joda.time.DateTimeZone.NameProvider\", \"org.joda.time.tz.DefaultNameProvider\");\n             DateTimeZone.setNameProvider(null);\n             DateTimeZone.setNameProvider(null);\n             assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass());\n         }\n+        //END GWT IGNORE\n     }        \n     \n+    //BEGIN GWT IGNORE\n     public void testNameProviderSecurity() {\n         if (OLD_JDK) {\n             return;\n             Policy.setPolicy(ALLOW);\n         }\n     }\n+    //END GWT IGNORE\n \n     static class MockOKButNullNameProvider implements NameProvider {\n         public String getShortName(Locale locale, String id, String nameKey) {\n \n     //-----------------------------------------------------------------------\n     public void testConstructor() {\n+        //BEGIN GWT IGNORE\n         assertEquals(1, DateTimeZone.class.getDeclaredConstructors().length);\n         assertTrue(Modifier.isProtected(DateTimeZone.class.getDeclaredConstructors()[0].getModifiers()));\n+        //END GWT IGNORE\n         try {\n             new DateTimeZone(null) {\n                 public String getNameKey(long instant) {\n         assertEquals(\"Europe/London\", zone.getShortName(TEST_TIME_SUMMER, Locale.ENGLISH));\n     }\n     \n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testGetName() {\n         DateTimeZone zone = DateTimeZone.forID(\"Europe/London\");\n         assertEquals(\"British Summer Time\", zone.getName(TEST_TIME_SUMMER));\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSerialization1() throws Exception {\n         DateTimeZone zone = DateTimeZone.forID(\"Europe/Paris\");\n         \n         \n         assertSame(zone, result);\n     }\n-\n-    //-----------------------------------------------------------------------\n+    //END GWT IGNORE\n+\n+    //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSerialization2() throws Exception {\n         DateTimeZone zone = DateTimeZone.forID(\"+01:00\");\n         \n         \n         assertSame(zone, result);\n     }\n+    //END GWT IGNORE\n \n     public void testCommentParse() throws Exception {\n         // A bug in ZoneInfoCompiler's handling of comments broke Europe/Athens\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestDateTime_Basics.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestDateTime_Basics.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n     }\n     \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSerialization() throws Exception {\n         DateTime test = new DateTime(TEST_TIME_NOW);\n         \n         \n         assertEquals(test, result);\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n         assertEquals(\"2002-06-09T01:00:00.000+01:00\", test.toString((String) null));\n     }\n \n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testToString_String_Locale() {\n         DateTime test = new DateTime(TEST_TIME_NOW);\n         assertEquals(\"Sun 9/6\", test.toString(\"EEE d/M\", Locale.ENGLISH));\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestDateTime_Constructors.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestDateTime_Constructors.java\n \n import java.util.Date;\n import java.util.Locale;\n+import java.util.TimeZone;\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         locale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        java.util.TimeZone.setDefault(LONDON.toTimeZone());\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //java.util.TimeZone.setDefault(LONDON.toTimeZone());\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n+        //BEGIN GWT IGNORE\n         java.util.TimeZone.setDefault(zone.toTimeZone());\n         Locale.setDefault(locale);\n+        //END GWT IGNORE\n         zone = null;\n     }\n \n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestDateTime_Properties.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestDateTime_Properties.java\n package org.joda.time;\n \n import java.util.Locale;\n+import java.util.TimeZone;\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         locale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //Locale.setDefault(Locale.UK);\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n+\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n+        //BEGIN GWT IGNORE\n         Locale.setDefault(locale);\n+        //END GWT IGNORE\n         zone = null;\n     }\n \n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPropertyGetEra() {\n         DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         assertSame(test.getChronology().era(), test.era().getField());\n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPropertyGetMonthOfYear() {\n         DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField());\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPropertySetTextMonthOfYear() {\n         DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime copy = test.monthOfYear().setCopy(\"12\");\n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPropertyGetDayOfWeek() {\n         DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         assertSame(test.getChronology().dayOfWeek(), test.dayOfWeek().getField());\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPropertySetTextDayOfWeek() {\n         DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime copy = test.dayOfWeek().setCopy(\"4\");\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestDays.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestDays.java\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSerialization() throws Exception {\n         Days test = Days.SEVEN;\n         \n         \n         assertSame(test, result);\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testToStandardWeeks() {\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestDurationFieldType.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestDurationFieldType.java\n         assertSerialization(DurationFieldType.millis());\n     }\n \n+    //BEGIN GWT IGNORE\n     public void test_other() throws Exception {\n         assertEquals(1, DurationFieldType.class.getDeclaredClasses().length);\n         Class cls = DurationFieldType.class.getDeclaredClasses()[0];\n         assertEquals(type.getName(), result.getName());\n         assertNotSame(type, result);\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     private void assertSerialization(DurationFieldType type) throws Exception {\n+        //BEGIN GWT IGNORE\n         DurationFieldType result = doSerialization(type);\n         assertSame(type, result);\n+        //END GWT IGNORE\n     }\n \n+    //BEGIN GWT IGNORE\n     private DurationFieldType doSerialization(DurationFieldType type) throws Exception {\n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ObjectOutputStream oos = new ObjectOutputStream(baos);\n         ois.close();\n         return result;\n     }\n+    //END GWT IGNORE\n \n }\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestDuration_Basics.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestDuration_Basics.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n     }\n     \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSerialization() throws Exception {\n         Duration test = new Duration(123L);\n         \n         \n         assertEquals(test, result);\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testGetStandardSeconds() {\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestDuration_Constructors.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestDuration_Constructors.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestHours.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestHours.java\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSerialization() throws Exception {\n         Hours test = Hours.SEVEN;\n         \n         \n         assertSame(test, result);\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testToStandardWeeks() {\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestInstant_Basics.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestInstant_Basics.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n     }\n     \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSerialization() throws Exception {\n         Instant test = new Instant(TEST_TIME_NOW);\n         \n         \n         assertEquals(test, result);\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n     }\n     \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testImmutable() {\n         assertTrue(Modifier.isFinal(Instant.class.getModifiers()));\n     }\n+    //END GWT IGNORE\n \n }\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestInstant_Constructors.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestInstant_Constructors.java\n \n import java.util.Date;\n import java.util.Locale;\n+import java.util.TimeZone;\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         locale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        java.util.TimeZone.setDefault(LONDON.toTimeZone());\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //java.util.TimeZone.setDefault(LONDON.toTimeZone());\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n+        //BEGIN GWT IGNORE\n         java.util.TimeZone.setDefault(zone.toTimeZone());\n         Locale.setDefault(locale);\n+        //END GWT IGNORE\n         zone = null;\n     }\n \n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestInterval_Basics.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestInterval_Basics.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(PARIS);\n-        TimeZone.setDefault(PARIS.toTimeZone());\n-        Locale.setDefault(Locale.FRANCE);\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(PARIS.toTimeZone());\n+        //Locale.setDefault(Locale.FRANCE);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n         interval37 = new Interval(3, 7);\n         interval33 = new Interval(3, 3);\n     }\n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSerialization() throws Exception {\n         Interval test = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n         \n         \n         assertEquals(test, result);\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestInterval_Constructors.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestInterval_Constructors.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(PARIS);\n-        TimeZone.setDefault(PARIS.toTimeZone());\n-        Locale.setDefault(Locale.FRANCE);\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(PARIS.toTimeZone());\n+        //Locale.setDefault(Locale.FRANCE);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestLocalDateTime_Basics.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestLocalDateTime_Basics.java\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSerialization() throws Exception {\n         LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40, COPTIC_PARIS);\n         \n         assertTrue(Arrays.equals(test.getFields(), result.getFields()));\n         assertEquals(test.getChronology(), result.getChronology());\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestLocalDate_Basics.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestLocalDate_Basics.java\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSerialization() throws Exception {\n         LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS);\n         \n         assertTrue(Arrays.equals(test.getFields(), result.getFields()));\n         assertEquals(test.getChronology(), result.getChronology());\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestLocalTime_Basics.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestLocalTime_Basics.java\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSerialization() throws Exception {\n         LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_PARIS);\n         \n         assertTrue(Arrays.equals(test.getFields(), result.getFields()));\n         assertEquals(test.getChronology(), result.getChronology());\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestLocalTime_Constructors.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestLocalTime_Constructors.java\n import java.util.Calendar;\n import java.util.Date;\n import java.util.GregorianCalendar;\n+import java.util.Locale;\n+import java.util.TimeZone;\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n         DateTimeZone.setDefault(LONDON);\n-        java.util.TimeZone.setDefault(LONDON.toTimeZone());\n+        //BEGIN GWT IGNORE\n+        //java.util.TimeZone.setDefault(LONDON.toTimeZone());\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n+        //BEGIN GWT IGNORE\n         java.util.TimeZone.setDefault(zone.toTimeZone());\n+        //END GWT IGNORE\n         zone = null;\n     }\n \n         assertEquals(4, test.getMillisOfSecond());\n     }\n \n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testConstructor_Object2() throws Throwable {\n         Calendar cal = new GregorianCalendar();\n         cal.setTime(new Date(TEST_TIME1));\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestMinutes.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestMinutes.java\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSerialization() throws Exception {\n         Minutes test = Minutes.THREE;\n         \n         \n         assertSame(test, result);\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testToStandardWeeks() {\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestMonths.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestMonths.java\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSerialization() throws Exception {\n         Months test = Months.THREE;\n         \n         \n         assertSame(test, result);\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testPlus_int() {\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestMutableDateTime_Adds.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestMutableDateTime_Adds.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestMutableDateTime_Basics.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestMutableDateTime_Basics.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n     }\n     \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSerialization() throws Exception {\n         MutableDateTime test = new MutableDateTime(TEST_TIME_NOW);\n         \n         \n         assertEquals(test, result);\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n         assertEquals(\"2002-06-09T01:00:00.000+01:00\", test.toString((String) null));\n     }\n \n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testToString_String_String() {\n         MutableDateTime test = new MutableDateTime(TEST_TIME_NOW);\n         assertEquals(\"Sun 9/6\", test.toString(\"EEE d/M\", Locale.ENGLISH));\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestMutableDateTime_Constructors.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestMutableDateTime_Constructors.java\n \n import java.util.Date;\n import java.util.Locale;\n+import java.util.TimeZone;\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         locale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        java.util.TimeZone.setDefault(LONDON.toTimeZone());\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //java.util.TimeZone.setDefault(LONDON.toTimeZone());\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n+        //BEGIN GWT IGNORE\n         java.util.TimeZone.setDefault(zone.toTimeZone());\n         Locale.setDefault(locale);\n+        //END GWT IGNORE\n         zone = null;\n     }\n \n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestMutableDateTime_Properties.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestMutableDateTime_Properties.java\n package org.joda.time;\n \n import java.util.Locale;\n+import java.util.TimeZone;\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         locale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //Locale.setDefault(Locale.UK);\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n+        //BEGIN GWT IGNORE\n         Locale.setDefault(locale);\n+        //END GWT IGNORE\n         zone = null;\n     }\n \n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPropertyGetEra() {\n         MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n         assertSame(test.getChronology().era(), test.era().getField());\n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPropertyGetMonthOfYear() {\n         MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n         assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField());\n         assertEquals(\"2004-12-09T00:00:00.000Z\", test.toString());\n     }\n \n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPropertySetTextMonthOfYear() {\n         MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n         test.monthOfYear().set(\"12\");\n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPropertyGetDayOfWeek() {\n         MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n         assertSame(test.getChronology().dayOfWeek(), test.dayOfWeek().getField());\n         assertEquals(\"2004-06-10T00:00:00.000+01:00\", test.toString());\n     }\n \n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPropertySetTextDayOfWeek() {\n         MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n         test.dayOfWeek().set(\"4\");\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestMutableDateTime_Sets.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestMutableDateTime_Sets.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n+\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestMutableInterval_Basics.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestMutableInterval_Basics.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n+\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSerialization() throws Exception {\n         MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n         \n         \n         assertEquals(test, result);\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestMutableInterval_Constructors.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestMutableInterval_Constructors.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n+\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestMutableInterval_Updates.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestMutableInterval_Updates.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n+\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestMutablePeriod_Basics.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestMutablePeriod_Basics.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSerialization() throws Exception {\n         MutablePeriod test = new MutablePeriod(123L);\n         \n         \n         assertEquals(test, result);\n     }\n+    //END GWT IGNORE\n \n //    //-----------------------------------------------------------------------\n //    public void testAddTo1() {\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestMutablePeriod_Constructors.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestMutablePeriod_Constructors.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestMutablePeriod_Updates.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestMutablePeriod_Updates.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestPartial_Basics.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestPartial_Basics.java\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSerialization() throws Exception {\n         Partial test = createHourMinPartial(COPTIC_PARIS);\n         \n         assertTrue(Arrays.equals(test.getFields(), result.getFields()));\n         assertEquals(test.getChronology(), result.getChronology());\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testGetFormatter1() {\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestPeriodType.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestPeriodType.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n \n     //-----------------------------------------------------------------------\n     private void assertEqualsAfterSerialization(PeriodType type) throws Exception {\n+        //BEGIN GWT IGNORE\n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ObjectOutputStream oos = new ObjectOutputStream(baos);\n         oos.writeObject(type);\n         ois.close();\n         \n         assertEquals(type, result);\n+        //END GWT IGNORE\n     }\n \n     private void assertSameAfterSerialization(PeriodType type) throws Exception {\n+        //BEGIN GWT IGNORE\n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ObjectOutputStream oos = new ObjectOutputStream(baos);\n         oos.writeObject(type);\n         ois.close();\n         \n         assertEquals(type, result);\n+        //END GWT IGNORE\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestPeriod_Basics.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestPeriod_Basics.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSerialization() throws Exception {\n         Period test = new Period(123L);\n         \n         \n         assertEquals(test, result);\n     }\n+    //END GWT IGNORE\n \n //    //-----------------------------------------------------------------------\n //    public void testAddTo1() {\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testToStandardWeeks() {\n         Period test = new Period(0, 0, 3, 4, 5, 6, 7, 8);\n         assertEquals(3, test.toStandardWeeks().getWeeks());\n             fail();\n         } catch (ArithmeticException ex) {}\n     }\n+    //END GWT IGNORE\n \n     public void testToStandardWeeks_years() {\n         Period test = Period.years(1);\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testToStandardDays() {\n         Period test = new Period(0, 0, 0, 4, 5, 6, 7, 8);\n         assertEquals(4, test.toStandardDays().getDays());\n             fail();\n         } catch (ArithmeticException ex) {}\n     }\n+    //END GWT IGNORE\n \n     public void testToStandardDays_years() {\n         Period test = Period.years(1);\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testToStandardHours() {\n         Period test = new Period(0, 0, 0, 0, 5, 6, 7, 8);\n         assertEquals(5, test.toStandardHours().getHours());\n             fail();\n         } catch (ArithmeticException ex) {}\n     }\n+    //END GWT IGNORE\n \n     public void testToStandardHours_years() {\n         Period test = Period.years(1);\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testToStandardMinutes() {\n         Period test = new Period(0, 0, 0, 0, 0, 6, 7, 8);\n         assertEquals(6, test.toStandardMinutes().getMinutes());\n             fail();\n         } catch (ArithmeticException ex) {}\n     }\n+    //END GWT IGNORE\n \n     public void testToStandardMinutes_years() {\n         Period test = Period.years(1);\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testToStandardDuration() {\n         Period test = new Period(0, 0, 0, 0, 0, 0, 0, 8);\n         assertEquals(8, test.toStandardDuration().getMillis());\n //            fail();\n //        } catch (ArithmeticException ex) {}\n     }\n+    //END GWT IGNORE\n \n     public void testToStandardDuration_years() {\n         Period test = Period.years(1);\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestPeriod_Constructors.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestPeriod_Constructors.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestSeconds.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestSeconds.java\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSerialization() throws Exception {\n         Seconds test = Seconds.THREE;\n         \n         \n         assertSame(test, result);\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testToStandardWeeks() {\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestSerialization.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestSerialization.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestTimeOfDay_Basics.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestTimeOfDay_Basics.java\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSerialization() throws Exception {\n         TimeOfDay test = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS);\n         \n         assertTrue(Arrays.equals(test.getFields(), result.getFields()));\n         assertEquals(test.getChronology(), result.getChronology());\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestTimeOfDay_Constructors.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestTimeOfDay_Constructors.java\n import java.util.Calendar;\n import java.util.Date;\n import java.util.GregorianCalendar;\n+import java.util.Locale;\n+import java.util.TimeZone;\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n         DateTimeZone.setDefault(LONDON);\n-        java.util.TimeZone.setDefault(LONDON.toTimeZone());\n+        //BEGIN GWT IGNORE\n+        //java.util.TimeZone.setDefault(LONDON.toTimeZone());\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n+        //BEGIN GWT IGNORE\n         java.util.TimeZone.setDefault(zone.toTimeZone());\n+        //END GWT IGNORE\n         zone = null;\n     }\n \n     /**\n      * Test constructor (Object)\n      */\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testConstructor_Object2() throws Throwable {\n         Calendar cal = new GregorianCalendar();\n         cal.setTime(new Date(TEST_TIME1));\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestWeeks.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestWeeks.java\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSerialization() throws Exception {\n         Weeks test = Weeks.THREE;\n         \n         \n         assertSame(test, result);\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testToStandardDays() {\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestYearMonthDay_Basics.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestYearMonthDay_Basics.java\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSerialization() throws Exception {\n         YearMonthDay test = new YearMonthDay(1972, 6, 9, COPTIC_PARIS);\n         \n         assertTrue(Arrays.equals(test.getFields(), result.getFields()));\n         assertEquals(test.getChronology(), result.getChronology());\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/TestYears.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/TestYears.java\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSerialization() throws Exception {\n         Years test = Years.THREE;\n         \n         \n         assertSame(test, result);\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testPlus_int() {\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/chrono/TestBuddhistChronology.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/chrono/TestBuddhistChronology.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/chrono/TestCopticChronology.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/chrono/TestCopticChronology.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/chrono/TestEthiopicChronology.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/chrono/TestEthiopicChronology.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/chrono/TestGJChronology.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/chrono/TestGJChronology.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n         }\n     }\n \n+    //GWT: result depends on the locale\n     public void testPartialGetAsText() {\n         GJChronology chrono = GJChronology.getInstance(TOKYO);\n         assertEquals(\"January\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsText());\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/chrono/TestGregorianChronology.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/chrono/TestGregorianChronology.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/chrono/TestISOChronology.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/chrono/TestISOChronology.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/chrono/TestIslamicChronology.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/chrono/TestIslamicChronology.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/chrono/TestJulianChronology.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/chrono/TestJulianChronology.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n-        DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        //END GWT IGNORE\n+       DateTimeZone.setDefault(LONDON);\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/convert/TestCalendarConverter.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/convert/TestCalendarConverter.java\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSingleton() throws Exception {\n         Class cls = CalendarConverter.class;\n         assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n         assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testSupportedType() throws Exception {\n         Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone(\"Europe/Moscow\"));\n         assertEquals(ISOChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(uc, PARIS));\n         \n+        //BEGIN GWT IGNORE\n         try {\n             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n             bc.setTimeZone(TimeZone.getTimeZone(\"Europe/Moscow\"));\n         } catch (ClassNotFoundException ex) {\n             // ignore\n         }\n+        //END GWT IGNORE\n     }\n \n     public void testGetChronology_Object_nullChronology() throws Exception {\n         Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone(\"Europe/Moscow\"));\n         assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null));\n         \n+        //BEGIN GWT IGNORE\n         try {\n             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n             bc.setTimeZone(TimeZone.getTimeZone(\"Europe/Moscow\"));\n         } catch (ClassNotFoundException ex) {\n             // ignore\n         }\n+        //END GWT IGNORE\n     }\n \n     public void testGetChronology_Object_Chronology() throws Exception {\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/convert/TestConverterManager.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/convert/TestConverterManager.java\n  * @author Stephen Colebourne\n  */\n public class TestConverterManager extends TestCase {\n+    //BEGIN GWT IGNORE\n     private static final boolean OLD_JDK;\n     static {\n         String str = System.getProperty(\"java.version\");\n             }\n         };\n     }\n+    //END GWT IGNORE\n \n     public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSingleton() throws Exception {\n         Class cls = ConverterManager.class;\n         assertEquals(true, Modifier.isPublic(cls.getModifiers()));\n         Field fld = cls.getDeclaredField(\"INSTANCE\");\n         assertEquals(true, Modifier.isPrivate(fld.getModifiers()));\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testGetInstantConverter() {\n         assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n     }\n \n+    //BEGIN GWT IGNORE\n     public void testAddInstantConverterSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n         assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testRemoveInstantConverter1() {\n         assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n     }\n \n+    //BEGIN GWT IGNORE\n     public void testRemoveInstantConverterSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n         assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n         assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n     }\n \n+    //BEGIN GWT IGNORE\n     public void testAddPartialConverterSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n         assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testRemovePartialConverter1() {\n         assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n     }\n \n+    //BEGIN GWT IGNORE\n     public void testRemovePartialConverterSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n         assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n         assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length);\n     }\n \n+    //BEGIN GWT IGNORE\n     public void testAddDurationConverterSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n         assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length);\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testRemoveDurationConverter1() {\n         assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length);\n     }\n \n+    //BEGIN GWT IGNORE\n     public void testRemoveDurationConverterSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n         assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length);\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n         assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length);\n     }\n \n+    //BEGIN GWT IGNORE\n     public void testAddPeriodConverterSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n         assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length);\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testRemovePeriodConverter1() {\n         assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length);\n     }\n \n+    //BEGIN GWT IGNORE\n     public void testRemovePeriodConverterSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n         assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length);\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n         assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length);\n     }\n \n+    //BEGIN GWT IGNORE\n     public void testAddIntervalConverterSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n         assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length);\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testRemoveIntervalConverter1() {\n         assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length);\n     }\n \n+    //BEGIN GWT IGNORE\n     public void testRemoveIntervalConverterSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n         assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length);\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/convert/TestConverterSet.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/convert/TestConverterSet.java\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testClass() throws Exception {\n         Class cls = ConverterSet.class;\n         assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isProtected(con.getModifiers()));\n         assertEquals(false, Modifier.isPrivate(con.getModifiers()));\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testBigHashtable() {\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/convert/TestDateConverter.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/convert/TestDateConverter.java\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSingleton() throws Exception {\n         Class cls = DateConverter.class;\n         assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n         assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testSupportedType() throws Exception {\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/convert/TestLongConverter.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/convert/TestLongConverter.java\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSingleton() throws Exception {\n         Class cls = LongConverter.class;\n         assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n         assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testSupportedType() throws Exception {\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/convert/TestNullConverter.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/convert/TestNullConverter.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(DateTimeZone.forID(\"Europe/London\"));\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n         \n         ISO = ISOChronology.getInstance();\n         JULIAN = JulianChronology.getInstance();\n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSingleton() throws Exception {\n         Class cls = NullConverter.class;\n         assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n         assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testSupportedType() throws Exception {\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/convert/TestReadableDurationConverter.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/convert/TestReadableDurationConverter.java\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSingleton() throws Exception {\n         Class cls = ReadableDurationConverter.class;\n         assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n         assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testSupportedType() throws Exception {\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/convert/TestReadableInstantConverter.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/convert/TestReadableInstantConverter.java\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSingleton() throws Exception {\n         Class cls = ReadableInstantConverter.class;\n         assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n         assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testSupportedType() throws Exception {\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/convert/TestReadableIntervalConverter.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/convert/TestReadableIntervalConverter.java\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSingleton() throws Exception {\n         Class cls = ReadableIntervalConverter.class;\n         assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n         assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testSupportedType() throws Exception {\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/convert/TestReadablePartialConverter.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/convert/TestReadablePartialConverter.java\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSingleton() throws Exception {\n         Class cls = ReadablePartialConverter.class;\n         assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n         assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testSupportedType() throws Exception {\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/convert/TestReadablePeriodConverter.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/convert/TestReadablePeriodConverter.java\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSingleton() throws Exception {\n         Class cls = ReadablePeriodConverter.class;\n         assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n         assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testSupportedType() throws Exception {\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/convert/TestStringConverter.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/convert/TestStringConverter.java\n import java.lang.reflect.Modifier;\n import java.util.Arrays;\n import java.util.Locale;\n+import java.util.TimeZone;\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n     protected void setUp() throws Exception {\n         zone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         locale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //Locale.setDefault(Locale.UK);\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n         \n         JULIAN = JulianChronology.getInstance();\n         ISO = ISOChronology.getInstance();\n \n     protected void tearDown() throws Exception {\n         DateTimeZone.setDefault(zone);\n+        //BEGIN GWT IGNORE\n         Locale.setDefault(locale);\n+        //END GWT IGNORE\n         zone = null;\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSingleton() throws Exception {\n         Class cls = StringConverter.class;\n         assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n         assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testSupportedType() throws Exception {\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/field/TestMillisDurationField.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/field/TestMillisDurationField.java\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSerialization() throws Exception {\n         DurationField test = MillisDurationField.INSTANCE;\n         \n         \n         assertSame(test, result);\n     }\n+    //END GWT IGNORE\n \n }\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/field/TestPreciseDurationField.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/field/TestPreciseDurationField.java\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSerialization() throws Exception {\n         DurationField test = iField;\n         \n         \n         assertEquals(test, result);\n     }\n+    //END GWT IGNORE\n \n }\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/field/TestScaledDurationField.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/field/TestScaledDurationField.java\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testSerialization() throws Exception {\n         DurationField test = iField;\n         \n         \n         assertEquals(test, result);\n     }\n+    //END GWT IGNORE\n \n }\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/format/TestDateTimeFormat.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/format/TestDateTimeFormat.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/format/TestDateTimeFormatStyle.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/format/TestDateTimeFormatStyle.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(UK);\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testForStyle_shortDate() throws Exception {\n         DateTimeFormatter f = DateTimeFormat.shortDate();\n         DateTimeFormatter g = DateTimeFormat.forStyle(\"S-\");\n         assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect));\n     }\n \n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testForStyle_shortTime() throws Exception {\n         DateTimeFormatter f = DateTimeFormat.shortTime();\n         DateTimeFormatter g = DateTimeFormat.forStyle(\"-S\");\n         }\n     }\n \n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testForStyle_shortDateTime() throws Exception {\n         DateTimeFormatter f = DateTimeFormat.shortDateTime();\n         DateTimeFormatter g = DateTimeFormat.forStyle(\"SS\");\n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testForStyle_mediumDate() throws Exception {\n         DateTimeFormatter f = DateTimeFormat.mediumDate();\n         DateTimeFormatter g = DateTimeFormat.forStyle(\"M-\");\n         assertEquals(expect, f.withLocale(FRANCE).print(dt));\n     }\n \n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testForStyle_mediumTime() throws Exception {\n         DateTimeFormatter f = DateTimeFormat.mediumTime();\n         DateTimeFormatter g = DateTimeFormat.forStyle(\"-M\");\n         assertEquals(expect, f.withLocale(FRANCE).print(dt));\n     }\n \n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testForStyle_mediumDateTime() throws Exception {\n         DateTimeFormatter f = DateTimeFormat.mediumDateTime();\n         DateTimeFormatter g = DateTimeFormat.forStyle(\"MM\");\n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testForStyle_longDate() throws Exception {\n         DateTimeFormatter f = DateTimeFormat.longDate();\n         DateTimeFormatter g = DateTimeFormat.forStyle(\"L-\");\n         assertEquals(expect, f.withLocale(FRANCE).print(dt));\n     }\n \n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testForStyle_longTime() throws Exception {\n         DateTimeFormatter f = DateTimeFormat.longTime();\n         DateTimeFormatter g = DateTimeFormat.forStyle(\"-L\");\n         assertEquals(expect, f.withLocale(FRANCE).print(dt));\n     }\n \n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testForStyle_longDateTime() throws Exception {\n         DateTimeFormatter f = DateTimeFormat.longDateTime();\n         DateTimeFormatter g = DateTimeFormat.forStyle(\"LL\");\n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testForStyle_fullDate() throws Exception {\n         DateTimeFormatter f = DateTimeFormat.fullDate();\n         DateTimeFormatter g = DateTimeFormat.forStyle(\"F-\");\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/format/TestDateTimeFormatter.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/format/TestDateTimeFormatter.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n         f = new DateTimeFormatterBuilder()\n                 .appendDayOfWeekShortText()\n                 .appendLiteral(' ')\n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPrint_simple() {\n         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n         assertEquals(\"Wed 2004-06-09T10:20:30Z\", f.print(dt));\n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPrint_locale() {\n         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n         assertEquals(\"mer. 2004-06-09T10:20:30Z\", f.withLocale(Locale.FRENCH).print(dt));\n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPrint_zone() {\n         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n         assertEquals(\"Wed 2004-06-09T06:20:30-04:00\", f.withZone(NEWYORK).print(dt));\n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPrint_chrono() {\n         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n         assertEquals(\"Wed 2004-06-09T12:20:30+02:00\", f.withChronology(ISO_PARIS).print(dt));\n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPrint_bufferMethods() throws Exception {\n         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n         StringBuffer buf = new StringBuffer();\n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPrint_writerMethods() throws Exception {\n         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n         CharArrayWriter out = new CharArrayWriter();\n     }\n \n     //-----------------------------------------------------------------------\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPrint_chrono_and_zone() {\n         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n         assertEquals(\"Wed 2004-06-09T10:20:30Z\",\n         assertSame(f2, f3);\n     }\n \n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testPrinterParserMethods() {\n         DateTimeFormatter f2 = new DateTimeFormatter(f.getPrinter(), f.getParser());\n         assertEquals(f.getPrinter(), f2.getPrinter());\n         assertEquals(expect, h.withZone(PARIS).parseDateTime(\"2004-06-09T10:20:30\"));\n     }\n \n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testParseDateTime_simple_precedence() {\n         DateTime expect = null;\n         // use correct day of week\n         assertEquals(expect, h.withZone(PARIS).parseMutableDateTime(\"2004-06-09T10:20:30\"));\n     }\n \n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testParseMutableDateTime_simple_precedence() {\n         MutableDateTime expect = null;\n         // use correct day of week\n         assertEquals(expect, result);\n     }\n \n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testParseInto_simple_precedence() {\n         MutableDateTime expect = null;\n         MutableDateTime result = null;\n \n     //-----------------------------------------------------------------------\n     // Ensure time zone name switches properly at the zone DST transition.\n+    //GWT result depends on java.util.Locale / java.util.TimeZone\n     public void testZoneNameNearTransition() {\n         DateTime inDST_1  = new DateTime(2005, 10, 30, 1, 0, 0, 0, NEWYORK);\n         DateTime inDST_2  = new DateTime(2005, 10, 30, 1, 59, 59, 999, NEWYORK);\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/format/TestISODateTimeFormat.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/format/TestISODateTimeFormat.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n-    }\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n+     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/format/TestISODateTimeFormatParsing.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/format/TestISODateTimeFormatParsing.java\n \n     protected void setUp() throws Exception {\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(DateTimeZone.forID(\"Europe/London\"));\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n-    }\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n+     }\n \n     protected void tearDown() throws Exception {\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/format/TestISOPeriodFormat.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/format/TestISOPeriodFormat.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n-    }\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n+     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/format/TestISOPeriodFormatParsing.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/format/TestISOPeriodFormatParsing.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n-    }\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n+     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/format/TestPeriodFormat.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/format/TestPeriodFormat.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n-    }\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n+     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/format/TestPeriodFormatParsing.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/format/TestPeriodFormatParsing.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n-    }\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n+     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/format/TestPeriodFormatter.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/format/TestPeriodFormatter.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n-        f = ISOPeriodFormat.standard();\n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n+         f = ISOPeriodFormat.standard();\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/format/TestPeriodFormatterBuilder.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/format/TestPeriodFormatterBuilder.java\n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n-        \n+        //BEGIN GWT IGNORE\n+        //TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        //Locale.setDefault(Locale.UK);\n+        TimeZone.setDefault(DateTimeZone.forID(\"Asia/Tokyo\").toTimeZone());\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n+         \n         builder = new PeriodFormatterBuilder();\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/format/TestTextFields.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/format/TestTextFields.java\n package org.joda.time.format;\n \n import java.util.Locale;\n+import java.util.TimeZone;\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n     protected void setUp() throws Exception {\n         originalDateTimeZone = DateTimeZone.getDefault();\n+        //BEGIN GWT IGNORE\n         originalLocale = Locale.getDefault();\n+        //END GWT IGNORE\n         DateTimeZone.setDefault(ZONES[0]);\n-        Locale.setDefault(Locale.ENGLISH);\n+        //BEGIN GWT IGNORE\n+        //Locale.setDefault(Locale.ENGLISH);\n+        Locale.setDefault(Locale.JAPAN);\n+        //END GWT IGNORE\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeZone.setDefault(originalDateTimeZone);\n+        //BEGIN GWT IGNORE\n         Locale.setDefault(originalLocale);\n+        //END GWT IGNORE\n         originalDateTimeZone = null;\n         originalLocale = null;\n     }\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/tz/TestBuilder.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/tz/TestBuilder.java\n         }\n     }\n \n+    //BEGIN GWT IGNORE\n     public void testSerialization() throws IOException {\n         DateTimeZone tz = testSerialization\n             (buildAmericaLosAngelesBuilder(), \"America/Los_Angeles\");\n         testForwardTransitions(tz, AMERICA_LOS_ANGELES_DATA);\n         testReverseTransitions(tz, AMERICA_LOS_ANGELES_DATA);\n     }\n-\n+    //END GWT IGNORE\n+\n+    //BEGIN GWT IGNORE\n     static DateTimeZone testSerialization(DateTimeZoneBuilder builder, String id)\n         throws IOException\n     {\n         assertEquals(id, tz.getID());\n         return tz;\n     }\n-\n+    //END GWT IGNORE\n+\n+    //BEGIN GWT IGNORE\n     public void testFixed() throws IOException {\n         DateTimeZoneBuilder builder = new DateTimeZoneBuilder()\n             .setStandardOffset(3600000)\n             tz = testSerialization(builder, \"Test\");\n         }\n     }\n+    //END GWT IGNORE\n }\n--- a/JodaTimeContrib/gwt/branch/test/org/joda/time/tz/TestUTCProvider.java\n+++ b/JodaTimeContrib/gwt/branch/test/org/joda/time/tz/TestUTCProvider.java\n     }\n \n     //-----------------------------------------------------------------------\n+    //BEGIN GWT IGNORE\n     public void testClass() throws Exception {\n         Class cls = UTCProvider.class;\n         assertEquals(true, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(1, cls.getDeclaredConstructors().length);\n         assertEquals(true, Modifier.isPublic(con.getModifiers()));\n     }\n+    //END GWT IGNORE\n \n     //-----------------------------------------------------------------------\n     public void testGetAvailableIDs() throws Exception {", "timestamp": 1258643470, "metainfo": ""}