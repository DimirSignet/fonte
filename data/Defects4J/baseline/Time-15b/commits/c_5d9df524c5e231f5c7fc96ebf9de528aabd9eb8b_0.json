{"sha": "5d9df524c5e231f5c7fc96ebf9de528aabd9eb8b", "log": "Add PersistentInstant, from Martin Grove  ", "commit": "\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInstant.java\n+/*\n+ *  Copyright 2001-2009 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.hibernate;\n+\n+import java.io.Serializable;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+\n+import org.hibernate.Hibernate;\n+import org.hibernate.HibernateException;\n+import org.hibernate.usertype.EnhancedUserType;\n+import org.joda.time.Instant;\n+\n+/**\n+ * Persist {@link org.joda.time.Instant} via hibernate.\n+ *\n+ * @author Martin Grove (marting@optrak.co.uk))\n+ */\n+public class PersistentInstant implements EnhancedUserType\n+{\n+\tpublic final static PersistentInstant INSTANCE = new PersistentInstant();\n+\n+\tprivate static final int[] SQL_TYPES = new int[]{Types.BIGINT};\n+\n+\tpublic int[] sqlTypes()\n+\t{\n+\t\treturn SQL_TYPES;\n+\t}\n+\n+\tpublic Class returnedClass()\n+\t{\n+\t\treturn Instant.class;\n+\t}\n+\n+\tpublic boolean equals(Object x, Object y) throws HibernateException\n+\t{\n+\t\tif (x == y)\n+\t\t\treturn true;\n+\n+\t\tif (x == null || y == null)\n+\t\t\treturn false;\n+\n+\t\tInstant ix = (Instant)x;\n+\t\tInstant iy = (Instant)y;\n+\n+\t\treturn ix.equals(iy);\n+\t}\n+\n+\tpublic int hashCode(Object o) throws HibernateException\n+\t{\n+\t\treturn o.hashCode();\n+\t}\n+\n+\tpublic Object nullSafeGet(ResultSet resultSet, String[] names, Object object) throws HibernateException, SQLException\n+\t{\n+\t\treturn nullSafeGet(resultSet, names[0]);\n+\t}\n+\n+\tpublic Object nullSafeGet(ResultSet rs, String name) throws HibernateException, SQLException\n+\t{\n+\t\tObject l = Hibernate.LONG.nullSafeGet(rs, name);\n+\t\tif (l == null)\n+\t\t\treturn null;\n+\n+\t\treturn new Instant(l);\n+\t}\n+\n+\tpublic void nullSafeSet(PreparedStatement preparedStatement, Object value, int index) throws HibernateException, SQLException\n+\t{\n+\t\tif (value == null)\n+\t\t\tHibernate.LONG.nullSafeSet(preparedStatement, null, index);\n+\t\telse\n+\t\t\tHibernate.LONG.nullSafeSet(preparedStatement, new Long(((Instant)value).getMillis()), index);\n+\t}\n+\n+\tpublic Object deepCopy(Object value) throws HibernateException\n+\t{\n+\t\tif (value == null)\n+\t\t\treturn null;\n+\n+\t\treturn new Instant(value);\n+\t}\n+\n+\tpublic boolean isMutable()\n+\t{\n+\t\treturn false;\n+\t}\n+\n+\tpublic Serializable disassemble(Object value) throws HibernateException\n+\t{\n+\t\treturn (Serializable)value;\n+\t}\n+\n+\tpublic Object assemble(Serializable serializable, Object value) throws HibernateException\n+\t{\n+\t\treturn serializable;\n+\t}\n+\n+\tpublic Object replace(Object original, Object target, Object owner) throws HibernateException\n+\t{\n+\t\treturn original;\n+\t}\n+\n+\t// __________ EnhancedUserType ____________________\n+\n+\tpublic String objectToSQLString(Object object)\n+\t{\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\n+\tpublic String toXMLString(Object object)\n+\t{\n+\t\treturn object.toString();\n+\t}\n+\n+\tpublic Object fromXMLString(String string)\n+\t{\n+\t\treturn new Instant(string);\n+\t}\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentInstant.java\n+/*\n+ *  Copyright 2001-2009 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.hibernate;\n+\n+import java.io.File;\n+import java.sql.SQLException;\n+\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.cfg.Configuration;\n+import org.joda.time.Instant;\n+\n+public class TestPersistentInstant extends HibernateTestCase\n+{\n+    private Instant[] writeReadTimes = new Instant[]\n+    {\n+        new Instant(0),\n+\t\tnew Instant(1000),\n+\t\tnew Instant(1000000)\n+    };\n+\n+    public void testSimpleStore() throws SQLException\n+    {\n+        SessionFactory factory = getSessionFactory();\n+\n+        Session session = factory.openSession();\n+\n+        for (int i = 0; i<writeReadTimes.length; i++)\n+        {\n+            Instant writeReadTime = writeReadTimes[i];\n+\n+            ThingWithInstant thing = new ThingWithInstant();\n+            thing.setId(i);\n+            thing.setInstant(writeReadTime);\n+\n+            session.save(thing);\n+        }\n+\n+        session.flush();\n+        session.connection().commit();\n+        session.close();\n+\n+        for (int i = 0; i<writeReadTimes.length; i++)\n+        {\n+            Instant writeReadTime = writeReadTimes[i];\n+\n+            session = factory.openSession();\n+            ThingWithInstant thingReread = (ThingWithInstant)session.get(ThingWithInstant.class, new Integer(i));\n+\n+            assertNotNull(\"get failed - thing#'\" + i + \"'not found\", thingReread);\n+            assertNotNull(\"get failed - returned null\", thingReread.getInstant());\n+\n+\t\t\tInstant reReadTime = thingReread.getInstant();\n+\t\t\tif (writeReadTime.getMillis() != reReadTime.getMillis())\n+\t\t\t{\n+\t\t\t\tfail(\"get failed - returned different date. expected \" + writeReadTime + \" was \" + thingReread.getInstant());\n+\t\t\t}\n+\t\t}\n+\n+\t\tsession.close();\n+    }\n+\n+\tprotected void setupConfiguration(Configuration cfg)\n+\t{\n+\t\tcfg.addFile(new File(\"src/test/org/joda/time/contrib/hibernate/thingWithInstant.hbm.xml\"));\n+\t}\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/ThingWithInstant.java\n+/*\n+ *  Copyright 2001-2009 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.hibernate;\n+\n+import java.io.Serializable;\n+\n+import org.joda.time.Instant;\n+\n+public class ThingWithInstant implements Serializable\n+{\n+\tprivate int id;\n+\tprivate Instant instant;\n+\n+\tpublic ThingWithInstant()\n+\t{}\n+\t\n+\tpublic int getId()\n+\t{\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(int id)\n+\t{\n+\t\tthis.id = id;\n+\t}\n+\n+\tpublic Instant getInstant()\n+\t{\n+\t\treturn instant;\n+\t}\n+\n+\tpublic void setInstant(Instant instant)\n+\t{\n+\t\tthis.instant = instant;\n+\t}\n+}", "timestamp": 1239141512, "metainfo": ""}