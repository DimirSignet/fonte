{"sha": "bf92b5db5e50cd646403e54c684b73acc8581680", "log": "Fix BasePartial to restore constructor removed by mistake   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/base/BasePartial.java\n+++ b/JodaTime/src/java/org/joda/time/base/BasePartial.java\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Constructs a AbstractPartial with the current time, using ISOChronology in\n+     * Constructs a partial with the current time, using ISOChronology in\n      * the default zone to extract the fields.\n      * <p>\n      * The constructor uses the default time zone, resulting in the local time\n     }\n \n     /**\n-     * Constructs a AbstractPartial with the current time, using the specified chronology\n+     * Constructs a partial with the current time, using the specified chronology\n      * and zone to extract the fields.\n      * <p>\n      * The constructor uses the time zone of the chronology specified.\n     }\n \n     /**\n-     * Constructs a AbstractPartial extracting the partial fields from the specified\n+     * Constructs a partial extracting the partial fields from the specified\n      * milliseconds using the ISOChronology in the default zone.\n      * <p>\n      * The constructor uses the default time zone, resulting in the local time\n     }\n \n     /**\n-     * Constructs a AbstractPartial extracting the partial fields from the specified\n+     * Constructs a partial extracting the partial fields from the specified\n      * milliseconds using the chronology provided.\n      * <p>\n      * The constructor uses the time zone of the chronology specified.\n     }\n \n     /**\n-     * Constructs a AbstractPartial from an Object that represents a time.\n+     * Constructs a partial from an Object that represents a time.\n      * <p>\n      * The recognised object types are defined in\n      * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n     }\n \n     /**\n-     * Constructs a AbstractPartial from an Object that represents a time, using the\n+     * Constructs a partial from an Object that represents a time, using the\n      * specified chronology.\n      * <p>\n      * The recognised object types are defined in\n         chronology = DateTimeUtils.getChronology(chronology);\n         iChronology = chronology.withUTC();\n         iValues = initValues(millis, chronology);\n+    }\n+\n+    /**\n+     * Constructs a partial with specified time field values and chronology.\n+     * <p>\n+     * The constructor uses the time zone of the chronology specified.\n+     * Once the constructor is complete, all further calculations are performed\n+     * without reference to a timezone (by switching to UTC).\n+     * <p>\n+     * The array of values is assigned (not cloned) to the new instance.\n+     *\n+     * @param values  the new set of values\n+     * @param chronology  the chronology, null means ISOChronology in the default zone\n+     */\n+    protected BasePartial(int[] values, Chronology chronology) {\n+        super();\n+        chronology = DateTimeUtils.getChronology(chronology);\n+        iChronology = chronology.withUTC();\n+        chronology.validate(this, values);\n+        iValues = values;\n     }\n \n     /**", "timestamp": 1093377254, "metainfo": ""}