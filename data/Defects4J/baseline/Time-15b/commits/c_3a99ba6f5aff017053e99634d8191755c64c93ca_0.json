{"sha": "3a99ba6f5aff017053e99634d8191755c64c93ca", "log": "Added DateTimeFormat.patternForStyle method to retrieve the format pattern for a given style and locale.  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java\n+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java\n  * S       fraction of second           number        978\n  *\n  * z       time zone                    text          Pacific Standard Time; PST\n- * Z       time zone offset/id          zone          -0800; -08:00; Asia/Tokyo\n+ * Z       time zone offset/id          zone          -0800; -08:00; America/Los_Angeles\n  *\n  * '       escape for text              delimiter\n  * ''      single quote                 literal       '\n      */\n     public static DateTimeFormatter forStyle(String style) {\n         return createFormatterForStyle(style);\n+    }\n+\n+    /**\n+     * Returns the pattern used by a particular style and locale.\n+     * <p>\n+     * The first character is the date style, and the second character is the\n+     * time style. Specify a character of 'S' for short style, 'M' for medium,\n+     * 'L' for long, and 'F' for full.\n+     * A date or time may be ommitted by specifying a style character '-'.\n+     *\n+     * @param style  two characters from the set {\"S\", \"M\", \"L\", \"F\", \"-\"}\n+     * @param locale  locale to use, null means default\n+     * @return the formatter\n+     * @throws IllegalArgumentException if the style is invalid\n+     * @since 1.3\n+     */\n+    public static String patternForStyle(String style, Locale locale) {\n+        DateTimeFormatter formatter = createFormatterForStyle(style);\n+        if (locale == null) {\n+            locale = Locale.getDefault();\n+        }\n+        // Not pretty, but it works.\n+        return ((StyleFormatter) formatter.getPrinter()).getPattern(locale);\n     }\n \n     //-----------------------------------------------------------------------\n      * @return the formatter\n      */\n     private static DateTimeFormatter createFormatterForStyleIndex(int dateStyle, int timeStyle) {\n-        int index = dateStyle * 5 + timeStyle;\n+        int index = ((dateStyle << 2) + dateStyle) + timeStyle;\n         DateTimeFormatter f = null;\n         synchronized (cStyleCache) {\n             f = cStyleCache[index];\n             return f;\n         }\n \n-        private String getPattern(Locale locale) {\n+        String getPattern(Locale locale) {\n             DateFormat f = null;\n             switch (iType) {\n                 case DATE:", "timestamp": 1146421326, "metainfo": ""}