{"sha": "3ec46adf5021cecfc2a131aa6604496bce9875c4", "log": "Move to Hibernate 3.6, with flexible Joda-Time and Hibernate versioning (provided dependencies)  ", "commit": "\n--- a/JodaTimeContrib/hibernate/src/main/java/org/joda/time/contrib/hibernate/AbstractStringBasedJodaType.java\n+++ b/JodaTimeContrib/hibernate/src/main/java/org/joda/time/contrib/hibernate/AbstractStringBasedJodaType.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2011 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import java.sql.SQLException;\n import java.sql.Types;\n \n-import org.hibernate.Hibernate;\n import org.hibernate.HibernateException;\n+import org.hibernate.type.StandardBasicTypes;\n import org.hibernate.usertype.UserType;\n \n /**\n     }\n \n     public Object nullSafeGet(ResultSet resultSet, String[] strings, Object object) throws HibernateException, SQLException {\n-        String s = (String) Hibernate.STRING.nullSafeGet(resultSet, strings[0]);\n+        String s = (String) StandardBasicTypes.STRING.nullSafeGet(resultSet, strings[0]);\n         if (s == null) {\n             return null;\n         }\n \n     public void nullSafeSet(PreparedStatement preparedStatement, Object value, int index) throws HibernateException, SQLException {\n         if (value == null) {\n-            Hibernate.STRING.nullSafeSet(preparedStatement, null, index);\n+            StandardBasicTypes.STRING.nullSafeSet(preparedStatement, null, index);\n         } else {\n-            Hibernate.STRING.nullSafeSet(preparedStatement, toNonNullString(value), index);\n+            StandardBasicTypes.STRING.nullSafeSet(preparedStatement, toNonNullString(value), index);\n         }\n     }\n \n--- a/JodaTimeContrib/hibernate/src/main/java/org/joda/time/contrib/hibernate/PersistentDateTime.java\n+++ b/JodaTimeContrib/hibernate/src/main/java/org/joda/time/contrib/hibernate/PersistentDateTime.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2011 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import java.sql.SQLException;\n import java.sql.Types;\n \n-import org.hibernate.Hibernate;\n import org.hibernate.HibernateException;\n+import org.hibernate.type.StandardBasicTypes;\n import org.hibernate.usertype.EnhancedUserType;\n import org.joda.time.DateTime;\n \n     }\n \n     public Object nullSafeGet(ResultSet resultSet, String string) throws SQLException {\n-        Object timestamp = Hibernate.TIMESTAMP.nullSafeGet(resultSet, string);\n+        Object timestamp = StandardBasicTypes.TIMESTAMP.nullSafeGet(resultSet, string);\n         if (timestamp == null) {\n             return null;\n         }\n \n     public void nullSafeSet(PreparedStatement preparedStatement, Object value, int index) throws HibernateException, SQLException {\n         if (value == null) {\n-            Hibernate.TIMESTAMP.nullSafeSet(preparedStatement, null, index);\n+            StandardBasicTypes.TIMESTAMP.nullSafeSet(preparedStatement, null, index);\n         } else {\n-            Hibernate.TIMESTAMP.nullSafeSet(preparedStatement, ((DateTime) value).toDate(), index);\n+            StandardBasicTypes.TIMESTAMP.nullSafeSet(preparedStatement, ((DateTime) value).toDate(), index);\n         }\n     }\n \n--- a/JodaTimeContrib/hibernate/src/main/java/org/joda/time/contrib/hibernate/PersistentDateTimeTZ.java\n+++ b/JodaTimeContrib/hibernate/src/main/java/org/joda/time/contrib/hibernate/PersistentDateTimeTZ.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2011 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import java.sql.SQLException;\n import java.sql.Types;\n \n-import org.hibernate.Hibernate;\n import org.hibernate.HibernateException;\n+import org.hibernate.type.StandardBasicTypes;\n import org.hibernate.usertype.UserType;\n import org.joda.time.DateTime;\n import org.joda.time.DateTimeZone;\n     }\n \n     public Object nullSafeGet(ResultSet resultSet, String[] strings, Object object) throws HibernateException, SQLException {\n-        Object timestamp = Hibernate.TIMESTAMP.nullSafeGet(resultSet, strings[0]);\n-        Object timezone = Hibernate.STRING.nullSafeGet(resultSet, strings[1]);\n+        Object timestamp = StandardBasicTypes.TIMESTAMP.nullSafeGet(resultSet, strings[0]);\n+        Object timezone = StandardBasicTypes.STRING.nullSafeGet(resultSet, strings[1]);\n         if (timestamp == null || timezone == null) {\n             return null;\n         }\n \n     public void nullSafeSet(PreparedStatement preparedStatement, Object value, int index) throws HibernateException, SQLException {\n         if (value == null) {\n-            Hibernate.TIMESTAMP.nullSafeSet(preparedStatement, null, index);\n-            Hibernate.STRING.nullSafeSet(preparedStatement, null, index + 1);\n+            StandardBasicTypes.TIMESTAMP.nullSafeSet(preparedStatement, null, index);\n+            StandardBasicTypes.STRING.nullSafeSet(preparedStatement, null, index + 1);\n         } else {\n             DateTime dt = (DateTime) value;\n-            Hibernate.TIMESTAMP.nullSafeSet(preparedStatement, dt.toDate(), index);\n-            Hibernate.STRING.nullSafeSet(preparedStatement, dt.getZone().getID(), index + 1);\n+            StandardBasicTypes.TIMESTAMP.nullSafeSet(preparedStatement, dt.toDate(), index);\n+            StandardBasicTypes.STRING.nullSafeSet(preparedStatement, dt.getZone().getID(), index + 1);\n         }\n     }\n \n--- a/JodaTimeContrib/hibernate/src/main/java/org/joda/time/contrib/hibernate/PersistentInstant.java\n+++ b/JodaTimeContrib/hibernate/src/main/java/org/joda/time/contrib/hibernate/PersistentInstant.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2011 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import java.sql.SQLException;\n import java.sql.Types;\n \n-import org.hibernate.Hibernate;\n import org.hibernate.HibernateException;\n+import org.hibernate.type.StandardBasicTypes;\n import org.hibernate.usertype.EnhancedUserType;\n import org.joda.time.Instant;\n \n     }\n \n     public Object nullSafeGet(ResultSet resultSet, String name) throws SQLException {\n-        Object value = Hibernate.TIMESTAMP.nullSafeGet(resultSet, name);\n+        Object value = StandardBasicTypes.TIMESTAMP.nullSafeGet(resultSet, name);\n         if (value == null) {\n             return null;\n         }\n \n     public void nullSafeSet(PreparedStatement preparedStatement, Object value, int index) throws HibernateException, SQLException {\n         if (value == null) {\n-            Hibernate.TIMESTAMP.nullSafeSet(preparedStatement, null, index);\n+            StandardBasicTypes.TIMESTAMP.nullSafeSet(preparedStatement, null, index);\n         } else {\n-            Hibernate.TIMESTAMP.nullSafeSet(preparedStatement, ((Instant) value).toDate(), index);\n+            StandardBasicTypes.TIMESTAMP.nullSafeSet(preparedStatement, ((Instant) value).toDate(), index);\n         }\n     }\n \n--- a/JodaTimeContrib/hibernate/src/main/java/org/joda/time/contrib/hibernate/PersistentInstantAsBigInt.java\n+++ b/JodaTimeContrib/hibernate/src/main/java/org/joda/time/contrib/hibernate/PersistentInstantAsBigInt.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2011 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import java.sql.SQLException;\n import java.sql.Types;\n \n-import org.hibernate.Hibernate;\n import org.hibernate.HibernateException;\n+import org.hibernate.type.StandardBasicTypes;\n import org.hibernate.usertype.EnhancedUserType;\n import org.joda.time.Instant;\n \n     }\n \n     public Object nullSafeGet(ResultSet resultSet, String name) throws HibernateException, SQLException {\n-        Object value = Hibernate.LONG.nullSafeGet(resultSet, name);\n+        Object value = StandardBasicTypes.LONG.nullSafeGet(resultSet, name);\n         if (value == null) {\n             return null;\n         }\n \n     public void nullSafeSet(PreparedStatement preparedStatement, Object value, int index) throws HibernateException, SQLException {\n         if (value == null) {\n-            Hibernate.LONG.nullSafeSet(preparedStatement, null, index);\n+            StandardBasicTypes.LONG.nullSafeSet(preparedStatement, null, index);\n         } else {\n-            Hibernate.LONG.nullSafeSet(preparedStatement, new Long(((Instant) value).getMillis()), index);\n+            StandardBasicTypes.LONG.nullSafeSet(preparedStatement, new Long(((Instant) value).getMillis()), index);\n         }\n     }\n \n--- a/JodaTimeContrib/hibernate/src/main/java/org/joda/time/contrib/hibernate/PersistentInterval.java\n+++ b/JodaTimeContrib/hibernate/src/main/java/org/joda/time/contrib/hibernate/PersistentInterval.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2011 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import java.sql.SQLException;\n import java.sql.Timestamp;\n \n-import org.hibernate.Hibernate;\n import org.hibernate.HibernateException;\n import org.hibernate.engine.SessionImplementor;\n+import org.hibernate.type.StandardBasicTypes;\n import org.hibernate.type.Type;\n import org.hibernate.usertype.CompositeUserType;\n import org.joda.time.DateTime;\n \n     private static final String[] PROPERTY_NAMES = new String[] { \"start\", \"end\" };\n \n-    private static final Type[] TYPES = new Type[] { Hibernate.TIMESTAMP, Hibernate.TIMESTAMP };\n+    private static final Type[] TYPES = new Type[] { StandardBasicTypes.TIMESTAMP, StandardBasicTypes.TIMESTAMP };\n \n     public Object assemble(Serializable cached, SessionImplementor session, Object owner) throws HibernateException {\n         return cached;\n     public void nullSafeSet(PreparedStatement statement, Object value, int index, SessionImplementor session)\n             throws HibernateException, SQLException {\n         if (value == null) {\n-            statement.setNull(index, Hibernate.TIMESTAMP.sqlType());\n-            statement.setNull(index + 1, Hibernate.TIMESTAMP.sqlType());\n+            statement.setNull(index, StandardBasicTypes.TIMESTAMP.sqlType());\n+            statement.setNull(index + 1, StandardBasicTypes.TIMESTAMP.sqlType());\n             return;\n         }\n         Interval interval = (Interval) value;\n--- a/JodaTimeContrib/hibernate/src/main/java/org/joda/time/contrib/hibernate/PersistentLocalDate.java\n+++ b/JodaTimeContrib/hibernate/src/main/java/org/joda/time/contrib/hibernate/PersistentLocalDate.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2011 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import java.sql.SQLException;\n import java.sql.Types;\n \n-import org.hibernate.Hibernate;\n import org.hibernate.HibernateException;\n+import org.hibernate.type.StandardBasicTypes;\n import org.hibernate.usertype.EnhancedUserType;\n import org.joda.time.LocalDate;\n \n     }\n \n     public Object nullSafeGet(ResultSet resultSet, String string) throws SQLException {\n-        Object timestamp = Hibernate.DATE.nullSafeGet(resultSet, string);\n+        Object timestamp = StandardBasicTypes.DATE.nullSafeGet(resultSet, string);\n         if (timestamp == null) {\n             return null;\n         }\n \n     public void nullSafeSet(PreparedStatement preparedStatement, Object value, int index) throws HibernateException, SQLException {\n         if (value == null) {\n-            Hibernate.DATE.nullSafeSet(preparedStatement, null, index);\n+            StandardBasicTypes.DATE.nullSafeSet(preparedStatement, null, index);\n         } else {\n-            Hibernate.DATE.nullSafeSet(preparedStatement, ((LocalDate) value).toDateTimeAtStartOfDay().toDate(), index);\n+            StandardBasicTypes.DATE.nullSafeSet(preparedStatement, ((LocalDate) value).toDateTimeAtStartOfDay().toDate(), index);\n         }\n     }\n \n--- a/JodaTimeContrib/hibernate/src/main/java/org/joda/time/contrib/hibernate/PersistentLocalDateTime.java\n+++ b/JodaTimeContrib/hibernate/src/main/java/org/joda/time/contrib/hibernate/PersistentLocalDateTime.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2011 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import java.sql.SQLException;\n import java.sql.Types;\n \n-import org.hibernate.Hibernate;\n import org.hibernate.HibernateException;\n+import org.hibernate.type.StandardBasicTypes;\n import org.hibernate.usertype.EnhancedUserType;\n import org.joda.time.LocalDateTime;\n \n     }\n \n     public Object nullSafeGet(ResultSet resultSet, String string) throws SQLException {\n-        Object timestamp = Hibernate.TIMESTAMP.nullSafeGet(resultSet, string);\n+        Object timestamp = StandardBasicTypes.TIMESTAMP.nullSafeGet(resultSet, string);\n         if (timestamp == null) {\n             return null;\n         }\n \n     public void nullSafeSet(PreparedStatement preparedStatement, Object value, int index) throws HibernateException, SQLException {\n         if (value == null) {\n-            Hibernate.TIMESTAMP.nullSafeSet(preparedStatement, null, index);\n+            StandardBasicTypes.TIMESTAMP.nullSafeSet(preparedStatement, null, index);\n         } else {\n-            Hibernate.TIMESTAMP.nullSafeSet(preparedStatement, ((LocalDateTime) value).toDateTime().toDate(), index);\n+            StandardBasicTypes.TIMESTAMP.nullSafeSet(preparedStatement, ((LocalDateTime) value).toDateTime().toDate(), index);\n         }\n     }\n \n--- a/JodaTimeContrib/hibernate/src/main/java/org/joda/time/contrib/hibernate/PersistentLocalTimeAsString.java\n+++ b/JodaTimeContrib/hibernate/src/main/java/org/joda/time/contrib/hibernate/PersistentLocalTimeAsString.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2011 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import java.sql.SQLException;\n import java.sql.Types;\n \n-import org.hibernate.Hibernate;\n import org.hibernate.HibernateException;\n+import org.hibernate.type.StandardBasicTypes;\n import org.hibernate.usertype.EnhancedUserType;\n import org.joda.time.LocalTime;\n \n     }\n \n     public Object nullSafeGet(ResultSet resultSet, String string) throws SQLException {\n-        Object timestamp = Hibernate.STRING.nullSafeGet(resultSet, string);\n+        Object timestamp = StandardBasicTypes.STRING.nullSafeGet(resultSet, string);\n         if (timestamp == null) {\n             return null;\n         }\n \n     public void nullSafeSet(PreparedStatement preparedStatement, Object value, int index) throws HibernateException, SQLException {\n         if (value == null) {\n-            Hibernate.STRING.nullSafeSet(preparedStatement, null, index);\n+            StandardBasicTypes.STRING.nullSafeSet(preparedStatement, null, index);\n         } else {\n             LocalTime lt = ((LocalTime) value);\n-            Hibernate.STRING.nullSafeSet(preparedStatement, lt.toString(), index);\n+            StandardBasicTypes.STRING.nullSafeSet(preparedStatement, lt.toString(), index);\n         }\n     }\n \n--- a/JodaTimeContrib/hibernate/src/main/java/org/joda/time/contrib/hibernate/PersistentLocalTimeAsTime.java\n+++ b/JodaTimeContrib/hibernate/src/main/java/org/joda/time/contrib/hibernate/PersistentLocalTimeAsTime.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2011 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import java.sql.Time;\n import java.sql.Types;\n \n-import org.hibernate.Hibernate;\n import org.hibernate.HibernateException;\n+import org.hibernate.type.StandardBasicTypes;\n import org.hibernate.usertype.EnhancedUserType;\n import org.joda.time.DateTimeZone;\n import org.joda.time.LocalTime;\n     }\n \n     public Object nullSafeGet(ResultSet resultSet, String string) throws SQLException {\n-        Object timestamp = Hibernate.TIME.nullSafeGet(resultSet, string);\n+        Object timestamp = StandardBasicTypes.TIME.nullSafeGet(resultSet, string);\n         if (timestamp == null) {\n             return null;\n         }\n \n     public void nullSafeSet(PreparedStatement preparedStatement, Object value, int index) throws HibernateException, SQLException {\n         if (value == null) {\n-            Hibernate.TIME.nullSafeSet(preparedStatement, null, index);\n+            StandardBasicTypes.TIME.nullSafeSet(preparedStatement, null, index);\n         } else {\n             LocalTime lt = ((LocalTime) value);\n             Time time = new Time(lt.getMillisOfDay());\n-            Hibernate.TIME.nullSafeSet(preparedStatement, time, index);\n+            StandardBasicTypes.TIME.nullSafeSet(preparedStatement, time, index);\n         }\n     }\n \n--- a/JodaTimeContrib/hibernate/src/main/java/org/joda/time/contrib/hibernate/PersistentLocalTimeExact.java\n+++ b/JodaTimeContrib/hibernate/src/main/java/org/joda/time/contrib/hibernate/PersistentLocalTimeExact.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2011 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import java.sql.SQLException;\n import java.sql.Types;\n \n-import org.hibernate.Hibernate;\n import org.hibernate.HibernateException;\n+import org.hibernate.type.StandardBasicTypes;\n import org.hibernate.usertype.EnhancedUserType;\n import org.joda.time.LocalTime;\n \n     }\n \n     public Object nullSafeGet(ResultSet resultSet, String string) throws SQLException {\n-        Object timestamp = Hibernate.INTEGER.nullSafeGet(resultSet, string);\n+        Object timestamp = StandardBasicTypes.INTEGER.nullSafeGet(resultSet, string);\n         if (timestamp == null) {\n             return null;\n         }\n \n     public void nullSafeSet(PreparedStatement preparedStatement, Object value, int index) throws HibernateException, SQLException {\n         if (value == null) {\n-            Hibernate.INTEGER.nullSafeSet(preparedStatement, null, index);\n+            StandardBasicTypes.INTEGER.nullSafeSet(preparedStatement, null, index);\n         } else {\n             LocalTime lt = ((LocalTime) value);\n-            Hibernate.INTEGER.nullSafeSet(preparedStatement, new Integer(lt.getMillisOfDay()), index);\n+            StandardBasicTypes.INTEGER.nullSafeSet(preparedStatement, new Integer(lt.getMillisOfDay()), index);\n         }\n     }\n \n--- a/JodaTimeContrib/hibernate/src/main/java/org/joda/time/contrib/hibernate/PersistentTimeOfDay.java\n+++ b/JodaTimeContrib/hibernate/src/main/java/org/joda/time/contrib/hibernate/PersistentTimeOfDay.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2011 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import java.sql.Time;\n import java.sql.Types;\n \n-import org.hibernate.Hibernate;\n import org.hibernate.HibernateException;\n+import org.hibernate.type.StandardBasicTypes;\n import org.hibernate.usertype.EnhancedUserType;\n import org.joda.time.DateTime;\n import org.joda.time.TimeOfDay;\n     }\n \n     public Object nullSafeGet(ResultSet resultSet, String string) throws SQLException {\n-        Object date = Hibernate.TIME.nullSafeGet(resultSet, string);\n+        Object date = StandardBasicTypes.TIME.nullSafeGet(resultSet, string);\n         if (date == null) {\n             return null;\n         }\n \n     public void nullSafeSet(PreparedStatement preparedStatement, Object value, int index) throws HibernateException, SQLException {\n         if (value == null) {\n-            Hibernate.TIME.nullSafeSet(preparedStatement, null, index);\n+            StandardBasicTypes.TIME.nullSafeSet(preparedStatement, null, index);\n         } else {\n-            Hibernate.TIME.nullSafeSet(preparedStatement,\n+            StandardBasicTypes.TIME.nullSafeSet(preparedStatement,\n                     new Time(((TimeOfDay) value).toDateTime(timeBase).getMillis()), index);\n         }\n     }\n--- a/JodaTimeContrib/hibernate/src/main/java/org/joda/time/contrib/hibernate/PersistentYearMonthDay.java\n+++ b/JodaTimeContrib/hibernate/src/main/java/org/joda/time/contrib/hibernate/PersistentYearMonthDay.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2011 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import java.sql.SQLException;\n import java.sql.Types;\n \n-import org.hibernate.Hibernate;\n import org.hibernate.HibernateException;\n+import org.hibernate.type.StandardBasicTypes;\n import org.hibernate.usertype.EnhancedUserType;\n import org.joda.time.YearMonthDay;\n \n     }\n \n     public Object nullSafeGet(ResultSet resultSet, String string) throws SQLException {\n-        Object date = Hibernate.DATE.nullSafeGet(resultSet, string);\n+        Object date = StandardBasicTypes.DATE.nullSafeGet(resultSet, string);\n         if (date == null) {\n             return null;\n         }\n \n     public void nullSafeSet(PreparedStatement preparedStatement, Object value, int index) throws HibernateException, SQLException {\n         if (value == null) {\n-            Hibernate.DATE.nullSafeSet(preparedStatement, null, index);\n+            StandardBasicTypes.DATE.nullSafeSet(preparedStatement, null, index);\n         } else {\n-            Hibernate.DATE.nullSafeSet(preparedStatement, ((YearMonthDay) value).toDateMidnight().toDate(), index);\n+            StandardBasicTypes.DATE.nullSafeSet(preparedStatement, ((YearMonthDay) value).toDateMidnight().toDate(), index);\n         }\n     }\n ", "timestamp": 1304862714, "metainfo": ""}