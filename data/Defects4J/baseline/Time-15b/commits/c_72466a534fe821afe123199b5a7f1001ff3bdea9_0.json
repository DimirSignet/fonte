{"sha": "72466a534fe821afe123199b5a7f1001ff3bdea9", "log": "Bug fix: LenientChronology might incorrectly adjust a valid hour field near DST transition  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java\n      */\n     public long set(long instant, int value) {\n         int min = getMinimumValue(instant);\n-        if (value >= min && value < getMaximumValue(instant)) {\n+        if (value >= min && value <= getMaximumValue(instant)) {\n             return super.set(instant, value);\n         }\n         return add(super.set(instant, min), value - min);\n--- a/JodaTime/src/test/org/joda/time/chrono/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestAll.java\n         suite.addTest(TestIslamicChronology.suite());\n         suite.addTest(TestJulianChronology.suite());\n         suite.addTest(TestISOChronology.suite());\n+        suite.addTest(TestLenientChronology.suite());\n         \n         return suite;\n     }\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java\n+/*\n+ *  Copyright 2001-2007 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.chrono;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+\n+/**\n+ *\n+ * @author Brian S O'Neill\n+ * @author Blair Martin\n+ */\n+public class TestLenientChronology extends TestCase {\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestLenientChronology.class);\n+    }\n+\n+    public TestLenientChronology(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+    }\n+\n+    protected void tearDown() throws Exception {\n+    }\n+\n+    public void testNearDstTransition() {\n+        // This is just a regression test. Test case provided by Blair Martin.\n+\n+        int hour = 23;\n+        DateTime dt;\n+\n+        dt = new DateTime(2006, 10, 29, hour, 0, 0, 0,\n+                          ISOChronology.getInstance(DateTimeZone.forID(\"America/Los_Angeles\")));\n+        assertEquals(hour, dt.getHourOfDay()); // OK - no LenientChronology\n+\n+        dt = new DateTime(2006, 10, 29, hour, 0, 0, 0,\n+                          LenientChronology.getInstance\n+                          (ISOChronology.getInstance(DateTimeZone.forOffsetHours(-8))));\n+        assertEquals(hour, dt.getHourOfDay()); // OK - no TZ ID\n+\n+        dt = new DateTime(2006, 10, 29, hour, 0, 0, 0,\n+                          LenientChronology.getInstance\n+                          (ISOChronology.getInstance(DateTimeZone.forID(\"America/Los_Angeles\"))));\n+\n+        assertEquals(hour, dt.getHourOfDay()); // Used to fail - hour was 22\n+    }\n+}", "timestamp": 1178596187, "metainfo": ""}