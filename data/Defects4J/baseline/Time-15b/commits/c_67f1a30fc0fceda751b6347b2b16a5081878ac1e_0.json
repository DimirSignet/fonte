{"sha": "67f1a30fc0fceda751b6347b2b16a5081878ac1e", "log": "Rework fix to ensure immutable classes by using volatile instance variables  Original fix relied on a reflection hack that isn't guaranteed to work", "commit": "\n--- a/src/main/java/org/joda/time/base/BaseDateTime.java\n+++ b/src/main/java/org/joda/time/base/BaseDateTime.java\n     private static final long serialVersionUID = -6728882245981L;\n \n     /** The millis from 1970-01-01T00:00:00Z */\n-    private final long iMillis;\n+    private volatile long iMillis;\n     /** The chronology to use */\n-    private final Chronology iChronology;\n+    private volatile Chronology iChronology;\n \n     //-----------------------------------------------------------------------\n     /**\n      * <p>\n      * All changes to the millisecond field occurs via this method.\n      * Override and block this method to make a subclass immutable.\n-     * <p>\n-     * In version 2.0 and later, this method uses reflection. This is because the\n-     * instance variable has been changed to be final to satisfy the Java Memory Model.\n-     * This only impacts subclasses that are mutable.\n      *\n      * @param instant  the milliseconds since 1970-01-01T00:00:00Z to set the datetime to\n      */\n     protected void setMillis(long instant) {\n-        instant = checkInstant(instant, iChronology);\n-        MutableHelper.setDateTimeMillis(this, instant);\n+        iMillis = checkInstant(instant, iChronology);\n     }\n \n     /**\n      * <p>\n      * All changes to the chronology field occurs via this method.\n      * Override and block this method to make a subclass immutable.\n-     * <p>\n-     * In version 2.0 and later, this method uses reflection. This is because the\n-     * instance variable has been changed to be final to satisfy the Java Memory Model.\n-     * This only impacts subclasses that are mutable.\n      *\n      * @param chronology  the chronology to set\n      */\n     protected void setChronology(Chronology chronology) {\n-        chronology = checkChronology(chronology);\n-        MutableHelper.setDateTimeChrono(this, chronology);\n+        iChronology = checkChronology(chronology);\n     }\n \n }\n--- a/src/main/java/org/joda/time/base/BaseDuration.java\n+++ b/src/main/java/org/joda/time/base/BaseDuration.java\n     private static final long serialVersionUID = 2581698638990L;\n \n     /** The duration length */\n-    private final long iMillis;\n+    private volatile long iMillis;\n \n     /**\n      * Creates a duration from the given millisecond duration.\n     //-----------------------------------------------------------------------\n     /**\n      * Sets the length of this duration in milliseconds.\n-     * <p>\n-     * In version 2.0 and later, this method uses reflection. This is because the\n-     * instance variable has been changed to be final to satisfy the Java Memory Model.\n-     * This only impacts subclasses that are mutable.\n      * \n      * @param duration  the new length of the duration\n      */\n     protected void setMillis(long duration) {\n-        MutableHelper.setDurationMillis(this, duration);\n+        iMillis = duration;\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/joda/time/base/BaseInterval.java\n+++ b/src/main/java/org/joda/time/base/BaseInterval.java\n import org.joda.time.Chronology;\n import org.joda.time.DateTimeUtils;\n import org.joda.time.MutableInterval;\n+import org.joda.time.ReadWritableInterval;\n import org.joda.time.ReadableDuration;\n import org.joda.time.ReadableInstant;\n import org.joda.time.ReadableInterval;\n     private static final long serialVersionUID = 576586928732749278L;\n \n     /** The chronology of the interval */\n-    private final Chronology iChronology;\n+    private volatile Chronology iChronology;\n     /** The start of the interval */\n-    private final long iStartMillis;\n+    private volatile long iStartMillis;\n     /** The end of the interval */\n-    private final long iEndMillis;\n+    private volatile long iEndMillis;\n \n     /**\n      * Constructs an interval from a start and end instant.\n             iChronology = (chrono != null ? chrono : input.getChronology());\n             iStartMillis = input.getStartMillis();\n             iEndMillis = input.getEndMillis();\n+        } else if (this instanceof ReadWritableInterval) {\n+            converter.setInto((ReadWritableInterval) this, interval, chrono);\n         } else {\n             MutableInterval mi = new MutableInterval();\n             converter.setInto(mi, interval, chrono);\n     //-----------------------------------------------------------------------\n     /**\n      * Sets this interval from two millisecond instants and a chronology.\n-     * <p>\n-     * In version 2.0 and later, this method uses reflection. This is because the\n-     * instance variable has been changed to be final to satisfy the Java Memory Model.\n-     * This only impacts subclasses that are mutable.\n      *\n      * @param startInstant  the start of the time interval\n      * @param endInstant  the start of the time interval\n      */\n     protected void setInterval(long startInstant, long endInstant, Chronology chrono) {\n         checkInterval(startInstant, endInstant);\n-        MutableHelper.setInterval(this, startInstant, endInstant, DateTimeUtils.getChronology(chrono));\n+        iStartMillis = startInstant;\n+        iEndMillis = endInstant;\n+        iChronology = DateTimeUtils.getChronology(chrono);\n     }\n \n }\n--- a/src/main/java/org/joda/time/base/BaseSingleFieldPeriod.java\n+++ b/src/main/java/org/joda/time/base/BaseSingleFieldPeriod.java\n     private static final long serialVersionUID = 9386874258972L;\n \n     /** The period in the units of this period. */\n-    private final int iPeriod;\n+    private volatile int iPeriod;\n \n     //-----------------------------------------------------------------------\n     /**\n     /**\n      * Sets the amount of this period.\n      * To make a subclass immutable you must declare it final, or block this method.\n-     * <p>\n-     * In version 2.0 and later, this method uses reflection. This is because the\n-     * instance variable has been changed to be final to satisfy the Java Memory Model.\n-     * This only impacts subclasses that are mutable.\n      *\n      * @param value  the period value\n      */\n     protected void setValue(int value) {\n-        MutableHelper.setSingleFieldPeriodValue(this, value);\n+        iPeriod = value;\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1308656280, "metainfo": ""}