{"sha": "1163c2a8b6db06f3142ee60241b1e4ff41b23539", "log": "Use methods and constructors more like YearMonthDay and TimeOfDay  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/LocalDate.java\n+++ b/JodaTime/src/java/org/joda/time/LocalDate.java\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Constructs an instance set to the current local time evaluated using\n-     * ISO chronology in the default zone.\n-     * <p>\n-     * Once the constructor is completed, the zone is no longer used.\n-     */\n-    public static LocalDate nowDefaultZone() {\n-        return forInstant(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());\n-    }\n-\n-    /**\n-     * Constructs an instance set to the current local time evaluated using\n-     * ISO chronology in the specified zone.\n-     * <p>\n-     * If the specified time zone is null, the default zone is used.\n-     * Once the constructor is completed, the zone is no longer used.\n-     *\n-     * @param zone  the time zone, null means default zone\n-     */\n-    public static LocalDate now(DateTimeZone zone) {\n-        return forInstant(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));\n-    }\n-\n-    /**\n-     * Constructs an instance set to the current local time evaluated using\n-     * specified chronology.\n-     * <p>\n-     * If the chronology is null, ISO chronology in the default time zone is used.\n-     * Once the constructor is completed, the zone is no longer used.\n-     *\n-     * @param chronology  the chronology, null means ISOChronology in default zone\n-     */\n-    public static LocalDate now(Chronology chronology) {\n-        return forInstant(DateTimeUtils.currentTimeMillis(), chronology);\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n      * Constructs a LocalDate from a <code>java.util.Calendar</code>\n      * using exactly the same field values avoiding any time zone effects.\n      * <p>\n      * @throws IllegalArgumentException if the calendar is null\n      * @throws IllegalArgumentException if the date is invalid for the ISO chronology\n      */\n-    public static LocalDate forFields(Calendar calendar) {\n+    public static LocalDate fromCalendarFields(Calendar calendar) {\n         if (calendar == null) {\n             throw new IllegalArgumentException(\"The calendar must not be null\");\n         }\n      * @throws IllegalArgumentException if the calendar is null\n      * @throws IllegalArgumentException if the date is invalid for the ISO chronology\n      */\n-    public static LocalDate forFields(Date date) {\n+    public static LocalDate fromDateFields(Date date) {\n         if (date == null) {\n             throw new IllegalArgumentException(\"The date must not be null\");\n         }\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Constructs an instance set to the current local time evaluated using\n+     * ISO chronology in the default zone.\n+     * <p>\n+     * Once the constructor is completed, the zone is no longer used.\n+     */\n+    public LocalDate() {\n+        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());\n+    }\n+\n+    /**\n+     * Constructs an instance set to the current local time evaluated using\n+     * ISO chronology in the specified zone.\n+     * <p>\n+     * If the specified time zone is null, the default zone is used.\n+     * Once the constructor is completed, the zone is no longer used.\n+     *\n+     * @param zone  the time zone, null means default zone\n+     */\n+    public LocalDate(DateTimeZone zone) {\n+        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));\n+    }\n+\n+    /**\n+     * Constructs an instance set to the current local time evaluated using\n+     * specified chronology.\n+     * <p>\n+     * If the chronology is null, ISO chronology in the default time zone is used.\n+     * Once the constructor is completed, the zone is no longer used.\n+     *\n+     * @param chronology  the chronology, null means ISOChronology in default zone\n+     */\n+    public LocalDate(Chronology chronology) {\n+        this(DateTimeUtils.currentTimeMillis(), chronology);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Constructs an instance set to the local time defined by the specified\n      * instant evaluated using ISO chronology in the default zone.\n      * <p>\n      *\n      * @param instant  the milliseconds from 1970-01-01T00:00:00Z\n      */\n-    public static LocalDate forInstantDefaultZone(long instant) {\n-        return forInstant(instant, ISOChronology.getInstance());\n+    public LocalDate(long instant) {\n+        this(instant, ISOChronology.getInstance());\n     }\n \n     /**\n      * @param instant  the milliseconds from 1970-01-01T00:00:00Z\n      * @param zone  the time zone, null means default zone\n      */\n-    public static LocalDate forInstant(long instant, DateTimeZone zone) {\n-        return forInstant(instant, ISOChronology.getInstance(zone));\n+    public LocalDate(long instant, DateTimeZone zone) {\n+        this(instant, ISOChronology.getInstance(zone));\n     }\n \n     /**\n      * @param instant  the milliseconds from 1970-01-01T00:00:00Z\n      * @param chronology  the chronology, null means ISOChronology in default zone\n      */\n-    public static LocalDate forInstant(long instant, Chronology chronology) {\n+    public LocalDate(long instant, Chronology chronology) {\n         chronology = DateTimeUtils.getChronology(chronology);\n+        \n         long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\n-        return new LocalDate(localMillis, chronology.withUTC());\n+        chronology = chronology.withUTC();\n+        chronology.dayOfMonth().roundFloor(localMillis);\n+        iLocalMillis = localMillis;\n+        iChronology = chronology;\n     }\n \n     //-----------------------------------------------------------------------\n      * @param zone  the time zone\n      * @throws IllegalArgumentException if the instant is invalid\n      */\n-    public static LocalDate forInstant(Object instant) {\n-        return forInstant(instant, (Chronology) null);\n+    public LocalDate(Object instant) {\n+        this(instant, (Chronology) null);\n     }\n \n     /**\n      * @param zone  the time zone\n      * @throws IllegalArgumentException if the instant is invalid\n      */\n-    public static LocalDate forInstant(Object instant, DateTimeZone zone) {\n+    public LocalDate(Object instant, DateTimeZone zone) {\n         InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n-        Chronology chrono = converter.getChronology(instant, zone);\n-        long millis = converter.getInstantMillis(instant, chrono);\n-        chrono = DateTimeUtils.getChronology(chrono);\n-        return forInstant(millis, chrono);\n+        Chronology chronology = converter.getChronology(instant, zone);\n+        long millis = converter.getInstantMillis(instant, chronology);\n+        \n+        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);\n+        chronology = chronology.withUTC();\n+        chronology.dayOfMonth().roundFloor(localMillis);\n+        iLocalMillis = localMillis;\n+        iChronology = chronology;\n     }\n \n     /**\n      * @param chronology  the chronology\n      * @throws IllegalArgumentException if the instant is invalid\n      */\n-    public static LocalDate forInstant(Object instant, Chronology chronology) {\n+    public LocalDate(Object instant, Chronology chronology) {\n         InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n         Chronology chrono = DateTimeUtils.getChronology(converter.getChronology(instant, chronology));\n         long millis = converter.getInstantMillis(instant, chronology);\n-        return forInstant(millis, chrono);\n-    }\n-\n-    /**\n-     * Constructs an instance set to the local time defined by the specified\n-     * instant evaluated using the specified local (UTC) chronology.\n-     *\n-     * @param localMillis  the local milliseconds from 1970-01-01T00:00:00\n-     * @param chronology  the UTC chronology, not null\n-     */\n-    LocalDate(long localMillis, Chronology chronology) {\n-        super();\n-        chronology.dayOfMonth().roundFloor(localMillis);\n+        \n+        long localMillis = chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);\n+        chrono = chrono.withUTC();\n+        chrono.dayOfMonth().roundFloor(localMillis);\n         iLocalMillis = localMillis;\n-        iChronology = chronology;\n+        iChronology = chrono;\n     }\n \n     //-----------------------------------------------------------------------\n      *\n      * @return this date as a datetime at midnight\n      */\n-    public DateTime toDateTimeAtMidnightDefaultZone() {\n+    public DateTime toDateTimeAtMidnight() {\n         return toDateTimeAtMidnight(null);\n     }\n \n      *\n      * @return this date as a datetime with the time as the current time\n      */\n-    public DateTime toDateTimeAtCurrentTimeDefaultZone() {\n+    public DateTime toDateTimeAtCurrentTime() {\n         return toDateTimeAtCurrentTime(null);\n     }\n \n      *\n      * @return the DateMidnight instance in the default zone\n      */\n-    public DateMidnight toDateMidnightDefaultZone() {\n+    public DateMidnight toDateMidnight() {\n         return toDateMidnight(null);\n     }\n \n      * @return the DateTime instance\n      * @throws IllegalArgumentException if the chronology of the time does not match\n      */\n-    public DateTime toDateTimeDefaultZone(LocalTime time) {\n+    public DateTime toDateTime(LocalTime time) {\n         return toDateTime(time, null);\n     }\n \n      *\n      * @return a interval over the day\n      */\n-    public Interval toIntervalDefaultZone() {\n+    public Interval toInterval() {\n         return toInterval(null);\n     }\n \n          *\n          * @return a copy of the LocalDate with the field value changed\n          */\n-        public LocalDate withRoundedFloor() {\n+        public LocalDate roundFloor() {\n             return iInstant.withLocalMillis(iField.roundFloor(iInstant.getLocalMillis()));\n         }\n         \n          *\n          * @return a copy of the LocalDate with the field value changed\n          */\n-        public LocalDate withRoundedCeiling() {\n+        public LocalDate roundCeiling() {\n             return iInstant.withLocalMillis(iField.roundCeiling(iInstant.getLocalMillis()));\n         }\n         \n          *\n          * @return a copy of the LocalDate with the field value changed\n          */\n-        public LocalDate withRoundedHalfFloor() {\n+        public LocalDate roundHalfFloor() {\n             return iInstant.withLocalMillis(iField.roundHalfFloor(iInstant.getLocalMillis()));\n         }\n         \n          *\n          * @return a copy of the LocalDate with the field value changed\n          */\n-        public LocalDate withRoundedHalfCeiling() {\n+        public LocalDate roundHalfCeiling() {\n             return iInstant.withLocalMillis(iField.roundHalfCeiling(iInstant.getLocalMillis()));\n         }\n         \n          *\n          * @return a copy of the LocalDate with the field value changed\n          */\n-        public LocalDate withRoundedHalfEven() {\n+        public LocalDate roundHalfEven() {\n             return iInstant.withLocalMillis(iField.roundHalfEven(iInstant.getLocalMillis()));\n         }\n     }\n--- a/JodaTime/src/java/org/joda/time/LocalTime.java\n+++ b/JodaTime/src/java/org/joda/time/LocalTime.java\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Constructs an instance set to the current local time evaluated using\n-     * ISO chronology in the default zone.\n-     * <p>\n-     * Once the constructor is completed, the zone is no longer used.\n-     */\n-    public static LocalTime nowDefaultZone() {\n-        return forInstant(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());\n-    }\n-\n-    /**\n-     * Constructs an instance set to the current local time evaluated using\n-     * ISO chronology in the specified zone.\n-     * <p>\n-     * If the specified time zone is null, the default zone is used.\n-     * Once the constructor is completed, the zone is no longer used.\n-     *\n-     * @param zone  the time zone, null means default zone\n-     */\n-    public static LocalTime now(DateTimeZone zone) {\n-        return forInstant(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));\n-    }\n-\n-    /**\n-     * Constructs an instance set to the current local time evaluated using\n-     * specified chronology and zone.\n-     * <p>\n-     * If the chronology is null, ISO chronology in the default time zone is used.\n-     * Once the constructor is completed, the zone is no longer used.\n-     *\n-     * @param chronology  the chronology, null means ISOChronology in default zone\n-     */\n-    public static LocalTime now(Chronology chronology) {\n-        return forInstant(DateTimeUtils.currentTimeMillis(), chronology);\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n      * Constructs a LocalTime from the specified millis of day using the\n      * ISO chronology.\n      * <p>\n      * @throws IllegalArgumentException if the calendar is null\n      * @throws IllegalArgumentException if the date is invalid for the ISO chronology\n      */\n-    public static LocalTime forFields(Calendar calendar) {\n+    public static LocalTime fromCalendarFields(Calendar calendar) {\n         if (calendar == null) {\n             throw new IllegalArgumentException(\"The calendar must not be null\");\n         }\n      * @throws IllegalArgumentException if the calendar is null\n      * @throws IllegalArgumentException if the date is invalid for the ISO chronology\n      */\n-    public static LocalTime forFields(Date date) {\n+    public static LocalTime fromDateFields(Date date) {\n         if (date == null) {\n             throw new IllegalArgumentException(\"The date must not be null\");\n         }\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Constructs an instance set to the current local time evaluated using\n+     * ISO chronology in the default zone.\n+     * <p>\n+     * Once the constructor is completed, the zone is no longer used.\n+     */\n+    public LocalTime() {\n+        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());\n+    }\n+\n+    /**\n+     * Constructs an instance set to the current local time evaluated using\n+     * ISO chronology in the specified zone.\n+     * <p>\n+     * If the specified time zone is null, the default zone is used.\n+     * Once the constructor is completed, the zone is no longer used.\n+     *\n+     * @param zone  the time zone, null means default zone\n+     */\n+    public LocalTime(DateTimeZone zone) {\n+        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));\n+    }\n+\n+    /**\n+     * Constructs an instance set to the current local time evaluated using\n+     * specified chronology and zone.\n+     * <p>\n+     * If the chronology is null, ISO chronology in the default time zone is used.\n+     * Once the constructor is completed, the zone is no longer used.\n+     *\n+     * @param chronology  the chronology, null means ISOChronology in default zone\n+     */\n+    public LocalTime(Chronology chronology) {\n+        this(DateTimeUtils.currentTimeMillis(), chronology);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Constructs an instance set to the local time defined by the specified\n      * instant evaluated using ISO chronology in the default zone.\n      * <p>\n      *\n      * @param instant  the milliseconds from 1970-01-01T00:00:00Z\n      */\n-    public static LocalTime forInstantDefaultZone(long instant) {\n-        return forInstant(instant, ISOChronology.getInstance());\n+    public LocalTime(long instant) {\n+        this(instant, ISOChronology.getInstance());\n     }\n \n     /**\n      * @param instant  the milliseconds from 1970-01-01T00:00:00Z\n      * @param zone  the time zone, null means default zone\n      */\n-    public static LocalTime forInstant(long instant, DateTimeZone zone) {\n-        return forInstant(instant, ISOChronology.getInstance(zone));\n+    public LocalTime(long instant, DateTimeZone zone) {\n+        this(instant, ISOChronology.getInstance(zone));\n     }\n \n     /**\n      * @param instant  the milliseconds from 1970-01-01T00:00:00Z\n      * @param chronology  the chronology, null means ISOChronology in default zone\n      */\n-    public static LocalTime forInstant(long instant, Chronology chronology) {\n+    public LocalTime(long instant, Chronology chronology) {\n         chronology = DateTimeUtils.getChronology(chronology);\n+        \n         long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\n-        return new LocalTime(localMillis, chronology.withUTC());\n+        chronology = chronology.withUTC();\n+        chronology.millisOfDay().get(localMillis);\n+        iLocalMillis = localMillis;\n+        iChronology = chronology;\n     }\n \n     //-----------------------------------------------------------------------\n      * @param instant  the datetime object\n      * @throws IllegalArgumentException if the instant is invalid\n      */\n-    public static LocalTime forInstant(Object instant) {\n-        return forInstant(instant, (Chronology) null);\n+    public LocalTime(Object instant) {\n+        this(instant, (Chronology) null);\n     }\n \n     /**\n      * @param zone  the time zone\n      * @throws IllegalArgumentException if the instant is invalid\n      */\n-    public static LocalTime forInstant(Object instant, DateTimeZone zone) {\n+    public LocalTime(Object instant, DateTimeZone zone) {\n         InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n-        Chronology chrono = converter.getChronology(instant, zone);\n-        long millis = converter.getInstantMillis(instant, chrono);\n-        chrono = DateTimeUtils.getChronology(chrono);\n-        return forInstant(millis, chrono);\n+        Chronology chronology = converter.getChronology(instant, zone);\n+        long millis = converter.getInstantMillis(instant, chronology);\n+        chronology = DateTimeUtils.getChronology(chronology);\n+        \n+        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);\n+        chronology = chronology.withUTC();\n+        chronology.millisOfDay().get(localMillis);\n+        iLocalMillis = localMillis;\n+        iChronology = chronology;\n     }\n \n     /**\n      * @param chronology  the chronology\n      * @throws IllegalArgumentException if the instant is invalid\n      */\n-    public static LocalTime forInstant(Object instant, Chronology chronology) {\n+    public LocalTime(Object instant, Chronology chronology) {\n         InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n         Chronology chrono = DateTimeUtils.getChronology(converter.getChronology(instant, chronology));\n         long millis = converter.getInstantMillis(instant, chronology);\n-        return forInstant(millis, chrono);\n-    }\n-\n-    /**\n-     * Constructs an instance set to the local time defined by the specified\n-     * instant evaluated using the specified local (UTC) chronology.\n-     *\n-     * @param localMillis  the local milliseconds from 1970-01-01T00:00:00\n-     * @param chronology  the UTC chronology, not null\n-     */\n-    LocalTime(long localMillis, Chronology chronology) {\n-        super();\n-        chronology.millisOfDay().get(localMillis);\n+        \n+        long localMillis = chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);\n+        chrono = chrono.withUTC();\n+        chrono.millisOfDay().get(localMillis);\n         iLocalMillis = localMillis;\n-        iChronology = chronology;\n+        iChronology = chrono;\n     }\n \n     //-----------------------------------------------------------------------\n      *\n      * @return this time as a datetime using todays date\n      */\n-    public DateTime toDateTimeTodayDefaultZone() {\n+    public DateTime toDateTimeToday() {\n         return toDateTimeToday(null);\n     }\n \n          *\n          * @return a copy of the LocalTime with the field value changed\n          */\n-        public LocalTime withRoundedFloor() {\n+        public LocalTime roundFloor() {\n             return iInstant.withLocalMillis(iField.roundFloor(iInstant.getLocalMillis()));\n         }\n         \n          *\n          * @return a copy of the LocalTime with the field value changed\n          */\n-        public LocalTime withRoundedCeiling() {\n+        public LocalTime roundCeiling() {\n             return iInstant.withLocalMillis(iField.roundCeiling(iInstant.getLocalMillis()));\n         }\n         \n          *\n          * @return a copy of the LocalTime with the field value changed\n          */\n-        public LocalTime withRoundedHalfFloor() {\n+        public LocalTime roundHalfFloor() {\n             return iInstant.withLocalMillis(iField.roundHalfFloor(iInstant.getLocalMillis()));\n         }\n         \n          *\n          * @return a copy of the LocalTime with the field value changed\n          */\n-        public LocalTime withRoundedHalfCeiling() {\n+        public LocalTime roundHalfCeiling() {\n             return iInstant.withLocalMillis(iField.roundHalfCeiling(iInstant.getLocalMillis()));\n         }\n         \n          *\n          * @return a copy of the LocalTime with the field value changed\n          */\n-        public LocalTime withRoundedHalfEven() {\n+        public LocalTime roundHalfEven() {\n             return iInstant.withLocalMillis(iField.roundHalfEven(iInstant.getLocalMillis()));\n         }\n     }\n--- a/JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java\n \n     //-----------------------------------------------------------------------\n     public void testGet_DateTimeFieldType() {\n-        LocalDate test = LocalDate.nowDefaultZone();\n+        LocalDate test = new LocalDate();\n         assertEquals(1970, test.get(DateTimeFieldType.year()));\n         assertEquals(6, test.get(DateTimeFieldType.monthOfYear()));\n         assertEquals(9, test.get(DateTimeFieldType.dayOfMonth()));\n     }\n \n     public void testSize() {\n-        LocalDate test = LocalDate.nowDefaultZone();\n+        LocalDate test = new LocalDate();\n         assertEquals(3, test.size());\n     }\n \n     public void testGetFieldType_int() {\n-        LocalDate test = LocalDate.now(COPTIC_PARIS);\n+        LocalDate test = new LocalDate(COPTIC_PARIS);\n         assertSame(DateTimeFieldType.year(), test.getFieldType(0));\n         assertSame(DateTimeFieldType.monthOfYear(), test.getFieldType(1));\n         assertSame(DateTimeFieldType.dayOfMonth(), test.getFieldType(2));\n     }\n \n     public void testGetFieldTypes() {\n-        LocalDate test = LocalDate.now(COPTIC_PARIS);\n+        LocalDate test = new LocalDate(COPTIC_PARIS);\n         DateTimeFieldType[] fields = test.getFieldTypes();\n         assertSame(DateTimeFieldType.year(), fields[0]);\n         assertSame(DateTimeFieldType.monthOfYear(), fields[1]);\n     }\n \n     public void testGetField_int() {\n-        LocalDate test = LocalDate.now(COPTIC_PARIS);\n+        LocalDate test = new LocalDate(COPTIC_PARIS);\n         assertSame(COPTIC_UTC.year(), test.getField(0));\n         assertSame(COPTIC_UTC.monthOfYear(), test.getField(1));\n         assertSame(COPTIC_UTC.dayOfMonth(), test.getField(2));\n     }\n \n     public void testGetFields() {\n-        LocalDate test = LocalDate.now(COPTIC_PARIS);\n+        LocalDate test = new LocalDate(COPTIC_PARIS);\n         DateTimeField[] fields = test.getFields();\n         assertSame(COPTIC_UTC.year(), fields[0]);\n         assertSame(COPTIC_UTC.monthOfYear(), fields[1]);\n     }\n \n     public void testGetValue_int() {\n-        LocalDate test = LocalDate.nowDefaultZone();\n+        LocalDate test = new LocalDate();\n         assertEquals(1970, test.getValue(0));\n         assertEquals(6, test.getValue(1));\n         assertEquals(9, test.getValue(2));\n     }\n \n     public void testGetValues() {\n-        LocalDate test = LocalDate.nowDefaultZone();\n+        LocalDate test = new LocalDate();\n         int[] values = test.getValues();\n         assertEquals(1970, values[0]);\n         assertEquals(6, values[1]);\n     }\n \n     public void testIsSupported_DateTimeFieldType() {\n-        LocalDate test = LocalDate.now(COPTIC_PARIS);\n+        LocalDate test = new LocalDate(COPTIC_PARIS);\n         assertEquals(true, test.isSupported(DateTimeFieldType.year()));\n         assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear()));\n         assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth()));\n     public void testToDateTimeAtMidnight() {\n         LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);\n         \n-        DateTime test = base.toDateTimeAtMidnightDefaultZone();\n+        DateTime test = base.toDateTimeAtMidnight();\n         check(base, 2005, 6, 9);\n         assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test);\n     }\n         DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9);\n         DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n         \n-        DateTime test = base.toDateTimeAtCurrentTimeDefaultZone();\n+        DateTime test = base.toDateTimeAtCurrentTime();\n         check(base, 2005, 6, 9);\n         DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON);\n         expected = expected.year().setCopy(2005);\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testToDateTimeDefaultZone_LocalTime() {\n+    public void testToDateTime_LocalTime() {\n         LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n         LocalTime tod = new LocalTime(12, 13, 14, 15, COPTIC_TOKYO);\n         \n-        DateTime test = base.toDateTimeDefaultZone(tod);\n+        DateTime test = base.toDateTime(tod);\n         check(base, 2005, 6, 9);\n         DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_LONDON);\n         assertEquals(expected, test);\n     }\n \n-    public void testToDateTimeDefaultZone_nullLocalTime() {\n+    public void testToDateTime_nullLocalTime() {\n         LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n         long now = new DateTime(2004, 5, 8, 12, 13, 14, 15, COPTIC_LONDON).getMillis();\n         DateTimeUtils.setCurrentMillisFixed(now);\n         \n-        DateTime test = base.toDateTimeDefaultZone((LocalTime) null);\n+        DateTime test = base.toDateTime((LocalTime) null);\n         check(base, 2005, 6, 9);\n         DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_LONDON);\n         assertEquals(expected, test);\n     public void testToDateMidnight() {\n         LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);\n         \n-        DateMidnight test = base.toDateMidnightDefaultZone();\n+        DateMidnight test = base.toDateMidnight();\n         check(base, 2005, 6, 9);\n         assertEquals(new DateMidnight(2005, 6, 9, COPTIC_LONDON), test);\n     }\n     //-----------------------------------------------------------------------\n     public void testToInterval() {\n         LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n-        Interval test = base.toIntervalDefaultZone();\n-        check(base, 2005, 6, 9);\n-        DateTime start = base.toDateTimeAtMidnightDefaultZone();\n+        Interval test = base.toInterval();\n+        check(base, 2005, 6, 9);\n+        DateTime start = base.toDateTimeAtMidnight();\n         DateTime end = start.plus(Period.days(1));\n         Interval expected = new Interval(start, end);\n         assertEquals(expected, test);\n--- a/JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testFactory_ForCalendarFields() throws Exception {\n+    public void testFactory_FromCalendarFields() throws Exception {\n         GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n         cal.set(Calendar.MILLISECOND, 7);\n         LocalDate expected = new LocalDate(1970, 2, 3);\n-        assertEquals(expected, LocalDate.forFields(cal));\n-        try {\n-            LocalDate.forFields((Calendar) null);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testFactory_ForDateFields() throws Exception {\n+        assertEquals(expected, LocalDate.fromCalendarFields(cal));\n+        try {\n+            LocalDate.fromCalendarFields((Calendar) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_FromDateFields() throws Exception {\n         GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n         cal.set(Calendar.MILLISECOND, 7);\n         LocalDate expected = new LocalDate(1970, 2, 3);\n-        assertEquals(expected, LocalDate.forFields(cal.getTime()));\n-        try {\n-            LocalDate.forFields((Date) null);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testFactory_nowDefaultZone() throws Throwable {\n-        LocalDate test = LocalDate.nowDefaultZone();\n-        assertEquals(ISO_UTC, test.getChronology());\n-        assertEquals(1970, test.getYear());\n-        assertEquals(6, test.getMonthOfYear());\n-        assertEquals(9, test.getDayOfMonth());\n-    }\n-\n-    public void testFactory_now_DateTimeZone() throws Throwable {\n+        assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));\n+        try {\n+            LocalDate.fromDateFields((Date) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor() throws Throwable {\n+        LocalDate test = new LocalDate();\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_DateTimeZone() throws Throwable {\n         DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON);\n         DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n         // 23:59 in London is 00:59 the following day in Paris\n         \n-        LocalDate test = LocalDate.now(LONDON);\n+        LocalDate test = new LocalDate(LONDON);\n         assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(2005, test.getYear());\n         assertEquals(6, test.getMonthOfYear());\n         assertEquals(8, test.getDayOfMonth());\n         \n-        test = LocalDate.now(PARIS);\n+        test = new LocalDate(PARIS);\n         assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(2005, test.getYear());\n         assertEquals(6, test.getMonthOfYear());\n         assertEquals(9, test.getDayOfMonth());\n     }\n \n-    public void testFactory_now_nullDateTimeZone() throws Throwable {\n+    public void testConstructor_nullDateTimeZone() throws Throwable {\n         DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON);\n         DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n         // 23:59 in London is 00:59 the following day in Paris\n         \n-        LocalDate test = LocalDate.now((DateTimeZone) null);\n+        LocalDate test = new LocalDate((DateTimeZone) null);\n         assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(2005, test.getYear());\n         assertEquals(6, test.getMonthOfYear());\n         assertEquals(8, test.getDayOfMonth());\n     }\n \n-    public void testFactory_now_Chronology() throws Throwable {\n-        LocalDate test = LocalDate.now(GREGORIAN_PARIS);\n-        assertEquals(GREGORIAN_UTC, test.getChronology());\n-        assertEquals(1970, test.getYear());\n-        assertEquals(6, test.getMonthOfYear());\n-        assertEquals(9, test.getDayOfMonth());\n-    }\n-\n-    public void testFactory_now_nullChronology() throws Throwable {\n-        LocalDate test = LocalDate.now((Chronology) null);\n-        assertEquals(ISO_UTC, test.getChronology());\n-        assertEquals(1970, test.getYear());\n-        assertEquals(6, test.getMonthOfYear());\n-        assertEquals(9, test.getDayOfMonth());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testFactory_forInstantDefaultZone_long1() throws Throwable {\n-        LocalDate test = LocalDate.forInstantDefaultZone(TEST_TIME1);\n-        assertEquals(ISO_UTC, test.getChronology());\n-        assertEquals(1970, test.getYear());\n-        assertEquals(4, test.getMonthOfYear());\n-        assertEquals(6, test.getDayOfMonth());\n-    }\n-\n-    public void testFactory_forInstantDefaultZone_long2() throws Throwable {\n-        LocalDate test = LocalDate.forInstantDefaultZone(TEST_TIME2);\n+    public void testConstructor_Chronology() throws Throwable {\n+        LocalDate test = new LocalDate(GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_nullChronology() throws Throwable {\n+        LocalDate test = new LocalDate((Chronology) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long1() throws Throwable {\n+        LocalDate test = new LocalDate(TEST_TIME1);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_long2() throws Throwable {\n+        LocalDate test = new LocalDate(TEST_TIME2);\n         assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(1971, test.getYear());\n         assertEquals(5, test.getMonthOfYear());\n         assertEquals(7, test.getDayOfMonth());\n     }\n \n-    public void testFactory_forInstant_long1_DateTimeZone() throws Throwable {\n-        LocalDate test = LocalDate.forInstant(TEST_TIME1, PARIS);\n-        assertEquals(ISO_UTC, test.getChronology());\n-        assertEquals(1970, test.getYear());\n-        assertEquals(4, test.getMonthOfYear());\n-        assertEquals(6, test.getDayOfMonth());\n-    }\n-\n-    public void testFactory_forInstant_long2_DateTimeZone() throws Throwable {\n-        LocalDate test = LocalDate.forInstant(TEST_TIME2, PARIS);\n+    public void testConstructor_long1_DateTimeZone() throws Throwable {\n+        LocalDate test = new LocalDate(TEST_TIME1, PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_long2_DateTimeZone() throws Throwable {\n+        LocalDate test = new LocalDate(TEST_TIME2, PARIS);\n         assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(1971, test.getYear());\n         assertEquals(5, test.getMonthOfYear());\n         assertEquals(7, test.getDayOfMonth());\n     }\n \n-    public void testFactory_forInstant_long_nullDateTimeZone() throws Throwable {\n-        LocalDate test = LocalDate.forInstant(TEST_TIME1, (DateTimeZone) null);\n-        assertEquals(ISO_UTC, test.getChronology());\n-        assertEquals(1970, test.getYear());\n-        assertEquals(4, test.getMonthOfYear());\n-        assertEquals(6, test.getDayOfMonth());\n-    }\n-\n-    public void testFactory_forInstant_long1_Chronology() throws Throwable {\n-        LocalDate test = LocalDate.forInstant(TEST_TIME1, GREGORIAN_PARIS);\n-        assertEquals(GREGORIAN_UTC, test.getChronology());\n-        assertEquals(1970, test.getYear());\n-        assertEquals(4, test.getMonthOfYear());\n-        assertEquals(6, test.getDayOfMonth());\n-    }\n-\n-    public void testFactory_forInstant_long2_Chronology() throws Throwable {\n-        LocalDate test = LocalDate.forInstant(TEST_TIME2, GREGORIAN_PARIS);\n+    public void testConstructor_long_nullDateTimeZone() throws Throwable {\n+        LocalDate test = new LocalDate(TEST_TIME1, (DateTimeZone) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_long1_Chronology() throws Throwable {\n+        LocalDate test = new LocalDate(TEST_TIME1, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_long2_Chronology() throws Throwable {\n+        LocalDate test = new LocalDate(TEST_TIME2, GREGORIAN_PARIS);\n         assertEquals(GREGORIAN_UTC, test.getChronology());\n         assertEquals(1971, test.getYear());\n         assertEquals(5, test.getMonthOfYear());\n         assertEquals(7, test.getDayOfMonth());\n     }\n \n-    public void testFactory_forInstant_long_nullChronology() throws Throwable {\n-        LocalDate test = LocalDate.forInstant(TEST_TIME1, (Chronology) null);\n-        assertEquals(ISO_UTC, test.getChronology());\n-        assertEquals(1970, test.getYear());\n-        assertEquals(4, test.getMonthOfYear());\n-        assertEquals(6, test.getDayOfMonth());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testFactory_forInstant_Object1() throws Throwable {\n-        Date date = new Date(TEST_TIME1);\n-        LocalDate test = LocalDate.forInstant(date);\n-        assertEquals(ISO_UTC, test.getChronology());\n-        assertEquals(1970, test.getYear());\n-        assertEquals(4, test.getMonthOfYear());\n-        assertEquals(6, test.getDayOfMonth());\n-    }\n-\n-    public void testFactory_forInstant_nullObject() throws Throwable {\n-        LocalDate test = LocalDate.forInstant((Object) null);\n-        assertEquals(ISO_UTC, test.getChronology());\n-        assertEquals(1970, test.getYear());\n-        assertEquals(6, test.getMonthOfYear());\n-        assertEquals(9, test.getDayOfMonth());\n-    }\n-\n-    public void testFactory_forInstant_Object_DateTimeZone() throws Throwable {\n-        Date date = new Date(TEST_TIME1);\n-        LocalDate test = LocalDate.forInstant(date, PARIS);\n-        assertEquals(ISO_UTC, test.getChronology());\n-        assertEquals(1970, test.getYear());\n-        assertEquals(4, test.getMonthOfYear());\n-        assertEquals(6, test.getDayOfMonth());\n-    }\n-\n-    public void testFactory_forInstant_nullObject_DateTimeZone() throws Throwable {\n-        LocalDate test = LocalDate.forInstant((Object) null, PARIS);\n-        assertEquals(ISO_UTC, test.getChronology());\n-        assertEquals(1970, test.getYear());\n-        assertEquals(6, test.getMonthOfYear());\n-        assertEquals(9, test.getDayOfMonth());\n-    }\n-\n-    public void testFactory_Object_nullDateTimeZone() throws Throwable {\n-        Date date = new Date(TEST_TIME1);\n-        LocalDate test = LocalDate.forInstant(date, (DateTimeZone) null);\n-        assertEquals(ISO_UTC, test.getChronology());\n-        assertEquals(1970, test.getYear());\n-        assertEquals(4, test.getMonthOfYear());\n-        assertEquals(6, test.getDayOfMonth());\n-    }\n-\n-    public void testFactory_nullObject_nullDateTimeZone() throws Throwable {\n-        LocalDate test = LocalDate.forInstant((Object) null, (DateTimeZone) null);\n-        assertEquals(ISO_UTC, test.getChronology());\n-        assertEquals(1970, test.getYear());\n-        assertEquals(6, test.getMonthOfYear());\n-        assertEquals(9, test.getDayOfMonth());\n-    }\n-\n-    public void testFactory_forInstant_Object_Chronology() throws Throwable {\n-        Date date = new Date(TEST_TIME1);\n-        LocalDate test = LocalDate.forInstant(date, GREGORIAN_PARIS);\n-        assertEquals(GREGORIAN_UTC, test.getChronology());\n-        assertEquals(1970, test.getYear());\n-        assertEquals(4, test.getMonthOfYear());\n-        assertEquals(6, test.getDayOfMonth());\n-    }\n-\n-    public void testFactory_forInstant_nullObject_Chronology() throws Throwable {\n-        LocalDate test = LocalDate.forInstant((Object) null, GREGORIAN_PARIS);\n-        assertEquals(GREGORIAN_UTC, test.getChronology());\n-        assertEquals(1970, test.getYear());\n-        assertEquals(6, test.getMonthOfYear());\n-        assertEquals(9, test.getDayOfMonth());\n-    }\n-\n-    public void testFactory_Object_nullChronology() throws Throwable {\n-        Date date = new Date(TEST_TIME1);\n-        LocalDate test = LocalDate.forInstant(date, (Chronology) null);\n-        assertEquals(ISO_UTC, test.getChronology());\n-        assertEquals(1970, test.getYear());\n-        assertEquals(4, test.getMonthOfYear());\n-        assertEquals(6, test.getDayOfMonth());\n-    }\n-\n-    public void testFactory_nullObject_nullChronology() throws Throwable {\n-        LocalDate test = LocalDate.forInstant((Object) null, (Chronology) null);\n+    public void testConstructor_long_nullChronology() throws Throwable {\n+        LocalDate test = new LocalDate(TEST_TIME1, (Chronology) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_Object1() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        LocalDate test = new LocalDate(date);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_nullObject() throws Throwable {\n+        LocalDate test = new LocalDate((Object) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_Object_DateTimeZone() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        LocalDate test = new LocalDate(date, PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_nullObject_DateTimeZone() throws Throwable {\n+        LocalDate test = new LocalDate((Object) null, PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_Object_nullDateTimeZone() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        LocalDate test = new LocalDate(date, (DateTimeZone) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_nullObject_nullDateTimeZone() throws Throwable {\n+        LocalDate test = new LocalDate((Object) null, (DateTimeZone) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_Object_Chronology() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        LocalDate test = new LocalDate(date, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_nullObject_Chronology() throws Throwable {\n+        LocalDate test = new LocalDate((Object) null, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_Object_nullChronology() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        LocalDate test = new LocalDate(date, (Chronology) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_nullObject_nullChronology() throws Throwable {\n+        LocalDate test = new LocalDate((Object) null, (Chronology) null);\n         assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(1970, test.getYear());\n         assertEquals(6, test.getMonthOfYear());\n--- a/JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java\n         DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9);\n         DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n         \n-        DateTime test = base.toDateTimeTodayDefaultZone();\n+        DateTime test = base.toDateTimeToday();\n         check(base, 10, 20, 30, 40);\n         DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON);\n         expected = expected.hourOfDay().setCopy(10);\n--- a/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testFactory_ForFields_Calendar() throws Exception {\n+    public void testFactory_FromCalendarFields_Calendar() throws Exception {\n         GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n         cal.set(Calendar.MILLISECOND, 7);\n         LocalTime expected = new LocalTime(4, 5, 6, 7);\n-        assertEquals(expected, LocalTime.forFields(cal));\n-        try {\n-            LocalTime.forFields((Calendar) null);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testFactory_ForFields_Date() throws Exception {\n+        assertEquals(expected, LocalTime.fromCalendarFields(cal));\n+        try {\n+            LocalTime.fromCalendarFields((Calendar) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_FromDateFields_Date() throws Exception {\n         GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n         cal.set(Calendar.MILLISECOND, 7);\n         LocalTime expected = new LocalTime(4, 5, 6, 7);\n-        assertEquals(expected, LocalTime.forFields(cal.getTime()));\n-        try {\n-            LocalTime.forFields((Date) null);\n+        assertEquals(expected, LocalTime.fromDateFields(cal.getTime()));\n+        try {\n+            LocalTime.fromDateFields((Date) null);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testFactory_nowDefaultZone() throws Throwable {\n-        LocalTime test = LocalTime.nowDefaultZone();\n-        assertEquals(ISO_UTC, test.getChronology());\n-        assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());\n-        assertEquals(20, test.getMinuteOfHour());\n-        assertEquals(30, test.getSecondOfMinute());\n-        assertEquals(40, test.getMillisOfSecond());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testFactory_now_DateTimeZone() throws Throwable {\n+    public void testConstructor() throws Throwable {\n+        LocalTime test = new LocalTime();\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_DateTimeZone() throws Throwable {\n         DateTime dt = new DateTime(2005, 6, 8, 23, 59, 30, 40, LONDON);\n         DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n         // 23:59 in London is 00:59 the following day in Paris\n         \n-        LocalTime test = LocalTime.now(LONDON);\n+        LocalTime test = new LocalTime(LONDON);\n         assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(23, test.getHourOfDay());\n         assertEquals(59, test.getMinuteOfHour());\n         assertEquals(30, test.getSecondOfMinute());\n         assertEquals(40, test.getMillisOfSecond());\n         \n-        test = LocalTime.now(PARIS);\n+        test = new LocalTime(PARIS);\n         assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(0, test.getHourOfDay());\n         assertEquals(59, test.getMinuteOfHour());\n         assertEquals(40, test.getMillisOfSecond());\n     }\n \n-    public void testFactory_now_nullDateTimeZone() throws Throwable {\n+    public void testConstructor_nullDateTimeZone() throws Throwable {\n         DateTime dt = new DateTime(2005, 6, 8, 23, 59, 30, 40, LONDON);\n         DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n         // 23:59 in London is 00:59 the following day in Paris\n         \n-        LocalTime test = LocalTime.now((DateTimeZone) null);\n+        LocalTime test = new LocalTime((DateTimeZone) null);\n         assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(23, test.getHourOfDay());\n         assertEquals(59, test.getMinuteOfHour());\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testFactory_now_Chronology() throws Throwable {\n-        LocalTime test = LocalTime.now(JULIAN_LONDON);\n-        assertEquals(JULIAN_UTC, test.getChronology());\n-        assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());\n-        assertEquals(20, test.getMinuteOfHour());\n-        assertEquals(30, test.getSecondOfMinute());\n-        assertEquals(40, test.getMillisOfSecond());\n-    }\n-\n-    public void testFactory_now_nullChronology() throws Throwable {\n-        LocalTime test = LocalTime.now((Chronology) null);\n-        assertEquals(ISO_UTC, test.getChronology());\n-        assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());\n-        assertEquals(20, test.getMinuteOfHour());\n-        assertEquals(30, test.getSecondOfMinute());\n-        assertEquals(40, test.getMillisOfSecond());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testFactory_forInstantDefaultZone_long1() throws Throwable {\n-        LocalTime test = LocalTime.forInstantDefaultZone(TEST_TIME1);\n-        assertEquals(ISO_UTC, test.getChronology());\n-        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());\n-        assertEquals(2, test.getMinuteOfHour());\n-        assertEquals(3, test.getSecondOfMinute());\n-        assertEquals(4, test.getMillisOfSecond());\n-    }\n-\n-    public void testFactory_forInstantDefaultZone_long2() throws Throwable {\n-        LocalTime test = LocalTime.forInstantDefaultZone(TEST_TIME2);\n+    public void testConstructor_Chronology() throws Throwable {\n+        LocalTime test = new LocalTime(JULIAN_LONDON);\n+        assertEquals(JULIAN_UTC, test.getChronology());\n+        assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_nullChronology() throws Throwable {\n+        LocalTime test = new LocalTime((Chronology) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long1() throws Throwable {\n+        LocalTime test = new LocalTime(TEST_TIME1);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_long2() throws Throwable {\n+        LocalTime test = new LocalTime(TEST_TIME2);\n         assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(5 + OFFSET_LONDON, test.getHourOfDay());\n         assertEquals(6, test.getMinuteOfHour());\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testFactory_forInstant_long_DateTimeZone() throws Throwable {\n-        LocalTime test = LocalTime.forInstant(TEST_TIME1, PARIS);\n+    public void testConstructor_long_DateTimeZone() throws Throwable {\n+        LocalTime test = new LocalTime(TEST_TIME1, PARIS);\n         assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(1 + OFFSET_PARIS, test.getHourOfDay());\n         assertEquals(2, test.getMinuteOfHour());\n         assertEquals(4, test.getMillisOfSecond());\n     }\n \n-    public void testFactory_forInstant_long_nullDateTimeZone() throws Throwable {\n-        LocalTime test = LocalTime.forInstant(TEST_TIME1, (DateTimeZone) null);\n-        assertEquals(ISO_UTC, test.getChronology());\n-        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());\n-        assertEquals(2, test.getMinuteOfHour());\n-        assertEquals(3, test.getSecondOfMinute());\n-        assertEquals(4, test.getMillisOfSecond());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testFactory_forInstant_long1_Chronology() throws Throwable {\n-        LocalTime test = LocalTime.forInstant(TEST_TIME1, JULIAN_PARIS);\n+    public void testConstructor_long_nullDateTimeZone() throws Throwable {\n+        LocalTime test = new LocalTime(TEST_TIME1, (DateTimeZone) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long1_Chronology() throws Throwable {\n+        LocalTime test = new LocalTime(TEST_TIME1, JULIAN_PARIS);\n         assertEquals(JULIAN_UTC, test.getChronology());\n         assertEquals(1 + OFFSET_PARIS, test.getHourOfDay());\n         assertEquals(2, test.getMinuteOfHour());\n         assertEquals(4, test.getMillisOfSecond());\n     }\n \n-    public void testFactory_forInstant_long2_Chronology() throws Throwable {\n-        LocalTime test = LocalTime.forInstant(TEST_TIME2, JULIAN_LONDON);\n+    public void testConstructor_long2_Chronology() throws Throwable {\n+        LocalTime test = new LocalTime(TEST_TIME2, JULIAN_LONDON);\n         assertEquals(JULIAN_UTC, test.getChronology());\n         assertEquals(5 + OFFSET_LONDON, test.getHourOfDay());\n         assertEquals(6, test.getMinuteOfHour());\n         assertEquals(8, test.getMillisOfSecond());\n     }\n \n-    public void testFactory_forInstant_long_nullChronology() throws Throwable {\n-        LocalTime test = LocalTime.forInstant(TEST_TIME1, (Chronology) null);\n-        assertEquals(ISO_UTC, test.getChronology());\n-        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());\n-        assertEquals(2, test.getMinuteOfHour());\n-        assertEquals(3, test.getSecondOfMinute());\n-        assertEquals(4, test.getMillisOfSecond());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testFactory_forInstant_Object1() throws Throwable {\n+    public void testConstructor_long_nullChronology() throws Throwable {\n+        LocalTime test = new LocalTime(TEST_TIME1, (Chronology) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_Object1() throws Throwable {\n         Date date = new Date(TEST_TIME1);\n-        LocalTime test = LocalTime.forInstant(date);\n-        assertEquals(ISO_UTC, test.getChronology());\n-        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());\n-        assertEquals(2, test.getMinuteOfHour());\n-        assertEquals(3, test.getSecondOfMinute());\n-        assertEquals(4, test.getMillisOfSecond());\n-    }\n-\n-    public void testFactory_forInstant_Object2() throws Throwable {\n+        LocalTime test = new LocalTime(date);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_Object2() throws Throwable {\n         Calendar cal = new GregorianCalendar();\n         cal.setTime(new Date(TEST_TIME1));\n-        LocalTime test = LocalTime.forInstant(cal);\n+        LocalTime test = new LocalTime(cal);\n         assertEquals(GJChronology.getInstanceUTC(), test.getChronology());\n         assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());\n         assertEquals(2, test.getMinuteOfHour());\n         assertEquals(4, test.getMillisOfSecond());\n     }\n \n-    public void testFactory_forInstant_nullObject() throws Throwable {\n-        LocalTime test = LocalTime.forInstant((Object) null);\n-        assertEquals(ISO_UTC, test.getChronology());\n-        assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());\n-        assertEquals(20, test.getMinuteOfHour());\n-        assertEquals(30, test.getSecondOfMinute());\n-        assertEquals(40, test.getMillisOfSecond());\n-    }\n-\n-//    public void testFactory_forInstant_localTimeObject() throws Throwable {\n-//        LocalTime base = new LocalTime(10, 20, 30, 40, CopticChronology.getInstance(PARIS));\n-//        LocalTime test = LocalTime.forInstant(base);\n-//        assertEquals(CopticChronology.getInstanceUTC(), test.getChronology());\n-//        assertEquals(10, test.getHourOfDay());\n-//        assertEquals(20, test.getMinuteOfHour());\n-//        assertEquals(30, test.getSecondOfMinute());\n-//        assertEquals(40, test.getMillisOfSecond());\n-//    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testFactory_forInstant_Object1_Chronology() throws Throwable {\n+    public void testConstructor_nullObject() throws Throwable {\n+        LocalTime test = new LocalTime((Object) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_Object1_DateTimeZone() throws Throwable {\n         Date date = new Date(TEST_TIME1);\n-        LocalTime test = LocalTime.forInstant(date, JULIAN_LONDON);\n-        assertEquals(JULIAN_UTC, test.getChronology());\n-        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());\n-        assertEquals(2, test.getMinuteOfHour());\n-        assertEquals(3, test.getSecondOfMinute());\n-        assertEquals(4, test.getMillisOfSecond());\n-    }\n-\n-    public void testFactory_forInstant_Object2_Chronology() throws Throwable {\n-        LocalTime test = LocalTime.forInstant(\"T10:20\");\n+        LocalTime test = new LocalTime(date, PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1 + OFFSET_PARIS, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_Object2_DateTimeZone() throws Throwable {\n+        LocalTime test = new LocalTime(\"T10:20\");\n         assertEquals(10, test.getHourOfDay());\n         assertEquals(20, test.getMinuteOfHour());\n         assertEquals(0, test.getSecondOfMinute());\n         assertEquals(0, test.getMillisOfSecond());\n         \n         try {\n-            LocalTime.forInstant(\"T1020\");\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-    }\n-\n-    public void testFactory_forInstant_nullObject_Chronology() throws Throwable {\n-        LocalTime test = LocalTime.forInstant((Object) null, JULIAN_LONDON);\n-        assertEquals(JULIAN_UTC, test.getChronology());\n-        assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());\n-        assertEquals(20, test.getMinuteOfHour());\n-        assertEquals(30, test.getSecondOfMinute());\n-        assertEquals(40, test.getMillisOfSecond());\n-    }\n-\n-    public void testFactory_forInstant_Object_nullChronology() throws Throwable {\n+            new LocalTime(\"T1020\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_nullObject_DateTimeZone() throws Throwable {\n+        LocalTime test = new LocalTime((Object) null, PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10 + OFFSET_PARIS, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_Object_nullDateTimeZone() throws Throwable {\n         Date date = new Date(TEST_TIME1);\n-        LocalTime test = LocalTime.forInstant(date, (Chronology) null);\n-        assertEquals(ISO_UTC, test.getChronology());\n-        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());\n-        assertEquals(2, test.getMinuteOfHour());\n-        assertEquals(3, test.getSecondOfMinute());\n-        assertEquals(4, test.getMillisOfSecond());\n-    }\n-\n-    public void testFactory_forInstant_nullObject_nullChronology() throws Throwable {\n-        LocalTime test = LocalTime.forInstant((Object) null, (Chronology) null);\n+        LocalTime test = new LocalTime(date, (DateTimeZone) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_nullObject_nullDateTimeZone() throws Throwable {\n+        LocalTime test = new LocalTime((Object) null, (DateTimeZone) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_Object1_Chronology() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        LocalTime test = new LocalTime(date, JULIAN_LONDON);\n+        assertEquals(JULIAN_UTC, test.getChronology());\n+        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_Object2_Chronology() throws Throwable {\n+        LocalTime test = new LocalTime(\"T10:20\");\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+        \n+        try {\n+            new LocalTime(\"T1020\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_nullObject_Chronology() throws Throwable {\n+        LocalTime test = new LocalTime((Object) null, JULIAN_LONDON);\n+        assertEquals(JULIAN_UTC, test.getChronology());\n+        assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_Object_nullChronology() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        LocalTime test = new LocalTime(date, (Chronology) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_nullObject_nullChronology() throws Throwable {\n+        LocalTime test = new LocalTime((Object) null, (Chronology) null);\n         assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());\n         assertEquals(20, test.getMinuteOfHour());\n--- a/JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java\n+++ b/JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java\n \n     public void testPropertyRoundHour() {\n         LocalTime test = new LocalTime(10, 20);\n-        check(test.hourOfDay().withRoundedCeiling(), 11, 0, 0, 0);\n-        check(test.hourOfDay().withRoundedFloor(), 10, 0, 0, 0);\n-        check(test.hourOfDay().withRoundedHalfCeiling(), 10, 0, 0, 0);\n-        check(test.hourOfDay().withRoundedHalfFloor(), 10, 0, 0, 0);\n-        check(test.hourOfDay().withRoundedHalfEven(), 10, 0, 0, 0);\n+        check(test.hourOfDay().roundCeiling(), 11, 0, 0, 0);\n+        check(test.hourOfDay().roundFloor(), 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfCeiling(), 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfFloor(), 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfEven(), 10, 0, 0, 0);\n         \n         test = new LocalTime(10, 40);\n-        check(test.hourOfDay().withRoundedCeiling(), 11, 0, 0, 0);\n-        check(test.hourOfDay().withRoundedFloor(), 10, 0, 0, 0);\n-        check(test.hourOfDay().withRoundedHalfCeiling(), 11, 0, 0, 0);\n-        check(test.hourOfDay().withRoundedHalfFloor(), 11, 0, 0, 0);\n-        check(test.hourOfDay().withRoundedHalfEven(), 11, 0, 0, 0);\n+        check(test.hourOfDay().roundCeiling(), 11, 0, 0, 0);\n+        check(test.hourOfDay().roundFloor(), 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfCeiling(), 11, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfFloor(), 11, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfEven(), 11, 0, 0, 0);\n         \n         test = new LocalTime(10, 30);\n-        check(test.hourOfDay().withRoundedCeiling(), 11, 0, 0, 0);\n-        check(test.hourOfDay().withRoundedFloor(), 10, 0, 0, 0);\n-        check(test.hourOfDay().withRoundedHalfCeiling(), 11, 0, 0, 0);\n-        check(test.hourOfDay().withRoundedHalfFloor(), 10, 0, 0, 0);\n-        check(test.hourOfDay().withRoundedHalfEven(), 10, 0, 0, 0);\n+        check(test.hourOfDay().roundCeiling(), 11, 0, 0, 0);\n+        check(test.hourOfDay().roundFloor(), 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfCeiling(), 11, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfFloor(), 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfEven(), 10, 0, 0, 0);\n         \n         test = new LocalTime(11, 30);\n-        check(test.hourOfDay().withRoundedCeiling(), 12, 0, 0, 0);\n-        check(test.hourOfDay().withRoundedFloor(), 11, 0, 0, 0);\n-        check(test.hourOfDay().withRoundedHalfCeiling(), 12, 0, 0, 0);\n-        check(test.hourOfDay().withRoundedHalfFloor(), 11, 0, 0, 0);\n-        check(test.hourOfDay().withRoundedHalfEven(), 12, 0, 0, 0);\n+        check(test.hourOfDay().roundCeiling(), 12, 0, 0, 0);\n+        check(test.hourOfDay().roundFloor(), 11, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfCeiling(), 12, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfFloor(), 11, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfEven(), 12, 0, 0, 0);\n     }\n \n     public void testPropertyGetMaxMinValuesHour() {\n     }\n \n     public void testPropertyCompareToHour() {\n-        LocalTime test1 = LocalTime.forInstantDefaultZone(TEST_TIME1);\n-        LocalTime test2 = LocalTime.forInstantDefaultZone(TEST_TIME2);\n+        LocalTime test1 = new LocalTime(TEST_TIME1);\n+        LocalTime test2 = new LocalTime(TEST_TIME2);\n         assertEquals(true, test1.hourOfDay().compareTo(test2) < 0);\n         assertEquals(true, test2.hourOfDay().compareTo(test1) > 0);\n         assertEquals(true, test1.hourOfDay().compareTo(test1) == 0);\n     }\n \n     public void testPropertyCompareToMinute() {\n-        LocalTime test1 = LocalTime.forInstantDefaultZone(TEST_TIME1);\n-        LocalTime test2 = LocalTime.forInstantDefaultZone(TEST_TIME2);\n+        LocalTime test1 = new LocalTime(TEST_TIME1);\n+        LocalTime test2 = new LocalTime(TEST_TIME2);\n         assertEquals(true, test1.minuteOfHour().compareTo(test2) < 0);\n         assertEquals(true, test2.minuteOfHour().compareTo(test1) > 0);\n         assertEquals(true, test1.minuteOfHour().compareTo(test1) == 0);\n     }\n \n     public void testPropertyCompareToSecond() {\n-        LocalTime test1 = LocalTime.forInstantDefaultZone(TEST_TIME1);\n-        LocalTime test2 = LocalTime.forInstantDefaultZone(TEST_TIME2);\n+        LocalTime test1 = new LocalTime(TEST_TIME1);\n+        LocalTime test2 = new LocalTime(TEST_TIME2);\n         assertEquals(true, test1.secondOfMinute().compareTo(test2) < 0);\n         assertEquals(true, test2.secondOfMinute().compareTo(test1) > 0);\n         assertEquals(true, test1.secondOfMinute().compareTo(test1) == 0);\n     }\n \n     public void testPropertyCompareToMilli() {\n-        LocalTime test1 = LocalTime.forInstantDefaultZone(TEST_TIME1);\n-        LocalTime test2 = LocalTime.forInstantDefaultZone(TEST_TIME2);\n+        LocalTime test1 = new LocalTime(TEST_TIME1);\n+        LocalTime test2 = new LocalTime(TEST_TIME2);\n         assertEquals(true, test1.millisOfSecond().compareTo(test2) < 0);\n         assertEquals(true, test2.millisOfSecond().compareTo(test1) > 0);\n         assertEquals(true, test1.millisOfSecond().compareTo(test1) == 0);", "timestamp": 1142720535, "metainfo": ""}