{"sha": "ea0057c0bea0c69644511ec24c385d44daf6eac8", "log": "Add time zone constructor to obtain accurate current time   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java\n+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java\n     }\n \n     /**\n+     * Constructs a TimeOfDay with the current time, using ISOChronology in\n+     * the specified zone to extract the fields.\n+     * <p>\n+     * The constructor uses the specified time zone to obtain the current time.\n+     * Once the constructor is complete, all further calculations\n+     * are performed without reference to a timezone (by switching to UTC).\n+     * \n+     * @param zone  the zone to use, null means default zone\n+     * @since 1.1\n+     */\n+    public TimeOfDay(DateTimeZone zone) {\n+        super(Chronology.getISO(zone));\n+    }\n+\n+    /**\n      * Constructs a TimeOfDay with the current time, using the specified chronology\n      * and zone to extract the fields.\n      * <p>\n--- a/JodaTime/src/java/org/joda/time/YearMonthDay.java\n+++ b/JodaTime/src/java/org/joda/time/YearMonthDay.java\n     // Constructors\n     //-----------------------------------------------------------------------\n     /**\n-     * Constructs a YearMonthDay with the current time, using ISOChronology in\n+     * Constructs a YearMonthDay with the current date, using ISOChronology in\n      * the default zone to extract the fields.\n      * <p>\n      * The constructor uses the default time zone, resulting in the local time\n     }\n \n     /**\n-     * Constructs a YearMonthDay with the current time, using the specified chronology\n+     * Constructs a YearMonthDay with the current date, using ISOChronology in\n+     * the specified zone to extract the fields.\n+     * <p>\n+     * The constructor uses the specified time zone to obtain the current date.\n+     * Once the constructor is complete, all further calculations\n+     * are performed without reference to a timezone (by switching to UTC).\n+     * \n+     * @param zone  the zone to use, null means default zone\n+     * @since 1.1\n+     */\n+    public YearMonthDay(DateTimeZone zone) {\n+        super(Chronology.getISO(zone));\n+    }\n+\n+    /**\n+     * Constructs a YearMonthDay with the current date, using the specified chronology\n      * and zone to extract the fields.\n      * <p>\n      * The constructor uses the time zone of the chronology specified.\n--- a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java\n \n     private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final ISOChronology ISO_UTC = ISOChronology.getInstanceUTC();\n     private static final int OFFSET = 1;\n     \n     private long TEST_TIME_NOW =\n      */\n     public void testConstantMidnight() throws Throwable {\n         TimeOfDay test = TimeOfDay.MIDNIGHT;\n-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(0, test.getHourOfDay());\n         assertEquals(0, test.getMinuteOfHour());\n         assertEquals(0, test.getSecondOfMinute());\n      */\n     public void testFactoryMillisOfDay_long1() throws Throwable {\n         TimeOfDay test = TimeOfDay.fromMillisOfDay(TEST_TIME1);\n-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(1, test.getHourOfDay());\n         assertEquals(2, test.getMinuteOfHour());\n         assertEquals(3, test.getSecondOfMinute());\n      */\n     public void testFactoryMillisOfDay_long_nullChronology() throws Throwable {\n         TimeOfDay test = TimeOfDay.fromMillisOfDay(TEST_TIME1, null);\n-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(1, test.getHourOfDay());\n         assertEquals(2, test.getMinuteOfHour());\n         assertEquals(3, test.getSecondOfMinute());\n      */\n     public void testConstructor() throws Throwable {\n         TimeOfDay test = new TimeOfDay();\n-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(10 + OFFSET, test.getHourOfDay());\n         assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    /**\n+     * Test constructor (DateTimeZone)\n+     */\n+    public void testConstructor_DateTimeZone() throws Throwable {\n+        DateTime dt = new DateTime(2005, 6, 8, 23, 59, 30, 40, LONDON);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        // 23:59 in London is 00:59 the following day in Paris\n+        \n+        TimeOfDay test = new TimeOfDay(LONDON);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(23, test.getHourOfDay());\n+        assertEquals(59, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+        \n+        test = new TimeOfDay(PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(0, test.getHourOfDay());\n+        assertEquals(59, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    /**\n+     * Test constructor (DateTimeZone=null)\n+     */\n+    public void testConstructor_nullDateTimeZone() throws Throwable {\n+        DateTime dt = new DateTime(2005, 6, 8, 23, 59, 30, 40, LONDON);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        // 23:59 in London is 00:59 the following day in Paris\n+        \n+        TimeOfDay test = new TimeOfDay((DateTimeZone) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(23, test.getHourOfDay());\n+        assertEquals(59, test.getMinuteOfHour());\n         assertEquals(30, test.getSecondOfMinute());\n         assertEquals(40, test.getMillisOfSecond());\n     }\n      */\n     public void testConstructor_nullChronology() throws Throwable {\n         TimeOfDay test = new TimeOfDay((Chronology) null);\n-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(10 + OFFSET, test.getHourOfDay());\n         assertEquals(20, test.getMinuteOfHour());\n         assertEquals(30, test.getSecondOfMinute());\n      */\n     public void testConstructor_long1() throws Throwable {\n         TimeOfDay test = new TimeOfDay(TEST_TIME1);\n-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(1 + OFFSET, test.getHourOfDay());\n         assertEquals(2, test.getMinuteOfHour());\n         assertEquals(3, test.getSecondOfMinute());\n      */\n     public void testConstructor_long2() throws Throwable {\n         TimeOfDay test = new TimeOfDay(TEST_TIME2);\n-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(5 + OFFSET, test.getHourOfDay());\n         assertEquals(6, test.getMinuteOfHour());\n         assertEquals(7, test.getSecondOfMinute());\n      */\n     public void testConstructor_long_nullChronology() throws Throwable {\n         TimeOfDay test = new TimeOfDay(TEST_TIME1, null);\n-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(1 + OFFSET, test.getHourOfDay());\n         assertEquals(2, test.getMinuteOfHour());\n         assertEquals(3, test.getSecondOfMinute());\n     public void testConstructor_Object() throws Throwable {\n         Date date = new Date(TEST_TIME1);\n         TimeOfDay test = new TimeOfDay(date);\n-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(1 + OFFSET, test.getHourOfDay());\n         assertEquals(2, test.getMinuteOfHour());\n         assertEquals(3, test.getSecondOfMinute());\n      * Test constructor (Object=null)\n      */\n     public void testConstructor_nullObject() throws Throwable {\n-        TimeOfDay test = new TimeOfDay(null);\n-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n+        TimeOfDay test = new TimeOfDay((Object) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(10 + OFFSET, test.getHourOfDay());\n         assertEquals(20, test.getMinuteOfHour());\n         assertEquals(30, test.getSecondOfMinute());\n     public void testConstructor_Object_nullChronology() throws Throwable {\n         Date date = new Date(TEST_TIME1);\n         TimeOfDay test = new TimeOfDay(date, null);\n-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(1 + OFFSET, test.getHourOfDay());\n         assertEquals(2, test.getMinuteOfHour());\n         assertEquals(3, test.getSecondOfMinute());\n      */\n     public void testConstructor_nullObject_nullChronology() throws Throwable {\n         TimeOfDay test = new TimeOfDay((Object) null, null);\n-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(10 + OFFSET, test.getHourOfDay());\n         assertEquals(20, test.getMinuteOfHour());\n         assertEquals(30, test.getSecondOfMinute());\n      */\n     public void testConstructor_int_int() throws Throwable {\n         TimeOfDay test = new TimeOfDay(10, 20);\n-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(10, test.getHourOfDay());\n         assertEquals(20, test.getMinuteOfHour());\n         assertEquals(0, test.getSecondOfMinute());\n      */\n     public void testConstructor_int_int_nullChronology() throws Throwable {\n         TimeOfDay test = new TimeOfDay(10, 20, null);\n-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(10, test.getHourOfDay());\n         assertEquals(20, test.getMinuteOfHour());\n         assertEquals(0, test.getSecondOfMinute());\n      */\n     public void testConstructor_int_int_int() throws Throwable {\n         TimeOfDay test = new TimeOfDay(10, 20, 30);\n-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(10, test.getHourOfDay());\n         assertEquals(20, test.getMinuteOfHour());\n         assertEquals(30, test.getSecondOfMinute());\n      */\n     public void testConstructor_int_int_int_nullChronology() throws Throwable {\n         TimeOfDay test = new TimeOfDay(10, 20, 30, null);\n-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(10, test.getHourOfDay());\n         assertEquals(20, test.getMinuteOfHour());\n         assertEquals(30, test.getSecondOfMinute());\n      */\n     public void testConstructor_int_int_int_int() throws Throwable {\n         TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(10, test.getHourOfDay());\n         assertEquals(20, test.getMinuteOfHour());\n         assertEquals(30, test.getSecondOfMinute());\n      */\n     public void testConstructor_int_int_int_int_nullChronology() throws Throwable {\n         TimeOfDay test = new TimeOfDay(10, 20, 30, 40, null);\n-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(10, test.getHourOfDay());\n         assertEquals(20, test.getMinuteOfHour());\n         assertEquals(30, test.getSecondOfMinute());\n--- a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java\n     }\n \n     /**\n+     * Test constructor (DateTimeZone)\n+     */\n+    public void testConstructor_DateTimeZone() throws Throwable {\n+        DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        // 23:59 in London is 00:59 the following day in Paris\n+        \n+        YearMonthDay test = new YearMonthDay(LONDON);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(2005, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(8, test.getDayOfMonth());\n+        \n+        test = new YearMonthDay(PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(2005, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (DateTimeZone=null)\n+     */\n+    public void testConstructor_nullDateTimeZone() throws Throwable {\n+        DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        // 23:59 in London is 00:59 the following day in Paris\n+        \n+        YearMonthDay test = new YearMonthDay((DateTimeZone) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(2005, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(8, test.getDayOfMonth());\n+    }\n+\n+    /**\n      * Test constructor (Chronology)\n      */\n     public void testConstructor_Chronology() throws Throwable {\n      * Test constructor (Object=null)\n      */\n     public void testConstructor_nullObject() throws Throwable {\n-        YearMonthDay test = new YearMonthDay(null);\n+        YearMonthDay test = new YearMonthDay((Object) null);\n         assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(1970, test.getYear());\n         assertEquals(6, test.getMonthOfYear());", "timestamp": 1113732956, "metainfo": ""}