{"sha": "528c7f7a530b7bfd357a9dc420548aa664e9e781", "log": "Add toString to performance checks   ", "commit": "\n--- a/JodaTime/src/example/org/joda/example/time/DateTimePerformance.java\n+++ b/JodaTime/src/example/org/joda/example/time/DateTimePerformance.java\n  */\n package org.joda.example.time;\n \n+import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.GregorianCalendar;\n import org.joda.time.DateTime;\n import org.joda.time.MutableDateTime;\n import org.joda.time.chrono.GJChronology;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n \n /**\n  * DateTimePerformance provides various comparisons between the Java supplied\n         int runs = 0;\n     }\n     \n-    private static int AVERAGE = 1;\n+    private static int AVERAGE = 3;\n     private static int COUNT_VERY_FAST = 5000000;\n     private static int COUNT_FAST = 200000;\n-    private static int COUNT_SLOW = 50000;\n+    private static int COUNT_SLOW = 20000;\n     \n     private Map results = new HashMap();\n     private List resultList = new ArrayList();\n         checkJISOSetGetHour();\n         checkGCalSetGetHour();\n         checkDateSetGetHour();\n+        \n+        checkJodaToString();\n+        checkJISOToString();\n+        checkGCalToString();\n+        checkDateToString();\n         \n         System.out.println(\"\");\n         long jodaTotal = 0;\n     private void checkJodaConstructor1() {\n         int COUNT = COUNT_SLOW;\n         DateTime dt = new DateTime(GJChronology.getInstance());\n+        int count = 0;\n         for (int i = 0; i < AVERAGE; i++) {\n             start(\"Joda\", \"new()\");\n             for (int j = 0; j < COUNT; j++) {\n                 dt = new DateTime(GJChronology.getInstance());\n-                if (dt == null) {System.out.println(\"Anti optimise\");}\n+                if (count++ < 0) {System.out.println(\"Anti optimise\");}\n             }\n             end(COUNT);\n         }\n     private void checkJISOConstructor1() {\n         int COUNT = COUNT_SLOW;\n         DateTime dt = new DateTime();\n+        int count = 0;\n         for (int i = 0; i < AVERAGE; i++) {\n             start(\"JISO\", \"new()\");\n             for (int j = 0; j < COUNT; j++) {\n                 dt = new DateTime();\n-                if (dt == null) {System.out.println(\"Anti optimise\");}\n+                if (count++ < 0) {System.out.println(\"Anti optimise\");}\n             }\n             end(COUNT);\n         }\n     private void checkGCalConstructor1() {\n         int COUNT = COUNT_SLOW;\n         GregorianCalendar dt = new GregorianCalendar();\n+        int count = 0;\n         for (int i = 0; i < AVERAGE; i++) {\n             start(\"GCal\", \"new()\");\n             for (int j = 0; j < COUNT; j++) {\n                 dt = new GregorianCalendar();\n-                if (dt == null) {System.out.println(\"Anti optimise\");}\n+                if (count++ < 0) {System.out.println(\"Anti optimise\");}\n             }\n             end(COUNT);\n         }\n     private void checkDateConstructor1() {\n         int COUNT = COUNT_SLOW;\n         Date dt = new Date();\n+        int count = 0;\n         for (int i = 0; i < AVERAGE; i++) {\n             start(\"Date\", \"new()\");\n             for (int j = 0; j < COUNT; j++) {\n                 dt = new Date();\n-                if (dt == null) {System.out.println(\"Anti optimise\");}\n+                if (count++ < 0) {System.out.println(\"Anti optimise\");}\n             }\n             end(COUNT);\n         }\n     private void checkJodaSetGetYear() {\n         int COUNT = COUNT_FAST;\n         // Is it fair to use only MutableDateTime here? You decide.\n-        MutableDateTime dt = new MutableDateTime(GJChronology.getInstance());\n+//        MutableDateTime dt = new MutableDateTime(GJChronology.getInstance());\n+//        for (int i = 0; i < AVERAGE; i++) {\n+//            start(\"Joda\", \"setGetYear\");\n+//            for (int j = 0; j < COUNT; j++) {\n+//                dt.setYear(1972);\n+//                int val = dt.getYear();\n+//                if (val < 0) {System.out.println(\"Anti optimise\");}\n+//            }\n+//            end(COUNT);\n+//        }\n+        DateTime dt = new DateTime(GJChronology.getInstance());\n         for (int i = 0; i < AVERAGE; i++) {\n             start(\"Joda\", \"setGetYear\");\n+            for (int j = 0; j < COUNT; j++) {\n+                dt = dt.year().setCopy(1972);\n+                int val = dt.getYear();\n+                if (val < 0) {System.out.println(\"Anti optimise\");}\n+            }\n+            end(COUNT);\n+        }\n+    }\n+\n+    private void checkJISOSetGetYear() {\n+        int COUNT = COUNT_FAST;\n+        // Is it fair to use only MutableDateTime here? You decide.\n+//        MutableDateTime dt = new MutableDateTime();\n+//        for (int i = 0; i < AVERAGE; i++) {\n+//            start(\"JISO\", \"setGetYear\");\n+//            for (int j = 0; j < COUNT; j++) {\n+//                dt.setYear(1972);\n+//                int val = dt.getYear();\n+//                if (val < 0) {System.out.println(\"Anti optimise\");}\n+//            }\n+//            end(COUNT);\n+//        }\n+        DateTime dt = new DateTime();\n+        for (int i = 0; i < AVERAGE; i++) {\n+            start(\"JISO\", \"setGetYear\");\n+            for (int j = 0; j < COUNT; j++) {\n+                dt = dt.year().setCopy(1972);\n+                int val = dt.getYear();\n+                if (val < 0) {System.out.println(\"Anti optimise\");}\n+            }\n+            end(COUNT);\n+        }\n+    }\n+\n+    private void checkGCalSetGetYear() {\n+        int COUNT = COUNT_FAST;\n+        GregorianCalendar dt = new GregorianCalendar();\n+        for (int i = 0; i < AVERAGE; i++) {\n+            start(\"GCal\", \"setGetYear\");\n+            for (int j = 0; j < COUNT; j++) {\n+                dt.set(GregorianCalendar.YEAR, 1972);\n+                int val = dt.get(GregorianCalendar.YEAR);\n+                if (val < 0) {System.out.println(\"Anti optimise\");}\n+            }\n+            end(COUNT);\n+        }\n+    }\n+\n+    private void checkDateSetGetYear() {\n+        int COUNT = COUNT_FAST;\n+        Date dt = new Date();\n+        for (int i = 0; i < AVERAGE; i++) {\n+            start(\"Date\", \"setGetYear\");\n             for (int j = 0; j < COUNT; j++) {\n                 dt.setYear(1972);\n                 int val = dt.getYear();\n-                if (dt == null) {System.out.println(\"Anti optimise\");}\n-            }\n-            end(COUNT);\n-        }\n-    }\n-\n-    private void checkJISOSetGetYear() {\n-        int COUNT = COUNT_FAST;\n+                if (val < 0) {System.out.println(\"Anti optimise\");}\n+            }\n+            end(COUNT);\n+        }\n+    }\n+\n+    // Set hour\n+    //------------------------------------------------------------------------\n+    \n+    private void checkJodaSetHour() {\n+        int COUNT = COUNT_VERY_FAST;\n+        // Is it fair to use only MutableDateTime here? You decide.\n+        MutableDateTime dt = new MutableDateTime(GJChronology.getInstance());\n+        for (int i = 0; i < AVERAGE; i++) {\n+            start(\"Joda\", \"setHour\");\n+            for (int j = 0; j < COUNT; j++) {\n+                dt.setHourOfDay(13);\n+                if (dt == null) {System.out.println(\"Anti optimise\");}\n+            }\n+            end(COUNT);\n+        }\n+    }\n+\n+    private void checkJISOSetHour() {\n+        int COUNT = COUNT_VERY_FAST;\n         // Is it fair to use only MutableDateTime here? You decide.\n         MutableDateTime dt = new MutableDateTime();\n         for (int i = 0; i < AVERAGE; i++) {\n-            start(\"JISO\", \"setGetYear\");\n-            for (int j = 0; j < COUNT; j++) {\n-                dt.setYear(1972);\n-                int val = dt.getYear();\n-                if (dt == null) {System.out.println(\"Anti optimise\");}\n-            }\n-            end(COUNT);\n-        }\n-    }\n-\n-    private void checkGCalSetGetYear() {\n-        int COUNT = COUNT_FAST;\n-        GregorianCalendar dt = new GregorianCalendar();\n-        for (int i = 0; i < AVERAGE; i++) {\n-            start(\"GCal\", \"setGetYear\");\n-            for (int j = 0; j < COUNT; j++) {\n-                dt.set(GregorianCalendar.YEAR, 1972);\n-                int val = dt.get(GregorianCalendar.YEAR);\n-                if (dt == null) {System.out.println(\"Anti optimise\");}\n-            }\n-            end(COUNT);\n-        }\n-    }\n-\n-    private void checkDateSetGetYear() {\n-        int COUNT = COUNT_FAST;\n-        Date dt = new Date();\n-        for (int i = 0; i < AVERAGE; i++) {\n-            start(\"Date\", \"setGetYear\");\n-            for (int j = 0; j < COUNT; j++) {\n-                dt.setYear(1972);\n-                int val = dt.getYear();\n+            start(\"JISO\", \"setHour\");\n+            for (int j = 0; j < COUNT; j++) {\n+                dt.setHourOfDay(13);\n+                if (dt == null) {System.out.println(\"Anti optimise\");}\n+            }\n+            end(COUNT);\n+        }\n+    }\n+\n+    private void checkGCalSetHour() {\n+        int COUNT = COUNT_VERY_FAST;\n+        GregorianCalendar dt = new GregorianCalendar();\n+        for (int i = 0; i < AVERAGE; i++) {\n+            start(\"GCal\", \"setHour\");\n+            for (int j = 0; j < COUNT; j++) {\n+                dt.set(GregorianCalendar.HOUR_OF_DAY, 13);\n+                if (dt == null) {System.out.println(\"Anti optimise\");}\n+            }\n+            end(COUNT);\n+        }\n+    }\n+\n+    private void checkDateSetHour() {\n+        int COUNT = COUNT_FAST;\n+        Date dt = new Date();\n+        for (int i = 0; i < AVERAGE; i++) {\n+            start(\"Date\", \"setHour\");\n+            for (int j = 0; j < COUNT; j++) {\n+                dt.setHours(13);\n                 if (dt == null) {System.out.println(\"Anti optimise\");}\n             }\n             end(COUNT);\n     // Set hour\n     //------------------------------------------------------------------------\n     \n-    private void checkJodaSetHour() {\n+    private void checkJodaSetGetHour() {\n         int COUNT = COUNT_VERY_FAST;\n         // Is it fair to use only MutableDateTime here? You decide.\n         MutableDateTime dt = new MutableDateTime(GJChronology.getInstance());\n         for (int i = 0; i < AVERAGE; i++) {\n-            start(\"Joda\", \"setHour\");\n+            start(\"Joda\", \"setGetHour\");\n             for (int j = 0; j < COUNT; j++) {\n                 dt.setHourOfDay(13);\n-                if (dt == null) {System.out.println(\"Anti optimise\");}\n-            }\n-            end(COUNT);\n-        }\n-    }\n-\n-    private void checkJISOSetHour() {\n+                int val = dt.getHourOfDay();\n+                if (dt == null) {System.out.println(\"Anti optimise\");}\n+            }\n+            end(COUNT);\n+        }\n+    }\n+\n+    private void checkJISOSetGetHour() {\n         int COUNT = COUNT_VERY_FAST;\n         // Is it fair to use only MutableDateTime here? You decide.\n         MutableDateTime dt = new MutableDateTime();\n         for (int i = 0; i < AVERAGE; i++) {\n-            start(\"JISO\", \"setHour\");\n-            for (int j = 0; j < COUNT; j++) {\n-                dt.setHourOfDay(13);\n-                if (dt == null) {System.out.println(\"Anti optimise\");}\n-            }\n-            end(COUNT);\n-        }\n-    }\n-\n-    private void checkGCalSetHour() {\n-        int COUNT = COUNT_VERY_FAST;\n-        GregorianCalendar dt = new GregorianCalendar();\n-        for (int i = 0; i < AVERAGE; i++) {\n-            start(\"GCal\", \"setHour\");\n-            for (int j = 0; j < COUNT; j++) {\n-                dt.set(GregorianCalendar.HOUR_OF_DAY, 13);\n-                if (dt == null) {System.out.println(\"Anti optimise\");}\n-            }\n-            end(COUNT);\n-        }\n-    }\n-\n-    private void checkDateSetHour() {\n-        int COUNT = COUNT_FAST;\n-        Date dt = new Date();\n-        for (int i = 0; i < AVERAGE; i++) {\n-            start(\"Date\", \"setHour\");\n-            for (int j = 0; j < COUNT; j++) {\n-                dt.setHours(13);\n-                if (dt == null) {System.out.println(\"Anti optimise\");}\n-            }\n-            end(COUNT);\n-        }\n-    }\n-\n-    // Set hour\n-    //------------------------------------------------------------------------\n-    \n-    private void checkJodaSetGetHour() {\n-        int COUNT = COUNT_VERY_FAST;\n-        // Is it fair to use only MutableDateTime here? You decide.\n-        MutableDateTime dt = new MutableDateTime(GJChronology.getInstance());\n-        for (int i = 0; i < AVERAGE; i++) {\n-            start(\"Joda\", \"setGetHour\");\n+            start(\"JISO\", \"setGetHour\");\n             for (int j = 0; j < COUNT; j++) {\n                 dt.setHourOfDay(13);\n                 int val = dt.getHourOfDay();\n         }\n     }\n \n-    private void checkJISOSetGetHour() {\n-        int COUNT = COUNT_VERY_FAST;\n-        // Is it fair to use only MutableDateTime here? You decide.\n-        MutableDateTime dt = new MutableDateTime();\n-        for (int i = 0; i < AVERAGE; i++) {\n-            start(\"JISO\", \"setGetHour\");\n-            for (int j = 0; j < COUNT; j++) {\n-                dt.setHourOfDay(13);\n-                int val = dt.getHourOfDay();\n-                if (dt == null) {System.out.println(\"Anti optimise\");}\n-            }\n-            end(COUNT);\n-        }\n-    }\n-\n     private void checkGCalSetGetHour() {\n         int COUNT = COUNT_VERY_FAST;\n         GregorianCalendar dt = new GregorianCalendar();\n                 dt.setHours(13);\n                 int val = dt.getHours();\n                 if (dt == null) {System.out.println(\"Anti optimise\");}\n+            }\n+            end(COUNT);\n+        }\n+    }\n+\n+    // To formatted string\n+    //------------------------------------------------------------------------\n+    \n+    private void checkJodaToString() {\n+        int COUNT = COUNT_SLOW;\n+        DateTime dt = new DateTime(GJChronology.getInstance());\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"dd MMM yyyy\");\n+        for (int i = 0; i < AVERAGE; i++) {\n+            start(\"Joda\", \"toString\");\n+            for (int j = 0; j < COUNT; j++) {\n+                String str = dt.toString(\"dd MMM yyyy\");\n+//                String str = dt.toString(f);\n+                if (str == null) {System.out.println(\"Anti optimise\");}\n+            }\n+            end(COUNT);\n+        }\n+    }\n+\n+    private void checkJISOToString() {\n+        int COUNT = COUNT_SLOW;\n+        DateTime dt = new DateTime();\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"dd MMM yyyy\");\n+        for (int i = 0; i < AVERAGE; i++) {\n+            start(\"JISO\", \"toString\");\n+            for (int j = 0; j < COUNT; j++) {\n+                String str = dt.toString(\"dd MMM yyyy\");\n+//                String str = dt.toString(f);\n+                if (str == null) {System.out.println(\"Anti optimise\");}\n+            }\n+            end(COUNT);\n+        }\n+    }\n+\n+    private void checkGCalToString() {\n+        int COUNT = COUNT_SLOW;\n+        GregorianCalendar dt = new GregorianCalendar();\n+        for (int i = 0; i < AVERAGE; i++) {\n+            start(\"GCal\", \"toString\");\n+            for (int j = 0; j < COUNT; j++) {\n+                SimpleDateFormat sdf = new SimpleDateFormat(\"dd MMM yyyy\");\n+                String str = sdf.format(dt.getTime());\n+                if (str == null) {System.out.println(\"Anti optimise\");}\n+            }\n+            end(COUNT);\n+        }\n+    }\n+\n+    private void checkDateToString() {\n+        int COUNT = COUNT_SLOW;\n+        Date dt = new Date();\n+        for (int i = 0; i < AVERAGE; i++) {\n+            start(\"Date\", \"toString\");\n+            for (int j = 0; j < COUNT; j++) {\n+                SimpleDateFormat sdf = new SimpleDateFormat(\"dd MMM yyyy\");\n+                String str = sdf.format(dt);\n+                if (str == null) {System.out.println(\"Anti optimise\");}\n             }\n             end(COUNT);\n         }", "timestamp": 1128813434, "metainfo": ""}