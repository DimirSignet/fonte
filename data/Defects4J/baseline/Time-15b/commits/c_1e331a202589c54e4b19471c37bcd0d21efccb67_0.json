{"sha": "1e331a202589c54e4b19471c37bcd0d21efccb67", "log": "Test BaseDateTimeField   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/field/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/field/TestAll.java\n     public static Test suite() {\n         TestSuite suite = new TestSuite();\n         \n+        suite.addTest(TestBaseDateTimeField.suite());\n+        \n         suite.addTest(TestMillisDurationField.suite());\n         suite.addTest(TestPreciseDurationField.suite());\n         suite.addTest(TestScaledDurationField.suite());\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.field;\n+\n+import java.util.Arrays;\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTimeFieldType;\n+import org.joda.time.DurationField;\n+import org.joda.time.DurationFieldType;\n+import org.joda.time.TimeOfDay;\n+\n+/**\n+ * This class is a Junit unit test for BaseDateTimeField.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestBaseDateTimeField extends TestCase {\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestBaseDateTimeField.class);\n+    }\n+\n+    public TestBaseDateTimeField(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+    }\n+\n+    protected void tearDown() throws Exception {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_constructor() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(DateTimeFieldType.secondOfMinute(), field.getType());\n+        try {\n+            field = new MockBaseDateTimeField(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void test_getType() {\n+        BaseDateTimeField field = new MockBaseDateTimeField(DateTimeFieldType.secondOfDay());\n+        assertEquals(DateTimeFieldType.secondOfDay(), field.getType());\n+    }\n+\n+    public void test_getName() {\n+        BaseDateTimeField field = new MockBaseDateTimeField(DateTimeFieldType.secondOfDay());\n+        assertEquals(\"secondOfDay\", field.getName());\n+    }\n+\n+    public void test_toString() {\n+        BaseDateTimeField field = new MockBaseDateTimeField(DateTimeFieldType.secondOfDay());\n+        assertEquals(\"DateTimeField[secondOfDay]\", field.toString());\n+    }\n+\n+    public void test_isSupported() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(true, field.isSupported());\n+    }\n+\n+    public void test_get() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(0, field.get(0));\n+        assertEquals(1, field.get(60));\n+        assertEquals(2, field.get(123));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getAsText_long_Locale() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(\"29\", field.getAsText(60L * 29, Locale.ENGLISH));\n+        assertEquals(\"29\", field.getAsText(60L * 29, null));\n+    }\n+\n+    public void test_getAsText_long() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(\"29\", field.getAsText(60L * 29));\n+    }\n+\n+    public void test_getAsText_RP_int_Locale() {\n+        // ReadablePartial partial, int fieldValue, Locale locale\n+        // TODO\n+    }\n+\n+    public void test_getAsText_RP_Locale() {\n+        // ReadablePartial partial, Locale locale\n+        // TODO\n+    }\n+\n+    public void test_getAsText_int_Locale() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(\"80\", field.getAsText(80, Locale.ENGLISH));\n+        assertEquals(\"80\", field.getAsText(80, null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getAsShortText_long_Locale() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(\"29\", field.getAsShortText(60L * 29, Locale.ENGLISH));\n+        assertEquals(\"29\", field.getAsShortText(60L * 29, null));\n+    }\n+\n+    public void test_getAsShortText_long() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(\"29\", field.getAsShortText(60L * 29));\n+    }\n+\n+    public void test_getAsShortText_RP_int_Locale() {\n+        // ReadablePartial partial, int fieldValue, Locale locale\n+        // TODO\n+    }\n+\n+    public void test_getAsShortText_RP_Locale() {\n+        // ReadablePartial partial, Locale locale\n+        // TODO\n+    }\n+\n+    public void test_getAsShortText_int_Locale() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(\"80\", field.getAsShortText(80, Locale.ENGLISH));\n+        assertEquals(\"80\", field.getAsShortText(80, null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_add_long_int() {\n+        MockCountingDurationField.add_int = 0;\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(61, field.add(1L, 1));\n+        assertEquals(1, MockCountingDurationField.add_int);\n+    }\n+\n+    public void test_add_long_long() {\n+        MockCountingDurationField.add_long = 0;\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(61, field.add(1L, 1L));\n+        assertEquals(1, MockCountingDurationField.add_long);\n+    }\n+\n+    public void test_add_RP_int_intarray_int() {\n+        int[] values = new int[] {10, 20, 30, 40};\n+        int[] expected = new int[] {10, 20, 30, 40};\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        int[] result = field.add(new TimeOfDay(), 2, values, 0);\n+        assertEquals(true, Arrays.equals(expected, result));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 31, 40};\n+        result = field.add(new TimeOfDay(), 2, values, 1);\n+        assertEquals(true, Arrays.equals(expected, result));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 21, 0, 40};\n+        result = field.add(new TimeOfDay(), 2, values, 30);\n+        assertEquals(true, Arrays.equals(expected, result));\n+        \n+        values = new int[] {23, 59, 30, 40};\n+        try {\n+            field.add(new TimeOfDay(), 2, values, 30);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 29, 40};\n+        result = field.add(new TimeOfDay(), 2, values, -1);\n+        assertEquals(true, Arrays.equals(expected, result));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 19, 59, 40};\n+        result = field.add(new TimeOfDay(), 2, values, -31);\n+        assertEquals(true, Arrays.equals(expected, result));\n+        \n+        values = new int[] {0, 0, 30, 40};\n+        try {\n+            field.add(new TimeOfDay(), 2, values, -31);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_addWrapField_long_int() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(1029, field.addWrapField(60L * 29, 0));\n+        assertEquals(1059, field.addWrapField(60L * 29, 30));\n+        assertEquals(1000, field.addWrapField(60L * 29, 31));\n+    }\n+\n+    public void test_addWrapField_RP_int_intarray_int() {\n+        // TODO\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getDifference_long_long() {\n+        MockCountingDurationField.difference_long = 0;\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(30, field.getDifference(0L, 0L));\n+        assertEquals(1, MockCountingDurationField.difference_long);\n+    }\n+\n+    public void test_getDifferenceAsLong_long_long() {\n+        MockCountingDurationField.difference_long = 0;\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(30, field.getDifferenceAsLong(0L, 0L));\n+        assertEquals(1, MockCountingDurationField.difference_long);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_set_long_int() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(1000, field.set(0L, 0));\n+        assertEquals(1029, field.set(0L, 29));\n+    }\n+\n+    public void test_set_RP_int_intarray_int() {\n+        // TODO\n+    }\n+\n+    public void test_set_long_String_Locale() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(0, field.set(0L, \"0\", null));\n+        assertEquals(29, field.set(0L, \"29\", Locale.ENGLISH));\n+    }\n+\n+    public void test_set_long_String() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(0, field.set(0L, \"0\"));\n+        assertEquals(29, field.set(0L, \"29\"));\n+    }\n+\n+    public void test_set_RP_int_intarray_String_Locale() {\n+        // TODO\n+    }\n+\n+    public void test_convertText() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(0, field.convertText(\"0\", null));\n+        assertEquals(29, field.convertText(\"29\", null));\n+        try {\n+            field.convertText(\"2A\", null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            field.convertText(null, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //------------------------------------------------------------------------\n+//    public abstract DurationField getDurationField();\n+//\n+//    public abstract DurationField getRangeDurationField();\n+\n+    public void test_isLeap_long() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(false, field.isLeap(0L));\n+    }\n+\n+    public void test_getLeapAmount_long() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(0, field.getLeapAmount(0L));\n+    }\n+\n+    public void test_getLeapDurationField() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(null, field.getLeapDurationField());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getMinimumValue() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(0, field.getMinimumValue());\n+    }\n+\n+    public void test_getMinimumValue_long() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(0, field.getMinimumValue(0L));\n+    }\n+\n+    public void test_getMinimumValue_RP() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(0, field.getMinimumValue(new TimeOfDay()));\n+    }\n+\n+    public void test_getMinimumValue_RP_intarray() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(0, field.getMinimumValue(new TimeOfDay(), new int[4]));\n+    }\n+\n+    public void test_getMaximumValue() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(59, field.getMaximumValue());\n+    }\n+\n+    public void test_getMaximumValue_long() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(59, field.getMaximumValue(0L));\n+    }\n+\n+    public void test_getMaximumValue_RP() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(59, field.getMaximumValue(new TimeOfDay()));\n+    }\n+\n+    public void test_getMaximumValue_RP_intarray() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(59, field.getMaximumValue(new TimeOfDay(), new int[4]));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getMaximumTextLength_Locale() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(2, field.getMaximumTextLength(Locale.ENGLISH));\n+\n+        field = new MockBaseDateTimeField() {\n+            public int getMaximumValue() {\n+                return 5;\n+            }\n+        };\n+        assertEquals(1, field.getMaximumTextLength(Locale.ENGLISH));\n+        \n+        field = new MockBaseDateTimeField() {\n+            public int getMaximumValue() {\n+                return 555;\n+            }\n+        };\n+        assertEquals(3, field.getMaximumTextLength(Locale.ENGLISH));\n+        \n+        field = new MockBaseDateTimeField() {\n+            public int getMaximumValue() {\n+                return 5555;\n+            }\n+        };\n+        assertEquals(4, field.getMaximumTextLength(Locale.ENGLISH));\n+        \n+        field = new MockBaseDateTimeField() {\n+            public int getMaximumValue() {\n+                return -1;\n+            }\n+        };\n+        assertEquals(2, field.getMaximumTextLength(Locale.ENGLISH));\n+    }\n+\n+    public void test_getMaximumShortTextLength_Locale() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(2, field.getMaximumShortTextLength(Locale.ENGLISH));\n+    }\n+\n+    //------------------------------------------------------------------------\n+    public void test_roundFloor_long() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(0L, field.roundFloor(0L));\n+        assertEquals(0L, field.roundFloor(29L));\n+        assertEquals(0L, field.roundFloor(30L));\n+        assertEquals(0L, field.roundFloor(31L));\n+        assertEquals(60L, field.roundFloor(60L));\n+    }\n+\n+    public void test_roundCeiling_long() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(0L, field.roundCeiling(0L));\n+        assertEquals(60L, field.roundCeiling(29L));\n+        assertEquals(60L, field.roundCeiling(30L));\n+        assertEquals(60L, field.roundCeiling(31L));\n+        assertEquals(60L, field.roundCeiling(60L));\n+    }\n+\n+    public void test_roundHalfFloor_long() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(0L, field.roundHalfFloor(0L));\n+        assertEquals(0L, field.roundHalfFloor(29L));\n+        assertEquals(0L, field.roundHalfFloor(30L));\n+        assertEquals(60L, field.roundHalfFloor(31L));\n+        assertEquals(60L, field.roundHalfFloor(60L));\n+    }\n+\n+    public void test_roundHalfCeiling_long() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(0L, field.roundHalfCeiling(0L));\n+        assertEquals(0L, field.roundHalfCeiling(29L));\n+        assertEquals(60L, field.roundHalfCeiling(30L));\n+        assertEquals(60L, field.roundHalfCeiling(31L));\n+        assertEquals(60L, field.roundHalfCeiling(60L));\n+    }\n+\n+    public void test_roundHalfEven_long() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(0L, field.roundHalfEven(0L));\n+        assertEquals(0L, field.roundHalfEven(29L));\n+        assertEquals(0L, field.roundHalfEven(30L));\n+        assertEquals(60L, field.roundHalfEven(31L));\n+        assertEquals(60L, field.roundHalfEven(60L));\n+        assertEquals(60L, field.roundHalfEven(89L));\n+        assertEquals(120L, field.roundHalfEven(90L));\n+        assertEquals(120L, field.roundHalfEven(91L));\n+    }\n+\n+    public void test_remainder_long() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(0L, field.remainder(0L));\n+        assertEquals(29L, field.remainder(29L));\n+        assertEquals(30L, field.remainder(30L));\n+        assertEquals(31L, field.remainder(31L));\n+        assertEquals(0L, field.remainder(60L));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    static class MockBaseDateTimeField extends BaseDateTimeField {\n+        protected MockBaseDateTimeField() {\n+            super(DateTimeFieldType.secondOfMinute());\n+        }\n+        protected MockBaseDateTimeField(DateTimeFieldType type) {\n+            super(type);\n+        }\n+        public int get(long instant) {\n+            return (int) (instant / 60L);\n+        }\n+        public long set(long instant, int value) {\n+            return 1000 + value;\n+        }\n+        public DurationField getDurationField() {\n+            return new MockCountingDurationField(DurationFieldType.seconds());\n+        }\n+        public DurationField getRangeDurationField() {\n+            return new MockCountingDurationField(DurationFieldType.minutes());\n+        }\n+        public int getMinimumValue() {\n+            return 0;\n+        }\n+        public int getMaximumValue() {\n+            return 59;\n+        }\n+        public long roundFloor(long instant) {\n+            return (instant / 60L) * 60L;\n+        }\n+        public boolean isLenient() {\n+            return false;\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    static class MockCountingDurationField extends BaseDurationField {\n+        static int add_int = 0;\n+        static int add_long = 0;\n+        static int difference_long = 0;\n+        \n+        protected MockCountingDurationField(DurationFieldType type) {\n+            super(type);\n+        }\n+        public boolean isPrecise() {\n+            return false;\n+        }\n+        public long getUnitMillis() {\n+            return 0;\n+        }\n+        public long getValueAsLong(long duration, long instant) {\n+            return 0;\n+        }\n+        public long getMillis(int value, long instant) {\n+            return 0;\n+        }\n+        public long getMillis(long value, long instant) {\n+            return 0;\n+        }\n+        public long add(long instant, int value) {\n+            add_int++;\n+            return instant + (value * 60L);\n+        }\n+        public long add(long instant, long value) {\n+            add_long++;\n+            return instant + (value * 60L);\n+        }\n+        public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {\n+            difference_long++;\n+            return 30;\n+        }\n+    }\n+\n+}", "timestamp": 1096157509, "metainfo": ""}