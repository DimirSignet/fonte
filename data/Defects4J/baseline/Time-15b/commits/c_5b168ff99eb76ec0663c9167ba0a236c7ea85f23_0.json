{"sha": "5b168ff99eb76ec0663c9167ba0a236c7ea85f23", "log": "Comment typos.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/AbstractDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/AbstractDateTime.java\n      * @param hourOfDay  the hour of the day\n      * @param minuteOfHour  the minute of the hour\n      * @param secondOfMinute  the second of the minute\n-     * @param millisOfSecond  the milisecond of the second\n+     * @param millisOfSecond  the millisecond of the second\n      */\n     protected AbstractDateTime(\n             final int year,\n      * @param hourOfDay  the hour of the day\n      * @param minuteOfHour  the minute of the hour\n      * @param secondOfMinute  the second of the minute\n-     * @param millisOfSecond  the milisecond of the second\n+     * @param millisOfSecond  the millisecond of the second\n      * @param zone  the time zone, null means default time zone\n      */\n     protected AbstractDateTime(\n      * @param hourOfDay  the hour of the day\n      * @param minuteOfHour  the minute of the hour\n      * @param secondOfMinute  the second of the minute\n-     * @param millisOfSecond  the milisecond of the second\n+     * @param millisOfSecond  the millisecond of the second\n      * @param chronology  the chronology, null means ISOChronology in default zone\n      */\n     protected AbstractDateTime(\n     }\n \n     /**\n-     * Set the value as the number of miliseconds since the epoch,\n+     * Set the value as the number of milliseconds since the epoch,\n      * 1970-01-01T00:00:00Z.\n      * <p>\n      * Subclasses that wish to be immutable should override this method with an\n--- a/JodaTime/src/java/org/joda/time/AbstractPartialInstant.java\n+++ b/JodaTime/src/java/org/joda/time/AbstractPartialInstant.java\n     public abstract String toString();\n \n     /**\n-     * Set the value as the number of miliseconds since the epoch,\n+     * Set the value as the number of milliseconds since the epoch,\n      * 1970-01-01T00:00:00Z.\n      * <p>\n      * Subclasses that wish to be immutable should override this method with an\n--- a/JodaTime/src/java/org/joda/time/DateTime.java\n+++ b/JodaTime/src/java/org/joda/time/DateTime.java\n      * @param hourOfDay  the hour of the day\n      * @param minuteOfHour  the minute of the hour\n      * @param secondOfMinute  the second of the minute\n-     * @param millisOfSecond  the milisecond of the second\n+     * @param millisOfSecond  the millisecond of the second\n      */\n     public DateTime(\n             int year,\n      * @param hourOfDay  the hour of the day\n      * @param minuteOfHour  the minute of the hour\n      * @param secondOfMinute  the second of the minute\n-     * @param millisOfSecond  the milisecond of the second\n+     * @param millisOfSecond  the millisecond of the second\n      * @param zone  the time zone, null means default time zone\n      */\n     public DateTime(\n      * @param hourOfDay  the hour of the day\n      * @param minuteOfHour  the minute of the hour\n      * @param secondOfMinute  the second of the minute\n-     * @param millisOfSecond  the milisecond of the second\n+     * @param millisOfSecond  the millisecond of the second\n      * @param chronology  the chronology, null means ISOChronology in default zone\n      */\n     public DateTime(\n--- a/JodaTime/src/java/org/joda/time/MutableDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/MutableDateTime.java\n      * @param hourOfDay  the hour of the day\n      * @param minuteOfHour  the minute of the hour\n      * @param secondOfMinute  the second of the minute\n-     * @param millisOfSecond  the milisecond of the second\n+     * @param millisOfSecond  the millisecond of the second\n      */\n     public MutableDateTime(\n             int year,\n      * @param hourOfDay  the hour of the day\n      * @param minuteOfHour  the minute of the hour\n      * @param secondOfMinute  the second of the minute\n-     * @param millisOfSecond  the milisecond of the second\n+     * @param millisOfSecond  the millisecond of the second\n      * @param zone  the time zone, null means default time zone\n      */\n     public MutableDateTime(\n      * @param hourOfDay  the hour of the day\n      * @param minuteOfHour  the minute of the hour\n      * @param secondOfMinute  the second of the minute\n-     * @param millisOfSecond  the milisecond of the second\n+     * @param millisOfSecond  the millisecond of the second\n      * @param chronology  the chronology, null means ISOChronology in default zone\n      */\n     public MutableDateTime(\n      * @param hour  the hour\n      * @param minuteOfHour  the minute of the hour\n      * @param secondOfMinute  the second of the minute\n-     * @param millisOfSecond  the milisecond of the second\n+     * @param millisOfSecond  the millisecond of the second\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void setTime(\n      * @param hourOfDay  the hour of the day\n      * @param minuteOfHour  the minute of the hour\n      * @param secondOfMinute  the second of the minute\n-     * @param millisOfSecond  the milisecond of the second\n+     * @param millisOfSecond  the millisecond of the second\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void setDateTime(\n--- a/JodaTime/src/java/org/joda/time/ReadWritableDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/ReadWritableDateTime.java\n      * @param hour  the hour\n      * @param minuteOfHour  the minute of the hour\n      * @param secondOfMinute  the second of the minute\n-     * @param millisOfSecond  the milisecond of the second\n+     * @param millisOfSecond  the millisecond of the second\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     void setTime(int hour, int minuteOfHour, int secondOfMinute, int millisOfSecond);\n      * @param hourOfDay  the hour of the day\n      * @param minuteOfHour  the minute of the hour\n      * @param secondOfMinute  the second of the minute\n-     * @param millisOfSecond  the milisecond of the second\n+     * @param millisOfSecond  the millisecond of the second\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     void setDateTime(\n--- a/JodaTime/src/java/org/joda/time/ReadWritableInstant.java\n+++ b/JodaTime/src/java/org/joda/time/ReadWritableInstant.java\n public interface ReadWritableInstant extends ReadableInstant {\n \n     /**\n-     * Set the value as the number of miliseconds since\n+     * Set the value as the number of milliseconds since\n      * the epoch, 1970-01-01T00:00:00Z.\n      * \n      * @param instant  the milliseconds since 1970-01-01T00:00:00Z to set the\n--- a/JodaTime/src/java/org/joda/time/TimeOnly.java\n+++ b/JodaTime/src/java/org/joda/time/TimeOnly.java\n      * @param hourOfDay  the hour of the day\n      * @param minuteOfHour  the minute of the hour\n      * @param secondOfMinute  the second of the minute\n-     * @param millisOfSecond  the milisecond of the second\n+     * @param millisOfSecond  the millisecond of the second\n      */\n     public TimeOnly(\n             final int hourOfDay,\n      * @param hourOfDay  the hour of the day\n      * @param minuteOfHour  the minute of the hour\n      * @param secondOfMinute  the second of the minute\n-     * @param millisOfSecond  the milisecond of the second\n+     * @param millisOfSecond  the millisecond of the second\n      * @param chronology  the chronology, null means ISOChronology\n      */\n     public TimeOnly(", "timestamp": 1072051167, "metainfo": ""}