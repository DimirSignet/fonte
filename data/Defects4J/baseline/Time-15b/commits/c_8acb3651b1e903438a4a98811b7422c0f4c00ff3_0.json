{"sha": "8acb3651b1e903438a4a98811b7422c0f4c00ff3", "log": "Fixes resulting from testing   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/AbstractDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/AbstractDateTime.java\n import java.util.Locale;\n \n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.convert.ConverterManager;\n import org.joda.time.convert.InstantConverter;\n-import org.joda.time.convert.ConverterManager;\n import org.joda.time.format.DateTimeFormat;\n-import org.joda.time.format.ISODateTimeFormat;\n \n /**\n  * AbstractDateTime provides the common behaviour for datetime classes.\n     protected AbstractDateTime(final Object instant) {\n         super();\n         InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n-        iChronology = converter.getChronology(instant);\n+        iChronology = selectChronology(converter.getChronology(instant));\n         iMillis = converter.getInstantMillis(instant);\n     }\n \n     protected AbstractDateTime(final Object instant, final DateTimeZone zone) {\n         super();\n         InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n-        iChronology = converter.getChronology(instant, zone);\n+        iChronology = selectChronology(converter.getChronology(instant, zone));\n         iMillis = converter.getInstantMillis(instant, zone);\n     }\n \n     protected AbstractDateTime(final Object instant, final Chronology chronology) {\n         super();\n         InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n-        iChronology = converter.getChronology(instant, chronology);\n+        iChronology = selectChronology(converter.getChronology(instant, chronology));\n         iMillis = converter.getInstantMillis(instant, chronology);\n     }\n \n      *\n      * @return ISO8601 time formatted string.\n      */\n-    public String toString() {\n-        return ISODateTimeFormat.getInstance(getChronology()).dateTime().print(this);\n-    }\n+    public abstract String toString();\n \n     /**\n      * Output the instant using the specified format pattern.\n      *\n-     * @param pattern  the pattern specification\n-     * @throws IllegalArgumentException  if pattern is invalid\n+     * @param pattern  the pattern specification, null means use <code>toString</code>\n      * @see  org.joda.time.format.DateTimeFormat\n      */\n-    public String toString(String pattern) throws IllegalArgumentException {\n+    public String toString(String pattern) {\n+        if (pattern == null) {\n+            return toString();\n+        }\n         return DateTimeFormat.getInstance(getChronology()).forPattern(pattern).print(this);\n     }\n \n     /**\n      * Output the instant using the specified format pattern.\n      *\n-     * @param pattern  the pattern specification\n-     * @param locale  Locale to use, or default if null\n-     * @throws IllegalArgumentException  if pattern is invalid\n+     * @param pattern  the pattern specification, null means use <code>toString</code>\n+     * @param locale  Locale to use, null means default\n      * @see  org.joda.time.format.DateTimeFormat\n      */\n     public String toString(String pattern, Locale locale) throws IllegalArgumentException {\n+        if (pattern == null) {\n+            return toString();\n+        }\n         return DateTimeFormat.getInstance(getChronology(), locale).forPattern(pattern).print(this);\n     }\n \n     protected void setMillis(Object instant) {\n         // Don't set iMillis directly, as it may provide a backdoor to\n         // immutable subclasses.\n-        if (instant instanceof ReadableInstant) {\n-            setMillis(((ReadableInstant) instant).getMillis());\n-        } else {\n-            InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n-            setMillis(converter.getInstantMillis(instant));\n-        }\n+        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n+        setMillis(converter.getInstantMillis(instant));\n     }\n \n     /**\n--- a/JodaTime/src/java/org/joda/time/AbstractInstant.java\n+++ b/JodaTime/src/java/org/joda/time/AbstractInstant.java\n \n         DateTimeZone trusted = DateTimeZone.getInstance(zone.getID());\n         \n-        if (zone == trusted && this instanceof DateTime\n-            && getChronology() instanceof ISOChronology) {\n+        if (zone == trusted &&\n+            getClass() == DateTime.class &&\n+            getChronology().getClass() == ISOChronology.class) {\n             return (DateTime) this;\n         }\n         \n      * <p>\n      * All ReadableInstant instances are accepted.\n      *\n-     * @param readableInstant  a readable instant to check against\n+     * @param instant  a readable instant to check against\n      * @return negative value if this is less, 0 if equal, or positive value if greater\n      * @throws NullPointerException if the object is null\n      * @throws ClassCastException if the object type is not supported\n      */\n-    public final int compareTo(Object readableInstant) {\n-        if (this == readableInstant) {\n+    public final int compareTo(Object instant) {\n+        if (this == instant) {\n             return 0;\n         }\n \n-        ReadableInstant otherInstant = (ReadableInstant) readableInstant;\n+        ReadableInstant otherInstant = (ReadableInstant) instant;\n \n         long otherMillis = otherInstant.getMillis();\n         long thisMillis = getMillis();\n     /**\n      * Is the millisecond value after the millisecond passed in.\n      *\n-     * @param readableInstant  an instant to check against\n+     * @param instant  an instant to check against, null returns false\n      * @return true if the instant is after the instant passed in\n-     * @throws IllegalArgumentException if the object is null\n-     */\n-    public final boolean isAfter(ReadableInstant readableInstant) {\n-        if (readableInstant == null) {\n-            throw new IllegalArgumentException(\"The instant must not be null\");\n-        }\n-        return (getMillis() > readableInstant.getMillis());\n+     */\n+    public final boolean isAfter(ReadableInstant instant) {\n+        if (instant == null) {\n+            return false;\n+        }\n+        return (getMillis() > instant.getMillis());\n     }\n \n     /**\n      * Is the millisecond value before the millisecond passed in.\n      *\n-     * @param readableInstant  an instant to check against\n+     * @param instant  an instant to check against, null returns false\n      * @return true if the instant is before the instant passed in\n-     * @throws IllegalArgumentException if the object is null\n-     */\n-    public final boolean isBefore(ReadableInstant readableInstant) {\n-        if (readableInstant == null) {\n-            throw new IllegalArgumentException(\"The instant must not be null\");\n-        }\n-        return (getMillis() < readableInstant.getMillis());\n+     */\n+    public final boolean isBefore(ReadableInstant instant) {\n+        if (instant == null) {\n+            return false;\n+        }\n+        return (getMillis() < instant.getMillis());\n     }\n \n     /**\n      * Is the millisecond value equal to the millisecond passed in.\n      *\n-     * @param readableInstant  an instant to check against\n+     * @param instant  an instant to check against, null returns false\n      * @return true if the instant is equal to the instant passed in\n-     * @throws IllegalArgumentException if the object is null\n-     */\n-    public final boolean isEqual(ReadableInstant readableInstant) {\n-        if (readableInstant == null) {\n-            throw new IllegalArgumentException(\"The instant must not be null\");\n-        }\n-        return (getMillis() == readableInstant.getMillis());\n+     */\n+    public final boolean isEqual(ReadableInstant instant) {\n+        if (instant == null) {\n+            return false;\n+        }\n+        return (getMillis() == instant.getMillis());\n     }\n \n     // Output    ", "timestamp": 1088894301, "metainfo": ""}