{"sha": "534cb58fd7673b3c66b454b43311b22b4bd8d1ab", "log": "Test MutableDateTime   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/MutableDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/MutableDateTime.java\n \n import java.io.Serializable;\n \n-import org.joda.time.chrono.ISOChronology;\n import org.joda.time.convert.ConverterManager;\n import org.joda.time.convert.DurationConverter;\n import org.joda.time.convert.InstantConverter;\n      * \n      * @param field  the DateTimeField to use\n      * @param value the value\n-     * @throws NullPointerException if the field is null\n+     * @throws IllegalArgumentException if the field is null\n+     * @throws IllegalArgumentException if the value is invalid\n      */\n     public void set(final DateTimeField field, final int value) {\n+        if (field == null) {\n+            throw new IllegalArgumentException(\"The DateTimeField must not be null\");\n+        }\n         setMillis(field.set(getMillis(), value));\n     }\n \n      * \n      * @param field  the DateTimeField to use\n      * @param value the value\n-     * @throws NullPointerException if the field is null\n+     * @throws IllegalArgumentException if the field is null\n+     * @throws IllegalArgumentException if the value is invalid\n      */\n     public void add(final DateTimeField field, final int value) {\n+        if (field == null) {\n+            throw new IllegalArgumentException(\"The DateTimeField must not be null\");\n+        }\n         setMillis(field.add(getMillis(), value));\n     }\n \n      * \n      * @param field  the DateTimeField to use\n      * @param value the value\n-     * @throws NullPointerException if the field is null\n+     * @throws IllegalArgumentException if the field is null\n+     * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addWrapField(final DateTimeField field, final int value) {\n+        if (field == null) {\n+            throw new IllegalArgumentException(\"The DateTimeField must not be null\");\n+        }\n         setMillis(field.addWrapField(getMillis(), value));\n     }\n \n      * @throws IllegalArgumentException if the object is null or invalid\n      */\n     public void setDate(final Object instant) {\n-        if (instant instanceof ReadableInstant) {\n-            setDate(((ReadableInstant) instant).getMillis());\n-        } else {\n-            InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n-            setDate(converter.getInstantMillis(instant));\n-        }\n+        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n+        setDate(converter.getInstantMillis(instant));\n     }\n \n     /**\n     }\n \n     /**\n-     * Set the date from an object representing an instant.\n+     * Set the time from an object representing an instant.\n      * The date part of this object will be unaffected.\n      * <p>\n      * The recognised object types are defined in {@link ConverterManager} and\n      * @throws IllegalArgumentException if the object is null or invalid\n      */\n     public void setTime(final Object instant) {\n-        if (instant instanceof ReadableInstant) {\n-            setDateTime(((ReadableInstant) instant).getMillis());\n-        } else {\n-            InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n-            setDateTime(converter.getInstantMillis(instant));\n-        }\n+        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n+        setTime(converter.getInstantMillis(instant));\n     }\n \n     /**\n      * @throws IllegalArgumentException if the object is null or invalid\n      */\n     public void setDateTime(final Object instant) {\n-        setDateTime(instant);\n+        setMillis(instant);\n     }\n \n     /**\n--- a/JodaTime/src/java/org/joda/time/ReadWritableInstant.java\n+++ b/JodaTime/src/java/org/joda/time/ReadWritableInstant.java\n      *\n      * @param field  a DateTimeField instance, usually obtained from a Chronology\n      * @param value  the value of that field for the millis set in the implementation\n+     * @throws IllegalArgumentException if the field is null\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     void set(DateTimeField field, int value);\n      *\n      * @param field  a DateTimeField instance, usually obtained from a Chronology\n      * @param value  the value of that field for the millis set in the implementation\n+     * @throws IllegalArgumentException if the field is null\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     void add(DateTimeField field, int value);\n      *\n      * @param field  a DateTimeField instance, usually obtained from a Chronology\n      * @param value  the value of that field for the millis set in the implementation\n+     * @throws IllegalArgumentException if the field is null\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     void addWrapField(DateTimeField field, int value);", "timestamp": 1090074280, "metainfo": ""}