{"sha": "a625a7508e26235e11494f01cdce84534cb2863e", "log": "Avoid backwards incompatibilty by sacrificing Javadoc  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DurationField.java\n+++ b/JodaTime/src/java/org/joda/time/DurationField.java\n      */\n     public abstract long getDifferenceAsLong(long minuendInstant, long subtrahendInstant);\n \n-    /**\n-     * Compares this duration field with another duration field for ascending\n-     * unit millisecond order. This ordering is inconsistent with equals, as it\n-     * ignores name and precision.\n-     *\n-     * @param durationField  a duration field to check against\n-     * @return negative value if this is less, 0 if equal, or positive value if greater\n-     * @throws NullPointerException if the object is null\n-     * @throws ClassCastException if the object type is not supported\n-     */\n-    public abstract int compareTo(DurationField durationField);\n+    // Adding this definition would be backwards incompatible with earlier subclasses\n+    // This definition of compareTo was present in previous versions, and still applies\n+//    /**\n+//     * Compares this duration field with another duration field for ascending\n+//     * unit millisecond order. This ordering is inconsistent with equals, as it\n+//     * ignores name and precision.\n+//     *\n+//     * @param durationField  a duration field to check against\n+//     * @return negative value if this is less, 0 if equal, or positive value if greater\n+//     * @throws NullPointerException if the object is null\n+//     * @throws ClassCastException if the object type is not supported\n+//     */\n+//    public abstract int compareTo(DurationField durationField);\n \n     /**\n      * Returns a localized unit name of this field, using the given value as an", "timestamp": 1272806114, "metainfo": ""}