{"sha": "becd808db463a8a568b4372ce646265a4e6b55ec", "log": "Unify method handling, removing Object parameter methods   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/MutableDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/MutableDateTime.java\n \n import org.joda.time.base.BaseDateTime;\n import org.joda.time.chrono.ISOChronology;\n-import org.joda.time.convert.ConverterManager;\n-import org.joda.time.convert.DurationConverter;\n-import org.joda.time.convert.InstantConverter;\n import org.joda.time.field.FieldUtils;\n import org.joda.time.format.ISODateTimeFormat;\n import org.joda.time.property.ReadWritableInstantFieldProperty;\n         setMillis(getMillis());\n     }\n \n-    // Millis\n     //-----------------------------------------------------------------------\n     /**\n      * Set the milliseconds of the datetime.\n     }\n \n     /**\n-     * Set the date and time from an object representing an instant.\n-     * <p>\n-     * The recognised object types are defined in {@link ConverterManager} and\n-     * include ReadableInstant, String, Calendar and Date.\n-     *\n-     * @param instant  an object representing an instant\n-     * @throws IllegalArgumentException if the object is invalid\n-     * @see #setDateTime(Object)\n-     */\n-    public void setMillis(Object instant) {\n-        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n-        setMillis(converter.getInstantMillis(instant));  // set via this class not super\n-    }\n-\n-    // Add\n+     * Sets the millisecond instant of this instant from another.\n+     * <p>\n+     * This method does not change the chronology of this instant, just the\n+     * millisecond instant.\n+     * \n+     * @param instant  the instant to use, null means now\n+     */\n+    public void setMillis(ReadableInstant instant) {\n+        long instantMillis = DateTimeUtils.getInstantMillis(instant);\n+        setMillis(instantMillis);  // set via this class not super\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add an amount of time to the datetime.\n     }\n \n     /**\n-     * Adds an amount of time to this instant.\n-     * <p>\n-     * If the resulting value is too large for the implementation,\n-     * an exception is thrown.\n-     * <p>\n-     * The recognised object types are defined in {@link ConverterManager} and\n-     * include ReadableDuration, String and Long.\n-     *\n-     * @param duration  an object representing a duration\n-     * @throws IllegalArgumentException if the duration is invalid\n+     * Adds a duration to this instant.\n+     * <p>\n+     * This will typically change the value of most fields.\n+     *\n+     * @param duration  the duration to add, null means add zero\n      * @throws ArithmeticException if the result exceeds the capacity of the instant\n      */\n-    public void add(Object duration) {\n+    public void add(ReadableDuration duration) {\n         add(duration, 1);\n     }\n \n     /**\n-     * Adds an amount of time to this instant specifying how many times to add.\n-     * <p>\n-     * If the resulting value is too large for the implementation,\n-     * an exception is thrown.\n-     * <p>\n-     * The recognised object types are defined in {@link ConverterManager} and\n-     * include ReadableDuration, String and Long.\n-     *\n-     * @param duration  duration to add.\n+     * Adds a duration to this instant specifying how many times to add.\n+     * <p>\n+     * This will typically change the value of most fields.\n+     *\n+     * @param duration  the duration to add, null means add zero\n      * @param scalar  direction and amount to add, which may be negative\n-     * @throws IllegalArgumentException if the duration is invalid\n      * @throws ArithmeticException if the result exceeds the capacity of the instant\n      */\n-    public void add(Object duration, int scalar) {\n-        if (duration instanceof ReadablePeriod) {\n-            ReadablePeriod d = (ReadablePeriod) duration;\n-            d.addInto(this, scalar);\n-        } else {\n-            DurationConverter converter = ConverterManager.getInstance().getDurationConverter(duration);\n-            add(FieldUtils.safeMultiply(converter.getDurationMillis(duration), scalar));\n+    public void add(ReadableDuration duration, int scalar) {\n+        if (duration != null) {\n+            add(FieldUtils.safeMultiply(duration.getMillis(), scalar));\n         }\n     }\n \n-    // Chronology\n+    /**\n+     * Adds a period to this instant.\n+     * <p>\n+     * This will typically change the value of most fields.\n+     *\n+     * @param period  the period to add, null means add zero\n+     * @throws ArithmeticException if the result exceeds the capacity of the instant\n+     */\n+    public void add(ReadablePeriod period) {\n+        add(period, 1);\n+    }\n+\n+    /**\n+     * Adds a period to this instant specifying how many times to add.\n+     * <p>\n+     * This will typically change the value of most fields.\n+     *\n+     * @param period  the period to add, null means add zero\n+     * @param scalar  direction and amount to add, which may be negative\n+     * @throws ArithmeticException if the result exceeds the capacity of the instant\n+     */\n+    public void add(ReadablePeriod period, int scalar) {\n+        if (period != null) {\n+            setMillis(period.addTo(getMillis(), scalar));  // set via this class not super\n+        }\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Set the chronology of the datetime.\n         super.setChronology(chronology);\n     }\n \n-    // Time zone\n     //-----------------------------------------------------------------------\n     /**\n      * Sets the time zone of the datetime, changing the chronology and field values.\n         setMillis(millis);\n     }\n \n-    // Field based\n     //-----------------------------------------------------------------------\n     /**\n      * Sets the value of the specified field.\n     }\n \n     /**\n-     * Adds to the value to the specified field.\n-     * It is permitted to use a field from another Chronology.\n-     * For example:\n-     * <pre>\n-     * MutableDateTime dt = new MutableDateTime();\n-     * dt.add(GJChronology.getInstance().year(), 2);\n-     * </pre>\n-     * Where possible the {@link #add(DurationField, int)} is a better choice as\n-     * it is more explicit about what is being added.\n-     * \n-     * @param field  the DateTimeField to use\n-     * @param value the value\n-     * @throws IllegalArgumentException if the field is null\n-     * @throws IllegalArgumentException if the value is invalid\n-     */\n-    public void add(final DateTimeField field, final int value) {\n-        if (field == null) {\n-            throw new IllegalArgumentException(\"The DateTimeField must not be null\");\n-        }\n-        setMillis(field.add(getMillis(), value));\n-    }\n-\n-    /**\n      * Adds the to the datetime the amount represented by the duration multiplied by the value.\n      * It is permitted to use a field from another Chronology.\n      * For example:\n         setMillis(field.add(getMillis(), value));\n     }\n \n-    /**\n-     * Add a value to the specified field, wrapping within that field.\n-     * It is permitted to use a field from another Chronology.\n-     * For example:\n-     * <pre>\n-     * MutableDateTime dt = new MutableDateTime();\n-     * addWrapField(GJChronology.getInstance().monthOfYear(), 6);\n-     * </pre>\n-     * \n-     * @param field  the DateTimeField to use\n-     * @param value the value\n-     * @throws IllegalArgumentException if the field is null\n-     * @throws IllegalArgumentException if the value is invalid\n-     */\n-    public void addWrapField(final DateTimeField field, final int value) {\n-        if (field == null) {\n-            throw new IllegalArgumentException(\"The DateTimeField must not be null\");\n-        }\n-        setMillis(field.addWrapField(getMillis(), value));\n-    }\n-\n-    // Date methods\n     //-----------------------------------------------------------------------\n     /**\n      * Set the year to the specified value.\n         setMillis(getChronology().days().add(getMillis(), days));\n     }\n \n-    // Time methods\n     //-----------------------------------------------------------------------\n     /**\n      * Set the hour of the day to the specified value.\n         setMillis(getChronology().millis().add(getMillis(), millis));\n     }\n \n-    // Setters\n     //-----------------------------------------------------------------------\n     /**\n      * Set the date from milliseconds.\n      * The time part of this object will be unaffected.\n      *\n-     * @param instant  milliseconds from 1970-01-01T00:00:00Z, time part ignored\n+     * @param instant  an instant to copy the date from, time part ignored\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void setDate(final long instant) {\n     }\n \n     /**\n-     * Set the date from an object representing an instant.\n+     * Set the date from another instant.\n      * The time part of this object will be unaffected.\n-     * <p>\n-     * The recognised object types are defined in {@link ConverterManager} and\n-     * include ReadableInstant, String, Calendar and Date.\n-     *\n-     * @param instant  an object representing an instant, time part ignored\n+     *\n+     * @param instant  an instant to copy the date from, time part ignored\n      * @throws IllegalArgumentException if the object is invalid\n      */\n-    public void setDate(final Object instant) {\n-        // TODO: Does time zone need to be considered? See setTime(Object)\n-        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n-        setDate(converter.getInstantMillis(instant));\n+    public void setDate(final ReadableInstant instant) {\n+        // TODO: Does time zone need to be considered? See setTime(ReadableInstant)\n+        long instantMillis = DateTimeUtils.getInstantMillis(instant);\n+        setDate(instantMillis);\n     }\n \n     /**\n      * Set the time from milliseconds.\n      * The date part of this object will be unaffected.\n      *\n-     * @param millis milliseconds from T00:00:00Z, date part ignored\n+     * @param instant  an instant to copy the time from, date part ignored\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void setTime(final long millis) {\n     }\n \n     /**\n-     * Set the time from an object representing an instant.\n+     * Set the time from another instant.\n      * The date part of this object will be unaffected.\n-     * <p>\n-     * The recognised object types are defined in {@link ConverterManager} and\n-     * include ReadableInstant, String, Calendar and Date.\n-     *\n-     * @param instant  an object representing an instant, date part ignored\n+     *\n+     * @param instant  an instant to copy the time from, date part ignored\n      * @throws IllegalArgumentException if the object is invalid\n      */\n-    public void setTime(final Object instant) {\n-        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n-        long millis = converter.getInstantMillis(instant);\n-        DateTimeZone zone = converter.getChronology(instant).getZone();\n+    public void setTime(final ReadableInstant instant) {\n+        long instantMillis = DateTimeUtils.getInstantMillis(instant);\n+        Chronology instantChrono = DateTimeUtils.getInstantChronology(instant);\n+        DateTimeZone zone = instantChrono.getZone();\n         if (zone != null) {\n-            millis = zone.getMillisKeepLocal(DateTimeZone.UTC, millis);\n+            instantMillis = zone.getMillisKeepLocal(DateTimeZone.UTC, instantMillis);\n         }\n-        setTime(millis);\n+        setTime(instantMillis);\n     }\n \n     /**\n             final int millisOfSecond) {\n         long instant = getChronology().getDateTimeMillis(\n             getMillis(), hour, minuteOfHour, secondOfMinute, millisOfSecond);\n-        setMillis(instant);\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n-     * Set the date and time from milliseconds.\n-     * This method is a synonym for {@link #setMillis(long)}.\n-     *\n-     * @param instant  the milliseconds from 1970-01-01T00:00:00Z\n-     * @throws IllegalArgumentException if the value is invalid\n-     */\n-    public void setDateTime(final long instant) {\n-        setMillis(instant);\n-    }\n-\n-    /**\n-     * Set the date and time from an object representing an instant.\n-     * This method is a synonym for {@link #setMillis(Object)}.\n-     * <p>\n-     * The recognised object types are defined in {@link ConverterManager} and\n-     * include ReadableInstant, String, Calendar and Date.\n-     *\n-     * @param instant  an object representing an instant\n-     * @throws IllegalArgumentException if the object is invalid\n-     */\n-    public void setDateTime(final Object instant) {\n         setMillis(instant);\n     }\n \n             final int millisOfSecond) {\n         long instant = getChronology().getDateTimeMillis(\n             year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        setDateTime(instant);\n-    }\n-\n-    // Date properties\n+        setMillis(instant);\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Get the era property.\n         return new ReadWritableInstantFieldProperty(this, getChronology().dayOfWeek());\n     }\n \n-    // Time properties\n     //-----------------------------------------------------------------------\n     /**\n      * Get the hour of day field property\n         return new ReadWritableInstantFieldProperty(this, getChronology().millisOfSecond());\n     }\n \n-    // Misc\n     //-----------------------------------------------------------------------\n     /**\n      * Clone this object without having to cast the returned object.\n         return (MutableDateTime)clone();\n     }\n \n-    // Basics\n     //-----------------------------------------------------------------------\n     /**\n      * Clone this object.\n--- a/JodaTime/src/java/org/joda/time/ReadWritableDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/ReadWritableDateTime.java\n      */\n     void addMillis(int millis);\n \n-    //-----------------------------------------------------------------------\n-    /**\n-     * Set the date from milliseconds.\n-     * The time part of this object will be unaffected.\n-     *\n-     * @param instant  milliseconds from 1970-01-01T00:00:00Z, time part ignored\n-     * @throws IllegalArgumentException if the value is invalid\n-     */\n-    void setDate(long instant);\n-\n-    /**\n-     * Set the date from an object representing an instant.\n-     * The time part of this object will be unaffected.\n-     * <p>\n-     * The recognised object types are defined in\n-     * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n-     * include ReadableInstant, String, Calendar and Date.\n-     *\n-     * @param instant  an object representing an instant, time part ignored\n-     * @throws IllegalArgumentException if the object is null or invalid\n-     */\n-    void setDate(Object instant);\n-\n     /**\n      * Set the date from fields.\n      * The time part of this object will be unaffected.\n      * @param year  the year\n      * @param monthOfYear  the month of the year\n      * @param dayOfMonth  the day of the month\n-     * @throws IllegalArgumentException if the value is invalid\n+     * @throws IllegalArgumentException if any value is invalid\n      */\n     void setDate(int year, int monthOfYear, int dayOfMonth);\n-\n-    //-----------------------------------------------------------------------\n-    /**\n-     * Set the time from milliseconds.\n-     * The date part of this object will be unaffected.\n-     *\n-     * @param millis milliseconds from T00:00:00Z, date part ignored\n-     * @throws IllegalArgumentException if the value is invalid\n-     */\n-    void setTime(long millis);\n-\n-    /**\n-     * Set the date from an object representing an instant.\n-     * The date part of this object will be unaffected.\n-     * <p>\n-     * The recognised object types are defined in\n-     * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n-     * include ReadableInstant, String, Calendar and Date.\n-     *\n-     * @param instant  an object representing an instant, date part ignored\n-     * @throws IllegalArgumentException if the object is null or invalid\n-     */\n-    void setTime(Object instant);\n \n     /**\n      * Set the time from fields.\n      * @param minuteOfHour  the minute of the hour\n      * @param secondOfMinute  the second of the minute\n      * @param millisOfSecond  the millisecond of the second\n-     * @throws IllegalArgumentException if the value is invalid\n+     * @throws IllegalArgumentException if any value is invalid\n      */\n     void setTime(int hour, int minuteOfHour, int secondOfMinute, int millisOfSecond);\n-\n-    //-----------------------------------------------------------------------\n-    /**\n-     * Set the date and time from milliseconds.\n-     * This method is a synonym for {@link #setMillis(long)}.\n-     *\n-     * @param instant  the milliseconds from 1970-01-01T00:00:00Z\n-     * @throws IllegalArgumentException if the value is invalid\n-     */\n-    void setDateTime(long instant);\n-\n-    /**\n-     * Set the date and time from an object representing an instant.\n-     * This method is a synonym for {@link #setMillis(Object)}.\n-     * <p>\n-     * The recognised object types are defined in\n-     * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n-     * include ReadableInstant, String, Calendar and Date.\n-     *\n-     * @param instant  an object representing an instant\n-     * @throws IllegalArgumentException if the object is null or invalid\n-     */\n-    void setDateTime(Object instant);\n \n     /**\n      * Set the date and time from fields.\n      * @param minuteOfHour  the minute of the hour\n      * @param secondOfMinute  the second of the minute\n      * @param millisOfSecond  the millisecond of the second\n-     * @throws IllegalArgumentException if the value is invalid\n+     * @throws IllegalArgumentException if any value is invalid\n      */\n     void setDateTime(\n         int year, int monthOfYear, int dayOfMonth,\n--- a/JodaTime/src/java/org/joda/time/ReadWritableInstant.java\n+++ b/JodaTime/src/java/org/joda/time/ReadWritableInstant.java\n     void setMillis(long instant);\n \n     /**\n-     * Sets the value from an Object representing an instant.\n-     * <p>\n-     * The recognised object types are defined in\n-     * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n-     * include ReadableInstant, String, Calendar and Date.\n-     * \n-     * @param instant  an object representing an instant\n-     * @throws IllegalArgumentException if the value is invalid\n-     */\n-    void setMillis(Object instant);\n+     * Sets the millisecond instant of this instant from another.\n+     * <p>\n+     * This method does not change the chronology of this instant, just the\n+     * millisecond instant.\n+     * \n+     * @param instant  the instant to use, null means now\n+     */\n+    void setMillis(ReadableInstant instant);\n \n     /**\n      * Sets the chronology of the datetime, which has no effect if not applicable.\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Adds a number of millis to the value.\n-     * <p>\n-     * If the resulting value is too large for millis, seconds\n-     * will change and so on unless it is too large for the\n-     * implementation, when an exception is thrown.\n+     * Adds a millisecond duration to this instant.\n+     * <p>\n+     * This will typically change the value of ost fields.\n      *\n      * @param duration  the millis to add\n      * @throws IllegalArgumentException if the value is invalid\n     void add(long duration);\n \n     /**\n-     * Adds an amount of time to this instant.\n-     * <p>\n-     * If the resulting value is too large for the implementation,\n-     * an exception is thrown.\n-     * <p>\n-     * The recognised object types are defined in\n-     * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n-     * include ReadableDuration, String and Long.\n-     *\n-     * @param duration  an object representing a duration\n-     * @throws IllegalArgumentException if the duration is invalid\n-     * @throws ArithmeticException if the result exceeds the capacity of the instant\n-     */\n-    void add(Object duration);\n-\n-    /**\n-     * Adds an amount of time to this instant specifying how many times to add.\n-     * <p>\n-     * If the resulting value is too large for the implementation,\n-     * an exception is thrown.\n-     * <p>\n-     * The recognised object types are defined in\n-     * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n-     * include ReadableDuration, String and Long.\n-     *\n-     * @param duration  an object representing a duration\n+     * Adds a duration to this instant.\n+     * <p>\n+     * This will typically change the value of most fields.\n+     *\n+     * @param duration  the duration to add, null means add zero\n+     * @throws ArithmeticException if the result exceeds the capacity of the instant\n+     */\n+    void add(ReadableDuration duration);\n+\n+    /**\n+     * Adds a duration to this instant specifying how many times to add.\n+     * <p>\n+     * This will typically change the value of most fields.\n+     *\n+     * @param duration  the duration to add, null means add zero\n      * @param scalar  direction and amount to add, which may be negative\n-     * @throws IllegalArgumentException if the duration is invalid\n-     * @throws ArithmeticException if the result exceeds the capacity of the instant\n-     */\n-    void add(Object duration, int scalar);\n+     * @throws ArithmeticException if the result exceeds the capacity of the instant\n+     */\n+    void add(ReadableDuration duration, int scalar);\n+\n+    /**\n+     * Adds a period to this instant.\n+     * <p>\n+     * This will typically change the value of most fields.\n+     *\n+     * @param period  the period to add, null means add zero\n+     * @throws ArithmeticException if the result exceeds the capacity of the instant\n+     */\n+    void add(ReadablePeriod period);\n+\n+    /**\n+     * Adds a period to this instant specifying how many times to add.\n+     * <p>\n+     * This will typically change the value of most fields.\n+     *\n+     * @param period  the period to add, null means add zero\n+     * @param scalar  direction and amount to add, which may be negative\n+     * @throws ArithmeticException if the result exceeds the capacity of the instant\n+     */\n+    void add(ReadablePeriod period, int scalar);\n \n     //-----------------------------------------------------------------------\n     /**\n      */\n     void add(DurationField field, int value);\n \n-    /**\n-     * Adds to the value of one of the fields of a datetime, wrapping within that field.\n-     * <p>\n-     * For example, 2002-03-01 add 14 months gives 2003-05-01. But 2002-03-01 add wrapped\n-     * 14 months gives 2002-05-01. This is similar to the <code>roll</code> method on Calendar.\n-     * <p>\n-     * DateTimeField instances are generally obtained from a {@link Chronology} subclass.\n-     * However, an application can create its own DateTimeField to manipulate the\n-     * date time millis in new ways.\n-     *\n-     * @param field  a DateTimeField instance, usually obtained from a Chronology\n-     * @param value  the number of times to add the duration\n-     * @throws IllegalArgumentException if the field is null\n-     * @throws IllegalArgumentException if the value is invalid\n-     */\n-    void addWrapField(DateTimeField field, int value);\n-\n }\n--- a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testAdd_Object1() {\n-        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n-        test.add(new Long(123456L));\n+    public void testAdd_RD1() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.add(new Duration(123456L));\n         assertEquals(TEST_TIME1 + 123456L, test.getMillis());\n     }\n \n-    public void testAdd_Object2() {\n-        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n-        test.add((Object) null);\n-        assertEquals(TEST_TIME1, test.getMillis());\n-    }\n-\n-    public void testAdd_Object3() {\n+    public void testAdd_RD2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.add((ReadableDuration) null);\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAdd_RD_int1() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.add(new Duration(123456L), -2);\n+        assertEquals(TEST_TIME1 - (2L * 123456L), test.getMillis());\n+    }\n+\n+    public void testAdd_RD_int2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.add((ReadableDuration) null, 1);\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAdd_RP1() {\n         Period d = new Period(1, 1, 0, 1, 1, 1, 1, 1);\n         MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n         assertEquals(\"2002-06-09T05:06:07.008+01:00\", test.toString());\n         assertEquals(\"2003-07-10T06:07:08.009+01:00\", test.toString());\n     }\n \n-    //-----------------------------------------------------------------------\n-    public void testAdd_Object_int1() {\n-        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n-        test.add(new Long(123L), -2);\n-        assertEquals(TEST_TIME1 + (-2 * 123L), test.getMillis());\n-    }\n-\n-    public void testAdd_Object_int2() {\n-        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n-        test.add((ReadableDuration) null, 1);\n-        assertEquals(TEST_TIME1, test.getMillis());\n-        assertEquals(ISOChronology.getInstance(), test.getChronology());\n-    }\n-\n-    public void testAdd_Object_int3() {\n-        Period d = new Period(1, 1, 0, 1, 1, 1, 1, 1);\n-        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n-        assertEquals(\"2002-06-09T05:06:07.008+01:00\", test.toString());\n+    public void testAdd_RP2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.add((ReadablePeriod) null);\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAdd_RP_int1() {\n+        Period d = new Period(0, 0, 0, 0, 0, 0, 1, 2);\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n         test.add(d, -2);\n-        assertEquals(\"2000-04-07T03:04:05.006+01:00\", test.toString());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testAdd_DateTimeField_int1() {\n-        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n-        test.add(ISOChronology.getInstance().year(), 8);\n-        assertEquals(2010, test.getYear());\n-    }\n-\n-    public void testAdd_DateTimeField_int2() {\n-        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n-        try {\n-            test.add((DateTimeField) null, 2010);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n+        assertEquals(TEST_TIME1 - (2L * 1002L), test.getMillis());\n+    }\n+\n+    public void testAdd_RP_int2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.add((ReadablePeriod) null, 1);\n         assertEquals(TEST_TIME1, test.getMillis());\n     }\n \n     }\n \n     //-----------------------------------------------------------------------\n-    public void testAddWrapField_DateTimeField_int1() {\n-        MutableDateTime test = new MutableDateTime(2002, 6, 1, 0, 0, 0, 0);\n-        test.addWrapField(ISOChronology.getInstance().monthOfYear(), 8);\n-        assertEquals(2, test.getMonthOfYear());\n-    }\n-\n-    public void testAddWrapField_DateTimeField_int2() {\n-        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n-        try {\n-            test.addWrapField(null, 2010);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        assertEquals(TEST_TIME1, test.getMillis());\n-    }\n-\n-    //-----------------------------------------------------------------------\n     public void testAddYears_int1() {\n         MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n         test.addYears(8);\n--- a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n \n     }        \n \n     //-----------------------------------------------------------------------\n-    public void testSetMillis_Object1() {\n-        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n-        test.setMillis(new Long(TEST_TIME2));\n+    public void testSetMillis_RI1() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1, BuddhistChronology.getInstance());\n+        test.setMillis(new Instant(TEST_TIME2));\n         assertEquals(TEST_TIME2, test.getMillis());\n-        assertEquals(ISOChronology.getInstance(), test.getChronology());\n-    }\n-\n-    public void testSetMillis_Object2() {\n-        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        assertEquals(BuddhistChronology.getInstance(), test.getChronology());\n+    }\n+\n+    public void testSetMillis_RI2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1, BuddhistChronology.getInstance());\n         test.setMillis(null);\n         assertEquals(TEST_TIME_NOW, test.getMillis());\n-        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(BuddhistChronology.getInstance(), test.getChronology());\n     }\n \n     //-----------------------------------------------------------------------\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSetDate_Object1() {\n-        Long setter = new Long(new DateTime(2010, 12, 3, 5, 7, 9, 501).getMillis());\n+    public void testSetDate_RI1() {\n+        DateTime setter = new DateTime(2010, 12, 3, 5, 7, 9, 501);\n         MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501);\n         test.setDate(setter);\n         assertEquals(2010, test.getYear());\n         assertEquals(501, test.getMillisOfSecond());\n     }\n \n-    public void testSetDate_Object2() {\n+    public void testSetDate_RI2() {\n         MutableDateTime test = new MutableDateTime(2010, 7, 8, 12, 24, 48, 501);\n         test.setDate(null);  // sets to TEST_TIME_NOW\n         assertEquals(2002, test.getYear());\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSetTime_Object1() {\n-        Long setter = new Long(new DateTime(2010, 12, 3, 5, 7, 9, 11).getMillis());\n+    public void testSetTime_RI1() {\n+        DateTime setter = new DateTime(2010, 12, 3, 5, 7, 9, 11);\n         MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501);\n         test.setTime(setter);\n         assertEquals(2002, test.getYear());\n         assertEquals(11, test.getMillisOfSecond());\n     }\n \n-    public void testSetTime_Object2() {\n+    public void testSetTime_RI2() {\n         MutableDateTime test = new MutableDateTime(2010, 7, 8, 12, 24, 48, 501);\n         test.setTime(null);  // sets to TEST_TIME_NOW, which has no time part\n         assertEquals(2010, test.getYear());\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSetDateTime_long1() {\n-        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n-        test.setDateTime(TEST_TIME2);\n-        assertEquals(TEST_TIME2, test.getMillis());\n-        assertEquals(ISOChronology.getInstance(), test.getChronology());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testSetDateTime_Object1() {\n-        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n-        test.setDateTime(new Long(TEST_TIME2));\n-        assertEquals(TEST_TIME2, test.getMillis());\n-        assertEquals(ISOChronology.getInstance(), test.getChronology());\n-    }\n-\n-    public void testSetDateTime_Object2() {\n-        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n-        test.setDateTime(null);\n-        assertEquals(TEST_TIME_NOW, test.getMillis());\n-        assertEquals(ISOChronology.getInstance(), test.getChronology());\n-    }\n-\n-    //-----------------------------------------------------------------------\n     public void testSetYear_int1() {\n         MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n         test.setYear(2010);", "timestamp": 1093129101, "metainfo": ""}