{"sha": "ae61437e564734077ea36e26d6e0378af3288571", "log": "Using APIs that are available in guava-r03.jar  ", "commit": "\n--- a/src/com/google/javascript/jscomp/DataFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/DataFlowAnalysis.java\n     }\n \n     void setOut(List<L> out) {\n-      Preconditions.checkContentsNotNull(out);\n+      Preconditions.checkNotNull(out);\n+      for (L item : out) {\n+        Preconditions.checkNotNull(item);\n+      }\n       this.out = out;\n     }\n \n--- a/src/com/google/javascript/jscomp/RecordFunctionInformation.java\n+++ b/src/com/google/javascript/jscomp/RecordFunctionInformation.java\n  */\n package com.google.javascript.jscomp;\n \n+import com.google.common.collect.Iterables;\n import com.google.common.collect.Sets;\n import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n \n import java.util.Comparator;\n+import java.util.TreeSet;\n \n /**\n  * Records information about functions and modules.\n       addModuleInformation(null);\n     } else {\n       // The test expects a consistent module order.\n-      for (JSModule m : Sets.newTreeSet(new Comparator<JSModule>() {\n-            public int compare(JSModule o1, JSModule o2) {\n-              return o1.getName().compareTo(o2.getName());\n-            }\n-          }, moduleGraph.getAllModules())) {\n+      TreeSet<JSModule> modules = Sets.newTreeSet(new Comparator<JSModule>() {\n+        public int compare(JSModule o1, JSModule o2) {\n+          return o1.getName().compareTo(o2.getName());\n+        }\n+      });\n+      Iterables.addAll(modules, moduleGraph.getAllModules());\n+      for (JSModule m : modules) {\n         addModuleInformation(m);\n       }\n     }\n--- a/src/com/google/javascript/jscomp/RuntimeTypeCheck.java\n+++ b/src/com/google/javascript/jscomp/RuntimeTypeCheck.java\n \n package com.google.javascript.jscomp;\n \n-import com.google.javascript.rhino.Node;\n-import com.google.javascript.rhino.Token;\n-import com.google.javascript.rhino.jstype.JSType;\n-import com.google.javascript.rhino.jstype.FunctionType;\n-import com.google.javascript.rhino.jstype.ObjectType;\n-import com.google.javascript.rhino.jstype.UnionType;\n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Charsets;\n import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n import com.google.common.collect.Sets;\n import com.google.common.io.CharStreams;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+import com.google.javascript.rhino.jstype.FunctionType;\n+import com.google.javascript.rhino.jstype.JSType;\n+import com.google.javascript.rhino.jstype.ObjectType;\n+import com.google.javascript.rhino.jstype.UnionType;\n \n import java.io.IOException;\n import java.io.InputStreamReader;\n+import java.util.Collection;\n import java.util.Comparator;\n+import java.util.TreeSet;\n \n import javax.annotation.Nullable;\n \n \n       nodeToInsertAfter = addMarker(funType, nodeToInsertAfter, null);\n \n-      for (ObjectType interfaceType :\n-          Sets.newTreeSet(ALPHA, funType.getAllImplementedInterfaces())) {\n+      TreeSet<ObjectType> stuff = Sets.newTreeSet(ALPHA);\n+      Iterables.addAll(stuff, funType.getAllImplementedInterfaces());\n+      for (ObjectType interfaceType : stuff) {\n         nodeToInsertAfter =\n             addMarker(funType, nodeToInsertAfter, interfaceType);\n       }\n      */\n     private Node createCheckTypeCallNode(JSType type, Node expr) {\n       Node arrayNode = new Node(Token.ARRAYLIT);\n-      Iterable<JSType> alternates = type.isUnionType()\n-               ? Sets.newTreeSet(ALPHA, ((UnionType) type).getAlternates())\n-               : ImmutableList.of(type);\n+      Collection<JSType> alternates;\n+      if (type.isUnionType()) {\n+        alternates = Sets.newTreeSet(ALPHA);\n+        Iterables.addAll(alternates, ((UnionType)type).getAlternates());\n+      } else {\n+        alternates = ImmutableList.of(type);\n+      }\n       for (JSType alternate : alternates) {\n         Node checkerNode = createCheckerNode(alternate);\n         if (checkerNode == null) {", "timestamp": 1277995170, "metainfo": ""}