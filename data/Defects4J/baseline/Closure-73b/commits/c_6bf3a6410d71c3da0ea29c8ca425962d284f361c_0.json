{"sha": "6bf3a6410d71c3da0ea29c8ca425962d284f361c", "log": "Change on 2010/07/14 09:56:57 by nicksantos  \twhen looking for missing properties, make sure we track properties \tassigned to ALL types and partial-object UNION types.  \tR=moedinger \tDELTA=57  (53 added, 1 deleted, 3 changed)  Change on 2010/07/14 12:34:22 by acleung  \tPrevent future JDK change onCollections.sort that would breaks GraphColoringTest.  \tR=nicksantos \tDELTA=2  (2 added, 0 deleted, 0 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=51006   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n    * Defines a property if the property has not been defined yet.\n    */\n   private void ensurePropertyDefined(Node getprop, JSType rightType) {\n+    String propName = getprop.getLastChild().getString();\n+    JSType nodeType = getJSType(getprop.getFirstChild());\n     ObjectType objectType = ObjectType.cast(\n-        getJSType(getprop.getFirstChild()).restrictByNotNullOrUndefined());\n-    if (objectType != null) {\n+        nodeType.restrictByNotNullOrUndefined());\n+    if (objectType == null) {\n+      registry.registerPropertyOnType(propName, nodeType);\n+    } else {\n       if (ensurePropertyDeclaredHelper(getprop, objectType)) {\n         return;\n       }\n \n-      String propName = getprop.getLastChild().getString();\n       if (!objectType.isPropertyTypeDeclared(propName)) {\n         // We do not want a \"stray\" assign to define an inferred property\n         // for every object of this type in the program. So we use a heuristic\n--- a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n+++ b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n    * (\"if this property is assigned anywhere in the program, it must\n    * show up in the type registry\").\n    */\n-  public void registerPropertyOnType(String propertyName, ObjectType owner) {\n+  public void registerPropertyOnType(String propertyName, JSType type) {\n+    ObjectType owner = null;\n+\n+    // Properties can only be defined on object types, so normalize everything\n+    // to discrete object types.\n+    if (type instanceof ObjectType) {\n+      owner = (ObjectType) type;\n+    } else if (getNativeType(ALL_TYPE).isSubtype(type)) {\n+      owner = getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n+    } else if (type instanceof UnionType) {\n+      for (JSType alternate : ((UnionType) type).getAlternates()) {\n+        registerPropertyOnType(propertyName, alternate);\n+      }\n+    }\n+\n+    if (owner == null) {\n+      return;\n+    }\n+\n     Set<ObjectType> typeSet = typesIndexedByProperty.get(propertyName);\n     if (typeSet == null) {\n       typesIndexedByProperty.put(propertyName, typeSet = Sets.newHashSet());\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         false);\n   }\n \n+  public void testMissingProperty30() throws Exception {\n+    testTypes(\n+        \"/** @return {*} */\" +\n+        \"function f() {\" +\n+        \" return {};\" +\n+        \"}\" +\n+        \"f().a = 3;\" +\n+        \"/** @param {Object} y */ function g(y) { return y.a; }\");\n+  }\n+\n+  public void testMissingProperty31() throws Exception {\n+    testTypes(\n+        \"/** @return {Array|number} */\" +\n+        \"function f() {\" +\n+        \" return [];\" +\n+        \"}\" +\n+        \"f().a = 3;\" +\n+        \"/** @param {Array} y */ function g(y) { return y.a; }\");\n+  }\n+\n+  public void testMissingProperty32() throws Exception {\n+    testTypes(\n+        \"/** @return {Array|number} */\" +\n+        \"function f() {\" +\n+        \" return [];\" +\n+        \"}\" +\n+        \"f().a = 3;\" +\n+        \"/** @param {Date} y */ function g(y) { return y.a; }\",\n+        \"Property a never defined on Date\");\n+  }\n+\n   public void testDeclaredNativeTypeEquality() throws Exception {\n     Node n = parseAndTypeCheck(\"/** @constructor */ function Object() {};\");\n     assertEquals(registry.getNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE),\n--- a/test/com/google/javascript/jscomp/graph/GraphColoringTest.java\n+++ b/test/com/google/javascript/jscomp/graph/GraphColoringTest.java\n       public int compare(String o1, String o2) {\n         if (o1.equals(\"D\")) {\n           return -1;\n+        } else if (o2.equals(\"D\")) {\n+          return 1;\n         } else {\n           return o1.toString().compareTo(o2.toString());\n         }", "timestamp": 1279147853, "metainfo": ""}