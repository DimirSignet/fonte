{"sha": "82d3c01785f8b25113ca3fd7cc8b37da5d8a44a4", "log": "Tweak the parser to handle the restrict ES5 keyword set.  R=acleung DELTA=145  (107 added, 7 deleted, 31 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=765   ", "commit": "\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n import com.google.common.base.Supplier;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n-import com.google.common.collect.Sets;\n import com.google.javascript.jscomp.CompilerOptions.DevMode;\n import com.google.javascript.jscomp.CompilerOptions.LanguageMode;\n import com.google.javascript.jscomp.CompilerOptions.TracerMode;\n   @Override\n   Config getParserConfig() {\n     if (parserConfig == null) {\n+      Config.LanguageMode mode;\n+      switch (options.languageIn) {\n+        case ECMASCRIPT3:\n+          mode = Config.LanguageMode.ECMASCRIPT3;\n+          break;\n+        case ECMASCRIPT5:\n+          mode = Config.LanguageMode.ECMASCRIPT5;\n+          break;\n+        default:\n+          throw new IllegalStateException(\"unexpected language mode\");\n+      }\n+\n       parserConfig = ParserRunner.createConfig(\n-        isIdeMode(), acceptEcmaScript5(), acceptConstKeyword());\n+        isIdeMode(),\n+        mode,\n+        acceptConstKeyword());\n     }\n     return parserConfig;\n   }\n--- a/src/com/google/javascript/jscomp/parsing/Config.java\n+++ b/src/com/google/javascript/jscomp/parsing/Config.java\n  */\n public class Config {\n \n+  public enum LanguageMode {\n+    ECMASCRIPT3,\n+    ECMASCRIPT5,\n+    ECMASCRIPT5_STRICT,\n+  }\n+\n   /**\n    * Whether to parse the descriptions of jsdoc comments.\n    */\n   /**\n    * Accept ECMAScript5 syntax, such as getter/setter.\n    */\n-  final boolean acceptES5;\n+  final LanguageMode languageMode;\n \n   /**\n    * Accept `const' keyword.\n    */\n \n   Config(Set<String> annotationWhitelist, Set<String> suppressionNames,\n-      boolean isIdeMode, boolean acceptES5, boolean acceptConstKeyword) {\n+      boolean isIdeMode, LanguageMode languageMode,\n+      boolean acceptConstKeyword) {\n     this.annotationNames = buildAnnotationNames(annotationWhitelist);\n     this.parseJsDocDocumentation = isIdeMode;\n     this.suppressionNames = suppressionNames;\n     this.isIdeMode = isIdeMode;\n-    this.acceptES5 = acceptES5;\n+    this.languageMode = languageMode;\n     this.acceptConstKeyword = acceptConstKeyword;\n   }\n \n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n import static com.google.javascript.jscomp.mozilla.rhino.Token.CommentType.JSDOC;\n \n import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Sets;\n import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;\n import com.google.javascript.jscomp.mozilla.rhino.ast.ArrayLiteral;\n import com.google.javascript.jscomp.mozilla.rhino.ast.VariableInitializer;\n import com.google.javascript.jscomp.mozilla.rhino.ast.WhileLoop;\n import com.google.javascript.jscomp.mozilla.rhino.ast.WithStatement;\n+import com.google.javascript.jscomp.parsing.Config.LanguageMode;\n import com.google.javascript.rhino.JSDocInfo;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n \n   // non-static for thread safety\n   private final Set<String> ALLOWED_DIRECTIVES = Sets.newHashSet(\"use strict\");\n+\n+  private static final Set<String> ES5_RESERVED_KEYWORDS =\n+      ImmutableSet.of(\n+          // From Section 7.6.1.2\n+          \"class\", \"const\", \"enum\", \"export\", \"extends\", \"import\", \"super\");\n+  private static final Set<String> ES5_STRICT_RESERVED_KEYWORDS =\n+      ImmutableSet.of(\n+          // From Section 7.6.1.2\n+          \"class\", \"const\", \"enum\", \"export\", \"extends\", \"import\", \"super\",\n+          \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\",\n+          \"public\", \"static\", \"yield\");\n+\n+  private final Set<String> reservedKeywords;\n \n   // @license text gets appended onto the fileLevelJsDocBuilder as found,\n   // and stored in JSDocInfo for placeholder node.\n     this.transformDispatcher = new TransformDispatcher();\n     // The template node properties are applied to all nodes in this transform.\n     this.templateNode = createTemplateNode();\n+\n+    switch (config.languageMode) {\n+      case ECMASCRIPT3:\n+        // Reserved words are handled by the Rhino parser.\n+        reservedKeywords = null;\n+        break;\n+      case ECMASCRIPT5:\n+        reservedKeywords = ES5_RESERVED_KEYWORDS;\n+        break;\n+      case ECMASCRIPT5_STRICT:\n+        reservedKeywords = ES5_STRICT_RESERVED_KEYWORDS;\n+        break;\n+      default:\n+        throw new IllegalStateException(\"unknown language mode\");\n+    }\n   }\n \n   // Create a template node to use as a source of common attributes, this allows\n \n     @Override\n     Node processName(Name nameNode) {\n+      if (isReservedKeyword(nameNode.getIdentifier())) {\n+        errorReporter.error(\n+          \"identifier is a reserved word\",\n+          sourceName,\n+          nameNode.getLineno(), \"\", 0);\n+      }\n       return newStringNode(Token.NAME, nameNode.getIdentifier());\n+    }\n+\n+    /**\n+     * @return Whether the\n+     */\n+    private boolean isReservedKeyword(String identifier) {\n+      return reservedKeywords != null && reservedKeywords.contains(identifier);\n     }\n \n     @Override\n \n       Node node = newNode(Token.OBJECTLIT);\n       for (ObjectProperty el : literalNode.getElements()) {\n-        if (!config.acceptES5) {\n+        if (config.languageMode == LanguageMode.ECMASCRIPT3) {\n           if (el.isGetter()) {\n             reportGetter(el);\n             continue;\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n import com.google.common.collect.Sets;\n import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;\n import com.google.javascript.jscomp.mozilla.rhino.ast.Comment;\n+import com.google.javascript.jscomp.parsing.Config.LanguageMode;\n import com.google.javascript.rhino.JSDocInfo;\n import com.google.javascript.rhino.JSDocInfoBuilder;\n import com.google.javascript.rhino.JSTypeExpression;\n         Sets.<String>newHashSet(),\n         Sets.<String>newHashSet(),\n         false,\n-        false,\n+        LanguageMode.ECMASCRIPT3,\n         false);\n     JsDocInfoParser parser = new JsDocInfoParser(\n         new JsDocTokenStream(typeString),\n--- a/src/com/google/javascript/jscomp/parsing/ParserRunner.java\n+++ b/src/com/google/javascript/jscomp/parsing/ParserRunner.java\n import com.google.javascript.jscomp.mozilla.rhino.EvaluatorException;\n import com.google.javascript.jscomp.mozilla.rhino.Parser;\n import com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot;\n+import com.google.javascript.jscomp.parsing.Config.LanguageMode;\n import com.google.javascript.rhino.Node;\n \n import java.io.IOException;\n \n   @Deprecated\n   public static Config createConfig(boolean isIdeMode) {\n-    return createConfig(isIdeMode, false);\n-  }\n-\n-  @Deprecated\n-  public static Config createConfig(boolean isIdeMode, boolean isES5Mode) {\n-    return createConfig(isIdeMode, isES5Mode, false);\n+    return createConfig(isIdeMode, LanguageMode.ECMASCRIPT3, false);\n   }\n \n   public static Config createConfig(boolean isIdeMode,\n-                                    boolean isES5Mode,\n+                                    LanguageMode languageMode,\n                                     boolean acceptConstKeyword) {\n     initResourceConfig();\n-    return new Config(annotationNames, suppressionNames, isIdeMode, isES5Mode,\n+    return new Config(annotationNames, suppressionNames,\n+                      isIdeMode, languageMode,\n                       acceptConstKeyword);\n   }\n \n     compilerEnv.setRecordingComments(true);\n     compilerEnv.setRecordingLocalJsDocComments(true);\n     // ES5 specifically allows trailing commas\n-    compilerEnv.setWarnTrailingComma(!config.acceptES5);\n+    compilerEnv.setWarnTrailingComma(\n+        config.languageMode == LanguageMode.ECMASCRIPT3);\n+\n+    if (config.isIdeMode || config.languageMode != LanguageMode.ECMASCRIPT3) {\n+      // Do our own identifier check for ECMASCRIPT 5\n+      compilerEnv.setReservedKeywordAsIdentifier(true);\n+    }\n \n     if (config.isIdeMode) {\n-      compilerEnv.setReservedKeywordAsIdentifier(true);\n       compilerEnv.setAllowMemberExprAsFunctionName(true);\n     }\n \n--- a/test/com/google/javascript/jscomp/parsing/IRFactoryTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/IRFactoryTest.java\n import com.google.javascript.jscomp.mozilla.rhino.CompilerEnvirons;\n import com.google.javascript.jscomp.mozilla.rhino.Parser;\n import com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot;\n+import com.google.javascript.jscomp.parsing.Config.LanguageMode;\n import com.google.javascript.jscomp.testing.TestErrorReporter;\n import com.google.javascript.rhino.JSDocInfo;\n import com.google.javascript.rhino.Node;\n  */\n public class IRFactoryTest extends BaseJSTypeTestCase {\n \n-  private boolean es5mode = false;\n+  private LanguageMode mode = LanguageMode.ECMASCRIPT3;\n \n   @Override\n   protected void setUp() throws Exception {\n     super.setUp();\n-    es5mode = false;\n+    mode = LanguageMode.ECMASCRIPT3;\n   }\n \n   public void testScript() throws Exception {\n   }\n \n   public void testGetter() {\n-    this.es5mode = true;\n+    mode = LanguageMode.ECMASCRIPT5;\n     testNewParser(\"({get a() {}})\",\n       \"SCRIPT 0\\n\" +\n       \"    EXPR_RESULT 0\\n\" +\n   }\n \n   public void testSetter() {\n-    this.es5mode = true;\n+    mode = LanguageMode.ECMASCRIPT5;\n     testNewParser(\"({set a(x) {}})\",\n       \"SCRIPT 0\\n\" +\n       \"    EXPR_RESULT 0\\n\" +\n     Parser p = new Parser(environment);\n     AstRoot script = p.parse(string, null, 0);\n \n-    Config config = ParserRunner.createConfig(true, es5mode, false);\n+    Config config = ParserRunner.createConfig(true, mode, false);\n     Node root = IRFactory.transformTree(script, string, config, errorReporter);\n \n     return root;\n--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n import com.google.javascript.jscomp.mozilla.rhino.Token.CommentType;\n import com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot;\n import com.google.javascript.jscomp.mozilla.rhino.ast.Comment;\n+import com.google.javascript.jscomp.parsing.Config.LanguageMode;\n import com.google.javascript.jscomp.testing.TestErrorReporter;\n import com.google.javascript.rhino.JSDocInfo;\n import com.google.javascript.rhino.JSDocInfo.Visibility;\n     super.setUp();\n     extraAnnotations =\n         Sets.newHashSet(\n-            ParserRunner.createConfig(true, false, false).annotationNames.\n-            keySet());\n+            ParserRunner.createConfig(true, LanguageMode.ECMASCRIPT3, false)\n+                .annotationNames.keySet());\n     extraSuppressions =\n         Sets.newHashSet(\n-            ParserRunner.createConfig(true, false, false).suppressionNames);\n+            ParserRunner.createConfig(true, LanguageMode.ECMASCRIPT3, false)\n+                .suppressionNames);\n \n     extraSuppressions.add(\"x\");\n     extraSuppressions.add(\"y\");\n     AstRoot script = p.parse(code, null, 0);\n \n     Config config =\n-        new Config(extraAnnotations, extraSuppressions, true, false, false);\n+        new Config(extraAnnotations, extraSuppressions,\n+            true, LanguageMode.ECMASCRIPT3, false);\n     for (Comment comment : script.getComments()) {\n       JsDocInfoParser jsdocParser =\n         new JsDocInfoParser(\n     TestErrorReporter errorReporter = new TestErrorReporter(null, warnings);\n \n     Config config = new Config(extraAnnotations, extraSuppressions,\n-        parseDocumentation, false, false);\n+        parseDocumentation, LanguageMode.ECMASCRIPT3, false);\n     JsDocInfoParser jsdocParser = new JsDocInfoParser(\n         stream(comment),\n         new Comment(0, 0, CommentType.JSDOC, comment),\n--- a/test/com/google/javascript/jscomp/parsing/ParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/ParserTest.java\n \n import com.google.common.collect.ImmutableList;\n import com.google.javascript.jscomp.mozilla.rhino.ScriptRuntime;\n+import com.google.javascript.jscomp.parsing.Config.LanguageMode;\n import com.google.javascript.jscomp.testing.TestErrorReporter;\n import com.google.javascript.rhino.JSDocInfo;\n import com.google.javascript.rhino.Node;\n       com.google.javascript.rhino.ScriptRuntime.getMessage0(\n           \"msg.jsdoc.missing.gt\");\n \n-  private boolean es5mode;\n+  private Config.LanguageMode mode;\n+  private boolean isIdeMode = false;\n \n   @Override\n   protected void setUp() throws Exception {\n     super.setUp();\n-    es5mode = false;\n+    mode = LanguageMode.ECMASCRIPT3;\n+    isIdeMode = false;\n   }\n \n   public void testLinenoCharnoAssign1() throws Exception {\n \n   public void testTrailingCommaWarning3() {\n     parse(\"var a = ['foo', 'bar',];\", TRAILING_COMMA_MESSAGE);\n-    es5mode = true;\n+    mode = LanguageMode.ECMASCRIPT5;\n     parse(\"var a = ['foo', 'bar',];\");\n   }\n \n   public void testTrailingCommaWarning4() {\n     parse(\"var a = [,];\", TRAILING_COMMA_MESSAGE);\n-    es5mode = true;\n+    mode = LanguageMode.ECMASCRIPT5;\n     parse(\"var a = [,];\");\n   }\n \n \n   public void testTrailingCommaWarning6() {\n     parse(\"var a = {'foo': 'bar',};\", TRAILING_COMMA_MESSAGE);\n-    es5mode = true;\n+    mode = LanguageMode.ECMASCRIPT5;\n     parse(\"var a = {'foo': 'bar',};\");\n   }\n \n   }\n \n   public void testGetter() {\n-    this.es5mode = false;\n+    mode = LanguageMode.ECMASCRIPT3;\n     parseError(\"var x = {get a(){}};\",\n         \"getters are not supported in Internet Explorer\");\n-    this.es5mode = true;\n+    mode = LanguageMode.ECMASCRIPT5;\n     parse(\"var x = {get a(){}};\");\n     parseError(\"var x = {get a(b){}};\", \"getters may not have parameters\");\n   }\n \n   public void testSetter() {\n-    this.es5mode = false;\n+    mode = LanguageMode.ECMASCRIPT3;\n     parseError(\"var x = {set a(x){}};\",\n         \"setters are not supported in Internet Explorer\");\n-    this.es5mode = true;\n+    mode = LanguageMode.ECMASCRIPT5;\n     parse(\"var x = {set a(x){}};\");\n     parseError(\"var x = {set a(){}};\",\n         \"setters must have exactly one parameter\");\n     parse(\"(function () {});\");\n   }\n \n+  public void testReservedKeywords() {\n+    boolean isIdeMode = false;\n+    parseError(\"var boolean;\", \"missing variable name\");\n+    parseError(\"function boolean() {};\",\n+        \"missing ( before function parameters.\");\n+    parseError(\"boolean = 1;\", \"identifier is a reserved word\");\n+    parseError(\"class = 1;\", \"identifier is a reserved word\");\n+    parseError(\"public = 2;\", \"identifier is a reserved word\");\n+\n+    mode = LanguageMode.ECMASCRIPT5;\n+\n+    parse(\"var boolean;\");\n+    parse(\"function boolean() {};\");\n+    parse(\"boolean = 1;\");\n+    parseError(\"class = 1;\", \"identifier is a reserved word\");\n+    parse(\"public = 2;\");\n+\n+    mode = LanguageMode.ECMASCRIPT5_STRICT;\n+\n+    parse(\"var boolean;\");\n+    parse(\"function boolean() {};\");\n+    parse(\"boolean = 1;\");\n+    parseError(\"class = 1;\", \"identifier is a reserved word\");\n+    parseError(\"public = 2;\", \"identifier is a reserved word\");\n+\n+  }\n+\n   private void parseError(String string, String... errors) {\n     TestErrorReporter testErrorReporter = new TestErrorReporter(errors, null);\n     Node script = null;\n     try {\n       script = ParserRunner.parse(\n-          \"input\", string, ParserRunner.createConfig(true, es5mode, false),\n+          \"input\", string, ParserRunner.createConfig(isIdeMode, mode, false),\n           testErrorReporter, Logger.getAnonymousLogger());\n     } catch (IOException e) {\n       throw new RuntimeException(e);\n     Node script = null;\n     try {\n       script = ParserRunner.parse(\n-          \"input\", string, ParserRunner.createConfig(true, es5mode, false),\n+          \"input\", string, ParserRunner.createConfig(true, mode, false),\n           testErrorReporter, Logger.getAnonymousLogger());\n     } catch (IOException e) {\n       throw new RuntimeException(e);", "timestamp": 1299286099, "metainfo": ""}