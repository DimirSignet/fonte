{"sha": "3d392879b6d7b3f3f947490c7aa6d515f6417374", "log": "Create a disagnostic group for ambigious function declaration warnings.  R=nicksantos DELTA=40  (27 added, 6 deleted, 7 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=68001   ", "commit": "\n--- a/src/com/google/javascript/jscomp/DiagnosticGroups.java\n+++ b/src/com/google/javascript/jscomp/DiagnosticGroups.java\n           new DiagnosticGroup(VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR,\n                               VarCheck.UNDEFINED_EXTERN_VAR_ERROR));\n \n+  public static DiagnosticGroup AMBIGUOUS_FUNCTION_DECL =\n+    DiagnosticGroups.registerGroup(\"ambiguousFunctionDecl\",\n+          new DiagnosticGroup(VariableReferenceCheck.AMBIGUOUS_FUNCTION_DECL));  \n+\n   public static DiagnosticGroup UNKNOWN_DEFINES =\n     DiagnosticGroups.registerGroup(\"unknownDefines\",\n           new DiagnosticGroup(ProcessDefines.UNKNOWN_DEFINE_WARNING));\n--- a/src/com/google/javascript/jscomp/VariableReferenceCheck.java\n+++ b/src/com/google/javascript/jscomp/VariableReferenceCheck.java\n       \"JSC_REDECLARED_VARIABLE\",\n       \"Redeclared variable: {0}\");\n \n-  static final boolean CHECK_UNHOISTED_NAMED_FUNCTIONS = false;\n-\n   static final DiagnosticType AMBIGUOUS_FUNCTION_DECL =\n-    DiagnosticType.warning(\"AMBIGUIOUS_FUNCTION_DECL\",\n-        \"Ambiguious use of a named function: {0}.\");\n+    DiagnosticType.disabled(\"AMBIGUOUS_FUNCTION_DECL\",\n+        \"Ambiguous use of a named function: {0}.\");\n \n   private AbstractCompiler compiler;\n   private CheckLevel checkLevel;\n           }\n         }\n \n-        if (CHECK_UNHOISTED_NAMED_FUNCTIONS && isUnhoistedNamedFunction\n-            && !isDeclaration && isDeclaredInScope) {\n+        if (isUnhoistedNamedFunction && !isDeclaration && isDeclaredInScope) {\n           // Only allow an unhoisted named function to be used within the\n           // block it is declared.\n           for (BasicBlock declaredBlock : blocksWithDeclarations) {\n--- a/test/com/google/javascript/jscomp/VariableReferenceCheckTest.java\n+++ b/test/com/google/javascript/jscomp/VariableReferenceCheckTest.java\n   private static final String VARIABLE_RUN =\n       \"var a = 1; var b = 2; var c = a + b, d = c;\";\n \n+  private boolean enableAmbiguousFunctionCheck = false;\n+\n   @Override\n   public CompilerPass getProcessor(Compiler compiler) {\n+    if (enableAmbiguousFunctionCheck) {\n+      compiler.getOptions().setWarningLevel(\n+          DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL, CheckLevel.WARNING);\n+    }\n+\n     // Treats bad reads as errors, and reports bad write warnings.\n     return new VariableReferenceCheck(compiler, CheckLevel.WARNING);\n+  }\n+\n+  @Override\n+  public void setUp() throws Exception {\n+    super.setUp();\n+    enableAmbiguousFunctionCheck = false;\n   }\n \n   public void testCorrectCode() {\n   }\n \n   public void testHoistedFunction1() {\n+    enableAmbiguousFunctionCheck = true;\n     assertNoWarning(\"f(); function f() {}\");\n   }\n \n   public void testHoistedFunction2() {\n+    enableAmbiguousFunctionCheck = true;\n     assertNoWarning(\"function g() { f(); function f() {} }\");\n   }\n \n   public void testNonHoistedFunction() {\n+    enableAmbiguousFunctionCheck = true;\n     assertUndeclared(\"if (true) { f(); function f() {} }\");\n   }\n \n   public void testNonHoistedFunction2() {\n+    enableAmbiguousFunctionCheck = true;\n     assertNoWarning(\"if (false) { function f() {} f(); }\");\n   }\n \n   public void testNonHoistedFunction3() {\n+    enableAmbiguousFunctionCheck = true;\n     assertNoWarning(\"function g() { if (false) { function f() {} f(); }}\");\n   }\n \n   public void testNonHoistedFunction4() {\n-    if (VariableReferenceCheck.CHECK_UNHOISTED_NAMED_FUNCTIONS) {\n-      assertAmbiguous(\"if (false) { function f() {} }  f();\");\n-    }\n+    enableAmbiguousFunctionCheck = true;\n+    assertAmbiguous(\"if (false) { function f() {} }  f();\");\n   }\n \n   public void testNonHoistedFunction5() {\n-    if (VariableReferenceCheck.CHECK_UNHOISTED_NAMED_FUNCTIONS) {\n-      assertAmbiguous(\"function g() { if (false) { function f() {} }  f(); }\");\n-    }\n+    enableAmbiguousFunctionCheck = true;\n+    assertAmbiguous(\"function g() { if (false) { function f() {} }  f(); }\");\n   }\n \n   public void testNonHoistedFunction6() {\n+    enableAmbiguousFunctionCheck = true;\n     assertUndeclared(\"if (false) { f(); function f() {} }\");\n   }\n \n   public void testNonHoistedFunction7() {\n+    enableAmbiguousFunctionCheck = true;\n     assertUndeclared(\"function g() { if (false) { f(); function f() {} }}\");\n   }\n \n-\n   public void testNonHoistedRecursiveFunction1() {\n+    enableAmbiguousFunctionCheck = true;\n     assertNoWarning(\"if (false) { function f() { f(); }}\");\n   }\n \n   public void testNonHoistedRecursiveFunction2() {\n+    enableAmbiguousFunctionCheck = true;\n     assertNoWarning(\"function g() { if (false) { function f() { f(); }}}\");\n   }\n \n   public void testNonHoistedRecursiveFunction3() {\n+    enableAmbiguousFunctionCheck = true;\n     assertNoWarning(\"function g() { if (false) { function f() { f(); g(); }}}\");\n   }\n ", "timestamp": 1280190870, "metainfo": ""}