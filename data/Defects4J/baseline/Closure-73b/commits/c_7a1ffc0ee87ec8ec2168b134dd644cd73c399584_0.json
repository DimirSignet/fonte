{"sha": "7a1ffc0ee87ec8ec2168b134dd644cd73c399584", "log": "Tweaks suggested by Alan for my last CL.  R=acleung DELTA=15  (0 added, 10 deleted, 5 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=25   ", "commit": "\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n    * @return Whether the boolean op is true or false\n    */\n   private boolean compareToUndefined(Node value, int op) {\n-    boolean result;\n-\n     boolean valueUndefined = ((Token.NAME == value.getType()\n         && value.getString().equals(\"undefined\"))\n         || (Token.VOID == value.getType()\n     switch (op) {\n       case Token.EQ:\n         // undefined is only equal to null or an undefined value\n-        result = equivalent;\n-        break;\n+        return equivalent;\n       case Token.NE:\n-        result = !equivalent;\n-        break;\n+        return !equivalent;\n       case Token.SHEQ:\n-        result = valueUndefined;\n-        break;\n+        return valueUndefined;\n       case Token.SHNE:\n-        result = !valueUndefined;\n-        break;\n+        return !valueUndefined;\n       case Token.LT:\n       case Token.GT:\n       case Token.LE:\n       case Token.GE:\n-        result = false;\n-        break;\n+        return false;\n       default:\n         throw new IllegalStateException(\"unexpected.\");\n     }\n-\n-    return result;\n   }\n \n   /**\n--- a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\n     fold(\"undefined !== void 0\", \"false\");\n     fold(\"undefined === void 0\", \"true\");\n   }\n-\n \n   public void testUnaryOps() {\n     // These cases are handled by PeepholeRemoveDeadCode.", "timestamp": 1291138459, "metainfo": ""}