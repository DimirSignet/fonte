{"sha": "39dde4ca5df6263d7058029e081a710d7fa13de9", "log": "Don't let the internal delegate proxies leak out  R=johnlenz,mgoodman,adeboor DELTA=47  (35 added, 0 deleted, 12 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=335940   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n   /**\n    * A suffix for naming delegate proxies differently from their base.\n    */\n-  static final String DELEGATE_PROXY_SUFFIX = \"(Proxy)\";\n+  static final String DELEGATE_PROXY_SUFFIX =\n+      ObjectType.createDelegateSuffix(\"Proxy\");\n \n   static final DiagnosticType MALFORMED_TYPEDEF =\n       DiagnosticType.warning(\n--- a/src/com/google/javascript/rhino/jstype/ObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/ObjectType.java\n   public abstract String getReferenceName();\n \n   /**\n+   * Due to the complexity of some of our internal type systems, sometimes\n+   * we have different types constructed by the same constructor.\n+   * In other parts of the type system, these are called delegates.\n+   * We construct these types by appending suffixes to the constructor name.\n+   *\n+   * The normalized reference name does not have these suffixes, and as such,\n+   * recollapses these implicit types back to their real type.\n+   */\n+  public String getNormalizedReferenceName() {\n+    String name = getReferenceName();\n+    if (name != null) {\n+      int pos = name.indexOf(\"(\");\n+      if (pos != -1) {\n+        return name.substring(0, pos);\n+      }\n+    }\n+    return name;\n+  }\n+\n+  /**\n+   * Creates a suffix for a proxy delegate.\n+   * @see #getNormalizedReferenceName\n+   */\n+  public static String createDelegateSuffix(String suffix) {\n+    return \"(\" + suffix + \")\";\n+  }\n+\n+  /**\n    * Returns true if the object is named.\n    * @return true if the object is named, false if it is anonymous\n    */", "timestamp": 1287104444, "metainfo": ""}