{"sha": "053636cbd1a8fb97e55b4f82bc4b5bee8beaf47e", "log": "Clean up the command-line runner api, which uncovered a bunch of bugs in Options serialization. Set the output charset to US-ASCII by default, but let the user set it to UTF-8. Fixes Issue 205  R=bowdidge DELTA=107  (69 added, 17 deleted, 21 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=87017   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n     return new DiagnosticGroups();\n   }\n \n-  protected void initOptionsFromFlags(CompilerOptions options) {\n+  /** No longer does anything. */\n+  @Deprecated\n+  protected void initOptionsFromFlags(CompilerOptions options) {}\n+\n+  /**\n+   * Sets options based on the configurations set flags API.\n+   * Called during the run() run() method.\n+   * If you want to ignore the flags API, or intepret flags your own way,\n+   * then you should override this method.\n+   */\n+  final protected void setRunOptions(CompilerOptions options)\n+      throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n \n     diagnosticGroups.setWarningLevels(\n \n     options.manageClosureDependencies = config.manageClosureDependencies;\n     options.devMode = config.jscompDevMode;\n-  }\n-\n-  final protected A getCompiler() {\n-    return compiler;\n-  }\n-\n-  final protected void setRunOptions(B options)\n-      throws IOException, FlagUsageException {\n+    options.setCodingConvention(config.codingConvention);\n+    options.setSummaryDetailLevel(config.summaryDetailLevel);\n+\n+    options.outputCharset = getOutputCharset();\n+    inputCharset = getInputCharset();\n+\n     if (config.jsOutputFile.length() > 0) {\n       options.jsOutputFile = config.jsOutputFile;\n     }\n       options.inputPropertyMapSerialized =\n           VariableMap.load(config.propertyMapInputFile).toBytes();\n     }\n-\n-    options.setCodingConvention(config.codingConvention);\n-    options.setSummaryDetailLevel(config.summaryDetailLevel);\n-\n-    inputCharset = getInputCharset();\n+  }\n+\n+  final protected A getCompiler() {\n+    return compiler;\n   }\n \n   /**\n \n     setRunOptions(options);\n \n-    // Let the outputCharset be the same as the input charset... except if\n-    // we're reading in UTF-8 by default.  By tradition, we've always\n-    // output ASCII to avoid various hiccups with different browsers,\n-    // proxies and firewalls.\n-    if (inputCharset == Charsets.UTF_8) {\n-      options.outputCharset = Charsets.US_ASCII;\n-    } else {\n-      options.outputCharset = inputCharset;\n-    }\n-\n     boolean writeOutputToFile = !options.jsOutputFile.isEmpty();\n     if (writeOutputToFile) {\n       out = toWriter(options.jsOutputFile, inputCharset.name());\n   }\n \n   /**\n-   * Query the flag for the charset, and return a Charset object representing\n-   * the selection.\n+   * Query the flag for the input charset, and return a Charset object\n+   * representing the selection.\n    *\n    * @return Charset to use when reading inputs\n    * @throws FlagUsageException if flag is not a valid Charset name.\n       return Charset.forName(config.charset);\n     }\n     return Charsets.UTF_8;\n+  }\n+\n+  /**\n+   * Query the flag for the output charset.\n+   *\n+   * Let the outputCharset be the same as the input charset... except if\n+   * we're reading in UTF-8 by default.  By tradition, we've always\n+   * output ASCII to avoid various hiccups with different browsers,\n+   * proxies and firewalls.\n+   *\n+   * @return Name of the charset to use when writing outputs. Guaranteed to\n+   *    be a supported charset.\n+   * @throws FlagUsageException if flag is not a valid Charset name.\n+   */\n+  private String getOutputCharset() throws FlagUsageException {\n+    if (!config.charset.isEmpty()) {\n+      if (!Charset.isSupported(config.charset)) {\n+        throw new FlagUsageException(config.charset +\n+            \" is not a valid charset name.\");\n+      }\n+      return config.charset;\n+    }\n+    return \"US-ASCII\";\n   }\n \n   protected List<JSSourceFile> createExterns() throws FlagUsageException,\n--- a/src/com/google/javascript/jscomp/ClosureCodingConvention.java\n+++ b/src/com/google/javascript/jscomp/ClosureCodingConvention.java\n *\n  */\n public class ClosureCodingConvention extends DefaultCodingConvention {\n+\n+  private static final long serialVersionUID = 1L;\n \n   private static final String TYPEDEF_NAME = \"goog.typedef\";\n \n--- a/src/com/google/javascript/jscomp/CodingConvention.java\n+++ b/src/com/google/javascript/jscomp/CodingConvention.java\n import com.google.javascript.rhino.jstype.JSTypeRegistry;\n import com.google.javascript.rhino.jstype.ObjectType;\n \n+import java.io.Serializable;\n import java.util.Collection;\n import java.util.List;\n \n *\n *\n  */\n-public interface CodingConvention {\n+public interface CodingConvention extends Serializable {\n \n   /**\n    * This checks whether a given variable name, such as a name in all-caps\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n     private List<String> define = Lists.newArrayList();\n \n     @Option(name = \"--charset\",\n-        usage = \"Input charset for all files.\")\n+        usage = \"Input and output charset for all files. By default, we \" +\n+                \"accept UTF-8 as input and output US_ASCII\")\n     private String charset = \"\";\n \n     @Option(name = \"--compilation_level\",\n     }\n \n     options.closurePass = flags.process_closure_primitives;\n-    initOptionsFromFlags(options);\n     return options;\n   }\n \n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n import java.io.IOException;\n import java.io.PrintStream;\n import java.io.Serializable;\n+import java.nio.charset.Charset;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n     builder.setLineBreak(options.lineBreak);\n     builder.setSourceMap(sourceMap);\n     builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n-    builder.setOutputCharset(options.outputCharset);\n+\n+    Charset charset = options.outputCharset != null ?\n+        Charset.forName(options.outputCharset) : null;\n+    builder.setOutputCharset(charset);\n+\n     return builder.build();\n   }\n \n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n \n   /**\n    * Charset to use when generating code.  If null, then output ASCII.\n-   */\n-  public Charset outputCharset;\n+   * This needs to be a string because CompilerOptions is serializable.\n+   */\n+  String outputCharset;\n \n   /**\n    * Whether the named objects types included 'undefined' by default.\n   }\n \n   /**\n+   * Sets the output charset by name.\n+   */\n+  public void setOutputCharset(String charsetName) {\n+    this.outputCharset = charsetName;\n+  }\n+\n+  /**\n    * Whether to include \"undefined\" in the default types.\n    *   For example:\n    *     \"{Object}\" is normally \"Object|null\" becomes \"Object|null|undefined\"\n--- a/src/com/google/javascript/jscomp/DefaultCodingConvention.java\n+++ b/src/com/google/javascript/jscomp/DefaultCodingConvention.java\n *\n  */\n public class DefaultCodingConvention implements CodingConvention {\n+\n+  private static final long serialVersionUID = 1L;\n \n   @Override\n   public boolean isConstant(String variableName) {\n--- a/src/com/google/javascript/jscomp/GoogleCodingConvention.java\n+++ b/src/com/google/javascript/jscomp/GoogleCodingConvention.java\n *\n  */\n public class GoogleCodingConvention extends ClosureCodingConvention {\n+\n+  private static final long serialVersionUID = 1L;\n \n   private static final String OPTIONAL_ARG_PREFIX = \"opt_\";\n \n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n         lastCommandLineRunner.expandSourceMapPath(\n             lastCompiler.getOptions(),\n             lastCompiler.getModuleGraph().getRootModule()));\n+  }\n+\n+  public void testCharSetExpansion() {\n+    testSame(\"\");\n+    assertEquals(\"US-ASCII\", lastCompiler.getOptions().outputCharset);\n+    args.add(\"--charset=UTF-8\");\n+    testSame(\"\");\n+    assertEquals(\"UTF-8\", lastCompiler.getOptions().outputCharset);\n   }\n \n   public void testChainModuleManifest() throws Exception {", "timestamp": 1281062300, "metainfo": ""}