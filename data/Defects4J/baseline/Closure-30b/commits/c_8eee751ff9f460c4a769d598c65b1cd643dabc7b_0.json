{"sha": "8eee751ff9f460c4a769d598c65b1cd643dabc7b", "log": "use the greatest subtype operator to determine missing properties. this catches some weird edge cases that become much more common when we start collapsing the type set.  R=johnlenz DELTA=22  (21 added, 0 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=634022   ", "commit": "\n--- a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n+++ b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n   public boolean canPropertyBeDefined(JSType type, String propertyName) {\n     if (typesIndexedByProperty.containsKey(propertyName)) {\n       for (JSType alt : typesIndexedByProperty.get(propertyName)) {\n-        if (alt.isSubtype(type) || type.isSubtype(alt)) {\n+        if (!alt.getGreatestSubtype(type).isEmptyType()) {\n           return true;\n         }\n       }\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"Foo.prototype.baz = function() { this.b = 3; };\");\n   }\n \n+  public void testMissingProperty35() throws Exception {\n+    // Bar has specialProp defined, so Bar|Baz may have specialProp defined.\n+    testTypes(\n+        \"/** @constructor */ function Foo() {}\" +\n+        \"/** @constructor */ function Bar() {}\" +\n+        \"/** @constructor */ function Baz() {}\" +\n+        \"/** @param {Foo|Bar} x */ function f(x) { x.specialProp = 1; }\" +\n+        \"/** @param {Bar|Baz} x */ function g(x) { return x.specialProp; }\");\n+  }\n+\n+  public void testMissingProperty36() throws Exception {\n+    // Foo has baz defined, and SubFoo has bar defined, so some objects with\n+    // bar may have baz.\n+    testTypes(\n+        \"/** @constructor */ function Foo() {}\" +\n+        \"Foo.prototype.baz = 0;\" +\n+        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n+        \"SubFoo.prototype.bar = 0;\" +\n+        \"/** @param {{bar: number}} x */ function f(x) { return x.baz; }\");\n+  }\n+\n   public void testDeclaredNativeTypeEquality() throws Exception {\n     Node n = parseAndTypeCheck(\"/** @constructor */ function Object() {};\");\n     assertEquals(registry.getNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE),", "timestamp": 1287765302, "metainfo": ""}