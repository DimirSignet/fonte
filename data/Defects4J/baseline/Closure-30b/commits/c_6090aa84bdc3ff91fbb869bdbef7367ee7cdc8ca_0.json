{"sha": "6090aa84bdc3ff91fbb869bdbef7367ee7cdc8ca", "log": "Pull the export function names from the coding convention.  Based on the patch from Klaus Reimer Fixes issue 325.  R=nicksantos DELTA=47  (30 added, 14 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=523   ", "commit": "\n--- a/src/com/google/javascript/jscomp/ExternExportsPass.java\n+++ b/src/com/google/javascript/jscomp/ExternExportsPass.java\n   /** A list of exported paths. */\n   private final Set<String> alreadyExportedPaths;\n \n+  /** A list of function names used to export symbols. */\n+  private List<String> exportSymbolFunctionNames;\n+\n+  /** A list of function names used to export properties. */\n+  private List<String> exportPropertyFunctionNames;\n+\n   private abstract class Export {\n     protected final String symbolName;\n     protected final Node value;\n         return null;\n       }\n \n-      if (!definitionMap.containsKey(qualifiedName)) {\n+      Node definitionParent = definitionMap.get(qualifiedName);\n+      if (definitionParent == null) {\n         return null;\n       }\n \n-      Node definitionParent = definitionMap.get(qualifiedName);\n       Node definition;\n \n       switch(definitionParent.getType()) {\n     this.externsRoot.setIsSyntheticBlock(true);\n     this.alreadyExportedPaths = Sets.newHashSet();\n     this.mappedPaths = Maps.newHashMap();\n+\n+    initExportMethods();\n+  }\n+\n+  private void initExportMethods() {\n+    exportSymbolFunctionNames = Lists.newArrayList();\n+    exportPropertyFunctionNames = Lists.newArrayList();\n+\n+    // From Closure:\n+    // goog.exportSymbol = function(publicName, symbol)\n+    // goog.exportProperty = function(object, publicName, symbol)\n+    CodingConvention convention = compiler.getCodingConvention();\n+    exportSymbolFunctionNames.add(convention.getExportSymbolFunction());\n+    exportPropertyFunctionNames.add(convention.getExportPropertyFunction());\n+\n+    // Another common one used inside google:\n+    exportSymbolFunctionNames.add(\"google_exportSymbol\");\n+    exportPropertyFunctionNames.add(\"google_exportProperty\");\n   }\n \n   @Override\n \n       case Token.NAME:\n       case Token.GETPROP:\n+        String name = n.getQualifiedName();\n+        if (name == null) {\n+          return;\n+        }\n+\n         if (parent.getType() == Token.ASSIGN || parent.getType() == Token.VAR) {\n           definitionMap.put(n.getQualifiedName(), parent);\n         }\n           return;\n         }\n \n-        List<String> exportSymbolNames = Lists.newArrayList();\n-        List<String> exportPropertyNames = Lists.newArrayList();\n-\n-        // From Closure:\n-        // goog.exportSymbol = function(publicName, symbol)\n-        // goog.exportProperty = function(object, publicName, symbol)\n-        exportSymbolNames.add(\"goog.exportSymbol\");\n-        exportPropertyNames.add(\"goog.exportProperty\");\n-\n-        // Another common one used inside google:\n-        exportSymbolNames.add(\"google_exportSymbol\");\n-        exportPropertyNames.add(\"google_exportProperty\");\n-\n-        if (exportPropertyNames.contains(n.getQualifiedName())) {\n+        if (exportPropertyFunctionNames.contains(n.getQualifiedName())) {\n           handlePropertyExport(parent);\n         }\n \n-        if (exportSymbolNames.contains(n.getQualifiedName())) {\n+        if (exportSymbolFunctionNames.contains(n.getQualifiedName())) {\n           handleSymbolExport(parent);\n         }\n     }", "timestamp": 1297796534, "metainfo": ""}