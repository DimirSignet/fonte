{"sha": "ab37a1195b1d8eb202159bc5881073a114fde5e2", "log": "Extend --export_test_functions so that it properly exports test methods defined on objects.  For example:  UpdatesTest.prototype.testUpdates = function() { ... }  will now emit  goog.exportProperty(UpdatesTest.prototype, 'testUpdates', UpdatesTest.prototype.testUpdates);  R=acleung,nicksantos DELTA=93  (73 added, 0 deleted, 20 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3209   ", "commit": "\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n       CodingConvention convention = compiler.getCodingConvention();\n       if (convention.getExportSymbolFunction() != null) {\n         return new ExportTestFunctions(compiler,\n-            convention.getExportSymbolFunction());\n+            convention.getExportSymbolFunction(),\n+            convention.getExportPropertyFunction());\n       } else {\n         return new ErrorPass(compiler, GENERATE_EXPORTS_ERROR);\n       }\n--- a/src/com/google/javascript/jscomp/ExportTestFunctions.java\n+++ b/src/com/google/javascript/jscomp/ExportTestFunctions.java\n class ExportTestFunctions implements CompilerPass {\n \n   private static final Pattern TEST_FUNCTIONS_NAME_PATTERN =\n-      Pattern.compile(\"^(?:setUpPage|setUp|tearDown|tearDownPage|test.*)$\");\n+      Pattern.compile(\"^(?:((\\\\w+\\\\.)+prototype\\\\.)*\" +\n+                      \"(setUpPage|setUp|tearDown|tearDownPage|test\\\\w+))$\");\n \n   private AbstractCompiler compiler;\n   private final String exportSymbolFunction;\n+  private final String exportPropertyFunction;\n \n   /**\n    * Creates a new export test functions compiler pass.\n    * @param compiler\n    * @param exportSymbolFunction The function name used to export symbols in JS.\n+   * @param exportSymbolFunction The function name used to export properties in\n+   *     JS.\n    */\n   ExportTestFunctions(AbstractCompiler compiler,\n-      String exportSymbolFunction) {\n+      String exportSymbolFunction, String exportPropertyFunction) {\n \n     Preconditions.checkNotNull(compiler);\n     this.compiler = compiler;\n     this.exportSymbolFunction = exportSymbolFunction;\n+    this.exportPropertyFunction = exportPropertyFunction;\n   }\n \n   private class ExportTestFunctionsNodes extends\n-      NodeTraversal.AbstractPostOrderCallback {\n+      NodeTraversal.AbstractShallowCallback {\n \n     @Override\n     public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (parent != null && parent.getType() == Token.SCRIPT) {\n+\n+      if (parent == null) {\n+        return;\n+      }\n+\n+      if (parent.getType() == Token.SCRIPT) {\n         if (NodeUtil.isFunctionDeclaration(n)) {\n           // Check for a test function statement.\n           String functionName = NodeUtil.getFunctionName(n);\n           if (isTestFunction(n, functionName)) {\n-            exportTestFunction(functionName, n, parent);\n+            exportTestFunctionAsSymbol(functionName, n, parent);\n           }\n         } else if (isVarDeclaredFunction(n)) {\n           // Check for a test function expression.\n           Node functionNode = n.getFirstChild().getFirstChild();\n           String functionName = NodeUtil.getFunctionName(functionNode);\n           if (isTestFunction(functionNode, functionName)) {\n-            exportTestFunction(functionName, n, parent);\n+            exportTestFunctionAsSymbol(functionName, n, parent);\n+          }\n+        }\n+      } else if (NodeUtil.isExprAssign(parent) &&\n+            n.getLastChild().getType() != Token.ASSIGN) {\n+        // Check for a test method assignment.\n+        Node grandparent = parent.getParent();\n+        if (grandparent != null && grandparent.getType() == Token.SCRIPT) {\n+          String functionName = n.getFirstChild().getQualifiedName();\n+          if (isTestFunction(n, functionName)) {\n+            exportTestFunctionAsProperty(functionName, parent, n, grandparent);\n           }\n         }\n       }\n   }\n \n   // Adds exportSymbol(testFunctionName, testFunction);\n-  private void exportTestFunction(String testFunctionName, Node node,\n+  private void exportTestFunctionAsSymbol(String testFunctionName, Node node,\n       Node scriptNode) {\n \n     Node exportCallTarget = NodeUtil.newQualifiedNameNode(\n     compiler.reportCodeChange();\n   }\n \n+\n+  // Adds exportProperty() of the test function name on the prototype object\n+  private void exportTestFunctionAsProperty(String fullyQualifiedFunctionName,\n+      Node parent, Node node, Node scriptNode) {\n+\n+    String testFunctionName =\n+        NodeUtil.getPrototypePropertyName(node.getFirstChild());\n+    String objectName = fullyQualifiedFunctionName.substring(0,\n+        fullyQualifiedFunctionName.lastIndexOf('.'));\n+    String exportCallStr = String.format(\"%s(%s, '%s', %s);\",\n+        exportPropertyFunction, objectName, testFunctionName,\n+        fullyQualifiedFunctionName);\n+\n+    Node exportCall = this.compiler.parseSyntheticCode(exportCallStr)\n+        .removeChildren();\n+    exportCall.useSourceInfoFromForTree(scriptNode);\n+\n+    scriptNode.addChildAfter(exportCall, parent);\n+    compiler.reportCodeChange();\n+  }\n+\n+\n   /**\n    * Whether a function is recognized as a test function. We follow the JsUnit\n    * convention for naming (functions should start with \"test\"), and we also\n--- a/test/com/google/javascript/jscomp/ExportTestFunctionsTest.java\n+++ b/test/com/google/javascript/jscomp/ExportTestFunctionsTest.java\n public class ExportTestFunctionsTest extends CompilerTestCase {\n \n   private static final String EXTERNS =\n-      \"function google_exportSymbol(a, b) {}; \";\n+      \"function google_exportSymbol(a, b) {}; \"\n+      + \"function google_exportProperty(a, b, c) {};\";\n \n   private static final String TEST_FUNCTIONS_WITH_NAMES =\n       \"function Foo(arg) {}; \"\n \n   @Override\n   protected CompilerPass getProcessor(Compiler compiler) {\n-    return new ExportTestFunctions(compiler, \"google_exportSymbol\");\n+    return new ExportTestFunctions(compiler, \"google_exportSymbol\",\n+        \"google_exportProperty\");\n   }\n \n   @Override\n     test(\"function Foo() {function testA() {}}\",\n          \"function Foo() {function testA(){}}\");\n     test(\"function setUp() {}\",\n-         \"function setUp(){} google_exportSymbol(\\\"setUp\\\",setUp)\");\n+         \"function setUp(){} google_exportSymbol('setUp',setUp)\");\n     test(\"function setUpPage() {}\",\n-         \"function setUpPage(){} google_exportSymbol(\\\"setUpPage\\\",setUpPage)\");\n+         \"function setUpPage(){} google_exportSymbol('setUpPage',setUpPage)\");\n     test(\"function tearDown() {}\",\n-         \"function tearDown(){} google_exportSymbol(\\\"tearDown\\\",tearDown)\");\n+         \"function tearDown(){} google_exportSymbol('tearDown',tearDown)\");\n     test(\"function tearDownPage() {}\",\n-         \"function tearDownPage(){} google_exportSymbol(\\\"tearDownPage\\\",\" +\n+         \"function tearDownPage(){} google_exportSymbol('tearDownPage',\" +\n          \"tearDownPage)\");\n     test(\"function testBar() { function testB() {}}\",\n          \"function testBar(){function testB(){}}\"\n-             + \"google_exportSymbol(\\\"testBar\\\",testBar)\");\n+             + \"google_exportSymbol('testBar',testBar)\");\n     testSame(\"var testCase = {}; testCase.setUpPage = function() {}\");\n   }\n \n          \"var Foo = function() {var testA = function() {}}\");\n     test(\"var setUp = function() {}\",\n          \"var setUp = function() {}; \" +\n-         \"google_exportSymbol(\\\"setUp\\\",setUp)\");\n+         \"google_exportSymbol('setUp',setUp)\");\n     test(\"var setUpPage = function() {}\",\n          \"var setUpPage = function() {}; \" +\n-         \"google_exportSymbol(\\\"setUpPage\\\",setUpPage)\");\n+         \"google_exportSymbol('setUpPage',setUpPage)\");\n     test(\"var tearDown = function() {}\",\n          \"var tearDown = function() {}; \" +\n-         \"google_exportSymbol(\\\"tearDown\\\",tearDown)\");\n+         \"google_exportSymbol('tearDown',tearDown)\");\n     test(\"var tearDownPage = function() {}\",\n          \"var tearDownPage = function() {}; \" +\n-         \"google_exportSymbol(\\\"tearDownPage\\\", tearDownPage)\");\n+         \"google_exportSymbol('tearDownPage', tearDownPage)\");\n     test(\"var testBar = function() { var testB = function() {}}\",\n          \"var testBar = function(){ var testB = function() {}}; \" +\n-         \"google_exportSymbol(\\\"testBar\\\",testBar)\");\n+         \"google_exportSymbol('testBar',testBar)\");\n   }\n \n+  public void testFunctionAssignmentsAreExported() {\n+    test(\"Foo = {}; Foo.prototype.bar = function() {};\",\n+         \"Foo = {}; Foo.prototype.bar = function() {};\");\n+\n+    test(\"Foo = {}; Foo.prototype.setUpPage = function() {};\",\n+         \"Foo = {}; Foo.prototype.setUpPage = function() {};\"\n+         + \"google_exportProperty(Foo.prototype, 'setUpPage', \"\n+         + \"Foo.prototype.setUpPage);\");\n+\n+    test(\"Foo = {}; Foo.prototype.testBar = function() {};\",\n+         \"Foo = {}; Foo.prototype.testBar = function() {};\"\n+         + \"google_exportProperty(Foo.prototype, 'testBar', \"\n+         + \"Foo.prototype.testBar);\");\n+\n+    test(\"Foo = {}; Foo.prototype.testBar = function() \"\n+         + \"{ var testBaz = function() {}};\",\n+         \"Foo = {}; Foo.prototype.testBar = function() \"\n+         + \"{ var testBaz = function() {}};\"\n+         + \"google_exportProperty(Foo.prototype, 'testBar', \"\n+         + \"Foo.prototype.testBar);\");\n+\n+    test(\"Foo = {}; Foo.baz.prototype.testBar = function() \"\n+         + \"{ var testBaz = function() {}};\",\n+         \"Foo = {}; Foo.baz.prototype.testBar = function() \"\n+         + \"{ var testBaz = function() {}};\"\n+         + \"google_exportProperty(Foo.baz.prototype, 'testBar', \"\n+         + \"Foo.baz.prototype.testBar);\");\n+  }\n }", "timestamp": 1315419259, "metainfo": ""}