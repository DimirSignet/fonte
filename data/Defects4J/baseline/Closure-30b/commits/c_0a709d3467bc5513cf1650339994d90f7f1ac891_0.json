{"sha": "0a709d3467bc5513cf1650339994d90f7f1ac891", "log": "fix a symbol table crash  R=acleung DELTA=56  (44 added, 7 deleted, 5 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3781   ", "commit": "\n--- a/src/com/google/javascript/jscomp/SymbolTable.java\n+++ b/src/com/google/javascript/jscomp/SymbolTable.java\n         Node declNode = decl.getNode();\n \n         // If we have a declaration node, we can ensure the symbol is declared.\n-        mySymbol = symbols.get(declNode, name);\n+        mySymbol = isAnySymbolDeclared(name, declNode, myScope);\n         if (mySymbol == null) {\n-          // Sometimes, our symbol tables will disagree on where the\n-          // declaration node should be. In the rare case where this happens,\n-          // trust the existing symbol.\n-          // See SymbolTableTest#testDeclarationDisagreement.\n-          mySymbol = myScope.ownSymbols.get(otherSymbol.getName());\n-          if (mySymbol == null) {\n-            mySymbol = copySymbolTo(otherSymbol, declNode, myScope);\n-          }\n+          mySymbol = copySymbolTo(otherSymbol, declNode, myScope);\n         }\n       } else {\n         // If we don't have a declaration node, we won't be able to declare\n         }\n       }\n     }\n+  }\n+\n+  /**\n+   * Checks if any symbol is already declared at the given node and scope\n+   * for the given name. If so, returns it.\n+   */\n+  private Symbol isAnySymbolDeclared(\n+      String name, Node declNode, SymbolScope scope) {\n+    Symbol sym = symbols.get(declNode, name);\n+    if (sym == null) {\n+      // Sometimes, our symbol tables will disagree on where the\n+      // declaration node should be. In the rare case where this happens,\n+      // trust the existing symbol.\n+      // See SymbolTableTest#testDeclarationDisagreement.\n+      return scope.ownSymbols.get(name);\n+    }\n+    return sym;\n   }\n \n   /** Helper for addSymbolsFrom, to determine the best declaration spot. */\n       Node declNode) {\n     Symbol symbol = new Symbol(name, type, inferred, scope);\n     Symbol replacedSymbol = symbols.put(declNode, name, symbol);\n-    Preconditions.checkState(replacedSymbol == null);\n+    Preconditions.checkState(\n+        replacedSymbol == null,\n+        \"Found duplicate symbol %s in global index. Type %s\", name, type);\n \n     replacedSymbol = scope.ownSymbols.put(name, symbol);\n-    Preconditions.checkState(replacedSymbol == null);\n+    Preconditions.checkState(\n+        replacedSymbol == null,\n+        \"Found duplicate symbol %s in its scope. Type %s\", name, type);\n     return symbol;\n   }\n \n \n           String name = currentNode.getQualifiedName();\n           if (name != null) {\n-            Symbol namespace = root.scope.getSlot(name);\n+            Symbol namespace =\n+                isAnySymbolDeclared(name, currentNode, root.scope);\n+            if (namespace == null) {\n+              namespace = root.scope.getSlot(name);\n+            }\n \n             if (namespace == null && root.scope.isGlobalScope()) {\n               namespace = declareSymbol(name,\n--- a/test/com/google/javascript/jscomp/SymbolTableTest.java\n+++ b/test/com/google/javascript/jscomp/SymbolTableTest.java\n     Symbol googDomHelper = getGlobalVar(table, \"goog.dom.DomHelper\");\n     assertNotNull(googDomHelper);\n     assertEquals(2, Iterables.size(table.getReferences(googDomHelper)));\n+  }\n+\n+  public void testGlobalRichObjectReference() throws Exception {\n+    SymbolTable table = createSymbolTable(\n+        \"/** @constructor */\\n\" +\n+        \"function A(){};\\n\" +\n+        \"/** @type {?A} */ A.prototype.b;\\n\" +\n+        \"/** @type {A} */ var a = new A();\\n\" +\n+        \"function g() {\\n\" +\n+        \"  return a.b ? 'x' : 'y';\\n\" +\n+        \"}\\n\" +\n+        \"(function() {\\n\" +\n+        \"  var x; if (x) { x = a.b.b; } else { x = a.b.c; }\\n\" +\n+        \"  return x;\\n\" +\n+        \"})();\\n\");\n+\n+    Symbol ab = getGlobalVar(table, \"a.b\");\n+    assertNotNull(ab);\n+    assertEquals(1, table.getReferenceList(ab).size());\n   }\n \n   public void testRemovalOfNamespacedReferencesOfProperties()", "timestamp": 1321655561, "metainfo": ""}