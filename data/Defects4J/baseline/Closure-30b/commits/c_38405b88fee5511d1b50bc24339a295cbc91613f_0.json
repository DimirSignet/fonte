{"sha": "38405b88fee5511d1b50bc24339a295cbc91613f", "log": "-Convert goog.object.create() calls into object literals when possible.  R=johnlenz DELTA=199  (199 added, 0 deleted, 0 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1621   ", "commit": "\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/ClosureOptimizePrimitives.java\n+/*\n+ * Copyright 2011 The Closure Compiler Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+import com.google.common.collect.Lists;\n+import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+\n+import java.util.List;\n+\n+/**\n+ * <p>Compiler pass that converts all calls to:\n+ *   goog.object.create(key1, val1, key2, val2, ...) where all of the keys\n+ *   are literals into object literals.</p>\n+ *\n+ * @author agrieve@google.com (Andrew Grieve)\n+ */\n+final class ClosureOptimizePrimitives implements CompilerPass {\n+\n+  /** Reference to the JS compiler */\n+  private final AbstractCompiler compiler;\n+\n+  /**\n+   * Identifies all calls to goog.object.create.\n+   */\n+  private class FindObjectCreateCalls extends AbstractPostOrderCallback {\n+    List<Node> callNodes = Lists.newArrayList();\n+\n+    @Override\n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+      if (n.getType() == Token.CALL) {\n+        String fnName = n.getFirstChild().getQualifiedName();\n+        if (\"goog$object$create\".equals(fnName) ||\n+            \"goog.object.create\".equals(fnName)) {\n+          callNodes.add(n);\n+        }\n+      }\n+    }\n+  }\n+\n+  /**\n+   * @param compiler The AbstractCompiler\n+   */\n+  ClosureOptimizePrimitives(AbstractCompiler compiler) {\n+    this.compiler = compiler;\n+  }\n+\n+  @Override\n+  public void process(Node externs, Node root) {\n+    FindObjectCreateCalls pass = new FindObjectCreateCalls();\n+    NodeTraversal.traverse(compiler, root, pass);\n+    processObjectCreateCalls(pass.callNodes);\n+  }\n+\n+  /**\n+   * Converts all of the given call nodes to object literals that are safe to\n+   * do so.\n+   */\n+  private void processObjectCreateCalls(List<Node> callNodes) {\n+    for (Node callNode : callNodes) {\n+      Node curParam = callNode.getFirstChild().getNext();\n+      if (canOptimizeObjectCreate(curParam)) {\n+        Node objNode = new Node(Token.OBJECTLIT)\n+            .copyInformationFrom(callNode);\n+        while (curParam != null) {\n+          Node keyNode = curParam;\n+          Node valueNode = curParam.getNext();\n+          curParam = valueNode.getNext();\n+\n+          callNode.removeChild(keyNode);\n+          callNode.removeChild(valueNode);\n+\n+          if (keyNode.getType() != Token.STRING) {\n+            keyNode = Node.newString(NodeUtil.getStringValue(keyNode))\n+                .copyInformationFrom(keyNode);\n+            keyNode.setQuotedString();\n+          }\n+          keyNode.addChildToBack(valueNode);\n+          objNode.addChildToBack(keyNode);\n+        }\n+        callNode.getParent().replaceChild(callNode, objNode);\n+        compiler.reportCodeChange();\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Returns whether the given call to goog.object.create can be converted to an\n+   * object literal.\n+   */\n+  private boolean canOptimizeObjectCreate(Node firstParam) {\n+    Node curParam = firstParam;\n+    while (curParam != null) {\n+      // All keys must be strings or numbers.\n+      if (curParam.getType() != Token.STRING &&\n+          curParam.getType() != Token.NUMBER) {\n+        return false;\n+      }\n+      curParam = curParam.getNext();\n+\n+      // Check for an odd number of parameters.\n+      if (curParam == null) {\n+        return false;\n+      }\n+      curParam = curParam.getNext();\n+    }\n+    return true;\n+  }\n+}\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n       passes.add(smartNamePass);\n     }\n \n+    // This needs to come after the inline constants pass, which is run within\n+    // the code removing passes.\n+    if (options.closurePass) {\n+      passes.add(closureOptimizePrimitives);\n+    }\n+\n     // TODO(user): This forces a first crack at crossModuleCodeMotion\n     // before devirtualization. Once certain functions are devirtualized,\n     // it confuses crossModuleCodeMotion ability to recognized that\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n       return new ClosureCodeRemoval(compiler, options.removeAbstractMethods,\n           options.removeClosureAsserts);\n+    }\n+  };\n+\n+  /** Special case optimizations for closure functions. */\n+  private final PassFactory closureOptimizePrimitives =\n+      new PassFactory(\"closureOptimizePrimitives\", true) {\n+    @Override\n+    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n+      return new ClosureOptimizePrimitives(compiler);\n     }\n   };\n \n--- /dev/null\n+++ b/test/com/google/javascript/jscomp/ClosureOptimizePrimitivesTest.java\n+/*\n+ * Copyright 2011 The Closure Compiler Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+/**\n+ * Tests for {@link ClosureOptimizePrimitives}.\n+ *\n+ * @author agrieve@google.com (Andrew Grieve)\n+ */\n+public class ClosureOptimizePrimitivesTest extends CompilerTestCase {\n+\n+  @Override public CompilerPass getProcessor(final Compiler compiler) {\n+    return new ClosureOptimizePrimitives(compiler);\n+  }\n+\n+  public void testObjectCreateNonConstKey() {\n+    testSame(\"goog.object.create('a',1,2,3,foo,bar);\");\n+  }\n+\n+  public void testObjectCreateOddParams() {\n+    testSame(\"goog.object.create('a',1,2);\");\n+  }\n+\n+  public void testObjectCreate1() {\n+    test(\"var a = goog.object.create()\", \"var a = {}\");\n+  }\n+\n+  public void testObjectCreate2() {\n+    test(\"var a = goog$object$create('b',goog$object$create('c','d'))\",\n+         \"var a = {b:{c:'d'}};\");\n+  }\n+\n+  public void testObjectCreate3() {\n+    test(\"var a = goog.object.create(1,2)\", \"var a = {1:2}\");\n+  }\n+\n+  public void testObjectCreate4() {\n+    test(\"alert(goog.object.create(1,2).toString())\",\n+         \"alert({1:2}.toString())\");\n+  }\n+\n+  public void testObjectCreate5() {\n+    test(\"goog.object.create('a',2).toString()\", \"({a:2}).toString()\");\n+  }\n+}", "timestamp": 1303833084, "metainfo": ""}