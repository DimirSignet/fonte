{"sha": "efc318a22abda27465a7e6a64af13f1217c3704b", "log": "Remove support for the @noshadow check.  R=acleung DELTA=263  (0 added, 263 deleted, 0 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3906   ", "commit": "\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n       checks.add(checkRegExp);\n     }\n \n-    if (options.checkShadowVars.isOn()) {\n-      checks.add(checkShadowVars);\n-    }\n-\n     if (options.aggressiveVarCheck.isOn()) {\n       checks.add(checkVariableReferences);\n     }\n               pass.isGlobalRegExpPropertiesUsed());\n         }\n       };\n-    }\n-  };\n-\n-  /** Checks that no vars are illegally shadowed. */\n-  final PassFactory checkShadowVars =\n-      new PassFactory(\"variableShadowDeclarationCheck\", true) {\n-    @Override\n-    protected CompilerPass createInternal(AbstractCompiler compiler) {\n-      return new VariableShadowDeclarationCheck(\n-          compiler, options.checkShadowVars);\n     }\n   };\n \n--- a/src/com/google/javascript/jscomp/WarningLevel.java\n+++ b/src/com/google/javascript/jscomp/WarningLevel.java\n \n     // Allow passes that aren't going to report anything to be skipped.\n \n-    // NOTE: options.checkShadowVars is not in this list as it produces an\n-    // error.\n     options.checkRequires = CheckLevel.OFF;\n     options.checkProvides = CheckLevel.OFF;\n     options.checkMissingGetCssNameLevel = CheckLevel.OFF;", "timestamp": 1322848537, "metainfo": ""}