{"sha": "22a391c3aa410c29a806627d8ab5fdae0d2f9e3a", "log": "Drop the pre-Opera 11.10 workaround.  There have been several Opera release.  R=acleung DELTA=321  (0 added, 321 deleted, 0 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3863   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n   String replaceStringsPlaceholderToken;\n   // A list of strings that should not be used as replacements\n   Set<String> replaceStringsReservedStrings;\n-\n-  // Fixes open source issue: 390\n-  boolean operaCompoundAssignFix;\n \n   /** List of properties that we report invalidation errors for. */\n   Map<String, CheckLevel> propertyInvalidationErrors;\n \n     // Debugging\n     aliasHandler = NULL_ALIAS_TRANSFORMATION_HANDLER;\n-\n-    operaCompoundAssignFix = true;\n   }\n \n   /**\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n       passes.add(rescopeGlobalSymbols);\n     }\n \n-    if (options.operaCompoundAssignFix) {\n-      passes.add(operaCompoundAssignFix);\n-    }\n-\n     // Safety checks\n     passes.add(sanityCheckAst);\n     passes.add(sanityCheckVars);\n           anonymousFunctionNameMap = naf.getFunctionMap();\n         }\n       };\n-    }\n-  };\n-\n-  final PassFactory operaCompoundAssignFix =\n-      new PassFactory(\"operaCompoundAssignFix\", true) {\n-    @Override\n-    protected CompilerPass createInternal(AbstractCompiler compiler) {\n-      return new OperaCompoundAssignFix(compiler);\n     }\n   };\n ", "timestamp": 1322500122, "metainfo": ""}