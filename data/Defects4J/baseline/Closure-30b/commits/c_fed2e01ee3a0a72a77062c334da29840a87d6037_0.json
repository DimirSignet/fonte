{"sha": "fed2e01ee3a0a72a77062c334da29840a87d6037", "log": "give JSError#level a better name  R=acleung DELTA=18  (9 added, 0 deleted, 9 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4285   ", "commit": "\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n \n   @Override\n   public void report(JSError error) {\n-    CheckLevel level = error.level;\n+    CheckLevel level = error.getDefaultLevel();\n     if (warningsGuard != null) {\n       CheckLevel newLevel = warningsGuard.level(error);\n       if (newLevel != null) {\n--- a/src/com/google/javascript/jscomp/JSError.java\n+++ b/src/com/google/javascript/jscomp/JSError.java\n   /** Line number of the source */\n   public final int lineNumber;\n \n-  /** Level */\n+  /** @deprecated Use #getDefaultLevel */\n+  @Deprecated\n   public final CheckLevel level;\n+\n+  private final CheckLevel defaultLevel;\n \n   // character number\n   private final int charno;\n     this.lineNumber = lineno;\n     this.charno = charno;\n     this.sourceName = sourceName;\n+    this.defaultLevel = level == null ? type.level : level;\n     this.level = level == null ? type.level : level;\n   }\n \n     return node != null ? node.getLength() : 0;\n   }\n \n+  /** The default level, before any of the WarningsGuards are applied. */\n+  public CheckLevel getDefaultLevel() {\n+    return defaultLevel;\n+  }\n+\n   @Override\n   public boolean equals(Object o) {\n     // Generated by Intellij IDEA\n     if (!description.equals(jsError.description)) {\n       return false;\n     }\n-    if (level != jsError.level) {\n+    if (defaultLevel != jsError.defaultLevel) {\n       return false;\n     }\n     if (sourceName != null ? !sourceName.equals(jsError.sourceName)\n     result = 31 * result + description.hashCode();\n     result = 31 * result + (sourceName != null ? sourceName.hashCode() : 0);\n     result = 31 * result + lineNumber;\n-    result = 31 * result + level.hashCode();\n+    result = 31 * result + defaultLevel.hashCode();\n     result = 31 * result + charno;\n     return result;\n   }\n--- a/src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java\n+++ b/src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java\n   @Override\n   public CheckLevel level(JSError error) {\n     final String errorPath = error.sourceName;\n-    if (error.level != CheckLevel.ERROR && errorPath != null) {\n+    if (error.getDefaultLevel() != CheckLevel.ERROR && errorPath != null) {\n       boolean inPath = false;\n       for (String path : paths) {\n         inPath |= errorPath.contains(path);\n--- a/src/com/google/javascript/jscomp/StrictWarningsGuard.java\n+++ b/src/com/google/javascript/jscomp/StrictWarningsGuard.java\n     if (error.getType() == UNRAISABLE_WARNING) {\n       return null;\n     }\n-    return error.level.isOn() ? CheckLevel.ERROR : null;\n+    return error.getDefaultLevel().isOn() ? CheckLevel.ERROR : null;\n   }\n \n   @Override\n--- a/src/com/google/javascript/jscomp/jsonml/JsonMLError.java\n+++ b/src/com/google/javascript/jscomp/jsonml/JsonMLError.java\n     int n = error.lineNumber;\n     JsonML element = ast.getElementPreOrder(n);\n \n-    ErrorLevel level = error.level == CheckLevel.ERROR\n+    ErrorLevel level = error.getDefaultLevel() == CheckLevel.ERROR\n         ? ErrorLevel.COMPILATION_ERROR\n         : ErrorLevel.COMPILATION_WARNING;\n ", "timestamp": 1330475206, "metainfo": ""}