{"sha": "b02b646a75d6dd26f41fe6d987841ed01c8ec161", "log": "Make unread bound this argument a warning.  R=nicksantos DELTA=41  (36 added, 2 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=71   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n     DiagnosticType.warning(\n         \"JSC_FUNCTION_LITERAL_UNDEFINED_THIS\",\n         \"Function literal argument refers to undefined this argument\");\n+\n+  static final DiagnosticType FUNCTION_LITERAL_UNREAD_THIS =\n+    DiagnosticType.warning(\n+        \"JSC_FUNCTION_LITERAL_UNREAD_THIS\",\n+        \"Function literal argument does not refer to bound this argument\");\n \n   private final AbstractCompiler compiler;\n   private final JSTypeRegistry registry;\n       if (iParameterType.isTemplateType()) {\n         // Find the actual type of this argument.\n         JSType iArgumentType = null;\n-        boolean foundTemplateTypeArgument = false;\n         if (i + 1 < childCount) {\n-          foundTemplateTypeArgument = true;\n           Node iArgument = n.getChildAtIndex(i + 1);\n           iArgumentType = getJSType(iArgument).restrictByNotNullOrUndefined();\n           if (!(iArgumentType instanceof ObjectType)) {\n               JSType jArgumentType = getJSType(jArgument);\n               if (jArgument.getType() == Token.FUNCTION &&\n                   jArgumentType instanceof FunctionType) {\n-                if (foundTemplateTypeArgument) {\n+                if (iArgumentType != null &&\n+                    // null and undefined get filtered out above.\n+                    !iArgumentType.isNoType()) {\n                   // If it's an function expression, update the type of this\n                   // using the actual type of T.\n                   FunctionType jArgumentFnType = (FunctionType) jArgumentType;\n                     jArgument.setJSType(\n                         registry.createFunctionTypeWithNewThisType(\n                             jArgumentFnType, (ObjectType) iArgumentType));\n+                  }\n+                  // Warn if the anonymous function literal does not reference this.\n+                  if (!NodeUtil.referencesThis(\n+                          NodeUtil.getFunctionBody(jArgument))) {\n+                    compiler.report(JSError.make(NodeUtil.getSourceName(n), n,\n+                        FUNCTION_LITERAL_UNREAD_THIS));\n                   }\n                 } else {\n                   // Warn if the anonymous function literal references this.\n--- a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n         \"* @template T\\n\" +\n         \"*/\\n\" +\n         \"function f(x, y, z) {}\\n\" +\n-        \"f(this, this, function() {});\",\n+        \"f(this, this, function() { this });\",\n         FunctionTypeBuilder.TEMPLATE_TYPE_DUPLICATED.format(), true);\n   }\n \n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"* @template T\\n\" +\n         \"*/\\n\" +\n         \"function f(x, y, z) {}\\n\" +\n-        \"f(this, this, function() {});\",\n+        \"f(this, this, function() { this });\",\n         FunctionTypeBuilder.TEMPLATE_TYPE_DUPLICATED.format(), true);\n   }\n \n         + \" */\\n\"\n         + \"function baz(fn, opt_obj) {}\\n\"\n         + \"baz(function() { this; }, {});\");\n+  }\n+\n+  public void testFunctionLiteralUnreadThisArgument() throws Exception {\n+    testTypes(\"\"\n+        + \"/**\\n\"\n+        + \" * @param {function(this:T, ...)?} fn\\n\"\n+        + \" * @param {?T} opt_obj\\n\"\n+        + \" * @template T\\n\"\n+        + \" */\\n\"\n+        + \"function baz(fn, opt_obj) {}\\n\"\n+        + \"baz(function() {}, {});\",\n+        \"Function literal argument does not refer to bound this argument\");\n+  }\n+\n+  public void testFunctionLiteralUnreadNullThisArgument() throws Exception {\n+    testTypes(\"\"\n+        + \"/**\\n\"\n+        + \" * @param {function(this:T, ...)?} fn\\n\"\n+        + \" * @param {?T} opt_obj\\n\"\n+        + \" * @template T\\n\"\n+        + \" */\\n\"\n+        + \"function baz(fn, opt_obj) {}\\n\"\n+        + \"baz(function() {}, null);\");\n   }\n \n   public void testActiveXObject() throws Exception {", "timestamp": 1291676126, "metainfo": ""}