{"sha": "b291781ac6325a8a65e328d88589a94ae9031450", "log": "Make sure splitting happens after we had a chance to look into what the loops are doing.  R=zhuyi DELTA=22  (18 added, 0 deleted, 4 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2318   ", "commit": "\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n   private static final int OR_PRECEDENCE = NodeUtil.precedence(Token.OR);\n   private static final int NOT_PRECEDENCE = NodeUtil.precedence(Token.NOT);\n \n-  private final boolean doCommaSpliting;\n+  private final boolean late;\n \n   private final int STRING_SPLIT_OVERHEAD = \".split('.')\".length();\n \n     }\n   };\n \n-  PeepholeSubstituteAlternateSyntax(boolean doCommaSpliting) {\n-    this.doCommaSpliting = doCommaSpliting;\n+  /**\n+   * @param late When late is false, this mean we are currently running before\n+   * most of the other optimizations. In this case we would avoid optimizations\n+   * that would make the code harder to analyze (such as using string spliting,\n+   * merging statements with commans, etc). When this is true, we would\n+   * do anything to minimize for size.\n+   */\n+  PeepholeSubstituteAlternateSyntax(boolean late) {\n+    this.late = late;\n   }\n \n   /**\n   }\n \n   private Node tryFoldComma(Node n) {\n-    if (!doCommaSpliting) {\n+    if (!late) {\n       return n;\n     }\n     Node parent = n.getParent();\n   }\n \n   private Node tryMinimizeStringArrayLiteral(Node n) {\n+    if(!late) {\n+      return n;\n+    }\n     int numElements = n.getChildCount();\n     // We save two bytes per element.\n     int saving = numElements * 2 - STRING_SPLIT_OVERHEAD;", "timestamp": 1308588970, "metainfo": ""}