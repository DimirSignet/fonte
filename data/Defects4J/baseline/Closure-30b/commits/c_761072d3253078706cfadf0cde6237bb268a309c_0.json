{"sha": "761072d3253078706cfadf0cde6237bb268a309c", "log": "Fiddle with the API a bit, to make it clearer that this scope creator is typed and memoized.  R=johnlenz,bashir DELTA=19  (5 added, 0 deleted, 14 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=518   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AbstractCompiler.java\n+++ b/src/com/google/javascript/jscomp/AbstractCompiler.java\n   public abstract JSTypeRegistry getTypeRegistry();\n \n   /**\n-   * Gets a memoized scope creator.\n-   */\n-  abstract ScopeCreator getScopeCreator();\n+   * Gets a memoized scope creator with type information.\n+   */\n+  abstract ScopeCreator getTypedScopeCreator();\n \n   /**\n    * Gets the top scope.\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n   }\n \n   @Override\n-  ScopeCreator getScopeCreator() {\n-    return getPassConfig().getScopeCreator();\n+  ScopeCreator getTypedScopeCreator() {\n+    return getPassConfig().getTypedScopeCreator();\n   }\n \n   @Override\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n         @Override\n         public void process(Node externs, Node root) {\n           Preconditions.checkNotNull(topScope);\n-          Preconditions.checkNotNull(typedScopeCreator);\n+          Preconditions.checkNotNull(getTypedScopeCreator());\n \n           makeTypeInference(compiler).process(externs, root);\n         }\n         @Override\n         public void process(Node externs, Node root) {\n           Preconditions.checkNotNull(topScope);\n-          Preconditions.checkNotNull(typedScopeCreator);\n+          Preconditions.checkNotNull(getTypedScopeCreator());\n \n           TypeCheck check = makeTypeCheck(compiler);\n           check.process(externs, root);\n--- a/src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java\n+++ b/src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java\n     // Use the MemoizedScopeCreator instance from TypeCheck if available\n     // as FunctionTypeBuilder warns about existing types if TypedScopeCreator is\n     // ran a second time.\n-    ScopeCreator scopeCreator = compiler.getScopeCreator();\n+    ScopeCreator scopeCreator = compiler.getTypedScopeCreator();\n     if (scopeCreator == null) {\n       // The TypedScopeCreator gives us correct handling of namespaces,\n       // while the default NodeTraversal only gives us a\n       // SyntacticScopeCreator.\n-      scopeCreator = new TypedScopeCreator(compiler);\n+      scopeCreator = new MemoizedScopeCreator(new TypedScopeCreator(compiler));\n     }\n     NodeTraversal externsTraversal = new NodeTraversal(compiler,\n         new Traversal(true), scopeCreator);\n--- a/src/com/google/javascript/jscomp/PassConfig.java\n+++ b/src/com/google/javascript/jscomp/PassConfig.java\n    * we can make two separate passes over the AST, one for inferring types\n    * and one for checking types.\n    */\n-  MemoizedScopeCreator typedScopeCreator;\n+  private MemoizedScopeCreator typedScopeCreator;\n \n   /** The global typed scope. */\n   Scope topScope = null;\n   /**\n    * Gets the scope creator for typed scopes.\n    */\n-  ScopeCreator getScopeCreator() {\n+  ScopeCreator getTypedScopeCreator() {\n     return typedScopeCreator;\n   }\n \n       return delegate.getOptimizations();\n     }\n \n-    @Override ScopeCreator getScopeCreator() {\n-      return delegate.getScopeCreator();\n+    @Override ScopeCreator getTypedScopeCreator() {\n+      return delegate.getTypedScopeCreator();\n     }\n \n     @Override Scope getTopScope() {", "timestamp": 1297717611, "metainfo": ""}