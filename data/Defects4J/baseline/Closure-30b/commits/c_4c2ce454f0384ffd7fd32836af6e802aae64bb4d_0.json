{"sha": "4c2ce454f0384ffd7fd32836af6e802aae64bb4d", "log": "Add a check for the 'debugger' statement in the JSCompiler.  R=johnlenz,acleung DELTA=153  (153 added, 0 deleted, 0 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3490   ", "commit": "\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/CheckDebuggerStatement.java\n+/*\n+ * Copyright 2011 The Closure Compiler Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.javascript.jscomp;\n+\n+import com.google.javascript.jscomp.DiagnosticType;\n+import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+\n+/**\n+ * {@link CheckDebuggerStatement} checks for the presence of the \"debugger\"\n+ * statement in JavaScript code. It is appropriate to use this statement while\n+ * developing JavaScript; however, it is generally undesirable to include it in\n+ * production code.\n+ *\n+ * @author bolinfest@google.com (Michael Bolin)\n+ */\n+class CheckDebuggerStatement extends AbstractPostOrderCallback\n+    implements CompilerPass {\n+\n+  static final DiagnosticType DEBUGGER_STATEMENT_PRESENT =\n+    DiagnosticType.disabled(\"JSC_DEBUGGER_STATEMENT_PRESENT\",\n+        \"Using the debugger statement can halt your application if the user \" +\n+        \"has a JavaScript debugger running.\");\n+\n+  private final AbstractCompiler compiler;\n+\n+  public CheckDebuggerStatement(AbstractCompiler compiler) {\n+    this.compiler = compiler;\n+  }\n+\n+  @Override\n+  public void process(Node externs, Node root) {\n+    NodeTraversal.traverse(compiler, root, this);\n+  }\n+\n+  @Override\n+  public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n.getType() == Token.DEBUGGER) {\n+      t.report(n, DEBUGGER_STATEMENT_PRESENT);\n+    }\n+  }\n+}\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n       if (options.enables(DiagnosticGroups.GLOBAL_THIS)) {\n         sharedCallbacks.add(new CheckGlobalThis(compiler));\n       }\n+\n+      if (options.enables(DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT)) {\n+        sharedCallbacks.add(new CheckDebuggerStatement(compiler));\n+      }\n+\n       return combineChecks(compiler, sharedCallbacks);\n     }\n \n--- a/src/com/google/javascript/jscomp/DiagnosticGroups.java\n+++ b/src/com/google/javascript/jscomp/DiagnosticGroups.java\n       DiagnosticGroups.registerGroup(\"undefinedVars\",\n           VarCheck.UNDEFINED_VAR_ERROR);\n \n+  public static DiagnosticGroup DEBUGGER_STATEMENT_PRESENT =\n+      DiagnosticGroups.registerGroup(\"checkDebuggerStatement\",\n+          CheckDebuggerStatement.DEBUGGER_STATEMENT_PRESENT);\n+\n   public static DiagnosticGroup CHECK_REGEXP =\n       DiagnosticGroups.registerGroup(\"checkRegExp\",\n           CheckRegExp.REGEXP_REFERENCE,\n--- /dev/null\n+++ b/test/com/google/javascript/jscomp/CheckDebuggerStatementTest.java\n+/*\n+ * Copyright 2011 The Closure Compiler Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.javascript.jscomp;\n+\n+import com.google.javascript.jscomp.CheckLevel;\n+import com.google.javascript.jscomp.CompilerOptions;\n+import com.google.javascript.jscomp.DiagnosticGroups;\n+\n+/**\n+ * {@link CheckDebuggerStatementTest} is a unit test for\n+ * {@link CheckDebuggerStatement}.\n+ *\n+ * @author bolinfest@google.com (Michael Bolin)\n+ */\n+public class CheckDebuggerStatementTest extends CompilerTestCase {\n+\n+  private CheckLevel checkLevel;\n+\n+  @Override\n+  public void tearDown() {\n+    checkLevel = null;\n+  }\n+\n+  @Override\n+  protected CompilerPass getProcessor(Compiler compiler) {\n+    return new CheckDebuggerStatement(compiler);\n+  }\n+\n+  @Override\n+  protected CompilerOptions getOptions() {\n+    CompilerOptions options = super.getOptions();\n+    if (checkLevel != null) {\n+      options.setWarningLevel(\n+          DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT,\n+          checkLevel);\n+    }\n+    return options;\n+  }\n+\n+  public void testCheckDebuggerStatement() {\n+    checkLevel = CheckLevel.WARNING;\n+\n+    testSame(\"debugger;\", CheckDebuggerStatement.DEBUGGER_STATEMENT_PRESENT);\n+    testSame(\"function foo() { debugger; }\",\n+        CheckDebuggerStatement.DEBUGGER_STATEMENT_PRESENT);\n+  }\n+\n+  public void testCheckIsDisabledByDefault() {\n+    checkLevel = null;\n+\n+    testSame(\"debugger;\");\n+    testSame(\"function foo() { debugger; }\");\n+  }\n+\n+  public void testNoWarningWhenExplicitlyDisabled() {\n+    checkLevel = CheckLevel.OFF;\n+\n+    testSame(\"debugger;\");\n+    testSame(\"function foo() { debugger; }\");\n+  }\n+\n+  public void testCheckDebuggerKeywordMayAppearInComments() {\n+    checkLevel = CheckLevel.WARNING;\n+\n+    test(\"// I like the debugger; it is helpful.\", \"\");\n+  }\n+\n+  public void testCheckDebuggerStatementInEval() {\n+    checkLevel = CheckLevel.WARNING;\n+\n+    testSame(\"eval('debugger');\");\n+  }\n+\n+}", "timestamp": 1318958564, "metainfo": ""}