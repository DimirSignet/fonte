{"sha": "faa5f67240cbd8def8450cd0e76023d76dda5b9c", "log": "fixed FieldCleanupPass to cover all cases we are currently aware of and added corresponding unit-tests  R=nicksantos,tylerg DELTA=155  (103 added, 40 deleted, 12 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3280   ", "commit": "\n--- a/src/com/google/javascript/jscomp/FieldCleanupPass.java\n+++ b/src/com/google/javascript/jscomp/FieldCleanupPass.java\n \n package com.google.javascript.jscomp;\n \n-import com.google.common.collect.ImmutableList;\n import com.google.javascript.jscomp.NodeTraversal.AbstractShallowCallback;\n import com.google.javascript.jscomp.NodeTraversal.Callback;\n import com.google.javascript.rhino.Node;\n       // We are a root GetProp\n       if (NodeUtil.isGetProp(n) && !NodeUtil.isGetProp(p)) {\n         String propName = getFieldName(n);\n-        Iterable<JSType> types = ImmutableList.copyOf(\n-            typeRegistry.getTypesWithProperty(propName));\n-        for (JSType type : types) {\n-          ObjectType objType = type.toObjectType();\n-          if (objType != null) {\n-            Node pNode = objType.getPropertyNode(propName);\n-            if (pNode != null && srcName.equals(pNode.getSourceFileName())) {\n-              typeRegistry.unregisterPropertyOnType(propName, type);\n-              objType.removeProperty(propName);\n-            }\n-          }\n+        JSType type = n.getFirstChild().getJSType();\n+        if (type == null || type.toObjectType() == null) {\n+          // Note cases like <primitive>.field\n+          return;\n         }\n+        removeProperty(type.toObjectType(), propName);\n+      }\n+    }\n+\n+    /**\n+     * Removes a given property from a type and updates type-registry.\n+     *\n+     * @param type the object type to be updated, should not be null\n+     * @param propName the property to remove\n+     */\n+    private void removeProperty(ObjectType type, String propName) {\n+      Node pNode = type.getPropertyNode(propName);\n+      if (pNode != null && srcName.equals(pNode.getSourceFileName())) {\n+        typeRegistry.unregisterPropertyOnType(propName, type);\n+        type.removeProperty(propName);\n       }\n     }\n \n--- a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n+++ b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n    * @param type the type to unregister the property on.\n    */\n   public void unregisterPropertyOnType(String propertyName, JSType type) {\n+    // TODO(bashir): typesIndexedByProperty should also be updated!\n     Map<String, ObjectType> typeSet =\n         eachRefTypeIndexedByProperty.get(propertyName);\n     if (typeSet != null) {", "timestamp": 1316187279, "metainfo": ""}