{"sha": "7607c67e6094775757ae2fa50793a6b99dd28a89", "log": "slight tweak to arity checking: if the subclass method doesn't need all the arguments of the superclass method, then don't require them  R=johnlenz DELTA=73  (62 added, 7 deleted, 4 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4217   ", "commit": "\n--- a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n+++ b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n         }\n       }\n \n-      // Clone any remaining params that aren't in the function literal.\n+      // Clone any remaining params that aren't in the function literal,\n+      // but make them optional.\n       while (oldParams.hasNext()) {\n-        paramBuilder.newParameterFromNode(oldParams.next());\n+        paramBuilder.newOptionalParameterFromNode(oldParams.next());\n       }\n \n       parametersNode = paramBuilder.build();\n--- a/src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java\n     return newParam;\n   }\n \n+  /**\n+   * Copies the parameter specification from the given node,\n+   * but makes sure it's optional.\n+   */\n+  public Node newOptionalParameterFromNode(Node n) {\n+    Node newParam = newParameterFromNode(n);\n+    if (!newParam.isVarArgs() && !newParam.isOptionalArg()) {\n+      newParam.setOptionalArg(true);\n+    }\n+    return newParam;\n+  }\n+\n   // Add a parameter to the list with the given type.\n   private Node newParameter(JSType type) {\n     Node paramNode = Node.newString(Token.NAME, \"\");\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"original: function (this:Foo, ...[number]): undefined\\n\" +\n         \"override: function (this:SubFoo, number): undefined\");\n         */\n+  }\n+\n+  public void testOverriddenParams5() throws Exception {\n+    testTypes(\n+        \"/** @constructor */ function Foo() {}\" +\n+        \"/** @param {number} x */\" +\n+        \"Foo.prototype.bar = function(x) { };\" +\n+        \"/**\\n\" +\n+        \" * @constructor\\n\" +\n+        \" * @extends {Foo}\\n\" +\n+        \" */ function SubFoo() {}\" +\n+        \"/**\\n\" +\n+        \" * @override\\n\" +\n+        \" */\" +\n+        \"SubFoo.prototype.bar = function() {};\" +\n+        \"(new SubFoo()).bar();\");\n+  }\n+\n+  public void testOverriddenParams6() throws Exception {\n+    testTypes(\n+        \"/** @constructor */ function Foo() {}\" +\n+        \"/** @param {number} x */\" +\n+        \"Foo.prototype.bar = function(x) { };\" +\n+        \"/**\\n\" +\n+        \" * @constructor\\n\" +\n+        \" * @extends {Foo}\\n\" +\n+        \" */ function SubFoo() {}\" +\n+        \"/**\\n\" +\n+        \" * @override\\n\" +\n+        \" */\" +\n+        \"SubFoo.prototype.bar = function() {};\" +\n+        \"(new SubFoo()).bar(true);\",\n+        \"actual parameter 1 of SubFoo.prototype.bar \" +\n+        \"does not match formal parameter\\n\" +\n+        \"found   : boolean\\n\" +\n+        \"required: number\");\n   }\n \n   public void testOverriddenReturn1() throws Exception {", "timestamp": 1329235953, "metainfo": ""}