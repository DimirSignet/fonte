{"sha": "a2d9c861616c0308024d74a3be2b34f3d4cdd066", "log": "Create an Emergency fail-safe switch  R=acleung DELTA=198  (173 added, 13 deleted, 12 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1650   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n    * If you want to ignore the flags API, or intepret flags your own way,\n    * then you should override this method.\n    */\n-  final protected void setRunOptions(CompilerOptions options)\n+  protected void setRunOptions(CompilerOptions options)\n       throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n \n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n     guards.add(\n         new SuppressDocWarningsGuard(\n             getDiagnosticGroups().getRegisteredGroups()));\n-    WarningsGuard warningsGuard = options.getWarningsGuard();\n-    if (warningsGuard != null) {\n-      guards.add(options.getWarningsGuard());\n-    }\n+    guards.add(options.getWarningsGuard());\n \n     // All passes must run the variable check. This synthesizes\n     // variables later so that the compiler doesn't crash. It also\n   @Override\n   public CheckLevel getErrorLevel(JSError error) {\n     Preconditions.checkNotNull(options);\n-    WarningsGuard guards = options.getWarningsGuard();\n-    if (guards == null) {\n-      return error.level;\n-    } else {\n-      return guards.level(error);\n-    }\n+    return warningsGuard.level(error);\n   }\n \n   /**\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n \n   public String jsOutputFile;\n \n-  private transient ComposeWarningsGuard warningsGuard;\n+  private transient ComposeWarningsGuard warningsGuard =\n+      new ComposeWarningsGuard();\n \n   int summaryDetailLevel = 1;\n \n     tracer = TracerMode.OFF;\n     colorizeErrorOutput = false;\n     errorFormat = ErrorFormat.SINGLELINE;\n-    warningsGuard = null;\n     debugFunctionSideEffectsPath = null;\n     jsOutputFile = \"\";\n     externExports = false;\n    * group of warnings.\n    */\n   boolean enables(DiagnosticGroup type) {\n-    return warningsGuard != null && warningsGuard.enables(type);\n+    return warningsGuard.enables(type);\n   }\n \n   /**\n    * group of warnings.\n    */\n   boolean disables(DiagnosticGroup type) {\n-    return warningsGuard != null && warningsGuard.disables(type);\n+    return warningsGuard.disables(type);\n   }\n \n   /**\n   }\n \n   /**\n+   * The emergency fail safe removes all strict and ERROR-escalating\n+   * warnings guards.\n+   */\n+  void useEmergencyFailSafe() {\n+    warningsGuard = warningsGuard.makeEmergencyFailSafeGuard();\n+  }\n+\n+  /**\n    * Add a guard to the set of warnings guards.\n    */\n   public void addWarningsGuard(WarningsGuard guard) {\n-    if (warningsGuard == null) {\n-      warningsGuard = new ComposeWarningsGuard(guard);\n-    } else {\n-      warningsGuard.addGuard(guard);\n-    }\n+    warningsGuard.addGuard(guard);\n   }\n \n   /**\n--- a/src/com/google/javascript/jscomp/ComposeWarningsGuard.java\n+++ b/src/com/google/javascript/jscomp/ComposeWarningsGuard.java\n     return Collections.unmodifiableList(Lists.newArrayList(guards));\n   }\n \n+  /**\n+   * Make a warnings guard that's the same as this one but with\n+   * all escalating guards turned down.\n+   */\n+  ComposeWarningsGuard makeEmergencyFailSafeGuard() {\n+    ComposeWarningsGuard safeGuard = new ComposeWarningsGuard();\n+    for (WarningsGuard guard : guards.descendingSet()) {\n+      if (guard instanceof StrictWarningsGuard) {\n+        continue;\n+      } else if (guard instanceof DiagnosticGroupWarningsGuard) {\n+        DiagnosticGroupWarningsGuard dgGuard =\n+            (DiagnosticGroupWarningsGuard) guard;\n+        if (dgGuard.level == CheckLevel.ERROR) {\n+          safeGuard.addGuard(\n+              new DiagnosticGroupWarningsGuard(\n+                  dgGuard.group, CheckLevel.WARNING));\n+        } else {\n+        safeGuard.addGuard(guard);\n+        }\n+      } else {\n+        safeGuard.addGuard(guard);\n+      }\n+    }\n+    return safeGuard;\n+  }\n+\n   @Override\n   public String toString() {\n     return Joiner.on(\", \").join(guards);\n--- a/src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java\n+++ b/src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java\n  * @author nicksantos@google.com (Nick Santos)\n  */\n public class DiagnosticGroupWarningsGuard extends WarningsGuard {\n-  private final DiagnosticGroup group;\n-  private final CheckLevel level;\n+  final DiagnosticGroup group;\n+  final CheckLevel level;\n \n   public DiagnosticGroupWarningsGuard(\n       DiagnosticGroup group, CheckLevel level) {", "timestamp": 1303934325, "metainfo": ""}