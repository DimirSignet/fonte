{"sha": "6c2efacb7315e03b25d0b23a6c881df9955b210a", "log": "Turn off data-flow based variable analysis for pathological cases Fixes issue 534 Fixes issue 446  R=acleung DELTA=397552  (397543 added, 2 deleted, 7 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3085   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CoalesceVariableNames.java\n+++ b/src/com/google/javascript/jscomp/CoalesceVariableNames.java\n     NodeTraversal.traverse(compiler, root, this);\n   }\n \n-  @Override\n-  public void enterScope(NodeTraversal t) {\n+  private static boolean shouldOptimizeScope(Scope scope) {\n     // TODO(user): We CAN do this in the global scope, just need to be\n     // careful when something is exported. Liveness uses bit-vector for live\n     // sets so I don't see compilation time will be a problem for running this\n     // pass in the global scope.\n-    if (t.inGlobalScope()) {\n+    if (scope.isGlobal()) {\n+      return false;\n+    }\n+\n+    if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE <\n+        scope.getVarCount()) {\n+      return false;\n+    }\n+\n+    return true;\n+  }\n+\n+  @Override\n+  public void enterScope(NodeTraversal t) {\n+    Scope scope = t.getScope();\n+    if (!shouldOptimizeScope(scope)) {\n       return;\n     }\n-    Scope scope = t.getScope();\n+\n     ControlFlowGraph<Node> cfg = t.getControlFlowGraph();\n-\n     LiveVariablesAnalysis liveness =\n         new LiveVariablesAnalysis(cfg, scope, compiler);\n     // If the function has exactly 2 params, mark them as escaped. This is\n \n   @Override\n   public void exitScope(NodeTraversal t) {\n-    if (t.inGlobalScope()) {\n+    if (!shouldOptimizeScope(t.getScope())) {\n       return;\n     }\n     colorings.pop();\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n     // -Xmx1024 in closure. We might have to look at coding conventions for\n     // exported variables as well.\n     if (scope.isGlobal()) {\n+      return;\n+    }\n+\n+    if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE <\n+        t.getScope().getVarCount()) {\n       return;\n     }\n \n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n \n     if (t.inGlobalScope()) {\n       return; // Don't even brother. All global variables are likely escaped.\n+    }\n+\n+    if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE <\n+        t.getScope().getVarCount()) {\n+      return;\n     }\n \n     // Compute the forward reaching definition.\n--- a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n+++ b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n class LiveVariablesAnalysis extends\n     DataFlowAnalysis<Node, LiveVariablesAnalysis.LiveVariableLattice> {\n \n+  // 25 = (# of original Power Rangers) ^ (# years of Warren Harding in office)\n+  static final int MAX_VARIABLES_TO_ANALYZE = 25;\n+\n   public static final String ARGUMENT_ARRAY_ALIAS = \"arguments\";\n \n   private static class LiveVariableJoinOp\n--- a/test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java\n+++ b/test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java\n                \"var closure_var; function bar() { print(closure_var); }\");\n   }\n \n+  public void testMaxVars() {\n+    String code = \"\";\n+    for (int i = 0;\n+         i < LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE + 1; i++) {\n+      code += String.format(\"var x%d = 0; print(x%d);\", i, i);\n+    }\n+    inFunction(code);\n+  }\n+\n   private void inFunction(String src) {\n     inFunction(src, src);\n   }", "timestamp": 1314056148, "metainfo": ""}