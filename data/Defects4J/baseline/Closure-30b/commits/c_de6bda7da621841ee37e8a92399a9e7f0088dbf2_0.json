{"sha": "de6bda7da621841ee37e8a92399a9e7f0088dbf2", "log": "Only run prototype extraction when variable renaming is on.  R=acleung DELTA=50  (14 added, 29 deleted, 7 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=53016   ", "commit": "\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n     //\n     // Extracting prototype properties screws up the heuristic renaming\n     // policies, so never run it when those policies are requested.\n+    //\n+    // It also introduces new variables in the global scope, so we should\n+    // only run it when variable renaming is on.\n+    //\n+    // TODO(nicksantos): make prototype extraction a tri-state flag.\n     if (options.extractPrototypeMemberDeclarations &&\n+        options.variableRenaming == VariableRenamingPolicy.ALL &&\n         (options.propertyRenaming != PropertyRenamingPolicy.HEURISTIC &&\n          options.propertyRenaming !=\n             PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {\n--- a/src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java\n+++ b/src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java\n \n   // The name of variable that will temporary hold the pointer to the prototype\n   // object. Of cause, we assume that it'll be renamed by RenameVars.\n-  private String prototypeAlias = null;\n+  private String prototypeAlias = \"JSCompiler_prototypeAlias\";\n \n   private final AbstractCompiler compiler;\n \n         return;\n       }\n \n-      if (prototypeAlias == null) {\n-        // Always in global scope\n-        prototypeAlias =\n-          new VariableNameGenerator(t.getScope()).getNameNewName();\n-      }\n-\n       for (Node cur = n.getFirstChild(); cur != null; cur = cur.getNext()) {\n         PrototypeMemberDeclaration prototypeMember =\n             PrototypeMemberDeclaration.extractDeclaration(cur);\n--- a/test/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarationsTest.java\n+++ b/test/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarationsTest.java\n *\n  */\n public class ExtractPrototypeMemberDeclarationsTest extends CompilerTestCase {\n-  private static final String TMP = \"a\";\n+  private static final String TMP = \"JSCompiler_prototypeAlias\";\n \n   @Override\n   protected void setUp() {\n     super.enableLineNumberCheck(true);\n+    enableNormalize();\n   }\n \n   @Override\n         TMP + \".y.g = 1;\");\n   }\n \n-  public void testUsedNameInScope() {\n-    test(\n-        \"var a = 0;\" +\n-        \"x.prototype.y.a = 1;\" +\n-        \"x.prototype.y.b = 1;\" +\n-        \"x.prototype.y.c = 1;\" +\n-        \"x.prototype.y.d = 1;\" +\n-        \"x.prototype.y.e = 1;\" +\n-        \"x.prototype.y.f = 1;\" +\n-        \"x.prototype.y.g = 1;\",\n-        \"var b;\" +\n-        \"var a = 0;\" +\n-        \"b = x.prototype;\" +\n-        \"b.y.a = 1;\" +\n-        \"b.y.b = 1;\" +\n-        \"b.y.c = 1;\" +\n-        \"b.y.d = 1;\" +\n-        \"b.y.e = 1;\" +\n-        \"b.y.f = 1;\" +\n-        \"b.y.g = 1;\");\n-  }\n-\n   public void testWithDevirtualization() {\n     extract(\n         \"x.prototype.a = 1;\" +", "timestamp": 1279573352, "metainfo": ""}