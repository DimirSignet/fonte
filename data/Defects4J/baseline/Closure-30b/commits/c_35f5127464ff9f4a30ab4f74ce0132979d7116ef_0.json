{"sha": "35f5127464ff9f4a30ab4f74ce0132979d7116ef", "log": "Fix up CheckAccessControls for methods defined with GETELEM  R=jschorr DELTA=30  (12 added, 6 deleted, 12 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3150   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n   private JSType getClassOfMethod(Node n, Node parent) {\n     if (parent.getType() == Token.ASSIGN) {\n       Node lValue = parent.getFirstChild();\n-      if (lValue.isQualifiedName()) {\n-        if (lValue.getType() == Token.GETPROP) {\n-          // We have an assignment of the form \"a.b = ...\".\n-          JSType lValueType = lValue.getJSType();\n-          if (lValueType != null && lValueType.isConstructor()) {\n-            // If a.b is a constructor, then everything in this function\n-            // belongs to the \"a.b\" type.\n-            return (lValueType.toMaybeFunctionType()).getInstanceType();\n-          } else {\n-            // If a.b is not a constructor, then treat this as a method\n-            // of whatever type is on \"a\".\n-            return normalizeClassType(lValue.getFirstChild().getJSType());\n-          }\n+      if (NodeUtil.isGet(lValue)) {\n+        // We have an assignment of the form \"a.b = ...\".\n+        JSType lValueType = lValue.getJSType();\n+        if (lValueType != null && lValueType.isNominalConstructor()) {\n+          // If a.b is a constructor, then everything in this function\n+          // belongs to the \"a.b\" type.\n+          return (lValueType.toMaybeFunctionType()).getInstanceType();\n         } else {\n-          // We have an assignment of the form \"a = ...\", so pull the\n-          // type off the \"a\".\n-          return normalizeClassType(lValue.getJSType());\n-        }\n+          // If a.b is not a constructor, then treat this as a method\n+          // of whatever type is on \"a\".\n+          return normalizeClassType(lValue.getFirstChild().getJSType());\n+        }\n+      } else {\n+        // We have an assignment of the form \"a = ...\", so pull the\n+        // type off the \"a\".\n+        return normalizeClassType(lValue.getJSType());\n       }\n     } else if (NodeUtil.isFunctionDeclaration(n) ||\n                parent.getType() == Token.NAME) {\n   private JSType normalizeClassType(JSType type) {\n     if (type == null || type.isUnknownType()) {\n       return type;\n-    } else if (type.isConstructor()) {\n+    } else if (type.isNominalConstructor()) {\n       return (type.toMaybeFunctionType()).getInstanceType();\n     } else if (type.isFunctionPrototypeType()) {\n       FunctionType owner = ((ObjectType) type).getOwnerFunction();\n--- a/test/com/google/javascript/jscomp/CheckAccessControlsTest.java\n+++ b/test/com/google/javascript/jscomp/CheckAccessControlsTest.java\n     });\n   }\n \n+  public void testPrivateAccessForProperties4() {\n+    testSame(new String[] {\n+      \"/** @constructor */ function Foo() {}\" +\n+      \"/** @private */ Foo.prototype.bar_ = function() {};\",\n+      \"Foo.prototype['baz'] = function() { (new Foo()).bar_(); };\"\n+    });\n+  }\n+\n   public void testNoPrivateAccessForProperties1() {\n     test(new String[] {\n       \"/** @constructor */ function Foo() {} (new Foo).bar_();\",", "timestamp": 1314726965, "metainfo": ""}