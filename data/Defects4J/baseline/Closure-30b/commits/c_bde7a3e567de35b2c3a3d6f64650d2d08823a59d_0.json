{"sha": "bde7a3e567de35b2c3a3d6f64650d2d08823a59d", "log": "Restrict the missing requires warning so that it no longer complains when an inner class is referenced but only an outerclass is required.  That is, this is now acceptable:  goog.require('foo.bar.Baz'); var x = new foo.bar.Baz.Bam(); // did not require Bam explicitly  This change makes the compiler support the recent style guide change stating that all inner classes and enums of a class should be in the same file, and that only the outermost class should be provided/required.  R=nicksantos DELTA=42  (40 added, 0 deleted, 2 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3400   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CheckRequiresForConstructors.java\n+++ b/src/com/google/javascript/jscomp/CheckRequiresForConstructors.java\n     Callback callback = new CheckRequiresForConstructorsCallback();\n     new NodeTraversal(compiler, callback).traverseWithScope(scriptRoot,\n         SyntacticScopeCreator.generateUntypedTopScope(compiler));\n+  }\n+\n+  // Return true if the name is a class name (starts with an uppercase\n+  // character, but is not in all caps).\n+  private static boolean isClassName(String name) {\n+    return (name != null && name.length() > 1\n+            && Character.isUpperCase(name.charAt(0))\n+            && !name.equals(name.toUpperCase()));\n+  }\n+\n+  // Return the shortest prefix of the className that refers to a class,\n+  // or null if no part refers to a class.\n+  private static String getOutermostClassName(String className) {\n+    for (String part : className.split(\"\\\\.\")) {\n+      if (isClassName(part)) {\n+        return className.substring(0, className.indexOf(part) +\n+                                   part.length());\n+      }\n+    }\n+\n+    return null;\n   }\n \n   /**\n       Set<String> classNames = Sets.newHashSet();\n       for (Node node : newNodes) {\n         String className = node.getFirstChild().getQualifiedName();\n-        if ((constructors == null || !constructors.contains(className))\n-            && (requires == null || !requires.contains(className))\n+        String outermostClassName = getOutermostClassName(className);\n+        boolean notProvidedByConstructors =\n+            (constructors == null || !constructors.contains(className));\n+        boolean notProvidedByRequires =\n+            (requires == null || (!requires.contains(className)\n+                                  && !requires.contains(outermostClassName)));\n+        if (notProvidedByConstructors && notProvidedByRequires\n             && !classNames.contains(className)) {\n           compiler.report(\n               t.makeError(node, level, MISSING_REQUIRE_WARNING, className));\n--- a/test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java\n+++ b/test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java\n     String js =\n         \"var goog = {};\" +\n         \"goog.require('foo.bar.goo'); var bar = new foo.bar.goo();\";\n+    testSame(js);\n+  }\n+\n+  public void testPassWithOneNewOuterClass() {\n+    String js =\n+        \"var goog = {};\" +\n+        \"goog.require('goog.foo.Bar'); var bar = new goog.foo.Bar.Baz();\";\n+    testSame(js);\n+  }\n+\n+  public void testPassWithOneNewOuterClassWithUpperPrefix() {\n+    String js =\n+        \"var goog = {};\" +\n+        \"goog.require('goog.foo.IDBar'); var bar = new goog.foo.IDBar.Baz();\";\n     testSame(js);\n   }\n ", "timestamp": 1317761503, "metainfo": ""}