{"sha": "c1f4a4ccecd7cfb96036c555c828cac3a45eaf25", "log": "Proper error handling when a required commonJS symbol is missing Fixes issue 672  R=malteubl DELTA=51  (37 added, 9 deleted, 5 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4349   ", "commit": "\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n    * process and creates JSModules and the corresponding dependency tree\n    * on the way.\n    */\n-  private void processAMDAndCommonJSModules() {\n+  void processAMDAndCommonJSModules() {\n     Map<String, JSModule> modulesByName = Maps.newLinkedHashMap();\n     Map<CompilerInput, JSModule> modulesByInput = Maps.newLinkedHashMap();\n     // TODO(nicksantos): Refactor module dependency resolution to work nicely\n       for (JSModule module : modules) {\n         for (CompilerInput input : module.getInputs()) {\n           for (String require : input.getRequires()) {\n-            module.addDependency(modulesByName.get(require));\n+            JSModule dependency = modulesByName.get(require);\n+            if (dependency == null) {\n+              report(JSError.make(MISSING_ENTRY_ERROR, require));\n+            } else {\n+              module.addDependency(dependency);\n+            }\n           }\n         }\n       }\n--- a/src/com/google/javascript/jscomp/JSModule.java\n+++ b/src/com/google/javascript/jscomp/JSModule.java\n \n   /** Adds a dependency on another module. */\n   public void addDependency(JSModule dep) {\n+    Preconditions.checkNotNull(dep);\n     Preconditions.checkState(dep != this);\n     deps.add(dep);\n   }\n--- a/test/com/google/javascript/jscomp/CompilerTest.java\n+++ b/test/com/google/javascript/jscomp/CompilerTest.java\n \n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.Lists;\n-import com.google.javascript.jscomp.deps.SortedDependencies.CircularDependencyException;\n-import com.google.javascript.jscomp.deps.SortedDependencies.MissingProvideException;\n import com.google.javascript.rhino.Node;\n \n import junit.framework.TestCase;\n     compiler.compile(externs, input, options);\n   }\n \n-  public void testCommonJSProvidesAndRequire() throws\n-      CircularDependencyException, MissingProvideException {\n+  public void testCommonJSProvidesAndRequire() throws Exception {\n     List<SourceFile> inputs = Lists.newArrayList(\n         SourceFile.fromCode(\"gin.js\", \"require('tonic')\"),\n         SourceFile.fromCode(\"tonic.js\", \"\"),\n         SourceFile.fromCode(\"mix.js\", \"require('gin'); require('tonic');\"));\n-    CompilerOptions options = new CompilerOptions();\n-    options.ideMode = true;\n     List<String> entryPoints = Lists.newArrayList(\"module$mix\");\n-    options.setManageClosureDependencies(entryPoints);\n-    options.closurePass = true;\n-    options.processCommonJSModules = true;\n-    Compiler compiler = new Compiler();\n-    compiler.init(Lists.<SourceFile>newArrayList(), inputs, options);\n-    compiler.parseInputs();\n+\n+    Compiler compiler = initCompilerForCommonJS(inputs, entryPoints);\n     JSModuleGraph graph = compiler.getModuleGraph();\n     assertEquals(graph.getModuleCount(), 3);\n     List<CompilerInput> result = graph.manageDependencies(entryPoints,\n     assertEquals(\"gin.js\", result.get(3).getName());\n     assertEquals(\"mix.js\", result.get(4).getName());\n   }\n+\n+  public void testCommonJSMissingRequire() throws Exception {\n+    List<SourceFile> inputs = Lists.newArrayList(\n+        SourceFile.fromCode(\"gin.js\", \"require('missing')\"));\n+    Compiler compiler = initCompilerForCommonJS(\n+        inputs, ImmutableList.of(\"module$gin\"));\n+    compiler.processAMDAndCommonJSModules();\n+\n+    assertEquals(1, compiler.getErrorManager().getErrorCount());\n+    String error = compiler.getErrorManager().getErrors()[0].toString();\n+    assertTrue(\n+        \"Unexpected error: \" + error,\n+        error.contains(\n+            \"required entry point \\\"module$missing\\\" never provided\"));\n+  }\n+\n+  private Compiler initCompilerForCommonJS(\n+      List<SourceFile> inputs, List<String> entryPoints)\n+      throws Exception {\n+    CompilerOptions options = new CompilerOptions();\n+    options.ideMode = true;\n+    options.setManageClosureDependencies(entryPoints);\n+    options.closurePass = true;\n+    options.processCommonJSModules = true;\n+    Compiler compiler = new Compiler();\n+    compiler.init(Lists.<SourceFile>newArrayList(), inputs, options);\n+    compiler.parseInputs();\n+    return compiler;\n+  }\n+\n+\n }", "timestamp": 1331335110, "metainfo": ""}