{"sha": "a9626e0a5149375314eb4c6818737afea185c95f", "log": "Tests for initial checkin of ToStringBuilder and assistants   ", "commit": "\n--- a/src/test/org/apache/commons/lang/builder/BuilderTestSuite.java\n+++ b/src/test/org/apache/commons/lang/builder/BuilderTestSuite.java\n  * Test suite for the Lang Builder package.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: BuilderTestSuite.java,v 1.2 2002/09/15 10:27:06 scolebourne Exp $\n+ * @version $Id: BuilderTestSuite.java,v 1.3 2002/09/17 22:07:50 scolebourne Exp $\n  */\n public class BuilderTestSuite extends TestCase {\n     \n         suite.addTest(CompareToBuilderTest.suite());\n         suite.addTest(EqualsBuilderTest.suite());\n         suite.addTest(HashCodeBuilderTest.suite());\n+        suite.addTest(ToStringBuilderTest.suite());\n+        suite.addTest(DefaultToStringStyleTest.suite());\n+        suite.addTest(NoFieldNamesToStringStyleTest.suite());\n+        suite.addTest(MultiLineToStringStyleTest.suite());\n+        suite.addTest(SimpleToStringStyleTest.suite());\n+        suite.addTest(StandardToStringStyleTest.suite());\n         return suite;\n     }\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/builder/DefaultToStringStyleTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+// package org.apache.commons.lang.builder\n+\n+package org.apache.commons.lang.builder;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+/**\n+ * Unit tests {@link org.apache.commons.lang.ToStringStyle}.\n+ *\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: DefaultToStringStyleTest.java,v 1.1 2002/09/17 22:07:50 scolebourne Exp $\n+ */\n+public class DefaultToStringStyleTest extends TestCase {\n+\n+    private final Integer base = new Integer(5);\n+    private final String baseStr = base.getClass().getName() + \"@\" + Integer.toHexString(System.identityHashCode(base));\n+    \n+    public DefaultToStringStyleTest(String name) {\n+        super(name);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(DefaultToStringStyleTest.class);\n+        suite.setName(\"DefaultToStringStyle Tests\");\n+        return suite;\n+    }\n+\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n+    }\n+\n+    //----------------------------------------------------------------\n+    \n+    public void testBlank() {\n+        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).toString());\n+    }\n+\n+    public void testObject() {\n+        Integer i3 = new Integer(3);\n+        Integer i4 = new Integer(4);\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) null).toString());\n+        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(i3).toString());\n+        assertEquals(baseStr + \"[a=<null>]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\n+        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", i3).toString());\n+        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\n+        assertEquals(baseStr + \"[a=<Integer>]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\n+        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), false).toString());\n+        assertEquals(baseStr + \"[a=[]]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), true).toString());\n+        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new HashMap(), false).toString());\n+        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", new HashMap(), true).toString());\n+        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\n+        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n+    }\n+\n+    public void testLong() {\n+        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(3L).toString());\n+        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", 3L).toString());\n+        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\n+    }\n+\n+    public void testObjectArray() {\n+        Object[] array = new Object[] {null, base, new int[] {3, 6}};\n+        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testLongArray() {\n+        long[] array = new long[] {1, 2, -3, 4};\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testLongArrayArray() {\n+        long[][] array = new long[][] {{1, 2}, null, {5}};\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/builder/MultiLineToStringStyleTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+// package org.apache.commons.lang.builder\n+\n+package org.apache.commons.lang.builder;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+\n+import org.apache.commons.lang.SystemUtils;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+/**\n+ * Unit tests {@link org.apache.commons.lang.ToStringStyle}.\n+ *\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: MultiLineToStringStyleTest.java,v 1.1 2002/09/17 22:07:50 scolebourne Exp $\n+ */\n+public class MultiLineToStringStyleTest extends TestCase {\n+\n+    private final Integer base = new Integer(5);\n+    private final String baseStr = base.getClass().getName() + \"@\" + Integer.toHexString(System.identityHashCode(base));\n+    \n+    public MultiLineToStringStyleTest(String name) {\n+        super(name);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(MultiLineToStringStyleTest.class);\n+        suite.setName(\"DefaultToStringStyle Tests\");\n+        return suite;\n+    }\n+\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        ToStringBuilder.setDefaultStyle(ToStringStyle.MULTI_LINE_STYLE);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n+    }\n+\n+    //----------------------------------------------------------------\n+    \n+    public void testBlank() {\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).toString());\n+    }\n+\n+    public void testObject() {\n+        Integer i3 = new Integer(3);\n+        Integer i4 = new Integer(4);\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append((Object) null).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  3\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(i3).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=<null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=3\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", i3).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=3\" + SystemUtils.LINE_SEPARATOR + \"  b=4\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=<Integer>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=<size=0>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), false).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=[]\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), true).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=<size=0>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", new HashMap(), false).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a={}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", new HashMap(), true).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=<size=0>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a={}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n+    }\n+\n+    public void testLong() {\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  3\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(3L).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=3\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", 3L).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=3\" + SystemUtils.LINE_SEPARATOR + \"  b=4\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\n+    }\n+\n+    public void testObjectArray() {\n+        Object[] array = new Object[] {null, base, new int[] {3, 6}};\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  {<null>,5,{3,6}}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  {<null>,5,{3,6}}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testLongArray() {\n+        long[] array = new long[] {1, 2, -3, 4};\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  {1,2,-3,4}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  {1,2,-3,4}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testLongArrayArray() {\n+        long[][] array = new long[][] {{1, 2}, null, {5}};\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  {{1,2},<null>,{5}}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  {{1,2},<null>,{5}}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/builder/NoFieldNamesToStringStyleTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+// package org.apache.commons.lang.builder\n+\n+package org.apache.commons.lang.builder;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+/**\n+ * Unit tests {@link org.apache.commons.lang.ToStringStyle}.\n+ *\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: NoFieldNamesToStringStyleTest.java,v 1.1 2002/09/17 22:07:50 scolebourne Exp $\n+ */\n+public class NoFieldNamesToStringStyleTest extends TestCase {\n+\n+    private final Integer base = new Integer(5);\n+    private final String baseStr = base.getClass().getName() + \"@\" + Integer.toHexString(System.identityHashCode(base));\n+    \n+    public NoFieldNamesToStringStyleTest(String name) {\n+        super(name);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(NoFieldNamesToStringStyleTest.class);\n+        suite.setName(\"NoFieldNamesToStringStyle Tests\");\n+        return suite;\n+    }\n+\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        ToStringBuilder.setDefaultStyle(ToStringStyle.NO_FIELD_NAMES_STYLE);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n+    }\n+\n+    //----------------------------------------------------------------\n+    \n+    public void testBlank() {\n+        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).toString());\n+    }\n+\n+    public void testObject() {\n+        Integer i3 = new Integer(3);\n+        Integer i4 = new Integer(4);\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) null).toString());\n+        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(i3).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\n+        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(\"a\", i3).toString());\n+        assertEquals(baseStr + \"[3,4]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\n+        assertEquals(baseStr + \"[<Integer>]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\n+        assertEquals(baseStr + \"[<size=0>]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), false).toString());\n+        assertEquals(baseStr + \"[[]]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), true).toString());\n+        assertEquals(baseStr + \"[<size=0>]\", new ToStringBuilder(base).append(\"a\", new HashMap(), false).toString());\n+        assertEquals(baseStr + \"[{}]\", new ToStringBuilder(base).append(\"a\", new HashMap(), true).toString());\n+        assertEquals(baseStr + \"[<size=0>]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\n+        assertEquals(baseStr + \"[{}]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n+    }\n+\n+    public void testLong() {\n+        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(3L).toString());\n+        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(\"a\", 3L).toString());\n+        assertEquals(baseStr + \"[3,4]\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\n+    }\n+\n+    public void testObjectArray() {\n+        Object[] array = new Object[] {null, base, new int[] {3, 6}};\n+        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testLongArray() {\n+        long[] array = new long[] {1, 2, -3, 4};\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testLongArrayArray() {\n+        long[][] array = new long[][] {{1, 2}, null, {5}};\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/builder/SimpleToStringStyleTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+// package org.apache.commons.lang.builder\n+\n+package org.apache.commons.lang.builder;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+/**\n+ * Unit tests {@link org.apache.commons.lang.ToStringStyle}.\n+ *\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: SimpleToStringStyleTest.java,v 1.1 2002/09/17 22:07:50 scolebourne Exp $\n+ */\n+public class SimpleToStringStyleTest extends TestCase {\n+\n+    private final Integer base = new Integer(5);\n+    \n+    public SimpleToStringStyleTest(String name) {\n+        super(name);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(SimpleToStringStyleTest.class);\n+        suite.setName(\"DefaultToStringStyle Tests\");\n+        return suite;\n+    }\n+\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        ToStringBuilder.setDefaultStyle(ToStringStyle.SIMPLE_STYLE);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n+    }\n+\n+    //----------------------------------------------------------------\n+    \n+    public void testBlank() {\n+        assertEquals(\"\", new ToStringBuilder(base).toString());\n+    }\n+\n+    public void testObject() {\n+        Integer i3 = new Integer(3);\n+        Integer i4 = new Integer(4);\n+        assertEquals(\"<null>\", new ToStringBuilder(base).append((Object) null).toString());\n+        assertEquals(\"3\", new ToStringBuilder(base).append(i3).toString());\n+        assertEquals(\"<null>\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\n+        assertEquals(\"3\", new ToStringBuilder(base).append(\"a\", i3).toString());\n+        assertEquals(\"3,4\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\n+        assertEquals(\"<Integer>\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\n+        assertEquals(\"<size=0>\", new ToStringBuilder(base).append(\"a\", new ArrayList(), false).toString());\n+        assertEquals(\"[]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), true).toString());\n+        assertEquals(\"<size=0>\", new ToStringBuilder(base).append(\"a\", new HashMap(), false).toString());\n+        assertEquals(\"{}\", new ToStringBuilder(base).append(\"a\", new HashMap(), true).toString());\n+        assertEquals(\"<size=0>\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\n+        assertEquals(\"{}\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n+    }\n+\n+    public void testLong() {\n+        assertEquals(\"3\", new ToStringBuilder(base).append(3L).toString());\n+        assertEquals(\"3\", new ToStringBuilder(base).append(\"a\", 3L).toString());\n+        assertEquals(\"3,4\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\n+    }\n+\n+    public void testObjectArray() {\n+        Object[] array = new Object[] {null, base, new int[] {3, 6}};\n+        assertEquals(\"{<null>,5,{3,6}}\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(\"{<null>,5,{3,6}}\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(\"<null>\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(\"<null>\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testLongArray() {\n+        long[] array = new long[] {1, 2, -3, 4};\n+        assertEquals(\"{1,2,-3,4}\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(\"{1,2,-3,4}\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(\"<null>\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(\"<null>\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testLongArrayArray() {\n+        long[][] array = new long[][] {{1, 2}, null, {5}};\n+        assertEquals(\"{{1,2},<null>,{5}}\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(\"{{1,2},<null>,{5}}\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(\"<null>\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(\"<null>\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/builder/StandardToStringStyleTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+// package org.apache.commons.lang.builder\n+\n+package org.apache.commons.lang.builder;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+/**\n+ * Unit tests {@link org.apache.commons.lang.ToStringStyle}.\n+ *\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: StandardToStringStyleTest.java,v 1.1 2002/09/17 22:07:50 scolebourne Exp $\n+ */\n+public class StandardToStringStyleTest extends TestCase {\n+\n+    private final Integer base = new Integer(5);\n+    private final String baseStr = \"Integer\";\n+    \n+    private static final StandardToStringStyle STYLE = new StandardToStringStyle();\n+    \n+    static {\n+        STYLE.setShortClassName(true);\n+        STYLE.setUseIdentityHashCode(false);\n+        STYLE.setArrayStart(\"[\");\n+        STYLE.setArraySeparator(\", \");\n+        STYLE.setArrayEnd(\"]\");\n+        STYLE.setNullText(\"%NULL%\");\n+        STYLE.setSizeStartText(\"%SIZE=\");\n+        STYLE.setSizeEndText(\"%\");\n+        STYLE.setSummaryObjectStartText(\"%\");\n+        STYLE.setSummaryObjectEndText(\"%\");\n+    }\n+    \n+    public StandardToStringStyleTest(String name) {\n+        super(name);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(StandardToStringStyleTest.class);\n+        suite.setName(\"StandardToStringStyle Tests\");\n+        return suite;\n+    }\n+\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        ToStringBuilder.setDefaultStyle(STYLE);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+        ToStringBuilder.setDefaultStyle(STYLE);\n+    }\n+\n+    //----------------------------------------------------------------\n+    \n+    public void testBlank() {\n+        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).toString());\n+    }\n+\n+    public void testObject() {\n+        Integer i3 = new Integer(3);\n+        Integer i4 = new Integer(4);\n+        assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append((Object) null).toString());\n+        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(i3).toString());\n+        assertEquals(baseStr + \"[a=%NULL%]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\n+        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", i3).toString());\n+        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\n+        assertEquals(baseStr + \"[a=%Integer%]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\n+        assertEquals(baseStr + \"[a=%SIZE=0%]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), false).toString());\n+        assertEquals(baseStr + \"[a=[]]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), true).toString());\n+        assertEquals(baseStr + \"[a=%SIZE=0%]\", new ToStringBuilder(base).append(\"a\", new HashMap(), false).toString());\n+        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", new HashMap(), true).toString());\n+        assertEquals(baseStr + \"[a=%SIZE=0%]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\n+        assertEquals(baseStr + \"[a=[]]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n+    }\n+\n+    public void testLong() {\n+        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(3L).toString());\n+        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", 3L).toString());\n+        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\n+    }\n+\n+    public void testObjectArray() {\n+        Object[] array = new Object[] {null, base, new int[] {3, 6}};\n+        assertEquals(baseStr + \"[[%NULL%, 5, [3, 6]]]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[[%NULL%, 5, [3, 6]]]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testLongArray() {\n+        long[] array = new long[] {1, 2, -3, 4};\n+        assertEquals(baseStr + \"[[1, 2, -3, 4]]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[[1, 2, -3, 4]]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testLongArrayArray() {\n+        long[][] array = new long[][] {{1, 2}, null, {5}};\n+        assertEquals(baseStr + \"[[[1, 2], %NULL%, [5]]]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[[[1, 2], %NULL%, [5]]]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+// package org.apache.commons.lang.builder\n+\n+package org.apache.commons.lang.builder;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+/**\n+ * Unit tests {@link org.apache.commons.lang.ToStringBuilder}.\n+ *\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: ToStringBuilderTest.java,v 1.1 2002/09/17 22:07:50 scolebourne Exp $\n+ */\n+public class ToStringBuilderTest extends TestCase {\n+\n+    private final Integer base = new Integer(5);\n+    private final String baseStr = base.getClass().getName() + \"@\" + Integer.toHexString(System.identityHashCode(base));\n+    \n+    public ToStringBuilderTest(String name) {\n+        super(name);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(ToStringBuilderTest.class);\n+        suite.setName(\"ToStringBuilder Tests\");\n+        return suite;\n+    }\n+\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    public void testConstructorEx1() {\n+        try {\n+            new ToStringBuilder(null);\n+            \n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testConstructorEx2() {\n+        try {\n+            new ToStringBuilder(null, null);\n+            \n+        } catch (IllegalArgumentException ex) {\n+            try {\n+                new ToStringBuilder(base, null);\n+                \n+            } catch (Exception ex2) {\n+                fail();\n+            }\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testConstructorEx3() {\n+        try {\n+            new ToStringBuilder(null, null, null);\n+            \n+        } catch (IllegalArgumentException ex) {\n+            try {\n+                new ToStringBuilder(base, null, null);\n+                new ToStringBuilder(base, ToStringStyle.DEFAULT_STYLE, null);\n+                \n+            } catch (Exception ex2) {\n+                fail();\n+            }\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testGetSetDefault() {\n+        try {\n+            ToStringBuilder.setDefaultStyle(ToStringStyle.NO_FIELD_NAMES_STYLE);\n+            assertSame(ToStringStyle.NO_FIELD_NAMES_STYLE, ToStringBuilder.getDefaultStyle());\n+        } finally {\n+            // reset for other tests\n+            ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n+        }\n+    }\n+\n+    public void testSetDefaultEx() {\n+        try {\n+            ToStringBuilder.setDefaultStyle(null);\n+            \n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testBlank() {\n+        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).toString());\n+    }\n+    \n+    public void testReflection() {\n+        assertEquals(baseStr + \"[value=5]\", ToStringBuilder.reflectionToString(base));\n+    }\n+    \n+    public void testObject() {\n+        Integer i3 = new Integer(3);\n+        Integer i4 = new Integer(4);\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) null).toString());\n+        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(i3).toString());\n+        assertEquals(baseStr + \"[a=<null>]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\n+        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", i3).toString());\n+        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\n+        assertEquals(baseStr + \"[a=<Integer>]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\n+        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), false).toString());\n+        assertEquals(baseStr + \"[a=[]]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), true).toString());\n+        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new HashMap(), false).toString());\n+        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", new HashMap(), true).toString());\n+        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\n+        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n+    }\n+\n+    public void testLong() {\n+        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(3L).toString());\n+        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", 3L).toString());\n+        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\n+    }\n+\n+    public void testInt() {\n+        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append((int) 3).toString());\n+        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", (int) 3).toString());\n+        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", (int) 3).append(\"b\", (int) 4).toString());\n+    }\n+\n+    public void testShort() {\n+        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append((short) 3).toString());\n+        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", (short) 3).toString());\n+        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", (short) 3).append(\"b\", (short) 4).toString());\n+    }\n+\n+    public void testChar() {\n+        assertEquals(baseStr + \"[A]\", new ToStringBuilder(base).append((char) 65).toString());\n+        assertEquals(baseStr + \"[a=A]\", new ToStringBuilder(base).append(\"a\", (char) 65).toString());\n+        assertEquals(baseStr + \"[a=A,b=B]\", new ToStringBuilder(base).append(\"a\", (char) 65).append(\"b\", (char) 66).toString());\n+    }\n+\n+    public void testByte() {\n+        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append((byte) 3).toString());\n+        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", (byte) 3).toString());\n+        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", (byte) 3).append(\"b\", (byte) 4).toString());\n+    }\n+\n+    public void testDouble() {\n+        assertEquals(baseStr + \"[3.2]\", new ToStringBuilder(base).append((double) 3.2).toString());\n+        assertEquals(baseStr + \"[a=3.2]\", new ToStringBuilder(base).append(\"a\", (double) 3.2).toString());\n+        assertEquals(baseStr + \"[a=3.2,b=4.3]\", new ToStringBuilder(base).append(\"a\", (double) 3.2).append(\"b\", (double) 4.3).toString());\n+    }\n+\n+    public void testFloat() {\n+        assertEquals(baseStr + \"[3.2]\", new ToStringBuilder(base).append((float) 3.2).toString());\n+        assertEquals(baseStr + \"[a=3.2]\", new ToStringBuilder(base).append(\"a\", (float) 3.2).toString());\n+        assertEquals(baseStr + \"[a=3.2,b=4.3]\", new ToStringBuilder(base).append(\"a\", (float) 3.2).append(\"b\", (float) 4.3).toString());\n+    }\n+\n+    public void testBoolean() {\n+        assertEquals(baseStr + \"[true]\", new ToStringBuilder(base).append(true).toString());\n+        assertEquals(baseStr + \"[a=true]\", new ToStringBuilder(base).append(\"a\", true).toString());\n+        assertEquals(baseStr + \"[a=true,b=false]\", new ToStringBuilder(base).append(\"a\", true).append(\"b\", false).toString());\n+    }\n+\n+\n+    public void testObjectArray() {\n+        Object[] array = new Object[] {null, base, new int[] {3, 6}};\n+        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testLongArray() {\n+        long[] array = new long[] {1, 2, -3, 4};\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testIntArray() {\n+        int[] array = new int[] {1, 2, -3, 4};\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testShortArray() {\n+        short[] array = new short[] {1, 2, -3, 4};\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+    \n+    public void testByteArray() {\n+        byte[] array = new byte[] {1, 2, -3, 4};\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testCharArray() {\n+        char[] array = new char[] {'A', '2', '_', 'D'};\n+        assertEquals(baseStr + \"[{A,2,_,D}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{A,2,_,D}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testDoubleArray() {\n+        double[] array = new double[] {1.0, 2.9876, -3.00001, 4.3};\n+        assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testFloatArray() {\n+        float[] array = new float[] {1.0f, 2.9876f, -3.00001f, 4.3f};\n+        assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+    \n+    public void testBooleanArray() {\n+        boolean[] array = new boolean[] {true, false, false};\n+        assertEquals(baseStr + \"[{true,false,false}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{true,false,false}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+\n+    public void testLongArrayArray() {\n+        long[][] array = new long[][] {{1, 2}, null, {5}};\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testIntArrayArray() {\n+        int[][] array = new int[][] {{1, 2}, null, {5}};\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testShortArrayArray() {\n+        short[][] array = new short[][] {{1, 2}, null, {5}};\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testByteArrayArray() {\n+        byte[][] array = new byte[][] {{1, 2}, null, {5}};\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testCharArrayArray() {\n+        char[][] array = new char[][] {{'A', 'B'}, null, {'p'}};\n+        assertEquals(baseStr + \"[{{A,B},<null>,{p}}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{{A,B},<null>,{p}}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testDoubleArrayArray() {\n+        double[][] array = new double[][] {{1.0, 2.29686}, null, {Double.NaN}};\n+        assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testFloatArrayArray() {\n+        float[][] array = new float[][] {{1.0f, 2.29686f}, null, {Float.NaN}};\n+        assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testBooleanArrayArray() {\n+        boolean[][] array = new boolean[][] {{true, false}, null, {false}};\n+        assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+}", "timestamp": 1032300470, "metainfo": ""}