{"sha": "7543998e7e2bf994519277a891ed5c292bbd9939", "log": "Add OS name parsing to SystemUtils   ", "commit": "\n--- a/src/java/org/apache/commons/lang/SystemUtils.java\n+++ b/src/java/org/apache/commons/lang/SystemUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Michael Becke\n  * @since 1.0\n- * @version $Id: SystemUtils.java,v 1.11 2003/05/24 12:06:37 scolebourne Exp $\n+ * @version $Id: SystemUtils.java,v 1.12 2003/05/24 14:34:14 scolebourne Exp $\n  */\n public class SystemUtils {\n     \n \n     //-----------------------------------------------------------------------\n     /**\n+     * The <code>file.encoding</code> System Property.\n+     * File encoding, such as Cp1252.\n+     * First in JDK version 1.2.\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or property not specified.\n+     */\n+    public static final String FILE_ENCODING = getSystemProperty(\"file.encoding\");\n+\n+    /**\n      * The <code>file.separator</code> System Property.\n      * File separator (\"/\" on UNIX).\n      * First in JDK version 1.1.\n      * <p>\n      * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property.\n+     * security access to read this property or property not specified.\n      */\n     public static final String FILE_SEPARATOR = getSystemProperty(\"file.separator\");\n \n      * First in JDK version 1.1.\n      * <p>\n      * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property.\n+     * security access to read this property or property not specified.\n      */\n     public static final String JAVA_CLASS_PATH = getSystemProperty(\"java.class.path\");\n \n      * First in JDK version 1.1.\n      * <p>\n      * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property.\n+     * security access to read this property or property not specified.\n      */\n     public static final String JAVA_CLASS_VERSION = getSystemProperty(\"java.class.version\");\n \n     /**\n      * The <code>java.compiler</code> System Property.\n      * Name of JIT compiler to use.\n-     * First in JDK version 1.4.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property.\n+     * First in JDK version 1.2. Not used in Sun JDKs after 1.2.\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or property not specified.\n      */\n     public static final String JAVA_COMPILER = getSystemProperty(\"java.compiler\");\n \n      * First in JDK version 1.3.\n      * <p>\n      * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property.\n+     * security access to read this property or property not specified.\n      */\n     public static final String JAVA_EXT_DIRS = getSystemProperty(\"java.ext.dirs\");\n \n      * First in JDK version 1.1.\n      * <p>\n      * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property.\n+     * security access to read this property or property not specified.\n      */\n     public static final String JAVA_HOME = getSystemProperty(\"java.home\");\n \n     /**\n      * The <code>java.io.tmpdir</code> System Property.\n      * Default temp file path.\n-     * First in JDK version 1.4.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property.\n+     * First in JDK version 1.2.\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or property not specified.\n      */\n     public static final String JAVA_IO_TMPDIR = getSystemProperty(\"java.io.tmpdir\");\n \n     /**\n      * The <code>java.library.path</code> System Property.\n      * List of paths to search when loading libraries.\n-     * First in JDK version 1.4.\n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property.\n+     * First in JDK version 1.2.\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or property not specified.\n      */\n     public static final String JAVA_LIBRARY_PATH = getSystemProperty(\"java.library.path\");\n+\n+    /**\n+     * The <code>java.runtime.name</code> System Property.\n+     * Java Runtime Environment name.\n+     * First in JDK version 1.3.\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or property not specified.\n+     */\n+    public static final String JAVA_RUNTIME_NAME = getSystemProperty(\"java.runtime.name\");\n+\n+    /**\n+     * The <code>java.runtime.version</code> System Property.\n+     * Java Runtime Environment version.\n+     * First in JDK version 1.3.\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or property not specified.\n+     */\n+    public static final String JAVA_RUNTIME_VERSION = getSystemProperty(\"java.runtime.version\");\n \n     /**\n      * The <code>java.specification.name</code> System Property.\n      * First in JDK version 1.2.\n      * <p>\n      * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property.\n+     * security access to read this property or property not specified.\n      */\n     public static final String JAVA_SPECIFICATION_NAME = getSystemProperty(\"java.specification.name\");\n \n      * First in JDK version 1.2.\n      * <p>\n      * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property.\n+     * security access to read this property or property not specified.\n      */\n     public static final String JAVA_SPECIFICATION_VENDOR = getSystemProperty(\"java.specification.vendor\");\n \n      * First in JDK version 1.2.\n      * <p>\n      * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property.\n+     * security access to read this property or property not specified.\n      */\n     public static final String JAVA_SPECIFICATION_VERSION = getSystemProperty(\"java.specification.version\");\n \n      * First in JDK version 1.1.\n      * <p>\n      * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property.\n+     * security access to read this property or property not specified.\n      */\n     public static final String JAVA_VENDOR = getSystemProperty(\"java.vendor\");\n \n      * First in JDK version 1.1. \n      * <p>\n      * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property.\n+     * security access to read this property or property not specified.\n      */\n     public static final String JAVA_VENDOR_URL = getSystemProperty(\"java.vendor.url\");\n \n      * First in JDK version 1.1. \n      * <p>\n      * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property.\n+     * security access to read this property or property not specified.\n      */\n     public static final String JAVA_VERSION = getSystemProperty(\"java.version\");\n+\n+    /**\n+     * The <code>java.vm.info</code> System Property.\n+     * Java Virtual Machine implementation info.\n+     * First in JDK version 1.2.\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or property not specified.\n+     */\n+    public static final String JAVA_VM_INFO = getSystemProperty(\"java.vm.info\");\n \n     /**\n      * The <code>java.vm.name</code> System Property.\n      * First in JDK version 1.2.\n      * <p>\n      * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property.\n+     * security access to read this property or property not specified.\n      */\n     public static final String JAVA_VM_NAME = getSystemProperty(\"java.vm.name\");\n \n      * First in JDK version 1.2.\n      * <p>\n      * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property.\n+     * security access to read this property or property not specified.\n      */\n     public static final String JAVA_VM_SPECIFICATION_NAME = getSystemProperty(\"java.vm.specification.name\");\n \n      * First in JDK version 1.2.\n      * <p>\n      * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property.\n+     * security access to read this property or property not specified.\n      */\n     public static final String JAVA_VM_SPECIFICATION_VENDOR = getSystemProperty(\"java.vm.specification.vendor\");\n \n      * First in JDK version 1.2.\n      * <p>\n      * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property.\n+     * security access to read this property or property not specified.\n      */\n     public static final String JAVA_VM_SPECIFICATION_VERSION = getSystemProperty(\"java.vm.specification.version\");\n \n      * First in JDK version 1.2.\n      * <p>\n      * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property.\n+     * security access to read this property or property not specified.\n      */\n     public static final String JAVA_VM_VENDOR = getSystemProperty(\"java.vm.vendor\");\n \n      * First in JDK version 1.2.\n      * <p>\n      * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property.\n+     * security access to read this property or property not specified.\n      */\n     public static final String JAVA_VM_VERSION = getSystemProperty(\"java.vm.version\");\n \n      * First in JDK version 1.1. \n      * <p>\n      * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property.\n+     * security access to read this property or property not specified.\n      */\n     public static final String LINE_SEPARATOR = getSystemProperty(\"line.separator\");\n \n      * First in JDK version 1.1. \n      * <p>\n      * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property.\n+     * security access to read this property or property not specified.\n      */\n     public static final String OS_ARCH = getSystemProperty(\"os.arch\");\n \n      * First in JDK version 1.1. \n      * <p>\n      * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property.\n+     * security access to read this property or property not specified.\n      */\n     public static final String OS_NAME = getSystemProperty(\"os.name\");\n \n      * First in JDK version 1.1. \n      * <p>\n      * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property.\n+     * security access to read this property or property not specified.\n      */\n     public static final String OS_VERSION = getSystemProperty(\"os.version\");\n \n      * First in JDK version 1.1. \n      * <p>\n      * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property.\n+     * security access to read this property or property not specified.\n      */\n     public static final String PATH_SEPARATOR = getSystemProperty(\"path.separator\");\n \n      * First in JDK version 1.1. \n      * <p>\n      * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property.\n+     * security access to read this property or property not specified.\n      */\n     public static final String USER_DIR = getSystemProperty(\"user.dir\");\n \n      * First in JDK version 1.1. \n      * <p>\n      * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property.\n+     * security access to read this property or property not specified.\n      */\n     public static final String USER_HOME = getSystemProperty(\"user.home\");\n+\n+    /**\n+     * The <code>user.language</code> System Property.\n+     * User's language code, such as 'en'.\n+     * First in JDK version 1.2.\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or property not specified.\n+     */\n+    public static final String USER_LANGUAGE = getSystemProperty(\"user.language\");\n+\n+    /**\n+     * The <code>user.country</code> or <code>user.region</code> System Property.\n+     * User's country code, such as 'GB'.\n+     * First in JDK version 1.2 as <code>user.region</code>.\n+     * Renamed to <code>user.country</code> in 1.4\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property or property not specified.\n+     */\n+    public static final String USER_COUNTRY = \n+        (getSystemProperty(\"user.country\") == null ?\n+            getSystemProperty(\"user.region\") : getSystemProperty(\"user.country\"));\n \n     /**\n      * The <code>user.name</code> System Property.\n      * First in JDK version 1.1. \n      * <p>\n      * Defaults to <code>null</code> if the runtime does not have\n-     * security access to read this property.\n+     * security access to read this property or property not specified.\n      */\n     public static final String USER_NAME = getSystemProperty(\"user.name\");\n \n      * The field will return zero if <code>JAVA_VERSION</code> is <code>null</code>.\n      */\n     public static final int JAVA_VERSION_INT = getJavaVersionAsInt();\n+\n+    //-----------------------------------------------------------------------\n+    // OS names from http://www.vamphq.com/os.html\n+    // Selected ones included - please advise commons-dev@jakarta.apache.org\n+    // if you want another added or a mistake corrected\n+\n+    /**\n+     * Is <code>true</code> if this is Windows.\n+     * <p>\n+     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_OS_WINDOWS = getOSMatches(\"Windows\");\n+\n+    /**\n+     * Is <code>true</code> if this is Windows 95.\n+     * <p>\n+     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_OS_WINDOWS_95 = getOSMatches(\"Windows 9\", \"4.0\");\n+    // JDK 1.2 running on Windows98 returns 'Windows 95', hence the above\n+\n+    /**\n+     * Is <code>true</code> if this is Windows 98.\n+     * <p>\n+     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_OS_WINDOWS_98 = getOSMatches(\"Windows 9\", \"4.1\");\n+    // JDK 1.2 running on Windows98 returns 'Windows 95', hence the above\n+\n+    /**\n+     * Is <code>true</code> if this is Windows ME.\n+     * <p>\n+     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_OS_WINDOWS_ME = getOSMatches(\"Windows\", \"4.9\");\n+    // JDK 1.2 running on WindowsME may return 'Windows 95', hence the above\n+\n+    /**\n+     * Is <code>true</code> if this is Windows NT.\n+     * <p>\n+     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_OS_WINDOWS_NT = getOSMatches(\"Windows NT\");\n+\n+    /**\n+     * Is <code>true</code> if this is Windows 2000.\n+     * <p>\n+     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_OS_WINDOWS_2000 = getOSMatches(\"Windows\", \"5.0\");\n+    // Windows 2000 returns 'Windows 2000' but may suffer from same JDK1.2 problem\n+\n+    /**\n+     * Is <code>true</code> if this is Windows XP.\n+     * <p>\n+     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_OS_WINDOWS_XP = getOSMatches(\"Windows\", \"5.1\");\n+    // Windows XP returns 'Windows 2000' just for fun...\n+\n+    /**\n+     * Is <code>true</code> if this is Mac.\n+     * <p>\n+     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_OS_MAC = getOSMatches(\"Mac\");\n+\n+    /**\n+     * Is <code>true</code> if this is Mac.\n+     * <p>\n+     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_OS_MAC_OSX = getOSMatches(\"Mac OS X\");\n+\n+    /**\n+     * Is <code>true</code> if this is Linux.\n+     * <p>\n+     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_OS_LINUX = getOSMatches(\"Linux\") || getOSMatches(\"LINUX\");\n+\n+    /**\n+     * Is <code>true</code> if this is Mac.\n+     * <p>\n+     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_OS_OS2 = getOSMatches(\"OS/2\");\n+\n+    /**\n+     * Is <code>true</code> if this is Solaris.\n+     * <p>\n+     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_OS_SOLARIS = getOSMatches(\"Solaris\");\n+\n+    /**\n+     * Is <code>true</code> if this is SunOS.\n+     * <p>\n+     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_OS_SUN_OS = getOSMatches(\"SunOS\");\n+\n+    /**\n+     * Is <code>true</code> if this is HP-UX.\n+     * <p>\n+     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_OS_HP_UX = getOSMatches(\"HP-UX\");\n+\n+    /**\n+     * Is <code>true</code> if this is AIX.\n+     * <p>\n+     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_OS_AIX = getOSMatches(\"AIX\");\n+\n+    /**\n+     * Is <code>true</code> if this is Irix.\n+     * <p>\n+     * The field will return false if <code>OS_NAME</code> is <code>null</code>.\n+     */\n+    public static final boolean IS_OS_IRIX = getOSMatches(\"Irix\");\n \n     //-----------------------------------------------------------------------\n     /**\n         return Integer.parseInt(str);\n     }\n     \n+    /**\n+     * Decides if the operating system matches.\n+     * \n+     * @param osNamePrefix  the prefix for the os name\n+     * @return true if matches, or false if not or can't determine\n+     */\n+    private static boolean getOSMatches(String osNamePrefix) {\n+        if (OS_NAME == null) {\n+            return false;\n+        }\n+        return OS_NAME.startsWith(osNamePrefix);\n+    }    \n+\n+    /**\n+     * Decides if the operating system matches.\n+     * \n+     * @param osNamePrefix  the prefix for the os name\n+     * @param osVersionPrefix  the prefix for the version\n+     * @return true if matches, or false if not or can't determine\n+     */\n+    private static boolean getOSMatches(String osNamePrefix, String osVersionPrefix) {\n+        if (OS_NAME == null || OS_VERSION == null) {\n+            return false;\n+        }\n+        return OS_NAME.startsWith(osNamePrefix) && OS_VERSION.startsWith(osVersionPrefix);\n+    }    \n+\n     //-----------------------------------------------------------------------    \n-    // Parsing operating system may stay here, or it may be moved somewhere else entirely\n-//    /** True iff this is running on Windows */\n-//    public static final boolean IS_WINDOWS;\n-//    /** True iff this is running on Unix */\n-//    public static final boolean IS_UNIX;\n-//    /** True iff this is running on Mac */\n-//    public static final boolean IS_MAC;\n-//    /** True iff this is running on OS2 */\n-//    public static final boolean IS_OS2;\n-//    /** True iff this is running on Linux */\n-//    public static final boolean IS_LINUX;\n-//    \n-//    /*\n-//     * The JLS doesn't seem to specify an exact naming convention for the\n-//     * os.name. We ensure a uniform naming here.\n-//     */\n-//    static {\n-//        // from http://www.geocities.com/vamp201/os.html\n-//        if (OS_NAME.startsWith(\"Windows\")) {\n-//            IS_WINDOWS = true;\n-//            IS_UNIX = false;\n-//            IS_MAC = false;\n-//            IS_OS2 = false;\n-//            IS_LINUX = false;\n-//        } else if (OS_NAME.startsWith(\"SunOS\")) {\n-//            IS_WINDOWS = false;\n-//            IS_UNIX = true;\n-//            IS_MAC = false;\n-//            IS_OS2 = false;\n-//            IS_LINUX = false;\n-//        } else if (OS_NAME.startsWith(\"Solaris\")) {\n-//            IS_WINDOWS = false;\n-//            IS_UNIX = true;\n-//            IS_MAC = false;\n-//            IS_OS2 = false;\n-//            IS_LINUX = false;\n-//        } else if (OS_NAME.startsWith(\"Linux\")) {\n-//            IS_WINDOWS = false;\n-//            IS_UNIX = true;\n-//            IS_MAC = false;\n-//            IS_OS2 = false;\n-//            IS_LINUX = true;\n-//        } else if (OS_NAME.startsWith(\"HP-UX\")) {\n-//            IS_WINDOWS = false;\n-//            IS_UNIX = true;\n-//            IS_MAC = false;\n-//            IS_OS2 = false;\n-//            IS_LINUX = false;\n-//        } else if (OS_NAME.startsWith(\"AIX\")) {\n-//            IS_WINDOWS = false;\n-//            IS_UNIX = true;\n-//            IS_MAC = false;\n-//            IS_OS2 = false;\n-//            IS_LINUX = false;\n-//        } else if (OS_NAME.startsWith(\"Irix\")) {\n-//            IS_WINDOWS = false;\n-//            IS_UNIX = true;\n-//            IS_MAC = false;\n-//            IS_OS2 = false;\n-//            IS_LINUX = false;\n-//        } else if (OS_NAME.startsWith(\"Digital Unix\")) {\n-//            IS_WINDOWS = false;\n-//            IS_UNIX = true;\n-//            IS_MAC = false;\n-//            IS_OS2 = false;\n-//            IS_LINUX = false;\n-//        } else if (OS_NAME.startsWith(\"OS/400\")) {\n-//            IS_WINDOWS = false;\n-//            IS_UNIX = true;\n-//            IS_MAC = false;\n-//            IS_OS2 = false;\n-//            IS_LINUX = false;\n-//        } else if (OS_NAME.startsWith(\"OS/2\")) {\n-//            IS_WINDOWS = false;\n-//            IS_UNIX = false;\n-//            IS_MAC = false;\n-//            IS_OS2 = true;\n-//            IS_LINUX = false;\n-//        } else if (OS_NAME.startsWith(\"Mac OS X\")) {\n-//            IS_WINDOWS = false;\n-//            IS_UNIX = true;\n-//            IS_MAC = true;\n-//            IS_OS2 = false;\n-//            IS_LINUX = false;\n-//        } else if (OS_NAME.startsWith(\"Mac\")) {\n-//            IS_WINDOWS = false;\n-//            IS_UNIX = false;\n-//            IS_MAC = true;\n-//            IS_OS2 = false;\n-//            IS_LINUX = false;\n-//        } else {\n-//            IS_WINDOWS = false;\n-//            IS_UNIX = false;\n-//            IS_MAC = false;\n-//            IS_OS2 = false;\n-//            IS_LINUX = false;\n-//        }\n-//    }\n-\n-    //-----------------------------------------------------------------------\n     /**\n      * <p>Get the Java version number as a <code>float</code>.</p>\n      *\n--- a/src/test/org/apache/commons/lang/SystemUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/SystemUtilsTest.java\n  * Only limited testing can be performed.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: SystemUtilsTest.java,v 1.1 2003/05/24 12:11:02 scolebourne Exp $\n+ * @version $Id: SystemUtilsTest.java,v 1.2 2003/05/24 14:34:14 scolebourne Exp $\n  */\n public class SystemUtilsTest extends TestCase {\n \n \n     public static void main(String[] args) {\n         TestRunner.run(suite());\n+//        SystemUtils s = new SystemUtils();\n+//        System.out.println(s.IS_OS_WINDOWS);\n+//        System.out.println(s.IS_OS_WINDOWS_95);\n+//        System.out.println(s.IS_OS_WINDOWS_98);\n+//        java.util.Properties p = System.getProperties();\n+//        java.util.Enumeration keys = p.keys();\n+//        java.util.List list = new java.util.ArrayList();\n+//        while( keys.hasMoreElements() ) {\n+//            list.add(keys.nextElement());\n+//        }\n+//        java.util.Collections.sort(list);\n+//        for (java.util.Iterator it = list.iterator(); it.hasNext();) {\n+//            String key = (String) it.next();\n+//            System.out.println(key + \" \" + p.getProperty(key));\n+//        }\n+    \n     }\n \n     public static Test suite() {\n     // COPIED FROM SystemUtils\n     //-----------------------------------------------------------------------\n     private String JAVA_VERSION;\n+    private String OS_NAME;\n+    private String OS_VERSION;\n+    \n     /**\n      * Decides if the java version matches.\n      * \n         }\n         return Integer.parseInt(str);\n     }\n+\n+    /**\n+     * Decides if the operating system matches.\n+     * \n+     * @param osNamePrefix  the prefix for the os name\n+     * @return true if matches, or false if not or can't determine\n+     */\n+    private boolean getOSMatches(String osNamePrefix) {\n+        if (OS_NAME == null) {\n+            return false;\n+        }\n+        return OS_NAME.startsWith(osNamePrefix);\n+    }    \n+\n+    /**\n+     * Decides if the operating system matches.\n+     * \n+     * @param osNamePrefix  the prefix for the os name\n+     * @param osVersionPrefix  the prefix for the version\n+     * @return true if matches, or false if not or can't determine\n+     */\n+    private boolean getOSMatches(String osNamePrefix, String osVersionPrefix) {\n+        if (OS_NAME == null || OS_VERSION == null) {\n+            return false;\n+        }\n+        return OS_NAME.startsWith(osNamePrefix) && OS_VERSION.startsWith(osVersionPrefix);\n+    }    \n \n     //-----------------------------------------------------------------------\n     public void testJavaVersionMatches() {\n         assertEquals(false, SystemUtils.isJavaVersionAtLeast(version));\n     }\n     \n+    public void testOSMatches() {\n+        OS_NAME = null;\n+        assertEquals(false, getOSMatches(\"Windows\"));\n+        OS_NAME = \"Windows 95\";\n+        assertEquals(true, getOSMatches(\"Windows\"));\n+        OS_NAME = \"Windows NT\";\n+        assertEquals(true, getOSMatches(\"Windows\"));\n+        OS_NAME = \"OS/2\";\n+        assertEquals(false, getOSMatches(\"Windows\"));\n+    }\n+    \n+    public void testOSMatches2() {\n+        OS_NAME = null;\n+        OS_VERSION = null;\n+        assertEquals(false, getOSMatches(\"Windows 9\", \"4.1\"));\n+        OS_NAME = \"Windows 95\";\n+        OS_VERSION = \"4.0\";\n+        assertEquals(false, getOSMatches(\"Windows 9\", \"4.1\"));\n+        OS_NAME = \"Windows 95\";\n+        OS_VERSION = \"4.1\";\n+        assertEquals(true, getOSMatches(\"Windows 9\", \"4.1\"));\n+        OS_NAME = \"Windows 98\";\n+        OS_VERSION = \"4.1\";\n+        assertEquals(true, getOSMatches(\"Windows 9\", \"4.1\"));\n+        OS_NAME = \"Windows NT\";\n+        OS_VERSION = \"4.0\";\n+        assertEquals(false, getOSMatches(\"Windows 9\", \"4.1\"));\n+        OS_NAME = \"OS/2\";\n+        OS_VERSION = \"4.0\";\n+        assertEquals(false, getOSMatches(\"Windows 9\", \"4.1\"));\n+    }\n+    \n }", "timestamp": 1053786854, "metainfo": ""}