{"sha": "e0b16bcef80843c932e7216941c76ba40586cae8", "log": "Add since tags Update javadoc   ", "commit": "\n--- a/src/java/org/apache/commons/lang/IllegalClassException.java\n+++ b/src/java/org/apache/commons/lang/IllegalClassException.java\n  * Thrown when an object is an instance of an unexpected class.\n  * \n  * @author Matthew Hawthorne\n- * @version $Id: IllegalClassException.java,v 1.1 2003/05/15 04:05:11 bayard Exp $\n+ * @since 2.0\n+ * @version $Id: IllegalClassException.java,v 1.2 2003/05/16 16:14:16 scolebourne Exp $\n  */\n public class IllegalClassException extends IllegalArgumentException {\n \n     /**\n      * Instantiates with the specified classes.\n-     * @param expected the expected type\n-     * @param actual the actual type\n+     * \n+     * @param expected  the expected type\n+     * @param actual  the actual type\n      */\n     public IllegalClassException(Class expected, Class actual) {\n         super(\n \n     /**\n      * Instantiates with the specified classes.\n-     * @param message the exception message\n+     * \n+     * @param message  the exception message\n      */\n     public IllegalClassException(String message) {\n         super(message);\n \n     /**\n      * Gets a classname without throwing an Exception.\n-     * @param c a <code>Class</code>\n+     * \n+     * @param cls  a <code>Class</code>\n      * @return the name of <code>c</code>, or a <code>null</code> <code>String</code>\n      */\n-    private static final String safeGetClassName(Class c) {\n-        return c == null ? null : c.getName();\n+    private static final String safeGetClassName(Class cls) {\n+        return cls == null ? null : cls.getName();\n     }\n \n }\n--- a/src/java/org/apache/commons/lang/IncompleteArgumentException.java\n+++ b/src/java/org/apache/commons/lang/IncompleteArgumentException.java\n  * Thrown to indicate an incomplete argument to a method.\n  * \n  * @author Matthew Hawthorne\n- * @version $Id: IncompleteArgumentException.java,v 1.1 2003/05/15 04:05:11 bayard Exp $\n+ * @since 2.0\n+ * @version $Id: IncompleteArgumentException.java,v 1.2 2003/05/16 16:14:17 scolebourne Exp $\n  */\n public class IncompleteArgumentException extends IllegalArgumentException {\n \n     /**\n      * Instantiates with the specified description.\n-     * @param argName a description of the incomplete argument\n+     * \n+     * @param argName  a description of the incomplete argument\n      */\n     public IncompleteArgumentException(String argName) {\n         super(argName + \" is incomplete.\");\n \n     /**\n      * Instantiates with the specified description.\n-     * @param item a description of the incomplete argument\n+     * \n+     * @param argName  a description of the incomplete argument\n+     * @param items  an array describing the arguments missing\n      */\n     public IncompleteArgumentException(String argName, String[] items) {\n         super(\n \n     /**\n      * Converts an array to a string without throwing an exception.\n-     * @param array an array\n+     * \n+     * @param array  an array\n      * @return the array as a string\n      */\n     private static final String safeArrayToString(Object[] array) {\n--- a/src/java/org/apache/commons/lang/NotImplementedException.java\n+++ b/src/java/org/apache/commons/lang/NotImplementedException.java\n  * Thrown to indicate that a method has not been implemented.\n  * \n  * @author Matthew Hawthorne\n- * @version $Id: NotImplementedException.java,v 1.1 2003/05/15 04:05:11 bayard Exp $\n+ * @since 2.0\n+ * @version $Id: NotImplementedException.java,v 1.2 2003/05/16 16:14:17 scolebourne Exp $\n  */\n public class NotImplementedException extends UnsupportedOperationException {\n \n     /**\n-     * Instantites with the specified class.\n-     * @param clazz the <code>Class</code> that has not implemented the method\n+     * Constructes the exception with the specified class.\n+     * \n+     * @param clazz  the <code>Class</code> that has not implemented the method\n      */\n     public NotImplementedException(Class clazz) {\n         super(\n     }\n \n     /**\n-     * Instantites with the specified msg.\n-     * @param msg the exception message.\n+     * Constructs the exception with the specified message.\n+     * \n+     * @param msg  the exception message.\n      */\n     public NotImplementedException(String msg) {\n         super(msg);\n--- a/src/java/org/apache/commons/lang/NullArgumentException.java\n+++ b/src/java/org/apache/commons/lang/NullArgumentException.java\n  * Thrown to indicate that an argument was null and should not have been.\n  * \n  * @author Matthew Hawthorne\n- * @version $Id: NullArgumentException.java,v 1.1 2003/05/15 04:05:11 bayard Exp $\n+ * @since 2.0\n+ * @version $Id: NullArgumentException.java,v 1.2 2003/05/16 16:14:17 scolebourne Exp $\n  */\n public class NullArgumentException extends IllegalArgumentException {\n \n \t/**\n \t * Instantiates with the given argument name.\n-\t * @param argName - the name of the argument that was null.\n+     * \n+\t * @param argName  the name of the argument that was null.\n \t */\n \tpublic NullArgumentException(String argName) {\n \t\tsuper(argName + \" cannot be null.\");\n--- a/src/java/org/apache/commons/lang/UnhandledException.java\n+++ b/src/java/org/apache/commons/lang/UnhandledException.java\n  * or throw a checked exception.\n  * \n  * @author Matthew Hawthorne\n- * @version $Id: UnhandledException.java,v 1.1 2003/05/15 04:05:11 bayard Exp $\n+ * @since 2.0\n+ * @version $Id: UnhandledException.java,v 1.2 2003/05/16 16:14:17 scolebourne Exp $\n  */\n public class UnhandledException extends NestableRuntimeException {\n \n+    /**\n+     * Constructs the exception using a cause.\n+     * \n+     * @param cause  the underlying cause\n+     */\n \tpublic UnhandledException(Throwable cause) {\n \t\tsuper(cause);\n \t}\n \n+    /**\n+     * Constructs the exception using a message and cause.\n+     * \n+     * @param message  the message to use\n+     * @param cause  the underlying cause\n+     */\n \tpublic UnhandledException(String message, Throwable cause) {\n \t\tsuper(message, cause);\n \t}", "timestamp": 1053101657, "metainfo": ""}