{"sha": "865a748ef41fb2411bb727a0228c1dd655c41a50", "log": "Applied patch from Tomasz Skutnik which allows a Random object to be passed in. This means that method calls to RandomStringUtils can be predictable.  Submitted by:\tTomasz Skutnik <Tomasz.Skutnik@e-point.pl>   ", "commit": "\n--- a/src/java/org/apache/commons/lang/RandomStringUtils.java\n+++ b/src/java/org/apache/commons/lang/RandomStringUtils.java\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: RandomStringUtils.java,v 1.7 2002/12/23 00:32:24 scolebourne Exp $\n+ * @version $Id: RandomStringUtils.java,v 1.8 2003/02/02 03:46:13 bayard Exp $\n  */\n public class RandomStringUtils {\n \n     public static String random(int count, int start, int end, boolean letters, boolean numbers) {\n         return random(count, start, end, letters, numbers, null);\n     }\n-    \n-    /**\n-     * <p>Creates a random string based on a variety of options.</p>\n-     *\n-\t * <p>If start and end are both <code>0</code>, start and end are set\n-     * to <code>' '</code> and <code>'z'</code>, the ASCII printable\n-     * characters, will be used, unless letters and numbers are both\n-\t * <code>false</code>, in which case, start and end are set to\n-     * <code>0</code> and <code>Integer.MAX_VALUE</code>.\n-     *\n-\t * <p>If set is not <code>null</code>, characters between start and\n-     * end are chosen.</p>\n+\n+    /**\n+     * <p>Creates a random string based on a variety of options, using\n+     * default source of randomness.</p>\n+     *\n+     * This method has exactly the same semantics as {@link\n+     * #random(int,int,int,boolean,boolean,char[],Random)}, but\n+     * instead of depending on internal source of randomness ({@link\n+     * #RANDOM}) it uses externally supplied instance of {@link\n+     * Random} class.\n      *\n      * @param count length of random string to create\n      * @param start position in set of chars to start at\n      *  <code>(end - start) + 1</code> characters in the set array.\n      */\n     public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set) {\n+        return random(count,start,end,letters,numbers,set,RANDOM);\n+    }\n+\n+    /**\n+     * <p>Creates a random string based on a variety of options, using\n+     * supplied source of randomness.</p>\n+     *\n+\t * <p>If start and end are both <code>0</code>, start and end are set\n+     * to <code>' '</code> and <code>'z'</code>, the ASCII printable\n+     * characters, will be used, unless letters and numbers are both\n+\t * <code>false</code>, in which case, start and end are set to\n+     * <code>0</code> and <code>Integer.MAX_VALUE</code>.\n+     *\n+\t * <p>If set is not <code>null</code>, characters between start and\n+     * end are chosen.</p>\n+     *\n+     * <p>As a source of randomness is used supplied {@link Random}\n+     * instance. This makes method behave predictively, and allows\n+     * usage of <code>RandomStringUtils</code> in situations that need\n+     * repetitive behaviour.</p>\n+     *\n+     * @param count length of random string to create\n+     * @param start position in set of chars to start at\n+     * @param end position in set of chars to end before\n+     * @param letters only allow letters?\n+     * @param numbers only allow numbers?\n+     * @param set set of chars to choose randoms from. If <code>null</code>,\n+     *  then it will use the set of all chars.\n+     * @param random source of randomness.\n+     * @return the random string\n+     * @throws ArrayIndexOutOfBoundsException if there are not\n+     *  <code>(end - start) + 1</code> characters in the set array.\n+     */\n+    public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set, Random random) {\n         if( (start == 0) && (end == 0) ) {\n             end = (int)'z';\n             start = (int)' ';\n         while(count-- != 0) {\n             char ch;\n             if(set == null) {\n-                ch = (char)(RANDOM.nextInt(gap) + start);\n+                ch = (char)(random.nextInt(gap) + start);\n             } else {\n-                ch = set[RANDOM.nextInt(gap) + start];\n+                ch = set[random.nextInt(gap) + start];\n             }\n             if( (letters && numbers && Character.isLetterOrDigit(ch)) ||\n                 (letters && Character.isLetter(ch)) ||\n--- a/src/test/org/apache/commons/lang/RandomStringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/RandomStringUtilsTest.java\n  * <http://www.apache.org/>.\n  */\n \n+import java.util.Random;\n+\n import junit.framework.*;\n import junit.textui.TestRunner;\n /**\n  *\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n- * @version $Id: RandomStringUtilsTest.java,v 1.2 2002/10/08 19:01:39 sullis Exp $\n+ * @version $Id: RandomStringUtilsTest.java,v 1.3 2003/02/02 03:46:13 bayard Exp $\n  */\n public class RandomStringUtilsTest extends junit.framework.TestCase {\n     /**\n         }\n         r2 = RandomStringUtils.random(50, set);\n         assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n+\n+        long seed = System.currentTimeMillis();\n+        r1 = RandomStringUtils.random(50,0,0,true,true,null,new Random(seed));\n+        r2 = RandomStringUtils.random(50,0,0,true,true,null,new Random(seed));\n+        assertEquals(\"r1.equals(r2)\", r1, r2);\n     }\n \n     public static void main(String args[]) {", "timestamp": 1044157573, "metainfo": ""}