{"sha": "e2668e7b1ab8276c1e816365d76a6b4135d10be1", "log": "Initial version of SystemUtils for system constants   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/SystemUtils.java\n+package org.apache.commons.lang;\n+\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+/**\n+ * Common <code>System</code> class helpers.\n+ *\n+ * @author Based on code from Avalon Excalibur\n+ * @author Based on code from Lucene\n+ * @author <a href=\"mailto:scolebourne@apache.org\">Stephen Colebourne</a>\n+ * @version $Id: SystemUtils.java,v 1.1 2002/08/22 22:11:25 scolebourne Exp $\n+ */\n+public class SystemUtils {\n+    \n+    /**\n+     * Prevent construction of SystemUtils instances\n+     */\n+    private SystemUtils() {\n+    }\n+\n+    /** The line separator string from System.getProperty() */\n+    public static final String LINE_SEPARATOR = System.getProperty(\"line.separator\");\n+    /** The path separator string from System.getProperty() */\n+    public static final String PATH_SEPARATOR = System.getProperty(\"path.separator\");\n+    /** The file separator string from System.getProperty() */\n+    public static final String FILE_SEPARATOR = System.getProperty(\"file.separator\");\n+    \n+    /** The working (user) directory string from System.getProperty() */\n+    public static final String USER_WORKING_DIRECTORY = System.getProperty(\"user.dir\");\n+    /** The user home directory string from System.getProperty() */\n+    public static final String USER_HOME_DIRECTORY = System.getProperty(\"user.home\");\n+    /** The user account name string from System.getProperty() */\n+    public static final String USER_NAME = System.getProperty(\"user.name\");\n+    \n+    /** The os name string from System.getProperty() */\n+    public static final String OS_NAME = System.getProperty(\"os.name\");\n+    /** The os architecture string from System.getProperty() */\n+    public static final String OS_ARCHITECTURE = System.getProperty(\"os.arch\");\n+    /** The os version string from System.getProperty() */\n+    public static final String OS_VERSION = System.getProperty(\"os.version\");\n+    /** True iff this is running on Windows */\n+    public static final boolean IS_WINDOWS;\n+    /** True iff this is running on Unix */\n+    public static final boolean IS_UNIX;\n+    /** True iff this is running on Mac */\n+    public static final boolean IS_MAC;\n+    /** True iff this is running on OS2 */\n+    public static final boolean IS_OS2;\n+    /** True iff this is running on Linux */\n+    public static final boolean IS_LINUX;\n+    \n+    /** The Java vendor string from System.getProperty() */\n+    public static final String JAVA_VENDOR = System.getProperty(\"java.vendor\");\n+    /** The Java vendor url string from System.getProperty() */\n+    public static final String JAVA_VENDOR_URL = System.getProperty(\"java.vendor.url\");\n+    /** The Java installation directory string from System.getProperty() */\n+    public static final String JAVA_HOME = System.getProperty(\"java.home\");\n+    /** The Java class version number string from System.getProperty() */\n+    public static final String JAVA_CLASS_VERSION = System.getProperty(\"java.class.version\");\n+    /** The Java classpath string from System.getProperty() */\n+    public static final String JAVA_CLASS_PATH = System.getProperty(\"java.class.path\");\n+    \n+    /** The Java version string from System.getProperty() */\n+    public static final String JAVA_VERSION = System.getProperty(\"java.version\");\n+    /** True iff this is Java version 1.1. */\n+    public static final boolean IS_JAVA_1_1 = JAVA_VERSION.startsWith(\"1.1.\");\n+    /** True iff this is Java version 1.2. */\n+    public static final boolean IS_JAVA_1_2 = JAVA_VERSION.startsWith(\"1.2.\");\n+    /** True iff this is Java version 1.3. */\n+    public static final boolean IS_JAVA_1_3 = JAVA_VERSION.startsWith(\"1.3.\");\n+    /** True iff this is Java version 1.4. */\n+    public static final boolean IS_JAVA_1_4 = JAVA_VERSION.startsWith(\"1.4.\");\n+    /** True iff this is Java version 1.3. */\n+    public static final boolean IS_JAVA_1_5 = JAVA_VERSION.startsWith(\"1.5.\");\n+\n+    /*\n+     * The JLS doesn't seem to specify an exact naming convention for the\n+     * os.name. We ensure a uniform naming here.\n+     */\n+    static {\n+        // from http://www.geocities.com/vamp201/os.html\n+        if (OS_NAME.startsWith(\"Windows\")) {\n+            IS_WINDOWS = true;\n+            IS_UNIX = false;\n+            IS_MAC = false;\n+            IS_OS2 = false;\n+            IS_LINUX = false;\n+        } else if (OS_NAME.startsWith(\"SunOS\")) {\n+            IS_WINDOWS = false;\n+            IS_UNIX = true;\n+            IS_MAC = false;\n+            IS_OS2 = false;\n+            IS_LINUX = false;\n+        } else if (OS_NAME.startsWith(\"Solaris\")) {\n+            IS_WINDOWS = false;\n+            IS_UNIX = true;\n+            IS_MAC = false;\n+            IS_OS2 = false;\n+            IS_LINUX = false;\n+        } else if (OS_NAME.startsWith(\"Linux\")) {\n+            IS_WINDOWS = false;\n+            IS_UNIX = true;\n+            IS_MAC = false;\n+            IS_OS2 = false;\n+            IS_LINUX = true;\n+        } else if (OS_NAME.startsWith(\"HP-UX\")) {\n+            IS_WINDOWS = false;\n+            IS_UNIX = true;\n+            IS_MAC = false;\n+            IS_OS2 = false;\n+            IS_LINUX = false;\n+        } else if (OS_NAME.startsWith(\"AIX\")) {\n+            IS_WINDOWS = false;\n+            IS_UNIX = true;\n+            IS_MAC = false;\n+            IS_OS2 = false;\n+            IS_LINUX = false;\n+        } else if (OS_NAME.startsWith(\"Irix\")) {\n+            IS_WINDOWS = false;\n+            IS_UNIX = true;\n+            IS_MAC = false;\n+            IS_OS2 = false;\n+            IS_LINUX = false;\n+        } else if (OS_NAME.startsWith(\"Digital Unix\")) {\n+            IS_WINDOWS = false;\n+            IS_UNIX = true;\n+            IS_MAC = false;\n+            IS_OS2 = false;\n+            IS_LINUX = false;\n+        } else if (OS_NAME.startsWith(\"OS/2\")) {\n+            IS_WINDOWS = false;\n+            IS_UNIX = false;\n+            IS_MAC = false;\n+            IS_OS2 = true;\n+            IS_LINUX = false;\n+        } else if (OS_NAME.startsWith(\"Mac\")) {\n+            IS_WINDOWS = false;\n+            IS_UNIX = false;\n+            IS_MAC = true;\n+            IS_OS2 = false;\n+            IS_LINUX = false;\n+        } else {\n+            IS_WINDOWS = false;\n+            IS_UNIX = false;\n+            IS_MAC = false;\n+            IS_OS2 = false;\n+            IS_LINUX = false;\n+        }\n+    }\n+\n+}", "timestamp": 1030054285, "metainfo": ""}