{"sha": "b8a3272c957ca51b3908acfcfa53d9fefb2fb764", "log": "Applying patch from Will Pugh in #LANG-268 - Addition of new variants of the join method.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n         if (array == null) {\n             return null;\n         }\n-        int arraySize = array.length;\n-        int bufSize = (arraySize == 0 ? 0 : ((array[0] == null ? 16 : array[0].toString().length()) + 1) * arraySize);\n+\n+        return join(array, separator, 0, array.length);\n+    }\n+\n+    /**\n+     * <p>Joins the elements of the provided array into a single String\n+     * containing the provided list of elements.</p>\n+     *\n+     * <p>No delimiter is added before or after the list.\n+     * Null objects or empty strings within the array are represented by\n+     * empty strings.</p>\n+     *\n+     * <pre>\n+     * StringUtils.join(null, *)               = null\n+     * StringUtils.join([], *)                 = \"\"\n+     * StringUtils.join([null], *)             = \"\"\n+     * StringUtils.join([\"a\", \"b\", \"c\"], ';')  = \"a;b;c\"\n+     * StringUtils.join([\"a\", \"b\", \"c\"], null) = \"abc\"\n+     * StringUtils.join([null, \"\", \"a\"], ';')  = \";;a\"\n+     * </pre>\n+     *\n+     * @param array  the array of values to join together, may be null\n+     * @param separator  the separator character to use\n+     * @param startIndex the first index to start joining from.  It is\n+     * an error to pass in an end index past the end of the array\n+     * @param endIndex the index to stop joining from (exclusive). It is\n+     * an error to pass in an end index past the end of the array\n+     * @return the joined String, <code>null</code> if null array input\n+     * @since 2.0\n+     */\n+    public static String join(Object[] array, char separator, int startIndex, int endIndex) {\n+        if (array == null) {\n+            return null;\n+        }\n+        int bufSize = (endIndex - startIndex);\n+        if (bufSize <= 0) {\n+            return EMPTY;\n+        }\n+\n+        bufSize *= ((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1);\n         StringBuffer buf = new StringBuffer(bufSize);\n \n-        for (int i = 0; i < arraySize; i++) {\n-            if (i > 0) {\n+        for (int i = startIndex; i < endIndex; i++) {\n+            if (i > startIndex) {\n                 buf.append(separator);\n             }\n             if (array[i] != null) {\n         }\n         return buf.toString();\n     }\n+\n \n     /**\n      * <p>Joins the elements of the provided array into a single String\n         if (array == null) {\n             return null;\n         }\n+        return join(array, separator, 0, array.length);\n+    }\n+\n+    /**\n+     * <p>Joins the elements of the provided array into a single String\n+     * containing the provided list of elements.</p>\n+     *\n+     * <p>No delimiter is added before or after the list.\n+     * A <code>null</code> separator is the same as an empty String (\"\").\n+     * Null objects or empty strings within the array are represented by\n+     * empty strings.</p>\n+     *\n+     * <pre>\n+     * StringUtils.join(null, *)                = null\n+     * StringUtils.join([], *)                  = \"\"\n+     * StringUtils.join([null], *)              = \"\"\n+     * StringUtils.join([\"a\", \"b\", \"c\"], \"--\")  = \"a--b--c\"\n+     * StringUtils.join([\"a\", \"b\", \"c\"], null)  = \"abc\"\n+     * StringUtils.join([\"a\", \"b\", \"c\"], \"\")    = \"abc\"\n+     * StringUtils.join([null, \"\", \"a\"], ',')   = \",,a\"\n+     * </pre>\n+     *\n+     * @param array  the array of values to join together, may be null\n+     * @param separator  the separator character to use, null treated as \"\"\n+     * @param startIndex the first index to start joining from.  It is\n+     * an error to pass in an end index past the end of the array\n+     * @param endIndex the index to stop joining from (exclusive). It is\n+     * an error to pass in an end index past the end of the array\n+     * @return the joined String, <code>null</code> if null array input\n+     */\n+    public static String join(Object[] array, String separator, int startIndex, int endIndex) {\n+        if (array == null) {\n+            return null;\n+        }\n         if (separator == null) {\n             separator = EMPTY;\n         }\n-        int arraySize = array.length;\n-\n-        // ArraySize ==  0: Len = 0\n-        // ArraySize > 0:   Len = NofStrings *(len(firstString) + len(separator))\n+\n+        // endIndex - startIndex > 0:   Len = NofStrings *(len(firstString) + len(separator))\n         //           (Assuming that all Strings are roughly equally long)\n-        int bufSize =\n-            ((arraySize == 0)\n-                ? 0\n-                : arraySize\n-                    * ((array[0] == null ? 16 : array[0].toString().length())\n-                        + separator.length()));\n+        int bufSize = (endIndex - startIndex);\n+        if (bufSize <= 0) {\n+            return EMPTY;\n+        }\n+\n+        bufSize *= ((array[startIndex] == null ? 16 : array[startIndex].toString().length())\n+                        + separator.length());\n \n         StringBuffer buf = new StringBuffer(bufSize);\n \n-        for (int i = 0; i < arraySize; i++) {\n-            if (i > 0) {\n+        for (int i = startIndex; i < endIndex; i++) {\n+            if (i > startIndex) {\n                 buf.append(separator);\n             }\n             if (array[i] != null) {\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n         assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));\n         assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));\n         assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));\n+\n+        assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));\n+        assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));\n+        assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));\n+        assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));\n+        assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));\n     }\n     \n     public void testJoin_ArrayString() {\n         assertEquals(TEXT_LIST, StringUtils.join(ARRAY_LIST, SEPARATOR));\n         assertEquals(\",,foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR));\n         assertEquals(\"foo,2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR));\n+\n+        assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, \"/\", 0, MIXED_ARRAY_LIST.length-1));\n+        assertEquals(\"\", StringUtils.join(MIXED_ARRAY_LIST, \"\", 0, MIXED_ARRAY_LIST.length-1));\n+        assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 0, 1));\n+        assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 0, 2));\n+        assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 1, 2));\n+        assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 2, 1));\n     }\n     \n     public void testJoin_IteratorChar() {", "timestamp": 1159557603, "metainfo": ""}