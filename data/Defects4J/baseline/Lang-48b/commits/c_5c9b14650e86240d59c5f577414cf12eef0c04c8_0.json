{"sha": "5c9b14650e86240d59c5f577414cf12eef0c04c8", "log": "Moved BitField and Validate from the util package up to the main package.   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/BitField.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang;\n+\n+/**\n+ * <p>Manage operations dealing with bit-mapped fields.</p>\n+ *\n+ * @author Apache Jakarta POI\n+ * @author Scott Sanders (sanders at apache dot org)\n+ * @author Marc Johnson (mjohnson at apache dot org)\n+ * @author Andrew C. Oliver (acoliver at apache dot org)\n+ * @author Stephen Colebourne\n+ * @author Pete Gieser\n+ * @since 2.0\n+ * @version $Id: BitField.java,v 1.1 2003/08/19 02:32:15 bayard Exp $\n+ */\n+public class BitField {\n+    \n+    private final int _mask;\n+    private final int _shift_count;\n+\n+    /**\n+     * <p>Create a BitField instance.</p>\n+     *\n+     * @param mask the mask specifying which bits apply to this\n+     *  BitField. Bits that are set in this mask are the bits\n+     *  that this BitField operates on\n+     */\n+    public BitField(final int mask) {\n+        _mask = mask;\n+        int count = 0;\n+        int bit_pattern = mask;\n+\n+        if (bit_pattern != 0) {\n+            while ((bit_pattern & 1) == 0) {\n+                count++;\n+                bit_pattern >>= 1;\n+            }\n+        }\n+        _shift_count = count;\n+    }\n+\n+    /**\n+     * <p>Obtain the value for the specified BitField, appropriately\n+     * shifted right.</p>\n+     *\n+     * <p>Many users of a BitField will want to treat the specified\n+     * bits as an int value, and will not want to be aware that the\n+     * value is stored as a BitField (and so shifted left so many\n+     * bits).</p>\n+     *\n+     * @see #setValue\n+     * @param holder the int data containing the bits we're interested\n+     *  in\n+     * @return the selected bits, shifted right appropriately\n+     */\n+    public int getValue(final int holder) {\n+        return getRawValue(holder) >> _shift_count;\n+    }\n+\n+    /**\n+     * <p>Obtain the value for the specified BitField, appropriately\n+     * shifted right, as a short.</p>\n+     *\n+     * <p>Many users of a BitField will want to treat the specified\n+     * bits as an int value, and will not want to be aware that the\n+     * value is stored as a BitField (and so shifted left so many\n+     * bits).</p>\n+     *\n+     * @see #setShortValue\n+     * @param holder the short data containing the bits we're\n+     *  interested in\n+     * @return the selected bits, shifted right appropriately\n+     */\n+    public short getShortValue(final short holder) {\n+        return (short) getValue(holder);\n+    }\n+\n+    /**\n+     * <p>Obtain the value for the specified BitField, unshifted.</p>\n+     *\n+     * @param holder the int data containing the bits we're\n+     *  interested in\n+     * @return the selected bits\n+     */\n+    public int getRawValue(final int holder) {\n+        return (holder & _mask);\n+    }\n+\n+    /**\n+     * <p>Obtain the value for the specified BitField, unshifted.</p>\n+     *\n+     * @param holder the short data containing the bits we're\n+     *  interested in\n+     * @return the selected bits\n+     */\n+    public short getShortRawValue(final short holder) {\n+        return (short) getRawValue(holder);\n+    }\n+\n+    /**\n+     * <p>Returns whether the field is set or not.</p>\n+     *\n+     * <p>This is most commonly used for a single-bit field, which is\n+     * often used to represent a boolean value; the results of using\n+     * it for a multi-bit field is to determine whether *any* of its\n+     * bits are set.</p>\n+     *\n+     * @param holder the int data containing the bits we're interested\n+     *  in\n+     * @return <code>true</code> if any of the bits are set,\n+     *  else <code>false</code>\n+     */\n+    public boolean isSet(final int holder) {\n+        return (holder & _mask) != 0;\n+    }\n+\n+    /**\n+     * <p>Returns whether all of the bits are set or not.</p>\n+     *\n+     * <p>This is a stricter test than {@link #isSet(int)},\n+     * in that all of the bits in a multi-bit set must be set\n+     * for this method to return <code>true</code>.</p>\n+     *\n+     * @param holder the int data containing the bits we're\n+     *  interested in\n+     * @return <code>true</code> if all of the bits are set,\n+     *  else <code>false</code>\n+     */\n+    public boolean isAllSet(final int holder) {\n+        return (holder & _mask) == _mask;\n+    }\n+\n+    /**\n+     * <p>Replace the bits with new values.</p>\n+     *\n+     * @see #getValue\n+     * @param holder the int data containint the bits we're\n+     *  interested in\n+     * @param value the new value for the specified bits\n+     * @return the value of holder with the bits from the value\n+     *  parameter replacing the old bits\n+     */\n+    public int setValue(final int holder, final int value) {\n+        return (holder & ~_mask) | ((value << _shift_count) & _mask);\n+    }\n+\n+    /**\n+     * <p>Replace the bits with new values.</p>\n+     *\n+     * @see #getShortValue\n+     * @param holder the short data containing the bits we're\n+     *  interested in\n+     * @param value the new value for the specified bits\n+     * @return the value of holder with the bits from the value\n+     *  parameter replacing the old bits\n+     */\n+    public short setShortValue(final short holder, final short value) {\n+        return (short) setValue(holder, value);\n+    }\n+\n+    /**\n+     * <p>Clear the bits.</p>\n+     *\n+     * @param holder the int data containing the bits we're\n+     *  interested in\n+     * @return the value of holder with the specified bits cleared\n+     *  (set to <code>0</code>)\n+     */\n+    public int clear(final int holder) {\n+        return holder & ~_mask;\n+    }\n+\n+    /**\n+     * <p>Clear the bits.</p>\n+     *\n+     * @param holder the short data containing the bits we're\n+     *  interested in\n+     * @return the value of holder with the specified bits cleared\n+     *  (set to <code>0</code>)\n+     */\n+    public short clearShort(final short holder) {\n+        return (short) clear(holder);\n+    }\n+\n+    /**\n+     * <p>Clear the bits.</p>\n+     *\n+     * @param holder the byte data containing the bits we're\n+     *  interested in\n+     *\n+     * @return the value of holder with the specified bits cleared\n+     *  (set to <code>0</code>)\n+     */\n+    public byte clearByte(final byte holder) {\n+        return (byte) clear(holder);\n+    }\n+\n+    /**\n+     * <p>Set the bits.</p>\n+     *\n+     * @param holder the int data containing the bits we're\n+     *  interested in\n+     * @return the value of holder with the specified bits set\n+     *  to <code>1</code>\n+     */\n+    public int set(final int holder) {\n+        return holder | _mask;\n+    }\n+\n+    /**\n+     * <p>Set the bits.</p>\n+     *\n+     * @param holder the short data containing the bits we're\n+     *  interested in\n+     * @return the value of holder with the specified bits set\n+     *  to <code>1</code>\n+     */\n+    public short setShort(final short holder) {\n+        return (short) set(holder);\n+    }\n+\n+    /**\n+     * <p>Set the bits.</p>\n+     *\n+     * @param holder the byte data containing the bits we're\n+     *  interested in\n+     *\n+     * @return the value of holder with the specified bits set\n+     *  to <code>1</code>\n+     */\n+    public byte setByte(final byte holder) {\n+        return (byte) set(holder);\n+    }\n+\n+    /**\n+     * <p>Set a boolean BitField.</p>\n+     *\n+     * @param holder the int data containing the bits we're\n+     *  interested in\n+     * @param flag indicating whether to set or clear the bits\n+     * @return the value of holder with the specified bits set or\n+     *         cleared\n+     */\n+    public int setBoolean(final int holder, final boolean flag) {\n+        return flag ? set(holder) : clear(holder);\n+    }\n+\n+    /**\n+     * <p>Set a boolean BitField.</p>\n+     *\n+     * @param holder the short data containing the bits we're\n+     *  interested in\n+     * @param flag indicating whether to set or clear the bits\n+     * @return the value of holder with the specified bits set or\n+     *  cleared\n+     */\n+    public short setShortBoolean(final short holder, final boolean flag) {\n+        return flag ? setShort(holder) : clearShort(holder);\n+    }\n+\n+    /**\n+     * <p>Set a boolean BitField.</p>\n+     *\n+     * @param holder the byte data containing the bits we're\n+     *  interested in\n+     * @param flag indicating whether to set or clear the bits\n+     * @return the value of holder with the specified bits set or\n+     *  cleared\n+     */\n+    public byte setByteBoolean(final byte holder, final boolean flag) {\n+        return flag ? setByte(holder) : clearByte(holder);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/Validate.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.Map;\n+/**\n+ * <p>Validate is a static utility class for validating arguments.\n+ * \n+ * <p>The class is based along the lines of JUnit. If an argument value is \n+ * deemed invalid, an IllegalArgumentException is thrown. For example:\n+ * \n+ * <pre>\n+ * Validate.isTrue( i > 0, \"The value must be greater than zero: \", i);\n+ * Validate.notNull( surname, \"The surname must not be null\");\n+ * </pre>\n+ *\n+ * @author <a href=\"mailto:ola.berg@arkitema.se\">Ola Berg</a>\n+ * @author Stephen Colebourne\n+ * @since 2.0\n+ * @version $Id: Validate.java,v 1.4 2003/08/19 02:32:15 bayard Exp $\n+ */\n+public class Validate {\n+    \n+    /**\n+     * Constructor. This class should not normally be instantiated.\n+     */\n+    public Validate() {\n+    }\n+    \n+    // isTrue\n+    //---------------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the test result is <code>false</code>.</p>\n+     * \n+     * <p>This is used when validating according to an arbitrary boolean expression,\n+     * such as validating a primitive number or using your own custom validation \n+     * expression.</p>\n+     *\n+     * <pre>\n+     * Validate.isTrue( myObject.isOk(), \"The object is not OK: \", myObject);\n+     * </pre>\n+     *\n+     * <p>For performance reasons, the object is passed as a separate parameter and\n+     * appended to the message string only in the case of an error.</p>\n+     * \n+     * @param expression  a boolean expression\n+     * @param message  the exception message you would like to see if the\n+     *  expression is <code>false</code>\n+     * @param value  the value to append to the message in case of error\n+     * @throws IllegalArgumentException if expression is <code>false</code>\n+     */\n+    public static void isTrue(boolean expression, String message, Object value) {\n+        if (expression == false) {\n+            throw new IllegalArgumentException(message + value);\n+        }\n+    }\n+\n+    /**\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the test result is <code>false</code>.</p>\n+     * \n+     * <p>This is used when validating according to an arbitrary boolean expression,\n+     * such as validating a primitive number or using your own custom validation \n+     * expression.</p>\n+     *\n+     * <pre>\n+     * Validate.isTrue( i > 0, \"The value must be greater than zero: \", i);\n+     * </pre>\n+     *\n+     * <p>For performance reasons, the object is passed as a separate parameter and\n+     * appended to the message string only in the case of an error.</p>\n+     * \n+     * @param expression  a boolean expression\n+     * @param message  the exception message you would like to see if the expression is <code>false</code>\n+     * @param value  the value to append to the message in case of error\n+     * @throws IllegalArgumentException if expression is <code>false</code>\n+     */\n+    public static void isTrue(boolean expression, String message, long value) {\n+        if (expression == false) {\n+            throw new IllegalArgumentException(message + value);\n+        }\n+    }\n+\n+    /**\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the test result is <code>false</code>.</p>\n+     * \n+     * <p>This is used when validating according to an arbitrary boolean expression,\n+     * such as validating a primitive number or using your own custom validation \n+     * expression.</p>\n+     *\n+     * <pre>\n+     * Validate.isTrue( d > 0.0, \"The value must be greater than zero: \", d);\n+     * </pre>\n+     *\n+     * <p>For performance reasons, the object is passed as a separate parameter and\n+     * appended to the message string only in the case of an error.</p>\n+     * \n+     * @param expression  a boolean expression\n+     * @param message  the exception message you would like to see if the expression\n+     *  is <code>false</code>\n+     * @param value  the value to append to the message in case of error\n+     * @throws IllegalArgumentException if expression is <code>false</code>\n+     */\n+    public static void isTrue(boolean expression, String message, double value) {\n+        if (expression == false) {\n+            throw new IllegalArgumentException(message + value);\n+        }\n+    }\n+\n+    /**\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the test result is <code>false</code>.</p>\n+     * \n+     * <p>This is used when validating according to an arbitrary boolean expression,\n+     * such as validating a primitive number or using your own custom validation \n+     * expression.</p>\n+     *\n+     * <pre>\n+     * Validate.isTrue( (i > 0), \"The value must be greater than zero\");\n+     * Validate.isTrue( myObject.isOk(), \"The object is not OK\");\n+     * </pre>\n+     *\n+     * <p>For performance reasons, the message string should not involve a string append,\n+     * instead use the {@link #isTrue(boolean, String, Object)} method.</p>\n+     * \n+     * @param expression  a boolean expression\n+     * @param message  the exception message you would like to see if the expression\n+     *  is <code>false</code>\n+     * @throws IllegalArgumentException if expression is <code>false</code>\n+     */\n+    public static void isTrue(boolean expression, String message) {\n+        if (expression == false) {\n+            throw new IllegalArgumentException(message);\n+        }\n+    }\n+\n+    /**\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the test result is <code>false</code>.</p>\n+     * \n+     * <p>This is used when validating according to an arbitrary boolean expression,\n+     * such as validating a primitive number or using your own custom validation \n+     * expression.</p>\n+     *\n+     * <pre>\n+     * Validate.isTrue( i > 0 );\n+     * Validate.isTrue( myObject.isOk() );\n+     * </pre>\n+     *\n+     * <p>The message in the exception is 'The validated expression is false'.</p>\n+     * \n+     * @param expression  a boolean expression\n+     * @throws IllegalArgumentException if expression is <code>false</code>\n+     */\n+    public static void isTrue(boolean expression) {\n+        if (expression == false) {\n+            throw new IllegalArgumentException(\"The validated expression is false\");\n+        }\n+    }\n+\n+    // notNull\n+    //---------------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the argument is <code>null</code>.</p>\n+     *\n+     * <pre>\n+     * Validate.notNull(myObject, \"The object must not be null\");\n+     * </pre>\n+     * \n+     * @param object  the object to check is not <code>null</code>\n+     * @param message  the exception message you would like to see\n+     *  if the object is <code>null</code>\n+     * @throws IllegalArgumentException if the object is <code>null</code>\n+     */\n+    public static void notNull(Object object, String message) {\n+        if (object == null) {\n+            throw new IllegalArgumentException(message);\n+        }\n+    }\n+\n+    /**\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the argument is <code>null</code>.</p>\n+     *\n+     * <pre>\n+     * Validate.notNull(myObject);\n+     * </pre>\n+     *\n+     * <p>The message in the exception is 'The validated object is null'.</p>\n+     * \n+     * @param object  the object to check is not <code>null</code>\n+     * @throws IllegalArgumentException if the object is <code>null</code>\n+     */\n+    public static void notNull(Object object) {\n+        if (object == null) {\n+            throw new IllegalArgumentException(\"The validated object is null\");\n+        }\n+    }\n+\n+    // notEmpty array\n+    //---------------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the argument array is empty (<code>null</code> or no elements).</p>\n+     *\n+     * <pre>\n+     * Validate.notEmpty(myArray, \"The array must not be empty\");\n+     * </pre>\n+     * \n+     * @param array  the array to check is not empty\n+     * @param message  the exception message you would like to see if the array is empty\n+     * @throws IllegalArgumentException if the array is empty\n+     */\n+    public static void notEmpty(Object[] array, String message) {\n+        if (array == null || array.length == 0) {\n+            throw new IllegalArgumentException(message);\n+        }\n+    }\n+\n+    /**\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the argument array is empty (<code>null</code> or no elements).</p>\n+     *\n+     * <pre>\n+     * Validate.notEmpty(myArray);\n+     * </pre>\n+     *\n+     * <p>The message in the exception is 'The validated array is empty'.\n+     * \n+     * @param array  the array to check is not empty\n+     * @throws IllegalArgumentException if the array is empty\n+     */\n+    public static void notEmpty(Object[] array) {\n+        if (array == null || array.length == 0) {\n+            throw new IllegalArgumentException(\"The validated array is empty\");\n+        }\n+    }\n+\n+    // notEmpty collection\n+    //---------------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the argument Collection is empty (<code>null</code> or no elements).</p>\n+     *\n+     * <pre>\n+     * Validate.notEmpty(myCollection, \"The collection must not be empty\");\n+     * </pre>\n+     * \n+     * @param collection  the collection to check is not empty\n+     * @param message  the exception message you would like to see if the collection is empty\n+     * @throws IllegalArgumentException if the collection is empty\n+     */\n+    public static void notEmpty(Collection collection, String message) {\n+        if (collection == null || collection.size() == 0) {\n+            throw new IllegalArgumentException(message);\n+        }\n+    }\n+\n+    /**\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the argument Collection is empty (<code>null</code> or no elements).</p>\n+     *\n+     * <pre>\n+     * Validate.notEmpty(myCollection);\n+     * </pre>\n+     *\n+     * <p>The message in the exception is 'The validated collection is empty'.</p>\n+     * \n+     * @param collection  the collection to check is not empty\n+     * @throws IllegalArgumentException if the collection is empty\n+     */\n+    public static void notEmpty(Collection collection) {\n+        if (collection == null || collection.size() == 0) {\n+            throw new IllegalArgumentException(\"The validated collection is empty\");\n+        }\n+    }\n+\n+    // notEmpty map\n+    //---------------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the argument Map is empty (<code>null</code> or no elements).</p>\n+     *\n+     * <pre>\n+     * Validate.notEmpty(myMap, \"The collection must not be empty\");\n+     * </pre>\n+     * \n+     * @param map  the map to check is not empty\n+     * @param message  the exception message you would like to see if the map is empty\n+     * @throws IllegalArgumentException if the map is empty\n+     */\n+    public static void notEmpty(Map map, String message) {\n+        if (map == null || map.size() == 0) {\n+            throw new IllegalArgumentException(message);\n+        }\n+    }\n+\n+    /**\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the argument Map is empty (<code>null</code> or no elements).</p>\n+     *\n+     * <pre>\n+     * Validate.notEmpty(myMap);\n+     * </pre>\n+     *\n+     * <p>The message in the exception is 'The validated map is empty'.</p>\n+     * \n+     * @param map  the map to check is not empty\n+     * @throws IllegalArgumentException if the map is empty\n+     */\n+    public static void notEmpty(Map map) {\n+        if (map == null || map.size() == 0) {\n+            throw new IllegalArgumentException(\"The validated map is empty\");\n+        }\n+    }\n+\n+    // notEmpty string\n+    //---------------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the argument String is empty (<code>null</code> or zero length).</p>\n+     *\n+     * <pre>\n+     * Validate.notEmpty(myString, \"The string must not be empty\");\n+     * </pre>\n+     * \n+     * @param string  the string to check is not empty\n+     * @param message  the exception message you would like to see if the string is empty\n+     * @throws IllegalArgumentException if the string is empty\n+     */\n+    public static void notEmpty(String string, String message) {\n+        if (string == null || string.length() == 0) {\n+            throw new IllegalArgumentException(message);\n+        }\n+    }\n+\n+    /**\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the argument String is empty (<code>null</code> or zero length).</p>\n+     *\n+     * <pre>\n+     * Validate.notEmpty(myString);\n+     * </pre>\n+     *\n+     * <p>The message in the exception is 'The validated string is empty'.</p>\n+     * \n+     * @param string  the string to check is not empty\n+     * @throws IllegalArgumentException if the string is empty\n+     */\n+    public static void notEmpty(String string) {\n+        if (string == null || string.length() == 0) {\n+            throw new IllegalArgumentException(\"The validated string is empty\");\n+        }\n+    }\n+\n+    // notNullElements array\n+    //---------------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the argument array has <code>null</code> elements or is\n+     * <code>null</code>.</p>\n+     *\n+     * <pre>\n+     * Validate.notEmpty(myArray, \"The array must not contain null elements\");\n+     * </pre>\n+     * \n+     * @param array  the array to check\n+     * @param message  the exception message if the array has\n+     *  <code>null</code> elements\n+     * @throws IllegalArgumentException if the array has <code>null</code>\n+     *  elements or is <code>null</code>\n+     */\n+    public static void noNullElements(Object[] array, String message) {\n+        Validate.notNull(array);\n+        for (int i = 0; i < array.length; i++) {\n+            if (array[i] == null) {\n+                throw new IllegalArgumentException(message);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the argument array has <code>null</code> elements or is\n+     * <code>null</code>.</p>\n+     *\n+     * <pre>\n+     * Validate.notEmpty(myArray);\n+     * </pre>\n+     *\n+     * <p>The message in the exception is 'The validated array contains null element at index: '.</p>\n+     * \n+     * @param array  the array to check\n+     * @throws IllegalArgumentException if the array has <code>null</code>\n+     *  elements or is <code>null</code>\n+     */\n+    public static void noNullElements(Object[] array) {\n+        Validate.notNull(array);\n+        for (int i = 0; i < array.length; i++) {\n+            if (array[i] == null) {\n+                throw new IllegalArgumentException(\"The validated array contains null element at index: \" + i);\n+            }\n+        }\n+    }\n+\n+    // notNullElements collection\n+    //---------------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the argument collection has <code>null</code> elements or is\n+     * <code>null</code>.</p>\n+     *\n+     * <pre>\n+     * Validate.notEmpty(myCollection, \"The collection must not contain null elements\");\n+     * </pre>\n+     * \n+     * @param collection  the collection to check\n+     * @param message  the exception message if the array has\n+     *  <code>null</code> elements\n+     * @throws IllegalArgumentException if the collection has\n+     *  <code>null</code> elements or is <code>null</code>\n+     */\n+    public static void noNullElements(Collection collection, String message) {\n+        Validate.notNull(collection);\n+        int i = 0;\n+        for (Iterator it = collection.iterator(); it.hasNext(); i++) {\n+            if (it.next() == null) {\n+                throw new IllegalArgumentException(message);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n+     * if the argument collection has <code>null</code> elements or is\n+     * <code>null</code>.</p>\n+     *\n+     * <pre>\n+     * Validate.notEmpty(myCollection);\n+     * </pre>\n+     *\n+     * <p>The message in the exception is 'The validated collection contains null element at index: '.</p>\n+     * \n+     * @param collection  the collection to check\n+     * @throws IllegalArgumentException if the collection has\n+     *  <code>null</code> elements or is <code>null</code>\n+     */\n+    public static void noNullElements(Collection collection) {\n+        Validate.notNull(collection);\n+        int i = 0;\n+        for (Iterator it = collection.iterator(); it.hasNext(); i++) {\n+            if (it.next() == null) {\n+                throw new IllegalArgumentException(\"The validated collection contains null element at index: \" + i);\n+            }\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/BitFieldTest.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//lang/src/test/org/apache/commons/lang/BitFieldTest.java,v 1.1 2003/08/19 02:32:16 bayard Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2003/08/19 02:32:16 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.lang;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Class to test BitField functionality\n+ *\n+ * @author Scott Sanders (sanders at apache dot org)\n+ * @author Marc Johnson\n+ * @author Glen Stampoultzis (gstamp@iprimus.com.au)\n+ * @version $Id: BitFieldTest.java,v 1.1 2003/08/19 02:32:16 bayard Exp $\n+ */\n+\n+public class BitFieldTest\n+    extends TestCase\n+{\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+    \tTestSuite suite = new TestSuite(BitFieldTest.class);\n+    \tsuite.setName(\"BitField Tests\");\n+        return suite;\n+    }\n+\n+    private static BitField bf_multi  = new BitField(0x3F80);\n+    private static BitField bf_single = new BitField(0x4000);\n+\n+    /**\n+     * Constructor BitFieldTest\n+     *\n+     * @param name\n+     */\n+\n+    public BitFieldTest(String name)\n+    {\n+        super(name);\n+    }\n+\n+    /**\n+     * test the getValue() method\n+     */\n+\n+    public void testGetValue()\n+    {\n+        assertEquals(bf_multi.getValue(-1), 127);\n+        assertEquals(bf_multi.getValue(0), 0);\n+        assertEquals(bf_single.getValue(-1), 1);\n+        assertEquals(bf_single.getValue(0), 0);\n+    }\n+\n+    /**\n+     * test the getShortValue() method\n+     */\n+\n+    public void testGetShortValue()\n+    {\n+        assertEquals(bf_multi.getShortValue(( short ) -1), ( short ) 127);\n+        assertEquals(bf_multi.getShortValue(( short ) 0), ( short ) 0);\n+        assertEquals(bf_single.getShortValue(( short ) -1), ( short ) 1);\n+        assertEquals(bf_single.getShortValue(( short ) 0), ( short ) 0);\n+    }\n+\n+    /**\n+     * test the getRawValue() method\n+     */\n+\n+    public void testGetRawValue()\n+    {\n+        assertEquals(bf_multi.getRawValue(-1), 0x3F80);\n+        assertEquals(bf_multi.getRawValue(0), 0);\n+        assertEquals(bf_single.getRawValue(-1), 0x4000);\n+        assertEquals(bf_single.getRawValue(0), 0);\n+    }\n+\n+    /**\n+     * test the getShortRawValue() method\n+     */\n+\n+    public void testGetShortRawValue()\n+    {\n+        assertEquals(bf_multi.getShortRawValue(( short ) -1),\n+                     ( short ) 0x3F80);\n+        assertEquals(bf_multi.getShortRawValue(( short ) 0), ( short ) 0);\n+        assertEquals(bf_single.getShortRawValue(( short ) -1),\n+                     ( short ) 0x4000);\n+        assertEquals(bf_single.getShortRawValue(( short ) 0), ( short ) 0);\n+    }\n+\n+    /**\n+     * test the isSet() method\n+     */\n+\n+    public void testIsSet()\n+    {\n+        assertTrue(!bf_multi.isSet(0));\n+        for (int j = 0x80; j <= 0x3F80; j += 0x80)\n+        {\n+            assertTrue(bf_multi.isSet(j));\n+        }\n+        assertTrue(!bf_single.isSet(0));\n+        assertTrue(bf_single.isSet(0x4000));\n+    }\n+\n+    /**\n+     * test the isAllSet() method\n+     */\n+\n+    public void testIsAllSet()\n+    {\n+        for (int j = 0; j < 0x3F80; j += 0x80)\n+        {\n+            assertTrue(!bf_multi.isAllSet(j));\n+        }\n+        assertTrue(bf_multi.isAllSet(0x3F80));\n+        assertTrue(!bf_single.isAllSet(0));\n+        assertTrue(bf_single.isAllSet(0x4000));\n+    }\n+\n+    /**\n+     * test the setValue() method\n+     */\n+\n+    public void testSetValue()\n+    {\n+        for (int j = 0; j < 128; j++)\n+        {\n+            assertEquals(bf_multi.getValue(bf_multi.setValue(0, j)), j);\n+            assertEquals(bf_multi.setValue(0, j), j << 7);\n+        }\n+\n+        // verify that excess bits are stripped off\n+        assertEquals(bf_multi.setValue(0x3f80, 128), 0);\n+        for (int j = 0; j < 2; j++)\n+        {\n+            assertEquals(bf_single.getValue(bf_single.setValue(0, j)), j);\n+            assertEquals(bf_single.setValue(0, j), j << 14);\n+        }\n+\n+        // verify that excess bits are stripped off\n+        assertEquals(bf_single.setValue(0x4000, 2), 0);\n+    }\n+\n+    /**\n+     * test the setShortValue() method\n+     */\n+\n+    public void testSetShortValue()\n+    {\n+        for (int j = 0; j < 128; j++)\n+        {\n+            assertEquals(bf_multi\n+                .getShortValue(bf_multi\n+                    .setShortValue(( short ) 0, ( short ) j)), ( short ) j);\n+            assertEquals(bf_multi.setShortValue(( short ) 0, ( short ) j),\n+                         ( short ) (j << 7));\n+        }\n+\n+        // verify that excess bits are stripped off\n+        assertEquals(bf_multi.setShortValue(( short ) 0x3f80, ( short ) 128),\n+                     ( short ) 0);\n+        for (int j = 0; j < 2; j++)\n+        {\n+            assertEquals(bf_single\n+                .getShortValue(bf_single\n+                    .setShortValue(( short ) 0, ( short ) j)), ( short ) j);\n+            assertEquals(bf_single.setShortValue(( short ) 0, ( short ) j),\n+                         ( short ) (j << 14));\n+        }\n+\n+        // verify that excess bits are stripped off\n+        assertEquals(bf_single.setShortValue(( short ) 0x4000, ( short ) 2),\n+                     ( short ) 0);\n+    }\n+\n+    public void testByte()\n+    {\n+        assertEquals(1, new BitField(1).setByteBoolean(( byte ) 0, true));\n+        assertEquals(2, new BitField(2).setByteBoolean(( byte ) 0, true));\n+        assertEquals(4, new BitField(4).setByteBoolean(( byte ) 0, true));\n+        assertEquals(8, new BitField(8).setByteBoolean(( byte ) 0, true));\n+        assertEquals(16, new BitField(16).setByteBoolean(( byte ) 0, true));\n+        assertEquals(32, new BitField(32).setByteBoolean(( byte ) 0, true));\n+        assertEquals(64, new BitField(64).setByteBoolean(( byte ) 0, true));\n+        assertEquals(-128,\n+                     new BitField(128).setByteBoolean(( byte ) 0, true));\n+        assertEquals(0, new BitField(1).setByteBoolean(( byte ) 1, false));\n+        assertEquals(0, new BitField(2).setByteBoolean(( byte ) 2, false));\n+        assertEquals(0, new BitField(4).setByteBoolean(( byte ) 4, false));\n+        assertEquals(0, new BitField(8).setByteBoolean(( byte ) 8, false));\n+        assertEquals(0, new BitField(16).setByteBoolean(( byte ) 16, false));\n+        assertEquals(0, new BitField(32).setByteBoolean(( byte ) 32, false));\n+        assertEquals(0, new BitField(64).setByteBoolean(( byte ) 64, false));\n+        assertEquals(0, new BitField(128).setByteBoolean(( byte ) 128,\n+                                     false));\n+        assertEquals(-2, new BitField(1).setByteBoolean(( byte ) 255, false));\n+        byte clearedBit = new BitField(0x40).setByteBoolean(( byte ) -63,\n+                                       false);\n+\n+        assertEquals(false, new BitField(0x40).isSet(clearedBit));\n+    }\n+\n+    /**\n+     * test the clear() method\n+     */\n+\n+    public void testClear()\n+    {\n+        assertEquals(bf_multi.clear(-1), 0xFFFFC07F);\n+        assertEquals(bf_single.clear(-1), 0xFFFFBFFF);\n+    }\n+\n+    /**\n+     * test the clearShort() method\n+     */\n+\n+    public void testClearShort()\n+    {\n+        assertEquals(bf_multi.clearShort(( short ) -1), ( short ) 0xC07F);\n+        assertEquals(bf_single.clearShort(( short ) -1), ( short ) 0xBFFF);\n+    }\n+\n+    /**\n+     * test the set() method\n+     */\n+\n+    public void testSet()\n+    {\n+        assertEquals(bf_multi.set(0), 0x3F80);\n+        assertEquals(bf_single.set(0), 0x4000);\n+    }\n+\n+    /**\n+     * test the setShort() method\n+     */\n+\n+    public void testSetShort()\n+    {\n+        assertEquals(bf_multi.setShort(( short ) 0), ( short ) 0x3F80);\n+        assertEquals(bf_single.setShort(( short ) 0), ( short ) 0x4000);\n+    }\n+\n+    /**\n+     * test the setBoolean() method\n+     */\n+\n+    public void testSetBoolean()\n+    {\n+        assertEquals(bf_multi.set(0), bf_multi.setBoolean(0, true));\n+        assertEquals(bf_single.set(0), bf_single.setBoolean(0, true));\n+        assertEquals(bf_multi.clear(-1), bf_multi.setBoolean(-1, false));\n+        assertEquals(bf_single.clear(-1), bf_single.setBoolean(-1, false));\n+    }\n+\n+    /**\n+     * test the setShortBoolean() method\n+     */\n+\n+    public void testSetShortBoolean()\n+    {\n+        assertEquals(bf_multi.setShort(( short ) 0),\n+                     bf_multi.setShortBoolean(( short ) 0, true));\n+        assertEquals(bf_single.setShort(( short ) 0),\n+                     bf_single.setShortBoolean(( short ) 0, true));\n+        assertEquals(bf_multi.clearShort(( short ) -1),\n+                     bf_multi.setShortBoolean(( short ) -1, false));\n+        assertEquals(bf_single.clearShort(( short ) -1),\n+                     bf_single.setShortBoolean(( short ) -1, false));\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/lang/LangTestSuite.java\n+++ b/src/test/org/apache/commons/lang/LangTestSuite.java\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author Matthew Hawthorne\n- * @version $Id: LangTestSuite.java,v 1.22 2003/08/18 02:22:25 bayard Exp $\n+ * @version $Id: LangTestSuite.java,v 1.23 2003/08/19 02:32:16 bayard Exp $\n  */\n public class LangTestSuite extends TestCase {\n     \n         TestSuite suite = new TestSuite();\n         suite.setName(\"Commons-Lang Tests\");\n         suite.addTest(ArrayUtilsTest.suite());\n+        suite.addTest(BitFieldTest.suite());\n         suite.addTest(BooleanUtilsTest.suite());\n         suite.addTest(CharRangeTest.suite());\n         suite.addTest(CharSetTest.suite());\n         suite.addTest(StringEscapeUtilsTest.suite());\n         suite.addTest(SystemUtilsTest.suite());\n         suite.addTest(UnhandledExceptionTest.suite());\n+        suite.addTest(ValidateTest.suite());\n         suite.addTest(WordUtilsTest.suite());\n         return suite;\n     }\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/ValidateTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+/**\n+ * Unit tests {@link org.apache.commons.lang.util.Validate}.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: ValidateTest.java,v 1.3 2003/08/19 02:32:16 bayard Exp $\n+ */\n+public class ValidateTest extends TestCase {\n+\n+    public ValidateTest(String name) {\n+        super(name);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+    \tTestSuite suite = new TestSuite(ValidateTest.class);\n+    \tsuite.setName(\"Validate Tests\");\n+        return suite;\n+    }\n+\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsTrue1() {\n+        Validate.isTrue(true);\n+        try {\n+            Validate.isTrue(false);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated expression is false\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsTrue2() {\n+        Validate.isTrue(true, \"MSG\");\n+        try {\n+            Validate.isTrue(false, \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsTrue3() {\n+        Validate.isTrue(true, \"MSG\", new Integer(6));\n+        try {\n+            Validate.isTrue(false, \"MSG\", new Integer(6));\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG6\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsTrue4() {\n+        Validate.isTrue(true, \"MSG\", 7);\n+        try {\n+            Validate.isTrue(false, \"MSG\", 7);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG7\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsTrue5() {\n+        Validate.isTrue(true, \"MSG\", 7.4d);\n+        try {\n+            Validate.isTrue(false, \"MSG\", 7.4d);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG7.4\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotNull1() {\n+        Validate.notNull(new Object());\n+        try {\n+            Validate.notNull(null);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated object is null\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotNull2() {\n+        Validate.notNull(new Object(), \"MSG\");\n+        try {\n+            Validate.notNull(null, \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotEmptyArray1() {\n+        Validate.notEmpty(new Object[] {null});\n+        try {\n+            Validate.notEmpty((Object[]) null);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated array is empty\", ex.getMessage());\n+        }\n+        try {\n+            Validate.notEmpty(new Object[0]);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated array is empty\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotEmptyArray2() {\n+        Validate.notEmpty(new Object[] {null}, \"MSG\");\n+        try {\n+            Validate.notEmpty((Object[]) null, \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+        try {\n+            Validate.notEmpty(new Object[0], \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotEmptyCollection1() {\n+        Collection coll = new ArrayList();\n+        try {\n+            Validate.notEmpty((Collection) null);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated collection is empty\", ex.getMessage());\n+        }\n+        try {\n+            Validate.notEmpty(coll);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated collection is empty\", ex.getMessage());\n+        }\n+        coll.add(new Integer(8));\n+        Validate.notEmpty(coll);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotEmptyCollection2() {\n+        Collection coll = new ArrayList();\n+        try {\n+            Validate.notEmpty((Collection) null, \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+        try {\n+            Validate.notEmpty(coll, \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+        coll.add(new Integer(8));\n+        Validate.notEmpty(coll, \"MSG\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotEmptyMap1() {\n+        Map map = new HashMap();\n+        try {\n+            Validate.notEmpty((Map) null);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated map is empty\", ex.getMessage());\n+        }\n+        try {\n+            Validate.notEmpty(map);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated map is empty\", ex.getMessage());\n+        }\n+        map.put(\"ll\", new Integer(8));\n+        Validate.notEmpty(map);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotEmptyMap2() {\n+        Map map = new HashMap();\n+        try {\n+            Validate.notEmpty((Map) null, \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+        try {\n+            Validate.notEmpty(map, \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+        map.put(\"ll\", new Integer(8));\n+        Validate.notEmpty(map, \"MSG\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotEmptyString1() {\n+        Validate.notEmpty(\"hjl\");\n+        try {\n+            Validate.notEmpty((String) null);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated string is empty\", ex.getMessage());\n+        }\n+        try {\n+            Validate.notEmpty(\"\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated string is empty\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotEmptyString2() {\n+        Validate.notEmpty(\"a\", \"MSG\");\n+        try {\n+            Validate.notEmpty((String) null, \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+        try {\n+            Validate.notEmpty(\"\", \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNoNullElementsArray1() {\n+        String[] array = new String[] {\"a\", \"b\"};\n+        Validate.noNullElements(array);\n+        try {\n+            Validate.noNullElements((Object[]) null);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated object is null\", ex.getMessage());\n+        }\n+        array[1] = null;\n+        try {\n+            Validate.noNullElements(array);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated array contains null element at index: 1\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNoNullElementsArray2() {\n+        String[] array = new String[] {\"a\", \"b\"};\n+        Validate.noNullElements(array, \"MSG\");\n+        try {\n+            Validate.noNullElements((Object[]) null, \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated object is null\", ex.getMessage());\n+        }\n+        array[1] = null;\n+        try {\n+            Validate.noNullElements(array, \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNoNullElementsCollection1() {\n+        List coll = new ArrayList();\n+        coll.add(\"a\");\n+        coll.add(\"b\");\n+        Validate.noNullElements(coll);\n+        try {\n+            Validate.noNullElements((Collection) null);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated object is null\", ex.getMessage());\n+        }\n+        coll.set(1, null);\n+        try {\n+            Validate.noNullElements(coll);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated collection contains null element at index: 1\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNoNullElementsCollection2() {\n+        List coll = new ArrayList();\n+        coll.add(\"a\");\n+        coll.add(\"b\");\n+        Validate.noNullElements(coll, \"MSG\");\n+        try {\n+            Validate.noNullElements((Collection) null, \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated object is null\", ex.getMessage());\n+        }\n+        coll.set(1, null);\n+        try {\n+            Validate.noNullElements(coll, \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+}\n--- a/src/test/org/apache/commons/lang/util/UtilTestSuite.java\n+++ b/src/test/org/apache/commons/lang/util/UtilTestSuite.java\n  *\n  * @author <a href=\"mailto:bayard@apache.org\">Henri Yandell</a>\n  * @author Stephen Colebourne\n- * @version $Id: UtilTestSuite.java,v 1.4 2003/08/18 02:22:28 bayard Exp $\n+ * @version $Id: UtilTestSuite.java,v 1.5 2003/08/19 02:32:16 bayard Exp $\n  */\n public class UtilTestSuite extends TestCase {\n     \n     public static Test suite() {\n         TestSuite suite = new TestSuite();\n         suite.setName(\"Commons-Lang-Util Tests\");\n-        suite.addTest(BitFieldTest.suite());\n         suite.addTest(IdentifierUtilsTest.suite());\n-        suite.addTest(ValidateTest.suite());\n         return suite;\n     }\n }", "timestamp": 1061260336, "metainfo": ""}