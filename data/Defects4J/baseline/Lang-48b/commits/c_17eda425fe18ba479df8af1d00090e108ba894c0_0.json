{"sha": "17eda425fe18ba479df8af1d00090e108ba894c0", "log": "Fixes http://issues.apache.org/bugzilla/show_bug.cgi?id=33737. [lang] ExceptionUtils.addCauseMethodName(String) does not check for duplicates. Fix adds:  ExceptionUtils.removeCauseMethodName(String)  ExceptionUtils.isCauseMethodName(String)  ", "commit": "\n--- a/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n+++ b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Pete Gieser\n  * @since 1.0\n- * @version $Id: ExceptionUtils.java,v 1.43 2004/10/21 01:18:33 ggregory Exp $\n+ * @version $Id$\n  */\n public class ExceptionUtils {\n     \n      * @since 2.0\n      */\n     public static void addCauseMethodName(String methodName) {\n+        if (StringUtils.isNotEmpty(methodName) && !isCauseMethodName(methodName)) {            \n+            List list = getCauseMethodNameList();\n+            if (list.add(methodName)) {\n+                CAUSE_METHOD_NAMES = toArray(list);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * <p>Removes from the list of method names used in the search for <code>Throwable</code>\n+     * objects.</p>\n+     * \n+     * @param methodName  the methodName to remove from the list, <code>null</code>\n+     *  and empty strings are ignored\n+     * @since 2.1\n+     */\n+    public static void removeCauseMethodName(String methodName) {\n         if (StringUtils.isNotEmpty(methodName)) {\n-            List list = new ArrayList(Arrays.asList(CAUSE_METHOD_NAMES));\n-            list.add(methodName);\n-            CAUSE_METHOD_NAMES = (String[]) list.toArray(new String[list.size()]);\n-        }\n+            List list = getCauseMethodNameList();\n+            if (list.remove(methodName)) {\n+                CAUSE_METHOD_NAMES = toArray(list);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Returns the given list as a <code>String[]</code>.\n+     * @param list a list to transform.\n+     * @return the given list as a <code>String[]</code>.\n+     */\n+    private static String[] toArray(List list) {\n+        return (String[]) list.toArray(new String[list.size()]);\n+    }\n+\n+    /**\n+     * Returns {@link #CAUSE_METHOD_NAMES} as a List.\n+     * @return {@link #CAUSE_METHOD_NAMES} as a List.\n+     */\n+    private static ArrayList getCauseMethodNameList() {\n+        return new ArrayList(Arrays.asList(CAUSE_METHOD_NAMES));\n+    }\n+\n+    /**\n+     * <p>Tests if the list of method names used in the search for <code>Throwable</code>\n+     * objects include the given name.</p>\n+     * \n+     * @param methodName  the methodName to search in the list.\n+     * @return if the list of method names used in the search for <code>Throwable</code>\n+     *  objects include the given name.\n+     * @since 2.1\n+     */\n+    public static boolean isCauseMethodName(String methodName) {\n+        return ArrayUtils.indexOf(CAUSE_METHOD_NAMES, methodName) >= 0;\n     }\n \n     /**\n         while (frames.hasMoreTokens()) {\n             list.add(frames.nextToken());\n         }\n-        return (String[]) list.toArray(new String[list.size()]);\n+        return toArray(list);\n     }\n \n     /**", "timestamp": 1109277773, "metainfo": ""}