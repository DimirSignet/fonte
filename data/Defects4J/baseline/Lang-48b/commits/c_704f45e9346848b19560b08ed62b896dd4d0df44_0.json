{"sha": "704f45e9346848b19560b08ed62b896dd4d0df44", "log": "Update Javadoc and tests bug 21750, from Phil Steitz   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  *  <li>empty - a zero-length string (<code>\"\"</code>)\n  *  <li>space - the space character (<code>' '</code>)(char 32)\n  *  <li>whitespace - the characters defined by {@link Character#isWhitespace(char)}\n- *  <li>trim - the characters &lt;= 32 as in {@link String#trim(String)}\n+ *  <li>trim - the characters &lt;= 32 as in {@link String#trim()}\n  * </ul>\n  * \n  * <p><code>StringUtils</code> handles <code>null</code> input Strings quietly.\n  * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n  * @author Arun Mammen Thomas\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n+ * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.74 2003/07/20 15:41:52 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.75 2003/07/20 23:57:26 scolebourne Exp $\n  */\n public class StringUtils {\n     // Performance testing notes (JDK 1.4, Jul03, scolebourne)\n     //-----------------------------------------------------------------------\n \n     /**\n-     * <p>Checks if a String is empty (\"\") or null.\n-     * <code>null</code> returns <code>false</code></p>\n+     * <p>Checks if a String is empty (\"\") or null.</p>\n      * \n      * <pre>\n      * StringUtils.isEmpty(null)      = true\n     }\n \n     /**\n-     * <p>Checks if a String is not empty (\"\") and not null.</p>\n+     * <p>Checks if a String is not empty (\"\"), not null and not whitespace only.</p>\n      * \n      * <pre>\n      * StringUtils.isNotBlank(null)      = false\n      * StringUtils.stripAll([\"abc  \", null])  = [\"abc\", null]\n      * </pre>\n      * \n-     * @param str  the array to remove whitespace from, may be null\n+     * @param strs  the array to remove whitespace from, may be null\n      * @return the stripped Strings, <code>null</code> if null array input\n      */\n     public static String[] stripAll(String[] strs) {\n      * StringUtils.stripAll([\"yabcz\", null], \"yz\")  = [\"abc\", null]\n      * </pre>\n      * \n-     * @param str  the array to remove characters from, may be null\n+     * @param strs  the array to remove characters from, may be null\n      * @param stripChars  the characters to remove, null treated as whitespace\n      * @return the stripped Strings, <code>null</code> if null array input\n      */\n     \n     /**\n      * <p>Finds the first index within a String, handling <code>null</code>.\n-     * This method uses {@link String#indexOf(int)}</p>\n-     *\n-     * <p>A <code>null</code> String will return <code>-1</code>.</p>\n-     * \n-     * <pre>\n-     * StringUtils.indexOf(null, ' ')       = -1\n-     * StringUtils.indexOf(\"\", ' ')         = -1\n+     * This method uses {@link String#indexOf(int)}.</p>\n+     *\n+     * <p>A <code>null</code> or empty (\"\") String will return <code>-1</code>.</p>\n+     * \n+     * <pre>\n+     * StringUtils.indexOf(null, *)         = -1\n+     * StringUtils.indexOf(\"\", *)           = -1\n      * StringUtils.indexOf(\"aabaabaa\", 'a') = 0\n      * StringUtils.indexOf(\"aabaabaa\", 'b') = 2\n      * </pre>\n     /**\n      * <p>Finds the first index within a String from a start position,\n      * handling <code>null</code>.\n-     * This method uses {@link String#indexOf(int, int)}</p>\n-     *\n-     * <p>A <code>null</code> String will return <code>-1</code>.\n+     * This method uses {@link String#indexOf(int, int)}.</p>\n+     *\n+     * <p>A <code>null</code> or empty (\"\") String will return <code>-1</code>.\n      * A negative start position is treated as zero.\n      * A start position greater than the string length returns <code>-1</code>.</p>\n      * \n      * <pre>\n-     * StringUtils.indexOf(null, ' ', 0)        = -1\n-     * StringUtils.indexOf(null, ' ', -1)       = -1\n-     * StringUtils.indexOf(\"\", ' ', 0)          = -1\n-     * StringUtils.indexOf(\"\", ' ', -1)         = -1\n+     * StringUtils.indexOf(null, *, *)          = -1\n+     * StringUtils.indexOf(\"\", *, *)            = -1\n      * StringUtils.indexOf(\"aabaabaa\", 'b', 0)  = 2\n      * StringUtils.indexOf(\"aabaabaa\", 'b', 3)  = 5\n      * StringUtils.indexOf(\"aabaabaa\", 'b', 9)  = -1\n     \n     /**\n      * <p>Finds the first index within a String, handling <code>null</code>.\n-     * This method uses {@link String#indexOf(String)}</p>\n+     * This method uses {@link String#indexOf(String)}.</p>\n      *\n      * <p>A <code>null</code> String will return <code>-1</code>.</p>\n      * \n      * <pre>\n-     * StringUtils.indexOf(null, null)       = -1\n-     * StringUtils.indexOf(\"\", null)         = -1\n+     * StringUtils.indexOf(null, *)          = -1\n+     * StringUtils.indexOf(*, null)          = -1\n      * StringUtils.indexOf(\"\", \"\")           = 0\n      * StringUtils.indexOf(\"aabaabaa\", \"a\")  = 0\n      * StringUtils.indexOf(\"aabaabaa\", \"b\")  = 2\n      * StringUtils.indexOf(\"aabaabaa\", \"ab\") = 1\n+     * StringUtils.indexOf(\"aabaabaa\", \"\")   = 0\n      * </pre>\n      * \n      * @param str  the String to check, may be null\n     \n     /**\n      * <p>Finds the first index within a String, handling <code>null</code>.\n-     * This method uses {@link String#indexOf(String, int)}</p>\n+     * This method uses {@link String#indexOf(String, int)}.</p>\n      *\n      * <p>A <code>null</code> String will return <code>-1</code>.\n      * A negative start position is treated as zero.\n      * an empty search String.</p>\n      * \n      * <pre>\n-     * StringUtils.indexOf(null, null, 0)       = -1\n-     * StringUtils.indexOf(null, null, -1)      = -1\n-     * StringUtils.indexOf(\"\", null, 0)         = -1\n-     * StringUtils.indexOf(\"\", null, -1)        = -1\n+     * StringUtils.indexOf(null, *, *)          = -1\n+     * StringUtils.indexOf(*, null, *)          = -1\n      * StringUtils.indexOf(\"\", \"\", 0)           = 0\n      * StringUtils.indexOf(\"aabaabaa\", \"a\", 0)  = 0\n      * StringUtils.indexOf(\"aabaabaa\", \"b\", 0)  = 2\n      * StringUtils.indexOf(\"aabaabaa\", \"b\", 3)  = 5\n      * StringUtils.indexOf(\"aabaabaa\", \"b\", 9)  = -1\n      * StringUtils.indexOf(\"aabaabaa\", \"b\", -1) = 2\n+     * StringUtils.indexOf(\"aabaabaa\", \"\", 2)   = 2\n      * </pre>\n      * \n      * @param str  the String to check, may be null\n     \n     /**\n      * <p>Finds the last index within a String, handling <code>null</code>.\n-     * This method uses {@link String#indexOf(int)}</p>\n-     *\n-     * <p>A <code>null</code> String will return <code>-1</code>.</p>\n-     * \n-     * <pre>\n-     * StringUtils.lastIndexOf(null, ' ')       = -1\n-     * StringUtils.lastIndexOf(\"\", ' ')         = -1\n+     * This method uses {@link String#lastIndexOf(int)}.</p>\n+     *\n+     * <p>A <code>null</code> or empty (\"\") String will return <code>-1</code>.</p>\n+     * \n+     * <pre>\n+     * StringUtils.lastIndexOf(null, *)         = -1\n+     * StringUtils.lastIndexOf(\"\", *)           = -1\n      * StringUtils.lastIndexOf(\"aabaabaa\", 'a') = 7\n      * StringUtils.lastIndexOf(\"aabaabaa\", 'b') = 5\n      * </pre>\n     /**\n      * <p>Finds the last index within a String from a start position,\n      * handling <code>null</code>.\n-     * This method uses {@link String#indexOf(int, int)}</p>\n-     *\n-     * <p>A <code>null</code> String will return <code>-1</code>.\n-     * A negative  or zero start position returns <code>-1</code>.\n+     * This method uses {@link String#lastIndexOf(int, int)}.</p>\n+     *\n+     * <p>A <code>null</code> or empty (\"\") String will return <code>-1</code>.\n+     * A negative start position returns <code>-1</code>.\n      * A start position greater than the string length searches the whole string.</p>\n      * \n      * <pre>\n-     * StringUtils.lastIndexOf(null, ' ', 0)        = -1\n-     * StringUtils.lastIndexOf(null, ' ', -1)       = -1\n-     * StringUtils.lastIndexOf(\"\", ' ', 0)          = -1\n-     * StringUtils.lastIndexOf(\"\", ' ', -1)         = -1\n+     * StringUtils.lastIndexOf(null, *, *)          = -1\n+     * StringUtils.lastIndexOf(\"\", *,  *)           = -1\n      * StringUtils.lastIndexOf(\"aabaabaa\", 'b', 8)  = 5\n      * StringUtils.lastIndexOf(\"aabaabaa\", 'b', 4)  = 2\n      * StringUtils.lastIndexOf(\"aabaabaa\", 'b', 0)  = -1\n      * StringUtils.lastIndexOf(\"aabaabaa\", 'b', 9)  = 5\n      * StringUtils.lastIndexOf(\"aabaabaa\", 'b', -1) = -1\n+     * StringUtils.lastIndexOf(\"aabaabaa\", 'a', 0)  = 0\n      * </pre>\n      * \n      * @param str  the String to check, may be null\n     \n     /**\n      * <p>Finds the last index within a String, handling <code>null</code>.\n-     * This method uses {@link String#indexOf(String)}</p>\n+     * This method uses {@link String#lastIndexOf(String)}.</p>\n      *\n      * <p>A <code>null</code> String will return <code>-1</code>.</p>\n      * \n      * <pre>\n-     * StringUtils.lastIndexOf(null, null)       = -1\n-     * StringUtils.lastIndexOf(\"\", null)         = -1\n+     * StringUtils.lastIndexOf(null, *)          = -1\n+     * StringUtils.lastIndexOf(*, null)          = -1\n      * StringUtils.lastIndexOf(\"\", \"\")           = 0\n      * StringUtils.lastIndexOf(\"aabaabaa\", \"a\")  = 0\n      * StringUtils.lastIndexOf(\"aabaabaa\", \"b\")  = 2\n      * StringUtils.lastIndexOf(\"aabaabaa\", \"ab\") = 1\n+     * StringUtils.lastIndexOf(\"aabaabaa\", \"\")   = 8\n      * </pre>\n      * \n      * @param str  the String to check, may be null\n     \n     /**\n      * <p>Finds the first index within a String, handling <code>null</code>.\n-     * This method uses {@link String#indexOf(String, int)}</p>\n+     * This method uses {@link String#lastIndexOf(String, int)}.</p>\n      *\n      * <p>A <code>null</code> String will return <code>-1</code>.\n      * A negative start position returns <code>-1</code>.\n-     * A zero start position only matches an empty String (\"\").\n-     * An empty (\"\") search String always matches unless start position negative.\n+     * An empty (\"\") search String always matches unless the start position is negative.\n      * A start position greater than the string length searches the whole string.</p>\n      * \n      * <pre>\n-     * StringUtils.lastIndexOf(null, null, 0)       = -1\n-     * StringUtils.lastIndexOf(null, null, -1)      = -1\n-     * StringUtils.lastIndexOf(\"\", null, 0)         = -1\n-     * StringUtils.lastIndexOf(\"\", null, -1)        = -1\n+     * StringUtils.lastIndexOf(null, *, *)          = -1\n+     * StringUtils.lastIndexOf(*, null, *)          = -1\n      * StringUtils.lastIndexOf(\"aabaabaa\", \"a\", 8)  = 7\n      * StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 8)  = 5\n      * StringUtils.lastIndexOf(\"aabaabaa\", \"ab\", 8) = 4\n      * StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 9)  = 5\n      * StringUtils.lastIndexOf(\"aabaabaa\", \"b\", -1) = -1\n+     * StringUtils.lastIndexOf(\"aabaabaa\", \"a\", 0)  = 0\n+     * StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 0)  = -1\n      * </pre>\n      * \n      * @param str  the String to check, may be null\n     \n     /**\n      * <p>Checks if String contains a search character, handling <code>null</code>.\n-     * This method uses {@link String#indexOf(int)}</p>\n-     *\n-     * <p>A <code>null</code> String will return <code>-1</code>.</p>\n-     * \n-     * <pre>\n-     * StringUtils.contains(null, ' ')  = false\n-     * StringUtils.contains(\"\", ' ')    = false\n+     * This method uses {@link String#indexOf(int)}.</p>\n+     *\n+     * <p>A <code>null</code> or empty (\"\") String will return <code>false</code>.</p>\n+     * \n+     * <pre>\n+     * StringUtils.contains(null, *)    = false\n+     * StringUtils.contains(\"\", *)      = false\n      * StringUtils.contains(\"abc\", 'a') = true\n      * StringUtils.contains(\"abc\", 'z') = false\n      * </pre>\n     \n     /**\n      * <p>Find the first index within a String, handling <code>null</code>.\n-     * This method uses {@link String#indexOf(String)}</p>\n-     *\n-     * <p>A <code>null</code> String will return <code>-1</code>.</p>\n-     * \n-     * <pre>\n-     * StringUtils.contains(null, null)  = false\n-     * StringUtils.contains(\"\", null)    = false\n+     * This method uses {@link String#indexOf(int)}.</p>\n+     *\n+     * <p>A <code>null</code> String will return <code>false</code>.</p>\n+     * \n+     * <pre>\n+     * StringUtils.contains(null, *)     = false\n+     * StringUtils.contains(*, null)     = false\n      * StringUtils.contains(\"\", \"\")      = true\n      * StringUtils.contains(\"abc\", \"\")   = true\n      * StringUtils.contains(\"abc\", \"a\")  = true\n      * <p>Find the first index of any of a set of potential substrings.</p>\n      *\n      * <p>A <code>null</code> String will return <code>-1</code>.\n-     * A <code>null</code> search array will return <code>-1</code>.\n-     * A <code>null</code> search array entry will be ignored.</p>\n-     * \n-     * <pre>\n-     * StringUtils.indexOfAny(null, null)                = -1\n-     * StringUtils.indexOfAny(null, [\"ab\",\"cd\"])         = -1\n-     * StringUtils.indexOfAny(\"\", null)                  = -1\n-     * StringUtils.indexOfAny(\"\", [\"ab\",\"cd\"])           = -1\n-     * StringUtils.indexOfAny(\"zzabyycdxx\", null)        = -1\n-     * StringUtils.indexOfAny(\"zzabyycdxx\", [])          = -1\n-     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"ab\",\"cd\"]) = 2\n-     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"cd\",\"ab\"]) = 2\n-     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"mn\",\"op\"]) = -1\n+     * A <code>null</code> or zero length search array will return <code>-1</code>.\n+     * A <code>null</code> search array entry will be ignored, but a search\n+     * array containing \"\" will return <code>0</code> if <code>str</code> is not\n+     * null. This method uses {@link String#indexOf(String)}.</p>\n+     * \n+     * <pre>\n+     * StringUtils.indexOfAny(null, *)                     = -1\n+     * StringUtils.indexOfAny(*, null)                     = -1\n+     * StringUtils.indexOfAny(*, [])                       = -1\n+     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"ab\",\"cd\"])   = 2\n+     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"cd\",\"ab\"])   = 2\n+     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"mn\",\"op\"])   = -1\n+     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"zab\",\"aby\"]) = 1\n+     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"\"])          = 0\n+     * StringUtils.indexOfAny(\"\", [\"\"])                    = 0\n+     * StringUtils.indexOfAny(\"\", [\"a\"])                   = -1\n      * </pre>\n      * \n      * @param str  the String to check, may be null\n      *\n      * <p>A <code>null</code> String will return <code>-1</code>.\n      * A <code>null</code> search array will return <code>-1</code>.\n-     * A <code>null</code> search array entry will be ignored.</p>\n-     * \n-     * <pre>\n-     * StringUtils.lastIndexOfAny(null, null)                = -1\n-     * StringUtils.lastIndexOfAny(null, [\"ab\",\"cd\"])         = -1\n-     * StringUtils.lastIndexOfAny(\"\", null)                  = -1\n-     * StringUtils.lastIndexOfAny(\"\", [\"ab\",\"cd\"])           = -1\n-     * StringUtils.lastIndexOfAny(\"zzabyycdxx\", null)        = -1\n-     * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [])          = -1\n+     * A <code>null</code> or zero length search array entry will be ignored,\n+     * but a search array containing \"\" will return the length of <code>str</code> \n+     * if <code>str</code> is not null. This method uses {@link String#indexOf(String)}</p>\n+     * \n+     * <pre>\n+     * StringUtils.lastIndexOfAny(null, *)                   = -1\n+     * StringUtils.lastIndexOfAny(*, null)                   = -1\n+     * StringUtils.lastIndexOfAny(*, [])                     = -1\n+     * StringUtils.lastIndexOfAny(*, [null])                 = -1\n      * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"ab\",\"cd\"]) = 6\n      * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"cd\",\"ab\"]) = 6\n      * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"mn\",\"op\"]) = -1\n+     * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"mn\",\"op\"]) = -1\n+     * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"mn\",\"\"])   = 10\n      * </pre>\n      * \n      * @param str  the String to check, may be null\n     /**\n      * <p>Search a String to find the first index of any\n      * character not in the given set of characters.</p>\n+     *\n+     * <p>A <code>null</code> String will return <code>-1</code>.\n+     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n+     * \n+     * <pre>\n+     * StringUtils.indexOfAnyBut(null, *)                     = -1\n+     * StringUtils.indexOfAnyBut(*, null)                     = -1\n+     * StringUtils.indexOfAnyBut(\"zzabyycdxx\",'za')           = 3\n+     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", '')            = 0\n+     * StringUtils.indexOfAnyBut(\"aba\", 'ab')                 = -1\n+     * </pre>\n      * \n      * @param str  the String to check, may be null\n      * @param searchChars  the chars to search for, may be null\n     /**\n      * <p>Search a String to find the first index of any\n      * character not in the given set of characters.</p>\n-     * \n+     *\n+     * <p>A <code>null</code> String will return <code>-1</code>.\n+     * A <code>null</code> search string will return <code>-1</code>.</p>\n+     * \n+     * <pre>\n+     * StringUtils.indexOfAnyBut(null, *)                     = -1\n+     * StringUtils.indexOfAnyBut(*, null)                     = -1\n+     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\")          = 3\n+     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\")            = 0\n+     * StringUtils.indexOfAnyBut(\"aba\",\"ab\")                  = -1\n+     * </pre>\n+     *  \n      * @param str  the String to check, may be null\n      * @param searchChars  the chars to search for, may be null\n      * @return the index of any of the chars, -1 if no match or null input\n     /**\n      * <p>Checks if the String contains only certain characters.</p>\n      *\n-     * <pre>\n-     * StringUtils.containsOnly(null, 'abc')   = false\n-     * StringUtils.containsOnly(\"\", null)      = false\n-     * StringUtils.containsOnly(\"\", 'abc')     = true\n-     * StringUtils.containsOnly(\"\", '')        = true\n+     * <p>A <code>null</code> String will return <code>false</code>.\n+     * A <code>null</code> valid character array will return <code>false</code>.\n+     * An empty String (\"\") always returns <code>true</code>.</p>\n+     *\n+     * <pre>\n+     * StringUtils.containsOnly(null, *)       = false\n+     * StringUtils.containsOnly(*, null)       = false\n+     * StringUtils.containsOnly(\"\", *)         = true\n      * StringUtils.containsOnly(\"ab\", '')      = false\n      * StringUtils.containsOnly(\"abab\", 'abc') = true\n      * StringUtils.containsOnly(\"ab1\", 'abc')  = false\n     /**\n      * <p>Checks if the String contains only certain characters.</p>\n      *\n-     * <pre>\n-     * StringUtils.containsOnly(null, \"abc\")   = false\n-     * StringUtils.containsOnly(\"\", null)      = false\n-     * StringUtils.containsOnly(\"\", \"abc\")     = true\n-     * StringUtils.containsOnly(\"\", \"\")        = true\n+     * <p>A <code>null</code> String will return <code>false</code>.\n+     * A <code>null</code> valid character String will return <code>false</code>.\n+     * An empty String (\"\") always returns <code>true</code>.</p>\n+     *\n+     * <pre>\n+     * StringUtils.containsOnly(null, *)       = false\n+     * StringUtils.containsOnly(*, null)       = false\n+     * StringUtils.containsOnly(\"\", *)         = true\n      * StringUtils.containsOnly(\"ab\", \"\")      = false\n      * StringUtils.containsOnly(\"abab\", \"abc\") = true\n      * StringUtils.containsOnly(\"ab1\", \"abc\")  = false\n     /**\n      * <p>Checks that the String does not contain certain characters.</p>\n      *\n-     * <pre>\n-     * StringUtils.containsOnly(null, 'xyz')   = true\n-     * StringUtils.containsOnly(\"\", null)      = true\n-     * StringUtils.containsOnly(\"\", 'xyz')     = true\n-     * StringUtils.containsOnly(\"\", '')        = true\n-     * StringUtils.containsOnly(\"ab\", '')      = true\n-     * StringUtils.containsOnly(\"abab\", 'xyz') = true\n-     * StringUtils.containsOnly(\"ab1\", 'xyz')  = true\n-     * StringUtils.containsOnly(\"abz\", 'xyz')  = false\n+     * <p>A <code>null</code> String will return <code>true</code>.\n+     * A <code>null</code> invalid character array will return <code>true</code>.\n+     * An empty String (\"\") always returns true.</p>\n+     *\n+     * <pre>\n+     * StringUtils.containsNone(null, *)       = true\n+     * StringUtils.containsNone(*, null)       = true\n+     * StringUtils.containsNone(\"\", *)         = true\n+     * StringUtils.containsNone(\"ab\", '')      = true\n+     * StringUtils.containsNone(\"abab\", 'xyz') = true\n+     * StringUtils.containsNone(\"ab1\", 'xyz')  = true\n+     * StringUtils.containsNone(\"abz\", 'xyz')  = false\n      * </pre>\n      * \n      * @param str  the String to check, may be null\n     /**\n      * <p>Checks that the String does not contain certain characters.</p>\n      *\n-     * <pre>\n-     * StringUtils.containsOnly(null, \"xyz\")   = true\n-     * StringUtils.containsOnly(\"\", null)      = true\n-     * StringUtils.containsOnly(\"\", \"xyz\")     = true\n-     * StringUtils.containsOnly(\"\", \"\")        = true\n-     * StringUtils.containsOnly(\"ab\", \"\")      = true\n-     * StringUtils.containsOnly(\"abab\", \"xyz\") = true\n-     * StringUtils.containsOnly(\"ab1\", \"xyz\")  = true\n-     * StringUtils.containsOnly(\"abz\", \"xyz\")  = false\n+     * <p>A <code>null</code> String will return <code>true</code>.\n+     * A <code>null</code> invalid character array will return <code>true</code>.\n+     * An empty String (\"\") always returns true.</p>\n+     *\n+     * <pre>\n+     * StringUtils.containsNone(null, *)       = true\n+     * StringUtils.containsNone(*, null)       = true\n+     * StringUtils.containsNone(\"\", *)         = true\n+     * StringUtils.containsNone(\"ab\", \"\")      = true\n+     * StringUtils.containsNone(\"abab\", \"xyz\") = true\n+     * StringUtils.containsNone(\"ab1\", \"xyz\")  = true\n+     * StringUtils.containsNone(\"abz\", \"xyz\")  = false\n      * </pre>\n      * \n      * @param str  the String to check, may be null\n      *\n      * <p>A negative start position can be used to start <code>n</code>\n      * characters from the end of the String.</p>\n-     * \n-     * <pre>\n-     * StringUtils.substring(null, 0)   = null\n-     * StringUtils.substring(\"\", 0)     = \"\"\n+     *\n+     * <p>A <code>null</code> String will return <code>null</code>.\n+     * An empty (\"\") String will return \"\".</p>\n+     * \n+     * <pre>\n+     * StringUtils.substring(null, *)   = null\n+     * StringUtils.substring(\"\", *)     = \"\"\n      * StringUtils.substring(\"abc\", 0)  = \"abc\"\n      * StringUtils.substring(\"abc\", 2)  = \"c\"\n      * StringUtils.substring(\"abc\", 4)  = \"\"\n      *\n      * <p>A negative start position can be used to start/end <code>n</code>\n      * characters from the end of the String.</p>\n-     * \n-     * <pre>\n-     * StringUtils.substring(null, 0, 2)    = null\n-     * StringUtils.substring(\"\", 0, 2)      = \"\"\n+     *\n+     * <p>The returned substring starts with the character in the <code>start</code>\n+     * position and ends before the <code>end</code> position. All postion counting is \n+     * zero-based -- i.e., to start at the beginning of the string use \n+     * <code>start = 0</code>. Negative start and end positions can be used to \n+     * specify offsets relative to the end of the String.</p>\n+     *\n+     * <p>If <code>start</code> is not strictly to the left of <code>end</code>, \"\"\n+     * is returned.</p>\n+     * \n+     * <pre>\n+     * StringUtils.substring(null, *, *)    = null\n+     * StringUtils.substring(\"\", * ,  *)    = \"\";\n      * StringUtils.substring(\"abc\", 0, 2)   = \"ab\"\n      * StringUtils.substring(\"abc\", 2, 0)   = \"\"\n      * StringUtils.substring(\"abc\", 2, 4)   = \"c\"\n      * StringUtils.substring(\"abc\", 4, 6)   = \"\"\n+     * StringUtils.substring(\"abc\", 2, 2)   = \"\"\n      * StringUtils.substring(\"abc\", -2, -1) = \"b\"\n      * StringUtils.substring(\"abc\", -4, 2)  = \"ab\"\n      * </pre>\n      * StringUtils.split(\"\")         = []\n      * StringUtils.split(\"abc def\")  = [\"abc\", \"def\"]\n      * StringUtils.split(\"abc  def\") = [\"abc\", \"def\"]\n+     * StringUtils.split(\" abc \")    = [\"abc\"]\n      * </pre>\n      * \n      * @param str  the String to parse, may be null\n      * <p>A <code>null</code> input String returns <code>null</code>.</p>\n      *\n      * <pre>\n-     * StringUtils.split(null, '.')     = null\n-     * StringUtils.split(\"\", '.')       = []\n-     * StringUtils.split(\"a.b.c\", '.')  = [\"a\", \"b\", \"c\"]\n-     * StringUtils.split(\"a..b.c\", '.') = [\"a\", \"b\", \"c\"]\n-     * StringUtils.split(\"a:b:c\", '.')  = [\"a:b:c\"]\n+     * StringUtils.split(null, '.')       = null\n+     * StringUtils.split(\"\", '.')         = []\n+     * StringUtils.split(\"a.b.c\", '.')    = [\"a\", \"b\", \"c\"]\n+     * StringUtils.split(\"a..b.c\", '.')   = [\"a\", \"b\", \"c\"]\n+     * StringUtils.split(\"a:b:c\", '.')    = [\"a:b:c\"]\n+     * StringUtils.split(\"a\\tb\\nc\", null) = [\"a\", \"b\", \"c\"]\n+     * StringUtils.split(\"a b c\", ' ')    = [\"a\", \"b\", \"c\"]\n      * </pre>\n      * \n      * @param str  the String to parse, may be null\n-     * @param separatorChars  the characters used as the delimiters,\n+     * @param separatorChar  the character used as the delimiter,\n      *  <code>null</code> splits on whitespace\n      * @return an array of parsed Strings, <code>null</code> if null String input\n      */\n \n     /**\n      * <p>Capitalises a String changing the first letter to title case as\n-     * per {@link Character#toTitleCase()}. No other letters are changed.</p>\n+     * per {@link Character#toTitleCase(char)}. No other letters are changed.</p>\n      * \n      * <p>A <code>null</code> input String returns <code>null</code>.</p>\n      * \n \n     /**\n      * <p>Uncapitalises a String changing the first letter to title case as\n-     * per {@link Character#toLowerCase()}. No other letters are changed.</p>\n+     * per {@link Character#toLowerCase(char)}. No other letters are changed.</p>\n      * \n      * <p>A <code>null</code> input String returns <code>null</code>.</p>\n      * \n--- a/src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n- * @version $Id: StringUtilsEqualsIndexOfTest.java,v 1.3 2003/07/19 23:29:06 scolebourne Exp $\n+ * @author Phil Steitz\n+ * @version $Id: StringUtilsEqualsIndexOfTest.java,v 1.4 2003/07/20 23:57:26 scolebourne Exp $\n  */\n public class StringUtilsEqualsIndexOfTest extends TestCase {\n     private static final String FOO = \"foo\";\n         assertEquals(0, StringUtils.indexOf(\"aabaabaa\", \"a\"));\n         assertEquals(2, StringUtils.indexOf(\"aabaabaa\", \"b\"));\n         assertEquals(1, StringUtils.indexOf(\"aabaabaa\", \"ab\"));\n+        assertEquals(0, StringUtils.indexOf(\"aabaabaa\", \"\"));\n     }\n \n     public void testIndexOf_StringInt() {\n         assertEquals(5, StringUtils.indexOf(\"aabaabaa\", \"b\", 3));\n         assertEquals(-1, StringUtils.indexOf(\"aabaabaa\", \"b\", 9));\n         assertEquals(2, StringUtils.indexOf(\"aabaabaa\", \"b\", -1));\n+        assertEquals(2,StringUtils.indexOf(\"aabaabaa\", \"\", 2)); \n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(2, StringUtils.lastIndexOf(\"aabaabaa\", 'b', 3));\n         assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", 'b', 9));\n         assertEquals(-1, StringUtils.lastIndexOf(\"aabaabaa\", 'b', -1));\n+        assertEquals(0, StringUtils.lastIndexOf(\"aabaabaa\", 'a', 0));\n     }\n \n     public void testLastIndexOf_String() {\n         assertEquals(-1, StringUtils.lastIndexOf(null, null));\n         assertEquals(-1, StringUtils.lastIndexOf(\"\", null));\n+        assertEquals(-1, StringUtils.lastIndexOf(\"\", \"a\"));\n         assertEquals(0, StringUtils.lastIndexOf(\"\", \"\"));\n+        assertEquals(8, StringUtils.lastIndexOf(\"aabaabaa\", \"\"));\n         assertEquals(7, StringUtils.lastIndexOf(\"aabaabaa\", \"a\"));\n         assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", \"b\"));\n         assertEquals(4, StringUtils.lastIndexOf(\"aabaabaa\", \"ab\"));\n         assertEquals(2, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 3));\n         assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 9));\n         assertEquals(-1, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", -1));\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void contains_char() {\n+        assertEquals(-1, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 0));\n+        assertEquals(0, StringUtils.lastIndexOf(\"aabaabaa\", \"a\", 0));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testContainsChar() {\n         assertEquals(false, StringUtils.contains(null, ' '));\n         assertEquals(false, StringUtils.contains(\"\", ' '));\n+        assertEquals(false, StringUtils.contains(\"\",null));\n+        assertEquals(false, StringUtils.contains(null,null));\n         assertEquals(true, StringUtils.contains(\"abc\", 'a'));\n         assertEquals(true, StringUtils.contains(\"abc\", 'b'));\n         assertEquals(true, StringUtils.contains(\"abc\", 'c'));\n         assertEquals(false, StringUtils.contains(\"abc\", 'z'));\n     }\n \n-    public void contains_String() {\n+    public void testContainsString() {\n         assertEquals(false, StringUtils.contains(null, null));\n         assertEquals(false, StringUtils.contains(null, \"\"));\n         assertEquals(false, StringUtils.contains(null, \"a\"));\n         assertEquals(-1, StringUtils.indexOfAny(FOOBAR, null));\n         assertEquals(2, StringUtils.indexOfAny(FOOBAR, FOOBAR_SUB_ARRAY));\n         assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[0]));\n+        assertEquals(-1, StringUtils.indexOfAny(null, new String[0]));\n+        assertEquals(-1, StringUtils.indexOfAny(\"\", new String[0]));\n         assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {\"llll\"}));\n+        assertEquals(0, StringUtils.indexOfAny(FOOBAR, new String[] {\"\"}));\n+        assertEquals(0, StringUtils.indexOfAny(\"\", new String[] {\"\"}));\n+        assertEquals(-1, StringUtils.indexOfAny(\"\", new String[] {\"a\"}));\n+        assertEquals(-1, StringUtils.indexOfAny(\"\", new String[] {null}));\n+        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {null}));\n+        assertEquals(-1, StringUtils.indexOfAny(null, new String[] {null}));\n     }\n \n     public void testLastIndexOfAny() {\n         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, null));\n         assertEquals(3, StringUtils.lastIndexOfAny(FOOBAR, FOOBAR_SUB_ARRAY));\n         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[0]));\n+        assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[0]));\n+        assertEquals(-1, StringUtils.lastIndexOfAny(\"\", new String[0]));\n         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {\"llll\"}));\n+        assertEquals(6, StringUtils.lastIndexOfAny(FOOBAR, new String[] {\"\"}));\n+        assertEquals(0, StringUtils.lastIndexOfAny(\"\", new String[] {\"\"}));\n+        assertEquals(-1, StringUtils.lastIndexOfAny(\"\", new String[] {\"a\"}));\n+        assertEquals(-1, StringUtils.lastIndexOfAny(\"\", new String[] {null}));\n+        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {null}));\n+        assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[] {null}));\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(0, StringUtils.indexOfAnyBut(str3, chars1));\n         assertEquals(1, StringUtils.indexOfAnyBut(str3, chars2));\n         assertEquals(-1, StringUtils.indexOfAnyBut(str3, chars3));\n+        assertEquals(3, StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\"));\n+        assertEquals(0, StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\"));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(\"aba\",\"ab\"));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIndexOfAnyButChar() {\n+        assertEquals(-1, StringUtils.indexOfAnyBut(null, new char[0]));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", new char[0]));\n+        assertEquals(3, StringUtils.indexOfAnyBut(\"zzabyycdxx\", new char[] {'z','a'})); \n+        assertEquals(0, StringUtils.indexOfAnyBut(\"zzabyycdxx\", new char[0]));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(\"ab\", new char[] {'a','b'}));\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/test/org/apache/commons/lang/StringUtilsSubstringTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsSubstringTest.java\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n- * @version $Id: StringUtilsSubstringTest.java,v 1.6 2003/07/20 15:29:44 scolebourne Exp $\n+ * @author Phil Steitz\n+ * @version $Id: StringUtilsSubstringTest.java,v 1.7 2003/07/20 23:57:26 scolebourne Exp $\n  */\n public class StringUtilsSubstringTest extends TestCase {\n     private static final String FOO = \"foo\";\n         assertEquals(FOO, StringUtils.substring(SENTENCE, 0, -8));\n         assertEquals(\"o\", StringUtils.substring(SENTENCE, -9, -8));\n         assertEquals(SENTENCE, StringUtils.substring(SENTENCE, 0, 80));\n-    }\n-    \n+        assertEquals(\"\", StringUtils.substring(SENTENCE, 2, 2));\n+        assertEquals(\"b\",StringUtils.substring(\"abc\", -2, -1));\n+    }\n+    \n+    public void testSubstring4() {\n+        assertEquals(\"\", StringUtils.substring(\"\",0));\n+        assertEquals(\"\", StringUtils.substring(\"\",2));\n+        assertEquals(\"\", StringUtils.substring(\"\",0,0));\n+        assertEquals(\"\", StringUtils.substring(\"\",1,2));\n+        assertEquals(\"\", StringUtils.substring(\"\",-2,-1));\n+        assertEquals(null, StringUtils.substring(null,0));\n+        assertEquals(null, StringUtils.substring(null,0,0));\n+        assertEquals(null, StringUtils.substring(null,1,2));\n+    }\n+           \n     public void testLeft() {\n         assertSame(null, StringUtils.left(null, 0));\n         assertSame(null, StringUtils.left(null, 2));\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n  * @author <a href=\"mailto:fredrik@westermarck.com>Fredrik Westermarck</a>\n  * @author Holger Krauth\n  * @author <a href=\"hps@intermeta.de\">Henning P. Schmiedehausen</a>\n- * @version $Id: StringUtilsTest.java,v 1.35 2003/07/20 15:49:58 scolebourne Exp $\n+ * @author Phil Steitz\n+ * @version $Id: StringUtilsTest.java,v 1.36 2003/07/20 23:57:26 scolebourne Exp $\n  */\n public class StringUtilsTest extends TestCase {\n     \n         res = StringUtils.split(str, '.');\n         assertEquals(1, res.length);\n         assertEquals(\"a\", res[0]);\n+        \n+        str = \"a b c\";\n+        res = StringUtils.split(str,' ');\n+        assertEquals(3, res.length);\n+        assertEquals(\"a\", res[0]);\n+        assertEquals(\"b\", res[1]);\n+        assertEquals(\"c\", res[2]);\n     }\n     \n     public void testSplit_StringString_StringStringInt() {", "timestamp": 1058745446, "metainfo": ""}