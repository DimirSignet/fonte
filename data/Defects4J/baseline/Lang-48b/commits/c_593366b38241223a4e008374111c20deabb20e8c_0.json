{"sha": "593366b38241223a4e008374111c20deabb20e8c", "log": "Create 'public static final' constants for the package separator and inner class separator characters/Strings.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ClassUtils.java\n+++ b/src/java/org/apache/commons/lang/ClassUtils.java\n import java.util.Iterator;\n import java.util.List;\n /**\n- * <p><code>ClassUtils</code> contains utility methods for working for\n- * classes without using reflection.</p>\n+ * <p>Provides utility methods for working for classes without using reflection.</p>\n  *\n  * @author Stephen Colebourne\n+ * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 2.0\n- * @version $Id: ClassUtils.java,v 1.10 2003/04/09 00:07:50 ggregory Exp $\n+ * @version $Id: ClassUtils.java,v 1.11 2003/05/28 16:20:31 ggregory Exp $\n  */\n public class ClassUtils {\n \n+    /**\n+     * The package separator character: <code>.</code>\n+     */\n+    public static final char PACKAGE_SEPARATOR_CHAR = '.';\n+    \n+    /**\n+     * The package separator String: <code>.</code>\n+     */\n+    public static final String PACKAGE_SEPARATOR = String.valueOf(PACKAGE_SEPARATOR_CHAR);\n+    \n+    /**\n+     * The inner class separator character: <code>$</code>\n+     */\n+    public static final char INNER_CLASS_SEPARATOR_CHAR = '$';\n+    \n+    /**\n+     * The inner class separator String: <code>$</code>\n+     */\n+    public static final String INNER_CLASS_SEPARATOR = String.valueOf(INNER_CLASS_SEPARATOR_CHAR);\n+    \n     /**\n      * <p>ClassUtils instances should NOT be constructed in standard programming.\n      * Instead, the class should be used as\n         char[] chars = className.toCharArray();\n         int lastDot = 0;\n         for (int i = 0; i < chars.length; i++) {\n-            if (chars[i] == '.') {\n+            if (chars[i] == PACKAGE_SEPARATOR_CHAR) {\n                 lastDot = i + 1;\n-            } else if (chars[i] == '$') {  // handle inner classes\n-                chars[i] = '.';\n+            } else if (chars[i] == INNER_CLASS_SEPARATOR_CHAR) {  // handle inner classes\n+                chars[i] = PACKAGE_SEPARATOR_CHAR;\n             }\n         }\n         return new String(chars, lastDot, chars.length - lastDot);\n         if (StringUtils.isEmpty(className)) {\n             throw new IllegalArgumentException(\"The class name must not be empty\");\n         }\n-        int i = className.lastIndexOf('.');\n+        int i = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\n         if (i == -1) {\n             return \"\";\n         }\n         if (cls == null) {\n             throw new IllegalArgumentException(\"The class must not be null\");\n         }\n-        return (cls.getName().indexOf('$') >= 0);\n+        return (cls.getName().indexOf(INNER_CLASS_SEPARATOR_CHAR) >= 0);\n     }\n     \n }", "timestamp": 1054138831, "metainfo": ""}