{"sha": "1e909e651892ec5b8a5be85effd22b29ae262855", "log": "refactored to share funcrionality from AbstractNestableTestCase   ", "commit": "\n--- a/src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java\n+++ b/src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java\n  * Tests the org.apache.commons.lang.exception.NestableException class.\n  *\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n- * @version $Id: NestableExceptionTestCase.java,v 1.3 2002/08/25 13:21:24 stevencaswell Exp $\n+ * @version $Id: NestableExceptionTestCase.java,v 1.4 2002/09/11 18:16:53 stevencaswell Exp $\n  */\n-public class NestableExceptionTestCase extends junit.framework.TestCase\n+public class NestableExceptionTestCase extends AbstractNestableTestCase\n {\n     \n     /**\n-     * Construct a new instance of NestableExceptionTestCase with the specified name\n+     * Construct a new instance of\n+     * <code>NestableExceptionTestCase</code>.\n+     *\n+     * @param name test case name\n      */\n     public NestableExceptionTestCase(String name)\n     {\n     {\n     }\n     \n-    /**\n-     * Test the implementation\n-     */\n-    public void testGetCause()\n-    {\n-        NestableException ne1 = new NestableException();\n-        assertNull(\"nestable exception() cause is null\", ne1.getCause()); \n-        \n-        NestableException ne2 = new NestableException(\"ne2\");\n-        assertNull(\"nestable exception(\\\"ne2\\\") cause is null\", ne2.getCause());\n-        \n-        NestableException ne3 = new NestableException(new Exception(\"ne3 exception\"));\n-        assertNotNull(\"nestable exception(new Exception(\\\"ne3 exception\\\") cause is not null\",\n-            ne3.getCause()); \n-        assertTrue(\"nestable exception(new Exception(\\\"ne3 exception\\\") cause message == ne3 exception\",\n-            ne3.getCause().getMessage().equals(\"ne3 exception\")); \n-        \n-        NestableException ne4 = new NestableException(\"ne4\", new Exception(\"ne4 exception\"));\n-        assertNotNull(\"nestable exception(\\\"ne4\\\", new Exception(\\\"ne4 exception\\\") cause is not null\", \n-            ne4.getCause()); \n-        \n-        NestableException ne5 = new NestableException(\"ne5\", null);\n-        assertNull(\"nestable exception(\\\"ne5\\\", null) cause is null\", \n-            ne5.getCause()); \n-        \n-        NestableException ne6 = new NestableException(null, new Exception(\"ne6 exception\"));\n-        assertNotNull(\"nestable exception(null, new Exception(\\\"ne6 exception\\\") cause is not null\", \n-            ne6.getCause()); \n-    }\n-\n-    public void testGetThrowableCount()\n-    {\n-        NestableException ne1 = new NestableException();\n-        assertEquals(\"ne1 throwable count\", 1, ne1.getThrowableCount());\n-\n-        NestableException ne2 = new NestableException(\"ne2\");\n-        assertEquals(\"ne2 throwable count\", 1, ne2.getThrowableCount());\n-        \n-        NestableException ne3 = new NestableException(new Exception(\"ne3 exception\"));\n-        assertEquals(\"ne3 throwable count\", 2, ne3.getThrowableCount());\n-        \n-        NestableException ne4 = new NestableException(\"ne4\", new Exception(\"ne4 exception\"));\n-        assertEquals(\"ne4 throwable count\", 2, ne4.getThrowableCount());\n-        \n-        NestableException ne5 = new NestableException(\"ne5\", null);\n-        assertEquals(\"ne 5 throwable count\", 1, ne5.getThrowableCount());\n-        \n-        NestableException ne6 = new NestableException(null, new Exception(\"ne6 exception\"));\n-        assertEquals(\"ne 6 throwable count\", 2, ne6.getThrowableCount());\n-        \n-        NestableException ne7 = new NestableException(\"ne7o\", new NestableException(\"ne7i\", new Exception(\"ne7 exception\")));\n-        assertEquals(\"ne 7 throwable count\", 3, ne7.getThrowableCount());\n-\n-        NestableException ne8 = new NestableException(\"level 1\", new NestableException(\"level 2\", new NestableException(new NestableException(\"level 4\", new Exception(\"level 5\")))));\n-        assertEquals(\"ne 8 throwable count\", 5, ne8.getThrowableCount());\n-    }\n-    \n-\n-    public void testGetMessage()\n-    {\n-        NestableException ne1 = new NestableException();\n-        assertNull(\"nestable exception() message is null\", ne1.getMessage()); \n-\n-        NestableException ne2 = new NestableException(\"ne2\");\n-        assertNotNull(\"nestable exception(\\\"ne2\\\") message is not null\", ne2.getMessage());\n-        assertTrue(\"nestable exception(\\\"ne2\\\") message == ne2\", ne2.getMessage().equals(\"ne2\"));\n-        \n-        NestableException ne3 = new NestableException(new Exception(\"ne3 exception\"));\n-        assertNotNull(\"nestable exception(new Exception(\\\"ne3 exception\\\") message is not null\",\n-            ne3.getMessage()); \n-        assertTrue(\"nestable exception(new Exception(\\\"ne3 exception\\\") message == cause message\",\n-            ne3.getMessage().equals(ne3.getCause().getMessage())); \n-        \n-        NestableException ne4 = new NestableException(\"ne4\", new Exception(\"ne4 exception\"));\n-        assertNotNull(\"nestable exception(\\\"ne4\\\", new Exception(\\\"ne4 exception\\\") message is not null\", \n-            ne4.getMessage()); \n-        assertTrue(\"nestable exception(\\\"ne4\\\", new Exception(\\\"ne4 exception\\\") message == ne4: ne4 exception\", \n-            ne4.getMessage().equals(\"ne4: ne4 exception\")); \n-        \n-        NestableException ne5 = new NestableException(\"ne5\", null);\n-        assertNotNull(\"nestable exception(\\\"ne5\\\", new Exception(\\\"ne5 exception\\\") message is not null\", \n-            ne5.getMessage()); \n-        assertTrue(\"nestable exception(\\\"ne5\\\", null) message == ne5\", \n-            ne5.getMessage().equals(\"ne5\")); \n-        \n-        NestableException ne6 = new NestableException(null, new Exception(\"ne6 exception\"));\n-        assertTrue(\"nestable exception(null, new Exception(\\\"ne6 exception\\\") cause == ne6 exception\", \n-            ne6.getMessage().equals(\"ne6 exception\")); \n-        \n-        NestableException ne7 = new NestableException(\"ne7o\", new NestableException(\"ne7i\", new Exception(\"ne7 exception\")));\n-        assertTrue(\"nextable exception(\\\"ne7o\\\", new NestableException(\\\"ne7i\\\", new Exception(\\\"ne7 exception\\\"))) message is ne7o: ne7i: ne7 exception\",\n-            ne7.getMessage().equals(\"ne7o: ne7i: ne7 exception\"));\n-\n-    }\n-\n-    public void testGetMessageI()\n-    {\n-        String[] msgs = new String[5];\n-        msgs[0] = \"level 1\";\n-        msgs[1] = \"level 2\";\n-        msgs[2] = null;\n-        msgs[3] = \"level 4\";\n-        msgs[4] = \"level 5\";\n-        NestableException ne = new NestableException(msgs[0], new NestableException(msgs[1], new NestableException(new NestableException(msgs[3], new Exception(msgs[4])))));\n-        for(int i = 0; i < msgs.length; i++)\n-        {\n-            assertEquals(\"message \" + i, msgs[i], ne.getMessage(i));\n-        }\n-        \n-        // Test for index out of bounds\n-        try\n-        {\n-            String msg = ne.getMessage(-1);\n-            fail(\"getMessage(-1) should have thrown IndexOutOfBoundsException\");\n-        }\n-        catch(IndexOutOfBoundsException ioode)\n-        {\n-        }\n-        try\n-        {\n-            String msg = ne.getMessage(msgs.length + 100);\n-            fail(\"getMessage(999) should have thrown IndexOutOfBoundsException\");\n-        }\n-        catch(IndexOutOfBoundsException ioode)\n-        {\n-        }\n-    }\n-    \n-    public void testGetMessages()\n-    {\n-        String[] msgs = new String[5];\n-        msgs[0] = \"level 1\";\n-        msgs[1] = \"level 2\";\n-        msgs[2] = null;\n-        msgs[3] = \"level 4\";\n-        msgs[4] = \"level 5\";\n-        NestableException ne = new NestableException(msgs[0], new NestableException(msgs[1], new NestableException(new NestableException(msgs[3], new Exception(msgs[4])))));\n-        String[] nMsgs = ne.getMessages();\n-        assertEquals(\"messages length\", msgs.length, nMsgs.length);\n-        for(int i = 0; i < nMsgs.length; i++)\n-        {\n-            assertEquals(\"message \" + i, msgs[i], nMsgs[i]);\n-        }\n-    }\n-\n-    public void testGetThrowableI()\n-    {\n-        Nestable n = null;\n-        String msgs[] = null;\n-        Class[] throwables = null;\n-        \n-        msgs = new String[2];\n-        msgs[0] = null;\n-        msgs[1] = \"level 2\";\n-        throwables = new Class[2];\n-        throwables[0] = NestableExceptionTester1.class;\n-        throwables[1] = Exception.class;\n-        n = new NestableExceptionTester1(new Exception(msgs[1]));\n-        doNestableExceptionGetThrowableI(n, throwables, msgs);\n- \n-        msgs = new String[5];\n-        msgs[0] = \"level 1\";\n-        msgs[1] = \"level 2\";\n-        msgs[2] = null;\n-        msgs[3] = \"level 4\";\n-        msgs[4] = \"level 5\";\n-        throwables = new Class[5];\n-        throwables[0] = NestableExceptionTester1.class;\n-        throwables[1] = NestableExceptionTester2.class;\n-        throwables[2] = NestableExceptionTester1.class;\n-        throwables[3] = NestableExceptionTester2.class;\n-        throwables[4] = Exception.class;        \n-        n = new NestableExceptionTester1(msgs[0], new NestableExceptionTester2(msgs[1], new NestableExceptionTester1(new NestableExceptionTester2(msgs[3], new Exception(msgs[4])))));\n-        doNestableExceptionGetThrowableI(n, throwables, msgs);\n-    }\n-    \n-    private void doNestableExceptionGetThrowableI(Nestable n, Class[] classes, String[] msgs)\n-    {\n-        Throwable t = null;\n-        String msg = null;\n-\n-        for(int i = 0; i < classes.length; i++)\n-        {\n-            t = n.getThrowable(i);\n-            assertEquals(\"throwable class\", classes[i], t.getClass());\n-            if(Nestable.class.isInstance(t))\n-            {\n-                msg = ((Nestable) t).getMessage(0);\n-            }\n-            else\n-            {\n-                msg = t.getMessage();\n-            }\n-            assertEquals(\"throwable message\", msgs[i], msg);\n-        }\n-        \n-        // Test for index out of bounds\n-        try\n-        {\n-            t = n.getThrowable(-1);\n-            fail(\"getThrowable(-1) should have thrown IndexOutOfBoundsException\");\n-        }\n-        catch(IndexOutOfBoundsException ioobe)\n-        {\n-        }\n-        try\n-        {\n-            t = n.getThrowable(999);\n-            fail(\"getThrowable(999) should have thrown IndexOutOfBoundsException\");\n-        }\n-        catch(IndexOutOfBoundsException ioobe)\n-        {\n-        }\n-    }\n-    \n-    public void testGetThrowables()\n-    {\n-        Nestable n = null;\n-        String msgs[] = null;\n-        Class[] throwables = null;\n-        \n-        msgs = new String[2];\n-        msgs[0] = null;\n-        msgs[1] = \"level 2\";\n-        throwables = new Class[2];\n-        throwables[0] = NestableExceptionTester1.class;\n-        throwables[1] = Exception.class;\n-        n = new NestableExceptionTester1(new Exception(msgs[1]));\n-        doNestableExceptionGetThrowables(n, throwables, msgs);\n- \n-        msgs = new String[5];\n-        msgs[0] = \"level 1\";\n-        msgs[1] = \"level 2\";\n-        msgs[2] = null;\n-        msgs[3] = \"level 4\";\n-        msgs[4] = \"level 5\";\n-        throwables = new Class[5];\n-        throwables[0] = NestableExceptionTester1.class;\n-        throwables[1] = NestableExceptionTester2.class;\n-        throwables[2] = NestableExceptionTester1.class;\n-        throwables[3] = NestableExceptionTester2.class;\n-        throwables[4] = Exception.class;        \n-        n = new NestableExceptionTester1(msgs[0], new NestableExceptionTester2(msgs[1], new NestableExceptionTester1(new NestableExceptionTester2(msgs[3], new Exception(msgs[4])))));\n-        doNestableExceptionGetThrowables(n, throwables, msgs);\n-    }\n-    \n-    private void doNestableExceptionGetThrowables(Nestable n, Class[] classes, String[] msgs)\n-    {\n-        String msg = null;\n-\n-        Throwable throwables[] = n.getThrowables();\n-        assertEquals(\"throwables length\", classes.length, throwables.length);\n-        for(int i = 0; i < classes.length; i++)\n-        {\n-            assertEquals(\"throwable class\", classes[i], throwables[i].getClass());\n-            Throwable t = throwables[i];\n-            if(Nestable.class.isInstance(t))\n-            {\n-                msg = ((Nestable) t).getMessage(0);\n-            }\n-            else\n-            {\n-                msg = t.getMessage();\n-            }\n-            assertEquals(\"throwable message\", msgs[i], msg);\n-        }\n-    }\n-    \n-    public void testIndexOfThrowable()\n-    {\n-        Nestable n = null;\n-        String msgs[] = null;\n-        Class[] throwables = null;\n-        \n-        msgs = new String[5];\n-        msgs[0] = \"level 1\";\n-        msgs[1] = \"level 2\";\n-        msgs[2] = null;\n-        msgs[3] = \"level 4\";\n-        msgs[4] = \"level 5\";\n-        throwables = new Class[5];\n-        throwables[0] = NestableExceptionTester1.class;\n-        throwables[1] = NestableExceptionTester2.class;\n-        throwables[2] = NestableExceptionTester1.class;\n-        throwables[3] = NestableExceptionTester2.class;\n-        throwables[4] = Exception.class;\n-        int[] indexes = {0, 1, 0, 1, 4};\n-        n = new NestableExceptionTester1(msgs[0], new NestableExceptionTester2(msgs[1], new NestableExceptionTester1(new NestableExceptionTester2(msgs[3], new Exception(msgs[4])))));\n-        for(int i = 0; i < throwables.length; i++)\n-        {\n-            doNestableExceptionIndexOfThrowable(n, throwables[i], indexes[i], msgs[indexes[i]]);\n-        }\n-        doNestableExceptionIndexOfThrowable(n, java.util.Date.class, -1, null);\n-    }\n-    \n-    private void doNestableExceptionIndexOfThrowable(Nestable n, Class type, int expectedIndex, String expectedMsg)\n-    {\n-        Throwable t = null;\n-        \n-        int index = n.indexOfThrowable(type);\n-        assertEquals(\"index of throwable \" + type.getName(), expectedIndex, index);\n-        if(expectedIndex > -1)\n-        {\n-            t = n.getThrowable(index);\n-            if(expectedMsg != null)\n-            {\n-                String msg = null;\n-                if(Nestable.class.isInstance(t))\n-                {\n-                    msg = ((Nestable) t).getMessage(0);\n-                }\n-                else\n-                {\n-                    msg = t.getMessage();\n-                }\n-                assertEquals(\"message of indexed throwable\", expectedMsg, msg);\n-            }\n-        }\n-    }\n-    \n-    public void testIndexOfThrowableI()\n-    {\n-        Nestable n = null;\n-        String msgs[] = null;\n-        Class[] throwables = null;\n-        \n-        msgs = new String[5];\n-        msgs[0] = \"level 1\";\n-        msgs[1] = \"level 2\";\n-        msgs[2] = null;\n-        msgs[3] = \"level 4\";\n-        msgs[4] = \"level 5\";\n-        throwables = new Class[5];\n-        throwables[0] = NestableExceptionTester1.class;\n-        throwables[1] = NestableExceptionTester2.class;\n-        throwables[2] = NestableExceptionTester1.class;\n-        throwables[3] = NestableExceptionTester2.class;\n-        throwables[4] = Exception.class;\n-        int[] indexes = {0, 1, 0, 1, 4};\n-        n = new NestableExceptionTester1(msgs[0], new NestableExceptionTester2(msgs[1], new NestableExceptionTester1(new NestableExceptionTester2(msgs[3], new Exception(msgs[4])))));\n-        for(int i = 0; i < throwables.length; i++)\n-        {\n-            doNestableExceptionIndexOfThrowableI(n, throwables[i], 0, indexes[i], msgs[indexes[i]]);\n-        }\n-        doNestableExceptionIndexOfThrowableI(n, NestableExceptionTester2.class, 2, 3, msgs[3]);\n-        doNestableExceptionIndexOfThrowableI(n, NestableExceptionTester1.class, 1, 2, msgs[2]);\n-        doNestableExceptionIndexOfThrowableI(n, NestableExceptionTester1.class, 3, -1, null);\n-        doNestableExceptionIndexOfThrowableI(n, NestableExceptionTester1.class, 4, -1, null);\n-        doNestableExceptionIndexOfThrowableI(n, Exception.class, 2, 4, msgs[4]);\n-        doNestableExceptionIndexOfThrowableI(n, java.util.Date.class, 0, -1, null);\n-        \n-        // Test for index out of bounds\n-        try\n-        {\n-            int index = n.indexOfThrowable(NestableExceptionTester1.class, -1);\n-            fail(\"method should have thrown IndexOutOfBoundsException\");\n-        }\n-        catch(IndexOutOfBoundsException iooob)\n-        {\n-        }\n-        try\n-        {\n-            int index = n.indexOfThrowable(NestableExceptionTester1.class, 5);\n-            fail(\"method should have thrown IndexOutOfBoundsException\");\n-        }\n-        catch(IndexOutOfBoundsException iooob)\n-        {\n-        }\n-        \n-    }\n-\n-    private void doNestableExceptionIndexOfThrowableI(Nestable n, Class type, int fromIndex, int expectedIndex, String expectedMsg)\n-    {\n-        Throwable t = null;\n-        \n-        int index = n.indexOfThrowable(type, fromIndex);\n-        assertEquals(\"index of throwable \" + type.getName(), expectedIndex, index);\n-        if(expectedIndex > -1)\n-        {\n-            t = n.getThrowable(index);\n-            if(expectedMsg != null)\n-            {\n-                String msg = null;\n-                if(Nestable.class.isInstance(t))\n-                {\n-                    msg = ((Nestable) t).getMessage(0);\n-                }\n-                else\n-                {\n-                    msg = t.getMessage();\n-                }\n-                assertEquals(\"message of indexed throwable\", expectedMsg, msg);\n-            }\n-        }\n-        \n-    }\n-    \n-    public void testPrintPartialStackTrace()\n-    {\n-        NestableException ne9 = new NestableException(\"ne9\", new Exception(\"ne9 exception\"));\n-        ByteArrayOutputStream baos2 = new ByteArrayOutputStream();\n-        PrintStream ps2 = new PrintStream(baos2);\n-        PrintWriter pw2 = new PrintWriter(ps2, true);\n-        ne9.printPartialStackTrace(pw2);\n-        String stack2 = baos2.toString();\n-        assertTrue(\"stack trace startsWith == org.apache.commons.lang.exception.NestableException: ne9: ne9 exception\",\n-            stack2.startsWith(\"org.apache.commons.lang.exception.NestableException: ne9: ne9 exception\"));\n-        assertEquals(\"stack trace indexOf rethrown == -1\",\n-            stack2.indexOf(\"rethrown\"), -1);\n-    }\n-    \n-    public void testPrintStackTrace()\n-    {\n-        NestableException ne8 = new NestableException(\"ne8\", new Exception(\"ne8 exception\"));\n-        ByteArrayOutputStream baos1 = new ByteArrayOutputStream();\n-        PrintStream ps1 = new PrintStream(baos1);\n-        PrintWriter pw1 = new PrintWriter(ps1, true);\n-        ne8.printStackTrace(ps1);\n-        String stack1 = baos1.toString();\n-        assertTrue(\"stack trace startsWith == java.lang.Exception: ne8 exception\",\n-            stack1.startsWith(\"java.lang.Exception: ne8 exception\")); \n-        assertTrue(\"stack trace indexOf org.apache.commons.lang.exception.NestableException: ne8: ne8 exception > -1\",\n-            stack1.indexOf(\"org.apache.commons.lang.exception.NestableException: ne8: ne8 exception\") > -1); \n-    }\n-\n     public static void main(String args[])\n     {\n         TestRunner.run(suite());\n     }\n+    \n+    public Nestable getNestable()\n+    {\n+        return new NestableException();\n+    }\n+    \n+    public Nestable getNestable(Nestable n)\n+    {\n+        return new NestableException((Throwable) n);\n+    }\n+    \n+    public Nestable getNestable(String msg)\n+    {\n+        return new NestableException(msg);\n+    }\n+    \n+    public Nestable getNestable(Throwable t)\n+    {\n+        return new NestableException(t);\n+    }\n+    \n+    public Nestable getNestable(String msg, Throwable t)\n+    {\n+        return new NestableException(msg, t);\n+    }\n+    \n+    public Nestable getNestable(String msg, Nestable n)\n+    {\n+        return new NestableException(msg, (Throwable) n);\n+    }\n+    \n+    public Nestable getTester1(Throwable t)\n+    {\n+        return new NestableExceptionTester1(t);\n+    }\n+    \n+    public Nestable getTester1(Nestable n)\n+    {\n+        return new NestableExceptionTester1((Throwable) n);\n+    }\n+    \n+    public Nestable getTester1(String msg, Throwable t)\n+    {\n+        return new NestableExceptionTester1(msg, t);\n+    }\n+    \n+    public Nestable getTester1(String msg, Nestable n)\n+    {\n+        return new NestableExceptionTester1(msg, (Throwable) n);\n+    }\n+    \n+    public Class getTester1Class()\n+    {\n+        return NestableExceptionTester1.class;\n+    }\n+    \n+    public Nestable getTester2(String msg, Throwable t)\n+    {\n+        return new NestableExceptionTester2(msg, t);\n+    }\n+    \n+    public Nestable getTester2(String msg, Nestable n)\n+    {\n+        return new NestableExceptionTester2(msg, (Throwable) n);\n+    }\n+    \n+    public Class getTester2Class()\n+    {\n+        return NestableExceptionTester2.class;\n+    }\n+    \n+    public Throwable getThrowable(String msg)\n+    {\n+        return new Exception(msg);\n+    }\n+    \n+    public Class getThrowableClass()\n+    {\n+        return Exception.class;\n+    }\n+    \n }\n \n class NestableExceptionTester1 extends NestableException\n     }\n     \n }\n-\n--- a/src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java\n+++ b/src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java\n  * Tests the org.apache.commons.lang.exception.NestableRuntimeException class.\n  *\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n- * @version $Id: NestableRuntimeExceptionTestCase.java,v 1.3 2002/08/25 13:21:24 stevencaswell Exp $\n+ * @version $Id: NestableRuntimeExceptionTestCase.java,v 1.4 2002/09/11 18:16:53 stevencaswell Exp $\n  */\n-public class NestableRuntimeExceptionTestCase extends junit.framework.TestCase\n+public class NestableRuntimeExceptionTestCase extends AbstractNestableTestCase\n {\n+    \n     /**\n-     * Construct a new instance of NestableRuntimeExceptionTestCase with the specified name\n+     * Construct a new instance of\n+     * <code>NestableRuntimeExceptionTestCase</code>.\n+     *\n+     * @param name test case name\n      */\n     public NestableRuntimeExceptionTestCase(String name)\n     {\n     \n     public static Test suite()\n     {\n-        return new TestSuite(NestableRuntimeExceptionTestCase.class);\n+        return new TestSuite(NestableExceptionTestCase.class);\n     }\n     \n     /**\n     {\n     }\n     \n-    /**\n-     * Test the implementation\n-     */\n-    public void testGetCause()\n-    {\n-        NestableRuntimeException ne1 = new NestableRuntimeException();\n-        assertNull(\"nestable runtime exception() cause is null\", ne1.getCause()); \n-        \n-        NestableRuntimeException ne2 = new NestableRuntimeException(\"ne2\");\n-        assertNull(\"nestable runtime exception(\\\"ne2\\\") cause is null\", ne2.getCause());\n-\n-        NestableRuntimeException ne3 = new NestableRuntimeException(new Exception(\"ne3 exception\"));\n-        assertNotNull(\"nestable runtime exception(new Exception(\\\"ne3 exception\\\") cause is not null\",\n-            ne3.getCause()); \n-        assertTrue(\"nestable runtime exception(new Exception(\\\"ne3 exception\\\") cause message == ne3 exception\",\n-            ne3.getCause().getMessage().equals(\"ne3 exception\")); \n-\n-        NestableRuntimeException ne4 = new NestableRuntimeException(\"ne4\", new Exception(\"ne4 exception\"));\n-        assertNotNull(\"nestable runtime exception(\\\"ne4\\\", new Exception(\\\"ne4 exception\\\") cause is not null\", \n-            ne4.getCause()); \n-\n-        NestableRuntimeException ne5 = new NestableRuntimeException(\"ne5\", null);\n-        assertNull(\"nestable runtime exception(\\\"ne5\\\", null) cause is null\", \n-            ne5.getCause());\n-\n-        NestableRuntimeException ne6 = new NestableRuntimeException(null, new Exception(\"ne6 exception\"));\n-        assertNotNull(\"nestable runtime exception(null, new Exception(\\\"ne6 exception\\\") cause is not null\", \n-            ne6.getCause()); \n-    }\n-    \n-    public void testGetThrowableCount()\n-    {\n-        NestableRuntimeException ne1 = new NestableRuntimeException();\n-        assertEquals(\"ne1 throwable count\", 1, ne1.getThrowableCount());\n-\n-        NestableRuntimeException ne2 = new NestableRuntimeException(\"ne2\");\n-        assertEquals(\"ne2 throwable count\", 1, ne2.getThrowableCount());\n-        \n-        NestableRuntimeException ne3 = new NestableRuntimeException(new Exception(\"ne3 exception\"));\n-        assertEquals(\"ne3 throwable count\", 2, ne3.getThrowableCount());\n-        \n-        NestableRuntimeException ne4 = new NestableRuntimeException(\"ne4\", new Exception(\"ne4 exception\"));\n-        assertEquals(\"ne4 throwable count\", 2, ne4.getThrowableCount());\n-        \n-        NestableRuntimeException ne5 = new NestableRuntimeException(\"ne5\", null);\n-        assertEquals(\"ne 5 throwable count\", 1, ne5.getThrowableCount());\n-        \n-        NestableRuntimeException ne6 = new NestableRuntimeException(null, new Exception(\"ne6 exception\"));\n-        assertEquals(\"ne 6 throwable count\", 2, ne6.getThrowableCount());\n-        \n-        NestableRuntimeException ne7 = new NestableRuntimeException(\"ne7o\", new NestableRuntimeException(\"ne7i\", new Exception(\"ne7 exception\")));\n-        assertEquals(\"ne 7 throwable count\", 3, ne7.getThrowableCount());\n-\n-        NestableRuntimeException ne8 = new NestableRuntimeException(\"level 1\", new NestableRuntimeException(\"level 2\", new NestableRuntimeException(new NestableRuntimeException(\"level 4\", new Exception(\"level 5\")))));\n-        assertEquals(\"ne 8 throwable count\", 5, ne8.getThrowableCount());\n-    }\n-    \n-    public void testGetMessage()\n-    {\n-        NestableRuntimeException ne1 = new NestableRuntimeException();\n-        assertNull(\"nestable runtime exception() message is null\", ne1.getMessage()); \n-        \n-        NestableRuntimeException ne2 = new NestableRuntimeException(\"ne2\");\n-        assertNotNull(\"nestable runtime exception(\\\"ne2\\\") message is not null\", ne2.getMessage()); \n-        assertTrue(\"nestable runtime exception(\\\"ne2\\\") message == ne2\", ne2.getMessage().equals(\"ne2\")); \n-\n-        NestableRuntimeException ne3 = new NestableRuntimeException(new Exception(\"ne3 exception\"));\n-        assertNotNull(\"nestable runtime exception(new Exception(\\\"ne3 exception\\\") message is not null\",\n-            ne3.getMessage());\n-        assertTrue(\"nestable runtime exception(new Exception(\\\"ne3 exception\\\") message == cause message\",\n-            ne3.getMessage().equals(ne3.getCause().getMessage())); \n-\n-        NestableRuntimeException ne4 = new NestableRuntimeException(\"ne4\", new Exception(\"ne4 exception\"));\n-        assertNotNull(\"nestable runtime exception(\\\"ne4\\\", new Exception(\\\"ne4 exception\\\") message is not null\", \n-            ne4.getMessage()); \n-        assertTrue(\"nestable runtime exception(\\\"ne4\\\", new Exception(\\\"ne4 exception\\\") message == ne4: ne4 exception\", \n-            ne4.getMessage().equals(\"ne4: ne4 exception\")); \n-\n-        NestableRuntimeException ne5 = new NestableRuntimeException(\"ne5\", null);\n-        assertNotNull(\"nestable runtime exception(\\\"ne5\\\", new Exception(\\\"ne5 exception\\\") message is not null\", \n-            ne5.getMessage()); \n-        assertTrue(\"nestable runtime exception(\\\"ne5\\\", null) message == ne5\", \n-            ne5.getMessage().equals(\"ne5\")); \n-\n-        NestableRuntimeException ne6 = new NestableRuntimeException(null, new Exception(\"ne6 exception\"));\n-        assertTrue(\"nestable runtime exception(null, new Exception(\\\"ne6 exception\\\") cause == ne6 exception\", \n-            ne6.getMessage().equals(\"ne6 exception\")); \n-\n-        NestableRuntimeException ne7 = new NestableRuntimeException(\"ne7o\", new NestableRuntimeException(\"ne7i\", new Exception(\"ne7 exception\")));\n-        assertTrue(\"nextable exception(\\\"ne7o\\\", new NestableRuntimeException(\\\"ne7i\\\", new Exception(\\\"ne7 exception\\\"))) message is ne7o: ne7i: ne7 exception\",\n-            ne7.getMessage().equals(\"ne7o: ne7i: ne7 exception\")); \n-    }\n-    \n-    public void testGetMessageI()\n-    {\n-        String[] msgs = new String[5];\n-        msgs[0] = \"level 1\";\n-        msgs[1] = \"level 2\";\n-        msgs[2] = null;\n-        msgs[3] = \"level 4\";\n-        msgs[4] = \"level 5\";\n-        NestableRuntimeException ne = new NestableRuntimeException(msgs[0], new NestableRuntimeException(msgs[1], new NestableRuntimeException(new NestableRuntimeException(msgs[3], new Exception(msgs[4])))));\n-        for(int i = 0; i < msgs.length; i++)\n-        {\n-            assertEquals(\"message \" + i, msgs[i], ne.getMessage(i));\n-        }\n-        \n-        // Test for index out of bounds\n-        try\n-        {\n-            String msg = ne.getMessage(-1);\n-            fail(\"getMessage(-1) should have thrown IndexOutOfBoundsException\");\n-        }\n-        catch(IndexOutOfBoundsException ioode)\n-        {\n-        }\n-        try\n-        {\n-            String msg = ne.getMessage(msgs.length + 100);\n-            fail(\"getMessage(999) should have thrown IndexOutOfBoundsException\");\n-        }\n-        catch(IndexOutOfBoundsException ioode)\n-        {\n-        }\n-    }\n-    \n-    public void testGetMessages()\n-    {\n-        String[] msgs = new String[5];\n-        msgs[0] = \"level 1\";\n-        msgs[1] = \"level 2\";\n-        msgs[2] = null;\n-        msgs[3] = \"level 4\";\n-        msgs[4] = \"level 5\";\n-        NestableRuntimeException ne = new NestableRuntimeException(msgs[0], new NestableRuntimeException(msgs[1], new NestableRuntimeException(new NestableRuntimeException(msgs[3], new Exception(msgs[4])))));\n-        String[] nMsgs = ne.getMessages();\n-        assertEquals(\"messages length\", msgs.length, nMsgs.length);\n-        for(int i = 0; i < nMsgs.length; i++)\n-        {\n-            assertEquals(\"message \" + i, msgs[i], nMsgs[i]);\n-        }\n-    }\n-\n-    public void testGetThrowableI()\n-    {\n-        Nestable n = null;\n-        String msgs[] = null;\n-        Class[] throwables = null;\n-        \n-        msgs = new String[2];\n-        msgs[0] = null;\n-        msgs[1] = \"level 2\";\n-        throwables = new Class[2];\n-        throwables[0] = NestableRuntimeExceptionTester1.class;\n-        throwables[1] = Exception.class;\n-        n = new NestableRuntimeExceptionTester1(new Exception(msgs[1]));\n-        doNestableRuntimeExceptionGetThrowableI(n, throwables, msgs);\n- \n-        msgs = new String[5];\n-        msgs[0] = \"level 1\";\n-        msgs[1] = \"level 2\";\n-        msgs[2] = null;\n-        msgs[3] = \"level 4\";\n-        msgs[4] = \"level 5\";\n-        throwables = new Class[5];\n-        throwables[0] = NestableRuntimeExceptionTester1.class;\n-        throwables[1] = NestableRuntimeExceptionTester2.class;\n-        throwables[2] = NestableRuntimeExceptionTester1.class;\n-        throwables[3] = NestableRuntimeExceptionTester2.class;\n-        throwables[4] = Exception.class;        \n-        n = new NestableRuntimeExceptionTester1(msgs[0], new NestableRuntimeExceptionTester2(msgs[1], new NestableRuntimeExceptionTester1(new NestableRuntimeExceptionTester2(msgs[3], new Exception(msgs[4])))));\n-        doNestableRuntimeExceptionGetThrowableI(n, throwables, msgs);\n-    }\n-    \n-    private void doNestableRuntimeExceptionGetThrowableI(Nestable n, Class[] classes, String[] msgs)\n-    {\n-        Throwable t = null;\n-        String msg = null;\n-\n-        for(int i = 0; i < classes.length; i++)\n-        {\n-            t = n.getThrowable(i);\n-            assertEquals(\"throwable class\", classes[i], t.getClass());\n-            if(Nestable.class.isInstance(t))\n-            {\n-                msg = ((Nestable) t).getMessage(0);\n-            }\n-            else\n-            {\n-                msg = t.getMessage();\n-            }\n-            assertEquals(\"throwable message\", msgs[i], msg);\n-        }\n-        \n-        // Test for index out of bounds\n-        try\n-        {\n-            t = n.getThrowable(-1);\n-            fail(\"getThrowable(-1) should have thrown IndexOutOfBoundsException\");\n-        }\n-        catch(IndexOutOfBoundsException ioobe)\n-        {\n-        }\n-        try\n-        {\n-            t = n.getThrowable(999);\n-            fail(\"getThrowable(999) should have thrown IndexOutOfBoundsException\");\n-        }\n-        catch(IndexOutOfBoundsException ioobe)\n-        {\n-        }\n-    }\n-    \n-    public void testGetThrowables()\n-    {\n-        Nestable n = null;\n-        String msgs[] = null;\n-        Class[] throwables = null;\n-        \n-        msgs = new String[2];\n-        msgs[0] = null;\n-        msgs[1] = \"level 2\";\n-        throwables = new Class[2];\n-        throwables[0] = NestableRuntimeExceptionTester1.class;\n-        throwables[1] = Exception.class;\n-        n = new NestableRuntimeExceptionTester1(new Exception(msgs[1]));\n-        doNestableRuntimeExceptionGetThrowables(n, throwables, msgs);\n- \n-        msgs = new String[5];\n-        msgs[0] = \"level 1\";\n-        msgs[1] = \"level 2\";\n-        msgs[2] = null;\n-        msgs[3] = \"level 4\";\n-        msgs[4] = \"level 5\";\n-        throwables = new Class[5];\n-        throwables[0] = NestableRuntimeExceptionTester1.class;\n-        throwables[1] = NestableRuntimeExceptionTester2.class;\n-        throwables[2] = NestableRuntimeExceptionTester1.class;\n-        throwables[3] = NestableRuntimeExceptionTester2.class;\n-        throwables[4] = Exception.class;        \n-        n = new NestableRuntimeExceptionTester1(msgs[0], new NestableRuntimeExceptionTester2(msgs[1], new NestableRuntimeExceptionTester1(new NestableRuntimeExceptionTester2(msgs[3], new Exception(msgs[4])))));\n-        doNestableRuntimeExceptionGetThrowables(n, throwables, msgs);\n-    }\n-    \n-    private void doNestableRuntimeExceptionGetThrowables(Nestable n, Class[] classes, String[] msgs)\n-    {\n-        String msg = null;\n-\n-        Throwable throwables[] = n.getThrowables();\n-        assertEquals(\"throwables length\", classes.length, throwables.length);\n-        for(int i = 0; i < classes.length; i++)\n-        {\n-            assertEquals(\"throwable class\", classes[i], throwables[i].getClass());\n-            Throwable t = throwables[i];\n-            if(Nestable.class.isInstance(t))\n-            {\n-                msg = ((Nestable) t).getMessage(0);\n-            }\n-            else\n-            {\n-                msg = t.getMessage();\n-            }\n-            assertEquals(\"throwable message\", msgs[i], msg);\n-        }\n-    }\n-    \n-    public void testIndexOfThrowable()\n-    {\n-        Nestable n = null;\n-        String msgs[] = null;\n-        Class[] throwables = null;\n-        \n-        msgs = new String[5];\n-        msgs[0] = \"level 1\";\n-        msgs[1] = \"level 2\";\n-        msgs[2] = null;\n-        msgs[3] = \"level 4\";\n-        msgs[4] = \"level 5\";\n-        throwables = new Class[5];\n-        throwables[0] = NestableRuntimeExceptionTester1.class;\n-        throwables[1] = NestableRuntimeExceptionTester2.class;\n-        throwables[2] = NestableRuntimeExceptionTester1.class;\n-        throwables[3] = NestableRuntimeExceptionTester2.class;\n-        throwables[4] = Exception.class;\n-        int[] indexes = {0, 1, 0, 1, 4};\n-        n = new NestableRuntimeExceptionTester1(msgs[0], new NestableRuntimeExceptionTester2(msgs[1], new NestableRuntimeExceptionTester1(new NestableRuntimeExceptionTester2(msgs[3], new Exception(msgs[4])))));\n-        for(int i = 0; i < throwables.length; i++)\n-        {\n-            doNestableRuntimeExceptionIndexOfThrowable(n, throwables[i], indexes[i], msgs[indexes[i]]);\n-        }\n-        doNestableRuntimeExceptionIndexOfThrowable(n, java.util.Date.class, -1, null);\n-    }\n-    \n-    private void doNestableRuntimeExceptionIndexOfThrowable(Nestable n, Class type, int expectedIndex, String expectedMsg)\n-    {\n-        Throwable t = null;\n-        \n-        int index = n.indexOfThrowable(type);\n-        assertEquals(\"index of throwable \" + type.getName(), expectedIndex, index);\n-        if(expectedMsg != null)\n-        {\n-            t = n.getThrowable(index);\n-            String msg = null;\n-            if(Nestable.class.isInstance(t))\n-            {\n-                msg = ((Nestable) t).getMessage(0);\n-            }\n-            else\n-            {\n-                msg = t.getMessage();\n-            }\n-            assertEquals(\"message of indexed throwable\", expectedMsg, msg);\n-        }\n-    }\n-    \n-    public void testIndexOfThrowableI()\n-    {\n-        Nestable n = null;\n-        String msgs[] = null;\n-        Class[] throwables = null;\n-        \n-        msgs = new String[5];\n-        msgs[0] = \"level 1\";\n-        msgs[1] = \"level 2\";\n-        msgs[2] = null;\n-        msgs[3] = \"level 4\";\n-        msgs[4] = \"level 5\";\n-        throwables = new Class[5];\n-        throwables[0] = NestableRuntimeExceptionTester1.class;\n-        throwables[1] = NestableRuntimeExceptionTester2.class;\n-        throwables[2] = NestableRuntimeExceptionTester1.class;\n-        throwables[3] = NestableRuntimeExceptionTester2.class;\n-        throwables[4] = Exception.class;\n-        int[] indexes = {0, 1, 0, 1, 4};\n-        n = new NestableRuntimeExceptionTester1(msgs[0], new NestableRuntimeExceptionTester2(msgs[1], new NestableRuntimeExceptionTester1(new NestableRuntimeExceptionTester2(msgs[3], new Exception(msgs[4])))));\n-        for(int i = 0; i < throwables.length; i++)\n-        {\n-            doNestableRuntimeExceptionIndexOfThrowableI(n, throwables[i], 0, indexes[i], msgs[indexes[i]]);\n-        }\n-        doNestableRuntimeExceptionIndexOfThrowableI(n, NestableRuntimeExceptionTester2.class, 2, 3, msgs[3]);\n-        doNestableRuntimeExceptionIndexOfThrowableI(n, NestableRuntimeExceptionTester1.class, 1, 2, msgs[2]);\n-        doNestableRuntimeExceptionIndexOfThrowableI(n, NestableRuntimeExceptionTester1.class, 3, -1, null);\n-        doNestableRuntimeExceptionIndexOfThrowableI(n, NestableRuntimeExceptionTester1.class, 4, -1, null);\n-        doNestableRuntimeExceptionIndexOfThrowableI(n, java.util.Date.class, 0, -1, null);\n-        \n-        try\n-        {\n-            int index = n.indexOfThrowable(NestableRuntimeExceptionTester1.class, -1);\n-            fail(\"method should have thrown IndexOutOfBoundsException\");\n-        }\n-        catch(IndexOutOfBoundsException iooob)\n-        {\n-        }\n-        try\n-        {\n-            int index = n.indexOfThrowable(NestableRuntimeExceptionTester1.class, 5);\n-            fail(\"method should have thrown IndexOutOfBoundsException\");\n-        }\n-        catch(IndexOutOfBoundsException iooob)\n-        {\n-        }\n-        \n-    }\n-\n-    private void doNestableRuntimeExceptionIndexOfThrowableI(Nestable n, Class type, int fromIndex, int expectedIndex, String expectedMsg)\n-    {\n-        Throwable t = null;\n-        \n-        int index = n.indexOfThrowable(type, fromIndex);\n-        assertEquals(\"index of throwable \" + type.getName(), expectedIndex, index);\n-        if(expectedIndex > -1)\n-        {\n-            t = n.getThrowable(index);\n-            if(expectedMsg != null)\n-            {\n-                String msg = null;\n-                if(Nestable.class.isInstance(t))\n-                {\n-                    msg = ((Nestable) t).getMessage(0);\n-                }\n-                else\n-                {\n-                    msg = t.getMessage();\n-                }\n-                assertEquals(\"message of indexed throwable\", expectedMsg, msg);\n-            }\n-        }\n-        \n-    }\n-    \n-    public void testPrintStackTrace()\n-    {\n-        NestableRuntimeException ne8 = new NestableRuntimeException(\"ne8\", new Exception(\"ne8 exception\"));\n-        ByteArrayOutputStream baos1 = new ByteArrayOutputStream();\n-        PrintStream ps1 = new PrintStream(baos1);\n-        PrintWriter pw1 = new PrintWriter(ps1, true);\n-        ne8.printStackTrace(ps1);\n-        String stack1 = baos1.toString();\n-        assertTrue(\"stack trace startsWith == java.lang.Exception: ne8 exception\",\n-            stack1.startsWith(\"java.lang.Exception: ne8 exception\")); \n-        assertTrue(\"stack trace indexOf org.apache.commons.lang.exception.NestableRuntimeException: ne8: ne8 exception > -1\",\n-            stack1.indexOf(\"org.apache.commons.lang.exception.NestableRuntimeException: ne8: ne8 exception\") > -1); \n-    }\n-\n-    public void testPrintPartialStackTrace()\n-    {\n-        NestableRuntimeException ne9 = new NestableRuntimeException(\"ne9\", new Exception(\"ne9 exception\"));\n-        ByteArrayOutputStream baos2 = new ByteArrayOutputStream();\n-        PrintStream ps2 = new PrintStream(baos2);\n-        PrintWriter pw2 = new PrintWriter(ps2, true);\n-        ne9.printPartialStackTrace(pw2);\n-        String stack2 = baos2.toString();\n-        assertTrue(\"stack trace startsWith == org.apache.commons.lang.exception.NestableRuntimeException: ne9: ne9 exception\",\n-            stack2.startsWith(\"org.apache.commons.lang.exception.NestableRuntimeException: ne9: ne9 exception\"));\n-        assertEquals(\"stack trace indexOf rethrown == -1\",\n-            stack2.indexOf(\"rethrown\"), -1);\n-    }\n-\n     public static void main(String args[])\n     {\n         TestRunner.run(suite());\n     }\n+    \n+    public Nestable getNestable()\n+    {\n+        return new NestableRuntimeException();\n+    }\n+    \n+    public Nestable getNestable(Nestable n)\n+    {\n+        return new NestableRuntimeException((Throwable) n);\n+    }\n+    \n+    public Nestable getNestable(String msg)\n+    {\n+        return new NestableRuntimeException(msg);\n+    }\n+    \n+    public Nestable getNestable(Throwable t)\n+    {\n+        return new NestableRuntimeException(t);\n+    }\n+    \n+    public Nestable getNestable(String msg, Throwable t)\n+    {\n+        return new NestableRuntimeException(msg, t);\n+    }\n+    \n+    public Nestable getNestable(String msg, Nestable n)\n+    {\n+        return new NestableRuntimeException(msg, (Throwable) n);\n+    }\n+    \n+    public Nestable getTester1(Throwable t)\n+    {\n+        return new NestableRuntimeExceptionTester1(t);\n+    }\n+    \n+    public Nestable getTester1(Nestable n)\n+    {\n+        return new NestableRuntimeExceptionTester1((Throwable) n);\n+    }\n+    \n+    public Nestable getTester1(String msg, Throwable t)\n+    {\n+        return new NestableRuntimeExceptionTester1(msg, t);\n+    }\n+    \n+    public Nestable getTester1(String msg, Nestable n)\n+    {\n+        return new NestableRuntimeExceptionTester1(msg, (Throwable) n);\n+    }\n+    \n+    public Class getTester1Class()\n+    {\n+        return NestableRuntimeExceptionTester1.class;\n+    }\n+    \n+    public Nestable getTester2(String msg, Throwable t)\n+    {\n+        return new NestableRuntimeExceptionTester2(msg, t);\n+    }\n+    \n+    public Nestable getTester2(String msg, Nestable n)\n+    {\n+        return new NestableRuntimeExceptionTester1(msg, (Throwable) n);\n+    }\n+    \n+    public Class getTester2Class()\n+    {\n+        return NestableRuntimeExceptionTester2.class;\n+    }\n+    \n+    public Throwable getThrowable(String msg)\n+    {\n+        return new RuntimeException(msg);\n+    }\n+    \n+    public Class getThrowableClass()\n+    {\n+        return RuntimeException.class;\n+    }\n+    \n }\n \n class NestableRuntimeExceptionTester1 extends NestableRuntimeException", "timestamp": 1031768213, "metainfo": ""}