{"sha": "58d95f78d02133da8424319302d28e827a0786e2", "log": "Add a flag so that unused variable removal can be enabled for local scopes only.  R=acleung DELTA=117  (106 added, 0 deleted, 11 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=358567   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CompilationLevel.java\n+++ b/src/com/google/javascript/jscomp/CompilationLevel.java\n     options.labelRenaming = true;\n     options.removeDeadCode = true;\n     options.optimizeArgumentsArray = true;\n-    options.removeUnusedVars = true;\n-    options.removeUnusedVarsInGlobalScope = false;\n+    options.removeUnusedVars = false;\n+    options.removeUnusedLocalVars = true;\n \n     // Allows annotations that are not standard.\n     options.setWarningLevel(DiagnosticGroups.NON_STANDARD_JSDOC,\n     \n     // Remove unused vars also removes unused functions.\n     options.removeUnusedVars = true;\n-    options.removeUnusedVarsInGlobalScope = true;\n+    options.removeUnusedLocalVars = true;\n \n     // Move code around based on the defined modules.\n     options.crossModuleCodeMotion = true;\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n   /** Removes unused variables */\n   public boolean removeUnusedVars;\n \n-  /** Removes unused variables in global scope. */\n-  public boolean removeUnusedVarsInGlobalScope;\n+  /** Removes unused variables in local scope. */\n+  public boolean removeUnusedLocalVars;\n \n   /** Adds variable aliases for externals to reduce code size */\n   public boolean aliasExternals;\n     removeUnusedPrototypeProperties = false;\n     removeUnusedPrototypePropertiesInExterns = false;\n     removeUnusedVars = false;\n-    removeUnusedVarsInGlobalScope = true;\n+    removeUnusedLocalVars = false;\n     aliasExternals = false;\n     collapseVariableDeclarations = false;\n     groupVariableDeclarations = false;\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n       passes.add(inlineFunctions);\n     }\n \n-    if (options.removeUnusedVars) {\n+    if (options.removeUnusedVars || options.removeUnusedLocalVars) {\n       if (options.deadAssignmentElimination) {\n         passes.add(deadAssignmentsElimination);\n       }\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      boolean removeOnlyLocals = options.removeUnusedLocalVars\n+          && !options.removeUnusedVars;\n       boolean preserveAnonymousFunctionNames =\n-        options.anonymousFunctionNaming != AnonymousFunctionNamingPolicy.OFF;\n+          options.anonymousFunctionNaming != AnonymousFunctionNamingPolicy.OFF;\n       return new RemoveUnusedVars(\n           compiler,\n-          options.removeUnusedVarsInGlobalScope,\n+          !removeOnlyLocals,\n           preserveAnonymousFunctionNames);\n     }\n   };\n--- a/src/com/google/javascript/jscomp/jsonml/SecureCompiler.java\n+++ b/src/com/google/javascript/jscomp/jsonml/SecureCompiler.java\n     options.labelRenaming = true;\n     options.removeDeadCode = true;\n     options.optimizeArgumentsArray = true;\n-    options.removeUnusedVars = true;\n-    options.removeUnusedVarsInGlobalScope = false;\n+    options.removeUnusedVars = false;\n+    options.removeUnusedLocalVars = true;\n \n     return options;\n   }", "timestamp": 1287526974, "metainfo": ""}