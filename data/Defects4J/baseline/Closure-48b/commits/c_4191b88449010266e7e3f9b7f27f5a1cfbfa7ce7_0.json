{"sha": "4191b88449010266e7e3f9b7f27f5a1cfbfa7ce7", "log": "Nicer descriptions for the flags api.    ", "commit": "\n--- a/src/com/google/javascript/jscomp/AbstractCompilerRunner.java\n+++ b/src/com/google/javascript/jscomp/AbstractCompilerRunner.java\n       docLevel = DocLevel.SECRET)\n   public static final Flag<Boolean> FLAG_print_ast = Flag.value(false);\n \n-  @FlagSpec(help = \"Turns on extra sanity checks.\", altName = \"dev_mode\",\n+  @FlagSpec(help = \"Turns on extra sanity checks\", altName = \"dev_mode\",\n       docLevel = DocLevel.SECRET)\n   public static final Flag<CompilerOptions.DevMode> FLAG_jscomp_dev_mode =\n       Flag.value(CompilerOptions.DevMode.OFF);\n \n   @FlagSpec(help = \"The logging level (standard java.util.logging.Level\"\n       + \" values) for Compiler progress. Does not control errors or\"\n-      + \" warnings for the JavaScript code under compilation.\",\n+      + \" warnings for the JavaScript code under compilation\",\n       docLevel = DocLevel.SECRET)\n   public static final Flag<String> FLAG_logging_level =\n       Flag.value(Level.WARNING.getName());\n   public static final Flag<List<String>> FLAG_js = Flag.stringCollector();\n \n   @FlagSpec(help = \"Primary output filename. If not specified, output is \" +\n-            \"written to stdout.\")\n+            \"written to stdout\")\n   static final Flag<String> FLAG_js_output_file = Flag.value(\"\");\n \n   @FlagSpec(help = \"A javascript module specification. The format is \"\n       + \"unique. Each dep is the name of a module that this module \"\n       + \"depends on. Modules must be listed in dependency order, and js \"\n       + \"source files must be listed in the corresponding order. Where \"\n-      + \"--module flags occur in relation to --js flags is unimportant.\")\n+      + \"--module flags occur in relation to --js flags is unimportant\")\n   public static final Flag<List<String>> FLAG_module = Flag.stringCollector();\n \n   @FlagSpec(help = \"File containing the serialized version of the variable \"\n-      + \"renaming map produced by a previous compilation.\")\n+      + \"renaming map produced by a previous compilation\")\n   public static final Flag<String> FLAG_variable_map_input_file =\n       Flag.value(\"\");\n \n   @FlagSpec(help = \"File containing the serialized version of the property \"\n-      + \"renaming map produced by a previous compilation.\",\n+      + \"renaming map produced by a previous compilation\",\n       docLevel = DocLevel.SECRET)\n   public static final Flag<String> FLAG_property_map_input_file =\n       Flag.value(\"\");\n \n   @FlagSpec(help = \"File where the serialized version of the variable \"\n-      + \"renaming map produced should be saved.\",\n+      + \"renaming map produced should be saved\",\n       docLevel = DocLevel.SECRET)\n   public static final Flag<String> FLAG_variable_map_output_file =\n       Flag.value(\"\");\n       + \"files will be produced as {binary name}_vars_map.out and \"\n       + \"{binary name}_props_map.out. Note that this flag cannot be used \"\n       + \"in conjunction with either variable_map_output_file or \"\n-      + \"property_map_output_file.\",\n+      + \"property_map_output_file\",\n       docLevel = DocLevel.SECRET)\n   public static final Flag<Boolean> FLAG_create_name_map_files =\n       Flag.value(false);\n \n   @FlagSpec(help = \"File where the serialized version of the property \"\n-      + \"renaming map produced should be saved.\")\n+      + \"renaming map produced should be saved\")\n   public static final Flag<String> FLAG_property_map_output_file =\n       Flag.value(\"\");\n \n-  @FlagSpec(help = \"Check source validity but do not enforce Google style \"\n-      + \"rules and conventions, such as capitalized constant names or \"\n-      + \"opt_parameter.\")\n+  @FlagSpec(help = \"Check source validity but do not enforce Closure style \"\n+      + \"rules and conventions\")\n   public static final Flag<Boolean> FLAG_third_party = Flag.value(false);\n \n \n       + \" 0 (never print summary), 1 (print summary only if there are \"\n       + \"errors or warnings), 2 (print summary if type checking is on, \"\n       + \"see --check_types), 3 (always print summary). The default level \"\n-      + \"is 1.\")\n+      + \"is 1\")\n   public static final Flag<Integer> FLAG_summary_detail_level = Flag.value(1);\n \n   @FlagSpec(help = \"Interpolate output into this string at the place denoted\"\n   @FlagSpec(help = \"An output wrapper for a javascript module (optional). \"\n       + \"The format is <name>:<wrapper>. The module name must correspond \"\n       + \"with a module specified using --module. The wrapper must \"\n-      + \"contain %s as the code placeholder.\")\n+      + \"contain %s as the code placeholder\")\n   public static final Flag<List<String>> FLAG_module_wrapper =\n       Flag.stringCollector();\n \n   @FlagSpec(help = \"Prefix for filenames of compiled js modules. \"\n       + \"<module-name>.js will be appended to this prefix. Directories \"\n-      + \"will be created as needed. Use with --module.\")\n+      + \"will be created as needed. Use with --module\")\n   public static final Flag<String> FLAG_module_output_path_prefix =\n       Flag.value(\"./\");\n \n             \"source files back to the original source file will be \" +\n             \"output to the specified path. If %module% is added, \" +\n             \"a source map will be generated for each module, with the \" +\n-            \" module's name placed into the path at that spot.\")\n+            \" module's name placed into the path at that spot\")\n   public static final Flag<String> FLAG_create_source_map =\n       Flag.value(\"\");\n \n-  @FlagSpec(help = \"Make the named class of warnings an error.\")\n+  @FlagSpec(help = \"Make the named class of warnings an error. Options:\" +\n+      DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n   public static final Flag<List<String>> FLAG_jscomp_error =\n       Flag.stringCollector();\n \n-  @FlagSpec(help = \"Make the named class of warnings a normal warning.\")\n+  @FlagSpec(help = \"Make the named class of warnings a normal warning. \" +\n+  \t\t\"Options:\" + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n   public static final Flag<List<String>> FLAG_jscomp_warning =\n       Flag.stringCollector();\n \n-  @FlagSpec(help = \"Turn off the named class of warnings.\")\n+  @FlagSpec(help = \"Turn off the named class of warnings. Options:\" +\n+      DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n   public static final Flag<List<String>> FLAG_jscomp_off =\n       Flag.stringCollector();\n \n       \"The format is <name>[=<val>], where <name> is the name of a @define \" +\n       \"variable and <val> is a boolean, number, or a single-quoted string \" +\n       \"that contains no single quotes. If [=<val>] is omitted, \" +\n-      \"the variable is marked true.\")\n+      \"the variable is marked true\")\n   public static final Flag<List<String>> FLAG_define = Flag.stringCollector();\n \n   @FlagSpec(help = \"Input charset for all files.\")\n--- a/src/com/google/javascript/jscomp/CompilerRunner.java\n+++ b/src/com/google/javascript/jscomp/CompilerRunner.java\n   static final Flag<WarningLevel> FLAG_warning_level\n       = Flag.value(WarningLevel.DEFAULT);\n \n-  @FlagSpec(help = \"Specifies whether the default externs should be excluded.\")\n+  @FlagSpec(help = \"Specifies whether the default externs should be excluded\")\n   static final Flag<Boolean> FLAG_use_only_custom_externs\n       = Flag.value(false);\n \n-  @FlagSpec(help = \"Enable debugging opitons.\")\n-  static final Flag<Boolean> FLAG_debug\n-      = Flag.value(false);\n+  @FlagSpec(help = \"Enable debugging options\")\n+  static final Flag<Boolean> FLAG_debug = Flag.value(false);\n \n   /**\n    * Set of options that can be used with the --formatting flag.\n   }\n \n   @FlagSpec(help = \"Specifies which formatting options, if any, should be \"\n-      + \"applied to the output JS\")\n+      + \"applied to the output JS. Options: \"\n+      + \"PRETTY_PRINT, PRINT_INPUT_DELIMITER\")\n   static final Flag<List<FormattingOption>> FLAG_formatting\n       = Flag.enumList(FormattingOption.class);\n \n   @FlagSpec(help = \"Processes built-ins from the Closure library, such as \"\n-      + \"goog.require(), goog.provide(), and goog.exportSymbol().\")\n+      + \"goog.require(), goog.provide(), and goog.exportSymbol()\")\n   static final Flag<Boolean> FLAG_process_closure_primitives\n       = Flag.value(true);\n \n--- a/src/com/google/javascript/jscomp/DiagnosticGroups.java\n+++ b/src/com/google/javascript/jscomp/DiagnosticGroups.java\n   DiagnosticGroup forName(String name) {\n     return groupsByName.get(name);\n   }\n+\n+  // A bit a hack to display the available groups on the command-line.\n+  // New groups should be added to this list if they are public and should\n+  // be listed on the command-line as an available option.\n+  static final String DIAGNOSTIC_GROUP_NAMES = \"accessControls, checkVars, \" +\n+      \"deprecated, fileoverviewTags, invalidCasts, missingProperties, \" +\n+      \"nonStandardJsDocs, strictModuleDepCheck, undefinedVars, \" +\n+      \"unknownDefines, visibility\";\n \n   public static DiagnosticGroup DEPRECATED = DiagnosticGroups\n       .registerGroup(\"deprecated\",", "timestamp": 1261099057, "metainfo": ""}