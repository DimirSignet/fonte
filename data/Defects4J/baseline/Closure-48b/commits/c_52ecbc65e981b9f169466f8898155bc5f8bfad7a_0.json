{"sha": "52ecbc65e981b9f169466f8898155bc5f8bfad7a", "log": "Add some new externs files: webkit notifications, web storage, and file access.  Fix a minor bug in type checking 'in' operators.  Fix a bug in warnings filtering.  Add a @javadispatch annotation.    ", "commit": "\n--- a/src/com/google/javascript/jscomp/ComposeWarningsGuard.java\n+++ b/src/com/google/javascript/jscomp/ComposeWarningsGuard.java\n  */\n public class ComposeWarningsGuard extends WarningsGuard {\n \n-  private final PriorityQueue<WarningsGuard> guards;\n+  private final List<WarningsGuard> guards;\n+  private static final Comparator<WarningsGuard> guardComparator =\n+      new Comparator<WarningsGuard>() {\n+    @Override\n+    public int compare(WarningsGuard a, WarningsGuard b) {\n+      return a.getPriority() - b.getPriority();\n+    }\n+  };\n \n   public ComposeWarningsGuard(List<WarningsGuard> guards) {\n-    this.guards = new PriorityQueue<WarningsGuard>(\n-        5,\n-        new Comparator<WarningsGuard>() {\n-      @Override\n-      public int compare(WarningsGuard a, WarningsGuard b) {\n-        return a.getPriority() - b.getPriority();\n-      }\n-    });\n+    this.guards = Lists.newArrayList();\n     addGuards(guards);\n   }\n \n     if (guard instanceof ComposeWarningsGuard) {\n       addGuards(((ComposeWarningsGuard) guard).guards);\n     } else {\n-      this.guards.add(guard);\n+      int index = Collections.binarySearch(this.guards, guard, guardComparator);\n+      if (index < 0) {\n+        index = -index - 1;\n+      }\n+      this.guards.add(index, guard);\n     }\n   }\n \n \n     return false;\n   }\n+  \n+  List<WarningsGuard> getGuards() {\n+    return Collections.unmodifiableList(guards);\n+  }\n }\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n       case Token.SHEQ:\n       case Token.SHNE:\n       case Token.INSTANCEOF:\n+      case Token.IN:\n       case Token.TRUE:\n       case Token.FALSE:\n         scope = traverseChildren(n, scope);\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n       put(\"implicitCast\", Annotation.IMPLICIT_CAST).\n       put(\"inheritDoc\", Annotation.INHERIT_DOC).\n       put(\"interface\", Annotation.INTERFACE).\n+      put(\"javadispatch\", Annotation.JAVA_DISPATCH).\n       put(\"license\", Annotation.LICENSE).\n       put(\"noalias\", Annotation.NO_ALIAS).\n       put(\"noshadow\", Annotation.NO_SHADOW).\n     IMPLICIT_CAST,\n     INHERIT_DOC,\n     INTERFACE,\n+    JAVA_DISPATCH,\n     LICENSE, // same as preserve\n     NO_ALIAS,\n     NO_SHADOW,\n                 case EXTERNS:\n                   if (!jsdocBuilder.recordExterns()) {\n                     parser.addWarning(\"msg.jsdoc.externs\",\n+                        stream.getLineno(), stream.getCharno());\n+                  }\n+                  token = eatTokensUntilEOL();\n+                  continue retry;\n+\n+                case JAVA_DISPATCH:\n+                  if (!jsdocBuilder.recordJavaDispatch()) {\n+                    parser.addWarning(\"msg.jsdoc.javadispatch\",\n                         stream.getLineno(), stream.getCharno());\n                   }\n                   token = eatTokensUntilEOL();\n--- a/src/com/google/javascript/rhino/JSDocInfo.java\n+++ b/src/com/google/javascript/rhino/JSDocInfo.java\n   private static final int MASK_IMPLICITCAST  = 0x00002000; // @implicitCast\n   private static final int MASK_NOSIDEEFFECTS = 0x00004000; // @nosideeffects\n   private static final int MASK_EXTERNS       = 0x00008000; // @externs\n+  private static final int MASK_JAVADISPATCH  = 0x00010000; // @javadispath\n \n   // 3 bit type field stored in the top 3 bits of the most significant\n   // nibble.\n     setFlag(value, MASK_EXTERNS);\n   }\n \n+  void setJavaDispatch(boolean value) {\n+    setFlag(value, MASK_JAVADISPATCH);\n+  }\n+\n   private void setFlag(boolean value, int mask) {\n     if (value) {\n       bitset |= mask;\n     return getFlag(MASK_EXTERNS);\n   }\n \n+  /**\n+   * Returns whether the {@code @javadispath} annotation is present on this\n+   * {@link JSDocInfo}.\n+   */\n+  public boolean isJavaDispatch() {\n+    return getFlag(MASK_JAVADISPATCH);\n+  }\n+\n   private boolean getFlag(int mask) {\n     return (bitset & mask) != 0x00;\n   }\n--- a/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n+++ b/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n \n   /**\n    * Records that the {@link JSDocInfo} being built should have its\n+   * {@link JSDocInfo#isJavaDispatch()} flag set to {@code true}.\n+   *\n+   * @return {@code true} if the javadispatch was recorded and {@code false}\n+   *     if it was already defined or it was incompatible with the existing\n+   *     flags\n+   */\n+  public boolean recordJavaDispatch() {\n+    if (!currentInfo.isJavaDispatch()) {\n+      currentInfo.setJavaDispatch(true);\n+      populated = true;\n+      return true;\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * Whether the {@link JSDocInfo} being built will have its\n+   * {@link JSDocInfo#isJavaDispatch()} flag set to {@code true}.\n+   */\n+  public boolean isJavaDispatch() {\n+    return currentInfo.isJavaDispatch();\n+  }\n+\n+  /**\n+   * Records that the {@link JSDocInfo} being built should have its\n    * {@link JSDocInfo#shouldPreserveTry()} flag set to {@code true}.\n    */\n   public boolean recordPreserveTry() {\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"'in' requires an object\\n\" +\n         \"found   : null\\n\" +\n         \"required: Object\");\n+  }\n+\n+  public void testIn6() throws Exception {\n+    testTypes(\n+        \"/** @param {number} x */\" +\n+        \"function g(x) {}\" +\n+        \"g(1 in {});\",\n+        \"actual parameter 1 of g does not match formal parameter\\n\" +\n+        \"found   : boolean\\n\" +\n+        \"required: number\");\n+  }\n+\n+  public void testIn7() throws Exception {\n+    // Make sure we do inference in the 'in' expression.\n+    testTypes(\n+        \"/**\\n\" +\n+        \" * @param {number} x\\n\" +\n+        \" * @return {number}\\n\" +\n+        \" */\\n\" +\n+        \"function g(x) { return 5; }\" +\n+        \"function f() {\" +\n+        \"  var x = {};\" +\n+        \"  x.foo = '3';\" +\n+        \"  return g(x.foo) in {};\" +\n+        \"}\",\n+        \"actual parameter 1 of g does not match formal parameter\\n\" +\n+        \"found   : string\\n\" +\n+        \"required: number\");\n   }\n \n   // TODO(nicksantos): change this to something that makes sense.\n--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n \n   public void testParseExterns3() throws Exception {\n     assertNull(parse(\"@externs*/\"));\n+  }\n+\n+  public void testParseJavaDispatch1() throws Exception {\n+    assertTrue(parse(\"@javadispatch*/\").isJavaDispatch());\n+  }\n+\n+  public void testParseJavaDispatch2() throws Exception {\n+    parse(\"@javadispatch\\n@javadispatch*/\",\n+        \"extra @javadispatch tag\");\n+  }\n+\n+  public void testParseJavaDispatch3() throws Exception {\n+    assertNull(parseFileOverview(\"@javadispatch*/\"));\n   }\n \n   public void testBugAnnotation() throws Exception {", "timestamp": 1264715578, "metainfo": ""}