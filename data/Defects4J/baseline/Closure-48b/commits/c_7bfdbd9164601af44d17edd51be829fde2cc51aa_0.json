{"sha": "7bfdbd9164601af44d17edd51be829fde2cc51aa", "log": "Adds an 'originalPath' property to SourceFile.  Add @author annotations for people that are ok with their names being published.  Revision created by MOE tool push_codebase. MOE_MIGRATION=   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n  * }\n  * </pre>\n  *\n-*\n+ * @author bolinfest@google.com (Michael Bolin)\n  */\n abstract class AbstractCommandLineRunner<A extends Compiler,\n     B extends CompilerOptions> {\n--- a/src/com/google/javascript/jscomp/AbstractCompiler.java\n+++ b/src/com/google/javascript/jscomp/AbstractCompiler.java\n  *\n  * This is an abstract class, so that we can make the methods package-private.\n  *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public abstract class AbstractCompiler implements SourceExcerptProvider {\n   static final DiagnosticType READ_ERROR = DiagnosticType.error(\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n  * similar semantics.\n  *\n *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n class AnalyzePrototypeProperties implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n  * it's important that TypeCheck runs before this pass, so that all types\n  * are correctly resolved and propagated before this pass runs.\n  *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n class CheckAccessControls implements ScopedCallback, CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/CheckGlobalNames.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalNames.java\n /**\n  * Checks references to undefined properties of global variables.\n  *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n class CheckGlobalNames implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/CodeChangeHandler.java\n+++ b/src/com/google/javascript/jscomp/CodeChangeHandler.java\n \n /**\n  * A simple listener for code change events.\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n interface CodeChangeHandler {\n \n--- a/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\n+++ b/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\n  * <pre>var c = b = a = true;</pre>\n  *\n *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n class CollapseVariableDeclarations implements CompilerPass {\n   /** Reference to JS Compiler */\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n  *   }\n  * }\n  * </pre>\n-*\n+ * @author bolinfest@google.com (Michael Bolin)\n  */\n public class CommandLineRunner extends\n     AbstractCommandLineRunner<Compiler, CompilerOptions> {\n--- a/src/com/google/javascript/jscomp/CompilationLevel.java\n+++ b/src/com/google/javascript/jscomp/CompilationLevel.java\n  * A CompilationLevel represents the level of optimization that should be\n  * applied when compiling JavaScript code.\n  *\n-*\n+ * @author bolinfest@google.com (Michael Bolin)\n  */\n public enum CompilationLevel {\n \n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n \n /**\n  * Compiler options\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class CompilerOptions implements Serializable, Cloneable {\n   private static final long serialVersionUID = 7L;\n--- a/src/com/google/javascript/jscomp/CrossModuleMethodMotion.java\n+++ b/src/com/google/javascript/jscomp/CrossModuleMethodMotion.java\n /**\n  * Move prototype methods into later modules.\n  *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n class CrossModuleMethodMotion implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n /**\n  * Pass factories and meta-data for native JSCompiler passes.\n  *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n // TODO(nicksantos): This needs state for a variety of reasons. Some of it\n // is to satisfy the existing API. Some of it is because passes really do\n--- a/src/com/google/javascript/jscomp/Denormalize.java\n+++ b/src/com/google/javascript/jscomp/Denormalize.java\n  * becomes:\n  *   for(var a = 0;a<0;a++) {}\n  *\n-*\n+ * @author johnlenz@google.com (johnlenz)\n  */\n class Denormalize implements CompilerPass, Callback {\n \n--- a/src/com/google/javascript/jscomp/DiagnosticGroup.java\n+++ b/src/com/google/javascript/jscomp/DiagnosticGroup.java\n /**\n  * Group a set of related diagnostic types together, so that they can\n  * be toggled on and off as one unit.\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class DiagnosticGroup {\n \n--- a/src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java\n+++ b/src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java\n \n /**\n  * Sets the level for a particular DiagnosticGroup.\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class DiagnosticGroupWarningsGuard extends WarningsGuard {\n   private final DiagnosticGroup group;\n--- a/src/com/google/javascript/jscomp/DiagnosticGroups.java\n+++ b/src/com/google/javascript/jscomp/DiagnosticGroups.java\n \n /**\n  * Named groups of DiagnosticTypes exposed by Compiler.\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class DiagnosticGroups {\n \n--- a/src/com/google/javascript/jscomp/ExpressionDecomposer.java\n+++ b/src/com/google/javascript/jscomp/ExpressionDecomposer.java\n  *    var b = z();\n  *    x = a + b;\n  *\n-*\n+ * @author johnlenz@google.com (John Lenz)\n  */\n class ExpressionDecomposer {\n \n--- a/src/com/google/javascript/jscomp/FlowScope.java\n+++ b/src/com/google/javascript/jscomp/FlowScope.java\n  * Each flow scope represents the types of all variables in the scope at\n  * a particular point in the flow analysis.\n  *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n interface FlowScope extends StaticScope<JSType>, LatticeElement {\n \n--- a/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\n  * A nifty set of functions to deal with the issues of replacing function\n  * parameters with a set of call argument expressions.\n  *\n-*\n+ * @author johnlenz@google.com (John Lenz)\n  */\n class FunctionArgumentInjector {\n \n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n  * FUNCTION body, replacing and aliasing function parameters as\n  * necessary.\n  *\n-*\n+ * @author johnlenz@google.com (John Lenz)\n  */\n class FunctionInjector {\n \n--- a/src/com/google/javascript/jscomp/FunctionToBlockMutator.java\n+++ b/src/com/google/javascript/jscomp/FunctionToBlockMutator.java\n  * A class to transform the body of a function into a generic block suitable\n  * for inlining.\n  *\n-*\n+ * @author johnlenz@google.com (John Lenz)\n  */\n class FunctionToBlockMutator {\n \n--- a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n+++ b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n  * But it depends on some coding convention stuff that's really part\n  * of JSCompiler.\n  *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n *\n  */\n final class FunctionTypeBuilder {\n--- a/src/com/google/javascript/jscomp/GatherRawExports.java\n+++ b/src/com/google/javascript/jscomp/GatherRawExports.java\n  * External references of the form: \"window['xx']\" indicate names that must\n  * be reserved when variable renaming to avoid conflicts.\n  *\n-*\n+ * @author johnlenz@google.com (John Lenz)\n  */\n class GatherRawExports extends AbstractPostOrderCallback\n     implements CompilerPass {\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n  *\n *\n *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n class GlobalNamespace {\n \n--- a/src/com/google/javascript/jscomp/InferJSDocInfo.java\n+++ b/src/com/google/javascript/jscomp/InferJSDocInfo.java\n  * slot of Foo.prototype, and on the anonymous function type created by\n  * this expression.\n  *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n class InferJSDocInfo extends AbstractPostOrderCallback\n     implements CompilerPass {\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n  * - consists of a single return statement\n  *\n *\n-*\n+ * @author johnlenz@google.com (John Lenz)\n  */\n class InlineFunctions implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n  *\n  * The approach of this pass is similar to {@link CrossModuleCodeMotion}\n  *\n-*\n-*\n+ * @author kushal@google.com (Kushal Dave)\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n class InlineVariables implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/JSSourceFile.java\n+++ b/src/com/google/javascript/jscomp/JSSourceFile.java\n  * An abstract representation of a JavaScript source file, as input to\n  * JSCompiler.\n  *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n *\n  */\n public class JSSourceFile extends SourceFile {\n--- a/src/com/google/javascript/jscomp/LineNumberCheck.java\n+++ b/src/com/google/javascript/jscomp/LineNumberCheck.java\n  * A simple pass to ensure that all AST nodes have line numbers,\n  * an that the line numbers are monotonically increasing.\n  *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n class LineNumberCheck implements Callback, CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/LinkedFlowScope.java\n+++ b/src/com/google/javascript/jscomp/LinkedFlowScope.java\n  * A flow scope that tries to store as little symbol information as possible,\n  * instead delegating to its parents. Optimized for low memory use.\n  *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n class LinkedFlowScope implements FlowScope {\n   // The closest flow scope cache.\n--- a/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java\n+++ b/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java\n /**\n  *  Find all Functions, VARs, and Exception names and make them\n  *  unique.  Specifically, it will not modify object properties.\n-*\n+ *  @author johnlenz@google.com (John Lenz)\n  *  TODO(johnlenz): Try to merge this with the ScopeCreator.\n  */\n class MakeDeclaredNamesUnique\n--- a/src/com/google/javascript/jscomp/MemoizedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/MemoizedScopeCreator.java\n  * are doing. Scopes are memoized stupidly, so if the underlying tree\n  * changes, the scope may be out of sync.\n  *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n class MemoizedScopeCreator implements ScopeCreator {\n \n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n  * Transform the structure of the AST so that the number of explicit exits\n  * are minimized.\n  *\n-*\n+ * @author johnlenz@google.com (John Lenz)\n  */\n class MinimizeExitPoints\n     extends AbstractPostOrderCallback\n--- a/src/com/google/javascript/jscomp/NodeIterators.java\n+++ b/src/com/google/javascript/jscomp/NodeIterators.java\n  *\n  * All iterators are forward, post-order traversals unless otherwise noted.\n  *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n class NodeIterators {\n \n--- a/src/com/google/javascript/jscomp/Normalize.java\n+++ b/src/com/google/javascript/jscomp/Normalize.java\n  * 3) Removes duplicate variable declarations.\n  * 4) Marks constants with the IS_CONSTANT_NAME annotation.\n  *\n-*\n+ * @author johnlenz@google.com (johnlenz)\n  */\n // public for ReplaceDebugStringsTest\n class Normalize implements CompilerPass {\n--- a/src/com/google/javascript/jscomp/PassConfig.java\n+++ b/src/com/google/javascript/jscomp/PassConfig.java\n /**\n  * Pass factories and meta-data for native Compiler passes.\n  *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public abstract class PassConfig {\n \n--- a/src/com/google/javascript/jscomp/PassFactory.java\n+++ b/src/com/google/javascript/jscomp/PassFactory.java\n  * whether it can be run multiple times, a human-readable name for\n  * logging, etc.).\n  *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public abstract class PassFactory {\n \n--- a/src/com/google/javascript/jscomp/PhaseOptimizer.java\n+++ b/src/com/google/javascript/jscomp/PhaseOptimizer.java\n \n /**\n  * Optimizes the order of compiler passes.\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n class PhaseOptimizer implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n  * on the tree that would lose source information, since we need that source\n  * information for checks.\n  *\n-*\n+ * @author johnlenz@google.com (John Lenz)\n  */\n class PrepareAst implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/ProcessDefines.java\n+++ b/src/com/google/javascript/jscomp/ProcessDefines.java\n  * a special constant that may be overridden by later files and\n  * manipulated by the compiler, much like C preprocessor {@code #define}s.\n  *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n class ProcessDefines implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n  * warnings. Callers do this by providing {@link Behavior} and then\n  * calling {@link #process(Node, Node)}.\n  *\n-*\n+ * @author kushal@google.com (Kushal Dave)\n  */\n class ReferenceCollectingCallback implements ScopedCallback, CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java\n  * Removes unused properties from prototypes.\n  *\n *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n class RemoveUnusedPrototypeProperties implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/RenameLabels.java\n+++ b/src/com/google/javascript/jscomp/RenameLabels.java\n  * unreferenced, it is known when the label node is visited, and, if so, can be\n  * safely removed.\n  *\n-*\n+ * @author johnlenz@google.com (John Lenz)\n  */\n final class RenameLabels implements CompilerPass {\n   private final AbstractCompiler compiler;\n--- a/src/com/google/javascript/jscomp/RhinoErrorReporter.java\n+++ b/src/com/google/javascript/jscomp/RhinoErrorReporter.java\n \n /**\n  * An error reporter for serizalizing Rhino errors into our error format.\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n class RhinoErrorReporter {\n \n--- a/src/com/google/javascript/jscomp/SanityCheck.java\n+++ b/src/com/google/javascript/jscomp/SanityCheck.java\n  * we only run this in development mode.\n  *\n *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n class SanityCheck implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/SourceFile.java\n+++ b/src/com/google/javascript/jscomp/SourceFile.java\n  * language-neutral features. The source file can be loaded from various\n  * locations, such as from disk or from a preloaded string.\n  *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public abstract class SourceFile {\n \n \n   private final String fileName;\n \n+  // The fileName may not always identify the original file - for example,\n+  // supersourced Java inputs, or Java inputs that come from Jar files. This\n+  // is an optional field that the creator of an AST or SourceFile can set.\n+  // It could be a path to the original file, or in case this SourceFile came\n+  // from a Jar, it could be the path to the Jar.\n+  private String originalPath = null;\n+\n   // Remember the offset for the previous line query.  If the next line\n   // is after this point, we can start scanning at the previous offset rather\n   // than starting at the beginning of the file.\n   //////////////////////////////////////////////////////////////////////////////\n   // Implementation\n \n-  /** \n-   * Gets all the code in this source file. \n-   * @throws IOException \n+  /**\n+   * Gets all the code in this source file.\n+   * @throws IOException\n    */\n   public String getCode() throws IOException {\n     return code;\n \n   private void setCode(String sourceCode) {\n     code = sourceCode;\n+  }\n+\n+  public String getOriginalPath() {\n+    return originalPath != null ? originalPath : fileName;\n+  }\n+\n+  public void setOriginalPath(String originalPath) {\n+    this.originalPath = originalPath;\n   }\n \n   // For SourceFile types which cache source code that can be regenerated\n     return new Preloaded(fileName, code);\n   }\n \n+  public static SourceFile fromCode(String fileName,\n+      String originalPath, String code) {\n+    return new Preloaded(fileName, originalPath, code);\n+  }\n+\n   public static SourceFile fromInputStream(String fileName, InputStream s)\n       throws IOException {\n     return fromCode(fileName,\n         CharStreams.toString(new InputStreamReader(s, Charsets.UTF_8)));\n   }\n \n+  public static SourceFile fromInputStream(String fileName,\n+      String originalPath, InputStream s) throws IOException {\n+    return fromCode(fileName, originalPath,\n+        CharStreams.toString(new InputStreamReader(s, Charsets.UTF_8)));\n+  }\n+\n   public static SourceFile fromReader(String fileName, Reader r)\n       throws IOException {\n     return fromCode(fileName, CharStreams.toString(r));\n   static class Preloaded extends SourceFile {\n \n     Preloaded(String fileName, String code) {\n+      this(fileName, fileName, code);\n+    }\n+\n+    Preloaded(String fileName, String originalPath, String code) {\n       super(fileName);\n+      super.setOriginalPath(originalPath);\n       super.setCode(code);\n     }\n   }\n     // No Charset provided?\n     OnDisk(File file) {\n       super(file.getPath());\n-      this.file = file;     \n+      this.file = file;\n     }\n \n     @Override\n      */\n     public Charset getCharset() {\n       return Charset.forName(inputCharset);\n-    }    \n+    }\n   }\n }\n--- a/src/com/google/javascript/jscomp/Strings.java\n+++ b/src/com/google/javascript/jscomp/Strings.java\n  * until they're able to do that. A lot of these methods are discouraged\n  * anyways.\n  *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n class Strings {\n   private Strings() {} // All static\n--- a/src/com/google/javascript/jscomp/SymbolTable.java\n+++ b/src/com/google/javascript/jscomp/SymbolTable.java\n  * then it should not use the symbol table--it should directly invoke\n  * the factory for the data structure it wants.\n  *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n class SymbolTable implements ScopeCreator, CodeChangeHandler {\n   static final DiagnosticType MISSING_VARIABLE =\n--- a/src/com/google/javascript/jscomp/SyntheticAst.java\n+++ b/src/com/google/javascript/jscomp/SyntheticAst.java\n /**\n  * An AST generated totally by the compiler.\n  *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n class SyntheticAst implements SourceAst {\n   private static final long serialVersionUID = 1L;\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n  *\n *\n *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/TypeValidator.java\n+++ b/src/com/google/javascript/jscomp/TypeValidator.java\n  * Also doubles as a central repository for all type violations, so that\n  * type-based optimizations (like AmbiguateProperties) can be fault-tolerant.\n  *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n class TypeValidator {\n \n--- a/src/com/google/javascript/jscomp/VariableReferenceCheck.java\n+++ b/src/com/google/javascript/jscomp/VariableReferenceCheck.java\n  * control structures). This is a more aggressive version of {@link VarCheck},\n  * but it lacks the cross-module checks.\n  *\n-*\n+ * @author kushal@google.com (Kushal Dave)\n  */\n class VariableReferenceCheck implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/graph/FixedPointGraphTraversal.java\n+++ b/src/com/google/javascript/jscomp/graph/FixedPointGraphTraversal.java\n  * the edges over the given directed graph until the graph reaches\n  * a steady state.\n  *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  *\n  * @param <N> Value type that the graph node stores.\n  * @param <E> Value type that the graph edge stores.\n--- a/src/com/google/javascript/jscomp/parsing/Annotation.java\n+++ b/src/com/google/javascript/jscomp/parsing/Annotation.java\n \n /**\n  * All natively recognized JSDoc annotations.\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n enum Annotation {\n   AUTHOR,\n--- a/src/com/google/javascript/jscomp/parsing/Config.java\n+++ b/src/com/google/javascript/jscomp/parsing/Config.java\n  * Configuration for the AST factory. Should be shared across AST creation\n  * for all files of a compilation process.\n  *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class Config {\n \n--- a/src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java\n+++ b/src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java\n \n /**\n  * A simple source excerpt provider for testing.\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class SimpleSourceExcerptProvider implements SourceExcerptProvider {\n \n--- a/src/com/google/javascript/rhino/JSTypeExpression.java\n+++ b/src/com/google/javascript/rhino/JSTypeExpression.java\n  * Represents a type expression as a miniture Rhino AST, so that the\n  * type expression can be evaluated later.\n  *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public final class JSTypeExpression implements Serializable {\n   private static final long serialVersionUID = 1L;\n--- a/src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java\n \n /**\n  * A builder for the Rhino Node representing Function parameters.\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class FunctionParamBuilder {\n \n--- a/src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java\n \n /**\n  * Represents the prototype of a {@link FunctionType}.\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class FunctionPrototypeType extends PrototypeObjectType {\n   private static final long serialVersionUID = 1L;\n--- a/src/com/google/javascript/rhino/jstype/SimpleSlot.java\n+++ b/src/com/google/javascript/rhino/jstype/SimpleSlot.java\n /**\n  * The minimum implementation of StaticSlot<JSType>.\n  *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class SimpleSlot implements StaticSlot<JSType> {\n   final String name;\n--- a/src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java\n /**\n  * A builder for union types.\n  *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n class UnionTypeBuilder implements Serializable {\n   private static final long serialVersionUID = 1L;\n--- a/src/com/google/javascript/rhino/testing/Asserts.java\n+++ b/src/com/google/javascript/rhino/testing/Asserts.java\n \n /**\n  * Helper methods for making assertions about the validity of types.\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class Asserts {\n   private Asserts() {} // all static\n--- a/src/com/google/javascript/rhino/testing/EmptyScope.java\n+++ b/src/com/google/javascript/rhino/testing/EmptyScope.java\n \n /**\n  * An empty scope implementation.\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class EmptyScope implements StaticScope<JSType> {\n   @Override\n--- a/test/com/google/javascript/jscomp/CheckAccessControlsTest.java\n+++ b/test/com/google/javascript/jscomp/CheckAccessControlsTest.java\n /**\n  * Tests for {@link CheckAccessControls}.\n  *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class CheckAccessControlsTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/CheckGlobalNamesTest.java\n+++ b/test/com/google/javascript/jscomp/CheckGlobalNamesTest.java\n /**\n  * Tests for {@code CheckGlobalNames.java}.\n  *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class CheckGlobalNamesTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n /**\n  * Tests for {@link CommandLineRunner}.\n  *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class CommandLineRunnerTest extends TestCase {\n \n--- a/test/com/google/javascript/jscomp/CompilerOptionsTest.java\n+++ b/test/com/google/javascript/jscomp/CompilerOptionsTest.java\n \n /**\n  * Tests for {@link CompilerOptions}.\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class CompilerOptionsTest extends TestCase {\n \n--- a/test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java\n+++ b/test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java\n /**\n  * Tessts for {@link CrossModuleMethodMotion}.\n  *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class CrossModuleMethodMotionTest extends CompilerTestCase {\n   private static final String EXTERNS =\n--- a/test/com/google/javascript/jscomp/DenormalizeTest.java\n+++ b/test/com/google/javascript/jscomp/DenormalizeTest.java\n import com.google.javascript.rhino.Node;\n \n /**\n-*\n+ * @author johnlenz@google.com (John Lenz)\n  *\n  */\n public class DenormalizeTest extends CompilerTestCase {\n--- a/test/com/google/javascript/jscomp/DiagnosticGroupTest.java\n+++ b/test/com/google/javascript/jscomp/DiagnosticGroupTest.java\n \n /**\n  * Tests for DiagnosticGroup.\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class DiagnosticGroupTest extends TestCase {\n \n--- a/test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java\n+++ b/test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java\n \n /**\n  * Unit tests for ExpressionDecomposer\n-*\n+ * @author johnlenz@google.com (John Lenz)\n  */\n public class ExpresssionDecomposerTest extends TestCase {\n   // Note: functions \"foo\" and \"goo\" are external functions\n--- a/test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java\n+++ b/test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java\n \n /**\n  * Test for FixedPointGraphTraversal.\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class FixedPointGraphTraversalTest extends TestCase {\n \n--- a/test/com/google/javascript/jscomp/FunctionArgumentInjectorTest.java\n+++ b/test/com/google/javascript/jscomp/FunctionArgumentInjectorTest.java\n \n /**\n  * Inline function tests.\n-*\n+ * @author johnlenz@google.com (John Lenz)\n  */\n public class FunctionArgumentInjectorTest extends TestCase {\n \n--- a/test/com/google/javascript/jscomp/FunctionInjectorTest.java\n+++ b/test/com/google/javascript/jscomp/FunctionInjectorTest.java\n \n /**\n  * Inline function tests.\n-*\n+ * @author johnlenz@google.com (John Lenz)\n  */\n \n public class FunctionInjectorTest extends TestCase {\n--- a/test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java\n+++ b/test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java\n import java.util.Set;\n \n /**\n-*\n+ * @author johnlenz@google.com (John Lenz)\n  */\n public class FunctionToBlockMutatorTest extends TestCase {\n \n--- a/test/com/google/javascript/jscomp/GatherRawExportsTest.java\n+++ b/test/com/google/javascript/jscomp/GatherRawExportsTest.java\n /**\n  * Tests for {@link GatherRawExports}.\n  *\n-*\n+ * @author johnlenz@google.com (John Lenz)\n  */\n public class GatherRawExportsTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/GlobalNamespaceTest.java\n+++ b/test/com/google/javascript/jscomp/GlobalNamespaceTest.java\n /**\n  * Tests for {@link GlobalNamespace}.\n  *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class GlobalNamespaceTest extends TestCase {\n \n--- a/test/com/google/javascript/jscomp/InferJSDocInfoTest.java\n+++ b/test/com/google/javascript/jscomp/InferJSDocInfoTest.java\n \n /**\n  * Tests for {@link InferJSDocInfo}.\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n // TODO(nicksantos): A lot of this code is duplicated from\n // TypedScopeCreatorTest. We should create a common test harness for\n--- a/test/com/google/javascript/jscomp/InlineCostEstimatorTest.java\n+++ b/test/com/google/javascript/jscomp/InlineCostEstimatorTest.java\n \n /**\n  * Unit test for {@link InlineCostEstimator}.\n-*\n+ * @author johnlenz@google.com (John Lenz)\n  */\n public class InlineCostEstimatorTest extends TestCase {\n \n--- a/test/com/google/javascript/jscomp/InlineFunctionsTest.java\n+++ b/test/com/google/javascript/jscomp/InlineFunctionsTest.java\n \n /**\n  * Inline function tests.\n-*\n+ * @author johnlenz@google.com (john lenz)\n  */\n public class InlineFunctionsTest extends CompilerTestCase {\n   boolean allowGlobalFunctionInlining = true;\n--- a/test/com/google/javascript/jscomp/InlineVariablesTest.java\n+++ b/test/com/google/javascript/jscomp/InlineVariablesTest.java\n  * Verifies that valid candidates for inlining are inlined, but\n  * that no dangerous inlining occurs.\n  *\n-*\n+ * @author kushal@google.com (Kushal Dave)\n  */\n public class InlineVariablesTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/LinkedFlowScopeTest.java\n+++ b/test/com/google/javascript/jscomp/LinkedFlowScopeTest.java\n \n /**\n  * Tests for LinkedFlowScope.\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class LinkedFlowScopeTest extends CompilerTypeTestCase {\n \n--- a/test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java\n+++ b/test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java\n import com.google.javascript.rhino.Node;\n \n /**\n-*\n+ * @author johnlenz@google.com (John Lenz)\n  */\n public class MakeDeclaredNamesUniqueTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/MemoizedScopeCreatorTest.java\n+++ b/test/com/google/javascript/jscomp/MemoizedScopeCreatorTest.java\n  * A dopey test for {@link MemoizedScopeCreator}. This is mostly here\n  * just so it's easy to write more tests if this becomes more complicated.\n  *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class MemoizedScopeCreatorTest extends TestCase {\n \n--- a/test/com/google/javascript/jscomp/MinimizeExitPointsTest.java\n+++ b/test/com/google/javascript/jscomp/MinimizeExitPointsTest.java\n import com.google.javascript.rhino.Node;\n \n /**\n-*\n+ * @author johnlenz@google.com (John Lenz)\n  */\n public class MinimizeExitPointsTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/NodeIteratorsTest.java\n+++ b/test/com/google/javascript/jscomp/NodeIteratorsTest.java\n \n /**\n  * Tests for NodeIterators.\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class NodeIteratorsTest extends TestCase {\n \n--- a/test/com/google/javascript/jscomp/NodeTypeNormalizerTest.java\n+++ b/test/com/google/javascript/jscomp/NodeTypeNormalizerTest.java\n \n /**\n  * Tests for NodeTypeNormalizer.\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class NodeTypeNormalizerTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/NormalizeTest.java\n+++ b/test/com/google/javascript/jscomp/NormalizeTest.java\n import com.google.javascript.rhino.Node;\n \n /**\n-*\n+ * @author johnlenz@google.com (John Lenz)\n  *\n  */\n public class NormalizeTest extends CompilerTestCase {\n--- a/test/com/google/javascript/jscomp/PhaseOptimizerTest.java\n+++ b/test/com/google/javascript/jscomp/PhaseOptimizerTest.java\n \n /**\n  * Tests for {@link PhaseOptimizer}.\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class PhaseOptimizerTest extends TestCase {\n   private final List<String> passesRun = Lists.newArrayList();\n--- a/test/com/google/javascript/jscomp/ProcessDefinesTest.java\n+++ b/test/com/google/javascript/jscomp/ProcessDefinesTest.java\n import java.util.Map;\n \n /**\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class ProcessDefinesTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/RemoveUnusedNamesTest.java\n+++ b/test/com/google/javascript/jscomp/RemoveUnusedNamesTest.java\n /**\n  * Tests for {@link RemoveUnusedPrototypeProperties}.\n  *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class RemoveUnusedNamesTest extends CompilerTestCase {\n   private static final String EXTERNS =\n--- a/test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java\n+++ b/test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java\n /**\n  * Tessts for {@link RemoveUnusedPrototypeProperties}.\n  *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class RemoveUnusedPrototypePropertiesTest extends CompilerTestCase {\n   private static final String EXTERNS =\n--- a/test/com/google/javascript/jscomp/RhinoErrorReporterTest.java\n+++ b/test/com/google/javascript/jscomp/RhinoErrorReporterTest.java\n \n /**\n  * Tests for error message filtering.\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class RhinoErrorReporterTest extends TestCase {\n \n--- a/test/com/google/javascript/jscomp/SanityCheckTest.java\n+++ b/test/com/google/javascript/jscomp/SanityCheckTest.java\n \n \n /**\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class SanityCheckTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/SymbolTableTest.java\n+++ b/test/com/google/javascript/jscomp/SymbolTableTest.java\n \n /**\n  * Tests for {@link SymbolTable}.\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class SymbolTableTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java\n \n /**\n  * Tests for function and method arity checking in TypeCheck.\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class TypeCheckFunctionCheckTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/TypeValidatorTest.java\n+++ b/test/com/google/javascript/jscomp/TypeValidatorTest.java\n \n /**\n  * Tests for TypeValidator.\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class TypeValidatorTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java\n+++ b/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java\n /**\n  * Tests for {@link TypedScopeCreator} and {@link TypeInference}. Admittedly,\n  * the name is a bit of a misnomer.\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class TypedScopeCreatorTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/rhino/jstype/FunctionParamBuilderTest.java\n+++ b/test/com/google/javascript/rhino/jstype/FunctionParamBuilderTest.java\n \n /**\n  * Tests for FunctionParamBuilder.\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class FunctionParamBuilderTest extends BaseJSTypeTestCase {\n \n--- a/test/com/google/javascript/rhino/jstype/UnionTypeBuilderTest.java\n+++ b/test/com/google/javascript/rhino/jstype/UnionTypeBuilderTest.java\n /**\n  * Test for {@link UnionTypeBuilder}.\n  *\n-*\n+ * @author nicksantos@google.com (Nick Santos)\n  */\n public class UnionTypeBuilderTest extends BaseJSTypeTestCase {\n ", "timestamp": 1268371875, "metainfo": ""}