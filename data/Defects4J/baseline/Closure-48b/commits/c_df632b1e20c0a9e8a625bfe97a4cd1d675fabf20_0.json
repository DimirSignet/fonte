{"sha": "df632b1e20c0a9e8a625bfe97a4cd1d675fabf20", "log": "Add length to Node in IDE mode  R=johnlenz DELTA=135  (38 added, 0 deleted, 97 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2508   ", "commit": "\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n         Node newBlock = newNode(Token.BLOCK, irNode);\n         newBlock.setLineno(irNode.getLineno());\n         newBlock.setCharno(irNode.getCharno());\n+        maybeSetLengthFrom(newBlock, node);\n         irNode = newBlock;\n       }\n     }\n         irNode.getFirstChild().getLineno() != -1) {\n       irNode.setLineno(irNode.getFirstChild().getLineno());\n       irNode.setCharno(irNode.getFirstChild().getCharno());\n+      maybeSetLengthFrom(irNode, node);\n     } else {\n       if (irNode.getLineno() == -1) {\n         // If we didn't already set the line, then set it now.  This avoids\n         irNode.setLineno(lineno);\n         int charno = position2charno(node.getAbsolutePosition());\n         irNode.setCharno(charno);\n+        maybeSetLengthFrom(irNode, node);\n       }\n     }\n   }\n     jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);\n     jsdocParser.parse();\n     return jsdocParser;\n+  }\n+\n+  // Set the length on the node if we're in IDE mode.\n+  private void maybeSetLengthFrom(Node node, AstNode source) {\n+    if (config.isIdeMode) {\n+      node.setLength(source.getLength());\n+    }\n+  }\n+\n+  private void maybeSetLengthFrom(Node node, Node source) {\n+    if (config.isIdeMode) {\n+      node.setLength(source.getLength());\n+    }\n   }\n \n   private int position2charno(int position) {\n       int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n       node.setLineno(callNode.getLineno());\n       node.setCharno(position2charno(leftParamPos));\n+      maybeSetLengthFrom(node, callNode);\n       return node;\n     }\n \n         int lpColumn = functionNode.getAbsolutePosition() +\n             functionNode.getLp();\n         newName.setCharno(position2charno(lpColumn));\n+        maybeSetLengthFrom(newName, name);\n       }\n \n       node.addChildToBack(newName);\n       // to the operator to get the correct character number.\n       n.setCharno(position2charno(exprNode.getAbsolutePosition() +\n           exprNode.getOperatorPosition()));\n+      maybeSetLengthFrom(n, exprNode);\n       return n;\n     }\n \n         cur.addChildToBack(transform(label));\n \n         cur.setLineno(label.getLineno());\n+        maybeSetLengthFrom(cur, label);\n+\n         int clauseAbsolutePosition =\n             position2charno(label.getAbsolutePosition());\n         cur.setCharno(clauseAbsolutePosition);\n       Node literalStringNode = newStringNode(literalNode.getValue());\n       // assume it's on the same line.\n       literalStringNode.setLineno(literalNode.getLineno());\n+      maybeSetLengthFrom(literalStringNode, literalNode);\n       Node node = newNode(Token.REGEXP, literalStringNode);\n       String flags = literalNode.getFlags();\n       if (flags != null && !flags.isEmpty()) {\n         Node flagsNode = newStringNode(flags);\n         // Assume the flags are on the same line as the literal node.\n         flagsNode.setLineno(literalNode.getLineno());\n+        maybeSetLengthFrom(flagsNode, literalNode);\n         node.addChildToBack(flagsNode);\n       }\n       return node;\n       block.putBooleanProp(Node.SYNTHETIC_BLOCK_PROP, true);\n       block.setLineno(caseNode.getLineno());\n       block.setCharno(position2charno(caseNode.getAbsolutePosition()));\n+      maybeSetLengthFrom(block, caseNode);\n       if (caseNode.getStatements() != null) {\n         for (AstNode child : caseNode.getStatements()) {\n           block.addChildToBack(transform(child));\n         // Mark the enclosing block at the same line as the first catch\n         // clause.\n         if (lineSet == false) {\n-            block.setLineno(cc.getLineno());\n-            lineSet = true;\n+          block.setLineno(cc.getLineno());\n+          maybeSetLengthFrom(block, cc);\n+          lineSet = true;\n         }\n         block.addChildToBack(transform(cc));\n       }\n       // as the finally block (to match Old Rhino's behavior.)\n       if ((lineSet == false) && (finallyBlock != null)) {\n         block.setLineno(finallyBlock.getLineno());\n+        maybeSetLengthFrom(block, finallyBlock);\n       }\n \n       return node;\n       if (initializerNode.getInitializer() != null) {\n         node.addChildToBack(transform(initializerNode.getInitializer()));\n         node.setLineno(node.getLineno());\n+        maybeSetLengthFrom(node, initializerNode);\n       }\n       return node;\n     }\n--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n       FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n       STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                   // where this node lives.\n-      LAST_PROP          = 51;\n+      LENGTH             = 52,    // The length of the code represented by\n+                                  // this node.\n+      LAST_PROP          = 52;\n \n   // values of ISNUMBER_PROP to specify\n   // which of the children are Number types\n         case DIRECT_EVAL:        return \"direct_eval\";\n         case FREE_CALL:          return \"free_call\";\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n+        case LENGTH:    return \"length\";\n         default:\n           Kit.codeBug();\n       }\n     StaticSourceFile file =\n         ((StaticSourceFile) this.getProp(STATIC_SOURCE_FILE));\n     return file == null ? false : file.isExtern();\n+  }\n+\n+  public int getLength() {\n+    return getIntProp(LENGTH);\n+  }\n+\n+  public void setLength(int length) {\n+    putIntProp(LENGTH, length);\n   }\n \n   public void setLineno(int lineno) {\n--- a/test/com/google/javascript/jscomp/parsing/IRFactoryTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/IRFactoryTest.java\n \n   public void testArrayLiteral2() throws Exception {\n     testNewParser(\"[a, , b]\",\n-      \"SCRIPT 0\\n\" +\n-      \"    EXPR_RESULT 0\\n\" +\n-      \"        ARRAYLIT 0\\n\" +\n-      \"            NAME a 0\\n\" +\n-      \"            EMPTY 0\\n\" +\n-      \"            NAME b 0\\n\");\n+      \"SCRIPT 0 [length: 8]\\n\" +\n+      \"    EXPR_RESULT 0 [length: 8]\\n\" +\n+      \"        ARRAYLIT 0 [length: 8]\\n\" +\n+      \"            NAME a 0 [length: 1]\\n\" +\n+      \"            EMPTY 0 [length: 1]\\n\" +\n+      \"            NAME b 0 [length: 1]\\n\");\n   }\n \n   public void testArrayLiteral3() throws Exception {\n \n   public void testArrayLiteral4() throws Exception {\n     testNewParser(\"[,,,a,,b]\",\n-      \"SCRIPT 0\\n\" +\n-      \"    EXPR_RESULT 0\\n\" +\n-      \"        ARRAYLIT 0\\n\" +\n-      \"            EMPTY 0\\n\" +\n-      \"            EMPTY 0\\n\" +\n-      \"            EMPTY 0\\n\" +\n-      \"            NAME a 0\\n\" +\n-      \"            EMPTY 0\\n\" +\n-      \"            NAME b 0\\n\");\n+      \"SCRIPT 0 [length: 9]\\n\" +\n+      \"    EXPR_RESULT 0 [length: 9]\\n\" +\n+      \"        ARRAYLIT 0 [length: 9]\\n\" +\n+      \"            EMPTY 0 [length: 1]\\n\" +\n+      \"            EMPTY 0 [length: 1]\\n\" +\n+      \"            EMPTY 0 [length: 1]\\n\" +\n+      \"            NAME a 0 [length: 1]\\n\" +\n+      \"            EMPTY 0 [length: 1]\\n\" +\n+      \"            NAME b 0 [length: 1]\\n\");\n   }\n \n   public void testAssignment() throws Exception {\n \n   public void testObjectLiteral6() {\n     testNewParser(\"({1: true})\",\n-      \"SCRIPT 0\\n\" +\n-      \"    EXPR_RESULT 0\\n\" +\n-      \"        OBJECTLIT 0 [parenthesized: true]\\n\" +\n-      \"            STRING 1 0 [quoted: 1]\\n\" +\n-      \"                TRUE 0\\n\");\n+      \"SCRIPT 0 [length: 11]\\n\" +\n+      \"    EXPR_RESULT 0 [length: 10]\\n\" +\n+      \"        OBJECTLIT 0 [parenthesized: true] [length: 9]\\n\" +\n+      \"            STRING 1 0 [quoted: 1] [length: 1]\\n\" +\n+      \"                TRUE 0 [length: 4]\\n\");\n   }\n \n   public void testObjectLiteral7() {\n     mode = LanguageMode.ECMASCRIPT5;\n \n     testNewParser(\"({get 1() {}})\",\n-      \"SCRIPT 0\\n\" +\n-      \"    EXPR_RESULT 0\\n\" +\n-      \"        OBJECTLIT 0 [parenthesized: true]\\n\" +\n-      \"            GET 1 0 [quoted: 1]\\n\" +\n-      \"                FUNCTION  0\\n\" +\n-      \"                    NAME  0\\n\" +\n-      \"                    LP 0\\n\" +\n-      \"                    BLOCK 0\\n\");\n+        \"SCRIPT 0 [length: 14]\\n\" +\n+        \"    EXPR_RESULT 0 [length: 13]\\n\" +\n+        \"        OBJECTLIT 0 [parenthesized: true] [length: 12]\\n\" +\n+        \"            GET 1 0 [quoted: 1] [length: 1]\\n\" +\n+        \"                FUNCTION  0 [length: 6]\\n\" +\n+        \"                    NAME  0\\n\" +\n+        \"                    LP 0\\n\" +\n+        \"                    BLOCK 0 [length: 2]\\n\");\n   }\n \n   public void testObjectLiteral8() {\n     mode = LanguageMode.ECMASCRIPT5;\n \n     testNewParser(\"({set 1(a) {}})\",\n-      \"SCRIPT 0\\n\" +\n-      \"    EXPR_RESULT 0\\n\" +\n-      \"        OBJECTLIT 0 [parenthesized: true]\\n\" +\n-      \"            SET 1 0 [quoted: 1]\\n\" +\n-      \"                FUNCTION  0\\n\" +\n-      \"                    NAME  0\\n\" +\n-      \"                    LP 0\\n\" +\n-      \"                        NAME a 0\\n\" +\n-      \"                    BLOCK 0\\n\");\n+        \"SCRIPT 0 [length: 15]\\n\" +\n+        \"    EXPR_RESULT 0 [length: 14]\\n\" +\n+        \"        OBJECTLIT 0 [parenthesized: true] [length: 13]\\n\" +\n+        \"            SET 1 0 [quoted: 1] [length: 1]\\n\" +\n+        \"                FUNCTION  0 [length: 7]\\n\" +\n+        \"                    NAME  0\\n\" +\n+        \"                    LP 0\\n\" +\n+        \"                        NAME a 0 [length: 1]\\n\" +\n+        \"                    BLOCK 0 [length: 2]\\n\");\n   }\n \n \n   // named breaks and continues, so disable these tests.\n   public void testLabel() {\n     testNewParser(\"foo: bar\",\n-      \"SCRIPT 0\\n\" +\n-      \"    LABEL 0\\n\" +\n-      \"        LABEL_NAME foo 0\\n\" +\n-      \"        EXPR_RESULT 0\\n\" +\n-      \"            NAME bar 0\\n\");\n+        \"SCRIPT 0 [length: 8]\\n\" +\n+        \"    LABEL 0 [length: 4]\\n\" +\n+        \"        LABEL_NAME foo 0 [length: 4]\\n\" +\n+        \"        EXPR_RESULT 0 [length: 3]\\n\" +\n+        \"            NAME bar 0 [length: 3]\\n\");\n   }\n \n   public void testLabel2() {\n     testNewParser(\"l: while (f()) { if (g()) { continue l; } }\",\n-      \"SCRIPT 0\\n\" +\n-      \"    LABEL 0\\n\" +\n-      \"        LABEL_NAME l 0\\n\" +\n-      \"        WHILE 0\\n\" +\n-      \"            CALL 0\\n\" +\n-      \"                NAME f 0\\n\" +\n-      \"            BLOCK 0\\n\" +\n-      \"                IF 0\\n\" +\n-      \"                    CALL 0\\n\" +\n-      \"                        NAME g 0\\n\" +\n-      \"                    BLOCK 0\\n\" +\n-      \"                        CONTINUE 0\\n\" +\n-      \"                            LABEL_NAME l 0\\n\");\n+        \"SCRIPT 0 [length: 43]\\n\" +\n+        \"    LABEL 0 [length: 2]\\n\" +\n+        \"        LABEL_NAME l 0 [length: 2]\\n\" +\n+        \"        WHILE 0 [length: 40]\\n\" +\n+        \"            CALL 0 [length: 3]\\n\" +\n+        \"                NAME f 0 [length: 1]\\n\" +\n+        \"            BLOCK 0 [length: 28]\\n\" +\n+        \"                IF 0 [length: 24]\\n\" +\n+        \"                    CALL 0 [length: 3]\\n\" +\n+        \"                        NAME g 0 [length: 1]\\n\" +\n+        \"                    BLOCK 0 [length: 15]\\n\" +\n+        \"                        CONTINUE 0 [length: 11]\\n\" +\n+        \"                            LABEL_NAME l 0 [length: 1]\\n\");\n   }\n \n   public void testLabel3() {\n     testNewParser(\"Foo:Bar:X:{ break Bar; }\",\n-      \"SCRIPT 0\\n\" +\n-      \"    LABEL 0\\n\" +\n-      \"        LABEL_NAME Foo 0\\n\" +\n-      \"        LABEL 0\\n\" +\n-      \"            LABEL_NAME Bar 0\\n\" +\n-      \"            LABEL 0\\n\" +\n-      \"                LABEL_NAME X 0\\n\" +\n-      \"                BLOCK 0\\n\" +\n-      \"                    BREAK 0\\n\" +\n-      \"                        LABEL_NAME Bar 0\\n\");\n+        \"SCRIPT 0 [length: 24]\\n\" +\n+        \"    LABEL 0 [length: 4]\\n\" +\n+        \"        LABEL_NAME Foo 0 [length: 4]\\n\" +\n+        \"        LABEL 0 [length: 4]\\n\" +\n+        \"            LABEL_NAME Bar 0 [length: 4]\\n\" +\n+        \"            LABEL 0 [length: 2]\\n\" +\n+        \"                LABEL_NAME X 0 [length: 2]\\n\" +\n+        \"                BLOCK 0 [length: 14]\\n\" +\n+        \"                    BREAK 0 [length: 10]\\n\" +\n+        \"                        LABEL_NAME Bar 0 [length: 3]\\n\");\n   }\n \n   public void testNegation1() {\n     testNewParser(\"-a\",\n-      \"SCRIPT 0\\n\" +\n-      \"    EXPR_RESULT 0\\n\" +\n-      \"        NEG 0\\n\" +\n-      \"            NAME a 0\\n\");\n+        \"SCRIPT 0 [length: 2]\\n\" +\n+        \"    EXPR_RESULT 0 [length: 2]\\n\" +\n+        \"        NEG 0 [length: 2]\\n\" +\n+        \"            NAME a 0 [length: 1]\\n\");\n   }\n \n   public void testNegation2() {\n     testNewParser(\"-2\",\n-      \"SCRIPT 0\\n\" +\n-      \"    EXPR_RESULT 0\\n\" +\n-      \"        NUMBER -2.0 0\\n\");\n+        \"SCRIPT 0 [length: 2]\\n\" +\n+        \"    EXPR_RESULT 0 [length: 2]\\n\" +\n+        \"        NUMBER -2.0 0 [length: 1]\\n\");\n   }\n \n   public void testNegation3() {\n     testNewParser(\"1 - -2\",\n-      \"SCRIPT 0\\n\" +\n-      \"    EXPR_RESULT 0\\n\" +\n-      \"        SUB 0\\n\" +\n-      \"            NUMBER 1.0 0\\n\" +\n-      \"            NUMBER -2.0 0\\n\");\n+        \"SCRIPT 0 [length: 6]\\n\" +\n+        \"    EXPR_RESULT 0 [length: 6]\\n\" +\n+        \"        SUB 0 [length: 6]\\n\" +\n+        \"            NUMBER 1.0 0 [length: 1]\\n\" +\n+        \"            NUMBER -2.0 0 [length: 1]\\n\");\n   }\n \n   public void testGetter() {\n     mode = LanguageMode.ECMASCRIPT5;\n     testNewParser(\"({get a() {}})\",\n-      \"SCRIPT 0\\n\" +\n-      \"    EXPR_RESULT 0\\n\" +\n-      \"        OBJECTLIT 0 [parenthesized: true]\\n\" +\n-      \"            GET a 0\\n\" +\n-      \"                FUNCTION  0\\n\" +\n-      \"                    NAME  0\\n\" +\n-      \"                    LP 0\\n\" +\n-      \"                    BLOCK 0\\n\");\n+        \"SCRIPT 0 [length: 14]\\n\" +\n+        \"    EXPR_RESULT 0 [length: 13]\\n\" +\n+        \"        OBJECTLIT 0 [parenthesized: true] [length: 12]\\n\" +\n+        \"            GET a 0 [length: 1]\\n\" +\n+        \"                FUNCTION  0 [length: 6]\\n\" +\n+        \"                    NAME  0\\n\" +\n+        \"                    LP 0\\n\" +\n+        \"                    BLOCK 0 [length: 2]\\n\");\n   }\n \n   public void testSetter() {\n     mode = LanguageMode.ECMASCRIPT5;\n     testNewParser(\"({set a(x) {}})\",\n-      \"SCRIPT 0\\n\" +\n-      \"    EXPR_RESULT 0\\n\" +\n-      \"        OBJECTLIT 0 [parenthesized: true]\\n\" +\n-      \"            SET a 0\\n\" +\n-      \"                FUNCTION  0\\n\" +\n-      \"                    NAME  0\\n\" +\n-      \"                    LP 0\\n\" +\n-      \"                        NAME x 0\\n\" +\n-      \"                    BLOCK 0\\n\");\n+        \"SCRIPT 0 [length: 15]\\n\" +\n+        \"    EXPR_RESULT 0 [length: 14]\\n\" +\n+        \"        OBJECTLIT 0 [parenthesized: true] [length: 13]\\n\" +\n+        \"            SET a 0 [length: 1]\\n\" +\n+        \"                FUNCTION  0 [length: 7]\\n\" +\n+        \"                    NAME  0\\n\" +\n+        \"                    LP 0\\n\" +\n+        \"                        NAME x 0 [length: 1]\\n\" +\n+        \"                    BLOCK 0 [length: 2]\\n\");\n   }\n \n   public void testSwitch() {", "timestamp": 1310009803, "metainfo": ""}