{"sha": "c669a68d9206402f0779338261351907bae9c26e", "log": "Add the \"uselessCode\" diagnostic group Fix JSError.make so it works for CheckUnreachableCode.  R=acleung,ajp DELTA=58  (14 added, 26 deleted, 18 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=714057   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CheckUnreachableCode.java\n+++ b/src/com/google/javascript/jscomp/CheckUnreachableCode.java\n import com.google.javascript.jscomp.graph.GraphNode;\n import com.google.javascript.jscomp.graph.GraphReachability;\n import com.google.javascript.jscomp.graph.GraphReachability.EdgeTuple;\n-import com.google.javascript.rhino.JSDocInfo;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n import com.google.javascript.rhino.jstype.TernaryValue;\n \n   private final AbstractCompiler compiler;\n   private final CheckLevel level;\n-  private boolean scopeNeedsInit = true;\n \n   CheckUnreachableCode(AbstractCompiler compiler, CheckLevel level) {\n     this.compiler = compiler;\n \n   @Override\n   public void enterScope(NodeTraversal t) {\n-    scopeNeedsInit = true;\n+    initScope(t.getControlFlowGraph());\n   }\n \n   @Override\n   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-    if (!shouldCheck(n)) {\n-      return false;\n-    }\n-\n-    if (scopeNeedsInit) {\n-      initScope(t.getControlFlowGraph());\n-      scopeNeedsInit = false;\n-    }\n-\n     GraphNode<Node, Branch> gNode = t.getControlFlowGraph().getNode(n);\n     if (gNode != null && gNode.getAnnotation() != GraphReachability.REACHABLE) {\n \n     new GraphReachability<Node, ControlFlowGraph.Branch>(\n         controlFlowGraph, new ReachablePredicate()).compute(\n             controlFlowGraph.getEntry().getValue());\n-  }\n-\n-  private boolean shouldCheck(Node n) {\n-    switch (n.getType()) {\n-      case Token.SCRIPT:\n-      case Token.BLOCK:\n-      case Token.FUNCTION:\n-        JSDocInfo info = n.getJSDocInfo();\n-        if (info != null && info.getSuppressions().contains(\"unreachable\")) {\n-          return false;\n-        }\n-    }\n-\n-    return true;\n   }\n \n   @Override\n--- a/src/com/google/javascript/jscomp/DiagnosticGroups.java\n+++ b/src/com/google/javascript/jscomp/DiagnosticGroups.java\n   // A bit a hack to display the available groups on the command-line.\n   // New groups should be added to this list if they are public and should\n   // be listed on the command-line as an available option.\n-  static final String DIAGNOSTIC_GROUP_NAMES = \"accessControls, checkRegExp,\" +\n-      \"checkTypes, checkVars, deprecated, fileoverviewTags, invalidCasts, \" +\n+  static final String DIAGNOSTIC_GROUP_NAMES = \n+      \"accessControls, ambiguousFunctionDecl, checkRegExp,\" +\n+      \"checkTypes, checkVars, deprecated, \" +\n+      \"externsValidation, fileoverviewTags, invalidCasts, \" +\n       \"missingProperties, nonStandardJsDocs, strictModuleDepCheck, \" +\n-      \"undefinedVars, unknownDefines, visibility\";\n+      \"undefinedVars, unknownDefines, uselessCode, visibility\";\n \n   public static DiagnosticGroup DEPRECATED = DiagnosticGroups\n       .registerGroup(\"deprecated\",\n             VarCheck.UNDEFINED_VAR_ERROR,\n             SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR));\n \n+  public static DiagnosticGroup CHECK_USELESS_CODE =\n+    DiagnosticGroups.registerGroup(\"uselessCode\",\n+        new DiagnosticGroup(\n+            CheckSideEffects.USELESS_CODE_ERROR,\n+            CheckUnreachableCode.UNREACHABLE_CODE)); \n+\n   /**\n    * Adds warning levels by name.\n    */\n--- a/src/com/google/javascript/jscomp/NodeTraversal.java\n+++ b/src/com/google/javascript/jscomp/NodeTraversal.java\n    */\n   public JSError makeError(Node n, CheckLevel level, DiagnosticType type,\n       String... arguments) {\n-    return JSError.make(getSourceName(), n.getLineno(), n.getCharno(), level,\n-        type, arguments);\n+    return JSError.make(getSourceName(), n, level, type, arguments);\n   }\n \n   /**\n--- a/test/com/google/javascript/jscomp/CheckUnreachableCodeTest.java\n+++ b/test/com/google/javascript/jscomp/CheckUnreachableCodeTest.java\n \n     testSame(\n         \"/** @fileoverview\\n\" +\n-        \" * @suppress {unreachable}\\n\" +\n+        \" * @suppress {uselessCode}\\n\" +\n         \" */\\n\" +\n         \"if(false) { }\");\n \n     testSame(\n         \"/** @fileoverview\\n\" +\n-        \" * @suppress {unreachable}\\n\" +\n+        \" * @suppress {uselessCode}\\n\" +\n         \" */\\n\" +\n         \"function f() { if(false) { } }\");\n \n     testSame(\n         \"/**\\n\" +\n-        \" * @suppress {unreachable}\\n\" +\n+        \" * @suppress {uselessCode}\\n\" +\n         \" */\\n\" +\n         \"function f() { if(false) { } }\");\n \n     assertUnreachable(\n         \"/**\\n\" +\n-        \" * @suppress {unreachable}\\n\" +\n+        \" * @suppress {uselessCode}\\n\" +\n         \" */\\n\" +\n         \"function f() { if(false) { } }\\n\" +\n         \"function g() { if(false) { } }\\n\");\n \n     testSame(\n         \"/**\\n\" +\n-        \" * @suppress {unreachable}\\n\" +\n+        \" * @suppress {uselessCode}\\n\" +\n         \" */\\n\" +\n         \"function f() {\\n\" +\n         \"  function g() { if(false) { } }\\n\" +\n     assertUnreachable(\n         \"function f() {\\n\" +\n         \"  /**\\n\" +\n-        \"   * @suppress {unreachable}\\n\" +\n+        \"   * @suppress {uselessCode}\\n\" +\n         \"   */\\n\" +\n         \"  function g() { if(false) { } }\\n\" +\n         \"  if(false) { } }\\n\");\n     testSame(\n         \"function f() {\\n\" +\n         \"  /**\\n\" +\n-        \"   * @suppress {unreachable}\\n\" +\n+        \"   * @suppress {uselessCode}\\n\" +\n         \"   */\\n\" +\n         \"  function g() { if(false) { } }\\n\" +\n         \"}\\n\");", "timestamp": 1288039946, "metainfo": ""}