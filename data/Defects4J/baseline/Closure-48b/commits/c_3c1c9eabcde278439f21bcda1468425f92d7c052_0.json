{"sha": "3c1c9eabcde278439f21bcda1468425f92d7c052", "log": "fix up some subtype tests  R=tylerg DELTA=43  (8 added, 17 deleted, 18 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3402   ", "commit": "\n--- a/src/com/google/javascript/rhino/jstype/AllType.java\n+++ b/src/com/google/javascript/rhino/jstype/AllType.java\n \n   AllType(JSTypeRegistry registry) {\n     super(registry);\n-  }\n-\n-  /**\n-   * The All type is the greatest type (top) and is never a subtype of\n-   * another except itself or the Unknown type or a named alias.\n-   * @return {@code this.isEquivalentTo(that)}\n-   */\n-  @Override\n-  public boolean isSubtype(JSType that) {\n-    return JSType.isSubtype(this, that);\n   }\n \n   @Override\n--- a/src/com/google/javascript/rhino/jstype/EnumElementType.java\n+++ b/src/com/google/javascript/rhino/jstype/EnumElementType.java\n \n   @Override\n   public boolean isSubtype(JSType that) {\n-    if (JSType.isSubtype(this, that)) {\n+    if (JSType.isSubtypeHelper(this, that)) {\n       return true;\n     } else {\n       return primitiveType.isSubtype(that);\n--- a/src/com/google/javascript/rhino/jstype/EnumType.java\n+++ b/src/com/google/javascript/rhino/jstype/EnumType.java\n   public boolean isSubtype(JSType that) {\n     return that.isEquivalentTo(getNativeType(JSTypeNative.OBJECT_TYPE)) ||\n         that.isEquivalentTo(getNativeType(JSTypeNative.OBJECT_PROTOTYPE)) ||\n-        JSType.isSubtype(this, that);\n+        JSType.isSubtypeHelper(this, that);\n   }\n \n   @Override\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n    */\n   @Override\n   public boolean isSubtype(JSType that) {\n-    if (JSType.isSubtype(this, that)) {\n+    if (JSType.isSubtypeHelper(this, that)) {\n       return true;\n     }\n \n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n    *\n    * @return {@code this &lt;: that}\n    */\n-  public abstract boolean isSubtype(JSType that);\n+  public boolean isSubtype(JSType that) {\n+    return isSubtypeHelper(this, that);\n+  }\n \n   /**\n    * Whether this type is meaningfully different from {@code that} type.\n    * A generic implementation meant to be used as a helper for common subtyping\n    * cases.\n    */\n-  static boolean isSubtype(JSType thisType, JSType thatType) {\n+  static boolean isSubtypeHelper(JSType thisType, JSType thatType) {\n     // unknown\n     if (thatType.isUnknownType()) {\n       return true;\n         }\n       }\n     }\n-    // named types\n-    if (thatType instanceof NamedType) {\n-      return thisType.isSubtype(((NamedType)thatType).getReferencedType());\n+    // proxy types\n+    if (thatType instanceof ProxyObjectType) {\n+      return thisType.isSubtype(\n+          ((ProxyObjectType) thatType).getReferencedTypeInternal());\n     }\n     return false;\n   }\n--- a/src/com/google/javascript/rhino/jstype/NoObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/NoObjectType.java\n \n   @Override\n   public boolean isSubtype(JSType that) {\n-    if (JSType.isSubtype(this, that)) {\n+    if (JSType.isSubtypeHelper(this, that)) {\n       return true;\n     } else {\n       return that.isObject() && !that.isNoType() && !that.isNoResolvedType();\n--- a/src/com/google/javascript/rhino/jstype/NoResolvedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NoResolvedType.java\n \n   @Override\n   public boolean isSubtype(JSType that) {\n-    if (JSType.isSubtype(this, that)) {\n+    if (JSType.isSubtypeHelper(this, that)) {\n       return true;\n     } else {\n       return !that.isNoType();\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n \n   @Override\n   public boolean isSubtype(JSType that) {\n-    if (JSType.isSubtype(this, that)) {\n+    if (JSType.isSubtypeHelper(this, that)) {\n       return true;\n     }\n \n--- a/src/com/google/javascript/rhino/jstype/ProxyObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/ProxyObjectType.java\n   }\n \n   @Override\n+  public boolean isAllType() {\n+    return referencedType.isAllType();\n+  }\n+\n+  @Override\n   public boolean isNativeObjectType() {\n     return referencedObjType == null\n         ? false : referencedObjType.isNativeObjectType();\n--- a/src/com/google/javascript/rhino/jstype/RecordType.java\n+++ b/src/com/google/javascript/rhino/jstype/RecordType.java\n \n   @Override\n   public boolean isSubtype(JSType that) {\n-    if (JSType.isSubtype(this, that)) {\n+    if (JSType.isSubtypeHelper(this, that)) {\n       return true;\n     }\n \n--- a/src/com/google/javascript/rhino/jstype/ValueType.java\n+++ b/src/com/google/javascript/rhino/jstype/ValueType.java\n   }\n \n   @Override\n-  public boolean isSubtype(JSType that) {\n-    return JSType.isSubtype(this, that);\n-  }\n-\n-  @Override\n   final JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n     return this;\n   }\n--- a/test/com/google/javascript/rhino/jstype/JSTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/JSTypeTest.java\n             assertTrue(\n                 \"Named \" + typeJ + \" should be a subtype of Named \" + typeI,\n                 namedTypeJ.isSubtype(namedTypeI));\n-            // TODO(nicksantos): Should these tests pass?\n-            //assertTrue(\n-            //    \"Proxy \" + typeJ + \" should be a subtype of Proxy \" + typeI,\n-            //    proxyTypeJ.isSubtype(proxyTypeI));\n+            assertTrue(\n+                \"Proxy \" + typeJ + \" should be a subtype of Proxy \" + typeI,\n+                proxyTypeJ.isSubtype(proxyTypeI));\n           } else {\n             assertFalse(typeJ + \" should not be a subtype of \" + typeI,\n                 typeJ.isSubtype(typeI));\n             assertFalse(\n                 \"Named \" + typeJ + \" should not be a subtype of Named \" + typeI,\n                 namedTypeJ.isSubtype(namedTypeI));\n-            // TODO(nicksantos): Should these tests pass?\n-            //assertFalse(\n-            //    \"Named \" + typeJ + \" should not be a subtype of Named \" + typeI,\n-            //    proxyTypeJ.isSubtype(proxyTypeI));\n+            assertFalse(\n+                \"Named \" + typeJ + \" should not be a subtype of Named \" + typeI,\n+                proxyTypeJ.isSubtype(proxyTypeI));\n           }\n \n           JSType expectedSupremum = i < j ? typeI : typeJ;", "timestamp": 1317761794, "metainfo": ""}