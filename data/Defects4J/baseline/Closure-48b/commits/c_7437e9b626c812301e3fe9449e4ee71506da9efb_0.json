{"sha": "7437e9b626c812301e3fe9449e4ee71506da9efb", "log": "Fold NEG a bit at code-generation time, to match the parsing that Rhino does at parse-time. Makes SanityCheck a bit happier.  R=johnlenz DELTA=25  (23 added, 1 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=159   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n       case Token.VOID:\n       case Token.NOT:\n       case Token.BITNOT:\n-      case Token.POS:\n-      case Token.NEG: {\n+      case Token.POS: {\n         // All of these unary operators are right-associative\n         Preconditions.checkState(childCount == 1);\n         cc.addOp(NodeUtil.opToStrNoFail(type), false);\n         addExpr(first, NodeUtil.precedence(type));\n+        break;\n+      }\n+\n+      case Token.NEG: {\n+        Preconditions.checkState(childCount == 1);\n+\n+        // It's important to our sanity checker that the code\n+        // we print produces the same AST as the code we parse back.\n+        // NEG is a weird case because Rhino parses \"- -2\" as \"2\".\n+        if (n.getFirstChild().getType() == Token.NUMBER) {\n+          cc.addNumber(-n.getFirstChild().getDouble());\n+        } else {\n+          cc.addOp(NodeUtil.opToStrNoFail(type), false);\n+          addExpr(first, NodeUtil.precedence(type));\n+        }\n+\n         break;\n       }\n \n--- a/test/com/google/javascript/jscomp/CodePrinterTest.java\n+++ b/test/com/google/javascript/jscomp/CodePrinterTest.java\n     //  \"var x = {set \\\"(x)\\\"() {return 1}}\",\n     //   \"var x={set \\\"(x)\\\"(){return 1}}\");\n   }\n+\n+  public void testNegCollapse() {\n+    // Collapse the negative symbol on numbers at generation time,\n+    // to match the Rhino behavior.\n+    assertPrint(\"var x = - - 2;\", \"var x=2\");\n+    assertPrint(\"var x = - (2);\", \"var x=-2\");\n+  }\n }", "timestamp": 1292544127, "metainfo": ""}