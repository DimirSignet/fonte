{"sha": "98d9c2b61dc4404dae11027299b2d823fd548b11", "log": "Enable consistentIdGenerator outside of global scope.  R=johnlenz DELTA=7  (6 added, 0 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2835   ", "commit": "\n--- a/src/com/google/javascript/jscomp/ReplaceIdGenerators.java\n+++ b/src/com/google/javascript/jscomp/ReplaceIdGenerators.java\n         return;\n       }\n \n-      if (!t.inGlobalScope()) {\n+      if (!t.inGlobalScope() && !consistent) {\n         // Warn about calls not in the global scope.\n         compiler.report(t.makeError(n, NON_GLOBAL_ID_GENERATOR_CALL));\n         return;\n--- a/test/com/google/javascript/jscomp/ReplaceIdGeneratorsTest.java\n+++ b/test/com/google/javascript/jscomp/ReplaceIdGeneratorsTest.java\n     testSame(new String[] {\"/** @idGenerator */ var id = function() {}; \" +\n                            \"if(x) id('foo');\"},\n         ReplaceIdGenerators.CONDITIONAL_ID_GENERATOR_CALL);\n+\n+    test(\"/** @consistentIdGenerator */ var id = function() {};\" +\n+        \"function fb() {foo.bar = id('foo_bar')}\",\n+\n+        \"var id = function() {};\" +\n+        \"function fb() {foo.bar = 'a'}\");\n   }\n \n   public void testConflictingIdGenerator() {", "timestamp": 1311970039, "metainfo": ""}