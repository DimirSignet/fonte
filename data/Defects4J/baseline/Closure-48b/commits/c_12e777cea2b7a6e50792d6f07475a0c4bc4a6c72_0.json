{"sha": "12e777cea2b7a6e50792d6f07475a0c4bc4a6c72", "log": "Fix a bug in prototype-resolution. The implicit prototype wouldn't get resolved correctly, because we were resolving the \"default\" slot for the implicit prototypes. InstanceObjectType overrides this own slot with its own implementation, so we really need to use the getter to get the correct slot. This only comes up with very deep inheritance hierarchies (>= 5).  R=johnlenz DELTA=33  (19 added, 4 deleted, 10 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=716029   ", "commit": "\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n \n   private final String className;\n   private final Map<String, Property> properties;\n-  private ObjectType implicitPrototype;\n   private final boolean nativeType;\n+\n+  // NOTE(nicksantos): The implicit prototype can change over time.\n+  // Modelling this is a bear. Always call getImplicitPrototype(), because\n+  // some subclasses override this to do special resolution handling.\n+  private ObjectType implicitPrototypeFallback;\n \n   // Whether the toString representation of this should be pretty-printed,\n   // by printing all properties.\n     this.properties = Maps.newTreeMap();\n     this.className = className;\n     this.nativeType = nativeType;\n-    if (nativeType) {\n-      this.implicitPrototype = implicitPrototype;\n-    } else if (implicitPrototype == null) {\n-      this.implicitPrototype =\n-          registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n+    if (nativeType || implicitPrototype != null) {\n+      setImplicitPrototype(implicitPrototype);\n     } else {\n-      this.implicitPrototype = implicitPrototype;\n+      setImplicitPrototype(\n+          registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE));\n     }\n   }\n \n \n   @Override\n   public ObjectType getImplicitPrototype() {\n-    return implicitPrototype;\n+    return implicitPrototypeFallback;\n   }\n \n   /**\n    * in super class declaration, and only before properties on that type are\n    * processed.\n    */\n-  void setImplicitPrototype(ObjectType implicitPrototype) {\n+  final void setImplicitPrototype(ObjectType implicitPrototype) {\n     checkState(!hasCachedValues());\n-    this.implicitPrototype = implicitPrototype;\n+    this.implicitPrototypeFallback = implicitPrototype;\n   }\n \n   @Override\n   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n     setResolvedTypeInternal(this);\n \n-    // Don't try to resolve native types, because it's unnecessary and\n-    // there are infinite loops between native types.\n-    if (implicitPrototype != null && !implicitPrototype.isNativeObjectType()) {\n-      implicitPrototype = (ObjectType) implicitPrototype.resolve(t, scope);\n+    ObjectType implicitPrototype = getImplicitPrototype();\n+    if (implicitPrototype != null) {\n+      implicitPrototypeFallback =\n+          (ObjectType) implicitPrototype.resolve(t, scope);\n     }\n     for (Property prop : properties.values()) {\n       prop.type = safeResolve(prop.type, t, scope);\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"/** @constructor */ function Super() {}\" +\n         \"/** @param {Super} x */ function foo(x) {}\" +\n         \"foo(new Sub2());\");\n+  }\n+\n+  public void testGoodExtends13() throws Exception {\n+    testTypes(\n+        \"/** @constructor \\n * @extends {B}  */ function C() {}\" +\n+        \"/** @constructor \\n * @extends {D}  */ function E() {}\" +\n+        \"/** @constructor \\n * @extends {C}  */ function D() {}\" +\n+        \"/** @constructor \\n * @extends {A} */ function B() {}\" +\n+        \"/** @constructor */ function A() {}\" +\n+        \"/** @param {number} x */ function f(x) {} f(new E());\",\n+        \"actual parameter 1 of f does not match formal parameter\\n\" +\n+        \"found   : E\\n\" +\n+        \"required: number\");\n   }\n \n   public void testBadExtends1() throws Exception {", "timestamp": 1288030998, "metainfo": ""}