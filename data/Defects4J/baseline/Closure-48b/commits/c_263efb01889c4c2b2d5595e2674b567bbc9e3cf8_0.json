{"sha": "263efb01889c4c2b2d5595e2674b567bbc9e3cf8", "log": "Create a real symbol for all references to \"this\"  R=acleung DELTA=84  (50 added, 0 deleted, 34 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3246   ", "commit": "\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n \n     MemoizedScopeCreator typedScopeCreator = getTypedScopeCreator();\n     if (typedScopeCreator != null) {\n+      symbolTable.addScopes(typedScopeCreator.getAllMemoizedScopes());\n       symbolTable.addSymbolsFrom(typedScopeCreator);\n     }\n \n--- a/src/com/google/javascript/jscomp/MemoizedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/MemoizedScopeCreator.java\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.jstype.StaticSymbolTable;\n \n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n \n     return scope;\n   }\n \n-  public Scope getScopeIfMemoized(Node n) {\n+  Collection<Scope> getAllMemoizedScopes() {\n+    return Collections.unmodifiableCollection(scopes.values());\n+  }\n+\n+  Scope getScopeIfMemoized(Node n) {\n     return scopes.get(n);\n   }\n \n--- a/src/com/google/javascript/jscomp/SymbolTable.java\n+++ b/src/com/google/javascript/jscomp/SymbolTable.java\n import com.google.javascript.rhino.jstype.StaticSymbolTable;\n import com.google.javascript.rhino.jstype.UnionType;\n \n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n   }\n \n   /**\n+   * Make sure all the given scopes in {@code otherSymbolTable}\n+   * are in this symbol table.\n+   */\n+  <S extends StaticScope<JSType>>\n+  void addScopes(Collection<S> scopes) {\n+    for (S scope : scopes) {\n+      createScopeFrom(scope);\n+    }\n+  }\n+\n+  /**\n    * Make sure all the symbols and references in {@code otherSymbolTable}\n    * are in this symbol table.\n    *\n         return;\n       }\n \n-      JSType type = n.getJSType();\n-      if (type == null) {\n-        return;\n-      }\n-\n-      // declare the global this at the first place it's used.\n-      if (type.isGlobalThisType() &&\n-          globalScope.getSlot(GLOBAL_THIS) == null) {\n-        declareSymbol(\n-            GLOBAL_THIS,\n-            registry.getNativeType(JSTypeNative.GLOBAL_THIS),\n-            false /* declared */,\n-            globalScope,\n-            n);\n-      }\n-\n-      Symbol s = getOnlySymbolForType(type);\n-      if (s != null) {\n-        s.defineReferenceAt(n);\n+      Symbol symbol = null;\n+      if (t.inGlobalScope()) {\n+        // declare the global this at the first place it's used.\n+        if (globalScope.getSlot(GLOBAL_THIS) == null) {\n+          symbol = declareSymbol(\n+              GLOBAL_THIS,\n+              registry.getNativeType(JSTypeNative.GLOBAL_THIS),\n+              false /* declared */,\n+              globalScope,\n+              n);\n+        } else {\n+          symbol = globalScope.getSlot(GLOBAL_THIS);\n+        }\n+      } else {\n+        // Otherwise, declare a \"this\" property when possible.\n+        SymbolScope scope = scopes.get(t.getScopeRoot());\n+        Preconditions.checkNotNull(scope);\n+        Symbol scopeSymbol = getSymbolForScope(scope);\n+        if (scopeSymbol != null) {\n+          createPropertyScopeFor(scopeSymbol);\n+\n+          SymbolScope propScope = scopeSymbol.getPropertyScope();\n+          symbol = propScope.getSlot(\"this\");\n+          if (symbol == null) {\n+            JSType type = n.getJSType();\n+            symbol = declareSymbol(\n+                \"this\",\n+                type,\n+                type != null && !type.isUnknownType(),\n+                propScope,\n+                n);\n+          }\n+        }\n+      }\n+\n+      if (symbol != null) {\n+        symbol.defineReferenceAt(n);\n       }\n     }\n   }\n--- a/test/com/google/javascript/jscomp/SymbolTableTest.java\n+++ b/test/com/google/javascript/jscomp/SymbolTableTest.java\n     SymbolTable table = createSymbolTable(\n         \"/** @constructor */ function F() { this.foo = 3; this.bar = 5; }\");\n \n-    Symbol f = getGlobalVar(table, \"F\");\n-    assertNotNull(f);\n-\n-    List<Reference> refs = Lists.newArrayList(table.getReferences(f));\n-\n-    // 1 declaration and 2 local refs\n-    assertEquals(3, refs.size());\n+    Symbol t = getGlobalVar(table, \"F.this\");\n+    assertNotNull(t);\n+\n+    List<Reference> refs = Lists.newArrayList(table.getReferences(t));\n+    assertEquals(2, refs.size());\n+  }\n+\n+  public void testLocalThisReferences2() throws Exception {\n+    SymbolTable table = createSymbolTable(\n+        \"/** @constructor */ function F() {}\" +\n+        \"/** doc */ F.prototype.baz = \" +\n+        \"    function() { this.foo = 3; this.bar = 5; };\");\n+\n+    Symbol t = getGlobalVar(table, \"F.prototype.baz.this\");\n+    assertNotNull(t);\n+\n+    List<Reference> refs = Lists.newArrayList(table.getReferences(t));\n+    assertEquals(2, refs.size());\n   }\n \n   public void testNamespacedReferences() throws Exception {", "timestamp": 1315928688, "metainfo": ""}