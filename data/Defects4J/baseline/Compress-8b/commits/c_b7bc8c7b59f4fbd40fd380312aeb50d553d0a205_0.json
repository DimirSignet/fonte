{"sha": "b7bc8c7b59f4fbd40fd380312aeb50d553d0a205", "log": "whitespace only  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n public class ArchiveStreamFactory {\n \n     public ArchiveInputStream createArchiveInputStream( final String archiverName, final InputStream in ) throws ArchiveException {\n-    \tif (\"ar\".equalsIgnoreCase(archiverName)) {\n+        if (\"ar\".equalsIgnoreCase(archiverName)) {\n             return new ArArchiveInputStream(in);\n         } else if(\"zip\".equalsIgnoreCase(archiverName)) {\n-        \treturn new ZipArchiveInputStream(in);\n+            return new ZipArchiveInputStream(in);\n         } else if(\"tar\".equalsIgnoreCase(archiverName)) {\n-        \treturn new TarArchiveInputStream(in);\n+            return new TarArchiveInputStream(in);\n         } else if(\"jar\".equalsIgnoreCase(archiverName)) {\n-        \treturn new JarArchiveInputStream(in);\n+            return new JarArchiveInputStream(in);\n         } else if(\"cpio\".equalsIgnoreCase(archiverName)) {\n-        \treturn new CpioArchiveInputStream(in);\n+            return new CpioArchiveInputStream(in);\n         }\n-    \treturn null;\n+        return null;\n     }\n \n     public ArchiveOutputStream createArchiveOutputStream( final String archiverName, final OutputStream out ) throws ArchiveException {\n-    \tif (\"ar\".equalsIgnoreCase(archiverName)) {\n+        if (\"ar\".equalsIgnoreCase(archiverName)) {\n             return new ArArchiveOutputStream(out);\n         } else if(\"zip\".equalsIgnoreCase(archiverName)) {\n-        \treturn new ZipArchiveOutputStream(out);\n+            return new ZipArchiveOutputStream(out);\n         } else if(\"tar\".equalsIgnoreCase(archiverName)) {\n-        \treturn new TarArchiveOutputStream(out);\n+            return new TarArchiveOutputStream(out);\n         } else if(\"jar\".equalsIgnoreCase(archiverName)) {\n-        \treturn new JarArchiveOutputStream(out);\n+            return new JarArchiveOutputStream(out);\n         } else if(\"cpio\".equalsIgnoreCase(archiverName)) {\n-        \treturn new CpioArchiveOutputStream(out);\n+            return new CpioArchiveOutputStream(out);\n         }\n-    \treturn null;\n+        return null;\n     }\n \n     public ArchiveInputStream createArchiveInputStream( final InputStream input ) throws IOException {\n \n-\t\tfinal byte[] signature = new byte[12];\n-\t\tinput.mark(signature.length);\n-\t\tint signatureLength = input.read(signature);\n-\t\t// TODO if reset is not supported pass on the IOException or return null?\n-                // TODO, what if we failed to read 12 bytes?\n-\t\tinput.reset();\n+        final byte[] signature = new byte[12];\n+        input.mark(signature.length);\n+        int signatureLength = input.read(signature);\n+        // TODO if reset is not supported pass on the IOException or return null?\n+        // TODO, what if we failed to read 12 bytes?\n+        input.reset();\n \n-\t\tif(ZipArchiveInputStream.matches(signature)) {\n-\t\t\treturn new ZipArchiveInputStream(input);\n-\t\t} else if(JarArchiveInputStream.matches(signature)) {\n-\t\t\treturn new JarArchiveInputStream(input);\n-\t\t} else if(TarArchiveInputStream.matches(signature)) {\n-\t\t\treturn new TarArchiveInputStream(input);\n-\t\t} else if(ArArchiveInputStream.matches(signature)) {\n-\t\t\treturn new ArArchiveInputStream(input);\n-\t\t} else if(CpioArchiveInputStream.matches(signature)) {\n-\t\t\treturn new CpioArchiveInputStream(input);\n-\t\t} \n-\t\treturn null;\n-\t}\n+        if(ZipArchiveInputStream.matches(signature)) {\n+            return new ZipArchiveInputStream(input);\n+        } else if(JarArchiveInputStream.matches(signature)) {\n+            return new JarArchiveInputStream(input);\n+        } else if(TarArchiveInputStream.matches(signature)) {\n+            return new TarArchiveInputStream(input);\n+        } else if(ArArchiveInputStream.matches(signature)) {\n+            return new ArArchiveInputStream(input);\n+        } else if(CpioArchiveInputStream.matches(signature)) {\n+            return new CpioArchiveInputStream(input);\n+        } \n+        return null;\n+    }\n }", "timestamp": 1233910091, "metainfo": ""}