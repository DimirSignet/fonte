{"sha": "13b90aef6c0264b451333198911c69ae8c7f37e1", "log": "Check for closing non-existent entry  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\n     private long archiveOffset = 0;\n     private long entryOffset = 0;\n     private ArArchiveEntry prevEntry;\n-    private boolean haveUnclosedEntry = true;\n+    private boolean haveUnclosedEntry = false;\n     \n     /** indicates if this archive is finished */\n     private boolean finished = false;\n         if(finished) {\n             throw new IOException(\"Stream has already been finished\");\n         }\n-        if (prevEntry != null && haveUnclosedEntry && (entryOffset % 2) != 0) {\n+        if (prevEntry == null || !haveUnclosedEntry){\n+            throw new IOException(\"No current entry to close\");\n+        }\n+        if ((entryOffset % 2) != 0) {\n             out.write('\\n'); // Pad byte\n             archiveOffset++;\n         }\n                 throw new IOException(\"length does not match entry (\" + prevEntry.getLength() + \" != \" + entryOffset);\n             }\n \n-            closeArchiveEntry();\n+            if (haveUnclosedEntry) {\n+                closeArchiveEntry();\n+            }\n         }\n \n         prevEntry = pArEntry;\n      */\n     public void finish() throws IOException {\n         if(haveUnclosedEntry) {\n-            throw new IOException(\"This archives contains unclosed entries.\");\n+            throw new IOException(\"This archive contains unclosed entries.\");\n         } else if(finished) {\n             throw new IOException(\"This archive has already been finished\");\n         }", "timestamp": 1240865830, "metainfo": ""}