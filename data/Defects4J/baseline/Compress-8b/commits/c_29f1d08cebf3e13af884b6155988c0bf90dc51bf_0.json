{"sha": "29f1d08cebf3e13af884b6155988c0bf90dc51bf", "log": "make closeArchiveEntry a NOP if called repeatedly.  This makes ArTestCase fail for all platforms consistently 8-)  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\n     private long archiveOffset = 0;\n     private long entryOffset = 0;\n     private ArArchiveEntry prevEntry;\n+    private boolean haveUnclosedEntry = true;\n \n     public ArArchiveOutputStream( final OutputStream pOut ) {\n         this.out = pOut;\n     }\n \n     public void closeArchiveEntry() throws IOException {\n-        if ((entryOffset % 2) != 0) {\n+        if (prevEntry != null && haveUnclosedEntry && (entryOffset % 2) != 0) {\n             out.write('\\n'); // Pad byte\n             archiveOffset++;\n         }\n+        haveUnclosedEntry = false;\n     }\n \n     public void putArchiveEntry( final ArchiveEntry pEntry ) throws IOException {\n         archiveOffset += writeEntryHeader(pArEntry);\n \n         entryOffset = 0;\n+        haveUnclosedEntry = true;\n     }\n \n     private long fill( final long pOffset, final long pNewOffset, final char pFill ) throws IOException { \n--- a/src/test/java/org/apache/commons/compress/archivers/ArTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ArTestCase.java\n     public void testArDelete() throws Exception {\n         final File output = new File(dir, \"bla.ar\");\n \n+        final File file1 = getFile(\"test1.xml\");\n+        final File file2 = getFile(\"test2.xml\");\n         {\n             // create\n-            final File file1 = getFile(\"test1.xml\");\n-            final File file2 = getFile(\"test2.xml\");\n \n             final OutputStream out = new FileOutputStream(output);\n             final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out);\n             out.close();\n         }\n \n-        assertEquals(282, output.length());\n+        assertEquals(8\n+                     + 60 + file1.length() + (file1.length() % 2)\n+                     + 60 + file2.length() + (file2.length() % 2),\n+                     output.length());\n \n         final File output2 = new File(dir, \"bla2.ar\");\n ", "timestamp": 1238425674, "metainfo": ""}