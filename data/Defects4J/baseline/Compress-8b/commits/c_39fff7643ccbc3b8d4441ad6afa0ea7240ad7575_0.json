{"sha": "39fff7643ccbc3b8d4441ad6afa0ea7240ad7575", "log": "made it possible to clean up resources manually  ", "commit": "\n--- a/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n      */\n     protected void checkArchiveContent(ArchiveInputStream in, List expected)\n             throws Exception {\n+        checkArchiveContent(in, expected, true);\n+    }\n+    \n+    /**\n+     * Checks that an archive input stream can be read, and that the file data matches file sizes.\n+     * \n+     * @param in\n+     * @param expected list of expected entries or <code>null</code> if no check of names desired\n+     * @param cleanUp Cleans up resources if true \n+     * @return returns the created result file if cleanUp = false, or null otherwise \n+     * @throws Exception\n+     */\n+    protected File checkArchiveContent(ArchiveInputStream in, List expected, boolean cleanUp)\n+            throws Exception {\n         File result = File.createTempFile(\"dir-result\", \"\");\n         result.delete();\n         result.mkdir();\n                 assertEquals(0, expected.size());\n             }\n         } finally {\n-            rmdir(result);\n-        }\n+            if (cleanUp) {\n+                rmdir(result);\n+            }\n+        }\n+        return result;\n     }\n \n     /**", "timestamp": 1239860534, "metainfo": ""}