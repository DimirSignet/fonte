{"sha": "b6814d4f07ba2b98b4bae4dd1f2f83cbecbe6f56", "log": "extract common code  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n      */\n     public boolean canReadEntryData(ArchiveEntry ae) {\n         if (ae instanceof ZipArchiveEntry) {\n-            ZipArchiveEntry ze = (ZipArchiveEntry) ae;\n-            return !ze.isEncrypted() &&\n-                (ze.getMethod() == ZipArchiveEntry.STORED\n-                 || ze.getMethod() == ZipArchiveEntry.DEFLATED);\n+            return ZipUtil.canHandleEntryData((ZipArchiveEntry) ae);\n         }\n         return false;\n     }\n         // avoid int overflow, check null buffer\n         if (start <= buffer.length && length >= 0 && start >= 0\n             && buffer.length - start >= length) {\n-            if (current.isEncrypted()) {\n-                throw new IOException(\"Encryption is not supported, used in \"\n-                                      + \"entry \" + current.getName());\n-            }\n-            if (current.getMethod() != ZipArchiveEntry.STORED\n-                && current.getMethod() != ZipArchiveEntry.DEFLATED) {\n-                throw new IOException(\n-                        \"Unsupported compression method \" + current.getMethod()\n-                        + \" in ZIP archive entry \" + current.getName());\n-            }\n+            ZipUtil.checkRequestedFeatures(current);\n \n             if (current.getMethod() == ZipArchiveOutputStream.STORED) {\n                 int csize = (int) current.getSize();\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n      */\n     public boolean canWriteEntryData(ArchiveEntry ae) {\n         if (ae instanceof ZipArchiveEntry) {\n-            ZipArchiveEntry ze = (ZipArchiveEntry) ae;\n-            return !ze.isEncrypted() &&\n-                (ze.getMethod() == STORED || ze.getMethod() == DEFLATED);\n+            return ZipUtil.canHandleEntryData((ZipArchiveEntry) ae);\n         }\n         return false;\n     }\n      * @throws IOException on error\n      */\n     public void write(byte[] b, int offset, int length) throws IOException {\n-        if (entry.isEncrypted()) {\n-            throw new IOException(\"Encryption is not supported, used in entry \"\n-                                  + entry.getName());\n-        }\n-        if (entry.getMethod() != STORED && entry.getMethod() != DEFLATED) {\n-            throw new IOException(\n-                    \"Unsupported compression method \" + entry.getMethod()\n-                    + \" in ZIP archive entry \" + entry.getName());\n-        }\n+        ZipUtil.checkRequestedFeatures(entry);\n         if (entry.getMethod() == DEFLATED) {\n             if (length > 0) {\n                 if (!def.finished()) {\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n      * @since Apache Commons Compress 1.1\n      */\n     public boolean canReadEntryData(ZipArchiveEntry ze) {\n-        return !ze.isEncrypted() &&\n-            (ze.getMethod() == ZipArchiveEntry.STORED\n-             || ze.getMethod() == ZipArchiveEntry.DEFLATED);\n+        return ZipUtil.canHandleEntryData(ze);\n     }\n \n     /**\n      * Returns an InputStream for reading the contents of the given entry.\n+     *\n      * @param ze the entry to get the stream for.\n      * @return a stream to read the entry from.\n      * @throws IOException if unable to create an input stream from the zipenty\n-     * @throws ZipException if the zipentry has an unsupported\n-     * compression method\n+     * @throws ZipException if the zipentry uses an unsupported feature\n      */\n     public InputStream getInputStream(ZipArchiveEntry ze)\n         throws IOException, ZipException {\n         if (offsetEntry == null) {\n             return null;\n         }\n-        if (ze.isEncrypted()) {\n-            throw new IOException(\"Encryption is not supported, used in \"\n-                                  + \"entry \" + ze.getName());\n-        }\n-        if (ze.getMethod() != ZipArchiveEntry.STORED\n-            && ze.getMethod() != ZipArchiveEntry.DEFLATED) {\n-            throw new IOException(\"Unsupported compression method \"\n-                                  + ze.getMethod() + \" in ZIP archive entry \"\n-                                  + ze.getName());\n-        }\n+        ZipUtil.checkRequestedFeatures(ze);\n         long start = offsetEntry.dataOffset;\n         BoundedInputStream bis =\n             new BoundedInputStream(start, ze.getCompressedSize());\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java\n         return null;\n     }\n \n+    /**\n+     * Whether this library is able to read or write the given entry.\n+     */\n+    static boolean canHandleEntryData(ZipArchiveEntry entry) {\n+        return supportsEncryptionOf(entry) && supportsMethodOf(entry);\n+    }\n+\n+    /**\n+     * Whether this library supports the encryption used by the given\n+     * entry.\n+     *\n+     * @return true if the entry isn't encrypted at all\n+     */\n+    private static boolean supportsEncryptionOf(ZipArchiveEntry entry) {\n+        return !entry.isEncrypted();\n+    }\n+\n+    /**\n+     * Whether this library supports the compression method used by\n+     * the given entry.\n+     *\n+     * @return true if the compression method is STORED or DEFLATED\n+     */\n+    private static boolean supportsMethodOf(ZipArchiveEntry entry) {\n+        return entry.getMethod() == ZipArchiveEntry.STORED\n+            || entry.getMethod() == ZipArchiveEntry.DEFLATED;\n+    }\n+\n+    /**\n+     * Checks whether the entry requires features not (yet) supported\n+     * by the library and throws an exception if it does.\n+     */\n+    static void checkRequestedFeatures(ZipArchiveEntry ze) throws IOException {\n+        if (!supportsEncryptionOf(ze)) {\n+            throw new IOException(\"Encryption is not supported, used in \"\n+                                  + \"entry \" + ze.getName());\n+        }\n+        if (!supportsMethodOf(ze)) {\n+            throw new IOException(\"Unsupported compression method \"\n+                                  + ze.getMethod() + \" in ZIP archive entry \"\n+                                  + ze.getName());\n+        }\n+    }\n }", "timestamp": 1268133310, "metainfo": ""}