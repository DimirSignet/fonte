{"sha": "99870ef59c93a4a00d8719ed6cb0dbef5795912d", "log": "Not thread-safe  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java\n import org.apache.commons.compress.archivers.ArchiveEntry;\n import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n \n+/**\n+ * \n+ * @NotThreadSafe\n+ */\n public class JarArchiveEntry extends ZipArchiveEntry implements ArchiveEntry {\n \n \tprivate Attributes manifestAttributes = null;\n--- a/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java\n import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;\n \n+/**\n+ * Implements an input stream that can read entries from jar files.\n+ * \n+ * @NotThreadSafe\n+ */\n public class JarArchiveInputStream extends ZipArchiveInputStream {\n \n     public JarArchiveInputStream( final InputStream inputStream ) {\n--- a/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java\n  * Subclass that adds a special extra field to the very first entry\n  * which allows the created archive to be used as an executable jar on\n  * Solaris.\n+ * \n+ * @NotThreadSafe\n  */\n public class JarArchiveOutputStream extends ZipArchiveOutputStream {\n \n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n  * char devminor[8];\n  * } header;\n  * </pre>\n- *\n+ * \n+ * @NotThreadSafe\n  */\n \n public class TarArchiveEntry implements TarConstants, ArchiveEntry {\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n  * methods are provided to position at each successive entry in\n  * the archive, and the read each entry as a normal input stream\n  * using read().\n- *\n+ * @NotThreadSafe\n  */\n public class TarArchiveInputStream extends ArchiveInputStream {\n     private static final int SMALL_BUFFER_SIZE = 256;\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n  * The TarOutputStream writes a UNIX tar archive as an OutputStream.\n  * Methods are provided to put entries, and then write their contents\n  * by writing to this stream using write().\n- *\n+ * @NotThreadSafe\n  */\n public class TarArchiveOutputStream extends ArchiveOutputStream {\n     /** Fail if a long file name is required in the archive. */\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java\n \n /**\n  * A common base class for Unicode extra information extra fields.\n+ * @NotThreadSafe\n  */\n public abstract class AbstractUnicodeExtraField implements ZipExtraField {\n     private long nameCRC32;\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java\n  *\n  * <p>Short is two bytes and Long is four bytes in big endian byte and\n  * word order, device numbers are currently not supported.</p>\n- *\n+ * @NotThreadSafe\n  */\n public class AsiExtraField implements ZipExtraField, UnixStat, Cloneable {\n \n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java\n \n /**\n  * ZipExtraField related methods\n- *\n+ * @NotThreadSafe because the HashMap is not synch.\n  */\n // CheckStyle:HideUtilityClassConstructorCheck OFF (bc)\n public class ExtraFieldUtils {\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java\n  *         ComCRC32      4 bytes     Comment Field CRC32 Checksum\n  *         UnicodeCom    Variable    UTF-8 version of the entry comment\n  * </pre>\n+ * @NotThreadSafe super-class is not thread-safe\n  */\n public class UnicodeCommentExtraField extends AbstractUnicodeExtraField {\n \n--- a/src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java\n  *         NameCRC32     4 bytes     File Name Field CRC32 Checksum\n  *         UnicodeName   Variable    UTF-8 version of the entry File Name\n  * </pre>\n+ * @NotThreadSafe super-class is not thread-safe\n  */\n public class UnicodePathExtraField extends AbstractUnicodeExtraField {\n \n--- a/src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java\n  *\n  * <p>Assumes local file data and central directory entries are\n  * identical - unless told the opposite.</p>\n- *\n+ * @NotThreadSafe\n  */\n public class UnrecognizedExtraField implements ZipExtraField {\n \n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n  * Extension that adds better handling of extra fields and provides\n  * access to the internal and external file attributes.\n  *\n+ * @NotThreadSafe\n  */\n public class ZipArchiveEntry extends java.util.zip.ZipEntry\n     implements ArchiveEntry, Cloneable {\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n import org.apache.commons.compress.archivers.ArchiveEntry;\n import org.apache.commons.compress.archivers.ArchiveInputStream;\n \n+/**\n+ * Implements and input stream that can read Zip archives.\n+ * @NotThreadSafe\n+ */\n public class ZipArchiveInputStream extends ArchiveInputStream {\n \n     private static final int SHORT = 2;\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n  * the {@link #STORED STORED} method, here setting the CRC and\n  * uncompressed size information is required before {@link\n  * #putNextEntry putNextEntry} can be called.</p>\n- *\n+ * @NotThreadSafe\n  */\n public class ZipArchiveOutputStream extends ArchiveOutputStream {\n \n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java\n          * \n          * @see Simple8BitZipEncoding#Simple8BitZipEncoding(char[])\n          */\n-        SimpleEncodingHolder(char [] highChars) {\n+        SimpleEncodingHolderxx(char [] highChars) {\n             this.highChars = highChars;\n         }\n \n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java\n /**\n  * An input stream that decompresses from the BZip2 format (without the file\n  * header chars) to be read as any other stream.\n+ * \n+ * @NotThreadSafe\n  */\n public class BZip2CompressorInputStream extends CompressorInputStream implements\n                                                                           BZip2Constants {\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n  * <p>\n  * TODO: Update to BZip2 1.0.1\n  * </p>\n- *\n+ * @NotThreadSafe\n  */\n public class BZip2CompressorOutputStream extends CompressorOutputStream\n     implements BZip2Constants {\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java\n /**\n  * A simple class the hold and calculate the CRC for sanity checking of the\n  * data.\n+ * @NotThreadSafe\n  */\n class CRC {\n     private static final int crc32Table[] = {", "timestamp": 1238198676, "metainfo": ""}