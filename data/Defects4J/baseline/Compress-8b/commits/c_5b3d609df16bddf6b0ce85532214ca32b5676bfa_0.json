{"sha": "5b3d609df16bddf6b0ce85532214ca32b5676bfa", "log": "simple command line application used to diagnose COMPRESS-90  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/Lister.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.apache.commons.compress.archivers.zip;\n+\n+import java.io.BufferedInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Enumeration;\n+import org.apache.commons.compress.archivers.ArchiveEntry;\n+\n+/**\n+ * Simple command line application that lists the contents of a ZIP archive.\n+ *\n+ * <p>The name of the archive must be given as a command line argument.</p>\n+ *\n+ * <p>Optional command line arguments specify the encoding to assume\n+ * and whether to use ZipFile or ZipArchiveInputStream.</p>\n+ */\n+public final class Lister {\n+    private static class CommandLine {\n+        String archive;\n+        boolean useStream = false;\n+        String encoding;\n+    }\n+\n+    public static void main(String[] args) throws IOException {\n+        CommandLine cl = parse(args);\n+        File f = new File(cl.archive);\n+        if (!f.isFile()) {\n+            System.err.println(f + \" doesn't exists or is a directory\");\n+            usage();\n+        }\n+        if (cl.useStream) {\n+            BufferedInputStream fs =\n+                new BufferedInputStream(new FileInputStream(f));\n+            try {\n+                ZipArchiveInputStream zs =\n+                    new ZipArchiveInputStream(fs, cl.encoding, true);\n+                for (ArchiveEntry entry = zs.getNextEntry();\n+                     entry != null;\n+                     entry = zs.getNextEntry()) {\n+                    list((ZipArchiveEntry) entry);\n+                }\n+            } finally {\n+                fs.close();\n+            }\n+        } else {\n+            ZipFile zf = new ZipFile(f, cl.encoding);\n+            try {\n+                for (Enumeration entries = zf.getEntries();\n+                     entries.hasMoreElements(); ) {\n+                    list((ZipArchiveEntry) entries.nextElement());\n+                }\n+            } finally {\n+                zf.close();\n+            }\n+        }\n+    }\n+\n+    private static void list(ZipArchiveEntry entry) {\n+        System.out.println(entry.getName());\n+    }\n+\n+    private static CommandLine parse(String[] args) {\n+        CommandLine cl = new CommandLine();\n+        boolean error = false;\n+        for (int i = 0; i < args.length; i++) {\n+            if (args[i].equals(\"-enc\")) {\n+                if (args.length > i + 1) {\n+                    cl.encoding = args[++i];\n+                } else {\n+                    System.err.println(\"missing argument to -enc\");\n+                    error = true;\n+                }\n+            } else if (args[i].equals(\"-stream\")) {\n+                cl.useStream = true;\n+            } else if (args[i].equals(\"-file\")) {\n+                cl.useStream = false;\n+            } else if (cl.archive != null) {\n+                System.err.println(\"Only one archive\");\n+                error = true;\n+            } else {\n+                cl.archive = args[i];\n+            }\n+        }\n+        if (error || cl.archive == null) {\n+            usage();\n+        }\n+        return cl;\n+    }\n+\n+    private static void usage() {\n+        System.err.println(\"lister [-enc encoding] [-stream] [-file] archive\");\n+        System.exit(1);\n+    }\n+}", "timestamp": 1265907799, "metainfo": ""}