{"sha": "91488bbb706442ef38e5ac57b789540377d5a608", "log": "Don't expose close entry method Remove unnecessary override methods  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java\n \n     private boolean entryEOF = false;\n \n-    private final byte[] singleByteBuf = new byte[1];\n-\n     private final byte tmpbuf[] = new byte[4096];\n \n     private long crc = 0;\n      *             if an I/O error has occurred or if a CPIO file error has\n      *             occurred\n      */\n-    public void closeEntry() throws IOException {\n+    private void closeEntry() throws IOException {\n         ensureOpen();\n         while (read(this.tmpbuf, 0, this.tmpbuf.length) != -1) {\n             // do nothing\n     }\n \n     /**\n-     * Reads a byte of data. This method will block until enough input is\n-     * available.\n-     * \n-     * @return the byte read, or -1 if end of input is reached\n-     * @throws IOException\n-     *             if an I/O error has occurred or if a CPIO file error has\n-     *             occurred\n-     */\n-    public int read() throws IOException {\n-        return read(this.singleByteBuf, 0, 1) == -1 ? -1\n-                : this.singleByteBuf[0] & 0xff;\n-    }\n-\n-    /**\n      * Reads from the current CPIO entry into an array of bytes. Blocks until\n      * some input is available.\n      * ", "timestamp": 1238436782, "metainfo": ""}