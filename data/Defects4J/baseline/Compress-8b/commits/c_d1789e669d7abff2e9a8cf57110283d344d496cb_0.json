{"sha": "d1789e669d7abff2e9a8cf57110283d344d496cb", "log": "applying patch from Christian Grobmeier  https://issues.apache.org/jira/browse/SANDBOX-30    ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n     /**\n      * The length of the name field in a header buffer.\n      */\n-    public static final int NAMELEN = 100;\n+    public static final int NAMELEN = 99;\n \n     /**\n      * The entry's modification time.\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java\n      * <B>MUST</B> be called to ensure that all buffered data is completely\n      * written to the output stream.\n      *\n+     * The entry must be 0 terminated. Maximum filename is 99 chars, \n+     * according to V7 specification.\n+     * \n      * @param entry The TarArchiveEntry to be written to the archive.\n      * @exception IOException when an IO error causes operation to fail\n      */\n     public void putNextEntry( final TarArchiveEntry entry )\n         throws IOException\n     {\n-        if( entry.getName().length() >= TarArchiveEntry.NAMELEN )\n+        if( entry.getName().length() > TarArchiveEntry.NAMELEN )\n         {\n             if( m_longFileMode == LONGFILE_GNU )\n             {\n                     new TarArchiveEntry( TarConstants.GNU_LONGLINK,\n                                   TarConstants.LF_GNUTYPE_LONGNAME );\n \n-                longLinkEntry.setSize( entry.getName().length() );\n+                longLinkEntry.setSize( entry.getName().length() + 1);\n                 putNextEntry( longLinkEntry );\n                 write( entry.getName().getBytes() );\n-                //write( 0 );\n+                write( 0 );\n                 closeEntry();\n             }\n             else if( m_longFileMode != LONGFILE_TRUNCATE )\n--- a/src/test/java/org/apache/commons/compress/archivers/TarTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/TarTestCase.java\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n+import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n+\n+import junit.framework.TestCase;\n \n import org.apache.commons.compress.AbstractTestCase;\n import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n \n public final class TarTestCase extends AbstractTestCase {\n     public void testTarArchiveCreation() throws Exception {\n-\n \t\tfinal File output = new File(dir, \"bla.tar\");\n-\n \t\tfinal File file1 = new File(getClass().getClassLoader().getResource(\"test1.xml\").getFile());\n-\n     \tfinal OutputStream out = new FileOutputStream(output);\n-        \n         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out);\n-        \n         final TarArchiveEntry entry = new TarArchiveEntry(\"testdata/test1.xml\");\n         entry.setModTime(0);\n         entry.setSize(file1.length());\n         entry.setUserName(\"avalon\");\n         entry.setGroupName(\"excalibur\");\n         entry.setMode(0100000);\n-        \n         os.putArchiveEntry(entry);\n         IOUtils.copy(new FileInputStream(file1), os);\n-\n         os.closeArchiveEntry();\n         os.close();\n     }\n+    \n+    public void testTarArchiveLongNameCreation() throws Exception {\n+    \tString name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\";\n+    \tbyte[] bytes = name.getBytes();\n+    \tassertEquals(bytes.length, 99);\n+    \t\n+\t\tfinal File output = new File(dir, \"bla.tar\");\n+\t\tfinal File file1 = new File(getClass().getClassLoader().getResource(\"test1.xml\").getFile());\n+    \tfinal OutputStream out = new FileOutputStream(output);\n+        final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out);\n+        final TarArchiveEntry entry = new TarArchiveEntry(name);\n+        entry.setModTime(0);\n+        entry.setSize(file1.length());\n+        entry.setUserID(0);\n+        entry.setGroupID(0);\n+        entry.setUserName(\"avalon\");\n+        entry.setGroupName(\"excalibur\");\n+        entry.setMode(0100000);\n+        os.putArchiveEntry(entry);\n+        IOUtils.copy(new FileInputStream(file1), os);\n+        os.closeArchiveEntry();\n+        os.close();\n+        \n+        \n+        ArchiveOutputStream os2 = null;\n+        try {\n+        \tString toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\";\n+        \tfinal File output2 = new File(dir, \"bla.tar\");\n+        \tfinal OutputStream out2 = new FileOutputStream(output2);\n+        \tos2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2);\n+        \tfinal TarArchiveEntry entry2 = new TarArchiveEntry(toLongName);\n+        \tentry2.setModTime(0);\n+        \tentry2.setSize(file1.length());\n+        \tentry2.setUserID(0);\n+        \tentry2.setGroupID(0);\n+        \tentry2.setUserName(\"avalon\");\n+        \tentry2.setGroupName(\"excalibur\");\n+        \tentry2.setMode(0100000);\n+        \tos.putArchiveEntry(entry);\n+        \tIOUtils.copy(new FileInputStream(file1), os2);\n+        } catch(IOException e) {\n+        \tassertTrue(true);\n+        } finally {\n+        \tos2.closeArchiveEntry();\n+        }\n+    }\n+    \n     public void testTarUnarchive() throws Exception {\n \t\tfinal File input = new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile());\n \t\tfinal InputStream is = new FileInputStream(input);", "timestamp": 1231332762, "metainfo": ""}