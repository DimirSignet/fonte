{"sha": "7b125a334e513349a4445e38b9d5a109f5e26f99", "log": "COMPRESS-93: Support for alternative ZIP compression methods  Override the ZipEntry compression method getter and setter in ZipArchiveEntry. This prevents the IllegalArgumentException that was thrown whenever a zip entry with an unsupported compression method was encountered. With this change an IOException is thrown instead only if or when the entry is actually being read or written. In addition, a public ZipArchiveEntry.isSupportedCompressionMethod() method is introduced so client code can choose to explicitly skip reading ZIP entries with unsupported compression methods.  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n     private static final int SHORT_MASK = 0xFFFF;\n     private static final int SHORT_SHIFT = 16;\n \n+    /**\n+     * The {@link java.util.zip.ZipEntry} base class only supports\n+     * the compression methods STORED and DEFLATED. We override the\n+     * field so that any compression methods can be used.\n+     * <p>\n+     * The default value -1 means that the method has not been specified.\n+     *\n+     * @see <a href=\"https://issues.apache.org/jira/browse/COMPRESS-93\"\n+     *        >COMPRESS-93</a>\n+     */\n+    private int method = -1;\n+\n     private int internalAttributes = 0;\n     private int platform = PLATFORM_FAT;\n     private long externalAttributes = 0;\n             // initializes extra data to an empty byte array\n             setExtra();\n         }\n+        setMethod(entry.getMethod());\n     }\n \n     /**\n         e.setExternalAttributes(getExternalAttributes());\n         e.setExtraFields(getExtraFields());\n         return e;\n+    }\n+\n+    /**\n+     * Checks whether the compression method of this entry is supported,\n+     * i.e. whether the content of this entry can be accessed.\n+     *\n+     * @since Commons Compress 1.1\n+     * @see <a href=\"https://issues.apache.org/jira/browse/COMPRESS-93\"\n+     *         >COMPRESS-93</a>\n+     * @return <code>true</code> if the compression method is known\n+     *         and supported, <code>false</code> otherwise\n+     */\n+    public boolean isSupportedCompressionMethod() {\n+        return method == STORED || method == DEFLATED;\n+    }\n+\n+    /**\n+     * Returns the compression method of this entry, or -1 if the\n+     * compression method has not been specified.\n+     *\n+     * @return compression method\n+     */\n+    public int getMethod() {\n+        return method;\n+    }\n+\n+    /**\n+     * Sets the compression method of this entry.\n+     *\n+     * @param method compression method\n+     */\n+    public void setMethod(int method) {\n+        if (method < 0) {\n+            throw new IllegalArgumentException(\n+                    \"ZIP compression method can not be negative: \" + method);\n+        }\n+        this.method = method;\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n         // avoid int overflow, check null buffer\n         if (start <= buffer.length && length >= 0 && start >= 0\n             && buffer.length - start >= length) {\n+            if (!current.isSupportedCompressionMethod()) {\n+                throw new IOException(\n+                        \"Unsupported compression method \" + current.getMethod()\n+                        + \" in ZIP archive entry \" + current.getName());\n+            }\n+\n             if (current.getMethod() == ZipArchiveOutputStream.STORED) {\n                 int csize = (int) current.getSize();\n                 if (readBytesOfEntry >= csize) {\n                 crc.update(buffer, start, toRead);\n                 return toRead;\n             }\n+\n             if (inf.needsInput()) {\n                 fill();\n                 if (lengthOfLastRead > 0) {\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n      * @throws IOException on error\n      */\n     public void write(byte[] b, int offset, int length) throws IOException {\n-        if (entry.getMethod() == DEFLATED) {\n+        if (!entry.isSupportedCompressionMethod()) {\n+            throw new IOException(\n+                    \"Unsupported compression method \" + entry.getMethod()\n+                    + \" in ZIP archive entry \" + entry.getName());\n+        } else if (entry.getMethod() == DEFLATED) {\n             if (length > 0) {\n                 if (!def.finished()) {\n                     if (length <= DEFLATER_BLOCK_SIZE) {\n--- a/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n+import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n import java.util.ArrayList;\n         out.close();\n         in.close();\n     }\n-    \n+\n+    /**\n+     * Test case for\n+     * <a href=\"https://issues.apache.org/jira/browse/COMPRESS-93\"\n+     * >COMPRESS-93</a>.\n+     */\n+    public void testSupportedCompressionMethod() throws IOException {\n+        ZipFile bla = new ZipFile(getFile(\"bla.zip\"));\n+        assertTrue(bla.getEntry(\"test1.xml\").isSupportedCompressionMethod());\n+        bla.close();\n+\n+        ZipFile moby = new ZipFile(getFile(\"moby.zip\"));\n+        assertFalse(moby.getEntry(\"README\").isSupportedCompressionMethod());\n+        moby.close();\n+    }\n+\n     /**\n      * Checks if all entries from a nested archive can be read.\n      * The archive: OSX_ArchiveWithNestedArchive.zip contains:\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java\n         assertEquals(0x11, ze.getExternalAttributes()  & 0xFFFF);\n     }\n \n+    /**\n+     * Test case for\n+     * <a href=\"https://issues.apache.org/jira/browse/COMPRESS-93\"\n+     * >COMPRESS-93</a>.\n+     */\n+    public void testCompressionMethod() {\n+        ZipArchiveEntry entry = new ZipArchiveEntry(\"foo\");\n+        assertEquals(-1, entry.getMethod());\n+        assertFalse(entry.isSupportedCompressionMethod());\n+\n+        entry.setMethod(ZipArchiveEntry.STORED);\n+        assertEquals(ZipArchiveEntry.STORED, entry.getMethod());\n+        assertTrue(entry.isSupportedCompressionMethod());\n+\n+        entry.setMethod(ZipArchiveEntry.DEFLATED);\n+        assertEquals(ZipArchiveEntry.DEFLATED, entry.getMethod());\n+        assertTrue(entry.isSupportedCompressionMethod());\n+\n+        // Test the unsupported \"imploded\" compression method (6)\n+        entry.setMethod(6);\n+        assertEquals(6, entry.getMethod());\n+        assertFalse(entry.isSupportedCompressionMethod());\n+    }\n+\n }", "timestamp": 1260729115, "metainfo": ""}