{"sha": "e1640e5694cde325d288fdf0ced722482889be3e", "log": "check name/directory/size and lastModified read from cpio is consistent with what we write  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java\n         }\n         // TODO set other fields as needed\n         setMode(mode);\n+        setTime(inputFile.lastModified() / 1000);\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n  * entry.setFileSize(contents.length());\n  * entry.setMode(CpioConstants.C_ISREG); // regular file\n  * ... set other attributes, e.g. time, number of links\n- * out.putNextEntry(entry);\n+ * out.putArchiveEntry(entry);\n  * out.write(testContents.getBytes());\n  * out.close();\n  * </pre></code>\n--- a/src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java\n import org.apache.commons.compress.AbstractTestCase;\n import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;\n import org.apache.commons.compress.archivers.cpio.CpioConstants;\n+import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;\n+import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;\n import org.apache.commons.compress.utils.IOUtils;\n \n public final class CpioTestCase extends AbstractTestCase {\n         Map result = new HashMap();\n         ArchiveEntry entry = null;\n         while ((entry = in.getNextEntry()) != null) {\n-            File target = new File(dir, entry.getName());\n-            final OutputStream out = new FileOutputStream(target);\n+            File cpioget = new File(dir, entry.getName());\n+            final OutputStream out = new FileOutputStream(cpioget);\n             IOUtils.copy(in, out);\n             out.close();\n-            result.put(entry.getName(), target);\n+            result.put(entry.getName(), cpioget);\n         }\n         in.close();\n         is.close();\n         assertEquals(\"length of \" + t.getAbsolutePath(), file2Length, t.length());\n     }\n \n+    public void testDirectoryEntryFromFile() throws Exception {\n+        File[] tmp = createTempDirAndFile();\n+        File archive = null;\n+        CpioArchiveOutputStream tos = null;\n+        CpioArchiveInputStream tis = null;\n+        try {\n+            archive = File.createTempFile(\"test.\", \".cpio\", tmp[0]);\n+            archive.deleteOnExit();\n+            tos = new CpioArchiveOutputStream(new FileOutputStream(archive));\n+            long beforeArchiveWrite = tmp[0].lastModified();\n+            CpioArchiveEntry in = new CpioArchiveEntry(tmp[0], \"foo\");\n+            tos.putArchiveEntry(in);\n+            tos.closeArchiveEntry();\n+            tos.close();\n+            tos = null;\n+            tis = new CpioArchiveInputStream(new FileInputStream(archive));\n+            CpioArchiveEntry out = tis.getNextCPIOEntry();\n+            tis.close();\n+            tis = null;\n+            assertNotNull(out);\n+            assertEquals(\"foo\", out.getName());\n+            assertEquals(0, out.getSize());\n+            // CPIO stores time with a granularity of 1 second\n+            assertEquals(beforeArchiveWrite / 1000,\n+                         out.getLastModifiedDate().getTime() / 1000);\n+            assertTrue(out.isDirectory());\n+        } finally {\n+            if (tis != null) {\n+                tis.close();\n+            }\n+            if (tos != null) {\n+                tos.close();\n+            }\n+            if (archive != null) {\n+                archive.delete();\n+            }\n+            tmp[1].delete();\n+            tmp[0].delete();\n+        }\n+    }\n+\n+    public void testExplicitDirectoryEntry() throws Exception {\n+        File[] tmp = createTempDirAndFile();\n+        File archive = null;\n+        CpioArchiveOutputStream tos = null;\n+        CpioArchiveInputStream tis = null;\n+        try {\n+            archive = File.createTempFile(\"test.\", \".cpio\", tmp[0]);\n+            archive.deleteOnExit();\n+            tos = new CpioArchiveOutputStream(new FileOutputStream(archive));\n+            long beforeArchiveWrite = tmp[0].lastModified();\n+            CpioArchiveEntry in = new CpioArchiveEntry(\"foo/\");\n+            in.setTime(beforeArchiveWrite / 1000);\n+            in.setMode(CpioConstants.C_ISDIR);\n+            tos.putArchiveEntry(in);\n+            tos.closeArchiveEntry();\n+            tos.close();\n+            tos = null;\n+            tis = new CpioArchiveInputStream(new FileInputStream(archive));\n+            CpioArchiveEntry out = tis.getNextCPIOEntry();\n+            tis.close();\n+            tis = null;\n+            assertNotNull(out);\n+            assertEquals(\"foo/\", out.getName());\n+            assertEquals(0, out.getSize());\n+            assertEquals(beforeArchiveWrite / 1000,\n+                         out.getLastModifiedDate().getTime() / 1000);\n+            assertTrue(out.isDirectory());\n+        } finally {\n+            if (tis != null) {\n+                tis.close();\n+            }\n+            if (tos != null) {\n+                tos.close();\n+            }\n+            if (archive != null) {\n+                archive.delete();\n+            }\n+            tmp[1].delete();\n+            tmp[0].delete();\n+        }\n+    }\n+\n+    public void testFileEntryFromFile() throws Exception {\n+        File[] tmp = createTempDirAndFile();\n+        File archive = null;\n+        CpioArchiveOutputStream tos = null;\n+        CpioArchiveInputStream tis = null;\n+        FileInputStream fis = null;\n+        try {\n+            archive = File.createTempFile(\"test.\", \".cpio\", tmp[0]);\n+            archive.deleteOnExit();\n+            tos = new CpioArchiveOutputStream(new FileOutputStream(archive));\n+            CpioArchiveEntry in = new CpioArchiveEntry(tmp[1], \"foo\");\n+            tos.putArchiveEntry(in);\n+            byte[] b = new byte[(int) tmp[1].length()];\n+            fis = new FileInputStream(tmp[1]);\n+            int read;\n+            while ((read = fis.read(b)) > 0) {\n+                tos.write(b);\n+            }\n+            fis.close();\n+            fis = null;\n+            tos.closeArchiveEntry();\n+            tos.close();\n+            tos = null;\n+            tis = new CpioArchiveInputStream(new FileInputStream(archive));\n+            CpioArchiveEntry out = tis.getNextCPIOEntry();\n+            tis.close();\n+            tis = null;\n+            assertNotNull(out);\n+            assertEquals(\"foo\", out.getName());\n+            assertEquals(tmp[1].length(), out.getSize());\n+            assertEquals(tmp[1].lastModified() / 1000,\n+                         out.getLastModifiedDate().getTime() / 1000);\n+            assertFalse(out.isDirectory());\n+        } finally {\n+            if (tis != null) {\n+                tis.close();\n+            }\n+            if (tos != null) {\n+                tos.close();\n+            }\n+            if (archive != null) {\n+                archive.delete();\n+            }\n+            if (fis != null) {\n+                fis.close();\n+            }\n+            tmp[1].delete();\n+            tmp[0].delete();\n+        }\n+    }\n+\n+    public void testExplicitFileEntry() throws Exception {\n+        File[] tmp = createTempDirAndFile();\n+        File archive = null;\n+        CpioArchiveOutputStream tos = null;\n+        CpioArchiveInputStream tis = null;\n+        FileInputStream fis = null;\n+        try {\n+            archive = File.createTempFile(\"test.\", \".cpio\", tmp[0]);\n+            archive.deleteOnExit();\n+            tos = new CpioArchiveOutputStream(new FileOutputStream(archive));\n+            CpioArchiveEntry in = new CpioArchiveEntry(\"foo\");\n+            in.setTime(tmp[1].lastModified() / 1000);\n+            in.setSize(tmp[1].length());\n+            in.setMode(CpioConstants.C_ISREG);\n+            tos.putArchiveEntry(in);\n+            byte[] b = new byte[(int) tmp[1].length()];\n+            fis = new FileInputStream(tmp[1]);\n+            int read;\n+            while ((read = fis.read(b)) > 0) {\n+                tos.write(b);\n+            }\n+            fis.close();\n+            fis = null;\n+            tos.closeArchiveEntry();\n+            tos.close();\n+            tos = null;\n+            tis = new CpioArchiveInputStream(new FileInputStream(archive));\n+            CpioArchiveEntry out = tis.getNextCPIOEntry();\n+            tis.close();\n+            tis = null;\n+            assertNotNull(out);\n+            assertEquals(\"foo\", out.getName());\n+            assertEquals(tmp[1].length(), out.getSize());\n+            assertEquals(tmp[1].lastModified() / 1000,\n+                         out.getLastModifiedDate().getTime() / 1000);\n+            assertFalse(out.isDirectory());\n+        } finally {\n+            if (tis != null) {\n+                tis.close();\n+            }\n+            if (tos != null) {\n+                tos.close();\n+            }\n+            if (archive != null) {\n+                archive.delete();\n+            }\n+            if (fis != null) {\n+                fis.close();\n+            }\n+            tmp[1].delete();\n+            tmp[0].delete();\n+        }\n+    }\n }", "timestamp": 1249157273, "metainfo": ""}