{"sha": "08c05022df949a1ae0ced740d6305d9374f5cd13", "log": "added test which reads the entries from a nested archive  ", "commit": "\n--- a/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n         out.close();\n         in.close();\n     }\n+    \n+    /**\n+     * Checks if all entries from a nested archive can be read.\n+     * The archive: OSX_ArchiveWithNestedArchive.zip contains:\n+     * NestedArchiv.zip and test.xml3.\n+     * \n+     * The nested archive:  NestedArchive.zip contains test1.xml and test2.xml\n+     * \n+     * @throws Exception\n+     */\n+    public void testListAllFilesWithNestedArchive() throws Exception {\n+        final File input = getFile(\"archives/OSX_ArchiveWithNestedArchive.zip\");\n+       \n+        List results = new ArrayList();\n+\n+        final InputStream is = new FileInputStream(input);\n+        ArchiveInputStream in = null;\n+        try {\n+            in = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n+\n+            ZipArchiveEntry entry = null;\n+            while((entry = (ZipArchiveEntry)in.getNextEntry()) != null) {\n+                results.add((entry.getName()));\n+\n+                ArchiveInputStream nestedIn = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", in);\n+                ZipArchiveEntry nestedEntry = null;\n+                while((nestedEntry = (ZipArchiveEntry)nestedIn.getNextEntry()) != null) {\n+                    results.add(nestedEntry.getName());\n+                }\n+               // nested stream must not be closed here\n+            }\n+        } finally {\n+            if (in != null) {\n+                in.close();\n+            }\n+        }\n+        is.close();\n+        \n+        results.contains(\"NestedArchiv.zip\");\n+        results.contains(\"test1.xml\");\n+        results.contains(\"test2.xml\");\n+        results.contains(\"test3.xml\");\n+    }\n }", "timestamp": 1240139262, "metainfo": ""}