{"sha": "4367229b6c6b56489442de4d1977e05660dd6188", "log": "copy Ant's zip tests  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/AsiExtraFieldTest.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.apache.commons.compress.archivers.zip;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * JUnit 3 testcases for org.apache.commons.compress.archivers.zip.AsiExtraField.\n+ *\n+ */\n+public class AsiExtraFieldTest extends TestCase implements UnixStat {\n+    public AsiExtraFieldTest(String name) {\n+        super(name);\n+    }\n+\n+    /**\n+     * Test file mode magic.\n+     */\n+    public void testModes() {\n+        AsiExtraField a = new AsiExtraField();\n+        a.setMode(0123);\n+        assertEquals(\"plain file\", 0100123, a.getMode());\n+        a.setDirectory(true);\n+        assertEquals(\"directory\", 040123, a.getMode());\n+        a.setLinkedFile(\"test\");\n+        assertEquals(\"symbolic link\", 0120123, a.getMode());\n+    }\n+\n+    /**\n+     * Test content.\n+     */\n+    public void testContent() {\n+        AsiExtraField a = new AsiExtraField();\n+        a.setMode(0123);\n+        a.setUserId(5);\n+        a.setGroupId(6);\n+        byte[] b = a.getLocalFileDataData();\n+\n+        // CRC manually calculated, sorry\n+        byte[] expect = {(byte)0xC6, 0x02, 0x78, (byte)0xB6, // CRC\n+                         0123, (byte)0x80,                   // mode\n+                         0, 0, 0, 0,                         // link length\n+                         5, 0, 6, 0};                        // uid, gid\n+        assertEquals(\"no link\", expect.length, b.length);\n+        for (int i=0; i<expect.length; i++) {\n+            assertEquals(\"no link, byte \"+i, expect[i], b[i]);\n+        }\n+\n+        a.setLinkedFile(\"test\");\n+        expect = new byte[] {0x75, (byte)0x8E, 0x41, (byte)0xFD, // CRC\n+                             0123, (byte)0xA0,                   // mode\n+                             4, 0, 0, 0,                         // link length\n+                             5, 0, 6, 0,                         // uid, gid\n+                             (byte)'t', (byte)'e', (byte)'s', (byte)'t'};\n+        b = a.getLocalFileDataData();\n+        assertEquals(\"no link\", expect.length, b.length);\n+        for (int i=0; i<expect.length; i++) {\n+            assertEquals(\"no link, byte \"+i, expect[i], b[i]);\n+        }\n+\n+    }\n+\n+    /**\n+     * Test reparse\n+     */\n+    public void testReparse() throws Exception {\n+        // CRC manually calculated, sorry\n+        byte[] data = {(byte)0xC6, 0x02, 0x78, (byte)0xB6, // CRC\n+                       0123, (byte)0x80,                   // mode\n+                       0, 0, 0, 0,                         // link length\n+                       5, 0, 6, 0};                        // uid, gid\n+        AsiExtraField a = new AsiExtraField();\n+        a.parseFromLocalFileData(data, 0, data.length);\n+        assertEquals(\"length plain file\", data.length,\n+                     a.getLocalFileDataLength().getValue());\n+        assertTrue(\"plain file, no link\", !a.isLink());\n+        assertTrue(\"plain file, no dir\", !a.isDirectory());\n+        assertEquals(\"mode plain file\", FILE_FLAG | 0123, a.getMode());\n+        assertEquals(\"uid plain file\", 5, a.getUserId());\n+        assertEquals(\"gid plain file\", 6, a.getGroupId());\n+\n+        data = new byte[] {0x75, (byte)0x8E, 0x41, (byte)0xFD, // CRC\n+                           0123, (byte)0xA0,                   // mode\n+                           4, 0, 0, 0,                         // link length\n+                           5, 0, 6, 0,                         // uid, gid\n+                           (byte)'t', (byte)'e', (byte)'s', (byte)'t'};\n+        a = new AsiExtraField();\n+        a.parseFromLocalFileData(data, 0, data.length);\n+        assertEquals(\"length link\", data.length,\n+                     a.getLocalFileDataLength().getValue());\n+        assertTrue(\"link, is link\", a.isLink());\n+        assertTrue(\"link, no dir\", !a.isDirectory());\n+        assertEquals(\"mode link\", LINK_FLAG | 0123, a.getMode());\n+        assertEquals(\"uid link\", 5, a.getUserId());\n+        assertEquals(\"gid link\", 6, a.getGroupId());\n+        assertEquals(\"test\", a.getLinkedFile());\n+\n+        data = new byte[] {(byte)0x8E, 0x01, (byte)0xBF, (byte)0x0E, // CRC\n+                           0123, (byte)0x40,                         // mode\n+                           0, 0, 0, 0,                               // link\n+                           5, 0, 6, 0};                          // uid, gid\n+        a = new AsiExtraField();\n+        a.parseFromLocalFileData(data, 0, data.length);\n+        assertEquals(\"length dir\", data.length,\n+                     a.getLocalFileDataLength().getValue());\n+        assertTrue(\"dir, no link\", !a.isLink());\n+        assertTrue(\"dir, is dir\", a.isDirectory());\n+        assertEquals(\"mode dir\", DIR_FLAG | 0123, a.getMode());\n+        assertEquals(\"uid dir\", 5, a.getUserId());\n+        assertEquals(\"gid dir\", 6, a.getGroupId());\n+\n+        data = new byte[] {0, 0, 0, 0,                           // bad CRC\n+                           0123, (byte)0x40,                     // mode\n+                           0, 0, 0, 0,                           // link\n+                           5, 0, 6, 0};                          // uid, gid\n+        a = new AsiExtraField();\n+        try {\n+            a.parseFromLocalFileData(data, 0, data.length);\n+            fail(\"should raise bad CRC exception\");\n+        } catch (Exception e) {\n+            assertEquals(\"bad CRC checksum 0 instead of ebf018e\",\n+                         e.getMessage());\n+        }\n+    }\n+\n+    public void testClone() {\n+        AsiExtraField s1 = new AsiExtraField();\n+        s1.setUserId(42);\n+        s1.setGroupId(12);\n+        s1.setLinkedFile(\"foo\");\n+        s1.setMode(0644);\n+        s1.setDirectory(true);\n+        AsiExtraField s2 = (AsiExtraField) s1.clone();\n+        assertNotSame(s1, s2);\n+        assertEquals(s1.getUserId(), s2.getUserId());\n+        assertEquals(s1.getGroupId(), s2.getGroupId());\n+        assertEquals(s1.getLinkedFile(), s2.getLinkedFile());\n+        assertEquals(s1.getMode(), s2.getMode());\n+        assertEquals(s1.isDirectory(), s2.isDirectory());\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.apache.commons.compress.archivers.zip;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * JUnit 3 testcases for org.apache.commons.compress.archivers.zip.ExtraFieldUtils.\n+ *\n+ */\n+public class ExtraFieldUtilsTest extends TestCase implements UnixStat {\n+    public ExtraFieldUtilsTest(String name) {\n+        super(name);\n+    }\n+\n+    private AsiExtraField a;\n+    private UnrecognizedExtraField dummy;\n+    private byte[] data;\n+    private byte[] aLocal;\n+\n+    public void setUp() {\n+        a = new AsiExtraField();\n+        a.setMode(0755);\n+        a.setDirectory(true);\n+        dummy = new UnrecognizedExtraField();\n+        dummy.setHeaderId(new ZipShort(1));\n+        dummy.setLocalFileDataData(new byte[] {0});\n+        dummy.setCentralDirectoryData(new byte[] {0});\n+\n+        aLocal = a.getLocalFileDataData();\n+        byte[] dummyLocal = dummy.getLocalFileDataData();\n+        data = new byte[4 + aLocal.length + 4 + dummyLocal.length];\n+        System.arraycopy(a.getHeaderId().getBytes(), 0, data, 0, 2);\n+        System.arraycopy(a.getLocalFileDataLength().getBytes(), 0, data, 2, 2);\n+        System.arraycopy(aLocal, 0, data, 4, aLocal.length);\n+        System.arraycopy(dummy.getHeaderId().getBytes(), 0, data,\n+                         4+aLocal.length, 2);\n+        System.arraycopy(dummy.getLocalFileDataLength().getBytes(), 0, data,\n+                         4+aLocal.length+2, 2);\n+        System.arraycopy(dummyLocal, 0, data,\n+                         4+aLocal.length+4, dummyLocal.length);\n+\n+    }\n+\n+    /**\n+     * test parser.\n+     */\n+    public void testParse() throws Exception {\n+        ZipExtraField[] ze = ExtraFieldUtils.parse(data);\n+        assertEquals(\"number of fields\", 2, ze.length);\n+        assertTrue(\"type field 1\", ze[0] instanceof AsiExtraField);\n+        assertEquals(\"mode field 1\", 040755,\n+                     ((AsiExtraField) ze[0]).getMode());\n+        assertTrue(\"type field 2\", ze[1] instanceof UnrecognizedExtraField);\n+        assertEquals(\"data length field 2\", 1,\n+                     ze[1].getLocalFileDataLength().getValue());\n+\n+        byte[] data2 = new byte[data.length-1];\n+        System.arraycopy(data, 0, data2, 0, data2.length);\n+        try {\n+            ExtraFieldUtils.parse(data2);\n+            fail(\"data should be invalid\");\n+        } catch (Exception e) {\n+            assertEquals(\"message\",\n+                         \"data starting at \"+(4+aLocal.length)+\" is in unknown format\",\n+                         e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Test merge methods\n+     */\n+    public void testMerge() {\n+        byte[] local =\n+            ExtraFieldUtils.mergeLocalFileDataData(new ZipExtraField[] {a, dummy});\n+        assertEquals(\"local length\", data.length, local.length);\n+        for (int i=0; i<local.length; i++) {\n+            assertEquals(\"local byte \"+i, data[i], local[i]);\n+        }\n+\n+        byte[] dummyCentral = dummy.getCentralDirectoryData();\n+        byte[] data2 = new byte[4 + aLocal.length + 4 + dummyCentral.length];\n+        System.arraycopy(data, 0, data2, 0, 4 + aLocal.length + 2);\n+        System.arraycopy(dummy.getCentralDirectoryLength().getBytes(), 0,\n+                         data2, 4+aLocal.length+2, 2);\n+        System.arraycopy(dummyCentral, 0, data2,\n+                         4+aLocal.length+4, dummyCentral.length);\n+\n+\n+        byte[] central =\n+            ExtraFieldUtils.mergeCentralDirectoryData(new ZipExtraField[] {a, dummy});\n+        assertEquals(\"central length\", data2.length, central.length);\n+        for (int i=0; i<central.length; i++) {\n+            assertEquals(\"central byte \"+i, data2[i], central[i]);\n+        }\n+\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.apache.commons.compress.archivers.zip;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * JUnit 3 testcases for org.apache.commons.compress.archivers.zip.ZipEntry.\n+ *\n+ */\n+public class ZipArchiveEntryTest extends TestCase {\n+\n+    public ZipArchiveEntryTest(String name) {\n+        super(name);\n+    }\n+\n+    /**\n+     * test handling of extra fields\n+     *\n+     * @since 1.1\n+     */\n+    public void testExtraFields() {\n+        AsiExtraField a = new AsiExtraField();\n+        a.setDirectory(true);\n+        a.setMode(0755);\n+        UnrecognizedExtraField u = new UnrecognizedExtraField();\n+        u.setHeaderId(new ZipShort(1));\n+        u.setLocalFileDataData(new byte[0]);\n+\n+        ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\");\n+        ze.setExtraFields(new ZipExtraField[] {a, u});\n+        byte[] data1 = ze.getExtra();\n+        ZipExtraField[] result = ze.getExtraFields();\n+        assertEquals(\"first pass\", 2, result.length);\n+        assertSame(a, result[0]);\n+        assertSame(u, result[1]);\n+\n+        UnrecognizedExtraField u2 = new UnrecognizedExtraField();\n+        u2.setHeaderId(new ZipShort(1));\n+        u2.setLocalFileDataData(new byte[] {1});\n+\n+        ze.addExtraField(u2);\n+        byte[] data2 = ze.getExtra();\n+        result = ze.getExtraFields();\n+        assertEquals(\"second pass\", 2, result.length);\n+        assertSame(a, result[0]);\n+        assertSame(u2, result[1]);\n+        assertEquals(\"length second pass\", data1.length+1, data2.length);\n+\n+        UnrecognizedExtraField u3 = new UnrecognizedExtraField();\n+        u3.setHeaderId(new ZipShort(2));\n+        u3.setLocalFileDataData(new byte[] {1});\n+        ze.addExtraField(u3);\n+        result = ze.getExtraFields();\n+        assertEquals(\"third pass\", 3, result.length);\n+\n+        ze.removeExtraField(new ZipShort(1));\n+        byte[] data3 = ze.getExtra();\n+        result = ze.getExtraFields();\n+        assertEquals(\"fourth pass\", 2, result.length);\n+        assertSame(a, result[0]);\n+        assertSame(u3, result[1]);\n+        assertEquals(\"length fourth pass\", data2.length, data3.length);\n+\n+        try {\n+            ze.removeExtraField(new ZipShort(1));\n+            fail(\"should be no such element\");\n+        } catch (java.util.NoSuchElementException nse) {\n+        }\n+    }\n+\n+    public void testUnixMode() {\n+        ZipArchiveEntry ze = new ZipArchiveEntry(\"foo\");\n+        assertEquals(0, ze.getPlatform());\n+        ze.setUnixMode(0755);\n+        assertEquals(3, ze.getPlatform());\n+        assertEquals(0755,\n+                     (ze.getExternalAttributes() >> 16) & 0xFFFF);\n+        assertEquals(0, ze.getExternalAttributes()  & 0xFFFF);\n+\n+        ze.setUnixMode(0444);\n+        assertEquals(3, ze.getPlatform());\n+        assertEquals(0444,\n+                     (ze.getExternalAttributes() >> 16) & 0xFFFF);\n+        assertEquals(1, ze.getExternalAttributes()  & 0xFFFF);\n+\n+        ze = new ZipArchiveEntry(\"foo/\");\n+        assertEquals(0, ze.getPlatform());\n+        ze.setUnixMode(0777);\n+        assertEquals(3, ze.getPlatform());\n+        assertEquals(0777,\n+                     (ze.getExternalAttributes() >> 16) & 0xFFFF);\n+        assertEquals(0x10, ze.getExternalAttributes()  & 0xFFFF);\n+\n+        ze.setUnixMode(0577);\n+        assertEquals(3, ze.getPlatform());\n+        assertEquals(0577,\n+                     (ze.getExternalAttributes() >> 16) & 0xFFFF);\n+        assertEquals(0x11, ze.getExternalAttributes()  & 0xFFFF);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStreamTest.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.apache.commons.compress.archivers.zip;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+\n+import junit.framework.TestCase;\n+\n+public class ZipArchiveOutputStreamTest extends TestCase {\n+    \n+    private Date time;\n+    private ZipLong zl;\n+    \n+    /**\n+     * Constructor\n+     */\t\n+    public ZipArchiveOutputStreamTest(String name) {\n+        super(name);\n+    }\n+\t\n+    protected void setUp() throws Exception {\n+        time = new Date();\n+        Calendar cal = Calendar.getInstance();\n+        cal.setTime(time);\n+        int year = cal.get(Calendar.YEAR);\n+        int month = cal.get(Calendar.MONTH) + 1;\n+        long value =  ((year - 1980) << 25)\n+            |         (month << 21)\n+            |\t      (cal.get(Calendar.DAY_OF_MONTH) << 16)\n+            |         (cal.get(Calendar.HOUR_OF_DAY) << 11)\n+            |         (cal.get(Calendar.MINUTE) << 5)\n+            |         (cal.get(Calendar.SECOND) >> 1);\n+\n+        byte[] result = new byte[4];\n+        result[0] = (byte) ((value & 0xFF));\n+        result[1] = (byte) ((value & 0xFF00) >> 8);\n+        result[2] = (byte) ((value & 0xFF0000) >> 16);\n+        result[3] = (byte) ((value & 0xFF000000L) >> 24);\n+        zl = new ZipLong(result);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+    \n+    public void testZipLong() throws Exception {\n+        ZipLong test = ZipArchiveOutputStream.toDosTime(time);\n+        assertEquals(test.getValue(), zl.getValue());\n+    }\n+\n+    public void testAdjustToLong() {\n+        assertEquals((long) Integer.MAX_VALUE,\n+                     ZipArchiveOutputStream.adjustToLong(Integer.MAX_VALUE));\n+        assertEquals(((long) Integer.MAX_VALUE) + 1,\n+                     ZipArchiveOutputStream.adjustToLong(Integer.MAX_VALUE + 1));\n+        assertEquals(2 * ((long) Integer.MAX_VALUE),\n+                     ZipArchiveOutputStream.adjustToLong(2 * Integer.MAX_VALUE));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.apache.commons.compress.archivers.zip;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * JUnit 3 testcases for org.apache.commons.compress.archivers.zip.ZipLong.\n+ *\n+ */\n+public class ZipLongTest extends TestCase {\n+\n+    public ZipLongTest(String name) {\n+        super(name);\n+    }\n+\n+    /**\n+     * Test conversion to bytes.\n+     */\n+    public void testToBytes() {\n+        ZipLong zl = new ZipLong(0x12345678);\n+        byte[] result = zl.getBytes();\n+        assertEquals(\"length getBytes\", 4, result.length);\n+        assertEquals(\"first byte getBytes\", 0x78, result[0]);\n+        assertEquals(\"second byte getBytes\", 0x56, result[1]);\n+        assertEquals(\"third byte getBytes\", 0x34, result[2]);\n+        assertEquals(\"fourth byte getBytes\", 0x12, result[3]);\n+    }\n+\n+    /**\n+     * Test conversion from bytes.\n+     */\n+    public void testFromBytes() {\n+        byte[] val = new byte[] {0x78, 0x56, 0x34, 0x12};\n+        ZipLong zl = new ZipLong(val);\n+        assertEquals(\"value from bytes\", 0x12345678, zl.getValue());\n+    }\n+\n+    /**\n+     * Test the contract of the equals method.\n+     */\n+    public void testEquals() {\n+        ZipLong zl = new ZipLong(0x12345678);\n+        ZipLong zl2 = new ZipLong(0x12345678);\n+        ZipLong zl3 = new ZipLong(0x87654321);\n+\n+        assertTrue(\"reflexive\", zl.equals(zl));\n+\n+        assertTrue(\"works\", zl.equals(zl2));\n+        assertTrue(\"works, part two\", !zl.equals(zl3));\n+\n+        assertTrue(\"symmetric\", zl2.equals(zl));\n+\n+        assertTrue(\"null handling\", !zl.equals(null));\n+        assertTrue(\"non ZipLong handling\", !zl.equals(new Integer(0x1234)));\n+    }\n+\n+    /**\n+     * Test sign handling.\n+     */\n+    public void testSign() {\n+        ZipLong zl = new ZipLong(new byte[] {(byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF});\n+        assertEquals(0x00000000FFFFFFFFl, zl.getValue());\n+    }\n+\n+    public void testClone() {\n+        ZipLong s1 = new ZipLong(42);\n+        ZipLong s2 = (ZipLong) s1.clone();\n+        assertNotSame(s1, s2);\n+        assertEquals(s1, s2);\n+        assertEquals(s1.getValue(), s2.getValue());\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.apache.commons.compress.archivers.zip;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * JUnit 3 testcases for org.apache.commons.compress.archivers.zip.ZipShort.\n+ *\n+ */\n+public class ZipShortTest extends TestCase {\n+\n+    public ZipShortTest(String name) {\n+        super(name);\n+    }\n+\n+    /**\n+     * Test conversion to bytes.\n+     */\n+    public void testToBytes() {\n+        ZipShort zs = new ZipShort(0x1234);\n+        byte[] result = zs.getBytes();\n+        assertEquals(\"length getBytes\", 2, result.length);\n+        assertEquals(\"first byte getBytes\", 0x34, result[0]);\n+        assertEquals(\"second byte getBytes\", 0x12, result[1]);\n+    }\n+\n+    /**\n+     * Test conversion from bytes.\n+     */\n+    public void testFromBytes() {\n+        byte[] val = new byte[] {0x34, 0x12};\n+        ZipShort zs = new ZipShort(val);\n+        assertEquals(\"value from bytes\", 0x1234, zs.getValue());\n+    }\n+\n+    /**\n+     * Test the contract of the equals method.\n+     */\n+    public void testEquals() {\n+        ZipShort zs = new ZipShort(0x1234);\n+        ZipShort zs2 = new ZipShort(0x1234);\n+        ZipShort zs3 = new ZipShort(0x5678);\n+\n+        assertTrue(\"reflexive\", zs.equals(zs));\n+\n+        assertTrue(\"works\", zs.equals(zs2));\n+        assertTrue(\"works, part two\", !zs.equals(zs3));\n+\n+        assertTrue(\"symmetric\", zs2.equals(zs));\n+\n+        assertTrue(\"null handling\", !zs.equals(null));\n+        assertTrue(\"non ZipShort handling\", !zs.equals(new Integer(0x1234)));\n+    }\n+\n+    /**\n+     * Test sign handling.\n+     */\n+    public void testSign() {\n+        ZipShort zs = new ZipShort(new byte[] {(byte)0xFF, (byte)0xFF});\n+        assertEquals(0x0000FFFF, zs.getValue());\n+    }\n+\n+    public void testClone() {\n+        ZipShort s1 = new ZipShort(42);\n+        ZipShort s2 = (ZipShort) s1.clone();\n+        assertNotSame(s1, s2);\n+        assertEquals(s1, s2);\n+        assertEquals(s1.getValue(), s2.getValue());\n+    }\n+}", "timestamp": 1234877420, "metainfo": ""}