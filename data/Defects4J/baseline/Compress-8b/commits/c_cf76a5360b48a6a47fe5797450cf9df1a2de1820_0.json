{"sha": "cf76a5360b48a6a47fe5797450cf9df1a2de1820", "log": "check name/size and lastModified read from ar is consistent with what we write  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\n         offset += write(n);\n \n         offset = fill(offset, 16, ' ');\n-        final String m = \"\" + (pEntry.getLastModified() / 1000);\n+        final String m = \"\" + (pEntry.getLastModified());\n         if (m.length() > 12) {\n             throw new IOException(\"modified too long\");\n         }\n--- a/src/test/java/org/apache/commons/compress/archivers/ArTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ArTestCase.java\n \n import org.apache.commons.compress.AbstractTestCase;\n import org.apache.commons.compress.archivers.ar.ArArchiveEntry;\n+import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;\n+import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;\n import org.apache.commons.compress.utils.IOUtils;\n \n public final class ArTestCase extends AbstractTestCase {\n \n     }\n \n+    // TODO: revisit - does AR not support storing directories?\n+    public void XtestDirectoryEntryFromFile() throws Exception {\n+        File[] tmp = createTempDirAndFile();\n+        File archive = null;\n+        ArArchiveOutputStream aos = null;\n+        ArArchiveInputStream ais = null;\n+        try {\n+            archive = File.createTempFile(\"test.\", \".ar\", tmp[0]);\n+            archive.deleteOnExit();\n+            aos = new ArArchiveOutputStream(new FileOutputStream(archive));\n+            long beforeArchiveWrite = tmp[0].lastModified();\n+            ArArchiveEntry in = new ArArchiveEntry(tmp[0], \"foo\");\n+            aos.putArchiveEntry(in);\n+            aos.closeArchiveEntry();\n+            aos.close();\n+            aos = null;\n+            ais = new ArArchiveInputStream(new FileInputStream(archive));\n+            ArArchiveEntry out = ais.getNextArEntry();\n+            ais.close();\n+            ais = null;\n+            assertNotNull(out);\n+            assertEquals(\"foo/\", out.getName());\n+            assertEquals(0, out.getSize());\n+            // AR stores time with a granularity of 1 second\n+            assertEquals(beforeArchiveWrite / 1000,\n+                         out.getLastModifiedDate().getTime() / 1000);\n+            assertTrue(out.isDirectory());\n+        } finally {\n+            if (ais != null) {\n+                ais.close();\n+            }\n+            if (aos != null) {\n+                aos.close();\n+            }\n+            if (archive != null) {\n+                archive.delete();\n+            }\n+            tmp[1].delete();\n+            tmp[0].delete();\n+        }\n+    }\n+\n+    // TODO: revisit - does AR not support storing directories?\n+    public void XtestExplicitDirectoryEntry() throws Exception {\n+        File[] tmp = createTempDirAndFile();\n+        File archive = null;\n+        ArArchiveOutputStream aos = null;\n+        ArArchiveInputStream ais = null;\n+        try {\n+            archive = File.createTempFile(\"test.\", \".ar\", tmp[0]);\n+            archive.deleteOnExit();\n+            aos = new ArArchiveOutputStream(new FileOutputStream(archive));\n+            long beforeArchiveWrite = tmp[0].lastModified();\n+            ArArchiveEntry in = new ArArchiveEntry(\"foo\", 0, 0, 0, 0,\n+                                                   tmp[1].lastModified() / 1000);\n+            aos.putArchiveEntry(in);\n+            aos.closeArchiveEntry();\n+            aos.close();\n+            aos = null;\n+            ais = new ArArchiveInputStream(new FileInputStream(archive));\n+            ArArchiveEntry out = ais.getNextArEntry();\n+            ais.close();\n+            ais = null;\n+            assertNotNull(out);\n+            assertEquals(\"foo/\", out.getName());\n+            assertEquals(0, out.getSize());\n+            assertEquals(beforeArchiveWrite / 1000,\n+                         out.getLastModifiedDate().getTime() / 1000);\n+            assertTrue(out.isDirectory());\n+        } finally {\n+            if (ais != null) {\n+                ais.close();\n+            }\n+            if (aos != null) {\n+                aos.close();\n+            }\n+            if (archive != null) {\n+                archive.delete();\n+            }\n+            tmp[1].delete();\n+            tmp[0].delete();\n+        }\n+    }\n+\n+    public void testFileEntryFromFile() throws Exception {\n+        File[] tmp = createTempDirAndFile();\n+        File archive = null;\n+        ArArchiveOutputStream aos = null;\n+        ArArchiveInputStream ais = null;\n+        FileInputStream fis = null;\n+        try {\n+            archive = File.createTempFile(\"test.\", \".ar\", tmp[0]);\n+            archive.deleteOnExit();\n+            aos = new ArArchiveOutputStream(new FileOutputStream(archive));\n+            ArArchiveEntry in = new ArArchiveEntry(tmp[1], \"foo\");\n+            aos.putArchiveEntry(in);\n+            byte[] b = new byte[(int) tmp[1].length()];\n+            fis = new FileInputStream(tmp[1]);\n+            int read;\n+            while ((read = fis.read(b)) > 0) {\n+                aos.write(b);\n+            }\n+            fis.close();\n+            fis = null;\n+            aos.closeArchiveEntry();\n+            aos.close();\n+            aos = null;\n+            ais = new ArArchiveInputStream(new FileInputStream(archive));\n+            ArArchiveEntry out = ais.getNextArEntry();\n+            ais.close();\n+            ais = null;\n+            assertNotNull(out);\n+            assertEquals(\"foo\", out.getName());\n+            assertEquals(tmp[1].length(), out.getSize());\n+            // AR stores time with a granularity of 1 second\n+            assertEquals(tmp[1].lastModified() / 1000,\n+                         out.getLastModifiedDate().getTime() / 1000);\n+            assertFalse(out.isDirectory());\n+        } finally {\n+            if (ais != null) {\n+                ais.close();\n+            }\n+            if (aos != null) {\n+                aos.close();\n+            }\n+            if (archive != null) {\n+                archive.delete();\n+            }\n+            if (fis != null) {\n+                fis.close();\n+            }\n+            tmp[1].delete();\n+            tmp[0].delete();\n+        }\n+    }\n+\n+    public void testExplicitFileEntry() throws Exception {\n+        File[] tmp = createTempDirAndFile();\n+        File archive = null;\n+        ArArchiveOutputStream aos = null;\n+        ArArchiveInputStream ais = null;\n+        FileInputStream fis = null;\n+        try {\n+            archive = File.createTempFile(\"test.\", \".ar\", tmp[0]);\n+            archive.deleteOnExit();\n+            aos = new ArArchiveOutputStream(new FileOutputStream(archive));\n+            ArArchiveEntry in = new ArArchiveEntry(\"foo\", tmp[1].length(),\n+                                                   0, 0, 0,\n+                                                   tmp[1].lastModified() / 1000);\n+            aos.putArchiveEntry(in);\n+            byte[] b = new byte[(int) tmp[1].length()];\n+            fis = new FileInputStream(tmp[1]);\n+            int read;\n+            while ((read = fis.read(b)) > 0) {\n+                aos.write(b);\n+            }\n+            fis.close();\n+            fis = null;\n+            aos.closeArchiveEntry();\n+            aos.close();\n+            aos = null;\n+            ais = new ArArchiveInputStream(new FileInputStream(archive));\n+            ArArchiveEntry out = ais.getNextArEntry();\n+            ais.close();\n+            ais = null;\n+            assertNotNull(out);\n+            assertEquals(\"foo\", out.getName());\n+            assertEquals(tmp[1].length(), out.getSize());\n+            assertEquals(tmp[1].lastModified() / 1000,\n+                         out.getLastModifiedDate().getTime() / 1000);\n+            assertFalse(out.isDirectory());\n+        } finally {\n+            if (ais != null) {\n+                ais.close();\n+            }\n+            if (aos != null) {\n+                aos.close();\n+            }\n+            if (archive != null) {\n+                archive.delete();\n+            }\n+            if (fis != null) {\n+                fis.close();\n+            }\n+            tmp[1].delete();\n+            tmp[0].delete();\n+        }\n+    }\n }", "timestamp": 1249156352, "metainfo": ""}