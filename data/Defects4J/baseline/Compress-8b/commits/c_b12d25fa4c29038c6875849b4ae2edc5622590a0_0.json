{"sha": "b12d25fa4c29038c6875849b4ae2edc5622590a0", "log": "Make factory available to test cases Use generic createArchiveEntry() method so can properly create any archive type Always check entry size when reading archives  ", "commit": "\n--- a/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n import org.apache.commons.compress.archivers.ArchiveInputStream;\n import org.apache.commons.compress.archivers.ArchiveOutputStream;\n import org.apache.commons.compress.archivers.ArchiveStreamFactory;\n-import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n import org.apache.commons.compress.utils.IOUtils;\n \n public abstract class AbstractTestCase extends TestCase {\n     private File archive; // used to delete the archive in tearDown\n     protected List archiveList; // Lists the content of the archive as originally created\n     \n-    private ArchiveStreamFactory factory = new ArchiveStreamFactory();\n+    protected ArchiveStreamFactory factory = new ArchiveStreamFactory();\n \n     protected void setUp() throws Exception {\n         dir = mkdir(\"dir\");\n      */\n     private void addArchiveEntry(ArchiveOutputStream out, String filename, final File infile)\n             throws IOException, FileNotFoundException {\n-        ZipArchiveEntry entry = new ZipArchiveEntry(filename);\n-        entry.setSize(infile.length());\n+        ArchiveEntry entry = out.createArchiveEntry(infile, filename);\n         out.putArchiveEntry(entry);\n         IOUtils.copy(new FileInputStream(infile), out);\n         out.closeArchiveEntry();\n             archive = File.createTempFile(\"empty\", \".\" + archivename);\n             stream = new FileOutputStream(archive);\n             out = factory.createArchiveOutputStream(archivename, stream);\n-            addArchiveEntry(out, \"testdata/test1.xml\", getFile(\"test1.xml\"));\n+            // Use short file name so does not cause problems for ar\n+            addArchiveEntry(out, \"test1.xml\", getFile(\"test1.xml\"));\n         } finally {\n             if (out != null) {\n                 out.close();\n         }\n     }\n \n+    /**\n+     * Checks that an archive input stream can be read, and that the file data matches file sizes.\n+     * \n+     * @param in\n+     * @param expected list of expected entries or <code>null</code> if no check of names desired\n+     * @throws Exception\n+     */\n     protected void checkArchiveContent(ArchiveInputStream in, List expected)\n             throws Exception {\n         File result = File.createTempFile(\"dir-result\", \"\");\n                     out.close();\n                 }\n \n-                if (entry.getSize() != -1) {// some test cases don't set the size\n-                    assertEquals(entry.getSize(), copied);\n-                }\n+                assertEquals(\"Entry.size should equal bytes read.\",entry.getSize(), copied);\n \n                 if (!outfile.exists()) {\n                     fail(\"extraction failed: \" + entry.getName());\n                 }\n-                if (!expected.remove(entry.getName())) {\n+                if (expected != null && !expected.remove(entry.getName())) {\n                     fail(\"unexpected entry: \" + entry.getName());\n                 }\n             }\n             in.close();\n-            if (expected.size() > 0) {\n+            if (expected != null && expected.size() > 0) {\n                 for (Iterator iterator = expected.iterator(); iterator.hasNext();) {\n                     String name = (String) iterator.next();\n                     fail(\"Expected entry: \" + name);\n                 }\n             }\n-            assertEquals(0, expected.size());\n+            if (expected != null) {\n+                assertEquals(0, expected.size());\n+            }\n         } finally {\n             rmdir(result);\n         }", "timestamp": 1238461281, "metainfo": ""}