{"sha": "2fdb96371d4619deb291979b45c9403d5e09f151", "log": "Fixed TarOutputStream for files bigger than 2GB  ", "commit": "\n--- a/src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java\n+++ b/src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java\n     private byte[] m_assemBuf;\n     private int m_assemLen;\n     private TarBuffer m_buffer;\n-    private int m_currBytes;\n-    private int m_currSize;\n+    private long m_currBytes;\n+    private long m_currSize;\n \n     private byte[] m_oneBuf;\n     private byte[] m_recordBuf;\n         }\n         else\n         {\n-            m_currSize = (int)entry.getSize();\n+            m_currSize = entry.getSize();\n         }\n     }\n \n--- a/src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java\n+++ b/src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java\n import java.io.InputStream;\n \n import org.apache.commons.io.IOUtils;\n+import org.apache.commons.io.input.NullInputStream;\n+import org.apache.commons.io.output.NullOutputStream;\n \n import junit.framework.TestCase;\n \n         temp.delete();\n     }\n \n+    public void testArchive8GbFile() throws Exception\n+    {\n+        long size = (long) 8 * 1024 * 1024 * 1024;\n+\n+        TarOutputStream out = new TarOutputStream(new NullOutputStream());\n+        TarEntry entry = new TarEntry(\"bigfile.data\");\n+        entry.setSize(size);\n+\n+        out.putNextEntry(entry);\n+        out.copyEntryContents( new NullInputStream(size) );\n+        out.closeEntry();\n+    }\n+\n     private void setupEntry( final TarEntry entry )\n     {\n         entry.setModTime( MOD_TIME );", "timestamp": 1214070946, "metainfo": ""}