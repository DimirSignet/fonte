{"sha": "30e1cc85c49860d3f5f26d35c7a90e840f3efe95", "log": "provide more information if an entry cannot be read/written.  OCMPRESS-98  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.apache.commons.compress.archivers.zip;\n+\n+import java.util.zip.ZipException;\n+\n+/**\n+ * Exception thrown when attempting to read or write data for a zip\n+ * entry that uses ZIP features not supported by this library.\n+ * @since Commons Compress 1.1\n+ */\n+public class UnsupportedZipFeatureException extends ZipException {\n+\n+    private final Feature reason;\n+    private final ZipArchiveEntry entry;\n+\n+    /**\n+     * Creates an exception.\n+     * @param the feature that is not supported\n+     * @param the entry using the feature\n+     */\n+    public UnsupportedZipFeatureException(Feature reason,\n+                                          ZipArchiveEntry entry) {\n+        super(\"unsupported feature \" + reason +  \" used in entry \"\n+              + entry.getName());\n+        this.reason = reason;\n+        this.entry = entry;\n+    }\n+\n+    /**\n+     * The unsupported feature that has been used.\n+     */\n+    public Feature getFeature() {\n+        return reason;\n+    }\n+\n+    /**\n+     * The entry using the unsupported feature.\n+     */\n+    public ZipArchiveEntry getEntry() {\n+        return entry;\n+    }\n+\n+    /**\n+     * ZIP Features that may or may not be supported.\n+     * @since Commons Compress 1.1\n+     */\n+    public static class Feature {\n+        /**\n+         * The entry is encrypted.\n+         */\n+        public static Feature ENCRYPTION = new Feature(\"encryption\");\n+        /**\n+         * The entry used an unsupported compression method.\n+         */\n+        public static Feature METHOD = new Feature(\"compression method\");\n+        \n+        private final String name;\n+\n+        private Feature(String name) {\n+            this.name = name;\n+        }\n+\n+        public String toString() {\n+            return name;\n+        }\n+    }\n+}\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java\n      * Checks whether the entry requires features not (yet) supported\n      * by the library and throws an exception if it does.\n      */\n-    static void checkRequestedFeatures(ZipArchiveEntry ze) throws IOException {\n+    static void checkRequestedFeatures(ZipArchiveEntry ze)\n+        throws UnsupportedZipFeatureException {\n         if (!supportsEncryptionOf(ze)) {\n-            throw new IOException(\"Encryption is not supported, used in \"\n-                                  + \"entry \" + ze.getName());\n+            throw\n+                new UnsupportedZipFeatureException(UnsupportedZipFeatureException\n+                                                   .Feature.ENCRYPTION, ze);\n         }\n         if (!supportsMethodOf(ze)) {\n-            throw new IOException(\"Unsupported compression method \"\n-                                  + ze.getMethod() + \" in ZIP archive entry \"\n-                                  + ze.getName());\n+            throw\n+                new UnsupportedZipFeatureException(UnsupportedZipFeatureException\n+                                                   .Feature.METHOD, ze);\n         }\n     }\n }\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java\n             try {\n                 zf.getInputStream(zae);\n                 fail(\"expected an exception\");\n-            } catch (IOException ex) {\n-                assertTrue(ex.getMessage().indexOf(\"Encryption\") >= 0);\n+            } catch (UnsupportedZipFeatureException ex) {\n+                assertSame(UnsupportedZipFeatureException.Feature.ENCRYPTION,\n+                           ex.getFeature());\n             }\n         } finally {\n             ZipFile.closeQuietly(zf);\n                 byte[] buf = new byte[1024];\n                 zin.read(buf, 0, buf.length);\n                 fail(\"expected an exception\");\n-            } catch (IOException ex) {\n-                assertTrue(ex.getMessage().indexOf(\"Encryption\") >= 0);\n+            } catch (UnsupportedZipFeatureException ex) {\n+                assertSame(UnsupportedZipFeatureException.Feature.ENCRYPTION,\n+                           ex.getFeature());\n             }\n         } finally {\n             if (zin != null) {", "timestamp": 1268133821, "metainfo": ""}