{"sha": "d170f34fa65e19b604f5a9e04e6ed5f81d35658c", "log": "COMPRESS-64: finish() does not close archive entries by default any longer  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java\n     /**\n      * Finishes the addition of entries to this stream, without closing it.\n      * Additional data can be written, if the format supports it.\n+     * \n+     * The finish() method throws an Exception if the user forgets to close the entry\n+     * .\n      * @throws IOException\n      */\n     public abstract void finish() throws IOException;\n--- a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\n     }\n \n     public void close() throws IOException {\n-        closeArchiveEntry();\n         out.close();\n         prevEntry = null;\n     }\n      * @see org.apache.commons.compress.archivers.ArchiveOutputStream#finish()\n      */\n     public void finish() throws IOException {\n-        // Nothing to do\n+        if(haveUnclosedEntry) {\n+            throw new IOException(\"This archives contains unclosed entries.\");\n+        }\n     }\n }\n--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n             return;\n         }\n         if (this.entry != null) {\n-            closeArchiveEntry();\n+            throw new IOException(\"This archives contains unclosed entries.\");\n         }\n         this.entry = new CpioArchiveEntry(this.entryFormat);\n         this.entry.setName(CPIO_TRAILER);\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n \n     private boolean closed = false;\n \n+    /* Indicates if putArchiveEntry has been called without closeArchiveEntry */\n+    private boolean haveUnclosedEntry = false;\n+    \n     private final OutputStream out;\n \n     /**\n      * @throws IOException on error\n      */\n     public void finish() throws IOException {\n+        if(haveUnclosedEntry) {\n+            throw new IOException(\"This archives contains unclosed entries.\");\n+        }\n         writeEOFRecord();\n         writeEOFRecord();\n     }\n             currSize = entry.getSize();\n         }\n         currName = entry.getName();\n+        haveUnclosedEntry = true;\n     }\n \n     /**\n                                   + \"' before the '\" + currSize\n                                   + \"' bytes specified in the header were written\");\n         }\n+        haveUnclosedEntry = false;\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n         fallbackToUTF8 = b;\n     }\n \n-    /**\n-     * Finishs writing the contents and closes this as well as the\n-     * underlying stream.\n-     * @throws IOException on error\n+    /* (non-Javadoc)\n+     * @see org.apache.commons.compress.archivers.ArchiveOutputStream#finish()\n      */\n     public void finish() throws IOException {\n-        closeArchiveEntry();\n+        if(entry != null) {\n+            throw new IOException(\"This archives contains unclosed entries.\");\n+        }\n+        \n         cdOffset = written;\n         for (Iterator i = entries.iterator(); i.hasNext(); ) {\n             writeCentralFileHeader((ZipArchiveEntry) i.next());\n--- a/src/test/java/org/apache/commons/compress/IOMethodsTest.java\n+++ b/src/test/java/org/apache/commons/compress/IOMethodsTest.java\n         for (int i=0; i<byteTest.length; i++){\n             aos1.write(byteTest[i]);            \n         }\n+        aos1.closeArchiveEntry();\n         aos1.close();\n+\n         aos2.write(byteTest);\n+        aos2.closeArchiveEntry();\n         aos2.close();\n+        \n         aos3.write(byteTest, 0, byteTest.length);\n+        aos3.closeArchiveEntry();\n         aos3.close();\n         assertEquals(\"out1!=out2\",out1.toString(),out2.toString());\n         assertEquals(\"out1!=out3\",out1.toString(),out3.toString());\n     }\n+    \n     private void compareReads(String archiverName) throws Exception {\n         OutputStream out1 = new ByteArrayOutputStream();\n         OutputStream out2 = new ByteArrayOutputStream();\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java\n+package org.apache.commons.compress.archivers;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+\n+import org.apache.commons.compress.AbstractTestCase;\n+import org.apache.commons.compress.archivers.ar.ArArchiveEntry;\n+import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;\n+import org.apache.commons.compress.archivers.jar.JarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n+\n+public class ArchiveOutputStreamTest extends AbstractTestCase {\n+\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    public void testFinish() throws Exception {\n+        OutputStream out1 = new ByteArrayOutputStream();\n+        \n+        ArchiveOutputStream aos1 = factory.createArchiveOutputStream(\"zip\", out1);\n+        aos1.putArchiveEntry(new ZipArchiveEntry(\"dummy\"));\n+        try {\n+            aos1.finish();\n+            fail(\"After putArchive should follow closeArchive\");\n+        } catch (IOException io) {\n+            // Exception expected\n+        }\n+        \n+        aos1 = factory.createArchiveOutputStream(\"jar\", out1);\n+        aos1.putArchiveEntry(new JarArchiveEntry(\"dummy\"));\n+        try {\n+            aos1.finish();\n+            fail(\"After putArchive should follow closeArchive\");\n+        } catch (IOException io) {\n+            // Exception expected\n+        }\n+        \n+        aos1 = factory.createArchiveOutputStream(\"ar\", out1);\n+        aos1.putArchiveEntry(new ArArchiveEntry(\"dummy\", 100));\n+        try {\n+            aos1.finish();\n+            fail(\"After putArchive should follow closeArchive\");\n+        } catch (IOException io) {\n+            // Exception expected\n+        }\n+        \n+        aos1 = factory.createArchiveOutputStream(\"cpio\", out1);\n+        aos1.putArchiveEntry(new CpioArchiveEntry(\"dummy\"));\n+        try {\n+            aos1.finish();\n+            fail(\"After putArchive should follow closeArchive\");\n+        } catch (IOException io) {\n+            // Exception expected\n+        }\n+        \n+        aos1 = factory.createArchiveOutputStream(\"tar\", out1);\n+        aos1.putArchiveEntry(new TarArchiveEntry(\"dummy\"));\n+        try {\n+            aos1.finish();\n+            fail(\"After putArchive should follow closeArchive\");\n+        } catch (IOException io) {\n+            // Exception expected\n+        }\n+    }\n+\n+}", "timestamp": 1240380323, "metainfo": ""}