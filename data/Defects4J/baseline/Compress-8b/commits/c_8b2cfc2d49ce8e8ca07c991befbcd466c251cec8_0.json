{"sha": "8b2cfc2d49ce8e8ca07c991befbcd466c251cec8", "log": "Additional String <=> Byte array Ascii conversion methods + basic tests  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java\n+++ b/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java\n      * @return <code>true</code> if buffer is the same as the expected string\n      */\n     public static boolean matchAsciiBuffer(String expected, byte[] buffer){\n-        byte[] buffer1;\n+        return matchAsciiBuffer(expected, buffer, 0, buffer.length);\n+    }\n+    \n+    /**\n+     * Convert a string to Ascii bytes.\n+     * Used for comparing \"magic\" strings which need to be independent of the default Locale.\n+     * \n+     * @param inputString\n+     * @return the bytes\n+     */\n+    public static byte[] toAsciiBytes(String inputString){\n         try {\n-            buffer1 = expected.getBytes(\"ASCII\");\n+            return inputString.getBytes(\"ASCII\");\n         } catch (UnsupportedEncodingException e) {\n-            throw new RuntimeException(e); // Should not happen\n-        }\n-        return isEqual(buffer1, 0, buffer1.length, buffer, 0, buffer.length, false);\n-    }\n-    \n+           throw new RuntimeException(e); // Should never happen\n+        }\n+    }\n+\n+    /**\n+     * Convert an input byte array to a String using the ASCII character set.\n+     * \n+     * @param inputBytes\n+     * @return the bytes, interpreted as an Ascii string\n+     */\n+    public static String toAsciiString(final byte[] inputBytes){\n+        try {\n+            return new String(inputBytes, \"ASCII\");\n+        } catch (UnsupportedEncodingException e) {\n+            throw new RuntimeException(e); // Should never happen\n+        }\n+    }\n+\n     /**\n      * Compare byte buffers, optionally ignoring trailing nulls\n      * \n--- a/src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java\n+++ b/src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java\n \n import org.apache.commons.compress.utils.ArchiveUtils;\n \n-/**\n- * Check that the different write methods create the same output.\n- * TODO perform the same checks for reads.\n- */\n public class ArchiveUtilsTest extends AbstractTestCase {\n \n     private static final int bytesToTest = 50;\n         assertTrue(ArchiveUtils.matchAsciiBuffer(\"def\\0\", buffer2));        \n         assertFalse(ArchiveUtils.matchAsciiBuffer(\"def\", buffer2));\n     }\n+    \n+    public void testAsciiConversions() {\n+        asciiToByteAndBackOK(\"\");\n+        asciiToByteAndBackOK(\"abcd\");\n+        asciiToByteAndBackFail(\"\\u8025\");\n+    }\n+\n+    private void asciiToByteAndBackOK(String inputString) {\n+        assertEquals(inputString, ArchiveUtils.toAsciiString(ArchiveUtils.toAsciiBytes(inputString)));\n+    }\n+\n+    private void asciiToByteAndBackFail(String inputString) {\n+        assertFalse(inputString.equals(ArchiveUtils.toAsciiString(ArchiveUtils.toAsciiBytes(inputString))));\n+    }\n }", "timestamp": 1239722262, "metainfo": ""}