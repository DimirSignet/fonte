{"sha": "2abbc8f94bd407e1c084c3fcdfb98ad5a2791db5", "log": "added some javadocs  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/changes/Change.java\n+++ b/src/main/java/org/apache/commons/compress/changes/Change.java\n import org.apache.commons.compress.archivers.ArchiveEntry;\n \n /**\n+ * Change holds meta information about a change.\n+ * \n  * @Immutable\n  */\n class Change {\n--- a/src/main/java/org/apache/commons/compress/changes/ChangeSet.java\n+++ b/src/main/java/org/apache/commons/compress/changes/ChangeSet.java\n import org.apache.commons.compress.archivers.ArchiveOutputStream;\n import org.apache.commons.compress.utils.IOUtils;\n \n+/**\n+ * ChangeSet collects and performs changes to an archive.\n+ */\n public final class ChangeSet {\n \n     private final Set changes = new LinkedHashSet();\n \n+    /**\n+     * Deletes the file with the filename from the archive\n+     * \n+     * @param pFilename\n+     *            the filename of the file to delete\n+     */\n     public void delete(final String pFilename) {\n         addDeletion(new Change(pFilename));\n     }\n \n+    /**\n+     * Adds a new archive entry to the archive.\n+     * \n+     * @param pEntry\n+     *            the entry to add\n+     * @param pInput\n+     *            the datastream to add\n+     */\n     public void add(final ArchiveEntry pEntry, final InputStream pInput) {\n         changes.add(new Change(pEntry, pInput));\n     }\n \n+    /**\n+     * Performs all changes collected in this ChangeSet on the input stream and\n+     * streams the result to the output stream.\n+     * \n+     * @param in\n+     *            the InputStream to perform the changes on\n+     * @param out\n+     *            the resulting OutputStream with all modifications\n+     * @throws IOException\n+     *             if an read/write error occurs\n+     */\n     public void perform(ArchiveInputStream in, ArchiveOutputStream out)\n             throws IOException {\n         for (Iterator it = changes.iterator(); it.hasNext();) {\n         }\n     }\n \n+    /**\n+     * Adds an delete change\n+     * \n+     * @param pChange\n+     *            the change which should result in a deletion\n+     */\n     private void addDeletion(Change pChange) {\n         if (Change.TYPE_DELETE != pChange.type()\n                 || pChange.targetFile() == null) {\n         changes.add(pChange);\n     }\n \n+    /**\n+     * Checks if an ArchiveEntry is deleted later in the ChangeSet. This is\n+     * necessary if an file is added with this ChangeSet, but later became\n+     * deleted in the same set.\n+     * \n+     * @param entry\n+     *            the entry to check\n+     * @return true, if this entry has an deletion change later, false otherwise\n+     */\n     private boolean isDeletedLater(ArchiveEntry entry) {\n         String source = entry.getName();\n \n         return false;\n     }\n \n+    /**\n+     * Copies the ArchiveEntry to the Output stream\n+     * \n+     * @param in\n+     *            the stream to read the data from\n+     * @param out\n+     *            the stream to write the data to\n+     * @param entry\n+     *            the entry to write\n+     * @throws IOException\n+     *             if data cannot be read or written\n+     */\n     private static void copyStream(InputStream in, ArchiveOutputStream out,\n             ArchiveEntry entry) throws IOException {\n         out.putArchiveEntry(entry);", "timestamp": 1239126669, "metainfo": ""}