{"sha": "6a703234ab45b01ab1652e5e4b1607d8d586db98", "log": "applied patch from Christian Grobmeier  https://issues.apache.org/jira/browse/SANDBOX-262    ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.Map;\n \n import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;\n import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;\n import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;\n import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;\n-import org.apache.commons.compress.utils.ReflectionUtils;\n+\n+/**\n+ * Factory to create Archive[In|Out]putStreams from names\n+ * or the first bytes of the InputStream. In order add other\n+ * implementations you should extend ArchiveStreamFactory\n+ * and override the appropriate methods (and call their implementation\n+ * from super of course)\n+ * \n+ * TODO add example here \n+ * \n+ */\n \n public class ArchiveStreamFactory {\n \n-\tfinal Map inputStreamClasses = new HashMap();\n-\tfinal Map outputStreamClasses = new HashMap();\n-\t\n-\tpublic ArchiveStreamFactory() throws ArchiveException {\n-\t\tregisterArchiveInputStream(\"zip\", ZipArchiveInputStream.class);\n-\t\tregisterArchiveOutputStream(\"zip\", ZipArchiveOutputStream.class);\n-\n-        registerArchiveInputStream(\"tar\", TarArchiveInputStream.class);\n-        registerArchiveOutputStream(\"tar\", TarArchiveOutputStream.class);\n-\n-        registerArchiveInputStream(\"ar\", ArArchiveInputStream.class);\n-        registerArchiveOutputStream(\"ar\", ArArchiveOutputStream.class);\n-\n-        registerArchiveInputStream(\"jar\", JarArchiveInputStream.class);\t\t\n-        registerArchiveOutputStream(\"jar\", JarArchiveOutputStream.class);\n-\t}\n-\t\n-\t\n-\tpublic void registerArchiveInputStream( final String name, final Class stream ) throws ArchiveException {\n-\t\tif (ArchiveInputStream.class.isAssignableFrom(stream) && !(stream.isInterface())) {\n-\t\t\tinputStreamClasses.put(name, stream);\n-        } else {\n-            throw new ArchiveException(\"Archive does not implement the ArchiveInputStream interface.\");\n-        }\t\n-\t}\n-\n-\tpublic void registerArchiveOutputStream( final String name, final Class stream ) throws ArchiveException {\n-\t\tReflectionUtils.registerClazz(outputStreamClasses, name, ArchiveOutputStream.class, stream);\t\t\n-\t\tif (ArchiveOutputStream.class.isAssignableFrom(stream) && !(stream.isInterface())) {\n-\t\t\toutputStreamClasses.put(name, stream);\n-        } else {\n-            throw new ArchiveException(\"Archive does not implement the ArchiveOutputStream interface.\");\n+    public ArchiveInputStream createArchiveInputStream( final String archiverName, final InputStream in ) throws ArchiveException {\n+    \tif (\"ar\".equalsIgnoreCase(archiverName)) {\n+            return new ArArchiveInputStream(in);\n+        } else if(\"zip\".equalsIgnoreCase(archiverName)) {\n+        \treturn new ZipArchiveInputStream(in);\n+        } else if(\"tar\".equalsIgnoreCase(archiverName)) {\n+        \treturn new TarArchiveInputStream(in);\n+        } else if(\"jar\".equalsIgnoreCase(archiverName)) {\n+        \treturn new JarArchiveInputStream(in);\n         }\n-\t}\n-\t\n-    public ArchiveInputStream createArchiveInputStream( final String archiverName, final InputStream out ) throws ArchiveException {\n-        try {\n-            final Class clazz = (Class) inputStreamClasses.get(archiverName);\n-\n-            if (clazz == null) {\n-            \tthrow new ArchiveException(\"ArchiverFactory could not create instance\");\n-            }\n-\n-            final Class[] params = { InputStream.class };\n-            final Constructor constructor = clazz.getConstructor(params);\n-            final Object[] initargs = { out };\n-            return (ArchiveInputStream) constructor.newInstance(initargs);\n-        } catch (InstantiationException e) {\n-            throw new ArchiveException(\"ArchiverFactory could not create instance\", e);\n-        } catch (IllegalAccessException e) {\n-            throw new ArchiveException(\"ArchiverFactory could not create instance\", e);\n-        } catch (SecurityException e) {\n-            throw new ArchiveException(\"ArchiverFactory could not create instance\", e);\n-        } catch (NoSuchMethodException e) {\n-            throw new ArchiveException(\"ArchiverFactory could not create instance\", e);\n-        } catch (IllegalArgumentException e) {\n-            throw new ArchiveException(\"ArchiverFactory could not create instance\", e);\n-        } catch (InvocationTargetException e) {\n-            throw new ArchiveException(\"ArchiverFactory could not create instance\", e);\n-        }\n+    \treturn null;\n     }\n \n     public ArchiveOutputStream createArchiveOutputStream( final String archiverName, final OutputStream out ) throws ArchiveException {\n-        try {\n-            final Class clazz = (Class) outputStreamClasses.get(archiverName);\n-            \n-            if (clazz == null) {\n-            \tthrow new ArchiveException(\"ArchiverFactory could not create instance\");\n-            }\n-            \n-            final Class[] params = { OutputStream.class };\n-            final Constructor constructor = clazz.getConstructor(params);\n-            final Object[] initargs = { out };\n-            return (ArchiveOutputStream) constructor.newInstance(initargs);\n-        } catch (InstantiationException e) {\n-            throw new ArchiveException(\"ArchiverFactory could not create instance\", e);\n-        } catch (IllegalAccessException e) {\n-            throw new ArchiveException(\"ArchiverFactory could not create instance\", e);\n-        } catch (SecurityException e) {\n-            throw new ArchiveException(\"ArchiverFactory could not create instance\", e);\n-        } catch (NoSuchMethodException e) {\n-            throw new ArchiveException(\"ArchiverFactory could not create instance\", e);\n-        } catch (IllegalArgumentException e) {\n-            throw new ArchiveException(\"ArchiverFactory could not create instance\", e);\n-        } catch (InvocationTargetException e) {\n-            throw new ArchiveException(\"ArchiverFactory could not create instance\", e);\n+    \tif (\"ar\".equalsIgnoreCase(archiverName)) {\n+            return new ArArchiveOutputStream(out);\n+        } else if(\"zip\".equalsIgnoreCase(archiverName)) {\n+        \treturn new ZipArchiveOutputStream(out);\n+        } else if(\"tar\".equalsIgnoreCase(archiverName)) {\n+        \treturn new TarArchiveOutputStream(out);\n+        } else if(\"jar\".equalsIgnoreCase(archiverName)) {\n+        \treturn new JarArchiveOutputStream(out);\n         }\n+    \treturn null;\n     }\n \n     public ArchiveInputStream createArchiveInputStream( final InputStream input ) throws IOException {\n \t\tfinal byte[] signature = new byte[12];\n \t\tinput.mark(signature.length);\n \t\tinput.read(signature);\n-\t\t// reset not supported exception?\n+\t\t// TODO if reset is not supported pass on the IOException or return null?\n \t\tinput.reset();\n \n-//\t\tfor (int i = 0; i < signature.length; i++) {\n-//\t\t\tSystem.out.print(Integer.toHexString(signature[i]));\n-//\t\t\tSystem.out.print(\",\");\n-//\t\t}\n-//\t\tSystem.out.println(\"\");\n-\t\t\n-\t\tfor (Iterator it = inputStreamClasses.values().iterator(); it.hasNext();) {\n-\t\t\tfinal Class clazz = (Class) it.next();\n-\t\t\ttry {\n-\t\t\t\tfinal Method method = clazz.getMethod(\"matches\", new Class[] { byte[].class });\n-\t\t\t\t\n-\t\t\t\tfinal Object result = method.invoke(null, new Object[] { signature } );\n-\t\t\t\t\n-\t\t\t\tif (result.equals(Boolean.TRUE)) {\n-\t\t            final Class[] params = { InputStream.class };\n-\t\t            final Constructor constructor = clazz.getConstructor(params);\n-\t\t            final Object[] initargs = { input };\n-\t\t            return (ArchiveInputStream) constructor.newInstance(initargs);\t\t\t\t\t\n-\t\t\t\t}\n-\t\t\t} catch (SecurityException e) {\n-\t\t\t} catch (NoSuchMethodException e) {\n-\t\t\t} catch (IllegalArgumentException e) {\n-\t\t\t} catch (IllegalAccessException e) {\n-\t\t\t} catch (InvocationTargetException e) {\n-\t\t\t} catch (InstantiationException e) {\n-\t\t\t}\n-\t\t}\n+\t\tif(ZipArchiveInputStream.matches(signature)) {\n+\t\t\treturn new ZipArchiveInputStream(input);\n+\t\t} else if(JarArchiveInputStream.matches(signature)) {\n+\t\t\treturn new JarArchiveInputStream(input);\n+\t\t} else if(TarArchiveInputStream.matches(signature)) {\n+\t\t\treturn new TarArchiveInputStream(input);\n+\t\t} else if(ArArchiveInputStream.matches(signature)) {\n+\t\t\treturn new ArArchiveInputStream(input);\n+\t\t} \n \t\treturn null;\n \t}\n }\n--- a/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java\n \n public class JarArchiveInputStream extends ZipArchiveInputStream {\n \n-\tpublic JarArchiveInputStream( final InputStream inputStream ) throws IOException {\n+\tpublic JarArchiveInputStream( final InputStream inputStream ) {\n \t\tsuper(inputStream);\n \t}\n \t\n--- a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n  */\n package org.apache.commons.compress.compressors;\n \n+import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.InvocationTargetException;\n-import java.util.HashMap;\n-import java.util.Map;\n \n-import org.apache.commons.compress.archivers.ArchiveException;\n import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;\n import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;\n import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;\n \n+/**\n+ * Factory to create Compressor[In|Out]putStreams from names\n+ * In order add other implementations you should extend CompressorStreamFactory\n+ * and override the appropriate methods (and call their implementation\n+ * from super of course)\n+ * \n+ * TODO add example here \n+ * \n+ */\n public class CompressorStreamFactory {\n-\tfinal Map inputStreamClasses = new HashMap();\n-\tfinal Map outputStreamClasses = new HashMap();\n-\t\n-\tpublic CompressorStreamFactory() throws CompressorException {\n-\t\tregisterInputStream(\"gz\", GzipCompressorInputStream.class);\n-\t\tregisterOutputStream(\"gz\", GzipCompressorOutputStream.class);\n-\t\tregisterInputStream(\"bzip2\", BZip2CompressorInputStream.class);\n-\t\tregisterOutputStream(\"bzip2\", BZip2CompressorOutputStream.class);\n+\n+\tpublic CompressorInputStream createCompressorInputStream( final String name, final InputStream in ) throws CompressorException {\n+\t\ttry {\n+\n+\t\t\tif(\"gz\".equalsIgnoreCase(name)) {\n+\t\t\t\treturn new GzipCompressorInputStream(in);\n+\t\t\t} else if(\"bzip2\".equalsIgnoreCase(name)) {\n+\t\t\t\treturn new BZip2CompressorInputStream(in);\n+\t\t\t} \n+\n+\t\t\treturn null;\n \t\t\n-\t}\n-\t\n-\tpublic void registerInputStream( final String name, final Class stream ) throws CompressorException {\n-\t\tif (CompressorInputStream.class.isAssignableFrom(stream) && !(stream.isInterface())) {\n-\t\t\tinputStreamClasses.put(name, stream);\n-        } else {\n-            throw new CompressorException(\"Compressor does not implement the CompressorInputStream interface.\");\n-        }\t\n-\t}\n-\n-\tpublic void registerOutputStream( final String name, final Class stream ) throws CompressorException {\n-\t\tif (CompressorOutputStream.class.isAssignableFrom(stream) && !(stream.isInterface())) {\n-\t\t\toutputStreamClasses.put(name, stream);\n-        } else {\n-            throw new CompressorException(\"Compressor does not implement the CompressorOutputStream interface.\");\n-        }\n-\t}\n-\t\n-\tpublic CompressorInputStream createCompressorInputStream( final String name, final InputStream out ) throws CompressorException {\n-        try {\n-            final Class clazz = (Class) inputStreamClasses.get(name);\n-\n-            if (clazz == null) {\n-            \tthrow new CompressorException(\"CompressorFactory could not create instance\");\n-            }\n-\n-            final Class[] params = { InputStream.class };\n-            final Constructor constructor = clazz.getConstructor(params);\n-            final Object[] initargs = { out };\n-            return (CompressorInputStream) constructor.newInstance(initargs);\n-        } catch (InstantiationException e) {\n-            throw new CompressorException(\"CompressorFactory could not create instance\", e);\n-        } catch (IllegalAccessException e) {\n-            throw new CompressorException(\"CompressorFactory could not create instance\", e);\n-        } catch (SecurityException e) {\n-            throw new CompressorException(\"CompressorFactory could not create instance\", e);\n-        } catch (NoSuchMethodException e) {\n-            throw new CompressorException(\"CompressorFactory could not create instance\", e);\n-        } catch (IllegalArgumentException e) {\n-            throw new CompressorException(\"CompressorFactory could not create instance\", e);\n-        } catch (InvocationTargetException e) {\n-            throw new CompressorException(\"CompressorFactory could not create instance\", e);\n-        }\n+\t\t} catch (IOException e) {\n+\t\t\tthrow new CompressorException(\"Could not create CompressorInputStream\", e);\n+\t\t}\n     }\n \n-    public CompressorOutputStream createCompressorOutputStream( final String name, final OutputStream out ) throws ArchiveException {\n-        try {\n-            final Class clazz = (Class) outputStreamClasses.get(name);\n-            \n-            if (clazz == null) {\n-            \tthrow new ArchiveException(\"CompressorFactory could not create instance\");\n-            }\n-            \n-            final Class[] params = { OutputStream.class };\n-            final Constructor constructor = clazz.getConstructor(params);\n-            final Object[] initargs = { out };\n-            return (CompressorOutputStream) constructor.newInstance(initargs);\n-        } catch (InstantiationException e) {\n-            throw new ArchiveException(\"CompressorFactory could not create instance\", e);\n-        } catch (IllegalAccessException e) {\n-            throw new ArchiveException(\"CompressorFactory could not create instance\", e);\n-        } catch (SecurityException e) {\n-            throw new ArchiveException(\"CompressorFactory could not create instance\", e);\n-        } catch (NoSuchMethodException e) {\n-            throw new ArchiveException(\"CompressorFactory could not create instance\", e);\n-        } catch (IllegalArgumentException e) {\n-            throw new ArchiveException(\"CompressorFactory could not create instance\", e);\n-        } catch (InvocationTargetException e) {\n-            throw new ArchiveException(\"CompressorFactory could not create instance\", e);\n-        }\n+    public CompressorOutputStream createCompressorOutputStream( final String name, final OutputStream out ) throws CompressorException {\n+\t\ttry {\n+\n+\t\t\tif(\"gz\".equalsIgnoreCase(name)) {\n+\t\t\t\t\treturn new GzipCompressorOutputStream(out);\n+\t\t\t} else if(\"bzip2\".equalsIgnoreCase(name)) {\n+\t\t\t\t\treturn new BZip2CompressorOutputStream(out);\n+\t\t\t} \n+\t\t\treturn null;\n+\n+\t\t} catch (IOException e) {\n+\t\t\tthrow new CompressorException(\"Could not create CompressorOutputStream\", e);\n+\t\t}\n     }\n }", "timestamp": 1231334161, "metainfo": ""}