{"sha": "004124ac5dbf5edbf925078652526267468821e7", "log": "Improve cpio tests, submitted by Christian Grobmeier, COMPRESS-28  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n  * <p/>\n  * <code><pre>\n  * CpioArchiveOutputStream out = new CpioArchiveOutputStream(\n- *         new FileOutputStream(new File(&quot;test.cpio&quot;)));\n+ *         new FileOutputStream(new File(\"test.cpio\")));\n  * CpioArchiveEntry entry = new CpioArchiveEntry();\n  * entry.setName(&quot;testfile&quot;);\n  * String contents = &quot;12345&quot;;\n  * entry.setFileSize(contents.length());\n  * out.putNextEntry(entry);\n  * out.write(testContents.getBytes());\n- * out.finish();\n  * out.close();\n  * </pre></code>\n  * <p/>\n     public void putNextEntry(final CpioArchiveEntry e) throws IOException {\n         ensureOpen();\n         if (this.cpioEntry != null) {\n-            closeEntry(); // close previous entry\n+            closeArchiveEntry(); // close previous entry\n         }\n         if (e.getTime() == -1) {\n             e.setTime(System.currentTimeMillis());\n         pad(entry.getHeaderSize() + entry.getName().length() + 1, 2);\n     }\n \n-    /**\n-     * Closes the current CPIO entry and positions the stream for writing the\n-     * next entry.\n-     * \n-     * @throws IOException\n-     *             if an I/O error has occurred or if a CPIO file error has\n-     *             occurred\n-     */\n-    public void closeEntry() throws IOException {\n+    /*(non-Javadoc)\n+     * \n+     * @see\n+     * org.apache.commons.compress.archivers.ArchiveOutputStream#closeArchiveEntry\n+     * ()\n+     */\n+    public void closeArchiveEntry() throws IOException {\n         ensureOpen();\n \n         if (this.cpioEntry.getSize() != this.written) {\n             return;\n         }\n         if (this.cpioEntry != null) {\n-            closeEntry();\n+            closeArchiveEntry();\n         }\n         this.cpioEntry = new CpioArchiveEntry(this.entryFormat);\n         this.cpioEntry.setMode(0);\n         this.cpioEntry.setName(\"TRAILER!!!\");\n         this.cpioEntry.setNumberOfLinks(1);\n         writeHeader(this.cpioEntry);\n-        closeEntry();\n+        closeArchiveEntry();\n     }\n \n     /**\n      */\n     public void close() throws IOException {\n         if (!this.closed) {\n+            this.finish();\n             super.close();\n             this.closed = true;\n         }\n      * (non-Javadoc)\n      * \n      * @see\n-     * org.apache.commons.compress.archivers.ArchiveOutputStream#closeArchiveEntry\n-     * ()\n-     */\n-    public void closeArchiveEntry() throws IOException {\n-        this.closeEntry();\n+     * org.apache.commons.compress.archivers.ArchiveOutputStream#putArchiveEntry\n+     * (org.apache.commons.compress.archivers.ArchiveEntry)\n+     */\n+    public void putArchiveEntry(ArchiveEntry entry) throws IOException {\n+        this.putNextEntry((CpioArchiveEntry) entry);\n     }\n \n     /*\n      * (non-Javadoc)\n      * \n-     * @see\n-     * org.apache.commons.compress.archivers.ArchiveOutputStream#putArchiveEntry\n-     * (org.apache.commons.compress.archivers.ArchiveEntry)\n-     */\n-    public void putArchiveEntry(ArchiveEntry entry) throws IOException {\n-        this.putNextEntry((CpioArchiveEntry) entry);\n-    }\n-\n-    /*\n-     * (non-Javadoc)\n-     * \n      * @see java.io.OutputStream#write(int)\n      */\n     public void write(int b) throws IOException {\n--- a/src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java\n import java.io.FileOutputStream;\n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n \n import org.apache.commons.compress.AbstractTestCase;\n import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;\n \n public final class CpioTestCase extends AbstractTestCase {\n \n-\tpublic void testCpioArchiveCreation() throws Exception {\n-\t\tfinal File output = new File(dir, \"bla.cpio\");\n-\t\t\n-\t\tfinal File file1 = getFile(\"test1.xml\");\n-\t\tfinal File file2 = getFile(\"test2.xml\");\n-\t\t\n-\t\tfinal OutputStream out = new FileOutputStream(output);\n+    public void testCpioArchiveCreation() throws Exception {\n+        final File output = new File(dir, \"bla.cpio\");\n+\n+        final File file1 = getFile(\"test1.xml\");\n+        final File file2 = getFile(\"test2.xml\");\n+\n+        final OutputStream out = new FileOutputStream(output);\n         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out);\n-\t\tos.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length()));\n-\t\tIOUtils.copy(new FileInputStream(file1), os);\n-\t\tos.closeArchiveEntry();\n-\t\t\n-\t\tos.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length()));\n-\t\tIOUtils.copy(new FileInputStream(file2), os);\n-\t\tos.closeArchiveEntry();\n-\t\t\n-\t\tos.close();\n-\t}\n+        os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length()));\n+        IOUtils.copy(new FileInputStream(file1), os);\n+        os.closeArchiveEntry();\n \n-\tpublic void testCpioUnarchive() throws Exception {\n-\t\tfinal File output = new File(dir, \"bla.cpio\");\n-\t\t{\n-\t\t\tfinal File file1 = getFile(\"test1.xml\");\n-\t\t\tfinal File file2 = getFile(\"test2.xml\");\n-\t\t\t\n-\t\t\tfinal OutputStream out = new FileOutputStream(output);\n-\t        final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out);\n-\t\t\tos.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length()));\n-\t\t\tIOUtils.copy(new FileInputStream(file1), os);\n-\t\t\tos.closeArchiveEntry();\n-\t\t\t\n-\t\t\tos.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length()));\n-\t\t\tIOUtils.copy(new FileInputStream(file2), os);\n-\t\t\tos.closeArchiveEntry();\n-\t\t\tos.close();\n-\t\t}\n-\t\t\n-\t\t// Unarchive Operation\n-\t\tfinal File input = output;\n-\t\tfinal InputStream is = new FileInputStream(input);\n-\t\tfinal ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"cpio\", is);\n-\t\tfinal CpioArchiveEntry entry = (CpioArchiveEntry)in.getNextEntry();\n-\t\t\n-\t\tFile target = new File(dir, entry.getName());\n-        final OutputStream out = new FileOutputStream(target);\n-        \n-        IOUtils.copy(in, out);\n-    \n-        out.close();\n+        os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length()));\n+        IOUtils.copy(new FileInputStream(file2), os);\n+        os.closeArchiveEntry();\n+\n+        os.close();\n+    }\n+\n+    public void testCpioUnarchive() throws Exception {\n+        final File output = new File(dir, \"bla.cpio\");\n+        {\n+            final File file1 = getFile(\"test1.xml\");\n+            final File file2 = getFile(\"test2.xml\");\n+\n+            final OutputStream out = new FileOutputStream(output);\n+            final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"cpio\", out);\n+            os.putArchiveEntry(new CpioArchiveEntry(\"test1.xml\", file1.length()));\n+            IOUtils.copy(new FileInputStream(file1), os);\n+            os.closeArchiveEntry();\n+\n+            os.putArchiveEntry(new CpioArchiveEntry(\"test2.xml\", file2.length()));\n+            IOUtils.copy(new FileInputStream(file2), os);\n+            os.closeArchiveEntry();\n+\n+            os.close();\n+            out.close();\n+        }\n+\n+        // Unarchive Operation\n+        final File input = output;\n+        final InputStream is = new FileInputStream(input);\n+        final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"cpio\", is);\n+\n+\n+        Map result = new HashMap();\n+        ArchiveEntry entry = null;\n+        while ((entry = in.getNextEntry()) != null) {\n+            File target = new File(dir, entry.getName());\n+            final OutputStream out = new FileOutputStream(target);\n+            IOUtils.copy(in, out);\n+            out.close();\n+            result.put(entry.getName(), target);\n+        }\n         in.close();\n-\t}\n+\n+        int lineSepLength = System.getProperty(\"line.separator\").length();\n+\n+        File t = (File)result.get(\"test1.xml\");\n+        assertTrue(\"Expected \" + t.getAbsolutePath() + \" to exist\", t.exists());\n+        assertEquals(\"length of \" + t.getAbsolutePath(),\n+                     72 + 4 * lineSepLength, t.length());\n+\n+        t = (File)result.get(\"test2.xml\");\n+        assertTrue(\"Expected \" + t.getAbsolutePath() + \" to exist\", t.exists());\n+        assertEquals(\"length of \" + t.getAbsolutePath(),\n+                     73 + 5 * lineSepLength, t.length());\n+    }\n \n }\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java\n+package org.apache.commons.compress.archivers.cpio;\n+\n+import java.io.FileInputStream;\n+\n+import org.apache.commons.compress.AbstractTestCase;\n+\n+public class CpioArchiveInputStreamTest extends AbstractTestCase {\n+\n+    public void testCpioUnarchive() throws Exception {\n+        StringBuffer expected = new StringBuffer();\n+        expected.append(\"./test1.xml<?xml version=\\\"1.0\\\"?>\\n\");\n+        expected.append(\"<empty/>./test2.xml<?xml version=\\\"1.0\\\"?>\\n\");\n+        expected.append(\"<empty/>\\n\");\n+        \n+\n+        CpioArchiveInputStream in = \n+                new CpioArchiveInputStream(new FileInputStream(getFile(\"bla.cpio\")));\n+        CpioArchiveEntry entry= null;\n+        \n+        StringBuffer result = new StringBuffer();\n+        while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) {\n+            result.append(entry.getName());\n+            int tmp;\n+            while ((tmp = in.read()) != -1) {\n+                result.append((char) tmp);\n+             }\n+         }\n+         in.close();\n+         assertEquals(result.toString(), expected.toString());\n+    }    \n+}", "timestamp": 1238063805, "metainfo": ""}