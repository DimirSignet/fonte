{"sha": "5ec6974223300aaca6619cb77ad4e1ca932d6c91", "log": "write uncompressed 7z archive but use a coder  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n import java.io.FilterInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.OutputStream;\n import java.security.GeneralSecurityException;\n import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n                 Arrays.toString(coder.decompressionMethodId));\n     }\n     \n+    static OutputStream addEncoder(final OutputStream out, final SevenZMethod method,\n+                                   final String password) throws IOException {\n+        for (final CoderId coderId : coderTable) {\n+            if (coderId.method.equals(method)) {\n+                return coderId.coder.encode(out, password);\n+            }\n+        }\n+        throw new IOException(\"Unsupported compression method \" + method);\n+    }\n+\n     static CoderId[] coderTable = new CoderId[] {\n         new CoderId(SevenZMethod.COPY, new CopyDecoder()),\n         new CoderId(SevenZMethod.LZMA, new LZMADecoder()),\n     static abstract class CoderBase {\n         abstract InputStream decode(final InputStream in, final Coder coder,\n                 String password) throws IOException;\n+        OutputStream encode(final OutputStream out, final String password) {\n+            throw new UnsupportedOperationException(\"method doesn't support writing\");\n+        }\n     }\n     \n     static class CopyDecoder extends CoderBase {\n                 String password) throws IOException {\n             return in; \n         }\n-    }\n-    \n+        @Override\n+        OutputStream encode(final OutputStream out, final String password) {\n+            return out;\n+        }\n+    }\n+\n     static class LZMA2Decoder extends CoderBase {\n         @Override\n         InputStream decode(final InputStream in, final Coder coder,\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java\n     private boolean hasWindowsAttributes;\n     private int windowsAttributes;\n     private boolean hasCrc;\n-    private int crc;\n-    private long size;\n+    private int crc, compressedCrc;\n+    private long size, compressedSize;\n     \n     public SevenZArchiveEntry() {\n     }\n     }\n \n     /**\n+     * Gets the compressed CRC.\n+     */\n+    int getCompressedCrc() {\n+        return compressedCrc;\n+    }\n+\n+    /**\n+     * Sets the compressed CRC.\n+     */\n+    void setCompressedCrc(int crc) {\n+        this.compressedCrc = crc;\n+    }\n+\n+    /**\n      * Get this entry's file size.\n      *\n      * @return This entry's file size.\n      */\n     public void setSize(long size) {\n         this.size = size;\n+    }\n+\n+    /**\n+     * Get this entry's compressed file size.\n+     *\n+     * @return This entry's compressed file size.\n+     */\n+    long getCompressedSize() {\n+        return compressedSize;\n+    }\n+    \n+    /**\n+     * Set this entry's compressed file size.\n+     *\n+     * @param size This entry's new compressed file size.\n+     */\n+    void setCompressedSize(long size) {\n+        this.compressedSize = size;\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n import java.io.DataOutputStream;\n import java.io.File;\n import java.io.IOException;\n+import java.io.OutputStream;\n import java.io.RandomAccessFile;\n import java.util.ArrayList;\n import java.util.BitSet;\n import java.util.zip.CRC32;\n \n import org.apache.commons.compress.archivers.ArchiveEntry;\n+import org.apache.commons.compress.utils.CountingOutputStream;\n \n /**\n  * Writes a 7z file.\n     private final List<SevenZArchiveEntry> files = new ArrayList<SevenZArchiveEntry>();\n     private int numNonEmptyStreams = 0;\n     private CRC32 crc32 = new CRC32();\n+    private CRC32 compressedCrc32 = new CRC32();\n     private long fileBytesWritten = 0;\n     private boolean finished = false;\n+    private CountingOutputStream currentOutputStream;\n     \n     public SevenZOutputFile(final File filename) throws IOException {\n         file = new RandomAccessFile(filename, \"rw\");\n     public void putArchiveEntry(final ArchiveEntry archiveEntry) throws IOException {\n         final SevenZArchiveEntry entry = (SevenZArchiveEntry) archiveEntry;\n         files.add(entry);\n+        currentOutputStream = setupFileOutputStream();\n     }\n     \n     /**\n      * @throws IOException\n      */\n     public void closeArchiveEntry() throws IOException {\n+        currentOutputStream.flush();\n+        currentOutputStream.close();\n+\n         final SevenZArchiveEntry entry = files.get(files.size() - 1);\n         if (fileBytesWritten > 0) {\n             entry.setHasStream(true);\n             ++numNonEmptyStreams;\n-            entry.setSize(fileBytesWritten);\n+            entry.setSize(currentOutputStream.getBytesWritten());\n+            entry.setCompressedSize(fileBytesWritten);\n             entry.setCrc((int) crc32.getValue());\n+            entry.setCompressedCrc((int) compressedCrc32.getValue());\n             entry.setHasCrc(true);\n         } else {\n             entry.setHasStream(false);\n             entry.setSize(0);\n+            entry.setCompressedSize(0);\n             entry.setHasCrc(false);\n         }\n         crc32.reset();\n+        compressedCrc32.reset();\n         fileBytesWritten = 0;\n     }\n     \n      * @throws IOException on error\n      */\n     public void write(final int b) throws IOException {\n-        file.write(b);\n-        crc32.update(b);\n-        fileBytesWritten++;\n+        currentOutputStream.write(b);\n     }\n     \n     /**\n      * @throws IOException on error\n      */\n     public void write(final byte[] b) throws IOException {\n-        write(b, 0, b.length);\n+        currentOutputStream.write(b);\n     }\n     \n     /**\n      * @throws IOException on error\n      */\n     public void write(final byte[] b, final int off, final int len) throws IOException {\n-        file.write(b, off, len);\n-        crc32.update(b, off, len);\n-        fileBytesWritten += len;\n+        currentOutputStream.write(b, off, len);\n     }\n     \n     /**\n         file.write(startHeaderBytes);\n     }\n     \n+    private CountingOutputStream setupFileOutputStream() throws IOException {\n+        OutputStream out = new OutputStreamWrapper();\n+        return new CountingOutputStream(Coders\n+                                        .addEncoder(out, SevenZMethod.COPY,\n+                                                    null)) {\n+            @Override\n+            public void write(final int b) throws IOException {\n+                super.write(b);\n+                crc32.update(b);\n+            }\n+    \n+            @Override\n+            public void write(final byte[] b) throws IOException {\n+                super.write(b);\n+                crc32.update(b);\n+            }\n+    \n+            @Override\n+            public void write(final byte[] b, final int off, final int len)\n+                throws IOException {\n+                super.write(b, off, len);\n+                crc32.update(b, off, len);\n+            }\n+        };\n+    }\n+\n     private void writeHeader(final DataOutput header) throws IOException {\n         header.write(NID.kHeader);\n         \n     }\n     \n     private void writePackInfo(final DataOutput header) throws IOException {\n-        // FIXME: this needs to use the compressed sizes/CRCs when we start supporting compression.\n         header.write(NID.kPackInfo);\n         \n         writeUint64(header, 0);\n         header.write(NID.kSize);\n         for (final SevenZArchiveEntry entry : files) {\n             if (entry.hasStream()) {\n-                writeUint64(header, entry.getSize());\n+                writeUint64(header, entry.getCompressedSize());\n             }\n         }\n         \n         header.write(1);\n         for (final SevenZArchiveEntry entry : files) {\n             if (entry.hasStream()) {\n-                header.writeInt(Integer.reverseBytes(entry.getCrc()));\n+                header.writeInt(Integer.reverseBytes(entry.getCompressedCrc()));\n             }\n         }\n         \n         header.write(NID.kUnpackInfo);\n         \n         header.write(NID.kFolder);\n-        // FIXME: add real support for solid compression, and actual compression methods\n         writeUint64(header, numNonEmptyStreams);\n         header.write(0);\n         for (int i = 0; i < numNonEmptyStreams; i++) {\n     }\n     \n     private void writeFolder(final DataOutput header) throws IOException {\n+        // one coder\n         writeUint64(header, 1);\n-        header.write(1);\n-        header.write(0);\n+        byte[] id = SevenZMethod.COPY.getId();\n+        // FIXME - deal with coder properties\n+        header.write(id.length);\n+        header.write(id);\n     }\n     \n     private void writeSubStreamsInfo(final DataOutput header) throws IOException {\n             header.write(cache);\n         }\n     }\n+\n+    private class OutputStreamWrapper extends OutputStream {\n+        @Override\n+        public void write(final int b) throws IOException {\n+            file.write(b);\n+            compressedCrc32.update(b);\n+            fileBytesWritten++;\n+        }\n+    \n+        @Override\n+        public void write(final byte[] b) throws IOException {\n+            OutputStreamWrapper.this.write(b, 0, b.length);\n+        }\n+    \n+        @Override\n+        public void write(final byte[] b, final int off, final int len)\n+            throws IOException {\n+            file.write(b, off, len);\n+            compressedCrc32.update(b, off, len);\n+            fileBytesWritten += len;\n+        }\n+\n+        @Override\n+        public void flush() throws IOException {\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+        }\n+    }\n }", "timestamp": 1381481649, "metainfo": ""}