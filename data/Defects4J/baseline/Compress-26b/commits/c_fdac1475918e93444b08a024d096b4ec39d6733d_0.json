{"sha": "fdac1475918e93444b08a024d096b4ec39d6733d", "log": "TarArchiveOutputStream's getBytesWritten doesn't work.  COMPRESS-160  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n import org.apache.commons.compress.archivers.ArchiveEntry;\n import org.apache.commons.compress.archivers.ArchiveOutputStream;\n import org.apache.commons.compress.utils.ArchiveUtils;\n+import org.apache.commons.compress.utils.CountingOutputStream;\n \n /**\n  * The TarOutputStream writes a UNIX tar archive as an OutputStream.\n      * @param recordSize the record size to use\n      */\n     public TarArchiveOutputStream(OutputStream os, int blockSize, int recordSize) {\n-        out = os;\n-\n-        this.buffer = new TarBuffer(os, blockSize, recordSize);\n+        out = new CountingOutputStream(os);\n+\n+        this.buffer = new TarBuffer(out, blockSize, recordSize);\n         this.assemLen = 0;\n         this.assemBuf = new byte[recordSize];\n         this.recordBuf = new byte[recordSize];\n         this.longFileMode = longFileMode;\n     }\n \n+\n+    @Deprecated\n+    @Override\n+    public int getCount() {\n+        return (int) getBytesWritten();\n+    }\n+\n+    @Override\n+    public long getBytesWritten() {\n+        return ((CountingOutputStream) out).getBytesWritten();\n+    }\n \n     /**\n      * Ends the TAR archive without closing the underlying OutputStream.\n             numToWrite -= num;\n             wOffset += num;\n         }\n-        \n-        count(numToWrite);\n     }\n \n     /**\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.apache.commons.compress.archivers.tar;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+\n+import org.apache.commons.compress.AbstractTestCase;\n+import org.apache.commons.compress.archivers.ArchiveOutputStream;\n+import org.apache.commons.compress.archivers.ArchiveStreamFactory;\n+\n+public class TarArchiveOutputStreamTest extends AbstractTestCase {\n+\n+    public void testCount() throws Exception {\n+        File f = File.createTempFile(\"commons-compress-tarcount\", \".tar\");\n+        f.deleteOnExit();\n+        FileOutputStream fos = new FileOutputStream(f);\n+\n+        ArchiveOutputStream tarOut = new ArchiveStreamFactory()\n+            .createArchiveOutputStream(ArchiveStreamFactory.TAR, fos);\n+\n+        File file1 = getFile(\"test1.xml\");\n+        TarArchiveEntry sEntry = new TarArchiveEntry(file1);\n+        tarOut.putArchiveEntry(sEntry);\n+\n+        FileInputStream in = new FileInputStream(file1);\n+        byte[] buf = new byte[8192];\n+\n+        int read = 0;\n+        while ((read = in.read(buf)) > 0) {\n+            tarOut.write(buf, 0, read);\n+        }\n+\n+        in.close();\n+        tarOut.closeArchiveEntry();\n+        tarOut.close();\n+\n+        assertEquals(f.length(), tarOut.getBytesWritten());\n+    }\n+}", "timestamp": 1319372113, "metainfo": ""}