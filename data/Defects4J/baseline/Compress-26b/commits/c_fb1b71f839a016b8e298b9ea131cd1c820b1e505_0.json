{"sha": "fb1b71f839a016b8e298b9ea131cd1c820b1e505", "log": "Removed the suite classes and the constructors from the test cases  ", "commit": "\n--- a/src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java\n+++ b/src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java\n \n import junit.framework.TestCase;\n \n-import org.apache.commons.compress.archivers.tar.TarEntry;\n-import org.apache.commons.compress.archivers.tar.TarInputStream;\n-\n /**\n  * Test case for all tar resources.\n  *\n  * @author <a href=\"mailto:peter@apache.org\">Peter Donald</a>\n  * @version $Revision: 155439 $ $Date$\n  */\n-public final class TarTestCase\n-    extends TestCase\n+public final class TarTestCase extends TestCase\n {\n     private static final char SP = File.separatorChar;\n     private static final String BASE_DATA_NAME = \"data.txt\";\n     private static final String BASEDIR = calcBaseDir();\n \n     private static final File BASEDIR_FILE = new File( BASEDIR );\n-    private static final File POSIX_TAR_FILE =\n-        new File( BASEDIR_FILE, \"posix.tar\" );\n+    private static final File POSIX_TAR_FILE = new File( BASEDIR_FILE, \"posix.tar\" );\n     //    private static final File V7_TAR_FILE =\n     //        new File( BASEDIR_FILE, \"v7.tar\" );\n-    private static final File GNU_TAR_FILE =\n-        new File( BASEDIR_FILE, \"gnu.tar\" );\n-    private static final File DATA_FILE1 =\n-        new File( BASEDIR_FILE, BASE_DATA_NAME );\n+    private static final File GNU_TAR_FILE = new File( BASEDIR_FILE, \"gnu.tar\" );\n+    private static final File DATA_FILE1 = new File( BASEDIR_FILE, BASE_DATA_NAME );\n     private static final String USER_NAME = \"avalon\";\n     private static final String GROUP_NAME = \"excalibur\";\n     private static final long SIZE = DATA_FILE1.length();\n     private static final int MODE = 0100000;\n     private static final int MOD_TIME = 0;\n \n-    public TarTestCase()\n-    {\n-        this( \"Tar Test Case\" );\n-    }\n-\n-    public TarTestCase( String name )\n-    {\n-        super( name );\n-    }\n-\n     private static String calcBaseDir()\n     {\n         final String name = TarTestCase.class.getName();\n         final int size = name.length();\n-        final String filename =\n-            name.substring( 0, size - 11 ).replace( '.', SP );\n-        return \"src\" + SP + \"test\" + SP +\n-                SP + filename + SP;\n-    }\n-\n-    public void testReadPosixTar()\n-        throws Exception\n+        final String filename = name.substring( 0, size - 11 ).replace( '.', SP );\n+        return \"src\" + SP + \"test\" + SP + SP + filename + SP;\n+    }\n+\n+    public void testReadPosixTar() throws Exception\n     {\n         compareTar( BASE_DATA_NAME, POSIX_TAR_FILE );\n     }\n \n-    public void testReadGnuTar()\n-        throws Exception\n+    public void testReadGnuTar() throws Exception\n     {\n         compareTar( LONG_FILE_NAME, GNU_TAR_FILE );\n     }\n \n-    public void testWritePosixTar()\n-        throws Exception\n+    public void testWritePosixTar() throws Exception\n     {\n         //final File temp = new File( BASEDIR_FILE, \"posix2.tar\" );\n         final File temp = File.createTempFile( \"delete-me\", \"tar\" );\n         temp.delete();\n     }\n \n-    public void testWriteGnuTar()\n-        throws Exception\n+    public void testWriteGnuTar() throws Exception\n     {\n         //final File temp = new File( BASEDIR_FILE, \"gnu2.tar\" );\n         final File temp = File.createTempFile( \"delete-me\", \"tar\" );\n      * @param file1 the tar file comparing\n      * @throws IOException if an error occurs\n      */\n-    private void compareTar( final String entryName,\n-                             final File file1 )\n+    private void compareTar( final String entryName, final File file1 )\n         throws IOException\n     {\n         final FileInputStream fileInput = new FileInputStream( file1 );\n--- a/src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java\n+++ b/src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java\n \n import java.util.zip.ZipException;\n \n-import org.apache.commons.compress.archivers.zip.AsiExtraField;\n-import org.apache.commons.compress.archivers.zip.UnixStat;\n-\n import junit.framework.TestCase;\n \n /**\n  *\n  * @author <a href=\"mailto:stefan.bodewig@epost.de\">Stefan Bodewig</a>\n  */\n-public class AsiExtraFieldTestCase\n-    extends TestCase\n-    implements UnixStat\n+public class AsiExtraFieldTestCase extends TestCase implements UnixStat\n {\n-    public AsiExtraFieldTestCase( final String name )\n-    {\n-        super( name );\n-    }\n-\n     /**\n      * Test file mode magic.\n      */\n--- a/src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java\n+++ b/src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java\n \n package org.apache.commons.compress.archivers.zip;\n \n-import org.apache.commons.compress.archivers.zip.AsiExtraField;\n-import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;\n-import org.apache.commons.compress.archivers.zip.UnixStat;\n-import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;\n-import org.apache.commons.compress.archivers.zip.ZipExtraField;\n-import org.apache.commons.compress.archivers.zip.ZipShort;\n-\n import junit.framework.TestCase;\n \n /**\n  *\n  * @author <a href=\"mailto:stefan.bodewig@epost.de\">Stefan Bodewig</a>\n  */\n-public class ExtraFieldUtilsTestCase\n-    extends TestCase\n-    implements UnixStat\n+public class ExtraFieldUtilsTestCase extends TestCase implements UnixStat\n {\n     private AsiExtraField m_field;\n     private UnrecognizedExtraField m_dummy;\n     private byte[] m_data;\n     private byte[] m_local;\n-\n-    public ExtraFieldUtilsTestCase( final String name )\n-    {\n-        super( name );\n-    }\n \n     public void setUp()\n     {\n--- a/src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java\n+++ b/src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java\n \n import java.util.NoSuchElementException;\n \n-import org.apache.commons.compress.archivers.zip.AsiExtraField;\n-import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;\n-import org.apache.commons.compress.archivers.zip.ZipEntry;\n-import org.apache.commons.compress.archivers.zip.ZipExtraField;\n-import org.apache.commons.compress.archivers.zip.ZipShort;\n-\n import junit.framework.TestCase;\n \n /**\n  *\n  * @author <a href=\"mailto:stefan.bodewig@epost.de\">Stefan Bodewig</a>\n  */\n-public class ZipEntryTestCase\n-    extends TestCase\n+public class ZipEntryTestCase extends TestCase\n {\n-    public ZipEntryTestCase( final String name )\n-    {\n-        super( name );\n-    }\n-\n     /**\n      * test handling of extra fields\n      */\n--- a/src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java\n+++ b/src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java\n \n package org.apache.commons.compress.archivers.zip;\n \n-import org.apache.commons.compress.archivers.zip.ZipLong;\n-\n import junit.framework.TestCase;\n \n /**\n  *\n  * @author <a href=\"mailto:stefan.bodewig@epost.de\">Stefan Bodewig</a>\n  */\n-public class ZipLongTestCase\n-    extends TestCase\n+public class ZipLongTestCase extends TestCase\n {\n-\n-    public ZipLongTestCase( final String name )\n-    {\n-        super( name );\n-    }\n-\n     /**\n      * Test conversion to bytes.\n      */\n--- a/src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java\n+++ b/src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java\n \n package org.apache.commons.compress.archivers.zip;\n \n-import org.apache.commons.compress.archivers.zip.ZipShort;\n-\n import junit.framework.TestCase;\n \n /**\n  *\n  * @author <a href=\"mailto:stefan.bodewig@epost.de\">Stefan Bodewig</a>\n  */\n-public class ZipShortTestCase\n-    extends TestCase\n+public class ZipShortTestCase extends TestCase\n {\n-    public ZipShortTestCase( String name )\n-    {\n-        super( name );\n-    }\n-\n     /**\n      * Test conversion to bytes.\n      */\n--- a/src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java\n+++ b/src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n+\n+import org.apache.commons.compress.CompressUtils;\n+\n import junit.framework.TestCase;\n-\n-import org.apache.commons.compress.CompressUtils;\n-import org.apache.commons.compress.compressors.bzip2.BZip2InputStream;\n-import org.apache.commons.compress.compressors.bzip2.BZip2OutputStream;\n \n /**\n  * A test the stress tested the BZip implementation to verify\n  * @author <a href=\"mailto:peter@apache.org\">Peter Donald</a>\n  * @version $Revision: 280140 $ $Date$\n  */\n-public class BzipTestCase\n-    extends TestCase\n+public class BzipTestCase extends TestCase\n {\n     private static final byte[] HEADER = new byte[]{(byte)'B', (byte)'Z'};\n-\n-    public BzipTestCase( final String name )\n-    {\n-        super( name );\n-    }\n \n     public void testBzipOutputStream()\n         throws Exception", "timestamp": 1213778139, "metainfo": ""}