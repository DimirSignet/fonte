{"sha": "f5b32b03223c5c647cc01a7cfa33b7fd2ea679b4", "log": "deflate support when reading 7Z archives  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n  */\n package org.apache.commons.compress.archivers.sevenz;\n \n+import java.io.FilterInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n import java.security.GeneralSecurityException;\n import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n import java.util.Arrays;\n+import java.util.zip.Inflater;\n+import java.util.zip.InflaterInputStream;\n \n import javax.crypto.Cipher;\n import javax.crypto.CipherInputStream;\n         new CoderId(new byte[] { (byte)0x00 }, new CopyDecoder()),\n         new CoderId(new byte[] { (byte)0x03, (byte)0x01, (byte)0x01 }, new LZMADecoder()),\n         new CoderId(new byte[] { (byte)0x21 }, new LZMA2Decoder()),\n-        // FIXME: gives corrupt output\n-        //new CoderId(new byte[] { (byte)0x04, (byte)0x01, (byte)0x08 }, new DeflateDecoder()),\n+        new CoderId(new byte[] { (byte)0x04, (byte)0x01, (byte)0x08 }, new DeflateDecoder()),\n         new CoderId(new byte[] { (byte)0x04, (byte)0x02, (byte)0x02 }, new BZIP2Decoder()),\n         new CoderId(new byte[] { (byte)0x06, (byte)0xf1, (byte)0x07, (byte)0x01 }, new AES256SHA256Decoder())\n     };\n         }\n     }\n     \n-//    static class DeflateDecoder extends CoderBase {\n-//        @Override\n-//        InputStream decode(final InputStream in, final Coder coder, final String password)\n-//                throws IOException {\n-//            System.out.println(\"deflate prop count = \" + (coder.properties == null ? -1 : coder.properties.length));\n-//            return new DeflaterInputStream(in, new Deflater(Deflater.DEFAULT_COMPRESSION, true));\n-//            //return new GZIPInputStream(in);\n-//        }\n-//    }\n+    static class DeflateDecoder extends CoderBase {\n+        @Override\n+        InputStream decode(final InputStream in, final Coder coder, final String password)\n+            throws IOException {\n+            return new InflaterInputStream(new DummyByteAddingInputStream(in),\n+                                           new Inflater(true));\n+        }\n+    }\n \n     static class BZIP2Decoder extends CoderBase {\n         @Override\n             };\n         }\n     }\n+\n+    /**\n+     * ZLIB requires an extra dummy byte.\n+     *\n+     * @see java.util.zip.Inflater#Inflater(boolean)\n+     * @see org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream\n+     */\n+    private static class DummyByteAddingInputStream extends FilterInputStream {\n+        private boolean addDummyByte = true;\n+\n+        private DummyByteAddingInputStream(InputStream in) {\n+            super(in);\n+        }\n+\n+        @Override\n+        public int read() throws IOException {\n+            int result = super.read();\n+            if (result == -1 && addDummyByte) {\n+                addDummyByte = false;\n+                result = 0;\n+            }\n+            return result;\n+        }\n+\n+        @Override\n+        public int read(byte[] b, int off, int len) throws IOException {\n+            int result = super.read(b, off, len);\n+            if (result == -1 && addDummyByte) {\n+                addDummyByte = false;\n+                b[off] = 0;\n+                return 1;\n+            }\n+            return result;\n+        }\n+    }\n }\n--- a/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java\n  */\n package org.apache.commons.compress.archivers.sevenz;\n \n+import java.io.File;\n import org.apache.commons.compress.AbstractTestCase;\n \n public class SevenZFileTest extends AbstractTestCase {\n     }\n \n     public void test7zUnarchive() throws Exception {\n-        SevenZFile sevenZFile = new SevenZFile(getFile(\"bla.7z\"));\n+        test7zUnarchive(getFile(\"bla.7z\"));\n+    }\n+\n+    public void test7zDeflateUnarchive() throws Exception {\n+        test7zUnarchive(getFile(\"bla.deflate.7z\"));\n+    }\n+\n+    private void test7zUnarchive(File f) throws Exception {\n+        SevenZFile sevenZFile = new SevenZFile(f);\n         try {\n             SevenZArchiveEntry entry = sevenZFile.getNextEntry();\n             assertEquals(\"test1.xml\", entry.getName());", "timestamp": 1380902843, "metainfo": ""}