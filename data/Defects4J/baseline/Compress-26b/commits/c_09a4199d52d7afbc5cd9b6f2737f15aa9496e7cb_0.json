{"sha": "09a4199d52d7afbc5cd9b6f2737f15aa9496e7cb", "log": "COMPRESS-242 make X5455_ExtendedTimestamp more convenient  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java\n     private static final ZipShort HEADER_ID = new ZipShort(0x5455);\n     private static final long serialVersionUID = 1L;\n \n-    static final byte MODIFY_TIME_BIT = 1;\n-    static final byte ACCESS_TIME_BIT = 2;\n-    static final byte CREATE_TIME_BIT = 4;\n+    /**\n+     * The bit set inside the flags by when the last modification time\n+     * is present in this extra field.\n+     */\n+    public static final byte MODIFY_TIME_BIT = 1;\n+    /**\n+     * The bit set inside the flags by when the lasr access time is\n+     * present in this extra field.\n+     */\n+    public static final byte ACCESS_TIME_BIT = 2;\n+    /**\n+     * The bit set inside the flags by when the original creation time\n+     * is present in this extra field.\n+     */\n+    public static final byte CREATE_TIME_BIT = 4;\n \n     // The 3 boolean fields (below) come from this flags byte.  The remaining 5 bits\n     // are ignored according to the current version of the spec (December 2012).\n      *\n      * @param l ZipLong of the modify time (seconds per epoch)\n      */\n-    public void setModifyTime(ZipLong l) { this.modifyTime = l; }\n+    public void setModifyTime(ZipLong l) {\n+        bit0_modifyTimePresent = l != null;\n+        flags = (byte) (l != null ? (flags | MODIFY_TIME_BIT)\n+                        : (flags & ~MODIFY_TIME_BIT));\n+        this.modifyTime = l;\n+    }\n \n     /**\n      * <p>\n      *\n      * @param l ZipLong of the access time (seconds per epoch)\n      */\n-    public void setAccessTime(ZipLong l) { this.accessTime = l; }\n+    public void setAccessTime(ZipLong l) {\n+        bit1_accessTimePresent = l != null;\n+        flags = (byte) (l != null ? (flags | ACCESS_TIME_BIT)\n+                        : (flags & ~ACCESS_TIME_BIT));\n+        this.accessTime = l;\n+    }\n \n     /**\n      * <p>\n      *\n      * @param l ZipLong of the create time (seconds per epoch)\n      */\n-    public void setCreateTime(ZipLong l) { this.createTime = l; }\n+    public void setCreateTime(ZipLong l) {\n+        bit2_createTimePresent = l != null;\n+        flags = (byte) (l != null ? (flags | CREATE_TIME_BIT)\n+                        : (flags & ~CREATE_TIME_BIT));\n+        this.createTime = l;\n+    }\n \n     /**\n      * <p>\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java\n         zf.close();\n     }\n \n+    public void testBitsAreSetWithTime() {\n+        xf.setModifyJavaTime(new Date(1111));\n+        assertTrue(xf.isBit0_modifyTimePresent());\n+        assertEquals(1, xf.getFlags());\n+        xf.setAccessJavaTime(new Date(2222));\n+        assertTrue(xf.isBit1_accessTimePresent());\n+        assertEquals(3, xf.getFlags());\n+        xf.setCreateJavaTime(new Date(3333));\n+        assertTrue(xf.isBit2_createTimePresent());\n+        assertEquals(7, xf.getFlags());\n+        xf.setModifyJavaTime(null);\n+        assertFalse(xf.isBit0_modifyTimePresent());\n+        assertEquals(6, xf.getFlags());\n+        xf.setAccessJavaTime(null);\n+        assertFalse(xf.isBit1_accessTimePresent());\n+        assertEquals(4, xf.getFlags());\n+        xf.setCreateJavaTime(null);\n+        assertFalse(xf.isBit2_createTimePresent());\n+        assertEquals(0, xf.getFlags());\n+    }\n+\n     private void parseReparse(\n             final ZipLong time,\n             final byte[] expectedLocal,\n         System.arraycopy(almostExpectedCentral, 0, expectedCentral, 0, almostExpectedCentral.length);\n         expectedCentral[0] = expectedFlags;\n \n-        xf.setFlags(providedFlags);\n         xf.setModifyTime(time);\n         xf.setAccessTime(time);\n         xf.setCreateTime(time);\n+        xf.setFlags(providedFlags);\n         byte[] result = xf.getLocalFileDataData();\n         assertTrue(Arrays.equals(expectedLocal, result));\n \n         }\n \n         // Do the same as above, but with Central Directory data:\n-        xf.setFlags(providedFlags);\n         xf.setModifyTime(time);\n         xf.setAccessTime(time);\n         xf.setCreateTime(time);\n+        xf.setFlags(providedFlags);\n         result = xf.getCentralDirectoryData();\n         assertTrue(Arrays.equals(expectedCentral, result));\n ", "timestamp": 1386530065, "metainfo": ""}