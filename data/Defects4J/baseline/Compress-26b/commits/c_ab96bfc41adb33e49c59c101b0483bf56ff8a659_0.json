{"sha": "ab96bfc41adb33e49c59c101b0483bf56ff8a659", "log": "start validating file structure, incomplete, need to run now  ", "commit": "\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n+import java.io.RandomAccessFile;\n import java.net.URI;\n import java.net.URL;\n import java.util.Random;\n \n import org.junit.Test;\n+import static org.junit.Assert.assertArrayEquals;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assume.assumeNotNull;\n                         zos.putArchiveEntry(zae);\n                         zos.closeArchiveEntry();\n                     }\n+                    zos.close();\n+                    RandomAccessFile a = new RandomAccessFile(f, \"r\");\n+                    try {\n+                        final long end = a.length();\n+\n+                        // validate \"end of central directory\" is at\n+                        // the end of the file and contains the magic\n+                        // value 0xFFFF as \"number of entries\".\n+                        a.seek(end\n+                               - 22 /* length of EOCD without file comment */);\n+                        byte[] eocd = new byte[12];\n+                        a.readFully(eocd);\n+                        assertArrayEquals(new byte[] {\n+                                // sig\n+                                (byte) 0x50, (byte) 0x4b, 5, 6,\n+                                // disk numbers\n+                                0, 0, 0, 0,\n+                                // entries\n+                                (byte) 0xff, (byte) 0xff,\n+                                (byte) 0xff, (byte) 0xff,\n+                            }, eocd); \n+                    } finally {\n+                        a.close();\n+                    }\n                 }\n             });\n     }", "timestamp": 1311916988, "metainfo": ""}