{"sha": "ef47fbd0305a0ba89cb8c3f943585d5ce6474358", "log": "whitespace changes and @Ignore-ing the whole test  ", "commit": "\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java\n import static org.junit.Assume.assumeNotNull;\n import static org.junit.Assume.assumeTrue;\n \n+@Ignore\n public class Zip64SupportTest {\n \n     private static final long FIVE_BILLION = 5000000000l;\n     private static final int ONE_MILLION = 1000000;\n     private static final int ONE_HUNDRED_THOUSAND = 100000;\n \n-    @Ignore\n-        @Test public void read5GBOfZerosUsingInputStream() throws Throwable {\n+    @Test public void read5GBOfZerosUsingInputStream() throws Throwable {\n         read5GBOfZerosImpl(get5GBZerosFile(), \"5GB_of_Zeros\");\n     }\n \n-    @Ignore\n-        @Test public void read5GBOfZerosGeneratedBy7ZIPUsingInputStream()\n+    @Test public void read5GBOfZerosGeneratedBy7ZIPUsingInputStream()\n         throws Throwable {\n         read5GBOfZerosImpl(get5GBZerosFileGeneratedBy7ZIP(), \"5GB_of_Zeros\");\n     }\n \n-    @Ignore\n-        @Test public void read5GBOfZerosGeneratedByJava7JarUsingInputStream()\n+    @Test public void read5GBOfZerosGeneratedByJava7JarUsingInputStream()\n         throws Throwable {\n         read5GBOfZerosImpl(get5GBZerosFileGeneratedByJava7Jar(), \"5GB_of_Zeros\");\n     }\n \n-    @Ignore\n-        @Test public void read100KFilesUsingInputStream() throws Throwable {\n+    @Test public void read100KFilesUsingInputStream() throws Throwable {\n         read100KFilesImpl(get100KFileFile());\n     }\n \n-    @Ignore\n-        @Test public void read100KFilesGeneratedBy7ZIPUsingInputStream() throws Throwable {\n+    @Test public void read100KFilesGeneratedBy7ZIPUsingInputStream()\n+        throws Throwable {\n         read100KFilesImpl(get100KFileFileGeneratedBy7ZIP());\n     }\n \n-    @Ignore\n-        @Test public void read100KFilesGeneratedByWinCFUsingInputStream() throws Throwable {\n+    @Test public void read100KFilesGeneratedByWinCFUsingInputStream()\n+        throws Throwable {\n         read100KFilesImpl(get100KFileFileGeneratedByWinCF());\n     }\n \n-    @Ignore\n-        @Test public void read100KFilesGeneratedByJava7JarUsingInputStream() throws Throwable {\n+    @Test public void read100KFilesGeneratedByJava7JarUsingInputStream()\n+        throws Throwable {\n         read100KFilesImpl(get100KFileFileGeneratedByJava7Jar());\n     }\n \n-    @Ignore\n-        @Test public void read5GBOfZerosUsingZipFile() throws Throwable {\n+    @Test public void read5GBOfZerosUsingZipFile() throws Throwable {\n         read5GBOfZerosUsingZipFileImpl(get5GBZerosFile(), \"5GB_of_Zeros\");\n     }\n \n-    @Ignore\n-        @Test public void read5GBOfZerosGeneratedBy7ZIPUsingZipFile()\n+    @Test public void read5GBOfZerosGeneratedBy7ZIPUsingZipFile()\n         throws Throwable {\n         read5GBOfZerosUsingZipFileImpl(get5GBZerosFileGeneratedBy7ZIP(),\n                                        \"5GB_of_Zeros\");\n     }\n \n-    @Ignore\n-        @Test public void read5GBOfZerosGeneratedByJava7JarUsingZipFile()\n+    @Test public void read5GBOfZerosGeneratedByJava7JarUsingZipFile()\n         throws Throwable {\n         read5GBOfZerosUsingZipFileImpl(get5GBZerosFileGeneratedByJava7Jar(),\n                                        \"5GB_of_Zeros\");\n     }\n \n-    @Ignore\n-        @Test public void read100KFilesUsingZipFile() throws Throwable {\n+    @Test public void read100KFilesUsingZipFile() throws Throwable {\n         read100KFilesUsingZipFileImpl(get100KFileFile());\n     }\n \n-    @Ignore\n-        @Test public void read100KFilesGeneratedBy7ZIPUsingZipFile() throws Throwable {\n+    @Test public void read100KFilesGeneratedBy7ZIPUsingZipFile()\n+        throws Throwable {\n         read100KFilesUsingZipFileImpl(get100KFileFileGeneratedBy7ZIP());\n     }\n \n-    @Ignore\n-        @Test public void read100KFilesGeneratedByWinCFUsingZipFile() throws Throwable {\n+    @Test public void read100KFilesGeneratedByWinCFUsingZipFile()\n+        throws Throwable {\n         read100KFilesUsingZipFileImpl(get100KFileFileGeneratedByWinCF());\n     }\n \n-    @Ignore\n-        @Test public void read100KFilesGeneratedByJava7JarUsingZipFile() throws Throwable {\n+    @Test public void read100KFilesGeneratedByJava7JarUsingZipFile()\n+        throws Throwable {\n         read100KFilesUsingZipFileImpl(get100KFileFileGeneratedByJava7Jar());\n     }\n \n                              write100KFilesModeNever, false);\n     }\n \n-    @Ignore\n-        @Test public void readSelfGenerated100KFilesUsingZipFile()\n+    @Test public void readSelfGenerated100KFilesUsingZipFile()\n         throws Throwable {\n         withTemporaryArchive(\"readSelfGenerated100KFilesUsingZipFile()\",\n                              new ZipOutputTest() {\n                              false);\n     }\n \n-    @Ignore\n-        @Test public void read3EntriesCreatingBigArchiveFileUsingZipFile()\n+    @Test public void read3EntriesCreatingBigArchiveFileUsingZipFile()\n         throws Throwable {\n         withTemporaryArchive(\"read3EntriesCreatingBigArchiveFileUsingZipFile\",\n                              new ZipOutputTest() {\n                              true);\n     }\n \n-    private static ZipOutputTest writeBigStoredEntryModeNever(final boolean knownSize) {\n+    private static ZipOutputTest\n+        writeBigStoredEntryModeNever(final boolean knownSize) {\n         return new ZipOutputTest() {\n             public void test(File f, ZipArchiveOutputStream zos)\n                 throws IOException {\n         writeBigDeflatedEntryToStream(final boolean knownSize,\n                                       final Zip64Mode mode) {\n         return new ZipOutputTest() {\n-                                 public void test(File f,\n-                                                  ZipArchiveOutputStream zos)\n-                                     throws IOException {\n+            public void test(File f,\n+                             ZipArchiveOutputStream zos)\n+                throws IOException {\n                 if (mode != Zip64Mode.AsNeeded) {\n                     zos.setUseZip64(mode);\n                 }\n-                                     byte[] buf = new byte[ONE_MILLION];\n-                                     ZipArchiveEntry zae =\n-                                         new ZipArchiveEntry(\"0\");\n-                                     if (knownSize) {\n-                                     zae.setSize(FIVE_BILLION);\n-                                     }\n-                                     zae.setMethod(ZipArchiveEntry.DEFLATED);\n-                                     zos.putArchiveEntry(zae);\n-                                     for (int j = 0;\n-                                          j < FIVE_BILLION / 1000 / 1000;\n-                                          j++) {\n-                                         zos.write(buf);\n-                                     }\n-                                     zos.closeArchiveEntry();\n-                                     zos.close();\n-\n-                                     RandomAccessFile a =\n-                                         new RandomAccessFile(f, \"r\");\n-                                     try {\n-                                         final long end =\n-                                             getLengthAndPositionAtCentralDirectory(a);\n-\n-                                         long cfhPos = a.getFilePointer();\n-                                         // grab first entry, verify\n-                                         // sizes are 0xFFFFFFFF and\n-                                         // it has a ZIP64 extended\n-                                         // information extra field\n-                                         byte[] header = new byte[12];\n-                                         a.readFully(header);\n-                                         assertArrayEquals(new byte[] {\n-                                                 // sig\n-                                                 (byte) 0x50, (byte) 0x4b, 1, 2,\n-                                                 // version made by\n-                                                 45, 0,\n-                                                 // version needed to extract\n-                                                 45, 0,\n-                                                 // GPB (EFS + Data Descriptor)\n-                                                 8, 8,\n-                                                 // method\n-                                                 8, 0,\n-                                             }, header);\n-                                         // ignore timestamp\n-                                         a.skipBytes(4);\n-                                         byte[] rest = new byte[31];\n-                                         a.readFully(rest);\n-                                         assertArrayEquals(new byte[] {\n-                                                 // CRC\n-                                                 (byte) 0x50, (byte) 0x6F,\n-                                                 (byte) 0x31, (byte) 0x5c,\n-                                                 // Compressed Size\n-                                                 (byte) 0xFF, (byte) 0xFF,\n-                                                 (byte) 0xFF, (byte) 0xFF,\n-                                                 // Original Size\n-                                                 (byte) 0xFF, (byte) 0xFF,\n-                                                 (byte) 0xFF, (byte) 0xFF,\n-                                                 // file name length\n-                                                 1, 0,\n-                                                 // extra field length\n-                                                 20, 0,\n-                                                 // comment length\n-                                                 0, 0,\n-                                                 // disk number\n-                                                 0, 0,\n-                                                 // attributes\n-                                                 0, 0,\n-                                                 0, 0, 0, 0,\n-                                                 // offset\n-                                                 0, 0, 0, 0,\n-                                                 // file name\n-                                                 (byte) '0'\n-                                             }, rest);\n-                                         byte[] extra = new byte[20];\n-                                         a.readFully(extra);\n-                                         // 5e9 == 0x12A05F200\n-                                         assertArrayEquals(new byte[] {\n-                                                 // Header-ID\n-                                                 1, 0,\n-                                                 // size of extra\n-                                                 16, 0,\n-                                                 // original size\n-                                                 0, (byte) 0xF2, 5, (byte) 0x2A,\n-                                                 1, 0, 0, 0,\n-                                                 // compressed size\n-                                                 (byte) 0x68, (byte) 0x27,\n-                                                 (byte) 0x4A, 0,\n-                                                 0, 0, 0, 0,\n-                                             }, extra);\n-\n-                                         // validate data descriptor\n-                                         a.seek(cfhPos - 24);\n-                                         byte[] dd = new byte[8];\n-                                         a.readFully(dd);\n-                                         assertArrayEquals(new byte[] {\n-                                                 // sig\n-                                                 (byte) 0x50, (byte) 0x4b, 7, 8,\n-                                                 // CRC\n-                                                 (byte) 0x50, (byte) 0x6F,\n-                                                 (byte) 0x31, (byte) 0x5c,\n-                                             }, dd);\n-                                         dd = new byte[16];\n-                                         a.readFully(dd);\n-                                         assertArrayEquals(new byte[] {\n-                                                 // compressed size\n-                                                 (byte) 0x68, (byte) 0x27,\n-                                                 (byte) 0x4A, 0,\n-                                                 0, 0, 0, 0,\n-                                                 // original size\n-                                                 0, (byte) 0xF2, 5, (byte) 0x2A,\n-                                                 1, 0, 0, 0,\n-                                             }, dd);\n-\n-                                         // and now validate local file header\n-                                         a.seek(0);\n-                                         header = new byte[10];\n-                                         a.readFully(header);\n-                                         assertArrayEquals(new byte[] {\n-                                                 // sig\n-                                                 (byte) 0x50, (byte) 0x4b, 3, 4,\n-                                                 // version needed to extract\n-                                                 45, 0,\n-                                                 // GPB (EFS + Data Descriptor)\n-                                                 8, 8,\n-                                                 // method\n-                                                 8, 0,\n-                                             }, header);\n-                                         // ignore timestamp\n-                                         a.skipBytes(4);\n-                                         rest = new byte[17];\n-                                         a.readFully(rest);\n-                                         assertArrayEquals(new byte[] {\n-                                                 // CRC\n-                                                 0, 0, 0, 0,\n-                                                 // Compressed Size\n-                                                 (byte) 0xFF, (byte) 0xFF,\n-                                                 (byte) 0xFF, (byte) 0xFF,\n-                                                 // Original Size\n-                                                 (byte) 0xFF, (byte) 0xFF,\n-                                                 (byte) 0xFF, (byte) 0xFF,\n-                                                 // file name length\n-                                                 1, 0,\n-                                                 // extra field length\n-                                                 20, 0,\n-                                                 // file name\n-                                                 (byte) '0'\n-                                             }, rest);\n-                                         a.readFully(extra);\n-                                         assertArrayEquals(new byte[] {\n-                                                 // Header-ID\n-                                                 1, 0,\n-                                                 // size of extra\n-                                                 16, 0,\n-                                                 // original size\n-                                                 0, 0, 0, 0,\n-                                                 0, 0, 0, 0,\n-                                                 // compressed size\n-                                                 0, 0, 0, 0,\n-                                                 0, 0, 0, 0,\n-                                             }, extra);\n-                                     } finally {\n-                                         a.close();\n-                                     }\n-                                 }\n+                byte[] buf = new byte[ONE_MILLION];\n+                ZipArchiveEntry zae = new ZipArchiveEntry(\"0\");\n+                if (knownSize) {\n+                    zae.setSize(FIVE_BILLION);\n+                }\n+                zae.setMethod(ZipArchiveEntry.DEFLATED);\n+                zos.putArchiveEntry(zae);\n+                for (int j = 0; j < FIVE_BILLION / 1000 / 1000; j++) {\n+                    zos.write(buf);\n+                }\n+                zos.closeArchiveEntry();\n+                zos.close();\n+\n+                RandomAccessFile a =\n+                    new RandomAccessFile(f, \"r\");\n+                try {\n+                    final long end = getLengthAndPositionAtCentralDirectory(a);\n+\n+                    long cfhPos = a.getFilePointer();\n+                    // grab first entry, verify\n+                    // sizes are 0xFFFFFFFF and\n+                    // it has a ZIP64 extended\n+                    // information extra field\n+                    byte[] header = new byte[12];\n+                    a.readFully(header);\n+                    assertArrayEquals(new byte[] {\n+                            // sig\n+                            (byte) 0x50, (byte) 0x4b, 1, 2,\n+                            // version made by\n+                            45, 0,\n+                            // version needed to extract\n+                            45, 0,\n+                            // GPB (EFS + Data Descriptor)\n+                            8, 8,\n+                            // method\n+                            8, 0,\n+                        }, header);\n+                    // ignore timestamp\n+                    a.skipBytes(4);\n+                    byte[] rest = new byte[31];\n+                    a.readFully(rest);\n+                    assertArrayEquals(new byte[] {\n+                            // CRC\n+                            (byte) 0x50, (byte) 0x6F, (byte) 0x31, (byte) 0x5c,\n+                            // Compressed Size\n+                            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,\n+                            // Original Size\n+                            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,\n+                            // file name length\n+                            1, 0,\n+                            // extra field length\n+                            20, 0,\n+                            // comment length\n+                            0, 0,\n+                            // disk number\n+                            0, 0,\n+                            // attributes\n+                            0, 0,\n+                            0, 0, 0, 0,\n+                            // offset\n+                            0, 0, 0, 0,\n+                            // file name\n+                            (byte) '0'\n+                        }, rest);\n+                    byte[] extra = new byte[20];\n+                    a.readFully(extra);\n+                    // 5e9 == 0x12A05F200\n+                    assertArrayEquals(new byte[] {\n+                            // Header-ID\n+                            1, 0,\n+                            // size of extra\n+                            16, 0,\n+                            // original size\n+                            0, (byte) 0xF2, 5, (byte) 0x2A,\n+                            1, 0, 0, 0,\n+                            // compressed size\n+                            (byte) 0x68, (byte) 0x27, (byte) 0x4A, 0,\n+                            0, 0, 0, 0,\n+                        }, extra);\n+\n+                    // validate data descriptor\n+                    a.seek(cfhPos - 24);\n+                    byte[] dd = new byte[8];\n+                    a.readFully(dd);\n+                    assertArrayEquals(new byte[] {\n+                            // sig\n+                            (byte) 0x50, (byte) 0x4b, 7, 8,\n+                            // CRC\n+                            (byte) 0x50, (byte) 0x6F, (byte) 0x31, (byte) 0x5c,\n+                        }, dd);\n+                    dd = new byte[16];\n+                    a.readFully(dd);\n+                    assertArrayEquals(new byte[] {\n+                            // compressed size\n+                            (byte) 0x68, (byte) 0x27, (byte) 0x4A, 0,\n+                            0, 0, 0, 0,\n+                            // original size\n+                            0, (byte) 0xF2, 5, (byte) 0x2A,\n+                            1, 0, 0, 0,\n+                        }, dd);\n+\n+                    // and now validate local file header\n+                    a.seek(0);\n+                    header = new byte[10];\n+                    a.readFully(header);\n+                    assertArrayEquals(new byte[] {\n+                            // sig\n+                            (byte) 0x50, (byte) 0x4b, 3, 4,\n+                            // version needed to extract\n+                            45, 0,\n+                            // GPB (EFS + Data Descriptor)\n+                            8, 8,\n+                            // method\n+                            8, 0,\n+                        }, header);\n+                    // ignore timestamp\n+                    a.skipBytes(4);\n+                    rest = new byte[17];\n+                    a.readFully(rest);\n+                    assertArrayEquals(new byte[] {\n+                            // CRC\n+                            0, 0, 0, 0,\n+                            // Compressed Size\n+                            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,\n+                            // Original Size\n+                            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,\n+                            // file name length\n+                            1, 0,\n+                            // extra field length\n+                            20, 0,\n+                            // file name\n+                            (byte) '0'\n+                        }, rest);\n+                    a.readFully(extra);\n+                    assertArrayEquals(new byte[] {\n+                            // Header-ID\n+                            1, 0,\n+                            // size of extra\n+                            16, 0,\n+                            // original size\n+                            0, 0, 0, 0,\n+                            0, 0, 0, 0,\n+                            // compressed size\n+                            0, 0, 0, 0,\n+                            0, 0, 0, 0,\n+                        }, extra);\n+                } finally {\n+                    a.close();\n+                }\n+            }\n         };\n     }\n \n                              false);\n     }\n \n-    private static ZipOutputTest writeBigDeflatedEntryToFile(final boolean knownSize) {\n+    private static ZipOutputTest\n+        writeBigDeflatedEntryToFile(final boolean knownSize) {\n         return writeBigDeflatedEntryToFile(knownSize, Zip64Mode.AsNeeded);\n     }\n \n      *\n      * Creates a temporary archive of approx 4MB in size\n      */\n-    private static ZipOutputTest writeBigDeflatedEntryToFileModeNever(final boolean knownSize) {\n+    private static ZipOutputTest\n+        writeBigDeflatedEntryToFileModeNever(final boolean knownSize) {\n         return new ZipOutputTest() {\n             public void test(File f, ZipArchiveOutputStream zos)\n                 throws IOException {\n                 byte[] buf = new byte[ONE_MILLION];\n                 ZipArchiveEntry zae = new ZipArchiveEntry(\"0\");\n                 if (knownSize) {\n-                zae.setSize(ONE_MILLION);\n+                    zae.setSize(ONE_MILLION);\n                 }\n                 zae.setMethod(ZipArchiveEntry.DEFLATED);\n                 zos.putArchiveEntry(zae);", "timestamp": 1312908239, "metainfo": ""}