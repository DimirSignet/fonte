{"sha": "b2a9dd0e14adf6a80af03d8f8273141495cf90f5", "log": "Convert to enhanced for loop.  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java\n             lastIsUnparseableHolder ? data.length - 1 : data.length;\n \n         int sum = WORD * regularExtraFieldCount;\n-        for (int i = 0; i < data.length; i++) {\n-            sum += data[i].getLocalFileDataLength().getValue();\n+        for (ZipExtraField element : data) {\n+            sum += element.getLocalFileDataLength().getValue();\n         }\n \n         byte[] result = new byte[sum];\n             lastIsUnparseableHolder ? data.length - 1 : data.length;\n \n         int sum = WORD * regularExtraFieldCount;\n-        for (int i = 0; i < data.length; i++) {\n-            sum += data[i].getCentralDirectoryLength().getValue();\n+        for (ZipExtraField element : data) {\n+            sum += element.getCentralDirectoryLength().getValue();\n         }\n         byte[] result = new byte[sum];\n         int start = 0;\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n      */\n     public void setExtraFields(ZipExtraField[] fields) {\n         extraFields = new LinkedHashMap<ZipShort, ZipExtraField>();\n-        for (int i = 0; i < fields.length; i++) {\n-            if (fields[i] instanceof UnparseableExtraFieldData) {\n-                unparseableExtra = (UnparseableExtraFieldData) fields[i];\n+        for (ZipExtraField field : fields) {\n+            if (field instanceof UnparseableExtraFieldData) {\n+                unparseableExtra = (UnparseableExtraFieldData) field;\n             } else {\n-                extraFields.put(fields[i].getHeaderId(), fields[i]);\n+                extraFields.put(field.getHeaderId(), field);\n             }\n         }\n         setExtra();\n         if (extraFields == null) {\n             setExtraFields(f);\n         } else {\n-            for (int i = 0; i < f.length; i++) {\n+            for (ZipExtraField element : f) {\n                 ZipExtraField existing;\n-                if (f[i] instanceof UnparseableExtraFieldData) {\n+                if (element instanceof UnparseableExtraFieldData) {\n                     existing = unparseableExtra;\n                 } else {\n-                    existing = getExtraField(f[i].getHeaderId());\n+                    existing = getExtraField(element.getHeaderId());\n                 }\n                 if (existing == null) {\n-                    addExtraField(f[i]);\n+                    addExtraField(element);\n                 } else {\n                     if (local) {\n-                        byte[] b = f[i].getLocalFileDataData();\n+                        byte[] b = element.getLocalFileDataData();\n                         existing.parseFromLocalFileData(b, 0, b.length);\n                     } else {\n-                        byte[] b = f[i].getCentralDirectoryData();\n+                        byte[] b = element.getCentralDirectoryData();\n                         existing.parseFromCentralDirectoryData(b, 0, b.length);\n                     }\n                 }\n--- a/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n import java.io.InputStream;\n import java.io.OutputStream;\n import java.util.ArrayList;\n-import java.util.Iterator;\n import java.util.List;\n import java.util.Locale;\n \n     protected static void rmdir(File f) {\n         String[] s = f.list();\n         if (s != null) {\n-            for (int i = 0; i < s.length; i++) {\n-                final File file = new File(f, s[i]);\n+            for (String element : s) {\n+                final File file = new File(f, element);\n                 if (file.isDirectory()){\n                     rmdir(file);\n                 }\n                 boolean ok = tryHardToDelete(file);\n                 if (!ok && file.exists()){\n-                    System.out.println(\"Failed to delete \"+s[i]+\" in \"+f.getPath());\n+                    System.out.println(\"Failed to delete \"+element+\" in \"+f.getPath());\n                 }\n             }\n         }\n             }\n             in.close();\n             if (expected != null && expected.size() > 0) {\n-                for (Iterator<String> iterator = expected.iterator(); iterator.hasNext();) {\n-                    String name = iterator.next();\n+                for (String name : expected) {\n                     fail(\"Expected entry: \" + name);\n                 }\n             }\n--- a/src/test/java/org/apache/commons/compress/ArchiveReadTests.java\n+++ b/src/test/java/org/apache/commons/compress/ArchiveReadTests.java\n         }\n         br.close();\n         File[]files=arcdir.listFiles();\n-        for (int i=0; i<files.length; i++){\n-            final File file = files[i];\n+        for (final File file : files) {\n             if (file.getName().endsWith(\".txt\")){\n                 continue;\n             }\n--- a/src/test/java/org/apache/commons/compress/IOMethodsTest.java\n+++ b/src/test/java/org/apache/commons/compress/IOMethodsTest.java\n         aos2.putArchiveEntry(entry);\n         ArchiveOutputStream aos3 = factory.createArchiveOutputStream(archiverName, out3);\n         aos3.putArchiveEntry(entry);\n-        for (int i=0; i<byteTest.length; i++){\n-            aos1.write(byteTest[i]);\n+        for (byte element : byteTest) {\n+            aos1.write(element);\n         }\n         aos1.closeArchiveEntry();\n         aos1.close();\n--- a/src/test/java/org/apache/commons/compress/archivers/LongPathTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/LongPathTest.java\n         }\n         br.close();\n         File[]files=arcdir.listFiles();\n-        for (int i=0; i<files.length; i++){\n-            final File file = files[i];\n+        for (final File file : files) {\n             if (file.getName().endsWith(\".txt\")){\n                 continue;\n             }\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java\n \n             // these are the entries that are supposed to be processed\n             // correctly without any problems\n-            for (int i = 0; i < ENTRIES.length; i++) {\n-                assertEquals(ENTRIES[i], zi.getNextEntry().getName());\n+            for (String element : ENTRIES) {\n+                assertEquals(element, zi.getNextEntry().getName());\n             }\n \n             // this is the last entry that is truncated", "timestamp": 1333286343, "metainfo": ""}