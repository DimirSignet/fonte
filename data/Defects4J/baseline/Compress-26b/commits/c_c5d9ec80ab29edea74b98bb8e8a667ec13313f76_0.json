{"sha": "c5d9ec80ab29edea74b98bb8e8a667ec13313f76", "log": "defer creation of output stream until data is written in order to keep empty streams empty - LZMA2 writes dictionary information, for example  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n     public void putArchiveEntry(final ArchiveEntry archiveEntry) throws IOException {\n         final SevenZArchiveEntry entry = (SevenZArchiveEntry) archiveEntry;\n         files.add(entry);\n-        currentOutputStream = setupFileOutputStream();\n     }\n     \n     /**\n      * @throws IOException\n      */\n     public void closeArchiveEntry() throws IOException {\n-        currentOutputStream.flush();\n-        currentOutputStream.close();\n+        if (currentOutputStream != null) {\n+            currentOutputStream.flush();\n+            currentOutputStream.close();\n+        }\n \n         final SevenZArchiveEntry entry = files.get(files.size() - 1);\n         if (fileBytesWritten > 0) {\n             entry.setCompressedSize(0);\n             entry.setHasCrc(false);\n         }\n+        currentOutputStream = null;\n         crc32.reset();\n         compressedCrc32.reset();\n         fileBytesWritten = 0;\n      * @throws IOException on error\n      */\n     public void write(final int b) throws IOException {\n-        currentOutputStream.write(b);\n+        getCurrentOutputStream().write(b);\n     }\n     \n     /**\n      * @throws IOException on error\n      */\n     public void write(final byte[] b) throws IOException {\n-        currentOutputStream.write(b);\n+        getCurrentOutputStream().write(b);\n     }\n     \n     /**\n      * @throws IOException on error\n      */\n     public void write(final byte[] b, final int off, final int len) throws IOException {\n-        currentOutputStream.write(b, off, len);\n+        getCurrentOutputStream().write(b, off, len);\n     }\n     \n     /**\n         file.write(startHeaderBytes);\n     }\n     \n+    /*\n+     * Creation of output stream is deferred until data is actually\n+     * written as some codecs might write header information even for\n+     * empty streams and directories otherwise.\n+     */\n+    private OutputStream getCurrentOutputStream() throws IOException {\n+        if (currentOutputStream == null) {\n+            currentOutputStream = setupFileOutputStream();\n+        }\n+        return currentOutputStream;\n+    }\n+\n     private CountingOutputStream setupFileOutputStream() throws IOException {\n         OutputStream out = new OutputStreamWrapper();\n         return new CountingOutputStream(Coders\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package org.apache.commons.compress.archivers.sevenz;\n+\n+import java.io.File;\n+import java.util.Calendar;\n+import java.util.Date;\n+import org.apache.commons.compress.AbstractTestCase;\n+\n+public class SevenZOutputFileTest extends AbstractTestCase {\n+\n+    private File output;\n+\n+    public void tearDown() throws Exception {\n+        if (output != null && !output.delete()) {\n+            output.deleteOnExit();\n+        }\n+    }\n+\n+    public void testDirectoriesAndEmptyFiles() throws Exception {\n+        File output = new File(dir, \"empties.7z\");\n+\n+        Date accessDate = new Date();\n+        Calendar cal = Calendar.getInstance();\n+        cal.add(Calendar.HOUR, -1);\n+        Date creationDate = cal.getTime();\n+\n+        SevenZOutputFile outArchive = new SevenZOutputFile(output);\n+        try {\n+            SevenZArchiveEntry entry = outArchive.createArchiveEntry(dir, \"foo/\");\n+            outArchive.putArchiveEntry(entry);\n+            outArchive.closeArchiveEntry();\n+\n+            entry = new SevenZArchiveEntry();\n+            entry.setName(\"foo/bar\");\n+            entry.setCreationDate(creationDate);\n+            entry.setAccessDate(accessDate);\n+            outArchive.putArchiveEntry(entry);\n+            outArchive.write(new byte[0]);\n+            outArchive.closeArchiveEntry();\n+\n+            entry = new SevenZArchiveEntry();\n+            entry.setName(\"xyzzy\");\n+            outArchive.putArchiveEntry(entry);\n+            outArchive.write(0);\n+            outArchive.closeArchiveEntry();\n+\n+            entry = outArchive.createArchiveEntry(dir, \"baz/\");\n+            entry.setAntiItem(true);\n+            outArchive.putArchiveEntry(entry);\n+            outArchive.closeArchiveEntry();\n+\n+            entry = new SevenZArchiveEntry();\n+            entry.setName(\"dada\");\n+            outArchive.putArchiveEntry(entry);\n+            outArchive.write(5);\n+            outArchive.closeArchiveEntry();\n+\n+            outArchive.finish();\n+        } finally {\n+            outArchive.close();\n+        }\n+\n+        final SevenZFile archive = new SevenZFile(output);\n+        try {\n+            SevenZArchiveEntry entry = archive.getNextEntry();\n+            assert(entry != null);\n+            assertEquals(\"foo/\", entry.getName());\n+            assertTrue(entry.isDirectory());\n+            assertFalse(entry.isAntiItem());\n+\n+            entry = archive.getNextEntry();\n+            assert(entry != null);\n+            assertEquals(\"foo/bar\", entry.getName());\n+            assertFalse(entry.isDirectory());\n+            assertFalse(entry.isAntiItem());\n+            assertEquals(0, entry.getSize());\n+            assertFalse(entry.getHasLastModifiedDate());\n+            assertEquals(accessDate, entry.getAccessDate());\n+            assertEquals(creationDate, entry.getCreationDate());\n+\n+            entry = archive.getNextEntry();\n+            assert(entry != null);\n+            assertEquals(\"xyzzy\", entry.getName());\n+            assertEquals(1, entry.getSize());\n+            assertFalse(entry.getHasAccessDate());\n+            assertFalse(entry.getHasCreationDate());\n+            assertEquals(0, archive.read());\n+\n+            entry = archive.getNextEntry();\n+            assert(entry != null);\n+            assertEquals(\"baz/\", entry.getName());\n+            assertTrue(entry.isDirectory());\n+            assertTrue(entry.isAntiItem());\n+\n+            entry = archive.getNextEntry();\n+            assert(entry != null);\n+            assertEquals(\"dada\", entry.getName());\n+            assertEquals(1, entry.getSize());\n+            assertEquals(5, archive.read());\n+\n+            assert(archive.getNextEntry() == null);\n+        } finally {\n+            archive.close();\n+        }\n+\n+    }\n+\n+}", "timestamp": 1382370360, "metainfo": ""}