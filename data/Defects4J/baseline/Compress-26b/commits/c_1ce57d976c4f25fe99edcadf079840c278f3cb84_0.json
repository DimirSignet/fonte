{"sha": "1ce57d976c4f25fe99edcadf079840c278f3cb84", "log": "Add a few comments as earmarks for myself, I think this is what the code does.  Two 'final's thrown in for good measure  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n \n     private int blockCRC;\n     private int combinedCRC;\n-    private int allowableBlockSize;\n+    private final int allowableBlockSize;\n \n     /**\n      * All memory intensive stuff.\n         }\n \n         this.blockSize100k = blockSize;\n+        /* 20 is just a paranoia constant */\n+        this.allowableBlockSize = (this.blockSize100k * BZip2Constants.BASEBLOCKSIZE) - 20;\n         this.out = out;\n         init();\n     }\n         }\n     }\n \n+    /**\n+     * Writes the current byte to the buffer, run-length encoding it\n+     * if it has been repeated at least four times (the first step\n+     * RLEs sequences of four identical bytes).\n+     *\n+     * <p>Flushes the current block before writing data if it is\n+     * full.</p>\n+     *\n+     * <p>\"write to the buffer\" means adding to data.buffer starting\n+     * two steps \"after\" this.last - initially starting at index 1\n+     * (not 0) - and updating this.last to point to the last index\n+     * written minus 1.</p>\n+     */\n     private void writeRun() throws IOException {\n         final int lastShadow = this.last;\n \n         for (int i = 256; --i >= 0;) {\n             inUse[i] = false;\n         }\n-\n-        /* 20 is just a paranoia constant */\n-        this.allowableBlockSize = (this.blockSize100k * BZip2Constants.BASEBLOCKSIZE) - 20;\n     }\n \n     private void endBlock() throws IOException {\n         }\n     }\n \n+    /**\n+     * Keeps track of the last bytes written and implicitly performs\n+     * run-length encoding as the first step of the bzip2 algorithm.\n+     */\n     private void write0(int b) throws IOException {\n         if (this.currentChar != -1) {\n             b &= 0xff;\n         return blockSorter.blockSort(data, last);\n     }\n \n+    /*\n+     * Performs Move-To-Front on the Burrows-Wheeler transformed\n+     * buffer, storing the MTFed data in data.sfmap in RUNA/RUNB\n+     * run-length-encoded form.\n+     *\n+     * <p>Keeps track of byte frequencies in data.mtfFreq at the same time.</p>\n+     */\n     private void generateMTFValues() {\n         final int lastShadow = this.last;\n         final Data dataShadow = this.data;\n     static final class Data extends Object {\n \n         // with blockSize 900k\n+        /* maps unsigned byte => \"does it occur in block\" */\n         final boolean[] inUse = new boolean[256]; // 256 byte\n         final byte[] unseqToSeq = new byte[256]; // 256 byte\n         final int[] mtfFreq = new int[MAX_ALPHA_SIZE]; // 1032 byte\n         // ------------\n         // 333408 byte\n \n+        /* holds the RLEd block of original data starting at index 1.\n+         * After sorting the last byte added to the buffer is at index\n+         * 0. */\n         final byte[] block; // 900021 byte\n+        /* maps index in Burrows-Wheeler transformed block => index of\n+         * byte in original block */\n         final int[] fmap; // 3600000 byte\n         final char[] sfmap; // 3600000 byte\n         // ------------\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java\n package org.apache.commons.compress.compressors.bzip2;\n \n /**\n- * Encapsulates the sorting algorithms needed by {@link BZip2CompressorOutputStream}.\n+ * Encapsulates the Burrows-Wheeler sorting algorithm needed by {@link\n+ * BZip2CompressorOutputStream}.\n  *\n  * @NotThreadSafe\n  */\n             mainSort(data, last);\n         }\n \n-        int[] fmap = data.fmap;\n+        final int[] fmap = data.fmap;\n         data.origPtr = -1;\n         for (int i = 0; i <= last; i++) {\n             if (fmap[i] == 0) {", "timestamp": 1336061258, "metainfo": ""}