{"sha": "0825d695cf80277e2d5a5f3af01011db51be9855", "log": "additional roundtrip test for extended timestamp field  ", "commit": "\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java\n  */\n package org.apache.commons.compress.archivers.zip;\n \n+import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n \n import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n import java.text.SimpleDateFormat;\n import java.util.Arrays;\n import java.util.Calendar;\n import java.util.zip.ZipException;\n \n import static org.apache.commons.compress.AbstractTestCase.getFile;\n+import static org.apache.commons.compress.AbstractTestCase.mkdir;\n+import static org.apache.commons.compress.AbstractTestCase.rmdir;\n import static org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.ACCESS_TIME_BIT;\n import static org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.CREATE_TIME_BIT;\n import static org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.MODIFY_TIME_BIT;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n      */\n     private X5455_ExtendedTimestamp xf;\n \n+    private File tmpDir;\n+\n     @Before\n     public void before() {\n         xf = new X5455_ExtendedTimestamp();\n+    }\n+\n+    @After\n+    public void removeTempFiles() {\n+        if (tmpDir != null) {\n+            rmdir(tmpDir);\n+        }\n     }\n \n     @Test\n         parseReparse((byte) -1, MAX_TIME_SECONDS, (byte) 7, MOD_AC_CR_MAX, MOD_MAX);\n     }\n \n+    @Test\n+    public void testWriteReadRoundtrip() throws IOException {\n+        tmpDir = mkdir(\"X5455\");\n+        File output = new File(tmpDir, \"write_rewrite.zip\");\n+        final OutputStream out = new FileOutputStream(output);\n+        Date d = new Date(97, 8, 24, 15, 10, 2);\n+        ZipArchiveOutputStream os = null;\n+        try {\n+            os = new ZipArchiveOutputStream(out);\n+            ZipArchiveEntry ze = new ZipArchiveEntry(\"foo\");\n+            xf.setModifyJavaTime(d);\n+            xf.setFlags((byte) 1);\n+            ze.addExtraField(xf);\n+            os.putArchiveEntry(ze);\n+            os.closeArchiveEntry();\n+        } finally {\n+            if (os != null) {\n+                os.close();\n+            }\n+        }\n+        out.close();\n+        \n+        ZipFile zf = new ZipFile(output);\n+        ZipArchiveEntry ze = zf.getEntry(\"foo\");\n+        X5455_ExtendedTimestamp ext =\n+            (X5455_ExtendedTimestamp) ze.getExtraField(X5455);\n+        assertNotNull(ext);\n+        assertTrue(ext.isBit0_modifyTimePresent());\n+        assertEquals(d, ext.getModifyJavaTime());\n+        zf.close();\n+    }\n+\n     private void parseReparse(\n             final ZipLong time,\n             final byte[] expectedLocal,", "timestamp": 1383564196, "metainfo": ""}