{"sha": "7a76c479371ef20f604eb1f1f2fca9f1b2b8f74a", "log": "'our' skip method will not return early.  COMPRESS-130  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n         }\n     }\n \n+    /**\n+     * Skips over and discards value bytes of data from this input\n+     * stream.\n+     *\n+     * <p>This implementation may end up skipping over some smaller\n+     * number of bytes, possibly 0, if an only if it reaches the end\n+     * of the underlying stream.</p>\n+     *\n+     * <p>The actual number of bytes skipped is returned.</p>\n+     *\n+     * @param value the number of bytes to be skipped.\n+     * @return the actual number of bytes skipped.\n+     * @throws IOException - if an I/O error occurs.\n+     * @throws IllegalArgumentException - if value is negative.\n+     */\n     public long skip(long value) throws IOException {\n         if (value >= 0) {\n             long skipped = 0;\n             byte[] b = new byte[1024];\n-            while (skipped != value) {\n+            while (skipped < value) {\n                 long rem = value - skipped;\n                 int x = read(b, 0, (int) (b.length > rem ? rem : b.length));\n                 if (x == -1) {", "timestamp": 1311173750, "metainfo": ""}