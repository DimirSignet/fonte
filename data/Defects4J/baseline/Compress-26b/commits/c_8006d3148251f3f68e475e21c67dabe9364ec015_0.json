{"sha": "8006d3148251f3f68e475e21c67dabe9364ec015", "log": "Javadoc tidyup  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java\n              0, 0, DEFAULT_MODE, inputFile.lastModified() / 1000);\n     }\n \n+    /** {@inheritDoc} */\n     public long getSize() {\n         return this.getLength();\n     }\n \n+    /** {@inheritDoc} */\n     public String getName() {\n         return name;\n     }\n         return length;\n     }\n \n+    /** {@inheritDoc} */\n     public boolean isDirectory() {\n         return false;\n     }\n \n-    /* (non-Javadoc)\n-     * @see java.lang.Object#hashCode()\n-     */\n+    /** {@inheritDoc} */\n     public int hashCode() {\n         final int prime = 31;\n         int result = 1;\n         return result;\n     }\n \n-    /* (non-Javadoc)\n-     * @see java.lang.Object#equals(java.lang.Object)\n-     */\n+    /** {@inheritDoc} */\n     public boolean equals(Object obj) {\n         if (this == obj) {\n             return true;\n--- a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\n         return header.length;\n     }\n \n+    /** {@inheritDoc} */\n     public void closeArchiveEntry() throws IOException {\n         if(finished) {\n             throw new IOException(\"Stream has already been finished\");\n         haveUnclosedEntry = false;\n     }\n \n+    /** {@inheritDoc} */\n     public void putArchiveEntry( final ArchiveEntry pEntry ) throws IOException {\n         if(finished) {\n             throw new IOException(\"Stream has already been finished\");\n         entryOffset += len;\n     }\n \n+    /**\n+     * Calls finish if necessary, and then closes the OutputStream\n+     */\n     public void close() throws IOException {\n         if(!finished) {\n             finish();\n         prevEntry = null;\n     }\n \n+    /** {@inheritDoc} */\n     public ArchiveEntry createArchiveEntry(File inputFile, String entryName)\n             throws IOException {\n         if(finished) {\n         return new ArArchiveEntry(inputFile, entryName);\n     }\n \n-    /* (non-Javadoc)\n-     * @see org.apache.commons.compress.archivers.ArchiveOutputStream#finish()\n-     */\n+    /** {@inheritDoc} */\n     public void finish() throws IOException {\n         if(haveUnclosedEntry) {\n             throw new IOException(\"This archive contains unclosed entries.\");\n--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java\n         return total;\n     }\n \n+    /** {@inheritDoc} */\n     public ArchiveEntry getNextEntry() throws IOException {\n         return getNextCPIOEntry();\n     }\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n         out.flush();\n     }\n \n+    /** {@inheritDoc} */\n     public ArchiveEntry createArchiveEntry(File inputFile, String entryName)\n             throws IOException {\n         if(finished) {\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java\n         data = null;\n     }\n \n+    /** {@inheritDoc} */\n     public byte[] getCentralDirectoryData() {\n         if (data == null) {\n             this.assembleData();\n         return data;\n     }\n \n+    /** {@inheritDoc} */\n     public ZipShort getCentralDirectoryLength() {\n         if (data == null) {\n             assembleData();\n         return new ZipShort(data.length);\n     }\n \n+    /** {@inheritDoc} */\n     public byte[] getLocalFileDataData() {\n         return getCentralDirectoryData();\n     }\n \n+    /** {@inheritDoc} */\n     public ZipShort getLocalFileDataLength() {\n         return getCentralDirectoryLength();\n     }\n \n+    /** {@inheritDoc} */\n     public void parseFromLocalFileData(byte[] buffer, int offset, int length)\n         throws ZipException {\n \n--- a/src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java\n         super(comment, bytes);\n     }\n \n+    /** {@inheritDoc} */\n     public ZipShort getHeaderId() {\n         return UCOM_ID;\n     }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java\n         super(name, bytes);\n     }\n \n+    /** {@inheritDoc} */\n     public ZipShort getHeaderId() {\n         return UPATH_ID;\n     }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n         return current;\n     }\n \n+    /** {@inheritDoc} */\n     public ArchiveEntry getNextEntry() throws IOException {\n         return getNextZipEntry();\n     }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n         fallbackToUTF8 = b;\n     }\n \n-    /* (non-Javadoc)\n-     * @see org.apache.commons.compress.archivers.ArchiveOutputStream#finish()\n-     */\n+    /** {@inheritDoc} */\n     public void finish() throws IOException {\n         if (finished) {\n             throw new IOException(\"This archive has already been finished\");\n         entry = null;\n     }\n \n-    /** {@inheritDoc} */\n- // @throws ClassCastException if entry is not an instance of ZipArchiveEntry\n+    /**\n+     * {@inheritDoc} \n+     * @throws ClassCastException if entry is not an instance of ZipArchiveEntry\n+     */\n     public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {\n         if (finished) {\n             throw new IOException(\"Stream has already been finished\");\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java\n         init();\n     }\n \n-    /*\n-     * (non-Javadoc)\n-     * \n-     * @see java.io.InputStream#read()\n-     */\n+    /** {@inheritDoc} */\n     public int read() throws IOException {\n         if (this.in != null) {\n             return read0();\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n         init();\n     }\n \n+    /** {@inheritDoc} */\n     public void write(final int b) throws IOException {\n         if (this.out != null) {\n             write0(b);\n--- a/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java\n         in = new GZIPInputStream(inputStream);\n     }\n \n-    /* (non-Javadoc)\n-     * @see java.io.InputStream#read()\n-     */\n+    /** {@inheritDoc} */\n     public int read() throws IOException {\n         int read = in.read();\n         this.count(read < 0 ? -1 : 1);\n--- a/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java\n         out = new GZIPOutputStream(outputStream);\n     }\n \n+    /** {@inheritDoc} */\n     public void write(int b) throws IOException {\n         out.write(b);\n     }", "timestamp": 1273688299, "metainfo": ""}