{"sha": "34aa15562a5853e333b7228f4c4625f7c3286159", "log": "free resources in tests more aggressivly  ", "commit": "\n--- a/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n     }\n \n     protected void tearDown() throws Exception {\n+        String[] f = dir.list();\n+        if (f != null) {\n+            for (int i = 0; i < f.length; i++) {\n+                new File(dir, f[i]).delete();\n+            }\n+        }\n         dir.delete();\n         dir = null;\n     }\n      */\n     protected File createArchive(String archivename) throws Exception {\n         ArchiveOutputStream out = null;\n+        OutputStream stream = null;\n         try {\n             File temp = File.createTempFile(\"test\", \".\" + archivename);\n \n-            final OutputStream stream = new FileOutputStream(temp);\n+            stream = new FileOutputStream(temp);\n             out = new ArchiveStreamFactory().createArchiveOutputStream(\n                     archivename, stream);\n \n \n             return temp;\n         } finally {\n-            if (out != null)\n+            if (out != null) {\n                 out.close();\n+            } else if (stream != null) {\n+                stream.close();\n+            }\n         }\n     }\n \n     protected void checkArchiveContent(File archive, List expected)\n             throws Exception {\n         final InputStream is = new FileInputStream(archive);\n-        final BufferedInputStream buf = new BufferedInputStream(is);\n-        final ArchiveInputStream in = new ArchiveStreamFactory()\n+        try {\n+            final BufferedInputStream buf = new BufferedInputStream(is);\n+            final ArchiveInputStream in = new ArchiveStreamFactory()\n                 .createArchiveInputStream(buf);\n-        this.checkArchiveContent(in, expected);\n+            this.checkArchiveContent(in, expected);\n+        } finally {\n+            is.close();\n+        }\n     }\n \n     protected void checkArchiveContent(ArchiveInputStream in, List expected)\n                     + entry.getName());\n             outfile.getParentFile().mkdirs();\n             OutputStream out = new FileOutputStream(outfile);\n-            IOUtils.copy(in, out);\n-            out.close();\n+            try {\n+                IOUtils.copy(in, out);\n+            } finally {\n+                out.close();\n+            }\n \n             if (!outfile.exists()) {\n                 fail(\"extraction failed: \" + entry.getName());", "timestamp": 1238077063, "metainfo": ""}