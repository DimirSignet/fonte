{"sha": "fef6bcac12200b757cd5afee0ab07112fe9c30f8", "log": "keep options <=> properties translations in a single place, the Codec  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n     \n     static abstract class CoderBase {\n         private final Class<?>[] acceptableOptions;\n+        private static final byte[] NONE = new byte[0];\n \n         protected CoderBase(Class<?>... acceptableOptions) {\n             this.acceptableOptions = acceptableOptions;\n                 }\n             }\n             return false;\n+        }\n+\n+        /**\n+         * @return property-bytes to write in a Folder block\n+         */\n+        byte[] getOptionsAsProperties(Object options) {\n+            return NONE;\n         }\n \n         abstract InputStream decode(final InputStream in, final Coder coder,\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java\n         return options.getOutputStream(wrapped);\n     }\n \n+    @Override\n+    byte[] getOptionsAsProperties(Object opts) {\n+        int dictSize = getDictSize(opts);\n+        int lead = Integer.numberOfLeadingZeros(dictSize);\n+        int secondBit = (dictSize >>> (30 - lead)) - 2;\n+        return new byte[] {\n+            (byte) ((19 - lead) * 2 + secondBit)\n+        };\n+    }\n+\n+    private int getDictSize(Object opts) {\n+        if (opts instanceof LZMA2Options) {\n+            return ((LZMA2Options) opts).getDictSize();\n+        }\n+        return LZMA2Options.DICT_SIZE_DEFAULT;\n+    }\n+\n     private LZMA2Options getOptions(Object opts) throws IOException {\n         if (opts instanceof LZMA2Options) {\n             return (LZMA2Options) opts;\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java\n  */\n package org.apache.commons.compress.archivers.sevenz;\n \n-import org.tukaani.xz.LZMA2Options;\n-\n /**\n  * The (partially) supported compression/encryption methods used in 7z archives.\n  */\n     /** LZMA - only supported when reading */\n     LZMA(new byte[] { (byte)0x03, (byte)0x01, (byte)0x01 }),\n     /** LZMA2 */\n-    LZMA2(new byte[] { (byte)0x21 }) {\n-        @Override\n-        byte[] getProperties(Object opts) {\n-            int dictSize = getDictSize(opts);\n-            int lead = Integer.numberOfLeadingZeros(dictSize);\n-            int secondBit = (dictSize >>> (30 - lead)) - 2;\n-            return new byte[] {\n-                (byte) ((19 - lead) * 2 + secondBit)\n-            };\n-        }\n-        private int getDictSize(Object opts) {\n-            if (opts instanceof LZMA2Options) {\n-                return ((LZMA2Options) opts).getDictSize();\n-            }\n-            return LZMA2Options.DICT_SIZE_DEFAULT;\n-        }\n-    },\n+    LZMA2(new byte[] { (byte)0x21 }),\n     /** Deflate */\n     DEFLATE(new byte[] { (byte)0x04, (byte)0x01, (byte)0x08 }),\n     /** BZIP2 */\n         return copy;\n     }\n \n-    /**\n-     * @param opts options requested for the given entry\n-     */\n-    byte[] getProperties(Object opts) {\n-        return new byte[0];\n-    }\n-\n }\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n \n     private void writeSingleCodec(SevenZMethodConfiguration m, OutputStream bos) throws IOException {\n         byte[] id = m.getMethod().getId();\n-        byte[] properties = m.getMethod().getProperties(m.getOptions());\n+        byte[] properties = Coders.findByMethod(m.getMethod())\n+            .getOptionsAsProperties(m.getOptions());\n \n         int codecFlags = id.length;\n         if (properties.length > 0) {", "timestamp": 1393240556, "metainfo": ""}