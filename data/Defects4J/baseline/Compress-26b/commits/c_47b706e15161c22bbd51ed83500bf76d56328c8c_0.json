{"sha": "47b706e15161c22bbd51ed83500bf76d56328c8c", "log": "Add a BZip2Utils class matching GZipUtils.  Submitted by Jukka Zitting.  COMPRESS-78  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.compressors.bzip2;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Utility code for the BZip2 compression format.\n+ * @ThreadSafe\n+ * @since Commons Compress 1.1\n+ */\n+public abstract class BZip2Utils {\n+\n+    /**\n+     * Map from common filename suffixes of bzip2ed files to the corresponding\n+     * suffixes of uncompressed files. For example: from \".tbz2\" to \".tar\".\n+     * <p>\n+     * This map also contains bzip2-specific suffixes like \".bz2\". These\n+     * suffixes are mapped to the empty string, as they should simply be\n+     * removed from the filename when the file is uncompressed.\n+     */\n+    private static final Map uncompressSuffix = new HashMap();\n+\n+    static {\n+        uncompressSuffix.put(\".tbz2\", \".tar\");\n+        uncompressSuffix.put(\".tbz\", \".tar\");\n+        uncompressSuffix.put(\".bz2\", \"\");\n+        uncompressSuffix.put(\".bz\", \"\");\n+    }\n+    // N.B. if any shorter or longer keys are added, ensure the for loop limits are changed\n+\n+    /** Private constructor to prevent instantiation of this utility class. */\n+    private BZip2Utils() {\n+    }\n+\n+    /**\n+     * Detects common bzip2 suffixes in the given filename.\n+     *\n+     * @param filename name of a file\n+     * @return <code>true</code> if the filename has a common bzip2 suffix,\n+     *         <code>false</code> otherwise\n+     */\n+    public static boolean isCompressedFilename(String filename) {\n+        String lower = filename.toLowerCase();\n+        int n = lower.length();\n+        // Shortest suffix is three letters (.bz), longest is five (.tbz2)\n+        for (int i = 3; i <= 5 && i < n; i++) {\n+            if (uncompressSuffix.containsKey(lower.substring(n - i))) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Maps the given name of a bzip2-compressed file to the name that the\n+     * file should have after uncompression. Commonly used file type specific\n+     * suffixes like \".tbz\" or \".tbz2\" are automatically detected and\n+     * correctly mapped. For example the name \"package.tbz2\" is mapped to\n+     * \"package.tar\". And any filenames with the generic \".bz2\" suffix\n+     * (or any other generic bzip2 suffix) is mapped to a name without that\n+     * suffix. If no bzip2 suffix is detected, then the filename is returned\n+     * unmapped.\n+     *\n+     * @param filename name of a file\n+     * @return name of the corresponding uncompressed file\n+     */\n+    public static String getUncompressedFilename(String filename) {\n+        String lower = filename.toLowerCase();\n+        int n = lower.length();\n+        // Shortest suffix is three letters (.bz), longest is five (.tbz2)\n+        for (int i = 3; i <= 5 && i < n; i++) {\n+            Object suffix = uncompressSuffix.get(lower.substring(n - i));\n+            if (suffix != null) {\n+                return filename.substring(0, n - i) + suffix;\n+            }\n+        }\n+        return filename;\n+    }\n+\n+    /**\n+     * Maps the given filename to the name that the file should have after\n+     * compression with bzip2. Currently this method simply appends the suffix\n+     * \".bz2\" to the filename based on the standard behaviour of the \"bzip2\"\n+     * program, but a future version may implement a more complex mapping if\n+     * a new widely used naming pattern emerges.\n+     *\n+     * @param filename name of a file\n+     * @return name of the corresponding compressed file\n+     */\n+    public static String getCompressedFilename(String filename) {\n+        return filename + \".bz2\";\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/compressors/BZip2UtilsTestCase.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.compressors;\n+\n+import org.apache.commons.compress.compressors.bzip2.BZip2Utils;\n+\n+import junit.framework.TestCase;\n+\n+public class BZip2UtilsTestCase extends TestCase {\n+\n+    public void testIsCompressedFilename() {\n+        assertFalse(BZip2Utils.isCompressedFilename(\"\"));\n+        assertFalse(BZip2Utils.isCompressedFilename(\".gz\"));\n+\n+        assertTrue(BZip2Utils.isCompressedFilename(\"x.tbz2\"));\n+        assertTrue(BZip2Utils.isCompressedFilename(\"x.tbz\"));\n+        assertTrue(BZip2Utils.isCompressedFilename(\"x.bz2\"));\n+        assertTrue(BZip2Utils.isCompressedFilename(\"x.bz\"));\n+\n+        assertFalse(BZip2Utils.isCompressedFilename(\"xbz2\"));\n+        assertFalse(BZip2Utils.isCompressedFilename(\"xbz\"));\n+\n+        assertTrue(BZip2Utils.isCompressedFilename(\"x.TBZ2\"));\n+        assertTrue(BZip2Utils.isCompressedFilename(\"x.Tbz2\"));\n+        assertTrue(BZip2Utils.isCompressedFilename(\"x.tbZ2\"));\n+\n+        assertFalse(BZip2Utils.isCompressedFilename(\"x.bz \"));\n+        assertFalse(BZip2Utils.isCompressedFilename(\"x.tbz\\n\"));\n+        assertFalse(BZip2Utils.isCompressedFilename(\"x.tbz2.y\"));\n+    }\n+\n+    public void testGetUncompressedFilename() {\n+        assertEquals(\"\", BZip2Utils.getUncompressedFilename(\"\"));\n+        assertEquals(\".bz2\", BZip2Utils.getUncompressedFilename(\".bz2\"));\n+\n+        assertEquals(\"x.tar\", BZip2Utils.getUncompressedFilename(\"x.tbz2\"));\n+        assertEquals(\"x.tar\", BZip2Utils.getUncompressedFilename(\"x.tbz\"));\n+        assertEquals(\"x\", BZip2Utils.getUncompressedFilename(\"x.bz2\"));\n+        assertEquals(\"x\", BZip2Utils.getUncompressedFilename(\"x.bz\"));\n+\n+        assertEquals(\"x.tar\", BZip2Utils.getUncompressedFilename(\"x.TBZ2\"));\n+        assertEquals(\"X.tar\", BZip2Utils.getUncompressedFilename(\"X.Tbz2\"));\n+        assertEquals(\"X.tar\", BZip2Utils.getUncompressedFilename(\"X.tbZ2\"));\n+\n+        assertEquals(\"x.bz \", BZip2Utils.getUncompressedFilename(\"x.bz \"));\n+        assertEquals(\"x.tbz\\n\", BZip2Utils.getUncompressedFilename(\"x.tbz\\n\"));\n+        assertEquals(\"x.tbz2.y\", BZip2Utils.getUncompressedFilename(\"x.tbz2.y\"));\n+    }\n+\n+    public void testGetCompressedFilename() {\n+        assertEquals(\".bz2\", BZip2Utils.getCompressedFilename(\"\"));\n+        assertEquals(\" .bz2\", BZip2Utils.getCompressedFilename(\" \"));\n+        assertEquals(\"x.bz2\", BZip2Utils.getCompressedFilename(\"x\"));\n+        assertEquals(\"X.bz2\", BZip2Utils.getCompressedFilename(\"X\"));\n+        assertEquals(\"x.tar.bz2\", BZip2Utils.getCompressedFilename(\"x.tar\"));\n+        assertEquals(\"x.TAR.bz2\", BZip2Utils.getCompressedFilename(\"x.TAR\"));\n+    }\n+\n+}", "timestamp": 1246350188, "metainfo": ""}