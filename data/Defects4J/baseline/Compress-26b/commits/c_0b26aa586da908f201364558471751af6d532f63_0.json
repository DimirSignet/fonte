{"sha": "0b26aa586da908f201364558471751af6d532f63", "log": "(mostly failing) testcase for dump stream.  COMPRESS-132  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.archivers;\n+\n+import java.io.BufferedInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.ArrayList;\n+\n+import org.apache.commons.compress.AbstractTestCase;\n+import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n+\n+public final class DumpTestCase extends AbstractTestCase {\n+\n+    public void testDumpUnarchiveAll() throws Exception {\n+        unarchiveAll(getFile(\"bla.dump\"));\n+    }\n+\n+    public void testCompressedDumpUnarchiveAll() throws Exception {\n+        unarchiveAll(getFile(\"bla.z.dump\"));\n+    }\n+\n+    private void unarchiveAll(final File input) throws Exception {\n+        final InputStream is = new FileInputStream(input);\n+        ArchiveInputStream in = null;\n+        OutputStream out = null;\n+        try {\n+            in = new ArchiveStreamFactory()\n+                .createArchiveInputStream(\"dump\", is);\n+\n+            ArchiveEntry entry = in.getNextEntry();\n+            while (entry != null) {\n+                File archiveEntry = new File(dir, entry.getName());\n+                archiveEntry.getParentFile().mkdirs();\n+                if (entry.isDirectory()) {\n+                    archiveEntry.mkdir();\n+                    entry = in.getNextEntry();\n+                    continue;\n+                }\n+                out = new FileOutputStream(archiveEntry);\n+                IOUtils.copy(in, out);\n+                out.close();\n+                out = null;\n+                entry = in.getNextEntry();\n+            }\n+        } finally {\n+            if (out != null) {\n+                out.close();\n+            }\n+            if (in != null) {\n+                in.close();\n+            }\n+            is.close();\n+        }\n+    }\n+\n+    public void YtestArchiveDetection() throws Exception {\n+        archiveDetection(getFile(\"bla.dump\"));\n+    }\n+\n+    public void YtestCompressedArchiveDetection() throws Exception {\n+        archiveDetection(getFile(\"bla.z.dump\"));\n+    }\n+\n+    private void archiveDetection(final File f) throws Exception {\n+        final InputStream is = new FileInputStream(f);\n+        try {\n+            assertEquals(DumpArchiveInputStream.class,\n+                         new ArchiveStreamFactory()\n+                         .createArchiveInputStream(new BufferedInputStream(is))\n+                         .getClass());\n+        } finally {\n+            is.close();\n+        }\n+    }\n+\n+    public void XtestCheckArchive() throws Exception {\n+        checkDumpArchive(getFile(\"bla.dump\"));\n+    }\n+\n+    public void XtestCheckCompressedArchive() throws Exception {\n+        checkDumpArchive(getFile(\"bla.z.dump\"));\n+    }\n+\n+    private void checkDumpArchive(final File f) throws Exception {\n+        ArrayList<String> expected = new ArrayList<String>();\n+        expected.add(\".\");\n+        expected.add(\"./lost+found\");\n+        expected.add(\"./test1.xml\");\n+        expected.add(\"./test2.xml\");\n+        final InputStream is = new FileInputStream(f);\n+        try {\n+            checkArchiveContent(new DumpArchiveInputStream(is),\n+                                expected);\n+        } finally {\n+            is.close();\n+        }\n+    }\n+}", "timestamp": 1313552708, "metainfo": ""}