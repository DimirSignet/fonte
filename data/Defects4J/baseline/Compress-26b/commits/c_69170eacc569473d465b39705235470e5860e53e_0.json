{"sha": "69170eacc569473d465b39705235470e5860e53e", "log": "Remove unnecessary casts  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n      */\n     public int read() throws IOException {\n         int num = read(oneBuf, 0, 1);\n-        return num == -1 ? -1 : ((int) oneBuf[0]) & BYTE_MASK;\n+        return num == -1 ? -1 : oneBuf[0] & BYTE_MASK;\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java\n         }\n \n         public String toString() {\n-            return \"0x\" + Integer.toHexString(0xffff & (int) unicode)\n-                + \"->0x\" + Integer.toHexString(0xff & (int) code);\n+            return \"0x\" + Integer.toHexString(0xffff & unicode)\n+                + \"->0x\" + Integer.toHexString(0xff & code);\n         }\n     }\n \n         }\n \n         // byte is signed, so 128 == -128 and 255 == -1\n-        return this.highChars[128 + (int) b];\n+        return this.highChars[128 + b];\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n                     if (unLo > unHi) {\n                         break;\n                     }\n-                    n = ((int) block[zptr[unLo] + d + 1]) - med;\n+                    n = block[zptr[unLo] + d + 1] - med;\n                     if (n == 0) {\n                         int temp = 0;\n                         temp = zptr[unLo];\n                     if (unLo > unHi) {\n                         break;\n                     }\n-                    n = ((int) block[zptr[unHi] + d + 1]) - med;\n+                    n = block[zptr[unHi] + d + 1] - med;\n                     if (n == 0) {\n                         int temp = 0;\n                         temp = zptr[unHi];\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStreamTest.java\n     }\n \n     public void testAdjustToLong() {\n-        assertEquals((long) Integer.MAX_VALUE,\n+        assertEquals(Integer.MAX_VALUE,\n                      ZipArchiveOutputStream.adjustToLong(Integer.MAX_VALUE));\n         assertEquals(((long) Integer.MAX_VALUE) + 1,\n                      ZipArchiveOutputStream.adjustToLong(Integer.MAX_VALUE + 1));", "timestamp": 1236126282, "metainfo": ""}