{"sha": "86531d86061d4c4b18075108f69a2bf94ee4eae6", "log": "add an enum for 7z compression methods, early preparations for compressed write support  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n     static InputStream addDecoder(final InputStream is,\n             final Coder coder, final String password) throws IOException {\n         for (final CoderId coderId : coderTable) {\n-            if (Arrays.equals(coderId.id, coder.decompressionMethodId)) {\n+            if (Arrays.equals(coderId.method.getId(), coder.decompressionMethodId)) {\n                 return coderId.coder.decode(is, coder, password);\n             }\n         }\n     }\n     \n     static CoderId[] coderTable = new CoderId[] {\n-        new CoderId(new byte[] { (byte)0x00 }, new CopyDecoder()),\n-        new CoderId(new byte[] { (byte)0x03, (byte)0x01, (byte)0x01 }, new LZMADecoder()),\n-        new CoderId(new byte[] { (byte)0x21 }, new LZMA2Decoder()),\n-        new CoderId(new byte[] { (byte)0x04, (byte)0x01, (byte)0x08 }, new DeflateDecoder()),\n-        new CoderId(new byte[] { (byte)0x04, (byte)0x02, (byte)0x02 }, new BZIP2Decoder()),\n-        new CoderId(new byte[] { (byte)0x06, (byte)0xf1, (byte)0x07, (byte)0x01 }, new AES256SHA256Decoder())\n+        new CoderId(SevenZMethod.COPY, new CopyDecoder()),\n+        new CoderId(SevenZMethod.LZMA, new LZMADecoder()),\n+        new CoderId(SevenZMethod.LZMA2, new LZMA2Decoder()),\n+        new CoderId(SevenZMethod.DEFLATE, new DeflateDecoder()),\n+        new CoderId(SevenZMethod.BZIP2, new BZIP2Decoder()),\n+        new CoderId(SevenZMethod.AES256SHA256, new AES256SHA256Decoder())\n     };\n     \n     static class CoderId {\n-        CoderId(final byte[] id, final CoderBase coder) {\n-            this.id = id;\n+        CoderId(SevenZMethod method, final CoderBase coder) {\n+            this.method = method;\n             this.coder = coder;\n         }\n \n-        final byte[] id;\n+        final SevenZMethod method;\n         final CoderBase coder;\n     }\n     \n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package org.apache.commons.compress.archivers.sevenz;\n+\n+/**\n+ * The (partially) supported compression/encryption methods used in 7z archives.\n+ */\n+public enum SevenZMethod {\n+    /** no compression at all */\n+    COPY(new byte[] { (byte)0x00 }),\n+    /** LZMA - only supported when reading */\n+    LZMA(new byte[] { (byte)0x03, (byte)0x01, (byte)0x01 }),\n+    /** LZMA2 - only supported when reading */\n+    LZMA2(new byte[] { (byte)0x21 }),\n+    /** Deflate - only supported when reading */\n+    DEFLATE(new byte[] { (byte)0x04, (byte)0x01, (byte)0x08 }),\n+    /** BZIP2 - only supported when reading */\n+    BZIP2(new byte[] { (byte)0x04, (byte)0x02, (byte)0x02 }),\n+    /**\n+     * AES encryption with a key length of 256 bit using SHA256 for\n+     * hashes - only supported when reading\n+     */\n+    AES256SHA256(new byte[] { (byte)0x06, (byte)0xf1, (byte)0x07, (byte)0x01 });\n+\n+    private final byte[] id;\n+\n+    private SevenZMethod(byte[] id) {\n+        this.id = id;\n+    }\n+\n+    byte[] getId() {\n+        byte[] copy = new byte[id.length];\n+        System.arraycopy(id, 0, copy, 0, id.length);\n+        return copy;\n+    }\n+\n+}", "timestamp": 1381479156, "metainfo": ""}