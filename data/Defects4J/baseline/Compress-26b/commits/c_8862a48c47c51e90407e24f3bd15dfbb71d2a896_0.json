{"sha": "8862a48c47c51e90407e24f3bd15dfbb71d2a896", "log": "Missing @Override  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Strategy.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Strategy.java\n public enum Pack200Strategy {\n     /** Cache output in memory */\n     IN_MEMORY() {\n+        @Override\n         StreamBridge newStreamBridge() {\n             return new InMemoryCachingStreamBridge();\n         }\n     },\n     /** Cache output in a temporary file */\n     TEMP_FILE() {\n+        @Override\n         StreamBridge newStreamBridge() throws IOException {\n             return new TempFileCachingStreamBridge();\n         }\n--- a/src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public int read() throws IOException {\n         int ret = in.read();\n         count(ret == -1 ? -1 : 1);\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public int read(byte[] buf, int off, int len) throws IOException {\n         int ret = in.read(buf, off, len);\n         count(ret);\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public long skip(long n) throws IOException {\n         return in.skip(n);\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public int available() throws IOException {\n         return in.available();\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public void close() throws IOException {\n         in.close();\n     }\n--- a/src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorOutputStream.java\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public void write(int b) throws IOException {\n         out.write(b);\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public void write(byte[] buf, int off, int len) throws IOException {\n         out.write(buf, off, len);\n     }\n      * the output stream. Calling this function very often may increase\n      * the compressed file size a lot.\n      */\n+    @Override\n     public void flush() throws IOException {\n         out.flush();\n     }\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public void close() throws IOException {\n         out.close();\n     }", "timestamp": 1320863160, "metainfo": ""}