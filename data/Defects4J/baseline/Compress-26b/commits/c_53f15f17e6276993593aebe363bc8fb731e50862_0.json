{"sha": "53f15f17e6276993593aebe363bc8fb731e50862", "log": "hard-code compressed sizes in tests so there is a baseline to test against when I stop using Deflater#getBytesWritten.  This assumes compressed sizes do not depend on platform or Java version, will verify the same later.  ", "commit": "\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java\n      *\n      * Creates a temporary archive of approx 4MB in size\n      */\n-    @Ignore\n     @Test public void writeBigDeflatedEntryKnownSizeToStream()\n         throws Throwable {\n         withTemporaryArchive(\"writeBigDeflatedEntryKnownSizeToStream\",\n                                                  // file name\n                                                  (byte) '0'\n                                              }, rest);\n-                                         byte[] extra = new byte[12];\n+                                         byte[] extra = new byte[20];\n                                          a.readFully(extra);\n                                          // 5e9 == 0x12A05F200\n                                          assertArrayEquals(new byte[] {\n                                                  // original size\n                                                  0, (byte) 0xF2, 5, (byte) 0x2A,\n                                                  1, 0, 0, 0,\n-                                                 // don't know the\n-                                                 // compressed size,\n-                                                 // don't want to\n-                                                 // hard-code it\n+                                                 // compressed size\n+                                                 (byte) 0x68, (byte) 0x27,\n+                                                 (byte) 0x4A, 0,\n+                                                 0, 0, 0, 0,\n                                              }, extra);\n \n                                          // validate data descriptor\n                                                  (byte) 0x50, (byte) 0x6F,\n                                                  (byte) 0x31, (byte) 0x5c,\n                                              }, dd);\n-                                         // skip uncompressed size\n-                                         a.skipBytes(8);\n-                                         dd = new byte[8];\n+                                         dd = new byte[16];\n                                          a.readFully(dd);\n                                          assertArrayEquals(new byte[] {\n+                                                 // compressed size\n+                                                 (byte) 0x68, (byte) 0x27,\n+                                                 (byte) 0x4A, 0,\n+                                                 0, 0, 0, 0,\n                                                  // original size\n                                                  0, (byte) 0xF2, 5, (byte) 0x2A,\n                                                  1, 0, 0, 0,\n                                                  16, 0,\n                                                  // original size\n                                                  0, 0, 0, 0,\n+                                                 0, 0, 0, 0,\n                                                  // compressed size\n+                                                 0, 0, 0, 0,\n                                                  0, 0, 0, 0,\n                                              }, extra);\n                                      } finally {\n                             // file name\n                             (byte) '0'\n                         }, rest);\n-                    byte[] extra = new byte[12];\n+                    byte[] extra = new byte[20];\n                     a.readFully(extra);\n                     // 5e9 == 0x12A05F200\n                     assertArrayEquals(new byte[] {\n                             // original size\n                             0, (byte) 0xF2, 5, (byte) 0x2A,\n                             1, 0, 0, 0,\n-                            // don't know the\n-                            // compressed size,\n-                            // don't want to\n-                            // hard-code it\n+                            // compressed size\n+                            (byte) 0x68, (byte) 0x27, (byte) 0x4A, 0,\n+                            0, 0, 0, 0,\n                         }, extra);\n \n                     // and now validate local file header\n                             // file name\n                             (byte) '0'\n                         }, rest);\n-                    extra = new byte[12];\n+                    extra = new byte[20];\n                     a.readFully(extra);\n                     assertArrayEquals(new byte[] {\n                             // Header-ID\n                             // original size\n                             0, (byte) 0xF2, 5, (byte) 0x2A,\n                             1, 0, 0, 0,\n-                            // don't know the\n-                            // compressed size,\n-                            // don't want to\n-                            // hard-code it\n+                            // compressed size\n+                            (byte) 0x68, (byte) 0x27, (byte) 0x4A, 0,\n+                            0, 0, 0, 0,\n                         }, extra);\n                 } finally {\n                     a.close();", "timestamp": 1312348411, "metainfo": ""}