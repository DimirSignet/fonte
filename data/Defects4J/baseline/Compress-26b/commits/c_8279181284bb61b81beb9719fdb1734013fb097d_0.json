{"sha": "8279181284bb61b81beb9719fdb1734013fb097d", "log": "FindBugs issues and comment a bunch of empty blocks  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java\n \n     @Override\n     public void close() {\n+        // the nested RandomAccessFile is controlled externally\n     }\n-}\n+}\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java\n     /// List of coders used in this folder, eg. one for compression, one for encryption.\n     Coder[] coders;\n     /// Total number of input streams across all coders.\n+    /// this field is currently unused but technically part of the 7z API\n     long totalInputStreams;\n     /// Total number of output streams across all coders.\n     long totalOutputStreams;\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n         this.file = new RandomAccessFile(filename, \"r\");\n         try {\n             archive = readHeaders(password);\n-            this.password = password;\n+            if (password != null) {\n+                this.password = new byte[password.length];\n+                System.arraycopy(password, 0, this.password, 0, password.length);\n+            } else {\n+                this.password = null;\n+            }\n             succeeded = true;\n         } finally {\n             if (!succeeded) {\n                 file.close();\n             } finally {\n                 file = null;\n+                if (password != null) {\n+                    Arrays.fill(password, (byte) 0);\n+                }\n                 password = null;\n             }\n         }\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n \n         @Override\n         public void flush() throws IOException {\n+            // no reason to flush a RandomAccessFile\n         }\n \n         @Override\n         public void close() throws IOException {\n+            // the file will be closed by the containing class's close method\n         }\n     }\n }", "timestamp": 1382331851, "metainfo": ""}