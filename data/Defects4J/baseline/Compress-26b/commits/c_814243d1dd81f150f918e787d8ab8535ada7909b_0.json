{"sha": "814243d1dd81f150f918e787d8ab8535ada7909b", "log": "applied a modified patch from Christian Grobmeier  add and delete support https://issues.apache.org/jira/browse/SANDBOX-183    ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/changes/Change.java\n+++ b/src/main/java/org/apache/commons/compress/changes/Change.java\n  */\n package org.apache.commons.compress.changes;\n \n+import java.io.InputStream;\n \n-interface Change {\n-\t// public void perform(ArchiveInputStream input);\n-\tpublic int type();\n+import org.apache.commons.compress.archivers.ArchiveEntry;\n+\n+\n+public class Change {\n+\tprivate String targetFile = null;\n+\tprivate ArchiveEntry entry = null;\n+\tprivate InputStream input = null;\n+\tprivate int type = 0;\n+\t\n+\tstatic final int TYPE_DELETE = 1;\n+\tstatic final int TYPE_ADD = 2;\n+\tstatic final int TYPE_MOVE = 3;\n+\t\n+\t/**\n+\t * Constructor. Takes the filename of the file to be deleted\n+\t * from the stream as argument.\n+\t * @param pFilename the filename of the file to delete\n+\t */\n+\tpublic Change(final String pFilename) {\n+\t\tif(pFilename == null) {\n+\t\t\tthrow new NullPointerException();\n+\t\t}\n+\t\ttargetFile = pFilename;\n+\t\ttype = TYPE_DELETE;\n+\t}\n+\t\n+//\tpublic Change(final String pOldname, final ArchiveEntry pEntry) {\n+//\t\tif(pOldname == null || pEntry == null) {\n+//\t\t\tthrow new NullPointerException();\n+//\t\t}\n+//\t\ttargetFile = pOldname;\n+//\t\tentry = pEntry;\n+//\t\ttype = TYPE_MOVE;\n+//\t}\n+\t\n+\tpublic Change(final ArchiveEntry pEntry, final InputStream pInput) {\n+\t\tif(pEntry == null || pInput == null) {\n+\t\t\tthrow new NullPointerException();\n+\t\t}\n+\t\tthis.entry = pEntry;\n+\t\tthis.input = pInput;\n+\t\ttype = TYPE_ADD;\n+\t}\n+\t\n+\tpublic ArchiveEntry getEntry() {\n+\t\treturn entry;\n+\t}\n+\n+\tpublic InputStream getInput() {\n+\t\treturn input;\n+\t}\n+\n+\tpublic String targetFile() {\n+\t\treturn targetFile;\n+\t}\n+\t\n+\tpublic int type() {\n+\t\treturn type;\n+\t}\n }\n--- a/src/main/java/org/apache/commons/compress/changes/ChangeSet.java\n+++ b/src/main/java/org/apache/commons/compress/changes/ChangeSet.java\n  */\n package org.apache.commons.compress.changes;\n \n+import java.io.IOException;\n import java.io.InputStream;\n+import java.util.Iterator;\n import java.util.LinkedHashSet;\n import java.util.Set;\n \n import org.apache.commons.compress.archivers.ArchiveEntry;\n+import org.apache.commons.compress.archivers.ArchiveInputStream;\n+import org.apache.commons.compress.archivers.ArchiveOutputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n \n \n public final class ChangeSet {\n \n \tprivate final Set changes = new LinkedHashSet();\n \t\n-\tpublic static final int CHANGE_TYPE_DELETE = 1;\n-\tpublic static final int CHANGE_TYPE_ADD = 2;\n-\t\n-\n \tpublic void delete( final String pFilename ) {\n-\t\tchanges.add(new DeleteChange(pFilename));\n+\t\tchanges.add(new Change(pFilename));\n \t}\n \n-\tpublic void move( final String pFrom, final String pTo ) {\n-\t}\n+//\tpublic void move( final String pFrom, final String pTo ) {\n+//\t\tchanges.add(new Change(pFrom, pTo));\n+//\t}\n \t\n \tpublic void add( final ArchiveEntry pEntry, final InputStream pInput) {\n+\t\tchanges.add(new Change(pEntry, pInput));\n \t}\n \t\n \tpublic Set asSet() {\n \t\treturn changes;\n \t}\n+\t\n+\tpublic void perform(ArchiveInputStream in, ArchiveOutputStream out) throws IOException {\n+\t\tArchiveEntry entry = null;\t\n+\t\twhile((entry = in.getNextEntry()) != null) {\n+\t\t\tboolean copy = true;\n+\t\t\t\n+\t\t\tfor (Iterator it = changes.iterator(); it.hasNext();) {\n+\t\t\t\tChange change = (Change)it.next();\n+\t\t\t\t\n+\t\t\t\tif(change.type() == Change.TYPE_ADD) {\n+\t\t\t\t\tcopyStream(change.getInput(), out, change.getEntry());\n+\t\t\t\t\tit.remove();\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tif( change.type() == Change.TYPE_DELETE &&\n+\t\t\t\t\tentry.getName() != null &&\n+\t\t\t\t\tentry.getName().equals(change.targetFile())) {\n+\t\t\t\t\tSystem.out.println(\"Delete: \" + entry.getName());\n+\t\t\t\t\tcopy = false;\n+\t\t\t\t\tit.remove();\n+\t\t\t\t\tbreak;\n+\t\t\t\t} \n+\t\t\t}\n+\t\t\t\n+\t\t\tif(copy) {\n+\t\t\t\tcopyStream(in, out, entry);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate static void copyStream(InputStream in, ArchiveOutputStream out, ArchiveEntry entry) throws IOException {\n+\t\tout.putArchiveEntry(entry);\n+\t\tIOUtils.copy(in, out);\n+\t\tout.closeArchiveEntry();\n+\t\tSystem.out.println(\"Copy: \" + entry.getName());\n+\t}\n+\n }\n--- a/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java\n  */\n package org.apache.commons.compress.changes;\n \n-import java.io.IOException;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n \n import junit.framework.TestCase;\n \n-import org.apache.commons.compress.archivers.ArchiveEntry;\n import org.apache.commons.compress.archivers.ArchiveInputStream;\n-import org.apache.commons.compress.archivers.memory.MemoryArchiveInputStream;\n+import org.apache.commons.compress.archivers.ArchiveOutputStream;\n+import org.apache.commons.compress.archivers.ArchiveStreamFactory;\n+import org.apache.commons.compress.archivers.ar.ArArchiveEntry;\n+import org.apache.commons.compress.archivers.jar.JarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n \n public final class ChangeSetTestCase extends TestCase {\n \n-\tprivate void apply( final ChangeSet cs ) throws IOException {\n-\t\t\n-\t\tfinal ArchiveInputStream is = new MemoryArchiveInputStream(new String[][] {\n-\t\t\t\t{ \"test1\",      \"\" },\n-\t\t\t\t{ \"test2\",      \"\" },\n-\t\t\t\t{ \"dir1/test1\", \"\" },\n-\t\t\t\t{ \"dir1/test2\", \"\" },\n-\t\t\t\t{ \"dir2/test1\", \"\" },\n-\t\t\t\t{ \"dir2/test2\", \"\" }\n-\t\t\t\t});\n-\t\t\n-\t\twhile(true) {\n-\t\t\tfinal ArchiveEntry entry = is.getNextEntry();\n-\t\t\t\n-\t\t\tif (entry == null) {\n-\t\t\t\tbreak;\n-\t\t\t}\n-\t\t\t\n-\t\t\t// delete, new name, new content\n-\t\t}\n-\t}\n-\t\n-\tpublic void testChangeSet() {\t    \n+\tpublic void testDeleteFromZip() throws Exception {\n+\t\tArchiveOutputStream out = null;\n+\t\tArchiveInputStream ais = null;\n+\t\ttry {\n+\t\t\tChangeSet changes = new ChangeSet();\n+\t\t\tchanges.delete(\"test2.xml\");\n+\t\t\t\n+\t\t\tfinal File input = new File(getClass().getClassLoader().getResource(\"bla.zip\").getFile());\n+\t\t\tfinal InputStream is = new FileInputStream(input);\n+\t\t\tais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n+\t\t\t\n+\t\t\tFile temp = File.createTempFile(\"test\", \".zip\");\n+\t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(temp));\n+\t\t\t\n+\t\t\tSystem.out.println(temp.getAbsolutePath());\n+\t\t\tchanges.perform(ais, out);\n+\t\t} finally {\n+\t\t\tif(out != null) out.close();\n+\t\t\tif(ais != null) ais.close();\n+\t\t}\n+\t}\n+\t\n+\tpublic void testDeleteFromTar() throws Exception {\n+\t\tArchiveOutputStream out = null;\n+\t\tArchiveInputStream ais = null;\n+\t\ttry {\n+\t\t\tChangeSet changes = new ChangeSet();\n+\t\t\tchanges.delete(\"test2.xml\");\n+\t\t\t\n+\t\t\tfinal File input = new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile());\n+\t\t\tfinal InputStream is = new FileInputStream(input);\n+\t\t\tais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is);\n+\t\t\t\n+\t\t\tFile temp = File.createTempFile(\"test\", \".tar\");\n+\t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp));\n+\t\t\t\n+\t\t\tSystem.out.println(temp.getAbsolutePath());\n+\t\t\tchanges.perform(ais, out);\n+\t\t} finally {\n+\t\t\tif(out != null) out.close();\n+\t\t\tif(ais != null) ais.close();\n+\t\t}\n+\t}\n+\n+\tpublic void testDeleteFromJar() throws Exception {\n+\t\tArchiveOutputStream out = null;\n+\t\tArchiveInputStream ais = null;\n+\t\ttry {\n+\t\t\tChangeSet changes = new ChangeSet();\n+\t\t\tchanges.delete(\"test2.xml\");\n+\t\t\tchanges.delete(\"META-INF/MANIFEST.MF\");\n+\t\t\t\n+\t\t\tfinal File input = new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile());\n+\t\t\tfinal InputStream is = new FileInputStream(input);\n+\t\t\tais = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is);\n+\t\t\t\n+\t\t\tFile temp = File.createTempFile(\"test\", \".jar\");\n+\t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"jar\", new FileOutputStream(temp));\n+\t\t\t\n+\t\t\tSystem.out.println(temp.getAbsolutePath());\n+\t\t\tchanges.perform(ais, out);\n+\t\t} finally {\n+\t\t\tif(out != null) out.close();\n+\t\t\tif(ais != null) ais.close();\n+\t\t}\n+\t}\n+\t\n+\tpublic void testDeleteFromAr() throws Exception {\n+\t\tArchiveOutputStream out = null;\n+\t\tArchiveInputStream ais = null;\n+\t\ttry {\n+\t\t\tChangeSet changes = new ChangeSet();\n+\t\t\tchanges.delete(\"test2.xml\");\n+\t\t\t\n+\t\t\tfinal File input = new File(getClass().getClassLoader().getResource(\"bla.ar\").getFile());\n+\t\t\tfinal InputStream is = new FileInputStream(input);\n+\t\t\tais = new ArchiveStreamFactory().createArchiveInputStream(\"ar\", is);\n+\t\t\t\n+\t\t\tFile temp = File.createTempFile(\"test\", \".ar\");\n+\t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", new FileOutputStream(temp));\n+\t\t\t\n+\t\t\tSystem.out.println(temp.getAbsolutePath());\n+\t\t\tchanges.perform(ais, out);\n+\t\t} finally {\n+\t\t\tif(out != null) out.close();\n+\t\t\tif(ais != null) ais.close();\n+\t\t}\n+\t}\n+\t\n+\tpublic void testDeleteFromAndAddToZip() throws Exception {\n+\t\tArchiveOutputStream out = null;\n+\t\tArchiveInputStream ais = null;\n+\t\ttry {\n+\t\t\tChangeSet changes = new ChangeSet();\n+\t\t\tchanges.delete(\"test2.xml\");\n+\t\t\t\n+\t\t\t\n+\t\t\tfinal File file1 = new File(getClass().getClassLoader().getResource(\"test.txt\").getFile());\n+\t\t\tZipArchiveEntry entry = new ZipArchiveEntry(\"testdata/test.txt\");\n+\t        changes.add(entry, new FileInputStream(file1));\n+\t\t\t\n+\t\t\tfinal File input = new File(getClass().getClassLoader().getResource(\"bla.zip\").getFile());\n+\t\t\tfinal InputStream is = new FileInputStream(input);\n+\t\t\tais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n+\t\t\t\n+\t\t\tFile temp = File.createTempFile(\"test\", \".zip\");\n+\t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(temp));\n+\t\t\t\n+\t\t\tSystem.out.println(temp.getAbsolutePath());\n+\t\t\tchanges.perform(ais, out);\n+\t\t} finally {\n+\t\t\tif(out != null) out.close();\n+\t\t\tif(ais != null) ais.close();\n+\t\t}\n+\t}\n+\n+\tpublic void testDeleteFromAndAddToTar() throws Exception {\n+\t\tArchiveOutputStream out = null;\n+\t\tArchiveInputStream ais = null;\n+\t\ttry {\n+\t\t\tChangeSet changes = new ChangeSet();\n+\t\t\tchanges.delete(\"test2.xml\");\n+\t\t\t\n+\t\t\t\n+\t\t\tfinal File file1 = new File(getClass().getClassLoader().getResource(\"test.txt\").getFile());\n+\t\t\t\n+\t\t\tfinal TarArchiveEntry entry = new TarArchiveEntry(\"testdata/test.txt\");\n+\t\t    entry.setModTime(0);\n+\t\t    entry.setSize(file1.length());\n+\t\t    entry.setUserId(0);\n+\t\t    entry.setGroupId(0);\n+\t\t    entry.setUserName(\"avalon\");\n+\t\t    entry.setGroupName(\"excalibur\");\n+\t\t    entry.setMode(0100000);\n+\t\t\t\n+\t        changes.add(entry, new FileInputStream(file1));\n+\t\t\t\n+\t\t\tfinal File input = new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile());\n+\t\t\tfinal InputStream is = new FileInputStream(input);\n+\t\t\tais = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is);\n+\t\t\t\n+\t\t\tFile temp = File.createTempFile(\"test\", \".tar\");\n+\t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp));\n+\t\t\t\n+\t\t\tSystem.out.println(temp.getAbsolutePath());\n+\t\t\tchanges.perform(ais, out);\n+\t\t} finally {\n+\t\t\tif(out != null) out.close();\n+\t\t\tif(ais != null) ais.close();\n+\t\t}\n+\t}\n+\t\n+\tpublic void testDeleteFromAndAddToJar() throws Exception {\n+\t\tArchiveOutputStream out = null;\n+\t\tArchiveInputStream ais = null;\n+\t\ttry {\n+\t\t\tChangeSet changes = new ChangeSet();\n+\t\t\tchanges.delete(\"test2.xml\");\n+\t\t\t\n+\t\t\tfinal File file1 = new File(getClass().getClassLoader().getResource(\"test.txt\").getFile());\n+\t\t\tJarArchiveEntry entry = new JarArchiveEntry(\"testdata/test.txt\");\n+\t        changes.add(entry, new FileInputStream(file1));\n+\t\t\t\n+\t\t\tfinal File input = new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile());\n+\t\t\tfinal InputStream is = new FileInputStream(input);\n+\t\t\tais = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is);\n+\t\t\t\n+\t\t\tFile temp = File.createTempFile(\"test\", \".jar\");\n+\t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"jar\", new FileOutputStream(temp));\n+\t\t\t\n+\t\t\tSystem.out.println(temp.getAbsolutePath());\n+\t\t\tchanges.perform(ais, out);\n+\t\t} finally {\n+\t\t\tif(out != null) out.close();\n+\t\t\tif(ais != null) ais.close();\n+\t\t}\n+\t}\n+\t\n+\tpublic void testDeleteFromAndAddToAr() throws Exception {\n+\t\tArchiveOutputStream out = null;\n+\t\tArchiveInputStream ais = null;\n+\t\ttry {\n+\t\t\tChangeSet changes = new ChangeSet();\n+\t\t\tchanges.delete(\"test2.xml\");\n+\t\t\t\n+\t\t\tfinal File file1 = new File(getClass().getClassLoader().getResource(\"test.txt\").getFile());\n+\t\t\t\n+\t\t\tfinal ArArchiveEntry entry = new ArArchiveEntry(\"test.txt\", file1.length());\n+\t\t   \n+\t        changes.add(entry, new FileInputStream(file1));\n+\t\t\t\n+\t\t\tfinal File input = new File(getClass().getClassLoader().getResource(\"bla.ar\").getFile());\n+\t\t\tfinal InputStream is = new FileInputStream(input);\n+\t\t\tais = new ArchiveStreamFactory().createArchiveInputStream(\"ar\", is);\n+\t\t\t\n+\t\t\tFile temp = File.createTempFile(\"test\", \".ar\");\n+\t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", new FileOutputStream(temp));\n+\t\t\t\n+\t\t\tSystem.out.println(temp.getAbsolutePath());\n+\t\t\tchanges.perform(ais, out);\n+\t\t} finally {\n+\t\t\tif(out != null) out.close();\n+\t\t\tif(ais != null) ais.close();\n+\t\t}\n \t}\n }", "timestamp": 1231495991, "metainfo": ""}