{"sha": "013990217ca6a3c4f911370606353f819ad99eb3", "log": "prevent adding an ArchiveEntry with same name twice to an ChangeSet  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/changes/ChangeSet.java\n+++ b/src/main/java/org/apache/commons/compress/changes/ChangeSet.java\n      *            the datastream to add\n      */\n     public void add(final ArchiveEntry pEntry, final InputStream pInput) {\n-        changes.add(new Change(pEntry, pInput));\n+        addAddition(new Change(pEntry, pInput));\n     }\n \n+    /**\n+     * Adds an addition change.\n+     * \n+     * @param pChange\n+     *            the change which should result in an addition\n+     */\n+    private void addAddition(Change pChange) {\n+        if (Change.TYPE_ADD != pChange.type() ||    \n+            pChange.getInput() == null) {\n+            return;\n+        }\n+\n+        if (!changes.isEmpty()) {\n+            for (Iterator it = changes.iterator(); it.hasNext();) {\n+                Change change = (Change) it.next();\n+                if (change.type() == Change.TYPE_ADD\n+                        && change.getEntry() != null) {\n+                    ArchiveEntry entry = change.getEntry();\n+\n+                    if(entry.equals(pChange.getEntry())) {\n+                        it.remove();\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+        changes.add(pChange);\n+    }\n+    \n     /**\n      * Adds an delete change.\n      * \n--- a/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java\n     }\n \n     /**\n+     * Adds an ArchiveEntry with the same name two times.\n+     * Only the latest addition should be found in the ChangeSet,\n+     * the first add should be replaced.\n+     * \n+     * @throws Exception\n+     */\n+    public void testAddChangeTwice() throws Exception {\n+        InputStream in = null;\n+        InputStream in2 = null;\n+        try {\n+            in = new FileInputStream(getFile(\"test.txt\"));\n+            in2 = new FileInputStream(getFile(\"test2.xml\"));\n+       \n+            ArchiveEntry e = new ZipArchiveEntry(\"test.txt\");\n+            ArchiveEntry e2 = new ZipArchiveEntry(\"test.txt\");\n+            \n+            ChangeSet changes = new ChangeSet();\n+            changes.add(e, in);\n+            changes.add(e2, in2);\n+            \n+            assertEquals(1, changes.getChanges().size());\n+            Change c = (Change)changes.getChanges().iterator().next();\n+            assertEquals(in2, c.getInput());\n+        } finally {\n+            if (in != null)\n+                in.close();\n+            if (in2 != null)\n+                in2.close();\n+        }\n+    }\n+    \n+    /**\n      * Tries to delete the folder \"bla\" from an archive file. This should result in\n      * the deletion of bla/*, which actually means bla/test4.xml should be\n      * removed from the archive. The file something/bla (without ending, named", "timestamp": 1239946718, "metainfo": ""}