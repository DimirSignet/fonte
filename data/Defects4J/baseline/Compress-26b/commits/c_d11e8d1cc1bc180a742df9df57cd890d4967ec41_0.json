{"sha": "d11e8d1cc1bc180a742df9df57cd890d4967ec41", "log": "Moved the entry crc into the CurrentEntry inner class  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n      * Inflater used for all deflated entries.\n      */\n     private final Inflater inf = new Inflater(true);\n-\n-    /**\n-     * Calculates checkusms for all entries.\n-     */\n-    private final CRC32 crc = new CRC32();\n \n     /**\n      * Buffer used to read from the wrapped stream.\n         }\n         \n         if (read >= 0) {\n-            crc.update(buffer, offset, read);\n+            current.crc.update(buffer, offset, read);\n         }\n         \n         return read;\n \n         inf.reset();\n         buf.clear().flip();\n-        crc.reset();\n         current = null;\n         lastStoredEntry = null;\n     }\n      * DEFLATED.\n      */\n     private boolean supportsDataDescriptorFor(ZipArchiveEntry entry) {\n-        return allowStoredEntriesWithDataDescriptor ||\n-            !entry.getGeneralPurposeBit().usesDataDescriptor()\n-            || entry.getMethod() == ZipEntry.DEFLATED;\n+        return allowStoredEntriesWithDataDescriptor\n+                || !entry.getGeneralPurposeBit().usesDataDescriptor()\n+                || entry.getMethod() == ZipEntry.DEFLATED;\n     }\n \n     /**\n      * currently being read.\n      */\n     private static final class CurrentEntry {\n+\n         /**\n          * Current ZIP entry.\n          */\n         private final ZipArchiveEntry entry = new ZipArchiveEntry();\n+\n         /**\n          * Does the entry use a data descriptor?\n          */\n         private boolean hasDataDescriptor;\n+\n         /**\n          * Does the entry have a ZIP64 extended information extra field.\n          */\n         private boolean usesZip64;\n+\n         /**\n          * Number of bytes of entry content read by the client if the\n          * entry is STORED.\n          */\n         private long bytesRead;\n+\n         /**\n          * Number of bytes of entry content read so from the stream.\n          *\n          * end of the entry has been reached.</p>\n          */\n         private long bytesReadFromStream;\n+\n+        /**\n+         * The checksum calculated as the current entry is read.\n+         */\n+        private final CRC32 crc = new CRC32();\n     }\n }", "timestamp": 1387445728, "metainfo": ""}