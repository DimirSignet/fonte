{"sha": "1bb5321d3bcbe544c8f49fb1d0893d377010d08e", "log": "new testcases by Christian Grobmeier - SANDBOX-183  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/changes/ChangeSet.java\n+++ b/src/main/java/org/apache/commons/compress/changes/ChangeSet.java\n \t\t\t\tif( change.type() == Change.TYPE_DELETE &&\n \t\t\t\t\tentry.getName() != null &&\n \t\t\t\t\tentry.getName().equals(change.targetFile())) {\n-\t\t\t\t\tSystem.out.println(\"Delete: \" + entry.getName());\n \t\t\t\t\tcopy = false;\n \t\t\t\t\tit.remove();\n \t\t\t\t\tbreak;\n \t\tout.putArchiveEntry(entry);\n \t\tIOUtils.copy(in, out);\n \t\tout.closeArchiveEntry();\n-\t\tSystem.out.println(\"Copy: \" + entry.getName());\n \t}\n-\n }\n--- a/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n  */\n package org.apache.commons.compress;\n \n+import java.io.BufferedInputStream;\n import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.List;\n \n import junit.framework.TestCase;\n+\n+import org.apache.commons.compress.archivers.ArchiveEntry;\n+import org.apache.commons.compress.archivers.ArchiveInputStream;\n+import org.apache.commons.compress.archivers.ArchiveOutputStream;\n+import org.apache.commons.compress.archivers.ArchiveStreamFactory;\n+import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n+import org.apache.commons.compress.utils.IOUtils;\n \n public abstract class AbstractTestCase extends TestCase {\n \n \t\tdir = File.createTempFile(\"dir\", \"\");\n \t\tdir.delete();\n \t\tdir.mkdir();\n+\n+\t\taddURL(new File(\"src/test/resources\").toURL());\n \t}\n \n \tprotected File getFile( String path ) {\n \t\tdir = null;\n \t}\n \n+\t/**\n+\t * Adds a URL to the classpath. This method is necessary when running \n+\t * junit tests from within eclipse.\n+\t * @param url the url to add\n+\t * @throws Exception if an error occurs\n+\t */\n+\tpublic void addURL(URL url) throws Exception {\n+\t\tURLClassLoader classLoader = (URLClassLoader) ClassLoader.getSystemClassLoader();\n+\t\tClass clazz = URLClassLoader.class;\n \n+\t\tMethod method= clazz.getDeclaredMethod(\"addURL\", new Class[] { URL.class });\n+\t\tmethod.setAccessible(true);\n+\t\tmethod.invoke(classLoader, new Object[] { url });\n+\t}\n+\n+\t/**\n+\t * Creates an archive of 5 textbased files in several directories.\n+\t * The archivername is the factory identifier for the archiver, for example\n+\t * zip, tar, cpio, jar, ar.\n+\t * The archive is created as a temp file.\n+\t * \n+\t * The archive contains the following files:\n+\t * <ul>\n+\t * <li>testdata/test1.xml</li>\n+\t * <li>testdata/test2.xml</li>\n+\t * <li>test/test3.xml</li>\n+\t * <li>bla/test4.xml</li>\n+\t * <li>test.txt</li>\n+\t * <li>something/bla</li>\n+\t * <li>test with spaces.txt</li>\n+\t * </ul>\n+\t * \n+\t * @param archivename the identifier of this archive\n+\t * @return the newly created file\n+\t * @throws Exception in case something goes wrong\n+\t */\n+\tprotected File createArchive(String archivename) throws Exception {\n+\t\tArchiveOutputStream out = null;\n+\t\tArchiveInputStream ais = null;\n+\t\ttry {\n+\t\t\tFile temp = File.createTempFile(\"test\", \".\" + archivename);\n+\t\t\t\n+\t\t\tfinal OutputStream stream = new FileOutputStream(temp);\n+\t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(archivename, stream);\n+\t\t\t\n+\t\t\tfinal File file1 = getFile(\"test1.xml\");\n+\t\t\tfinal File file2 = getFile(\"test2.xml\");\n+\t\t\tfinal File file3 = getFile(\"test3.xml\");\n+\t\t\tfinal File file4 = getFile(\"test4.xml\");\n+\t\t\tfinal File file5 = getFile(\"test.txt\");\n+\t\t\tfinal File file6 = getFile(\"test with spaces.txt\");\n+\t\t\t\n+\t\t\tZipArchiveEntry entry = new ZipArchiveEntry(\"testdata/test1.xml\");\n+\t\t\tentry.setSize(file1.length());\n+\t        out.putArchiveEntry(entry);\n+\t        IOUtils.copy(new FileInputStream(file1), out);\n+\t        out.closeArchiveEntry();\n+\t        \n+\t        out.putArchiveEntry(new ZipArchiveEntry(\"testdata/test2.xml\"));\n+\t        IOUtils.copy(new FileInputStream(file2), out);\n+\t        out.closeArchiveEntry();\n+\n+\t        out.putArchiveEntry(new ZipArchiveEntry(\"test/test3.xml\"));\n+\t        IOUtils.copy(new FileInputStream(file3), out);\n+\t        out.closeArchiveEntry();\n+\t        \n+\t        out.putArchiveEntry(new ZipArchiveEntry(\"bla/test4.xml\"));\n+\t        IOUtils.copy(new FileInputStream(file4), out);\n+\t        out.closeArchiveEntry();\n+\t        \n+\t        out.putArchiveEntry(new ZipArchiveEntry(\"test.txt\"));\n+\t        IOUtils.copy(new FileInputStream(file5), out);\n+\t        out.closeArchiveEntry();\n+\t        \n+\t        out.putArchiveEntry(new ZipArchiveEntry(\"something/bla\"));\n+\t        IOUtils.copy(new FileInputStream(file6), out);\n+\t        out.closeArchiveEntry();\n+\t        \n+\t        out.putArchiveEntry(new ZipArchiveEntry(\"test with spaces.txt\"));\n+\t        IOUtils.copy(new FileInputStream(file6), out);\n+\t        out.closeArchiveEntry();\n+\t        \n+\t     \treturn temp;\n+\t\t} finally {\n+\t\t\tif(out != null) out.close();\n+\t\t\tif(ais != null) ais.close();\n+\t\t}\n+\t}\n+\t\n+\t/**\n+\t * Checks if an archive contains all expected files.\n+\t * \n+\t * @param archive \n+\t * \t\t\t\tthe archive to check\n+\t * @param expected \n+\t * \t\t\t\ta list with expected string filenames\n+\t * @throws Exception\n+\t */\n+\tprotected void checkArchiveContent(File archive, List expected) \n+\t \tthrows Exception {\n+\t    final InputStream is = new FileInputStream(archive);\n+\t    final BufferedInputStream buf = new BufferedInputStream(is);\n+\t    final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(buf);\n+\t \n+\t    File result = File.createTempFile(\"dir-result\", \"\");\n+\t    result.delete();\n+\t    result.mkdir();\n+\t\t\t\n+\t    ArchiveEntry entry = null;\n+\t    while((entry = (ArchiveEntry)in.getNextEntry()) != null) {\n+\t      \tFile outfile = new File(result.getCanonicalPath() + \"/result/\" + entry.getName());\n+\t       \toutfile.getParentFile().mkdirs();\n+\t       \tOutputStream out = new FileOutputStream(outfile);\n+\t\t    if(!expected.remove(entry.getName())) {\n+\t\t       \tfail(\"unexpected entry: \" + entry.getName());\n+\t\t    } \n+\t\t    IOUtils.copy(in, out);\n+\t\t    out.close();\n+\t    }\n+\t    in.close();\n+\t    assertEquals(expected.size(), 0);\n+\t}\n }\n--- a/src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java\n import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;\n \n-public final class DetectArchiverTestCase extends TestCase {\n+public final class DetectArchiverTestCase extends AbstractTestCase {\n \tpublic void testDetection() throws Exception {\n \t\tfinal ArchiveStreamFactory factory = new ArchiveStreamFactory();\n \n--- a/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n import java.io.FileOutputStream;\n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n \n+import org.apache.commons.compress.AbstractTestCase;\n import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n import org.apache.commons.compress.utils.IOUtils;\n \n-import org.apache.commons.compress.AbstractTestCase;\n-\n public final class ZipTestCase extends AbstractTestCase {\n+\t/**\n+\t * Archives 2 files and unarchives it again. If the file length of result\n+\t * and source is the same, it looks like the operations have worked\n+\t * @throws Exception\n+\t */\n \tpublic void testZipArchiveCreation() throws Exception {\n-\t\t\n+\t\t// Archive\n \t\tfinal File output = new File(dir, \"bla.zip\");\n-\t\t\n \t\tfinal File file1 = getFile(\"test1.xml\");\n \t\tfinal File file2 = getFile(\"test2.xml\");\n+\n+\t\t{\n+\t\t\tfinal OutputStream out = new FileOutputStream(output);\n+\t        final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", out);\n+\t\n+\t        os.putArchiveEntry(new ZipArchiveEntry(\"testdata/test1.xml\"));\n+\t        IOUtils.copy(new FileInputStream(file1), os);\n+\t        os.closeArchiveEntry();\n+\t        \n+\t        os.putArchiveEntry(new ZipArchiveEntry(\"testdata/test2.xml\"));\n+\t        IOUtils.copy(new FileInputStream(file2), os);\n+\t        os.closeArchiveEntry();\n+\t        os.close();\n+\t\t}\n \t\t\n-        final OutputStream out = new FileOutputStream(output);\n+\t\t// Unarchive the same\n+\t\tList results = new ArrayList();\n+\t\t\n+        {\n+\t        final InputStream is = new FileInputStream(output);\n+\t        final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n+\t \n+\t        File result = File.createTempFile(\"dir-result\", \"\");\n+\t        result.delete();\n+\t        result.mkdir();\n+\t\t\t\n+\t        ZipArchiveEntry entry = null;\n+\t        while((entry = (ZipArchiveEntry)in.getNextEntry()) != null) {\n+\t        \tFile outfile = new File(result.getCanonicalPath() + \"/result/\" + entry.getName());\n+\t        \toutfile.getParentFile().mkdirs();\n+\t        \tOutputStream out = new FileOutputStream(outfile);\n+\t\t        IOUtils.copy(in, out);\n+\t\t        out.close();\n+\t\t        results.add(outfile);\n+\t        }\n+\t        in.close();\n+        }\n         \n-        final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", out);\n-\n-        os.putArchiveEntry(new ZipArchiveEntry(\"testdata/test1.xml\"));\n-        IOUtils.copy(new FileInputStream(file1), os);\n-        os.closeArchiveEntry();\n-        \n-        os.putArchiveEntry(new ZipArchiveEntry(\"testdata/test2.xml\"));\n-        IOUtils.copy(new FileInputStream(file2), os);\n-        os.closeArchiveEntry();\n-        \n-        os.close();\n+        assertEquals(results.size(), 2);\n+        File result = (File)results.get(0);\n+        assertEquals(file1.length(), result.length());\n+        result = (File)results.get(1);\n+        assertEquals(file2.length(), result.length());\n     }\n+\t\n+    /**\n+     * Simple unarchive test. Asserts nothing.\n+     * @throws Exception\n+     */\n     public void testZipUnarchive() throws Exception {\n-\n \t\tfinal File input = getFile(\"bla.zip\");\n-    \t\n         final InputStream is = new FileInputStream(input);\n         final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n- \n         final ZipArchiveEntry entry = (ZipArchiveEntry)in.getNextEntry();\n         final OutputStream out = new FileOutputStream(new File(dir, entry.getName()));\n-        \n         IOUtils.copy(in, out);\n-    \n         out.close();\n         in.close();\n     }\n-\n }\n--- a/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n \n import org.apache.commons.compress.AbstractTestCase;\n+import org.apache.commons.compress.archivers.ArchiveEntry;\n import org.apache.commons.compress.archivers.ArchiveInputStream;\n import org.apache.commons.compress.archivers.ArchiveOutputStream;\n import org.apache.commons.compress.archivers.ArchiveStreamFactory;\n import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n \n+/**\n+ * Checks several ChangeSet business logics.\n+ */\n public final class ChangeSetTestCase extends AbstractTestCase {\n-\n+\t/**\n+\t * Tries to delete the folder \"bla\" from a zip file.\n+\t * This should result in the deletion of bla/*, which \n+\t * actually means bla/test4.xml should be removed from this zipfile.\n+\t * The file something/bla (without ending, named like the folder) should\n+\t * not be deleted.\n+\t * \n+\t * @throws Exception\n+\t */\n+\tpublic void XtestDeleteDir() throws Exception {\n+\t\tFile input = this.createArchive(\"zip\");\n+\t\t\n+\t\tArchiveOutputStream out = null;\n+\t\tArchiveInputStream ais = null;\n+\t\tFile result = File.createTempFile(\"test\", \".zip\");\n+\t\ttry {\n+\t\t\t\n+\t\t\tfinal InputStream is = new FileInputStream(input);\n+\t\t\tais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n+\t\t\t\n+\t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result));\n+\n+\t\t\tChangeSet changes = new ChangeSet();\n+\t\t\tchanges.delete(\"bla\");\n+\t\t\tchanges.perform(ais, out);\n+\t\t\t\n+\t\t} finally {\n+\t\t\tif(out != null) out.close();\n+\t\t\tif(ais != null) ais.close();\n+\t\t}\n+\t\t\n+\t\tList expected = new ArrayList();\n+\t\texpected.add(\"testdata/test1.xml\");\n+\t\texpected.add(\"testdata/test2.xml\");\n+\t\texpected.add(\"test/test3.xml\");\n+\t\texpected.add(\"test.txt\");\n+\t\texpected.add(\"something/bla\");\n+\t\texpected.add(\"test with spaces.txt\");\n+\t\t\n+\t\tthis.checkArchiveContent(result, expected);\n+\t}\n+\t\n+\t/**\n+\t * Tries to delete a directory with a file and adds \n+\t * a new directory with a new file and with the same name.\n+     * Should delete dir1/* and add dir1/test.txt at the end\n+     * \n+\t * @throws Exception\n+\t */\n+\tpublic void XtestDeletePlusAdd() throws Exception {\n+\t\tFile input = this.createArchive(\"zip\");\n+\t\t\n+\t\tArchiveOutputStream out = null;\n+\t\tArchiveInputStream ais = null;\n+\t\tFile result = File.createTempFile(\"test\", \".zip\");\n+\t\ttry {\n+\t\t\t\n+\t\t\tfinal InputStream is = new FileInputStream(input);\n+\t\t\tais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n+\t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result));\n+\n+\t\t\tChangeSet changes = new ChangeSet();\n+\t\t\tchanges.delete(\"bla\");\n+\t\t\t\n+\t\t\t// Add a file\n+\t\t\tfinal File file1 = getFile(\"test.txt\");\n+\t\t\tArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\");\n+\t\t\tchanges.add(entry, new FileInputStream(file1));\n+\n+\t\t\tchanges.perform(ais, out);\n+\t\t\t\n+\t\t} finally {\n+\t\t\tif(out != null) out.close();\n+\t\t\tif(ais != null) ais.close();\n+\t\t}\n+\t\t\n+\t\tList expected = new ArrayList();\n+\t\texpected.add(\"testdata/test1.xml\");\n+\t\texpected.add(\"testdata/test2.xml\");\n+\t\texpected.add(\"test/test3.xml\");\n+\t\texpected.add(\"test.txt\");\n+\t\texpected.add(\"something/bla\");\n+\t\texpected.add(\"bla/test.txt\");\n+\t\texpected.add(\"test with spaces.txt\");\n+\t\t\n+\t\tthis.checkArchiveContent(result, expected);\n+\t}\n+\t\n+\t/**\n+\t * Adds a file to a zip archive. Deletes an other file.\n+\t * @throws Exception\n+\t */\n+\tpublic void testDeleteFromAndAddToZip() throws Exception {\n+\t\tFile input = this.createArchive(\"zip\");\n+\t\t\n+\t\tArchiveOutputStream out = null;\n+\t\tArchiveInputStream ais = null;\n+\t\tFile result = File.createTempFile(\"test\", \".zip\");\n+\t\ttry {\n+\t\t\t\n+\t\t\tfinal InputStream is = new FileInputStream(input);\n+\t\t\tais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n+\t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result));\n+\n+\t\t\tChangeSet changes = new ChangeSet();\n+\t\t\t\n+\t\t\tfinal File file1 = getFile(\"test.txt\");\n+\t\t\tArchiveEntry entry = new ZipArchiveEntry(\"blub/test.txt\");\n+\t\t\tchanges.add(entry, new FileInputStream(file1));\n+\t\t\t\n+\t\t\tchanges.delete(\"testdata/test1.xml\");\n+\t\t\t\n+\t\t\tchanges.perform(ais, out);\n+\t\t\t\n+\t\t} finally {\n+\t\t\tif(out != null) out.close();\n+\t\t\tif(ais != null) ais.close();\n+\t\t}\n+\t\t\n+\t\tList expected = new ArrayList();\n+\t\texpected.add(\"testdata/test2.xml\");\n+\t\texpected.add(\"test/test3.xml\");\n+\t\texpected.add(\"blub/test.txt\");\n+\t\texpected.add(\"test.txt\");\n+\t\texpected.add(\"something/bla\");\n+\t\texpected.add(\"bla/test4.xml\");\n+\t\texpected.add(\"test with spaces.txt\");\n+\t\t\n+\t\tthis.checkArchiveContent(result, expected);\n+\t}\n+\t\n+\t/**\n+\t * add blub/test.txt + delete blub\n+     * Should add dir1/test.txt and delete it afterwards. In this example,\n+     * the zip archive should stay untouched.\n+\t * @throws Exception\n+\t */\n+\tpublic void XtestAddDeleteAdd() throws Exception {\n+\t\tFile input = this.createArchive(\"zip\");\n+\t\t\n+\t\tArchiveOutputStream out = null;\n+\t\tArchiveInputStream ais = null;\n+\t\tFile result = File.createTempFile(\"test\", \".zip\");\n+\t\ttry {\n+\t\t\t\n+\t\t\tfinal InputStream is = new FileInputStream(input);\n+\t\t\tais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n+\t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result));\n+\n+\t\t\tChangeSet changes = new ChangeSet();\n+\t\t\t\n+\t\t\tfinal File file1 = getFile(\"test.txt\");\n+\t\t\tArchiveEntry entry = new ZipArchiveEntry(\"blub/test.txt\");\n+\t\t\tchanges.add(entry, new FileInputStream(file1));\n+\t\t\t\n+\t\t\tchanges.delete(\"blub\");\n+\t\t\t\n+\t\t\tchanges.perform(ais, out);\n+\t\t\t\n+\t\t} finally {\n+\t\t\tif(out != null) out.close();\n+\t\t\tif(ais != null) ais.close();\n+\t\t}\n+\t\t\n+\t\tList expected = new ArrayList();\n+\t\texpected.add(\"testdata/test1.xml\");\n+\t\texpected.add(\"testdata/test2.xml\");\n+\t\texpected.add(\"test/test3.xml\");\n+\t\texpected.add(\"test.txt\");\n+\t\texpected.add(\"something/bla\");\n+\t\texpected.add(\"bla/test4.xml\");\n+\t\texpected.add(\"test with spaces.txt\");\n+\t\t\n+\t\tthis.checkArchiveContent(result, expected);\n+\t}\n+\t\n+\t\n+\t/**\n+\t * delete bla + add bla/test.txt + delete bla\n+\t * Deletes dir1/* first, then surpresses the add of bla.txt cause there\n+\t * is a delete operation later.\n+\t * @throws Exception\n+\t */\n+\tpublic void XtestDeleteAddDelete() throws Exception {\n+\t\tFile input = this.createArchive(\"zip\");\n+\t\t\n+\t\tArchiveOutputStream out = null;\n+\t\tArchiveInputStream ais = null;\n+\t\tFile result = File.createTempFile(\"test\", \".zip\");\n+\t\ttry {\n+\t\t\t\n+\t\t\tfinal InputStream is = new FileInputStream(input);\n+\t\t\tais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n+\t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(result));\n+\n+\t\t\tChangeSet changes = new ChangeSet();\n+\t\t\t\n+\t\t\tchanges.delete(\"bla\");\n+\t\t\t\n+\t\t\tfinal File file1 = getFile(\"test.txt\");\n+\t\t\tArchiveEntry entry = new ZipArchiveEntry(\"bla/test.txt\");\n+\t\t\tchanges.add(entry, new FileInputStream(file1));\n+\t\t\t\n+\t\t\tchanges.delete(\"bla\");\n+\t\t\t\n+\t\t\tchanges.perform(ais, out);\n+\t\t\t\n+\t\t} finally {\n+\t\t\tif(out != null) out.close();\n+\t\t\tif(ais != null) ais.close();\n+\t\t}\n+\t\t\n+\t\tList expected = new ArrayList();\n+\t\texpected.add(\"testdata/test1.xml\");\n+\t\texpected.add(\"testdata/test2.xml\");\n+\t\texpected.add(\"test/test3.xml\");\n+\t\texpected.add(\"test.txt\");\n+\t\texpected.add(\"something/bla\");\n+\t\texpected.add(\"test with spaces.txt\");\n+\t\t\n+\t\tthis.checkArchiveContent(result, expected);\n+\t}\n+\t\n+\t/**\n+\t * Simple Delete from a zip file.\n+\t * @throws Exception\n+\t */\n \tpublic void testDeleteFromZip() throws Exception {\n \t\tArchiveOutputStream out = null;\n \t\tArchiveInputStream ais = null;\n \t\t\t\n \t\t\tFile temp = File.createTempFile(\"test\", \".zip\");\n \t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(temp));\n-\t\t\t\n-\t\t\tSystem.out.println(temp.getAbsolutePath());\n-\t\t\tchanges.perform(ais, out);\n-\t\t} finally {\n-\t\t\tif(out != null) out.close();\n-\t\t\tif(ais != null) ais.close();\n-\t\t}\n-\t}\n-\t\n+\n+\t\t\tchanges.perform(ais, out);\n+\t\t} finally {\n+\t\t\tif(out != null) out.close();\n+\t\t\tif(ais != null) ais.close();\n+\t\t}\n+\t\t// TODO add asserts\n+\t}\n+\n+\t/**\n+\t * Simple delete from a tar file\n+\t * @throws Exception\n+\t */\n \tpublic void testDeleteFromTar() throws Exception {\n \t\tArchiveOutputStream out = null;\n \t\tArchiveInputStream ais = null;\n \t\t\t\n \t\t\tFile temp = new File(dir, \"bla.tar\");\n \t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp));\n-\t\t\t\n-\t\t\tSystem.out.println(temp.getAbsolutePath());\n-\t\t\tchanges.perform(ais, out);\n-\t\t} finally {\n-\t\t\tif(out != null) out.close();\n-\t\t\tif(ais != null) ais.close();\n-\t\t}\n-\t}\n-\n+\n+\t\t\tchanges.perform(ais, out);\n+\t\t} finally {\n+\t\t\tif(out != null) out.close();\n+\t\t\tif(ais != null) ais.close();\n+\t\t}\n+\t\t// TODO add asserts\n+\t}\n+\n+\t/**\n+\t * Simple delete from a jar file\n+\t * @throws Exception\n+\t */\n \tpublic void testDeleteFromJar() throws Exception {\n \t\tArchiveOutputStream out = null;\n \t\tArchiveInputStream ais = null;\n \t\t\t\n \t\t\tFile temp = new File(dir, \"bla.jar\");\n \t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"jar\", new FileOutputStream(temp));\n-\t\t\t\n-\t\t\tSystem.out.println(temp.getAbsolutePath());\n-\t\t\tchanges.perform(ais, out);\n-\t\t} finally {\n-\t\t\tif(out != null) out.close();\n-\t\t\tif(ais != null) ais.close();\n-\t\t}\n-\t}\n-\t\n+\n+\t\t\tchanges.perform(ais, out);\n+\t\t} finally {\n+\t\t\tif(out != null) out.close();\n+\t\t\tif(ais != null) ais.close();\n+\t\t}\n+\t\t// TODO add asserts\n+\t}\n+\n+\t/**\n+\t * Simple delete from an ar file\n+\t * @throws Exception\n+\t */\n \tpublic void testDeleteFromAr() throws Exception {\n \t\tArchiveOutputStream out = null;\n \t\tArchiveInputStream ais = null;\n \t\t\t\n \t\t\tFile temp = new File(dir, \"bla.ar\");\n \t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", new FileOutputStream(temp));\n-\t\t\t\n-\t\t\tSystem.out.println(temp.getAbsolutePath());\n-\t\t\tchanges.perform(ais, out);\n-\t\t} finally {\n-\t\t\tif(out != null) out.close();\n-\t\t\tif(ais != null) ais.close();\n-\t\t}\n-\t}\n-\t\n-\tpublic void testDeleteFromAndAddToZip() throws Exception {\n-\t\tArchiveOutputStream out = null;\n-\t\tArchiveInputStream ais = null;\n-\t\ttry {\n-\t\t\tChangeSet changes = new ChangeSet();\n-\t\t\tchanges.delete(\"test2.xml\");\n-\t\t\t\n-\t\t\t\n-\t\t\tfinal File file1 = getFile(\"test.txt\");\n-\t\t\tZipArchiveEntry entry = new ZipArchiveEntry(\"testdata/test.txt\");\n-\t        changes.add(entry, new FileInputStream(file1));\n-\t\t\t\n-\t\t\tfinal File input = getFile(\"bla.zip\");\n-\t\t\tfinal InputStream is = new FileInputStream(input);\n-\t\t\tais = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n-\t\t\t\n-\t\t\tFile temp = new File(dir, \"bla.zip\");\n-\t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", new FileOutputStream(temp));\n-\t\t\t\n-\t\t\tSystem.out.println(temp.getAbsolutePath());\n-\t\t\tchanges.perform(ais, out);\n-\t\t} finally {\n-\t\t\tif(out != null) out.close();\n-\t\t\tif(ais != null) ais.close();\n-\t\t}\n+\n+\t\t\tchanges.perform(ais, out);\n+\t\t} finally {\n+\t\t\tif(out != null) out.close();\n+\t\t\tif(ais != null) ais.close();\n+\t\t}\n+\t\t// TODO add asserts\n \t}\n \n \tpublic void testDeleteFromAndAddToTar() throws Exception {\n \t\ttry {\n \t\t\tChangeSet changes = new ChangeSet();\n \t\t\tchanges.delete(\"test2.xml\");\n-\t\t\t\n \t\t\t\n \t\t\tfinal File file1 = getFile(\"test.txt\");\n \t\t\t\n \t\t\t\n \t\t\tFile temp = new File(dir, \"bla.tar\");\n \t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", new FileOutputStream(temp));\n-\t\t\t\n-\t\t\tSystem.out.println(temp.getAbsolutePath());\n-\t\t\tchanges.perform(ais, out);\n-\t\t} finally {\n-\t\t\tif(out != null) out.close();\n-\t\t\tif(ais != null) ais.close();\n-\t\t}\n-\t}\n-\t\n+\n+\t\t\tchanges.perform(ais, out);\n+\t\t} finally {\n+\t\t\tif(out != null) out.close();\n+\t\t\tif(ais != null) ais.close();\n+\t\t}\n+\t\t// TODO add asserts\n+\t}\n+\t\n+\t/**\n+\t * Delete from a jar file and add another file\n+\t * @throws Exception\n+\t */\n \tpublic void testDeleteFromAndAddToJar() throws Exception {\n \t\tArchiveOutputStream out = null;\n \t\tArchiveInputStream ais = null;\n \t\t\t\n \t\t\tFile temp = new File(dir, \"bla.jar\");\n \t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"jar\", new FileOutputStream(temp));\n-\t\t\t\n-\t\t\tSystem.out.println(temp.getAbsolutePath());\n-\t\t\tchanges.perform(ais, out);\n-\t\t} finally {\n-\t\t\tif(out != null) out.close();\n-\t\t\tif(ais != null) ais.close();\n-\t\t}\n-\t}\n-\t\n+\n+\t\t\tchanges.perform(ais, out);\n+\t\t} finally {\n+\t\t\tif(out != null) out.close();\n+\t\t\tif(ais != null) ais.close();\n+\t\t}\n+\t\t// TODO add asserts\n+\t}\n+\n+\t/**\n+\t * Deletes a file from an AR-archive and adds another\n+\t * @throws Exception\n+\t */\n \tpublic void testDeleteFromAndAddToAr() throws Exception {\n \t\tArchiveOutputStream out = null;\n \t\tArchiveInputStream ais = null;\n \t\t\t\n \t\t\tFile temp = new File(dir, \"bla.ar\");\n \t\t\tout = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", new FileOutputStream(temp));\n-\t\t\t\n-\t\t\tSystem.out.println(temp.getAbsolutePath());\n-\t\t\tchanges.perform(ais, out);\n-\t\t} finally {\n-\t\t\tif(out != null) out.close();\n-\t\t\tif(ais != null) ais.close();\n-\t\t}\n+\n+\t\t\tchanges.perform(ais, out);\n+\t\t} finally {\n+\t\t\tif(out != null) out.close();\n+\t\t\tif(ais != null) ais.close();\n+\t\t}\n+\t\t// TODO add asserts\n+\t}\n+\t\n+\t/**\n+\t * TODO: Move operations are not supported currently\n+\t * \n+\t * mv dir1/test.text dir2/test.txt + delete dir1\n+\t * Moves the file to dir2 and deletes everything in dir1\n+\t * @throws Exception\n+\t */\n+\tpublic void testRenameAndDelete() throws Exception {\n+\t}\n+\t\n+\t/**\n+\t * TODO: Move operations are not supported currently\n+\t * \n+\t * add dir1/bla.txt + mv dir1/test.text dir2/test.txt + delete dir1\n+\t * \n+\t * Add dir1/bla.txt should be surpressed. All other dir1 files will be\n+\t * deleted, except dir1/test.text will be moved\n+\t * \n+\t * @throws Exception\n+\t */\n+\tpublic void testAddMoveDelete() throws Exception {\n \t}\n }", "timestamp": 1234793983, "metainfo": ""}