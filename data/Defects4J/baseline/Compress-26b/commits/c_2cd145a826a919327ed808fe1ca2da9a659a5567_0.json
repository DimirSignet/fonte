{"sha": "2cd145a826a919327ed808fe1ca2da9a659a5567", "log": "extra field header id 1 is the zip 64 extra information field which will soon be supported, so don't use it as 'unknown' placeholder  ", "commit": "\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java\n         super(name);\n     }\n \n+    /**\n+     * Header-ID of a ZipExtraField not supported by Commons Compress.\n+     *\n+     * <p>Used to be ZipShort(1) but this is the ID of the Zip64 extra\n+     * field.</p>\n+     */\n+    static final ZipShort UNRECOGNIZED_HEADER = new ZipShort(0x5555);\n+\n     private AsiExtraField a;\n     private UnrecognizedExtraField dummy;\n     private byte[] data;\n         a.setMode(0755);\n         a.setDirectory(true);\n         dummy = new UnrecognizedExtraField();\n-        dummy.setHeaderId(new ZipShort(1));\n+        dummy.setHeaderId(UNRECOGNIZED_HEADER);\n         dummy.setLocalFileDataData(new byte[] {0});\n         dummy.setCentralDirectoryData(new byte[] {0});\n \n \n     public void testMergeWithUnparseableData() throws Exception {\n         ZipExtraField d = new UnparseableExtraFieldData();\n-        d.parseFromLocalFileData(new byte[] {1, 0, 1, 0}, 0, 4);\n+        byte[] b = UNRECOGNIZED_HEADER.getBytes();\n+        d.parseFromLocalFileData(new byte[] {b[0], b[1], 1, 0}, 0, 4);\n         byte[] local =\n             ExtraFieldUtils.mergeLocalFileDataData(new ZipExtraField[] {a, d});\n         assertEquals(\"local length\", data.length - 1, local.length);\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java\n         a.setDirectory(true);\n         a.setMode(0755);\n         UnrecognizedExtraField u = new UnrecognizedExtraField();\n-        u.setHeaderId(new ZipShort(1));\n+        u.setHeaderId(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER);\n         u.setLocalFileDataData(new byte[0]);\n \n         ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\");\n         assertSame(u, result[1]);\n \n         UnrecognizedExtraField u2 = new UnrecognizedExtraField();\n-        u2.setHeaderId(new ZipShort(1));\n+        u2.setHeaderId(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER);\n         u2.setLocalFileDataData(new byte[] {1});\n \n         ze.addExtraField(u2);\n         result = ze.getExtraFields();\n         assertEquals(\"third pass\", 3, result.length);\n \n-        ze.removeExtraField(new ZipShort(1));\n+        ze.removeExtraField(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER);\n         byte[] data3 = ze.getExtra();\n         result = ze.getExtraFields();\n         assertEquals(\"fourth pass\", 2, result.length);\n         assertEquals(\"length fourth pass\", data2.length, data3.length);\n \n         try {\n-            ze.removeExtraField(new ZipShort(1));\n+            ze.removeExtraField(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER);\n             fail(\"should be no such element\");\n         } catch (java.util.NoSuchElementException nse) {\n         }\n         a.setDirectory(true);\n         a.setMode(0755);\n         UnrecognizedExtraField u = new UnrecognizedExtraField();\n-        u.setHeaderId(new ZipShort(1));\n+        u.setHeaderId(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER);\n         u.setLocalFileDataData(new byte[0]);\n \n         ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\");\n \n         // merge\n         // Header-ID 1 + length 1 + one byte of data\n-        ze.setCentralDirectoryExtra(new byte[] {1, 0, 1, 0, 127});\n+        byte[] b = ExtraFieldUtilsTest.UNRECOGNIZED_HEADER.getBytes();\n+        ze.setCentralDirectoryExtra(new byte[] {b[0], b[1], 1, 0, 127});\n \n         ZipExtraField[] result = ze.getExtraFields();\n         assertEquals(\"first pass\", 2, result.length);\n         assertSame(a, result[0]);\n-        assertEquals(new ZipShort(1), result[1].getHeaderId());\n+        assertEquals(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER,\n+                     result[1].getHeaderId());\n         assertEquals(new ZipShort(0), result[1].getLocalFileDataLength());\n         assertEquals(new ZipShort(1), result[1].getCentralDirectoryLength());\n \n         a.setDirectory(true);\n         a.setMode(0755);\n         UnrecognizedExtraField u = new UnrecognizedExtraField();\n-        u.setHeaderId(new ZipShort(1));\n+        u.setHeaderId(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER);\n         u.setLocalFileDataData(new byte[0]);\n \n         ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\");\n         byte[] data1 = ze.getExtra();\n \n         UnrecognizedExtraField u2 = new UnrecognizedExtraField();\n-        u2.setHeaderId(new ZipShort(1));\n+        u2.setHeaderId(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER);\n         u2.setLocalFileDataData(new byte[] {1});\n \n         ze.addAsFirstExtraField(u2);", "timestamp": 1311247766, "metainfo": ""}