{"sha": "891f056511415cd83f5bdcaf3e2d1f8759483206", "log": "COMPRESS-258 read back some of the method's options as well  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java\n     }\n \n     /**\n+     * @return configuration options that have been used to create the given InputStream from the given Coder\n+     */\n+    Object getOptionsFromCoder(Coder coder, InputStream in) {\n+        return null;\n+    }\n+\n+    /**\n      * @return a stream that reads from in using the configured coder and password.\n      */\n     abstract InputStream decode(final InputStream in, final Coder coder, byte[] password) throws IOException;\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java\n     }\n \n     @Override\n-    InputStream decode(final InputStream in, final Coder coder, byte[] password)\n-        throws IOException {\n-        final int dictionarySizeBits = 0xff & coder.properties[0];\n-        if ((dictionarySizeBits & (~0x3f)) != 0) {\n-            throw new IOException(\"Unsupported LZMA2 property bits\");\n+    InputStream decode(final InputStream in, final Coder coder, byte[] password) throws IOException {\n+        try {\n+            int dictionarySize = getDictionarySize(coder);\n+            return new LZMA2InputStream(in, dictionarySize);\n+        } catch (IllegalArgumentException ex) {\n+            throw new IOException(ex.getMessage());\n         }\n-        if (dictionarySizeBits > 40) {\n-            throw new IOException(\"Dictionary larger than 4GiB maximum size\");\n-        }\n-        final int dictionarySize;\n-        if (dictionarySizeBits == 40) {\n-            dictionarySize = 0xFFFFffff;\n-        } else {\n-            dictionarySize = (2 | (dictionarySizeBits & 0x1)) << (dictionarySizeBits / 2 + 11);\n-        }\n-        return new LZMA2InputStream(in, dictionarySize);\n     }\n \n     @Override\n         };\n     }\n \n+    @Override\n+    Object getOptionsFromCoder(Coder coder, InputStream in) {\n+        return getDictionarySize(coder);\n+    }\n+\n     private int getDictSize(Object opts) {\n         if (opts instanceof LZMA2Options) {\n             return ((LZMA2Options) opts).getDictSize();\n         }\n         return numberOptionOrDefault(opts);\n+    }\n+\n+    private int getDictionarySize(Coder coder) throws IllegalArgumentException {\n+        final int dictionarySizeBits = 0xff & coder.properties[0];\n+        if ((dictionarySizeBits & (~0x3f)) != 0) {\n+            throw new IllegalArgumentException(\"Unsupported LZMA2 property bits\");\n+        }\n+        if (dictionarySizeBits > 40) {\n+            throw new IllegalArgumentException(\"Dictionary larger than 4GiB maximum size\");\n+        }\n+        if (dictionarySizeBits == 40) {\n+            return 0xFFFFffff;\n+        }\n+        return (2 | (dictionarySizeBits & 0x1)) << (dictionarySizeBits / 2 + 11);\n     }\n \n     private LZMA2Options getOptions(Object opts) throws IOException {\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n                 throw new IOException(\"Multi input/output stream coders are not yet supported\");\n             }\n             SevenZMethod method = SevenZMethod.byId(coder.decompressionMethodId);\n-            methods.addFirst(new SevenZMethodConfiguration(method));\n             inputStreamStack = Coders.addDecoder(inputStreamStack, coder, password);\n+            methods.addFirst(new SevenZMethodConfiguration(method,\n+                     Coders.findByMethod(method).getOptionsFromCoder(coder, inputStreamStack)));\n         }\n         entry.setContentMethods(methods);\n         if (folder.hasCrc) {\n--- a/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java\n import java.io.File;\n import java.io.IOException;\n import java.security.NoSuchAlgorithmException;\n+import java.util.Arrays;\n import javax.crypto.Cipher;\n import org.apache.commons.compress.AbstractTestCase;\n \n                                                     (byte) 0xAF, 0x27, 0x1D}, 6));\n     }\n \n+    public void testReadingBackLZMA2DictSize() throws Exception {\n+        File output = new File(dir, \"lzma2-dictsize.7z\");\n+        SevenZOutputFile outArchive = new SevenZOutputFile(output);\n+        try {\n+            outArchive.setContentMethods(Arrays.asList(new SevenZMethodConfiguration(SevenZMethod.LZMA2, 1 << 20)));\n+            SevenZArchiveEntry entry = new SevenZArchiveEntry();\n+            entry.setName(\"foo.txt\");\n+            outArchive.putArchiveEntry(entry);\n+            outArchive.write(new byte[] { 'A' });\n+            outArchive.closeArchiveEntry();\n+        } finally {\n+            outArchive.close();\n+        }\n+\n+        SevenZFile archive = new SevenZFile(output);\n+        try {\n+            SevenZArchiveEntry entry = archive.getNextEntry();\n+            SevenZMethodConfiguration m = entry.getContentMethods().iterator().next();\n+            assertEquals(SevenZMethod.LZMA2, m.getMethod());\n+            assertEquals(1 << 20, m.getOptions());\n+        } finally {\n+            archive.close();\n+        }\n+    }\n+\n     private void test7zUnarchive(File f, SevenZMethod m, byte[] password) throws Exception {\n         SevenZFile sevenZFile = new SevenZFile(f, password);\n         try {", "timestamp": 1393446785, "metainfo": ""}