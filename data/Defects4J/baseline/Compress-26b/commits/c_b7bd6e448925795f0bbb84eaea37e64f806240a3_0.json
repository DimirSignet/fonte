{"sha": "b7bd6e448925795f0bbb84eaea37e64f806240a3", "log": "add encryption related flags.  COMPRESS-89  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java\n  */\n public class GeneralPurposeBit {\n     /**\n+     * Indicates that the file is encrypted.\n+     */\n+    private static final int ENCRYPTION_FLAG = 1 << 0;\n+\n+    /**\n      * Indicates that a data descriptor stored after the file contents\n      * will hold CRC and size information.\n      */\n     private static final int DATA_DESCRIPTOR_FLAG = 1 << 3;\n+\n+    /**\n+     * Indicates strong encryption.\n+     */\n+    private static final int STRONG_ENCRYPTION_FLAG = 1 << 6;\n \n     /**\n      * Indicates that filenames are written in utf-8.\n \n     private boolean languageEncodingFlag = false;\n     private boolean dataDescriptorFlag = false;\n+    private boolean encryptionFlag = false;\n+    private boolean strongEncryptionFlag = false;\n \n     public GeneralPurposeBit() {\n     }\n     }\n \n     /**\n+     * whether the current entry is encrypted\n+     */\n+    public boolean usesEncryption() {\n+        return encryptionFlag;\n+    }\n+\n+    /**\n+     * whether the current entry will be encrypted\n+     */\n+    public void useEncryption(boolean b) {\n+        encryptionFlag = b;\n+    }\n+\n+    /**\n+     * whether the current entry is encrypted using strong encryption\n+     */\n+    public boolean usesStrongEncryption() {\n+        return encryptionFlag && strongEncryptionFlag;\n+    }\n+\n+    /**\n+     * whether the current entry will be encrypted  using strong encryption\n+     */\n+    public void useStrongEncryption(boolean b) {\n+        strongEncryptionFlag = b;\n+        if (b) {\n+            useEncryption(true);\n+        }\n+    }\n+\n+    /**\n      * Encodes the set bits in a form suitable for ZIP archives.\n      */\n     public byte[] encode() {\n             ZipShort.getBytes((dataDescriptorFlag ? DATA_DESCRIPTOR_FLAG : 0)\n                               |\n                               (languageEncodingFlag ? UFT8_NAMES_FLAG : 0)\n+                              |\n+                              (encryptionFlag ? ENCRYPTION_FLAG : 0)\n+                              |\n+                              (strongEncryptionFlag ? STRONG_ENCRYPTION_FLAG : 0)\n                               );\n     }\n \n         GeneralPurposeBit b = new GeneralPurposeBit();\n         b.useDataDescriptor((generalPurposeFlag & DATA_DESCRIPTOR_FLAG) != 0);\n         b.useUTF8ForNames((generalPurposeFlag & UFT8_NAMES_FLAG) != 0);\n+        b.useStrongEncryption((generalPurposeFlag & STRONG_ENCRYPTION_FLAG)\n+                              != 0);\n+        b.useEncryption((generalPurposeFlag & ENCRYPTION_FLAG) != 0);\n         return b;\n     }\n }\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java\n     public void testDefaults() {\n         assertFalse(new GeneralPurposeBit().usesDataDescriptor());\n         assertFalse(new GeneralPurposeBit().usesUTF8ForNames());\n+        assertFalse(new GeneralPurposeBit().usesEncryption());\n+        assertFalse(new GeneralPurposeBit().usesStrongEncryption());\n         byte[] b = new byte[2];\n         assertTrue(Arrays.equals(b, new GeneralPurposeBit().encode()));\n     }\n                     .usesDataDescriptor());\n         assertFalse(GeneralPurposeBit.parse(new byte[2], 0)\n                     .usesUTF8ForNames());\n+        assertFalse(GeneralPurposeBit.parse(new byte[2], 0)\n+                    .usesEncryption());\n+        assertFalse(GeneralPurposeBit.parse(new byte[2], 0)\n+                    .usesStrongEncryption());\n         assertTrue(GeneralPurposeBit.parse(new byte[] {(byte) 255, (byte) 255},\n                                            0)\n                    .usesDataDescriptor());\n         assertTrue(GeneralPurposeBit.parse(new byte[] {(byte) 255, (byte) 255},\n                                            0)\n                    .usesUTF8ForNames());\n+        assertTrue(GeneralPurposeBit.parse(new byte[] {(byte) 255, (byte) 255},\n+                                           0)\n+                   .usesEncryption());\n+        assertTrue(GeneralPurposeBit.parse(new byte[] {(byte) 255, (byte) 255},\n+                                           0)\n+                   .usesStrongEncryption());\n     }\n \n     public void testDataDescriptor() {\n         b.useUTF8ForNames(true);\n         assertTrue(Arrays.equals(flags, b.encode()));\n     }\n+\n+    public void testEncryption() {\n+        byte[] flags = new byte[] {(byte) 1, (byte) 0};\n+        assertTrue(GeneralPurposeBit.parse(flags, 0).usesEncryption());\n+        GeneralPurposeBit b = new GeneralPurposeBit();\n+        b.useEncryption(true);\n+        assertTrue(Arrays.equals(flags, b.encode()));\n+    }\n+\n+    public void testStringEncryption() {\n+        byte[] flags = new byte[] {(byte) 65, (byte) 0};\n+        assertTrue(GeneralPurposeBit.parse(flags, 0).usesStrongEncryption());\n+        GeneralPurposeBit b = new GeneralPurposeBit();\n+        b.useStrongEncryption(true);\n+        assertTrue(b.usesEncryption());\n+        assertTrue(Arrays.equals(flags, b.encode()));\n+\n+        flags = new byte[] {(byte) 64, (byte) 0};\n+        assertFalse(GeneralPurposeBit.parse(flags, 0).usesStrongEncryption());\n+    }\n+\n }", "timestamp": 1266574142, "metainfo": ""}