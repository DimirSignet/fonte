{"sha": "00fe3063203024a1793f0f81c6627890d87fadfd", "log": "allow a stack of methods when writing 7z files - preparation for COMPRESS-266 and needed by COMPRESS-257 as well  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n import java.io.RandomAccessFile;\n import java.util.ArrayList;\n import java.util.BitSet;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n+import java.util.LinkedList;\n import java.util.zip.CRC32;\n \n import org.apache.commons.compress.archivers.ArchiveEntry;\n     private long fileBytesWritten = 0;\n     private boolean finished = false;\n     private CountingOutputStream currentOutputStream;\n-    private SevenZMethod contentCompression = SevenZMethod.LZMA2;\n+    private Iterable<SevenZMethod> contentMethods = Collections.singletonList(SevenZMethod.LZMA2);\n     \n     /**\n      * Opens file to write a 7z archive to.\n      * <p>Currently only {@link SevenZMethod#COPY}, {@link\n      * SevenZMethod#LZMA2}, {@link SevenZMethod#BZIP2} and {@link\n      * SevenZMethod#DEFLATE} are supported.</p>\n+     *\n+     * <p>This is a short form for passing a single-element iterable\n+     * to {@link #setContentMethods}.</p>\n      */\n     public void setContentCompression(SevenZMethod method) {\n-        this.contentCompression = method;\n+        setContentMethods(Collections.singletonList(method));\n+    }\n+\n+    /**\n+     * Sets the (compression) methods to use for entry contents - the\n+     * default is LZMA2.\n+     *\n+     * <p>Currently only {@link SevenZMethod#COPY}, {@link\n+     * SevenZMethod#LZMA2}, {@link SevenZMethod#BZIP2} and {@link\n+     * SevenZMethod#DEFLATE} are supported.</p>\n+     *\n+     * <p>The methods will be consulted in iteration order to create\n+     * the final output.</p>\n+     *\n+     * @since 1.8\n+     */\n+    public void setContentMethods(Iterable<SevenZMethod> methods) {\n+        this.contentMethods = methods;\n     }\n \n     /**\n \n     private CountingOutputStream setupFileOutputStream() throws IOException {\n         OutputStream out = new OutputStreamWrapper();\n-        return new CountingOutputStream(Coders\n-                                        .addEncoder(out,\n-                                                    contentCompression,\n-                                                    null)) {\n+        for (SevenZMethod m : reverse(contentMethods)) {\n+            out = Coders.addEncoder(out, m, null);\n+        }\n+        return new CountingOutputStream(out) {\n             @Override\n             public void write(final int b) throws IOException {\n                 super.write(b);\n         };\n     }\n \n+    private static <T> Iterable<T> reverse(Iterable<T> i) {\n+        LinkedList<T> l = new LinkedList();\n+        for (T t : i) {\n+            l.addFirst(t);\n+        }\n+        return l;\n+    }\n+\n     private void writeHeader(final DataOutput header) throws IOException {\n         header.write(NID.kHeader);\n         \n     }\n     \n     private void writeFolder(final DataOutput header) throws IOException {\n-        // one coder\n-        writeUint64(header, 1);\n-        byte[] id = contentCompression.getId();\n-        byte[] properties = contentCompression.getProperties();\n-\n-        int codecFlags = id.length;\n-        if (properties.length > 0) {\n-            codecFlags |= 0x20;\n-        }\n-        header.write(codecFlags);\n-        header.write(id);\n-\n-        if (properties.length > 0) {\n-            header.write(properties.length);\n-            header.write(properties);\n-        }\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        int numCoders = 0;\n+        for (SevenZMethod m : contentMethods) {\n+            numCoders++;\n+            byte[] id = m.getId();\n+            byte[] properties = m.getProperties();\n+\n+            int codecFlags = id.length;\n+            if (properties.length > 0) {\n+                codecFlags |= 0x20;\n+            }\n+            bos.write(codecFlags);\n+            bos.write(id);\n+\n+            if (properties.length > 0) {\n+                bos.write(properties.length);\n+                bos.write(properties);\n+            }\n+        }\n+\n+        writeUint64(header, numCoders);\n+        header.write(bos.toByteArray());\n     }\n     \n     private void writeSubStreamsInfo(final DataOutput header) throws IOException {", "timestamp": 1393185043, "metainfo": ""}