{"sha": "91401bff7493957e0b7f5a91151d005a1d3b7a27", "log": "Javadoc and test corrections  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n     /**\n      * Fill buffer with octal number, with leading zeroes\n      * \n+     * The output for negative numbers is not specified,\n+     * but currently the method returns a buffer filled with zeros.\n+     * This may change.\n+     * \n      * @param value number to convert to octal (assumed >=0)\n      * @param buffer destination buffer\n      * @param offset starting offset in buffer\n      * Adds a trailing space and NUL to end of the buffer.\n      * [Appears to be standard for V7 Unix BSD]\n      * Converts the long value (assumed positive) to the buffer.\n-     * Adds leading spaces to the buffer.\n-     * [V7 Unix and Posix use leading zeroes]\n+     * Adds leading zeros to the buffer.\n      * \n      * @param value The value to write\n      * @param buf The buffer to receive the output\n \n     /**\n      * Write an octal long integer into a buffer.\n+     * Converts the long value (assumed positive) to the buffer.\n+     * Adds leading zeros to the buffer.\n      * The buffer is terminated with a space.\n      * \n      * @param value The value to write as octal\n     /**\n      * Writes an octal value into a buffer.\n      *\n+     * Converts the long value (assumed positive) to the buffer.\n+     * Adds leading zeros to the buffer.\n      * Checksum is followed by NUL and then space.\n      *\n      * @param value The value to convert\n--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java\n         assertEquals(0  , buffer[buffer.length-2]);\n         assertEquals('3', buffer[buffer.length-3]); // end of number\n     }\n+    \n+    public void testNegative() {\n+        byte [] buffer = new byte[10];\n+        TarUtils.formatUnsignedOctalString(-1, buffer, 0, buffer.length);\n+        // Currently negative numbers generate all zero buffer. This may need to change.\n+        assertEquals(\"0000000000\", new String(buffer));\n+        \n+    }\n }", "timestamp": 1238544049, "metainfo": ""}