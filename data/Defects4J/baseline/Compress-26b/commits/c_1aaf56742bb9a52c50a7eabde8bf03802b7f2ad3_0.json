{"sha": "1aaf56742bb9a52c50a7eabde8bf03802b7f2ad3", "log": "wire multiple codecs by the specified binding pairs rather than relying on order  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java\n  *\n  */\n package org.apache.commons.compress.archivers.sevenz;\n+\n+import java.util.LinkedList;\n \n /**\n  * The unit of solid compression.\n     long crc;\n     /// The number of unpack substreams, one per non-empty file in this folder.\n     int numUnpackSubStreams;\n+\n+    /**\n+     * Sorts Coders using bind pairs.\n+     * <p>The first coder reads from the packed stream (we currently\n+     * only support single input stream decoders), the second reads\n+     * from the output of the first and so on.</p>\n+     */\n+    Iterable<Coder> getOrderedCoders() {\n+        LinkedList<Coder> l = new LinkedList<Coder>();\n+        int current = (int) packedStreams[0]; // more that 2^31 coders?\n+        while (current != -1) {\n+            l.addLast(coders[current]);\n+            int pair = findBindPairForOutStream(current);\n+            current = pair != -1 ? (int) bindPairs[pair].inIndex : -1;\n+        }\n+        return l;\n+    }\n \n     int findBindPairForInStream(final int index) {\n         for (int i = 0; i < bindPairs.length; i++) {\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n         file.seek(folderOffset);\n         InputStream inputStreamStack = new BoundedRandomAccessFileInputStream(file,\n                 archive.packSizes[firstPackStreamIndex]);\n-        for (final Coder coder : folder.coders) {\n+        for (final Coder coder : folder.getOrderedCoders()) {\n             if (coder.numInStreams != 1 || coder.numOutStreams != 1) {\n                 throw new IOException(\"Multi input/output stream coders are not yet supported\");\n             }\n         file.seek(folderOffset);\n         InputStream inputStreamStack = new BoundedRandomAccessFileInputStream(file,\n                 archive.packSizes[firstPackStreamIndex]);\n-        for (final Coder coder : folder.coders) {\n+        for (final Coder coder : folder.getOrderedCoders()) {\n             if (coder.numInStreams != 1 || coder.numOutStreams != 1) {\n                 throw new IOException(\"Multi input/output stream coders are not yet supported\");\n             }", "timestamp": 1393275203, "metainfo": ""}