{"sha": "be5d8aa9b6449789a4b580d636ef36770ca5d5f7", "log": "Changed the FileInputStream and FileOutputStream in the method signatures into InputStream and OutputStream  ", "commit": "\n--- a/src/java/org/apache/commons/compress/AbstractArchive.java\n+++ b/src/java/org/apache/commons/compress/AbstractArchive.java\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.OutputStream;\n import java.util.ArrayList;\n import java.util.Iterator;\n-\n \n /**\n  * Abstract implementation of an archiver\n \t/* (non-Javadoc)\n \t * @see org.apache.commons.compress.Archive#save(java.io.FileOutputStream)\n \t */\n-\tpublic void save(FileOutputStream output) throws ArchiveException {\n+\tpublic void save(OutputStream output) throws ArchiveException {\n \t\tdoSave(output);\n \t}\n \t\n \t * @param output - stream to archive to\n \t * @throws ArchiveException \n \t */\n-\tprotected abstract void doSave(FileOutputStream output) throws ArchiveException;\n+\tprotected abstract void doSave(OutputStream output) throws ArchiveException;\n \t\n \t/* (non-Javadoc)\n \t * @see org.apache.commons.compress.Archive#getArchive()\n--- a/src/java/org/apache/commons/compress/AbstractCompressor.java\n+++ b/src/java/org/apache/commons/compress/AbstractCompressor.java\n \t/* (non-Javadoc)\n \t * @see org.apache.commons.compress.Compressor#compressStream(java.io.FileInputStream)\n \t */\n-\tpublic InputStream compress(FileInputStream input) throws CompressException {\n+\tpublic InputStream compress(InputStream input) throws CompressException {\n \t\tFileOutputStream outputStream = null;\n \t\tFileOutputStream tempFileOutputStream = null;\n \t\ttry {\n \t/* (non-Javadoc)\n \t * @see org.apache.commons.compress.Decompressor#decompress(java.io.FileInputStream)\n \t */\n-\tpublic InputStream decompress(FileInputStream input) \n+\tpublic InputStream decompress(InputStream input) \n \t\tthrows CompressException {\n \t\tFile temp;\n \t\tInputStream result;\n--- a/src/java/org/apache/commons/compress/Archive.java\n+++ b/src/java/org/apache/commons/compress/Archive.java\n \n import java.io.File;\n import java.io.FileNotFoundException;\n-import java.io.FileOutputStream;\n import java.io.IOException;\n+import java.io.OutputStream;\n import java.util.Iterator;\n /**\n  * Archive is the interface which defines all operations \n \t * @throws ArchiveException if there is no destination file or files to be packed\n \t * @return true, if the operation has been ended without exceptions\n \t */\n-\tpublic void save(FileOutputStream output) throws ArchiveException;\n+\tpublic void save(OutputStream output) throws ArchiveException;\n \n \t/**\n \t * Packs this file. \n--- a/src/java/org/apache/commons/compress/Compressor.java\n+++ b/src/java/org/apache/commons/compress/Compressor.java\n package org.apache.commons.compress;\n \n import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n import java.io.InputStream;\n+import java.io.OutputStream;\n+\n /**\n  * The Compressor Interface defines all operations for \n  * the compress/decompress actions.\n \t * InputStream to the compressed File\n \t * \n \t * @param input File to compress\n-\t * @return FileInputStream of the compressed file\n+\t * @return InputStream of the compressed file\n \t * @throws CompressException if the Compressor reports an error\n \t */\n-\tpublic InputStream compress(File input) \n-\t\tthrows CompressException;\n+\tpublic InputStream compress(File input) throws CompressException;\n \t\n \t/**\n \t * Compresses this InputStream and returns an \n \t * @return Stream to the compressed file\n \t * @throws CompressException if the Compressor reports an error\n \t */\n-\tpublic InputStream compress(FileInputStream input) \n-\t\tthrows CompressException;\n+\tpublic InputStream compress(InputStream input) throws CompressException;\n \n \t/**\n \t * Compresses the file input and creates a file in the same\n \t * @param input the file to compress\n \t * @throws CompressException if the Compressor reports an error\n \t */\n-\tpublic void compressToHere(File input) \n-\t\tthrows CompressException;\n+\tpublic void compressToHere(File input) throws CompressException;\n \n \t/**\n \t * Creates the file \"output\" with the compressed\n \t * @param output the file to create\n \t * @throws CompressException if the Compressor reports an error\n \t */\n-\tpublic void compressTo(File input, File output) \n-\t\tthrows CompressException;\n+\tpublic void compressTo(File input, File output) throws CompressException;\n \t\n \t/**\n \t * Compresses the input stream and writes the compressed\n \t * @param output OutputStream to which the byte shall be written\n \t * @throws CompressException if the Compressor reports an error\n \t */\n-\tpublic void compressTo(FileInputStream input, FileOutputStream output) \n-\t\tthrows CompressException;\n+\tpublic void compressTo(InputStream input, OutputStream output) throws CompressException;\n \t\n \t/**\n \t * Decompresses a file and returns an InputStream\n \t * @param input file to decompress\n \t * @return the decompressed file as an inputstream\n \t */\n-\tpublic InputStream decompress(File input) \n-\t\tthrows CompressException;\n+\tpublic InputStream decompress(File input) throws CompressException;\n \t\n \t/**\n \t * Decompresses a file and returns an InputStream\n \t * @param input inputstream to decompress\n \t * @return the decompressed InputStream\n \t */\n-\tpublic InputStream decompress(FileInputStream inputStream) \n-\t\tthrows CompressException;;\n+\tpublic InputStream decompress(InputStream inputStream) throws CompressException;;\n \t\n \t/**\n \t * Decompresses this file and writes the decompressed byte to the output file\n \t * @param output File to write the decompressed bytes to\n \t * @throws DecompressException if the Compressor reports an error\n \t */\n-\tpublic void decompressTo(File input, File output) \n-\t\tthrows CompressException;\n+\tpublic void decompressTo(File input, File output) throws CompressException;\n \t\n \t/**\n \t * Decompresses this file and writes the decompressed file to the output-stream\n \t * @param output Stream to write the decompressed bytes to\n \t * @throws DecompressException if the Compressor reports an error\n \t */\n-\tpublic void decompressTo(FileInputStream input, FileOutputStream output) \n-\t\tthrows CompressException;\n+\tpublic void decompressTo(InputStream input, OutputStream output) throws CompressException;\n }\n--- a/src/java/org/apache/commons/compress/archivers/tar/TarArchive.java\n+++ b/src/java/org/apache/commons/compress/archivers/tar/TarArchive.java\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.OutputStream;\n import java.util.Iterator;\n \n import org.apache.commons.compress.AbstractArchive;\n \t/* (non-Javadoc)\n \t * @see org.apache.commons.compress.AbstractArchive#doSave(java.io.FileOutputStream)\n \t */\n-\tpublic void doSave(FileOutputStream output) throws ArchiveException {\n+\tpublic void doSave(OutputStream output) throws ArchiveException {\n \t\t// Stream initializing\n \t\t//BufferedInputStream origin = null;\n \t\t\n--- a/src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java\n+++ b/src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.OutputStream;\n import java.util.Iterator;\n import java.util.zip.ZipInputStream;\n \n \t/* (non-Javadoc)\n \t * @see org.apache.commons.compress.Archive#pack()\n \t */\n-\tprotected void doSave(FileOutputStream output) throws ArchiveException {\n+\tprotected void doSave(OutputStream output) throws ArchiveException {\n \t\t// Stream initializing\n \t\tBufferedInputStream origin = null;\n \t\t\n--- a/src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java\n+++ b/src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java\n  */\n package org.apache.commons.compress.compressors.bzip2;\n \n-import java.io.FileInputStream;\n import java.io.FileNotFoundException;\n-import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n \t}\n \n \t/* (non-Javadoc)\n-\t * @see org.apache.commons.compress.Compressor#compress(java.io.FileInputStream, java.io.FileOutputStream)\n+\t * @see org.apache.commons.compress.Compressor#compress(java.io.InputStream, java.io.OutputStream)\n \t */\n-\tpublic void compressTo(FileInputStream inputStream, FileOutputStream outputStream) throws CompressException {\n+\tpublic void compressTo(InputStream in, OutputStream out) throws CompressException {\n \t\tBZip2OutputStream outputBZStream = null;\n \t\ttry {\n-\t\t\toutputBZStream = getPackedOutput( outputStream );\n-\t\t\tCompressUtils.copy( inputStream, outputBZStream );\n+\t\t\toutputBZStream = getPackedOutput( out );\n+\t\t\tCompressUtils.copy( in, outputBZStream );\n \t\t} catch (FileNotFoundException e) {\n \t\t\tthrow new CompressException(\"File could not be found\", e);\n \t\t} catch (IOException e) {\n \t\n \t/* \n \t * This decompress method uses a special InputStream Class for BZ2\n-\t * @see org.apache.commons.compress.Compressor#decompress(java.io.FileInputStream, java.io.FileOutputStream)\n+\t * @see org.apache.commons.compress.Compressor#decompress(java.io.InputStream, java.io.OutputStream)\n \t */\n-\tpublic void decompressTo(FileInputStream input, FileOutputStream outputStream) \n-\t\tthrows CompressException {\n+\tpublic void decompressTo(InputStream in, OutputStream out) throws CompressException {\n \t\tBZip2InputStream inputStream = null;\n \t\ttry {\n-\t\t\tinputStream = getPackedInput( input );\n-\t\t\tCompressUtils.copy( inputStream, outputStream );\n+\t\t\tinputStream = getPackedInput( in );\n+\t\t\tCompressUtils.copy( inputStream, out );\n \t\t} catch (IOException e) {\n \t\t\tthrow new CompressException(\"An I/O Exception has occured\", e);\n \t\t}", "timestamp": 1213710934, "metainfo": ""}