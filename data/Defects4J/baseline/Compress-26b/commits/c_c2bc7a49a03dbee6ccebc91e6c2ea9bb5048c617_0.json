{"sha": "c2bc7a49a03dbee6ccebc91e6c2ea9bb5048c617", "log": "properly parse non-ASCII content in PAX extension headers.  COMPRESS-184  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n \n package org.apache.commons.compress.archivers.tar;\n \n+import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.InputStreamReader;\n-import java.io.Reader;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Map.Entry;\n     }\n \n     private void paxHeaders() throws IOException{\n-        Reader br = new InputStreamReader(this, \"UTF-8\") {\n-                @Override\n-                public void close() {\n-                    // make sure GC doesn't close \"this\" before we are done\n-                }\n-            };\n-        Map<String, String> headers = null;\n-        try {\n-            headers = parsePaxHeaders(br);\n-        } finally {\n-            // NO-OP but makes FindBugs happy\n-            br.close();\n-        }\n-\n+        Map<String, String> headers = parsePaxHeaders(this);\n         getNextEntry(); // Get the actual file entry\n         applyPaxHeadersToCurrentEntry(headers);\n     }\n \n-    Map<String, String> parsePaxHeaders(Reader br) throws IOException {\n+    Map<String, String> parsePaxHeaders(InputStream i) throws IOException {\n         Map<String, String> headers = new HashMap<String, String>();\n         // Format is \"length keyword=value\\n\";\n         while(true){ // get length\n             int ch;\n             int len = 0;\n             int read = 0;\n-            while((ch = br.read()) != -1){\n+            while((ch = i.read()) != -1) {\n                 read++;\n                 if (ch == ' '){ // End of length string\n                     // Get keyword\n-                    StringBuffer sb = new StringBuffer();\n-                    while((ch = br.read()) != -1){\n+                    ByteArrayOutputStream coll = new ByteArrayOutputStream();\n+                    while((ch = i.read()) != -1) {\n                         read++;\n                         if (ch == '='){ // end of keyword\n-                            String keyword = sb.toString();\n+                            String keyword = coll.toString(\"UTF-8\");\n                             // Get rest of entry\n-                            char[] cbuf = new char[len-read];\n-                            int got = br.read(cbuf);\n+                            byte[] rest = new byte[len - read];\n+                            int got = i.read(rest);\n                             if (got != len - read){\n                                 throw new IOException(\"Failed to read \"\n                                                       + \"Paxheader. Expected \"\n                                                       + (len - read)\n-                                                      + \" chars, read \"\n+                                                      + \" bytes, read \"\n                                                       + got);\n                             }\n                             // Drop trailing NL\n-                            String value = new String(cbuf, 0,\n-                                                      len - read - 1);\n+                            String value = new String(rest, 0,\n+                                                      len - read - 1, \"UTF-8\");\n                             headers.put(keyword, value);\n                             break;\n                         }\n-                        sb.append((char) ch);\n+                        coll.write((byte) ch);\n                     }\n                     break; // Processed single header\n                 }\n--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java\n \n package org.apache.commons.compress.archivers.tar;\n \n+import java.io.ByteArrayInputStream;\n import java.io.File;\n import java.io.FileInputStream;\n-import java.io.StringReader;\n import java.net.URI;\n import java.net.URL;\n import java.util.Calendar;\n     @Test\n     public void readSimplePaxHeader() throws Exception {\n         Map<String, String> headers = new TarArchiveInputStream(null)\n-            .parsePaxHeaders(new StringReader(\"30 atime=1321711775.972059463\\n\"));\n+            .parsePaxHeaders(new ByteArrayInputStream(\"30 atime=1321711775.972059463\\n\"\n+                                                      .getBytes(\"UTF-8\")));\n         assertEquals(1, headers.size());\n         assertEquals(\"1321711775.972059463\", headers.get(\"atime\"));\n     }\n     @Test\n     public void readPaxHeaderWithEmbeddedNewline() throws Exception {\n         Map<String, String> headers = new TarArchiveInputStream(null)\n-            .parsePaxHeaders(new StringReader(\"28 comment=line1\\nline2\\nand3\\n\"));\n+            .parsePaxHeaders(new ByteArrayInputStream(\"28 comment=line1\\nline2\\nand3\\n\"\n+                                                      .getBytes(\"UTF-8\")));\n         assertEquals(1, headers.size());\n         assertEquals(\"line1\\nline2\\nand3\", headers.get(\"comment\"));\n+    }\n+\n+    @Test\n+    public void readNonAsciiPaxHeader() throws Exception {\n+        String ae = \"\\u00e4\";\n+        String line = \"11 path=\"+ ae + \"\\n\";\n+        assertEquals(11, line.getBytes(\"UTF-8\").length);\n+        Map<String, String> headers = new TarArchiveInputStream(null)\n+            .parsePaxHeaders(new ByteArrayInputStream(line.getBytes(\"UTF-8\")));\n+        assertEquals(1, headers.size());\n+        assertEquals(ae, headers.get(\"path\"));\n     }\n \n     @Test", "timestamp": 1332510479, "metainfo": ""}