{"sha": "a45e9cb35e8b68c83debcaec956475ce8461743f", "log": "only write and close is allowed after the call of finish  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\n     }\n \n     public void closeArchiveEntry() throws IOException {\n+        if(finished) {\n+            throw new IOException(\"Stream has already been finished\");\n+        }\n         if (prevEntry != null && haveUnclosedEntry && (entryOffset % 2) != 0) {\n             out.write('\\n'); // Pad byte\n             archiveOffset++;\n     }\n \n     public void putArchiveEntry( final ArchiveEntry pEntry ) throws IOException {\n+        if(finished) {\n+            throw new IOException(\"Stream has already been finished\");\n+        }\n+        \n         ArArchiveEntry pArEntry = (ArArchiveEntry)pEntry;\n         if (prevEntry == null) {\n             archiveOffset += writeArchiveHeader();\n \n     public ArchiveEntry createArchiveEntry(File inputFile, String entryName)\n             throws IOException {\n+        if(finished) {\n+            throw new IOException(\"Stream has already been finished\");\n+        }\n         return new ArArchiveEntry(inputFile, entryName);\n     }\n \n--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n      * @throws ClassCastException if entry is not an instance of CpioArchiveEntry\n      */\n     public void putArchiveEntry(ArchiveEntry entry) throws IOException {\n+        if(finished) {\n+            throw new IOException(\"Stream has already been finished\");\n+        }\n+        \n         CpioArchiveEntry e = (CpioArchiveEntry) entry;\n         ensureOpen();\n         if (this.entry != null) {\n      * ()\n      */\n     public void closeArchiveEntry() throws IOException {\n+        if(finished) {\n+            throw new IOException(\"Stream has already been finished\");\n+        }\n+        \n         ensureOpen();\n \n         if (this.entry.getSize() != this.written) {\n      */\n     public ArchiveEntry createArchiveEntry(File inputFile, String entryName)\n             throws IOException {\n+        if(finished) {\n+            throw new IOException(\"Stream has already been finished\");\n+        }\n         return new CpioArchiveEntry(inputFile, entryName);\n     }\n \n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n      * @throws ClassCastException if archiveEntry is not an instance of TarArchiveEntry\n      */\n     public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {\n+        if(finished) {\n+            throw new IOException(\"Stream has already been finished\");\n+        }\n         TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;\n         if (entry.getName().length() >= TarConstants.NAMELEN) {\n \n      * @throws IOException on error\n      */\n     public void closeArchiveEntry() throws IOException {\n+        if(finished) {\n+            throw new IOException(\"Stream has already been finished\");\n+        }\n         if (assemLen > 0) {\n             for (int i = assemLen; i < assemBuf.length; ++i) {\n                 assemBuf[i] = 0;\n \n     public ArchiveEntry createArchiveEntry(File inputFile, String entryName)\n             throws IOException {\n+        if(finished) {\n+            throw new IOException(\"Stream has already been finished\");\n+        }\n         return new TarArchiveEntry(inputFile, entryName);\n     }\n }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n     private static final int WORD = 4;\n     static final int BUFFER_SIZE = 512;\n     \n-    /** indicates if this archive is finished */\n-    private boolean finished = false;\n+    /** indicates if this archive is finished. protected for use in Jar implementation */\n+    protected boolean finished = false;\n     \n     /* \n      * Apparently Deflater.setInput gets slowed down a lot on Sun JVMs\n     /**\n      * whether to create UnicodePathExtraField-s for each entry.\n      */\n-    private UnicodeExtraFieldPolicy createUnicodeExtraFields =\n-        UnicodeExtraFieldPolicy.NEVER;\n+    private UnicodeExtraFieldPolicy createUnicodeExtraFields = UnicodeExtraFieldPolicy.NEVER;\n \n     /**\n      * Creates a new ZIP OutputStream filtering the underlying stream.\n      * @throws IOException on error\n      */\n     public void closeArchiveEntry() throws IOException {\n+        if(finished) {\n+            throw new IOException(\"Stream has already been finished\");\n+        }\n+        \n         if (entry == null) {\n             return;\n         }\n     /** {@inheritDoc} */\n  // @throws ClassCastException if entry is not an instance of ZipArchiveEntry\n     public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {\n+        if(finished) {\n+            throw new IOException(\"Stream has already been finished\");\n+        }\n+        \n         closeArchiveEntry();\n \n         entry = ((ZipArchiveEntry) archiveEntry);\n         /**\n          * Always create Unicode extra fields.\n          */\n-        public static final UnicodeExtraFieldPolicy ALWAYS =\n-            new UnicodeExtraFieldPolicy(\"always\");\n+        public static final UnicodeExtraFieldPolicy ALWAYS = new UnicodeExtraFieldPolicy(\"always\");\n         /**\n          * Never create Unicode extra fields.\n          */\n-        public static final UnicodeExtraFieldPolicy NEVER =\n-            new UnicodeExtraFieldPolicy(\"never\");\n+        public static final UnicodeExtraFieldPolicy NEVER = new UnicodeExtraFieldPolicy(\"never\");\n         /**\n          * Create Unicode extra fields for filenames that cannot be\n          * encoded using the specified encoding.\n \n     public ArchiveEntry createArchiveEntry(File inputFile, String entryName)\n             throws IOException {\n+        if(finished) {\n+            throw new IOException(\"Stream has already been finished\");\n+        }\n         return new ZipArchiveEntry(inputFile, entryName);\n     }\n }", "timestamp": 1240855084, "metainfo": ""}