{"sha": "393d3ee50e82508a205b4737921819d225700040", "log": "sync with trunk - note to self, don't use svn merge without a prior svn up on trunk's root  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.apache.commons.compress.archivers.tar;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.net.URI;\n+import java.net.URL;\n+import junit.framework.TestCase;\n+\n+public class SparseFilesTest extends TestCase {\n+\n+    public void testOldGNU() throws Throwable {\n+        URL tar = getClass().getResource(\"/oldgnu_sparse.tar\");\n+        File file = new File(new URI(tar.toString()));\n+        TarArchiveInputStream tin = null;\n+        try {\n+            tin = new TarArchiveInputStream(new FileInputStream(file));\n+            TarArchiveEntry ae = tin.getNextTarEntry();\n+            assertEquals(\"sparsefile\", ae.getName());\n+            assertTrue(ae.isGNUSparse());\n+            assertFalse(tin.canReadEntryData(ae));\n+        } finally {\n+            if (tin != null) {\n+                tin.close();\n+            }\n+        }\n+    }\n+}\n+\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java\n         register(JarMarker.class);\n         register(UnicodePathExtraField.class);\n         register(UnicodeCommentExtraField.class);\n+        register(Zip64ExtendedInformationExtraField.class);\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n      */\n     private int method = -1;\n \n+    /**\n+     * The {@link java.util.zip.ZipEntry#setSize} method in the base\n+     * class throws an IllegalArgumentException if the size is bigger\n+     * than 2GB for Java versions < 7.  Need to keep our own size\n+     * information for Zip64 support.\n+     */\n+    private long size = SIZE_UNKNOWN;\n+\n     private int internalAttributes = 0;\n     private int platform = PLATFORM_FAT;\n     private long externalAttributes = 0;\n             setExtra();\n         }\n         setMethod(entry.getMethod());\n+        this.size = entry.getSize();\n     }\n \n     /**\n      */\n     protected void setName(String name) {\n         this.name = name;\n+    }\n+\n+    /**\n+     * Gets the uncompressed size of the entry data.\n+     * @return the entry size\n+     */\n+    public long getSize() {\n+        return size;\n+    }\n+\n+    /**\n+     * Sets the uncompressed size of the entry data.\n+     * @param size the uncompressed size in bytes\n+     * @exception IllegalArgumentException if the specified size is less\n+     *            than 0\n+     */\n+    public void setSize(long size) {\n+        if (size < 0) {\n+            throw new IllegalArgumentException(\"invalid entry size\");\n+        }\n+        this.size = size;\n     }\n \n     /**", "timestamp": 1311583749, "metainfo": ""}