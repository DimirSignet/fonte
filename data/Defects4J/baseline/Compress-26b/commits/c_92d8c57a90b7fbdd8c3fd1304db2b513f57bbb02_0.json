{"sha": "92d8c57a90b7fbdd8c3fd1304db2b513f57bbb02", "log": "explicitly fail when ZipArchiveInputStream reads a split/spanned archive  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.java\n \n     private final Feature reason;\n     private final ZipArchiveEntry entry;\n-    private static final long serialVersionUID = 4430521921766595597L;\n+    private static final long serialVersionUID = 20130101L;\n \n     /**\n      * Creates an exception.\n               +  \"' used in entry \" + entry.getName());\n         this.reason = Feature.METHOD;\n         this.entry = entry;\n+    }\n+\n+    /**\n+     * Creates an exception when the whole archive uses an unsupported\n+     * feature.\n+     *\n+     * @param reason the feature that is not supported\n+     */\n+    public UnsupportedZipFeatureException(Feature reason) {\n+        super(\"unsupported feature \" + reason +  \" used in archive.\");\n+        this.reason = reason;\n+        this.entry = null;\n     }\n \n     /**\n          * The entry uses a data descriptor.\n          */\n         public static final Feature DATA_DESCRIPTOR = new Feature(\"data descriptor\");\n+        /**\n+         * The archive uses splitting or spanning.\n+         * @since 1.5\n+         */\n+        public static final Feature SPLITTING = new Feature(\"splitting\");\n \n         private final String name;\n \n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n     }\n \n     public ZipArchiveEntry getNextZipEntry() throws IOException {\n+        boolean firstEntry = true;\n         if (closed || hitCentralDirectory) {\n             return null;\n         }\n         if (current != null) {\n             closeEntry();\n-        }\n+            firstEntry = false;\n+        }\n+\n         byte[] lfh = new byte[LFH_LEN];\n         try {\n-            readFully(lfh);\n+            if (firstEntry) {\n+                // split archives have a special signature before the\n+                // first local file header - look for it and fail with\n+                // the appropriate error message if this is a split\n+                // archive.\n+                readFirstLocalFileHeader(lfh);\n+            } else {\n+                readFully(lfh);\n+            }\n         } catch (EOFException e) {\n             return null;\n         }\n+            \n         ZipLong sig = new ZipLong(lfh);\n         if (sig.equals(ZipLong.CFH_SIG)) {\n             hitCentralDirectory = true;\n \n         processZip64Extra(size, cSize);\n         return current.entry;\n+    }\n+\n+    /**\n+     * Fills the given array with the first local file header and\n+     * deals with splitting/spanning markers that may prefix the first\n+     * LFH.\n+     */\n+    private void readFirstLocalFileHeader(byte[] lfh) throws IOException {\n+        readFully(lfh);\n+        ZipLong sig = new ZipLong(lfh);\n+        if (sig.equals(ZipLong.DD_SIG)) {\n+            throw new \n+                UnsupportedZipFeatureException(UnsupportedZipFeatureException\n+                                               .Feature.SPLITTING);\n+        }\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java\n     public static final ZipLong LFH_SIG = new ZipLong(0X04034B50L);\n \n     /**\n-     * Data Descriptor signature\n+     * Data Descriptor signature.\n+     *\n+     * <p>Actually, PKWARE uses this as marker for split/spanned\n+     * archives and other archivers have started to use it as Data\n+     * Descriptor signature (as well).</p>\n      * @since 1.1\n      */\n     public static final ZipLong DD_SIG = new ZipLong(0X08074B50L);", "timestamp": 1357037502, "metainfo": ""}