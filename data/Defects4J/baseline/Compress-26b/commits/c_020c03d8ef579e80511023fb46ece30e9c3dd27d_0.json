{"sha": "020c03d8ef579e80511023fb46ece30e9c3dd27d", "log": "verify my understanding of the code  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n         // ============\n \n         /**\n-         * Index in fmap[] of original string after sorting.\n+         * Index of original line in Burrows-Wheeler table.\n+         *\n+         * <p>This is the index in fmap that points to the last byte\n+         * of the original data.</p>\n          */\n         int origPtr;\n \n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.compressors.bzip2;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+\n+public class BlockSortTest {\n+\n+    private static final byte[] FIXTURE = { 0, 1, (byte) 252, (byte) 253, (byte) 255,\n+                                            (byte) 254, 3, 2, (byte) 128 };\n+\n+    /*\n+      Burrows-Wheeler transform of fixture the manual way:\n+\n+      * build the matrix\n+\n+      0, 1, 252, 253, 255, 254, 3, 2, 128\n+      1, 252, 253, 255, 254, 3, 2, 128, 0\n+      252, 253, 255, 254, 3, 2, 128, 0, 1\n+      253, 255, 254, 3, 2, 128, 0, 1, 252\n+      255, 254, 3, 2, 128, 0, 1, 252, 253\n+      254, 3, 2, 128, 0, 1, 252, 253, 255\n+      3, 2, 128, 0, 1, 252, 253, 255, 254\n+      2, 128, 0, 1, 252, 253, 255, 254, 3\n+      128, 0, 1, 252, 253, 255, 254, 3, 2\n+\n+      * sort it\n+\n+      0, 1, 252, 253, 255, 254, 3, 2, 128\n+      1, 252, 253, 255, 254, 3, 2, 128, 0\n+      2, 128, 0, 1, 252, 253, 255, 254, 3\n+      3, 2, 128, 0, 1, 252, 253, 255, 254\n+      128, 0, 1, 252, 253, 255, 254, 3, 2\n+      252, 253, 255, 254, 3, 2, 128, 0, 1\n+      253, 255, 254, 3, 2, 128, 0, 1, 252\n+      254, 3, 2, 128, 0, 1, 252, 253, 255\n+      255, 254, 3, 2, 128, 0, 1, 252, 253\n+\n+      * grab last column\n+\n+      128, 0, 3, 254, 2, 1, 252, 255, 253\n+\n+        and the original line has been 0\n+    */\n+\n+    private static final byte[] FIXTURE_BWT = { (byte) 128, 0, 3, (byte) 254, 2, 1, \n+                                                (byte) 252, (byte) 255, (byte) 253 };\n+\n+    @Test\n+    public void testSortFixture() {\n+        BZip2CompressorOutputStream.Data data = new BZip2CompressorOutputStream.Data(1);\n+        System.arraycopy(FIXTURE, 0, data.block, 1, FIXTURE.length);\n+        BlockSort s = new BlockSort(data);\n+        assertFalse(s.blockSort(data, FIXTURE.length - 1));\n+        assertEquals(FIXTURE[FIXTURE.length - 1], data.block[0]);\n+        for (int i = 0; i < FIXTURE.length; i++) {\n+            assertEquals(FIXTURE_BWT[i], data.block[data.fmap[i]]);\n+        }\n+        assertEquals(0, data.origPtr);\n+    }\n+}", "timestamp": 1336798830, "metainfo": ""}