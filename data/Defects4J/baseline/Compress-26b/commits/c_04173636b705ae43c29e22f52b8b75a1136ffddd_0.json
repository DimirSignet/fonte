{"sha": "04173636b705ae43c29e22f52b8b75a1136ffddd", "log": "Change access using declaring type.  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n import java.util.zip.CRC32;\n import java.util.zip.DataFormatException;\n import java.util.zip.Inflater;\n+import java.util.zip.ZipEntry;\n import java.util.zip.ZipException;\n \n import org.apache.commons.compress.archivers.ArchiveEntry;\n     private boolean supportsDataDescriptorFor(ZipArchiveEntry entry) {\n         return allowStoredEntriesWithDataDescriptor ||\n             !entry.getGeneralPurposeBit().usesDataDescriptor()\n-            || entry.getMethod() == ZipArchiveEntry.DEFLATED;\n+            || entry.getMethod() == ZipEntry.DEFLATED;\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n import java.util.Map;\n import java.util.zip.Inflater;\n import java.util.zip.InflaterInputStream;\n+import java.util.zip.ZipEntry;\n import java.util.zip.ZipException;\n \n import static org.apache.commons.compress.archivers.zip.ZipConstants.DWORD;\n         BoundedInputStream bis =\n             new BoundedInputStream(start, ze.getCompressedSize());\n         switch (ze.getMethod()) {\n-            case ZipArchiveEntry.STORED:\n+            case ZipEntry.STORED:\n                 return bis;\n-            case ZipArchiveEntry.DEFLATED:\n+            case ZipEntry.DEFLATED:\n                 bis.addDummy();\n                 final Inflater inflater = new Inflater(true);\n                 return new InflaterInputStream(bis, inflater) {\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java\n import java.util.Calendar;\n import java.util.Date;\n import java.util.zip.CRC32;\n+import java.util.zip.ZipEntry;\n \n /**\n  * Utility class for handling DOS and Java time conversions.\n      * @return true if the compression method is STORED or DEFLATED\n      */\n     private static boolean supportsMethodOf(ZipArchiveEntry entry) {\n-        return entry.getMethod() == ZipArchiveEntry.STORED\n-            || entry.getMethod() == ZipArchiveEntry.DEFLATED;\n+        return entry.getMethod() == ZipEntry.STORED\n+            || entry.getMethod() == ZipEntry.DEFLATED;\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStreamTest.java\n         InputStream in = null;\n         try {\n             final CpioArchiveOutputStream os =\n-                new CpioArchiveOutputStream(out, CpioArchiveOutputStream\n+                new CpioArchiveOutputStream(out, CpioConstants\n                                             .FORMAT_OLD_BINARY);\n-            os.putArchiveEntry(new CpioArchiveEntry(CpioArchiveOutputStream\n+            os.putArchiveEntry(new CpioArchiveEntry(CpioConstants\n                                                     .FORMAT_OLD_BINARY,\n                                                     f, \"test1.xml\"));\n             IOUtils.copy(in = new FileInputStream(f), os);\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java\n import java.net.URL;\n import java.util.Enumeration;\n import java.util.Random;\n+import java.util.zip.ZipEntry;\n \n import org.apache.commons.compress.AbstractTestCase;\n import org.junit.Test;\n                     zae.setSize(FIVE_BILLION);\n                     zae.setCrc(0x5c316f50L);\n                 }\n-                zae.setMethod(ZipArchiveEntry.STORED);\n+                zae.setMethod(ZipEntry.STORED);\n                 zos.putArchiveEntry(zae);\n                 for (int j = 0; j < FIVE_BILLION / 1000 / 1000; j++) {\n                     zos.write(buf);\n                         zae.setSize(FIVE_BILLION);\n                         zae.setCrc(0x5c316f50L);\n                     }\n-                    zae.setMethod(ZipArchiveEntry.STORED);\n+                    zae.setMethod(ZipEntry.STORED);\n                     zos.putArchiveEntry(zae);\n                     for (int j = 0; j < FIVE_BILLION / 1000 / 1000; j++) {\n                         zos.write(buf);\n                 if (knownSize) {\n                     zae.setSize(FIVE_BILLION);\n                 }\n-                zae.setMethod(ZipArchiveEntry.DEFLATED);\n+                zae.setMethod(ZipEntry.DEFLATED);\n                 zos.putArchiveEntry(zae);\n                 for (int j = 0; j < FIVE_BILLION / 1000 / 1000; j++) {\n                     zos.write(buf);\n                     }\n                     byte[] buf = new byte[ONE_MILLION];\n                     ZipArchiveEntry zae = new ZipArchiveEntry(\"0\");\n-                    zae.setMethod(ZipArchiveEntry.DEFLATED);\n+                    zae.setMethod(ZipEntry.DEFLATED);\n                     zos.putArchiveEntry(zae);\n                     for (int j = 0; j < FIVE_BILLION / 1000 / 1000; j++) {\n                         zos.write(buf);\n                 if (knownSize) {\n                     zae.setSize(FIVE_BILLION);\n                 }\n-                zae.setMethod(ZipArchiveEntry.DEFLATED);\n+                zae.setMethod(ZipEntry.DEFLATED);\n                 zos.putArchiveEntry(zae);\n                 for (int j = 0;\n                      j < FIVE_BILLION / 1000 / 1000;\n                                          ZipArchiveEntry zae =\n                                              new ZipArchiveEntry(\"0\");\n                                          zae.setSize(FIVE_BILLION);\n-                                         zae.setMethod(ZipArchiveEntry.DEFLATED);\n+                                         zae.setMethod(ZipEntry.DEFLATED);\n                                          zos.putArchiveEntry(zae);\n                                          fail(\"expected a\"\n                                               + \" Zip64RequiredException\");\n                     if (knownSize) {\n                         zae.setSize(FIVE_BILLION);\n                     }\n-                    zae.setMethod(ZipArchiveEntry.DEFLATED);\n+                    zae.setMethod(ZipEntry.DEFLATED);\n                     zos.putArchiveEntry(zae);\n                     for (int j = 0;\n                          j < FIVE_BILLION / 1000 / 1000;\n                     zae.setSize(ONE_MILLION);\n                     zae.setCrc(0x1279CB9EL);\n                 }\n-                zae.setMethod(ZipArchiveEntry.STORED);\n+                zae.setMethod(ZipEntry.STORED);\n                 zos.putArchiveEntry(zae);\n                 zos.write(buf);\n                 zos.closeArchiveEntry();\n                     zae.setSize(ONE_MILLION);\n                     zae.setCrc(0x1279CB9EL);\n                 }\n-                zae.setMethod(ZipArchiveEntry.STORED);\n+                zae.setMethod(ZipEntry.STORED);\n                 zos.putArchiveEntry(zae);\n                 zos.write(buf);\n                 zos.closeArchiveEntry();\n                 if (knownSize) {\n                     zae.setSize(ONE_MILLION);\n                 }\n-                zae.setMethod(ZipArchiveEntry.DEFLATED);\n+                zae.setMethod(ZipEntry.DEFLATED);\n                 zos.putArchiveEntry(zae);\n                 zos.write(buf);\n                 zos.closeArchiveEntry();\n                 if (knownSize) {\n                     zae.setSize(ONE_MILLION);\n                 }\n-                zae.setMethod(ZipArchiveEntry.DEFLATED);\n+                zae.setMethod(ZipEntry.DEFLATED);\n                 zos.putArchiveEntry(zae);\n                 zos.write(buf);\n                 zos.closeArchiveEntry();\n                 if (knownSize) {\n                     zae.setSize(ONE_MILLION);\n                 }\n-                zae.setMethod(ZipArchiveEntry.DEFLATED);\n+                zae.setMethod(ZipEntry.DEFLATED);\n                 zos.putArchiveEntry(zae);\n                 zos.write(buf);\n                 zos.closeArchiveEntry();\n                 if (knownSize) {\n                     zae.setSize(ONE_MILLION);\n                 }\n-                zae.setMethod(ZipArchiveEntry.DEFLATED);\n+                zae.setMethod(ZipEntry.DEFLATED);\n                 zos.putArchiveEntry(zae);\n                 zos.write(buf);\n                 zos.closeArchiveEntry();\n         for (int i = 0; i < 2; i++) {\n             zae = new ZipArchiveEntry(String.valueOf(i));\n             zae.setSize(FIVE_BILLION / 2);\n-            zae.setMethod(ZipArchiveEntry.STORED);\n+            zae.setMethod(ZipEntry.STORED);\n             zae.setCrc(0x8a408f16L);\n             zos.putArchiveEntry(zae);\n             for (int j = 0; j < FIVE_BILLION / 2 / 1000 / 1000;\n         }\n         zae = new ZipArchiveEntry(String.valueOf(2));\n         zae.setSize(1);\n-        zae.setMethod(ZipArchiveEntry.STORED);\n+        zae.setMethod(ZipEntry.STORED);\n         zae.setCrc(0x9b9265bL);\n         zos.putArchiveEntry(zae);\n         zos.write(new byte[] { 42 });\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java\n \n package org.apache.commons.compress.archivers.zip;\n \n+import java.util.zip.ZipEntry;\n+\n import junit.framework.TestCase;\n \n /**\n         assertEquals(-1, entry.getMethod());\n         assertFalse(zos.canWriteEntryData(entry));\n \n-        entry.setMethod(ZipArchiveEntry.STORED);\n-        assertEquals(ZipArchiveEntry.STORED, entry.getMethod());\n+        entry.setMethod(ZipEntry.STORED);\n+        assertEquals(ZipEntry.STORED, entry.getMethod());\n         assertTrue(zos.canWriteEntryData(entry));\n \n-        entry.setMethod(ZipArchiveEntry.DEFLATED);\n-        assertEquals(ZipArchiveEntry.DEFLATED, entry.getMethod());\n+        entry.setMethod(ZipEntry.DEFLATED);\n+        assertEquals(ZipEntry.DEFLATED, entry.getMethod());\n         assertTrue(zos.canWriteEntryData(entry));\n \n         // Test the unsupported \"imploded\" compression method (6)\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java\n import java.net.URL;\n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.zip.ZipEntry;\n \n import junit.framework.TestCase;\n \n             o = new FileOutputStream(f);\n             ZipArchiveOutputStream zo = new ZipArchiveOutputStream(o);\n             ZipArchiveEntry ze = new ZipArchiveEntry(\"foo\");\n-            ze.setMethod(ZipArchiveEntry.STORED);\n+            ze.setMethod(ZipEntry.STORED);\n             ze.setSize(4);\n             ze.setCrc(0xb63cfbcdl);\n             zo.putArchiveEntry(ze);", "timestamp": 1333286815, "metainfo": ""}