{"sha": "8d86448f567e0fc7bb8ef400c8d3bc5b7370defb", "log": "another edge case for delaying stream creation and more tests  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n      * @throws IOException on error\n      */\n     public void write(final byte[] b) throws IOException {\n-        getCurrentOutputStream().write(b);\n+        write(b, 0, b.length);\n     }\n     \n     /**\n      * @throws IOException on error\n      */\n     public void write(final byte[] b, final int off, final int len) throws IOException {\n-        getCurrentOutputStream().write(b, off, len);\n+        if (len > 0) {\n+            getCurrentOutputStream().write(b, off, len);\n+        }\n     }\n     \n     /**\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntryTest.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package org.apache.commons.compress.archivers.sevenz;\n+\n+import org.junit.Test;\n+\n+public class SevenZArchiveEntryTest {\n+\n+    @Test(expected=UnsupportedOperationException.class)\n+    public void shouldThrowIfNoLastModifiedDateIsSet() {\n+        new SevenZArchiveEntry().getLastModifiedDate();\n+    }\n+\n+    @Test(expected=UnsupportedOperationException.class)\n+    public void shouldThrowIfNoCreationDateIsSet() {\n+        new SevenZArchiveEntry().getCreationDate();\n+    }\n+\n+    @Test(expected=UnsupportedOperationException.class)\n+    public void shouldThrowIfNoAccessDateIsSet() {\n+        new SevenZArchiveEntry().getAccessDate();\n+    }\n+\n+}\n--- a/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java\n package org.apache.commons.compress.archivers.sevenz;\n \n import java.io.File;\n+import java.io.IOException;\n import org.apache.commons.compress.AbstractTestCase;\n \n public class SevenZFileTest extends AbstractTestCase {\n \n     private void test7zUnarchive(File f) throws Exception {\n         test7zUnarchive(f, null);\n+    }\n+\n+    public void testEncryptedArchiveRequiresPassword() throws Exception {\n+        try {\n+            SevenZFile sevenZFile = new SevenZFile(getFile(\"bla.encrypted.7z\"));\n+            fail(\"shouldn't decrypt without a password\");\n+        } catch (IOException ex) {\n+            assertEquals(\"Cannot read encrypted files without a password\",\n+                         ex.getMessage());\n+        }\n     }\n \n     private void test7zUnarchive(File f, byte[] password) throws Exception {\n--- a/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java\n package org.apache.commons.compress.archivers.sevenz;\n \n import java.io.File;\n+import java.io.IOException;\n import java.util.Calendar;\n import java.util.Date;\n import org.apache.commons.compress.AbstractTestCase;\n \n             entry = new SevenZArchiveEntry();\n             entry.setName(\"dada\");\n+            entry.setHasWindowsAttributes(true);\n+            entry.setWindowsAttributes(17);\n             outArchive.putArchiveEntry(entry);\n             outArchive.write(5);\n+            outArchive.write(42);\n             outArchive.closeArchiveEntry();\n \n             outArchive.finish();\n             entry = archive.getNextEntry();\n             assert(entry != null);\n             assertEquals(\"dada\", entry.getName());\n-            assertEquals(1, entry.getSize());\n-            assertEquals(5, archive.read());\n+            assertEquals(2, entry.getSize());\n+            byte[] content = new byte[2];\n+            assertEquals(2, archive.read(content));\n+            assertEquals(5, content[0]);\n+            assertEquals(42, content[1]);\n+            assertEquals(17, entry.getWindowsAttributes());\n \n             assert(archive.getNextEntry() == null);\n         } finally {\n \n     }\n \n+    public void testDirectoriesOnly() throws Exception {\n+        File output = new File(dir, \"dirs.7z\");\n+        SevenZOutputFile outArchive = new SevenZOutputFile(output);\n+        try {\n+            SevenZArchiveEntry entry = new SevenZArchiveEntry();\n+            entry.setName(\"foo/\");\n+            entry.setDirectory(true);\n+            outArchive.putArchiveEntry(entry);\n+            outArchive.closeArchiveEntry();\n+        } finally {\n+            outArchive.close();\n+        }\n+\n+        final SevenZFile archive = new SevenZFile(output);\n+        try {\n+            SevenZArchiveEntry entry = archive.getNextEntry();\n+            assert(entry != null);\n+            assertEquals(\"foo/\", entry.getName());\n+            assertTrue(entry.isDirectory());\n+            assertFalse(entry.isAntiItem());\n+\n+            assert(archive.getNextEntry() == null);\n+        } finally {\n+            archive.close();\n+        }\n+\n+    }\n+\n+    public void testCantFinishTwice() throws Exception {\n+        File output = new File(dir, \"finish.7z\");\n+        SevenZOutputFile outArchive = new SevenZOutputFile(output);\n+        try {\n+            outArchive.finish();\n+            outArchive.finish();\n+            fail(\"shouldn't be able to call finish twice\");\n+        } catch (IOException ex) {\n+            assertEquals(\"This archive has already been finished\", ex.getMessage());\n+        } finally {\n+            outArchive.close();\n+        }\n+    }\n+\n }", "timestamp": 1382417499, "metainfo": ""}