{"sha": "2cf0595f88bf58bfdedef0928f7ddda01f99c174", "log": "add infrastructure for user specified options for 7z codecs - would finish COMPRESS-266 immediately if there was a Pair class in Java5.  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n     }\n     \n     static OutputStream addEncoder(final OutputStream out, final SevenZMethod method,\n-                                   final byte[] password) throws IOException {\n+                                   Object options) throws IOException {\n         for (final CoderId coderId : coderTable) {\n             if (coderId.method.equals(method)) {\n-                return coderId.coder.encode(out, password);\n+                return coderId.coder.encode(out, options);\n             }\n         }\n         throw new IOException(\"Unsupported compression method \" + method);\n     static abstract class CoderBase {\n         abstract InputStream decode(final InputStream in, final Coder coder,\n                 byte[] password) throws IOException;\n-        OutputStream encode(final OutputStream out, final byte[] password)\n+        OutputStream encode(final OutputStream out, final Object options)\n             throws IOException {\n             throw new UnsupportedOperationException(\"method doesn't support writing\");\n         }\n             return in; \n         }\n         @Override\n-        OutputStream encode(final OutputStream out, final byte[] password) {\n+        OutputStream encode(final OutputStream out, final Object _) {\n             return out;\n         }\n     }\n                                            new Inflater(true));\n         }\n         @Override\n-        OutputStream encode(final OutputStream out, final byte[] password) {\n+        OutputStream encode(final OutputStream out, final Object options) {\n             return new DeflaterOutputStream(out, new Deflater(9, true));\n         }\n     }\n             return new BZip2CompressorInputStream(in);\n         }\n         @Override\n-        OutputStream encode(final OutputStream out, final byte[] password)\n+        OutputStream encode(final OutputStream out, final Object _)\n                 throws IOException {\n             return new BZip2CompressorOutputStream(out);\n         }\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java\n     }\n \n     @Override\n-    OutputStream encode(final OutputStream out, final byte[] password)\n+    OutputStream encode(final OutputStream out, final Object opts)\n         throws IOException {\n-        LZMA2Options options = new LZMA2Options();\n-        options.setDictSize(LZMA2Options.DICT_SIZE_DEFAULT);\n+        LZMA2Options options = getOptions(opts);\n         FinishableOutputStream wrapped = new FinishableWrapperOutputStream(out);\n         return options.getOutputStream(wrapped);\n     }\n \n+    private LZMA2Options getOptions(Object opts) throws IOException {\n+        if (opts instanceof LZMA2Options) {\n+            return (LZMA2Options) opts;\n+        } else if (opts != null) {\n+            throw new IllegalArgumentException(\"LZMA2 method only supports LZMA2Options objects as option\");\n+        }\n+        LZMA2Options options = new LZMA2Options();\n+        options.setDictSize(LZMA2Options.DICT_SIZE_DEFAULT);\n+        return options;\n+    }\n }\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java\n     /** LZMA2 */\n     LZMA2(new byte[] { (byte)0x21 }) {\n         @Override\n-        byte[] getProperties() {\n-            int dictSize = LZMA2Options.DICT_SIZE_DEFAULT;\n+        byte[] getProperties(Object opts) {\n+            int dictSize = getDictSize(opts);\n             int lead = Integer.numberOfLeadingZeros(dictSize);\n             int secondBit = (dictSize >>> (30 - lead)) - 2;\n             return new byte[] {\n                 (byte) ((19 - lead) * 2 + secondBit)\n             };\n+        }\n+        int getDictSize(Object opts) {\n+            if (opts instanceof LZMA2Options) {\n+                return ((LZMA2Options) opts).getDictSize();\n+            } else if (opts != null) {\n+                throw new IllegalArgumentException(\"LZMA2 method only supports LZMA2Options objects as option\");\n+            }\n+            return LZMA2Options.DICT_SIZE_DEFAULT;\n         }\n     },\n     /** Deflate */\n         return copy;\n     }\n \n-    byte[] getProperties() {\n+    /**\n+     * @param opts options requested for the given entry\n+     */\n+    byte[] getProperties(Object opts) {\n         return new byte[0];\n     }\n \n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n         int numCoders = 0;\n         for (SevenZMethod m : contentMethods) {\n             numCoders++;\n-            byte[] id = m.getId();\n-            byte[] properties = m.getProperties();\n-\n-            int codecFlags = id.length;\n-            if (properties.length > 0) {\n-                codecFlags |= 0x20;\n-            }\n-            bos.write(codecFlags);\n-            bos.write(id);\n-\n-            if (properties.length > 0) {\n-                bos.write(properties.length);\n-                bos.write(properties);\n-            }\n+            writeSingleCodec(m, bos);\n         }\n \n         writeUint64(header, numCoders);\n         header.write(bos.toByteArray());\n+    }\n+\n+    private void writeSingleCodec(SevenZMethod m, OutputStream bos) throws IOException {\n+        byte[] id = m.getId();\n+        byte[] properties = m.getProperties(null);\n+\n+        int codecFlags = id.length;\n+        if (properties.length > 0) {\n+            codecFlags |= 0x20;\n+        }\n+        bos.write(codecFlags);\n+        bos.write(id);\n+\n+        if (properties.length > 0) {\n+            bos.write(properties.length);\n+            bos.write(properties);\n+        }\n     }\n     \n     private void writeSubStreamsInfo(final DataOutput header) throws IOException {", "timestamp": 1393187378, "metainfo": ""}