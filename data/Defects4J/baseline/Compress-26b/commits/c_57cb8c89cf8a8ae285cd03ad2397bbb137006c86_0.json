{"sha": "57cb8c89cf8a8ae285cd03ad2397bbb137006c86", "log": "allow format to be specified with convenience constructors  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java\n     // Header description fields - should be same throughout an archive\n \n     /**\n-     * See {@link CpioArchiveEntry#setFormat(short)} for possible values.\n+     * See constructor documenation for possible values.\n      */\n     private final short fileFormat; \n \n     private long uid = 0;\n \n     /**\n-     * Ceates a CPIOArchiveEntry with a specified format.\n+     * Creates a CPIOArchiveEntry with a specified format.\n      * \n      * @param format\n      *            The cpio format for this entry.\n     }\n \n     /**\n-     * Ceates a CPIOArchiveEntry with a specified name. The format of this entry\n-     * will be the new format.\n+     * Creates a CPIOArchiveEntry with a specified name. The format of\n+     * this entry will be the new format.\n      * \n      * @param name\n      *            The name of this entry.\n      */\n     public CpioArchiveEntry(final String name) {\n-        this(FORMAT_NEW);\n+        this(FORMAT_NEW, name);\n+    }\n+\n+    /**\n+     * Creates a CPIOArchiveEntry with a specified name.\n+     * \n+     * @param format\n+     *            The cpio format for this entry.\n+     * @param name\n+     *            The name of this entry.\n+     * <br/>\n+     * Possible format values are:\n+     * <p>\n+     * CpioConstants.FORMAT_NEW<br/>\n+     * CpioConstants.FORMAT_NEW_CRC<br/>\n+     * CpioConstants.FORMAT_OLD_BINARY<br/>\n+     * CpioConstants.FORMAT_OLD_ASCII<br/>\n+     */\n+    public CpioArchiveEntry(final short format, final String name) {\n+        this(format);\n         this.name = name;\n     }\n \n     /**\n-     * Creates a CPIOArchiveEntry with a specified name. The format of this entry\n-     * will be the new format.\n+     * Creates a CPIOArchiveEntry with a specified name. The format of\n+     * this entry will be the new format.\n      * \n      * @param name\n      *            The name of this entry.\n      *            The size of this entry\n      */\n     public CpioArchiveEntry(final String name, final long size) {\n-        this(FORMAT_NEW);\n-        this.name = name;\n+        this(name);\n         this.setSize(size);\n     }\n \n+    /**\n+     * Creates a CPIOArchiveEntry with a specified name.\n+     * \n+     * @param format\n+     *            The cpio format for this entry.\n+     * @param name\n+     *            The name of this entry.\n+     * @param size\n+     *            The size of this entry\n+     * <br/>\n+     * Possible format values are:\n+     * <p>\n+     * CpioConstants.FORMAT_NEW<br/>\n+     * CpioConstants.FORMAT_NEW_CRC<br/>\n+     * CpioConstants.FORMAT_OLD_BINARY<br/>\n+     * CpioConstants.FORMAT_OLD_ASCII<br/>\n+     */\n+    public CpioArchiveEntry(final short format, final String name,\n+                            final long size) {\n+        this(format, name);\n+        this.setSize(size);\n+    }\n+\n+    /**\n+     * Creates a CPIOArchiveEntry with a specified name for a\n+     * specified file. The format of this entry will be the new\n+     * format.\n+     * \n+     * @param inputFile\n+     *            The file to gather information from.\n+     * @param entryName\n+     *            The name of this entry.\n+     */\n     public CpioArchiveEntry(File inputFile, String entryName) {\n-        this(entryName, inputFile.isFile() ? inputFile.length() : 0);\n+        this(FORMAT_NEW, inputFile, entryName);\n+    }\n+\n+    /**\n+     * Creates a CPIOArchiveEntry with a specified name for a\n+     * specified file.\n+     * \n+     * @param format\n+     *            The cpio format for this entry.\n+     * @param inputFile\n+     *            The file to gather information from.\n+     * @param entryName\n+     *            The name of this entry.\n+     * <br/>\n+     * Possible format values are:\n+     * <p>\n+     * CpioConstants.FORMAT_NEW<br/>\n+     * CpioConstants.FORMAT_NEW_CRC<br/>\n+     * CpioConstants.FORMAT_OLD_BINARY<br/>\n+     * CpioConstants.FORMAT_OLD_ASCII<br/>\n+     */\n+    public CpioArchiveEntry(final short format, File inputFile,\n+                            String entryName) {\n+        this(format, entryName, inputFile.isFile() ? inputFile.length() : 0);\n         long mode=0;\n         if (inputFile.isDirectory()){\n             mode |= C_ISDIR;\n         } else if (inputFile.isFile()){\n             mode |= C_ISREG;\n         } else {\n-            throw new IllegalArgumentException(\"Cannot determine type of file \"+inputFile.getName());\n+            throw new IllegalArgumentException(\"Cannot determine type of file \"\n+                                               + inputFile.getName());\n         }\n         // TODO set other fields as needed\n         setMode(mode);", "timestamp": 1266498511, "metainfo": ""}