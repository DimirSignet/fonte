{"sha": "90b73bf96a9a09ea633cc42eb17cab60c885d8c6", "log": "Add encoding support to CPIO package - related to COMPRESS-180  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n     private String entryEncoding = null;\n \n     /**\n-     * Returns the encoding to use for arj, zip, dump and tar files,\n-     * or null for the default.\n+     * Returns the encoding to use for arj, zip, dump, cpio and tar\n+     * files, or null for the default.\n      *\n      * @return entry encoding, or null\n      * @since 1.5\n     }\n \n     /**\n-     * Sets the encoding to use for arj, zip, dump and tar files.  Use\n-     * null for the default.\n+     * Sets the encoding to use for arj, zip, dump, cpio and tar\n+     * files.  Use null for the default.\n      *\n      * @since 1.5\n      */\n             return new JarArchiveInputStream(in);\n         }\n         if (CPIO.equalsIgnoreCase(archiverName)) {\n-            return new CpioArchiveInputStream(in);\n+            if (entryEncoding != null) {\n+                return new CpioArchiveInputStream(in, entryEncoding);\n+            } else {\n+                return new CpioArchiveInputStream(in);\n+            }\n         }\n         if (DUMP.equalsIgnoreCase(archiverName)) {\n             if (entryEncoding != null) {\n             return new JarArchiveOutputStream(out);\n         }\n         if (CPIO.equalsIgnoreCase(archiverName)) {\n-            return new CpioArchiveOutputStream(out);\n+            if (entryEncoding != null) {\n+                return new CpioArchiveOutputStream(out, entryEncoding);\n+            } else {\n+                return new CpioArchiveOutputStream(out);\n+            }\n         }\n         throw new ArchiveException(\"Archiver: \" + archiverName + \" not found.\");\n     }\n--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java\n \n import org.apache.commons.compress.archivers.ArchiveEntry;\n import org.apache.commons.compress.archivers.ArchiveInputStream;\n+import org.apache.commons.compress.archivers.zip.ZipEncoding;\n+import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;\n import org.apache.commons.compress.utils.ArchiveUtils;\n+import org.apache.commons.compress.utils.CharsetNames;\n \n /**\n  * CPIOArchiveInputStream is a stream for reading cpio streams. All formats of\n     private final int blockSize;\n \n     /**\n+     * The encoding to use for filenames and labels.\n+     */\n+    private final ZipEncoding encoding;\n+\n+    /**\n+     * Construct the cpio input stream with a blocksize of {@link\n+     * CpioConstants#BLOCK_SIZE BLOCK_SIZE} and expecting ASCII file\n+     * names.\n+     * \n+     * @param in\n+     *            The cpio stream\n+     */\n+    public CpioArchiveInputStream(final InputStream in) {\n+        this(in, BLOCK_SIZE, CharsetNames.US_ASCII);\n+    }\n+\n+    /**\n      * Construct the cpio input stream with a blocksize of {@link\n      * CpioConstants#BLOCK_SIZE BLOCK_SIZE}.\n      * \n      * @param in\n      *            The cpio stream\n-     */\n-    public CpioArchiveInputStream(final InputStream in) {\n-        this(in, BLOCK_SIZE);\n-    }\n-\n-    /**\n-     * Construct the cpio input stream with a blocksize of {@link CpioConstants#BLOCK_SIZE BLOCK_SIZE}.\n-     * Construct the cpio input stream.\n+     * @param encoding\n+     *            The encoding of file names to expect - use null for\n+     *            the platform's default.\n+     * @since 1.6\n+     */\n+    public CpioArchiveInputStream(final InputStream in, String encoding) {\n+        this(in, BLOCK_SIZE, encoding);\n+    }\n+\n+    /**\n+     * Construct the cpio input stream with a blocksize of {@link\n+     * CpioConstants#BLOCK_SIZE BLOCK_SIZE} expecting ASCII file\n+     * names.\n      * \n      * @param in\n      *            The cpio stream\n      * @since 1.5\n      */\n     public CpioArchiveInputStream(final InputStream in, int blockSize) {\n+        this(in, blockSize, CharsetNames.US_ASCII);\n+    }\n+\n+    /**\n+     * Construct the cpio input stream with a blocksize of {@link CpioConstants#BLOCK_SIZE BLOCK_SIZE}.\n+     * \n+     * @param in\n+     *            The cpio stream\n+     * @param blockSize\n+     *            The block size of the archive.\n+     * @param encoding\n+     *            The encoding of file names to expect - use null for\n+     *            the platform's default.\n+     * @since 1.6\n+     */\n+    public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) {\n         this.in = in;\n         this.blockSize = blockSize;\n+        this.encoding = ZipEncodingHelper.getZipEncoding(encoding);\n     }\n \n     /**\n     }\n \n     private String readCString(final int length) throws IOException {\n-        byte tmpBuffer[] = new byte[length];\n+        // don't include trailing NUL in file name to decode\n+        byte tmpBuffer[] = new byte[length - 1];\n         readFully(tmpBuffer, 0, tmpBuffer.length);\n-        return new String(tmpBuffer, 0, tmpBuffer.length - 1); // TODO default charset?\n+        this.in.read();\n+        return encoding.decode(tmpBuffer);\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n import java.io.File;\n import java.io.IOException;\n import java.io.OutputStream;\n+import java.nio.ByteBuffer;\n import java.util.HashMap;\n \n import org.apache.commons.compress.archivers.ArchiveEntry;\n import org.apache.commons.compress.archivers.ArchiveOutputStream;\n+import org.apache.commons.compress.archivers.zip.ZipEncoding;\n+import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;\n import org.apache.commons.compress.utils.ArchiveUtils;\n+import org.apache.commons.compress.utils.CharsetNames;\n \n /**\n  * CPIOArchiveOutputStream is a stream for writing CPIO streams. All formats of\n     private long nextArtificalDeviceAndInode = 1;\n \n     /**\n-     * Construct the cpio output stream with a specified format and a\n-     * blocksize of {@link CpioConstants#BLOCK_SIZE BLOCK_SIZE}.\n+     * The encoding to use for filenames and labels.\n+     */\n+    private final ZipEncoding encoding;\n+\n+    /**\n+     * Construct the cpio output stream with a specified format, a\n+     * blocksize of {@link CpioConstants#BLOCK_SIZE BLOCK_SIZE} and\n+     * using ASCII as the file name encoding.\n      * \n      * @param out\n      *            The cpio stream\n      *            The format of the stream\n      */\n     public CpioArchiveOutputStream(final OutputStream out, final short format) {\n-        this(out, format, BLOCK_SIZE);\n-    }\n-\n-    /**\n-     * Construct the cpio output stream with a specified format\n+        this(out, format, BLOCK_SIZE, CharsetNames.US_ASCII);\n+    }\n+\n+    /**\n+     * Construct the cpio output stream with a specified format using\n+     * ASCII as the file name encoding.\n      * \n      * @param out\n      *            The cpio stream\n      */\n     public CpioArchiveOutputStream(final OutputStream out, final short format,\n                                    final int blockSize) {\n+        this(out, format, blockSize, CharsetNames.US_ASCII);\n+    }        \n+\n+    /**\n+     * Construct the cpio output stream with a specified format using\n+     * ASCII as the file name encoding.\n+     * \n+     * @param out\n+     *            The cpio stream\n+     * @param format\n+     *            The format of the stream\n+     * @param blockSize\n+     *            The block size of the archive.\n+     * @param encoding\n+     *            The encoding of file names to write - use null for\n+     *            the platform's default.\n+     * \n+     * @since 1.6\n+     */\n+    public CpioArchiveOutputStream(final OutputStream out, final short format,\n+                                   final int blockSize, final String encoding) {\n         this.out = out;\n         switch (format) {\n         case FORMAT_NEW:\n         }\n         this.entryFormat = format;\n         this.blockSize = blockSize;\n+        this.encoding = ZipEncodingHelper.getZipEncoding(encoding);\n     }\n \n     /**\n      * Construct the cpio output stream. The format for this CPIO stream is the\n-     * \"new\" format\n+     * \"new\" format using ASCII encoding for file names\n      * \n      * @param out\n      *            The cpio stream\n      */\n     public CpioArchiveOutputStream(final OutputStream out) {\n         this(out, FORMAT_NEW);\n+    }\n+\n+    /**\n+     * Construct the cpio output stream. The format for this CPIO stream is the\n+     * \"new\" format.\n+     * \n+     * @param out\n+     *            The cpio stream\n+     * @param encoding\n+     *            The encoding of file names to write - use null for\n+     *            the platform's default.\n+     * @since 1.6\n+     */\n+    public CpioArchiveOutputStream(final OutputStream out, String encoding) {\n+        this(out, FORMAT_NEW, BLOCK_SIZE, encoding);\n     }\n \n     /**\n      * @throws IOException if the string couldn't be written\n      */\n     private void writeCString(final String str) throws IOException {\n-        byte[] b = ArchiveUtils.toAsciiBytes(str);\n-        out.write(b);\n+        ByteBuffer buf = encoding.encode(str);\n+        final int len = buf.limit() - buf.position();\n+        out.write(buf.array(), buf.arrayOffset(), len);\n         out.write('\\0');\n-        count(b.length + 1);\n+        count(len + 1);\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java\n+++ b/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java\n             String expected, byte[] buffer, int offset, int length){\n         byte[] buffer1;\n         try {\n-            buffer1 = expected.getBytes(\"ASCII\");\n+            buffer1 = expected.getBytes(CharsetNames.US_ASCII);\n         } catch (UnsupportedEncodingException e) {\n             throw new RuntimeException(e); // Should not happen\n         }\n      */\n     public static byte[] toAsciiBytes(String inputString){\n         try {\n-            return inputString.getBytes(\"ASCII\");\n+            return inputString.getBytes(CharsetNames.US_ASCII);\n         } catch (UnsupportedEncodingException e) {\n            throw new RuntimeException(e); // Should never happen\n         }\n      */\n     public static String toAsciiString(final byte[] inputBytes){\n         try {\n-            return new String(inputBytes, \"ASCII\");\n+            return new String(inputBytes, CharsetNames.US_ASCII);\n         } catch (UnsupportedEncodingException e) {\n             throw new RuntimeException(e); // Should never happen\n         }\n      */\n     public static String toAsciiString(final byte[] inputBytes, int offset, int length){\n         try {\n-            return new String(inputBytes, offset, length, \"ASCII\");\n+            return new String(inputBytes, offset, length, CharsetNames.US_ASCII);\n         } catch (UnsupportedEncodingException e) {\n             throw new RuntimeException(e); // Should never happen\n         }", "timestamp": 1376154281, "metainfo": ""}