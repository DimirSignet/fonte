{"sha": "3e2ddad124ea6ab1bc690487793bf88560ca3732", "log": "The tar Ant task has a usecase where absolute paths inside archives are required - allow creation of such entries  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n      * @param name the entry name\n      */\n     public TarArchiveEntry(String name) {\n+        this(name, false);\n+    }\n+\n+    /**\n+     * Construct an entry with only a name. This allows the programmer\n+     * to construct the entry's header \"by hand\". File is set to null.\n+     *\n+     * @param name the entry name\n+     * @param preserveLeadingSlashes whether to allow leading slashes\n+     * in the name.\n+     */\n+    public TarArchiveEntry(String name, boolean preserveLeadingSlashes) {\n         this();\n \n-        name = normalizeFileName(name);\n+        name = normalizeFileName(name, preserveLeadingSlashes);\n         boolean isDir = name.endsWith(\"/\");\n \n         this.devMajor = 0;\n      * @param file The file that the entry represents.\n      */\n     public TarArchiveEntry(File file) {\n-        this(file, normalizeFileName(file.getPath()));\n+        this(file, normalizeFileName(file.getPath(), false));\n     }\n     \n     /**\n      * @param name This entry's new name.\n      */\n     public void setName(String name) {\n-        this.name = normalizeFileName(name);\n+        this.name = normalizeFileName(name, false);\n     }\n \n     /**\n      * Strips Windows' drive letter as well as any leading slashes,\n      * turns path separators into forward slahes.\n      */\n-    private static String normalizeFileName(String fileName) {\n+    private static String normalizeFileName(String fileName,\n+                                            boolean preserveLeadingSlashes) {\n         String osname = System.getProperty(\"os.name\").toLowerCase(Locale.US);\n \n         if (osname != null) {\n         // No absolute pathnames\n         // Windows (and Posix?) paths can start with \"\\\\NetworkDrive\\\",\n         // so we loop on starting /'s.\n-        while (fileName.startsWith(\"/\")) {\n+        while (!preserveLeadingSlashes && fileName.startsWith(\"/\")) {\n             fileName = fileName.substring(1);\n         }\n         return fileName;", "timestamp": 1251187904, "metainfo": ""}