{"sha": "a67d562da56609290f52587791b41aa0ea2f3a58", "log": "Add final modifier to private fields.  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/dump/Dirent.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/dump/Dirent.java\n  * Directory entry.\n  */\n class Dirent {\n-    private int ino;\n-    private int parentIno;\n-    private int type;\n-    private String name;\n+    private final int ino;\n+    private final int parentIno;\n+    private final int type;\n+    private final String name;\n \n     /**\n      * Constructor\n--- a/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java\n     /**\n      * Currently unused\n      */\n-    private DumpArchiveSummary summary = null;\n+    private final DumpArchiveSummary summary = null;\n \n     // this information is available from standard index.\n-    private TapeSegmentHeader header = new TapeSegmentHeader();\n+    private final TapeSegmentHeader header = new TapeSegmentHeader();\n     private String simpleName;\n     private String originalName;\n \n         private int ino;\n         private int count;\n         private int holes;\n-        private byte[] cdata = new byte[512]; // map of any 'holes'\n+        private final byte[] cdata = new byte[512]; // map of any 'holes'\n \n         public DumpArchiveConstants.SEGMENT_TYPE getType() {\n             return type;\n--- a/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java\n     private long entrySize;\n     private long entryOffset;\n     private int readIdx;\n-    private byte[] readBuf = new byte[DumpArchiveConstants.TP_SIZE];\n+    private final byte[] readBuf = new byte[DumpArchiveConstants.TP_SIZE];\n     private byte[] blockBuffer;\n     private int recordOffset;\n     private long filepos;\n     protected TapeInputStream raw;\n \n     // map of ino -> dirent entry. We can use this to reconstruct full paths.\n-    private Map<Integer, Dirent> names = new HashMap<Integer, Dirent>();\n+    private final Map<Integer, Dirent> names = new HashMap<Integer, Dirent>();\n \n     // map of ino -> (directory) entry when we're missing one or more elements in the path.\n-    private Map<Integer, DumpArchiveEntry> pending = new HashMap<Integer, DumpArchiveEntry>();\n+    private final Map<Integer, DumpArchiveEntry> pending = new HashMap<Integer, DumpArchiveEntry>();\n \n     // queue of (directory) entries where we now have the full path.\n     private Queue<DumpArchiveEntry> queue;\n--- a/src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java\n     private byte[] blockBuffer = new byte[DumpArchiveConstants.TP_SIZE];\n     private int currBlkIdx = -1;\n     private int blockSize = DumpArchiveConstants.TP_SIZE;\n-    private int recordSize = DumpArchiveConstants.TP_SIZE;\n+    private final int recordSize = DumpArchiveConstants.TP_SIZE;\n     private int readOffset = DumpArchiveConstants.TP_SIZE;\n     private boolean isCompressed = false;\n     private long bytesRead = 0;\n--- a/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java\n  */\n public class JarArchiveEntry extends ZipArchiveEntry {\n \n-    private Attributes manifestAttributes = null;\n-    private Certificate[] certificates = null;\n+    private final Attributes manifestAttributes = null;\n+    private final Certificate[] certificates = null;\n \n     public JarArchiveEntry(ZipEntry entry) throws ZipException {\n         super(entry);\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java\n \n public class TarArchiveSparseEntry implements TarConstants {\n     /** If an extension sparse header follows. */\n-    private boolean isExtended;\n+    private final boolean isExtended;\n \n     /**\n      * Construct an entry from an archive's header bytes. File is set\n--- a/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java\n     private Inflater inf = new Inflater(true);\n \n     // CRC32 from uncompressed data\n-    private CRC32 crc = new CRC32();\n+    private final CRC32 crc = new CRC32();\n \n     private int memberSize;\n ", "timestamp": 1358858896, "metainfo": ""}