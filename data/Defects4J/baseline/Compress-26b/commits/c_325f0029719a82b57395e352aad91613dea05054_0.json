{"sha": "325f0029719a82b57395e352aad91613dea05054", "log": "Document why default charset usage is OK  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java\n                           + 2         // UID\n                           + 2         // GID\n                           + getLinkedFile().getBytes().length);\n+                          // Uses default charset - see class Javadoc\n     }\n \n     /**\n         byte[] data = new byte[getLocalFileDataLength().getValue() - WORD];\n         System.arraycopy(ZipShort.getBytes(getMode()), 0, data, 0, 2);\n \n-        byte[] linkArray = getLinkedFile().getBytes();\n+        byte[] linkArray = getLinkedFile().getBytes(); // Uses default charset - see class Javadoc\n         // CheckStyle:MagicNumber OFF\n         System.arraycopy(ZipLong.getBytes(linkArray.length),\n                          0, data, 2, WORD);\n             link = \"\";\n         } else {\n             System.arraycopy(tmp, 10, linkArray, 0, linkArray.length);\n-            link = new String(linkArray);\n+            link = new String(linkArray); // Uses default charset - see class Javadoc\n         }\n         // CheckStyle:MagicNumber ON\n         setDirectory((newMode & DIR_FLAG) != 0);\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java\n /**\n  * A fallback ZipEncoding, which uses a java.io means to encode names.\n  *\n- * <p>This implementation is not favorable for encodings other than\n+ * <p>This implementation is not suitable for encodings other than\n  * utf-8, because java.io encodes unmappable character as question\n  * marks leading to unreadable ZIP entries on some operating\n  * systems.</p>\n  * \n- * <p>Furthermore this implementation is unable to tell, whether a\n+ * <p>Furthermore this implementation is unable to tell whether a\n  * given name can be safely encoded or not.</p>\n  * \n  * <p>This implementation acts as a last resort implementation, when\n      * org.apache.commons.compress.archivers.zip.ZipEncoding#encode(java.lang.String)\n      */\n     public ByteBuffer encode(String name) throws IOException {\n-        if (this.charset == null) {\n-            return ByteBuffer.wrap(name.getBytes()); // TODO is it correct to use the default charset here?\n+        if (this.charset == null) { // i.e. use default charset, see no-args constructor\n+            return ByteBuffer.wrap(name.getBytes());\n         } else {\n             return ByteBuffer.wrap(name.getBytes(this.charset));\n         }\n      * org.apache.commons.compress.archivers.zip.ZipEncoding#decode(byte[])\n      */\n     public String decode(byte[] data) throws IOException {\n-        if (this.charset == null) {\n+        if (this.charset == null) { // i.e. use default charset, see no-args constructor\n             return new String(data);\n         } else {\n             return new String(data,this.charset);", "timestamp": 1239794628, "metainfo": ""}