{"sha": "aa1a75cdb63f172c61f6a319c98d57038ae0dccd", "log": "Replace Javadoc \"<code>null|true|false</code>\" with \"{@code null|true|false}\"  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java\n      * Returns the next Archive Entry in this Stream.\n      *\n      * @return the next entry,\n-     *         or <code>null</code> if there are no more entries\n+     *         or {@code null} if there are no more entries\n      * @throws IOException if the next entry could not be read\n      */\n     public abstract ArchiveEntry getNextEntry() throws IOException;\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n     /**\n      * Check if this is a Pax header.\n      * \n-     * @return <code>true</code> if this is a Pax header.\n+     * @return {@code true} if this is a Pax header.\n      * \n      * @since Apache Commons Compress 1.1\n      */\n     /**\n      * Check if this is a Pax header.\n      * \n-     * @return <code>true</code> if this is a Pax header.\n+     * @return {@code true} if this is a Pax header.\n      * \n      * @since Apache Commons Compress 1.1\n      */\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java\n     /**\n      * Construct a fallback zip encoding, which uses the given charset.\n      * \n-     * @param charset The name of the charset or <code>null</code> for\n+     * @param charset The name of the charset or {@code null} for\n      *                the platform's default character set.\n      */\n     public FallbackZipEncoding(String charset) {\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java\n      * @param bb The byte buffer to write to.\n      * @param c The character to encode.\n      * @return Whether the given unicode character is covered by this encoding.\n-     *         If <code>false</code> is returned, nothing is pushed to the\n+     *         If {@code false} is returned, nothing is pushed to the\n      *         byte buffer. \n      */\n     public boolean pushEncodedChar(ByteBuffer bb, char c) {\n     /**\n      * @param c A unicode character in the range from 0x0080 to 0x7f00\n      * @return A Simple8BitChar, if this character is covered by this encoding.\n-     *         A <code>null</code> value is returned, if this character is not\n+     *         A {@code null} value is returned, if this character is not\n      *         covered by this encoding.\n      */\n     private Simple8BitChar encodeHighChar(char c) {\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java\n     /**\n      * Instantiates a zip encoding.\n      * \n-     * @param name The name of the zip encoding. Specify <code>null</code> for\n+     * @param name The name of the zip encoding. Specify {@code null} for\n      *             the platform's default encoding.\n      * @return A zip encoding for the given encoding name.\n      */\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n     }\n \n     /**\n-     * Returns a named entry - or <code>null</code> if no entry by\n+     * Returns a named entry - or {@code null} if no entry by\n      * that name exists.\n      * @param name name of the entry.\n      * @return the ZipArchiveEntry corresponding to the given name - or\n-     * <code>null</code> if not present.\n+     * {@code null} if not present.\n      */\n     public ZipArchiveEntry getEntry(String name) {\n         return nameMap.get(name);\n--- a/src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java\n      * Detects common format suffixes in the given filename.\n      *\n      * @param filename name of a file\n-     * @return <code>true</code> if the filename has a common format suffix,\n-     *         <code>false</code> otherwise\n+     * @return {@code true} if the filename has a common format suffix,\n+     *         {@code false} otherwise\n      */\n     public boolean isCompressedFilename(String filename) {\n         final String lower = filename.toLowerCase(Locale.ENGLISH);\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java\n      * Detects common bzip2 suffixes in the given filename.\n      *\n      * @param filename name of a file\n-     * @return <code>true</code> if the filename has a common bzip2 suffix,\n-     *         <code>false</code> otherwise\n+     * @return {@code true} if the filename has a common bzip2 suffix,\n+     *         {@code false} otherwise\n      */\n     public static boolean isCompressedFilename(String filename) {\n         return fileNameUtil.isCompressedFilename(filename);\n--- a/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java\n      * Constructs a new input stream that decompresses gzip-compressed data\n      * from the specified input stream.\n      * <p>\n-     * If <code>decompressConcatenated</code> is <code>false</code>:\n+     * If <code>decompressConcatenated</code> is {@code false}:\n      * This decompressor might read more input than it will actually use.\n      * If <code>inputStream</code> supports <code>mark</code> and\n      * <code>reset</code>, then the input position will be adjusted\n--- a/src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java\n      * Detects common gzip suffixes in the given filename.\n      *\n      * @param filename name of a file\n-     * @return <code>true</code> if the filename has a common gzip suffix,\n-     *         <code>false</code> otherwise\n+     * @return {@code true} if the filename has a common gzip suffix,\n+     *         {@code false} otherwise\n      */\n     public static boolean isCompressedFilename(String filename) {\n         return fileNameUtil.isCompressedFilename(filename);\n--- a/src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java\n      * Detects common xz suffixes in the given filename.\n      *\n      * @param filename name of a file\n-     * @return <code>true</code> if the filename has a common xz suffix,\n-     *         <code>false</code> otherwise\n+     * @return {@code true} if the filename has a common xz suffix,\n+     *         {@code false} otherwise\n      */\n     public static boolean isCompressedFilename(String filename) {\n         return fileNameUtil.isCompressedFilename(filename);\n--- a/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java\n+++ b/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java\n      * @param buffer\n      * @param offset\n      * @param length\n-     * @return <code>true</code> if buffer is the same as the expected string\n+     * @return {@code true} if buffer is the same as the expected string\n      */\n     public static boolean matchAsciiBuffer(\n             String expected, byte[] buffer, int offset, int length){\n      * \n      * @param expected\n      * @param buffer\n-     * @return <code>true</code> if buffer is the same as the expected string\n+     * @return {@code true} if buffer is the same as the expected string\n      */\n     public static boolean matchAsciiBuffer(String expected, byte[] buffer){\n         return matchAsciiBuffer(expected, buffer, 0, buffer.length);\n      * @param offset2\n      * @param length2\n      * @param ignoreTrailingNulls\n-     * @return <code>true</code> if buffer1 and buffer2 have same contents, having regard to trailing nulls\n+     * @return {@code true} if buffer1 and buffer2 have same contents, having regard to trailing nulls\n      */\n     public static boolean isEqual(\n             final byte[] buffer1, final int offset1, final int length1,\n      * @param buffer2\n      * @param offset2\n      * @param length2\n-     * @return <code>true</code> if buffer1 and buffer2 have same contents\n+     * @return {@code true} if buffer1 and buffer2 have same contents\n      */\n     public static boolean isEqual(\n             final byte[] buffer1, final int offset1, final int length1,\n      * \n      * @param buffer1\n      * @param buffer2\n-     * @return <code>true</code> if buffer1 and buffer2 have same contents\n+     * @return {@code true} if buffer1 and buffer2 have same contents\n      */\n     public static boolean isEqual(final byte[] buffer1, final byte[] buffer2 ){\n         return isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, false);\n      * @param buffer1\n      * @param buffer2\n      * @param ignoreTrailingNulls\n-     * @return <code>true</code> if buffer1 and buffer2 have same contents\n+     * @return {@code true} if buffer1 and buffer2 have same contents\n      */\n     public static boolean isEqual(final byte[] buffer1, final byte[] buffer2, boolean ignoreTrailingNulls){\n         return isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, ignoreTrailingNulls);\n      * @param buffer2\n      * @param offset2\n      * @param length2\n-     * @return <code>true</code> if buffer1 and buffer2 have same contents, having regard to trailing nulls\n+     * @return {@code true} if buffer1 and buffer2 have same contents, having regard to trailing nulls\n      */\n     public static boolean isEqualWithNull(\n             final byte[] buffer1, final int offset1, final int length1,\n--- a/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n      * Checks that an archive input stream can be read, and that the file data matches file sizes.\n      * \n      * @param in\n-     * @param expected list of expected entries or <code>null</code> if no check of names desired\n+     * @param expected list of expected entries or {@code null} if no check of names desired\n      * @throws Exception\n      */\n     protected void checkArchiveContent(ArchiveInputStream in, List<String> expected)\n      * Checks that an archive input stream can be read, and that the file data matches file sizes.\n      * \n      * @param in\n-     * @param expected list of expected entries or <code>null</code> if no check of names desired\n+     * @param expected list of expected entries or {@code null} if no check of names desired\n      * @param cleanUp Cleans up resources if true \n      * @return returns the created result file if cleanUp = false, or null otherwise \n      * @throws Exception", "timestamp": 1333233647, "metainfo": ""}