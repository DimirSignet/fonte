{"sha": "2ab43b0a1d56be413754424910362811fa3d85c4", "log": "COMPRESS-192 add an encoding option to ArchiveStreamFactory for zip and tar.  Based on patch by Jukka Zitting  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n     public static final String ZIP = \"zip\";\n \n     /**\n+     * Entry encoding, null for the default.\n+     */\n+    private String entryEncoding = null;\n+\n+    /**\n+     * Returns the encoding to use for zip and tar files, or null for\n+     * the default.\n+     *\n+     * @return entry encoding, or null\n+     * @since 1.5\n+     */\n+    public String getEntryEncoding() {\n+        return entryEncoding;\n+    }\n+\n+    /**\n+     * Sets the encoding to use for zip and tar files. Use null for\n+     * the default.\n+     *\n+     * @return entryEncoding entry encoding, or null\n+     * @since 1.5\n+     */\n+    public void setEntryEncoding(String entryEncoding) {\n+        this.entryEncoding = entryEncoding;\n+    }\n+\n+    /**\n      * Create an archive input stream from an archiver name and an input stream.\n      * \n      * @param archiverName the archive name, i.e. \"ar\", \"zip\", \"tar\", \"jar\", \"dump\" or \"cpio\"\n             return new ArArchiveInputStream(in);\n         }\n         if (ZIP.equalsIgnoreCase(archiverName)) {\n-            return new ZipArchiveInputStream(in);\n+            if (entryEncoding != null) {\n+                return new ZipArchiveInputStream(in, entryEncoding);\n+            } else {\n+                return new ZipArchiveInputStream(in);\n+            }\n         }\n         if (TAR.equalsIgnoreCase(archiverName)) {\n-            return new TarArchiveInputStream(in);\n+            if (entryEncoding != null) {\n+                return new TarArchiveInputStream(in, entryEncoding);\n+            } else {\n+                return new TarArchiveInputStream(in);\n+            }\n         }\n         if (JAR.equalsIgnoreCase(archiverName)) {\n             return new JarArchiveInputStream(in);\n             return new ArArchiveOutputStream(out);\n         }\n         if (ZIP.equalsIgnoreCase(archiverName)) {\n-            return new ZipArchiveOutputStream(out);\n+            ZipArchiveOutputStream zip = new ZipArchiveOutputStream(out);\n+            if (entryEncoding != null) {\n+                zip.setEncoding(entryEncoding);\n+            }\n+            return zip;\n         }\n         if (TAR.equalsIgnoreCase(archiverName)) {\n-            return new TarArchiveOutputStream(out);\n+            if (entryEncoding != null) {\n+                return new TarArchiveOutputStream(out, entryEncoding);\n+            } else {\n+                return new TarArchiveOutputStream(out);\n+            }\n         }\n         if (JAR.equalsIgnoreCase(archiverName)) {\n             return new JarArchiveOutputStream(out);\n             int signatureLength = in.read(signature);\n             in.reset();\n             if (ZipArchiveInputStream.matches(signature, signatureLength)) {\n-                return new ZipArchiveInputStream(in);\n+                if (entryEncoding != null) {\n+                    return new ZipArchiveInputStream(in, entryEncoding);\n+                } else {\n+                    return new ZipArchiveInputStream(in);\n+                }\n             } else if (JarArchiveInputStream.matches(signature, signatureLength)) {\n                 return new JarArchiveInputStream(in);\n             } else if (ArArchiveInputStream.matches(signature, signatureLength)) {\n             signatureLength = in.read(tarheader);\n             in.reset();\n             if (TarArchiveInputStream.matches(tarheader, signatureLength)) {\n-                return new TarArchiveInputStream(in);\n+                if (entryEncoding != null) {\n+                    return new TarArchiveInputStream(in, entryEncoding);\n+                } else {\n+                    return new TarArchiveInputStream(in);\n+                }\n             }\n             // COMPRESS-117 - improve auto-recognition\n             if (signatureLength >= 512) {\n \n         throw new ArchiveException(\"No Archiver found for the stream signature\");\n     }\n+\n }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n     private static final long TWO_EXP_32 = ZIP64_MAGIC + 1;\n \n     public ZipArchiveInputStream(InputStream inputStream) {\n-        this(inputStream, ZipEncodingHelper.UTF8, true);\n+        this(inputStream, ZipEncodingHelper.UTF8);\n+    }\n+\n+    /**\n+     * @param encoding the encoding to use for file names, use null\n+     * for the platform's default encoding\n+     * @since 1.5\n+     */\n+    public ZipArchiveInputStream(InputStream inputStream, String encoding) {\n+        this(inputStream, encoding, true);\n     }\n \n     /**", "timestamp": 1341689651, "metainfo": ""}