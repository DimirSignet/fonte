{"sha": "7599b70b39fbc6f4ae3689e11c872f510a14b6a3", "log": "add a bunch of @Override annotations  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public void finish() throws IOException {\n         if (finished) {\n             throw new IOException(\"This archive has already been finished\");\n      * Writes all necessary data for this entry.\n      * @throws IOException on error\n      */\n+    @Override\n     public void closeArchiveEntry() throws IOException {\n         if (finished) {\n             throw new IOException(\"Stream has already been finished\");\n      * {@inheritDoc} \n      * @throws ClassCastException if entry is not an instance of ZipArchiveEntry\n      */\n+    @Override\n     public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {\n         if (finished) {\n             throw new IOException(\"Stream has already been finished\");\n      * compression method that hasn't been implemented yet.</p>\n      * @since Apache Commons Compress 1.1\n      */\n+    @Override\n     public boolean canWriteEntryData(ArchiveEntry ae) {\n         if (ae instanceof ZipArchiveEntry) {\n             return ZipUtil.canHandleEntryData((ZipArchiveEntry) ae);\n      * @param length the number of bytes to write\n      * @throws IOException on error\n      */\n+    @Override\n     public void write(byte[] b, int offset, int length) throws IOException {\n         ZipUtil.checkRequestedFeatures(entry);\n         if (entry.getMethod() == DEFLATED) {\n      *\n      * @exception  IOException  if an I/O error occurs.\n      */\n+    @Override\n     public void close() throws IOException {\n         if (!finished) {\n             finish();\n      *\n      * @exception  IOException  if an I/O error occurs.\n      */\n+    @Override\n     public void flush() throws IOException {\n         if (out != null) {\n             out.flush();\n      *\n      * <p>Must not be used if the stream has already been closed.</p>\n      */\n+    @Override\n     public ArchiveEntry createArchiveEntry(File inputFile, String entryName)\n             throws IOException {\n         if (finished) {", "timestamp": 1311865241, "metainfo": ""}