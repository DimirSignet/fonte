{"sha": "c30b588493d4fae79e020522ecb784d9210fa9d6", "log": "no longer extende FilterOutputStream in ArchiveOutputStream  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java\n package org.apache.commons.compress.archivers;\n \n import java.io.IOException;\n-import java.io.FilterOutputStream;\n import java.io.OutputStream;\n \n-public abstract class ArchiveOutputStream extends FilterOutputStream {\n-\n-    protected ArchiveOutputStream(OutputStream other) {\n-        super(other);\n-    }\n+public abstract class ArchiveOutputStream extends OutputStream {\n \n     public abstract void putArchiveEntry(ArchiveEntry entry) throws IOException;\n \n--- a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\n \n public class ArArchiveOutputStream extends ArchiveOutputStream {\n \n+    private final OutputStream out;\n     private long archiveOffset = 0;\n     private long entryOffset = 0;\n     private ArArchiveEntry prevEntry;\n \n     public ArArchiveOutputStream( final OutputStream pOut ) {\n-        super(pOut);\n+        this.out = pOut;\n     }\n \n     private long writeArchiveHeader() throws IOException {\n--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n \n     private long written;\n \n+    private final OutputStream out;\n+\n     /**\n      * Check to make sure that this stream has not been closed\n      *\n      * @param format The format of the stream\n      */\n     public CpioArchiveOutputStream(final OutputStream out, final short format) {\n-        super(out);\n+        this.out = new FilterOutputStream(out);\n         setFormat(format);\n     }\n \n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n \n public class TarArchiveOutputStream extends ArchiveOutputStream {\n \n+    private final TarOutputStream out;\n+    \n     public TarArchiveOutputStream(OutputStream out) {\n-        super(new TarOutputStream(out));\n+        this.out = new TarOutputStream(out);\n     }\n     \n     public void close() throws IOException {\n     }\n \n     public void closeArchiveEntry() throws IOException {\n-        ((TarOutputStream) out).closeEntry();\n+        this.out.closeEntry();\n     }\n \n     public void putArchiveEntry(ArchiveEntry entry) throws IOException {\n-        ((TarOutputStream) out).putNextEntry((TarArchiveEntry)entry);\n+        this.out.putNextEntry((TarArchiveEntry)entry);\n     }\n \n     public void write(byte[] buffer, int offset, int length) throws IOException {\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n      */\n     private RandomAccessFile raf = null;\n \n+    private final OutputStream out;\n+\n     /**\n      * Creates a new ZIP OutputStream filtering the underlying stream.\n      * @param out the outputstream to zip\n      * @since 1.1\n      */\n     public ZipArchiveOutputStream(OutputStream out) {\n-        super(out);\n+        this.out = out;\n     }\n \n     /**\n      * @throws IOException on error\n      */\n     public ZipArchiveOutputStream(File file) throws IOException {\n-        super(null);\n-\n+        OutputStream o = null;\n         try {\n             raf = new RandomAccessFile(file, \"rw\");\n             raf.setLength(0);\n                 }\n                 raf = null;\n             }\n-            out = new FileOutputStream(file);\n-        }\n+            o = new FileOutputStream(file);\n+        }\n+        out = o;\n     }\n \n     /**\n         // do nothing\n     }\n \n+    // used to be implemented via FilterOutputStream\n+    /**\n+     * Invokes the {@see #write(byte[],int,int) three-arg version}.\n+     */\n+    public void write(byte[] b) throws IOException {\n+        write(b, 0, b.length);\n+    }\n+\n     /*\n      * Various ZIP constants\n      */", "timestamp": 1234280135, "metainfo": ""}