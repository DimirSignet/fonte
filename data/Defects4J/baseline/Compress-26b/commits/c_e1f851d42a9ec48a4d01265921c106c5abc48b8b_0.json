{"sha": "e1f851d42a9ec48a4d01265921c106c5abc48b8b", "log": "implement the last remaining case for ZIP64 writing.  COMPRESS-150.  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n             }\n         }\n \n+        final Zip64Mode effectiveMode = getEffectiveZip64Mode(entry.entry);\n         long bytesWritten = written - entry.dataStart;\n         long realCrc = crc.getValue();\n         crc.reset();\n             entry.entry.setCrc(realCrc);\n         }\n \n-        boolean actuallyNeedsZip64 = zip64Mode == Zip64Mode.Always\n+        final boolean actuallyNeedsZip64 = effectiveMode == Zip64Mode.Always\n             || entry.entry.getSize() >= ZIP64_MAGIC\n             || entry.entry.getCompressedSize() >= ZIP64_MAGIC;\n-        if (actuallyNeedsZip64 && zip64Mode == Zip64Mode.Never) {\n+        if (actuallyNeedsZip64 && effectiveMode == Zip64Mode.Never) {\n             throw new Zip64RequiredException(Zip64RequiredException\n                                              .getEntryTooBigMessage(entry.entry));\n         }\n             entry.entry.setCompressedSize(entry.entry.getSize());\n         }\n \n+        final Zip64Mode effectiveMode = getEffectiveZip64Mode(entry.entry);\n+\n         if ((entry.entry.getSize() >= ZIP64_MAGIC\n              || entry.entry.getCompressedSize() >= ZIP64_MAGIC)\n-            && zip64Mode == Zip64Mode.Never) {\n+            && effectiveMode == Zip64Mode.Never) {\n             throw new Zip64RequiredException(Zip64RequiredException\n                                              .getEntryTooBigMessage(entry.entry));\n         }\n         // * or the size is unknown and we can ensure it won't hurt\n         //   other implementations if we add it (i.e. we can erase its\n         //   usage)\n-        if (zip64Mode == Zip64Mode.Always\n+        if (effectiveMode == Zip64Mode.Always\n             || entry.entry.getSize() >= ZIP64_MAGIC\n             || entry.entry.getCompressedSize() >= ZIP64_MAGIC\n             || (entry.entry.getSize() == ArchiveEntry.SIZE_UNKNOWN\n                 && raf != null\n-                && zip64Mode != Zip64Mode.Never)) {\n+                && effectiveMode != Zip64Mode.Never)) {\n \n             Zip64ExtendedInformationExtraField z64 = getZip64Extra(entry.entry);\n             if (entry.entry.getMethod() == STORED\n         return ze.getExtraField(Zip64ExtendedInformationExtraField\n                                 .HEADER_ID)\n             != null;\n+    }\n+\n+    /**\n+     * If the mode is AsNeeded and the entry is a compressed entry of\n+     * unknown size that gets written to a non-seekable stream the\n+     * change the default to Never.\n+     *\n+     * @since Apache Commons Compress 1.3\n+     */\n+    private Zip64Mode getEffectiveZip64Mode(ZipArchiveEntry ze) {\n+        if (zip64Mode != Zip64Mode.AsNeeded\n+            || raf != null\n+            || ze.getMethod() != DEFLATED\n+            || ze.getSize() != ArchiveEntry.SIZE_UNKNOWN) {\n+            return zip64Mode;\n+        }\n+        return Zip64Mode.Never;\n     }\n \n     private ZipEncoding getEntryEncoding(ZipArchiveEntry ze) {\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java\n         };\n     }\n \n-    @Ignore\n     @Test public void write100KFilesFile() throws Throwable {\n         withTemporaryArchive(\"write100KFilesFile\", write100KFiles(), true);\n     }\n \n-    @Ignore\n     @Test public void write100KFilesStream() throws Throwable {\n         withTemporaryArchive(\"write100KFilesStream\", write100KFiles(), false);\n     }\n \n-    @Ignore\n     @Test public void write100KFilesFileModeAlways() throws Throwable {\n         withTemporaryArchive(\"write100KFilesFileModeAlways\",\n                              write100KFiles(Zip64Mode.Always), true);\n     }\n \n-    @Ignore\n     @Test public void write100KFilesStreamModeAlways() throws Throwable {\n         withTemporaryArchive(\"write100KFilesStreamModeAlways\",\n                              write100KFiles(Zip64Mode.Always), false);\n             }\n         };\n \n-    @Ignore\n     @Test public void write100KFilesFileModeNever() throws Throwable {\n         withTemporaryArchive(\"write100KFilesFileModeNever\",\n                              write100KFilesModeNever, true);\n     }\n \n-    @Ignore\n     @Test public void write100KFilesStreamModeNever() throws Throwable {\n         withTemporaryArchive(\"write100KFilesStreamModeNever\",\n                              write100KFilesModeNever, false);\n         };\n     }\n \n-    @Ignore\n     @Test public void write3EntriesCreatingBigArchiveFile() throws Throwable {\n         withTemporaryArchive(\"write3EntriesCreatingBigArchiveFile\",\n                              write3EntriesCreatingBigArchive(),\n                              true);\n     }\n \n-    @Ignore\n     @Test public void write3EntriesCreatingBigArchiveStream() throws Throwable {\n         withTemporaryArchive(\"write3EntriesCreatingBigArchiveStream\",\n                              write3EntriesCreatingBigArchive(),\n                              false);\n     }\n \n-    @Ignore\n     @Test public void write3EntriesCreatingBigArchiveFileModeAlways()\n         throws Throwable {\n         withTemporaryArchive(\"write3EntriesCreatingBigArchiveFileModeAlways\",\n                              true);\n     }\n \n-    @Ignore\n     @Test public void write3EntriesCreatingBigArchiveStreamModeAlways()\n         throws Throwable {\n         withTemporaryArchive(\"write3EntriesCreatingBigArchiveStreamModeAlways\",\n             }\n         };\n \n-    @Ignore\n     @Test public void write3EntriesCreatingBigArchiveFileModeNever()\n         throws Throwable {\n         withTemporaryArchive(\"write3EntriesCreatingBigArchiveFileModeNever\",\n                              true);\n     }\n \n-    @Ignore\n     @Test public void write3EntriesCreatingBigArchiveStreamModeNever()\n         throws Throwable {\n         withTemporaryArchive(\"write3EntriesCreatingBigArchiveStreamModeNever\",\n      * No Compression + Stream => sizes must be known before data is\n      * written.\n      */\n-    @Ignore\n     @Test public void writeBigStoredEntryToStream() throws Throwable {\n         withTemporaryArchive(\"writeBigStoredEntryToStream\",\n                              writeBigStoredEntry(true),\n                              false);\n     }\n \n-    @Ignore\n     @Test public void writeBigStoredEntryKnownSizeToFile() throws Throwable {\n         withTemporaryArchive(\"writeBigStoredEntryKnownSizeToFile\",\n                              writeBigStoredEntry(true),\n                              true);\n     }\n \n-    @Ignore\n     @Test public void writeBigStoredEntryUnnownSizeToFile() throws Throwable {\n         withTemporaryArchive(\"writeBigStoredEntryUnknownSizeToFile\",\n                              writeBigStoredEntry(false),\n                              true);\n     }\n \n-    @Ignore\n     @Test public void writeBigStoredEntryToStreamModeAlways() throws Throwable {\n         withTemporaryArchive(\"writeBigStoredEntryToStreamModeAlways\",\n                              writeBigStoredEntry(true, Zip64Mode.Always),\n                              false);\n     }\n \n-    @Ignore\n     @Test public void writeBigStoredEntryKnownSizeToFileModeAlways()\n         throws Throwable {\n         withTemporaryArchive(\"writeBigStoredEntryKnownSizeToFileModeAlways\",\n                              true);\n     }\n \n-    @Ignore\n     @Test public void writeBigStoredEntryUnnownSizeToFileModeAlways()\n         throws Throwable {\n         withTemporaryArchive(\"writeBigStoredEntryUnknownSizeToFileModeAlways\",\n         };\n     }\n \n-    @Ignore\n     @Test public void writeBigStoredEntryToStreamModeNever() throws Throwable {\n         withTemporaryArchive(\"writeBigStoredEntryToStreamModeNever\",\n                              writeBigStoredEntryModeNever(true),\n                              false);\n     }\n \n-    @Ignore\n     @Test public void writeBigStoredEntryKnownSizeToFileModeNever()\n         throws Throwable {\n         withTemporaryArchive(\"writeBigStoredEntryKnownSizeToFileModeNever\",\n                              true);\n     }\n \n-    @Ignore\n     @Test public void writeBigStoredEntryUnnownSizeToFileModeNever()\n         throws Throwable {\n         withTemporaryArchive(\"writeBigStoredEntryUnknownSizeToFileModeNever\",\n      * Creates a temporary archive of approx 4MB in size\n      */\n     private static ZipOutputTest\n-        writeBigDeflatedEntryKnownSizeToStream(final Zip64Mode mode) {\n+        writeBigDeflatedEntryToStream(final boolean knownSize,\n+                                      final Zip64Mode mode) {\n         return new ZipOutputTest() {\n                                  public void test(File f,\n                                                   ZipArchiveOutputStream zos)\n                                      byte[] buf = new byte[ONE_MILLION];\n                                      ZipArchiveEntry zae =\n                                          new ZipArchiveEntry(\"0\");\n+                                     if (knownSize) {\n                                      zae.setSize(FIVE_BILLION);\n+                                     }\n                                      zae.setMethod(ZipArchiveEntry.DEFLATED);\n                                      zos.putArchiveEntry(zae);\n                                      for (int j = 0;\n         };\n     }\n \n-    @Ignore\n     @Test public void writeBigDeflatedEntryKnownSizeToStream()\n         throws Throwable {\n         withTemporaryArchive(\"writeBigDeflatedEntryKnownSizeToStream\",\n-                             writeBigDeflatedEntryKnownSizeToStream(Zip64Mode\n-                                                                    .AsNeeded),\n+                             writeBigDeflatedEntryToStream(true,\n+                                                           Zip64Mode.AsNeeded),\n                              false);\n     }\n \n-    @Ignore\n     @Test public void writeBigDeflatedEntryKnownSizeToStreamModeAlways()\n         throws Throwable {\n         withTemporaryArchive(\"writeBigDeflatedEntryKnownSizeToStreamModeAlways\",\n-                             writeBigDeflatedEntryKnownSizeToStream(Zip64Mode\n-                                                                    .Always),\n+                             writeBigDeflatedEntryToStream(true,\n+                                                           Zip64Mode.Always),\n+                             false);\n+    }\n+\n+    @Test public void writeBigDeflatedEntryUnknownSizeToStreamModeAlways()\n+        throws Throwable {\n+        withTemporaryArchive(\"writeBigDeflatedEntryUnknownSizeToStreamModeAlways\",\n+                             writeBigDeflatedEntryToStream(false,\n+                                                           Zip64Mode.Always),\n+                             false);\n+    }\n+\n+    private static ZipOutputTest\n+        writeBigDeflatedEntryUnknownSizeToStream(final Zip64Mode mode) {\n+        return new ZipOutputTest() {\n+            public void test(File f, ZipArchiveOutputStream zos)\n+                throws IOException {\n+                try {\n+                    if (mode != Zip64Mode.AsNeeded) {\n+                        zos.setUseZip64(mode);\n+                    }\n+                    byte[] buf = new byte[ONE_MILLION];\n+                    ZipArchiveEntry zae = new ZipArchiveEntry(\"0\");\n+                    zae.setMethod(ZipArchiveEntry.DEFLATED);\n+                    zos.putArchiveEntry(zae);\n+                    for (int j = 0; j < FIVE_BILLION / 1000 / 1000; j++) {\n+                        zos.write(buf);\n+                    }\n+                    zos.closeArchiveEntry();\n+                    fail(\"expected a Zip64RequiredException\");\n+                } catch (Zip64RequiredException ex) {\n+                    assertTrue(ex.getMessage().startsWith(\"0's size\"));\n+                }\n+            }\n+        };\n+    }\n+\n+    @Test public void writeBigDeflatedEntryUnknownSizeToStream()\n+        throws Throwable {\n+        withTemporaryArchive(\"writeBigDeflatedEntryUnknownSizeToStream\",\n+                             writeBigDeflatedEntryUnknownSizeToStream(Zip64Mode\n+                                                                      .AsNeeded),\n+                             false);\n+    }\n+\n+    @Test public void writeBigDeflatedEntryUnknownSizeToStreamModeNever()\n+        throws Throwable {\n+        withTemporaryArchive(\"writeBigDeflatedEntryUnknownSizeToStreamModeNever\",\n+                             writeBigDeflatedEntryUnknownSizeToStream(Zip64Mode\n+                                                                      .Never),\n                              false);\n     }\n \n         };\n     }\n \n-    @Ignore\n     @Test public void writeBigDeflatedEntryKnownSizeToFile()\n         throws Throwable {\n         withTemporaryArchive(\"writeBigDeflatedEntryKnownSizeToFile\",\n                              true);\n     }\n \n-    @Ignore\n     @Test public void writeBigDeflatedEntryUnknownSizeToFile()\n         throws Throwable {\n         withTemporaryArchive(\"writeBigDeflatedEntryUnknownSizeToFile\",\n                              true);\n     }\n \n-    @Ignore\n     @Test public void writeBigDeflatedEntryKnownSizeToFileModeAlways()\n         throws Throwable {\n         withTemporaryArchive(\"writeBigDeflatedEntryKnownSizeToFileModeAlways\",\n                              true);\n     }\n \n-    @Ignore\n     @Test public void writeBigDeflatedEntryUnknownSizeToFileModeAlways()\n         throws Throwable {\n         withTemporaryArchive(\"writeBigDeflatedEntryUnknownSizeToFileModeAlways\",\n                              true);\n     }\n \n-    @Ignore\n     @Test public void writeBigDeflatedEntryKnownSizeToStreamModeNever()\n         throws Throwable {\n         withTemporaryArchive(\"writeBigDeflatedEntryKnownSizeToStreamModeNever\",\n         };\n     }\n \n-    @Ignore\n     @Test public void writeBigDeflatedEntryKnownSizeToFileModeNever()\n         throws Throwable {\n         withTemporaryArchive(\"writeBigDeflatedEntryKnownSizeToFileModeNever\",\n                              true);\n     }\n \n-    @Ignore\n     @Test public void writeBigDeflatedEntryUnknownSizeToFileModeNever()\n         throws Throwable {\n         withTemporaryArchive(\"writeBigDeflatedEntryUnknownSizeToFileModeNever\",\n         };\n     }\n \n-    @Ignore\n     @Test public void writeSmallStoredEntryToStream() throws Throwable {\n         withTemporaryArchive(\"writeSmallStoredEntryToStream\",\n                              writeSmallStoredEntry(true),\n                              false);\n     }\n \n-    @Ignore\n     @Test public void writeSmallStoredEntryKnownSizeToFile() throws Throwable {\n         withTemporaryArchive(\"writeSmallStoredEntryKnownSizeToFile\",\n                              writeSmallStoredEntry(true),\n                              true);\n     }\n \n-    @Ignore\n     @Test public void writeSmallStoredEntryUnnownSizeToFile() throws Throwable {\n         withTemporaryArchive(\"writeSmallStoredEntryUnknownSizeToFile\",\n                              writeSmallStoredEntry(false),\n                              true);\n     }\n \n-    @Ignore\n     @Test public void writeSmallStoredEntryToStreamModeNever() throws Throwable {\n         withTemporaryArchive(\"writeSmallStoredEntryToStreamModeNever\",\n                              writeSmallStoredEntry(true, Zip64Mode.Never),\n                              false);\n     }\n \n-    @Ignore\n     @Test public void writeSmallStoredEntryKnownSizeToFileModeNever()\n         throws Throwable {\n         withTemporaryArchive(\"writeSmallStoredEntryKnownSizeToFileModeNever\",\n                              true);\n     }\n \n-    @Ignore\n     @Test public void writeSmallStoredEntryUnnownSizeToFileModeNever()\n         throws Throwable {\n         withTemporaryArchive(\"writeSmallStoredEntryUnknownSizeToFileModeNever\",\n         };\n     }\n \n-    @Ignore\n     @Test public void writeSmallStoredEntryToStreamModeAlways()\n         throws Throwable {\n         withTemporaryArchive(\"writeSmallStoredEntryToStreamModeAlways\",\n                              false);\n     }\n \n-    @Ignore\n     @Test public void writeSmallStoredEntryKnownSizeToFileModeAlways()\n         throws Throwable {\n         withTemporaryArchive(\"writeSmallStoredEntryKnownSizeToFileModeAlways\",\n                              true);\n     }\n \n-    @Ignore\n     @Test public void writeSmallStoredEntryUnnownSizeToFileModeAlways()\n         throws Throwable {\n         withTemporaryArchive(\"writeSmallStoredEntryUnknownSizeToFileModeAlways\",\n      * are inside the data descriptor.  No ZIP64 extra field at all.\n      */\n     private static ZipOutputTest\n-        writeSmallDeflatedEntryKnownSizeToStream(final Zip64Mode mode) {\n+        writeSmallDeflatedEntryToStream(final boolean knownSize,\n+                                        final Zip64Mode mode) {\n         return new ZipOutputTest() {\n             public void test(File f, ZipArchiveOutputStream zos)\n                 throws IOException {\n                 }\n                 byte[] buf = new byte[ONE_MILLION];\n                 ZipArchiveEntry zae = new ZipArchiveEntry(\"0\");\n+                if (knownSize) {\n                 zae.setSize(ONE_MILLION);\n+                }\n                 zae.setMethod(ZipArchiveEntry.DEFLATED);\n                 zos.putArchiveEntry(zae);\n                 zos.write(buf);\n \n     }\n \n-    @Ignore\n     @Test public void writeSmallDeflatedEntryKnownSizeToStream()\n         throws Throwable {\n         withTemporaryArchive(\"writeSmallDeflatedEntryKnownSizeToStream\",\n-                             writeSmallDeflatedEntryKnownSizeToStream(Zip64Mode\n-                                                                      .AsNeeded),\n+                             writeSmallDeflatedEntryToStream(true,\n+                                                             Zip64Mode.AsNeeded),\n                              false);\n     }\n \n-    @Ignore\n     @Test public void writeSmallDeflatedEntryKnownSizeToStreamModeNever()\n         throws Throwable {\n         withTemporaryArchive(\"writeSmallDeflatedEntryKnownSizeToStreamModeNever\",\n-                             writeSmallDeflatedEntryKnownSizeToStream(Zip64Mode\n-                                                                      .Never),\n+                             writeSmallDeflatedEntryToStream(true,\n+                                                             Zip64Mode.Never),\n+                             false);\n+    }\n+\n+    @Test public void writeSmallDeflatedEntryUnknownSizeToStream()\n+        throws Throwable {\n+        withTemporaryArchive(\"writeSmallDeflatedEntryUnknownSizeToStream\",\n+                             writeSmallDeflatedEntryToStream(false,\n+                                                             Zip64Mode.AsNeeded),\n+                             false);\n+    }\n+\n+    @Test public void writeSmallDeflatedEntryUnknownSizeToStreamModeNever()\n+        throws Throwable {\n+        withTemporaryArchive(\"writeSmallDeflatedEntryUnknownSizeToStreamModeNever\",\n+                             writeSmallDeflatedEntryToStream(false,\n+                                                             Zip64Mode.Never),\n                              false);\n     }\n \n      * are inside the data descriptor.  ZIP64 extra field as mode is Always.\n      */\n     private static ZipOutputTest\n-        getWriteSmallDeflatedEntryKnownSizeToStreamModeAlways() {\n+        writeSmallDeflatedEntryToStreamModeAlways(final boolean knownSize) {\n         return new ZipOutputTest() {\n             public void test(File f, ZipArchiveOutputStream zos)\n                 throws IOException {\n                 zos.setUseZip64(Zip64Mode.Always);\n                 byte[] buf = new byte[ONE_MILLION];\n                 ZipArchiveEntry zae = new ZipArchiveEntry(\"0\");\n-                zae.setSize(ONE_MILLION);\n+                if (knownSize) {\n+                    zae.setSize(ONE_MILLION);\n+                }\n                 zae.setMethod(ZipArchiveEntry.DEFLATED);\n                 zos.putArchiveEntry(zae);\n                 zos.write(buf);\n     @Test public void writeSmallDeflatedEntryKnownSizeToStreamModeAlways()\n         throws Throwable {\n         withTemporaryArchive(\"writeSmallDeflatedEntryKnownSizeToStreamModeAlways\",\n-                             getWriteSmallDeflatedEntryKnownSizeToStreamModeAlways(),\n+                             writeSmallDeflatedEntryToStreamModeAlways(true),\n+                             false);\n+    }\n+\n+    @Test public void writeSmallDeflatedEntryUnknownSizeToStreamModeAlways()\n+        throws Throwable {\n+        withTemporaryArchive(\"writeSmallDeflatedEntryUnknownSizeToStreamModeAlways\",\n+                             writeSmallDeflatedEntryToStreamModeAlways(false),\n                              false);\n     }\n \n         };\n     }\n \n-    @Ignore\n     @Test public void writeSmallDeflatedEntryKnownSizeToFile()\n         throws Throwable {\n         withTemporaryArchive(\"writeSmallDeflatedEntryKnownSizeToFile\",\n                              true);\n     }\n \n-    @Ignore\n     @Test public void writeSmallDeflatedEntryUnknownSizeToFile()\n         throws Throwable {\n         withTemporaryArchive(\"writeSmallDeflatedEntryUnknownSizeToFile\",\n                              true);\n     }\n \n-    @Ignore\n     @Test public void writeSmallDeflatedEntryKnownSizeToFileModeNever()\n         throws Throwable {\n         withTemporaryArchive(\"writeSmallDeflatedEntryKnownSizeToFileModeNever\",\n                              true);\n     }\n \n-    @Ignore\n     @Test public void writeSmallDeflatedEntryUnknownSizeToFileModeNever()\n         throws Throwable {\n         withTemporaryArchive(\"writeSmallDeflatedEntryUnknownSizeToFileModeNever\",\n         };\n     }\n \n-    @Ignore\n     @Test public void writeSmallDeflatedEntryKnownSizeToFileModeAlways()\n         throws Throwable {\n         withTemporaryArchive(\"writeSmallDeflatedEntryKnownSizeToFileModeAlways\",\n                              true);\n     }\n \n-    @Ignore\n     @Test public void writeSmallDeflatedEntryUnknownSizeToFileModeAlways()\n         throws Throwable {\n         withTemporaryArchive(\"writeSmallDeflatedEntryUnknownSizeToFileModeAlways\",", "timestamp": 1312907893, "metainfo": ""}