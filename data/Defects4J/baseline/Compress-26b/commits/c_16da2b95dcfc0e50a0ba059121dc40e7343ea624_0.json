{"sha": "16da2b95dcfc0e50a0ba059121dc40e7343ea624", "log": "Improved the exception message when the name/link is too long  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n         Map<String, String> paxHeaders = new HashMap<String, String>();\n         final String entryName = entry.getName();\n         boolean paxHeaderContainsPath = handleLongName(entryName, paxHeaders, \"path\",\n-                                                       TarConstants.LF_GNUTYPE_LONGNAME);\n+                                                       TarConstants.LF_GNUTYPE_LONGNAME, \"file name\");\n \n         final String linkName = entry.getLinkName();\n         boolean paxHeaderContainsLinkPath = linkName != null && linkName.length() > 0\n             && handleLongName(linkName, paxHeaders, \"linkpath\",\n-                              TarConstants.LF_GNUTYPE_LONGLINK);\n+                              TarConstants.LF_GNUTYPE_LONGLINK, \"link name\");\n \n         if (bigNumberMode == BIGNUMBER_POSIX) {\n             addPaxHeadersForBigNumbers(paxHeaders, entry);\n      * @param paxHeaders current map of pax headers\n      * @param paxHeaderName name of the pax header to write\n      * @param linkType type of the GNU entry to write\n+     * @param fieldName the name of the field\n      * @return whether a pax header has been written.\n      */\n     private boolean handleLongName(String name,\n                                    Map<String, String> paxHeaders,\n-                                   String paxHeaderName, byte linkType)\n+                                   String paxHeaderName, byte linkType, String fieldName)\n         throws IOException {\n         final ByteBuffer encodedName = encoding.encode(name);\n         final int len = encodedName.limit() - encodedName.position();\n             } else if (longFileMode == LONGFILE_GNU) {\n                 // create a TarEntry for the LongLink, the contents\n                 // of which are the link's name\n-                TarArchiveEntry longLinkEntry =\n-                    new TarArchiveEntry(TarConstants.GNU_LONGLINK, linkType);\n+                TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, linkType);\n \n                 longLinkEntry.setSize(len + 1); // +1 for NUL\n                 putArchiveEntry(longLinkEntry);\n                 write(0); // NUL terminator\n                 closeArchiveEntry();\n             } else if (longFileMode != LONGFILE_TRUNCATE) {\n-                throw new RuntimeException(paxHeaderName + \" '\" + name\n+                throw new RuntimeException(fieldName + \" '\" + name\n                                            + \"' is too long ( > \"\n                                            + TarConstants.NAMELEN + \" bytes)\");\n             }", "timestamp": 1376038971, "metainfo": ""}