{"sha": "5a8030a9a3c582c128862f298dd8bff4c2985606", "log": "COMPRESS-257 add support for x86 BCJ - XZ for Java also supports some of the other BJJs and Delta  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n \n import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;\n import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;\n+import org.tukaani.xz.FinishableWrapperOutputStream;\n import org.tukaani.xz.LZMAInputStream;\n+import org.tukaani.xz.X86Options;\n \n class Coders {\n     private static final Map<SevenZMethod, CoderBase> CODER_MAP = new HashMap<SevenZMethod, CoderBase>() {{\n             put(SevenZMethod.DEFLATE, new DeflateDecoder());\n             put(SevenZMethod.BZIP2, new BZIP2Decoder());\n             put(SevenZMethod.AES256SHA256, new AES256SHA256Decoder());\n+            put(SevenZMethod.X86, new X86Decoder());\n         }};\n \n     static CoderBase findByMethod(SevenZMethod method) {\n                 throw new IOException(\"Dictionary larger than 4GiB maximum size\");\n             }\n             return new LZMAInputStream(in, -1, propsByte, (int) dictSize);\n+        }\n+    }\n+    \n+    static class X86Decoder extends CoderBase {\n+        @Override\n+        InputStream decode(final InputStream in, final Coder coder,\n+                byte[] password) throws IOException {\n+            return new X86Options().getInputStream(in);\n+        }\n+        @Override\n+        OutputStream encode(final OutputStream out, final Object _) {\n+            return new X86Options().getOutputStream(new FinishableWrapperOutputStream(out));\n         }\n     }\n     \n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java\n      * AES encryption with a key length of 256 bit using SHA256 for\n      * hashes - only supported when reading\n      */\n-    AES256SHA256(new byte[] { (byte)0x06, (byte)0xf1, (byte)0x07, (byte)0x01 });\n+    AES256SHA256(new byte[] { (byte)0x06, (byte)0xf1, (byte)0x07, (byte)0x01 }),\n+    /**\n+     * BCJ x86 version 1.\n+     * @since 1.8\n+     */\n+    X86(new byte[] { 0x03, 0x03, 0x01, 0x03 }, new byte[] { 0x04 });\n \n     private final byte[] id;\n+    private final byte[] alternativeId;\n \n     private SevenZMethod(byte[] id) {\n+        this(id, null);\n+    }\n+\n+    private SevenZMethod(byte[] id, byte[] alternativeId) {\n         this.id = id;\n+        this.alternativeId = alternativeId;\n     }\n \n     byte[] getId() {\n \n     static SevenZMethod byId(byte[] id) {\n         for (SevenZMethod m : SevenZMethod.class.getEnumConstants()) {\n-            if (Arrays.equals(m.id, id)) {\n+            if (Arrays.equals(m.id, id)\n+                || (m.alternativeId != null && Arrays.equals(m.alternativeId, id))) {\n                 return m;\n             }\n         }", "timestamp": 1393566466, "metainfo": ""}