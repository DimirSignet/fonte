{"sha": "01c3fe92a44d898b39c285168095d26dbe5d450b", "log": "COMPRESS-200 support decompressConcatenated in CompressorStreamFactory  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n      */\n     public static final String XZ = \"xz\";\n \n+    private boolean decompressConcatenated = false;\n+\n+    /**\n+     * Whether to decompress the full input or only the first stream\n+     * in formats supporting multiple concatenated input streams.\n+     *\n+     * <p>This setting applies to the gzip, bzip2 and xz formats only.</p>\n+     *\n+     * @param       decompressConcatenated\n+     *                          if true, decompress until the end of the\n+     *                          input; if false, stop after the first\n+     *                          stream and leave the input position to point\n+     *                          to the next byte after the stream\n+     * @since Commons Compress 1.5\n+     */\n+    public void setDecompressConcatenated(boolean decompressConcatenated) {\n+        this.decompressConcatenated = decompressConcatenated;\n+    }\n+\n     /**\n      * Create an compressor input stream from an input stream, autodetecting\n      * the compressor type from the first few bytes of the stream. The InputStream\n             in.reset();\n \n             if (BZip2CompressorInputStream.matches(signature, signatureLength)) {\n-                return new BZip2CompressorInputStream(in);\n+                return new BZip2CompressorInputStream(in, decompressConcatenated);\n             }\n \n             if (GzipCompressorInputStream.matches(signature, signatureLength)) {\n-                return new GzipCompressorInputStream(in);\n+                return new GzipCompressorInputStream(in, decompressConcatenated);\n             }\n \n             if (XZUtils.isXZCompressionAvailable() &&\n                 XZCompressorInputStream.matches(signature, signatureLength)) {\n-                return new XZCompressorInputStream(in);\n+                return new XZCompressorInputStream(in, decompressConcatenated);\n             }\n \n             if (Pack200CompressorInputStream.matches(signature, signatureLength)) {", "timestamp": 1362673477, "metainfo": ""}