{"sha": "ed66885ceda532a07032b28d748431e5add6050a", "log": "whitespace only  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n             raf.seek(localDataStart);\n             writeOut(ZipLong.getBytes(entry.getCrc()));\n             if (!hasZip64Extra(entry)) {\n-            writeOut(ZipLong.getBytes(entry.getCompressedSize()));\n-            writeOut(ZipLong.getBytes(entry.getSize()));\n+                writeOut(ZipLong.getBytes(entry.getCompressedSize()));\n+                writeOut(ZipLong.getBytes(entry.getSize()));\n             } else {\n                 writeOut(ZipLong.ZIP64_MAGIC.getBytes());\n                 writeOut(ZipLong.ZIP64_MAGIC.getBytes());\n         }\n \n         // even if the field is there already, make sure it is the first one\n-            ze.addAsFirstExtraField(z64);\n+        ze.addAsFirstExtraField(z64);\n \n         return z64;\n     }\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java\n      */\n     private static ZipOutputTest writeBigStoredEntry(final boolean knownSize) {\n         return new ZipOutputTest() {\n-                                 public void test(File f,\n-                                                  ZipArchiveOutputStream zos)\n-                                     throws IOException {\n-                                     byte[] buf = new byte[1000 * 1000];\n-                                     ZipArchiveEntry zae =\n-                                         new ZipArchiveEntry(\"0\");\n-                                     if (knownSize) {\n-                                     zae.setSize(FIVE_BILLION);\n-                                     zae.setCrc(0x5c316f50L);\n-                                     }\n-                                     zae.setMethod(ZipArchiveEntry.STORED);\n-                                     zos.putArchiveEntry(zae);\n-                                     for (int j = 0;\n-                                          j < FIVE_BILLION / 1000 / 1000;\n-                                          j++) {\n-                                         zos.write(buf);\n-                                     }\n-                                     zos.closeArchiveEntry();\n-                                     zos.close();\n-\n-                                     RandomAccessFile a =\n-                                         new RandomAccessFile(f, \"r\");\n-                                     try {\n-                                         final long end =\n-                                             getLengthAndPositionAtCentralDirectory(a);\n-\n-                                         // grab first entry, verify\n-                                         // sizes are 0xFFFFFFFF and\n-                                         // it has a ZIP64 extended\n-                                         // information extra field\n-                                         byte[] header = new byte[12];\n-                                         a.readFully(header);\n-                                         assertArrayEquals(new byte[] {\n-                                                 // sig\n-                                                 (byte) 0x50, (byte) 0x4b, 1, 2,\n-                                                 // version made by\n-                                                 45, 0,\n-                                                 // version needed to extract\n-                                                 45, 0,\n-                                                 // GPB (EFS bit)\n-                                                 0, 8,\n-                                                 // method\n-                                                 0, 0\n-                                             }, header);\n-                                         // ignore timestamp\n-                                         a.skipBytes(4);\n-                                         byte[] rest = new byte[31];\n-                                         a.readFully(rest);\n-                                         assertArrayEquals(new byte[] {\n-                                                 // CRC\n-                                                 (byte) 0x50, (byte) 0x6F,\n-                                                 (byte) 0x31, (byte) 0x5c,\n-                                                 // Compressed Size\n-                                                 (byte) 0xFF, (byte) 0xFF,\n-                                                 (byte) 0xFF, (byte) 0xFF,\n-                                                 // Original Size\n-                                                 (byte) 0xFF, (byte) 0xFF,\n-                                                 (byte) 0xFF, (byte) 0xFF,\n-                                                 // file name length\n-                                                 1, 0,\n-                                                 // extra field length\n-                                                 20, 0,\n-                                                 // comment length\n-                                                 0, 0,\n-                                                 // disk number\n-                                                 0, 0,\n-                                                 // attributes\n-                                                 0, 0,\n-                                                 0, 0, 0, 0,\n-                                                 // offset\n-                                                 0, 0, 0, 0,\n-                                                 // file name\n-                                                 (byte) '0'\n-                                             }, rest);\n-                                         byte[] extra = new byte[20];\n-                                         a.readFully(extra);\n-                                         // 5e9 == 0x12A05F200\n-                                         assertArrayEquals(new byte[] {\n-                                                 // Header-ID\n-                                                 1, 0,\n-                                                 // size of extra\n-                                                 16, 0,\n-                                                 // original size\n-                                                 0, (byte) 0xF2, 5, (byte) 0x2A,\n-                                                 1, 0, 0, 0,\n-                                                 // compressed size\n-                                                 0, (byte) 0xF2, 5, (byte) 0x2A,\n-                                                 1, 0, 0, 0,\n-                                             }, extra);\n-\n-                                         // and now validate local file header\n-                                         a.seek(0);\n-                                         header = new byte[10];\n-                                         a.readFully(header);\n-                                         assertArrayEquals(new byte[] {\n-                                                 // sig\n-                                                 (byte) 0x50, (byte) 0x4b, 3, 4,\n-                                                 // version needed to extract\n-                                                 45, 0,\n-                                                 // GPB (EFS bit)\n-                                                 0, 8,\n-                                                 // method\n-                                                 0, 0\n-                                             }, header);\n-                                         // ignore timestamp\n-                                         a.skipBytes(4);\n-                                         rest = new byte[17];\n-                                         a.readFully(rest);\n-                                         assertArrayEquals(new byte[] {\n-                                                 // CRC\n-                                                 (byte) 0x50, (byte) 0x6F,\n-                                                 (byte) 0x31, (byte) 0x5c,\n-                                                 // Compressed Size\n-                                                 (byte) 0xFF, (byte) 0xFF,\n-                                                 (byte) 0xFF, (byte) 0xFF,\n-                                                 // Original Size\n-                                                 (byte) 0xFF, (byte) 0xFF,\n-                                                 (byte) 0xFF, (byte) 0xFF,\n-                                                 // file name length\n-                                                 1, 0,\n-                                                 // extra field length\n-                                                 20, 0,\n-                                                 // file name\n-                                                 (byte) '0'\n-                                             }, rest);\n-                                         a.readFully(extra);\n-                                         // 5e9 == 0x12A05F200\n-                                         assertArrayEquals(new byte[] {\n-                                                 // Header-ID\n-                                                 1, 0,\n-                                                 // size of extra\n-                                                 16, 0,\n-                                                 // original size\n-                                                 0, (byte) 0xF2, 5, (byte) 0x2A,\n-                                                 1, 0, 0, 0,\n-                                                 // compressed size\n-                                                 0, (byte) 0xF2, 5, (byte) 0x2A,\n-                                                 1, 0, 0, 0,\n-                                             }, extra);\n-                                     } finally {\n-                                         a.close();\n-                                     }\n-                                 }\n+            public void test(File f, ZipArchiveOutputStream zos)\n+                throws IOException {\n+                byte[] buf = new byte[1000 * 1000];\n+                ZipArchiveEntry zae = new ZipArchiveEntry(\"0\");\n+                if (knownSize) {\n+                    zae.setSize(FIVE_BILLION);\n+                    zae.setCrc(0x5c316f50L);\n+                }\n+                zae.setMethod(ZipArchiveEntry.STORED);\n+                zos.putArchiveEntry(zae);\n+                for (int j = 0; j < FIVE_BILLION / 1000 / 1000; j++) {\n+                    zos.write(buf);\n+                }\n+                zos.closeArchiveEntry();\n+                zos.close();\n+\n+                RandomAccessFile a = new RandomAccessFile(f, \"r\");\n+                try {\n+                    final long end = getLengthAndPositionAtCentralDirectory(a);\n+\n+                    // grab first entry, verify sizes are 0xFFFFFFFF\n+                    // and it has a ZIP64 extended information extra\n+                    // field\n+                    byte[] header = new byte[12];\n+                    a.readFully(header);\n+                    assertArrayEquals(new byte[] {\n+                            // sig\n+                            (byte) 0x50, (byte) 0x4b, 1, 2,\n+                            // version made by\n+                            45, 0,\n+                            // version needed to extract\n+                            45, 0,\n+                            // GPB (EFS bit)\n+                            0, 8,\n+                            // method\n+                            0, 0\n+                        }, header);\n+                    // ignore timestamp\n+                    a.skipBytes(4);\n+                    byte[] rest = new byte[31];\n+                    a.readFully(rest);\n+                    assertArrayEquals(new byte[] {\n+                            // CRC\n+                            (byte) 0x50, (byte) 0x6F, (byte) 0x31, (byte) 0x5c,\n+                            // Compressed Size\n+                            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,\n+                            // Original Size\n+                            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,\n+                            // file name length\n+                            1, 0,\n+                            // extra field length\n+                            20, 0,\n+                            // comment length\n+                            0, 0,\n+                            // disk number\n+                            0, 0,\n+                            // attributes\n+                            0, 0,\n+                            0, 0, 0, 0,\n+                            // offset\n+                            0, 0, 0, 0,\n+                            // file name\n+                            (byte) '0'\n+                        }, rest);\n+                    byte[] extra = new byte[20];\n+                    a.readFully(extra);\n+                    // 5e9 == 0x12A05F200\n+                    assertArrayEquals(new byte[] {\n+                            // Header-ID\n+                            1, 0,\n+                            // size of extra\n+                            16, 0,\n+                            // original size\n+                            0, (byte) 0xF2, 5, (byte) 0x2A,\n+                            1, 0, 0, 0,\n+                            // compressed size\n+                            0, (byte) 0xF2, 5, (byte) 0x2A,\n+                            1, 0, 0, 0,\n+                        }, extra);\n+\n+                    // and now validate local file header\n+                    a.seek(0);\n+                    header = new byte[10];\n+                    a.readFully(header);\n+                    assertArrayEquals(new byte[] {\n+                            // sig\n+                            (byte) 0x50, (byte) 0x4b, 3, 4,\n+                            // version needed to extract\n+                            45, 0,\n+                            // GPB (EFS bit)\n+                            0, 8,\n+                            // method\n+                            0, 0\n+                        }, header);\n+                    // ignore timestamp\n+                    a.skipBytes(4);\n+                    rest = new byte[17];\n+                    a.readFully(rest);\n+                    assertArrayEquals(new byte[] {\n+                            // CRC\n+                            (byte) 0x50, (byte) 0x6F, (byte) 0x31, (byte) 0x5c,\n+                            // Compressed Size\n+                            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,\n+                            // Original Size\n+                            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,\n+                            // file name length\n+                            1, 0,\n+                            // extra field length\n+                            20, 0,\n+                            // file name\n+                            (byte) '0'\n+                        }, rest);\n+                    a.readFully(extra);\n+                    // 5e9 == 0x12A05F200\n+                    assertArrayEquals(new byte[] {\n+                            // Header-ID\n+                            1, 0,\n+                            // size of extra\n+                            16, 0,\n+                            // original size\n+                            0, (byte) 0xF2, 5, (byte) 0x2A,\n+                            1, 0, 0, 0,\n+                            // compressed size\n+                            0, (byte) 0xF2, 5, (byte) 0x2A,\n+                            1, 0, 0, 0,\n+                        }, extra);\n+                } finally {\n+                    a.close();\n+                }\n+            }\n         };\n     }\n ", "timestamp": 1312038931, "metainfo": ""}