{"sha": "6ef52480773a7b14a9c39ef9fde16e6d6d30aee5", "log": "remove debug logging  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java\n  * @since 1.6\n  */\n public class ArjArchiveInputStream extends ArchiveInputStream {\n-    private static final boolean DEBUG = false;\n     private static final int ARJ_MAGIC_1 = 0x60;\n     private static final int ARJ_MAGIC_2 = 0xEA;\n     private final DataInputStream in;\n     @Override\n     public void close() throws IOException {\n         in.close();\n-    }\n-\n-    private static void debug(final String message) {\n-        System.out.println(message);\n     }\n \n     private int read8(final DataInputStream in) throws IOException {\n             }\n         }\n         \n-        if (DEBUG) {\n-            debug(mainHeader.toString());\n-        }\n-        \n         return mainHeader;\n     }\n     \n         }\n         localFileHeader.extendedHeaders = extendedHeaders.toArray(new byte[extendedHeaders.size()][]);\n         \n-        if (DEBUG) {\n-            debug(localFileHeader.toString());\n-        }\n-        \n         return localFileHeader;\n     }\n     \n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n                     final int byte1 = 0xff & coder.properties[1];\n                     final int ivSize = ((byte0 >> 6) & 1) + (byte1 & 0x0f);\n                     final int saltSize = ((byte0 >> 7) & 1) + (byte1 >> 4);\n-                    //debug(\"numCyclesPower=\" + numCyclesPower + \", saltSize=\" + saltSize + \", ivSize=\" + ivSize);\n                     if (2 + saltSize + ivSize > coder.properties.length) {\n                         throw new IOException(\"Salt size + IV size too long\");\n                     }\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n  * @since 1.6\n  */\n public class SevenZFile {\n-    private static final boolean DEBUG = false;\n     static final int SIGNATURE_HEADER_SIZE = 32;\n     private RandomAccessFile file;\n     private final Archive archive;\n         }\n     }\n     \n-    private static void debug(String str) {\n-        if (DEBUG) {\n-            System.out.println(str);\n-        }\n-    }\n-    \n-    private static void debug(String fmt, Object... args) {\n-        if (DEBUG) {\n-            System.out.format(fmt, args);\n-        }\n-    }\n-    \n     /**\n      * Returns the next Archive Entry in this archive.\n      *\n     }\n     \n     private Archive readHeaders(byte[] password) throws IOException {\n-        debug(\"SignatureHeader\");\n-        \n         final byte[] signature = new byte[6];\n         file.readFully(signature);\n         if (!Arrays.equals(signature, sevenZSignature)) {\n         // 7zFormat.txt has it wrong - it's first major then minor\n         final byte archiveVersionMajor = file.readByte();\n         final byte archiveVersionMinor = file.readByte();\n-        debug(\"  archiveVersion major=%d, minor=%d\\n\",\n-                archiveVersionMajor, archiveVersionMinor);\n         if (archiveVersionMajor != 0) {\n             throw new IOException(String.format(\"Unsupported 7z version (%d,%d)\",\n                     archiveVersionMajor, archiveVersionMinor));\n     }\n     \n     private void readHeader(final DataInput header, final Archive archive) throws IOException {\n-        debug(\"Header\");\n-\n         int nid = header.readUnsignedByte();\n         \n         if (nid == NID.kArchiveProperties) {\n     \n     private void readArchiveProperties(final DataInput input) throws IOException {\n         // FIXME: the reference implementation just throws them away?\n-        debug(\"ArchiveProperties\");\n-\n         int nid =  input.readUnsignedByte();\n         while (nid != NID.kEnd) {\n             final long propertySize = readUint64(input);\n     \n     private DataInputStream readEncodedHeader(final DataInputStream header, final Archive archive,\n                                               byte[] password) throws IOException {\n-        debug(\"EncodedHeader\");\n-\n         readStreamsInfo(header, archive);\n         \n         // FIXME: merge with buildDecodingStream()/buildDecoderStack() at some stage?\n     }\n     \n     private void readStreamsInfo(final DataInput header, final Archive archive) throws IOException {\n-        debug(\"StreamsInfo\");\n-        \n         int nid = header.readUnsignedByte();\n         \n         if (nid == NID.kPackInfo) {\n     }\n     \n     private void readPackInfo(final DataInput header, final Archive archive) throws IOException {\n-        debug(\"PackInfo\");\n-        \n         archive.packPos = readUint64(header);\n         final long numPackStreams = readUint64(header);\n-        debug(\"  \" + numPackStreams + \" pack streams\");\n-        \n         int nid = header.readUnsignedByte();\n         if (nid == NID.kSize) {\n             archive.packSizes = new long[(int)numPackStreams];\n             for (int i = 0; i < archive.packSizes.length; i++) {\n                 archive.packSizes[i] = readUint64(header);\n-                debug(\"  pack size %d is %d\\n\", i, archive.packSizes[i]);\n             }\n             nid = header.readUnsignedByte();\n         }\n     }\n     \n     private void readUnpackInfo(final DataInput header, final Archive archive) throws IOException {\n-        debug(\"UnpackInfo\");\n-\n         int nid = header.readUnsignedByte();\n         if (nid != NID.kFolder) {\n             throw new IOException(\"Expected kFolder, got \" + nid);\n         }\n         final long numFolders = readUint64(header);\n-        debug(\"  \" + numFolders + \" folders\");\n         final Folder[] folders = new Folder[(int)numFolders];\n         archive.folders = folders;\n         final int external = header.readUnsignedByte();\n     }\n     \n     private void readSubStreamsInfo(final DataInput header, final Archive archive) throws IOException {\n-        debug(\"SubStreamsInfo\");\n-        \n         for (final Folder folder : archive.folders) {\n             folder.numUnpackSubStreams = 1;\n         }\n                 coders[i].properties = new byte[(int)propertiesSize];\n                 header.readFully(coders[i].properties);\n             }\n-            if (DEBUG) {\n-                final StringBuilder methodStr = new StringBuilder();\n-                for (final byte b : coders[i].decompressionMethodId) {\n-                    methodStr.append(String.format(\"%02X\", 0xff & b));\n-                }\n-                debug(\"  coder entry %d numInStreams=%d, numOutStreams=%d, method=%s, properties=%s\\n\", i,\n-                        coders[i].numInStreams, coders[i].numOutStreams, methodStr.toString(),\n-                        Arrays.toString(coders[i].properties));\n-            }\n             // would need to keep looping as above:\n             while (moreAlternativeMethods) {\n                 throw new IOException(\"Alternative methods are unsupported, please report. \" +\n             bindPairs[i] = new BindPair();\n             bindPairs[i].inIndex = readUint64(header);\n             bindPairs[i].outIndex = readUint64(header);\n-            debug(\"  bind pair in=%d out=%d\\n\", bindPairs[i].inIndex, bindPairs[i].outIndex);\n         }\n         folder.bindPairs = bindPairs;\n         \n     }\n     \n     private void readFilesInfo(final DataInput header, final Archive archive) throws IOException {\n-        debug(\"FilesInfo\");\n-\n         final long numFiles = readUint64(header);\n         final SevenZArchiveEntry[] files = new SevenZArchiveEntry[(int)numFiles];\n         for (int i = 0; i < files.length; i++) {\n             long size = readUint64(header);\n             switch (propertyType) {\n                 case NID.kEmptyStream: {\n-                    debug(\"  kEmptyStream\");\n                     isEmptyStream = readBits(header, files.length);\n                     break;\n                 }\n                 case NID.kEmptyFile: {\n-                    debug(\"  kEmptyFile\");\n                     if (isEmptyStream == null) { // protect against NPE\n                         throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\");\n                     }\n                     break;\n                 }\n                 case NID.kAnti: {\n-                    debug(\"  kAnti\");\n                     if (isEmptyStream == null) { // protect against NPE\n                         throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");\n                     }\n                     break;\n                 }\n                 case NID.kName: {\n-                    debug(\"  kNames\");\n                     final int external = header.readUnsignedByte();\n                     if (external != 0) {\n                         throw new IOException(\"Not implemented\");\n                     break;\n                 }\n                 case NID.kCTime: {\n-                    debug(\"  kCreationTime\");\n                     final BitSet timesDefined = readAllOrBits(header, files.length);\n                     final int external = header.readUnsignedByte();\n                     if (external != 0) {\n                     break;\n                 }\n                 case NID.kATime: {\n-                    debug(\"  kLastAccessTime\");\n                     final BitSet timesDefined = readAllOrBits(header, files.length);\n                     final int external = header.readUnsignedByte();\n                     if (external != 0) {\n                     break;\n                 }\n                 case NID.kMTime: {\n-                    debug(\"  kLastWriteTime\");\n                     final BitSet timesDefined = readAllOrBits(header, files.length);\n                     final int external = header.readUnsignedByte();\n                     if (external != 0) {\n                     break;\n                 }\n                 case NID.kWinAttributes: {\n-                    debug(\"  kWinAttributes\");\n                     final BitSet attributesDefined = readAllOrBits(header, files.length);\n                     final int external = header.readUnsignedByte();\n                     if (external != 0) {\n                     break;\n                 }\n                 case NID.kStartPos: {\n-                    debug(\"  kStartPos\");\n                     throw new IOException(\"kStartPos is unsupported, please report\");\n                 }\n                 case NID.kDummy: {\n-                    debug(\"  kDummy\");\n                     throw new IOException(\"kDummy is unsupported, please report\");\n                 }\n                 ", "timestamp": 1381837784, "metainfo": ""}