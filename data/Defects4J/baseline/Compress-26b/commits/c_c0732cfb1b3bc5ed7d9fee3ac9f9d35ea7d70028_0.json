{"sha": "c0732cfb1b3bc5ed7d9fee3ac9f9d35ea7d70028", "log": "make tests pass on Linux  ", "commit": "\n--- a/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n import java.io.InputStream;\n+import java.io.IOException;\n import java.io.OutputStream;\n import java.lang.reflect.Method;\n+import java.net.URI;\n import java.net.URL;\n import java.net.URLClassLoader;\n import java.util.Iterator;\n         addURL(new File(\"src/test/resources\").toURL());\n     }\n \n-    protected File getFile(String path) {\n-        return new File(getClass().getClassLoader().getResource(path).getFile());\n+    protected File getFile(String path) throws IOException {\n+        URL url = getClass().getResource(path);\n+        if (url == null) {\n+            throw new java.io.FileNotFoundException(path + \" doesn't exist\");\n+        }\n+        try {\n+            return new File(new URI(url.toString()));\n+        } catch (java.net.URISyntaxException ex) {\n+            // impossible since URL.toString() should always yield a valid URI\n+            throw new IOException(ex.getMessage(), ex);\n+        }\n     }\n \n     protected void tearDown() throws Exception {\n      */\n     public void addURL(URL url) throws Exception {\n         URLClassLoader classLoader = (URLClassLoader) ClassLoader\n-                .getSystemClassLoader();\n+            .getSystemClassLoader();\n         Class clazz = URLClassLoader.class;\n \n         Method method = clazz.getDeclaredMethod(\"addURL\",\n-                new Class[] { URL.class });\n+                                                new Class[] { URL.class });\n         method.setAccessible(true);\n         method.invoke(classLoader, new Object[] { url });\n     }\n \n             final OutputStream stream = new FileOutputStream(temp);\n             out = new ArchiveStreamFactory().createArchiveOutputStream(\n-                    archivename, stream);\n+                                                                       archivename, stream);\n \n             final File file1 = getFile(\"test1.xml\");\n             final File file2 = getFile(\"test2.xml\");\n      * @throws Exception\n      */\n     protected void checkArchiveContent(File archive, List expected)\n-            throws Exception {\n+        throws Exception {\n         final InputStream is = new FileInputStream(archive);\n         final BufferedInputStream buf = new BufferedInputStream(is);\n         final ArchiveInputStream in = new ArchiveStreamFactory()\n-                .createArchiveInputStream(buf);\n+            .createArchiveInputStream(buf);\n         this.checkArchiveContent(in, expected);\n     }\n \n     protected void checkArchiveContent(ArchiveInputStream in, List expected)\n-            throws Exception {\n+        throws Exception {\n         File result = File.createTempFile(\"dir-result\", \"\");\n         result.delete();\n         result.mkdir();\n         ArchiveEntry entry = null;\n         while ((entry = in.getNextEntry()) != null) {\n             File outfile = new File(result.getCanonicalPath() + \"/result/\"\n-                    + entry.getName());\n+                                    + entry.getName());\n             outfile.getParentFile().mkdirs();\n             OutputStream out = new FileOutputStream(outfile);\n             IOUtils.copy(in, out);", "timestamp": 1236228550, "metainfo": ""}