{"sha": "4efda70f4aa8e263aaa402c202da55e435775ad2", "log": "ar stores permissions as octal numbers, output stream does write them correctly, input stream was reading them as decimal  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java\n     public ArArchiveEntry(File inputFile, String entryName) {\n         // TODO sort out mode\n         this(entryName, inputFile.isFile() ? inputFile.length() : 0,\n-             0, 0, 0, inputFile.lastModified() / 1000);\n+             0, 0, DEFAULT_MODE, inputFile.lastModified() / 1000);\n     }\n \n     public long getSize() {\n--- a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java\n             temp = temp.substring(0, temp.length() - 1);\n         }\n         currentEntry = new ArArchiveEntry(temp, asLong(length), asInt(userid),\n-                                          asInt(groupid), asInt(filemode),\n+                                          asInt(groupid), asInt(filemode, 8),\n                                           asLong(lastmodified));\n         return currentEntry;\n     }\n     }\n \n     private int asInt(byte[] input) {\n-        return Integer.parseInt(new String(input).trim());\n+        return asInt(input, 10);\n+    }\n+\n+    private int asInt(byte[] input, int base) {\n+        return Integer.parseInt(new String(input).trim(), base);\n     }\n \n     /*", "timestamp": 1250838307, "metainfo": ""}