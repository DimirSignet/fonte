{"sha": "dc3fc4703211876fb38cccf55adc92ee5cbc28d0", "log": "make ZipArchiveInputStream deal better with truncated archives.  Submitted by Antoni Mylka.  COMPRESS-87  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n             } catch (DataFormatException e) {\n                 throw new ZipException(e.getMessage());\n             }\n-            if (read == 0 && inf.finished()) {\n-                return -1;\n+            if (read == 0) {\n+                if (inf.finished()) {\n+                    return -1;\n+                } else if (lengthOfLastRead == -1) {\n+                    throw new IOException(\"Truncated ZIP file\");\n+                }\n             }\n             crc.update(buffer, start, read);\n             return read;\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.apache.commons.compress.archivers.zip;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+\n+import org.apache.commons.compress.archivers.ArchiveEntry;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * JUnit 3 testcase for a multi-volume zip file.\n+ * \n+ * Some tools (like 7-zip) allow users to split a large archives into 'volumes'\n+ * with a given size to fit them into multiple cds, usb drives, or emails with\n+ * an attachment size limit. It's basically the same file split into chunks of\n+ * exactly 65536 bytes length. Concatenating volumes yields exactly the original\n+ * file. There is no mechanism in the ZIP algorithm to accommodate for this.\n+ * Before commons-compress used to enter an infinite loop on the last entry for\n+ * such a file. This test is intended to prove that this error doesn't occur\n+ * anymore. All entries but the last one are returned correctly, the last entry\n+ * yields an exception.\n+ * \n+ */\n+public class Maven221MultiVolumeTest extends TestCase {\n+\n+    private static final String [] ENTRIES = new String [] {\n+\t\"apache-maven-2.2.1/\",\n+\t\"apache-maven-2.2.1/LICENSE.txt\",\n+\t\"apache-maven-2.2.1/NOTICE.txt\",\n+\t\"apache-maven-2.2.1/README.txt\",\n+\t\"apache-maven-2.2.1/bin/\",\n+\t\"apache-maven-2.2.1/bin/m2.conf\",\n+\t\"apache-maven-2.2.1/bin/mvn\",\n+\t\"apache-maven-2.2.1/bin/mvn.bat\",\n+\t\"apache-maven-2.2.1/bin/mvnDebug\",\n+\t\"apache-maven-2.2.1/bin/mvnDebug.bat\",\n+\t\"apache-maven-2.2.1/boot/\",\n+\t\"apache-maven-2.2.1/boot/classworlds-1.1.jar\",\n+\t\"apache-maven-2.2.1/conf/\",\n+\t\"apache-maven-2.2.1/conf/settings.xml\",\n+\t\"apache-maven-2.2.1/lib/\"\n+    };\n+    \n+    private static final String LAST_ENTRY_NAME = \n+\t\"apache-maven-2.2.1/lib/maven-2.2.1-uber.jar\";\n+    \n+    public void testRead7ZipMultiVolumeArchiveForStream() throws IOException,\n+\t    URISyntaxException {\n+\t\n+\tURL zip = getClass().getResource(\"/apache-maven-2.2.1.zip.001\");\n+\tFileInputStream archive = new FileInputStream(\n+\t\tnew File(new URI(zip.toString())));\n+\tZipArchiveInputStream zi = null;\n+\ttry {\n+\t    zi = new ZipArchiveInputStream(archive,null,false);\n+\t    \n+\t    // these are the entries that are supposed to be processed\n+\t    // correctly without any problems\n+\t    for (int i = 0; i < ENTRIES.length; i++) {\n+\t\tassertEquals(ENTRIES[i], zi.getNextEntry().getName());\n+\t    }\n+\t    \n+\t    // this is the last entry that is truncated\n+\t    ArchiveEntry lastEntry = zi.getNextEntry();\n+\t    assertEquals(LAST_ENTRY_NAME, lastEntry.getName());\n+\t    byte [] buffer = new byte [4096];\n+\t    \n+\t    // before the fix, we'd get 0 bytes on this read and all\n+\t    // subsequent reads thus a client application might enter\n+\t    // an infinite loop after the fix, we should get an\n+\t    // exception\n+\t    try {\n+                int read = 0;\n+\t\twhile ((read = zi.read(buffer)) > 0) { }\n+\t\tfail(\"shouldn't be able to read from truncated entry\");\n+\t    } catch (IOException e) {\n+                assertEquals(\"Truncated ZIP file\", e.getMessage());\n+\t    }\n+\t    \n+\t    // and now we get another entry, which should also yield\n+\t    // an exception\n+\t    try {\n+\t\tzi.getNextEntry();\n+\t\tfail(\"shouldn't be able to read another entry from truncated\"\n+                     + \" file\");\n+\t    } catch (IOException e) {\n+\t\t// this is to be expected\n+\t    }\n+\t} finally {\n+\t    if (zi != null) {\n+\t\tzi.close();\n+\t    }\n+\t}\n+    }\n+\n+    public void testRead7ZipMultiVolumeArchiveForFile()\n+        throws IOException, URISyntaxException {\n+\tURL zip = getClass().getResource(\"/apache-maven-2.2.1.zip.001\");\n+        File file = new File(new URI(zip.toString()));\n+        try {\n+            new ZipFile(file);\n+            fail(\"Expected ZipFile to fail\");\n+        } catch (IOException ex) {\n+            // expected\n+        }\n+    }\n+}", "timestamp": 1256880557, "metainfo": ""}