{"sha": "c37c629de73830587270c57ecc70c1dd83aa68b2", "log": "Tab police tidy code slightly  ", "commit": "\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java\n \n /**\n  * JUnit 3 testcase for a multi-volume zip file.\n- * \n+ *\n  * Some tools (like 7-zip) allow users to split a large archives into 'volumes'\n  * with a given size to fit them into multiple cds, usb drives, or emails with\n  * an attachment size limit. It's basically the same file split into chunks of\n  * such a file. This test is intended to prove that this error doesn't occur\n  * anymore. All entries but the last one are returned correctly, the last entry\n  * yields an exception.\n- * \n+ *\n  */\n public class Maven221MultiVolumeTest extends TestCase {\n \n     private static final String [] ENTRIES = new String [] {\n-\t\"apache-maven-2.2.1/\",\n-\t\"apache-maven-2.2.1/LICENSE.txt\",\n-\t\"apache-maven-2.2.1/NOTICE.txt\",\n-\t\"apache-maven-2.2.1/README.txt\",\n-\t\"apache-maven-2.2.1/bin/\",\n-\t\"apache-maven-2.2.1/bin/m2.conf\",\n-\t\"apache-maven-2.2.1/bin/mvn\",\n-\t\"apache-maven-2.2.1/bin/mvn.bat\",\n-\t\"apache-maven-2.2.1/bin/mvnDebug\",\n-\t\"apache-maven-2.2.1/bin/mvnDebug.bat\",\n-\t\"apache-maven-2.2.1/boot/\",\n-\t\"apache-maven-2.2.1/boot/classworlds-1.1.jar\",\n-\t\"apache-maven-2.2.1/conf/\",\n-\t\"apache-maven-2.2.1/conf/settings.xml\",\n-\t\"apache-maven-2.2.1/lib/\"\n+        \"apache-maven-2.2.1/\",\n+        \"apache-maven-2.2.1/LICENSE.txt\",\n+        \"apache-maven-2.2.1/NOTICE.txt\",\n+        \"apache-maven-2.2.1/README.txt\",\n+        \"apache-maven-2.2.1/bin/\",\n+        \"apache-maven-2.2.1/bin/m2.conf\",\n+        \"apache-maven-2.2.1/bin/mvn\",\n+        \"apache-maven-2.2.1/bin/mvn.bat\",\n+        \"apache-maven-2.2.1/bin/mvnDebug\",\n+        \"apache-maven-2.2.1/bin/mvnDebug.bat\",\n+        \"apache-maven-2.2.1/boot/\",\n+        \"apache-maven-2.2.1/boot/classworlds-1.1.jar\",\n+        \"apache-maven-2.2.1/conf/\",\n+        \"apache-maven-2.2.1/conf/settings.xml\",\n+        \"apache-maven-2.2.1/lib/\"\n     };\n-    \n-    private static final String LAST_ENTRY_NAME = \n-\t\"apache-maven-2.2.1/lib/maven-2.2.1-uber.jar\";\n-    \n+\n+    private static final String LAST_ENTRY_NAME =\n+        \"apache-maven-2.2.1/lib/maven-2.2.1-uber.jar\";\n+\n     public void testRead7ZipMultiVolumeArchiveForStream() throws IOException,\n-\t    URISyntaxException {\n-\t\n-\tURL zip = getClass().getResource(\"/apache-maven-2.2.1.zip.001\");\n-\tFileInputStream archive = new FileInputStream(\n-\t\tnew File(new URI(zip.toString())));\n-\tZipArchiveInputStream zi = null;\n-\ttry {\n-\t    zi = new ZipArchiveInputStream(archive,null,false);\n-\t    \n-\t    // these are the entries that are supposed to be processed\n-\t    // correctly without any problems\n-\t    for (int i = 0; i < ENTRIES.length; i++) {\n-\t\tassertEquals(ENTRIES[i], zi.getNextEntry().getName());\n-\t    }\n-\t    \n-\t    // this is the last entry that is truncated\n-\t    ArchiveEntry lastEntry = zi.getNextEntry();\n-\t    assertEquals(LAST_ENTRY_NAME, lastEntry.getName());\n-\t    byte [] buffer = new byte [4096];\n-\t    \n-\t    // before the fix, we'd get 0 bytes on this read and all\n-\t    // subsequent reads thus a client application might enter\n-\t    // an infinite loop after the fix, we should get an\n-\t    // exception\n-\t    try {\n-                int read = 0;\n-\t\twhile ((read = zi.read(buffer)) > 0) { }\n-\t\tfail(\"shouldn't be able to read from truncated entry\");\n-\t    } catch (IOException e) {\n+            URISyntaxException {\n+\n+        URL zip = getClass().getResource(\"/apache-maven-2.2.1.zip.001\");\n+        FileInputStream archive = new FileInputStream(\n+            new File(new URI(zip.toString())));\n+        ZipArchiveInputStream zi = null;\n+        try {\n+            zi = new ZipArchiveInputStream(archive,null,false);\n+\n+            // these are the entries that are supposed to be processed\n+            // correctly without any problems\n+            for (int i = 0; i < ENTRIES.length; i++) {\n+                assertEquals(ENTRIES[i], zi.getNextEntry().getName());\n+            }\n+\n+            // this is the last entry that is truncated\n+            ArchiveEntry lastEntry = zi.getNextEntry();\n+            assertEquals(LAST_ENTRY_NAME, lastEntry.getName());\n+            byte [] buffer = new byte [4096];\n+\n+            // before the fix, we'd get 0 bytes on this read and all\n+            // subsequent reads thus a client application might enter\n+            // an infinite loop after the fix, we should get an\n+            // exception\n+            try {\n+                while (zi.read(buffer) > 0) { }\n+                fail(\"shouldn't be able to read from truncated entry\");\n+            } catch (IOException e) {\n                 assertEquals(\"Truncated ZIP file\", e.getMessage());\n-\t    }\n-\t    \n-\t    // and now we get another entry, which should also yield\n-\t    // an exception\n-\t    try {\n-\t\tzi.getNextEntry();\n-\t\tfail(\"shouldn't be able to read another entry from truncated\"\n+            }\n+\n+            // and now we get another entry, which should also yield\n+            // an exception\n+            try {\n+                zi.getNextEntry();\n+                fail(\"shouldn't be able to read another entry from truncated\"\n                      + \" file\");\n-\t    } catch (IOException e) {\n-\t\t// this is to be expected\n-\t    }\n-\t} finally {\n-\t    if (zi != null) {\n-\t\tzi.close();\n-\t    }\n-\t}\n+            } catch (IOException e) {\n+                // this is to be expected\n+            }\n+        } finally {\n+            if (zi != null) {\n+                zi.close();\n+            }\n+        }\n     }\n \n     public void testRead7ZipMultiVolumeArchiveForFile()\n-        throws IOException, URISyntaxException {\n-\tURL zip = getClass().getResource(\"/apache-maven-2.2.1.zip.001\");\n+        throws URISyntaxException {\n+        URL zip = getClass().getResource(\"/apache-maven-2.2.1.zip.001\");\n         File file = new File(new URI(zip.toString()));\n         try {\n             new ZipFile(file);", "timestamp": 1267572363, "metainfo": ""}