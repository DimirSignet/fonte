{"sha": "f77e1f16b1286e4c2602fa19636a713a72c27a96", "log": "merge ZipArchiveOutputStream and ZipOutputStream  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java\n package org.apache.commons.compress.archivers;\n \n import java.io.IOException;\n+import java.io.FilterOutputStream;\n import java.io.OutputStream;\n \n-public abstract class ArchiveOutputStream extends OutputStream {\n+public abstract class ArchiveOutputStream extends FilterOutputStream {\n \n-\tpublic abstract void putArchiveEntry(ArchiveEntry entry) throws IOException;\n+    protected ArchiveOutputStream(OutputStream other) {\n+        super(other);\n+    }\n+\n+    public abstract void putArchiveEntry(ArchiveEntry entry) throws IOException;\n \t\n     public abstract void closeArchiveEntry() throws IOException;\n }\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;\n-import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;\n+import org.apache.commons.compress.archivers.zip.ZipOutputStream;\n \n /**\n  * Factory to create Archive[In|Out]putStreams from names\n         if (\"ar\".equalsIgnoreCase(archiverName)) {\n             return new ArArchiveOutputStream(out);\n         } else if(\"zip\".equalsIgnoreCase(archiverName)) {\n-            return new ZipArchiveOutputStream(out);\n+            return new ZipOutputStream(out);\n         } else if(\"tar\".equalsIgnoreCase(archiverName)) {\n             return new TarArchiveOutputStream(out);\n         } else if(\"jar\".equalsIgnoreCase(archiverName)) {\n--- a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\n \n public class ArArchiveOutputStream extends ArchiveOutputStream {\n \n-\tprivate final OutputStream out;\n \tprivate long archiveOffset = 0;\n \tprivate long entryOffset = 0;\n \tprivate ArArchiveEntry prevEntry;\n \n \tpublic ArArchiveOutputStream( final OutputStream pOut ) {\n-\t\tout = pOut;\t\n+            super(pOut);\n \t}\n \n \tprivate long writeArchiveHeader() throws IOException {\t\t\n--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n \n     private long written;\n     \n-    private OutputStream out = null;\n-\n     /**\n      * Check to make sure that this stream has not been closed\n      *\n      * @param format The format of the stream\n      */\n     public CpioArchiveOutputStream(final OutputStream out, final short format) {\n-    \tthis.out = new FilterOutputStream(out);\n+        super(out);\n         setFormat(format);\n     }\n \n--- a/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java\n \n import org.apache.commons.compress.archivers.ArchiveEntry;\n import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n-import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;\n+import org.apache.commons.compress.archivers.zip.ZipOutputStream;\n \n-public class JarArchiveOutputStream extends ZipArchiveOutputStream {\n+public class JarArchiveOutputStream extends ZipOutputStream {\n \n \tpublic JarArchiveOutputStream( final OutputStream out ) {\n \t\tsuper(out);\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n \n public class TarArchiveOutputStream extends ArchiveOutputStream {\n \n-    private final TarOutputStream out;\n-    \n     public TarArchiveOutputStream(OutputStream out) {\n-        this.out = new TarOutputStream(out);\n+        super(new TarOutputStream(out));\n     }\n     \n     public void close() throws IOException {\n     }\n \n     public void closeArchiveEntry() throws IOException {\n-        this.out.closeEntry();\n+        ((TarOutputStream) out).closeEntry();\n     }\n \n     public void putArchiveEntry(ArchiveEntry entry) throws IOException {\n-        this.out.putNextEntry((TarArchiveEntry)entry);\n+        ((TarOutputStream) out).putNextEntry((TarArchiveEntry)entry);\n     }\n \n     public void write(byte[] buffer, int offset, int length) throws IOException {\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java\n import java.util.zip.CRC32;\n import java.util.zip.Deflater;\n import java.util.zip.ZipException;\n+\n+import org.apache.commons.compress.archivers.ArchiveEntry;\n+import org.apache.commons.compress.archivers.ArchiveOutputStream;\n \n /**\n  * Reimplementation of {@link java.util.zip.ZipOutputStream\n  * #putNextEntry putNextEntry} can be called.</p>\n  *\n  */\n-public class ZipOutputStream extends FilterOutputStream {\n+public class ZipOutputStream extends ArchiveOutputStream {\n \n     private static final int BYTE_MASK = 0xFF;\n     private static final int SHORT = 2;\n         }\n     }\n \n+    public void putArchiveEntry(ArchiveEntry entry) throws IOException {\n+        putNextEntry((ZipArchiveEntry) entry);\n+    }\n+\n+    public void closeArchiveEntry() {\n+        // do nothing\n+    }\n+\n     /*\n      * Various ZIP constants\n      */", "timestamp": 1233941041, "metainfo": ""}