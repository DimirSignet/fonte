{"sha": "eb76019f59ccce06f3acf7aeed0f61b24d0b5f9a", "log": "the codec should know the options, not the enum  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n import org.tukaani.xz.LZMAInputStream;\n \n class Coders {\n+    static CoderBase findByMethod(SevenZMethod method) {\n+        for (final CoderId coderId : coderTable) {\n+            if (coderId.method.equals(method)) {\n+                return coderId.coder;\n+            }\n+        }\n+        return null;\n+    }\n+\n     static InputStream addDecoder(final InputStream is,\n             final Coder coder, final byte[] password) throws IOException {\n         for (final CoderId coderId : coderTable) {\n     \n     static OutputStream addEncoder(final OutputStream out, final SevenZMethod method,\n                                    Object options) throws IOException {\n-        for (final CoderId coderId : coderTable) {\n-            if (coderId.method.equals(method)) {\n-                return coderId.coder.encode(out, options);\n-            }\n-        }\n-        throw new IOException(\"Unsupported compression method \" + method);\n+        CoderBase cb = findByMethod(method);\n+        if (cb == null) {\n+            throw new IOException(\"Unsupported compression method \" + method);\n+        }\n+        return cb.encode(out, options);\n     }\n \n     static CoderId[] coderTable = new CoderId[] {\n     }\n     \n     static abstract class CoderBase {\n+        private final Class<?>[] acceptableOptions;\n+\n+        protected CoderBase(Class<?>... acceptableOptions) {\n+            this.acceptableOptions = acceptableOptions;\n+        }\n+\n+        /**\n+         * @return whether this method can extract options from the given object.\n+         */\n+        boolean canAcceptOptions(Object opts) {\n+            for (Class<?> c : acceptableOptions) {\n+                if (c.isInstance(opts)) {\n+                    return true;\n+                }\n+            }\n+            return false;\n+        }\n+\n         abstract InputStream decode(final InputStream in, final Coder coder,\n                 byte[] password) throws IOException;\n         OutputStream encode(final OutputStream out, final Object options)\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java\n import org.tukaani.xz.LZMA2Options;\n \n class LZMA2Decoder extends Coders.CoderBase {\n+    LZMA2Decoder() {\n+        super(LZMA2Options.class);\n+    }\n+\n     @Override\n     InputStream decode(final InputStream in, final Coder coder, byte[] password)\n         throws IOException {\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java\n     /** LZMA - only supported when reading */\n     LZMA(new byte[] { (byte)0x03, (byte)0x01, (byte)0x01 }),\n     /** LZMA2 */\n-    LZMA2(new byte[] { (byte)0x21 }, LZMA2Options.class) {\n+    LZMA2(new byte[] { (byte)0x21 }) {\n         @Override\n         byte[] getProperties(Object opts) {\n             int dictSize = getDictSize(opts);\n     AES256SHA256(new byte[] { (byte)0x06, (byte)0xf1, (byte)0x07, (byte)0x01 });\n \n     private final byte[] id;\n-    private final Class<?>[] acceptableOptions;\n \n-    private SevenZMethod(byte[] id, Class<?>... acceptableOptions) {\n+    private SevenZMethod(byte[] id) {\n         this.id = id;\n-        this.acceptableOptions = acceptableOptions;\n     }\n \n     byte[] getId() {\n         return new byte[0];\n     }\n \n-    /**\n-     * @return whether this method can extract options from the given object.\n-     */\n-    boolean canAcceptOptions(Object opts) {\n-        for (Class<?> c : acceptableOptions) {\n-            if (c.isInstance(opts)) {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n }\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethodConfiguration.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethodConfiguration.java\n     public SevenZMethodConfiguration(SevenZMethod method, Object options) {\n         this.method = method;\n         this.options = options;\n-        if (options != null && !method.canAcceptOptions(options)) {\n+        if (options != null && !Coders.findByMethod(method).canAcceptOptions(options)) {\n             throw new IllegalArgumentException(\"The \" + method + \" method doesn't support options of type \"\n                                                + options.getClass());\n         }", "timestamp": 1393240103, "metainfo": ""}