{"sha": "bb74f0c4cd5febd41fd6ab74f978a6219dc33f64", "log": "COMPRESS-205 - allow tests to pass even if source tree is placed in strange directories.  Based on patch by Daniel Lowe  ", "commit": "\n--- a/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.net.URI;\n+import java.net.URL;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Locale;\n         return f;\n     }\n \n-    protected File getFile(String path) {\n-        return new File(\"src/test/resources\", path);\n+    public static File getFile(String path) throws IOException {\n+        URL url = AbstractTestCase.class.getClassLoader().getResource(path);\n+        if (url == null) {\n+            throw new FileNotFoundException(\"couldn't find \" + path);\n+        }\n+        URI uri = null;\n+        try {\n+            uri = url.toURI();\n+        } catch (java.net.URISyntaxException ex) {\n+            throw new IOException(ex);\n+        }\n+        return new File(uri);\n     }\n \n     @Override\n--- a/src/test/java/org/apache/commons/compress/ChainingTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/ChainingTestCase.java\n public class ChainingTestCase extends AbstractTestCase {\n \n     public void testTarGzip() throws Exception {\n-        File file = new File(\"src/test/resources/bla.tgz\");\n+        File file = getFile(\"bla.tgz\");\n         final TarArchiveInputStream is = new TarArchiveInputStream(new GzipCompressorInputStream(new FileInputStream(file)));\n         final TarArchiveEntry entry = (TarArchiveEntry)is.getNextEntry();\n         assertNotNull(entry);\n     }\n \n     public void testTarBzip2() throws Exception {\n-        File file = new File(\"src/test/resources/bla.tar.bz2\");\n+        File file = getFile(\"bla.tar.bz2\");\n         final TarArchiveInputStream is = new TarArchiveInputStream(new BZip2CompressorInputStream(new FileInputStream(file)));\n         final TarArchiveEntry entry = (TarArchiveEntry)is.getNextEntry();\n         assertNotNull(entry);\n--- a/src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java\n import java.io.BufferedInputStream;\n import java.io.File;\n import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n+import java.io.IOException;\n import java.net.URL;\n \n import org.apache.commons.compress.archivers.ArchiveException;\n \n     final ClassLoader classLoader = getClass().getClassLoader();\n \n-    public void testDetectionNotArchive() throws FileNotFoundException {\n+    public void testDetectionNotArchive() throws IOException {\n         try {\n             getStreamFor(\"test.txt\");\n             fail(\"Expected ArchiveException\");\n     }\n \n     private ArchiveInputStream getStreamFor(String resource)\n-            throws ArchiveException, FileNotFoundException {\n-        final URL rsc = classLoader.getResource(resource);\n-        assertNotNull(\"Could not find resource \"+resource,rsc);\n+            throws ArchiveException, IOException {\n         return factory.createArchiveInputStream(\n                    new BufferedInputStream(new FileInputStream(\n-                       new File(rsc.getFile()))));\n+                       getFile(resource))));\n     }\n \n     // Check that the empty archives created by the code are readable\n--- a/src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java\n  */\n package org.apache.commons.compress;\n \n+import static org.apache.commons.compress.AbstractTestCase.getFile;\n+\n import java.io.BufferedInputStream;\n import java.io.File;\n import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n+import java.io.IOException;\n import java.net.URL;\n \n import junit.framework.TestCase;\n     }\n \n     private CompressorInputStream getStreamFor(String resource)\n-            throws CompressorException, FileNotFoundException {\n-\n-        final URL rsc = classLoader.getResource(resource);\n-        assertNotNull(\"Could not find resource \"+resource,rsc);\n+            throws CompressorException, IOException {\n         return factory.createCompressorInputStream(\n                    new BufferedInputStream(new FileInputStream(\n-                       new File(rsc.getFile()))));\n+                       getFile(resource))));\n     }\n \n }\n--- a/src/test/java/org/apache/commons/compress/archivers/LongPathTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/LongPathTest.java\n \n     public static TestSuite suite() throws IOException{\n         TestSuite suite = new TestSuite(\"LongPathTests\");\n-        URL resource = classLoader.getResource(\"longpath\");\n-        assertNotNull(\"Cannot find 'longpath' resource\",resource);\n-        File arcdir =new File(resource.getFile());\n+        File arcdir = getFile(\"longpath\");\n         assertTrue(arcdir.exists());\n         File listing= new File(arcdir,\"files.txt\");\n         assertTrue(\"File listing is readable\",listing.canRead());\n--- a/src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java\n \n package org.apache.commons.compress.archivers.tar;\n \n+import static org.apache.commons.compress.AbstractTestCase.getFile;\n+\n import java.io.File;\n import java.io.FileInputStream;\n-import java.net.URI;\n-import java.net.URL;\n \n import junit.framework.TestCase;\n \n public class SparseFilesTest extends TestCase {\n \n     public void testOldGNU() throws Throwable {\n-        URL tar = getClass().getResource(\"/oldgnu_sparse.tar\");\n-        File file = new File(new URI(tar.toString()));\n+        File file = getFile(\"oldgnu_sparse.tar\");\n         TarArchiveInputStream tin = null;\n         try {\n             tin = new TarArchiveInputStream(new FileInputStream(file));\n--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java\n \n package org.apache.commons.compress.archivers.tar;\n \n+import static org.apache.commons.compress.AbstractTestCase.getFile;\n import static org.junit.Assert.assertArrayEquals;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n \n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n-import java.io.File;\n import java.io.FileInputStream;\n import java.io.InputStream;\n import java.io.IOException;\n-import java.net.URI;\n-import java.net.URL;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.Map;\n \n     @Test\n     public void workaroundForBrokenTimeHeader() throws Exception {\n-        URL tar = getClass().getResource(\"/simple-aix-native-tar.tar\");\n         TarArchiveInputStream in = null;\n         try {\n-            in = new TarArchiveInputStream(new FileInputStream(new File(new URI(tar.toString()))));\n+            in = new TarArchiveInputStream(new FileInputStream(getFile(\"simple-aix-native-tar.tar\")));\n             TarArchiveEntry tae = in.getNextTarEntry();\n             tae = in.getNextTarEntry();\n             assertEquals(\"sample/link-to-txt-file.lnk\", tae.getName());\n \n     @Test\n     public void datePriorToEpochInGNUFormat() throws Exception {\n-        datePriorToEpoch(\"/preepoch-star.tar\");\n+        datePriorToEpoch(\"preepoch-star.tar\");\n     }\n \n \n     @Test\n     public void datePriorToEpochInPAXFormat() throws Exception {\n-        datePriorToEpoch(\"/preepoch-posix.tar\");\n+        datePriorToEpoch(\"preepoch-posix.tar\");\n     }\n \n     private void datePriorToEpoch(String archive) throws Exception {\n-        URL tar = getClass().getResource(archive);\n         TarArchiveInputStream in = null;\n         try {\n-            in = new TarArchiveInputStream(new FileInputStream(new File(new URI(tar.toString()))));\n+            in = new TarArchiveInputStream(new FileInputStream(getFile(archive)));\n             TarArchiveEntry tae = in.getNextTarEntry();\n             assertEquals(\"foo\", tae.getName());\n             Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java\n \n package org.apache.commons.compress.archivers.zip;\n \n+import static org.apache.commons.compress.AbstractTestCase.getFile;\n+\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.net.URL;\n \n import junit.framework.TestCase;\n \n public class EncryptedArchiveTest extends TestCase {\n \n     public void testReadPasswordEncryptedEntryViaZipFile()\n-        throws IOException, URISyntaxException {\n-        URL zip = getClass().getResource(\"/password-encrypted.zip\");\n-        File file = new File(new URI(zip.toString()));\n+        throws IOException {\n+        File file = getFile(\"password-encrypted.zip\");\n         ZipFile zf = null;\n         try {\n             zf = new ZipFile(file);\n     }\n \n     public void testReadPasswordEncryptedEntryViaStream()\n-        throws IOException, URISyntaxException {\n-        URL zip = getClass().getResource(\"/password-encrypted.zip\");\n-        File file = new File(new URI(zip.toString()));\n+        throws IOException {\n+        File file = getFile(\"password-encrypted.zip\");\n         ZipArchiveInputStream zin = null;\n         try {\n             zin = new ZipArchiveInputStream(new FileInputStream(file));\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java\n \n package org.apache.commons.compress.archivers.zip;\n \n+import static org.apache.commons.compress.AbstractTestCase.getFile;\n+\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.net.URL;\n \n import junit.framework.TestCase;\n \n     private static final String LAST_ENTRY_NAME =\n         \"apache-maven-2.2.1/lib/maven-2.2.1-uber.jar\";\n \n-    public void testRead7ZipMultiVolumeArchiveForStream() throws IOException,\n-            URISyntaxException {\n+    public void testRead7ZipMultiVolumeArchiveForStream() throws IOException {\n \n-        URL zip = getClass().getResource(\"/apache-maven-2.2.1.zip.001\");\n-        FileInputStream archive = new FileInputStream(\n-            new File(new URI(zip.toString())));\n+        FileInputStream archive =\n+            new FileInputStream(getFile(\"apache-maven-2.2.1.zip.001\"));\n         ZipArchiveInputStream zi = null;\n         try {\n             zi = new ZipArchiveInputStream(archive,null,false);\n         }\n     }\n \n-    public void testRead7ZipMultiVolumeArchiveForFile()\n-        throws URISyntaxException {\n-        URL zip = getClass().getResource(\"/apache-maven-2.2.1.zip.001\");\n-        File file = new File(new URI(zip.toString()));\n+    public void testRead7ZipMultiVolumeArchiveForFile() throws IOException {\n+        File file = getFile(\"apache-maven-2.2.1.zip.001\");\n         try {\n             new ZipFile(file);\n             fail(\"Expected ZipFile to fail\");\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java\n \n package org.apache.commons.compress.archivers.zip;\n \n+import static org.apache.commons.compress.AbstractTestCase.getFile;\n+\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.UnsupportedEncodingException;\n-import java.net.URI;\n import java.net.URISyntaxException;\n-import java.net.URL;\n import java.nio.ByteBuffer;\n import java.util.Enumeration;\n import java.util.zip.CRC32;\n      * - which is true for OIL_BARREL_TXT.\n      */\n     public void testRead7ZipArchive() throws IOException, URISyntaxException {\n-        URL zip = getClass().getResource(\"/utf8-7zip-test.zip\");\n-        File archive = new File(new URI(zip.toString()));\n+        File archive = getFile(\"utf8-7zip-test.zip\");\n         ZipFile zf = null;\n         try {\n             zf = new ZipFile(archive, CP437, false);\n \n     public void testRead7ZipArchiveForStream() throws IOException,\n                                                       URISyntaxException {\n-        URL zip = getClass().getResource(\"/utf8-7zip-test.zip\");\n         FileInputStream archive =\n-            new FileInputStream(new File(new URI(zip.toString())));\n+            new FileInputStream(getFile(\"utf8-7zip-test.zip\"));\n         ZipArchiveInputStream zi = null;\n         try {\n             zi = new ZipArchiveInputStream(archive, CP437, false);\n      * the central directory.\n      */\n     public void testReadWinZipArchive() throws IOException, URISyntaxException {\n-        URL zip = getClass().getResource(\"/utf8-winzip-test.zip\");\n-        File archive = new File(new URI(zip.toString()));\n+        File archive = getFile(\"utf8-winzip-test.zip\");\n         ZipFile zf = null;\n         try {\n             zf = new ZipFile(archive, null, true);\n \n     public void testReadWinZipArchiveForStream() throws IOException,\n                                                       URISyntaxException {\n-        URL zip = getClass().getResource(\"/utf8-winzip-test.zip\");\n         FileInputStream archive =\n-            new FileInputStream(new File(new URI(zip.toString())));\n+            new FileInputStream(getFile(\"utf8-winzip-test.zip\"));\n         ZipArchiveInputStream zi = null;\n         try {\n             zi = new ZipArchiveInputStream(archive, null, true);\n \n     public void testRawNameReadFromZipFile()\n         throws IOException, URISyntaxException {\n-        URL zip = getClass().getResource(\"/utf8-7zip-test.zip\");\n-        File archive = new File(new URI(zip.toString()));\n+        File archive = getFile(\"utf8-7zip-test.zip\");\n         ZipFile zf = null;\n         try {\n             zf = new ZipFile(archive, CP437, false);\n \n     public void testRawNameReadFromStream()\n         throws IOException, URISyntaxException {\n-        URL zip = getClass().getResource(\"/utf8-7zip-test.zip\");\n         FileInputStream archive =\n-            new FileInputStream(new File(new URI(zip.toString())));\n+            new FileInputStream(getFile(\"utf8-7zip-test.zip\"));\n         ZipArchiveInputStream zi = null;\n         try {\n             zi = new ZipArchiveInputStream(archive, CP437, false);\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java\n import org.junit.Test;\n \n import java.io.File;\n-import java.net.URI;\n-import java.net.URL;\n import java.text.SimpleDateFormat;\n import java.util.Arrays;\n import java.util.Calendar;\n import java.util.TimeZone;\n import java.util.zip.ZipException;\n \n+import static org.apache.commons.compress.AbstractTestCase.getFile;\n import static org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.ACCESS_TIME_BIT;\n import static org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.CREATE_TIME_BIT;\n import static org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.MODIFY_TIME_BIT;\n         1999's acc time:  Jan 1st, 1999-01-01/00:00:03\n          */\n \n-        URL zip = getClass().getResource(\"/COMPRESS-210_unix_time_zip_test.zip\");\n-        File archive = new File(new URI(zip.toString()));\n+        File archive = getFile(\"COMPRESS-210_unix_time_zip_test.zip\");\n         ZipFile zf = null;\n \n         try {\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java\n import org.junit.Test;\n \n import java.io.File;\n-import java.net.URI;\n-import java.net.URL;\n import java.util.Arrays;\n import java.util.Enumeration;\n import java.util.zip.ZipException;\n \n+import static org.apache.commons.compress.AbstractTestCase.getFile;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n \n     @Test\n     public void testSampleFile() throws Exception {\n-        URL zip = getClass().getResource(\"/COMPRESS-211_uid_gid_zip_test.zip\");\n-        File archive = new File(new URI(zip.toString()));\n+        File archive = getFile(\"COMPRESS-211_uid_gid_zip_test.zip\");\n         ZipFile zf = null;\n \n         try {\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java\n \n package org.apache.commons.compress.archivers.zip;\n \n+import static org.apache.commons.compress.AbstractTestCase.getFile;\n import static org.junit.Assert.assertArrayEquals;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.RandomAccessFile;\n-import java.net.URI;\n-import java.net.URL;\n import java.util.Enumeration;\n import java.util.Random;\n import java.util.zip.ZipEntry;\n         }\n     }\n \n-    private static File getFile(String name) throws Throwable {\n-        URL url = Zip64SupportIT.class.getResource(name);\n-        assumeNotNull(url);\n-        File file = new File(new URI(url.toString()));\n-        assumeTrue(file.exists());\n-        return file;\n-    }\n-\n     private static File get5GBZerosFile() throws Throwable {\n-        return getFile(\"/5GB_of_Zeros.zip\");\n+        return getFile(\"5GB_of_Zeros.zip\");\n     }\n \n     private static File get5GBZerosFileGeneratedBy7ZIP() throws Throwable {\n-        return getFile(\"/5GB_of_Zeros_7ZIP.zip\");\n+        return getFile(\"5GB_of_Zeros_7ZIP.zip\");\n     }\n \n     private static File get5GBZerosFileGeneratedByJava7Jar() throws Throwable {\n-        return getFile(\"/5GB_of_Zeros_jar.zip\");\n+        return getFile(\"5GB_of_Zeros_jar.zip\");\n     }\n \n     private static File get5GBZerosFileGeneratedByWinZIP() throws Throwable {\n-        return getFile(\"/5GB_of_Zeros_WinZip.zip\");\n+        return getFile(\"5GB_of_Zeros_WinZip.zip\");\n     }\n \n     private static File get5GBZerosFileGeneratedByPKZip() throws Throwable {\n-        return getFile(\"/5GB_of_Zeros_PKZip.zip\");\n+        return getFile(\"5GB_of_Zeros_PKZip.zip\");\n     }\n \n     private static File get100KFileFile() throws Throwable {\n-        return getFile(\"/100k_Files.zip\");\n+        return getFile(\"100k_Files.zip\");\n     }\n \n     private static File get100KFileFileGeneratedBy7ZIP() throws Throwable {\n-        return getFile(\"/100k_Files_7ZIP.zip\");\n+        return getFile(\"100k_Files_7ZIP.zip\");\n     }\n \n     private static File get100KFileFileGeneratedByWinCF() throws Throwable {\n-        return getFile(\"/100k_Files_WindowsCompressedFolders.zip\");\n+        return getFile(\"100k_Files_WindowsCompressedFolders.zip\");\n     }\n \n     private static File get100KFileFileGeneratedByJava7Jar() throws Throwable {\n-        return getFile(\"/100k_Files_jar.zip\");\n+        return getFile(\"100k_Files_jar.zip\");\n     }\n \n     private static File get100KFileFileGeneratedByWinZIP() throws Throwable {\n-        return getFile(\"/100k_Files_WinZIP.zip\");\n+        return getFile(\"100k_Files_WinZIP.zip\");\n     }\n \n     private static File get100KFileFileGeneratedByPKZip() throws Throwable {\n-        return getFile(\"/100k_Files_PKZip.zip\");\n+        return getFile(\"100k_Files_PKZip.zip\");\n     }\n \n     private static File getTempFile(String testName) throws Throwable {\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java\n \n package org.apache.commons.compress.archivers.zip;\n \n+import static org.apache.commons.compress.AbstractTestCase.getFile;\n+\n import junit.framework.TestCase;\n \n import java.io.ByteArrayOutputStream;\n import java.io.File;\n-import java.net.URI;\n-import java.net.URL;\n import java.util.Enumeration;\n import java.util.TreeMap;\n import java.util.zip.ZipEntry;\n         // I looked into creating a test with hard links, but zip does not appear to\n         // support hard links, so nevermind.\n \n-        URL zip = getClass().getResource(\"/COMPRESS-214_unix_symlinks.zip\");\n-        File archive = new File(new URI(zip.toString()));\n+        File archive = getFile(\"COMPRESS-214_unix_symlinks.zip\");\n         ZipFile zf = null;\n \n         try {\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java\n \n package org.apache.commons.compress.archivers.zip;\n \n+import static org.apache.commons.compress.AbstractTestCase.getFile;\n import static org.junit.Assert.assertArrayEquals;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.InputStream;\n-import java.net.URI;\n-import java.net.URL;\n \n import org.junit.Test;\n \n      */\n     @Test\n     public void winzipBackSlashWorkaround() throws Exception {\n-        URL zip = getClass().getResource(\"/test-winzip.zip\");\n         ZipArchiveInputStream in = null;\n         try {\n-            in = new ZipArchiveInputStream(new FileInputStream(new File(new URI(zip.toString()))));\n+            in = new ZipArchiveInputStream(new FileInputStream(getFile(\"test-winzip.zip\")));\n             ZipArchiveEntry zae = in.getNextZipEntry();\n             zae = in.getNextZipEntry();\n             zae = in.getNextZipEntry();\n      */\n     @Test\n     public void properUseOfInflater() throws Exception {\n-        URL zip = getClass().getResource(\"/COMPRESS-189.zip\");\n         ZipFile zf = null;\n         ZipArchiveInputStream in = null;\n         try {\n-            zf = new ZipFile(new File(new URI(zip.toString())));\n+            zf = new ZipFile(getFile(\"COMPRESS-189.zip\"));\n             ZipArchiveEntry zae = zf.getEntry(\"USD0558682-20080101.ZIP\");\n             in = new ZipArchiveInputStream(new BufferedInputStream(zf.getInputStream(zae)));\n             ZipArchiveEntry innerEntry;\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java\n \n package org.apache.commons.compress.archivers.zip;\n \n+import static org.apache.commons.compress.AbstractTestCase.getFile;\n+\n import java.io.File;\n import java.io.FileOutputStream;\n import java.io.InputStream;\n import java.io.OutputStream;\n-import java.net.URI;\n-import java.net.URL;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.zip.ZipEntry;\n      * @see \"https://issues.apache.org/jira/browse/COMPRESS-176\"\n      */\n     public void testWinzipBackSlashWorkaround() throws Exception {\n-        URL zip = getClass().getResource(\"/test-winzip.zip\");\n-        File archive = new File(new URI(zip.toString()));\n+        File archive = getFile(\"test-winzip.zip\");\n         zf = new ZipFile(archive);\n         assertNull(zf.getEntry(\"\\u00e4\\\\\\u00fc.txt\"));\n         assertNotNull(zf.getEntry(\"\\u00e4/\\u00fc.txt\"));\n      * >COMPRESS-208</a>.\n      */\n     public void testSkipsPK00Prefix() throws Exception {\n-        URL zip = getClass().getResource(\"/COMPRESS-208.zip\");\n-        File archive = new File(new URI(zip.toString()));\n+        File archive = getFile(\"COMPRESS-208.zip\");\n         zf = new ZipFile(archive);\n         assertNotNull(zf.getEntry(\"test1.xml\"));\n         assertNotNull(zf.getEntry(\"test2.xml\"));\n      * central directory order is different from entry data order.\n      */\n     private void readOrderTest() throws Exception {\n-        URL zip = getClass().getResource(\"/ordertest.zip\");\n-        File archive = new File(new URI(zip.toString()));\n+        File archive = getFile(\"ordertest.zip\");\n         zf = new ZipFile(archive);\n     }\n ", "timestamp": 1359279953, "metainfo": ""}