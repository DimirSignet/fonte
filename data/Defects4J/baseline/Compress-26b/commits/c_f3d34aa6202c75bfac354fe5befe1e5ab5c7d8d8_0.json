{"sha": "f3d34aa6202c75bfac354fe5befe1e5ab5c7d8d8", "log": "allow format-detection to deal with blocking inputs - COMPRESS-239  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;\n import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n \n /**\n  * Factory to create Archive[In|Out]putStreams from names or the first bytes of\n         final byte[] signature = new byte[12];\n         in.mark(signature.length);\n         try {\n-            int signatureLength = in.read(signature);\n+            int signatureLength = IOUtils.readFully(in, signature);\n             in.reset();\n             if (ZipArchiveInputStream.matches(signature, signatureLength)) {\n                 if (entryEncoding != null) {\n             // Dump needs a bigger buffer to check the signature;\n             final byte[] dumpsig = new byte[32];\n             in.mark(dumpsig.length);\n-            signatureLength = in.read(dumpsig);\n+            signatureLength = IOUtils.readFully(in, dumpsig);\n             in.reset();\n             if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {\n                 return new DumpArchiveInputStream(in);\n             // Tar needs an even bigger buffer to check the signature; read the first block\n             final byte[] tarheader = new byte[512];\n             in.mark(tarheader.length);\n-            signatureLength = in.read(tarheader);\n+            signatureLength = IOUtils.readFully(in, tarheader);\n             in.reset();\n             if (TarArchiveInputStream.matches(tarheader, signatureLength)) {\n                 if (entryEncoding != null) {\n--- a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n import org.apache.commons.compress.compressors.xz.XZUtils;\n import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;\n import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n \n /**\n  * <p>Factory to create Compressor[In|Out]putStreams from names. To add other\n         final byte[] signature = new byte[12];\n         in.mark(signature.length);\n         try {\n-            int signatureLength = in.read(signature);\n+            int signatureLength = IOUtils.readFully(in, signature);\n             in.reset();\n \n             if (BZip2CompressorInputStream.matches(signature, signatureLength)) {", "timestamp": 1380893144, "metainfo": ""}