{"sha": "04f0ab3bf48a4ea1247fa9619b34cac6f6049a6a", "log": "Merge branch 'pr/1038'", "commit": "\n--- a/src/main/java/org/jsoup/Connection.java\n+++ b/src/main/java/org/jsoup/Connection.java\n import org.jsoup.nodes.Document;\n import org.jsoup.parser.Parser;\n \n+import javax.net.ssl.SSLSocketFactory;\n import java.io.BufferedInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n     Connection validateTLSCertificates(boolean value);\n \n     /**\n+     * Set custom SSL socket factory\n+     * @param sslSocketFactory custom SSL socket factory\n+     * @return this Connection, for chaining\n+     */\n+    Connection sslSocketFactory(SSLSocketFactory sslSocketFactory);\n+\n+    /**\n      * Add a request data parameter. Request parameters are sent in the request query string for GETs, and in the\n      * request body for POSTs. A request may have multiple values of the same name.\n      * @param key data key\n          * Set TLS certificate validation. <b>True</b> by default.\n          * @param value set false to ignore TLS (SSL) certificates\n          * @deprecated as distributions (specifically Google Play) are starting to show warnings if these checks are\n-         * disabled.\n+         * disabled. This method will be removed in the next release.\n+         * @see #sslSocketFactory(SSLSocketFactory)\n          */\n         void validateTLSCertificates(boolean value);\n+\n+        /**\n+         * Get the current custom SSL socket factory, if any.\n+         * @return custom SSL socket factory if set, null otherwise\n+         */\n+        SSLSocketFactory sslSocketFactory();\n+\n+        /**\n+         * Set a custom SSL socket factory.\n+         * @param sslSocketFactory SSL socket factory\n+         */\n+        void sslSocketFactory(SSLSocketFactory sslSocketFactory);\n \n         /**\n          * Add a data parameter to the request\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n         return this;\n     }\n \n+    public Connection sslSocketFactory(SSLSocketFactory sslSocketFactory) {\n+\t    req.sslSocketFactory(sslSocketFactory);\n+\t    return this;\n+    }\n+\n     public Connection data(String key, String filename, InputStream inputStream) {\n         req.data(KeyVal.create(key, filename, inputStream));\n         return this;\n         private boolean parserDefined = false; // called parser(...) vs initialized in ctor\n         private boolean validateTSLCertificates = true;\n         private String postDataCharset = DataUtil.defaultCharset;\n+        private SSLSocketFactory sslSocketFactory;\n \n         Request() {\n             timeoutMilliseconds = 30000; // 30 seconds\n \n         public void validateTLSCertificates(boolean value) {\n             validateTSLCertificates = value;\n+        }\n+\n+        public SSLSocketFactory sslSocketFactory() {\n+            return sslSocketFactory;\n+        }\n+\n+        public void sslSocketFactory(SSLSocketFactory sslSocketFactory) {\n+            this.sslSocketFactory = sslSocketFactory;\n         }\n \n         public Connection.Request ignoreHttpErrors(boolean ignoreHttpErrors) {\n             conn.setReadTimeout(req.timeout() / 2); // gets reduced after connection is made and status is read\n \n             if (conn instanceof HttpsURLConnection) {\n-                if (!req.validateTLSCertificates()) {\n+                SSLSocketFactory socketFactory = req.sslSocketFactory();\n+\n+                if (socketFactory != null) {\n+                    ((HttpsURLConnection) conn).setSSLSocketFactory(socketFactory);\n+                } else if (!req.validateTLSCertificates()) {\n                     initUnSecureTSL();\n                     ((HttpsURLConnection)conn).setSSLSocketFactory(sslSocketFactory);\n                     ((HttpsURLConnection)conn).setHostnameVerifier(getInsecureVerifier());\n--- a/src/main/java/org/jsoup/Connection.java\n+++ b/src/main/java/org/jsoup/Connection.java\n          * same connection response (otherwise, once the response is read, its InputStream will have been drained and\n          * may not be re-read). Calling {@link #body() } or {@link #bodyAsBytes()} has the same effect.\n          * @return this response, for chaining\n+         * @throws UncheckedIOException if an IO exception occurs during buffering.\n          */\n         Response bufferUp();\n \n--- a/src/main/java/org/jsoup/UncheckedIOException.java\n+++ b/src/main/java/org/jsoup/UncheckedIOException.java\n \n import java.io.IOException;\n \n-public class UncheckedIOException extends Error {\n+public class UncheckedIOException extends RuntimeException {\n     public UncheckedIOException(IOException cause) {\n         super(cause);\n     }\n--- a/src/main/java/org/jsoup/helper/DataUtil.java\n+++ b/src/main/java/org/jsoup/helper/DataUtil.java\n package org.jsoup.helper;\n \n+import org.jsoup.UncheckedIOException;\n import org.jsoup.internal.ConstrainableInputStream;\n import org.jsoup.nodes.Document;\n import org.jsoup.nodes.Element;\n \n         // look for BOM - overrides any other header or input\n         BomCharset bomCharset = detectCharsetFromBom(firstBytes);\n-        if (bomCharset != null) {\n+        if (bomCharset != null)\n             charsetName = bomCharset.charset;\n-            input.skip(bomCharset.offset);\n-        }\n \n         if (charsetName == null) { // determine from meta. safe first parse as UTF-8\n             String docData = Charset.forName(defaultCharset).decode(firstBytes).toString();\n             if (charsetName == null)\n                 charsetName = defaultCharset;\n             BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize);\n-            doc = parser.parseInput(reader, baseUri);\n+            if (bomCharset != null && bomCharset.offset) // creating the buffered reader ignores the input pos, so must skip here\n+                reader.skip(1);\n+            try {\n+                doc = parser.parseInput(reader, baseUri);\n+            } catch (UncheckedIOException e) {\n+                // io exception when parsing (not seen before because reading the stream as we go)\n+                throw e.ioException();\n+            }\n             doc.outputSettings().charset(charsetName);\n         }\n         input.close();\n         }\n         if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF || // BE\n             bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == 0x00 && bom[3] == 0x00) { // LE\n-            return new BomCharset(\"UTF-32\", 0); // and I hope it's on your system\n+            return new BomCharset(\"UTF-32\", false); // and I hope it's on your system\n         } else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF || // BE\n             bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {\n-            return new BomCharset(\"UTF-16\", 0); // in all Javas\n+            return new BomCharset(\"UTF-16\", false); // in all Javas\n         } else if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {\n-            return new BomCharset(\"UTF-8\", 3); // in all Javas\n+            return new BomCharset(\"UTF-8\", true); // in all Javas\n             // 16 and 32 decoders consume the BOM to determine be/le; utf-8 should be consumed here\n         }\n         return null;\n \n     private static class BomCharset {\n         private final String charset;\n-        private final int offset;\n-\n-        public BomCharset(String charset, int offset) {\n+        private final boolean offset;\n+\n+        public BomCharset(String charset, boolean offset) {\n             this.charset = charset;\n             this.offset = offset;\n         }\n--- a/src/main/java/org/jsoup/nodes/LeafNode.java\n+++ b/src/main/java/org/jsoup/nodes/LeafNode.java\n \n import org.jsoup.helper.Validate;\n \n+import java.util.Collections;\n import java.util.List;\n \n abstract class LeafNode extends Node {\n+    private static final List<Node> EmptyNodes = Collections.emptyList();\n+\n     Object value; // either a string value, or an attribute map (in the rare case multiple attributes are set)\n \n     protected final boolean hasAttributes() {\n \n     @Override\n     protected List<Node> ensureChildNodes() {\n-        throw new UnsupportedOperationException(\"Leaf Nodes do not have child nodes.\");\n+        return EmptyNodes;\n     }\n }\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n     private boolean fosterInserts; // if next inserts should be fostered\n     private boolean fragmentParsing; // if parsing a fragment of html\n \n-    HtmlTreeBuilder() {}\n-\n     ParseSettings defaultSettings() {\n         return ParseSettings.htmlDefault;\n     }\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n     }\n \n     private static boolean isWhitespace(String data) {\n-        // todo: this checks more than spec - \"\\t\", \"\\n\", \"\\f\", \"\\r\", \" \"\n-        for (int i = 0; i < data.length(); i++) {\n-            char c = data.charAt(i);\n-            if (!StringUtil.isWhitespace(c))\n-                return false;\n-        }\n-        return true;\n+        return StringUtil.isBlank(data);\n     }\n \n     private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) {\n--- a/src/main/java/org/jsoup/parser/Token.java\n+++ b/src/main/java/org/jsoup/parser/Token.java\n         return type == TokenType.EOF;\n     }\n \n-    enum TokenType {\n+    public enum TokenType {\n         Doctype,\n         StartTag,\n         EndTag,\n--- a/src/main/java/org/jsoup/parser/Tokeniser.java\n+++ b/src/main/java/org/jsoup/parser/Tokeniser.java\n final class Tokeniser {\n     static final char replacementChar = '\\uFFFD'; // replaces null character\n     private static final char[] notCharRefCharsSorted = new char[]{'\\t', '\\n', '\\r', '\\f', ' ', '<', '&'};\n+\n+    // Some illegal character escapes are parsed by browsers as windows-1252 instead. See issue #1034\n+    // https://html.spec.whatwg.org/multipage/parsing.html#numeric-character-reference-end-state\n+    static final int win1252ExtensionsStart = 0x80;\n+    static final int[] win1252Extensions = new int[] {\n+            // we could build this manually, but Windows-1252 is not a standard java charset so that could break on\n+            // some platforms - this table is verified with a test\n+            0x20AC, 0x0081, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,\n+            0x02C6, 0x2030, 0x0160, 0x2039, 0x0152, 0x008D, 0x017D, 0x008F,\n+            0x0090, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,\n+            0x02DC, 0x2122, 0x0161, 0x203A, 0x0153, 0x009D, 0x017E, 0x0178,\n+    };\n \n     static {\n         Arrays.sort(notCharRefCharsSorted);\n                 codeRef[0] = replacementChar;\n                 return codeRef;\n             } else {\n+                // fix illegal unicode characters to match browser behavior\n+                if (charval >= win1252ExtensionsStart && charval < win1252ExtensionsStart + win1252Extensions.length) {\n+                    characterReferenceError(\"character is not a valid unicode code point\");\n+                    charval = win1252Extensions[charval - win1252ExtensionsStart];\n+                }\n+\n                 // todo: implement number replacement table\n                 // todo: check for extra illegal unicode points as parse errors\n                 codeRef[0] = charval;\n--- a/src/main/java/org/jsoup/parser/XmlTreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/XmlTreeBuilder.java\n             String data = comment.getData();\n             if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) {\n                 Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri, Parser.xmlParser());\n-                Element el = doc.child(0);\n-                insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith(\"!\"));\n-                insert.attributes().addAll(el.attributes());\n+                if (doc.childNodeSize() > 0) {\n+                    Element el = doc.child(0);\n+                    insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith(\"!\"));\n+                    insert.attributes().addAll(el.attributes());\n+                } // else, we couldn't parse it as a decl, so leave as a comment\n             }\n         }\n         insertNode(insert);\n--- a/src/test/java/org/jsoup/helper/DataUtilTest.java\n+++ b/src/test/java/org/jsoup/helper/DataUtilTest.java\n         assertTrue(doc.title().contains(\"UTF-32LE\"));\n         assertTrue(doc.text().contains(\"\uac00\uac01\uac02\uac03\uac04\uac05\"));\n     }\n+\n+    @Test\n+    public void supportsUTF8BOM() throws IOException {\n+        File in = getFile(\"/bomtests/bom_utf8.html\");\n+        Document doc = Jsoup.parse(in, null, \"http://example.com\");\n+        assertEquals(\"OK\", doc.head().select(\"title\").text());\n+    }\n }\n--- a/src/test/java/org/jsoup/integration/ConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/ConnectTest.java\n \n import org.jsoup.Connection;\n import org.jsoup.Jsoup;\n+import org.jsoup.UncheckedIOException;\n import org.jsoup.integration.servlets.Deflateservlet;\n import org.jsoup.integration.servlets.EchoServlet;\n import org.jsoup.integration.servlets.HelloServlet;\n+import org.jsoup.integration.servlets.InterruptedServlet;\n import org.jsoup.integration.servlets.SlowRider;\n import org.jsoup.nodes.Document;\n import org.jsoup.nodes.Element;\n         Document doc = res.parse();\n         assertEquals(\"Hello, World!\", doc.selectFirst(\"p\").text());\n     }\n+\n+    @Test\n+    public void handlesEmptyStreamDuringParseRead() throws IOException {\n+        // this handles situations where the remote server sets a content length greater than it actually writes\n+\n+        Connection.Response res = Jsoup.connect(InterruptedServlet.Url)\n+            .timeout(200)\n+            .execute();\n+\n+        boolean threw = false;\n+        try {\n+            Document document = res.parse();\n+            assertEquals(\"Something\", document.title());\n+        } catch (IOException e) {\n+            threw = true;\n+        }\n+        assertEquals(true, threw);\n+    }\n+\n+    @Test\n+    public void handlesEmtpyStreamDuringBufferdRead() throws IOException {\n+        Connection.Response res = Jsoup.connect(InterruptedServlet.Url)\n+            .timeout(200)\n+            .execute();\n+\n+        boolean threw = false;\n+        try {\n+            res.bufferUp();\n+        } catch (UncheckedIOException e) {\n+            threw = true;\n+        }\n+        assertEquals(true, threw);\n+\n+    }\n }\n--- /dev/null\n+++ b/src/test/java/org/jsoup/integration/servlets/InterruptedServlet.java\n+package org.jsoup.integration.servlets;\n+\n+import org.jsoup.integration.TestServer;\n+import org.jsoup.parser.CharacterReaderTest;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+\n+public class InterruptedServlet extends BaseServlet {\n+    public static final String Url = TestServer.map(InterruptedServlet.class);\n+\n+    @Override\n+    protected void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n+        res.setContentType(TextHtml);\n+        res.setStatus(HttpServletResponse.SC_OK);\n+\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"<title>Something</title>\");\n+        while (sb.length() <= CharacterReaderTest.maxBufferLen) {\n+            sb.append(\"A suitable amount of data. \\n\");\n+        }\n+        String data = sb.toString();\n+\n+        res.setContentLength(data.length() * 2);\n+\n+        res.getWriter().write(data);\n+\n+    }\n+}\n--- a/src/test/java/org/jsoup/nodes/TextNodeTest.java\n+++ b/src/test/java/org/jsoup/nodes/TextNodeTest.java\n import org.jsoup.Jsoup;\n import org.jsoup.TextUtil;\n import org.junit.Test;\n+\n+import java.util.List;\n \n import static org.junit.Assert.*;\n \n         TextNode t = doc.body().textNodes().get(0);\n         assertEquals(new String(Character.toChars(135361)), t.outerHtml().trim());\n     }\n+\n+    @Test public void testLeadNodesHaveNoChildren() {\n+        Document doc = Jsoup.parse(\"<div>Hello there</div>\");\n+        Element div = doc.select(\"div\").first();\n+        TextNode tn = (TextNode) div.childNode(0);\n+        List<Node> nodes = tn.childNodes();\n+        assertEquals(0, nodes.size());\n+    }\n }\n--- a/src/test/java/org/jsoup/parser/CharacterReaderTest.java\n+++ b/src/test/java/org/jsoup/parser/CharacterReaderTest.java\n  * @author Jonathan Hedley, jonathan@hedley.net\n  */\n public class CharacterReaderTest {\n+    public final static int maxBufferLen = CharacterReader.maxBufferLen;\n \n     @Test public void consume() {\n         CharacterReader r = new CharacterReader(\"one\");\n--- a/src/test/java/org/jsoup/parser/HtmlParserTest.java\n+++ b/src/test/java/org/jsoup/parser/HtmlParserTest.java\n         assertEquals(\"One\\nTwo\", pre.text());\n         assertEquals(\"\\nOne\\nTwo\\n\", pre.wholeText());\n   }\n+\n+  @Test public void handlesXmlDeclAndCommentsBeforeDoctype() throws IOException {\n+      File in = ParseTest.getFile(\"/htmltests/comments.html\");\n+      Document doc = Jsoup.parse(in, \"UTF-8\");\n+\n+      assertEquals(\"<!--?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?--> <!-- so --><!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\"> <!-- what --> <html xml:lang=\\\"en\\\" lang=\\\"en\\\" xmlns=\\\"http://www.w3.org/1999/xhtml\\\"> <!-- now --> <head> <!-- then --> <meta http-equiv=\\\"Content-type\\\" content=\\\"text/html; charset=utf-8\\\"> <title>A Certain Kind of Test</title> </head> <body> <h1>Hello</h1>h1&gt; (There is a UTF8 hidden BOM at the top of this file.) </body> </html>\",\n+          StringUtil.normaliseWhitespace(doc.html()));\n+\n+      assertEquals(\"A Certain Kind of Test\", doc.head().select(\"title\").text());\n+  }\n }\n--- a/src/test/java/org/jsoup/parser/TokeniserTest.java\n+++ b/src/test/java/org/jsoup/parser/TokeniserTest.java\n package org.jsoup.parser;\n \n+import java.io.UnsupportedEncodingException;\n import org.jsoup.Jsoup;\n import org.jsoup.nodes.Attribute;\n import org.jsoup.nodes.Comment;\n         assertEquals(title, child.getWholeText());\n         assertEquals(title, doc.title());\n     }\n+\n+    @Test public void cp1252Entities() {\n+        assertEquals(\"\\u20ac\", Jsoup.parse(\"&#0128;\").text());\n+        assertEquals(\"\\u201a\", Jsoup.parse(\"&#0130;\").text());\n+        assertEquals(\"\\u20ac\", Jsoup.parse(\"&#x80;\").text());\n+    }\n+\n+    @Test public void cp1252EntitiesProduceError() {\n+        Parser parser = new Parser(new HtmlTreeBuilder());\n+        parser.setTrackErrors(10);\n+        assertEquals(\"\\u20ac\", parser.parseInput(\"<html><body>&#0128;</body></html>\", \"\").text());\n+        assertEquals(1, parser.getErrors().size());\n+    }\n+\n+    @Test public void cp1252SubstitutionTable() throws UnsupportedEncodingException {\n+        for (int i = 0; i < Tokeniser.win1252Extensions.length; i++) {\n+            String s = new String(new byte[]{ (byte) (i + Tokeniser.win1252ExtensionsStart) }, \"Windows-1252\");\n+            assertEquals(1, s.length());\n+\n+            // some of these characters are illegal\n+            if (s.charAt(0) == '\\ufffd') { continue; }\n+\n+            assertEquals(\"At: \" + i, s.charAt(0), Tokeniser.win1252Extensions[i]);\n+        }\n+    }\n }\n--- a/src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java\n+++ b/src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java\n \n         assertEquals(\"//\\n\\n  foo();\\n//\", doc.selectFirst(\"script\").text());\n     }\n+\n+    @Test\n+    public void handlesDodgyXmlDecl() {\n+        String xml = \"<?xml version='1.0'><val>One</val>\";\n+        Document doc = Jsoup.parse(xml, \"\", Parser.xmlParser());\n+        assertEquals(\"One\", doc.select(\"val\").text());\n+    }\n }", "timestamp": 1523829378, "metainfo": ""}