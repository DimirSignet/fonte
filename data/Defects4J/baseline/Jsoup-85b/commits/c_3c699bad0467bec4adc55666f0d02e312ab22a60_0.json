{"sha": "3c699bad0467bec4adc55666f0d02e312ab22a60", "log": "Parse invalid unicode escapes as Windows-1252 instead [Fixes #1034]", "commit": "\n--- a/src/main/java/org/jsoup/parser/Tokeniser.java\n+++ b/src/main/java/org/jsoup/parser/Tokeniser.java\n final class Tokeniser {\n     static final char replacementChar = '\\uFFFD'; // replaces null character\n     private static final char[] notCharRefCharsSorted = new char[]{'\\t', '\\n', '\\r', '\\f', ' ', '<', '&'};\n+\n+    // Some illegal character escapes are parsed by browsers as windows-1252 instead. See issue #1034\n+    static final int win1252ExtensionsStart = 0x80;\n+    static final int[] win1252Extensions = new int[] {\n+            // we could build this manually, but Windows-1252 is not a standard java charset so that could break on\n+            // some platforms - this table is verified with a test\n+            0x20AC, 0x0081, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,\n+            0x02C6, 0x2030, 0x0160, 0x2039, 0x0152, 0x008D, 0x017D, 0x008F,\n+            0x0090, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,\n+            0x02DC, 0x2122, 0x0161, 0x203A, 0x0153, 0x009D, 0x017E, 0x0178,\n+    };\n \n     static {\n         Arrays.sort(notCharRefCharsSorted);\n                 codeRef[0] = replacementChar;\n                 return codeRef;\n             } else {\n+                // fix illegal unicode characters to match browser behavior\n+                if (charval >= win1252ExtensionsStart && charval < win1252ExtensionsStart + win1252Extensions.length) {\n+                    characterReferenceError(\"character is not a valid unicode code point\");\n+                    charval = win1252Extensions[charval - win1252ExtensionsStart];\n+                }\n+\n                 // todo: implement number replacement table\n                 // todo: check for extra illegal unicode points as parse errors\n                 codeRef[0] = charval;\n--- a/src/test/java/org/jsoup/parser/TokeniserTest.java\n+++ b/src/test/java/org/jsoup/parser/TokeniserTest.java\n package org.jsoup.parser;\n \n+import java.io.UnsupportedEncodingException;\n import org.jsoup.Jsoup;\n import org.jsoup.nodes.Attribute;\n import org.jsoup.nodes.Comment;\n         assertEquals(title, child.getWholeText());\n         assertEquals(title, doc.title());\n     }\n+\n+    @Test public void cp1252Entities() {\n+        assertEquals(\"\\u20ac\", Jsoup.parse(\"&#0128;\").text());\n+        assertEquals(\"\\u201a\", Jsoup.parse(\"&#0130;\").text());\n+        assertEquals(\"\\u20ac\", Jsoup.parse(\"&#x80;\").text());\n+    }\n+\n+    @Test public void cp1252EntitiesProduceError() {\n+        Parser parser = new Parser(new HtmlTreeBuilder());\n+        parser.setTrackErrors(10);\n+        assertEquals(\"\\u20ac\", parser.parseInput(\"<html><body>&#0128;</body></html>\", \"\").text());\n+        assertEquals(1, parser.getErrors().size());\n+    }\n+\n+    @Test public void cp1252SubstitutionTable() throws UnsupportedEncodingException {\n+        for (int i = 0; i < Tokeniser.win1252Extensions.length; i++) {\n+            String s = new String(new byte[]{ (byte) (i + Tokeniser.win1252ExtensionsStart) }, \"Windows-1252\");\n+            assertEquals(1, s.length());\n+\n+            // some of these characters are illegal\n+            if (s.charAt(0) == '\\ufffd') { continue; }\n+\n+            assertEquals(\"At: \" + i, s.charAt(0), Tokeniser.win1252Extensions[i]);\n+        }\n+    }\n }", "timestamp": 1523788784, "metainfo": ""}