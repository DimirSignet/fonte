{"sha": "3676b132429306c722304e94177172dca42c2dda", "log": "Merge branch 'master' into pr/988", "commit": "\n--- a/src/main/java/org/jsoup/helper/DataUtil.java\n+++ b/src/main/java/org/jsoup/helper/DataUtil.java\n         boolean fullyRead = false;\n \n         // read the start of the stream and look for a BOM or meta charset\n-        input.mark(firstReadBufferSize);\n-        ByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize - 1); // -1 because we read one more to see if completed\n+        input.mark(bufferSize);\n+        ByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize - 1); // -1 because we read one more to see if completed. First read is < buffer size, so can't be invalid.\n         fullyRead = input.read() == -1;\n         input.reset();\n \n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n import java.util.Map;\n import java.util.regex.Pattern;\n import java.util.zip.GZIPInputStream;\n+import java.util.zip.Inflater;\n+import java.util.zip.InflaterInputStream;\n \n import static org.jsoup.Connection.Method.HEAD;\n import static org.jsoup.internal.Normalizer.lowerCase;\n                 if (conn.getContentLength() != 0 && req.method() != HEAD) { // -1 means unknown, chunked. sun throws an IO exception on 500 response with no content when trying to read body\n                     res.bodyStream = null;\n                     res.bodyStream = conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n-                    if (res.hasHeaderWithValue(CONTENT_ENCODING, \"gzip\"))\n+                    if (res.hasHeaderWithValue(CONTENT_ENCODING, \"gzip\")) {\n                         res.bodyStream = new GZIPInputStream(res.bodyStream);\n+                    } else if (res.hasHeaderWithValue(CONTENT_ENCODING, \"deflate\")) {\n+                        res.bodyStream = new InflaterInputStream(res.bodyStream, new Inflater(true));\n+                    }\n                     res.bodyStream = ConstrainableInputStream\n                         .wrap(res.bodyStream, DataUtil.bufferSize, req.maxBodySize())\n                         .timeout(startTime, req.timeout())\n--- a/src/main/java/org/jsoup/nodes/Attribute.java\n+++ b/src/main/java/org/jsoup/nodes/Attribute.java\n         return shouldCollapseAttribute(key, val, out);\n     }\n \n-    protected static boolean shouldCollapseAttribute(String key, String val, Document.OutputSettings out) {\n-        // todo: optimize\n-        return (val == null || \"\".equals(val) || val.equalsIgnoreCase(key))\n-            && out.syntax() == Document.OutputSettings.Syntax.html\n-            && isBooleanAttribute(key);\n+    protected static boolean shouldCollapseAttribute(final String key, final String val, final Document.OutputSettings out) {\n+        return (\n+            out.syntax() == Document.OutputSettings.Syntax.html &&\n+                (val == null || (\"\".equals(val) || val.equalsIgnoreCase(key)) && Attribute.isBooleanAttribute(key)));\n     }\n \n     /**\n--- a/src/main/java/org/jsoup/nodes/Attributes.java\n+++ b/src/main/java/org/jsoup/nodes/Attributes.java\n             accum.append(' ').append(key);\n \n             // collapse checked=null, checked=\"\", checked=checked; write out others\n-            if (!(out.syntax() == Document.OutputSettings.Syntax.html\n-                && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n-\n+            if (!Attribute.shouldCollapseAttribute(key, val, out)) {\n                 accum.append(\"=\\\"\");\n                 Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n                 accum.append('\"');\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n             }\n \n             public void tail(Node node, int depth) {\n+                // make sure there is a space between block tags and immediately following text nodes <div>One</div>Two should be \"One Two\".\n+                if (node instanceof Element) {\n+                    Element element = (Element) node;\n+                    if (element.isBlock() && (node.nextSibling() instanceof TextNode) && !TextNode.lastCharIsWhitespace(accum))\n+                        accum.append(' ');\n+                }\n+\n             }\n         }, this);\n         return accum.toString().trim();\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n                             tb.processEndTag(\"p\");\n                         }\n                         tb.insert(startTag);\n-                        // todo: ignore LF if next token\n+                        tb.reader.matchConsume(\"\\n\"); // ignore LF if next token\n                         tb.framesetOk(false);\n                     } else if (name.equals(\"form\")) {\n                         if (tb.getFormElement() != null) {\n--- a/src/test/java/org/jsoup/integration/ConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/ConnectTest.java\n \n import org.jsoup.Connection;\n import org.jsoup.Jsoup;\n+import org.jsoup.integration.servlets.Deflateservlet;\n import org.jsoup.integration.servlets.EchoServlet;\n import org.jsoup.integration.servlets.HelloServlet;\n import org.jsoup.integration.servlets.SlowRider;\n         Document doc = Jsoup.connect(echoUrl).cookies(cookies).get();\n         assertEquals(\"token=asdfg123; uid=jhy\", ihVal(\"Cookie\", doc));\n     }\n+\n+    @Test\n+    public void supportsDeflate() throws IOException {\n+        Connection.Response res = Jsoup.connect(Deflateservlet.Url).execute();\n+        assertEquals(\"deflate\", res.header(\"Content-Encoding\"));\n+\n+        Document doc = res.parse();\n+        assertEquals(\"Hello, World!\", doc.selectFirst(\"p\").text());\n+    }\n }\n--- /dev/null\n+++ b/src/test/java/org/jsoup/integration/servlets/Deflateservlet.java\n+package org.jsoup.integration.servlets;\n+\n+import org.jsoup.integration.TestServer;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.zip.Deflater;\n+import java.util.zip.DeflaterOutputStream;\n+\n+public class Deflateservlet extends BaseServlet {\n+    public static final String Url = TestServer.map(Deflateservlet.class);\n+\n+    @Override\n+    protected void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n+        res.setContentType(TextHtml);\n+        res.setStatus(HttpServletResponse.SC_OK);\n+        res.setHeader(\"Content-Encoding\", \"deflate\");\n+\n+        String doc = \"<p>Hello, World!<p>That should be enough, right?<p>Hello, World!<p>That should be enough, right?\";\n+\n+        DeflaterOutputStream stream = new DeflaterOutputStream(\n+            res.getOutputStream(),\n+            new Deflater(Deflater.BEST_COMPRESSION, true)); // true = nowrap zlib headers\n+\n+       stream.write(doc.getBytes(StandardCharsets.UTF_8));\n+       stream.close();\n+    }\n+\n+    // allow the servlet to run as a main program, for local test\n+    public static void main(String[] args) {\n+        TestServer.start();\n+        System.out.println(Url);\n+    }\n+}\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n         assertFalse(doc.body().html().contains(\"class=\\\"\\\"\"));\n     }\n \n+    @Test\n+    public void booleanAttributeOutput() {\n+        Document doc = Jsoup.parse(\"<img src=foo noshade='' nohref async=async autofocus=false>\");\n+        Element img = doc.selectFirst(\"img\");\n+\n+        assertEquals(\"<img src=\\\"foo\\\" noshade nohref async autofocus=\\\"false\\\">\", img.outerHtml());\n+    }\n+\n+    @Test\n+    public void textHasSpaceAfterBlockTags() {\n+        Document doc = Jsoup.parse(\"<div>One</div>Two\");\n+        assertEquals(\"One Two\", doc.text());\n+    }\n+\n }\n--- a/src/test/java/org/jsoup/parser/HtmlParserTest.java\n+++ b/src/test/java/org/jsoup/parser/HtmlParserTest.java\n       Document doc = Jsoup.parse(\"<!\");\n       assertTrue(doc.childNode(0) instanceof Comment);\n   }\n+\n+  @Test public void preSkipsFirstNewline() {\n+        Document doc = Jsoup.parse(\"<pre>\\n\\nOne\\nTwo\\n</pre>\");\n+        Element pre = doc.selectFirst(\"pre\");\n+        assertEquals(\"One\\nTwo\", pre.text());\n+        assertEquals(\"\\nOne\\nTwo\\n\", pre.wholeText());\n+  }\n }\n--- a/src/main/java/org/jsoup/parser/TokenQueue.java\n+++ b/src/main/java/org/jsoup/parser/TokenQueue.java\n         int end = -1;\n         int depth = 0;\n         char last = 0;\n-        boolean inQuote = false;\n+        boolean inSingleQuote = false;\n+        boolean inDoubleQuote = false;\n \n         do {\n             if (isEmpty()) break;\n             Character c = consume();\n             if (last == 0 || last != ESC) {\n-                if ((c.equals('\\'') || c.equals('\"')) && c != open)\n-                    inQuote = !inQuote;\n-                if (inQuote)\n+                if (c.equals('\\'') && c != open && !inDoubleQuote)\n+                    inSingleQuote = !inSingleQuote;\n+                if (c.equals('\"') && c != open && !inSingleQuote)\n+                    inDoubleQuote = !inDoubleQuote;\n+                if (inSingleQuote || inDoubleQuote)\n                     continue;\n                 if (c.equals(open)) {\n                     depth++;\n--- a/src/test/java/org/jsoup/parser/TokenQueueTest.java\n+++ b/src/test/java/org/jsoup/parser/TokenQueueTest.java\n package org.jsoup.parser;\n \n+import junitparams.JUnitParamsRunner;\n+import junitparams.Parameters;\n+import org.jsoup.Jsoup;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n import static org.junit.Assert.*;\n \n /**\n  * Token queue tests.\n  */\n+@RunWith(JUnitParamsRunner.class)\n public class TokenQueueTest {\n     @Test public void chompBalanced() {\n         TokenQueue tq = new TokenQueue(\":contains(one (two) three) four\");\n         assertEquals(\"one (two) three\", guts);\n         assertEquals(\" four\", remainder);\n     }\n-    \n+\n     @Test public void chompEscapedBalanced() {\n         TokenQueue tq = new TokenQueue(\":contains(one (two) \\\\( \\\\) \\\\) three) four\");\n         String pre = tq.consumeTo(\"(\");\n         String match = tq.chompBalanced('(', ')');\n         assertEquals(\"something(or another)\", match);\n     }\n-    \n+\n     @Test public void unescape() {\n         assertEquals(\"one ( ) \\\\\", TokenQueue.unescape(\"one \\\\( \\\\) \\\\\\\\\"));\n     }\n-    \n+\n     @Test public void chompToIgnoreCase() {\n         String t = \"<textarea>one < two </TEXTarea>\";\n         TokenQueue tq = new TokenQueue(t);\n         String data = tq.chompToIgnoreCase(\"</textarea\");\n         assertEquals(\"<textarea>one < two \", data);\n-        \n+\n         tq = new TokenQueue(\"<textarea> one two < three </oops>\");\n         data = tq.chompToIgnoreCase(\"</textarea\");\n         assertEquals(\"<textarea> one two < three </oops>\", data);\n         tq.addFirst(\"Three\");\n         assertEquals(\"Three Two\", tq.remainder());\n     }\n-    \n-    \n-    @Test \n-    public void consumeToIgnoreSecondCallTest(){\n-\t\tString t = \"<textarea>one < two </TEXTarea> third </TEXTarea>\";\n-\t\tTokenQueue tq = new TokenQueue(t);\n-\t\tString data = tq.chompToIgnoreCase(\"</textarea>\");\n-\t\tassertEquals(\"<textarea>one < two \", data);\n-\t\t\n-\t\tdata = tq.chompToIgnoreCase(\"</textarea>\");\n-\t\tassertEquals(\" third \", data);\n+\n+\n+    @Test public void consumeToIgnoreSecondCallTest() {\n+        String t = \"<textarea>one < two </TEXTarea> third </TEXTarea>\";\n+        TokenQueue tq = new TokenQueue(t);\n+        String data = tq.chompToIgnoreCase(\"</textarea>\");\n+        assertEquals(\"<textarea>one < two \", data);\n+\n+        data = tq.chompToIgnoreCase(\"</textarea>\");\n+        assertEquals(\" third \", data);\n     }\n-    \n+\n+    @Test @Parameters(method = \"singleQuotesInsideDouble, doubleQuotesInsideSingle\")\n+    public void testNestedQuotes(String html, String selector) {\n+        assertEquals(\"#identifier\", Jsoup.parse(html).select(selector).first().cssSelector());\n+    }\n+\n+    public Object[] singleQuotesInsideDouble() {\n+        return new Object[] {new String[] {\n+            \"<html><body><a id=\\\"identifier\\\" onclick=\\\"func('arg')\\\" /></body></html>\",\n+            \"a[onclick*=\\\"('arg\\\"]\"},\n+            new String[] {\"<html><body><a id=\\\"identifier\\\" onclick=func('arg') /></body></html>\",\n+                \"a[onclick*=\\\"('arg\\\"]\"}};\n+    }\n+\n+    public Object[] doubleQuotesInsideSingle() {\n+        return new Object[] {new String[] {\n+            \"<html><body><a id=\\\"identifier\\\" onclick='func(\\\"arg\\\")' /></body></html>\",\n+            \"a[onclick*='(\\\"arg']\"},\n+            new String[] {\"<html><body><a id=\\\"identifier\\\" onclick=func(\\\"arg\\\") /></body></html>\",\n+                \"a[onclick*='(\\\"arg']\"}};\n+    }\n }", "timestamp": 1513909530, "metainfo": ""}