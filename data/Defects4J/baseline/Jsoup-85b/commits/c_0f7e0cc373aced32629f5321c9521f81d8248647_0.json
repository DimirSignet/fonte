{"sha": "0f7e0cc373aced32629f5321c9521f81d8248647", "log": "Make sure to consume a UTF-8 BOM at the start of a doc  Fixes #1003", "commit": "\n--- a/src/main/java/org/jsoup/helper/DataUtil.java\n+++ b/src/main/java/org/jsoup/helper/DataUtil.java\n \n         // look for BOM - overrides any other header or input\n         BomCharset bomCharset = detectCharsetFromBom(firstBytes);\n-        if (bomCharset != null) {\n+        if (bomCharset != null)\n             charsetName = bomCharset.charset;\n-            input.skip(bomCharset.offset);\n-        }\n \n         if (charsetName == null) { // determine from meta. safe first parse as UTF-8\n             String docData = Charset.forName(defaultCharset).decode(firstBytes).toString();\n             if (charsetName == null)\n                 charsetName = defaultCharset;\n             BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize);\n+            if (bomCharset != null && bomCharset.offset) // creating the buffered reader ignores the input pos, so must skip here\n+                reader.skip(1);\n             try {\n                 doc = parser.parseInput(reader, baseUri);\n             } catch (UncheckedIOException e) {\n         }\n         if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF || // BE\n             bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == 0x00 && bom[3] == 0x00) { // LE\n-            return new BomCharset(\"UTF-32\", 0); // and I hope it's on your system\n+            return new BomCharset(\"UTF-32\", false); // and I hope it's on your system\n         } else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF || // BE\n             bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {\n-            return new BomCharset(\"UTF-16\", 0); // in all Javas\n+            return new BomCharset(\"UTF-16\", false); // in all Javas\n         } else if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {\n-            return new BomCharset(\"UTF-8\", 3); // in all Javas\n+            return new BomCharset(\"UTF-8\", true); // in all Javas\n             // 16 and 32 decoders consume the BOM to determine be/le; utf-8 should be consumed here\n         }\n         return null;\n \n     private static class BomCharset {\n         private final String charset;\n-        private final int offset;\n-\n-        public BomCharset(String charset, int offset) {\n+        private final boolean offset;\n+\n+        public BomCharset(String charset, boolean offset) {\n             this.charset = charset;\n             this.offset = offset;\n         }\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n     }\n \n     private static boolean isWhitespace(String data) {\n-        // todo: this checks more than spec - \"\\t\", \"\\n\", \"\\f\", \"\\r\", \" \"\n-        for (int i = 0; i < data.length(); i++) {\n-            char c = data.charAt(i);\n-            if (!StringUtil.isWhitespace(c))\n-                return false;\n-        }\n-        return true;\n+        return StringUtil.isBlank(data);\n     }\n \n     private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) {\n--- a/src/test/java/org/jsoup/helper/DataUtilTest.java\n+++ b/src/test/java/org/jsoup/helper/DataUtilTest.java\n         assertTrue(doc.title().contains(\"UTF-32LE\"));\n         assertTrue(doc.text().contains(\"\uac00\uac01\uac02\uac03\uac04\uac05\"));\n     }\n+\n+    @Test\n+    public void supportsUTF8BOM() throws IOException {\n+        File in = getFile(\"/bomtests/bom_utf8.html\");\n+        Document doc = Jsoup.parse(in, null, \"http://example.com\");\n+        assertEquals(\"OK\", doc.head().select(\"title\").text());\n+    }\n }\n--- a/src/test/java/org/jsoup/parser/HtmlParserTest.java\n+++ b/src/test/java/org/jsoup/parser/HtmlParserTest.java\n         assertEquals(\"One\\nTwo\", pre.text());\n         assertEquals(\"\\nOne\\nTwo\\n\", pre.wholeText());\n   }\n+\n+  @Test public void handlesXmlDeclAndCommentsBeforeDoctype() throws IOException {\n+      File in = ParseTest.getFile(\"/htmltests/comments.html\");\n+      Document doc = Jsoup.parse(in, \"UTF-8\");\n+\n+      assertEquals(\"<!--?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?--> <!-- so --><!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\"> <!-- what --> <html xml:lang=\\\"en\\\" lang=\\\"en\\\" xmlns=\\\"http://www.w3.org/1999/xhtml\\\"> <!-- now --> <head> <!-- then --> <meta http-equiv=\\\"Content-type\\\" content=\\\"text/html; charset=utf-8\\\"> <title>A Certain Kind of Test</title> </head> <body> <h1>Hello</h1>h1&gt; (There is a UTF8 hidden BOM at the top of this file.) </body> </html>\",\n+          StringUtil.normaliseWhitespace(doc.html()));\n+\n+      assertEquals(\"A Certain Kind of Test\", doc.head().select(\"title\").text());\n+  }\n }", "timestamp": 1523761705, "metainfo": ""}