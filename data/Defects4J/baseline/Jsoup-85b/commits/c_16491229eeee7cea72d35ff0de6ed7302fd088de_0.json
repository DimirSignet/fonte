{"sha": "16491229eeee7cea72d35ff0de6ed7302fd088de", "log": "Perf tweaks in start tags, data", "commit": "\n--- a/src/main/java/org/jsoup/parser/CharacterReader.java\n+++ b/src/main/java/org/jsoup/parser/CharacterReader.java\n      */\n     public String consumeToAny(final char... chars) {\n         bufferUp();\n-        final int start = bufPos;\n+        int pos = bufPos;\n+        final int start = pos;\n         final int remaining = bufLength;\n         final char[] val = charBuf;\n         final int charLen = chars.length;\n-        int pos = bufPos;\n         int i;\n \n         OUTER: while (pos < remaining) {\n \n     String consumeToAnySorted(final char... chars) {\n         bufferUp();\n-        final int start = bufPos;\n+        int pos = bufPos;\n+        final int start = pos;\n         final int remaining = bufLength;\n         final char[] val = charBuf;\n-        int pos = bufPos;\n \n         while (pos < remaining) {\n             if (Arrays.binarySearch(chars, val[pos]) >= 0)\n \n     String consumeData() {\n         // &, <, null\n-        bufferUp();\n-        final int start = bufPos;\n+        //bufferUp(); // no need to bufferUp, just called consume()\n+        int pos = bufPos;\n+        final int start = pos;\n         final int remaining = bufLength;\n         final char[] val = charBuf;\n \n-        while (bufPos < remaining) {\n-            final char c = val[bufPos];\n-            if (c == '&'|| c ==  '<' || c ==  TokeniserState.nullChar)\n-                break;\n-            bufPos++;\n-        }\n-\n-        return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos -start) : \"\";\n+        OUTER: while (pos < remaining) {\n+            switch (val[pos]) {\n+                case '&':\n+                case '<':\n+                case TokeniserState.nullChar:\n+                    break OUTER;\n+                default:\n+                    pos++;\n+            }\n+        }\n+        bufPos = pos;\n+        return pos > start ? cacheString(charBuf, stringCache, start, pos -start) : \"\";\n     }\n \n     String consumeTagName() {\n         // '\\t', '\\n', '\\r', '\\f', ' ', '/', '>', nullChar\n         // NOTE: out of spec, added '<' to fix common author bugs\n         bufferUp();\n-        final int start = bufPos;\n+        int pos = bufPos;\n+        final int start = pos;\n         final int remaining = bufLength;\n         final char[] val = charBuf;\n-        int pos = bufPos;\n-\n-        while (pos < remaining) {\n-            final char c = val[pos];\n-            if (c == '\\t'|| c ==  '\\n'|| c ==  '\\r'|| c ==  '\\f'|| c ==  ' '|| c ==  '/'|| c ==  '>'|| c == '<' || c ==  TokeniserState.nullChar)\n-                break;\n+\n+        OUTER: while (pos < remaining) {\n+            switch (val[pos]) {\n+                case '\\t':\n+                case '\\n':\n+                case '\\r':\n+                case '\\f':\n+                case ' ':\n+                case '/':\n+                case '>':\n+                case '<':\n+                case TokeniserState.nullChar:\n+                    break OUTER;\n+            }\n             pos++;\n         }\n \n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n     }\n \n     void insert(Token.Character characterToken) {\n-        Node node;\n-        // characters in script and style go in as datanodes, not text nodes\n-        final String tagName = currentElement().tagName();\n+        final Node node;\n+        final Element el = currentElement();\n+        final String tagName = el.tagName();\n         final String data = characterToken.getData();\n \n         if (characterToken.isCData())\n             node = new DataNode(data);\n         else\n             node = new TextNode(data);\n-        currentElement().appendChild(node); // doesn't use insertNode, because we don't foster these; and will always have a stack.\n+        el.appendChild(node); // doesn't use insertNode, because we don't foster these; and will always have a stack.\n     }\n \n     private void insertNode(Node node) {", "timestamp": 1525635542, "metainfo": ""}