{"sha": "f4c700b8cf147638eb09aa76a7ef4f2de70f8ea9", "log": "Added TokeniserState tests (#859)  * Added TokeniserState tests", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/jsoup/parser/TokeniserStateTest.java\n+package org.jsoup.parser;\n+\n+import static org.junit.Assert.*;\n+\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Comment;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+import org.jsoup.nodes.TextNode;\n+import org.jsoup.select.Elements;\n+import org.junit.Test;\n+\n+public class TokeniserStateTest {\n+\n+    final char[] whiteSpace = { '\\t', '\\n', '\\r', '\\f', ' ' };\n+    final char[] quote = { '\\'', '\"' };\n+\n+    @Test\n+    public void testCharacterReferenceInRcdata() {\n+        String body = \"<textarea>You&I</textarea>\";\n+        Document doc = Jsoup.parse(body);\n+        Elements els = doc.select(\"textarea\");\n+        assertEquals(\"You&I\", els.text());\n+    }\n+\n+    @Test\n+    public void testBeforeTagName() {\n+        for (char c : whiteSpace) {\n+            String body = String.format(\"<div%c>test</div>\", c);\n+            Document doc = Jsoup.parse(body);\n+            Elements els = doc.select(\"div\");\n+            assertEquals(\"test\", els.text());\n+        }\n+    }\n+\n+    @Test\n+    public void testEndTagOpen() {\n+        String body;\n+        Document doc;\n+        Elements els;\n+\n+        body = \"<div>hello world</\";\n+        doc = Jsoup.parse(body);\n+        els = doc.select(\"div\");\n+        assertEquals(\"hello world</\", els.text());\n+\n+        body = \"<div>hello world</div>\";\n+        doc = Jsoup.parse(body);\n+        els = doc.select(\"div\");\n+        assertEquals(\"hello world\", els.text());\n+\n+        body = \"<div>fake</></div>\";\n+        doc = Jsoup.parse(body);\n+        els = doc.select(\"div\");\n+        assertEquals(\"fake\", els.text());\n+\n+        body = \"<div>fake</?</div>\";\n+        doc = Jsoup.parse(body);\n+        els = doc.select(\"div\");\n+        assertEquals(\"fake\", els.text());\n+    }\n+\n+    @Test\n+    public void testRcdataLessthanSign() {\n+        String body;\n+        Document doc;\n+        Elements els;\n+\n+        body = \"<textarea><fake></textarea>\";\n+        doc = Jsoup.parse(body);\n+        els = doc.select(\"textarea\");\n+        assertEquals(\"<fake>\", els.text());\n+\n+        body = \"<textarea><open\";\n+        doc = Jsoup.parse(body);\n+        els = doc.select(\"textarea\");\n+        assertEquals(\"\", els.text());\n+\n+        body = \"<textarea>hello world</?fake</textarea>\";\n+        doc = Jsoup.parse(body);\n+        els = doc.select(\"textarea\");\n+        assertEquals(\"hello world</?fake\", els.text());\n+    }\n+\n+    @Test\n+    public void testRCDATAEndTagName() {\n+        for (char c : whiteSpace) {\n+            String body = String.format(\"<textarea>data</textarea%c>\", c);\n+            Document doc = Jsoup.parse(body);\n+            Elements els = doc.select(\"textarea\");\n+            assertEquals(\"data\", els.text());\n+        }\n+    }\n+\n+    @Test\n+    public void testCommentEndCoverage() {\n+        String html = \"<html><head></head><body><img src=foo><!-- <table><tr><td></table> --! --- --><p>Hello</p></body></html>\";\n+        Document doc = Jsoup.parse(html);\n+\n+        Element body = doc.body();\n+        Comment comment = (Comment) body.childNode(1);\n+        assertEquals(\" <table><tr><td></table> --! --- \", comment.getData());\n+        Element p = body.child(1);\n+        TextNode text = (TextNode) p.childNode(0);\n+        assertEquals(\"Hello\", text.getWholeText());\n+    }\n+\n+    @Test\n+    public void testCommentEndBangCoverage() {\n+        String html = \"<html><head></head><body><img src=foo><!-- <table><tr><td></table> --!---!>--><p>Hello</p></body></html>\";\n+        Document doc = Jsoup.parse(html);\n+\n+        Element body = doc.body();\n+        Comment comment = (Comment) body.childNode(1);\n+        assertEquals(\" <table><tr><td></table> --!-\", comment.getData());\n+        Element p = body.child(1);\n+        TextNode text = (TextNode) p.childNode(0);\n+        assertEquals(\"Hello\", text.getWholeText());\n+    }\n+\n+    @Test\n+    public void testPublicIdentifiersWithWhitespace() {\n+        String expectedOutput = \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD HTML 4.0//EN\\\">\";\n+        for (char q : quote) {\n+            for (char ws : whiteSpace) {\n+                String[] htmls = { \n+                        String.format(\"<!DOCTYPE html%cPUBLIC %c-//W3C//DTD HTML 4.0//EN%c>\", ws, q, q),\n+                        String.format(\"<!DOCTYPE html %cPUBLIC %c-//W3C//DTD HTML 4.0//EN%c>\", ws, q, q),\n+                        String.format(\"<!DOCTYPE html PUBLIC%c%c-//W3C//DTD HTML 4.0//EN%c>\", ws, q, q),\n+                        String.format(\"<!DOCTYPE html PUBLIC %c%c-//W3C//DTD HTML 4.0//EN%c>\", ws, q, q),\n+                        String.format(\"<!DOCTYPE html PUBLIC %c-//W3C//DTD HTML 4.0//EN%c%c>\", q, q, ws),\n+                        String.format(\"<!DOCTYPE html PUBLIC%c-//W3C//DTD HTML 4.0//EN%c%c>\", q, q, ws)\n+                    };\n+                for (String html : htmls) {\n+                    Document doc = Jsoup.parse(html);\n+                    assertEquals(expectedOutput, doc.childNode(0).outerHtml());\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testSystemIdentifiersWithWhitespace() {\n+        String expectedOutput = \"<!DOCTYPE html SYSTEM \\\"http://www.w3.org/TR/REC-html40/strict.dtd\\\">\";\n+        for (char q : quote) {\n+            for (char ws : whiteSpace) {\n+                String[] htmls = {\n+                        String.format(\"<!DOCTYPE html%cSYSTEM %chttp://www.w3.org/TR/REC-html40/strict.dtd%c>\", ws, q, q),\n+                        String.format(\"<!DOCTYPE html %cSYSTEM %chttp://www.w3.org/TR/REC-html40/strict.dtd%c>\", ws, q, q),\n+                        String.format(\"<!DOCTYPE html SYSTEM%c%chttp://www.w3.org/TR/REC-html40/strict.dtd%c>\", ws, q, q),\n+                        String.format(\"<!DOCTYPE html SYSTEM %c%chttp://www.w3.org/TR/REC-html40/strict.dtd%c>\", ws, q, q),\n+                        String.format(\"<!DOCTYPE html SYSTEM %chttp://www.w3.org/TR/REC-html40/strict.dtd%c%c>\", q, q, ws),\n+                        String.format(\"<!DOCTYPE html SYSTEM%chttp://www.w3.org/TR/REC-html40/strict.dtd%c%c>\", q, q, ws)\n+                    };\n+                for (String html : htmls) {\n+                    Document doc = Jsoup.parse(html);\n+                    assertEquals(expectedOutput, doc.childNode(0).outerHtml());\n+                }\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testPublicAndSystemIdentifiersWithWhitespace() {\n+        String expectedOutput = \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD HTML 4.0//EN\\\"\"\n+                + \" \\\"http://www.w3.org/TR/REC-html40/strict.dtd\\\">\";\n+    \tfor (char q : quote) {\n+            for (char ws : whiteSpace) {\n+                String[] htmls = {\n+                        String.format(\"<!DOCTYPE html PUBLIC %c-//W3C//DTD HTML 4.0//EN%c\"\n+                                + \"%c%chttp://www.w3.org/TR/REC-html40/strict.dtd%c>\", q, q, ws, q, q),\n+                        String.format(\"<!DOCTYPE html PUBLIC %c-//W3C//DTD HTML 4.0//EN%c\"\n+                                + \"%chttp://www.w3.org/TR/REC-html40/strict.dtd%c>\", q, q, q, q)\n+                    };\n+                for (String html : htmls) {\n+                    Document doc = Jsoup.parse(html);\n+                    assertEquals(expectedOutput, doc.childNode(0).outerHtml());\n+                }\n+            }\n+        }\n+    }\n+}", "timestamp": 1511145096, "metainfo": ""}