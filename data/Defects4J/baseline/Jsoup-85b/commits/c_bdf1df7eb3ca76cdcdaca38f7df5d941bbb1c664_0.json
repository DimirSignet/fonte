{"sha": "bdf1df7eb3ca76cdcdaca38f7df5d941bbb1c664", "log": "Treat < in a start tag as a new tag, not an attribute name  Fixes #797", "commit": "\n--- a/src/main/java/org/jsoup/parser/CharacterReader.java\n+++ b/src/main/java/org/jsoup/parser/CharacterReader.java\n \n     String consumeTagName() {\n         // '\\t', '\\n', '\\r', '\\f', ' ', '/', '>', nullChar\n+        // NOTE: out of spec, added '<' to fix common author bugs\n         bufferUp();\n         final int start = bufPos;\n         final int remaining = bufLength;\n \n         while (bufPos < remaining) {\n             final char c = val[bufPos];\n-            if (c == '\\t'|| c ==  '\\n'|| c ==  '\\r'|| c ==  '\\f'|| c ==  ' '|| c ==  '/'|| c ==  '>'|| c ==  TokeniserState.nullChar)\n+            if (c == '\\t'|| c ==  '\\n'|| c ==  '\\r'|| c ==  '\\f'|| c ==  ' '|| c ==  '/'|| c ==  '>'|| c == '<' || c ==  TokeniserState.nullChar)\n                 break;\n             bufPos++;\n         }\n--- a/src/main/java/org/jsoup/parser/TokeniserState.java\n+++ b/src/main/java/org/jsoup/parser/TokeniserState.java\n                 case '/':\n                     t.transition(SelfClosingStartTag);\n                     break;\n+                case '<': // NOTE: out of spec, but clear author intent\n+                    t.error(this);\n+                    r.unconsume();\n+                    // intended fall through to next >\n                 case '>':\n                     t.emitTagPending();\n                     t.transition(Data);\n                 case '/':\n                     t.transition(SelfClosingStartTag);\n                     break;\n+                case '<': // NOTE: out of spec, but clear (spec has this as a part of the attribute name)\n+                    t.error(this);\n+                    r.unconsume();\n+                    // intended fall through as if >\n                 case '>':\n                     t.emitTagPending();\n                     t.transition(Data);\n                     break;\n                 case '\"':\n                 case '\\'':\n-                case '<':\n                 case '=':\n                     t.error(this);\n                     t.tagPending.newAttribute();\n--- a/src/test/java/org/jsoup/parser/HtmlParserTest.java\n+++ b/src/test/java/org/jsoup/parser/HtmlParserTest.java\n \n     @Test public void parsesQuiteRoughAttributes() {\n         String html = \"<p =a>One<a <p>Something</p>Else\";\n-        // this gets a <p> with attr '=a' and an <a tag with an attribue named '<p'; and then auto-recreated\n-        Document doc = Jsoup.parse(html);\n-        assertEquals(\"<p =a>One<a <p>Something</a></p>\\n\" +\n-            \"<a <p>Else</a>\", doc.body().html());\n+        // this (used to; now gets cleaner) gets a <p> with attr '=a' and an <a tag with an attribue named '<p'; and then auto-recreated\n+        Document doc = Jsoup.parse(html);\n+\n+        // NOTE: per spec this should be the test case. but impacts too many ppl\n+        // assertEquals(\"<p =a>One<a <p>Something</a></p>\\n<a <p>Else</a>\", doc.body().html());\n+\n+        assertEquals(\"<p =a>One<a></a></p><p><a>Something</a></p><a>Else</a>\", TextUtil.stripNewlines(doc.body().html()));\n \n         doc = Jsoup.parse(\"<p .....>\");\n         assertEquals(\"<p .....></p>\", doc.body().html());\n--- a/src/test/java/org/jsoup/parser/TokeniserStateTest.java\n+++ b/src/test/java/org/jsoup/parser/TokeniserStateTest.java\n package org.jsoup.parser;\n \n-import static org.junit.Assert.*;\n-\n import org.jsoup.Jsoup;\n+import org.jsoup.TextUtil;\n import org.jsoup.nodes.Comment;\n import org.jsoup.nodes.Document;\n import org.jsoup.nodes.Element;\n import org.junit.Test;\n \n import java.util.Arrays;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n \n public class TokeniserStateTest {\n \n             }\n         }\n     }\n+\n+    @Test public void handlesLessInTagThanAsNewTag() {\n+        // out of spec, but clear author intent\n+        String html = \"<p\\n<p<div id=one <span>Two\";\n+        Document doc = Jsoup.parse(html);\n+        assertEquals(\"<p></p><p></p><div id=\\\"one\\\"><span>Two</span></div>\", TextUtil.stripNewlines(doc.body().html()));\n+    }\n }", "timestamp": 1525040723, "metainfo": ""}