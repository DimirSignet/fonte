{"sha": "1028b37a1dfbc5dda7b18cbe692ab168c54fb505", "log": "Leaf nodes should return an empty list on .childNodes(), not except  Fixes #1032", "commit": "\n--- a/src/main/java/org/jsoup/nodes/LeafNode.java\n+++ b/src/main/java/org/jsoup/nodes/LeafNode.java\n \n import org.jsoup.helper.Validate;\n \n+import java.util.Collections;\n import java.util.List;\n \n abstract class LeafNode extends Node {\n+    private static final List<Node> EmptyNodes = Collections.emptyList();\n+\n     Object value; // either a string value, or an attribute map (in the rare case multiple attributes are set)\n \n     protected final boolean hasAttributes() {\n \n     @Override\n     protected List<Node> ensureChildNodes() {\n-        throw new UnsupportedOperationException(\"Leaf Nodes do not have child nodes.\");\n+        return EmptyNodes;\n     }\n }\n--- a/src/test/java/org/jsoup/nodes/TextNodeTest.java\n+++ b/src/test/java/org/jsoup/nodes/TextNodeTest.java\n import org.jsoup.Jsoup;\n import org.jsoup.TextUtil;\n import org.junit.Test;\n+\n+import java.util.List;\n \n import static org.junit.Assert.*;\n \n         TextNode t = doc.body().textNodes().get(0);\n         assertEquals(new String(Character.toChars(135361)), t.outerHtml().trim());\n     }\n+\n+    @Test public void testLeadNodesHaveNoChildren() {\n+        Document doc = Jsoup.parse(\"<div>Hello there</div>\");\n+        Element div = doc.select(\"div\").first();\n+        TextNode tn = (TextNode) div.childNode(0);\n+        List<Node> nodes = tn.childNodes();\n+        assertEquals(0, nodes.size());\n+    }\n }", "timestamp": 1523738585, "metainfo": ""}