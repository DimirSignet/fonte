{"sha": "1791ef17ad6e0624a7b057b89439f7a33b3bbb82", "log": "Adding support for nested quotes in attribute selection", "commit": "\n--- a/src/main/java/org/jsoup/parser/TokenQueue.java\n+++ b/src/main/java/org/jsoup/parser/TokenQueue.java\n         int end = -1;\n         int depth = 0;\n         char last = 0;\n-        boolean inQuote = false;\n+        boolean inSingleQuote = false;\n+        boolean inDoubleQuote = false;\n \n         do {\n             if (isEmpty()) break;\n             Character c = consume();\n             if (last == 0 || last != ESC) {\n-                if ((c.equals('\\'') || c.equals('\"')) && c != open)\n-                    inQuote = !inQuote;\n-                if (inQuote)\n+                if (c.equals('\\'') && c != open && !inDoubleQuote)\n+                    inSingleQuote = !inSingleQuote;\n+                if (c.equals('\"') && c != open && !inSingleQuote)\n+                    inDoubleQuote = !inDoubleQuote;\n+                if (inSingleQuote || inDoubleQuote)\n                     continue;\n                 if (c.equals(open)) {\n                     depth++;\n--- a/src/test/java/org/jsoup/parser/TokenQueueTest.java\n+++ b/src/test/java/org/jsoup/parser/TokenQueueTest.java\n package org.jsoup.parser;\n \n+import junitparams.JUnitParamsRunner;\n+import junitparams.Parameters;\n+import org.jsoup.Jsoup;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n import static org.junit.Assert.*;\n \n /**\n  * Token queue tests.\n  */\n+@RunWith(JUnitParamsRunner.class)\n public class TokenQueueTest {\n     @Test public void chompBalanced() {\n         TokenQueue tq = new TokenQueue(\":contains(one (two) three) four\");\n         assertEquals(\"one (two) three\", guts);\n         assertEquals(\" four\", remainder);\n     }\n-    \n+\n     @Test public void chompEscapedBalanced() {\n         TokenQueue tq = new TokenQueue(\":contains(one (two) \\\\( \\\\) \\\\) three) four\");\n         String pre = tq.consumeTo(\"(\");\n         String match = tq.chompBalanced('(', ')');\n         assertEquals(\"something(or another)\", match);\n     }\n-    \n+\n     @Test public void unescape() {\n         assertEquals(\"one ( ) \\\\\", TokenQueue.unescape(\"one \\\\( \\\\) \\\\\\\\\"));\n     }\n-    \n+\n     @Test public void chompToIgnoreCase() {\n         String t = \"<textarea>one < two </TEXTarea>\";\n         TokenQueue tq = new TokenQueue(t);\n         String data = tq.chompToIgnoreCase(\"</textarea\");\n         assertEquals(\"<textarea>one < two \", data);\n-        \n+\n         tq = new TokenQueue(\"<textarea> one two < three </oops>\");\n         data = tq.chompToIgnoreCase(\"</textarea\");\n         assertEquals(\"<textarea> one two < three </oops>\", data);\n         tq.addFirst(\"Three\");\n         assertEquals(\"Three Two\", tq.remainder());\n     }\n-    \n-    \n-    @Test \n-    public void consumeToIgnoreSecondCallTest(){\n-\t\tString t = \"<textarea>one < two </TEXTarea> third </TEXTarea>\";\n-\t\tTokenQueue tq = new TokenQueue(t);\n-\t\tString data = tq.chompToIgnoreCase(\"</textarea>\");\n-\t\tassertEquals(\"<textarea>one < two \", data);\n-\t\t\n-\t\tdata = tq.chompToIgnoreCase(\"</textarea>\");\n-\t\tassertEquals(\" third \", data);\n+\n+\n+    @Test public void consumeToIgnoreSecondCallTest() {\n+        String t = \"<textarea>one < two </TEXTarea> third </TEXTarea>\";\n+        TokenQueue tq = new TokenQueue(t);\n+        String data = tq.chompToIgnoreCase(\"</textarea>\");\n+        assertEquals(\"<textarea>one < two \", data);\n+\n+        data = tq.chompToIgnoreCase(\"</textarea>\");\n+        assertEquals(\" third \", data);\n     }\n-    \n+\n+    @Test @Parameters(method = \"singleQuotesInsideDouble, doubleQuotesInsideSingle\")\n+    public void testNestedQuotes(String html, String selector) {\n+        assertEquals(\"#identifier\", Jsoup.parse(html).select(selector).first().cssSelector());\n+    }\n+\n+    public Object[] singleQuotesInsideDouble() {\n+        return new Object[] {new String[] {\n+            \"<html><body><a id=\\\"identifier\\\" onclick=\\\"func('arg')\\\" /></body></html>\",\n+            \"a[onclick*=\\\"('arg\\\"]\"},\n+            new String[] {\"<html><body><a id=\\\"identifier\\\" onclick=func('arg') /></body></html>\",\n+                \"a[onclick*=\\\"('arg\\\"]\"}};\n+    }\n+\n+    public Object[] doubleQuotesInsideSingle() {\n+        return new Object[] {new String[] {\n+            \"<html><body><a id=\\\"identifier\\\" onclick='func(\\\"arg\\\")' /></body></html>\",\n+            \"a[onclick*='(\\\"arg']\"},\n+            new String[] {\"<html><body><a id=\\\"identifier\\\" onclick=func(\\\"arg\\\") /></body></html>\",\n+                \"a[onclick*='(\\\"arg']\"}};\n+    }\n }", "timestamp": 1512054799, "metainfo": ""}