{"sha": "59f10777132745ec84eefad77dcabd2109947e97", "log": "Element#previousElementSiblings() and Element#nextElementSiblings now return empty list", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n     /**\n      * Get all the siblings after this element.\n      *\n-     * @return  all the siblings after this element, or null if there is no siblings after this\n+     * @return  all the siblings after this element, or empty list if there is no siblings after this\n      */\n     public List<Element> nextElementSiblings() {\n         if (parentNode == null) {\n-            return null;\n+            return Collections.emptyList();\n         }\n \n         List<Element> siblings = parent().childElementsList();\n         if (siblings.size() > index + 1) {\n             return siblings.subList(index + 1, siblings.size());\n         }\n-        return null;\n+        return Collections.emptyList();\n     }\n \n     /**\n     /**\n      * Get all the element siblings before this element.\n      *\n-     * @return all the previous element siblings, or null if no previous siblings\n+     * @return all the previous element siblings, or empty list if no previous siblings\n      */\n     public List<Element> previousElementSiblings() {\n         if (parentNode == null) {\n-            return null;\n+            return Collections.emptyList();\n         }\n \n         List<Element> siblings = parent().childElementsList();\n         if (index > 0 && index < siblings.size()) {\n             return siblings.subList(0, index);\n         }\n-        return null;\n+        return Collections.emptyList();\n     }\n \n     /**\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n import java.util.Map;\n import java.util.Set;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.Assert.*;\n \n /**\n  * Tests for Element (DOM stuff mostly).\n \n     @Test\n     public void testNextElementSiblings() {\n-        Document doc = Jsoup.parse(\"<li id='a'>a</li>\" +\n+        Document doc = Jsoup.parse(\"<ul id='ul'>\" +\n+            \"<li id='a'>a</li>\" +\n             \"<li id='b'>b</li>\" +\n-            \"<li id='c'>c</li>\");\n+            \"<li id='c'>c</li>\" +\n+            \"</ul>\" +\n+            \"<div id='div'>\" +\n+            \"<li id='d'>d</li>\" +\n+            \"</div>\");\n+\n         Element element = doc.getElementById(\"a\");\n         List<Element> elementSiblings = element.nextElementSiblings();\n         assertNotNull(elementSiblings);\n         assertEquals(2, elementSiblings.size());\n-\n-        Element element1 = doc.getElementById(\"c\");\n+        assertEquals(\"b\", elementSiblings.get(0).id());\n+        assertEquals(\"c\", elementSiblings.get(1).id());\n+\n+        Element element1 = doc.getElementById(\"b\");\n         List<Element> elementSiblings1 = element1.nextElementSiblings();\n-        assertNull(elementSiblings1);\n+        assertNotNull(elementSiblings1);\n+        assertEquals(1, elementSiblings1.size());\n+        assertEquals(\"c\", elementSiblings1.get(0).id());\n+\n+        Element element2 = doc.getElementById(\"c\");\n+        List<Element> elementSiblings2 = element2.nextElementSiblings();\n+        assertEquals(0, elementSiblings2.size());\n+\n+        Element ul = doc.getElementById(\"ul\");\n+        List<Element> elementSiblings3 = ul.nextElementSiblings();\n+        assertNotNull(elementSiblings3);\n+        assertEquals(1, elementSiblings3.size());\n+        assertEquals(\"div\", elementSiblings3.get(0).id());\n+\n+        Element div = doc.getElementById(\"div\");\n+        List<Element> elementSiblings4 = div.nextElementSiblings();\n+        try {\n+            Element elementSibling = elementSiblings4.get(0);\n+            fail(\"This element should has no next siblings\");\n+        } catch (IndexOutOfBoundsException e) {\n+        }\n     }\n \n     @Test\n     public void testPreviousElementSiblings() {\n-        Document doc = Jsoup.parse(\"<li id='a'>a</li>\" +\n+        Document doc = Jsoup.parse(\"<ul id='ul'>\" +\n+            \"<li id='a'>a</li>\" +\n             \"<li id='b'>b</li>\" +\n-            \"<li id='c'>c</li>\");\n+            \"<li id='c'>c</li>\" +\n+            \"</ul>\" +\n+            \"<div id='div'>\" +\n+            \"<li id='d'>d</li>\" +\n+            \"</div>\");\n+\n         Element element = doc.getElementById(\"b\");\n         List<Element> elementSiblings = element.previousElementSiblings();\n         assertNotNull(elementSiblings);\n         assertEquals(1, elementSiblings.size());\n+        assertEquals(\"a\", elementSiblings.get(0).id());\n \n         Element element1 = doc.getElementById(\"a\");\n         List<Element> elementSiblings1 = element1.previousElementSiblings();\n-        assertNull(elementSiblings1);\n+        assertEquals(0, elementSiblings1.size());\n+\n+        Element element2 = doc.getElementById(\"c\");\n+        List<Element> elementSiblings2 = element2.previousElementSiblings();\n+        assertNotNull(elementSiblings2);\n+        assertEquals(2, elementSiblings2.size());\n+        assertEquals(\"a\", elementSiblings2.get(0).id());\n+        assertEquals(\"b\", elementSiblings2.get(1).id());\n+\n+        Element ul = doc.getElementById(\"ul\");\n+        List<Element> elementSiblings3 = ul.previousElementSiblings();\n+        try {\n+            Element element3 = elementSiblings3.get(0);\n+            fail(\"This element should has no previous siblings\");\n+        } catch (IndexOutOfBoundsException e) {\n+        }\n     }\n }", "timestamp": 1525435834, "metainfo": ""}