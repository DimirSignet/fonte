{"sha": "39e90ee38c3ce7aa254bb89740282c12eb149162", "log": "Indentation fix", "commit": "\n--- a/src/test/java/org/jsoup/parser/HtmlParserTest.java\n+++ b/src/test/java/org/jsoup/parser/HtmlParserTest.java\n import static org.junit.Assert.assertTrue;\n \n /**\n- Tests for the Parser\n-\n- @author Jonathan Hedley, jonathan@hedley.net */\n+ * Tests for the Parser\n+ *\n+ * @author Jonathan Hedley, jonathan@hedley.net\n+ */\n public class HtmlParserTest {\n \n     @Test public void parsesSimpleDocument() {\n         // this gets a <p> with attr '=a' and an <a tag with an attribue named '<p'; and then auto-recreated\n         Document doc = Jsoup.parse(html);\n         assertEquals(\"<p =a>One<a <p>Something</a></p>\\n\" +\n-                \"<a <p>Else</a>\", doc.body().html());\n+            \"<a <p>Else</a>\", doc.body().html());\n \n         doc = Jsoup.parse(\"<p .....>\");\n         assertEquals(\"<p .....></p>\", doc.body().html());\n         String html = \"foo <b>bar</b> baz\";\n         Document doc = Jsoup.parse(html);\n         assertEquals(\"foo bar baz\", doc.text());\n-\n     }\n \n     @Test public void handlesEscapedData() {\n     @Test public void noTableDirectInTable() {\n         Document doc = Jsoup.parse(\"<table> <td>One <td><table><td>Two</table> <table><td>Three\");\n         assertEquals(\"<table> <tbody><tr><td>One </td><td><table><tbody><tr><td>Two</td></tr></tbody></table> <table><tbody><tr><td>Three</td></tr></tbody></table></td></tr></tbody></table>\",\n-                TextUtil.stripNewlines(doc.body().html()));\n+            TextUtil.stripNewlines(doc.body().html()));\n     }\n \n     @Test public void ignoresDupeEndTrTag() {\n         Document doc = Jsoup.parse(\"<table><tr><td>One</td><td><table><tr><td>Two</td></tr></tr></table></td><td>Three</td></tr></table>\"); // two </tr></tr>, must ignore or will close table\n         assertEquals(\"<table><tbody><tr><td>One</td><td><table><tbody><tr><td>Two</td></tr></tbody></table></td><td>Three</td></tr></tbody></table>\",\n-                TextUtil.stripNewlines(doc.body().html()));\n+            TextUtil.stripNewlines(doc.body().html()));\n     }\n \n     @Test public void handlesBaseTags() {\n         String h = \"<html><head><script></script><noscript></noscript></head><frameset><frame src=foo></frame><frame src=foo></frameset></html>\";\n         Document doc = Jsoup.parse(h);\n         assertEquals(\"<html><head><script></script><noscript></noscript></head><frameset><frame src=\\\"foo\\\"><frame src=\\\"foo\\\"></frameset></html>\",\n-                TextUtil.stripNewlines(doc.html()));\n+            TextUtil.stripNewlines(doc.html()));\n         // no body auto vivification\n     }\n-    \n+\n     @Test public void ignoresContentAfterFrameset() {\n         String h = \"<html><head><title>One</title></head><frameset><frame /><frame /></frameset><table></table></html>\";\n         Document doc = Jsoup.parse(h);\n         String h = \"<!doctype html>One<html>Two<head>Three<link></head>Four<body>Five </body>Six </html>Seven \";\n         Document doc = Jsoup.parse(h);\n         assertEquals(\"<!doctype html><html><head></head><body>OneTwoThree<link>FourFive Six Seven </body></html>\",\n-                TextUtil.stripNewlines(doc.html()));\n+            TextUtil.stripNewlines(doc.html()));\n     }\n \n     @Test public void normalisesEmptyDocument() {\n     @Test public void normalisesHeadlessBody() {\n         Document doc = Jsoup.parse(\"<html><body><span class=\\\"foo\\\">bar</span>\");\n         assertEquals(\"<html><head></head><body><span class=\\\"foo\\\">bar</span></body></html>\",\n-                TextUtil.stripNewlines(doc.html()));\n+            TextUtil.stripNewlines(doc.html()));\n     }\n \n     @Test public void normalisedBodyAfterContent() {\n         Document doc = Jsoup.parse(\"<font face=Arial><body class=name><div>One</div></body></font>\");\n         assertEquals(\"<html><head></head><body class=\\\"name\\\"><font face=\\\"Arial\\\"><div>One</div></font></body></html>\",\n-                TextUtil.stripNewlines(doc.html()));\n+            TextUtil.stripNewlines(doc.html()));\n     }\n \n     @Test public void findsCharsetInMalformedMeta() {\n     @Test public void handlesUnclosedFormattingElements() {\n         // whatwg: formatting elements get collected and applied, but excess elements are thrown away\n         String h = \"<!DOCTYPE html>\\n\" +\n-                \"<p><b class=x><b class=x><b><b class=x><b class=x><b>X\\n\" +\n-                \"<p>X\\n\" +\n-                \"<p><b><b class=x><b>X\\n\" +\n-                \"<p></b></b></b></b></b></b>X\";\n+            \"<p><b class=x><b class=x><b><b class=x><b class=x><b>X\\n\" +\n+            \"<p>X\\n\" +\n+            \"<p><b><b class=x><b>X\\n\" +\n+            \"<p></b></b></b></b></b></b>X\";\n         Document doc = Jsoup.parse(h);\n         doc.outputSettings().indentAmount(0);\n         String want = \"<!doctype html>\\n\" +\n-                \"<html>\\n\" +\n-                \"<head></head>\\n\" +\n-                \"<body>\\n\" +\n-                \"<p><b class=\\\"x\\\"><b class=\\\"x\\\"><b><b class=\\\"x\\\"><b class=\\\"x\\\"><b>X </b></b></b></b></b></b></p>\\n\" +\n-                \"<p><b class=\\\"x\\\"><b><b class=\\\"x\\\"><b class=\\\"x\\\"><b>X </b></b></b></b></b></p>\\n\" +\n-                \"<p><b class=\\\"x\\\"><b><b class=\\\"x\\\"><b class=\\\"x\\\"><b><b><b class=\\\"x\\\"><b>X </b></b></b></b></b></b></b></b></p>\\n\" +\n-                \"<p>X</p>\\n\" +\n-                \"</body>\\n\" +\n-                \"</html>\";\n+            \"<html>\\n\" +\n+            \"<head></head>\\n\" +\n+            \"<body>\\n\" +\n+            \"<p><b class=\\\"x\\\"><b class=\\\"x\\\"><b><b class=\\\"x\\\"><b class=\\\"x\\\"><b>X </b></b></b></b></b></b></p>\\n\" +\n+            \"<p><b class=\\\"x\\\"><b><b class=\\\"x\\\"><b class=\\\"x\\\"><b>X </b></b></b></b></b></p>\\n\" +\n+            \"<p><b class=\\\"x\\\"><b><b class=\\\"x\\\"><b class=\\\"x\\\"><b><b><b class=\\\"x\\\"><b>X </b></b></b></b></b></b></b></b></p>\\n\" +\n+            \"<p>X</p>\\n\" +\n+            \"</body>\\n\" +\n+            \"</html>\";\n         assertEquals(want, doc.html());\n     }\n \n         String h = \"<p><b>One</p> <table><tr><td><p><i>Three<p>Four</i></td></tr></table> <p>Five</p>\";\n         Document doc = Jsoup.parse(h);\n         String want = \"<p><b>One</b></p>\\n\" +\n-                \"<b> \\n\" +\n-                \" <table>\\n\" +\n-                \"  <tbody>\\n\" +\n-                \"   <tr>\\n\" +\n-                \"    <td><p><i>Three</i></p><p><i>Four</i></p></td>\\n\" +\n-                \"   </tr>\\n\" +\n-                \"  </tbody>\\n\" +\n-                \" </table> <p>Five</p></b>\";\n+            \"<b> \\n\" +\n+            \" <table>\\n\" +\n+            \"  <tbody>\\n\" +\n+            \"   <tr>\\n\" +\n+            \"    <td><p><i>Three</i></p><p><i>Four</i></p></td>\\n\" +\n+            \"   </tr>\\n\" +\n+            \"  </tbody>\\n\" +\n+            \" </table> <p>Five</p></b>\";\n         assertEquals(want, doc.body().html());\n     }\n \n \n     @Test public void handlesWhitespaceInoDocType() {\n         String html = \"<!DOCTYPE html\\r\\n\" +\n-                \"      PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\"\\r\\n\" +\n-                \"      \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\";\n+            \"      PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\"\\r\\n\" +\n+            \"      \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\";\n         Document doc = Jsoup.parse(html);\n         assertEquals(\"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\", doc.childNode(0).outerHtml());\n     }\n-    \n+\n     @Test public void tracksErrorsWhenRequested() {\n         String html = \"<p>One</p href='no'><!DOCTYPE html>&arrgh;<font /><br /><foo\";\n         Parser parser = Parser.htmlParser().setTrackErrors(500);\n         Document doc = Jsoup.parse(html, \"http://example.com\", parser);\n-        \n+\n         List<ParseError> errors = parser.getErrors();\n         assertEquals(5, errors.size());\n         assertEquals(\"20: Attributes incorrectly present on end tag\", errors.get(0).toString());\n         List<ParseError> errors = parser.getErrors();\n         assertEquals(0, errors.size());\n     }\n-    \n+\n     @Test public void handlesCommentsInTable() {\n         String html = \"<table><tr><td>text</td><!-- Comment --></tr></table>\";\n         Document node = Jsoup.parseBodyFragment(html);\n \n     @Test public void handlesQuotesInCommentsInScripts() {\n         String html = \"<script>\\n\" +\n-                \"  <!--\\n\" +\n-                \"    document.write('</scr' + 'ipt>');\\n\" +\n-                \"  // -->\\n\" +\n-                \"</script>\";\n+            \"  <!--\\n\" +\n+            \"    document.write('</scr' + 'ipt>');\\n\" +\n+            \"  // -->\\n\" +\n+            \"</script>\";\n         Document node = Jsoup.parseBodyFragment(html);\n         assertEquals(\"<script>\\n\" +\n-                \"  <!--\\n\" +\n-                \"    document.write('</scr' + 'ipt>');\\n\" +\n-                \"  // -->\\n\" +\n-                \"</script>\", node.body().html());\n+            \"  <!--\\n\" +\n+            \"    document.write('</scr' + 'ipt>');\\n\" +\n+            \"  // -->\\n\" +\n+            \"</script>\", node.body().html());\n     }\n \n     @Test public void handleNullContextInParseFragment() {\n \n     @Test public void handlesInputInTable() {\n         String h = \"<body>\\n\" +\n-                \"<input type=\\\"hidden\\\" name=\\\"a\\\" value=\\\"\\\">\\n\" +\n-                \"<table>\\n\" +\n-                \"<input type=\\\"hidden\\\" name=\\\"b\\\" value=\\\"\\\" />\\n\" +\n-                \"</table>\\n\" +\n-                \"</body>\";\n+            \"<input type=\\\"hidden\\\" name=\\\"a\\\" value=\\\"\\\">\\n\" +\n+            \"<table>\\n\" +\n+            \"<input type=\\\"hidden\\\" name=\\\"b\\\" value=\\\"\\\" />\\n\" +\n+            \"</table>\\n\" +\n+            \"</body>\";\n         Document doc = Jsoup.parse(h);\n         assertEquals(1, doc.select(\"table input\").size());\n         assertEquals(2, doc.select(\"input\").size());\n         // would previously throw invalid name exception on empty doctype\n         Document doc = Jsoup.parse(\"<!DOCTYPE>\");\n         assertEquals(\n-                \"<!doctype> <html> <head></head> <body></body> </html>\",\n-                StringUtil.normaliseWhitespace(doc.outerHtml()));\n+            \"<!doctype> <html> <head></head> <body></body> </html>\",\n+            StringUtil.normaliseWhitespace(doc.outerHtml()));\n \n         doc = Jsoup.parse(\"<!DOCTYPE><html><p>Foo</p></html>\");\n         assertEquals(\n-                \"<!doctype> <html> <head></head> <body> <p>Foo</p> </body> </html>\",\n-                StringUtil.normaliseWhitespace(doc.outerHtml()));\n+            \"<!doctype> <html> <head></head> <body> <p>Foo</p> </body> </html>\",\n+            StringUtil.normaliseWhitespace(doc.outerHtml()));\n \n         doc = Jsoup.parse(\"<!DOCTYPE \\u0000>\");\n         assertEquals(\n-                \"<!doctype \ufffd> <html> <head></head> <body></body> </html>\",\n-                StringUtil.normaliseWhitespace(doc.outerHtml()));\n-    }\n-    \n+            \"<!doctype \ufffd> <html> <head></head> <body></body> </html>\",\n+            StringUtil.normaliseWhitespace(doc.outerHtml()));\n+    }\n+\n     @Test public void handlesManyChildren() {\n         // Arrange\n         StringBuilder longBody = new StringBuilder(500000);\n         for (int i = 0; i < 25000; i++) {\n             longBody.append(i).append(\"<br>\");\n         }\n-        \n+\n         // Act\n         long start = System.currentTimeMillis();\n         Document doc = Parser.parseBodyFragment(longBody.toString(), \"\");\n-        \n+\n         // Assert\n         assertEquals(50000, doc.body().childNodeSize());\n         assertTrue(System.currentTimeMillis() - start < 1000);\n         Document doc = Jsoup.parse(\"<body><isindex action='/submit'></body>\");\n         String html = doc.outerHtml();\n         assertEquals(\"<form action=\\\"/submit\\\"> <hr> <label>This is a searchable index. Enter search keywords: <input name=\\\"isindex\\\"></label> <hr> </form>\",\n-                StringUtil.normaliseWhitespace(doc.body().html()));\n+            StringUtil.normaliseWhitespace(doc.body().html()));\n     }\n \n     @Test public void testReinsertionModeForThCelss() {\n         assertEquals(\"<p>test</p> <div></div> <div> Two </div>\", StringUtil.normaliseWhitespace(clean));\n     }\n \n-  @Test public void testTemplateInsideTable() throws IOException {\n+    @Test public void testTemplateInsideTable() throws IOException {\n         File in = ParseTest.getFile(\"/htmltests/table-polymer-template.html\");\n         Document doc = Jsoup.parse(in, \"UTF-8\");\n         doc.outputSettings().prettyPrint(true);\n         for (Element template : templates) {\n             assertTrue(template.childNodes().size() > 1);\n         }\n-  }\n-\n-  @Test public void testHandlesDeepSpans() {\n+    }\n+\n+    @Test public void testHandlesDeepSpans() {\n         StringBuilder sb = new StringBuilder();\n         for (int i = 0; i < 200; i++) {\n             sb.append(\"<span>\");\n         Document doc = Jsoup.parse(sb.toString());\n         assertEquals(200, doc.select(\"span\").size());\n         assertEquals(1, doc.select(\"p\").size());\n-  }\n-\n-  @Test public void commentAtEnd() throws Exception {\n-      Document doc = Jsoup.parse(\"<!\");\n-      assertTrue(doc.childNode(0) instanceof Comment);\n-  }\n-\n-  @Test public void preSkipsFirstNewline() {\n+    }\n+\n+    @Test public void commentAtEnd() throws Exception {\n+        Document doc = Jsoup.parse(\"<!\");\n+        assertTrue(doc.childNode(0) instanceof Comment);\n+    }\n+\n+    @Test public void preSkipsFirstNewline() {\n         Document doc = Jsoup.parse(\"<pre>\\n\\nOne\\nTwo\\n</pre>\");\n         Element pre = doc.selectFirst(\"pre\");\n         assertEquals(\"One\\nTwo\", pre.text());\n         assertEquals(\"\\nOne\\nTwo\\n\", pre.wholeText());\n-  }\n-\n-  @Test public void handlesXmlDeclAndCommentsBeforeDoctype() throws IOException {\n-      File in = ParseTest.getFile(\"/htmltests/comments.html\");\n-      Document doc = Jsoup.parse(in, \"UTF-8\");\n-\n-      assertEquals(\"<!--?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?--> <!-- so --><!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\"> <!-- what --> <html xml:lang=\\\"en\\\" lang=\\\"en\\\" xmlns=\\\"http://www.w3.org/1999/xhtml\\\"> <!-- now --> <head> <!-- then --> <meta http-equiv=\\\"Content-type\\\" content=\\\"text/html; charset=utf-8\\\"> <title>A Certain Kind of Test</title> </head> <body> <h1>Hello</h1>h1&gt; (There is a UTF8 hidden BOM at the top of this file.) </body> </html>\",\n-          StringUtil.normaliseWhitespace(doc.html()));\n-\n-      assertEquals(\"A Certain Kind of Test\", doc.head().select(\"title\").text());\n-  }\n+    }\n+\n+    @Test public void handlesXmlDeclAndCommentsBeforeDoctype() throws IOException {\n+        File in = ParseTest.getFile(\"/htmltests/comments.html\");\n+        Document doc = Jsoup.parse(in, \"UTF-8\");\n+\n+        assertEquals(\"<!--?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?--> <!-- so --><!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\"> <!-- what --> <html xml:lang=\\\"en\\\" lang=\\\"en\\\" xmlns=\\\"http://www.w3.org/1999/xhtml\\\"> <!-- now --> <head> <!-- then --> <meta http-equiv=\\\"Content-type\\\" content=\\\"text/html; charset=utf-8\\\"> <title>A Certain Kind of Test</title> </head> <body> <h1>Hello</h1>h1&gt; (There is a UTF8 hidden BOM at the top of this file.) </body> </html>\",\n+            StringUtil.normaliseWhitespace(doc.html()));\n+\n+        assertEquals(\"A Certain Kind of Test\", doc.head().select(\"title\").text());\n+    }\n \n     @Test public void fallbackToUtfIfCantEncode() throws IOException {\n         // that charset can't be encoded, so make sure we flip to utf", "timestamp": 1525039579, "metainfo": ""}