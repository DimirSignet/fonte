{"sha": "c3f8caa7c16c08b803b0f34bfffdf9777c7e382c", "log": "Normalize invisibles in text()  Fixes #978", "commit": "\n--- a/src/main/java/org/jsoup/helper/StringUtil.java\n+++ b/src/main/java/org/jsoup/helper/StringUtil.java\n     public static boolean isActuallyWhitespace(int c){\n         return c == ' ' || c == '\\t' || c == '\\n' || c == '\\f' || c == '\\r' || c == 160;\n         // 160 is &nbsp; (non-breaking space). Not in the spec but expected.\n+    }\n+\n+    public static boolean isInvisibleChar(int c) {\n+        return Character.getType(c) == 16 && (c == 8203 || c == 8204 || c == 8205 || c == 173);\n+        // zero width sp, zw non join, zw join, soft hyphen\n     }\n \n     /**\n                 accum.append(' ');\n                 lastWasWhite = true;\n             }\n-            else {\n+            else if (!isInvisibleChar(c)) {\n                 accum.appendCodePoint(c);\n                 lastWasWhite = false;\n                 reachedNonWhite = true;\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n         assertEquals(\"p\", matched.nodeName());\n         assertTrue(matched.is(\":containsOwn(get what you want)\"));\n     }\n+\n+    @Test public void testNormalizesInvisiblesInText() {\n+        // return Character.getType(c) == 16 && (c == 8203 || c == 8204 || c == 8205 || c == 173);\n+        String escaped = \"This&shy;is&#x200b;one&#x200c;long&#x200d;word\";\n+        String decoded = \"This\\u00ADis\\u200Bone\\u200Clong\\u200Dword\"; // browser would not display those soft hyphens / other chars, so we don't want them in the text\n+\n+        Document doc = Jsoup.parse(\"<p>\" + escaped);\n+        Element p = doc.select(\"p\").first();\n+        doc.outputSettings().charset(\"ascii\"); // so that the outer html is easier to see with escaped invisibles\n+        assertEquals(\"Thisisonelongword\", p.text()); // text is normalized\n+        assertEquals(\"<p>\" + escaped + \"</p>\", p.outerHtml()); // html / whole text keeps &shy etc;\n+        assertEquals(decoded, p.textNodes().get(0).getWholeText());\n+\n+        Element matched = doc.select(\"p:contains(Thisisonelongword)\").first(); // really just oneloneword, no invisibles\n+        assertEquals(\"p\", matched.nodeName());\n+        assertTrue(matched.is(\":containsOwn(Thisisonelongword)\"));\n+\n+    }\n \t\n \t@Test\n \tpublic void testRemoveBeforeIndex() {", "timestamp": 1511041081, "metainfo": ""}