{"sha": "87b54a51777248440947c91ec43652b771c42dc6", "log": "Merge branch 'master' into pr/982", "commit": "\n--- a/src/test/java/org/jsoup/parser/HtmlParserTest.java\n+++ b/src/test/java/org/jsoup/parser/HtmlParserTest.java\n         assertEquals(1, doc.body().childNodeSize());\n     }\n \n+    @Test public void handleCDataInText() {\n+        String h = \"<p>One <![CDATA[Two <&]]> Three</p>\";\n+        Document doc = Jsoup.parse(h);\n+        Element p = doc.selectFirst(\"p\");\n+\n+        List<Node> nodes = p.childNodes();\n+        assertEquals(\"One \", ((TextNode) nodes.get(0)).getWholeText());\n+        assertEquals(\"Two <&\", ((TextNode) nodes.get(1)).getWholeText());\n+        assertEquals(\"Two <&\", ((CDataNode) nodes.get(1)).getWholeText());\n+        assertEquals(\" Three\", ((TextNode) nodes.get(2)).getWholeText());\n+\n+        assertEquals(h, p.outerHtml());\n+    }\n+\n+    @Test public void cdataNodesAreTextNodes() {\n+        String h = \"<p>One <![CDATA[ Two <& ]]> Three</p>\";\n+        Document doc = Jsoup.parse(h);\n+        Element p = doc.selectFirst(\"p\");\n+\n+        List<TextNode> nodes = p.textNodes();\n+        assertEquals(\"One \", nodes.get(0).text());\n+        assertEquals(\" Two <& \", nodes.get(1).text());\n+        assertEquals(\" Three\", nodes.get(2).text());\n+    }\n+\n     @Test public void handlesInvalidStartTags() {\n         String h = \"<div>Hello < There <&amp;></div>\"; // parse to <div {#text=Hello < There <&>}>\n         Document doc = Jsoup.parse(h);\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n import java.util.Map;\n import java.util.regex.Pattern;\n import java.util.zip.GZIPInputStream;\n+import java.util.zip.Inflater;\n+import java.util.zip.InflaterInputStream;\n \n import static org.jsoup.Connection.Method.HEAD;\n import static org.jsoup.internal.Normalizer.lowerCase;\n                 if (conn.getContentLength() != 0 && req.method() != HEAD) { // -1 means unknown, chunked. sun throws an IO exception on 500 response with no content when trying to read body\n                     res.bodyStream = null;\n                     res.bodyStream = conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n-                    if (res.hasHeaderWithValue(CONTENT_ENCODING, \"gzip\"))\n+                    if (res.hasHeaderWithValue(CONTENT_ENCODING, \"gzip\")) {\n                         res.bodyStream = new GZIPInputStream(res.bodyStream);\n+                    } else if (res.hasHeaderWithValue(CONTENT_ENCODING, \"deflate\")) {\n+                        res.bodyStream = new InflaterInputStream(res.bodyStream, new Inflater(true));\n+                    }\n                     res.bodyStream = ConstrainableInputStream\n                         .wrap(res.bodyStream, DataUtil.bufferSize, req.maxBodySize())\n                         .timeout(startTime, req.timeout())", "timestamp": 1512331396, "metainfo": ""}