{"sha": "9cb4bf068e6e76836b5fa740d7bcc2bb058a14e5", "log": "Merge pull request #969 from lukasschlueter/master  Fix #429", "commit": "\n--- a/src/main/java/org/jsoup/nodes/FormElement.java\n+++ b/src/main/java/org/jsoup/nodes/FormElement.java\n     public FormElement addElement(Element element) {\n         elements.add(element);\n         return this;\n+    }\n+\n+    @Override\n+    protected void removeChild(Node out) {\n+        super.removeChild(out);\n+        elements.remove(out);\n     }\n \n     /**\n--- a/src/test/java/org/jsoup/nodes/FormElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/FormElementTest.java\n         assertEquals(\"pass\", data.get(1).key());\n         assertEquals(\"login\", data.get(2).key());\n     }\n+\n+    @Test public void removeFormElement() {\n+        String html = \"<html>\\n\" +\n+                \"  <body> \\n\" +\n+                \"      <form action=\\\"/hello.php\\\" method=\\\"post\\\">\\n\" +\n+                \"      User:<input type=\\\"text\\\" name=\\\"user\\\" />\\n\" +\n+                \"      Password:<input type=\\\"password\\\" name=\\\"pass\\\" />\\n\" +\n+                \"      <input type=\\\"submit\\\" name=\\\"login\\\" value=\\\"login\\\" />\\n\" +\n+                \"   </form>\\n\" +\n+                \"  </body>\\n\" +\n+                \"</html>  \";\n+        Document doc = Jsoup.parse(html);\n+        FormElement form = (FormElement) doc.selectFirst(\"form\");\n+        Element pass = form.selectFirst(\"input[name=pass]\");\n+        pass.remove();\n+\n+        List<Connection.KeyVal> data = form.formData();\n+        assertEquals(2, data.size());\n+        assertEquals(\"user\", data.get(0).key());\n+        assertEquals(\"login\", data.get(1).key());\n+        assertEquals(null, doc.selectFirst(\"input[name=pass]\"));\n+    }\n }\n--- a/src/main/java/org/jsoup/internal/Normalizer.java\n+++ b/src/main/java/org/jsoup/internal/Normalizer.java\n public final class Normalizer {\n \n     public static String lowerCase(final String input) {\n-        return input.toLowerCase(Locale.ENGLISH);\n+        return input != null ? input.toLowerCase(Locale.ENGLISH) : \"\";\n     }\n \n     public static String normalize(final String input) {\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n \n         private Entities.EscapeMode escapeMode = Entities.EscapeMode.base;\n         private Charset charset;\n-        CharsetEncoder encoder; // initialized by start of OuterHtmlVisitor and cleared at end\n+        private ThreadLocal<CharsetEncoder> encoderThreadLocal = new ThreadLocal<>(); // initialized by start of OuterHtmlVisitor\n         Entities.CoreCharset coreCharset; // fast encoders for ascii and utf8\n \n         private boolean prettyPrint = true;\n         }\n \n         CharsetEncoder prepareEncoder() {\n-            encoder = charset.newEncoder(); // created at start of OuterHtmlVisitor so each pass has own encoder, so OutputSettings can be shared among threads\n+            // created at start of OuterHtmlVisitor so each pass has own encoder, so OutputSettings can be shared among threads\n+            CharsetEncoder encoder = charset.newEncoder();\n+            encoderThreadLocal.set(encoder);\n             coreCharset = Entities.CoreCharset.byName(encoder.charset().name());\n             return encoder;\n+        }\n+\n+        CharsetEncoder encoder() {\n+            CharsetEncoder encoder = encoderThreadLocal.get();\n+            return encoder != null ? encoder : prepareEncoder();\n         }\n \n         /**\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n     }\n \n     static boolean preserveWhitespace(Node node) {\n-        // looks only at this element and one level up, to prevent recursion & needless stack searches\n+        // looks only at this element and five levels up, to prevent recursion & needless stack searches\n         if (node != null && node instanceof Element) {\n-            Element element = (Element) node;\n-            return element.tag.preserveWhitespace() ||\n-                element.parent() != null && element.parent().tag.preserveWhitespace();\n+            Element el = (Element) node;\n+            int i = 0;\n+            do {\n+                if (el.tag.preserveWhitespace())\n+                    return true;\n+                el = el.parent();\n+                i++;\n+            } while (i < 6 && el != null);\n         }\n         return false;\n     }\n--- a/src/main/java/org/jsoup/nodes/Entities.java\n+++ b/src/main/java/org/jsoup/nodes/Entities.java\n         boolean lastWasWhite = false;\n         boolean reachedNonWhite = false;\n         final EscapeMode escapeMode = out.escapeMode();\n-        final CharsetEncoder encoder = out.encoder != null ? out.encoder : out.prepareEncoder();\n+        final CharsetEncoder encoder = out.encoder();\n         final CoreCharset coreCharset = out.coreCharset; // init in out.prepareEncoder()\n         final int length = string.length();\n \n--- /dev/null\n+++ b/src/main/java/org/jsoup/nodes/PseudoTextElement.java\n+package org.jsoup.nodes;\n+\n+import org.jsoup.parser.Tag;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Represents a {@link TextNode} as an {@link Element}, to enable text nodes to be selected with\n+ * the {@link org.jsoup.select.Selector} {@code :matchText} syntax.\n+ */\n+public class PseudoTextElement extends Element {\n+\n+    public PseudoTextElement(Tag tag, String baseUri, Attributes attributes) {\n+        super(tag, baseUri, attributes);\n+    }\n+\n+    @Override\n+    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n+    }\n+\n+    @Override\n+    void outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n+    }\n+}\n--- a/src/main/java/org/jsoup/parser/CharacterReader.java\n+++ b/src/main/java/org/jsoup/parser/CharacterReader.java\n         // limit (no cache):\n         if (count > maxStringCacheLen)\n             return new String(charBuf, start, count);\n+        if (count < 1)\n+            return \"\";\n \n         // calculate hash:\n         int hash = 0;\n--- a/src/main/java/org/jsoup/select/Evaluator.java\n+++ b/src/main/java/org/jsoup/select/Evaluator.java\n import org.jsoup.nodes.DocumentType;\n import org.jsoup.nodes.Element;\n import org.jsoup.nodes.Node;\n+import org.jsoup.nodes.PseudoTextElement;\n+import org.jsoup.nodes.TextNode;\n import org.jsoup.nodes.XmlDeclaration;\n \n import java.util.List;\n             return String.format(\":matchesOwn(%s)\", pattern);\n         }\n     }\n+\n+    public static final class MatchText extends Evaluator {\n+\n+        @Override\n+        public boolean matches(Element root, Element element) {\n+            if (element instanceof PseudoTextElement)\n+                return true;\n+\n+            List<TextNode> textNodes = element.textNodes();\n+            for (TextNode textNode : textNodes) {\n+                PseudoTextElement pel = new PseudoTextElement(\n+                    org.jsoup.parser.Tag.valueOf(element.tagName()), element.baseUri(), element.attributes());\n+                textNode.replaceWith(pel);\n+                pel.appendChild(textNode);\n+            }\n+            return false;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \":matchText\";\n+        }\n+    }\n }\n--- a/src/main/java/org/jsoup/select/QueryParser.java\n+++ b/src/main/java/org/jsoup/select/QueryParser.java\n package org.jsoup.select;\n+\n+import org.jsoup.helper.StringUtil;\n+import org.jsoup.helper.Validate;\n+import org.jsoup.parser.TokenQueue;\n \n import java.util.ArrayList;\n import java.util.List;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n-\n-import org.jsoup.helper.StringUtil;\n-import org.jsoup.helper.Validate;\n-import org.jsoup.parser.TokenQueue;\n \n import static org.jsoup.internal.Normalizer.normalize;\n \n         \tevals.add(new Evaluator.IsEmpty());\n         else if (tq.matchChomp(\":root\"))\n         \tevals.add(new Evaluator.IsRoot());\n+        else if (tq.matchChomp(\":matchText\"))\n+            evals.add(new Evaluator.MatchText());\n \t\telse // unhandled\n             throw new Selector.SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n \n--- a/src/main/java/org/jsoup/select/Selector.java\n+++ b/src/main/java/org/jsoup/select/Selector.java\n  * <tr><td><code>:matchesOwn(<em>regex</em>)</code></td><td>elements whose own text matches the specified regular expression. The text must appear in the found element, not any of its descendants.</td><td><code>td:matchesOwn(\\\\d+)</code> finds table cells directly containing digits. <code>div:matchesOwn((?i)login)</code> finds divs containing the text, case insensitively.</td></tr>\n  * <tr><td><code>:containsData(<em>data</em>)</code></td><td>elements that contains the specified <em>data</em>. The contents of {@code script} and {@code style} elements, and {@code comment} nodes (etc) are considered data nodes, not text nodes. The search is case insensitive. The data may appear in the found element, or any of its descendants.</td><td><code>script:contains(jsoup)</code> finds script elements containing the data \"jsoup\".</td></tr>\n  * <tr><td></td><td>The above may be combined in any order and with other selectors</td><td><code>.light:contains(name):eq(0)</code></td></tr>\n+ * <tr><td><code>:matchText</code></td><td>treats text nodes as elements, and so allows you to match against and select text nodes.<p><b>Note</b> that using this selector will modify the DOM, so you may want to {@code clone} your document before using.</td><td>{@code p:matchText:firstChild} with input {@code <p>One<br />Two</p>} will return one {@link org.jsoup.nodes.PseudoTextElement} with text \"{@code One}\".</td></tr>\n  * <tr><td colspan=\"3\"><h3>Structural pseudo selectors</h3></td></tr>\n  * <tr><td><code>:root</code></td><td>The element that is the root of the document. In HTML, this is the <code>html</code> element</td><td><code>:root</code></td></tr>\n  * <tr><td><code>:nth-child(<em>a</em>n+<em>b</em>)</code></td><td><p>elements that have <code><em>a</em>n+<em>b</em>-1</code> siblings <b>before</b> it in the document tree, for any positive integer or zero value of <code>n</code>, and has a parent element. For values of <code>a</code> and <code>b</code> greater than zero, this effectively divides the element's children into groups of a elements (the last group taking the remainder), and selecting the <em>b</em>th element of each group. For example, this allows the selectors to address every other row in a table, and could be used to alternate the color of paragraph text in a cycle of four. The <code>a</code> and <code>b</code> values must be integers (positive, negative, or zero). The index of the first child of an element is 1.</p>\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n         Document doc = Jsoup.parse(h);\n         assertEquals(\"code\\n\\ncode\", doc.text());\n         assertEquals(\"<pre><code>code\\n\\ncode</code></pre>\", doc.body().html());\n+    }\n+\n+    @Test public void testKeepsPreTextAtDepth() {\n+        String h = \"<pre><code><span><b>code\\n\\ncode</b></span></code></pre>\";\n+        Document doc = Jsoup.parse(h);\n+        assertEquals(\"code\\n\\ncode\", doc.text());\n+        assertEquals(\"<pre><code><span><b>code\\n\\ncode</b></span></code></pre>\", doc.body().html());\n     }\n \n     @Test public void testBrHasSpace() {\n--- a/src/test/java/org/jsoup/parser/CharacterReaderTest.java\n+++ b/src/test/java/org/jsoup/parser/CharacterReaderTest.java\n         assertEquals(\"Two\", two);\n     }\n \n+    @Test\n+    public void consumeToNonexistentEndWhenAtAnd() {\n+        CharacterReader r = new CharacterReader(\"<!\");\n+        assertTrue(r.matchConsume(\"<!\"));\n+        assertTrue(r.isEmpty());\n+\n+        String after = r.consumeTo('>');\n+        assertEquals(\"\", after);\n+\n+        assertTrue(r.isEmpty());\n+    }\n+\n \n }\n--- a/src/test/java/org/jsoup/parser/HtmlParserTest.java\n+++ b/src/test/java/org/jsoup/parser/HtmlParserTest.java\n         assertEquals(200, doc.select(\"span\").size());\n         assertEquals(1, doc.select(\"p\").size());\n   }\n+\n+  @Test public void commentAtEnd() throws Exception {\n+      Document doc = Jsoup.parse(\"<!\");\n+      assertTrue(doc.childNode(0) instanceof Comment);\n+  }\n }\n--- a/src/test/java/org/jsoup/safety/CleanerTest.java\n+++ b/src/test/java/org/jsoup/safety/CleanerTest.java\n         String clean = Jsoup.clean(html, Whitelist.basic());\n         assertEquals(\"<a rel=\\\"nofollow\\\"></a>\", clean);\n     }\n+\n+    @Test public void handlesAttributesWithNoValue() {\n+        // https://github.com/jhy/jsoup/issues/973\n+        String clean = Jsoup.clean(\"<a href>Clean</a>\", Whitelist.basic());\n+\n+        assertEquals(\"<a rel=\\\"nofollow\\\">Clean</a>\", clean);\n+    }\n }\n--- a/src/test/java/org/jsoup/select/SelectorTest.java\n+++ b/src/test/java/org/jsoup/select/SelectorTest.java\n         Document doc = Jsoup.parse(html);\n         assertEquals(\"One\", doc.selectFirst(\"p, div\").text());\n     }\n+\n+    @Test public void matchText() {\n+        String html = \"<p>One<br>Two</p>\";\n+        Document doc = Jsoup.parse(html);\n+        String origHtml = doc.html();\n+\n+        Elements one = doc.select(\"p:matchText:first-child\");\n+        assertEquals(\"One\", one.first().text());\n+\n+        Elements two = doc.select(\"p:matchText:last-child\");\n+        assertEquals(\"Two\", two.first().text());\n+\n+        assertEquals(origHtml, doc.html());\n+\n+        assertEquals(\"Two\", doc.select(\"p:matchText + br + *\").text());\n+    }\n+\n+    @Test public void splitOnBr() {\n+        String html = \"<div><p>One<br>Two<br>Three</p></div>\";\n+        Document doc = Jsoup.parse(html);\n+\n+        Elements els = doc.select(\"p:matchText\");\n+        assertEquals(3, els.size());\n+        assertEquals(\"One\", els.get(0).text());\n+        assertEquals(\"Two\", els.get(1).text());\n+        assertEquals(\"Three\", els.get(2).toString());\n+    }\n+\n+    @Test public void matchTextAttributes() {\n+        Document doc = Jsoup.parse(\"<div><p class=one>One<br>Two<p class=two>Three<br>Four\");\n+        Elements els = doc.select(\"p.two:matchText:last-child\");\n+\n+        assertEquals(1, els.size());\n+        assertEquals(\"Four\", els.text());\n+    }\n+\n+    @Test public void findBetweenSpan() {\n+        Document doc = Jsoup.parse(\"<p><span>One</span> Two <span>Three</span>\");\n+        Elements els = doc.select(\"span ~ p:matchText\"); // the Two becomes its own p, sibling of the span\n+\n+        assertEquals(1, els.size());\n+        assertEquals(\"Two\", els.text());\n+    }\n }", "timestamp": 1510888898, "metainfo": ""}