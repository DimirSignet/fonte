{"sha": "f1110a9021c2caa28cbe3177c0c3a0f5ae326eb4", "log": "Accept a custom SSL socket factory", "commit": "\n--- a/src/main/java/org/jsoup/Connection.java\n+++ b/src/main/java/org/jsoup/Connection.java\n import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n+\n+import javax.net.ssl.SSLSocketFactory;\n \n /**\n  * A Connection provides a convenient interface to fetch content from the web, and parse them into Documents.\n     Connection validateTLSCertificates(boolean value);\n \n     /**\n+     * Set custom SSL socket factory\n+     * @param sslSocketFactory custom SSL socket factory\n+     * @return this Connection, for chaining\n+     */\n+    Connection sslSocketFactory(SSLSocketFactory sslSocketFactory);\n+\n+    /**\n      * Add a request data parameter. Request parameters are sent in the request query string for GETs, and in the\n      * request body for POSTs. A request may have multiple values of the same name.\n      * @param key data key\n         void validateTLSCertificates(boolean value);\n \n         /**\n+         * Get the custom SSL socket factory\n+         * @return custom SSL socket factory\n+         */\n+        SSLSocketFactory sslSocketFactory();\n+\n+        /**\n+         * Set custom SSL socket factory.\n+         * @param sslSocketFactory SSL socket factory\n+         */\n+        void sslSocketFactory(SSLSocketFactory sslSocketFactory);\n+\n+        /**\n          * Add a data parameter to the request\n          * @param keyval data to add.\n          * @return this Request, for chaining\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n         return this;\n     }\n \n+    public Connection sslSocketFactory(SSLSocketFactory sslSocketFactory) {\n+\t    req.sslSocketFactory(sslSocketFactory);\n+\t    return this;\n+    }\n+\n     public Connection data(String key, String filename, InputStream inputStream) {\n         req.data(KeyVal.create(key, filename, inputStream));\n         return this;\n         private boolean parserDefined = false; // called parser(...) vs initialized in ctor\n         private boolean validateTSLCertificates = true;\n         private String postDataCharset = DataUtil.defaultCharset;\n+        private SSLSocketFactory sslSocketFactory;\n \n         Request() {\n             timeoutMilliseconds = 30000; // 30 seconds\n \n         public void validateTLSCertificates(boolean value) {\n             validateTSLCertificates = value;\n+        }\n+\n+        public SSLSocketFactory sslSocketFactory() {\n+            return sslSocketFactory;\n+        }\n+\n+        public void sslSocketFactory(SSLSocketFactory sslSocketFactory) {\n+            this.sslSocketFactory = sslSocketFactory;\n         }\n \n         public Connection.Request ignoreHttpErrors(boolean ignoreHttpErrors) {\n             conn.setReadTimeout(req.timeout() / 2); // gets reduced after connection is made and status is read\n \n             if (conn instanceof HttpsURLConnection) {\n-                if (!req.validateTLSCertificates()) {\n+                SSLSocketFactory socketFactory = req.sslSocketFactory();\n+\n+                if (socketFactory != null) {\n+                    ((HttpsURLConnection) conn).setSSLSocketFactory(socketFactory);\n+                } else if (!req.validateTLSCertificates()) {\n                     initUnSecureTSL();\n                     ((HttpsURLConnection)conn).setSSLSocketFactory(sslSocketFactory);\n                     ((HttpsURLConnection)conn).setHostnameVerifier(getInsecureVerifier());", "timestamp": 1523090365, "metainfo": ""}