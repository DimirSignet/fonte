{"sha": "426ffe7870b937ef9cfa25ebe20e7a478493da99", "log": "Simplified nextElements and previousElements impl, added changelog", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n     }\n \n     /**\n-     * Get all the siblings after this element.\n-     *\n-     * @return  all the siblings after this element, or empty list if there is no siblings after this\n-     */\n-    public List<Element> nextElementSiblings() {\n-        if (parentNode == null) {\n-            return Collections.emptyList();\n-        }\n-\n-        List<Element> siblings = parent().childElementsList();\n-        int index = indexInList(this, siblings);\n-        Validate.notNull(index);\n-\n-        if (siblings.size() > index + 1) {\n-            return siblings.subList(index + 1, siblings.size());\n-        }\n-        return Collections.emptyList();\n+     * Get each of the sibling elements that come after this element.\n+     *\n+     * @return each of the element siblings after this element, or an empty list if there are no next sibling elements\n+     */\n+    public Elements nextElementSiblings() {\n+        return nextElementSiblings(true);\n     }\n \n     /**\n     }\n \n     /**\n-     * Get all the element siblings before this element.\n-     *\n-     * @return all the previous element siblings, or empty list if no previous siblings\n-     */\n-    public List<Element> previousElementSiblings() {\n-        if (parentNode == null) {\n-            return Collections.emptyList();\n-        }\n-\n-        List<Element> siblings = parent().childElementsList();\n-        int index = indexInList(this, siblings);\n-        Validate.notNull(index);\n-\n-        if (index > 0 && index < siblings.size()) {\n-            return siblings.subList(0, index);\n-        }\n-        return Collections.emptyList();\n+     * Get each of the element siblings before this element.\n+     *\n+     * @return the previous element siblings, or an empty list if there are none.\n+     */\n+    public Elements previousElementSiblings() {\n+        return nextElementSiblings(false);\n+    }\n+\n+    private Elements nextElementSiblings(boolean next) {\n+        Elements els = new Elements();\n+        if (parentNode == null)\n+            return  els;\n+        els.add(this);\n+        return next ?  els.nextAll() : els.prevAll();\n     }\n \n     /**\n--- a/src/main/java/org/jsoup/select/Elements.java\n+++ b/src/main/java/org/jsoup/select/Elements.java\n     }\n \n     /**\n-     * Get all of the following element siblings of each element in this list.\n+     * Get each of the following element siblings of each element in this list.\n      * @return all following element siblings.\n      */\n     public Elements nextAll() {\n     }\n \n     /**\n-     * Get all of the following element siblings of each element in this list, filtered by the query.\n+     * Get each of the following element siblings of each element in this list, that match the query.\n      * @param query CSS query to match siblings against\n      * @return all following element siblings.\n      */\n     }\n \n     /**\n-     * Get all of the previous element siblings of each element in this list.\n+     * Get each of the previous element siblings of each element in this list.\n      * @return all previous element siblings.\n      */\n     public Elements prevAll() {\n     }\n \n     /**\n-     * Get all of the previous element siblings of each element in this list, filtered by the query.\n+     * Get each of the previous element siblings of each element in this list, that match the query.\n      * @param query CSS query to match siblings against\n      * @return all previous element siblings.\n      */\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n             \"<li id='a'>a</li>\" +\n             \"<li id='b'>b</li>\" +\n             \"<li id='c'>c</li>\" +\n-            \"</ul>\" +\n+            \"</ul> Not An Element but a node\" +\n             \"<div id='div'>\" +\n             \"<li id='d'>d</li>\" +\n             \"</div>\");\n \n         Element element = doc.getElementById(\"a\");\n-        List<Element> elementSiblings = element.nextElementSiblings();\n+        Elements elementSiblings = element.nextElementSiblings();\n         assertNotNull(elementSiblings);\n         assertEquals(2, elementSiblings.size());\n         assertEquals(\"b\", elementSiblings.get(0).id());\n \n         Element div = doc.getElementById(\"div\");\n         List<Element> elementSiblings4 = div.nextElementSiblings();\n-        try {\n-            Element elementSibling = elementSiblings4.get(0);\n-            fail(\"This element should has no next siblings\");\n-        } catch (IndexOutOfBoundsException e) {\n-        }\n+        assertEquals(0, elementSiblings4.size());\n     }\n \n     @Test\n             \"</div>\");\n \n         Element element = doc.getElementById(\"b\");\n-        List<Element> elementSiblings = element.previousElementSiblings();\n+        Elements elementSiblings = element.previousElementSiblings();\n         assertNotNull(elementSiblings);\n         assertEquals(1, elementSiblings.size());\n         assertEquals(\"a\", elementSiblings.get(0).id());\n \n         Element ul = doc.getElementById(\"ul\");\n         List<Element> elementSiblings3 = ul.previousElementSiblings();\n-        try {\n-            Element element3 = elementSiblings3.get(0);\n-            fail(\"This element should has no previous siblings\");\n-        } catch (IndexOutOfBoundsException e) {\n-        }\n+        assertEquals(0, elementSiblings3.size());\n     }\n }", "timestamp": 1526103127, "metainfo": ""}