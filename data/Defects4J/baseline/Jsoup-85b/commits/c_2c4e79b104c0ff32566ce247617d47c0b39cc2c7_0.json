{"sha": "2c4e79b104c0ff32566ce247617d47c0b39cc2c7", "log": "DataUtil should throw IOException on failed reads during parse  Fixes #980", "commit": "\n--- a/src/main/java/org/jsoup/Connection.java\n+++ b/src/main/java/org/jsoup/Connection.java\n          * same connection response (otherwise, once the response is read, its InputStream will have been drained and\n          * may not be re-read). Calling {@link #body() } or {@link #bodyAsBytes()} has the same effect.\n          * @return this response, for chaining\n+         * @throws UncheckedIOException if an IO exception occurs during buffering.\n          */\n         Response bufferUp();\n \n--- a/src/main/java/org/jsoup/UncheckedIOException.java\n+++ b/src/main/java/org/jsoup/UncheckedIOException.java\n \n import java.io.IOException;\n \n-public class UncheckedIOException extends Error {\n+public class UncheckedIOException extends RuntimeException {\n     public UncheckedIOException(IOException cause) {\n         super(cause);\n     }\n--- a/src/main/java/org/jsoup/helper/DataUtil.java\n+++ b/src/main/java/org/jsoup/helper/DataUtil.java\n package org.jsoup.helper;\n \n+import org.jsoup.UncheckedIOException;\n import org.jsoup.internal.ConstrainableInputStream;\n import org.jsoup.nodes.Document;\n import org.jsoup.nodes.Element;\n             if (charsetName == null)\n                 charsetName = defaultCharset;\n             BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize);\n-            doc = parser.parseInput(reader, baseUri);\n+            try {\n+                doc = parser.parseInput(reader, baseUri);\n+            } catch (UncheckedIOException e) {\n+                // io exception when parsing (not seen before because reading the stream as we go)\n+                throw e.ioException();\n+            }\n             doc.outputSettings().charset(charsetName);\n         }\n         input.close();\n--- a/src/test/java/org/jsoup/integration/ConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/ConnectTest.java\n \n import org.jsoup.Connection;\n import org.jsoup.Jsoup;\n+import org.jsoup.UncheckedIOException;\n import org.jsoup.integration.servlets.Deflateservlet;\n import org.jsoup.integration.servlets.EchoServlet;\n import org.jsoup.integration.servlets.HelloServlet;\n+import org.jsoup.integration.servlets.InterruptedServlet;\n import org.jsoup.integration.servlets.SlowRider;\n import org.jsoup.nodes.Document;\n import org.jsoup.nodes.Element;\n         Document doc = res.parse();\n         assertEquals(\"Hello, World!\", doc.selectFirst(\"p\").text());\n     }\n+\n+    @Test\n+    public void handlesEmptyStreamDuringParseRead() throws IOException {\n+        // this handles situations where the remote server sets a content length greater than it actually writes\n+\n+        Connection.Response res = Jsoup.connect(InterruptedServlet.Url)\n+            .timeout(200)\n+            .execute();\n+\n+        boolean threw = false;\n+        try {\n+            Document document = res.parse();\n+            assertEquals(\"Something\", document.title());\n+        } catch (IOException e) {\n+            threw = true;\n+        }\n+        assertEquals(true, threw);\n+    }\n+\n+    @Test\n+    public void handlesEmtpyStreamDuringBufferdRead() throws IOException {\n+        Connection.Response res = Jsoup.connect(InterruptedServlet.Url)\n+            .timeout(200)\n+            .execute();\n+\n+        boolean threw = false;\n+        try {\n+            res.bufferUp();\n+        } catch (UncheckedIOException e) {\n+            threw = true;\n+        }\n+        assertEquals(true, threw);\n+\n+    }\n }\n--- /dev/null\n+++ b/src/test/java/org/jsoup/integration/servlets/InterruptedServlet.java\n+package org.jsoup.integration.servlets;\n+\n+import org.jsoup.integration.TestServer;\n+import org.jsoup.parser.CharacterReaderTest;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+\n+public class InterruptedServlet extends BaseServlet {\n+    public static final String Url = TestServer.map(InterruptedServlet.class);\n+\n+    @Override\n+    protected void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n+        res.setContentType(TextHtml);\n+        res.setStatus(HttpServletResponse.SC_OK);\n+\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"<title>Something</title>\");\n+        while (sb.length() <= CharacterReaderTest.maxBufferLen) {\n+            sb.append(\"A suitable amount of data. \\n\");\n+        }\n+        String data = sb.toString();\n+\n+        res.setContentLength(data.length() * 2);\n+\n+        res.getWriter().write(data);\n+\n+    }\n+}\n--- a/src/test/java/org/jsoup/parser/CharacterReaderTest.java\n+++ b/src/test/java/org/jsoup/parser/CharacterReaderTest.java\n  * @author Jonathan Hedley, jonathan@hedley.net\n  */\n public class CharacterReaderTest {\n+    public final static int maxBufferLen = CharacterReader.maxBufferLen;\n \n     @Test public void consume() {\n         CharacterReader r = new CharacterReader(\"one\");", "timestamp": 1523737656, "metainfo": ""}