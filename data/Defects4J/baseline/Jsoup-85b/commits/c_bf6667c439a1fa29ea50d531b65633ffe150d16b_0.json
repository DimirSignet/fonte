{"sha": "bf6667c439a1fa29ea50d531b65633ffe150d16b", "log": "Removed deprecated Connection.validateTLSCertificates() method", "commit": "\n--- a/src/main/java/org/jsoup/Connection.java\n+++ b/src/main/java/org/jsoup/Connection.java\n     Connection ignoreContentType(boolean ignoreContentType);\n \n     /**\n-     * Disable/enable TLS certificates validation for HTTPS requests.\n-     * <p>\n-     * By default this is <b>true</b>; all\n-     * connections over HTTPS perform normal validation of certificates, and will abort requests if the provided\n-     * certificate does not validate.\n-     * </p>\n-     * <p>\n-     * Some servers use expired, self-generated certificates; or your JDK may not\n-     * support SNI hosts. In which case, you may want to enable this setting.\n-     * </p>\n-     * <p>\n-     * <b>Be careful</b> and understand why you need to disable these validations.\n-     * </p>\n-     * @param value if should validate TLS (SSL) certificates. <b>true</b> by default.\n-     * @return this Connection, for chaining\n-     * @deprecated as distributions (specifically Google Play) are starting to show warnings if these checks are\n-     * disabled.\n-     */\n-    Connection validateTLSCertificates(boolean value);\n-\n-    /**\n      * Set custom SSL socket factory\n      * @param sslSocketFactory custom SSL socket factory\n      * @return this Connection, for chaining\n         Request ignoreContentType(boolean ignoreContentType);\n \n         /**\n-         * Get the current state of TLS (SSL) certificate validation.\n-         * @return true if TLS cert validation enabled\n-         * @deprecated\n-         */\n-        boolean validateTLSCertificates();\n-\n-        /**\n-         * Set TLS certificate validation. <b>True</b> by default.\n-         * @param value set false to ignore TLS (SSL) certificates\n-         * @deprecated as distributions (specifically Google Play) are starting to show warnings if these checks are\n-         * disabled. This method will be removed in the next release.\n-         * @see #sslSocketFactory(SSLSocketFactory)\n-         */\n-        void validateTLSCertificates(boolean value);\n-\n-        /**\n          * Get the current custom SSL socket factory, if any.\n          * @return custom SSL socket factory if set, null otherwise\n          */\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n \n import javax.net.ssl.HostnameVerifier;\n import javax.net.ssl.HttpsURLConnection;\n-import javax.net.ssl.SSLContext;\n import javax.net.ssl.SSLSession;\n import javax.net.ssl.SSLSocketFactory;\n-import javax.net.ssl.TrustManager;\n-import javax.net.ssl.X509TrustManager;\n import java.io.BufferedInputStream;\n import java.io.BufferedWriter;\n import java.io.ByteArrayInputStream;\n import java.nio.ByteBuffer;\n import java.nio.charset.Charset;\n import java.nio.charset.IllegalCharsetNameException;\n-import java.security.KeyManagementException;\n-import java.security.NoSuchAlgorithmException;\n-import java.security.cert.X509Certificate;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n         return this;\n     }\n \n-    public Connection validateTLSCertificates(boolean value) {\n-        req.validateTLSCertificates(value);\n-        return this;\n-    }\n \n     public Connection data(String key, String value) {\n         req.data(KeyVal.create(key, value));\n             conn.setConnectTimeout(req.timeout());\n             conn.setReadTimeout(req.timeout() / 2); // gets reduced after connection is made and status is read\n \n-            if (conn instanceof HttpsURLConnection) {\n-                SSLSocketFactory socketFactory = req.sslSocketFactory();\n-\n-                if (socketFactory != null) {\n-                    ((HttpsURLConnection) conn).setSSLSocketFactory(socketFactory);\n-                } else if (!req.validateTLSCertificates()) {\n-                    initUnSecureTSL();\n-                    ((HttpsURLConnection)conn).setSSLSocketFactory(sslSocketFactory);\n-                    ((HttpsURLConnection)conn).setHostnameVerifier(getInsecureVerifier());\n-                }\n-            }\n-\n+            if (req.sslSocketFactory() != null && conn instanceof HttpsURLConnection)\n+                ((HttpsURLConnection) conn).setSSLSocketFactory(req.sslSocketFactory());\n             if (req.method().hasBody())\n                 conn.setDoOutput(true);\n             if (req.cookies().size() > 0)\n          * Instantiate Hostname Verifier that does nothing.\n          * This is used for connections with disabled SSL certificates validation.\n          *\n-         *\n          * @return Hostname Verifier that does nothing and accepts all hostnames\n          */\n         private static HostnameVerifier getInsecureVerifier() {\n                     return true;\n                 }\n             };\n-        }\n-\n-        /**\n-         * Initialise Trust manager that does not validate certificate chains and\n-         * add it to current SSLContext.\n-         * <p/>\n-         * please not that this method will only perform action if sslSocketFactory is not yet\n-         * instantiated.\n-         *\n-         * @throws IOException on SSL init errors\n-         */\n-        private static synchronized void initUnSecureTSL() throws IOException {\n-            if (sslSocketFactory == null) {\n-                // Create a trust manager that does not validate certificate chains\n-                final TrustManager[] trustAllCerts = new TrustManager[]{new X509TrustManager() {\n-\n-                    public void checkClientTrusted(final X509Certificate[] chain, final String authType) {\n-                    }\n-\n-                    public void checkServerTrusted(final X509Certificate[] chain, final String authType) {\n-                    }\n-\n-                    public X509Certificate[] getAcceptedIssuers() {\n-                        return null;\n-                    }\n-                }};\n-\n-                // Install the all-trusting trust manager\n-                final SSLContext sslContext;\n-                try {\n-                    sslContext = SSLContext.getInstance(\"SSL\");\n-                    sslContext.init(null, trustAllCerts, new java.security.SecureRandom());\n-                    // Create an ssl socket factory with our all-trusting manager\n-                    sslSocketFactory = sslContext.getSocketFactory();\n-                } catch (NoSuchAlgorithmException | KeyManagementException e) {\n-                    throw new IOException(\"Can't create unsecure trust manager\");\n-                }\n-            }\n-\n         }\n \n         // set up url, method, header, cookies\n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n         Jsoup.connect(url).execute();\n     }\n \n-    /**\n-     * Verify that requests to websites with SNI pass\n-     * <p/>\n-     * <b>NB!</b> this test is FAILING right now on jdk 1.6\n-     *\n-     * @throws Exception\n-     */\n-    @Test\n-    public void testSNIPass() throws Exception {\n-        String url = WEBSITE_WITH_SNI;\n-        Connection.Response defaultRes = Jsoup.connect(url).validateTLSCertificates(false).execute();\n-        assertEquals(defaultRes.statusCode(), 200);\n-    }\n-\n-    /**\n-     * Verify that security disabling feature works properly.\n-     * <p/>\n-     * 1. disable security checks and call the same url to verify that content is consumed correctly\n-     *\n-     * @throws Exception\n-     */\n-    @Test\n-    public void testUnsafePass() throws Exception {\n-        String url = WEBSITE_WITH_INVALID_CERTIFICATE;\n-        Connection.Response defaultRes = Jsoup.connect(url).validateTLSCertificates(false).execute();\n-        assertEquals(defaultRes.statusCode(), 200);\n-    }\n-\n     @Test\n     public void shouldWorkForCharsetInExtraAttribute() throws IOException {\n         Connection.Response res = Jsoup.connect(\"https://www.creditmutuel.com/groupe/fr/\").execute();", "timestamp": 1524946590, "metainfo": ""}