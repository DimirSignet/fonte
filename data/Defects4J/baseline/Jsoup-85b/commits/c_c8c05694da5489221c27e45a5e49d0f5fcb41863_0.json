{"sha": "c8c05694da5489221c27e45a5e49d0f5fcb41863", "log": "Use a stack for StringBuilder flyweight, so threads can use more than one at a time", "commit": "\n--- a/src/main/java/org/jsoup/helper/DataUtil.java\n+++ b/src/main/java/org/jsoup/helper/DataUtil.java\n      * Creates a random string, suitable for use as a mime boundary\n      */\n     static String mimeBoundary() {\n-        final StringBuilder mime = new StringBuilder(boundaryLength);\n+        final StringBuilder mime = StringUtil.borrowBuilder();\n         final Random rand = new Random();\n         for (int i = 0; i < boundaryLength; i++) {\n             mime.append(mimeBoundaryChars[rand.nextInt(mimeBoundaryChars.length)]);\n         }\n-        return mime.toString();\n+        return StringUtil.releaseBuilder(mime);\n     }\n \n     private static BomCharset detectCharsetFromBom(final ByteBuffer byteData) {\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n         }\n \n         private static String getRequestCookieString(Connection.Request req) {\n-            StringBuilder sb = StringUtil.stringBuilder();\n+            StringBuilder sb = StringUtil.borrowBuilder();\n             boolean first = true;\n             for (Map.Entry<String, String> cookie : req.cookies().entrySet()) {\n                 if (!first)\n                 sb.append(cookie.getKey()).append('=').append(cookie.getValue());\n                 // todo: spec says only ascii, no escaping / encoding defined. validate on set? or escape somehow here?\n             }\n-            return sb.toString();\n+            return StringUtil.releaseBuilder(sb);\n         }\n \n         // for get url reqs, serialise the data map into the url\n         private static void serialiseRequestUrl(Connection.Request req) throws IOException {\n             URL in = req.url();\n-            StringBuilder url = StringUtil.stringBuilder();\n+            StringBuilder url = StringUtil.borrowBuilder();\n             boolean first = true;\n             // reconstitute the query, ready for appends\n             url\n                     .append('=')\n                     .append(URLEncoder.encode(keyVal.value(), DataUtil.defaultCharset));\n             }\n-            req.url(new URL(url.toString()));\n+            req.url(new URL(StringUtil.releaseBuilder(url)));\n             req.data().clear(); // moved into url as get params\n         }\n     }\n--- a/src/main/java/org/jsoup/helper/StringUtil.java\n+++ b/src/main/java/org/jsoup/helper/StringUtil.java\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Iterator;\n+import java.util.Stack;\n \n /**\n  * A minimal String utility class. Designed for internal jsoup use only.\n         if (!strings.hasNext()) // only one, avoid builder\n             return start;\n \n-        StringBuilder sb = new StringBuilder(64).append(start);\n+        StringBuilder sb = StringUtil.borrowBuilder().append(start);\n         while (strings.hasNext()) {\n             sb.append(sep);\n             sb.append(strings.next());\n         }\n-        return sb.toString();\n+        return StringUtil.releaseBuilder(sb);\n     }\n \n     /**\n      * @return normalised string\n      */\n     public static String normaliseWhitespace(String string) {\n-        StringBuilder sb = StringUtil.stringBuilder();\n+        StringBuilder sb = StringUtil.borrowBuilder();\n         appendNormalisedWhitespace(sb, string, false);\n-        return sb.toString();\n+        return StringUtil.releaseBuilder(sb);\n     }\n \n     /**\n         }\n     }\n \n-    /**\n-     * Maintains a cached StringBuilder, to minimize new StringBuilder GCs. Prevents it from growing too big per thread.\n-     * Care must be taken to not grab more than one in the same stack (not locked or mutexed or anything).\n+    private static final Stack<StringBuilder> builders = new Stack<>();\n+\n+    /**\n+     * Maintains cached StringBuilders in a flyweight pattern, to minimize new StringBuilder GCs. The StringBuilder is\n+     * prevented from growing too large.\n+     * <p>\n+     * Care must be taken to release the builder once its work has been completed, with {@see #releaseBuilder}\n      * @return an empty StringBuilder\n-     */\n-    public static StringBuilder stringBuilder() {\n-        StringBuilder sb = stringLocal.get();\n-        if (sb.length() > MaxCachedBuilderSize) {\n-            sb = new StringBuilder(MaxCachedBuilderSize);\n-            stringLocal.set(sb);\n-        } else {\n-            sb.delete(0, sb.length());\n-        }\n-        return sb;\n-\n+     * @\n+     */\n+    public static StringBuilder borrowBuilder() {\n+        synchronized (builders) {\n+            return builders.empty() ?\n+                new StringBuilder(MaxCachedBuilderSize) :\n+                builders.pop();\n+        }\n+    }\n+\n+    /**\n+     * Release a borrowed builder. Care must be taken not to use the builder after it has been returned, as its\n+     * contents may be changed by this method, or by a concurrent thread.\n+     * @param sb the StringBuilder to release.\n+     * @return the string value of the released String Builder (as an incentive to release it!).\n+     */\n+    public static String releaseBuilder(StringBuilder sb) {\n+        Validate.notNull(sb);\n+        String string = sb.toString();\n+\n+        if (sb.length() > MaxCachedBuilderSize)\n+            sb = new StringBuilder(MaxCachedBuilderSize); // make sure it hasn't grown too big\n+        else\n+            sb.delete(0, sb.length()); // make sure it's emptied on release\n+\n+        synchronized (builders) {\n+            builders.push(sb);\n+\n+            while (builders.size() > MaxIdleBuilders) {\n+                builders.pop();\n+            }\n+        }\n+        return string;\n     }\n \n     private static final int MaxCachedBuilderSize = 8 * 1024;\n-    private static final ThreadLocal<StringBuilder> stringLocal = new ThreadLocal<StringBuilder>(){\n-        @Override\n-        protected StringBuilder initialValue() {\n-            return new StringBuilder(MaxCachedBuilderSize);\n-        }\n-    };\n-\n-\n+    private static final int MaxIdleBuilders = 8;\n }\n--- a/src/main/java/org/jsoup/nodes/Attribute.java\n+++ b/src/main/java/org/jsoup/nodes/Attribute.java\n package org.jsoup.nodes;\n \n import org.jsoup.SerializationException;\n+import org.jsoup.helper.StringUtil;\n import org.jsoup.helper.Validate;\n \n import java.io.IOException;\n      @return HTML\n      */\n     public String html() {\n-        StringBuilder accum = new StringBuilder();\n+        StringBuilder sb = StringUtil.borrowBuilder();\n         \n         try {\n-        \thtml(accum, (new Document(\"\")).outputSettings());\n+        \thtml(sb, (new Document(\"\")).outputSettings());\n         } catch(IOException exception) {\n         \tthrow new SerializationException(exception);\n         }\n-        return accum.toString();\n+        return StringUtil.releaseBuilder(sb);\n     }\n \n     protected static void html(String key, String val, Appendable accum, Document.OutputSettings out) throws IOException {\n--- a/src/main/java/org/jsoup/nodes/Attributes.java\n+++ b/src/main/java/org/jsoup/nodes/Attributes.java\n package org.jsoup.nodes;\n \n import org.jsoup.SerializationException;\n+import org.jsoup.helper.StringUtil;\n import org.jsoup.helper.Validate;\n \n import java.io.IOException;\n      @throws SerializationException if the HTML representation of the attributes cannot be constructed.\n      */\n     public String html() {\n-        StringBuilder accum = new StringBuilder();\n+        StringBuilder sb = StringUtil.borrowBuilder();\n         try {\n-            html(accum, (new Document(\"\")).outputSettings()); // output settings a bit funky, but this html() seldom used\n+            html(sb, (new Document(\"\")).outputSettings()); // output settings a bit funky, but this html() seldom used\n         } catch (IOException e) { // ought never happen\n             throw new SerializationException(e);\n         }\n-        return accum.toString();\n+        return StringUtil.releaseBuilder(sb);\n     }\n \n     final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n      * @see #textNodes()\n      */\n     public String text() {\n-        final StringBuilder accum = new StringBuilder();\n+        final StringBuilder accum = StringUtil.borrowBuilder();\n         NodeTraversor.traverse(new NodeVisitor() {\n             public void head(Node node, int depth) {\n                 if (node instanceof TextNode) {\n \n             }\n         }, this);\n-        return accum.toString().trim();\n+\n+        return StringUtil.releaseBuilder(accum).trim();\n     }\n \n     /**\n      * @see #text()\n      */\n     public String wholeText() {\n-        final StringBuilder accum = new StringBuilder();\n+        final StringBuilder accum = StringUtil.borrowBuilder();\n         NodeTraversor.traverse(new NodeVisitor() {\n             public void head(Node node, int depth) {\n                 if (node instanceof TextNode) {\n             public void tail(Node node, int depth) {\n             }\n         }, this);\n-        return accum.toString();\n+\n+        return StringUtil.releaseBuilder(accum);\n     }\n \n     /**\n      * @see #textNodes()\n      */\n     public String ownText() {\n-        StringBuilder sb = new StringBuilder();\n+        StringBuilder sb = StringUtil.borrowBuilder();\n         ownText(sb);\n-        return sb.toString().trim();\n+        return StringUtil.releaseBuilder(sb).trim();\n     }\n \n     private void ownText(StringBuilder accum) {\n      * @see #dataNodes()\n      */\n     public String data() {\n-        StringBuilder sb = new StringBuilder();\n+        StringBuilder sb = StringUtil.borrowBuilder();\n \n         for (Node childNode : childNodes) {\n             if (childNode instanceof DataNode) {\n                 sb.append(cDataNode.getWholeText());\n             }\n         }\n-        return sb.toString();\n+        return StringUtil.releaseBuilder(sb);\n     }   \n \n     /**\n      * @see #outerHtml()\n      */\n     public String html() {\n-        StringBuilder accum = StringUtil.stringBuilder();\n+        StringBuilder accum = StringUtil.borrowBuilder();\n         html(accum);\n-        return NodeUtils.outputSettings(this).prettyPrint() ? accum.toString().trim() : accum.toString();\n+        String html = StringUtil.releaseBuilder(accum);\n+        return NodeUtils.outputSettings(this).prettyPrint() ? html.trim() : html;\n     }\n \n     @Override\n--- a/src/main/java/org/jsoup/nodes/Entities.java\n+++ b/src/main/java/org/jsoup/nodes/Entities.java\n     public static String escape(String string, Document.OutputSettings out) {\n         if (string == null)\n             return \"\";\n-        StringBuilder accum = new StringBuilder(string.length() * 2);\n+        StringBuilder accum = StringUtil.borrowBuilder();\n         try {\n             escape(accum, string, out, false, false, false);\n         } catch (IOException e) {\n             throw new SerializationException(e); // doesn't happen\n         }\n-        return accum.toString();\n+        return StringUtil.releaseBuilder(accum);\n     }\n \n     /**\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n      @see Element#text()\n      */\n     public String outerHtml() {\n-        StringBuilder accum = StringUtil.stringBuilder();\n+        StringBuilder accum = StringUtil.borrowBuilder();\n         outerHtml(accum);\n-        return accum.toString();\n+        return StringUtil.releaseBuilder(accum);\n     }\n \n     protected void outerHtml(Appendable accum) {\n--- a/src/main/java/org/jsoup/nodes/XmlDeclaration.java\n+++ b/src/main/java/org/jsoup/nodes/XmlDeclaration.java\n package org.jsoup.nodes;\n \n import org.jsoup.SerializationException;\n+import org.jsoup.helper.StringUtil;\n import org.jsoup.helper.Validate;\n \n import java.io.IOException;\n      * @return XML declaration\n      */\n     public String getWholeDeclaration() {\n-        StringBuilder sb = new StringBuilder();\n+        StringBuilder sb = StringUtil.borrowBuilder();\n         try {\n             getWholeDeclaration(sb, new Document.OutputSettings());\n         } catch (IOException e) {\n             throw new SerializationException(e);\n         }\n-        return sb.toString().trim();\n+        return StringUtil.releaseBuilder(sb).trim();\n     }\n \n     private void getWholeDeclaration(Appendable accum, Document.OutputSettings out) throws IOException {\n--- a/src/main/java/org/jsoup/parser/TokenQueue.java\n+++ b/src/main/java/org/jsoup/parser/TokenQueue.java\n      * @return unescaped string\n      */\n     public static String unescape(String in) {\n-        StringBuilder out = StringUtil.stringBuilder();\n+        StringBuilder out = StringUtil.borrowBuilder();\n         char last = 0;\n         for (char c : in.toCharArray()) {\n             if (c == ESC) {\n                 out.append(c);\n             last = c;\n         }\n-        return out.toString();\n+        return StringUtil.releaseBuilder(out);\n     }\n \n     /**\n--- a/src/main/java/org/jsoup/parser/Tokeniser.java\n+++ b/src/main/java/org/jsoup/parser/Tokeniser.java\n      * @return unescaped string from reader\n      */\n     String unescapeEntities(boolean inAttribute) {\n-        StringBuilder builder = StringUtil.stringBuilder();\n+        StringBuilder builder = StringUtil.borrowBuilder();\n         while (!reader.isEmpty()) {\n             builder.append(reader.consumeTo('&'));\n             if (reader.matches('&')) {\n \n             }\n         }\n-        return builder.toString();\n+        return StringUtil.releaseBuilder(builder);\n     }\n }\n--- a/src/main/java/org/jsoup/select/Elements.java\n+++ b/src/main/java/org/jsoup/select/Elements.java\n package org.jsoup.select;\n \n+import org.jsoup.helper.StringUtil;\n import org.jsoup.helper.Validate;\n import org.jsoup.nodes.Element;\n import org.jsoup.nodes.FormElement;\n      * @see #eachText()\n      */\n     public String text() {\n-        StringBuilder sb = new StringBuilder();\n+        StringBuilder sb = StringUtil.borrowBuilder();\n         for (Element element : this) {\n             if (sb.length() != 0)\n                 sb.append(\" \");\n             sb.append(element.text());\n         }\n-        return sb.toString();\n+        return StringUtil.releaseBuilder(sb);\n     }\n \n     /**\n      * @see #outerHtml()\n      */\n     public String html() {\n-        StringBuilder sb = new StringBuilder();\n+        StringBuilder sb = StringUtil.borrowBuilder();\n         for (Element element : this) {\n             if (sb.length() != 0)\n                 sb.append(\"\\n\");\n             sb.append(element.html());\n         }\n-        return sb.toString();\n+        return StringUtil.releaseBuilder(sb);\n     }\n     \n     /**\n      * @see #html()\n      */\n     public String outerHtml() {\n-        StringBuilder sb = new StringBuilder();\n+        StringBuilder sb = StringUtil.borrowBuilder();\n         for (Element element : this) {\n             if (sb.length() != 0)\n                 sb.append(\"\\n\");\n             sb.append(element.outerHtml());\n         }\n-        return sb.toString();\n+        return StringUtil.releaseBuilder(sb);\n     }\n \n     /**\n--- a/src/main/java/org/jsoup/select/QueryParser.java\n+++ b/src/main/java/org/jsoup/select/QueryParser.java\n     }\n \n     private String consumeSubQuery() {\n-        StringBuilder sq = new StringBuilder();\n+        StringBuilder sq = StringUtil.borrowBuilder();\n         while (!tq.isEmpty()) {\n             if (tq.matches(\"(\"))\n                 sq.append(\"(\").append(tq.chompBalanced('(', ')')).append(\")\");\n             else\n                 sq.append(tq.consume());\n         }\n-        return sq.toString();\n+        return StringUtil.releaseBuilder(sq);\n     }\n \n     private void findElements() {", "timestamp": 1525929499, "metainfo": ""}