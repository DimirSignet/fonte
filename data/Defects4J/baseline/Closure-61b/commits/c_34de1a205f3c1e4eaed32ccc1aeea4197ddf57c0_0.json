{"sha": "34de1a205f3c1e4eaed32ccc1aeea4197ddf57c0", "log": "Limit InlineObjectLiterals to local scopes for now.  R=acleung,nicksantos DELTA=92  (31 added, 4 deleted, 57 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2400   ", "commit": "\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n      */\n     private boolean isVarInlineForbidden(Var var) {\n       // A variable may not be inlined if:\n-      // 1) The variable is exported,\n-      // 2) Don't inline the special RENAME_PROPERTY_FUNCTION_NAME\n-      // 3) A reference to the variable has been inlined. We're downstream\n+      // 1) The variable is defined in the externs\n+      // 2) The variable is exported,\n+      // 3) Don't inline the special RENAME_PROPERTY_FUNCTION_NAME\n+      // 4) A reference to the variable has been inlined. We're downstream\n       //    of the mechanism that creates variable references, so we don't\n       //    have a good way to update the reference. Just punt on it.\n-      return compiler.getCodingConvention().isExported(var.name)\n+\n+      // Additionally, exclude global variables for now.\n+\n+      return var.isGlobal()\n+          || var.isExtern()\n+          || compiler.getCodingConvention().isExported(var.name)\n           || RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name)\n           || staleVars.contains(var);\n     }\n--- a/test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java\n+++ b/test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java\n   }\n \n   // Test object literal -> variable inlining\n+\n+  public void testObject0() {\n+    // Don't mess with global variables, that is the job of CollapseProperties.\n+    testSame(\"var a = {x:1}; f(a.x);\");\n+  }\n+\n   public void testObject1() {\n-    test(\"var a = {x:x(), y:y()}; f(a.x, a.y);\",\n+    testLocal(\"var a = {x:x(), y:y()}; f(a.x, a.y);\",\n          \"var JSCompiler_object_inline_x_0=x();\" +\n          \"var JSCompiler_object_inline_y_1=y();\" +\n          \"f(JSCompiler_object_inline_x_0, JSCompiler_object_inline_y_1);\");\n   }\n \n   public void testObject1a() {\n-    test(\"var a; a = {x:x, y:y}; f(a.x, a.y);\",\n+    testLocal(\"var a; a = {x:x, y:y}; f(a.x, a.y);\",\n          \"var JSCompiler_object_inline_x_0;\" +\n          \"var JSCompiler_object_inline_y_1;\" +\n          \"(JSCompiler_object_inline_x_0=x,\" +\n   }\n \n   public void testObject2() {\n-    test(\"var a = {y:y}; a.x = z; f(a.x, a.y);\",\n+    testLocal(\"var a = {y:y}; a.x = z; f(a.x, a.y);\",\n          \"var JSCompiler_object_inline_y_0 = y;\" +\n          \"var JSCompiler_object_inline_x_1;\" +\n          \"JSCompiler_object_inline_x_1=z;\" +\n   public void testObject3() {\n     // Inlining the 'y' would cause the 'this' to be different in the\n     // target function.\n-    testSame(\"var a = {y:y,x:x}; a.y(); f(a.x);\");\n-    testSame(\"var a; a = {y:y,x:x}; a.y(); f(a.x);\");\n+    testSameLocal(\"var a = {y:y,x:x}; a.y(); f(a.x);\");\n+    testSameLocal(\"var a; a = {y:y,x:x}; a.y(); f(a.x);\");\n   }\n \n   public void testObject4() {\n     // Object literal is escaped.\n-    testSame(\"var a = {y:y}; a.x = z; f(a.x, a.y); g(a);\");\n-    testSame(\"var a; a = {y:y}; a.x = z; f(a.x, a.y); g(a);\");\n+    testSameLocal(\"var a = {y:y}; a.x = z; f(a.x, a.y); g(a);\");\n+    testSameLocal(\"var a; a = {y:y}; a.x = z; f(a.x, a.y); g(a);\");\n   }\n \n   public void testObject5() {\n-    test(\"var a = {x:x, y:y}; var b = {a:a}; f(b.a.x, b.a.y);\",\n+    testLocal(\"var a = {x:x, y:y}; var b = {a:a}; f(b.a.x, b.a.y);\",\n          \"var a = {x:x, y:y};\" +\n          \"var JSCompiler_object_inline_a_0=a;\" +\n          \"f(JSCompiler_object_inline_a_0.x, JSCompiler_object_inline_a_0.y);\");\n   }\n \n   public void testObject6() {\n-    test(\"for (var i = 0; i < 5; i++) { var a = {i:i,x:x}; f(a.i, a.x); }\",\n+    testLocal(\"for (var i = 0; i < 5; i++) { var a = {i:i,x:x}; f(a.i, a.x); }\",\n          \"for (var i = 0; i < 5; i++) {\" +\n          \"  var JSCompiler_object_inline_i_0=i;\" +\n          \"  var JSCompiler_object_inline_x_1=x;\" +\n          \"  f(JSCompiler_object_inline_i_0,JSCompiler_object_inline_x_1)\" +\n          \"}\");\n-    test(\"if (c) { var a = {i:i,x:x}; f(a.i, a.x); }\",\n+    testLocal(\"if (c) { var a = {i:i,x:x}; f(a.i, a.x); }\",\n          \"if (c) {\" +\n          \"  var JSCompiler_object_inline_i_0=i;\" +\n          \"  var JSCompiler_object_inline_x_1=x;\" +\n   }\n \n   public void testObject7() {\n-    test(\"var a = {x:x, y:f()}; g(a.x);\",\n+    testLocal(\"var a = {x:x, y:f()}; g(a.x);\",\n       \"var JSCompiler_object_inline_x_0=x;\" +\n          \"var JSCompiler_object_inline_y_1=f();\" +\n          \"g(JSCompiler_object_inline_x_0)\");\n   }\n \n   public void testObject8() {\n-    testSame(\"var a = {x:x,y:y}; var b = {x:y}; f((c?a:b).x);\");\n-\n-    test(\"var a; if(c) { a={x:x, y:y}; } else { a={x:y}; } f(a.x);\",\n+    testSameLocal(\"var a = {x:x,y:y}; var b = {x:y}; f((c?a:b).x);\");\n+\n+    testLocal(\"var a; if(c) { a={x:x, y:y}; } else { a={x:y}; } f(a.x);\",\n          \"var JSCompiler_object_inline_x_0;\" +\n          \"var JSCompiler_object_inline_y_1;\" +\n          \"if(c) JSCompiler_object_inline_x_0=x,\" +\n          \"     JSCompiler_object_inline_y_1=void 0,\" +\n          \"     true;\" +\n          \"f(JSCompiler_object_inline_x_0)\");\n-    test(\"var a = {x:x,y:y}; var b = {x:y}; c ? f(a.x) : f(b.x);\",\n+    testLocal(\"var a = {x:x,y:y}; var b = {x:y}; c ? f(a.x) : f(b.x);\",\n          \"var JSCompiler_object_inline_x_0 = x; \" +\n          \"var JSCompiler_object_inline_y_1 = y; \" +\n          \"var JSCompiler_object_inline_x_2 = y; \" +\n \n   public void testObject9() {\n     // There is a call, so no inlining\n-    testSame(\"function f(a,b) {\" +\n+    testSameLocal(\"function f(a,b) {\" +\n              \"  var x = {a:a,b:b}; x.a(); return x.b;\" +\n              \"}\");\n \n-    test(\"function f(a,b) {\" +\n+    testLocal(\"function f(a,b) {\" +\n          \"  var x = {a:a,b:b}; g(x.a); x = {a:a,b:2}; return x.b;\" +\n          \"}\",\n          \"function f(a,b) {\" +\n          \"  return JSCompiler_object_inline_b_1\" +\n          \"}\");\n \n-    test(\"function f(a,b) { \" +\n+    testLocal(\"function f(a,b) { \" +\n          \"  var x = {a:a,b:b}; g(x.a); x.b = x.c = 2; return x.b; \" +\n          \"}\",\n          \"function f(a,b) { \" +\n   }\n \n   public void testObject10() {\n-    test(\"var x; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b);\",\n+    testLocal(\"var x; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b);\",\n          \"var JSCompiler_object_inline_a_0;\" +\n          \"var JSCompiler_object_inline_b_1;\" +\n          \"var b = f();\" +\n          \"JSCompiler_object_inline_a_0=a,JSCompiler_object_inline_b_1=b,true;\" +\n          \"if(JSCompiler_object_inline_a_0) g(JSCompiler_object_inline_b_1)\");\n-    test(\"var x = {}; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b) + x.c\",\n+    testLocal(\"var x = {}; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b) + x.c\",\n          \"var JSCompiler_object_inline_a_0;\" +\n          \"var JSCompiler_object_inline_b_1;\" +\n          \"var JSCompiler_object_inline_c_2;\" +\n          \"  JSCompiler_object_inline_c_2=void 0,true;\" +\n          \"if(JSCompiler_object_inline_a_0) \" +\n          \"  g(JSCompiler_object_inline_b_1) + JSCompiler_object_inline_c_2\");\n-    test(\"var x; var b = f(); x = {a:a, b:b}; x.c = c; if(x.a) g(x.b) + x.c\",\n+    testLocal(\"var x; var b = f(); x = {a:a, b:b}; x.c = c; if(x.a) g(x.b) + x.c\",\n          \"var JSCompiler_object_inline_a_0;\" +\n          \"var JSCompiler_object_inline_b_1;\" +\n          \"var JSCompiler_object_inline_c_2;\" +\n          \"JSCompiler_object_inline_c_2 = c;\" +\n          \"if (JSCompiler_object_inline_a_0)\" +\n          \"  g(JSCompiler_object_inline_b_1) + JSCompiler_object_inline_c_2;\");\n-    test(\"var x = {a:a}; if (b) x={b:b}; f(x.a||x.b);\",\n+    testLocal(\"var x = {a:a}; if (b) x={b:b}; f(x.a||x.b);\",\n          \"var JSCompiler_object_inline_a_0 = a;\" +\n          \"var JSCompiler_object_inline_b_1;\" +\n          \"if(b) JSCompiler_object_inline_b_1 = b,\" +\n          \"      JSCompiler_object_inline_a_0 = void 0,\" +\n          \"      true;\" +\n          \"f(JSCompiler_object_inline_a_0 || JSCompiler_object_inline_b_1)\");\n-    test(\"var x; var y = 5; x = {a:a, b:b, c:c}; if (b) x={b:b}; f(x.a||x.b);\",\n+    testLocal(\"var x; var y = 5; x = {a:a, b:b, c:c}; if (b) x={b:b}; f(x.a||x.b);\",\n          \"var JSCompiler_object_inline_a_0;\" +\n          \"var JSCompiler_object_inline_b_1;\" +\n          \"var JSCompiler_object_inline_c_2;\" +\n   }\n \n   public void testObject11() {\n-    testSame(\"var x = {a:b}; (x = {a:a}).c = 5; f(x.a);\");\n-    testSame(\"var x = {a:a}; f(x[a]); g(x[a]);\");\n+    testSameLocal(\"var x = {a:b}; (x = {a:a}).c = 5; f(x.a);\");\n+    testSameLocal(\"var x = {a:a}; f(x[a]); g(x[a]);\");\n   }\n \n   public void testObject12() {\n-    test(\"var a; a = {x:1, y:2}; f(a.x, a.y2);\",\n+    testLocal(\"var a; a = {x:1, y:2}; f(a.x, a.y2);\",\n          \"var JSCompiler_object_inline_x_0;\" +\n          \"var JSCompiler_object_inline_y_1;\" +\n          \"var JSCompiler_object_inline_y2_2;\" +\n   }\n \n   public void testObject13() {\n-    testSame(\"var x = {a:1, b:2}; x = {a:3, b:x.a};\");\n+    testSameLocal(\"var x = {a:1, b:2}; x = {a:3, b:x.a};\");\n   }\n \n   public void testObject14() {\n-    testSame(\"var x = {a:1}; if ('a' in x) { f(); }\");\n-    testSame(\"var x = {a:1}; for (var y in x) { f(y); }\");\n+    testSameLocal(\"var x = {a:1}; if ('a' in x) { f(); }\");\n+    testSameLocal(\"var x = {a:1}; for (var y in x) { f(y); }\");\n   }\n \n   public void testObject15() {\n-    testSame(\"x = x || {}; f(x.a);\");\n+    testSameLocal(\"x = x || {}; f(x.a);\");\n   }\n \n   public void testObject16() {\n-    test(\"function f(e) { bar(); x = {a: foo()}; var x; print(x.a); }\",\n+    testLocal(\"function f(e) { bar(); x = {a: foo()}; var x; print(x.a); }\",\n          \"function f(e) { \" +\n          \"  var JSCompiler_object_inline_a_0;\" +\n          \"  bar();\" +\n   public void testObject17() {\n     // Note: Some day, with careful analysis, these two uses could be\n     // disambiguated, and the second assignment could be inlined.\n-    testSame(\n+    testSameLocal(\n       \"var a = {a: function(){}};\" +\n       \"a.a();\" +\n       \"a = {a1: 100};\" +\n   }\n \n   public void testObject18() {\n-    testSame(\"var a,b; b=a={x:x, y:y}; f(b.x);\");\n+    testSameLocal(\"var a,b; b=a={x:x, y:y}; f(b.x);\");\n   }\n \n   public void testObject19() {\n-    testSame(\"var a,b; if(c) { b=a={x:x, y:y}; } else { b=a={x:y}; } f(b.x);\");\n+    testSameLocal(\"var a,b; if(c) { b=a={x:x, y:y}; } else { b=a={x:y}; } f(b.x);\");\n   }\n \n   public void testObject20() {\n-    testSame(\"var a,b; if(c) { b=a={x:x, y:y}; } else { b=a={x:y}; } f(a.x);\");\n+    testSameLocal(\"var a,b; if(c) { b=a={x:x, y:y}; } else { b=a={x:y}; } f(a.x);\");\n   }\n \n   public void testObject21() {\n-    testSame(\"var a,b; b=a={x:x, y:y};\");\n-    testSame(\"var a,b; if(c) { b=a={x:x, y:y}; }\" +\n+    testSameLocal(\"var a,b; b=a={x:x, y:y};\");\n+    testSameLocal(\"var a,b; if(c) { b=a={x:x, y:y}; }\" +\n              \"else { b=a={x:y}; } f(a.x); f(b.x)\");\n-    testSame(\"var a, b; if(c) { if (a={x:x, y:y}) f(); } \" +\n+    testSameLocal(\"var a, b; if(c) { if (a={x:x, y:y}) f(); } \" +\n              \"else { b=a={x:y}; } f(a.x);\");\n-    testSame(\"var a,b; b = (a = {x:x, y:x});\");\n-    testSame(\"var a,b; a = {x:x, y:x}; b = a\");\n-    testSame(\"var a,b; a = {x:x, y:x}; b = x || a\");\n-    testSame(\"var a,b; a = {x:x, y:x}; b = y && a\");\n-    testSame(\"var a,b; a = {x:x, y:x}; b = y ? a : a\");\n-    testSame(\"var a,b; a = {x:x, y:x}; b = y , a\");\n-    testSame(\"b = x || (a = {x:1, y:2});\");\n+    testSameLocal(\"var a,b; b = (a = {x:x, y:x});\");\n+    testSameLocal(\"var a,b; a = {x:x, y:x}; b = a\");\n+    testSameLocal(\"var a,b; a = {x:x, y:x}; b = x || a\");\n+    testSameLocal(\"var a,b; a = {x:x, y:x}; b = y && a\");\n+    testSameLocal(\"var a,b; a = {x:x, y:x}; b = y ? a : a\");\n+    testSameLocal(\"var a,b; a = {x:x, y:x}; b = y , a\");\n+    testSameLocal(\"b = x || (a = {x:1, y:2});\");\n   }\n \n   public void testObject22() {\n-    test(\"while(1) { var a = {y:1}; if (b) a.x = 2; f(a.y, a.x);}\",\n+    testLocal(\"while(1) { var a = {y:1}; if (b) a.x = 2; f(a.y, a.x);}\",\n       \"for(;1;){\" +\n       \" var JSCompiler_object_inline_y_0=1;\" +\n       \" var JSCompiler_object_inline_x_1;\" +\n       \" f(JSCompiler_object_inline_y_0,JSCompiler_object_inline_x_1)\" +\n       \"}\");\n \n-    test(\"var a; while (1) { f(a.x, a.y); a = {x:1, y:1};}\",\n+    testLocal(\"var a; while (1) { f(a.x, a.y); a = {x:1, y:1};}\",\n       \"var JSCompiler_object_inline_x_0;\" +\n       \"var JSCompiler_object_inline_y_1;\" +\n       \"for(;1;) {\" +\n   }\n \n   public void testObject23() {\n-    test(\"function f() {\\n\" +\n+    testLocal(\"function f() {\\n\" +\n          \"  var templateData = {\\n\" +\n          \"    linkIds: {\\n\" +\n          \"      CHROME: 'cl',\\n\" +\n   }\n \n   public void testObject24() {\n-    test(\"function f() {\\n\" +\n+    testLocal(\"function f() {\\n\" +\n          \"  var linkIds = {\\n\" +\n          \"      CHROME: 1,\\n\" +\n          \"  };\\n\" +\n   }\n \n   public void testObject25() {\n-    test(\"var a = {x:f(), y:g()}; a = {y:g(), x:f()}; f(a.x, a.y);\",\n+    testLocal(\"var a = {x:f(), y:g()}; a = {y:g(), x:f()}; f(a.x, a.y);\",\n          \"var JSCompiler_object_inline_x_0=f();\" +\n          \"var JSCompiler_object_inline_y_1=g();\" +\n          \"JSCompiler_object_inline_y_1=g(),\" +\n          \"  true;\" +\n          \"f(JSCompiler_object_inline_x_0,JSCompiler_object_inline_y_1)\");\n   }\n+\n+  public void testObject26() {\n+    testLocal(\"var a = {}; a.b = function() {}; new a.b.c\",\n+         \"var JSCompiler_object_inline_b_0;\" +\n+         \"JSCompiler_object_inline_b_0=function(){};\" +\n+         \"new JSCompiler_object_inline_b_0.c\");\n+  }\n+\n+  private final String LOCAL_PREFIX = \"function local(){\";\n+  private final String LOCAL_POSTFIX = \"}\";\n+\n+  private void testLocal(String code, String result) {\n+    test(LOCAL_PREFIX + code + LOCAL_POSTFIX,\n+         LOCAL_PREFIX + result + LOCAL_POSTFIX);\n+  }\n+\n+  private void testSameLocal(String code) {\n+    testLocal(code, code);\n+  }\n }", "timestamp": 1308859609, "metainfo": ""}