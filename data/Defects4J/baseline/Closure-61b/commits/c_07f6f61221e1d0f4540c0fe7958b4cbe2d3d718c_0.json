{"sha": "07f6f61221e1d0f4540c0fe7958b4cbe2d3d718c", "log": "Remove unused constant. (John) R=robert DELTA=2  (0 added, 2 deleted, 0 changed)  Add the column number to the \"toString\" version of the error text. (John) R=robert DELTA=2  (1 added, 0 deleted, 1 changed)  make some stuff public. (Nick) R=alan DELTA=6  (0 added, 0 deleted, 6 changed)  Opensource gmaps2.js so we can merge in an external contributor's changes. (Alan) R=nick DELTA=16  (15 added, 0 deleted, 1 changed)  Revision created by MOE tool push_codebase. MOE_MIGRATION=   ", "commit": "\n--- a/src/com/google/javascript/jscomp/DiagnosticGroups.java\n+++ b/src/com/google/javascript/jscomp/DiagnosticGroups.java\n  */\n public class DiagnosticGroups {\n \n-  DiagnosticGroups() {}\n+  public DiagnosticGroups() {}\n \n   private final static Map<String, DiagnosticGroup> groupsByName =\n       Maps.newHashMap();\n--- a/src/com/google/javascript/jscomp/DotFormatter.java\n+++ b/src/com/google/javascript/jscomp/DotFormatter.java\n  *\n *\n  */\n-class DotFormatter {\n+public class DotFormatter {\n   private static final String INDENT = \"  \";\n   private static final String ARROW = \" -> \";\n   private static final String LINE = \" -- \";\n    * @param printAnnotations print annotations.\n    * @return the dot representation of the AST\n    */\n-  public static String toDot(\n+  static String toDot(\n       Node n, ControlFlowGraph<Node> inCFG, boolean printAnnotations)\n       throws IOException  {\n     StringBuilder builder = new StringBuilder();\n     new DotFormatter(n, inCFG, builder, printAnnotations);\n     return builder.toString();\n   }\n-  \n+\n   /**\n    * Converts an AST to dot representation.\n    * @param n the root of the AST described in the dot formatted string\n    * @param inCFG Control Flow Graph.\n    * @return the dot representation of the AST\n    */\n-  public static String toDot(Node n, ControlFlowGraph<Node> inCFG)\n+  static String toDot(Node n, ControlFlowGraph<Node> inCFG)\n       throws IOException  {\n     StringBuilder builder = new StringBuilder();\n     new DotFormatter(n, inCFG, builder, false);\n    * @param inCFG Control Flow Graph.\n    * @param builder A place to dump the graph.\n    */\n-  public static void appendDot(Node n, ControlFlowGraph<Node> inCFG,\n+  static void appendDot(Node n, ControlFlowGraph<Node> inCFG,\n       Appendable builder) throws IOException {\n     new DotFormatter(n, inCFG, builder, false);\n   }\n \n     // Flow Edges\n     if (cfg != null && cfg.hasNode(parent)) {\n-      List<DiGraphEdge<Node, Branch>> outEdges = \n+      List<DiGraphEdge<Node, Branch>> outEdges =\n         cfg.getOutEdges(parent);\n       String[] edgeList = new String[outEdges.size()];\n       for (int i = 0; i < edgeList.length; i++) {\n         DiGraphEdge<Node, ControlFlowGraph.Branch> edge = outEdges.get(i);\n         DiGraphNode<Node, Branch> succ = edge.getDestination();\n-        \n+\n         String toNode = null;\n         if (succ == cfg.getImplicitReturn()) {\n           toNode = \"RETURN\";\n         } else {\n-          int keySucc = key(succ.getValue()); \n+          int keySucc = key(succ.getValue());\n           toNode = formatNodeName(keySucc);\n         }\n-                \n-        edgeList[i] = formatNodeName(keyParent) + ARROW + toNode + \" [label=\\\"\" \n+\n+        edgeList[i] = formatNodeName(keyParent) + ARROW + toNode + \" [label=\\\"\"\n           + edge.getValue().toString() + \"\\\", \" + \"fontcolor=\\\"red\\\", \" +\n           \"weight=0.01, color=\\\"red\\\"];\\n\";\n       }\n-      \n+\n       Arrays.sort(edgeList);\n-      \n+\n       for (int i = 0; i < edgeList.length; i++) {\n           builder.append(INDENT);\n           builder.append(edgeList[i]);\n \n   /**\n    * Outputs a string in DOT format that presents the graph.\n-   * \n+   *\n    * @param graph Input graph.\n    * @return A string in Dot format that presents the graph.\n    */\n-  public static String toDot(GraphvizGraph graph) { \n+  public static String toDot(GraphvizGraph graph) {\n     StringBuilder builder = new StringBuilder ();\n     builder.append(graph.isDirected() ? \"digraph\" : \"graph\");\n     builder.append(INDENT);\n     builder.append(\"node [color=lightblue2, style=filled];\\n\");\n \n     final String edgeSymbol = graph.isDirected() ? ARROW : LINE;\n-    \n+\n     List<GraphvizNode> nodes = graph.getGraphvizNodes();\n-    \n+\n     String[] nodeNames = new String[nodes.size()];\n-    \n+\n     for (int i = 0; i < nodeNames.length; i++) {\n       GraphvizNode gNode = nodes.get(i);\n-      nodeNames[i] = gNode.getId() + \" [label=\\\"\" + gNode.getLabel() + \n+      nodeNames[i] = gNode.getId() + \" [label=\\\"\" + gNode.getLabel() +\n           \"\\\" color=\\\"\" + gNode.getColor() + \"\\\"]\";\n     }\n-    \n+\n     // We sort the nodes so we get a deterministic output every time regardless\n     // of the implementation of the graph data structure.\n     Arrays.sort(nodeNames);\n-    \n+\n     for (String nodeName : nodeNames) {\n       builder.append(INDENT);\n       builder.append(nodeName);\n     }\n \n     List<GraphvizEdge> edges = graph.getGraphvizEdges();\n-    \n+\n     String[] edgeNames = new String[edges.size()];\n-    \n+\n     for (int i = 0; i < edgeNames.length; i++) {\n       GraphvizEdge edge = edges.get(i);\n       edgeNames[i] = edge.getNode1Id() + edgeSymbol + edge.getNode2Id();\n     }\n-    \n+\n     // Again, we sort the edges as well.\n     Arrays.sort(edgeNames);\n-    \n+\n     for (String edgeName : edgeNames) {\n       builder.append(INDENT);\n       builder.append(edgeName);\n--- a/src/com/google/javascript/jscomp/JSError.java\n+++ b/src/com/google/javascript/jscomp/JSError.java\n     return type.key + \". \" + description + \" at \" +\n       (sourceName != null && sourceName.length() > 0 ?\n        sourceName : \"(unknown source)\") + \" line \" +\n-      (lineNumber != -1 ? String.valueOf(lineNumber) : \"(unknown line)\");\n+      (lineNumber != -1 ? String.valueOf(lineNumber) : \"(unknown line)\") +\n+      \" : \" + (charno != -1 ? String.valueOf(charno) : \"(unknown column)\");\n   }\n \n   /**\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n         \"Object\",\n         \"RegExp\",\n         \"XMLHttpRequest\"));\n-\n-  public static final String CONSTANT_MARKER = \"$$constant\";\n \n   // Utility class; do not instantiate.\n   private NodeUtil() {}", "timestamp": 1269581747, "metainfo": ""}