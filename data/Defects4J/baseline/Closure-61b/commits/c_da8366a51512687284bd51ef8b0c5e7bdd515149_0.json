{"sha": "da8366a51512687284bd51ef8b0c5e7bdd515149", "log": "Correct the code flow when a break or continue is used from within a finally block.  R=acleung DELTA=404  (350 added, 0 deleted, 54 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1135   ", "commit": "\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n       label = node.getFirstChild().getString();\n     }\n     Node cur;\n+    Node previous = null;\n     Node lastJump;\n     Node parent = node.getParent();\n     /*\n     for (cur = node, lastJump = node;\n         !isBreakTarget(cur, label);\n         cur = parent, parent = parent.getParent()) {\n-      if (cur.getType() == Token.TRY && NodeUtil.hasFinally(cur)) {\n+      if (cur.getType() == Token.TRY && NodeUtil.hasFinally(cur)\n+          && cur.getLastChild() != previous) {\n         if (lastJump == node) {\n           createEdge(lastJump, Branch.UNCOND, computeFallThrough(\n               cur.getLastChild()));\n         lastJump = cur;\n       }\n       Preconditions.checkState(parent != null, \"Cannot find break target.\");\n+      previous = cur;\n     }\n     if (lastJump == node) {\n       createEdge(lastJump, Branch.UNCOND, computeFollowNode(cur, this));\n       label = node.getFirstChild().getString();\n     }\n     Node cur;\n+    Node previous = null;\n     Node lastJump;\n+\n     // Similar to handBreak's logic with a few minor variation.\n     Node parent = node.getParent();\n     for (cur = node, lastJump = node;\n         !isContinueTarget(cur, parent, label);\n         cur = parent, parent = parent.getParent()) {\n-      if (cur.getType() == Token.TRY && NodeUtil.hasFinally(cur)) {\n+      if (cur.getType() == Token.TRY && NodeUtil.hasFinally(cur)\n+          && cur.getLastChild() != previous) {\n         if (lastJump == node) {\n           createEdge(lastJump, Branch.UNCOND, cur.getLastChild());\n         } else {\n         lastJump = cur;\n       }\n       Preconditions.checkState(parent != null, \"Cannot find continue target.\");\n+      previous = cur;\n     }\n     Node iter = cur;\n     if (cur.getChildCount() == 4) {\n--- a/test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java\n+++ b/test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java\n         + \"  node4 [label=\\\"NAME\\\"];\\n\"\n         + \"  node3 -> node4 [weight=1];\\n\"\n         + \"  node5 [label=\\\"BLOCK\\\"];\\n\"\n-        + \"  node3 -> node5 [label=\\\"ON_EX\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node3 -> node5 [label=\\\"ON_EX\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n         + \"  node6 [label=\\\"EXPR_RESULT\\\"];\\n\"\n         + \"  node2 -> node6 [weight=1];\\n\"\n         + \"  node7 [label=\\\"CALL\\\"];\\n\"\n         + \"  node8 [label=\\\"NAME\\\"];\\n\"\n         + \"  node7 -> node8 [weight=1];\\n\"\n         + \"  node9 [label=\\\"EXPR_RESULT\\\"];\\n\"\n-        + \"  node6 -> node5 [label=\\\"ON_EX\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node6 -> node9 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node6 -> node5 [label=\\\"ON_EX\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node6 -> node9 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n         + \"  node2 -> node9 [weight=1];\\n\"\n         + \"  node10 [label=\\\"GETELEM\\\"];\\n\"\n         + \"  node9 -> node10 [weight=1];\\n\"\n         + \"  node12 [label=\\\"STRING\\\"];\\n\"\n         + \"  node10 -> node12 [weight=1];\\n\"\n         + \"  node13 [label=\\\"EXPR_RESULT\\\"];\\n\"\n-        + \"  node9 -> node13 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node9 -> node5 [label=\\\"ON_EX\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node9 -> node13 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node9 -> node5 [label=\\\"ON_EX\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n         + \"  node2 -> node13 [weight=1];\\n\"\n         + \"  node14 [label=\\\"GETPROP\\\"];\\n\"\n         + \"  node13 -> node14 [weight=1];\\n\"\n         + \"  node16 [label=\\\"STRING\\\"];\\n\"\n         + \"  node14 -> node16 [weight=1];\\n\"\n         + \"  node17 [label=\\\"EXPR_RESULT\\\"];\\n\"\n-        + \"  node13 -> node17 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node13 -> node5 [label=\\\"ON_EX\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node13 -> node17 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node13 -> node5 [label=\\\"ON_EX\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n         + \"  node2 -> node17 [weight=1];\\n\"\n         + \"  node18 [label=\\\"NAME\\\"];\\n\"\n         + \"  node17 -> node18 [weight=1];\\n\"\n-        + \"  node17 -> RETURN [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node2 -> node3 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node17 -> RETURN [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node2 -> node3 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n         + \"  node1 -> node5 [weight=1];\\n\"\n         + \"  node19 [label=\\\"CATCH\\\"];\\n\"\n         + \"  node5 -> node19 [weight=1];\\n\"\n         + \"  node22 -> node23 [weight=1];\\n\"\n         + \"  node24 [label=\\\"NAME\\\"];\\n\"\n         + \"  node23 -> node24 [weight=1];\\n\"\n-        + \"  node22 -> RETURN [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node21 -> node22 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node19 -> node21 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node5 -> node19 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node1 -> node2 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node0 -> node1 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node22 -> RETURN [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node21 -> node22 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node19 -> node21 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node5 -> node19 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node1 -> node2 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node0 -> node1 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n         + \"}\\n\";\n     testCfg(src, expected);\n   }\n         + \"  node6 -> node7 [weight=1];\\n\"\n         + \"  node8 [label=\\\"NUMBER\\\"];\\n\"\n         + \"  node7 -> node8 [weight=1];\\n\"\n-        + \"  node6 -> node7 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node3 -> node6 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node2 -> RETURN [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node6 -> node7 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node3 -> node6 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node2 -> RETURN [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n         + \"  node9 [label=\\\"BLOCK\\\"];\\n\"\n         + \"  node1 -> node9 [weight=1];\\n\"\n         + \"  node10 [label=\\\"CATCH\\\"];\\n\"\n         + \"  node10 -> node11 [weight=1];\\n\"\n         + \"  node12 [label=\\\"BLOCK\\\"];\\n\"\n         + \"  node10 -> node12 [weight=1];\\n\"\n-        + \"  node12 -> RETURN [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node10 -> node12 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node9 -> node10 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node1 -> node2 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node0 -> node1 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node12 -> RETURN [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node10 -> node12 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node9 -> node10 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node1 -> node2 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node0 -> node1 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n         + \"}\\n\";\n     testCfg(src, expected);\n   }\n         + \"  node6 [label=\\\"NUMBER\\\"];\\n\"\n         + \"  node5 -> node6 [weight=1];\\n\"\n         + \"  node7 [label=\\\"BLOCK\\\"];\\n\"\n-        + \"  node5 -> node7 [label=\\\"ON_EX\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node4 -> node5 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node5 -> node7 [label=\\\"ON_EX\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node4 -> node5 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n         + \"  node3 -> node7 [weight=1];\\n\"\n         + \"  node8 [label=\\\"CATCH\\\"];\\n\"\n         + \"  node7 -> node8 [weight=1];\\n\"\n         + \"  node12 [label=\\\"NUMBER\\\"];\\n\"\n         + \"  node11 -> node12 [weight=1];\\n\"\n         + \"  node13 [label=\\\"BLOCK\\\"];\\n\"\n-        + \"  node11 -> node13 [label=\\\"ON_EX\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node10 -> node11 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node8 -> node10 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node7 -> node8 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node3 -> node4 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node2 -> node3 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node11 -> node13 [label=\\\"ON_EX\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node10 -> node11 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node8 -> node10 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node7 -> node8 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node3 -> node4 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node2 -> node3 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n         + \"  node1 -> node13 [weight=1];\\n\"\n         + \"  node14 [label=\\\"CATCH\\\"];\\n\"\n         + \"  node13 -> node14 [weight=1];\\n\"\n         + \"  node14 -> node15 [weight=1];\\n\"\n         + \"  node16 [label=\\\"BLOCK\\\"];\\n\"\n         + \"  node14 -> node16 [weight=1];\\n\"\n-        + \"  node16 -> RETURN [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node14 -> node16 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node13 -> node14 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node1 -> node2 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node0 -> node1 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node16 -> RETURN [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node14 -> node16 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node13 -> node14 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node1 -> node2 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node0 -> node1 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n         + \"}\\n\";\n     testCfg(src, expected);\n   }\n         + \"  node7 [label=\\\"NUMBER\\\"];\\n\"\n         + \"  node6 -> node7 [weight=1];\\n\"\n         + \"  node8 [label=\\\"BLOCK\\\"];\\n\"\n-        + \"  node6 -> node8 [label=\\\"ON_EX\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node5 -> node6 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node6 -> node8 [label=\\\"ON_EX\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node5 -> node6 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n         + \"  node9 [label=\\\"BLOCK\\\"];\\n\"\n         + \"  node3 -> node9 [weight=1];\\n\"\n         + \"  node10 [label=\\\"EXPR_RESULT\\\"];\\n\"\n         + \"  node11 [label=\\\"NAME\\\"];\\n\"\n         + \"  node10 -> node11 [weight=1];\\n\"\n         + \"  node12 [label=\\\"BLOCK\\\"];\\n\"\n-        + \"  node10 -> node12 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node9 -> node10 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node3 -> node5 [label=\\\"ON_TRUE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node3 -> node9 [label=\\\"ON_FALSE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node2 -> node3 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node10 -> node12 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node9 -> node10 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node3 -> node5 [label=\\\"ON_TRUE\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node3 -> node9 [label=\\\"ON_FALSE\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node2 -> node3 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n         + \"  node1 -> node8 [weight=1];\\n\"\n         + \"  node13 [label=\\\"CATCH\\\"];\\n\"\n         + \"  node8 -> node13 [weight=1];\\n\"\n         + \"  node15 -> node16 [weight=1];\\n\"\n         + \"  node17 [label=\\\"NAME\\\"];\\n\"\n         + \"  node16 -> node17 [weight=1];\\n\"\n-        + \"  node16 -> node12 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node15 -> node16 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node13 -> node15 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node8 -> node13 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node16 -> node12 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node15 -> node16 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node13 -> node15 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node8 -> node13 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n         + \"  node1 -> node12 [weight=1];\\n\"\n         + \"  node18 [label=\\\"EXPR_RESULT\\\"];\\n\"\n         + \"  node12 -> node18 [weight=1];\\n\"\n         + \"  node19 [label=\\\"NAME\\\"];\\n\"\n         + \"  node18 -> node19 [weight=1];\\n\"\n-        + \"  node18 -> RETURN [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node12 -> node18 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node1 -> node2 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n-        + \"  node0 -> node1 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node18 -> RETURN [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node12 -> node18 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node1 -> node2 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node0 -> node1 [label=\\\"UNCOND\\\", \" +\n+                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n         + \"}\\n\";\n     testCfg(src, expected);\n   }\n   public void testLabelledForInLoopOrder() {\n     assertNodeOrder(\n         createCfg(\"var i = 0; var y = {}; \" +\n-            \"label: for (var x in y) { if (x) { break label; } else { i++ } x(); }\"),\n+            \"label: for (var x in y) { \" +\n+            \"    if (x) { break label; } else { i++ } x(); }\"),\n         Lists.newArrayList(\n             Token.SCRIPT, Token.VAR, Token.VAR,\n             Token.FOR, Token.BLOCK,\n         Lists.newArrayList(\n             Token.SCRIPT, Token.BLOCK, Token.VAR, Token.DO, Token.EXPR_RESULT));\n   }\n+\n+  public void testBreakInFinally1() {\n+    String src =\n+        \"f = function() {\\n\" +\n+        \"  var action;\\n\" +\n+        \"  a: {\\n\" +\n+        \"    var proto = null;\\n\" +\n+        \"    try {\\n\" +\n+        \"      proto = new Proto\\n\" +\n+        \"    } finally {\\n\" +\n+        \"      action = proto;\\n\" +\n+        \"      break a\\n\" +  // Remove this...\n+        \"    }\\n\" +\n+        \"  }\\n\" +\n+        \"  alert(action)\\n\" + // but not this.\n+        \"};\";\n+    String expected =\n+        \"digraph AST {\\n\" +\n+        \"  node [color=lightblue2, style=filled];\\n\" +\n+        \"  node0 [label=\\\"SCRIPT\\\"];\\n\" +\n+        \"  node1 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n+        \"  node0 -> node1 [weight=1];\\n\" +\n+        \"  node2 [label=\\\"ASSIGN\\\"];\\n\" +\n+        \"  node1 -> node2 [weight=1];\\n\" +\n+        \"  node3 [label=\\\"NAME\\\"];\\n\" +\n+        \"  node2 -> node3 [weight=1];\\n\" +\n+        \"  node4 [label=\\\"FUNCTION\\\"];\\n\" +\n+        \"  node2 -> node4 [weight=1];\\n\" +\n+        \"  node5 [label=\\\"NAME\\\"];\\n\" +\n+        \"  node4 -> node5 [weight=1];\\n\" +\n+        \"  node6 [label=\\\"LP\\\"];\\n\" +\n+        \"  node4 -> node6 [weight=1];\\n\" +\n+        \"  node7 [label=\\\"BLOCK\\\"];\\n\" +\n+        \"  node4 -> node7 [weight=1];\\n\" +\n+        \"  node8 [label=\\\"VAR\\\"];\\n\" +\n+        \"  node7 -> node8 [weight=1];\\n\" +\n+        \"  node9 [label=\\\"NAME\\\"];\\n\" +\n+        \"  node8 -> node9 [weight=1];\\n\" +\n+        \"  node10 [label=\\\"LABEL\\\"];\\n\" +\n+        \"  node7 -> node10 [weight=1];\\n\" +\n+        \"  node11 [label=\\\"LABEL_NAME\\\"];\\n\" +\n+        \"  node10 -> node11 [weight=1];\\n\" +\n+        \"  node12 [label=\\\"BLOCK\\\"];\\n\" +\n+        \"  node10 -> node12 [weight=1];\\n\" +\n+        \"  node13 [label=\\\"VAR\\\"];\\n\" +\n+        \"  node12 -> node13 [weight=1];\\n\" +\n+        \"  node14 [label=\\\"NAME\\\"];\\n\" +\n+        \"  node13 -> node14 [weight=1];\\n\" +\n+        \"  node15 [label=\\\"NULL\\\"];\\n\" +\n+        \"  node14 -> node15 [weight=1];\\n\" +\n+        \"  node16 [label=\\\"TRY\\\"];\\n\" +\n+        \"  node12 -> node16 [weight=1];\\n\" +\n+        \"  node17 [label=\\\"BLOCK\\\"];\\n\" +\n+        \"  node16 -> node17 [weight=1];\\n\" +\n+        \"  node18 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n+        \"  node17 -> node18 [weight=1];\\n\" +\n+        \"  node19 [label=\\\"ASSIGN\\\"];\\n\" +\n+        \"  node18 -> node19 [weight=1];\\n\" +\n+        \"  node20 [label=\\\"NAME\\\"];\\n\" +\n+        \"  node19 -> node20 [weight=1];\\n\" +\n+        \"  node21 [label=\\\"NEW\\\"];\\n\" +\n+        \"  node19 -> node21 [weight=1];\\n\" +\n+        \"  node22 [label=\\\"NAME\\\"];\\n\" +\n+        \"  node21 -> node22 [weight=1];\\n\" +\n+        \"  node23 [label=\\\"BLOCK\\\"];\\n\" +\n+        \"  node16 -> node23 [weight=1];\\n\" +\n+        \"  node24 [label=\\\"BLOCK\\\"];\\n\" +\n+        \"  node16 -> node24 [weight=1];\\n\" +\n+        \"  node25 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n+        \"  node24 -> node25 [weight=1];\\n\" +\n+        \"  node26 [label=\\\"ASSIGN\\\"];\\n\" +\n+        \"  node25 -> node26 [weight=1];\\n\" +\n+        \"  node27 [label=\\\"NAME\\\"];\\n\" +\n+        \"  node26 -> node27 [weight=1];\\n\" +\n+        \"  node28 [label=\\\"NAME\\\"];\\n\" +\n+        \"  node26 -> node28 [weight=1];\\n\" +\n+        \"  node29 [label=\\\"BREAK\\\"];\\n\" +\n+        \"  node24 -> node29 [weight=1];\\n\" +\n+        \"  node30 [label=\\\"LABEL_NAME\\\"];\\n\" +\n+        \"  node29 -> node30 [weight=1];\\n\" +\n+        \"  node31 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n+        \"  node7 -> node31 [weight=1];\\n\" +\n+        \"  node32 [label=\\\"CALL\\\"];\\n\" +\n+        \"  node31 -> node32 [weight=1];\\n\" +\n+        \"  node33 [label=\\\"NAME\\\"];\\n\" +\n+        \"  node32 -> node33 [weight=1];\\n\" +\n+        \"  node34 [label=\\\"NAME\\\"];\\n\" +\n+        \"  node32 -> node34 [weight=1];\\n\" +\n+        \"  node1 -> RETURN [label=\\\"UNCOND\\\", \" +\n+            \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n+        \"  node0 -> node1 [label=\\\"UNCOND\\\", \" +\n+            \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n+        \"}\\n\";\n+    testCfg(src, expected);\n+  }\n+\n+  public void testBreakInFinally2() {\n+    String src =\n+      \"var action;\\n\" +\n+      \"a: {\\n\" +\n+      \"  var proto = null;\\n\" +\n+      \"  try {\\n\" +\n+      \"    proto = new Proto\\n\" +\n+      \"  } finally {\\n\" +\n+      \"    action = proto;\\n\" +\n+      \"    break a\\n\" +\n+      \"  }\\n\" +\n+      \"}\\n\" +\n+      \"alert(action)\\n\";\n+\n+    ControlFlowGraph<Node> cfg = createCfg(src);\n+    assertCrossEdge(cfg, Token.BREAK, Token.EXPR_RESULT, Branch.UNCOND);\n+    assertNoEdge(cfg, Token.BREAK, Token.BLOCK);\n+  }\n+\n \n   /**\n    * Asserts the priority order of CFG nodes.\n--- a/test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java\n+++ b/test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java\n          \"  }\\n\" +\n          \"}\");\n   }\n+\n+  public void testIssue4177428a() {\n+    test(\n+        \"f = function() {\\n\" +\n+        \"  var action;\\n\" +\n+        \"  a: {\\n\" +\n+        \"    var proto = null;\\n\" +\n+        \"    try {\\n\" +\n+        \"      proto = new Proto\\n\" +\n+        \"    } finally {\\n\" +\n+        \"      action = proto;\\n\" +\n+        \"      break a\\n\" +  // Remove this...\n+        \"    }\\n\" +\n+        \"  }\\n\" +\n+        \"  alert(action)\\n\" + // but not this.\n+        \"};\",\n+        \"f = function() {\\n\" +\n+        \"  var action;\\n\" +\n+        \"  a: {\\n\" +\n+        \"    var proto = null;\\n\" +\n+        \"    try {\\n\" +\n+        \"      proto = new Proto\\n\" +\n+        \"    } finally {\\n\" +\n+        \"      action = proto;\\n\" +\n+        \"    }\\n\" +\n+        \"  }\\n\" +\n+        \"  alert(action)\\n\" +  // but not this.\n+        \"};\"\n+        );\n+  }\n+\n+  public void testIssue4177428b() {\n+    test(\n+        \"f = function() {\\n\" +\n+        \"  var action;\\n\" +\n+        \"  a: {\\n\" +\n+        \"    var proto = null;\\n\" +\n+        \"    try {\\n\" +\n+        \"    try {\\n\" +\n+        \"      proto = new Proto\\n\" +\n+        \"    } finally {\\n\" +\n+        \"      action = proto;\\n\" +\n+        \"      break a\\n\" +  // Remove this...\n+        \"    }\\n\" +\n+        \"    } finally {\\n\" +\n+        \"    }\\n\" +\n+        \"  }\\n\" +\n+        \"  alert(action)\\n\" + // but not this.\n+        \"};\",\n+        \"f = function() {\\n\" +\n+        \"  var action;\\n\" +\n+        \"  a: {\\n\" +\n+        \"    var proto = null;\\n\" +\n+        \"    try {\\n\" +\n+        \"    try {\\n\" +\n+        \"      proto = new Proto\\n\" +\n+        \"    } finally {\\n\" +\n+        \"      action = proto;\\n\" +\n+        \"      break a\\n\" +  // Remove this...\n+        \"    }\\n\" +\n+        \"    } finally {\\n\" +\n+        \"    }\\n\" +\n+        \"  }\\n\" +\n+        \"  alert(action)\\n\" +  // but not this.\n+        \"};\"\n+        );\n+  }\n+\n+  public void testIssue4177428c() {\n+    test(\n+        \"f = function() {\\n\" +\n+        \"  var action;\\n\" +\n+        \"  a: {\\n\" +\n+        \"    var proto = null;\\n\" +\n+        \"    try {\\n\" +\n+        \"    } finally {\\n\" +\n+        \"    try {\\n\" +\n+        \"      proto = new Proto\\n\" +\n+        \"    } finally {\\n\" +\n+        \"      action = proto;\\n\" +\n+        \"      break a\\n\" +  // Remove this...\n+        \"    }\\n\" +\n+        \"    }\\n\" +\n+        \"  }\\n\" +\n+        \"  alert(action)\\n\" + // but not this.\n+        \"};\",\n+        \"f = function() {\\n\" +\n+        \"  var action;\\n\" +\n+        \"  a: {\\n\" +\n+        \"    var proto = null;\\n\" +\n+        \"    try {\\n\" +\n+        \"    } finally {\\n\" +\n+        \"    try {\\n\" +\n+        \"      proto = new Proto\\n\" +\n+        \"    } finally {\\n\" +\n+        \"      action = proto;\\n\" +\n+        \"    }\\n\" +\n+        \"    }\\n\" +\n+        \"  }\\n\" +\n+        \"  alert(action)\\n\" +  // but not this.\n+        \"};\"\n+        );\n+  }\n+\n+  public void testIssue4177428_continue() {\n+    test(\n+        \"f = function() {\\n\" +\n+        \"  var action;\\n\" +\n+        \"  a: do {\\n\" +\n+        \"    var proto = null;\\n\" +\n+        \"    try {\\n\" +\n+        \"      proto = new Proto\\n\" +\n+        \"    } finally {\\n\" +\n+        \"      action = proto;\\n\" +\n+        \"      continue a\\n\" +  // Remove this...\n+        \"    }\\n\" +\n+        \"  } while(false)\\n\" +\n+        \"  alert(action)\\n\" + // but not this.\n+        \"};\",\n+        \"f = function() {\\n\" +\n+        \"  var action;\\n\" +\n+        \"  a: do {\\n\" +\n+        \"    var proto = null;\\n\" +\n+        \"    try {\\n\" +\n+        \"      proto = new Proto\\n\" +\n+        \"    } finally {\\n\" +\n+        \"      action = proto;\\n\" +\n+        \"    }\\n\" +\n+        \"  } while (false)\\n\" +\n+        \"  alert(action)\\n\" +\n+        \"};\"\n+        );\n+  }\n+\n+  public void testIssue4177428_return() {\n+    test(\n+        \"f = function() {\\n\" +\n+        \"  var action;\\n\" +\n+        \"  a: {\\n\" +\n+        \"    var proto = null;\\n\" +\n+        \"    try {\\n\" +\n+        \"      proto = new Proto\\n\" +\n+        \"    } finally {\\n\" +\n+        \"      action = proto;\\n\" +\n+        \"      return\\n\" +  // Remove this...\n+        \"    }\\n\" +\n+        \"  }\\n\" +\n+        \"  alert(action)\\n\" + // and this.\n+        \"};\",\n+        \"f = function() {\\n\" +\n+        \"  var action;\\n\" +\n+        \"  a: {\\n\" +\n+        \"    var proto = null;\\n\" +\n+        \"    try {\\n\" +\n+        \"      proto = new Proto\\n\" +\n+        \"    } finally {\\n\" +\n+        \"      action = proto;\\n\" +\n+        \"    }\\n\" +\n+        \"  }\\n\" +\n+        \"};\"\n+        );\n+  }\n+\n+  public void testIssue4177428_multifinally() {\n+    testSame(\n+        \"a: {\\n\" +\n+        \" try {\\n\" +\n+        \" try {\\n\" +\n+        \" } finally {\\n\" +\n+        \"   break a;\\n\" +\n+        \" }\\n\" +\n+        \" } finally {\\n\" +\n+        \"   x = 1;\\n\" +\n+        \" }\\n\" +\n+        \"}\");\n+  }\n }", "timestamp": 1301357515, "metainfo": ""}