{"sha": "16a737906f310af8b41f355b0e6c71f6bbc7c423", "log": "combine junit jars  Make cross module code motion understand stuff like clone() that calls a constructor. (Alan)  Revision created by MOE tool push_codebase. MOE_MIGRATION=   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CrossModuleCodeMotion.java\n+++ b/src/com/google/javascript/jscomp/CrossModuleCodeMotion.java\n    * Process the references to named variables\n    */\n   private void processReference(NodeTraversal t, NamedInfo info, String name) {\n-    // Random tidbit: A recursive function should not block movement.\n-    // If the inlineName matches the scope function which contains it,\n-    // we can ignore the module [this one time].\n+    // A name is recursively defined if:\n+    //   1: It is calling itself.\n+    //   2: One of its property calls itself.\n+    // Recursive definition should not block movement.\n+\n     boolean recursive = false;\n     Node rootNode = t.getScope().getRootNode();\n     if (rootNode.getType() == Token.FUNCTION) {\n+      \n+      // CASE #1:\n       String scopeFuncName = rootNode.getFirstChild().getString();\n       if (scopeFuncName.equals(name)) {\n         recursive = true;\n+      }\n+      \n+      // CASE #2:\n+      Node rootParent = rootNode.getParent();\n+      if (rootParent.getType() == Token.ASSIGN) {\n+        Node owner = rootParent.getFirstChild();\n+        while (owner.getType() == Token.GETPROP) {\n+          owner = owner.getFirstChild();\n+        }\n+        if (owner.getType() == Token.NAME && owner.getString().equals(name)) {\n+          recursive = true;\n+        }\n       }\n     }\n \n--- a/test/com/google/javascript/jscomp/CrossModuleCodeMotionTest.java\n+++ b/test/com/google/javascript/jscomp/CrossModuleCodeMotionTest.java\n       // m2\n       \"function g(){};\"));\n   }\n-}\n+  \n+  public void testRecursiveReference() {\n+    test(createModuleChain(\n+             // m1\n+             \"function f(){} f.prototype.clone = function() { return new f };\",\n+             // m2\n+             \"var a = (new f).clone();\"),\n+         new String[] {\n+           // m1\n+           \"\",\n+           \"function f(){} f.prototype.clone = function() { return new f() };\" +\n+           // m2\n+           \"var a = (new f).clone();\"\n+         });\n+  }\n+}", "timestamp": 1268115312, "metainfo": ""}