{"sha": "23705fe72470fa22ba41e86ad0e463263a7cf947", "log": "Fix smart name removal to track aliases to external names.  R=nicksantos DELTA=47  (35 added, 4 deleted, 8 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=670   ", "commit": "\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n       // reference to it from the global scope (a.k.a. window).\n       String name = nameInfo.name;\n       if (nameInfo.isExternallyReferenceable) {\n-        recordReference(WINDOW, name,\n-                        RefType.REGULAR);\n+        recordReference(WINDOW, name, RefType.REGULAR);\n+        maybeRecordAlias(name, parent, referring, referringName);\n         return;\n       }\n \n           recordReference(WINDOW, name, RefType.REGULAR);\n         }\n       } else if (referring != null) {\n-        if ((parent.getType() == Token.NAME ||\n-             parent.getType() == Token.ASSIGN) &&\n-            scopes.get(parent) == referring) {\n-          recordAlias(referringName, name);\n-        } else {\n+        if (!maybeRecordAlias(name, parent, referring, referringName)) {\n           RefType depType = referring.onlyAffectsClassDef ?\n               RefType.INHERITANCE : RefType.REGULAR;\n           recordReference(referringName, name, depType);\n           }\n         }\n       }\n+    }\n+\n+    /**\n+     * @return Whether the alias was recorded.\n+     */\n+    private boolean maybeRecordAlias(\n+        String name, Node parent,\n+        NameInformation referring, String referringName) {\n+      if ((parent.getType() == Token.NAME ||\n+          parent.getType() == Token.ASSIGN) &&\n+          referring != null &&\n+          scopes.get(parent) == referring) {\n+        recordAlias(referringName, name);\n+        return true;\n+      }\n+      return false;\n     }\n \n     /**\n--- a/test/com/google/javascript/jscomp/NameAnalyzerTest.java\n+++ b/test/com/google/javascript/jscomp/NameAnalyzerTest.java\n   }\n \n   public void testDo() {\n-    test(\"var cond = false;do {var a = 1} while (cond)\", \"var cond = false;do {} while (cond)\");\n+    test(\"var cond = false;do {var a = 1} while (cond)\",\n+         \"var cond = false;do {} while (cond)\");\n   }\n \n   public void testSetterInForStruct1() {\n \n   // TODO(user): Make NameAnalyzer handle this. The OR subexpressions may\n   // modify global state.\n-  // public void testConditionallyDefinedFunction2() {\n-  //   test(\"var a = {};\" +\n-  //        \"rand() % 2 || a.f = function() { externfoo = 1; } || alert();\",\n-  //        \"rand() % 2 || function() { externfoo = 1; } || alert();\");\n+  // public void disable_testConditionallyDefinedFunction3() {\n+  //    test(\"var a = {};\" +\n+  //         \"rand() % 2 || (a.f = function() { externfoo = 1; } || alert());\",\n+  //         \"rand() % 2 || function() { externfoo = 1; } || alert();\");\n   // }\n+\n+  public void testNoRemoveWindowPropertyAlias1() {\n+     testSame(\n+         \"var self_ = window.gbar;\\n\" +\n+         \"self_.qs = function() {};\");\n+  }\n+\n+  public void testNoRemoveWindowPropertyAlias2() {\n+    testSame(\n+        \"var self_ = window;\\n\" +\n+        \"self_.qs = function() {};\");\n+  }\n+\n+  public void testNoRemoveWindowPropertyAlias3() {\n+    testSame(\n+        \"var self_ = window;\\n\" +\n+        \"self_['qs'] = function() {};\");\n+  }\n \n   @Override\n   protected CompilerPass getProcessor(Compiler compiler) {", "timestamp": 1298615896, "metainfo": ""}