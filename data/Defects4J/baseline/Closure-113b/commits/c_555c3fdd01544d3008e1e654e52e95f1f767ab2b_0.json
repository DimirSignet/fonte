{"sha": "555c3fdd01544d3008e1e654e52e95f1f767ab2b", "log": "Hack to prevent introducing variables starting with \"_\" into global scope when inlining functions.  R=acleung DELTA=30 (28 added, 0 deleted, 2 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=6202   ", "commit": "\n--- a/src/com/google/javascript/jscomp/FunctionToBlockMutator.java\n+++ b/src/com/google/javascript/jscomp/FunctionToBlockMutator.java\n     NodeTraversal.traverse(\n         compiler, fnNode, new MakeDeclaredNamesUnique(\n             new InlineRenamer(\n+                compiler.getCodingConvention(),\n                 idSupplier,\n                 \"inline_\",\n                 isCallInLoop)));\n--- a/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java\n+++ b/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java\n     private final Supplier<String> uniqueIdSupplier;\n     private final String idPrefix;\n     private final boolean removeConstness;\n+    private final CodingConvention convention;\n \n     InlineRenamer(\n+        CodingConvention convention,\n         Supplier<String> uniqueIdSupplier,\n         String idPrefix,\n         boolean removeConstness) {\n+      this.convention = convention;\n       this.uniqueIdSupplier = uniqueIdSupplier;\n       // To ensure that the id does not conflict with the id from the\n       // ContextualRenamer some prefix is needed.\n               0, name.lastIndexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR));\n       }\n \n+      if (convention.isExported(name)) {\n+        // The google internal coding convention includes a naming convention\n+        // to export names starting with \"_\".  Simply strip \"_\" those to avoid\n+        // exporting names.\n+        name = \"JSCompiler_\" + name;\n+      }\n+\n       // By using the same separator the id will be stripped if it isn't\n       // needed when variable renaming is turned off.\n       return name + ContextualRenamer.UNIQUE_ID_SEPARATOR\n \n     @Override\n     public Renamer forChildScope() {\n-      return new InlineRenamer(uniqueIdSupplier, idPrefix, removeConstness);\n+      return new InlineRenamer(\n+          convention, uniqueIdSupplier, idPrefix, removeConstness);\n     }\n \n     @Override\n   static class BoilerplateRenamer extends ContextualRenamer {\n     private final Supplier<String> uniqueIdSupplier;\n     private final String idPrefix;\n+    private final CodingConvention convention;\n \n     BoilerplateRenamer(\n+        CodingConvention convention,\n         Supplier<String> uniqueIdSupplier,\n         String idPrefix) {\n+      this.convention = convention;\n       this.uniqueIdSupplier = uniqueIdSupplier;\n       this.idPrefix = idPrefix;\n     }\n \n     @Override\n     public Renamer forChildScope() {\n-      return new InlineRenamer(uniqueIdSupplier, idPrefix, false);\n+      return new InlineRenamer(convention, uniqueIdSupplier, idPrefix, false);\n     }\n   }\n \n--- a/src/com/google/javascript/jscomp/Normalize.java\n+++ b/src/com/google/javascript/jscomp/Normalize.java\n         compiler, js,\n         new MakeDeclaredNamesUnique(\n             new BoilerplateRenamer(\n+                compiler.getCodingConvention(),\n                 compiler.getUniqueNameIdSupplier(),\n                 prefix)));\n     return js;\n--- a/test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java\n+++ b/test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java\n           } else {\n             renamer = new MakeDeclaredNamesUnique(\n                 new InlineRenamer(\n+                    compiler.getCodingConvention(),\n                     compiler.getUniqueNameIdSupplier(),\n                     localNamePrefix,\n                     removeConst));\n          \"try { } catch(e) {e;}};\",\n          \"try { } catch(e$$unique_0) {e$$unique_0; \" +\n             \"try { } catch(e$$unique_1) {e$$unique_1;} }; \");\n+  }\n+\n+  public void testMakeLocalNamesUniqueWithoutContext2() {\n+    // Set the test type\n+    this.useDefaultRenamer = false;\n+\n+    test(\"var _a;\",\n+         \"var JSCompiler__a$$unique_0\");\n+    test(\"var _a = function _b(_c) { var _d; };\",\n+         \"var JSCompiler__a$$unique_0 = function JSCompiler__b$$unique_1(\" +\n+             \"JSCompiler__c$$unique_2) { var JSCompiler__d$$unique_3; };\");\n   }\n \n   public void testOnlyInversion() {", "timestamp": 1359417875, "metainfo": ""}