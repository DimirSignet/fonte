{"sha": "a2b23eb9171d2bbc8219acc692b3c26ec1e61434", "log": "Deprecate some redundant compiler apis  R=dimvar DELTA=46  (29 added, 4 deleted, 13 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5215   ", "commit": "\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n \n   /**\n    * Initializes the instance state needed for a compile job.\n-   */\n+   * @deprecated Convert your arrays to lists and use the list-based API.\n+   */\n+  @Deprecated\n   public void init(JSSourceFile[] externs, JSSourceFile[] inputs,\n       CompilerOptions options) {\n     init(Lists.<JSSourceFile>newArrayList(externs),\n   /**\n    * Initializes the instance state needed for a compile job if the sources\n    * are in modules.\n-   */\n+   * @deprecated Convert your arrays to lists and use the list-based API.\n+   */\n+  @Deprecated\n   public void init(JSSourceFile[] externs, JSModule[] modules,\n       CompilerOptions options) {\n     initModules(Lists.<SourceFile>newArrayList(externs),\n      return compile(Lists.newArrayList(extern), Lists.newArrayList(input), options);\n   }\n \n+  /**\n+   * @deprecated Convert your arrays to lists and use the list-based API.\n+   */\n+  @Deprecated\n   public Result compile(\n       SourceFile extern, JSSourceFile[] input, CompilerOptions options) {\n      return compile(Lists.newArrayList(extern), Lists.newArrayList(input), options);\n   }\n \n+  /**\n+   * @deprecated Convert your arrays to lists and use the list-based\n+   *     compileModules method.\n+   */\n+  @Deprecated\n   public Result compile(\n       JSSourceFile extern, JSModule[] modules, CompilerOptions options) {\n      return compileModules(\n \n   /**\n    * Compiles a list of inputs.\n-   */\n+   * @deprecated Convert your arrays to lists and use the list-based compile\n+   *     method.\n+   */\n+  @Deprecated\n   public Result compile(JSSourceFile[] externs,\n                         JSSourceFile[] inputs,\n                         CompilerOptions options) {\n \n   /**\n    * Compiles a list of modules.\n-   */\n+   * @deprecated Convert your arrays to lists and use the list-based\n+   *     compileModules method.\n+   */\n+  @Deprecated\n   public Result compile(JSSourceFile[] externs,\n                         JSModule[] modules,\n                         CompilerOptions options) {\n--- a/src/com/google/javascript/jscomp/JSSourceFile.java\n+++ b/src/com/google/javascript/jscomp/JSSourceFile.java\n  *\n  * @author nicksantos@google.com (Nick Santos)\n  * @author moedinger@google.com (Andrew Moedinger)\n+ * @deprecated JSSourceFile is an empty wrapper around SourceFile. Just\n+ *     use SourceFile directly.\n  */\n // TODO(nicksantos): Delete this file.\n+@Deprecated\n public class JSSourceFile extends SourceFile implements Serializable {\n   private static final long serialVersionUID = 1L;\n \n--- a/src/com/google/javascript/jscomp/jsonml/SecureCompiler.java\n+++ b/src/com/google/javascript/jscomp/jsonml/SecureCompiler.java\n package com.google.javascript.jscomp.jsonml;\n \n import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n import com.google.common.collect.Lists;\n import com.google.javascript.jscomp.CheckLevel;\n import com.google.javascript.jscomp.Compiler;\n import com.google.javascript.jscomp.CompilerInput;\n import com.google.javascript.jscomp.CompilerOptions;\n+import com.google.javascript.jscomp.CompilerOptions.Reach;\n import com.google.javascript.jscomp.JSError;\n import com.google.javascript.jscomp.JSModule;\n-import com.google.javascript.jscomp.JSSourceFile;\n import com.google.javascript.jscomp.Result;\n+import com.google.javascript.jscomp.SourceFile;\n import com.google.javascript.jscomp.VariableRenamingPolicy;\n-import com.google.javascript.jscomp.CompilerOptions.Reach;\n \n import java.util.ArrayList;\n \n     JSModule module = new JSModule(\"[[jsonmlmodule]]\");\n     module.add(input);\n \n-    Result result = compiler.compile(\n-        new JSSourceFile[] {},\n-        new JSModule[] { module },\n+    Result result = compiler.compileModules(\n+        ImmutableList.<SourceFile>of(),\n+        ImmutableList.of(module),\n         options);\n \n     report = generateReport(result);\n--- a/test/com/google/debugging/sourcemap/SourceMapTestCase.java\n+++ b/test/com/google/debugging/sourcemap/SourceMapTestCase.java\n \n package com.google.debugging.sourcemap;\n \n+import com.google.common.collect.ImmutableList;\n import com.google.common.collect.Maps;\n import com.google.debugging.sourcemap.proto.Mapping.OriginalMapping;\n import com.google.javascript.jscomp.Compiler;\n import com.google.javascript.jscomp.CompilerOptions;\n-import com.google.javascript.jscomp.JSSourceFile;\n import com.google.javascript.jscomp.Result;\n+import com.google.javascript.jscomp.SourceFile;\n import com.google.javascript.jscomp.SourceMap;\n import com.google.javascript.jscomp.SourceMap.DetailLevel;\n \n \n import java.io.IOException;\n import java.util.LinkedHashMap;\n+import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n \n   }\n \n \n-  static final JSSourceFile[] EXTERNS = {\n-      JSSourceFile.fromCode(\"externs\", \"\")\n-  };\n+  static final List<SourceFile> EXTERNS = ImmutableList.of(\n+      SourceFile.fromCode(\"externs\", \"\"));\n \n   protected DetailLevel detailLevel = SourceMap.DetailLevel.ALL;\n \n     // Turn on IDE mode to get rid of optimizations.\n     options.ideMode = true;\n \n-    JSSourceFile[] inputs = { JSSourceFile.fromCode(fileName1, js1) };\n+    List<SourceFile> inputs =\n+        ImmutableList.of(SourceFile.fromCode(fileName1, js1));\n \n     if (js2 != null && fileName2 != null) {\n-      JSSourceFile[] multiple =  { JSSourceFile.fromCode(fileName1, js1),\n-                                   JSSourceFile.fromCode(fileName2, js2) };\n-      inputs = multiple;\n+      inputs = ImmutableList.of(\n+          SourceFile.fromCode(fileName1, js1),\n+          SourceFile.fromCode(fileName2, js2));\n     }\n \n     Result result = compiler.compile(EXTERNS, inputs, options);", "timestamp": 1343229505, "metainfo": ""}