{"sha": "00e6fca2dce419163a7260eec927d260336ad148", "log": "Java readability ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=52077268", "commit": "\n--- a/src/com/google/javascript/jscomp/RescopeGlobalSymbols.java\n+++ b/src/com/google/javascript/jscomp/RescopeGlobalSymbols.java\n  */\n package com.google.javascript.jscomp;\n \n+import com.google.common.annotations.VisibleForTesting;\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Sets;\n import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;\n   private final boolean assumeCrossModuleNames;\n   private final Set<String> crossModuleNames = Sets.newHashSet();\n \n+  /**\n+   * Constructor for the RescopeGlobalSymbols compiler pass.\n+   *\n+   * @param compiler The JSCompiler, for reporting code changes.\n+   * @param globalSymbolNamespace Name of namespace into which all global\n+   *     symbols are transferred.\n+   * @param addExtern If true, the compiler will consider the\n+   *    globalSymbolNamespace an extern name.\n+   * @param assumeCrossModuleNames If true, all global symbols will be assumed\n+   *     cross module boundaries and thus require renaming.\n+   */\n+  RescopeGlobalSymbols(\n+      AbstractCompiler compiler,\n+      String globalSymbolNamespace,\n+      boolean assumeCrossModuleNames) {\n+    this(compiler, globalSymbolNamespace, true, assumeCrossModuleNames);\n+  }\n+\n+  /**\n+   * Constructor for the RescopeGlobalSymbols compiler pass for use in testing.\n+   *\n+   * @param compiler The JSCompiler, for reporting code changes.\n+   * @param globalSymbolNamespace Name of namespace into which all global\n+   *     symbols are transferred.\n+   * @param addExtern If true, the compiler will consider the\n+   *    globalSymbolNamespace an extern name.\n+   * @param assumeCrossModuleNames If true, all global symbols will be assumed\n+   *     cross module boundaries and thus require renaming.\n+   * VisibleForTesting\n+   */\n   RescopeGlobalSymbols(\n       AbstractCompiler compiler,\n       String globalSymbolNamespace,\n     this.globalSymbolNamespace = globalSymbolNamespace;\n     this.addExtern = addExtern;\n     this.assumeCrossModuleNames = assumeCrossModuleNames;\n-  }\n-\n-  RescopeGlobalSymbols(\n-      AbstractCompiler compiler,\n-      String globalSymbolNamespace,\n-      boolean assumeCrossModuleNames) {\n-    this(compiler, globalSymbolNamespace, true, assumeCrossModuleNames);\n   }\n \n   private boolean isCrossModuleName(String name) {\n       // the suffix.\n       if (!var.isExtern() && !var.isGlobal()\n           && (name.equals(globalSymbolNamespace)\n-              || name.indexOf(\n-                  globalSymbolNamespace + DISAMBIGUATION_SUFFIX) == 0)) {\n+              || name.startsWith(\n+                  globalSymbolNamespace + DISAMBIGUATION_SUFFIX))) {\n         n.setString(name + DISAMBIGUATION_SUFFIX);\n         compiler.reportCodeChange();\n       }", "timestamp": 1378949349, "metainfo": ""}