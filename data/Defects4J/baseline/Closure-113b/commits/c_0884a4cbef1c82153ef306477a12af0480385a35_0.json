{"sha": "0884a4cbef1c82153ef306477a12af0480385a35", "log": "Properly determine if any possible results may be a string. Fixes issue 821  R=nicksantos DELTA=36  (27 added, 0 deleted, 9 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5531   ", "commit": "\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n    * Apply the supplied predicate against\n    * all possible result Nodes of the expression.\n    */\n-  static boolean valueCheck(Node n, Predicate<Node> p) {\n+  static boolean allResultsMatch(Node n, Predicate<Node> p) {\n     switch (n.getType()) {\n       case Token.ASSIGN:\n       case Token.COMMA:\n-        return valueCheck(n.getLastChild(), p);\n+        return allResultsMatch(n.getLastChild(), p);\n       case Token.AND:\n       case Token.OR:\n-        return valueCheck(n.getFirstChild(), p)\n-            && valueCheck(n.getLastChild(), p);\n+        return allResultsMatch(n.getFirstChild(), p)\n+            && allResultsMatch(n.getLastChild(), p);\n       case Token.HOOK:\n-        return valueCheck(n.getFirstChild().getNext(), p)\n-            && valueCheck(n.getLastChild(), p);\n+        return allResultsMatch(n.getFirstChild().getNext(), p)\n+            && allResultsMatch(n.getLastChild(), p);\n+      default:\n+        return p.apply(n);\n+    }\n+  }\n+\n+  /**\n+   * Apply the supplied predicate against\n+   * all possible result Nodes of the expression.\n+   */\n+  static boolean anyResultsMatch(Node n, Predicate<Node> p) {\n+    switch (n.getType()) {\n+      case Token.ASSIGN:\n+      case Token.COMMA:\n+        return anyResultsMatch(n.getLastChild(), p);\n+      case Token.AND:\n+      case Token.OR:\n+        return anyResultsMatch(n.getFirstChild(), p)\n+            || anyResultsMatch(n.getLastChild(), p);\n+      case Token.HOOK:\n+        return anyResultsMatch(n.getFirstChild().getNext(), p)\n+            || anyResultsMatch(n.getLastChild(), p);\n       default:\n         return p.apply(n);\n     }\n    * Returns true if the result of node evaluation is always a number\n    */\n   static boolean isNumericResult(Node n) {\n-    return valueCheck(n, NUMBERIC_RESULT_PREDICATE);\n+    return allResultsMatch(n, NUMBERIC_RESULT_PREDICATE);\n   }\n \n   static boolean isNumericResultHelper(Node n) {\n    * @return Whether the result of node evaluation is always a boolean\n    */\n   static boolean isBooleanResult(Node n) {\n-    return valueCheck(n, BOOLEAN_RESULT_PREDICATE);\n+    return allResultsMatch(n, BOOLEAN_RESULT_PREDICATE);\n   }\n \n   static boolean isBooleanResultHelper(Node n) {\n \n   static boolean mayBeString(Node n, boolean recurse) {\n     if (recurse) {\n-      return valueCheck(n, MAY_BE_STRING_PREDICATE);\n+      return anyResultsMatch(n, MAY_BE_STRING_PREDICATE);\n     } else {\n       return mayBeStringHelper(n);\n     }\n--- a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\n     fold(\"x = '' + null\", \"x = \\\"null\\\"\");\n     fold(\"x = true + '' + false\", \"x = \\\"truefalse\\\"\");\n     fold(\"x = '' + []\", \"x = ''\");      // cannot fold (but nice if we can)\n+  }\n+\n+  public void testIssue821() {\n+    foldSame(\"var a =(Math.random()>0.5? '1' : 2 ) + 3 + 4;\");\n+    foldSame(\"var a = ((Math.random() ? 0 : 1) ||\" +\n+             \"(Math.random()>0.5? '1' : 2 )) + 3 + 4;\");\n   }\n \n   public void testFoldConstructor() {", "timestamp": 1348249843, "metainfo": ""}