{"sha": "e488f3f5a2826f234a29833ddfce49e155a4d44a", "log": "Fix a bug in the function equivalence relation.  R=johnlenz DELTA=113  (59 added, 0 deleted, 54 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5758   ", "commit": "\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n           return false;\n         }\n       }\n+\n+      // Check var_args/optionality\n+      if (thisParam.isOptionalArg() != otherParam.isOptionalArg()) {\n+        return false;\n+      }\n+\n+      if (thisParam.isVarArgs() != otherParam.isVarArgs()) {\n+        return false;\n+      }\n+\n       thisParam = thisParam.getNext();\n       otherParam = otherParam.getNext();\n     }\n--- a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n+++ b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n     // Boolean\n     FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE =\n         new FunctionType(this, \"Boolean\", null,\n-            createArrowType(createParameters(false, ALL_TYPE), BOOLEAN_TYPE),\n+            createArrowType(createOptionalParameters(ALL_TYPE), BOOLEAN_TYPE),\n             null, null, true, true);\n     ObjectType booleanPrototype = BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype();\n     registerNativeType(\n     // Number\n     FunctionType NUMBER_OBJECT_FUNCTION_TYPE =\n         new FunctionType(this, \"Number\", null,\n-            createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE),\n+            createArrowType(createOptionalParameters(ALL_TYPE), NUMBER_TYPE),\n             null, null, true, true);\n     ObjectType numberPrototype = NUMBER_OBJECT_FUNCTION_TYPE.getPrototype();\n     registerNativeType(\n     // String\n     FunctionType STRING_OBJECT_FUNCTION_TYPE =\n         new FunctionType(this, \"String\", null,\n-            createArrowType(createParameters(false, ALL_TYPE), STRING_TYPE),\n+            createArrowType(createOptionalParameters(ALL_TYPE), STRING_TYPE),\n             null, null, true, true);\n     ObjectType stringPrototype = STRING_OBJECT_FUNCTION_TYPE.getPrototype();\n     registerNativeType(\n--- a/src/com/google/javascript/rhino/testing/BaseJSTypeTestCase.java\n+++ b/src/com/google/javascript/rhino/testing/BaseJSTypeTestCase.java\n   public static final String ALL_NATIVE_EXTERN_TYPES =\n       \"/**\\n\"\n       + \" * @constructor\\n\"\n-      + \" * @param {*} opt_value\\n\"\n+      + \" * @param {*=} opt_value\\n\"\n       + \" */\\n\"\n       + \"function Object(opt_value) {}\\n\"\n       + \"\\n\"\n       + \"/**\\n\"\n       + \" * @constructor\\n\"\n       + \" * @extends {Object}\\n\"\n-      + \" * @param {*} var_args\\n\"\n+      + \" * @param {...*} var_args\\n\"\n       + \" */\\n\"\n       + \"\\n\"\n       + \"function Function(var_args) {}\\n\"\n       + \"/**\\n\"\n       + \" * @constructor\\n\"\n       + \" * @extends {Object}\\n\"\n-      + \" * @param {*} var_args\\n\"\n+      + \" * @param {...*} var_args\\n\"\n       + \" * @return {!Array}\\n\"\n       + \" */\\n\"\n       + \"function Array(var_args) {}\\n\"\n       + \"\\n\"\n       + \"/**\\n\"\n       + \" * @constructor\\n\"\n-      + \" * @param {*} opt_value\\n\"\n+      + \" * @param {*=} opt_value\\n\"\n       + \" * @return {boolean}\\n\"\n       + \" */\\n\"\n       + \"function Boolean(opt_value) {}\\n\"\n       + \"\\n\"\n       + \"/**\\n\"\n       + \" * @constructor\\n\"\n-      + \" * @param {*} opt_value\\n\"\n+      + \" * @param {*=} opt_value\\n\"\n       + \" * @return {number}\\n\"\n       + \" */\\n\"\n       + \"function Number(opt_value) {}\\n\"\n       + \"\\n\"\n       + \"/**\\n\"\n       + \" * @constructor\\n\"\n+      + \" * @param {?=} opt_yr_num\\n\"\n+      + \" * @param {?=} opt_mo_num\\n\"\n+      + \" * @param {?=} opt_day_num\\n\"\n+      + \" * @param {?=} opt_hr_num\\n\"\n+      + \" * @param {?=} opt_min_num\\n\"\n+      + \" * @param {?=} opt_sec_num\\n\"\n+      + \" * @param {?=} opt_ms_num\\n\"\n       + \" * @return {string}\\n\"\n       + \" */\\n\"\n       + \"function Date(opt_yr_num, opt_mo_num, opt_day_num, opt_hr_num,\"\n       + \"/**\\n\"\n       + \" * @constructor\\n\"\n       + \" * @extends {Object}\\n\"\n-      + \" * @param {*} opt_str\\n\"\n+      + \" * @param {*=} opt_str\\n\"\n       + \" * @return {string}\\n\"\n       + \" */\\n\"\n       + \"function String(opt_str) {}\\n\"\n       + \"\\n\"\n       + \"/**\\n\"\n       + \" * @constructor\\n\"\n-      + \" * @param {*} opt_pattern\\n\"\n-      + \" * @param {*} opt_flags\\n\"\n+      + \" * @param {*=} opt_pattern\\n\"\n+      + \" * @param {*=} opt_flags\\n\"\n       + \" * @return {!RegExp}\\n\"\n       + \" */\\n\"\n       + \"function RegExp(opt_pattern, opt_flags) {}\\n\"\n       + \"\\n\"\n       + \"/**\\n\"\n       + \" * @constructor\\n\"\n-      + \" * @param {*} opt_message\\n\"\n-      + \" * @param {*} opt_file\\n\"\n-      + \" * @param {*} opt_line\\n\"\n+      + \" * @param {*=} opt_message\\n\"\n+      + \" * @param {*=} opt_file\\n\"\n+      + \" * @param {*=} opt_line\\n\"\n       + \" * @return {!Error}\\n\"\n       + \" */\\n\"\n       + \"function Error(opt_message, opt_file, opt_line) {}\\n\"\n       + \"/**\\n\"\n       + \" * @constructor\\n\"\n       + \" * @extends {Error}\\n\"\n-      + \" * @param {*} opt_message\\n\"\n-      + \" * @param {*} opt_file\\n\"\n-      + \" * @param {*} opt_line\\n\"\n+      + \" * @param {*=} opt_message\\n\"\n+      + \" * @param {*=} opt_file\\n\"\n+      + \" * @param {*=} opt_line\\n\"\n       + \" * @return {!EvalError}\\n\"\n       + \" */\\n\"\n       + \"function EvalError(opt_message, opt_file, opt_line) {}\\n\"\n       + \"/**\\n\"\n       + \" * @constructor\\n\"\n       + \" * @extends {Error}\\n\"\n-      + \" * @param {*} opt_message\\n\"\n-      + \" * @param {*} opt_file\\n\"\n-      + \" * @param {*} opt_line\\n\"\n+      + \" * @param {*=} opt_message\\n\"\n+      + \" * @param {*=} opt_file\\n\"\n+      + \" * @param {*=} opt_line\\n\"\n       + \" * @return {!RangeError}\\n\"\n       + \" */\\n\"\n       + \"function RangeError(opt_message, opt_file, opt_line) {}\\n\"\n       + \"/**\\n\"\n       + \" * @constructor\\n\"\n       + \" * @extends {Error}\\n\"\n-      + \" * @param {*} opt_message\\n\"\n-      + \" * @param {*} opt_file\\n\"\n-      + \" * @param {*} opt_line\\n\"\n+      + \" * @param {*=} opt_message\\n\"\n+      + \" * @param {*=} opt_file\\n\"\n+      + \" * @param {*=} opt_line\\n\"\n       + \" * @return {!ReferenceError}\\n\"\n       + \" */\\n\"\n       + \"function ReferenceError(opt_message, opt_file, opt_line) {}\\n\"\n       + \"/**\\n\"\n       + \" * @constructor\\n\"\n       + \" * @extends {Error}\\n\"\n-      + \" * @param {*} opt_message\\n\"\n-      + \" * @param {*} opt_file\\n\"\n-      + \" * @param {*} opt_line\\n\"\n+      + \" * @param {*=} opt_message\\n\"\n+      + \" * @param {*=} opt_file\\n\"\n+      + \" * @param {*=} opt_line\\n\"\n       + \" * @return {!SyntaxError}\\n\"\n       + \" */\\n\"\n       + \"function SyntaxError(opt_message, opt_file, opt_line) {}\\n\"\n       + \"/**\\n\"\n       + \" * @constructor\\n\"\n       + \" * @extends {Error}\\n\"\n-      + \" * @param {*} opt_message\\n\"\n-      + \" * @param {*} opt_file\\n\"\n-      + \" * @param {*} opt_line\\n\"\n+      + \" * @param {*=} opt_message\\n\"\n+      + \" * @param {*=} opt_file\\n\"\n+      + \" * @param {*=} opt_line\\n\"\n       + \" * @return {!TypeError}\\n\"\n       + \" */\\n\"\n       + \"function TypeError(opt_message, opt_file, opt_line) {}\\n\"\n       + \"/**\\n\"\n       + \" * @constructor\\n\"\n       + \" * @extends {Error}\\n\"\n-      + \" * @param {*} opt_message\\n\"\n-      + \" * @param {*} opt_file\\n\"\n-      + \" * @param {*} opt_line\\n\"\n+      + \" * @param {*=} opt_message\\n\"\n+      + \" * @param {*=} opt_file\\n\"\n+      + \" * @param {*=} opt_line\\n\"\n       + \" * @return {!URIError}\\n\"\n       + \" */\\n\"\n       + \"function URIError(opt_message, opt_file, opt_line) {}\\n\"\n       + \"\\n\"\n       + \"/**\\n\"\n       + \" * @param {string} progId\\n\"\n-      + \" * @param {string} opt_location\\n\"\n+      + \" * @param {string=} opt_location\\n\"\n       + \" * @constructor\\n\"\n       + \" */\\n\"\n       + \"function ActiveXObject(progId, opt_location) {}\\n\";\n--- a/test/com/google/javascript/jscomp/CompilerTypeTestCase.java\n+++ b/test/com/google/javascript/jscomp/CompilerTypeTestCase.java\n       \"/** @type {!Function} */ Function.prototype.apply;\" +\n       \"/** @type {!Function} */ Function.prototype.bind;\" +\n       \"/** @type {!Function} */ Function.prototype.call;\" +\n-      \"/** @constructor \\n * @param {*} arg \\n @return {string} */\" +\n+      \"/** @constructor \\n * @param {*=} arg \\n @return {string} */\" +\n       \"function String(arg) {}\" +\n       \"/** @param {number} sliceArg */\\n\" +\n       \"String.prototype.slice = function(sliceArg) {};\" +\n--- a/test/com/google/javascript/jscomp/FunctionTypeBuilderTest.java\n+++ b/test/com/google/javascript/jscomp/FunctionTypeBuilderTest.java\n         \"\", FunctionTypeBuilder.TYPE_REDEFINITION,\n         \"attempted re-definition of type String\\n\"\n         + \"found   : function (new:String, *=): number\\n\"\n-        + \"expected: function (new:String, *): string\");\n+        + \"expected: function (new:String, *=): string\");\n   }\n \n   public void testBuiltInTypeDifferentNumParams() throws Exception {\n         \"\", FunctionTypeBuilder.TYPE_REDEFINITION,\n         \"attempted re-definition of type String\\n\"\n         + \"found   : function (new:String): string\\n\"\n-        + \"expected: function (new:String, *): string\");\n+        + \"expected: function (new:String, *=): string\");\n   }\n \n   public void testBuiltInTypeDifferentNumParams2() throws Exception {\n         \"\", FunctionTypeBuilder.TYPE_REDEFINITION,\n         \"attempted re-definition of type String\\n\"\n         + \"found   : function (new:String, ?=, ?=): string\\n\"\n-        + \"expected: function (new:String, *): string\");\n+        + \"expected: function (new:String, *=): string\");\n   }\n \n   public void testBuiltInTypeDifferentParamType() throws Exception {\n         \"\", FunctionTypeBuilder.TYPE_REDEFINITION,\n         \"attempted re-definition of type String\\n\"\n         + \"found   : function (new:String, ?=): string\\n\"\n-        + \"expected: function (new:String, *): string\");\n+        + \"expected: function (new:String, *=): string\");\n   }\n \n   public void testBadFunctionTypeDefinition() throws Exception {\n--- a/test/com/google/javascript/jscomp/InferJSDocInfoTest.java\n+++ b/test/com/google/javascript/jscomp/InferJSDocInfoTest.java\n \n   public void testNativeCtor() {\n     testSame(\n-        \"/** Object. \\n * @param {*} x \\n * @constructor */ \" +\n+        \"/** Object. \\n * @param {*=} x \\n * @constructor */ \" +\n         \"function Object(x) {};\",\n         \"var x = new Object();\" +\n         \"/** Another object. */ var y = new Object();\", null);\n \n   public void testStructuralFunctions() {\n     testSame(\n-        \"/** Object. \\n * @param {*} x \\n * @constructor */ \" +\n+        \"/** Object. \\n * @param {*=} x \\n * @constructor */ \" +\n         \"function Object(x) {};\",\n         \"/** Function. \\n * @param {*} x */ \" +\n         \"function fn(x) {};\" +\n--- a/test/com/google/javascript/jscomp/TightenTypesTest.java\n+++ b/test/com/google/javascript/jscomp/TightenTypesTest.java\n   }\n \n   public void testGetElem() {\n-    testSame(\"/** @constructor \\n @param {*} var_args \\n @return {!Array} */\"\n-             + \"function Array(var_args) {}\\n\",\n-             \"/** @constructor */ function Foo() {}\\n\"\n-             + \"/** @constructor */ function Bar() {}\\n\"\n-             + \"var a = [];\\n\"\n-             + \"a[0] = new Foo;\\n\"\n-             + \"a[1] = new Bar;\\n\"\n-             + \"var b = a[0];\\n\"\n-             + \"var c = [new Foo, new Bar];\\n\", null);\n+    testSame(\n+        \"/**\\n\"\n+        + \" * @constructor\\n\"\n+        + \" * @extends {Object}\\n\"\n+        + \" * @param {...*} var_args\\n\"\n+        + \" * @return {!Array}\\n\"\n+        + \" */\\n\"\n+        + \"function Array(var_args) {}\\n\",\n+        \"/** @constructor */ function Foo() {}\\n\"\n+        + \"/** @constructor */ function Bar() {}\\n\"\n+        + \"var a = [];\\n\"\n+        + \"a[0] = new Foo;\\n\"\n+        + \"a[1] = new Bar;\\n\"\n+        + \"var b = a[0];\\n\"\n+        + \"var c = [new Foo, new Bar];\\n\", null);\n \n     assertType(\"Array\", getType(\"a\"));\n     assertType(\"(Array,Bar,Foo)\", getType(\"b\"));\n--- a/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java\n+++ b/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java\n \n   public void testPropertyInExterns3() {\n     testSame(\n-        \"/** @constructor \\n * @param {*} x */ function Object(x) {}\" +\n+        \"/** @constructor \\n * @param {*=} x */ function Object(x) {}\" +\n         \"/** @type {number} */ Object.one;\", \"\", null);\n \n     ObjectType obj = globalScope.getVar(\"Object\").getType().dereference();\n--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n     JSDocInfo info = parse(\"@type {function(number=)}*/\");\n     assertTypeEquals(\n         registry.createFunctionType(\n-            UNKNOWN_TYPE, createUnionType(VOID_TYPE, NUMBER_TYPE)),\n+            UNKNOWN_TYPE, registry.createOptionalParameters(NUMBER_TYPE)),\n         info.getType());\n   }\n \n--- a/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java\n     FunctionType type = new FunctionBuilder(registry).build();\n     assertFalse(type.equals(null));\n     assertTrue(type.isEquivalentTo(type));\n+  }\n+\n+  public void testIsEquivalentToParams() {\n+    FunctionType oneNum = new FunctionBuilder(registry)\n+        .withParamsNode(registry.createParameters(NUMBER_TYPE))\n+        .build();\n+    FunctionType optNum = new FunctionBuilder(registry)\n+        .withParamsNode(registry.createOptionalParameters(NUMBER_TYPE))\n+        .build();\n+    FunctionType varNum = new FunctionBuilder(registry)\n+        .withParamsNode(registry.createParametersWithVarArgs(NUMBER_TYPE))\n+        .build();\n+    Asserts.assertEquivalenceOperations(oneNum, oneNum);\n+    Asserts.assertEquivalenceOperations(optNum, optNum);\n+    Asserts.assertEquivalenceOperations(varNum, varNum);\n+    assertFalse(oneNum.isEquivalentTo(optNum));\n+    assertFalse(oneNum.isEquivalentTo(varNum));\n+    assertFalse(optNum.isEquivalentTo(varNum));\n+  }\n+\n+  public void testIsEquivalentOptAndVarArgs() {\n+    FunctionType varNum = new FunctionBuilder(registry)\n+        .withParamsNode(registry.createParametersWithVarArgs(NUMBER_TYPE))\n+        .build();\n+\n+    FunctionParamBuilder builder = new FunctionParamBuilder(registry);\n+    builder.addOptionalParams(NUMBER_TYPE);\n+    builder.addVarArgs(NUMBER_TYPE);\n+    FunctionType optAndVarNum = new FunctionBuilder(registry)\n+        .withParamsNode(builder.build())\n+        .build();\n+\n+    // We currently do not consider function(T=, ...T) and function(...T)\n+    // equivalent. This may change.\n+    assertFalse(varNum.isEquivalentTo(optAndVarNum));\n+    assertFalse(optAndVarNum.isEquivalentTo(varNum));\n   }\n \n   public void testRecursiveFunction() {\n--- a/test/com/google/javascript/rhino/jstype/JSTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/JSTypeTest.java\n     assertEquals(\"function (new:Array, ...[*]): Array\",\n         ARRAY_FUNCTION_TYPE.toString());\n \n-    assertEquals(\"function (new:Boolean, *): boolean\",\n+    assertEquals(\"function (new:Boolean, *=): boolean\",\n         BOOLEAN_OBJECT_FUNCTION_TYPE.toString());\n \n-    assertEquals(\"function (new:Number, *): number\",\n+    assertEquals(\"function (new:Number, *=): number\",\n         NUMBER_OBJECT_FUNCTION_TYPE.toString());\n \n-    assertEquals(\"function (new:String, *): string\",\n+    assertEquals(\"function (new:String, *=): string\",\n         STRING_OBJECT_FUNCTION_TYPE.toString());\n \n     assertEquals(\"function (...[number]): boolean\",", "timestamp": 1352226405, "metainfo": ""}