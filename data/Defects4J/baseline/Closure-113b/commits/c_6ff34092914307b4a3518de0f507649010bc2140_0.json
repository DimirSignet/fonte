{"sha": "6ff34092914307b4a3518de0f507649010bc2140", "log": "properly lift externs when doing source-pruning.  R=acleung DELTA=133  (101 added, 29 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4602   ", "commit": "\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n         processAMDAndCommonJSModules();\n       }\n \n-      // Check if inputs need to be rebuilt from modules.\n+      hoistExterns(externsRoot);\n+\n+      // Check if the sources need to be re-ordered.\n       boolean staleInputs = false;\n-\n-      // Check if the sources need to be re-ordered.\n       if (options.dependencyOptions.needsManagement() &&\n           options.closurePass) {\n         for (CompilerInput input : inputs) {\n         }\n       }\n \n-      for (CompilerInput input : inputs) {\n-        Node n = input.getAstRoot(this);\n-\n-        // Inputs can have a null AST during initial parse.\n-        if (n == null) {\n-          continue;\n-        }\n-\n-        if (n.getJSDocInfo() != null) {\n-          JSDocInfo info = n.getJSDocInfo();\n-          if (info.isExterns()) {\n-            // If the input file is explicitly marked as an externs file, then\n-            // assume the programmer made a mistake and throw it into\n-            // the externs pile anyways.\n-            externsRoot.addChildToBack(n);\n-            input.setIsExtern(true);\n-\n-            input.getModule().remove(input);\n-\n-            externs.add(input);\n-            staleInputs = true;\n-          } else if (info.isNoCompile()) {\n-            input.getModule().remove(input);\n-            staleInputs = true;\n-          }\n-        }\n-      }\n+      hoistNoCompileFiles();\n \n       if (staleInputs) {\n-        fillEmptyModules(modules);\n-        rebuildInputsFromModules();\n+        repartitionInputs();\n       }\n \n       // Build the AST.\n     } finally {\n       stopTracer(tracer, \"parseInputs\");\n     }\n+  }\n+\n+  /**\n+   * Hoists inputs with the @externs annotation into the externs list.\n+   */\n+  private void hoistExterns(Node externsRoot) {\n+    boolean staleInputs = false;\n+    for (CompilerInput input : inputs) {\n+      if (options.dependencyOptions.needsManagement() &&\n+          options.closurePass) {\n+        // If we're doing scanning dependency info anyway, use that\n+        // information to skip sources that obviously aren't externs.\n+        if (!input.getProvides().isEmpty() || !input.getRequires().isEmpty()) {\n+          continue;\n+        }\n+      }\n+\n+      Node n = input.getAstRoot(this);\n+\n+      // Inputs can have a null AST on a parse error.\n+      if (n == null) {\n+        continue;\n+      }\n+\n+      JSDocInfo info = n.getJSDocInfo();\n+      if (info != null && info.isExterns()) {\n+        // If the input file is explicitly marked as an externs file, then\n+        // assume the programmer made a mistake and throw it into\n+        // the externs pile anyways.\n+        externsRoot.addChildToBack(n);\n+        input.setIsExtern(true);\n+\n+        input.getModule().remove(input);\n+\n+        externs.add(input);\n+        staleInputs = true;\n+      }\n+    }\n+\n+    if (staleInputs) {\n+      repartitionInputs();\n+    }\n+  }\n+\n+  /**\n+   * Hoists inputs with the @nocompiler annotation out of the inputs.\n+   */\n+  private void hoistNoCompileFiles() {\n+    boolean staleInputs = false;\n+    for (CompilerInput input : inputs) {\n+      Node n = input.getAstRoot(this);\n+\n+      // Inputs can have a null AST on a parse error.\n+      if (n == null) {\n+        continue;\n+      }\n+\n+      JSDocInfo info = n.getJSDocInfo();\n+      if (info != null && info.isNoCompile()) {\n+        input.getModule().remove(input);\n+        staleInputs = true;\n+      }\n+    }\n+\n+    if (staleInputs) {\n+      repartitionInputs();\n+    }\n+  }\n+\n+  private void repartitionInputs() {\n+    fillEmptyModules(modules);\n+    rebuildInputsFromModules();\n   }\n \n   /**\n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n          });\n   }\n \n+  public void testSourcePruningOn8() {\n+    args.add(\"--only_closure_dependencies\");\n+    args.add(\"--closure_entry_point=scotch\");\n+    args.add(\"--warning_level=VERBOSE\");\n+    test(new String[] {\n+          \"/** @externs */\\n\" +\n+          \"var externVar;\",\n+          \"goog.provide('scotch'); var x = externVar;\"\n+         },\n+         new String[] {\n+           \"var scotch = {}, x = externVar;\",\n+         });\n+  }\n+\n+  public void testNoCompile() {\n+    args.add(\"--warning_level=VERBOSE\");\n+    test(new String[] {\n+          \"/** @nocompile */\\n\" +\n+          \"goog.provide('x');\\n\" +\n+          \"var dupeVar;\",\n+          \"var dupeVar;\"\n+         },\n+         new String[] {\n+           \"var dupeVar;\"\n+         });\n+  }\n+\n   public void testDependencySortingWhitespaceMode() {\n     args.add(\"--manage_closure_dependencies\");\n     args.add(\"--compilation_level=WHITESPACE_ONLY\");", "timestamp": 1334969669, "metainfo": ""}