{"sha": "96844d11db95fd7a948dd1cc3d2ef7cb4e03e710", "log": "Add return types to goog.asserts functions.  R=agrieve DELTA=31  (31 added, 0 deleted, 0 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=66001   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n         if (type != narrowed) {\n           scope = scope.createChildFlowScope();\n           redeclare(scope, assertedNodeName, narrowed);\n+          callNode.setJSType(narrowed);\n         }\n       } else if (assertedNode.getType() == Token.AND ||\n                  assertedNode.getType() == Token.OR) {\n       if (type != narrowed) {\n         scope = scope.createChildFlowScope();\n         redeclare(scope, assertedNodeName, narrowed);\n+        callNode.setJSType(narrowed);\n       }\n     }\n     return scope;\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"/** @type string */\" +\n         \"var b = !goog.isDefAndNotNull(a) ? 'default' : a;\",\n         null);\n+  }\n+\n+  public void testClosure7() throws Exception {\n+    testClosureTypes(\n+        CLOSURE_DEFS +\n+        \"goog.asserts = {};\" +\n+        \"/** @return {*} */ goog.asserts.assert = function(x) { return x; };\" +\n+        \"/** @type {string|null|undefined} */ var a = foo();\" +\n+        \"/** @type {number} */\" +\n+        \"var b = goog.asserts.assert(a);\",\n+        \"initializing variable\\n\" +\n+        \"found   : string\\n\" +\n+        \"required: number\");\n   }\n \n   public void testReturn1() throws Exception {\n--- a/test/com/google/javascript/jscomp/TypeInferenceTest.java\n+++ b/test/com/google/javascript/jscomp/TypeInferenceTest.java\n     verify(\"out2\", OBJECT_TYPE);\n   }\n \n+  public void testAssert7() {\n+    JSType startType = createNullableType(OBJECT_TYPE);\n+    assuming(\"x\", startType);\n+    inFunction(\"out1 = x; out2 = goog.asserts.assert(x);\");\n+    verify(\"out1\", startType);\n+    verify(\"out2\", OBJECT_TYPE);\n+  }\n+\n   public void testAssertNumber() {\n     JSType startType = createNullableType(ALL_TYPE);\n     assuming(\"x\", startType);\n     inFunction(\"out1 = x.y; goog.asserts.assertObject(x.y); out2 = x.y;\");\n     verify(\"out1\", startType);\n     verify(\"out2\", OBJECT_TYPE);\n+  }\n+\n+  public void testAssertObject4() {\n+    JSType startType = createNullableType(ARRAY_TYPE);\n+    assuming(\"x\", startType);\n+    inFunction(\"out1 = x; out2 = goog.asserts.assertObject(x);\");\n+    verify(\"out1\", startType);\n+    verify(\"out2\", ARRAY_TYPE);\n   }\n \n   public void testAssertArray() {", "timestamp": 1280185379, "metainfo": ""}