{"sha": "69eda8e2cbbf269f8bdf3e2f6f89c2ec1f84119a", "log": "Updating externs compiler to handle exports with template declarations.  R=johnlenz DELTA=52 (50 added, 0 deleted, 2 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=6119   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypedCodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/TypedCodeGenerator.java\n \n package com.google.javascript.jscomp;\n \n+import com.google.common.base.Joiner;\n import com.google.common.base.Preconditions;\n import com.google.common.collect.Sets;\n import com.google.javascript.rhino.JSDocInfo;\n \n     // Return type\n     JSType retType = funType.getReturnType();\n-    if (retType != null && !retType.isUnknownType() && !retType.isEmptyType()) {\n+    if (retType != null &&\n+        (retType.isTemplateType() || !retType.isUnknownType()) &&\n+        !retType.isEmptyType()) {\n       sb.append(\" * \");\n       appendAnnotation(sb, \"return\", retType.toAnnotationString());\n       sb.append(\"\\n\");\n       }\n     }\n \n+    if (!funType.getTemplateKeys().isEmpty()) {\n+      sb.append(\" * @template \");\n+      sb.append(Joiner.on(\",\").join(funType.getTemplateKeys()));\n+      sb.append(\"\\n\");\n+    }\n+\n     if (fnNode != null && fnNode.getBooleanProp(Node.IS_DISPATCHER)) {\n       sb.append(\" * @javadispatch\\n\");\n     }\n \n     // Emit unknown types as '*' (AllType) since '?' (UnknownType) is not\n     // a valid JSDoc type.\n-    if (parameterType.isUnknownType()) {\n+    // TODO(johnlenz): Removing '?' is incorrect, update code\n+    if (!parameterType.isTemplateType() && parameterType.isUnknownType()) {\n       typeString = \"*\";\n     } else {\n       // Fix-up optional and vararg parameters to match JSDoc type language\n--- a/test/com/google/javascript/jscomp/ExternExportsPassTest.java\n+++ b/test/com/google/javascript/jscomp/ExternExportsPassTest.java\n                     \" * @return {string}\\n\" +\n                     \" */\\n\" +\n                     \"var externalName = function(param1, param2) {\\n};\\n\");\n+  }\n+\n+  public void testExportSymbolWithTemplateAnnotation() {\n+\n+    compileAndCheck(\"var internalName;\\n\" +\n+                    \"/**\\n\" +\n+                    \" * @param {T} param1\\n\" +\n+                    \" * @return {T}\\n\" +\n+                    \" * @template T\\n\" +\n+                    \" */\\n\" +\n+                    \"internalName = function(param1) {\" +\n+                      \"return param1;\" +\n+                    \"};\" +\n+                    \"goog.exportSymbol('externalName', internalName)\",\n+                    \"/**\\n\" +\n+                    \" * @param {T} param1\\n\" +\n+                    \" * @return {T}\\n\" +\n+                    \" * @template T\\n\" +\n+                    \" */\\n\" +\n+                    \"var externalName = function(param1) {\\n};\\n\");\n+  }\n+\n+  public void testExportSymbolWithMultipleTemplateAnnotation() {\n+\n+    compileAndCheck(\"var internalName;\\n\" +\n+                    \"/**\\n\" +\n+                    \" * @param {K} param1\\n\" +\n+                    \" * @return {V}\\n\" +\n+                    \" * @template K,V\\n\" +\n+                    \" */\\n\" +\n+                    \"internalName = function(param1) {\" +\n+                      \"return /** @type {V} */ (param1);\" +\n+                    \"};\" +\n+                    \"goog.exportSymbol('externalName', internalName)\",\n+                    \"/**\\n\" +\n+                    \" * @param {K} param1\\n\" +\n+                    \" * @return {V}\\n\" +\n+                    \" * @template K,V\\n\" +\n+                    \" */\\n\" +\n+                    \"var externalName = function(param1) {\\n};\\n\");\n   }\n \n   public void testExportSymbolWithoutTypeCheck() {", "timestamp": 1357848123, "metainfo": ""}