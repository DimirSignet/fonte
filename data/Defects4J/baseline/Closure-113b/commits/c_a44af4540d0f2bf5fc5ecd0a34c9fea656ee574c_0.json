{"sha": "a44af4540d0f2bf5fc5ecd0a34c9fea656ee574c", "log": "type-checking return types declared by inline JsDocs ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=53677460", "commit": "\n--- a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n+++ b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n \n   /**\n    * Infer the return type from JSDocInfo.\n-   */\n-  FunctionTypeBuilder inferReturnType(@Nullable JSDocInfo info) {\n-    if (info != null && info.hasReturnType()) {\n-      returnType = info.getReturnType().evaluate(scope, typeRegistry);\n-      returnTypeInferred = false;\n+   * @param fromInlineDoc Indicates whether return type is inferred from inline\n+   * doc attached to function name\n+   */\n+  FunctionTypeBuilder inferReturnType(\n+      @Nullable JSDocInfo info, boolean fromInlineDoc) {\n+    if (info != null) {\n+      JSTypeExpression returnTypeExpr =\n+          fromInlineDoc ? info.getType() : info.getReturnType();\n+      if (returnTypeExpr != null) {\n+        returnType = returnTypeExpr.evaluate(scope, typeRegistry);\n+        returnTypeInferred = false;\n+      }\n     }\n \n     return this;\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n               .setContents(getFunctionAnalysisResults(fnRoot))\n               .inferFromOverriddenFunction(overriddenType, parametersNode)\n               .inferTemplateTypeName(info, prototypeOwner)\n-              .inferReturnType(info)\n               .inferInheritance(info);\n+\n+          if (info == null || !info.hasReturnType()) {\n+            /**\n+             * when there is no {@code @return} annotation, look for inline\n+             * return type declaration\n+             */\n+            if (rValue != null && rValue.isFunction() &&\n+                rValue.getFirstChild() != null) {\n+              JSDocInfo nameDocInfo = rValue.getFirstChild().getJSDocInfo();\n+              builder.inferReturnType(nameDocInfo, true);\n+            }\n+          } else {\n+            builder.inferReturnType(info, false);\n+          }\n \n           // Infer the context type.\n           boolean searchedForThisType = false;\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n         isUnnamedFunction = true;\n       }\n       Node node = newNode(Token.FUNCTION);\n-      Node newName = transform(name);\n+      // if the function has an inline return annotation, attach it\n+      Node newName = transformNodeWithInlineJsDoc(name);\n       if (isUnnamedFunction) {\n         // Old Rhino tagged the empty name node with the line number of the\n         // declaration.\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n   public void testTypeCheck28() throws Exception {\n     testTypes(\"function foo(/** ? */ obj) {};\"\n         + \"foo({a: 123});\");\n+  }\n+\n+  public void testTypeCheckInlineReturns() throws Exception {\n+    testTypes(\n+        \"function /** string */ foo(x) { return x; }\" +\n+        \"var /** number */ a = foo('abc');\",\n+        \"initializing variable\\n\"\n+        + \"found   : string\\n\"\n+        + \"required: number\");\n   }\n \n   public void testTypeCheckDefaultExterns() throws Exception {", "timestamp": 1380849673, "metainfo": ""}