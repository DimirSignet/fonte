{"sha": "d3adbc32a4b96b88ff3e9cd11c67144caf1111b0", "log": "Adding @angularInject annotation to the list of supported annotations  R=johnlenz,nicksantos DELTA=58 (58 added, 0 deleted, 0 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=6142   ", "commit": "\n--- a/src/com/google/javascript/jscomp/parsing/Annotation.java\n+++ b/src/com/google/javascript/jscomp/parsing/Annotation.java\n  * @author nicksantos@google.com (Nick Santos)\n  */\n enum Annotation {\n+  ANGULAR_INJECT,\n   AUTHOR,\n   CONSISTENTIDGENERATOR,\n   CONSTANT,\n \n   static final Map<String, Annotation> recognizedAnnotations =\n       new ImmutableMap.Builder<String, Annotation>().\n+      put(\"angularInject\", Annotation.ANGULAR_INJECT).\n       put(\"argument\", Annotation.PARAM).\n       put(\"author\", Annotation.AUTHOR).\n       put(\"consistentIdGenerator\", Annotation.CONSISTENTIDGENERATOR).\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n               jsdocBuilder.markAnnotation(annotationName, lineno, charno);\n \n               switch (annotation) {\n+                case ANGULAR_INJECT:\n+                  if (jsdocBuilder.isAngularInjectRecorded()) {\n+                    parser.addParserWarning(\"msg.jsdoc.angularinject.extra\",\n+                      stream.getLineno(), stream.getCharno());\n+                  } else {\n+                    jsdocBuilder.recordAngularInject(true);\n+                  }\n+                  token = eatTokensUntilEOL();\n+                  continue retry;\n+\n                 case AUTHOR:\n                   if (jsdocBuilder.shouldParseDocumentation()) {\n                     ExtractionInfo authorInfo = extractSingleLineBlock();\n--- a/src/com/google/javascript/rhino/JSDocInfo.java\n+++ b/src/com/google/javascript/rhino/JSDocInfo.java\n     Set<String> suppressions = null;\n     Set<String> modifies = null;\n     String lendsName = null;\n+    boolean angularInject = false;\n   }\n \n   private static final class LazilyInitializedDocumentation {\n   }\n \n   /**\n+   * Returns whether JSDoc is annotated with {@code @angularInject} annotation.\n+   */\n+  public boolean isAngularInject() {\n+    return (info == null) ? false : info.angularInject;\n+  }\n+\n+  void setAngularInject(boolean angularInject) {\n+    lazyInitInfo();\n+    info.angularInject = angularInject;\n+  }\n+\n+  /**\n    * Gets the description specified by the {@code @license} annotation.\n    */\n   public String getLicense() {\n--- a/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n+++ b/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n   }\n \n   /**\n+   * Returns whether current JSDoc is annotated with {@code @angularInject}.\n+   */\n+  public boolean isAngularInjectRecorded() {\n+    return currentInfo.isAngularInject();\n+  }\n+\n+  /**\n+   * Records that we'd like to add {@code $inject} property inferred from\n+   * parameters.\n+   */\n+  public boolean recordAngularInject(boolean angularInject) {\n+    if (!isAngularInjectRecorded()) {\n+      currentInfo.setAngularInject(angularInject);\n+      populated = true;\n+      return true;\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  /**\n    * Whether the current doc info has other type tags, like\n    * {@code @param} or {@code @return} or {@code @type} or etc.\n    */\n--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n   public void testWhitelistedAnnotations() {\n     parse(\n       \"* @addon \\n\" +\n+      \"* @angularInject \\n\" +\n       \"* @augments \\n\" +\n       \"* @base \\n\" +\n       \"* @borrows \\n\" +\n     assertEquals(comment, info.getOriginalCommentString());\n   }\n \n+  public void testParseAngularInject1() throws Exception {\n+    assertTrue(parse(\"@angularInject*/\").isAngularInject());\n+  }\n+\n+  public void testParseAngularInject2() throws Exception {\n+    parse(\"@angularInject \\n@angularInject*/\", \"extra @angularInject tag\");\n+  }\n+\n   /**\n    * Asserts that a documentation field exists on the given marker.\n    *", "timestamp": 1358281696, "metainfo": ""}