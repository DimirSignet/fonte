{"sha": "6a8dd84fd864b7cd851425c499677a1006ae6979", "log": "Allow --closure_entry_point to peg to a module by name ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=42875140", "commit": "\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n       \"JSC_MISSING_ENTRY_ERROR\",\n       \"required entry point \\\"{0}\\\" never provided\");\n \n+  static final DiagnosticType MISSING_MODULE_ERROR = DiagnosticType.error(\n+      \"JSC_MISSING_ENTRY_ERROR\",\n+      \"unknown module \\\"{0}\\\" specified in entry point spec\");\n+\n   // Used in PerformanceTracker\n   static final String PARSING_PASS_NAME = \"parseInputs\";\n \n         } catch (CircularDependencyException e) {\n           report(JSError.make(\n               JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));\n-\n-          // If in IDE mode, we ignore the error and keep going.\n-          if (hasErrors()) {\n-            return null;\n-          }\n         } catch (MissingProvideException e) {\n           report(JSError.make(\n               MISSING_ENTRY_ERROR, e.getMessage()));\n-\n-          // If in IDE mode, we ignore the error and keep going.\n-          if (hasErrors()) {\n-            return null;\n-          }\n+        } catch (JSModuleGraph.MissingModuleException e) {\n+          report(JSError.make(\n+              MISSING_MODULE_ERROR, e.getMessage()));\n+        }\n+\n+        // If in IDE mode, we ignore the error and keep going.\n+        if (hasErrors()) {\n+          return null;\n         }\n       }\n \n--- a/src/com/google/javascript/jscomp/DependencyOptions.java\n+++ b/src/com/google/javascript/jscomp/DependencyOptions.java\n    * primitives we're using. For example, goog.provide('foo.bar')\n    * provides the symbol 'foo.bar'.\n    *\n+   * Entry points can be scoped to a module by specifying 'mod2:foo.bar'.\n+   *\n    * @return this for easy chaining.\n    */\n   public DependencyOptions setEntryPoints(Collection<String> symbols) {\n--- a/src/com/google/javascript/jscomp/JSModuleGraph.java\n+++ b/src/com/google/javascript/jscomp/JSModuleGraph.java\n   }\n \n   /**\n+   * Gets all modules indexed by name.\n+   */\n+  Map<String, JSModule> getModulesByName() {\n+    Map<String, JSModule> result = Maps.newHashMap();\n+    for (JSModule m : modules) {\n+      result.put(m.getName(), m);\n+    }\n+    return result;\n+  }\n+\n+  /**\n    * Gets the total number of modules.\n    */\n   int getModuleCount() {\n   public List<CompilerInput> manageDependencies(\n       List<String> entryPoints,\n       List<CompilerInput> inputs)\n-      throws CircularDependencyException, MissingProvideException {\n+      throws CircularDependencyException,\n+          MissingModuleException,\n+          MissingProvideException {\n     DependencyOptions depOptions = new DependencyOptions();\n     depOptions.setDependencySorting(true);\n     depOptions.setDependencyPruning(true);\n   public List<CompilerInput> manageDependencies(\n       DependencyOptions depOptions,\n       List<CompilerInput> inputs)\n-      throws CircularDependencyException, MissingProvideException {\n+      throws CircularDependencyException, MissingProvideException,\n+          MissingModuleException {\n \n     SortedDependencies<CompilerInput> sorter =\n         new SortedDependencies<CompilerInput>(inputs);\n-    Set<CompilerInput> entryPointInputs = Sets.newLinkedHashSet();\n-    if (depOptions.shouldPruneDependencies()) {\n-      if (!depOptions.shouldDropMoochers()) {\n-        entryPointInputs.addAll(sorter.getInputsWithoutProvides());\n-      }\n-\n-      for (String entryPoint : depOptions.getEntryPoints()) {\n-        entryPointInputs.add(sorter.getInputProviding(entryPoint));\n-      }\n-\n-      CompilerInput baseJs = sorter.maybeGetInputProviding(\"goog\");\n-      if (baseJs != null) {\n-        entryPointInputs.add(baseJs);\n-      }\n-    } else {\n-      entryPointInputs.addAll(inputs);\n-    }\n+    Iterable<CompilerInput> entryPointInputs = createEntryPointInputs(\n+        depOptions, inputs, sorter);\n \n     // The order of inputs, sorted independently of modules.\n     List<CompilerInput> absoluteOrder =\n     return result;\n   }\n \n+  private Collection<CompilerInput> createEntryPointInputs(\n+      DependencyOptions depOptions,\n+      List<CompilerInput> inputs,\n+      SortedDependencies<CompilerInput> sorter)\n+      throws MissingModuleException, MissingProvideException {\n+    Set<CompilerInput> entryPointInputs = Sets.newLinkedHashSet();\n+    Map<String, JSModule> modulesByName = getModulesByName();\n+\n+    if (depOptions.shouldPruneDependencies()) {\n+      if (!depOptions.shouldDropMoochers()) {\n+        entryPointInputs.addAll(sorter.getInputsWithoutProvides());\n+      }\n+\n+      for (String entryPoint : depOptions.getEntryPoints()) {\n+        // An entry point is either formatted as:\n+        // 'foo.bar' - peg foo.bar to its current module\n+        // 'modC:foo.bar' - peg foo.bar to modC\n+        String inputName = entryPoint;\n+        int splitPoint = entryPoint.indexOf(':');\n+        CompilerInput entryPointInput = null;\n+        if (splitPoint != -1) {\n+          String moduleName = entryPoint.substring(0, splitPoint);\n+          inputName = entryPoint.substring(\n+              Math.min(splitPoint + 1, entryPoint.length() - 1));\n+          JSModule module = modulesByName.get(moduleName);\n+          if (module == null) {\n+            throw new MissingModuleException(moduleName);\n+          } else {\n+            entryPointInput = sorter.getInputProviding(inputName);\n+            entryPointInput.overrideModule(module);\n+          }\n+        } else {\n+          entryPointInput = sorter.getInputProviding(inputName);\n+        }\n+\n+        entryPointInputs.add(entryPointInput);\n+      }\n+\n+      CompilerInput baseJs = sorter.maybeGetInputProviding(\"goog\");\n+      if (baseJs != null) {\n+        entryPointInputs.add(baseJs);\n+      }\n+    } else {\n+      entryPointInputs.addAll(inputs);\n+    }\n+    return entryPointInputs;\n+  }\n+\n   LinkedDirectedGraph<JSModule, String> toGraphvizGraph() {\n     LinkedDirectedGraph<JSModule, String> graphViz =\n         LinkedDirectedGraph.create();\n     }\n   }\n \n+  public static class MissingModuleException extends Exception {\n+    MissingModuleException(String moduleName) {\n+      super(moduleName);\n+    }\n+  }\n+\n }\n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n          });\n   }\n \n+  public void testModuleEntryPoint() throws Exception {\n+    useModules = ModulePattern.STAR;\n+    args.add(\"--only_closure_dependencies\");\n+    args.add(\"--closure_entry_point=m1:a\");\n+    test(\n+        new String[] {\n+          \"goog.provide('a');\",\n+          \"goog.provide('b');\"\n+        },\n+        // Check that 'b' was stripped out, and 'a' was moved to the second\n+        // module (m1).\n+        new String[] {\n+          \"\",\n+          \"var a = {};\"\n+        });\n+  }\n+\n   public void testNoCompile() {\n     args.add(\"--warning_level=VERBOSE\");\n     test(new String[] {", "timestamp": 1361486425, "metainfo": ""}