{"sha": "1dfad5043a207e032a78ef50c3cba50488bcd300", "log": "In simple mode, do not remove unreferenced function arguments. Fixes issue 253  R=johnlenz DELTA=30 (21 added, 0 deleted, 9 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=6078   ", "commit": "\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n    * @param fnScope The scope inside the function\n    */\n   private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // TODO(johnlenz): Update type registry for function signature changes.\n+    // Notice that removing unreferenced function args breaks\n+    // Function.prototype.length. In advanced mode, we don't really care\n+    // about this: we consider \"length\" the equivalent of reflecting on\n+    // the function's lexical source.\n+    //\n+    // Rather than create a new option for this, we assume that if the user\n+    // is removing globals, then it's OK to remove unused function args.\n+    //\n+    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    if (!removeGlobals) {\n+      return;\n+    }\n \n     Node function = fnScope.getRootNode();\n \n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n     test(\"function f() { this.a = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n   }\n \n+  public void testSimpleModeLeavesUnusedParams() {\n+    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n+    testSame(\"window.f = function(a) {};\");\n+  }\n+\n+  public void testAdvancedModeRemovesUnusedParams() {\n+    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n+    test(\"window.f = function(a) {};\", \"window.a = function() {};\");\n+  }\n+\n   public void testCheckGlobalThisOffByDefault() {\n     testSame(\"function f() { this.a = 3; }\");\n   }\n     args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n     args.add(\"--debug=false\");\n     test(\"function foo(a) {}\",\n-         \"function foo() {}\");\n+         \"function foo(a) {}\");\n   }\n \n   public void testDebugFlag2() {\n           \"goog.provide('Scotch'); var x = 3;\"\n          },\n          new String[] {\n-           \"var beer = {}; function f() {}\",\n+           \"var beer = {}; function f(a) {}\",\n            \"\"\n          });\n \n           \"goog.provide('beer'); /** @param {Scotch} x */ function f(x) {}\"\n          },\n          new String[] {\n-           \"var beer = {}; function f() {}\",\n+           \"var beer = {}; function f(a) {}\",\n            \"\"\n          },\n          RhinoErrorReporter.TYPE_PARSE_ERROR);\n--- a/test/com/google/javascript/jscomp/IntegrationTest.java\n+++ b/test/com/google/javascript/jscomp/IntegrationTest.java\n     String result = \"\" +\n         \"function some_function() {\\n\" +\n         \"  var a, b;\\n\" +\n-        \"  any_expression && (b = external_ref, a = function() {\\n\" +\n+        \"  any_expression && (b = external_ref, a = function(a) {\\n\" +\n         \"    return b()\\n\" +\n         \"  });\\n\" +\n         \"  return{method1:function() {\\n\" +\n--- a/test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java\n+++ b/test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java\n   public void testRemoveGlobal1() {\n     removeGlobal = false;\n     testSame(\"var x=1\");\n-    test(\"var y=function(x){var z;}\", \"var y=function(){}\");\n+    test(\"var y=function(x){var z;}\", \"var y=function(x){}\");\n   }\n \n   public void testRemoveGlobal2() {\n     removeGlobal = false;\n     testSame(\"var x=1\");\n-    test(\"function y(x){var z;}\", \"function y(){}\");\n+    test(\"function y(x){var z;}\", \"function y(x){}\");\n   }\n \n   public void testRemoveGlobal3() {\n     removeGlobal = false;\n     testSame(\"var x=1\");\n     test(\"function x(){function y(x){var z;}y()}\",\n-         \"function x(){function y(){}y()}\");\n+         \"function x(){function y(x){}y()}\");\n   }\n \n   public void testRemoveGlobal4() {\n          \"function b(){\" +\n          \"  a();\" +\n          \"}\",\n-         \"function a(){(function(){b()})(1)}\" +\n+         \"function a(){(function(x){b()})(1)}\" +\n          \"function b(){a()}\");\n   }\n ", "timestamp": 1357348843, "metainfo": ""}