{"sha": "a69d5521ba50a1952682ab53bb0f1a1288314e8a", "log": "better property checks on union types  R=johnlenz DELTA=90  (68 added, 2 deleted, 20 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3236   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n   }\n \n   /**\n-   * Make sure that the access of this property is ok.\n+   * Emit a warning if we can prove that a property cannot possibly be\n+   * defined on an object. Note the difference between JS and a strictly\n+   * statically typed language: we're checking if the property\n+   * *cannot be defined*, whereas a java compiler would check if the\n+   * property *can be undefined*.\n    */\n   private void checkPropertyAccess(JSType childType, String propName,\n       NodeTraversal t, Node n) {\n-    ObjectType objectType = childType.dereference();\n-    if (objectType != null) {\n-      JSType propType = getJSType(n);\n-      if ((!objectType.hasProperty(propName) ||\n-           objectType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) &&\n-          propType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) {\n-        if (objectType instanceof EnumType) {\n-          report(t, n, INEXISTENT_ENUM_ELEMENT, propName);\n-        } else if (!objectType.isEmptyType() &&\n-            reportMissingProperties && !isPropertyTest(n)) {\n-          if (!typeRegistry.canPropertyBeDefined(objectType, propName)) {\n-            report(t, n, INEXISTENT_PROPERTY, propName,\n-                validator.getReadableJSTypeName(n.getFirstChild(), true));\n+    // If the property type is unknown, check the object type to see if it\n+    // can ever be defined. We explicitly exclude CHECKED_UNKNOWN (for\n+    // properties where we've checked that it exists, or for properties on\n+    // objects that aren't in this binary).\n+    JSType propType = getJSType(n);\n+    if (propType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) {\n+      childType = childType.autobox();\n+      ObjectType objectType = ObjectType.cast(childType);\n+      if (objectType != null) {\n+        // We special-case object types so that checks on enums can be\n+        // much stricter, and so that we can use hasProperty (which is much\n+        // faster in most cases).\n+        if (!objectType.hasProperty(propName) ||\n+            objectType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) {\n+          if (objectType instanceof EnumType) {\n+            report(t, n, INEXISTENT_ENUM_ELEMENT, propName);\n+          } else {\n+            checkPropertyAccessHelper(objectType, propName, t, n);\n           }\n         }\n-      }\n-    } else {\n-      // TODO(nicksantos): might want to flag the access on a non object when\n-      // it's impossible to get a property from this type.\n+\n+      } else {\n+        checkPropertyAccessHelper(childType, propName, t, n);\n+      }\n+    }\n+  }\n+\n+  private void checkPropertyAccessHelper(JSType objectType, String propName,\n+      NodeTraversal t, Node n) {\n+    if (!objectType.isEmptyType() &&\n+        reportMissingProperties && !isPropertyTest(n)) {\n+      if (!typeRegistry.canPropertyBeDefined(objectType, propName)) {\n+        report(t, n, INEXISTENT_PROPERTY, propName,\n+            validator.getReadableJSTypeName(n.getFirstChild(), true));\n+      }\n     }\n   }\n \n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n   /**\n    * Dereference a type for property access.\n    *\n+   * Autoboxes the type, and filters null/undefined, and returns the result.\n+   */\n+  public JSType autobox() {\n+    JSType restricted = restrictByNotNullOrUndefined();\n+    JSType autobox = restricted.autoboxesTo();\n+    return autobox == null ? restricted : autobox;\n+  }\n+\n+  /**\n+   * Dereference a type for property access.\n+   *\n    * Autoboxes the type, filters null/undefined, and returns the result\n    * iff it's an object.\n    */\n   public final ObjectType dereference() {\n-    JSType restricted = restrictByNotNullOrUndefined();\n-    JSType autobox = restricted.autoboxesTo();\n-    return ObjectType.cast(autobox == null ? restricted : autobox);\n+    return ObjectType.cast(autobox());\n   }\n \n   /**\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n   }\n \n   @Override\n+  public JSType autobox() {\n+    UnionTypeBuilder restricted = new UnionTypeBuilder(registry);\n+    for (JSType t : alternates) {\n+      restricted.addAlternate(t.autobox());\n+    }\n+    return restricted.build();\n+  }\n+\n+  @Override\n   public JSType restrictByNotNullOrUndefined() {\n     UnionTypeBuilder restricted = new UnionTypeBuilder(registry);\n     for (JSType t : alternates) {\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n           \"var x = /** @type {Object|number} */ (\" +\n           \"  {/** @type {string} */ foo: 3});\" +\n         \"}\",\n-        \"assignment to property foo of (Object|null|number)\\n\" +\n+        \"assignment to property foo of Object\\n\" +\n         \"found   : number\\n\" +\n         \"required: string\");\n   }\n         \"function g(x) { return x.isVisible; }\");\n   }\n \n+  public void testMissingProperty38() throws Exception {\n+    testTypes(\n+        \"/** @constructor */ function Foo() {}\" +\n+        \"/** @constructor */ function Bar() {}\" +\n+        \"/** @return {Foo|Bar} */ function f() { return new Foo(); }\" +\n+        \"f().missing;\",\n+        \"Property missing never defined on (Bar|Foo|null)\");\n+  }\n+\n+  public void testMissingProperty39() throws Exception {\n+    testTypes(\n+        \"/** @return {string|number} */ function f() { return 3; }\" +\n+        \"f().length;\");\n+  }\n+\n+  public void testMissingProperty40() throws Exception {\n+    testClosureTypes(\n+        \"goog.addDependency('zzz.js', ['MissingType'], []);\" +\n+        \"/** @param {(Array|MissingType)} x */\" +\n+        \"function f(x) { x.impossible(); }\", null);\n+  }\n+\n+  public void testMissingProperty41() throws Exception {\n+    testTypes(\n+        \"/** @param {(Array|Date)} x */\" +\n+        \"function f(x) { if (x.impossible) x.impossible(); }\");\n+  }\n+\n   public void testReflectObject1() throws Exception {\n     testClosureTypes(\n         \"var goog = {}; goog.reflect = {}; \" +", "timestamp": 1315837340, "metainfo": ""}