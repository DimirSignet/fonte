{"sha": "984bce0d9f36b0a21a0f9b51dc68fca0175aa1c8", "log": "Add duplicate object literal key check to jscompiler es5 strict mode checks.  R=johnlenz DELTA=43  (37 added, 0 deleted, 6 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2201   ", "commit": "\n--- a/src/com/google/javascript/jscomp/StrictModeCheck.java\n+++ b/src/com/google/javascript/jscomp/StrictModeCheck.java\n package com.google.javascript.jscomp;\n \n import com.google.common.collect.Lists;\n+import com.google.common.collect.Sets;\n \n import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;\n import com.google.javascript.jscomp.Scope.Var;\n \n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n+\n+import java.util.Set;\n \n /**\n  * Checks that the code obeys the static restrictions of strict mode:\n   static final DiagnosticType ILLEGAL_NAME = DiagnosticType.error(\n       \"JSC_ILLEGAL_NAME\",\n       \"identifiers ending in '__' cannot be used in Caja\");\n+\n+  static final DiagnosticType DUPLICATE_OBJECT_KEY = DiagnosticType.error(\n+      \"JSC_DUPLICATE_OBJECT_KEY\",\n+      \"object literals cannot contain duplicate keys in ES5 strict mode\");\n \n   private final AbstractCompiler compiler;\n   private final boolean noVarCheck;\n \n   /** Checks that object literal keys are valid. */\n   private void checkObjectLiteral(NodeTraversal t, Node n) {\n-    if (!noCajaChecks) {\n-      for (Node key = n.getFirstChild();\n-           key != null;\n-           key = key.getNext()) {\n-        if (key.getString().endsWith(\"__\")) {\n-          t.report(key, ILLEGAL_NAME);\n+    Set<String> getters = Sets.newHashSet();\n+    Set<String> setters = Sets.newHashSet();\n+    for (Node key = n.getFirstChild();\n+         key != null;\n+         key = key.getNext()) {\n+      if (!noCajaChecks && key.getString().endsWith(\"__\")) {\n+        t.report(key, ILLEGAL_NAME);\n+      }\n+      if (key.getType() != Token.SET) {\n+        // normal property and getter cases\n+        if (getters.contains(key.getString())) {\n+          t.report(key, DUPLICATE_OBJECT_KEY);\n+        } else {\n+          getters.add(key.getString());\n+        }\n+      }\n+      if (key.getType() != Token.GET) {\n+        // normal property and setter cases\n+        if (setters.contains(key.getString())) {\n+          t.report(key, DUPLICATE_OBJECT_KEY);\n+        } else {\n+          setters.add(key.getString());\n         }\n       }\n     }\n--- a/test/com/google/javascript/jscomp/StrictModeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/StrictModeCheckTest.java\n     // Validate that number as objlit key\n     testSame(\"var o = {1: 3, 2: 4};\");\n   }\n+\n+  public void testDuplicateObjectLiteralKey() {\n+    testSame(\"var o = {a: 1, b: 2, c: 3};\");\n+    testSame(\"var x = { get a() {}, set a(p) {} };\");\n+\n+    test(\"var o = {a: 1, b: 2, a: 3};\", null,\n+         StrictModeCheck.DUPLICATE_OBJECT_KEY);\n+    test(\"var x = { get a() {}, get a() {} };\", null,\n+         StrictModeCheck.DUPLICATE_OBJECT_KEY);\n+    test(\"var x = { get a() {}, a: 1 };\", null,\n+         StrictModeCheck.DUPLICATE_OBJECT_KEY);\n+    test(\"var x = { set a(p) {}, a: 1 };\", null,\n+         StrictModeCheck.DUPLICATE_OBJECT_KEY);\n+  }\n }", "timestamp": 1307479518, "metainfo": ""}