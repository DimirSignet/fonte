{"sha": "0907b6618a60b2de23c8f7ec2217a37dc5e9a091", "log": "Fix improper analysis of NEW, the bad way: by assuming NEW always returns a non-local result. Fixes issue 303.  R=johnlenz DELTA=68  (56 added, 0 deleted, 12 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=161   ", "commit": "\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n             || isToStringMethodCall(value)\n             || locals.apply(value);\n       case Token.NEW:\n-        return true;\n+        // TODO(nicksantos): This needs to be changed so that it\n+        // returns true iff we're sure the value was never aliased from inside\n+        // the constructor (similar to callHasLocalResult)\n+        return false;\n       case Token.FUNCTION:\n       case Token.REGEXP:\n       case Token.ARRAYLIT:\n--- a/test/com/google/javascript/jscomp/NodeUtilTest.java\n+++ b/test/com/google/javascript/jscomp/NodeUtilTest.java\n     assertFalse(testLocalValue(\"this\"));\n     assertFalse(testLocalValue(\"arguments\"));\n \n-    // new objects are local\n-    assertTrue(testLocalValue(\"new x()\"));\n+    // We can't know if new objects are local unless we know\n+    // that they don't alias themselves.\n+    assertFalse(testLocalValue(\"new x()\"));\n \n     // property references are assume to be non-local\n     assertFalse(testLocalValue(\"(new x()).y\"));\n--- a/test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java\n+++ b/test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java\n \n   boolean regExpHaveSideEffects = true;\n \n+  private static final boolean BROKEN_NEW = true;\n+\n   private static String kExterns =\n       CompilerTypeTestCase.DEFAULT_EXTERNS +\n+      \"var window; window.setTimeout;\" +\n       \"/**@nosideeffects*/ function externSENone(){}\\n\" +\n \n       \"/**@modifies{this}*/ function externSEThis(){}\\n\" +\n     boolean regExpHaveSideEffects = true;\n   }\n \n+  public void testIssue303() throws Exception {\n+    checkMarkedCalls(\n+        \"/** @constructor */ function F() {\" +\n+        \"  var self = this;\" +\n+        \"  window.setTimeout(function() {\" +\n+        \"    window.location = self.location;\" +\n+        \"  }, 0);\" +\n+        \"}\" +\n+        \"F.prototype.setLocation = function(x) {\" +\n+        \"  this.location = x;\" +\n+        \"};\" +\n+        \"(new F()).setLocation('http://www.google.com/');\",\n+        ImmutableList.<String>of());\n+  }\n+\n+  public void testIssue303b() throws Exception {\n+    checkMarkedCalls(\n+        \"/** @constructor */ function F() {\" +\n+        \"  var self = this;\" +\n+        \"  window.setTimeout(function() {\" +\n+        \"    window.location = self.location;\" +\n+        \"  }, 0);\" +\n+        \"}\" +\n+        \"F.prototype.setLocation = function(x) {\" +\n+        \"  this.location = x;\" +\n+        \"};\" +\n+        \"function x() {\" +\n+        \"  (new F()).setLocation('http://www.google.com/');\" +\n+        \"} window['x'] = x;\",\n+        ImmutableList.<String>of());\n+  }\n+\n   public void testAnnotationInExterns_new1() throws Exception {\n     checkMarkedCalls(\"externSENone()\",\n         ImmutableList.<String>of(\"externSENone\"));\n   public void testAnnotationInExterns_new4() throws Exception {\n     // The entire expression containing \"externObjSEThisMethod\" is considered\n     // side-effect free in this context.\n+\n     checkMarkedCalls(\"new externObjSEThis().externObjSEThisMethod('')\",\n-        ImmutableList.<String>of(\n-            \"externObjSEThis\", \"NEW STRING externObjSEThisMethod\"));\n+        BROKEN_NEW ?\n+            ImmutableList.<String>of(\n+               \"externObjSEThis\") :\n+            ImmutableList.<String>of(\n+               \"externObjSEThis\", \"NEW STRING externObjSEThisMethod\"));\n   }\n \n   public void testAnnotationInExterns_new5() throws Exception {\n         \"  new externObjSEThis().externObjSEThisMethod('') \" +\n         \"};\" +\n         \"f();\",\n-        ImmutableList.<String>of(\n-            \"externObjSEThis\", \"NEW STRING externObjSEThisMethod\", \"f\"));\n+        BROKEN_NEW ?\n+            ImmutableList.<String>of(\n+                \"externObjSEThis\") :\n+           ImmutableList.<String>of(\n+               \"externObjSEThis\", \"NEW STRING externObjSEThisMethod\", \"f\"));\n   }\n \n   public void testAnnotationInExterns_new7() throws Exception {\n                      \"  var a = new A; a.foo = 1; return a;\" +\n                      \"}\" +\n                      \"f()\",\n-                     ImmutableList.<String>of(\"A\", \"f\"));\n+                     BROKEN_NEW ?\n+                         ImmutableList.<String>of(\"A\") :\n+                         ImmutableList.<String>of(\"A\", \"f\"));\n   }\n \n   public void testLocalizedSideEffects9() throws Exception {\n                      \"  var a = new A; a.foo = 1; return a;\" +\n                      \"}\" +\n                      \"f()\",\n-                     ImmutableList.<String>of(\"A\", \"f\"));\n+                     BROKEN_NEW ?\n+                         ImmutableList.<String>of(\"A\") :\n+                         ImmutableList.<String>of(\"A\", \"f\"));\n   }\n \n   public void testLocalizedSideEffects10() throws Exception {", "timestamp": 1292633248, "metainfo": ""}