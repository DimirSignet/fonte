{"sha": "35b886aab738f7c117c889725d65964a9d179a5d", "log": "Enable Caja integration test and fix it: 1) Touchup Object literal construction 2) Enable 'get' and 'set' object literal members  R=nicksantos DELTA=95  (73 added, 2 deleted, 20 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=146   ", "commit": "\n--- a/src/com/google/javascript/jscomp/jsonml/Reader.java\n+++ b/src/com/google/javascript/jscomp/jsonml/Reader.java\n         break;\n       case DataProp:\n         transformDataProp(element, parent);\n+        break;\n+      case GetterProp:\n+        transformGetterProp(element, parent);\n+        break;\n+      case SetterProp:\n+        transformSetterProp(element, parent);\n         break;\n       case DefaultCase:\n         transformDefaultCase(element, parent);\n     setPosition(node);\n     parent.addChildToBack(node);\n \n-    transformElement(element.getChild(0), parent);\n-  }\n+    transformElement(element.getChild(0), node);\n+  }\n+\n+  /*\n+   * GetterProp is a object literal entry for a getter.\n+   * For example, {get x() {return 1}}\n+   */\n+  private void transformGetterProp(JsonML element, Node parent)\n+      throws JsonMLException {\n+    transformProp(Token.GET, element, parent);\n+  }\n+\n+  /*\n+   * GetterProp is a object literal entry for a getter.\n+   * For example, {set x() {return 1}}\n+   */\n+  private void transformSetterProp(JsonML element, Node parent)\n+      throws JsonMLException {\n+    transformProp(Token.SET, element, parent);\n+  }\n+\n+  private void transformProp(int tokenType, JsonML element, Node parent)\n+      throws JsonMLException {\n+    Object name = getObjectAttribute(element, TagAttr.NAME);\n+\n+    Node node = null;\n+    if (name instanceof Number) {\n+      // TODO(johnlenz): convert the number to a quoted string.\n+      throw new IllegalStateException(\n+         \"Not yet supported.\");\n+    } else if (name instanceof String) {\n+      node = Node.newString(tokenType, (String) name);\n+    } else {\n+      throw new IllegalStateException(\n+          \"The name of the property has invalid type.\");\n+    }\n+\n+    setPosition(node);\n+    parent.addChildToBack(node);\n+\n+    transformElement(element.getChild(0), node);\n+  }\n+\n \n   private void transformDefaultCase(JsonML element, Node parent)\n       throws JsonMLException {\n--- a/src/com/google/javascript/jscomp/jsonml/TagType.java\n+++ b/src/com/google/javascript/jscomp/jsonml/TagType.java\n \n   // *Prop types\n   DataProp,\n-  GetterProp,         // not supported by Closure Compiler\n-  SetterProp,         // not supported by Closure Compiler\n+  GetterProp,\n+  SetterProp,\n \n   // *Patt types\n   IdPatt,\n--- a/src/com/google/javascript/jscomp/jsonml/Validator.java\n+++ b/src/com/google/javascript/jscomp/jsonml/Validator.java\n         validateCountExpr(element);\n         break;\n       case DataProp:\n-        validateDataProp(element);\n+        validateProp(element);\n+        break;\n+      case GetterProp:\n+        validateProp(element);\n+        break;\n+      case SetterProp:\n+        validateProp(element);\n         break;\n       case DeleteExpr:\n         validateDeleteExpr(element);\n     validateArgument(element, TagAttr.OP);\n   }\n \n-  private void validateDataProp(JsonML element) {\n+  private void validateProp(JsonML element) {\n     validateChildrenSize(element, 1);\n     if (!error) {\n       validateArgument(element, TagAttr.NAME);\n   }\n \n   private void validateObjectExpr(JsonML element) {\n+    TagType[] expected =\n+        {TagType.DataProp, TagType.GetterProp, TagType.SetterProp};\n     for (int i = 0; i < element.childrenSize(); ++i) {\n-      validateChildType(element, TagType.DataProp, i);\n+      validateChildType(element, expected, i);\n     }\n   }\n \n--- a/src/com/google/javascript/jscomp/jsonml/Writer.java\n+++ b/src/com/google/javascript/jscomp/jsonml/Writer.java\n   private void processObjectLiteral(Node node, JsonML currentParent) {\n     JsonML element = new JsonML(TagType.ObjectExpr);\n     currentParent.appendChild(element);\n-    Iterator<Node> it = node.children().iterator();\n-    while (it.hasNext()) {\n-      JsonML item = new JsonML(TagType.DataProp);\n-      Node child = it.next();\n-      Object name = null;\n-      switch (child.getType()) {\n+    for (Node key : node.children()) {\n+      Node value = key.getFirstChild();\n+      JsonML item;\n+      Object name;\n+      switch (key.getType()) {\n         case Token.STRING:\n-          name = child.getString();\n+          item = new JsonML(TagType.DataProp);\n+          name = key.getString();\n           break;\n         case Token.NUMBER:\n-          name = child.getDouble();\n+          item = new JsonML(TagType.DataProp);\n+          name = key.getDouble();\n+          break;\n+        case Token.GET:\n+          item = new JsonML(TagType.GetterProp);\n+          name = key.getString();\n+          break;\n+        case Token.SET:\n+          item = new JsonML(TagType.SetterProp);\n+          name = key.getString();\n           break;\n         default:\n           throw new IllegalArgumentException(\"Illegal type of node.\");\n       }\n       item.setAttribute(TagAttr.NAME, name);\n-      processNode(it.next(), item);\n+      processNode(value, item);\n       element.appendChild(item);\n     }\n   }\n--- a/test/com/google/javascript/jscomp/jsonml/JsonMLValidationTest.java\n+++ b/test/com/google/javascript/jscomp/jsonml/JsonMLValidationTest.java\n       String errorMsg = String.format(\n           \"Validation error for %s.\\n Received: %s\\n Expected: %s\\n\",\n           jsonml, msg, expected);\n-      throw new Exception(errorMsg);\n+      assertEquals(errorMsg, expected, msg);\n     }\n   }\n \n             \"['DataProp',{'name':'y'},\" +\n                 \"['LiteralExpr',{'type':'number','value':2}]]]\");\n     // wrong types of children\n+    TagType[] tags = \n+        {TagType.DataProp, TagType.GetterProp, TagType.SetterProp };\n     testWrongChildTypeValidation(\"\" +\n         \"['ObjectExpr',{},\" +\n             \"['DataProp',{'name':'x'},\" +\n                 \"['LiteralExpr',{'type':'number','value':1}]],\" +\n             \"['IdExpr',{'name':'y'}]]\",\n-        TagType.ObjectExpr, TagType.DataProp, TagType.IdExpr, 1);\n+        TagType.ObjectExpr, tags, TagType.IdExpr, 1);\n   }\n \n   public void testParamDeclValidation() throws Exception {", "timestamp": 1292444772, "metainfo": ""}