{"sha": "eea16887f19eb56e5e01f3b5627988c7197fed80", "log": "Simplify SCRIPT nodes slightly: don't require them to be marked \"synthetic\" it is just busy work.  R=nicksantos DELTA=21  (7 added, 13 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4864   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AstValidator.java\n+++ b/src/com/google/javascript/jscomp/AstValidator.java\n \n   public void validateScript(Node n) {\n     validateNodeType(Token.SCRIPT, n);\n-    validateIsSynthetic(n);\n     validateHasSourceName(n);\n     validateHasInputId(n);\n     for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n--- a/src/com/google/javascript/jscomp/ObjectPropertyStringPreprocess.java\n+++ b/src/com/google/javascript/jscomp/ObjectPropertyStringPreprocess.java\n     Node script = externs.getLastChild();\n     if (script == null || !script.isScript()) {\n       script = IR.script();\n-      script.setIsSyntheticBlock(true);\n       externs.addChildToBack(script);\n     }\n     script.addChildToBack(declarationStmt);\n--- a/src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java\n+++ b/src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java\n     // Remove any useless children\n     for (Node c = n.getFirstChild(); c != null; ) {\n       Node next = c.getNext();  // save c.next, since 'c' may be removed\n-      if (!mayHaveSideEffects(c) && !c.isSyntheticBlock()) {\n+      if (!isUnremovableNode(c) && !mayHaveSideEffects(c)) {\n         // TODO(johnlenz): determine what this is actually removing. Candidates\n         //    include: EMPTY nodes, control structures without children\n         //    (removing infinite loops), empty try blocks.  What else?\n     }\n \n     return n;\n+  }\n+\n+  /**\n+   * Some nodes unremovable node don't have side-effects.\n+   */\n+  private boolean isUnremovableNode(Node n) {\n+    return (n.isBlock() && n.isSyntheticBlock()) || n.isScript();\n   }\n \n   // TODO(johnlenz): Consider moving this to a separate peephole pass.\n--- a/src/com/google/javascript/jscomp/SyntheticAst.java\n+++ b/src/com/google/javascript/jscomp/SyntheticAst.java\n   public void clearAst() {\n     root = IR.script();\n     root.setInputId(inputId);\n-    root.setIsSyntheticBlock(true);\n     root.setStaticSourceFile(sourceFile);\n   }\n \n--- a/src/com/google/javascript/jscomp/jsonml/Reader.java\n+++ b/src/com/google/javascript/jscomp/jsonml/Reader.java\n     insertExprResultState = true;\n \n     Node script = IR.script();\n-    script.setIsSyntheticBlock(true);\n     parent.addChildToBack(script);\n \n     for (JsonML child : element.getChildren()) {\n--- a/test/com/google/javascript/jscomp/AstValidatorTest.java\n+++ b/test/com/google/javascript/jscomp/AstValidatorTest.java\n   public void testValidScript() {\n     Node n = new Node(Token.SCRIPT);\n     expectInvalid(n, Check.SCRIPT);\n-    n.setIsSyntheticBlock(true);\n-    expectInvalid(n, Check.SCRIPT);\n     n.setInputId(new InputId(\"something_input\"));\n     n.putProp(Node.SOURCENAME_PROP, \"something\");\n     expectValid(n, Check.SCRIPT);\n--- a/test/com/google/javascript/jscomp/CodePrinterTest.java\n+++ b/test/com/google/javascript/jscomp/CodePrinterTest.java\n       CompilerPass typeResolver = passConfig.resolveTypes.create(compiler);\n       Node externs = new Node(Token.SCRIPT);\n       externs.setInputId(new InputId(\"externs\"));\n-      externs.setIsSyntheticBlock(true);\n       Node externAndJsRoot = new Node(Token.BLOCK, externs, n);\n       externAndJsRoot.setIsSyntheticBlock(true);\n       typeResolver.process(externs, n);\n--- a/test/com/google/javascript/jscomp/NodeTraversalTest.java\n+++ b/test/com/google/javascript/jscomp/NodeTraversalTest.java\n       new PruningCallback(ImmutableSet.of(Token.SCRIPT, Token.VAR), true);\n \n     Node script = new Node(Token.SCRIPT);\n-    script.setIsSyntheticBlock(true);\n     assertTrue(include.shouldTraverse(null, script, null));\n     assertTrue(include.shouldTraverse(null, new Node(Token.VAR), null));\n     assertFalse(include.shouldTraverse(null, new Node(Token.NAME), null));\n       new PruningCallback(ImmutableSet.of(Token.SCRIPT, Token.VAR), false);\n \n     Node script = new Node(Token.SCRIPT);\n-    script.setIsSyntheticBlock(true);\n     assertFalse(include.shouldTraverse(null, script, null));\n     assertFalse(include.shouldTraverse(null, new Node(Token.VAR), null));\n     assertTrue(include.shouldTraverse(null, new Node(Token.NAME), null));\n--- a/test/com/google/javascript/jscomp/SourceInformationAnnotatorTest.java\n+++ b/test/com/google/javascript/jscomp/SourceInformationAnnotatorTest.java\n \n   public void testPreserveAnnotatedName() {\n     Node root = new Node(Token.SCRIPT);\n-    root.setIsSyntheticBlock(true);\n     Node name = Node.newString(\"foo\");\n     name.putProp(Node.ORIGINALNAME_PROP, \"bar\");\n     root.addChildToBack(name);\n--- a/test/com/google/javascript/jscomp/parsing/ParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/ParserTest.java\n \n   private Node createScript(Node n) {\n     Node script = new Node(Token.SCRIPT);\n-    script.setIsSyntheticBlock(true);\n     script.addChildToBack(n);\n     return script;\n   }", "timestamp": 1337960399, "metainfo": ""}