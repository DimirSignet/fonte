{"sha": "45fd54a488cfbf27978fc4811a722f1fedb8ddaa", "log": "Disallow the shadowing of \"arguments\" in ways we can't currently track. (John) R=robert DELTA=39  (37 added, 1 deleted, 1 changed)  Fix the string displayed for the REGEXP token. (John) R=alan DELTA=1  (0 added, 0 deleted, 1 changed)  Revision created by MOE tool push_codebase. MOE_MIGRATION=rraspa   ", "commit": "\n--- a/src/com/google/javascript/jscomp/SyntacticScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/SyntacticScopeCreator.java\n       DiagnosticType.error(\n           \"JSC_VAR_MULTIPLY_DECLARED_ERROR\",\n           \"Variable {0} first declared in {1}\");\n+\n+  public static final DiagnosticType VAR_ARGUMENTS_SHADOWED_ERROR =\n+    DiagnosticType.error(\n+        \"JSC_VAR_ARGUMENTS_SHADOWED_ERROR\",\n+        \"Shadowing \\\"arguments\\\" is not allowed\");\n \n   /**\n    * Creates a ScopeCreator.\n                             ? origVar.input.getName()\n                             : \"??\")));\n         }\n+      } else if (name.equals(ARGUMENTS) && !NodeUtil.isVarDeclaration(n)) {\n+        // Disallow shadowing \"arguments\" as we can't handle with our current\n+        // scope modeling.\n+        compiler.report(\n+            JSError.make(sourceName, nodeWithLineNumber,\n+                VAR_ARGUMENTS_SHADOWED_ERROR));        \n       }\n     }\n   }\n--- a/src/com/google/javascript/rhino/Token.java\n+++ b/src/com/google/javascript/rhino/Token.java\n           case TRUE:            return \"TRUE\";\n           case SHEQ:            return \"SHEQ\";\n           case SHNE:            return \"SHNE\";\n-          case REGEXP:          return \"OBJECT\";\n+          case REGEXP:          return \"REGEXP\";\n           case BINDNAME:        return \"BINDNAME\";\n           case THROW:           return \"THROW\";\n           case RETHROW:         return \"RETHROW\";\n--- a/test/com/google/javascript/jscomp/SyntacticScopeCreatorTest.java\n+++ b/test/com/google/javascript/jscomp/SyntacticScopeCreatorTest.java\n     Compiler compiler = new Compiler();\n     Node root = compiler.parseTestCode(js);\n     assertEquals(0, compiler.getErrorCount());\n-\n     Scope scope =\n         new SyntacticScopeCreator(compiler).createScope(root, null);\n     return scope;\n+  }\n+\n+  /**\n+   * Helper to traverse the tree creating the Scope object everywhere.\n+   */\n+  private static void testScopes(String js, int errorCount) {\n+    Compiler compiler = new Compiler();\n+    Node root = compiler.parseTestCode(js);\n+    NodeTraversal.traverse(\n+        compiler, root, new NodeTraversal.AbstractPostOrderCallback() {\n+          @Override\n+          public\n+          void visit(NodeTraversal t, Node n, Node parent) {\n+            t.getScope();\n+          }\n+        });\n+    assertEquals(errorCount, compiler.getErrorCount());\n   }\n \n   public void testFunctionScope() {\n     String js = \"var a; /** @suppress {duplicate} */ var a;\";\n     int errors = createGlobalScopeHelper(js);\n     assertEquals(0, errors);\n- }\n+  }\n+\n+  public void testFunctionScopeArguments() {\n+    // A var declaration doesn't mask arguments\n+    testScopes(\"function f() {var arguments}\", 0);\n+\n+    testScopes(\"var f = function arguments() {}\", 1);\n+    testScopes(\"var f = function (arguments) {}\", 1);\n+    testScopes(\"function f() {try {} catch(arguments) {}}\", 1);\n+  }\n \n   /**\n    * Parse the supplied js and create the global SyntaticScope object.", "timestamp": 1270600270, "metainfo": ""}