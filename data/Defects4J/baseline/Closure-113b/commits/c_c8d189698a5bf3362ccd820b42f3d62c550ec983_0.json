{"sha": "c8d189698a5bf3362ccd820b42f3d62c550ec983", "log": "reverse property inference based on return type  R=acleung DELTA=57  (56 added, 1 deleted, 0 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3991   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n         scope = traverse(n.getFirstChild(), scope);\n         break;\n \n+      case Token.RETURN:\n+        scope = traverseReturn(n, scope);\n+        break;\n+\n       case Token.VAR:\n-      case Token.RETURN:\n       case Token.THROW:\n         scope = traverseChildren(n, scope);\n         break;\n       }\n     }\n \n+    return scope;\n+  }\n+\n+  /**\n+   * Traverse a return value.\n+   */\n+  private FlowScope traverseReturn(Node n, FlowScope scope) {\n+    scope = traverseChildren(n, scope);\n+\n+    Node retValue = n.getFirstChild();\n+    if (retValue != null) {\n+      JSType type = functionScope.getRootNode().getJSType();\n+      if (type != null) {\n+        FunctionType fnType = type.toMaybeFunctionType();\n+        if (fnType != null) {\n+          inferPropertyTypesToMatchConstraint(\n+              retValue.getJSType(), fnType.getReturnType());\n+        }\n+      }\n+    }\n     return scope;\n   }\n \n    */\n   private void inferPropertyTypesToMatchConstraint(\n       JSType type, JSType constraint) {\n+    if (type == null || constraint == null) {\n+      return;\n+    }\n+\n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n     if (constraintObj != null && constraintObj.isRecordType()) {\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"var x = {}; f(x); g(x);\");\n   }\n \n+  public void testRecordType6() throws Exception {\n+    testTypes(\n+        \"/** @return {{prop: (number|undefined)}} x */\" +\n+        \"function f() { return {}; }\");\n+  }\n+\n+  public void testRecordType7() throws Exception {\n+    testTypes(\n+        \"/** @return {{prop: (number|undefined)}} x */\" +\n+        \"function f() { var x = {}; g(x); return x; }\" +\n+        \"/** @param {number} x */\" +\n+        \"function g(x) {}\",\n+        \"actual parameter 1 of g does not match formal parameter\\n\" +\n+        \"found   : {prop: (number|undefined)}\\n\" +\n+        \"required: number\");\n+  }\n+\n+  public void testRecordType8() throws Exception {\n+    testTypes(\n+        \"/** @return {{prop: (number|string)}} x */\" +\n+        \"function f() { var x = {prop: 3}; g(x.prop); return x; }\" +\n+        \"/** @param {string} x */\" +\n+        \"function g(x) {}\",\n+        \"actual parameter 1 of g does not match formal parameter\\n\" +\n+        \"found   : number\\n\" +\n+        \"required: string\");\n+  }\n+\n   public void testDuplicateRecordFields1() throws Exception {\n     testTypes(\"/**\"\n          + \"* @param {{x:string, x:number}} a\"", "timestamp": 1323982590, "metainfo": ""}