{"sha": "b56b884df5a5021f1de3f5eeb6a2df2db1a86b61", "log": "Add symbol references for types referenced in jsdoc.  The symbol table is created from dotted names, not fully qualified names. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=43852550", "commit": "\n--- a/src/com/google/javascript/jscomp/SymbolTable.java\n+++ b/src/com/google/javascript/jscomp/SymbolTable.java\n \n     public void visitTypeNode(SymbolScope scope, Node n) {\n       if (n.isString()) {\n-        Symbol symbol = scope.getSlot(n.getString());\n-        if (symbol == null) {\n-          // If we can't find this type, it might be a reference to a\n-          // primitive type (like {string}). Autobox it to check.\n-          JSType type = typeRegistry.getType(n.getString());\n-          JSType autobox = type == null ? null : type.autoboxesTo();\n-          symbol = autobox == null\n-              ? null : getSymbolForTypeHelper(autobox, true);\n-        }\n+        Symbol symbol = lookupPossiblyDottedName(scope, n.getString());\n         if (symbol != null) {\n           symbol.defineReferenceAt(n);\n+        } else {\n+          logger.warning(\"Could not find symbol for type: \" + n.getString());\n         }\n       }\n \n            child != null; child = child.getNext()) {\n         visitTypeNode(scope, child);\n       }\n+    }\n+\n+    // TODO(peterhal): @template types.\n+    private Symbol lookupPossiblyDottedName(SymbolScope scope, String dottedName) {\n+      // Try the dotted name to start.\n+      String[] names = dottedName.split(\"\\\\.\");\n+      Symbol result = null;\n+      SymbolScope currentScope = scope;\n+      for (int i = 0; i < names.length; i++) {\n+        String name = names[i];\n+        result = currentScope.getSlot(name);\n+        if (result == null) {\n+          break;\n+        }\n+        if (i < (names.length - 1)) {\n+          currentScope = result.getPropertyScope();\n+          if (currentScope == null) {\n+            result = null;\n+            break;\n+          }\n+        }\n+      }\n+\n+      if (result == null) {\n+        // If we can't find this type, it might be a reference to a\n+        // primitive type (like {string}). Autobox it to check.\n+        JSType type = typeRegistry.getType(dottedName);\n+        JSType autobox = type == null ? null : type.autoboxesTo();\n+        result = autobox == null\n+            ? null : getSymbolForTypeHelper(autobox, true);\n+      }\n+      return result;\n     }\n   }\n \n--- a/test/com/google/javascript/jscomp/SymbolTableTest.java\n+++ b/test/com/google/javascript/jscomp/SymbolTableTest.java\n         assertEquals(\"in1\", ref.getNode().getSourceFileName());\n       }\n     }\n+  }\n+\n+  public void testDottedReferencesInJSDocType() {\n+    SymbolTable table = createSymbolTable(\n+        \"var goog = {};\\n\" +\n+        \"/** @constructor */ goog.Foo = function() {}\\n\" +\n+        \"/** @type {goog.Foo} */ var x;\\n\" +\n+        \"/** @param {goog.Foo} x */ function f(x) {}\\n\" +\n+        \"/** @return {function(): goog.Foo} */ function g() {}\\n\" +\n+        \"/**\\n\" +\n+        \" * @constructor\\n\" +\n+        \" * @extends {goog.Foo}\\n\" +\n+        \" */ function Sub() {}\");\n+    Symbol foo = getGlobalVar(table, \"goog.Foo\");\n+    assertNotNull(foo);\n+\n+    List<Reference> refs = table.getReferenceList(foo);\n+    assertEquals(5, refs.size());\n+\n+    assertEquals(2, refs.get(0).getNode().getLineno());\n+    assertEquals(20, refs.get(0).getNode().getCharno());\n+    assertEquals(8, refs.get(0).getNode().getLength());\n+\n+    assertEquals(3, refs.get(1).getNode().getLineno());\n+    assertEquals(11, refs.get(1).getNode().getCharno());\n+\n+    assertEquals(4, refs.get(2).getNode().getLineno());\n+    assertEquals(12, refs.get(2).getNode().getCharno());\n+\n+    assertEquals(5, refs.get(3).getNode().getLineno());\n+    assertEquals(25, refs.get(3).getNode().getCharno());\n+\n+    assertEquals(8, refs.get(4).getNode().getLineno());\n+    assertEquals(13, refs.get(4).getNode().getCharno());\n   }\n \n   public void testReferencesInJSDocName() {", "timestamp": 1363210170, "metainfo": ""}