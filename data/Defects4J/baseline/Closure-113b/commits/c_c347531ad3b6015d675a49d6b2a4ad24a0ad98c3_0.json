{"sha": "c347531ad3b6015d675a49d6b2a4ad24a0ad98c3", "log": "Remove warnings for unknown parameter type and unknown return type in extern exports pass. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=51612072", "commit": "\n--- a/src/com/google/javascript/jscomp/ExternExportsPass.java\n+++ b/src/com/google/javascript/jscomp/ExternExportsPass.java\n import com.google.javascript.rhino.JSDocInfo;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n-import com.google.javascript.rhino.jstype.FunctionType;\n-import com.google.javascript.rhino.jstype.JSType;\n \n import java.util.Comparator;\n import java.util.List;\n  */\n final class ExternExportsPass extends NodeTraversal.AbstractPostOrderCallback\n     implements CompilerPass {\n-\n-  static final DiagnosticType EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE =\n-    DiagnosticType.warning(\n-        \"JSC_EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE\",\n-        \"Unable to determine type of parameter {0} for exported function {1}\");\n-\n-  static final DiagnosticType EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE =\n-    DiagnosticType.warning(\n-        \"JSC_EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE\",\n-        \"Unable to determine return type for exported function {0}\");\n \n   /** The exports found. */\n   private final List<Export> exports;\n       }\n       Node externFunction = IR.function(IR.name(\"\"), paramList, IR.block());\n \n-      checkForFunctionsWithUnknownTypes(exportedFunction);\n       externFunction.setJSType(exportedFunction.getJSType());\n \n       return externFunction;\n         }\n       }\n       return lit;\n-    }\n-\n-    /**\n-     * Warn the user if there is an exported function for which a parameter\n-     * or return type is unknown.\n-     */\n-    private void checkForFunctionsWithUnknownTypes(Node function) {\n-      Preconditions.checkArgument(function.isFunction());\n-\n-      FunctionType functionType =\n-          JSType.toMaybeFunctionType(function.getJSType());\n-\n-      if (functionType == null) {\n-        // No type information is available (CheckTypes was probably not run)\n-        // so just bail.\n-        return;\n-      }\n-\n-      JSType returnType = functionType.getReturnType();\n-\n-      /* It is OK if a constructor doesn't have a return type */\n-      if (!functionType.isConstructor() &&\n-          (returnType == null || returnType.isUnknownType())) {\n-        reportUnknownReturnType(function);\n-      }\n-\n-      /* We can't just use the function's type's getParameters() to get the\n-       * parameter nodes because the nodes returned from that method\n-       * do not have names or locations. Similarly, the function's AST parameter\n-       * nodes do not have JSTypes(). So we walk both lists of parameter nodes\n-       * in lock step getting parameter names from the first and types from the\n-       * second.\n-       */\n-      Node astParameterIterator = NodeUtil.getFunctionParameters(function)\n-        .getFirstChild();\n-\n-      Node typeParameterIterator = functionType.getParametersNode()\n-        .getFirstChild();\n-\n-      while (astParameterIterator != null) {\n-        JSType parameterType = typeParameterIterator.getJSType();\n-\n-        if (parameterType == null || parameterType.isUnknownType()) {\n-          reportUnknownParameterType(function, astParameterIterator);\n-        }\n-\n-        astParameterIterator = astParameterIterator.getNext();\n-        typeParameterIterator = typeParameterIterator.getNext();\n-      }\n-    }\n-\n-    private void reportUnknownParameterType(Node function, Node parameter) {\n-      compiler.report(JSError.make(NodeUtil.getSourceName(function),\n-          parameter, CheckLevel.WARNING,\n-          EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE,\n-          NodeUtil.getFunctionName(function), parameter.getString()));\n-    }\n-\n-    private void reportUnknownReturnType(Node function) {\n-      compiler.report(JSError.make(NodeUtil.getSourceName(function),\n-          function, CheckLevel.WARNING, EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE,\n-          NodeUtil.getFunctionName(function)));\n     }\n \n     /**\n--- a/test/com/google/javascript/jscomp/ExternExportsPassTest.java\n+++ b/test/com/google/javascript/jscomp/ExternExportsPassTest.java\n     assertEquals(0, clientCompileResult.errors.length);\n   }\n \n-  public void testWarnOnExportFunctionWithUnknownReturnType() {\n+  public void testDontWarnOnExportFunctionWithUnknownReturnType() {\n     String librarySource =\n       \"var InternalName = function() {\" +\n       \"  return 6;\" +\n \n       Result libraryCompileResult = compileAndExportExterns(librarySource);\n \n-      assertEquals(1, libraryCompileResult.warnings.length);\n+      assertEquals(0, libraryCompileResult.warnings.length);\n       assertEquals(0, libraryCompileResult.errors.length);\n   }\n \n     assertEquals(expected, result.externExport);\n   }\n \n-  public void testWarnOnExportFunctionWithUnknownParameterTypes() {\n+  public void testDontWarnOnExportFunctionWithUnknownParameterTypes() {\n     /* This source is missing types for the b and c parameters */\n     String librarySource =\n       \"/**\\n\" +\n \n       Result libraryCompileResult = compileAndExportExterns(librarySource);\n \n-      assertEquals(2, libraryCompileResult.warnings.length);\n+      assertEquals(0, libraryCompileResult.warnings.length);\n       assertEquals(0, libraryCompileResult.errors.length);\n   }\n ", "timestamp": 1377822238, "metainfo": ""}