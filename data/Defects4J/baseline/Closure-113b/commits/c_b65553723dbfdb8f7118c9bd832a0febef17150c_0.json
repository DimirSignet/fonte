{"sha": "b65553723dbfdb8f7118c9bd832a0febef17150c", "log": "Make {Function} objects return the unknown type.  R=johnlenz DELTA=40  (32 added, 0 deleted, 8 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5756   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeValidator.java\n+++ b/src/com/google/javascript/jscomp/TypeValidator.java\n import com.google.javascript.rhino.jstype.JSTypeRegistry;\n import com.google.javascript.rhino.jstype.ObjectType;\n import com.google.javascript.rhino.jstype.StaticSlot;\n+import com.google.javascript.rhino.jstype.UnknownType;\n \n import java.text.MessageFormat;\n import java.util.Iterator;\n   void expectSuperType(NodeTraversal t, Node n, ObjectType superObject,\n       ObjectType subObject) {\n     FunctionType subCtor = subObject.getConstructor();\n+    ObjectType implicitProto = subObject.getImplicitPrototype();\n     ObjectType declaredSuper =\n-        subObject.getImplicitPrototype().getImplicitPrototype();\n-    if (!declaredSuper.isEquivalentTo(superObject)) {\n+        implicitProto == null ? null : implicitProto.getImplicitPrototype();\n+    if (declaredSuper != null &&\n+        !(superObject instanceof UnknownType) &&\n+        !declaredSuper.isEquivalentTo(superObject)) {\n       if (declaredSuper.isEquivalentTo(getNativeType(OBJECT_TYPE))) {\n         registerMismatch(superObject, declaredSuper, report(\n             t.makeError(n, MISSING_EXTENDS_TAG_WARNING, subObject.toString())));\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n \n   @Override\n   public boolean isInstanceType() {\n-    // The universal constructor is its own instance, bizarrely.\n-    return isEquivalentTo(registry.getNativeType(U2U_CONSTRUCTOR_TYPE));\n+    // The universal constructor is its own instance, bizarrely. It overrides\n+    // getConstructor() appropriately when it's declared.\n+    return this == registry.getNativeType(U2U_CONSTRUCTOR_TYPE);\n   }\n \n   @Override\n--- a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n+++ b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n \n     UnknownType UNKNOWN_TYPE = new UnknownType(this, false);\n     registerNativeType(JSTypeNative.UNKNOWN_TYPE, UNKNOWN_TYPE);\n+    UnknownType checkedUnknownType = new UnknownType(this, true);\n     registerNativeType(\n-        JSTypeNative.CHECKED_UNKNOWN_TYPE, new UnknownType(this, true));\n+        JSTypeNative.CHECKED_UNKNOWN_TYPE, checkedUnknownType);\n \n     VoidType VOID_TYPE = new VoidType(this);\n     registerNativeType(JSTypeNative.VOID_TYPE, VOID_TYPE);\n         createFunctionType(UNKNOWN_TYPE, true, UNKNOWN_TYPE);\n     registerNativeType(JSTypeNative.U2U_FUNCTION_TYPE, U2U_FUNCTION_TYPE);\n \n-    // unknown constructor type, i.e. (?...) -> ? with the NoObject type\n+    // unknown constructor type, i.e. (?...) -> ? with the Unknown type\n     // as instance type\n     FunctionType U2U_CONSTRUCTOR_TYPE =\n         // This is equivalent to\n             createArrowType(\n                 createParametersWithVarArgs(UNKNOWN_TYPE),\n                 UNKNOWN_TYPE),\n-            NO_OBJECT_TYPE, null, true, true) {\n+            UNKNOWN_TYPE, null, true, true) {\n           private static final long serialVersionUID = 1L;\n \n           @Override public FunctionType getConstructor() {\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"required: (MyType|null|number)\");\n   }\n \n+  public void testForwardTypeDeclaration12() throws Exception {\n+    // We assume that {Function} types can produce anything, and don't\n+    // want to type-check them.\n+    testClosureTypes(\n+        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n+        \"/**\\n\" +\n+        \" * @param {!Function} ctor\\n\" +\n+        \" * @return {MyType}\\n\" +\n+        \" */\\n\" +\n+        \"function f(ctor) { return new ctor(); }\", null);\n+  }\n+\n+  public void testForwardTypeDeclaration13() throws Exception {\n+    // Some projects use {Function} registries to register constructors\n+    // that aren't in their binaries. We want to make sure we can pass these\n+    // around, but still do other checks on them.\n+    testClosureTypes(\n+        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n+        \"/**\\n\" +\n+        \" * @param {!Function} ctor\\n\" +\n+        \" * @return {MyType}\\n\" +\n+        \" */\\n\" +\n+        \"function f(ctor) { return (new ctor()).impossibleProp; }\",\n+        \"Property impossibleProp never defined on ?\");\n+  }\n+\n   public void testDuplicateTypeDef() throws Exception {\n     testTypes(\n         \"var goog = {};\" +\n--- a/test/com/google/javascript/jscomp/TypeInferenceTest.java\n+++ b/test/com/google/javascript/jscomp/TypeInferenceTest.java\n         createNullableType(\n             registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE)));\n     inFunction(\"var y = new x();\");\n-    verify(\"y\", JSTypeNative.NO_OBJECT_TYPE);\n+    verify(\"y\", UNKNOWN_TYPE);\n   }\n \n   public void testInnerFunction1() {", "timestamp": 1352221209, "metainfo": ""}