{"sha": "e2182d4e96bc2c5e50a915961ec8149f2fd70dab", "log": "Add @define constants in Ant task Contributed by jhansche Fixes issue 533    ", "commit": "\n--- a/src/com/google/javascript/jscomp/ant/CompileTask.java\n+++ b/src/com/google/javascript/jscomp/ant/CompileTask.java\n import java.io.OutputStreamWriter;\n import java.nio.charset.Charset;\n import java.util.Date;\n+import java.util.Iterator;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n import java.util.logging.Level;\n \n /**\n   private boolean prettyPrint;\n   private boolean printInputDelimiter;\n   private boolean generateExports;\n+  private boolean replaceProperties;\n+  private String replacePropertiesPrefix;\n   private File outputFile;\n   private final List<FileList> externFileLists;\n   private final List<FileList> sourceFileLists;\n     this.prettyPrint = false;\n     this.printInputDelimiter = false;\n     this.generateExports = false;\n+    this.replaceProperties = false;\n+    this.replacePropertiesPrefix = \"closure.define.\";\n     this.externFileLists = Lists.newLinkedList();\n     this.sourceFileLists = Lists.newLinkedList();\n     this.sourcePaths = Lists.newLinkedList();\n   }\n \n   /**\n+   * Set the replacement property prefix.\n+   */\n+  public void setReplacePropertiesPrefix(String value) {\n+    this.replacePropertiesPrefix = value;\n+  }\n+\n+  /**\n+   * Whether to replace @define lines with properties\n+   */\n+  public void setReplaceProperties(boolean value) {\n+    this.replaceProperties = value;\n+  }\n+\n+  /**\n    * Set input file encoding\n    */\n   public void setEncoding(String encoding) {\n \n     this.warningLevel.setOptionsForWarningLevel(options);\n     options.setManageClosureDependencies(manageDependencies);\n+\n+    if (replaceProperties) {\n+      convertPropertiesMap(options);\n+    }\n+\n     return options;\n+  }\n+\n+  private void convertPropertiesMap(CompilerOptions options) {\n+    Map<String, Object> props = getProject().getProperties();\n+    for (Map.Entry<String, Object> entry : props.entrySet()) {\n+      String key = entry.getKey();\n+      Object value = entry.getValue();\n+\n+      if (key.startsWith(replacePropertiesPrefix)) {\n+        key = key.substring(replacePropertiesPrefix.length());\n+\n+        if (value instanceof String) {\n+          final boolean isTrue = \"true\".equals(value);\n+          final boolean isFalse = \"false\".equals(value);\n+\n+          if (isTrue || isFalse) {\n+            options.setDefineToBooleanLiteral(key, isTrue);\n+          } else {\n+            try {\n+              double dblTemp = Double.parseDouble((String) value);\n+              options.setDefineToDoubleLiteral(key, dblTemp);\n+            } catch (NumberFormatException nfe) {\n+              // Not a number, assume string\n+              options.setDefineToStringLiteral(key, (String) value);\n+            }\n+          }\n+        } else if (value instanceof Boolean) {\n+          options.setDefineToBooleanLiteral(key, (Boolean) value);\n+        } else if (value instanceof Integer) {\n+          options.setDefineToNumberLiteral(key, (Integer) value);\n+        } else if (value instanceof Double) {\n+          options.setDefineToDoubleLiteral(key, (Double) value);\n+        } else {\n+          log(\"Unexpected property value for key=\" + key + \"; value=\" + value);\n+        }\n+      }\n+    }\n   }\n \n   private Compiler createCompiler(CompilerOptions options) {", "timestamp": 1314654095, "metainfo": ""}