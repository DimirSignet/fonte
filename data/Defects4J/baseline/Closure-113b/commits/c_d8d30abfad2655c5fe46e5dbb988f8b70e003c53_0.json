{"sha": "d8d30abfad2655c5fe46e5dbb988f8b70e003c53", "log": "Adding @jaggerInject, @jaggerProvide, @jaggerModule tags. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=53164317", "commit": "\n--- a/src/com/google/javascript/jscomp/parsing/Annotation.java\n+++ b/src/com/google/javascript/jscomp/parsing/Annotation.java\n   INHERIT_DOC,\n   INTERFACE,\n   JAVA_DISPATCH,\n+  JAGGER_INJECT,\n+  JAGGER_MODULE,\n+  JAGGER_PROVIDE,\n   LENDS,\n   LICENSE, // same as preserve\n   MEANING,\n       put(\"inheritDoc\", Annotation.INHERIT_DOC).\n       put(\"interface\", Annotation.INTERFACE).\n       put(\"javadispatch\", Annotation.JAVA_DISPATCH).\n+      put(\"jaggerInject\", Annotation.JAGGER_INJECT).\n+      put(\"jaggerModule\", Annotation.JAGGER_MODULE).\n+      put(\"jaggerProvide\", Annotation.JAGGER_PROVIDE).\n       put(\"lends\", Annotation.LENDS).\n       put(\"license\", Annotation.LICENSE).\n       put(\"meaning\", Annotation.MEANING).\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n               stream.getLineno(), stream.getCharno());\n           } else {\n             jsdocBuilder.recordNgInject(true);\n+          }\n+          return eatTokensUntilEOL();\n+\n+        case JAGGER_INJECT:\n+          if (jsdocBuilder.isJaggerInjectRecorded()) {\n+            parser.addParserWarning(\"msg.jsdoc.jaggerInject.extra\",\n+              stream.getLineno(), stream.getCharno());\n+          } else {\n+            jsdocBuilder.recordJaggerInject(true);\n+          }\n+          return eatTokensUntilEOL();\n+\n+        case JAGGER_MODULE:\n+          if (jsdocBuilder.isJaggerModuleRecorded()) {\n+            parser.addParserWarning(\"msg.jsdoc.jaggerModule.extra\",\n+              stream.getLineno(), stream.getCharno());\n+          } else {\n+            jsdocBuilder.recordJaggerModule(true);\n+          }\n+          return eatTokensUntilEOL();\n+\n+        case JAGGER_PROVIDE:\n+          if (jsdocBuilder.isJaggerProvideRecorded()) {\n+            parser.addParserWarning(\"msg.jsdoc.jaggerProvide.extra\",\n+              stream.getLineno(), stream.getCharno());\n+          } else {\n+            jsdocBuilder.recordJaggerProvide(true);\n           }\n           return eatTokensUntilEOL();\n \n--- a/src/com/google/javascript/rhino/JSDocInfo.java\n+++ b/src/com/google/javascript/rhino/JSDocInfo.java\n     Set<String> suppressions = null;\n     Set<String> modifies = null;\n     String lendsName = null;\n+\n+    // TODO(nnaze): Consider converting the boolean flags to bit fields.\n+\n     boolean ngInject = false;\n     boolean wizaction = false;\n+\n+    // Tags for Jagger dependency injection prototype\n+    boolean jaggerInject = false;\n+    boolean jaggerProvide = false;\n+    boolean jaggerModule = false;\n   }\n \n   private static final class LazilyInitializedDocumentation {\n   }\n \n   /**\n+   * Returns whether JSDoc is annotated with {@code @jaggerInject} annotation.\n+   */\n+  public boolean isJaggerInject() {\n+    return (info != null) && info.jaggerInject;\n+  }\n+\n+  void setJaggerInject(boolean jaggerInject) {\n+    lazyInitInfo();\n+    info.jaggerInject = jaggerInject;\n+  }\n+\n+  /**\n+   * Returns whether JSDoc is annotated with {@code @jaggerProvide} annotation.\n+   */\n+  public boolean isJaggerProvide() {\n+    return (info != null) && info.jaggerProvide;\n+  }\n+\n+  void setJaggerProvide(boolean jaggerProvide) {\n+    lazyInitInfo();\n+    info.jaggerProvide = jaggerProvide;\n+  }\n+\n+  /**\n+   * Returns whether JSDoc is annotated with {@code @jaggerModule} annotation.\n+   */\n+  public boolean isJaggerModule() {\n+      return (info != null) && info.jaggerModule;\n+  }\n+\n+  void setJaggerModule(boolean jaggerModule) {\n+    lazyInitInfo();\n+    info.jaggerModule = jaggerModule;\n+  }\n+\n+  /**\n    * Returns whether JSDoc is annotated with {@code @wizaction} annotation.\n    */\n   public boolean isWizaction() {\n--- a/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n+++ b/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n   }\n \n   /**\n+   * Returns whether current JSDoc is annotated with {@code @jaggerInject}.\n+   */\n+  public boolean isJaggerInjectRecorded() {\n+    return currentInfo.isJaggerInject();\n+  }\n+\n+  /**\n+   * Records annotation with {@code @jaggerInject}.\n+   */\n+  public boolean recordJaggerInject(boolean inject) {\n+    if (!isJaggerInjectRecorded()) {\n+      currentInfo.setJaggerInject(inject);\n+      populated = true;\n+      return true;\n+    }\n+\n+    return false;\n+  }\n+\n+  /**\n+   * Returns whether current JSDoc is annotated with {@code @jaggerModule}.\n+   */\n+  public boolean isJaggerModuleRecorded() {\n+    return currentInfo.isJaggerModule();\n+  }\n+\n+  /**\n+   * Records annotation with {@code @jaggerModule}.\n+   */\n+  public boolean recordJaggerModule(boolean jaggerModule) {\n+    if (!isJaggerModuleRecorded()) {\n+      currentInfo.setJaggerModule(jaggerModule);\n+      populated = true;\n+      return true;\n+    }\n+\n+    return false;\n+  }\n+\n+  /**\n+   * Returns whether current JSDoc is annotated with {@code @jaggerProvide}.\n+   */\n+  public boolean isJaggerProvideRecorded() {\n+    return currentInfo.isJaggerProvide();\n+  }\n+\n+  /**\n+   * Records annotation with {@code @jaggerProvide}.\n+   */\n+  public boolean recordJaggerProvide(boolean jaggerProvide) {\n+    if (!isJaggerProvideRecorded()) {\n+      currentInfo.setJaggerProvide(jaggerProvide);\n+      populated = true;\n+      return true;\n+    }\n+\n+    return false;\n+  }\n+\n+  /**\n    * Returns whether current JSDoc is annotated with {@code @wizaction}.\n    */\n   public boolean isWizactionRecorded() {\n--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n   public void testWhitelistedAnnotations() {\n     parse(\n       \"* @addon \\n\" +\n-      \"* @ngInject \\n\" +\n       \"* @augments \\n\" +\n       \"* @base \\n\" +\n       \"* @borrows \\n\" +\n       \"* @id \\n\" +\n       \"* @ignore \\n\" +\n       \"* @inner \\n\" +\n-      \"* @wizaction \\n\" +\n+      \"* @jaggerInject \\n\" +\n+      \"* @jaggerModule \\n\" +\n+      \"* @jaggerProvide \\n\" +\n       \"* @lends {string} \\n\" +\n       \"* @link \\n\" +\n       \"* @member \\n\" +\n       \"* @mods \\n\" +\n       \"* @name \\n\" +\n       \"* @namespace \\n\" +\n+      \"* @ngInject \\n\" +\n       \"* @nocompile \\n\" +\n       \"* @property \\n\" +\n+      \"* @requirecss \\n\" +\n       \"* @requires \\n\" +\n-      \"* @requirecss \\n\" +\n       \"* @since \\n\" +\n       \"* @static \\n\" +\n-      \"* @supported */\");\n+      \"* @supported\\n\" +\n+      \"* @wizaction \\n\" +\n+      \"*/\");\n   }\n \n   public void testJsDocInfoPosition() throws IOException {\n \n   public void testParseNgInject2() throws Exception {\n     parse(\"@ngInject \\n@ngInject*/\", \"extra @ngInject tag\");\n+  }\n+\n+  public void testParseJaggerInject() throws Exception {\n+    assertTrue(parse(\"@jaggerInject*/\").isJaggerInject());\n+  }\n+\n+  public void testParseJaggerInjectExtra() throws Exception {\n+    parse(\"@jaggerInject \\n@jaggerInject*/\", \"extra @jaggerInject tag\");\n+  }\n+\n+  public void testParseJaggerModule() throws Exception {\n+    assertTrue(parse(\"@jaggerModule*/\").isJaggerModule());\n+  }\n+\n+  public void testParseJaggerModuleExtra() throws Exception {\n+    parse(\"@jaggerModule \\n@jaggerModule*/\", \"extra @jaggerModule tag\");\n+  }\n+\n+  public void testParseJaggerProvide() throws Exception {\n+    assertTrue(parse(\"@jaggerProvide*/\").isJaggerProvide());\n+  }\n+\n+  public void testParseJaggerProvideExtra() throws Exception {\n+    parse(\"@jaggerProvide \\n@jaggerProvide*/\", \"extra @jaggerProvide tag\");\n   }\n \n   public void testParseWizaction1() throws Exception {", "timestamp": 1380066916, "metainfo": ""}