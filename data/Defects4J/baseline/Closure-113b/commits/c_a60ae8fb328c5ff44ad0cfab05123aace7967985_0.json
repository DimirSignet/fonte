{"sha": "a60ae8fb328c5ff44ad0cfab05123aace7967985", "log": "Automated g4 rollback of changelist 53276252.  *** Reason for rollback ***  fixed  *** Original change description ***  Automated g4 rollback of changelist 53272242.  *** Reason for rollback ***  breakages  *** Original change description ***  Fix the resolution of template types in inherited methods and similiar. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=53281088", "commit": "\n--- a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n+++ b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n       return this;\n     }\n \n+    // Propagate the template types, if they exist.\n+    templateTypeNames = oldType.getTemplateTypeMap().getTemplateKeys();\n+\n     returnType = oldType.getReturnType();\n     returnTypeInferred = oldType.isReturnTypeInferred();\n     if (paramsParent == null) {\n    */\n   FunctionTypeBuilder inferTemplateTypeName(\n       @Nullable JSDocInfo info, JSType ownerType) {\n+    // NOTE: these template type names may override a list\n+    // of inherited ones from an overridden function.\n     if (info != null &&  !info.getTemplateTypeNames().isEmpty()) {\n       ImmutableList.Builder<TemplateType> builder = ImmutableList.builder();\n       for (String key : info.getTemplateTypeNames()) {\n         builder.add(typeRegistry.createTemplateType(key));\n       }\n       templateTypeNames = builder.build();\n-    } else {\n-      templateTypeNames = ImmutableList.of();\n     }\n \n     ImmutableList<TemplateType> keys = templateTypeNames;\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n           TemplateTypeMap prototypeOwnerTypeMap = null;\n           if (prototypeOwner != null &&\n               prototypeOwner.getTypeOfThis() != null) {\n-              prototypeOwnerTypeMap =\n-                  prototypeOwner.getTypeOfThis().getTemplateTypeMap();\n+            prototypeOwnerTypeMap =\n+                prototypeOwner.getTypeOfThis().getTemplateTypeMap();\n           }\n \n           FunctionType overriddenType = null;\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n           that.toObjectType().getReferenceName());\n     }\n \n+    if (isTemplateType() && that.isTemplateType()) {\n+      return this == that;\n+    }\n+\n     // Unbox other proxies.\n     if (this instanceof ProxyObjectType) {\n       return ((ProxyObjectType) this)\n--- a/src/com/google/javascript/rhino/jstype/ModificationVisitor.java\n+++ b/src/com/google/javascript/rhino/jstype/ModificationVisitor.java\n     }\n \n     if (changed) {\n-      // TODO(johnlenz): should we support preserving template keys?\n       FunctionBuilder builder = new FunctionBuilder(registry);\n       builder.withParams(paramBuilder);\n       builder.withReturnType(afterReturn);\n       builder.withTypeOfThis(afterThis);\n+      builder.withTemplateKeys(type.getTemplateTypeMap().getUnfilledTemplateKeys());\n       return builder.build();\n     }\n \n--- a/src/com/google/javascript/rhino/jstype/TemplateTypeMap.java\n+++ b/src/com/google/javascript/rhino/jstype/TemplateTypeMap.java\n     }\n     return false;\n   }\n+\n+  @Override\n+  public String toString() {\n+    String s = \"\";\n+\n+    int len = Math.max(Math.max(templateKeys.size(), templateValues.size()),\n+        resolvedTemplateValues.size());\n+    s += \"{ \";\n+    for (int i = 0; i < len; i++) {\n+      s += \"(\";\n+      s += (i < templateKeys.size()) ? templateKeys.get(i) : \"\";\n+      s += \",\";\n+      s += (i < templateValues.size()) ? templateValues.get(i) : \"\";\n+      s += \",\";\n+      s += (i < resolvedTemplateValues.size()) ? resolvedTemplateValues.get(i) : \"\";\n+      s += \") \";\n+    }\n+    s += \"}\";\n+\n+    return s;\n+  }\n }\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"some(g());\\n\");\n   }\n \n+  public void testTemplatized6() throws Exception {\n+    testTypes(\n+        \"/** @interface */ function I(){}\\n\" +\n+        \"/** @param {T} a\\n\" +\n+        \" * @return {T}\\n\" +\n+        \" * @template T\\n\" +\n+        \"*/\\n\" +\n+        \"I.prototype.method;\\n\" +\n+        \"\" +\n+        \"/** @constructor \\n\" +\n+        \" * @implements {I}\\n\" +\n+        \" */ function C(){}\\n\" +\n+        \"/** @override*/ C.prototype.method = function(a) {}\\n\" +\n+        \"\" +\n+        \"/** @type {null} */ var some = new C().method('str');\",\n+        \"initializing variable\\n\" +\n+        \"found   : string\\n\" +\n+        \"required: null\");\n+  }\n+\n+  public void testTemplatized7() throws Exception {\n+    testTypes(\n+        \"/** @interface\\n\" +\n+        \" *  @template Q\\n \" +\n+        \" */ function I(){}\\n\" +\n+\n+        \"/** @param {T} a\\n\" +\n+        \" * @return {T|Q}\\n\" +\n+        \" * @template T\\n\" +\n+        \"*/\\n\" +\n+        \"I.prototype.method;\\n\" +\n+\n+        \"/** @constructor \\n\" +\n+        \" * @implements {I.<number>}\\n\" +\n+        \" */ function C(){}\\n\" +\n+        \"/** @override*/ C.prototype.method = function(a) {}\\n\" +\n+\n+        \"/** @type {null} */ var some = new C().method('str');\",\n+\n+        \"initializing variable\\n\" +\n+        \"found   : (number|string)\\n\" +\n+        \"required: null\");\n+  }\n+\n+  public void disable_testTemplatized8() throws Exception {\n+    // TODO(johnlenz): this should generate a warning but does not.\n+    testTypes(\n+        \"/** @interface\\n\" +\n+        \" *  @template Q\\n \" +\n+        \" */ function I(){}\\n\" +\n+\n+        \"/** @param {T} a\\n\" +\n+        \" * @return {T|Q}\\n\" +\n+        \" * @template T\\n\" +\n+        \"*/\\n\" +\n+        \"I.prototype.method;\\n\" +\n+\n+        \"/** @constructor \\n\" +\n+        \" *  @implements {I.<R>}\\n\" +\n+        \" *  @template R\\n \" +\n+        \" */ function C(){}\\n\" +\n+        \"/** @override*/ C.prototype.method = function(a) {}\\n\" +\n+\n+        \"/** @type {C.<number>} var x = new C();\" +\n+        \"/** @type {null} */ var some = x.method('str');\",\n+\n+        \"initializing variable\\n\" +\n+        \"found   : (number|string)\\n\" +\n+        \"required: null\");\n+  }\n+\n+  public void testTemplatized9() throws Exception {\n+    testTypes(\n+        \"/** @interface\\n\" +\n+        \" *  @template Q\\n \" +\n+        \" */ function I(){}\\n\" +\n+\n+        \"/** @param {T} a\\n\" +\n+        \" * @return {T|Q}\\n\" +\n+        \" * @template T\\n\" +\n+        \"*/\\n\" +\n+        \"I.prototype.method;\\n\" +\n+\n+        \"/** @constructor \\n\" +\n+        \" *  @param {R} a\\n\" +\n+        \" *  @implements {I.<R>}\\n\" +\n+        \" *  @template R\\n \" +\n+        \" */ function C(a){}\\n\" +\n+        \"/** @override*/ C.prototype.method = function(a) {}\\n\" +\n+\n+        \"/** @type {null} */ var some = new C(1).method('str');\",\n+\n+        \"initializing variable\\n\" +\n+        \"found   : (number|string)\\n\" +\n+        \"required: null\");\n+  }\n+\n   public void testUnknownTypeReport() throws Exception {\n     compiler.getOptions().setWarningLevel(DiagnosticGroups.REPORT_UNKNOWN_TYPES,\n         CheckLevel.WARNING);", "timestamp": 1380237393, "metainfo": ""}