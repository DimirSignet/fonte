{"sha": "2fea14202ace62e1772fb0d35533dbe9df5ec357", "log": "Automated g4 rollback of changelist 51660815.  *** Reason for rollback ***  breakages  *** Original change description ***  Add support for replacing templates within record types. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=51669737", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n \n     TemplateTypeReplacer(\n         JSTypeRegistry registry, Map<TemplateType, JSType> replacements) {\n-      super(registry, true);\n+      super(registry);\n       this.registry = registry;\n       this.replacements = replacements;\n     }\n--- a/src/com/google/javascript/rhino/jstype/ModificationVisitor.java\n+++ b/src/com/google/javascript/rhino/jstype/ModificationVisitor.java\n public class ModificationVisitor implements Visitor<JSType> {\n \n   private final JSTypeRegistry registry;\n-  private final boolean visitProperties;\n-\n-  public ModificationVisitor(JSTypeRegistry registry, boolean visitProperties) {\n+\n+  public ModificationVisitor(JSTypeRegistry registry) {\n     this.registry = registry;\n-    this.visitProperties = visitProperties;\n   }\n \n   @Override\n \n   @Override\n   public JSType caseObjectType(ObjectType objType) {\n-    if (!visitProperties\n-        || objType.isNominalType()\n-        || objType instanceof ProxyObjectType\n-        || !objType.isRecordType()) {\n-      return objType;\n-    }\n-\n-    boolean changed = false;\n-    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n-    for (String prop : objType.getOwnPropertyNames()) {\n-      Node propertyNode = objType.getPropertyNode(prop);\n-      JSType beforeType = objType.getPropertyType(prop);\n-      JSType afterType = beforeType.visit(this);\n-      if (beforeType != afterType) {\n-        changed = true;\n-      }\n-      builder.addProperty(prop, afterType, propertyNode);\n-    }\n-\n-    if (changed) {\n-      return builder.build();\n-    }\n-\n     return objType;\n   }\n \n--- a/src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java\n+++ b/src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java\n \n   public TemplateTypeMapReplacer(\n       JSTypeRegistry registry, TemplateTypeMap replacements) {\n-    super(registry, false);\n+    super(registry);\n     this.replacements = replacements;\n     this.visitedTypes = new ArrayDeque<TemplateType>();\n   }\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"x = fn({});\");\n   }\n \n-  public void testTemplateType19() throws Exception {\n-    testTypes(\n-        \"/**\\n\" +\n-        \" * @param {T} t\\n\" +\n-        \" * @param {U} u\\n\" +\n-        \" * @return {{t:T, u:U}} \\n\" +\n-        \" * @template T,U\\n\" +\n-        \" */\\n\" +\n-        \"function fn(t, u) { return {t:t, u:u}; }\\n\" +\n-        \"/** @type {null} */ var x = fn(1, 'str');\",\n-        \"initializing variable\\n\" +\n-        \"found   : {t: number, u: string}\\n\" +\n-        \"required: null\");\n-  }\n-\n   public void disable_testBadTemplateType4() throws Exception {\n     // TODO(johnlenz): Add a check for useless of template types.\n     // Unless there are at least two references to a Template type in", "timestamp": 1378429234, "metainfo": ""}