{"sha": "027442d1a12004c6e27ca76d5eea68774c52ce7c", "log": "sync up moe scrubber  Revision created by MOE tool push_codebase. MOE_MIGRATION=96001   ", "commit": "\n--- a/gen/com/google/javascript/jscomp/FunctionInformationMap.java\n+++ b/gen/com/google/javascript/jscomp/FunctionInformationMap.java\n       name_ = \"\";\n       compiledSource_ = \"\";\n     }\n+    private byte memoizedIsInitialized = -1;\n     public final boolean isInitialized() {\n-      if (!hasId()) return false;\n-      if (!hasSourceName()) return false;\n-      if (!hasLineNumber()) return false;\n-      if (!hasModuleName()) return false;\n-      if (!hasSize()) return false;\n-      if (!hasName()) return false;\n-      if (!hasCompiledSource()) return false;\n+      byte isInitialized = memoizedIsInitialized;\n+      if (isInitialized != -1) return isInitialized == 1;\n+      \n+      if (!hasId()) {\n+        memoizedIsInitialized = 0;\n+        return false;\n+      }\n+      if (!hasSourceName()) {\n+        memoizedIsInitialized = 0;\n+        return false;\n+      }\n+      if (!hasLineNumber()) {\n+        memoizedIsInitialized = 0;\n+        return false;\n+      }\n+      if (!hasModuleName()) {\n+        memoizedIsInitialized = 0;\n+        return false;\n+      }\n+      if (!hasSize()) {\n+        memoizedIsInitialized = 0;\n+        return false;\n+      }\n+      if (!hasName()) {\n+        memoizedIsInitialized = 0;\n+        return false;\n+      }\n+      if (!hasCompiledSource()) {\n+        memoizedIsInitialized = 0;\n+        return false;\n+      }\n+      memoizedIsInitialized = 1;\n       return true;\n     }\n     \n       }\n       \n       public final boolean isInitialized() {\n-        if (!hasId()) return false;\n-        if (!hasSourceName()) return false;\n-        if (!hasLineNumber()) return false;\n-        if (!hasModuleName()) return false;\n-        if (!hasSize()) return false;\n-        if (!hasName()) return false;\n-        if (!hasCompiledSource()) return false;\n+        if (!hasId()) {\n+          \n+          return false;\n+        }\n+        if (!hasSourceName()) {\n+          \n+          return false;\n+        }\n+        if (!hasLineNumber()) {\n+          \n+          return false;\n+        }\n+        if (!hasModuleName()) {\n+          \n+          return false;\n+        }\n+        if (!hasSize()) {\n+          \n+          return false;\n+        }\n+        if (!hasName()) {\n+          \n+          return false;\n+        }\n+        if (!hasCompiledSource()) {\n+          \n+          return false;\n+        }\n         return true;\n       }\n       \n       name_ = \"\";\n       compiledSource_ = \"\";\n     }\n+    private byte memoizedIsInitialized = -1;\n     public final boolean isInitialized() {\n-      if (!hasName()) return false;\n-      if (!hasCompiledSource()) return false;\n+      byte isInitialized = memoizedIsInitialized;\n+      if (isInitialized != -1) return isInitialized == 1;\n+      \n+      if (!hasName()) {\n+        memoizedIsInitialized = 0;\n+        return false;\n+      }\n+      if (!hasCompiledSource()) {\n+        memoizedIsInitialized = 0;\n+        return false;\n+      }\n+      memoizedIsInitialized = 1;\n       return true;\n     }\n     \n       }\n       \n       public final boolean isInitialized() {\n-        if (!hasName()) return false;\n-        if (!hasCompiledSource()) return false;\n+        if (!hasName()) {\n+          \n+          return false;\n+        }\n+        if (!hasCompiledSource()) {\n+          \n+          return false;\n+        }\n         return true;\n       }\n       \n     entry_ = java.util.Collections.emptyList();\n     module_ = java.util.Collections.emptyList();\n   }\n+  private byte memoizedIsInitialized = -1;\n   public final boolean isInitialized() {\n+    byte isInitialized = memoizedIsInitialized;\n+    if (isInitialized != -1) return isInitialized == 1;\n+    \n     for (int i = 0; i < getEntryCount(); i++) {\n-      if (!getEntry(i).isInitialized()) return false;\n+      if (!getEntry(i).isInitialized()) {\n+        memoizedIsInitialized = 0;\n+        return false;\n+      }\n     }\n     for (int i = 0; i < getModuleCount(); i++) {\n-      if (!getModule(i).isInitialized()) return false;\n-    }\n+      if (!getModule(i).isInitialized()) {\n+        memoizedIsInitialized = 0;\n+        return false;\n+      }\n+    }\n+    memoizedIsInitialized = 1;\n     return true;\n   }\n   \n     \n     public final boolean isInitialized() {\n       for (int i = 0; i < getEntryCount(); i++) {\n-        if (!getEntry(i).isInitialized()) return false;\n+        if (!getEntry(i).isInitialized()) {\n+          \n+          return false;\n+        }\n       }\n       for (int i = 0; i < getModuleCount(); i++) {\n-        if (!getModule(i).isInitialized()) return false;\n+        if (!getModule(i).isInitialized()) {\n+          \n+          return false;\n+        }\n       }\n       return true;\n     }\n--- a/gen/com/google/javascript/jscomp/Instrumentation.java\n+++ b/gen/com/google/javascript/jscomp/Instrumentation.java\n     init_ = com.google.protobuf.LazyStringArrayList.EMPTY;\n     appNameSetter_ = \"\";\n   }\n+  private byte memoizedIsInitialized = -1;\n   public final boolean isInitialized() {\n+    byte isInitialized = memoizedIsInitialized;\n+    if (isInitialized != -1) return isInitialized == 1;\n+    \n+    memoizedIsInitialized = 1;\n     return true;\n   }\n   \n--- a/src/com/google/javascript/jscomp/AbstractMessageFormatter.java\n+++ b/src/com/google/javascript/jscomp/AbstractMessageFormatter.java\n  * Abstract message formatter providing default behavior for implementations\n  * of {@link MessageFormatter} needing a {@link SourceExcerptProvider}.\n  *\n- *\n+*\n  */\n public abstract class AbstractMessageFormatter implements MessageFormatter {\n   private final SourceExcerptProvider source;\n--- a/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\n+++ b/src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java\n  * optimizations that look at a small section of code and either remove\n  * that code (if it is not needed) or replaces it with smaller code.\n  *\n- *\n+*\n  */\n abstract class AbstractPeepholeOptimization {\n \n--- a/src/com/google/javascript/jscomp/AliasExternals.java\n+++ b/src/com/google/javascript/jscomp/AliasExternals.java\n  *\n  * <p>Globals that are lvalues are not aliased.</p>\n  *\n- *\n+*\n  */\n class AliasExternals implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/AliasKeywords.java\n+++ b/src/com/google/javascript/jscomp/AliasKeywords.java\n  * number of bytes taken up by references to these keywords by replacing them\n  * with references to variables and functions with shorter names.</p>\n  *\n- *\n+*\n  */\n class AliasKeywords implements CompilerPass {\n   /** Callback that finds the nodes that we will alias. */\n--- a/src/com/google/javascript/jscomp/AliasStrings.java\n+++ b/src/com/google/javascript/jscomp/AliasStrings.java\n  * applications. Strings that should be aliased occur many times in the code,\n  * or occur on codepaths that get executed frequently.\n  *\n- *\n+*\n  */\n class AliasStrings extends AbstractPostOrderCallback\n     implements CompilerPass {\n--- a/src/com/google/javascript/jscomp/AmbiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/AmbiguateProperties.java\n  *   Bar.a = 0;\n  * </code>\n  *\n- *\n+*\n  */\n class AmbiguateProperties implements CompilerPass {\n   private static final Logger logger = Logger.getLogger(\n--- a/src/com/google/javascript/jscomp/AnalyzeNameReferences.java\n+++ b/src/com/google/javascript/jscomp/AnalyzeNameReferences.java\n  * This is an analysis based on {@link AnalyzeNameReferences} using the more\n  * accurate graph and will soon replace it.\n  *\n- *\n+*\n  */\n class AnalyzeNameReferences implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n  * Global functions are also represented by nodes in this graph, with\n  * similar semantics.\n  *\n- *\n+*\n  * @author nicksantos@google.com (Nick Santos)\n  */\n class AnalyzePrototypeProperties implements CompilerPass {\n--- a/src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java\n+++ b/src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java\n  * goog.string.htmlEscape = function(str) {\n  * }\n  *\n- *\n+*\n  */\n class AnonymousFunctionNamingCallback\n     extends AbstractPostOrderCallback {\n--- a/src/com/google/javascript/jscomp/AstChangeProxy.java\n+++ b/src/com/google/javascript/jscomp/AstChangeProxy.java\n  * Proxy that provides a high level interface that compiler passes can\n  * use to replace or remove sections of the AST.\n  *\n- *\n+*\n  */\n class AstChangeProxy {\n \n--- a/src/com/google/javascript/jscomp/AstParallelizer.java\n+++ b/src/com/google/javascript/jscomp/AstParallelizer.java\n  * transformation safe, it is still up to individual passes to preserve proper\n  * semantics when analyzing the subtrees.\n  *\n- *\n+*\n  */\n class AstParallelizer {\n \n--- a/src/com/google/javascript/jscomp/BasicErrorManager.java\n+++ b/src/com/google/javascript/jscomp/BasicErrorManager.java\n  * override the {@link #println(CheckLevel, JSError)} method to generate custom\n  * output.</p>\n  *\n- *\n- *\n+*\n+*\n  */\n public abstract class BasicErrorManager implements ErrorManager {\n   private final SortedSet<ErrorWithLevel> messages =\n--- a/src/com/google/javascript/jscomp/ChainCalls.java\n+++ b/src/com/google/javascript/jscomp/ChainCalls.java\n /**\n  * Chain calls to functions that return this.\n  *\n- *\n+*\n  */\n class ChainCalls implements CompilerPass {\n   private final AbstractCompiler compiler;\n--- a/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/ChainableReverseAbstractInterpreter.java\n /**\n  * Chainable reverse abstract interpreter providing basic functionality.\n  *\n- *\n+*\n  */\n abstract class ChainableReverseAbstractInterpreter\n     implements ReverseAbstractInterpreter {\n--- a/src/com/google/javascript/jscomp/CheckAccidentalSemicolon.java\n+++ b/src/com/google/javascript/jscomp/CheckAccidentalSemicolon.java\n  * </pre>\n  * and generates warnings.\n  *\n- *\n- *\n+*\n+*\n  */\n final class CheckAccidentalSemicolon extends AbstractPostOrderCallback {\n \n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n  * </pre>\n  * which would get flagged.\n  *\n- *\n- *\n+*\n+*\n  */\n final class CheckGlobalThis implements Callback {\n \n--- a/src/com/google/javascript/jscomp/CheckLevel.java\n+++ b/src/com/google/javascript/jscomp/CheckLevel.java\n  * forward, this should be used instead of booleans, so teams and\n  * individuals can control which checks are off, which produce only warnings,\n  * and which produce errors, without everyone having to agree.\n- *\n+*\n  */\n public enum CheckLevel {\n   ERROR,\n--- a/src/com/google/javascript/jscomp/CheckLevelLegacy.java\n+++ b/src/com/google/javascript/jscomp/CheckLevelLegacy.java\n  * must be converted to CheckLevel enums before being used to control\n  * options.  Only use this for legacy flags.  For new flags, simply use\n  * {@link CheckLevel}.\n- *\n+*\n  */\n public enum CheckLevelLegacy {\n   LEGACY,\n--- a/src/com/google/javascript/jscomp/CheckMissingGetCssName.java\n+++ b/src/com/google/javascript/jscomp/CheckMissingGetCssName.java\n  * Ensures string literals matching certain patterns are only used as\n  * goog.getCssName parameters.\n  *\n- *\n+*\n  */\n class CheckMissingGetCssName\n     extends AbstractPostOrderCallback implements CompilerPass {\n--- a/src/com/google/javascript/jscomp/CheckMissingReturn.java\n+++ b/src/com/google/javascript/jscomp/CheckMissingReturn.java\n  * expected for functions with return type information. Functions with empty\n  * bodies are ignored.\n  *\n- *\n+*\n  */\n class CheckMissingReturn implements ScopedCallback {\n \n--- a/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\n+++ b/src/com/google/javascript/jscomp/CheckPathsBetweenNodes.java\n  * DiGraphNode, DiGraphNode, Predicate, Predicate)}, for a\n  * description of this algorithm.\n  *\n- *\n- *\n+*\n+*\n  *\n  * @param <N> The node type.\n  * @param <E> The edge type.\n--- a/src/com/google/javascript/jscomp/CheckProvides.java\n+++ b/src/com/google/javascript/jscomp/CheckProvides.java\n /**\n  * Insures '@constructor X' has a 'goog.provide(\"X\")' .\n  *\n- *\n+*\n  */\n class CheckProvides implements CompilerPass {\n   private final AbstractCompiler compiler;\n--- a/src/com/google/javascript/jscomp/CheckRequiresForConstructors.java\n+++ b/src/com/google/javascript/jscomp/CheckRequiresForConstructors.java\n  * 'goog.require' nodes. It reconciles these Collections, creating a\n  * warning for each discrepancy.\n  *\n- *\n+*\n  */\n class CheckRequiresForConstructors implements CompilerPass {\n   private final AbstractCompiler compiler;\n    * This class \"records\" each constructor and goog.require visited and creates\n    * a warning for each new node without an appropriate goog.require node.\n    *\n-   *\n+  *\n    */\n   private class CheckRequiresForConstructorsCallback implements Callback {\n     private final List<String> constructors = Lists.newArrayList();\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n  * </p>\n  * and generates warnings.\n  *\n- *\n- *\n+*\n+*\n  */\n final class CheckSideEffects extends AbstractPostOrderCallback {\n \n--- a/src/com/google/javascript/jscomp/CheckUnreachableCode.java\n+++ b/src/com/google/javascript/jscomp/CheckUnreachableCode.java\n  * Use {@link ControlFlowGraph} and {@link GraphReachability} to inform user\n  * about unreachable code.\n  *\n- *\n+*\n  */\n class CheckUnreachableCode implements ScopedCallback {\n \n--- a/src/com/google/javascript/jscomp/ClosureCodingConvention.java\n+++ b/src/com/google/javascript/jscomp/ClosureCodingConvention.java\n /**\n  * This describes the Closure-specific JavaScript coding conventions.\n  *\n- *\n- *\n+*\n+*\n  */\n public class ClosureCodingConvention extends DefaultCodingConvention {\n \n--- a/src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java\n  * A reverse abstract interpreter (RAI) for specific closure patterns such as\n  * {@code goog.isDef}.\n  *\n- *\n+*\n  */\n class ClosureReverseAbstractInterpreter\n     extends ChainableReverseAbstractInterpreter {\n--- a/src/com/google/javascript/jscomp/CoalesceVariableNames.java\n+++ b/src/com/google/javascript/jscomp/CoalesceVariableNames.java\n  * graph coloring in {@link GraphColoring} to determine which two variables can\n  * be merge together safely.\n  *\n- *\n+*\n  */\n class CoalesceVariableNames extends AbstractPostOrderCallback implements\n     CompilerPass, ScopedCallback {\n--- a/src/com/google/javascript/jscomp/CodeConsumer.java\n+++ b/src/com/google/javascript/jscomp/CodeConsumer.java\n  * @see CodeGenerator\n  * @see CodePrinter\n  * @see InlineCostEstimator\n- *\n- *\n- *\n+*\n+*\n+*\n  */\n abstract class CodeConsumer {\n   boolean statementNeedsEnded = false;\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n  * CodeGenerator generates codes from a parse tree, sending it to the specified\n  * CodeConsumer.\n  *\n- *\n- *\n+*\n+*\n  */\n class CodeGenerator {\n \n--- a/src/com/google/javascript/jscomp/CodePrinter.java\n+++ b/src/com/google/javascript/jscomp/CodePrinter.java\n  * CodePrinter prints out js code in either pretty format or compact format.\n  *\n  * @see CodeGenerator\n- *\n- *\n+*\n+*\n  */\n class CodePrinter {\n   // The number of characters after which we insert a line break in the code\n--- a/src/com/google/javascript/jscomp/CodingConvention.java\n+++ b/src/com/google/javascript/jscomp/CodingConvention.java\n  *\n  * // TODO(bolinfest): Tighten up this interface -- it is far too big.\n  *\n- *\n- *\n+*\n+*\n  */\n public interface CodingConvention extends Serializable {\n \n--- a/src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java\n+++ b/src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java\n  * This reduces the generated code size but changes the semantics because f\n  * will be defined before its definition is reached.\n  *\n- *\n+*\n  */\n class CollapseAnonymousFunctions implements CompilerPass {\n   private final AbstractCompiler compiler;\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n  *\n  * <p>For lots of examples, see the unit test.\n  *\n- *\n- *\n+*\n+*\n  */\n class CollapseProperties implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\n+++ b/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\n  *\n  * <pre>var c = b = a = true;</pre>\n  *\n- *\n+*\n  * @author nicksantos@google.com (Nick Santos)\n  */\n class CollapseVariableDeclarations implements CompilerPass {\n--- a/src/com/google/javascript/jscomp/CombinedCompilerPass.java\n+++ b/src/com/google/javascript/jscomp/CombinedCompilerPass.java\n  * back into this compiler pass to give it context about what combined\n  * passes are doing.</p>\n  *\n- *\n+*\n  */\n final class CombinedCompilerPass implements CompilerPass, ScopedCallback {\n \n    * The callback becomes inactive (i.e., traversal messages are not sent to it)\n    * until the main traversal revisits the node during the post-order visit.\n    *\n-   *\n+*\n    */\n   private static class CallbackWrapper {\n     /** The callback being wrapped. Never null. */\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n  * may include definitions for global javascript/browser objects such as\n  * window, document.\n  *\n- *\n- *\n+*\n+*\n  */\n public class Compiler extends AbstractCompiler {\n   CompilerOptions options = null;\n--- a/src/com/google/javascript/jscomp/CompilerInput.java\n+++ b/src/com/google/javascript/jscomp/CompilerInput.java\n  * Wraps a {@link SourceAst} and maintain state such as module for the input and\n  * whether the input is an extern. Also calculates provided and required types.\n  *\n- *\n+*\n  */\n public class CompilerInput implements SourceAst, DependencyInfo {\n   private static final long serialVersionUID = 1L;\n--- a/src/com/google/javascript/jscomp/CompilerPass.java\n+++ b/src/com/google/javascript/jscomp/CompilerPass.java\n  *\n  * <p>Use this class to support testing with BaseCompilerTest</p>\n  *\n- *\n+*\n  */\n public interface CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/ConcreteType.java\n+++ b/src/com/google/javascript/jscomp/ConcreteType.java\n  *\n  * These types are computed by {@code TightenTypes}.\n  *\n- *\n+*\n  */\n abstract class ConcreteType implements LatticeElement {\n   /** Static instance of the empty set of concrete types. */\n--- a/src/com/google/javascript/jscomp/ConstCheck.java\n+++ b/src/com/google/javascript/jscomp/ConstCheck.java\n  * XX = 3;    // error!\n  * XX++;      // error!\n  *\n- *\n- *\n- *\n+*\n+*\n+*\n  */\n class ConstCheck extends AbstractPostOrderCallback\n     implements CompilerPass {\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n /**\n  * This is a compiler pass that computes a control flow graph.\n  *\n- *\n+*\n  */\n final class ControlFlowAnalysis implements Callback, CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/ControlFlowGraph.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowGraph.java\n /**\n  * Control flow graph.\n  *\n- *\n+*\n  *\n  * @param <N> The instruction type of the control flow graph.\n  */\n--- a/src/com/google/javascript/jscomp/ControlStructureCheck.java\n+++ b/src/com/google/javascript/jscomp/ControlStructureCheck.java\n /**\n  * Check for invalid breaks and continues in the program.\n  *\n- *\n+*\n  */\n class ControlStructureCheck implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\n+++ b/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\n  * possible. Dot syntax is more compact and avoids an object allocation in\n  * IE 6.\n  *\n- *\n+*\n  */\n class ConvertToDottedProperties extends AbstractPostOrderCallback\n     implements CompilerPass {\n--- a/src/com/google/javascript/jscomp/CreateSyntheticBlocks.java\n+++ b/src/com/google/javascript/jscomp/CreateSyntheticBlocks.java\n  * Creates synthetic blocks to prevent {@link FoldConstants} from moving code\n  * past markers in the source.\n  *\n- *\n+*\n  */\n class CreateSyntheticBlocks implements CompilerPass {\n   static final DiagnosticType UNMATCHED_START_MARKER = DiagnosticType.warning(\n--- a/src/com/google/javascript/jscomp/CrossModuleCodeMotion.java\n+++ b/src/com/google/javascript/jscomp/CrossModuleCodeMotion.java\n  * A {@link Compiler} pass for moving code to a deeper module if possible.\n  * - currently it only moves functions + variables\n  *\n- *\n+*\n  */\n class CrossModuleCodeMotion extends AbstractPostOrderCallback\n     implements CompilerPass {\n--- a/src/com/google/javascript/jscomp/CssRenamingMap.java\n+++ b/src/com/google/javascript/jscomp/CssRenamingMap.java\n \n /**\n  * Interface used by {@link ReplaceCssNames} to substitute CSS class names.\n- *\n+*\n  */\n public interface CssRenamingMap {\n   String get(String value);\n--- a/src/com/google/javascript/jscomp/DataFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/DataFlowAnalysis.java\n  * represents maximum fixed point solution. Any previous annotations at the\n  * nodes of the control flow graph will be lost.\n  *\n- *\n+*\n  *\n  * @param <N> The control flow graph's node value type.\n  * @param <L> Lattice element type.\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n  * {@code x} and {@code x} is dead after this assignment, we know that the\n  * current content of {@code x} will not be read and this assignment is useless.\n  *\n- *\n+*\n  */\n class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n     CompilerPass, ScopedCallback {\n--- a/src/com/google/javascript/jscomp/DefaultCodingConvention.java\n+++ b/src/com/google/javascript/jscomp/DefaultCodingConvention.java\n  * CodingConvention defines a set of hooks to customize the behavior of the\n  * Compiler for a specific team/company.\n  *\n- *\n- *\n+*\n+*\n  */\n public class DefaultCodingConvention implements CodingConvention {\n \n--- a/src/com/google/javascript/jscomp/DefinitionProvider.java\n+++ b/src/com/google/javascript/jscomp/DefinitionProvider.java\n /**\n  * Maps variable uses sites to variable definition sites.\n  *\n- *\n+*\n  */\n interface DefinitionProvider {\n   /**\n--- a/src/com/google/javascript/jscomp/DefinitionSite.java\n+++ b/src/com/google/javascript/jscomp/DefinitionSite.java\n  * Includes the definition node, and context in which the definition\n  * occurs - including the definition module.\n  *\n- *\n+*\n  */\n \n class DefinitionSite {\n--- a/src/com/google/javascript/jscomp/DefinitionsRemover.java\n+++ b/src/com/google/javascript/jscomp/DefinitionsRemover.java\n /**\n  * Models an assignment that defines a variable and the removal of it.\n  *\n- *\n+*\n  */\n class DefinitionsRemover {\n \n--- a/src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java\n+++ b/src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java\n  *     var total = accumulate(a, 2)\n  * </pre>\n  *\n- *\n+*\n  */\n class DevirtualizePrototypeMethods implements CompilerPass {\n   private final AbstractCompiler compiler;\n--- a/src/com/google/javascript/jscomp/DiagnosticType.java\n+++ b/src/com/google/javascript/jscomp/DiagnosticType.java\n /**\n  * The type of a compile or analysis error.\n  *\n- *\n+*\n  */\n public class DiagnosticType implements Comparable<DiagnosticType> {\n   /**\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n  *   Bar.a$Bar;\n  * </pre>\n  *\n- *\n+*\n  */\n class DisambiguateProperties<T> implements CompilerPass {\n   private static final Logger logger = Logger.getLogger(\n--- a/src/com/google/javascript/jscomp/DotFormatter.java\n+++ b/src/com/google/javascript/jscomp/DotFormatter.java\n  * <p>This class is <b>not</b> thread safe and should not be used without proper\n  * external synchronization.</p>\n  *\n- *\n+*\n  */\n public class DotFormatter {\n   private static final String INDENT = \"  \";\n--- a/src/com/google/javascript/jscomp/ErrorManager.java\n+++ b/src/com/google/javascript/jscomp/ErrorManager.java\n  * The error manager is in charge of storing, organizing and displaying\n  * errors and warnings generated by the compiler.\n  *\n- *\n+*\n  */\n public interface ErrorManager {\n   /**\n--- a/src/com/google/javascript/jscomp/ErrorPass.java\n+++ b/src/com/google/javascript/jscomp/ErrorPass.java\n /**\n  * A compiler pass that just reports an error.\n  *\n- *\n+*\n  */\n \n class ErrorPass implements CompilerPass {\n--- a/src/com/google/javascript/jscomp/ExportTestFunctions.java\n+++ b/src/com/google/javascript/jscomp/ExportTestFunctions.java\n  * Generates goog.exportSymbol for test functions, so they can be recognized\n  * by the test runner, even if the code is compiled.\n  *\n- *\n+*\n  */\n class ExportTestFunctions implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/ExternExportsPass.java\n+++ b/src/com/google/javascript/jscomp/ExternExportsPass.java\n  * Creates an externs file containing all exported symbols and properties\n  * for later consumption.\n  *\n- *\n+*\n  * @author dcc@google.com (Devin Coughlin)\n  */\n final class ExternExportsPass extends NodeTraversal.AbstractPostOrderCallback\n--- a/src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java\n+++ b/src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java\n  * Such logic is highly unlikely and we will assume that it never occurs.\n  *\n  *\n- *\n+*\n  */\n class ExtractPrototypeMemberDeclarations implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/FindExportableNodes.java\n+++ b/src/com/google/javascript/jscomp/FindExportableNodes.java\n  * are not supported because the annotation is ambigous to whether it applies\n  * to all the variables or only the first one.\n  *\n- *\n+*\n  */\n public class FindExportableNodes extends AbstractPostOrderCallback {\n \n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n  * <p>Other requirements can be found in {@link Candidate#canInline}. Currently\n  * this pass does not operate on the global scope due to compilation time.\n  *\n- *\n+*\n  */\n class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n     implements CompilerPass, ScopedCallback {\n--- a/src/com/google/javascript/jscomp/FunctionNames.java\n+++ b/src/com/google/javascript/jscomp/FunctionNames.java\n  *  goog.widget::local_fn\n  *  goog.widget::<anonymous>\n  *\n- *\n+*\n  */\n \n class FunctionNames implements CompilerPass, Serializable {\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n  * if by doing so we will save bytes, after the helper functions are\n  * added and renaming is done.\n  *\n- *\n+*\n  */\n class FunctionRewriter implements CompilerPass {\n   private final AbstractCompiler compiler;\n--- a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n+++ b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n  * of JSCompiler.\n  *\n  * @author nicksantos@google.com (Nick Santos)\n- *\n+*\n  */\n final class FunctionTypeBuilder {\n \n--- a/src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java\n+++ b/src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java\n  * list.  In the case of branching subexpressions, it simplifies the\n  * subexpression before adding it to the replacement list.\n  *\n- *\n+*\n  */\n class GatherSideEffectSubexpressionsCallback implements Callback {\n \n--- a/src/com/google/javascript/jscomp/GenerateExports.java\n+++ b/src/com/google/javascript/jscomp/GenerateExports.java\n /**\n  * Generates goog.exportSymbol/goog.exportProperty for the @export annotation.\n  *\n- *\n+*\n  */\n class GenerateExports implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n  * Builds a global namespace of all the objects and their properties in\n  * the global scope. Also builds an index of all the references to those names.\n  *\n- *\n- *\n+*\n+*\n  * @author nicksantos@google.com (Nick Santos)\n  */\n class GlobalNamespace {\n--- a/src/com/google/javascript/jscomp/GoogleCodingConvention.java\n+++ b/src/com/google/javascript/jscomp/GoogleCodingConvention.java\n  * This describes the Google-specific JavaScript coding conventions.\n  * Within Google, variable names are semantically significant.\n  *\n- *\n+*\n  */\n public class GoogleCodingConvention extends ClosureCodingConvention {\n \n--- a/src/com/google/javascript/jscomp/GroupVariableDeclarations.java\n+++ b/src/com/google/javascript/jscomp/GroupVariableDeclarations.java\n  * with more than one variable initialization are not collapsed. This is\n  * because doing so would increase uncompressed code size.\n  *\n- *\n+*\n  */\n class GroupVariableDeclarations implements CompilerPass, ScopedCallback {\n   private final AbstractCompiler compiler;\n--- a/src/com/google/javascript/jscomp/IgnoreCajaProperties.java\n+++ b/src/com/google/javascript/jscomp/IgnoreCajaProperties.java\n  * This pass adds a conditional to for..in loops that filters out these\n  * properties.\n  *\n- *\n+*\n  */\n \n class IgnoreCajaProperties implements CompilerPass {\n--- a/src/com/google/javascript/jscomp/InlineCostEstimator.java\n+++ b/src/com/google/javascript/jscomp/InlineCostEstimator.java\n  *\n  * @see CodeGenerator\n  * @see CodePrinter\n- *\n+*\n  */\n class InlineCostEstimator {\n   // For now simply assume identifiers are 2 characters.\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n  * \"directly\" inlined functions must meet these additional requirements:\n  * - consists of a single return statement\n  *\n- *\n+*\n  * @author johnlenz@google.com (John Lenz)\n  */\n class InlineFunctions implements CompilerPass {\n--- a/src/com/google/javascript/jscomp/InlineGetters.java\n+++ b/src/com/google/javascript/jscomp/InlineGetters.java\n  * call sites. For examples, calls of the form foo[\"bar\"] are not\n  * detected.\n  *\n- *\n+*\n  */\n class InlineGetters extends MethodCompilerPass {\n \n--- a/src/com/google/javascript/jscomp/InstrumentFunctions.java\n+++ b/src/com/google/javascript/jscomp/InstrumentFunctions.java\n  * pass up, list inlined functions or give clients the option to\n  * instrument before or after optimization.\n  *\n- *\n- *\n+*\n+*\n  */\n class InstrumentFunctions implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/InvocationsCallback.java\n+++ b/src/com/google/javascript/jscomp/InvocationsCallback.java\n  *\n  * and invokes a method defined by subclasses for processing these invocations.\n  *\n- *\n+*\n  */\n abstract class InvocationsCallback extends AbstractPostOrderCallback {\n \n--- a/src/com/google/javascript/jscomp/JSError.java\n+++ b/src/com/google/javascript/jscomp/JSError.java\n /**\n  * Compile error description\n  *\n- *\n- *\n- *\n+*\n+*\n+*\n  */\n public class JSError {\n   /** A type of the error */\n--- a/src/com/google/javascript/jscomp/JSModule.java\n+++ b/src/com/google/javascript/jscomp/JSModule.java\n  * A JavaScript module has a unique name, consists of a list of compiler inputs,\n  * and can depend on other modules.\n  *\n- *\n- *\n+*\n+*\n  */\n public class JSModule implements DependencyInfo, Serializable {\n   private static final long serialVersionUID = 1;\n--- a/src/com/google/javascript/jscomp/JSModuleGraph.java\n+++ b/src/com/google/javascript/jscomp/JSModuleGraph.java\n  * a module's depth is defined as the number of hops in the longest path from\n  * the module to a module with no dependencies.\n  *\n- *\n+*\n  */\n public class JSModuleGraph {\n \n--- a/src/com/google/javascript/jscomp/JSSourceFile.java\n+++ b/src/com/google/javascript/jscomp/JSSourceFile.java\n  * JSCompiler.\n  *\n  * @author nicksantos@google.com (Nick Santos)\n- *\n+*\n  */\n public class JSSourceFile extends SourceFile {\n \n--- a/src/com/google/javascript/jscomp/JsAst.java\n+++ b/src/com/google/javascript/jscomp/JsAst.java\n /**\n  * Generates an AST for a JavaScript source file.\n  *\n- *\n+*\n  */\n public class JsAst implements SourceAst {\n   private static final Logger logger_ = Logger.getLogger(JsAst.class.getName());\n--- a/src/com/google/javascript/jscomp/JsMessage.java\n+++ b/src/com/google/javascript/jscomp/JsMessage.java\n  *     .build();\n  * </pre>\n  *\n- *\n+*\n  * @author anatol@google.com (Anatol Pomazau)\n  */\n public class JsMessage {\n--- a/src/com/google/javascript/jscomp/JsMessageExtractor.java\n+++ b/src/com/google/javascript/jscomp/JsMessageExtractor.java\n  * <p>This class enforces the policy that message variable names must be unique\n  * across all JS files.\n  *\n- *\n- *\n+*\n+*\n  */\n public class JsMessageExtractor {\n \n--- a/src/com/google/javascript/jscomp/LatticeElement.java\n+++ b/src/com/google/javascript/jscomp/LatticeElement.java\n /**\n  * A lattice element.\n  *\n- *\n+*\n  */\n interface LatticeElement {\n \n--- a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n+++ b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n  * Lightweight message formatter. The format of messages this formatter\n  * produces is very compact and to the point.\n  *\n- *\n+*\n  */\n public class LightweightMessageFormatter extends AbstractMessageFormatter {\n   private SourceExcerpt excerpt;\n--- a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n+++ b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n  * variables can escape the function. These variables will be considered as\n  * global and they can be retrieved with {@link #getEscapedLocals()}.\n  *\n- *\n+*\n  */\n class LiveVariablesAnalysis extends\n     DataFlowAnalysis<Node, LiveVariablesAnalysis.LiveVariableLattice> {\n--- a/src/com/google/javascript/jscomp/LoggerErrorManager.java\n+++ b/src/com/google/javascript/jscomp/LoggerErrorManager.java\n  * collecting them in memory. Errors are logged at the SEVERE level and warnings\n  * are logged at the WARNING level.\n  *\n- *\n+*\n  */\n public class LoggerErrorManager extends BasicErrorManager {\n   private final MessageFormatter formatter;\n--- a/src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java\n+++ b/src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java\n  * function definition sites; eventually we should traverse function\n  * bodies to determine if they have side effects.\n  *\n- *\n+*\n  */\n class MarkNoSideEffectCalls implements CompilerPass {\n   static final DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION =\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n  * the use node reaches that definition and it is the last definition before\n  * the use on that path.\n  *\n- *\n+*\n  */\n class MaybeReachingVariableUse extends\n     DataFlowAnalysis<Node, MaybeReachingVariableUse.ReachingUses> {\n--- a/src/com/google/javascript/jscomp/MessageBundle.java\n+++ b/src/com/google/javascript/jscomp/MessageBundle.java\n  * An interface for providing alterative values for user-visible messages in\n  * javascript code.\n  *\n- *\n- *\n+*\n+*\n  */\n public interface MessageBundle {\n \n--- a/src/com/google/javascript/jscomp/MessageFormatter.java\n+++ b/src/com/google/javascript/jscomp/MessageFormatter.java\n  * Format warnings and errors. This interface may be used by implementations of\n  * {@link ErrorManager} to request message formatting capabilities.\n  *\n- *\n+*\n  */\n public interface MessageFormatter {\n   /**\n--- a/src/com/google/javascript/jscomp/MethodCompilerPass.java\n+++ b/src/com/google/javascript/jscomp/MethodCompilerPass.java\n  * Finds all method declarations and pulls them into data structures\n  * for use during cleanups such as arity checks or inlining.\n  *\n- *\n- *\n+*\n+*\n  */\n abstract class MethodCompilerPass implements CompilerPass {\n   /** List of methods defined in externs */\n--- a/src/com/google/javascript/jscomp/MoveFunctionDeclarations.java\n+++ b/src/com/google/javascript/jscomp/MoveFunctionDeclarations.java\n  *   function f() {}\n  * } catch(e) {}\n  *\n- *\n+*\n  */\n class MoveFunctionDeclarations implements Callback, CompilerPass {\n   private final AbstractCompiler compiler;\n--- a/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\n+++ b/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\n  * the use of {@code A} in {@code alert(A)} if all paths from entry node must\n  * reaches that definition and it is the last definition before the use.\n  *\n- *\n+*\n  */\n final class MustBeReachingVariableDef extends\n     DataFlowAnalysis<Node, MustBeReachingVariableDef.MustDef> {\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n  * effectively the same name. When someone has the time, we should completely\n  * rip out all the logic that understands namespaces.\n  *\n- *\n- *\n+*\n+*\n  */\n final class NameAnalyzer implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/NameAnonymousFunctions.java\n+++ b/src/com/google/javascript/jscomp/NameAnonymousFunctions.java\n  * goog.string.htmlEscape = function $goog$string$htmlEscape$(str) {\n  * }\n  *\n- *\n+*\n  */\n class NameAnonymousFunctions implements CompilerPass {\n   private static final Logger logger = Logger.getLogger(\n--- a/src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java\n+++ b/src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java\n  *\n  * And there will be mapping from $qv to goog.string.htmlEscape\n  *\n- *\n+*\n  */\n class NameAnonymousFunctionsMapped implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/NameGenerator.java\n+++ b/src/com/google/javascript/jscomp/NameGenerator.java\n  *\n  * <p>This class is not thread safe.\n  *\n- *\n+*\n  */\n final class NameGenerator {\n   /** Generate short name with this first character */\n--- a/src/com/google/javascript/jscomp/NameReferenceGraph.java\n+++ b/src/com/google/javascript/jscomp/NameReferenceGraph.java\n  * module) if A is needed (in this module). The converse of the this result is\n  * more useful. B is not needed if A is not needed.\n  *\n- *\n+*\n  */\n class NameReferenceGraph extends\n     LinkedDirectedGraph<NameReferenceGraph.Name, NameReferenceGraph.Reference>\n--- a/src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java\n+++ b/src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java\n  *\n  * @see NameReferenceGraph\n  *\n- *\n+*\n  */\n class NameReferenceGraphConstruction implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/NodeNameExtractor.java\n+++ b/src/com/google/javascript/jscomp/NodeNameExtractor.java\n  * related nodes based on it (as done by the NameAnonymousFunctions\n  * compiler pass).\n  *\n- *\n+*\n  */\n class NodeNameExtractor {\n   private final char delimiter;\n--- a/src/com/google/javascript/jscomp/NodeTraversal.java\n+++ b/src/com/google/javascript/jscomp/NodeTraversal.java\n  * Nodetraversal allows an iteration through the nodes in the parse tree,\n  * and facilitates the optimizations on the parse tree.\n  *\n- *\n- *\n+*\n+*\n  */\n public class NodeTraversal {\n   // Package protected for tests\n \n   /**\n    * Abstract callback to visit all nodes in post order.\n-   *\n+*\n    */\n   public abstract static class AbstractPostOrderCallback implements Callback {\n     public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n \n   /**\n    * Abstract callback to visit a pruned set of nodes.\n-   *\n+*\n    */\n   public abstract static class AbstractNodeTypePruningCallback\n         implements Callback {\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n /**\n  * NodeUtil contains utilities that get properties from the Node object.\n  *\n- *\n- *\n+*\n+*\n  */\n public final class NodeUtil {\n \n--- a/src/com/google/javascript/jscomp/ObjectPropertyStringPostprocess.java\n+++ b/src/com/google/javascript/jscomp/ObjectPropertyStringPostprocess.java\n  *\n  * @see ObjectPropertyStringPreprocess\n  *\n- *\n+*\n  */\n class ObjectPropertyStringPostprocess implements CompilerPass {\n   private final AbstractCompiler compiler;\n--- a/src/com/google/javascript/jscomp/ObjectPropertyStringPreprocess.java\n+++ b/src/com/google/javascript/jscomp/ObjectPropertyStringPreprocess.java\n  *\n  * @see ObjectPropertyStringPostprocess\n  *\n- *\n+*\n  */\n public class ObjectPropertyStringPreprocess implements CompilerPass {\n   static final String OBJECT_PROPERTY_STRING =\n--- a/src/com/google/javascript/jscomp/OptimizeArgumentsArray.java\n+++ b/src/com/google/javascript/jscomp/OptimizeArgumentsArray.java\n  * Each newly inserted variable name will be unique very much like the output\n  * of the AST found after the {@link Normalize} pass.\n  *\n- *\n+*\n  */\n class OptimizeArgumentsArray implements CompilerPass, ScopedCallback {\n \n--- a/src/com/google/javascript/jscomp/OptimizeParameters.java\n+++ b/src/com/google/javascript/jscomp/OptimizeParameters.java\n  *     </li>\n  * </ul>\n  *\n- *\n+*\n  */\n class OptimizeParameters implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/ParallelCompilerPass.java\n+++ b/src/com/google/javascript/jscomp/ParallelCompilerPass.java\n  * spread the work so multiple {@link Task}s can execute in parallel without\n  * running into race-conditions.\n  *\n- *\n+*\n  */\n final class ParallelCompilerPass implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n /**\n  * Peephole optimization to fold constants (e.g. x + 1 + 7 --> x + 8).\n  *\n- *\n- *\n+*\n+*\n  */\n public class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n \n--- a/src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java\n+++ b/src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java\n  * Peephole optimization to remove useless code such as IF's with false\n  * guard conditions, comma operator left hand sides with no side effects, etc.\n  *\n- *\n- *\n+*\n+*\n  */\n public class PeepholeRemoveDeadCode extends AbstractPeepholeOptimization {\n \n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n  * expressions, replacing IFs with HOOKs, replacing object constructors\n  * with literals, and simplifying returns.\n  *\n- *\n- *\n+*\n+*\n  */\n public class PeepholeSubstituteAlternateSyntax\n   extends AbstractPeepholeOptimization {\n--- a/src/com/google/javascript/jscomp/PerformanceTracker.java\n+++ b/src/com/google/javascript/jscomp/PerformanceTracker.java\n import java.util.zip.GZIPOutputStream;\n \n /**\n- *\n+*\n  */\n public class PerformanceTracker {\n \n--- a/src/com/google/javascript/jscomp/Position.java\n+++ b/src/com/google/javascript/jscomp/Position.java\n /**\n  * Represents a position in a source file.\n  *\n- *\n+*\n  */\n class Position {\n   private final int lineNumber;\n--- a/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\n+++ b/src/com/google/javascript/jscomp/PrintStreamErrorManager.java\n  * <p>It collaborates with a {@link SourceExcerptProvider} via a\n  * {@link MessageFormatter} to display error messages with source context.</p>\n  *\n- *\n- *\n+*\n+*\n  */\n public class PrintStreamErrorManager extends BasicErrorManager {\n   private final MessageFormatter formatter;\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n  * goog.require has a corresponding goog.provide and some closure specific\n  * simplifications.\n  *\n- *\n+*\n  * @author chrisn@google.com (Chris Nokleberg)\n- *\n+*\n  */\n class ProcessClosurePrimitives extends AbstractPostOrderCallback\n     implements CompilerPass {\n--- a/src/com/google/javascript/jscomp/PureFunctionIdentifier.java\n+++ b/src/com/google/javascript/jscomp/PureFunctionIdentifier.java\n  * Date.now is an example of a function that has no side effects but\n  * is not pure.\n  *\n- *\n+*\n  *\n  * We will prevail, in peace and freedom from fear, and in true\n  * health, through the purity and essence of our natural... fluids.\n--- a/src/com/google/javascript/jscomp/RecordFunctionInformation.java\n+++ b/src/com/google/javascript/jscomp/RecordFunctionInformation.java\n /**\n  * Records information about functions and modules.\n  *\n- *\n- *\n+*\n+*\n  */\n class RecordFunctionInformation extends AbstractPostOrderCallback\n     implements CompilerPass {\n--- a/src/com/google/javascript/jscomp/Region.java\n+++ b/src/com/google/javascript/jscomp/Region.java\n /**\n  * Source code region.\n  *\n- *\n+*\n  */\n public interface Region {\n   /**\n--- a/src/com/google/javascript/jscomp/RemoveConstantExpressions.java\n+++ b/src/com/google/javascript/jscomp/RemoveConstantExpressions.java\n  *   foo();bar()\n  * </pre>\n  *\n- *\n+*\n  */\n final class RemoveConstantExpressions implements CompilerPass {\n   private final AbstractCompiler compiler;\n--- a/src/com/google/javascript/jscomp/RemoveConstantExpressionsParallel.java\n+++ b/src/com/google/javascript/jscomp/RemoveConstantExpressionsParallel.java\n /**\n  * Execute {@link RemoveConstantExpressions} in parallel.\n  *\n- *\n+*\n  */\n final class RemoveConstantExpressionsParallel implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/RemoveTryCatch.java\n+++ b/src/com/google/javascript/jscomp/RemoveTryCatch.java\n  * Removes try catch finally blocks from a parse tree for easier debugging\n  * (these statements impact both debugging in IE and sometimes even in FF).\n  *\n- *\n- *\n+*\n+*\n  */\n class RemoveTryCatch implements CompilerPass {\n   private final AbstractCompiler compiler;\n--- a/src/com/google/javascript/jscomp/RemoveUnusedNames.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedNames.java\n /**\n  * Removes unused names.\n  *\n- *\n+*\n  */\n class RemoveUnusedNames implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java\n /**\n  * Removes unused properties from prototypes.\n  *\n- *\n+*\n  * @author nicksantos@google.com (Nick Santos)\n  */\n class RemoveUnusedPrototypeProperties implements CompilerPass {\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n  * {@code FlowSensitiveInlineVariables}, except that it works for variables\n  * used across scopes.\n  *\n- *\n+*\n  * @author nicksantos@google.com (Nick Santos)\n  */\n class RemoveUnusedVars implements CompilerPass {\n--- a/src/com/google/javascript/jscomp/RenameProperties.java\n+++ b/src/com/google/javascript/jscomp/RenameProperties.java\n  *   var x = {'myprop': 0}, y = x.myprop;     // incorrect\n  * </pre>\n  *\n- *\n- *\n+*\n+*\n  */\n class RenameProperties implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/RenamePrototypes.java\n+++ b/src/com/google/javascript/jscomp/RenamePrototypes.java\n  * When a property name is used both in a prototype definition and as an object\n  * literal key, we rename it only if it satisifies both renaming policies.\n  *\n- *\n- *\n+*\n+*\n  */\n class RenamePrototypes implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/RenameVars.java\n+++ b/src/com/google/javascript/jscomp/RenameVars.java\n  * RenameVars renames all the variables names into short names, to reduce\n  * code size and also to obfuscate the code.\n  *\n- *\n- *\n+*\n+*\n  */\n final class RenameVars implements CompilerPass {\n   private final AbstractCompiler compiler;\n--- a/src/com/google/javascript/jscomp/ReplaceCssNames.java\n+++ b/src/com/google/javascript/jscomp/ReplaceCssNames.java\n  *\n  * In addition, the CSS names before replacement can optionally be gathered.\n  *\n- *\n+*\n  */\n class ReplaceCssNames implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/ReplaceIdGenerators.java\n+++ b/src/com/google/javascript/jscomp/ReplaceIdGenerators.java\n  *\n  * Use this to get unique and short ids.\n  *\n- *\n+*\n  */\n class ReplaceIdGenerators implements CompilerPass {\n   static final DiagnosticType NON_GLOBAL_ID_GENERATOR_CALL =\n--- a/src/com/google/javascript/jscomp/ReplaceMessages.java\n+++ b/src/com/google/javascript/jscomp/ReplaceMessages.java\n  * ReplaceMessages replaces user-visible messages with alternatives.\n  * It uses Google specific JsMessageVisitor implementation.\n  *\n- *\n- *\n+*\n+*\n  * @author anatol@google.com (Anatol Pomazau)\n  */\n class ReplaceMessages extends JsMessageVisitor {\n--- a/src/com/google/javascript/jscomp/ReplaceStrings.java\n+++ b/src/com/google/javascript/jscomp/ReplaceStrings.java\n  * leaking details about the source code.\n  *\n  * Based in concept on the work by Jared Jacobs.\n- *\n+*\n  */\n public class ReplaceStrings extends AbstractPostOrderCallback\n     implements CompilerPass {\n--- a/src/com/google/javascript/jscomp/ReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/ReverseAbstractInterpreter.java\n  * and calculating a preciser view of the world than the view without knowing\n  * the outcome of the computation.</p>\n  *\n- *\n+*\n  */\n interface ReverseAbstractInterpreter {\n   /**\n--- a/src/com/google/javascript/jscomp/RuntimeTypeCheck.java\n+++ b/src/com/google/javascript/jscomp/RuntimeTypeCheck.java\n  * <p>The JavaScript code which implements the type assertions is in\n  * js/runtime-type-check.js.\n  *\n- *\n- *\n+*\n+*\n  */\n class RuntimeTypeCheck implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/SanityCheck.java\n+++ b/src/com/google/javascript/jscomp/SanityCheck.java\n  * to a number of invariants. Because this can add a lot of overhead,\n  * we only run this in development mode.\n  *\n- *\n+*\n  * @author nicksantos@google.com (Nick Santos)\n  */\n class SanityCheck implements CompilerPass {\n--- a/src/com/google/javascript/jscomp/Scope.java\n+++ b/src/com/google/javascript/jscomp/Scope.java\n  * @see NodeTraversal\n  * @see DataFlowAnalysis\n  *\n- *\n- *\n+*\n+*\n  */\n public class Scope implements StaticScope<JSType> {\n   private final Map<String, Var> vars = new LinkedHashMap<String, Var>();\n--- a/src/com/google/javascript/jscomp/ScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/ScopeCreator.java\n  * This interface defines how objects capable of creating scopes from the parse\n  * tree behave.\n  *\n- *\n+*\n  */\n interface ScopeCreator {\n   /**\n--- a/src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java\n  * language as a means to reverse interpret computations. This interpreter\n  * expects the parse tree inputs to be typed.\n  *\n- *\n+*\n  */\n class SemanticReverseAbstractInterpreter\n     extends ChainableReverseAbstractInterpreter {\n--- a/src/com/google/javascript/jscomp/SimpleDefinitionFinder.java\n+++ b/src/com/google/javascript/jscomp/SimpleDefinitionFinder.java\n  * hand side is an immutable value or function expression.  All\n  * complex definitions are treated as unknowns.\n  *\n- *\n+*\n  */\n class SimpleDefinitionFinder implements CompilerPass, DefinitionProvider {\n   private final AbstractCompiler compiler;\n--- a/src/com/google/javascript/jscomp/SimpleRegion.java\n+++ b/src/com/google/javascript/jscomp/SimpleRegion.java\n \n /**\n  * Simple region.\n- *\n+*\n  */\n public class SimpleRegion implements Region {\n   private final int beginningLineNumber;\n--- a/src/com/google/javascript/jscomp/SourceAst.java\n+++ b/src/com/google/javascript/jscomp/SourceAst.java\n /**\n  * An interface for accessing the AST root of an input.\n  *\n- *\n+*\n  */\n public interface SourceAst extends Serializable {\n   /**\n--- a/src/com/google/javascript/jscomp/SourceExcerptProvider.java\n+++ b/src/com/google/javascript/jscomp/SourceExcerptProvider.java\n  * of specific locations, such as a specific line or a region around a\n  * given line number.\n  *\n- *\n+*\n  */\n public interface SourceExcerptProvider {\n   /**\n--- a/src/com/google/javascript/jscomp/SourceInformationAnnotator.java\n+++ b/src/com/google/javascript/jscomp/SourceInformationAnnotator.java\n  * - Annotates all OBJECT_LITERAL unquoted string key nodes with an\n  *   ORIGINALNAME_PROP.\n  *\n- *\n+*\n  */\n class SourceInformationAnnotator extends\n   NodeTraversal.AbstractPostOrderCallback {\n--- a/src/com/google/javascript/jscomp/SourceMap.java\n+++ b/src/com/google/javascript/jscomp/SourceMap.java\n  * @see CodeGenerator\n  * @see CodePrinter\n  *\n- *\n+*\n  * @author johnlenz@google.com (John Lenz)\n  */\n public class SourceMap {\n--- a/src/com/google/javascript/jscomp/StrictModeCheck.java\n+++ b/src/com/google/javascript/jscomp/StrictModeCheck.java\n  * <li> No use of \"eval\" (optional check for Caja).\n  * </ol>\n  *\n- *\n+*\n  */\n class StrictModeCheck extends AbstractPostOrderCallback\n     implements CompilerPass {\n--- a/src/com/google/javascript/jscomp/StripCode.java\n+++ b/src/com/google/javascript/jscomp/StripCode.java\n  *     2) qualified names that begin with strip types.\n  *   - Remove all statements containing calls to static methods of strip types.\n  *\n- *\n- *\n+*\n+*\n  */\n class StripCode implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java\n+++ b/src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java\n  * <p>This check should produce no false positives, but it will certainly miss\n  * a lot of real problems.\n  *\n- *\n+*\n  */\n class SuspiciousPropertiesCheck implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/SyntacticScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/SyntacticScopeCreator.java\n  *\n  * <p>This implementation is not thread-safe.</p>\n  *\n- *\n+*\n  */\n class SyntacticScopeCreator implements ScopeCreator {\n   private final AbstractCompiler compiler;\n--- a/src/com/google/javascript/jscomp/TightenTypes.java\n+++ b/src/com/google/javascript/jscomp/TightenTypes.java\n  * of the target slots.  Once we complete a pass through all scopes with no\n  * changes, we are done.\n  *\n- *\n- *\n+*\n+*\n  */\n class TightenTypes implements CompilerPass, ConcreteType.Factory {\n   public static final String NON_HALTING_ERROR_MSG =\n--- a/src/com/google/javascript/jscomp/Tracer.java\n+++ b/src/com/google/javascript/jscomp/Tracer.java\n  * Tracer#initCurrentThreadTrace()}, then a Third Eye WARNING message is logged,\n  * which should help track down the problem.\n  *\n- *\n+*\n  */\n final class Tracer {\n   // package-private for access from unit tests\n    * The class {@link com.google.monitoring.tracing.TracingStatistics} contains several\n    * useful tracing statistics\n    *\n-   *\n+*\n    */\n   static interface TracingStatistic {\n     /**\n    * This class encapsulates a map for keeping track of tracing statistics.\n    * It allows the caller to atomically increment named fields.\n    *\n-   *\n+*\n    */\n   static final class AtomicTracerStatMap {\n     private ConcurrentMap<String, Long> map = new ConcurrentHashMap<String, Long>();\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n  * <p>Checks the types of JS expressions against any declared type\n  * information.</p>\n  *\n- *\n- *\n+*\n+*\n  * @author nicksantos@google.com (Nick Santos)\n  */\n public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n  * Type inference within a script node or a function body, using the data-flow\n  * analysis framework.\n  *\n- *\n+*\n  */\n class TypeInference\n     extends DataFlowAnalysis.BranchedForwardDataFlowAnalysis<Node, FlowScope> {\n--- a/src/com/google/javascript/jscomp/TypeInferencePass.java\n+++ b/src/com/google/javascript/jscomp/TypeInferencePass.java\n /**\n  * A compiler pass to run the type inference analysis.\n  *\n- *\n+*\n  */\n class TypeInferencePass implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/TypedCodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/TypedCodeGenerator.java\n /**\n  * A code generator that outputs type annotations for functions and\n  * constructors.\n- *\n+*\n  */\n class TypedCodeGenerator extends CodeGenerator {\n   TypedCodeGenerator(CodeConsumer consumer, Charset outputCharset) {\n--- a/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\n+++ b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\n  *    prototype properties can be annotated using JSDoc without actually\n  *    being initialized.\n  *\n- *\n+*\n  */\n class UnreachableCodeElimination extends AbstractPostOrderCallback\n     implements CompilerPass, ScopedCallback  {\n--- a/src/com/google/javascript/jscomp/UseSite.java\n+++ b/src/com/google/javascript/jscomp/UseSite.java\n  * Includes the refering node, and context in which the reference\n  * occurs - including the module in which the reference appears.\n  *\n- *\n+*\n  */\n \n class UseSite {\n--- a/src/com/google/javascript/jscomp/VarCheck.java\n+++ b/src/com/google/javascript/jscomp/VarCheck.java\n  * accessed only in the file that declares them, and that any var references\n  * that cross module boundaries respect declared module dependencies.\n  *\n- *\n- *\n+*\n+*\n  */\n class VarCheck extends AbstractPostOrderCallback implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/VariableNameGenerator.java\n+++ b/src/com/google/javascript/jscomp/VariableNameGenerator.java\n  * Generates new variables names that would not collide with existing names in\n  * a scope.\n  *\n- *\n+*\n  *\n  */\n class VariableNameGenerator {\n--- a/src/com/google/javascript/jscomp/VariableShadowDeclarationCheck.java\n+++ b/src/com/google/javascript/jscomp/VariableShadowDeclarationCheck.java\n  * <p>Browser global variables such as {@code self} shouldn't be shadowed\n  * because it is highly error prone to do so.\n  *\n- *\n+*\n  */\n class VariableShadowDeclarationCheck implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/VerboseMessageFormatter.java\n+++ b/src/com/google/javascript/jscomp/VerboseMessageFormatter.java\n  * Verbose message formatter. This formatter generates very loud and long\n  * messages with multiline source excerpts.\n  *\n- *\n+*\n  */\n class VerboseMessageFormatter extends AbstractMessageFormatter {\n   VerboseMessageFormatter(SourceExcerptProvider source) {\n--- a/src/com/google/javascript/jscomp/WarningLevel.java\n+++ b/src/com/google/javascript/jscomp/WarningLevel.java\n /**\n  * Convert the warnings level to an Options object.\n  *\n- *\n+*\n  */\n public enum WarningLevel {\n   QUIET,\n--- a/src/com/google/javascript/jscomp/ant/AntErrorManager.java\n+++ b/src/com/google/javascript/jscomp/ant/AntErrorManager.java\n /**\n  * An error manager that pipes warnings and errors properly into the Ant\n  * task infrastructure.\n- *\n+*\n  */\n public final class AntErrorManager\n     extends BasicErrorManager {\n--- a/src/com/google/javascript/jscomp/ant/CompileTask.java\n+++ b/src/com/google/javascript/jscomp/ant/CompileTask.java\n  * Most of the public methods of this class are entry points for the\n  * Ant code to hook into.\n  *\n- *\n+*\n  */\n public final class CompileTask\n     extends Task {\n--- a/src/com/google/javascript/jscomp/graph/AdjacencyGraph.java\n+++ b/src/com/google/javascript/jscomp/graph/AdjacencyGraph.java\n  *\n  * <p>For a more extensive interface, see {@link Graph}.\n  *\n- *\n+*\n  *\n  * @param <N> Value type that the graph node stores.\n  * @param <E> Value type that the graph edge stores.\n--- a/src/com/google/javascript/jscomp/graph/Annotatable.java\n+++ b/src/com/google/javascript/jscomp/graph/Annotatable.java\n \n /**\n  * Object that has an annotation.\n- *\n+*\n  */\n public interface Annotatable {\n   /**\n--- a/src/com/google/javascript/jscomp/graph/Annotation.java\n+++ b/src/com/google/javascript/jscomp/graph/Annotation.java\n /**\n  * Information that can be annotated to a {@link GraphNode} or\n  * {@link Graph.GraphEdge}.\n- *\n+*\n  */\n public interface Annotation {\n }\n--- a/src/com/google/javascript/jscomp/graph/DiGraph.java\n+++ b/src/com/google/javascript/jscomp/graph/DiGraph.java\n /**\n  * A generic directed graph.\n  *\n- *\n+*\n  *\n  * @param <N> Value type that the graph node stores.\n  * @param <E> Value type that the graph edge stores.\n--- a/src/com/google/javascript/jscomp/graph/Graph.java\n+++ b/src/com/google/javascript/jscomp/graph/Graph.java\n  * <p>\n  * TODO(user): All functionality for removing nodes and edges.\n  *\n- *\n+*\n  *\n  * @param <N> Value type that the graph node stores.\n  * @param <E> Value type that the graph edge stores.\n--- a/src/com/google/javascript/jscomp/graph/GraphColoring.java\n+++ b/src/com/google/javascript/jscomp/graph/GraphColoring.java\n  * @param <N> Value type that the graph node stores.\n  * @param <E> Value type that the graph edge stores.\n  *\n- *\n+*\n  */\n public abstract class GraphColoring<N, E> {\n   // Maps a color (represented by an integer) to a variable. If, for example,\n--- a/src/com/google/javascript/jscomp/graph/GraphNode.java\n+++ b/src/com/google/javascript/jscomp/graph/GraphNode.java\n  *\n  * @param <N> Value type that the graph node stores.\n  * @param <E> Value type that the graph edge stores.\n- *\n+*\n  */\n public interface GraphNode<N, E> extends Annotatable {\n   /**\n--- a/src/com/google/javascript/jscomp/graph/GraphReachability.java\n+++ b/src/com/google/javascript/jscomp/graph/GraphReachability.java\n  * from the specified entry node.\n  *\n  * @see GraphNode#getAnnotation()\n- *\n+*\n  */\n public class GraphReachability<N, E> implements EdgeCallback<N, E> {\n \n--- a/src/com/google/javascript/jscomp/graph/GraphvizGraph.java\n+++ b/src/com/google/javascript/jscomp/graph/GraphvizGraph.java\n  * The <code>DotFormatter.toDot</code> function can be used to get a\n  * visualization of the object for debugging purpose.\n  *\n- *\n+*\n  */\n public interface GraphvizGraph {\n \n--- a/src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java\n+++ b/src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java\n  * DirectedGraph</code>.\n  * Operations from <code>Graph</code> would tends to be slower.\n  *\n- *\n+*\n  *\n  * @param <N> Value type that the graph node stores.\n  * @param <E> Value type that the graph edge stores.\n--- a/src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java\n+++ b/src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java\n  * An undirected graph using linked list within nodes to store edge\n  * information.\n  *\n- *\n+*\n  *\n  * @param <N> Value type that the graph node stores.\n  * @param <E> Value type that the graph edge stores.\n--- a/src/com/google/javascript/jscomp/graph/StandardUnionFind.java\n+++ b/src/com/google/javascript/jscomp/graph/StandardUnionFind.java\n  * algorithmist</a> for more detail.\n  *\n  * @param <E> element type\n- *\n- *\n- *\n- *\n+*\n+*\n+*\n+*\n  */\n public class StandardUnionFind<E> implements Serializable, UnionFind<E> {\n \n--- a/src/com/google/javascript/jscomp/graph/SubGraph.java\n+++ b/src/com/google/javascript/jscomp/graph/SubGraph.java\n  *\n  * @param <N> Value type that the graph node stores.\n  * @param <E> Value type that the graph edge stores.\n- *\n+*\n  */\n public interface SubGraph<N, E> {\n   /** Returns true if the node is a neighbor of any node in this SubGraph. */\n--- a/src/com/google/javascript/jscomp/graph/UnionFind.java\n+++ b/src/com/google/javascript/jscomp/graph/UnionFind.java\n  * algorithmist</a> for more detail.\n  *\n  * @param <E> element type\n- *\n+*\n  */\n public interface UnionFind<E> {\n \n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n /**\n  * IRFactory transforms the new AST to the old AST.\n  *\n- *\n+*\n  */\n public class IRFactory {\n \n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n /**\n  * A parser for JSDoc comments.\n  *\n- *\n+*\n  * @author nicksantos@google.com (Nick Santos)\n  */\n // TODO(nicksantos): Unify all the JSDocInfo stuff into one package, instead of\n--- a/src/com/google/javascript/jscomp/parsing/JsDocToken.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocToken.java\n  *\n  * This class is based on Rhino's Token.\n  *\n- *\n+*\n  */\n enum JsDocToken {\n   // Tokens recycled from Rhino\n--- a/src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java\n  *\n  * It is heavily based on Rhino's TokenStream.\n  *\n- *\n+*\n  */\n class JsDocTokenStream {\n   /*\n--- a/src/com/google/javascript/jscomp/parsing/NullErrorReporter.java\n+++ b/src/com/google/javascript/jscomp/parsing/NullErrorReporter.java\n /**\n  * An error reporter which consumes all calls and performs no actions.\n  *\n- *\n+*\n  */\n public abstract class NullErrorReporter  {\n   private NullErrorReporter() {\n--- a/src/com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java\n+++ b/src/com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java\n  * classes - which would make switching based on types and casting\n  * unnecessary.\n  *\n- *\n+*\n  */\n abstract class TypeSafeDispatcher<T> {\n   abstract T processArrayLiteral(ArrayLiteral literalNode);\n--- a/src/com/google/javascript/jscomp/testing/TestErrorReporter.java\n+++ b/src/com/google/javascript/jscomp/testing/TestErrorReporter.java\n  * assertTrue(e.hasEncounteredAllWarnings());\n  * </pre>\n  *\n- *\n+*\n  */\n public final class TestErrorReporter extends Assert implements ErrorReporter {\n   private final String[] errors;\n--- a/src/com/google/javascript/rhino/Context.java\n+++ b/src/com/google/javascript/rhino/Context.java\n  * object creation, may be accessed directly through methods of\n  * Context.\n  *\n- *\n- *\n+*\n+*\n  */\n public class Context\n {\n--- a/src/com/google/javascript/rhino/ErrorReporter.java\n+++ b/src/com/google/javascript/rhino/ErrorReporter.java\n  * This is interface defines a protocol for the reporting of\n  * errors during JavaScript translation or execution.\n  *\n- *\n+*\n  */\n \n public interface ErrorReporter {\n--- a/src/com/google/javascript/rhino/IRFactory.java\n+++ b/src/com/google/javascript/rhino/IRFactory.java\n  * This class allows the creation of nodes, and follows the Factory pattern.\n  *\n  * @see Node\n- *\n- *\n+*\n+*\n  */\n final class IRFactory\n {\n--- a/src/com/google/javascript/rhino/JSDocInfo.java\n+++ b/src/com/google/javascript/rhino/JSDocInfo.java\n  * <p>Constructing {@link JSDocInfo} objects is simplified by\n  * {@link JSDocInfoBuilder} which provides early incompatibility detection.</p>\n  *\n- *\n+*\n  */\n public final class JSDocInfo implements Serializable {\n   private static final long serialVersionUID = 1L;\n--- a/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n+++ b/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n  * incompatibility detection among properties stored on the {@code JSDocInfo}\n  * object being created.\n  *\n- *\n+*\n  */\n final public class JSDocInfoBuilder {\n   // the current JSDoc which is being populated\n--- a/src/com/google/javascript/rhino/JavaScriptException.java\n+++ b/src/com/google/javascript/rhino/JavaScriptException.java\n  * Java reflection of JavaScript exceptions.\n  * Instances of this class are thrown by the JavaScript 'throw' keyword.\n  *\n- *\n+*\n  */\n class JavaScriptException extends RhinoException\n {\n--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n /**\n  * This class implements the root of the intermediate representation.\n  *\n- *\n- *\n+*\n+*\n  */\n \n public class Node implements Cloneable, Serializable {\n--- a/src/com/google/javascript/rhino/ObjToIntMap.java\n+++ b/src/com/google/javascript/rhino/ObjToIntMap.java\n  * it from a single thread or do own synchronization or perform all mutation\n  * operations on one thread before passing the map to others\n  *\n- *\n+*\n  *\n  */\n \n--- a/src/com/google/javascript/rhino/Parser.java\n+++ b/src/com/google/javascript/rhino/Parser.java\n  *\n  * @see TokenStream\n  *\n- *\n- *\n+*\n+*\n  */\n \n public class Parser\n--- a/src/com/google/javascript/rhino/ScriptRuntime.java\n+++ b/src/com/google/javascript/rhino/ScriptRuntime.java\n /**\n  * This is the class that implements the runtime.\n  *\n- *\n+*\n  */\n \n public class ScriptRuntime {\n--- a/src/com/google/javascript/rhino/SimpleErrorReporter.java\n+++ b/src/com/google/javascript/rhino/SimpleErrorReporter.java\n  * A simple {@link ErrorReporter} that collects warnings and errors and makes\n  * them accessible via {@link #errors()} and {@link #warnings()}.\n  *\n- *\n+*\n  */\n public class SimpleErrorReporter implements ErrorReporter {\n     private List<String> warnings = null;\n--- a/src/com/google/javascript/rhino/SourcePosition.java\n+++ b/src/com/google/javascript/rhino/SourcePosition.java\n  * Represents a position in some piece of source code, with an associated\n  * item of type T found at that position.\n  *\n- *\n+*\n  */\n public abstract class SourcePosition<T> {\n   /**\n--- a/src/com/google/javascript/rhino/Token.java\n+++ b/src/com/google/javascript/rhino/Token.java\n  *\n  * @see com.google.javascript.rhino.Parser\n  *\n- *\n- *\n+*\n+*\n  */\n \n public class Token\n--- a/src/com/google/javascript/rhino/TokenStream.java\n+++ b/src/com/google/javascript/rhino/TokenStream.java\n  *\n  * @see Parser\n  *\n- *\n- *\n+*\n+*\n  */\n \n public class TokenStream\n--- a/src/com/google/javascript/rhino/UintMap.java\n+++ b/src/com/google/javascript/rhino/UintMap.java\n  * it from a single thread or do own synchronization or perform all mutation\n  * operations on one thread before passing the map to others.\n  *\n- *\n+*\n  *\n  */\n \n--- a/src/com/google/javascript/rhino/jstype/AllType.java\n+++ b/src/com/google/javascript/rhino/jstype/AllType.java\n \n /**\n  * All type, representing all values.\n- *\n- *\n+*\n+*\n  */\n public final class AllType extends JSType {\n   private static final long serialVersionUID = 1L;\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n  * seen in typical functional programming languages.  It is used soley for\n  * separating the management of the arrow type from the complex\n  * {@link FunctionType} that models JavaScript's notion of functions.\n- *\n- *\n+*\n+*\n  */\n final class ArrowType extends JSType {\n   private static final long serialVersionUID = 1L;\n--- a/src/com/google/javascript/rhino/jstype/BooleanLiteralSet.java\n+++ b/src/com/google/javascript/rhino/jstype/BooleanLiteralSet.java\n  * A set in the domain {true,false}.\n  * There are four possible sets: {}, {true}, {false}, {true,false}.\n  *\n- *\n+*\n  */\n public enum BooleanLiteralSet {\n   EMPTY,\n--- a/src/com/google/javascript/rhino/jstype/BooleanType.java\n+++ b/src/com/google/javascript/rhino/jstype/BooleanType.java\n \n /**\n  * Boolean type.\n- *\n+*\n  */\n public class BooleanType extends ValueType {\n   private static final long serialVersionUID = 1L;\n--- a/src/com/google/javascript/rhino/jstype/EnumElementType.java\n+++ b/src/com/google/javascript/rhino/jstype/EnumElementType.java\n /**\n  * The type of individual elements of an enum type\n  * (see {@link EnumType}).\n- *\n- *\n+*\n+*\n  */\n public class EnumElementType extends ObjectType {\n   private static final long serialVersionUID = 1L;\n--- a/src/com/google/javascript/rhino/jstype/EnumType.java\n+++ b/src/com/google/javascript/rhino/jstype/EnumType.java\n /**\n  * An enum type representing a branded collection of elements. Each element\n  * is referenced by its name, and has an {@link EnumElementType} type.\n- *\n- *\n+*\n+*\n  */\n public class EnumType extends PrototypeObjectType {\n   private static final long serialVersionUID = 1L;\n--- a/src/com/google/javascript/rhino/jstype/ErrorFunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/ErrorFunctionType.java\n \n /**\n  * This type is for built-in error constructors.\n- *\n- *\n+*\n+*\n  */\n class ErrorFunctionType extends FunctionType {\n   private static final long serialVersionUID = 1L;\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n  * Note: the parameters list is the LP node that is the parent of the\n  * actual NAME node containing the parsed argument list (annotated with\n  * JSDOC_TYPE_PROP's for the compile-time type of each argument.\n- *\n- *\n+*\n+*\n  */\n public class FunctionType extends PrototypeObjectType {\n   private static final long serialVersionUID = 1L;\n--- a/src/com/google/javascript/rhino/jstype/IndexedType.java\n+++ b/src/com/google/javascript/rhino/jstype/IndexedType.java\n  * For example, <code>Object.<number, string></code> can take only numbers as\n  * keys.\n  *\n- *\n+*\n  */\n final class IndexedType extends ProxyObjectType {\n   private static final long serialVersionUID = 1L;\n--- a/src/com/google/javascript/rhino/jstype/InstanceObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/InstanceObjectType.java\n \n /**\n  * An object type that is an instance of some function constructor.\n- *\n- *\n+*\n+*\n  */\n public final class InstanceObjectType extends PrototypeObjectType {\n   private static final long serialVersionUID = 1L;\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n  * order of types. All types are united at the top of the lattice by the\n  * {@link AllType} and at the bottom by the {@link NoType}.<p>\n  *\n- *\n- *\n+*\n+*\n  */\n public abstract class JSType implements Serializable {\n   private static final long serialVersionUID = 1L;\n--- a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n+++ b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n  *\n  * <p>This class is not thread-safe.\n  *\n- *\n+*\n  */\n public class JSTypeRegistry implements Serializable {\n   private static final long serialVersionUID = 1L;\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n  * in a more consistent way, but with the Rhino merge coming, there will be\n  * much that has to be changed.<p>\n  *\n- *\n- *\n+*\n+*\n  */\n class NamedType extends ProxyObjectType {\n   private static final long serialVersionUID = 1L;\n--- a/src/com/google/javascript/rhino/jstype/NoObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/NoObjectType.java\n  * call. It has no possible type, but {@code x} would not be legal if f\n  * expected a string. So we assign it the {@code NoObjectType}.\n  *\n- *\n- *\n+*\n+*\n  * @see <a href=\"http://en.wikipedia.org/wiki/Bottom_type\">Bottom types</a>\n  */\n public class NoObjectType extends FunctionType {\n--- a/src/com/google/javascript/rhino/jstype/NoType.java\n+++ b/src/com/google/javascript/rhino/jstype/NoType.java\n  * so that {@code f(x)} is legal no matter what the type of {@code f}'s\n  * first argument is.\n  *\n- *\n+*\n  * @see <a href=\"http://en.wikipedia.org/wiki/Bottom_type\">Bottom types</a>\n  */\n public final class NoType extends NoObjectType {\n--- a/src/com/google/javascript/rhino/jstype/NullType.java\n+++ b/src/com/google/javascript/rhino/jstype/NullType.java\n \n /**\n  * Null type.\n- *\n+*\n  */\n public final class NullType extends ValueType {\n   private static final long serialVersionUID = 1L;\n--- a/src/com/google/javascript/rhino/jstype/NumberType.java\n+++ b/src/com/google/javascript/rhino/jstype/NumberType.java\n \n /**\n  * Number type.\n- *\n+*\n  */\n public class NumberType extends ValueType {\n   private static final long serialVersionUID = 1L;\n--- a/src/com/google/javascript/rhino/jstype/ObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/ObjectType.java\n  * type has all properties, but we do not know whether they are\n  * declared or inferred.\n  *\n- *\n+*\n  */\n public abstract class ObjectType extends JSType {\n   private boolean visited;\n--- a/src/com/google/javascript/rhino/jstype/ParameterizedType.java\n+++ b/src/com/google/javascript/rhino/jstype/ParameterizedType.java\n  * // TODO(user): Define the subtyping relation for parameterized types. Also,\n  * take parameterized type into account for equality.\n  *\n- *\n+*\n  */\n final class ParameterizedType extends ProxyObjectType {\n   private static final long serialVersionUID = 1L;\n--- a/src/com/google/javascript/rhino/jstype/ProxyObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/ProxyObjectType.java\n  * @see NamedType\n  * @see ParameterizedType\n  *\n- *\n+*\n  */\n class ProxyObjectType extends ObjectType {\n   private static final long serialVersionUID = 1L;\n--- a/src/com/google/javascript/rhino/jstype/RecordType.java\n+++ b/src/com/google/javascript/rhino/jstype/RecordType.java\n  * constraints of the record type. A record type of the form { a : A, b : B }\n  * can be assigned to a record of type { a : A }.\n  *\n- *\n+*\n  */\n public class RecordType extends PrototypeObjectType {\n   private static final long serialVersionUID = 1L;\n--- a/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\n+++ b/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java\n /**\n  * A builder for record types.\n  *\n- *\n+*\n  */\n public class RecordTypeBuilder {\n   private boolean isEmpty = true;\n--- a/src/com/google/javascript/rhino/jstype/StaticScope.java\n+++ b/src/com/google/javascript/rhino/jstype/StaticScope.java\n  * from the {@code Scriptable} class that Rhino normally uses to represent a\n  * runtime scope.\n  *\n- *\n- *\n+*\n+*\n  * @param <T> The type of information stored about the slot\n  */\n public interface StaticScope<T> {\n--- a/src/com/google/javascript/rhino/jstype/StaticSlot.java\n+++ b/src/com/google/javascript/rhino/jstype/StaticSlot.java\n  * The {@code StaticSlot} interface must be implemented by variables that can\n  * appear as members of a {@code StaticScope}.\n  *\n- *\n- *\n+*\n+*\n  * @param <T> The type of information stored about the slot\n  */\n public interface StaticSlot<T> {\n--- a/src/com/google/javascript/rhino/jstype/StringType.java\n+++ b/src/com/google/javascript/rhino/jstype/StringType.java\n \n /**\n  * String type.\n- *\n+*\n  */\n public final class StringType extends ValueType {\n   private static final long serialVersionUID = 1L;\n--- a/src/com/google/javascript/rhino/jstype/TemplateType.java\n+++ b/src/com/google/javascript/rhino/jstype/TemplateType.java\n  * will set the type of this on a function literal argument to the actual type\n  * of T.\n  *\n- *\n+*\n  */\n package com.google.javascript.rhino.jstype;\n \n--- a/src/com/google/javascript/rhino/jstype/TernaryValue.java\n+++ b/src/com/google/javascript/rhino/jstype/TernaryValue.java\n  * present in an expression.</p>\n  *\n  * @see <a href=\"http://en.wikipedia.org/wiki/Ternary_logic\">Ternary Logic</a>\n- *\n+*\n  */\n public enum TernaryValue {\n   /**\n--- a/src/com/google/javascript/rhino/jstype/UnknownType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnknownType.java\n \n /**\n  * The {@code Unknown} type.\n- *\n- *\n+*\n+*\n  */\n public class UnknownType extends ObjectType {\n   private static final long serialVersionUID = 1L;\n--- a/src/com/google/javascript/rhino/jstype/Visitor.java\n+++ b/src/com/google/javascript/rhino/jstype/Visitor.java\n  * &nbsp;&nbsp;&hellip;\n  * });</pre>\n  *\n- *\n+*\n  */\n public interface Visitor<T> {\n   /**\n--- a/src/com/google/javascript/rhino/jstype/VoidType.java\n+++ b/src/com/google/javascript/rhino/jstype/VoidType.java\n \n /**\n  * Void type whose only element is the {@code undefined} value.\n- *\n+*\n  */\n public class VoidType extends ValueType {\n   private static final long serialVersionUID = 1L;\n--- a/src/com/google/javascript/rhino/testing/TestErrorReporter.java\n+++ b/src/com/google/javascript/rhino/testing/TestErrorReporter.java\n  * assertTrue(e.hasEncounteredAllWarnings());\n  * </pre>\n  *\n- *\n+*\n  */\n public final class TestErrorReporter extends Assert implements ErrorReporter {\n   private String[] errors;\n--- a/test/com/google/javascript/jscomp/AliasExternalsTest.java\n+++ b/test/com/google/javascript/jscomp/AliasExternalsTest.java\n /**\n  * Tests for {@link AliasExternals}.\n  *\n- *\n+*\n  */\n public class AliasExternalsTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/AliasKeywordsTest.java\n+++ b/test/com/google/javascript/jscomp/AliasKeywordsTest.java\n /**\n  * Tests for {@link AliasKeywords}.\n  *\n- *\n+*\n  */\n public class AliasKeywordsTest extends CompilerTestCase {\n   private static final int ENOUGH_TO_ALIAS_LITERAL\n--- a/test/com/google/javascript/jscomp/AliasStringsTest.java\n+++ b/test/com/google/javascript/jscomp/AliasStringsTest.java\n /**\n  * Tests for {@link AliasStrings}.\n  *\n- *\n+*\n  */\n public class AliasStringsTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java\n+++ b/test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java\n /**\n  * Unit test for AmbiguateProperties Compiler pass.\n  *\n- *\n+*\n  */\n public class AmbiguatePropertiesTest extends CompilerTestCase {\n   private AmbiguateProperties lastPass;\n--- a/test/com/google/javascript/jscomp/AstParallelizerTest.java\n+++ b/test/com/google/javascript/jscomp/AstParallelizerTest.java\n /**\n  * Unit tests for {@link AstParallelizer}.\n  *\n- *\n+*\n  */\n public class AstParallelizerTest extends TestCase {\n \n--- a/test/com/google/javascript/jscomp/BasicErrorManagerTest.java\n+++ b/test/com/google/javascript/jscomp/BasicErrorManagerTest.java\n /**\n  * Tests {@link BasicErrorManager}.\n  *\n- *\n+*\n  */\n public class BasicErrorManagerTest extends TestCase {\n   private static final String NULL_SOURCE = null;\n--- a/test/com/google/javascript/jscomp/ChainCallsTest.java\n+++ b/test/com/google/javascript/jscomp/ChainCallsTest.java\n /**\n  * Tests for {@link ChainCalls}\n  *\n- *\n+*\n  */\n public class ChainCallsTest extends CompilerTestCase {\n   @Override\n--- a/test/com/google/javascript/jscomp/CheckMissingGetCssNameTest.java\n+++ b/test/com/google/javascript/jscomp/CheckMissingGetCssNameTest.java\n package com.google.javascript.jscomp;\n \n /**\n- *\n+*\n  */\n public class CheckMissingGetCssNameTest extends CompilerTestCase {\n   @Override\n--- a/test/com/google/javascript/jscomp/CheckMissingReturnTest.java\n+++ b/test/com/google/javascript/jscomp/CheckMissingReturnTest.java\n /**\n  * Tests for {@link CheckMissingReturn}.\n  *\n- *\n+*\n  */\n public class CheckMissingReturnTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java\n+++ b/test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java\n /**\n  * Tests for {@link CheckPathsBetweenNodes}.\n  *\n- *\n- *\n+*\n+*\n  */\n public class CheckPathsBetweenNodesTest extends TestCase {\n \n--- a/test/com/google/javascript/jscomp/CheckProvidesTest.java\n+++ b/test/com/google/javascript/jscomp/CheckProvidesTest.java\n /**\n  * Tests for {@link CheckProvides}.\n  *\n- *\n+*\n  */\n public class CheckProvidesTest extends CompilerTestCase {\n   @Override\n--- a/test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java\n+++ b/test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java\n /**\n  * Tests for {@link CheckRequiresForConstructors}.\n  *\n- *\n+*\n  */\n public class CheckRequiresForConstructorsTest extends CompilerTestCase {\n   @Override\n--- a/test/com/google/javascript/jscomp/CheckUnreachableCodeTest.java\n+++ b/test/com/google/javascript/jscomp/CheckUnreachableCodeTest.java\n /**\n  * Tests for {@link CheckUnreachableCode}.\n  *\n- *\n+*\n  */\n public class CheckUnreachableCodeTest extends CompilerTestCase {\n   @Override\n--- a/test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java\n+++ b/test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java\n /**\n  * Unit tests for {@link CoalesceVariableNames}\n  *\n- *\n+*\n  */\n public class CoalesceVariableNamesTest extends CompilerTestCase {\n   // The spacing in this file is not exactly standard but it greatly helps\n--- a/test/com/google/javascript/jscomp/CollapseAnonymousFunctionsTest.java\n+++ b/test/com/google/javascript/jscomp/CollapseAnonymousFunctionsTest.java\n /**\n  * Tests for {@link CollapseAnonymousFunctions}\n  *\n- *\n+*\n  */\n public class CollapseAnonymousFunctionsTest extends CompilerTestCase {\n   public CollapseAnonymousFunctionsTest() {\n--- a/test/com/google/javascript/jscomp/CollapsePropertiesTest.java\n+++ b/test/com/google/javascript/jscomp/CollapsePropertiesTest.java\n /**\n  * Tests for {@link CollapseProperties}.\n  *\n- *\n- *\n+*\n+*\n  */\n public class CollapsePropertiesTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/CollapseVariableDeclarationsTest.java\n+++ b/test/com/google/javascript/jscomp/CollapseVariableDeclarationsTest.java\n /**\n  * Tests for variable declaration collapsing.\n  *\n- *\n+*\n  */\n public class CollapseVariableDeclarationsTest extends CompilerTestCase {\n   public void testCollapsing() throws Exception {\n--- a/test/com/google/javascript/jscomp/CombinedCompilerPassTest.java\n+++ b/test/com/google/javascript/jscomp/CombinedCompilerPassTest.java\n import java.util.Set;\n \n /**\n- *\n+*\n  */\n public class CombinedCompilerPassTest extends TestCase  {\n \n--- a/test/com/google/javascript/jscomp/CompilerTestCase.java\n+++ b/test/com/google/javascript/jscomp/CompilerTestCase.java\n  * which makes it easier to write tests b/c you don't have to get the syntax\n  * exactly correct to the spacing.</p>\n  *\n- *\n+*\n  */\n public abstract class CompilerTestCase extends TestCase  {\n \n--- a/test/com/google/javascript/jscomp/ConcreteTypeTest.java\n+++ b/test/com/google/javascript/jscomp/ConcreteTypeTest.java\n /**\n  * Unit test for the the subclasses of ConcreteType.\n  *\n- *\n+*\n  */\n public class ConcreteTypeTest extends TestCase {\n   private JSTypeRegistry typeRegistry;\n--- a/test/com/google/javascript/jscomp/ConstCheckTest.java\n+++ b/test/com/google/javascript/jscomp/ConstCheckTest.java\n /**\n  * Tests {@link ConstCheck}.\n  *\n- *\n+*\n  */\n public class ConstCheckTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java\n+++ b/test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java\n /**\n  * Tests {@link ControlFlowAnalysis}.\n  *\n- *\n+*\n  */\n public class ControlFlowAnalysisTest extends TestCase {\n \n--- a/test/com/google/javascript/jscomp/ControlStructureCheckTest.java\n+++ b/test/com/google/javascript/jscomp/ControlStructureCheckTest.java\n /**\n  * Test for the control structure verification.\n  *\n- *\n+*\n  */\n public class ControlStructureCheckTest extends CompilerTestCase {\n   // Rhino parse error message text\n--- a/test/com/google/javascript/jscomp/ConvertToDottedPropertiesTest.java\n+++ b/test/com/google/javascript/jscomp/ConvertToDottedPropertiesTest.java\n /**\n  * Tests for {@link ConvertToDottedProperties}.\n  *\n- *\n+*\n  */\n public class ConvertToDottedPropertiesTest extends CompilerTestCase {\n   @Override public CompilerPass getProcessor(Compiler compiler) {\n--- a/test/com/google/javascript/jscomp/CreateSyntheticBlocksTest.java\n+++ b/test/com/google/javascript/jscomp/CreateSyntheticBlocksTest.java\n /**\n  * Tests for {@link CreateSyntheticBlocks}\n  *\n- *\n+*\n  */\n public class CreateSyntheticBlocksTest extends CompilerTestCase {\n   private static final String START_MARKER = \"startMarker\";\n--- a/test/com/google/javascript/jscomp/CrossModuleCodeMotionTest.java\n+++ b/test/com/google/javascript/jscomp/CrossModuleCodeMotionTest.java\n /**\n  * Tests for {@link CrossModuleCodeMotion}.\n  *\n- *\n+*\n  */\n public class CrossModuleCodeMotionTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/DataFlowAnalysisTest.java\n+++ b/test/com/google/javascript/jscomp/DataFlowAnalysisTest.java\n  * Test cases must construct a small program with these instructions and\n  * manually put each instruction in a {@code ControlFlowGraph}.\n  *\n- *\n+*\n  */\n public class DataFlowAnalysisTest extends TestCase {\n \n--- a/test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java\n+++ b/test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java\n /**\n  * Tests for {@link DeadAssignmentsElimination}.\n  *\n- *\n+*\n  */\n public class DeadAssignmentsEliminationTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/DefinitionsRemoverTest.java\n+++ b/test/com/google/javascript/jscomp/DefinitionsRemoverTest.java\n  * cases. More complicated cases will be tested by the clients of\n  * {@link DefinitionsRemover}.\n  *\n- *\n+*\n  */\n public class DefinitionsRemoverTest extends CompilerTestCase {\n   public void testRemoveFunction() {\n--- a/test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java\n+++ b/test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java\n /**\n  * Tests for {@link DevirtualizePrototypeMethods}\n  *\n- *\n+*\n  */\n public class DevirtualizePrototypeMethodsTest extends CompilerTestCase {\n   private static final String EXTERNAL_SYMBOLS =\n--- a/test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java\n+++ b/test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java\n /**\n  * Unit test for the Compiler DisambiguateProprties pass.\n  *\n- *\n+*\n  */\n public class DisambiguatePropertiesTest extends CompilerTestCase {\n   private DisambiguateProperties<?> lastPass;\n--- a/test/com/google/javascript/jscomp/ExportTestFunctionsTest.java\n+++ b/test/com/google/javascript/jscomp/ExportTestFunctionsTest.java\n /**\n  * Tests for ExportTestFunctions.\n  *\n- *\n+*\n  */\n public class ExportTestFunctionsTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/ExternExportsPassTest.java\n+++ b/test/com/google/javascript/jscomp/ExternExportsPassTest.java\n /**\n  * Tests for {@link ExternExportsPass}.\n  *\n- *\n+*\n  */\n public class ExternExportsPassTest extends TestCase {\n \n--- a/test/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarationsTest.java\n+++ b/test/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarationsTest.java\n /**\n  * Tests for {@link ExtractPrototypeMemberDeclarations}.\n  *\n- *\n+*\n  */\n public class ExtractPrototypeMemberDeclarationsTest extends CompilerTestCase {\n   private static final String TMP = \"JSCompiler_prototypeAlias\";\n--- a/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java\n+++ b/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java\n /**\n  * Unit tests for {@link FlowSensitiveInlineVariables}.\n  *\n- *\n+*\n  */\n public class FlowSensitiveInlineVariablesTest extends CompilerTestCase  {\n \n--- a/test/com/google/javascript/jscomp/FunctionNamesTest.java\n+++ b/test/com/google/javascript/jscomp/FunctionNamesTest.java\n /**\n  * Tests for {@link FunctionNames}\n  *\n- *\n+*\n  */\n public class FunctionNamesTest extends CompilerTestCase {\n   private FunctionNames functionNames;\n--- a/test/com/google/javascript/jscomp/FunctionRewriterTest.java\n+++ b/test/com/google/javascript/jscomp/FunctionRewriterTest.java\n /**\n  * Tests for {@link FunctionRewriter}\n  *\n- *\n+*\n  */\n public class FunctionRewriterTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/FunctionTypeBuilderTest.java\n+++ b/test/com/google/javascript/jscomp/FunctionTypeBuilderTest.java\n /**\n  * Unit tests for {@link FunctionTypeBuilder}.\n  *\n- *\n+*\n  */\n public class FunctionTypeBuilderTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallbackTest.java\n+++ b/test/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallbackTest.java\n /**\n  * Tests for {@link GatherSideEffectSubexpressionsCallback}\n  *\n- *\n+*\n  */\n public class GatherSideEffectSubexpressionsCallbackTest extends TestCase {\n   public void testAndOr() throws Exception {\n--- a/test/com/google/javascript/jscomp/GenerateExportsTest.java\n+++ b/test/com/google/javascript/jscomp/GenerateExportsTest.java\n /**\n  * Generate exports unit test.\n  *\n- *\n+*\n  */\n public class GenerateExportsTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java\n+++ b/test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java\n /**\n  * {@link IgnoreCajaProperties} tests.\n  *\n- *\n+*\n  */\n public class IgnoreCajaPropertiesTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/InstrumentFunctionsTest.java\n+++ b/test/com/google/javascript/jscomp/InstrumentFunctionsTest.java\n /**\n  * Tests for {@link InstrumentFunctions}\n  *\n- *\n+*\n  */\n public class InstrumentFunctionsTest extends CompilerTestCase {\n   private String instrumentationPb;\n--- a/test/com/google/javascript/jscomp/JSCompilerSourceExcerptProviderTest.java\n+++ b/test/com/google/javascript/jscomp/JSCompilerSourceExcerptProviderTest.java\n import junit.framework.TestCase;\n \n /**\n- *\n+*\n  */\n public class JSCompilerSourceExcerptProviderTest extends TestCase {\n   private SourceExcerptProvider provider;\n--- a/test/com/google/javascript/jscomp/JSModuleGraphTest.java\n+++ b/test/com/google/javascript/jscomp/JSModuleGraphTest.java\n /**\n  * Tests for {@link JSModuleGraph}\n  *\n- *\n+*\n  */\n public class JSModuleGraphTest extends TestCase {\n \n--- a/test/com/google/javascript/jscomp/JSModuleTest.java\n+++ b/test/com/google/javascript/jscomp/JSModuleTest.java\n /**\n  * Tests for {@link JSModule}\n  *\n- *\n+*\n  */\n public class JSModuleTest extends TestCase {\n   private JSModule mod1;\n--- a/test/com/google/javascript/jscomp/JsMessageExtractorTest.java\n+++ b/test/com/google/javascript/jscomp/JsMessageExtractorTest.java\n /**\n  * Unit test for {@link JsMessageExtractor}.\n  *\n- *\n+*\n  */\n public class JsMessageExtractorTest extends TestCase {\n \n--- a/test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java\n+++ b/test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java\n  * Tests for {@link LiveVariablesAnalysis}. Test cases are snippets of a\n  * function and assertions are made at the instruction labeled with {@code X}.\n  *\n- *\n+*\n  */\n public class LiveVariableAnalysisTest extends TestCase {\n \n--- a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n  * \"looseTypes\" option.  These tests should be be folded into TypeCheckTest\n  * or removed along with the looseTypes option.\n  *\n- *\n- *\n+*\n+*\n  * @author johnlenz@google.com (John Lenz)\n  */\n public class LooseTypeCheckTest extends CompilerTypeTestCase {\n--- a/test/com/google/javascript/jscomp/MarkNoSideEffectCallsTest.java\n+++ b/test/com/google/javascript/jscomp/MarkNoSideEffectCallsTest.java\n /**\n  * Tests for {@link MarkNoSideEffectCalls}\n  *\n- *\n+*\n  */\n public class MarkNoSideEffectCallsTest extends CompilerTestCase {\n   List<String> noSideEffectCalls = Lists.newArrayList();\n--- a/test/com/google/javascript/jscomp/MaybeReachingVariableUseTest.java\n+++ b/test/com/google/javascript/jscomp/MaybeReachingVariableUseTest.java\n /**\n  * Tests for {@link MaybeReachingVariableUse}.\n  *\n- *\n+*\n  */\n public class MaybeReachingVariableUseTest extends TestCase {\n \n--- a/test/com/google/javascript/jscomp/MoveFunctionDeclarationsTest.java\n+++ b/test/com/google/javascript/jscomp/MoveFunctionDeclarationsTest.java\n /**\n  * Tests for {@link MoveFunctionDeclarations}\n  *\n- *\n+*\n  */\n public class MoveFunctionDeclarationsTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/MustBeReachingVariableDefTest.java\n+++ b/test/com/google/javascript/jscomp/MustBeReachingVariableDefTest.java\n /**\n  * Tests for {@link MustBeReachingVariableDef}.\n  *\n- *\n+*\n  */\n public class MustBeReachingVariableDefTest extends TestCase {\n \n--- a/test/com/google/javascript/jscomp/NameAnalyzerTest.java\n+++ b/test/com/google/javascript/jscomp/NameAnalyzerTest.java\n /**\n  * Tests for {@link NameAnalyzer}\n  *\n- *\n- *\n+*\n+*\n  */\n public class NameAnalyzerTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java\n+++ b/test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java\n /**\n  * Test cases for {@link NameAnonymousFunctionsMapped}.\n  *\n- *\n+*\n  */\n public class NameAnonymousFunctionsMappedTest extends CompilerTestCase {\n   private static final String EXTERNS = \"var document;\";\n--- a/test/com/google/javascript/jscomp/NameAnonymousFunctionsTest.java\n+++ b/test/com/google/javascript/jscomp/NameAnonymousFunctionsTest.java\n /**\n  * Unit test for {@link NameAnonymousFunctionsTest}.\n  *\n- *\n+*\n  */\n public class NameAnonymousFunctionsTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/ObjectPropertyStringPostprocessTest.java\n+++ b/test/com/google/javascript/jscomp/ObjectPropertyStringPostprocessTest.java\n /**\n  * Tests for {@link ObjectPropertyStringPostprocess}.\n  *\n- *\n+*\n  */\n public class ObjectPropertyStringPostprocessTest extends CompilerTestCase {\n   @Override\n--- a/test/com/google/javascript/jscomp/ObjectPropertyStringPreprocessTest.java\n+++ b/test/com/google/javascript/jscomp/ObjectPropertyStringPreprocessTest.java\n /**\n  * Tests for {@link ObjectPropertyStringPreprocess}\n  *\n- *\n+*\n  */\n public class ObjectPropertyStringPreprocessTest extends CompilerTestCase {\n   @Override\n--- a/test/com/google/javascript/jscomp/OptimizeArgumentsArrayTest.java\n+++ b/test/com/google/javascript/jscomp/OptimizeArgumentsArrayTest.java\n /**\n  * Unit tests for {@link OptimizeArgumentsArray}.\n  *\n- *\n+*\n  */\n public class OptimizeArgumentsArrayTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/OptimizeParametersTest.java\n+++ b/test/com/google/javascript/jscomp/OptimizeParametersTest.java\n /**\n  * Tests for {@link OptimizeParameters}\n  *\n- *\n+*\n  */\n public class OptimizeParametersTest extends CompilerTestCase {\n   @Override\n--- a/test/com/google/javascript/jscomp/ParallelCompilerPassTest.java\n+++ b/test/com/google/javascript/jscomp/ParallelCompilerPassTest.java\n  * class is here for a quick sanity test purpose. At the very least, it verifies\n  * that all the worker terminates and no dead lock exists in the test cases.\n  *\n- *\n+*\n  */\n public class ParallelCompilerPassTest extends TestCase {\n \n--- a/test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeOptimizationsPassTest.java\n /**\n  * Unit tests for PeepholeOptimizationsPass.\n  *\n- *\n+*\n  */\n public class PeepholeOptimizationsPassTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java\n+++ b/test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java\n /**\n  * Tests for {@link ProcessClosurePrimitives}.\n  *\n- *\n- *\n+*\n+*\n  */\n public class ProcessClosurePrimitivesTest extends CompilerTestCase {\n   private String additionalCode;\n--- a/test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java\n+++ b/test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java\n /**\n  * Tests for {@link PureFunctionIdentifier}\n  *\n- *\n+*\n  */\n public class PureFunctionIdentifierTest extends CompilerTestCase {\n   List<String> noSideEffectCalls = Lists.newArrayList();\n--- a/test/com/google/javascript/jscomp/RecordFunctionInformationTest.java\n+++ b/test/com/google/javascript/jscomp/RecordFunctionInformationTest.java\n /**\n  * Tests for {@link RecordFunctionInformation}\n  *\n- *\n+*\n  */\n public class RecordFunctionInformationTest extends TestCase {\n   private void test(String js, FunctionInformationMap expected) {\n--- a/test/com/google/javascript/jscomp/RemoveConstantExpressionsParallelTest.java\n+++ b/test/com/google/javascript/jscomp/RemoveConstantExpressionsParallelTest.java\n  * the correctness of {@link RemoveConstantExpressions} since that's the job\n  * of {@link RemoveConstantExpressionsTest}.\n  *\n- *\n+*\n  */\n public class RemoveConstantExpressionsParallelTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/RemoveConstantExpressionsTest.java\n+++ b/test/com/google/javascript/jscomp/RemoveConstantExpressionsTest.java\n /**\n  * Tests for {@link RemoveConstantExpressions}\n  *\n- *\n+*\n  */\n public class RemoveConstantExpressionsTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/RenamePropertiesTest.java\n+++ b/test/com/google/javascript/jscomp/RenamePropertiesTest.java\n /**\n  * {@link RenameProperties} tests.\n  *\n- *\n+*\n  */\n public class RenamePropertiesTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/ReplaceCssNamesTest.java\n+++ b/test/com/google/javascript/jscomp/ReplaceCssNamesTest.java\n /**\n  * Tests for ReplaceCssNames.java.\n  *\n- *\n+*\n  */\n public class ReplaceCssNamesTest extends CompilerTestCase {\n   /** Whether to pass the map of replacements as opposed to null */\n--- a/test/com/google/javascript/jscomp/ReplaceIdGeneratorsTest.java\n+++ b/test/com/google/javascript/jscomp/ReplaceIdGeneratorsTest.java\n /**\n  * Tests for {@link ReplaceIdGenerators}.\n  *\n- *\n+*\n  */\n public class ReplaceIdGeneratorsTest extends CompilerTestCase {\n   @Override\n--- a/test/com/google/javascript/jscomp/ReplaceStringsTest.java\n+++ b/test/com/google/javascript/jscomp/ReplaceStringsTest.java\n /**\n  * Tests for {@link ReplaceStrings}.\n  *\n- *\n+*\n  */\n public class ReplaceStringsTest extends CompilerTestCase {\n   private ReplaceStrings pass;\n--- a/test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java\n /**\n  * Tests for {@link RuntimeTypeCheck}.\n  *\n- *\n- *\n+*\n+*\n  */\n public class RuntimeTypeCheckTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java\n+++ b/test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java\n /**\n  * Tests for {@link SimpleDefinitionFinder}\n  *\n- *\n+*\n  */\n public class SimpleDefinitionFinderTest extends CompilerTestCase {\n   Set<String> found = Sets.newTreeSet();\n--- a/test/com/google/javascript/jscomp/SourceMapTest.java\n+++ b/test/com/google/javascript/jscomp/SourceMapTest.java\n /**\n  * Tests for {@link SourceMap}.\n  *\n- *\n+*\n  */\n public class SourceMapTest extends TestCase {\n   private static final JSSourceFile[] EXTERNS = {\n--- a/test/com/google/javascript/jscomp/StripCodeTest.java\n+++ b/test/com/google/javascript/jscomp/StripCodeTest.java\n /**\n  * Tests for {@link StripCode}.\n  *\n- *\n- *\n+*\n+*\n  */\n public class StripCodeTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/SuspiciousPropertiesCheckTest.java\n+++ b/test/com/google/javascript/jscomp/SuspiciousPropertiesCheckTest.java\n  * bad property writes and reads are reported, and that no spurious errors or\n  * warnings are generated.\n  *\n- *\n+*\n  */\n public class SuspiciousPropertiesCheckTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/SyntacticScopeCreatorTest.java\n+++ b/test/com/google/javascript/jscomp/SyntacticScopeCreatorTest.java\n /**\n  * Tests for {@link SyntacticScopeCreator}.\n  *\n- *\n+*\n  */\n public class SyntacticScopeCreatorTest extends TestCase {\n \n--- a/test/com/google/javascript/jscomp/TightenTypesTest.java\n+++ b/test/com/google/javascript/jscomp/TightenTypesTest.java\n /**\n  * Unit test for the TightenTypes pass.\n  *\n- *\n- *\n+*\n+*\n  */\n public class TightenTypesTest extends CompilerTestCase {\n   private TightenTypes tt;\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n /**\n  * Tests {@link TypeCheck}.\n  *\n- *\n- *\n+*\n+*\n  */\n public class TypeCheckTest extends CompilerTypeTestCase {\n \n--- a/test/com/google/javascript/jscomp/TypeInferenceTest.java\n+++ b/test/com/google/javascript/jscomp/TypeInferenceTest.java\n /**\n  * Tests {@link TypeInference}.\n  *\n- *\n+*\n  */\n public class TypeInferenceTest extends TestCase {\n \n--- a/test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java\n+++ b/test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java\n /**\n  * Test for {@link UnreachableCodeElimination}.\n  *\n- *\n+*\n  */\n public class UnreachableCodeEliminationTest extends CompilerTestCase {\n   private boolean removeNoOpStatements = true;\n--- a/test/com/google/javascript/jscomp/VariableMapTest.java\n+++ b/test/com/google/javascript/jscomp/VariableMapTest.java\n /**\n  * Tests for {@link VariableMap}.\n  *\n- *\n+*\n  */\n public class VariableMapTest extends TestCase {\n \n--- a/test/com/google/javascript/jscomp/VariableReferenceCheckTest.java\n+++ b/test/com/google/javascript/jscomp/VariableReferenceCheckTest.java\n  * Test that warnings are generated in appropriate cases and appropriate\n  * cases only by VariableReferenceCheck\n  *\n- *\n+*\n  */\n public class VariableReferenceCheckTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/VariableShadowDeclarationCheckTest.java\n+++ b/test/com/google/javascript/jscomp/VariableShadowDeclarationCheckTest.java\n /**\n  * Tests for {@link VariableShadowDeclarationCheck}\n  *\n- *\n+*\n  */\n public class VariableShadowDeclarationCheckTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/graph/GraphColoringTest.java\n+++ b/test/com/google/javascript/jscomp/graph/GraphColoringTest.java\n /**\n  * Tests for {@link GraphColoring}.\n  *\n- *\n+*\n  */\n public class GraphColoringTest extends TestCase {\n \n--- a/test/com/google/javascript/jscomp/graph/GraphReachabilityTest.java\n+++ b/test/com/google/javascript/jscomp/graph/GraphReachabilityTest.java\n /**\n  * Tests for {@link GraphReachability}.\n  *\n- *\n+*\n  */\n public class GraphReachabilityTest extends TestCase {\n   GraphReachability<String, String> reachability = null;\n--- a/test/com/google/javascript/jscomp/graph/GraphTest.java\n+++ b/test/com/google/javascript/jscomp/graph/GraphTest.java\n /**\n  * Tests for the graph data structure.\n  *\n- *\n+*\n  */\n public class GraphTest extends TestCase {\n \n--- a/test/com/google/javascript/jscomp/graph/StandardUnionFindTest.java\n+++ b/test/com/google/javascript/jscomp/graph/StandardUnionFindTest.java\n /**\n  * Unit test for the {@link StandardUnionFind} data structure.\n  *\n- *\n+*\n  */\n public class StandardUnionFindTest extends TestCase {\n   private StandardUnionFind<String> union;\n--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n   public void testParseLicenseWithAnnotation() throws Exception {\n     Node node = new Node(1);\n     this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();\n-    String comment = \"@license Foo \\n *\n+    String comment = \"@license Foo \\n * @author Charlie Brown */\";\n     parse(comment);\n     assertEquals(\" Foo \\n @author Charlie Brown \",\n         node.getJSDocInfo().getLicense());\n     JSDocInfo jsdoc\n         = parse(\"@param {Number} number42 This is a description.\"\n                 + \"\\n* @param {Integer} number87 This is another description.\"\n-                + \"\\n*\n-                + \"\\n*\n-                + \"\\n*\n+                + \"\\n* @author a@google.com (A Person)\"\n+                + \"\\n* @author b@google.com (B Person)\"\n+                + \"\\n* @author c@google.com (C Person)*/\"\n                 , true);\n \n     Collection<String> authors = jsdoc.getAuthors();\n   }\n \n   public void testAuthorMissing() throws Exception {\n-    parse(\"*\n+    parse(\"* @author */\", true,\n           \"@author tag missing author\");\n   }\n \n   public void testParseBlockComment() throws Exception {\n     JSDocInfo jsdoc = parse(\"this is a nice comment\\n \"\n                             + \"* that is multiline \\n\"\n-                            + \"*\n+                            + \"* @author abc@google.com */\", true);\n \n     assertEquals(\"this is a nice comment\\nthat is multiline\",\n                  jsdoc.getBlockDescription());\n   public void testParseBlockComment2() throws Exception {\n     JSDocInfo jsdoc = parse(\"this is a nice comment\\n \"\n                             + \"* that is *** multiline \\n\"\n-                            + \"*\n+                            + \"* @author abc@google.com */\", true);\n \n     assertEquals(\"this is a nice comment\\nthat is *** multiline\",\n                  jsdoc.getBlockDescription());\n   public void testParseBlockComment3() throws Exception {\n     JSDocInfo jsdoc = parse(\"\\n \"\n                             + \"* hello world \\n\"\n-                            + \"*\n+                            + \"* @author abc@google.com */\", true);\n \n     assertEquals(\"hello world\", jsdoc.getBlockDescription());\n \n--- a/test/com/google/javascript/jscomp/parsing/ParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/ParserTest.java\n   public void testIncorrectJSDocDoesNotAlterJSParsing8() throws Exception {\n     assertNodeEquality(\n         parse(\"C.prototype.say=function(nums) {alert(nums.join(','));};\"),\n-        parse(\"/**\n+        parse(\"/** @author */\" +\n             \"C.prototype.say=function(nums) {alert(nums.join(','));};\",\n               \"@author tag missing author\"));\n   }\n--- a/test/com/google/javascript/rhino/jstype/BooleanLiteralSetTest.java\n+++ b/test/com/google/javascript/rhino/jstype/BooleanLiteralSetTest.java\n /**\n  * Tests {@link BooleanLiteralSet}.\n  *\n- *\n+*\n  */\n public class BooleanLiteralSetTest extends TestCase {\n \n--- a/test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java\n+++ b/test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java\n /**\n  * Tests {@link JSTypeRegistry}.\n  *\n- *\n+*\n  */\n public class JSTypeRegistryTest extends TestCase {\n   // TODO(user): extend this class with more tests, as JSTypeRegistry is\n--- a/test/com/google/javascript/rhino/jstype/TernaryValueTest.java\n+++ b/test/com/google/javascript/rhino/jstype/TernaryValueTest.java\n  * and {@link TernaryValue#xor(TernaryValue)} as well as the\n  * {@link TernaryValue#toBoolean(boolean)} method.\n  *\n- *\n+*\n  */\n public class TernaryValueTest extends TestCase {\n   public void testOrdinal() throws Exception {", "timestamp": 1281460624, "metainfo": ""}