{"sha": "db3417d3ee0cc7e2665cd8f0954ac741425ac527", "log": "Add support for an annotation like \"@idGenerator {mapped}\" and work toward consolating the other idGenerator annotations. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=44468179", "commit": "\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n   private final Set<String> suppressionNames;\n   private static final Set<String> modifiesAnnotationKeywords =\n       ImmutableSet.<String>of(\"this\", \"arguments\");\n+  private static final Set<String> idGeneratorAnnotationKeywords =\n+      ImmutableSet.<String>of(\"unique\", \"consistent\", \"stable\", \"mapped\");\n \n   private Node.FileLevelJsDocBuilder fileLevelJsDocBuilder;\n \n         }\n \n         case IDGENERATOR:\n-          if (!jsdocBuilder.recordIdGenerator()) {\n-            parser.addParserWarning(\"msg.jsdoc.idgen\",\n-              stream.getLineno(), stream.getCharno());\n-          }\n-          return eatTokensUntilEOL();\n+          token = parseIdGeneratorTag(next());\n+          return token;\n \n         case WIZACTION:\n           if (!jsdocBuilder.recordWizaction()) {\n         }\n       }\n     }\n+    return token;\n+  }\n+\n+  /**\n+   * Parse a {@code @idgenerator} tag of the form\n+   * {@code @idgenerator} or\n+   * {@code @idgenerator&#123;consistent&#125;}.\n+   *\n+   * @param token The current token.\n+   */\n+  private JsDocToken parseIdGeneratorTag(JsDocToken token) {\n+    String idgenKind = \"unique\";\n+    if (token == JsDocToken.LC) {\n+      if (match(JsDocToken.STRING)) {\n+        String name = stream.getString();\n+        if (!idGeneratorAnnotationKeywords.contains(name)\n+            && !jsdocBuilder.hasParameter(name)) {\n+            parser.addParserWarning(\"msg.jsdoc.idgen.unknown\", name,\n+                stream.getLineno(), stream.getCharno());\n+        }\n+\n+        idgenKind = name;\n+        token = next();\n+      } else {\n+        parser.addParserWarning(\"msg.jsdoc.idgen.bad\",\n+            stream.getLineno(), stream.getCharno());\n+        return token;\n+      }\n+\n+      if (!match(JsDocToken.RC)) {\n+        parser.addParserWarning(\"msg.jsdoc.idgen.bad\",\n+            stream.getLineno(), stream.getCharno());\n+      } else {\n+        token = next();\n+      }\n+    }\n+\n+    if (idgenKind.equals(\"unique\")) {\n+      if (!jsdocBuilder.recordIdGenerator()) {\n+        parser.addParserWarning(\"msg.jsdoc.idgen.duplicate\",\n+            stream.getLineno(), stream.getCharno());\n+      }\n+    } else if (idgenKind.equals(\"consistent\")) {\n+      if (!jsdocBuilder.recordConsistentIdGenerator()) {\n+        parser.addParserWarning(\"msg.jsdoc.idgen.duplicate\",\n+            stream.getLineno(), stream.getCharno());\n+      }\n+    } else if (idgenKind.equals(\"stable\")) {\n+      if (!jsdocBuilder.recordStableIdGenerator()) {\n+        parser.addParserWarning(\"msg.jsdoc.idgen.duplicate\",\n+            stream.getLineno(), stream.getCharno());\n+      }\n+    } else if (idgenKind.equals(\"mapped\")) {\n+      if (!jsdocBuilder.recordMappedIdGenerator()) {\n+        parser.addParserWarning(\"msg.jsdoc.idgen.duplicate\",\n+            stream.getLineno(), stream.getCharno());\n+      }\n+    }\n+\n     return token;\n   }\n \n--- a/src/com/google/javascript/rhino/JSDocInfo.java\n+++ b/src/com/google/javascript/rhino/JSDocInfo.java\n   private static final int MASK_STRUCT        = 0x00200000; // @struct\n   private static final int MASK_DICT          = 0x00400000; // @dict\n   private static final int MASK_STALBEIDGEN   = 0x00800000; // @stableIdGenerator\n+  private static final int MASK_MAPPEDIDGEN   = 0x00800000; // @idGenerator {mapped}\n \n   // 3 bit type field stored in the top 3 bits of the most significant\n   // nibble.\n     setFlag(value, MASK_STALBEIDGEN);\n   }\n \n+  void setMappedIdGenerator(boolean value) {\n+    setFlag(value, MASK_MAPPEDIDGEN);\n+  }\n+\n   void setConstant(boolean value) {\n     setFlag(value, MASK_CONSTANT);\n   }\n    */\n   public boolean isStableIdGenerator() {\n     return getFlag(MASK_STALBEIDGEN);\n+  }\n+\n+  /**\n+   * @return whether the {@code @stableIdGenerator} is present on this {@link JSDocInfo}.\n+   */\n+  public boolean isMappedIdGenerator() {\n+    return getFlag(MASK_MAPPEDIDGEN);\n   }\n \n   /**\n--- a/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n+++ b/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n   }\n \n   /**\n+   * Records that the {@link JSDocInfo} being built should have its {@link\n+   * JSDocInfo#isStableIdGenerator()} flag set to {@code true}.\n+   *\n+   * @return {@code true} if the stableIdGenerator flag was recorded and {@code false} if it was\n+   *     already recorded.\n+   */\n+  public boolean recordMappedIdGenerator() {\n+    if (!currentInfo.isMappedIdGenerator()) {\n+      currentInfo.setMappedIdGenerator(true);\n+      populated = true;\n+      return true;\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  /**\n    * Records the version.\n    */\n   public boolean recordVersion(String version) {\n--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n           \" */\\n\" +\n           \"function getId() {}\",\n           \"extra @stableIdGenerator tag\");\n+  }\n+\n+  public void testIdGenerator() throws Exception {\n+    JSDocInfo info = parse(\"/**\\n\" +\n+          \" * @idGenerator\\n\" +\n+          \" */\\n\" +\n+          \"function getId() {}\");\n+    assertTrue(info.isIdGenerator());\n+  }\n+\n+  public void testIdGeneratorConflict() throws Exception {\n+    parse(\"/**\\n\" +\n+          \" * @idGenerator\\n\" +\n+          \" * @idGenerator\\n\" +\n+          \" */\\n\" +\n+          \"function getId() {}\",\n+          \"extra @idGenerator tag\");\n+  }\n+\n+  public void testIdGenerator1() throws Exception {\n+    JSDocInfo info = parse(\"@idGenerator {unique} */\");\n+    assertTrue(info.isIdGenerator());\n+  }\n+\n+  public void testIdGenerator2() throws Exception {\n+    JSDocInfo info = parse(\"@idGenerator {consistent} */\");\n+    assertTrue(info.isConsistentIdGenerator());\n+  }\n+\n+  public void testIdGenerator3() throws Exception {\n+    JSDocInfo info = parse(\"@idGenerator {stable} */\");\n+    assertTrue(info.isStableIdGenerator());\n+  }\n+\n+  public void testIdGenerator4() throws Exception {\n+    JSDocInfo info = parse(\"@idGenerator {mapped} */\");\n+    assertTrue(info.isMappedIdGenerator());\n+  }\n+\n+  public void testBadIdGenerator1() throws Exception {\n+    parse(\"@idGenerator {} */\", \"malformed @idGenerator tag\");\n+  }\n+\n+  public void testBadIdGenerator2() throws Exception {\n+    parse(\"@idGenerator {impossible} */\",\n+        \"unknown @idGenerator parameter: impossible\");\n+  }\n+\n+  public void testBadIdGenerator3() throws Exception {\n+    parse(\"@idGenerator {unique */\", \"malformed @idGenerator tag\");\n   }\n \n   public void testParserWithTemplateTypeNameMissing() {", "timestamp": 1364340504, "metainfo": ""}