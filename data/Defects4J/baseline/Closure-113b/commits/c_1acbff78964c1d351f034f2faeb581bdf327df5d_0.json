{"sha": "1acbff78964c1d351f034f2faeb581bdf327df5d", "log": "This cl changes JsDocInfoParser and JSDocInfoBuilder in order to add the original comment position to JSDocInfo class. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=43294003", "commit": "\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n     this.jsdocBuilder = new JSDocInfoBuilder(config.parseJsDocDocumentation);\n     if (commentNode != null) {\n       this.jsdocBuilder.recordOriginalCommentString(commentNode.getValue());\n+      this.jsdocBuilder.recordOriginalCommentPosition(commentNode.getPosition());\n     }\n     this.annotationNames = config.annotationNames;\n     this.suppressionNames = config.suppressionNames;\n--- a/src/com/google/javascript/rhino/JSDocInfo.java\n+++ b/src/com/google/javascript/rhino/JSDocInfo.java\n    */\n   private boolean includeDocumentation = false;\n \n+  /**\n+   * Position of the original comment.\n+   */\n+  private int originalCommentPosition;\n+\n   // We use a bit map to represent whether or not the JSDoc contains\n   // one of the \"boolean\" annotation types (annotations like @constructor,\n   // for which the presence of the annotation alone is significant).\n     }\n     documentation.sourceComment = sourceComment;\n   }\n+\n+  public int getOriginalCommentPosition() {\n+    return originalCommentPosition;\n+  }\n+\n+  void setOriginalCommentPosition(int position) {\n+    originalCommentPosition = position;\n+  }\n }\n--- a/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n+++ b/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n     }\n   }\n \n+  /**\n+   * Sets the position of original JSDoc comment.\n+   */\n+  public void recordOriginalCommentPosition(int position) {\n+    if (parseDocumentation) {\n+      currentInfo.setOriginalCommentPosition(position);\n+    }\n+  }\n+\n   public boolean shouldParseDocumentation() {\n     return parseDocumentation;\n   }\n     return currentInfo.isNoSideEffects() ||\n         currentInfo.hasModifies();\n   }\n-\n }\n--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n package com.google.javascript.jscomp.parsing;\n \n import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Lists;\n import com.google.common.collect.Sets;\n+import com.google.javascript.jscomp.SourceFile;\n import com.google.javascript.jscomp.parsing.Config.LanguageMode;\n import com.google.javascript.jscomp.testing.TestErrorReporter;\n import com.google.javascript.rhino.InputId;\n import com.google.javascript.rhino.jstype.TemplateType;\n import com.google.javascript.rhino.testing.BaseJSTypeTestCase;\n \n+import java.io.IOException;\n import java.util.Collection;\n import java.util.List;\n import java.util.Set;\n       \"* @supported */\");\n   }\n \n+  public void testJsDocInfoPosition() throws IOException {\n+    SourceFile sourceFile = SourceFile.fromCode(\"comment-position-test.js\",\n+        \"   \\n\" +\n+        \"  /**\\n\" +\n+        \"   * A comment\\n\" +\n+        \"   */\\n\" +\n+        \"  function double(x) {}\");\n+    List<JSDocInfo> jsdocs = parseFull(sourceFile.getCode());\n+    assertEquals(1, jsdocs.size());\n+    assertEquals(6, jsdocs.get(0).getOriginalCommentPosition());\n+    assertEquals(2, sourceFile.getLineOfOffset(jsdocs.get(0).getOriginalCommentPosition()));\n+    assertEquals(2, sourceFile.getColumnOfOffset(jsdocs.get(0).getOriginalCommentPosition()));\n+  }\n+\n   public void testGetOriginalCommentString() throws Exception {\n     String comment = \"* @desc This is a comment */\";\n     JSDocInfo info = parse(comment);\n     assertTrue(collection.contains(item));\n   }\n \n-  private void parseFull(String code, String... warnings) {\n+  private List<JSDocInfo> parseFull(String code, String... warnings) {\n     CompilerEnvirons environment = new CompilerEnvirons();\n \n     TestErrorReporter testErrorReporter = new TestErrorReporter(null, warnings);\n     Config config =\n         new Config(extraAnnotations, extraSuppressions,\n             true, LanguageMode.ECMASCRIPT3, false);\n+\n+    List<JSDocInfo> jsdocs = Lists.newArrayList();\n     for (Comment comment : script.getComments()) {\n       JsDocInfoParser jsdocParser =\n         new JsDocInfoParser(\n             config,\n             testErrorReporter);\n       jsdocParser.parse();\n-      jsdocParser.retrieveAndResetParsedJSDocInfo();\n+      jsdocs.add(jsdocParser.retrieveAndResetParsedJSDocInfo());\n     }\n \n     assertTrue(\"some expected warnings were not reported\",\n         testErrorReporter.hasEncounteredAllWarnings());\n+    return jsdocs;\n   }\n \n   @SuppressWarnings(\"unused\")", "timestamp": 1362424810, "metainfo": ""}