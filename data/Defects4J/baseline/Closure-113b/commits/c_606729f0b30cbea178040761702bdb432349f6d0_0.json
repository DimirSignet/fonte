{"sha": "606729f0b30cbea178040761702bdb432349f6d0", "log": "Allow creation of static properties on structs.  R=nicksantos,johnlenz   Revision created by MOE tool push_codebase. MOE_MIGRATION=6165   ", "commit": "\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n    *     some constructor.\n    */\n   static boolean isPrototypePropertyDeclaration(Node n) {\n-    if (!isExprAssign(n)) {\n-      return false;\n-    }\n-    return isPrototypeProperty(n.getFirstChild().getFirstChild());\n+    return isExprAssign(n) &&\n+        isPrototypeProperty(n.getFirstChild().getFirstChild());\n   }\n \n   /**\n    */\n   static boolean isPrototypeProperty(Node n) {\n     String lhsString = n.getQualifiedName();\n-    if (lhsString == null) {\n-      return false;\n-    }\n-    int prototypeIdx = lhsString.indexOf(\".prototype.\");\n-    return prototypeIdx != -1;\n+    return lhsString != null && lhsString.contains(\".prototype.\");\n   }\n \n   /**\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n \n import com.google.common.base.Preconditions;\n import com.google.common.collect.ImmutableSet;\n-import com.google.javascript.jscomp.CheckLevel;\n import com.google.javascript.jscomp.Scope.Var;\n import com.google.javascript.jscomp.type.ReverseAbstractInterpreter;\n import com.google.javascript.rhino.JSDocInfo;\n     }\n   }\n \n-  /** Check that we don't create new properties on structs. */\n+  /**\n+   * After a struct object is created, we can't add new properties to it, with\n+   * one exception. We allow creation of \"static\" properties like\n+   * Foo.prototype.bar = baz;\n+   * where Foo.prototype is a struct, if the assignment happens at the top level\n+   * and the constructor Foo is defined in the same file.\n+   */\n   private void checkPropCreation(NodeTraversal t, Node lvalue) {\n     if (lvalue.isGetProp()) {\n       Node obj = lvalue.getFirstChild();\n       Node prop = lvalue.getLastChild();\n       JSType objType = getJSType(obj);\n       String pname = prop.getString();\n-      if (objType.isStruct() && !objType.hasProperty(pname)) {\n-        if (!(obj.isThis() &&\n-              getJSType(t.getScope().getRootNode()).isConstructor())) {\n-          report(t, prop, ILLEGAL_PROPERTY_CREATION);\n-        }\n-      }\n+\n+      if (!objType.isStruct() || objType.hasProperty(pname)) {\n+        return;\n+      }\n+      Scope s = t.getScope();\n+      if (obj.isThis() && getJSType(s.getRootNode()).isConstructor()) {\n+        return;\n+      }\n+      // Prop created outside ctor, check that it's a static prop\n+      Node assgnStm = lvalue.getParent().getParent();\n+      if (objType instanceof ObjectType &&\n+          s.isGlobal() &&\n+          NodeUtil.isPrototypePropertyDeclaration(assgnStm)) {\n+        ObjectType instance =\n+            objType.toObjectType().getOwnerFunction().getInstanceType();\n+        String file = lvalue.getSourceFileName();\n+        Node ctor = instance.getConstructor().getSource();\n+        if (ctor != null && ctor.getSourceFileName().equals(file)) {\n+          return;\n+        }\n+      }\n+      report(t, prop, ILLEGAL_PROPERTY_CREATION);\n     }\n   }\n \n \n       boolean isExtern = false;\n       JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n-      if( functionJSDocInfo != null  &&\n+      if (functionJSDocInfo != null  &&\n           functionJSDocInfo.getAssociatedNode() != null) {\n         isExtern = functionJSDocInfo.getAssociatedNode().isFromExterns();\n       }\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n               \"Square.prototype = /** @struct */ {\\n\" +\n               \"  area: function() { return this.side * this.side; }\\n\" +\n               \"};\\n\" +\n-              \"Square.prototype.id = function(x) { return x; };\\n\",\n-              \"Cannot add a property to a struct instance \" +\n-              \"after it is constructed.\");\n+              \"Square.prototype.id = function(x) { return x; };\");\n   }\n \n   public void testSetprop11() throws Exception {\n               \" * @struct\\n\" +\n               \" */\\n\" +\n               \"function Foo() {}\\n\" +\n+              \"/** @constructor */\\n\" +\n               \"function Bar() {}\\n\" +\n               \"Bar.prototype = new Foo();\\n\" +\n-              \"Bar.prototype.someprop = 123;\\n\",\n-              \"Cannot add a property to a struct instance \" +\n-              \"after it is constructed.\");\n+              \"Bar.prototype.someprop = 123;\");\n+  }\n+\n+  public void testSetprop12() throws Exception {\n+    // Create property on a constructor of structs (which isn't itself a struct)\n+    testTypes(\"/**\\n\" +\n+              \" * @constructor\\n\" +\n+              \" * @struct\\n\" +\n+              \" */\\n\" +\n+              \"function Foo() {}\\n\" +\n+              \"Foo.someprop = 123;\");\n   }\n \n   public void testGetpropDict1() throws Exception {\n               \" * @struct\\n\" +\n               \" */\\n\" +\n               \"function Foo() {}\\n\" +\n+              \"/** @constructor */\\n\" +\n               \"function Bar() {}\\n\" +\n               \"Bar.prototype = new Foo();\\n\" +\n               \"Bar.prototype['someprop'] = 123;\\n\",\n   }\n \n   public void testGenerics1() throws Exception {\n-    String FN_DECL = \"/** \\n\" +\n+    String fnDecl = \"/** \\n\" +\n         \" * @param {T} x \\n\" +\n         \" * @param {function(T):T} y \\n\" +\n         \" * @template T\\n\" +\n         \"function f(x,y) { return y(x); }\\n\";\n \n     testTypes(\n-        FN_DECL +\n+        fnDecl +\n         \"/** @type {string} */\" +\n         \"var out;\" +\n         \"/** @type {string} */\" +\n         \"var result = f('hi', function(x){ out = x; return x; });\");\n \n     testTypes(\n-        FN_DECL +\n+        fnDecl +\n         \"/** @type {string} */\" +\n         \"var out;\" +\n         \"var result = f(0, function(x){ out = x; return x; });\",\n         \"required: string\");\n \n     testTypes(\n-        FN_DECL +\n+        fnDecl +\n         \"var out;\" +\n         \"/** @type {string} */\" +\n         \"var result = f(0, function(x){ out = x; return x; });\",", "timestamp": 1358549107, "metainfo": ""}