{"sha": "3c4504a78a84e4715439cddb4028c25be2ce308f", "log": "Change on 2010/07/13 17:21:32 by dhans          A few optimizations which replace getChildCount with more efficient functions for Node class.          R=johnlenz         DELTA=13  (2 added, 0 deleted, 11 changed)  Change on 2010/07/13 18:08:42 by johnlenz          Add info for newly json.jar to README          R=nicksantos         DELTA=13  (13 added, 0 deleted, 0 changed)  Change on 2010/07/14 08:51:02 by johnlenz          Attempt to add \"@nosideeffects\" to appropriate dom methods.          R=gboyer         DELTA=93  (91 added, 0 deleted, 2 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=48012   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n     @Override\n     public void remove() {\n       Node parent = nameNode.getParent();\n-      if (parent.getType() == Token.FUNCTION || parent.getChildCount() == 1) {\n+      if (parent.getType() == Token.FUNCTION || parent.hasOneChild()) {\n         NodeUtil.removeChild(parent.getParent(), parent);\n       } else {\n         Preconditions.checkState(parent.getType() == Token.VAR);\n--- a/src/com/google/javascript/jscomp/CoalesceVariableNames.java\n+++ b/src/com/google/javascript/jscomp/CoalesceVariableNames.java\n     if (NodeUtil.isForIn(parent)) {\n       var.removeChild(name);\n       parent.replaceChild(var, name);\n-    } else if (var.getChildCount() == 1) {\n+    } else if (var.hasOneChild()) {\n       // The removal is easy when there is only one variable in the VAR node.\n       if (name.hasChildren()) {\n         Node value = name.removeFirstChild();\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n     switch (type) {\n       case Token.TRY: {\n         Preconditions.checkState(first.getNext().getType() == Token.BLOCK &&\n-                first.getNext().getChildCount() <= 1);\n+                !first.getNext().hasMoreThanOneChild());\n         Preconditions.checkState(childCount >= 2 && childCount <= 3);\n \n         add(\"try\");\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n       // Remove the alias definitions.\n       for (Node aliasDefinition : traversal.getAliasDefinitions()) {\n         if (aliasDefinition.getParent().getType() == Token.VAR &&\n-            aliasDefinition.getParent().getChildCount() == 1) {\n+            aliasDefinition.getParent().hasOneChild()) {\n           aliasDefinition.getParent().detachFromParent();\n         } else {\n           aliasDefinition.detachFromParent();\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n    */\n   private void updateTypeOfParametersOnClosure(Node n, FunctionType fnType) {\n     int i = 0;\n+    int childCount = n.getChildCount();\n     for (Node iParameter : fnType.getParameters()) {\n       JSType iParameterType = iParameter.getJSType();\n       if (iParameterType instanceof FunctionType) {\n         FunctionType iParameterFnType = (FunctionType) iParameterType;\n \n-        if (i + 1 >= n.getChildCount()) {\n+        if (i + 1 >= childCount) {\n           // TypeCheck#visitParametersList will warn so we bail.\n           return;\n         }\n     }\n \n     int i = 0;\n+    int childCount = n.getChildCount();\n     // Find the parameter whose type is the template type.\n     for (Node iParameter : fnType.getParameters()) {\n       JSType iParameterType = getJSType(iParameter);\n       iParameterType = iParameterType.restrictByNotNullOrUndefined();\n       if (iParameterType.isTemplateType()) {\n         // Find the actual type of this argument.\n-        if (i + 1 >= n.getChildCount()) {\n+        if (i + 1 >= childCount) {\n           // TypeCheck#visitParameterList will warn so we bail.\n           return;\n         }\n               if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n                 foundTemplateTypeOfThisParameter = true;\n                 // Find the actual type of this argument.\n-                if (j + 1 >= n.getChildCount()) {\n+                if (j + 1 >= childCount) {\n                   // TypeCheck#visitParameterList will warn so we bail.\n                   return;\n                 }\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n           break;\n \n         case Token.VAR:\n-          if (n.getChildCount() > 1) {\n+          if (n.hasMoreThanOneChild()) {\n             if (info != null) {\n               // multiple children\n               compiler.report(JSError.make(sourceName, n, MULTIPLE_VAR_DEF));", "timestamp": 1279129515, "metainfo": ""}