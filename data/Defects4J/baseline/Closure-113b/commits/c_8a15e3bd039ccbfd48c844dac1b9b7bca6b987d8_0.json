{"sha": "8a15e3bd039ccbfd48c844dac1b9b7bca6b987d8", "log": "fix a bug in the jstype parser, to allow Array.<?>  R=dimvar DELTA=9 (7 added, 1 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=6040   ", "commit": "\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n       // {function(number, ?)} - right paren\n       // {function(number, ...[?])} - right bracket\n       // {function(): ?|number} - pipe\n+      // {Array.<?>} - greater than\n       // I'm not a big fan of using look-ahead for this, but it makes\n       // the type language a lot nicer.\n       token = next();\n           token == JsDocToken.RB ||\n           token == JsDocToken.RC ||\n           token == JsDocToken.RP ||\n-          token == JsDocToken.PIPE) {\n+          token == JsDocToken.PIPE ||\n+          token == JsDocToken.GT) {\n         restoreLookAhead(token);\n         return newNode(Token.QMARK);\n       }\n   /**\n    * TypeName := NameExpression | NameExpression TypeApplication\n    * TypeApplication := '.<' TypeExpressionList '>'\n-   * TypeExpressionList := TypeExpression // a white lie\n    */\n   private Node parseTypeName(JsDocToken token) {\n     if (token != JsDocToken.STRING) {\n--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n         parameterize(OBJECT_TYPE, NUMBER_TYPE), info.getType());\n     assertParameterTypeEquals(NUMBER_TYPE, info.getType());\n     assertIndexTypeEquals(STRING_TYPE, info.getType());\n+  }\n+\n+  public void testParseParametrizedType13() throws Exception {\n+    JSDocInfo info = parse(\"@type !Array.<?> */\");\n+    assertTypeEquals(parameterize(ARRAY_TYPE, UNKNOWN_TYPE), info.getType());\n   }\n \n   public void testParseUnionType1() throws Exception {", "timestamp": 1356128337, "metainfo": ""}