{"sha": "f184e98642fbf48856bde04a017456ebcf6617d0", "log": "Extending the eventful object disposal check pass to handle variable argument disposeAll calls. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=47551990", "commit": "\n--- a/src/com/google/javascript/jscomp/CheckEventfulObjectDisposal.java\n+++ b/src/com/google/javascript/jscomp/CheckEventfulObjectDisposal.java\n package com.google.javascript.jscomp;\n \n import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;\n import com.google.javascript.jscomp.NodeTraversal.ScopedCallback;\n import com.google.javascript.jscomp.Scope.Var;\n \n import java.util.HashMap;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import java.util.Stack;\n       }\n     }\n \n-    private Node maybeGetValueNodeFromCall(Node n) {\n+    private List<Node> maybeGetValueNodesFromCall(Node n) {\n       /*\n        * Checks for:\n        *    - Y.registerDisposable(X)\n        *      (Y has to be of type goog.Disposable)\n        *    - X.dispose()\n        *    - goog.dispose(X)\n+       *    - goog.disposeAll(X...)\n        *    - X.removeAll() (X is of type goog.events.EventHandler)\n-       *    - <array>.property(X) or Y.push(X)\n-       */\n+       *    - <array>.add*(X...) or Y.push(X)\n+       */\n+      List<Node> ret = Lists.newArrayList();\n       Node first = n.getFirstChild();\n \n       if (first == null || !first.isQualifiedName()) {\n-        return null;\n+        return ret;\n       }\n       String property = first.getQualifiedName();\n \n         Node base = first.getFirstChild();\n         JSType baseType = base.getJSType();\n \n-        if (baseType == null || !isPossiblySubtype(baseType, googDisposableType)) {\n-          return null;\n-        }\n-\n-        return  n.getLastChild();\n-      }\n+        if (baseType != null && isPossiblySubtype(baseType, googDisposableType)) {\n+          ret.add(n.getLastChild());\n+        }\n+      }\n+\n+      // Handles goog.dispose(X)\n       if (property.equals(\"goog.dispose\")) {\n-        return n.getLastChild();\n+        ret.add(n.getLastChild());\n+      }\n+\n+      // Handles goog.disposeAll(X_1, X_2, ...)\n+      if (property.equals(\"goog.disposeAll\")) {\n+        for (Node t = first.getNext(); t != null; t = t.getNext()) {\n+          ret.add(t);\n+        }\n       }\n \n       /*\n        */\n       Node calledOn = n.getFirstChild().getFirstChild();\n       if (property.endsWith(\".dispose\")) {\n-        return calledOn;\n+        ret.add(calledOn);\n       }\n       if (property.endsWith(\".removeAll\")) {\n         if (calledOn != null) {\n               !calledOnType.isEmptyType() &&\n               !calledOnType.isUnknownType() &&\n               isPossiblySubtype(calledOnType, googEventsEventHandlerType)) {\n-            return calledOn;\n+            ret.add(calledOn);\n           }\n         }\n       }\n       if (possiblyArray != null) {\n         JSType possiblyArrayType = possiblyArray.getJSType();\n         if (possiblyArrayType != null && possiblyArrayType.isArrayType()) {\n-          return  n.getLastChild();\n-        }\n-      }\n+          ret.add(n.getLastChild());\n+        }\n+      }\n+\n       /*\n        * Heuristic: a variable used in call to push/addChild gets stored\n-       * in object with method push/addChild/addChild_/addPane.\n+       * in object with method push/addChild/addChild_/addChildAt/addPane.\n        */\n       if (property.endsWith(\".push\") ||\n           property.contains(\".add\")) {\n-        return  n.getLastChild();\n-      }\n-\n-      return null;\n+        for (Node t = first.getNext(); t != null; t = t.getNext()) {\n+          ret.add(t);\n+        }\n+      }\n+\n+      return ret;\n     }\n \n     /*\n      */\n     private void isCall(NodeTraversal t, Node n) {\n       // Filter the calls to find a \"dispose\" call\n-      Node variableNode = maybeGetValueNodeFromCall(n);\n-      if (variableNode == null) {\n-        return;\n-      }\n-\n-      // Only consider removals on eventful object\n-      boolean isTrackedRemoval = false;\n-      JSType vnType = variableNode.getJSType();\n-      for (JSType type : eventfulTypes) {\n-        if (isPossiblySubtype(vnType, type)) {\n-          isTrackedRemoval = true;\n-        }\n-      }\n-      if (!isTrackedRemoval) {\n-        return;\n-      }\n-\n-      String key = generateKey(t, variableNode, false);\n-      if (key == null) {\n-        return;\n-      }\n-\n-      eventfulObjectDisposed(t, variableNode);\n+      List<Node> variableNodes = maybeGetValueNodesFromCall(n);\n+\n+      for (Node variableNode : variableNodes) {\n+        Preconditions.checkState(variableNode != null);\n+\n+        // Only consider removals on eventful object\n+        boolean isTrackedRemoval = false;\n+        JSType vnType = variableNode.getJSType();\n+        for (JSType type : eventfulTypes) {\n+          if (isPossiblySubtype(vnType, type)) {\n+            isTrackedRemoval = true;\n+          }\n+        }\n+        if (!isTrackedRemoval) {\n+          continue;\n+        }\n+\n+        String key = generateKey(t, variableNode, false);\n+        if (key == null) {\n+          continue;\n+        }\n+\n+        eventfulObjectDisposed(t, variableNode);\n+      }\n     }\n \n     /**", "timestamp": 1370389601, "metainfo": ""}