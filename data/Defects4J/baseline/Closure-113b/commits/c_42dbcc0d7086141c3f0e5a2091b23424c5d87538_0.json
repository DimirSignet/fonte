{"sha": "42dbcc0d7086141c3f0e5a2091b23424c5d87538", "log": "Swap where we handle ES3 keyword property quoting from the IRFactory to the CodeGenerator so these properties will be properly type-checked and optimized. Also, in ES5 mode we no longer always quote object literal keys when they are an ES3 keyword. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=48523831", "commit": "\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n import com.google.common.base.Charsets;\n import com.google.common.base.Preconditions;\n import com.google.common.collect.Maps;\n+import com.google.javascript.jscomp.CompilerOptions.LanguageMode;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n import com.google.javascript.rhino.TokenStream;\n \n   private final boolean preferSingleQuotes;\n   private final boolean trustedStrings;\n+  private final LanguageMode languageMode;\n \n   private CodeGenerator(CodeConsumer consumer) {\n     cc = consumer;\n     outputCharsetEncoder = null;\n     preferSingleQuotes = false;\n     trustedStrings = true;\n+    languageMode = LanguageMode.ECMASCRIPT5;\n   }\n \n   static CodeGenerator forCostEstimation(CodeConsumer consumer) {\n     }\n     this.preferSingleQuotes = options.preferSingleQuotes;\n     this.trustedStrings = options.trustedStrings;\n+    this.languageMode = options.getLanguageOut();\n   }\n \n   /**\n         if (needsParens) {\n           add(\")\");\n         }\n-        add(\".\");\n-        addIdentifier(last.getString());\n+        if (this.languageMode == LanguageMode.ECMASCRIPT3\n+            && TokenStream.isKeyword(last.getString())) {\n+          // Check for ECMASCRIPT3 keywords.\n+          add(\"[\");\n+          add(last);\n+          add(\"]\");\n+        } else {\n+          add(\".\");\n+          addIdentifier(last.getString());\n+        }\n         break;\n       }\n \n             String key = c.getString();\n             // Object literal property names don't have to be quoted if they\n             // are not JavaScript keywords\n-            if (!c.isQuotedString() &&\n-                !TokenStream.isKeyword(key) &&\n-                TokenStream.isJSIdentifier(key) &&\n+            if (!c.isQuotedString()\n+                && !(languageMode == LanguageMode.ECMASCRIPT3\n+                    && TokenStream.isKeyword(key))\n+                && TokenStream.isJSIdentifier(key)\n                 // do not encode literally any non-literal characters that\n                 // were Unicode escaped.\n-                NodeUtil.isLatin(key)) {\n+                && NodeUtil.isLatin(key)) {\n               add(key);\n             } else {\n               // Determine if the string is a simple number.\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n         Node key = transformAsString(rawKey);\n         key.setType(Token.STRING_KEY);\n         if (rawKey instanceof Name && !isAllowedProp(key.getString())) {\n-          key.putBooleanProp(Node.QUOTED_PROP, true);\n           errorReporter.warning(INVALID_ES3_PROP_NAME, sourceName,\n               key.getLineno(), \"\", key.getCharno());\n         }\n       Node leftChild = transform(getNode.getTarget());\n       AstNode nodeProp = getNode.getProperty();\n       Node rightChild = transformAsString(nodeProp);\n-      int nodeType = Token.GETPROP;\n       if (nodeProp instanceof Name && !isAllowedProp(\n           ((Name) nodeProp).getIdentifier())) {\n-        nodeType = Token.GETELEM;\n         errorReporter.warning(INVALID_ES3_PROP_NAME, sourceName,\n             rightChild.getLineno(), \"\", rightChild.getCharno());\n       }\n       Node newNode = newNode(\n-          nodeType, leftChild, rightChild);\n+          Token.GETPROP, leftChild, rightChild);\n       newNode.setLineno(leftChild.getLineno());\n       newNode.setCharno(leftChild.getCharno());\n       maybeSetLengthFrom(newNode, getNode);\n--- a/test/com/google/javascript/jscomp/CodePrinterTest.java\n+++ b/test/com/google/javascript/jscomp/CodePrinterTest.java\n public class CodePrinterTest extends TestCase {\n   private boolean trustedStrings = true;\n   private Compiler lastCompiler = null;\n+  private LanguageMode languageMode = LanguageMode.ECMASCRIPT5;\n \n   @Override public void setUp() {\n     trustedStrings = true;\n     lastCompiler = null;\n+    languageMode = LanguageMode.ECMASCRIPT5;\n   }\n \n   Node parse(String js) {\n     options.setTrustedStrings(trustedStrings);\n     options.setPrettyPrint(prettyprint);\n     options.setLineLengthThreshold(lineThreshold);\n+    options.setLanguageOut(languageMode);\n     return new CodePrinter.Builder(parse(js)).setCompilerOptions(options)\n         .build();\n   }\n     options.setPrettyPrint(prettyprint);\n     options.setLineLengthThreshold(lineThreshold);\n     options.setLineBreak(lineBreak);\n+    options.setLanguageOut(languageMode);\n     return new CodePrinter.Builder(parse(js)).setCompilerOptions(options)\n         .build();\n   }\n     options.setLineLengthThreshold(lineThreshold);\n     options.setPreferLineBreakAtEndOfFile(preferLineBreakAtEof);\n     options.setLineBreak(lineBreak);\n+    options.setLanguageOut(languageMode);\n     return new CodePrinter.Builder(parse(js)).setCompilerOptions(options)\n         .build();\n   }\n     options.setPrettyPrint(prettyprint);\n     options.setLineLengthThreshold(lineThreshold);\n     options.setLineBreak(lineBreak);\n+    options.setLanguageOut(languageMode);\n     return new CodePrinter.Builder(node).setCompilerOptions(options)\n         .setOutputTypes(outputTypes)\n         .setTypeRegistry(lastCompiler.getTypeRegistry())\n     options.setPrettyPrint(prettyprint);\n     options.setLineLengthThreshold(lineThreshold);\n     options.setLineBreak(lineBreak);\n+    options.setLanguageOut(languageMode);\n     return new CodePrinter.Builder(node).setCompilerOptions(options)\n         .setOutputTypes(outputTypes)\n         .setTypeRegistry(lastCompiler.getTypeRegistry())\n   String printNode(Node n) {\n     CompilerOptions options = new CompilerOptions();\n     options.setLineLengthThreshold(CodePrinter.DEFAULT_LINE_LENGTH_THRESHOLD);\n+    options.setLanguageOut(languageMode);\n     return new CodePrinter.Builder(n).setCompilerOptions(options).build();\n   }\n \n     assertPrint(\n       \"var x = {get \\\"()\\\"() {return 1}}\",\n       \"var x={get \\\"()\\\"(){return 1}}\");\n+\n+    languageMode = LanguageMode.ECMASCRIPT5;\n+    assertPrintSame(\"var x={get function(){return 1}}\");\n+\n+    // Getters and setters and not supported in ES3 but if someone sets the\n+    // the ES3 output mode on an AST containing them we still produce them.\n+    languageMode = LanguageMode.ECMASCRIPT3;\n+    assertPrintSame(\"var x={get function(){return 1}}\");\n   }\n \n   public void testSetter() {\n     assertPrint(\n       \"var x = {set \\\"(x)\\\"(y) {return 1}}\",\n       \"var x={set \\\"(x)\\\"(y){return 1}}\");\n+\n+    languageMode = LanguageMode.ECMASCRIPT5;\n+    assertPrintSame(\"var x={set function(x){}}\");\n+\n+    // Getters and setters and not supported in ES3 but if someone sets the\n+    // the ES3 output mode on an AST containing them we still produce them.\n+    languageMode = LanguageMode.ECMASCRIPT3;\n+    assertPrintSame(\"var x={set function(x){}}\");\n   }\n \n   public void testNegCollapse() {\n     assertPrintSame(\"var x=/\\\\u2028/\");\n     assertPrintSame(\"var x=/\\\\u2029/\");\n   }\n+\n+  public void testKeywordProperties1() {\n+    languageMode = LanguageMode.ECMASCRIPT5;\n+    assertPrintSame(\"x.foo=2\");\n+    assertPrintSame(\"x.function=2\");\n+\n+    languageMode = LanguageMode.ECMASCRIPT3;\n+    assertPrintSame(\"x.foo=2\");\n+    assertPrint(\"x.function=2\", \"x[\\\"function\\\"]=2\");\n+  }\n+\n+  public void testKeywordProperties2() {\n+    languageMode = LanguageMode.ECMASCRIPT5;\n+    assertPrintSame(\"x={foo:2}\");\n+    assertPrintSame(\"x={function:2}\");\n+\n+    languageMode = LanguageMode.ECMASCRIPT3;\n+    assertPrintSame(\"x={foo:2}\");\n+    assertPrint(\"x={function:2}\", \"x={\\\"function\\\":2}\");\n+  }\n }\n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n   }\n \n   public void testES3ByDefault() {\n+    useStringComparison = true;\n     test(\n         \"var x = f.function\",\n-        \"var x = f['function']\",\n+        \"var x=f[\\\"function\\\"];\",\n         RhinoErrorReporter.INVALID_ES3_PROP_NAME);\n   }\n ", "timestamp": 1372202102, "metainfo": ""}