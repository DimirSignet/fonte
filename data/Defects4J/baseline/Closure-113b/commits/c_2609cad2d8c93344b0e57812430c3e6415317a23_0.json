{"sha": "2609cad2d8c93344b0e57812430c3e6415317a23", "log": "Rename Labels based on encoding bias. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=45062510", "commit": "\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n   //--------------------------------\n   // Optimizations\n   //--------------------------------\n+\n+  boolean aggressiveRenaming;\n \n   /** Folds constants (e.g. (2 + 3) to 5) */\n   public boolean foldConstants;\n     extraAnnotationNames = null;\n \n     // Optimizations\n+    aggressiveRenaming = false;\n     foldConstants = false;\n     coalesceVariableNames = false;\n     deadAssignmentElimination = false;\n     this.checkMissingGetCssNameBlacklist = blackList;\n   }\n \n+  public void setAggressiveRenaming(boolean aggressive) {\n+    this.aggressiveRenaming = true;\n+  }\n+\n   public void setFoldConstants(boolean foldConstants) {\n     this.foldConstants = foldConstants;\n   }\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n import java.io.IOException;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n   /** Names exported by goog.exportSymbol. */\n   private Set<String> exportedNames = null;\n \n+  /** Shared name generator that remembers character encoding bias */\n+  private NameGenerator nameGenerator = null;\n   /**\n    * Ids for cross-module method stubbing, so that each method has\n    * a unique id.\n     return preprocessorSymbolTable;\n   }\n \n+  private NameGenerator getNameGenerator() {\n+    if (nameGenerator == null) {\n+      nameGenerator = new NameGenerator(new HashSet<String>(0), \"\", null);\n+    }\n+    return nameGenerator;\n+  }\n+\n   void maybeInitializePreprocessorSymbolTable(AbstractCompiler compiler) {\n     if (options.ideMode) {\n       Node root = compiler.getRoot();\n     // Instrument calls to memory allocations\n     if (options.getInstrumentMemoryAllocations()) {\n       passes.add(instrumentMemoryAllocations);\n+    }\n+\n+    if (options.aggressiveRenaming) {\n+      passes.add(gatherCharBias);\n     }\n \n     if (options.variableRenaming != VariableRenamingPolicy.ALL) {\n   }\n \n   /** Renames labels */\n+  final PassFactory gatherCharBias = new PassFactory(\"gatherCharBias\", true) {\n+    @Override\n+    protected CompilerPass create(AbstractCompiler compiler) {\n+      return new GatherCharacterEncodingBias(compiler, getNameGenerator());\n+    }\n+  };\n+\n+  /** Renames labels */\n   final PassFactory renameLabels = new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass create(AbstractCompiler compiler) {\n-      return new RenameLabels(compiler);\n+      if (options.aggressiveRenaming) {\n+        return new RenameLabels(compiler, getNameGenerator());\n+      } else {\n+        return new RenameLabels(compiler);\n+      }\n     }\n   };\n \n--- a/src/com/google/javascript/jscomp/RenameLabels.java\n+++ b/src/com/google/javascript/jscomp/RenameLabels.java\n   private final Supplier<String> nameSupplier;\n   private final boolean removeUnused;\n \n-  RenameLabels(AbstractCompiler compiler) {\n+  RenameLabels(final AbstractCompiler compiler) {\n     this(compiler, new DefaultNameSupplier(), true);\n+  }\n+\n+  RenameLabels(final AbstractCompiler compiler, final NameGenerator nameGen) {\n+    this(compiler, new DefaultNameSupplier(nameGen), true);\n+    nameGen.restartNaming();\n   }\n \n   RenameLabels(\n \n   static class DefaultNameSupplier implements Supplier<String> {\n     // NameGenerator is used to create safe label names.\n-    final NameGenerator nameGenerator =\n-        new NameGenerator(new HashSet<String>(), \"\", null);\n+    private final NameGenerator nameGenerator;\n+\n+    private DefaultNameSupplier(final NameGenerator nameGen) {\n+      this.nameGenerator = nameGen;\n+    }\n+\n+    private DefaultNameSupplier() {\n+      this.nameGenerator = new NameGenerator(new HashSet<String>(), \"\", null);\n+    }\n \n     @Override\n     public String get() {\n--- a/test/com/google/javascript/jscomp/IntegrationTest.java\n+++ b/test/com/google/javascript/jscomp/IntegrationTest.java\n         \"/** @const */\\n\" +\n         \"var x = 1; foo(); x = 2;\\n\";\n     test(options, code, ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n+  }\n+\n+  public void testBiasedLabelRenaming() {\n+    CompilerOptions options = createCompilerOptions();\n+    options.setAggressiveRenaming(true);\n+    options.setLabelRenaming(true);\n+    String code = \"function a() {lbl: while(1) {while(1) {break lbl}}}\";\n+    String result = \"function a() {f: for(;1;) for(;1;)break f}\";\n+    test(options, code, result);\n   }\n \n   public void testIssue937() {", "timestamp": 1365550864, "metainfo": ""}