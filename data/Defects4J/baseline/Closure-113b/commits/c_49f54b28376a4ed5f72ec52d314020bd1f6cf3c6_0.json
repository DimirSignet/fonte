{"sha": "49f54b28376a4ed5f72ec52d314020bd1f6cf3c6", "log": "Fix issue 965 ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=45371896", "commit": "\n--- a/src/com/google/javascript/jscomp/ControlFlowGraph.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowGraph.java\n         return false;\n     }\n   }\n+\n+  @Override\n+  public String toString() {\n+    String s = \"CFG:\\n\";\n+    for (GraphvizEdge e : getGraphvizEdges()) {\n+      s += e.toString() + '\\n';\n+    }\n+    return s;\n+  }\n }\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n     private final Node use;\n     private final Node useCfgNode;\n \n-    // Number of uses of the variable within the CFG node that represented the\n-    // use in the CFG.\n-    private int numUseWithinUseCfgNode;\n+    // Number of uses of the variable within the current CFG node.\n+    private int numUsesWithinCfgNode;\n \n     Candidate(String varName, Definition defMetadata,\n         Node use, Node useCfgNode) {\n       // Finally we have to make sure that there are no more than one use\n       // in the program and in the CFG node. Even when it is semantically\n       // correctly inlining twice increases code size.\n-      if (numUseWithinUseCfgNode != 1) {\n+      if (numUsesWithinCfgNode != 1) {\n         return false;\n       }\n \n      * Computes the number of uses of the variable varName and store it in\n      * numUseWithinUseCfgNode.\n      */\n-    private void getNumUseInUseCfgNode(Node n) {\n-\n+    private void getNumUseInUseCfgNode(final Node cfgNode) {\n+\n+      numUsesWithinCfgNode = 0;\n       AbstractCfgNodeTraversalCallback gatherCb =\n           new AbstractCfgNodeTraversalCallback() {\n \n         @Override\n         public void visit(NodeTraversal t, Node n, Node parent) {\n-          if (n.isName() && n.getString().equals(varName) &&\n-              // do not count in if it is left child of an assignment operator\n-              !(parent.isAssign() &&\n-               (parent.getFirstChild() == n))) {\n-            numUseWithinUseCfgNode++;\n+          if (n.isName() && n.getString().equals(varName)) {\n+            // We make a special exception when the entire cfgNode is a chain\n+            // of assignments, since in that case the assignment statements\n+            // will happen after the inlining of the right hand side.\n+            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact\n+            //   and remove this special case.\n+            if (parent.isAssign() && (parent.getFirstChild() == n)\n+                && isAssignChain(parent, cfgNode)) {\n+              // Don't count lhs of top-level assignment chain\n+              return;\n+            } else {\n+              numUsesWithinCfgNode++;\n+            }\n           }\n         }\n+\n+        private boolean isAssignChain(Node child, Node ancestor) {\n+          for (Node n = child; n != ancestor; n = n.getParent()) {\n+            if (!n.isAssign()) {\n+              return false;\n+            }\n+          }\n+          return true;\n+        }\n       };\n \n-      NodeTraversal.traverse(compiler, n, gatherCb);\n+      NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n     }\n   }\n \n    */\n   private static boolean checkLeftOf(\n       Node n, Node expressionRoot, Predicate<Node> predicate) {\n-    for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) {\n+    for (Node p = n; p != expressionRoot; p = p.getParent()) {\n       for (Node cur = p.getParent().getFirstChild(); cur != p;\n           cur = cur.getNext()) {\n         if (predicate.apply(cur)) {\n--- a/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\n+++ b/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\n       // If the var has the same definition node we can assume they have the\n       // same depends set.\n       return otherDef.node == node;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"Definition@\" + node.toString();\n     }\n   }\n \n--- a/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java\n+++ b/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java\n         \"return x;\");\n   }\n \n+  public void testVarAssinInsideHookIssue965() {\n+    noInline(\"var i = 0; return 1 ? (i = 5) : 0, i;\");\n+    noInline(\"var i = 0; return (1 ? (i = 5) : 0) ? i : 0;\");\n+    noInline(\"var i = 0; return (1 ? (i = 5) : 0) || i;\");\n+    noInline(\"var i = 0; return (1 ? (i = 5) : 0) * i;\");\n+  }\n+\n   private void noInline(String input) {\n     inline(input, input);\n   }", "timestamp": 1366235064, "metainfo": ""}