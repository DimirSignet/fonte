{"sha": "b74589e7da356174186105eb897c010875c1579e", "log": "Finish off StatementFusion experiment. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=45181949", "commit": "\n--- a/src/com/google/javascript/jscomp/StatementFusion.java\n+++ b/src/com/google/javascript/jscomp/StatementFusion.java\n \n   @Override\n   Node optimizeSubtree(Node n) {\n-    // TODO(user): canFuseIntoOnestatement needs to be rewritten to\n-    // allow more aggressive use of comma's.\n-\n-    if ((favorsCommaOverSemiColon || !n.getParent().isFunction())\n-        && canFuseIntoOneStatement(n)) {\n+    // TODO(user): It is much cleaner to have two algorithms depending\n+    // on favorsCommaOverSemiColon. If we decided the less aggressive one is\n+    // no longer useful, delete it.\n+    if (favorsCommaOverSemiColon) {\n+      return tryFuseStatementsAggressively(n);\n+    } else {\n+      return tryFuseStatements(n);\n+    }\n+  }\n+\n+  Node tryFuseStatements(Node n) {\n+    if (!n.getParent().isFunction() && canFuseIntoOneStatement(n)) {\n       Node start = n.getFirstChild();\n-      Node end = n.getChildBefore(n.getLastChild());\n+      Node end = n.getLastChild();\n       Node result = fuseIntoOneStatement(n, start, end);\n       fuseExpressionIntoControlFlowStatement(result, n.getLastChild());\n       reportCodeChange();\n     }\n+    return n;\n+  }\n+\n+  Node tryFuseStatementsAggressively(Node n) {\n+    if (!NodeUtil.isStatementBlock(n)) {\n+      return n;\n+    }\n+\n+    Node cur = n.getFirstChild();\n+    while (cur != null) {\n+      if (!cur.isExprResult()) {\n+        cur = cur.getNext();\n+        continue;\n+      }\n+      Node next = cur.getNext();\n+      while (next != null && next.isExprResult()) {\n+        next = next.getNext();\n+      }\n+      if (cur.getNext() != next) {\n+        cur = fuseIntoOneStatement(n, cur, next);\n+        reportCodeChange();\n+      }\n+      if (cur.isExprResult() &&\n+          next != null && isFusableControlStatement(next)) {\n+        fuseExpressionIntoControlFlowStatement(cur, next);\n+        reportCodeChange();\n+        next = next.getNext();\n+      }\n+      cur = next;\n+    }\n+\n     return n;\n   }\n \n       }\n     }\n \n+    return isFusableControlStatement(last);\n+  }\n+\n+  private boolean isFusableControlStatement(Node n) {\n     // TODO(user): Support more control statement for fusion.\n     // FOR\n-    switch(last.getType()) {\n+    switch(n.getType()) {\n       case Token.IF:\n       case Token.THROW:\n       case Token.SWITCH:\n         return true;\n       case Token.RETURN:\n         // We don't want to add a new return value.\n-        return last.hasChildren();\n+        return n.hasChildren();\n       case Token.FOR:\n-        return NodeUtil.isForIn(last) &&\n+        return NodeUtil.isForIn(n) &&\n             // Avoid cases where we have for(var x = foo() in a) { ....\n-            !mayHaveSideEffects(last.getFirstChild());\n-    }\n-\n+            !mayHaveSideEffects(n.getFirstChild());\n+    }\n     return false;\n   }\n \n    *\n    * @param parent The parent that contains the statements.\n    * @param first The first statement to fuse (inclusive)\n-   * @param last The last statement to fuse (inclusive)\n+   * @param last The last statement to fuse (exclusive)\n    * @return A single statement that contains all the fused statement as one.\n    */\n   private Node fuseIntoOneStatement(Node parent, Node first, Node last) {\n     // Nothing to fuse if there is only one statement.\n-    if (first == last) {\n+    if (first.getNext() == last) {\n       return first;\n     }\n \n     // Step one: Create a comma tree that contains all the statements.\n     Node commaTree = first.removeFirstChild();\n-    Node onePastLast = last.getNext();\n \n     Node next = null;\n-    for (Node cur = first.getNext(); cur != onePastLast; cur = next) {\n+    for (Node cur = first.getNext(); cur != last; cur = next) {\n       commaTree = fuseExpressionIntoExpression(\n           commaTree, cur.removeFirstChild());\n       next = cur.getNext();\n--- a/test/com/google/javascript/jscomp/StatementFusionTest.java\n+++ b/test/com/google/javascript/jscomp/StatementFusionTest.java\n     test(\"a;b;c;if(d){}\", \"if(a,b,c,d){}\");\n   }\n \n+  public void testFavorComma3() {\n+    favorsCommas = true;\n+    test(\"a;b;c;if(d){} d;e;f\", \"if(a,b,c,d){}d,e,f\");\n+  }\n+\n+  public void testFavorComma4() {\n+    favorsCommas = true;\n+    test(\"if(d){} d;e;f\", \"if(d){}d,e,f\");\n+  }\n+\n+  public void testFavorComma5() {\n+    favorsCommas = true;\n+    test(\"a;b;c;if(d){}d;e;f;if(g){}\", \"if(a,b,c,d){}if(d,e,f,g){}\");\n+  }\n+\n   public void testNoGlobalSchopeChanges() {\n     testSame(\"a,b,c\");\n   }", "timestamp": 1366234979, "metainfo": ""}