{"sha": "1c4c4fcaa092b3c11428beb1880282ca24456778", "log": "true -> !0 causes a preformance regression.  Consider reenabling this once Chrome 15 is the stable release.  R=nicksantos DELTA=38  (12 added, 0 deleted, 26 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3240   ", "commit": "\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n \n     switch (n.getType()) {\n       case Token.NOT:\n+        // TODO(johnlenz): skip folding !0/!1 during late fold,\n+        // when it is folded there.\n+        /*\n         // Don't fold !0 and !1 back to false.\n         if (left.getType() == Token.NUMBER) {\n           double numValue = left.getDouble();\n             return n;\n           }\n         }\n+        */\n         int result = leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;\n         Node replacementNode = new Node(result);\n         parent.replaceChild(n, replacementNode);\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n   }\n \n   private Node reduceTrueFalse(Node n) {\n-    Node not = new Node(Token.NOT,\n-        Node.newNumber(n.getType() == Token.TRUE ? 0 : 1));\n-    not.copyInformationFromForTree(n);\n-    n.getParent().replaceChild(n, not);\n-    reportCodeChange();\n-    return not;\n+    // TODO(johnlenz): Re-enable this with Chrome 15.\n+    /*\n+    if (late) {\n+      Node not = new Node(Token.NOT,\n+          Node.newNumber(n.getType() == Token.TRUE ? 0 : 1));\n+      not.copyInformationFromForTree(n);\n+      n.getParent().replaceChild(n, not);\n+      reportCodeChange();\n+      return not;\n+    }\n+    */\n+    return n;\n   }\n \n   private Node tryMinimizeArrayLiteral(Node n) {\n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n          \"/** @define {number} */ var BAR = 3;\" +\n          \"/** @define {boolean} */ var CCC = false;\" +\n          \"/** @define {boolean} */ var DDD = false;\",\n-         \"var FOO = !0, BAR = 5, CCC = !0, DDD = !0;\");\n+         \"var FOO = true, BAR = 5, CCC = true, DDD = true;\");\n   }\n \n   public void testDefineFlag2() {\n     test(\"goog.asserts.assert(false)\",\n          \"\");\n     args.add(\"--debug\");\n-    test(\"goog.asserts.assert(false)\", \"goog.$asserts$.$assert$(!1)\");\n+    test(\"goog.asserts.assert(false)\", \"goog.$asserts$.$assert$(false)\");\n   }\n \n   public void testMissingReturnCheckOnWithVerbose() {\n--- a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\n   }\n \n   public void testNotFoldBackToTrueFalse() {\n-    foldSame(\"!0\");\n-    foldSame(\"!1\");\n+    // TODO(johnlenz): disable this for late folding once it has been reenabled.\n+    fold(\"!0\", \"true\");\n+    fold(\"!1\", \"false\");\n     fold(\"!3\", \"false\");\n   }\n \n           \"void 0\",\n           \"true\",\n           \"false\",\n-          \"!0\",\n-          \"!1\",\n+          // TODO(johnlenz): Add these two back.\n+          // \"!0\",\n+          // \"!1\",\n           \"0\",\n           \"1\",\n           \"''\",\n--- a/test/com/google/javascript/jscomp/PeepholeIntegrationTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeIntegrationTest.java\n     fold(\"function z() {if (a) { return true }\" +\n          \"else if (b) { return true }\" +\n          \"else { return true }}\",\n-         \"function z() {return !0;}\");\n+         \"function z() {return true;}\");\n \n     fold(\"function z() {if (a()) { return true }\" +\n          \"else if (b()) { return true }\" +\n          \"else { return true }}\",\n-         \"function z() {a()||b();return !0;}\");\n+         \"function z() {a()||b();return true;}\");\n   }\n \n   public void testFoldLogicalOpIntegration() {\n   }\n \n   public void testTrueFalseFolding() {\n-    fold(\"x = true\", \"x = !0\");\n-    fold(\"x = false\", \"x = !1\");\n-    fold(\"x = !3\", \"x = !1\");\n-    fold(\"x = true && !0\", \"x = !0\");\n-    fold(\"x = !!!!!!!!!!!!3\", \"x = !0\");\n+    fold(\"x = true\", \"x = true\");\n+    fold(\"x = false\", \"x = false\");\n+    fold(\"x = !3\", \"x = false\");\n+    fold(\"x = true && !0\", \"x = true\");\n+    fold(\"x = !!!!!!!!!!!!3\", \"x = true\");\n     fold(\"if(!3){x()}\", \"\");\n     fold(\"if(!!3){x()}\", \"x()\");\n   }\n--- a/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java\n          \"function z() {(a) ? foo() : goo(); return !0}\");\n     fold(\"function z() {if (a) { foo(); x = true; return true \" +\n          \"} else { goo(); x = true; return true }}\",\n-         \"function z() {(a) ? foo() : goo(); x = !0; return !0}\");\n+         \"function z() {(a) ? foo() : goo(); x = true; return true}\");\n \n     fold(\"function z() {\" +\n          \"  if (a) { bar(); foo(); return true }\" +\n          \"function z() {\" +\n          \"  if (a) { bar(); foo(); }\" +\n          \"    else { bar(); goo(); }\" +\n-         \"  return !0;\" +\n+         \"  return true;\" +\n          \"}\");\n   }\n \n   }\n \n   public void testFoldReturnResult() {\n-    fold(\"function f(){return false;}\", \"function f(){return !1}\");\n+    fold(\"function f(){return false;}\", \"function f(){return false}\");\n     foldSame(\"function f(){return null;}\");\n     fold(\"function f(){return void 0;}\",\n          \"function f(){}\");\n   }\n \n   public void testFoldTrueFalse() {\n-    fold(\"x = true\", \"x = !0\");\n-    fold(\"x = false\", \"x = !1\");\n+    fold(\"x = true\", \"x = true\");\n+    fold(\"x = false\", \"x = false\");\n   }\n \n   public void testIssue291() {", "timestamp": 1315853646, "metainfo": ""}