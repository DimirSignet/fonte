{"sha": "f3353299a06f59a677de73b3a5aadd5c8ed17d02", "log": "Add a few more cases when gathering bias ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=45072804", "commit": "\n--- a/src/com/google/javascript/jscomp/GatherCharacterEncodingBias.java\n+++ b/src/com/google/javascript/jscomp/GatherCharacterEncodingBias.java\n   @Override\n   public void visit(NodeTraversal t, Node n, Node parent) {\n     switch (n.getType()) {\n+      case Token.TRUE:\n+      case Token.FALSE:\n       // TRUE and FALSE are purposely skipped as this gets removed in a late\n       // peephole optimization pass.\n+        return;\n \n+      case Token.NAME:\n+      case Token.LABEL_NAME:\n       // Case dealing with names / properties are *NOT* handled here. The idea\n       // is not to duplicate logics of variable renaming and property renaming.\n       // Those passes are responsible for calling favors() on anything they\n       // could not rename.\n+        return;\n \n       case Token.FUNCTION:\n-        nameGenerator.favors(\"function\");\n+        if (!NodeUtil.isGetOrSetKey(n.getParent())) {\n+          nameGenerator.favors(\"function\");\n+        }\n         return;\n       case Token.IF:\n         nameGenerator.favors(\"if\");\n       case Token.NULL:\n         nameGenerator.favors(\"null\");\n         return;\n+      case Token.DEBUGGER:\n+        nameGenerator.favors(\"debugger\");\n+        return;\n+      case Token.GETTER_DEF:\n+        nameGenerator.favors(\"get\");\n+        return;\n+      case Token.SETTER_DEF:\n+        nameGenerator.favors(\"set\");\n+        return;\n       case Token.NUMBER:\n         // TODO(user): This has to share some code with the code generator\n         // to figure out how the number will eventually be printed.\n--- a/test/com/google/javascript/jscomp/GatherCharacterEncodingBiasTest.java\n+++ b/test/com/google/javascript/jscomp/GatherCharacterEncodingBiasTest.java\n     generator.restartNaming();\n     assertEquals(\"z\", generator.generateNextName());\n   }\n+\n   public void testGathering6() {\n     testSame(\"this\");\n     generator.restartNaming();\n     assertEquals(\"t\", generator.generateNextName());\n     assertEquals(\"a\", generator.generateNextName());\n   }\n+\n+  public void testGatheringGetterSetter() {\n+    testSame(\"var x = { get y(){}, set y(val){} }\");\n+    generator.restartNaming();\n+    assertEquals(\"e\", generator.generateNextName()); // Twice each\n+    assertEquals(\"t\", generator.generateNextName());\n+\n+    assertEquals(\"a\", generator.generateNextName()); // Once each\n+    assertEquals(\"g\", generator.generateNextName());\n+  }\n+\n+  public void testGatheringDebugger() {\n+    testSame(\"debugger;\");\n+    generator.restartNaming();\n+    assertEquals(\"e\", generator.generateNextName());\n+    assertEquals(\"g\", generator.generateNextName());\n+    assertEquals(\"b\", generator.generateNextName());\n+    assertEquals(\"d\", generator.generateNextName());\n+    assertEquals(\"r\", generator.generateNextName());\n+    assertEquals(\"u\", generator.generateNextName());\n+    assertEquals(\"a\", generator.generateNextName());\n+  }\n }", "timestamp": 1365635900, "metainfo": ""}