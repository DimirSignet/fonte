{"sha": "f0f27f640a00415bf59299d4cc0dc0379bf32475", "log": "Add a ReplaceMessagesForChrome pass to the JS Compiler  R=nicksantos DELTA=294  (275 added, 16 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5464   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n   //--------------------------------\n   // Special-purpose alterations\n   //--------------------------------\n+\n+  /**\n+   * Replace UI strings with chrome.i18n.getMessage calls.\n+   * Used by Chrome extensions/apps.\n+   */\n+  boolean replaceMessagesWithChromeI18n;\n+\n+  public void setReplaceMessagesWithChromeI18n(\n+      boolean replaceMessagesWithChromeI18n) {\n+    if (replaceMessagesWithChromeI18n &&\n+        messageBundle != null &&\n+        !(messageBundle instanceof EmptyMessageBundle)) {\n+      throw new RuntimeException(\"When replacing messages with \" +\n+          \"chrome.i18n.getMessage, a message bundle should not be specified.\");\n+    }\n+\n+    this.replaceMessagesWithChromeI18n = replaceMessagesWithChromeI18n;\n+  }\n \n   /** Inserts run-time type assertions for debugging. */\n   boolean runtimeTypeCheck;\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n     // If you want to customize the compiler to use a different i18n pass,\n     // you can create a PassConfig that calls replacePassFactory\n     // to replace this.\n-    checks.add(options.messageBundle != null ?\n-        replaceMessages : createEmptyPass(\"replaceMessages\"));\n+    if (options.replaceMessagesWithChromeI18n) {\n+      checks.add(replaceMessagesForChrome);\n+    } else if (options.messageBundle != null) {\n+      checks.add(replaceMessages);\n+    }\n \n     if (options.getTweakProcessing().isOn()) {\n       checks.add(processTweaks);\n           JsMessage.Style.getFromParams(true, false),\n           /* if we can't find a translation, don't worry about it. */\n           false);\n+    }\n+  };\n+\n+  final PassFactory replaceMessagesForChrome =\n+      new PassFactory(\"replaceMessages\", true) {\n+    @Override\n+    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n+      return new ReplaceMessagesForChrome(compiler,\n+          new GoogleJsMessageIdGenerator(null),\n+          /* warn about message dupes */\n+          true,\n+          /* allow messages with goog.getMsg */\n+          JsMessage.Style.getFromParams(true, false));\n     }\n   };\n \n--- a/src/com/google/javascript/jscomp/JsMessageVisitor.java\n+++ b/src/com/google/javascript/jscomp/JsMessageVisitor.java\n     }\n   }\n \n+  /**\n+   * Checks a node's type.\n+   *\n+   * @throws MalformedException if the node is null or the wrong type\n+   */\n+  protected void checkNode(@Nullable Node node, int type) throws MalformedException {\n+    if (node == null) {\n+      throw new MalformedException(\n+          \"Expected node type \" + type + \"; found: null\", node);\n+    }\n+    if (node.getType() != type) {\n+      throw new MalformedException(\n+          \"Expected node type \" + type + \"; found: \" + node.getType(), node);\n+    }\n+  }\n+\n   static class MalformedException extends Exception {\n     private static final long serialVersionUID = 1L;\n \n--- a/src/com/google/javascript/jscomp/ReplaceMessages.java\n+++ b/src/com/google/javascript/jscomp/ReplaceMessages.java\n   }\n \n   /**\n-   * Checks a node's type.\n-   *\n-   * @throws MalformedException if the node is null or the wrong type\n-   */\n-  private void checkNode(@Nullable Node node, int type) throws MalformedException {\n-    if (node == null) {\n-      throw new MalformedException(\n-          \"Expected node type \" + type + \"; found: null\", node);\n-    }\n-    if (node.getType() != type) {\n-      throw new MalformedException(\n-          \"Expected node type \" + type + \"; found: \" + node.getType(), node);\n-    }\n-  }\n-\n-  /**\n    * Checks that a node is a valid string expression (either a string literal\n    * or a concatenation of string literals).\n    *\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/ReplaceMessagesForChrome.java\n+/*\n+ * Copyright 2012 The Closure Compiler Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+import com.google.common.collect.Lists;\n+import com.google.javascript.jscomp.JsMessage.PlaceholderReference;\n+import com.google.javascript.rhino.IR;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+\n+/**\n+ * Replaces user-visible messages with appropriate calls to\n+ * chrome.i18n.getMessage. The first argument to getMessage is the id of the\n+ * message, as a string. If the message contains placeholders, the second\n+ * argument is an array of the values being used for the placeholders, in the\n+ * order they appear in the source code.\n+ *\n+ */\n+class ReplaceMessagesForChrome extends JsMessageVisitor {\n+\n+  ReplaceMessagesForChrome(AbstractCompiler compiler,\n+      JsMessage.IdGenerator idGenerator,\n+      boolean checkDuplicatedMessages, JsMessage.Style style) {\n+\n+    super(compiler, checkDuplicatedMessages, style, idGenerator);\n+  }\n+\n+  private static Node getChromeI18nGetMessageNode(String messageId) {\n+    Node chromeI18n = IR.getprop(IR.name(\"chrome\"), IR.string(\"i18n\"));\n+    Node getMessage =  IR.getprop(chromeI18n, IR.string(\"getMessage\"));\n+    return IR.call(getMessage, IR.string(messageId));\n+  }\n+\n+  @Override\n+  protected void processJsMessage(\n+      JsMessage message, JsMessageDefinition definition) {\n+    try {\n+      Node msgNode = definition.getMessageNode();\n+      Node newValue = getNewValueNode(msgNode, message);\n+      newValue.copyInformationFromForTree(msgNode);\n+\n+      definition.getMessageParentNode().replaceChild(msgNode, newValue);\n+      compiler.reportCodeChange();\n+    } catch (MalformedException e) {\n+      compiler.report(JSError.make(message.getSourceName(), e.getNode(),\n+          MESSAGE_TREE_MALFORMED, e.getMessage()));\n+    }\n+  }\n+\n+  private Node getNewValueNode(Node origNode, JsMessage message)\n+      throws MalformedException {\n+    Node newValueNode = getChromeI18nGetMessageNode(message.getId());\n+\n+    if (!message.placeholders().isEmpty()) {\n+      Node placeholderValues = origNode.getLastChild();\n+      checkNode(placeholderValues, Token.OBJECTLIT);\n+\n+      // Output the placeholders, sorted alphabetically by placeholder name,\n+      // regardless of what order they appear in the original message.\n+      List<String> placeholderNames = Lists.newArrayList();\n+      for (CharSequence cs : message.parts()) {\n+        if (cs instanceof PlaceholderReference) {\n+          String placeholderName = ((PlaceholderReference) cs).getName();\n+          placeholderNames.add(placeholderName);\n+        }\n+      }\n+      Collections.sort(placeholderNames);\n+\n+      Node placeholderValueArray = IR.arraylit();\n+      for (String name : placeholderNames) {\n+        Node value = getPlaceholderValue(placeholderValues, name);\n+        if (value == null) {\n+          throw new MalformedException(\n+              \"No value was provided for placeholder \" + name,\n+              origNode);\n+        }\n+        placeholderValueArray.addChildToBack(value);\n+      }\n+      newValueNode.addChildToBack(placeholderValueArray);\n+    }\n+\n+    newValueNode.copyInformationFromForTree(origNode);\n+    return newValueNode;\n+  }\n+\n+  private Node getPlaceholderValue(\n+      Node placeholderValues, String placeholderName) {\n+    for (Node key : placeholderValues.children()) {\n+      if (key.getString().equals(placeholderName)) {\n+        return key.getFirstChild().cloneTree();\n+      }\n+    }\n+    return null;\n+  }\n+}\n--- /dev/null\n+++ b/test/com/google/javascript/jscomp/ReplaceMessagesForChromeTest.java\n+/*\n+ * Copyright 2012 The Closure Compiler Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+import static com.google.javascript.jscomp.JsMessage.Style.RELAX;\n+\n+import com.google.javascript.jscomp.JsMessage.Style;\n+\n+/**\n+ * Test which checks that replacer works correctly.\n+ *\n+ */\n+public class ReplaceMessagesForChromeTest extends CompilerTestCase {\n+\n+  private Style style = RELAX;\n+\n+  @Override\n+  protected CompilerPass getProcessor(Compiler compiler) {\n+    return new ReplaceMessagesForChrome(compiler,\n+        new GoogleJsMessageIdGenerator(null), false, style);\n+  }\n+\n+  @Override\n+  protected int getNumRepetitions() {\n+    // No longer valid on the second run.\n+    return 1;\n+  }\n+\n+  @Override\n+  protected void setUp()  {\n+    style = RELAX;\n+  }\n+\n+  public void testReplaceSimpleMessage() {\n+    test(\"/** @desc A simple message. */\\n\" +\n+         \"var MSG_A = goog.getMsg('Hello world');\",\n+         \"var MSG_A=chrome.i18n.getMessage('8660696502365331902');\");\n+\n+    test(\"/** @desc A message attached to an object. */\\n\" +\n+        \"foo.bar.MSG_B = goog.getMsg('Goodbye world');\",\n+        \"foo.bar.MSG_B=chrome.i18n.getMessage('2356086230621084760');\");\n+  }\n+\n+  public void testReplaceSinglePlaceholder() {\n+    test(\"/** @desc A message with one placeholder. */\\n\" +\n+         \"var MSG_C = goog.getMsg('Hello, {$name}', {name: 'Tyler'});\",\n+         \"var MSG_C=chrome.i18n.getMessage('4985325380591528435', ['Tyler']);\");\n+  }\n+\n+  public void testReplaceTwoPlaceholders() {\n+    test(\"/** @desc A message with two placeholders. */\\n\" +\n+         \"var MSG_D = goog.getMsg('{$greeting}, {$name}', \" +\n+         \"{greeting: 'Hi', name: 'Tyler'});\",\n+         \"var MSG_D=chrome.i18n.getMessage('3605047247574980322', \" +\n+         \"['Hi', 'Tyler']);\");\n+\n+    test(\"/** @desc A message with two placeholders, but their order is\\n\" +\n+         \" * reversed in the object literal. (Shouldn't make a difference.)\\n\" +\n+         \" */\\n\" +\n+         \"var MSG_E = goog.getMsg('{$greeting}, {$name}!', \" +\n+         \"{name: 'Tyler', greeting: 'Hi'});\",\n+         \"var MSG_E=chrome.i18n.getMessage('691522386483664339', \" +\n+         \"['Hi', 'Tyler']);\");\n+  }\n+\n+  public void testReplacePlaceholderMissingValue() {\n+    test(\"/** @desc A message with two placeholders, but one is missing. */\\n\" +\n+         \"var MSG_F = goog.getMsg('{$greeting}, {$name}!', {name: 'Tyler'});\",\n+         null, JsMessageVisitor.MESSAGE_TREE_MALFORMED);\n+  }\n+\n+  public void testReplaceTwoPlaceholdersNonAlphaOrder() {\n+    test(\"/** @desc A message with two placeholders not in order .*/\\n\" +\n+         \"var MSG_G = goog.getMsg('{$name}: {$greeting}', \" +\n+         \"{greeting: 'Salutations', name: 'Tyler'});\",\n+         \"var MSG_G=chrome.i18n.getMessage('7437383242562773138', \" +\n+         \"['Salutations', 'Tyler']);\");\n+  }\n+\n+  public void testReplaceExternalMessage() {\n+    test(\"/** @desc A message that was extracted with SoyMsgExtractor. */\\n\" +\n+         \"var MSG_EXTERNAL_1357902468 = goog.getMsg('Hello world');\",\n+         \"var MSG_EXTERNAL_1357902468 = chrome.i18n.getMessage('1357902468');\");\n+  }\n+}", "timestamp": 1346892095, "metainfo": ""}