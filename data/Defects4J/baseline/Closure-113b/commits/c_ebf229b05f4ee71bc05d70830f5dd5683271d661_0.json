{"sha": "ebf229b05f4ee71bc05d70830f5dd5683271d661", "log": "fix a bad String() optimization fixes issue 759  R=johnlenz DELTA=18  (16 added, 0 deleted, 2 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5055   ", "commit": "\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n     Node callTarget = n.getFirstChild();\n     if (callTarget != null && callTarget.isName() &&\n           callTarget.getString().equals(\"String\")) {\n-      // Fold String(a) to ''+(a) - which allows further optimizations\n+      // Fold String(a) to '' + (a) on immutable literals,\n+      // which allows further optimizations\n+      //\n+      // We can't do this in the general case, because String(a) has\n+      // slightly different semantics than '' + (a). See\n+      // http://code.google.com/p/closure-compiler/issues/detail?id=759\n       Node value = callTarget.getNext();\n-      if (value != null) {\n+      if (value != null && value.getNext() == null &&\n+          NodeUtil.isImmutableValue(value)) {\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n             value.detachFromParent());\n--- a/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java\n   public void testSimpleFunctionCall() {\n     test(\"var a = String(23)\", \"var a = '' + 23\");\n     test(\"var a = String('hello')\", \"var a = '' + 'hello'\");\n+    testSame(\"var a = String('hello', bar());\");\n+    testSame(\"var a = String({valueOf: function() { return 1; }});\");\n   }\n \n   private static class StringCompareTestCase extends CompilerTestCase {", "timestamp": 1340318736, "metainfo": ""}