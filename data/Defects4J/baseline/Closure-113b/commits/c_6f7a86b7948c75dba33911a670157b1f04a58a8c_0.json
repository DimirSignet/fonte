{"sha": "6f7a86b7948c75dba33911a670157b1f04a58a8c", "log": "Cleanup typed source a little bit by not outputing @return for constructors that have a return type of \"undefined\". These are considered uncallable, so there is no point in annotating it that way. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=48788006", "commit": "\n--- a/src/com/google/javascript/jscomp/TypedCodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/TypedCodeGenerator.java\n     JSType retType = funType.getReturnType();\n     if (retType != null &&\n         !retType.isEmptyType() && // There is no annotation for the empty type.\n-        !funType.isInterface()) { // Interfaces never return a value.\n+        !funType.isInterface() && // Interfaces never return a value.\n+        !(funType.isConstructor() && retType.isVoidType())) {\n       sb.append(\" * \");\n       appendAnnotation(sb, \"return\", retType.toAnnotationString());\n       sb.append(\"\\n\");\n--- a/test/com/google/javascript/jscomp/CodePrinterTest.java\n+++ b/test/com/google/javascript/jscomp/CodePrinterTest.java\n   public void testTypeAnnotations() {\n     assertTypeAnnotations(\n         \"/** @constructor */ function Foo(){}\",\n-        \"/**\\n * @return {undefined}\\n * @constructor\\n */\\n\"\n+        \"/**\\n * @constructor\\n */\\n\"\n         + \"function Foo() {\\n}\\n\");\n   }\n \n \n   public void testTypeAnnotationsAssign() {\n     assertTypeAnnotations(\"/** @constructor */ var Foo = function(){}\",\n-        \"/**\\n * @return {undefined}\\n * @constructor\\n */\\n\"\n+        \"/**\\n * @constructor\\n */\\n\"\n         + \"var Foo = function() {\\n};\\n\");\n   }\n \n     assertTypeAnnotations(\"var a = {};\"\n         + \"/** @constructor */ a.Foo = function(){}\",\n         \"var a = {};\\n\"\n-        + \"/**\\n * @return {undefined}\\n * @constructor\\n */\\n\"\n+        + \"/**\\n * @constructor\\n */\\n\"\n         + \"a.Foo = function() {\\n};\\n\");\n   }\n \n         + \"/** @constructor */ a.Foo = function(){};\"\n         + \"/** @constructor \\n @extends {a.Foo} */ a.Bar = function(){}\",\n         \"var a = {};\\n\"\n-        + \"/**\\n * @return {undefined}\\n * @constructor\\n */\\n\"\n+        + \"/**\\n * @constructor\\n */\\n\"\n         + \"a.Foo = function() {\\n};\\n\"\n-        + \"/**\\n * @return {undefined}\\n * @extends {a.Foo}\\n\"\n+        + \"/**\\n * @extends {a.Foo}\\n\"\n         + \" * @constructor\\n */\\n\"\n         + \"a.Bar = function() {\\n};\\n\");\n   }\n         + \"/** @type {string|undefined} */\"\n         + \"a.Foo.prototype.bar = '';\",\n         \"var a = {};\\n\"\n-        + \"/**\\n * @return {undefined}\\n * @constructor\\n */\\n\"\n+        + \"/**\\n * @constructor\\n */\\n\"\n         + \"a.Foo = function() {\\n};\\n\"\n         + \"/**\\n\"\n         + \" * @param {string} foo\\n\"\n         + \" * @implements {a.I} \\n @implements {a.I2}\\n\"\n         + \"*/ a.Bar = function(){}\",\n         \"var a = {};\\n\"\n-        + \"/**\\n * @return {undefined}\\n * @constructor\\n */\\n\"\n+        + \"/**\\n * @constructor\\n */\\n\"\n         + \"a.Foo = function() {\\n};\\n\"\n         + \"/**\\n * @interface\\n */\\n\"\n         + \"a.I = function() {\\n};\\n\"\n         + \"/**\\n * @interface\\n */\\n\"\n         + \"a.I2 = function() {\\n};\\n\"\n-        + \"/**\\n * @return {undefined}\\n * @extends {a.Foo}\\n\"\n+        + \"/**\\n * @extends {a.Foo}\\n\"\n         + \" * @implements {a.I}\\n\"\n         + \" * @implements {a.I2}\\n * @constructor\\n */\\n\"\n         + \"a.Bar = function() {\\n};\\n\");\n         \"a.Foo = function(){}\",\n         \"var a = {};\\n\" +\n         \"/**\\n\" +\n-        \" * @return {undefined}\\n\" +\n         \" * @constructor\\n\" +\n         \" * @javadispatch\\n\" +\n         \" */\\n\" +\n \n         \"var a = {};\\n\" +\n         \"/**\\n\" +\n-        \" * @return {undefined}\\n\" +\n         \" * @constructor\\n\" +\n         \" */\\n\" +\n         \"a.Foo = function() {\\n\" +\n         \" /**\\n * @constructor\\n */\\nfunction t2() {}\\n\" +\n         \" t1.prototype = t2.prototype}\",\n         \"/**\\n * @return {undefined}\\n */\\nvar x = function() {\\n\" +\n-        \"  /**\\n * @return {undefined}\\n * @constructor\\n */\\n\" +\n+        \"  /**\\n * @constructor\\n */\\n\" +\n         \"function t1() {\\n  }\\n\" +\n-        \"  /**\\n * @return {undefined}\\n * @constructor\\n */\\n\" +\n+        \"  /**\\n * @constructor\\n */\\n\" +\n         \"function t2() {\\n  }\\n\" +\n         \"  t1.prototype = t2.prototype\\n};\\n\"\n     );\n--- a/test/com/google/javascript/jscomp/ExternExportsPassTest.java\n+++ b/test/com/google/javascript/jscomp/ExternExportsPassTest.java\n                     \"};\" +\n                     \"goog.exportSymbol('externalName', internalName)\",\n                     \"/**\\n\" +\n-                    \" * @return {undefined}\\n\" +\n                     \" * @constructor\\n\" +\n                     \" */\\n\" +\n                     \"var externalName = function() {\\n};\\n\");\n         \"goog.exportSymbol('Foo', Foo);\\n\" +\n         \"goog.exportProperty(Foo.prototype, 'm', Foo.prototype.m);\",\n         \"/**\\n\" +\n-        \" * @return {undefined}\\n\" +\n         \" * @constructor\\n\" +\n         \" */\\n\" +\n         \"var Foo = function() {\\n};\\n\" +\n     compileAndCheck(\"/** @constructor */ var a = function() {};\" +\n                     \"goog.exportSymbol('foobar', a)\",\n                     \"/**\\n\" +\n-                    \" * @return {undefined}\\n\" +\n                     \" * @constructor\\n\" +\n                     \" */\\n\" +\n                     \"var foobar = function() {\\n};\\n\");", "timestamp": 1373325953, "metainfo": ""}