{"sha": "f147cca743f4975fc88e26001a8efc74d592cfd1", "log": "fix a logic error in pulling optionality off supertypes.  R=johnlenz DELTA=22  (19 added, 1 deleted, 2 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=56001   ", "commit": "\n--- a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n+++ b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n           new FunctionParamBuilder(typeRegistry);\n       Iterator<Node> oldParams = oldType.getParameters().iterator();\n       boolean warnedAboutArgList = false;\n-      boolean oldParamsNodeHasVarArgs = false;\n+      boolean oldParamsListHitOptArgs = false;\n       for (Node currentParam = paramsParent.getFirstChild();\n            currentParam != null; currentParam = currentParam.getNext()) {\n         if (oldParams.hasNext()) {\n           Node oldParam = oldParams.next();\n           Node newParam = paramBuilder.newParameterFromNode(oldParam);\n \n+          oldParamsListHitOptArgs = oldParamsListHitOptArgs ||\n+              oldParam.isVarArgs() ||\n+              oldParam.isOptionalArg();\n+\n           // The subclass method might right its var_args as individual\n           // arguments.\n           if (currentParam.getNext() != null && newParam.isVarArgs()) {\n             newParam.setVarArgs(false);\n             newParam.setOptionalArg(true);\n-            oldParamsNodeHasVarArgs = true;\n           }\n         } else {\n           warnedAboutArgList |= addParameter(\n               typeRegistry.getNativeType(UNKNOWN_TYPE),\n               warnedAboutArgList,\n               codingConvention.isOptionalParameter(currentParam) ||\n-                  oldParamsNodeHasVarArgs,\n+                  oldParamsListHitOptArgs,\n               codingConvention.isVarArgsParameter(currentParam));\n         }\n       }\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"/** @param {number=} x \\n * @param {...number} y  */ \" +\n         \"SubFoo.prototype.bar = \" +\n         \"    function(x, y) { f(x); }; (new SubFoo()).bar();\",\n+        \"actual parameter 1 of f does not match formal parameter\\n\" +\n+        \"found   : (number|undefined)\\n\" +\n+        \"required: string\");\n+  }\n+\n+  public void testInferredParam6() throws Exception {\n+    reportMissingOverrides = CheckLevel.OFF;\n+    testTypes(\n+        \"/** @param {string} x */ function f(x) {}\" +\n+        \"/** @constructor */ function Foo() {}\" +\n+        \"/** @param {number=} x */ Foo.prototype.bar = function(x) {};\" +\n+        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n+        \"/** @param {number=} x \\n * @param {number=} y */ \" +\n+        \"SubFoo.prototype.bar = \" +\n+        \"    function(x, y) { f(y); };\",\n         \"actual parameter 1 of f does not match formal parameter\\n\" +\n         \"found   : (number|undefined)\\n\" +\n         \"required: string\");", "timestamp": 1279661499, "metainfo": ""}