{"sha": "1b18b43971146c9744f526676971f72589338aef", "log": "Introduce a diagnostic group specifically for invalid casts.  R=nicksantos DELTA=66  (30 added, 0 deleted, 36 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5796   ", "commit": "\n--- a/src/com/google/javascript/jscomp/DiagnosticGroups.java\n+++ b/src/com/google/javascript/jscomp/DiagnosticGroups.java\n \n   public DiagnosticGroups() {}\n \n-  private final static Map<String, DiagnosticGroup> groupsByName =\n+  private static final Map<String, DiagnosticGroup> groupsByName =\n       Maps.newHashMap();\n \n   static DiagnosticGroup registerDeprecatedGroup(String name) {\n   // If a group is suppressible on a per-file basis, it should be added\n   // to parser/ParserConfig.properties\n   static final String DIAGNOSTIC_GROUP_NAMES =\n-      \"accessControls, ambiguousFunctionDecl, checkRegExp, \" +\n+      \"accessControls, ambiguousFunctionDecl, cast, checkRegExp, \" +\n       \"checkTypes, checkVars, const, constantProperty, deprecated, \" +\n       \"duplicateMessage, \" +\n       \"es5Strict, externsValidation, fileoverviewTags, globalThis, \" +\n       \"undefinedNames, undefinedVars, unknownDefines, uselessCode, \" +\n       \"visibility\";\n \n-  public static DiagnosticGroup GLOBAL_THIS =\n+  public static final DiagnosticGroup GLOBAL_THIS =\n       DiagnosticGroups.registerGroup(\"globalThis\",\n           CheckGlobalThis.GLOBAL_THIS);\n \n-  public static DiagnosticGroup DEPRECATED =\n+  public static final DiagnosticGroup DEPRECATED =\n       DiagnosticGroups.registerGroup(\"deprecated\",\n           CheckAccessControls.DEPRECATED_NAME,\n           CheckAccessControls.DEPRECATED_NAME_REASON,\n           CheckAccessControls.DEPRECATED_CLASS,\n           CheckAccessControls.DEPRECATED_CLASS_REASON);\n \n-  public static DiagnosticGroup VISIBILITY =\n+  public static final DiagnosticGroup VISIBILITY =\n       DiagnosticGroups.registerGroup(\"visibility\",\n           CheckAccessControls.BAD_PRIVATE_GLOBAL_ACCESS,\n           CheckAccessControls.BAD_PRIVATE_PROPERTY_ACCESS,\n           CheckAccessControls.PRIVATE_OVERRIDE,\n           CheckAccessControls.VISIBILITY_MISMATCH);\n \n-  public static DiagnosticGroup CONSTANT_PROPERTY =\n+  public static final DiagnosticGroup CONSTANT_PROPERTY =\n       DiagnosticGroups.registerGroup(\"constantProperty\",\n           CheckAccessControls.CONST_PROPERTY_DELETED,\n           CheckAccessControls.CONST_PROPERTY_REASSIGNED_VALUE);\n \n-  public static DiagnosticGroup NON_STANDARD_JSDOC =\n+  public static final DiagnosticGroup NON_STANDARD_JSDOC =\n       DiagnosticGroups.registerGroup(\"nonStandardJsDocs\",\n           RhinoErrorReporter.BAD_JSDOC_ANNOTATION);\n \n       DiagnosticGroups.registerGroup(\"accessControls\",\n           DEPRECATED, VISIBILITY);\n \n-  public static DiagnosticGroup INVALID_CASTS =\n+  public static final DiagnosticGroup INVALID_CASTS =\n       DiagnosticGroups.registerGroup(\"invalidCasts\",\n           TypeValidator.INVALID_CAST);\n \n-  public static DiagnosticGroup FILEOVERVIEW_JSDOC =\n+  public static final DiagnosticGroup FILEOVERVIEW_JSDOC =\n       DiagnosticGroups.registerDeprecatedGroup(\"fileoverviewTags\");\n \n-  public static DiagnosticGroup STRICT_MODULE_DEP_CHECK =\n+  public static final DiagnosticGroup STRICT_MODULE_DEP_CHECK =\n       DiagnosticGroups.registerGroup(\"strictModuleDepCheck\",\n           VarCheck.STRICT_MODULE_DEP_ERROR,\n           CheckGlobalNames.STRICT_MODULE_DEP_QNAME);\n \n-  public static DiagnosticGroup VIOLATED_MODULE_DEP =\n+  public static final DiagnosticGroup VIOLATED_MODULE_DEP =\n       DiagnosticGroups.registerGroup(\"violatedModuleDep\",\n           VarCheck.VIOLATED_MODULE_DEP_ERROR);\n \n           VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR,\n           VarCheck.UNDEFINED_EXTERN_VAR_ERROR);\n \n-  public static DiagnosticGroup AMBIGUOUS_FUNCTION_DECL =\n+  public static final DiagnosticGroup AMBIGUOUS_FUNCTION_DECL =\n       DiagnosticGroups.registerGroup(\"ambiguousFunctionDecl\",\n           VariableReferenceCheck.AMBIGUOUS_FUNCTION_DECL);\n \n-  public static DiagnosticGroup UNKNOWN_DEFINES =\n+  public static final DiagnosticGroup UNKNOWN_DEFINES =\n       DiagnosticGroups.registerGroup(\"unknownDefines\",\n           ProcessDefines.UNKNOWN_DEFINE_WARNING);\n \n-  public static DiagnosticGroup TWEAKS =\n+  public static final DiagnosticGroup TWEAKS =\n       DiagnosticGroups.registerGroup(\"tweakValidation\",\n           ProcessTweaks.INVALID_TWEAK_DEFAULT_VALUE_WARNING,\n           ProcessTweaks.TWEAK_WRONG_GETTER_TYPE_WARNING,\n           ProcessTweaks.UNKNOWN_TWEAK_WARNING);\n \n-  public static DiagnosticGroup MISSING_PROPERTIES =\n+  public static final DiagnosticGroup MISSING_PROPERTIES =\n       DiagnosticGroups.registerGroup(\"missingProperties\",\n           TypeCheck.INEXISTENT_PROPERTY);\n \n   // TODO: add more IE specific checks here.\n-  public static DiagnosticGroup INTERNET_EXPLORER_CHECKS =\n+  public static final DiagnosticGroup INTERNET_EXPLORER_CHECKS =\n       DiagnosticGroups.registerGroup(\"internetExplorerChecks\",\n           RhinoErrorReporter.TRAILING_COMMA);\n \n-  public static DiagnosticGroup UNDEFINED_VARIABLES =\n+  public static final DiagnosticGroup UNDEFINED_VARIABLES =\n       DiagnosticGroups.registerGroup(\"undefinedVars\",\n           VarCheck.UNDEFINED_VAR_ERROR);\n \n-  public static DiagnosticGroup UNDEFINED_NAMES =\n+  public static final DiagnosticGroup UNDEFINED_NAMES =\n       DiagnosticGroups.registerGroup(\"undefinedNames\",\n           CheckGlobalNames.UNDEFINED_NAME_WARNING);\n \n-  public static DiagnosticGroup DEBUGGER_STATEMENT_PRESENT =\n+  public static final DiagnosticGroup DEBUGGER_STATEMENT_PRESENT =\n       DiagnosticGroups.registerGroup(\"checkDebuggerStatement\",\n           CheckDebuggerStatement.DEBUGGER_STATEMENT_PRESENT);\n \n-  public static DiagnosticGroup CHECK_REGEXP =\n+  public static final DiagnosticGroup CHECK_REGEXP =\n       DiagnosticGroups.registerGroup(\"checkRegExp\",\n           CheckRegExp.REGEXP_REFERENCE,\n           CheckRegExp.MALFORMED_REGEXP);\n \n-  public static DiagnosticGroup CHECK_TYPES =\n+  public static final DiagnosticGroup CHECK_TYPES =\n       DiagnosticGroups.registerGroup(\"checkTypes\",\n           TypeValidator.ALL_DIAGNOSTICS,\n           TypeCheck.ALL_DIAGNOSTICS);\n \n-  public static DiagnosticGroup CHECK_VARIABLES =\n+  public static final DiagnosticGroup CHECK_VARIABLES =\n       DiagnosticGroups.registerGroup(\"checkVars\",\n           VarCheck.UNDEFINED_VAR_ERROR,\n           SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);\n \n-  public static DiagnosticGroup CHECK_USELESS_CODE =\n+  public static final DiagnosticGroup CHECK_USELESS_CODE =\n       DiagnosticGroups.registerGroup(\"uselessCode\",\n           CheckSideEffects.USELESS_CODE_ERROR,\n           CheckUnreachableCode.UNREACHABLE_CODE);\n \n-  public static DiagnosticGroup CONST =\n+  public static final DiagnosticGroup CONST =\n       DiagnosticGroups.registerGroup(\"const\",\n           CheckAccessControls.CONST_PROPERTY_DELETED,\n           CheckAccessControls.CONST_PROPERTY_REASSIGNED_VALUE,\n           ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n \n-  public static DiagnosticGroup TYPE_INVALIDATION =\n+  public static final DiagnosticGroup TYPE_INVALIDATION =\n       DiagnosticGroups.registerGroup(\"typeInvalidation\",\n           DisambiguateProperties.Warnings.INVALIDATION);\n \n-  public static DiagnosticGroup DUPLICATE_VARS =\n+  public static final DiagnosticGroup DUPLICATE_VARS =\n       DiagnosticGroups.registerGroup(\"duplicate\",\n           SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR,\n           TypeValidator.DUP_VAR_DECLARATION);\n \n-  public static DiagnosticGroup ES5_STRICT =\n+  public static final DiagnosticGroup ES5_STRICT =\n       DiagnosticGroups.registerGroup(\"es5Strict\",\n           ControlStructureCheck.USE_OF_WITH,\n           StrictModeCheck.UNKNOWN_VARIABLE,\n           StrictModeCheck.DELETE_VARIABLE,\n           StrictModeCheck.DUPLICATE_OBJECT_KEY);\n \n-  public static DiagnosticGroup CHECK_PROVIDES =\n+  public static final DiagnosticGroup CHECK_PROVIDES =\n       DiagnosticGroups.registerGroup(\"checkProvides\",\n           CheckProvides.MISSING_PROVIDE_WARNING);\n \n-  public static DiagnosticGroup DUPLICATE_MESSAGE =\n+  public static final DiagnosticGroup DUPLICATE_MESSAGE =\n       DiagnosticGroups.registerGroup(\"duplicateMessage\",\n           JsMessageVisitor.MESSAGE_DUPLICATE_KEY);\n \n-  public static DiagnosticGroup MISPLACED_TYPE_ANNOTATION =\n+  public static final DiagnosticGroup MISPLACED_TYPE_ANNOTATION =\n       DiagnosticGroups.registerGroup(\"misplacedTypeAnnotation\",\n           RhinoErrorReporter.MISPLACED_TYPE_ANNOTATION);\n+\n+  public static final DiagnosticGroup CAST =\n+      DiagnosticGroups.registerGroup(\"cast\",\n+          TypeValidator.INVALID_CAST);\n \n   /**\n    * Adds warning levels by name.\n--- a/test/com/google/javascript/jscomp/IntegrationTest.java\n+++ b/test/com/google/javascript/jscomp/IntegrationTest.java\n         \"/** @constructor\\n\" +\n         \" *  @suppress{checkProvides} */\\n\" +\n         \"function f() {}\");\n+  }\n+\n+  public void testSuppressCastWarning() {\n+    CompilerOptions options = createCompilerOptions();\n+    options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CheckLevel.WARNING);\n+\n+    normalizeResults = true;\n+\n+    test(options,\n+        \"function f() { var xyz = /** @type {string} */ (0); }\",\n+        DiagnosticType.warning(\n+            \"JSC_INVALID_CAST\", \"invalid cast\"));\n+\n+    testSame(options,\n+        \"/** @suppress{cast} */\\n\" +\n+        \"function f() { var xyz = /** @type {string} */ (0); }\");\n   }\n \n   public void testRenamePrefix() {\n     WarningLevel warnings = WarningLevel.VERBOSE;\n     warnings.setOptionsForWarningLevel(options);\n \n-    int numAdds = 5000;\n+    int numAdds = 4750;\n     StringBuilder original = new StringBuilder(\"var x = 0\");\n     for (int i = 0; i < numAdds; i++) {\n       original.append(\" + 1\");\n--- a/test/com/google/javascript/jscomp/IntegrationTestCase.java\n+++ b/test/com/google/javascript/jscomp/IntegrationTestCase.java\n         + \"/** @constructor\\n * @nosideeffects */ function Widget() {}\\n\"\n         + \"/** @modifies {this} */ Widget.prototype.go = function() {};\\n\"\n         + \"/** @return {string} */ var widgetToken = function() {};\\n\"\n-        + \"function alert(x) {}\"\n+        + \"function alert(message) {}\"\n         + \"function Object() {}\"\n         + \"Object.seal;\"));\n \n \n   // The most recently used compiler.\n   protected Compiler lastCompiler;\n+\n+  protected boolean normalizeResults = false;\n \n   @Override\n   public void setUp() {\n     externs = DEFAULT_EXTERNS;\n     lastCompiler = null;\n+    normalizeResults = false;\n   }\n \n   protected void testSame(CompilerOptions options, String original) {\n         0, compiler.getErrors().length + compiler.getWarnings().length);\n \n     Node root = compiler.getRoot().getLastChild();\n-    Node expectedRoot = parse(compiled, options);\n+    Node expectedRoot = parse(compiled, options, normalizeResults);\n     String explanation = expectedRoot.checkTreeEquals(root);\n     assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n         \"\\nResult: \" + compiler.toSource(root) +\n \n     if (compiled != null) {\n       Node root = compiler.getRoot().getLastChild();\n-      Node expectedRoot = parse(compiled, options);\n+      Node expectedRoot = parse(compiled, options, normalizeResults);\n       String explanation = expectedRoot.checkTreeEquals(root);\n       assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n           \"\\nResult: \" + compiler.toSource(root) +\n \n     if (compiled != null) {\n       Node root = compiler.getRoot().getLastChild();\n-      Node expectedRoot = parse(compiled, options);\n+      Node expectedRoot = parse(compiled, options, normalizeResults);\n       String explanation = expectedRoot.checkTreeEquals(root);\n       assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n           \"\\nResult: \" + compiler.toSource(root) +\n     return compiler;\n   }\n \n-  protected Node parse(String[] original, CompilerOptions options) {\n+  protected Node parse(\n+      String[] original, CompilerOptions options, boolean normalize) {\n     Compiler compiler = new Compiler();\n     List<SourceFile> inputs = Lists.newArrayList();\n     for (int i = 0; i < original.length; i++) {\n \n     (new CreateSyntheticBlocks(\n         compiler, \"synStart\", \"synEnd\")).process(externs, n);\n+\n+    if (normalize) {\n+      compiler.normalize();\n+    }\n+\n     return n;\n   }\n ", "timestamp": 1352486481, "metainfo": ""}