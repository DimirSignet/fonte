{"sha": "c51a4ee5753801be528dc640ad84a00862240e22", "log": "Add type-checking for inline type docs ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=42560295", "commit": "\n--- a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n+++ b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n       if (info != null && info.hasParameterType(argumentName)) {\n         parameterType =\n             info.getParameterType(argumentName).evaluate(scope, typeRegistry);\n+      } else if (arg.getJSDocInfo() != null && arg.getJSDocInfo().hasType()) {\n+        parameterType =\n+            arg.getJSDocInfo().getType().evaluate(scope, typeRegistry);\n       } else if (oldParameterType != null &&\n           oldParameterType.getJSType() != null) {\n         parameterType = oldParameterType.getJSType();\n--- a/test/com/google/javascript/jscomp/FunctionTypeBuilderTest.java\n+++ b/test/com/google/javascript/jscomp/FunctionTypeBuilderTest.java\n         + \"expected: function (new:Function, ...[*]): ?\");\n   }\n \n+  public void testInlineJsDoc() throws Exception {\n+    testSame(\n+        \"/** @return {number} */ function f(/** string */ x) { return x; }\", \"\",\n+        TypeValidator.TYPE_MISMATCH_WARNING,\n+        \"inconsistent return type\\n\" +\n+        \"found   : string\\n\" +\n+        \"required: number\");\n+  }\n+\n+  public void testInlineJsDoc2() throws Exception {\n+    testSame(\n+        \"/** @return {T} \\n @template T */ \" +\n+        \"function f(/** T */ x) { return x; }\" +\n+        \"/** @type {string} */ var x = f(1);\", \"\",\n+        TypeValidator.TYPE_MISMATCH_WARNING,\n+        \"initializing variable\\n\" +\n+        \"found   : number\\n\" +\n+        \"required: string\");\n+  }\n+\n   public void testExternSubTypes() throws Exception {\n     testSame(ALL_NATIVE_EXTERN_TYPES, \"\", null);\n ", "timestamp": 1361319502, "metainfo": ""}