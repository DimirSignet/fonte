{"sha": "929e465b3dae1d1659258426578ed5f4d960a1fb", "log": "Make GatherCharacterEncodingBias propertie aware. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=45329873", "commit": "\n--- a/src/com/google/javascript/jscomp/GatherCharacterEncodingBias.java\n+++ b/src/com/google/javascript/jscomp/GatherCharacterEncodingBias.java\n   private final NameGenerator nameGenerator;\n   private final AbstractCompiler compiler;\n   private final boolean renameGlobaVars;\n+  private final boolean renameProperties;\n+\n+  public GatherCharacterEncodingBias(\n+      final AbstractCompiler compiler, final NameGenerator ng,\n+      boolean renameGlobalVars, boolean renameProperties) {\n+    this.compiler = compiler;\n+    this.nameGenerator = ng;\n+    this.renameGlobaVars = renameGlobalVars;\n+    this.renameProperties = renameProperties;\n+  }\n \n   public GatherCharacterEncodingBias(\n       final AbstractCompiler compiler, final NameGenerator ng,\n       boolean renameGlobalVars) {\n-    this.compiler = compiler;\n-    this.nameGenerator = ng;\n-    this.renameGlobaVars = renameGlobalVars;\n+    this(compiler, ng, renameGlobalVars, true);\n   }\n \n   @Override\n       // renaming.\n       case Token.NAME:\n         visitName(t, n);\n-\n+        return;\n+\n+      case Token.GETPROP:\n+        visitGetProp(n);\n         return;\n \n       case Token.FUNCTION:\n       case Token.VAR:\n         nameGenerator.favors(\"var\");\n         return;\n-      // TODO(user): Deal with getProp..etc.\n       case Token.STRING:\n-        nameGenerator.favors(n.getString());\n+        if (!parent.isGetProp()) {\n+          nameGenerator.favors(n.getString());\n+        }\n         return;\n       case Token.STRING_KEY:\n+        // TODO(user): Currently not taking into accout of quoted properties\n+        // and 'advanced mode' stuff.\n         nameGenerator.favors(n.getString());\n         return;\n       case Token.TRY:\n         nameGenerator.favors(\"debugger\");\n         return;\n       case Token.GETTER_DEF:\n-        nameGenerator.favors(\"get\");\n+        visitGetterSetterDef(n, \"get\");\n         return;\n       case Token.SETTER_DEF:\n-        nameGenerator.favors(\"set\");\n+        visitGetterSetterDef(n, \"set\");\n         return;\n       case Token.NUMBER:\n         // TODO(user): This has to share some code with the code generator\n         // to figure out how the number will eventually be printed.\n         return;\n-\n     }\n   }\n \n       nameGenerator.favors(name);\n     }\n   }\n+\n+  private void visitGetProp(Node n) {\n+    Preconditions.checkArgument(n.getType() == Token.GETPROP);\n+    if (!renameProperties) {\n+      nameGenerator.favors(n.getLastChild().getString());\n+    }\n+  }\n+\n+  private void visitGetterSetterDef(Node n, String method) {\n+    nameGenerator.favors(method);\n+    if (!renameProperties) {\n+      nameGenerator.favors(n.getString());\n+    }\n+  }\n }\n--- a/test/com/google/javascript/jscomp/GatherCharacterEncodingBiasTest.java\n+++ b/test/com/google/javascript/jscomp/GatherCharacterEncodingBiasTest.java\n \n   private NameGenerator generator;\n   private boolean renameGlobalVars;\n+  private boolean renameProperties;\n \n   @Override\n   protected CompilerPass getProcessor(Compiler compiler) {\n     generator = new NameGenerator(new HashSet<String>(0), \"\", null);\n     return new GatherCharacterEncodingBias(\n-        compiler, generator, renameGlobalVars);\n+        compiler, generator, renameGlobalVars, renameProperties);\n   }\n \n   @Override\n   protected void setUp() {\n     renameGlobalVars = true;\n+    renameProperties = true;\n   }\n \n   @Override\n     generator.restartNaming();\n     assertNotSame(\"M\", generator.generateNextName());\n   }\n+\n+  public void testGatheringProperties1() {\n+    renameProperties = false;\n+    testSame(\"a.mmm.MMMMM\");\n+    generator.restartNaming();\n+    assertEquals(\"M\", generator.generateNextName());\n+    assertEquals(\"m\", generator.generateNextName());\n+    assertEquals(\"a\", generator.generateNextName());\n+  }\n+\n+  public void testGatheringProperties2() {\n+    renameProperties = true;\n+    testSame(\"mmm.MMMMM\");\n+    generator.restartNaming();\n+    assertNotSame(\"M\", generator.generateNextName());\n+  }\n+\n+  public void testGatheringMixed() {\n+    renameGlobalVars = false;\n+    renameProperties = true;\n+    testSame(\"mmm.MMMMMMMMMMMMMMM\");\n+    generator.restartNaming();\n+    assertEquals(\"m\", generator.generateNextName());\n+    assertNotSame(\"M\", generator.generateNextName());\n+  }\n+\n+  public void testGatheringGetter() {\n+    renameProperties = false;\n+    testSame(\"({get ZZZZZ(){return 1}})\");\n+    generator.restartNaming();\n+    assertEquals(\"Z\", generator.generateNextName());\n+  }\n+\n+  public void testGatheringSetter() {\n+    renameProperties = false;\n+    testSame(\"({set ZZZZZ(z){}})\");\n+    generator.restartNaming();\n+    assertEquals(\"Z\", generator.generateNextName());\n+  }\n }", "timestamp": 1366235053, "metainfo": ""}