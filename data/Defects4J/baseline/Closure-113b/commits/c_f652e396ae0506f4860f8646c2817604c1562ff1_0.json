{"sha": "f652e396ae0506f4860f8646c2817604c1562ff1", "log": "Minor fixes for the Pretty Printer. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=52580327", "commit": "\n--- a/src/com/google/javascript/jscomp/CodeConsumer.java\n+++ b/src/com/google/javascript/jscomp/CodeConsumer.java\n       // is valid and should print like\n       // / // / /\n       append(\" \");\n+    } else if (c == '\"' && isWordChar(getLastChar())) {\n+      maybeInsertSpace();\n     }\n \n     append(newcode);\n   }\n \n   /**\n+   * Allows a consumer to insert spaces in locations where it is unnecessary\n+   * but may improve the readability of the code. This will be called in such\n+   * places as after a statement and before opening parantheses, or after the\n+   * end of a if block before the start of an else block.\n+   */\n+  void maybeInsertSpace() {}\n+\n+  /**\n    * @return Whether the a line break can be added after the specified BLOCK.\n    */\n   boolean breakAfterBlockFor(Node n, boolean statementContext) {\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n         }\n \n         if (childCount == 3) {\n+          cc.maybeInsertSpace();\n           add(\"finally\");\n           add(last, Context.PRESERVE_BLOCK);\n         }\n \n       case Token.CATCH:\n         Preconditions.checkState(childCount == 2);\n-        add(\"catch(\");\n+        cc.maybeInsertSpace();\n+        add(\"catch\");\n+        cc.maybeInsertSpace();\n+        add(\"(\");\n         add(first);\n         add(\")\");\n         add(last, Context.PRESERVE_BLOCK);\n \n       case Token.FOR:\n         if (childCount == 4) {\n-          add(\"for(\");\n+          add(\"for\");\n+          cc.maybeInsertSpace();\n+          add(\"(\");\n           if (first.isVar()) {\n             add(first, Context.IN_FOR_INIT_CLAUSE);\n           } else {\n               last, getContextForNonEmptyExpression(context), false);\n         } else {\n           Preconditions.checkState(childCount == 3);\n-          add(\"for(\");\n+          add(\"for\");\n+          cc.maybeInsertSpace();\n+          add(\"(\");\n           add(first);\n           add(\"in\");\n           add(first.getNext());\n         Preconditions.checkState(childCount == 2);\n         add(\"do\");\n         addNonEmptyStatement(first, Context.OTHER, false);\n-        add(\"while(\");\n+        cc.maybeInsertSpace();\n+        add(\"while\");\n+        cc.maybeInsertSpace();\n+        add(\"(\");\n         add(last);\n         add(\")\");\n         cc.endStatement();\n \n       case Token.WHILE:\n         Preconditions.checkState(childCount == 2);\n-        add(\"while(\");\n+        add(\"while\");\n+        cc.maybeInsertSpace();\n+        add(\"(\");\n         add(first);\n         add(\")\");\n         addNonEmptyStatement(\n           cc.beginBlock();\n         }\n \n-        add(\"if(\");\n+        add(\"if\");\n+        cc.maybeInsertSpace();\n+        add(\"(\");\n         add(first);\n         add(\")\");\n \n         if (hasElse) {\n           addNonEmptyStatement(\n               first.getNext(), Context.BEFORE_DANGLING_ELSE, false);\n+          cc.maybeInsertSpace();\n           add(\"else\");\n           addNonEmptyStatement(\n               last, getContextForNonEmptyExpression(context), false);\n         }\n         add(first);\n         add(\":\");\n+        if (!last.isBlock()) {\n+          cc.maybeInsertSpace();\n+        }\n         addNonEmptyStatement(\n             last, getContextForNonEmptyExpression(context), true);\n         break;\n--- a/src/com/google/javascript/jscomp/CodePrinter.java\n+++ b/src/com/google/javascript/jscomp/CodePrinter.java\n \n     @Override\n     void appendBlockEnd() {\n+      maybeEndStatement();\n       endLine();\n       indent--;\n       append(\"}\");\n       // so it is printed on a separate line.  This allows breakpoints to be\n       // placed on the statement.\n       return true;\n+    }\n+\n+    @Override\n+    void maybeInsertSpace() {\n+      add(\" \");\n     }\n \n     /**\n--- a/test/com/google/javascript/jscomp/CodePrinterTest.java\n+++ b/test/com/google/javascript/jscomp/CodePrinterTest.java\n     // Check we correctly handle putting brackets around all if clauses so\n     // we can put breakpoints inside statements.\n     assertPrettyPrint(\"if (1) {}\",\n-        \"if(1) {\\n\" +\n+        \"if (1) {\\n\" +\n         \"}\\n\");\n     assertPrettyPrint(\"if (1) {alert(\\\"\\\");}\",\n-        \"if(1) {\\n\" +\n-        \"  alert(\\\"\\\")\\n\" +\n+        \"if (1) {\\n\" +\n+        \"  alert(\\\"\\\");\\n\" +\n         \"}\\n\");\n     assertPrettyPrint(\"if (1)alert(\\\"\\\");\",\n-        \"if(1) {\\n\" +\n-        \"  alert(\\\"\\\")\\n\" +\n+        \"if (1) {\\n\" +\n+        \"  alert(\\\"\\\");\\n\" +\n         \"}\\n\");\n     assertPrettyPrint(\"if (1) {alert();alert();}\",\n-        \"if(1) {\\n\" +\n-        \"  alert();\\n\" +\n-        \"  alert()\\n\" +\n+        \"if (1) {\\n\" +\n+        \"  alert();\\n\" +\n+        \"  alert();\\n\" +\n         \"}\\n\");\n \n     // Don't add blocks if they weren't there already.\n     assertPrettyPrint(\"label: alert();\",\n-        \"label:alert();\\n\");\n+        \"label: alert();\\n\");\n \n     // But if statements and loops get blocks automagically.\n     assertPrettyPrint(\"if (1) alert();\",\n-        \"if(1) {\\n\" +\n-        \"  alert()\\n\" +\n+        \"if (1) {\\n\" +\n+        \"  alert();\\n\" +\n         \"}\\n\");\n     assertPrettyPrint(\"for (;;) alert();\",\n-        \"for(;;) {\\n\" +\n-        \"  alert()\\n\" +\n+        \"for (;;) {\\n\" +\n+        \"  alert();\\n\" +\n         \"}\\n\");\n \n     assertPrettyPrint(\"while (1) alert();\",\n-        \"while(1) {\\n\" +\n-        \"  alert()\\n\" +\n+        \"while (1) {\\n\" +\n+        \"  alert();\\n\" +\n         \"}\\n\");\n \n     // Do we put else clauses in blocks?\n     assertPrettyPrint(\"if (1) {} else {alert(a);}\",\n-        \"if(1) {\\n\" +\n-        \"}else {\\n  alert(a)\\n}\\n\");\n+        \"if (1) {\\n\" +\n+        \"} else {\\n  alert(a);\\n}\\n\");\n \n     // Do we add blocks to else clauses?\n     assertPrettyPrint(\"if (1) alert(a); else alert(b);\",\n-        \"if(1) {\\n\" +\n-        \"  alert(a)\\n\" +\n-        \"}else {\\n\" +\n-        \"  alert(b)\\n\" +\n+        \"if (1) {\\n\" +\n+        \"  alert(a);\\n\" +\n+        \"} else {\\n\" +\n+        \"  alert(b);\\n\" +\n         \"}\\n\");\n \n     // Do we put for bodies in blocks?\n     assertPrettyPrint(\"for(;;) { alert();}\",\n-        \"for(;;) {\\n\" +\n-         \"  alert()\\n\" +\n+        \"for (;;) {\\n\" +\n+         \"  alert();\\n\" +\n          \"}\\n\");\n     assertPrettyPrint(\"for(;;) {}\",\n-        \"for(;;) {\\n\" +\n+        \"for (;;) {\\n\" +\n         \"}\\n\");\n     assertPrettyPrint(\"for(;;) { alert(); alert(); }\",\n-        \"for(;;) {\\n\" +\n-        \"  alert();\\n\" +\n-        \"  alert()\\n\" +\n+        \"for (;;) {\\n\" +\n+        \"  alert();\\n\" +\n+        \"  alert();\\n\" +\n         \"}\\n\");\n \n     // How about do loops?\n     assertPrettyPrint(\"do { alert(); } while(true);\",\n         \"do {\\n\" +\n-        \"  alert()\\n\" +\n-        \"}while(true);\\n\");\n+        \"  alert();\\n\" +\n+        \"} while (true);\\n\");\n \n     // label?\n     assertPrettyPrint(\"myLabel: { alert();}\",\n         \"myLabel: {\\n\" +\n-        \"  alert()\\n\" +\n+        \"  alert();\\n\" +\n         \"}\\n\");\n \n     // Don't move the label on a loop, because then break {label} and\n     // continue {label} won't work.\n     assertPrettyPrint(\"myLabel: for(;;) continue myLabel;\",\n-        \"myLabel:for(;;) {\\n\" +\n-        \"  continue myLabel\\n\" +\n+        \"myLabel: for (;;) {\\n\" +\n+        \"  continue myLabel;\\n\" +\n         \"}\\n\");\n \n     assertPrettyPrint(\"var a;\", \"var a;\\n\");\n+\n+    // There must be a space before and after binary operators.\n+    assertPrettyPrint(\"var foo = 3+5;\",\n+        \"var foo = 3 + 5;\\n\");\n+\n+    // There should be spaces between the ternary operator\n+    assertPrettyPrint(\"var foo = bar ? 3 : null;\",\n+        \"var foo = bar ? 3 : null;\\n\");\n+\n+    // Ensure that string literals after return and throw have a space.\n+    assertPrettyPrint(\"function foo() { return \\\"foo\\\"; }\",\n+        \"function foo() {\\n  return \\\"foo\\\";\\n}\\n\");\n+    assertPrettyPrint(\"throw \\\"foo\\\";\",\n+        \"throw \\\"foo\\\";\");\n+\n+    // Test that loops properly have spaces inserted.\n+    assertPrettyPrint(\"do{ alert(); } while(true);\",\n+        \"do {\\n  alert();\\n} while (true);\\n\");\n+    assertPrettyPrint(\"while(true) { alert(); }\",\n+        \"while (true) {\\n  alert();\\n}\\n\");\n   }\n \n   public void testPrettyPrinter2() {\n     assertPrettyPrint(\n         \"if(true) f();\",\n-        \"if(true) {\\n\" +\n-        \"  f()\\n\" +\n+        \"if (true) {\\n\" +\n+        \"  f();\\n\" +\n         \"}\\n\");\n \n     assertPrettyPrint(\n         \"if (true) { f() } else { g() }\",\n-        \"if(true) {\\n\" +\n-        \"  f()\\n\" +\n-        \"}else {\\n\" +\n-        \"  g()\\n\" +\n+        \"if (true) {\\n\" +\n+        \"  f();\\n\" +\n+        \"} else {\\n\" +\n+        \"  g();\\n\" +\n         \"}\\n\");\n \n     assertPrettyPrint(\n         \"if(true) f(); for(;;) g();\",\n-        \"if(true) {\\n\" +\n-        \"  f()\\n\" +\n+        \"if (true) {\\n\" +\n+        \"  f();\\n\" +\n         \"}\\n\" +\n-        \"for(;;) {\\n\" +\n-        \"  g()\\n\" +\n+        \"for (;;) {\\n\" +\n+        \"  g();\\n\" +\n         \"}\\n\");\n   }\n \n     assertPrettyPrint(\n         \"try {} catch(e) {}if (1) {alert();alert();}\",\n         \"try {\\n\" +\n-        \"}catch(e) {\\n\" +\n+        \"} catch (e) {\\n\" +\n         \"}\\n\" +\n-        \"if(1) {\\n\" +\n-        \"  alert();\\n\" +\n-        \"  alert()\\n\" +\n+        \"if (1) {\\n\" +\n+        \"  alert();\\n\" +\n+        \"  alert();\\n\" +\n         \"}\\n\");\n \n     assertPrettyPrint(\n         \"try {} finally {}if (1) {alert();alert();}\",\n         \"try {\\n\" +\n-        \"}finally {\\n\" +\n+        \"} finally {\\n\" +\n         \"}\\n\" +\n-        \"if(1) {\\n\" +\n-        \"  alert();\\n\" +\n-        \"  alert()\\n\" +\n+        \"if (1) {\\n\" +\n+        \"  alert();\\n\" +\n+        \"  alert();\\n\" +\n         \"}\\n\");\n \n     assertPrettyPrint(\n         \"try {} catch(e) {} finally {} if (1) {alert();alert();}\",\n         \"try {\\n\" +\n-        \"}catch(e) {\\n\" +\n-        \"}finally {\\n\" +\n+        \"} catch (e) {\\n\" +\n+        \"} finally {\\n\" +\n         \"}\\n\" +\n-        \"if(1) {\\n\" +\n-        \"  alert();\\n\" +\n-        \"  alert()\\n\" +\n+        \"if (1) {\\n\" +\n+        \"  alert();\\n\" +\n+        \"  alert();\\n\" +\n         \"}\\n\");\n   }\n \n         \"function f() {}if (1) {alert();}\",\n         \"function f() {\\n\" +\n         \"}\\n\" +\n-        \"if(1) {\\n\" +\n-        \"  alert()\\n\" +\n+        \"if (1) {\\n\" +\n+        \"  alert();\\n\" +\n         \"}\\n\");\n \n     assertPrettyPrint(\n         \"var f = function() {};if (1) {alert();}\",\n         \"var f = function() {\\n\" +\n         \"};\\n\" +\n-        \"if(1) {\\n\" +\n-        \"  alert()\\n\" +\n+        \"if (1) {\\n\" +\n+        \"  alert();\\n\" +\n         \"}\\n\");\n \n     assertPrettyPrint(\n         \"(function() {})();if (1) {alert();}\",\n         \"(function() {\\n\" +\n         \"})();\\n\" +\n-        \"if(1) {\\n\" +\n-        \"  alert()\\n\" +\n+        \"if (1) {\\n\" +\n+        \"  alert();\\n\" +\n         \"}\\n\");\n \n     assertPrettyPrint(\n         \"(function() {alert();alert();})();if (1) {alert();}\",\n         \"(function() {\\n\" +\n         \"  alert();\\n\" +\n-        \"  alert()\\n\" +\n+        \"  alert();\\n\" +\n         \"})();\\n\" +\n-        \"if(1) {\\n\" +\n-        \"  alert()\\n\" +\n+        \"if (1) {\\n\" +\n+        \"  alert();\\n\" +\n         \"}\\n\");\n   }\n \n         + \" * @param {string} foo\\n\"\n         + \" * @return {number}\\n\"\n         + \" */\\n\"\n-        + \"a.Foo.prototype.foo = function(foo) {\\n  return 3\\n};\\n\"\n+        + \"a.Foo.prototype.foo = function(foo) {\\n  return 3;\\n};\\n\"\n         + \"/** @type {string} */\\n\"\n         + \"a.Foo.prototype.bar = \\\"\\\";\\n\");\n   }\n         \"function t1() {\\n  }\\n\" +\n         \"  /**\\n * @constructor\\n */\\n\" +\n         \"function t2() {\\n  }\\n\" +\n-        \"  t1.prototype = t2.prototype\\n};\\n\"\n+        \"  t1.prototype = t2.prototype;\\n};\\n\"\n     );\n   }\n ", "timestamp": 1379637904, "metainfo": ""}