{"sha": "8d58355140bfdfbfc85c4629b90ed1d78225b520", "log": "More complicated constraint-matching. Fixes issue 785  R=johnlenz DELTA=55  (33 added, 8 deleted, 14 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5293   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n       return;\n     }\n \n-    ObjectType constraintObj =\n-        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null) {\n-      type.matchConstraint(constraintObj);\n-    }\n+    type.matchConstraint(constraint);\n   }\n \n   /**\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n    * infer that an object literal matches its constraint (much like\n    * how the java compiler does reverse-inference to figure out generics).\n    */\n-  public void matchConstraint(ObjectType constraint) {}\n+  public void matchConstraint(JSType constraint) {}\n }\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n+  public void matchConstraint(JSType constraint) {\n     // We only want to match constraints on anonymous types.\n     if (hasReferenceName()) {\n       return;\n \n     // Handle the case where the constraint object is a record type.\n     //\n-    // param constraintObj {{prop: (number|undefined)}}\n-    // function f(constraintObj) {}\n+    // param constraint {{prop: (number|undefined)}}\n+    // function f(constraint) {}\n     // f({});\n     //\n     // We want to modify the object literal to match the constraint, by\n     // taking any each property on the record and trying to match\n     // properties on this object.\n-    if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n+    if (constraint.isRecordType()) {\n+      matchRecordTypeConstraint(constraint.toObjectType());\n+    } else if (constraint.isUnionType()) {\n+      for (JSType alt : constraint.toMaybeUnionType().getAlternates()) {\n+        if (alt.isRecordType()) {\n+          matchRecordTypeConstraint(alt.toObjectType());\n         }\n       }\n     }\n   }\n+\n+  public void matchRecordTypeConstraint(ObjectType constraintObj) {\n+    for (String prop : constraintObj.getOwnPropertyNames()) {\n+      JSType propType = constraintObj.getPropertyType(prop);\n+      if (!isPropertyTypeDeclared(prop)) {\n+        JSType typeToInfer = propType;\n+        if (!hasProperty(prop)) {\n+          typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+              .getLeastSupertype(propType);\n+        }\n+        defineInferredProperty(prop, typeToInfer, null);\n+      }\n+    }\n+  }\n+\n }\n--- a/src/com/google/javascript/rhino/jstype/ProxyObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/ProxyObjectType.java\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraint) {\n+  public void matchConstraint(JSType constraint) {\n     referencedType.matchConstraint(constraint);\n   }\n \n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n+  public void matchConstraint(JSType constraint) {\n     for (JSType alternate : alternates) {\n-      alternate.matchConstraint(constraintObj);\n+      alternate.matchConstraint(constraint);\n     }\n   }\n \n--- a/test/com/google/javascript/jscomp/TypeInferenceTest.java\n+++ b/test/com/google/javascript/jscomp/TypeInferenceTest.java\n     inFunction(\"var out = 3; if (goog.isNull(this)) out = this;\");\n     verify(\"out\", createUnionType(OBJECT_TYPE, NUMBER_TYPE));\n   }\n+\n+  public void testRecordInference() {\n+    inFunction(\n+        \"/** @param {{a: (boolean|undefined)}|{b: (string|undefined)}} x */\" +\n+        \"function f(x) {}\" +\n+        \"var out = {};\" +\n+        \"f(out);\");\n+    assertEquals(\"{a: (boolean|undefined), b: (string|undefined)}\",\n+        getType(\"out\").toString());\n+  }\n+\n+  public void testIssue785() {\n+    inFunction(\"/** @param {string|{prop: (string|undefined)}} x */\" +\n+               \"function f(x) {}\" +\n+               \"var out = {};\" +\n+               \"f(out);\");\n+    assertEquals(\"{prop: (string|undefined)}\", getType(\"out\").toString());\n+  }\n }", "timestamp": 1343865391, "metainfo": ""}