{"sha": "c21ecf27a0a03c1dc0d265062575589883b22833", "log": "Add wiring to recognise templated interface declarations. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=43567781", "commit": "\n--- a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n+++ b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n       fnType = getOrCreateConstructor();\n     } else if (isInterface) {\n       fnType = typeRegistry.createInterfaceType(\n-          fnName, contents.getSourceNode());\n+          fnName, contents.getSourceNode(), classTypeParameterNames);\n       if (getScopeDeclaredIn().isGlobal() && !fnName.isEmpty()) {\n         typeRegistry.declareType(fnName, fnType.getInstanceType());\n       }\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n   }\n \n   /** Creates an instance for a function that is an interface. */\n-  private FunctionType(JSTypeRegistry registry, String name, Node source) {\n+  private FunctionType(JSTypeRegistry registry, String name, Node source,\n+      TemplateTypeMap typeParameters) {\n     super(registry, name,\n-        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE));\n+        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE),\n+        false, typeParameters);\n     setPrettyPrint(true);\n \n     Preconditions.checkArgument(source == null ||\n \n   /** Creates an instance for a function that is an interface. */\n   static FunctionType forInterface(\n-      JSTypeRegistry registry, String name, Node source) {\n-    return new FunctionType(registry, name, source);\n+      JSTypeRegistry registry, String name, Node source,\n+      TemplateTypeMap typeParameters) {\n+    return new FunctionType(registry, name, source, typeParameters);\n   }\n \n   @Override\n--- a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n+++ b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n    * @param source the node defining this function. Its type\n    *     ({@link Node#getType()}) must be {@link Token#FUNCTION}.\n    */\n-  public FunctionType createInterfaceType(String name, Node source) {\n-    return FunctionType.forInterface(this, name, source);\n+  public FunctionType createInterfaceType(String name, Node source,\n+      ImmutableList<String> typeParameters) {\n+    return createInterfaceTypeInternal(name, source,\n+        createTemplateMapKeys(typeParameters));\n+  }\n+\n+  private FunctionType createInterfaceTypeInternal(String name, Node source,\n+      ImmutableList<TemplateType> typeParameters) {\n+    return FunctionType.forInterface(this, name, source,\n+        createTemplateTypeMap(typeParameters, null));\n   }\n \n   public TemplateType createTemplateType(String name) {\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"required: Object\");\n   }\n \n+  public void testTemplateType9() throws Exception {\n+    // verify interface type parameters are recognised.\n+    testTypes(\n+        \"/** @interface \\n\" +\n+        \" * @classTemplate S,T\\n\" +\n+        \" */\\n\" +\n+        \"function Bar() {}\\n\" +\n+        \"/**\" +\n+        \" * @param {Bar.<T>} bar \\n\" +\n+        \" * @return {T} \\n\" +\n+        \" * @template T\\n\" +\n+        \" */\\n\" +\n+        \"function fn(bar) {}\\n\" +\n+        \"/** @param {Bar.<number>} bar */ function g(bar) {\" +\n+        \"  /** @type {!Object} */ var x = fn(bar);\" +\n+        \"}\",\n+        \"initializing variable\\n\" +\n+        \"found   : number\\n\" +\n+        \"required: Object\");\n+  }\n+\n   public void disable_testBadTemplateType4() throws Exception {\n     // TODO(johnlenz): Add a check for useless of template types.\n     // Unless there are at least two references to a Template type in\n--- a/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java\n   }\n \n   public void testSubtypeWithInterfaceThisType() {\n-    FunctionType iface = registry.createInterfaceType(\"I\", null);\n+    FunctionType iface = registry.createInterfaceType(\"I\", null,\n+        ImmutableList.<String>of());\n     FunctionType ifaceReturnBoolean = new FunctionBuilder(registry)\n         .withParamsNode(registry.createParameters())\n         .withTypeOfThis(iface.getInstanceType())\n   }\n \n   public void testInterfacePrototypeChain1() {\n-    FunctionType iface = registry.createInterfaceType(\"I\", null);\n+    FunctionType iface = registry.createInterfaceType(\"I\", null,\n+        ImmutableList.<String>of());\n     assertTypeEquals(\n         iface.getPrototype(),\n         iface.getInstanceType().getImplicitPrototype());\n   }\n \n   public void testInterfacePrototypeChain2() {\n-    FunctionType iface = registry.createInterfaceType(\"I\", null);\n+    FunctionType iface = registry.createInterfaceType(\"I\", null,\n+        ImmutableList.<String>of());\n     iface.getPrototype().defineDeclaredProperty(\n         \"numberProp\", NUMBER_TYPE, null);\n \n-    FunctionType subIface = registry.createInterfaceType(\"SubI\", null);\n+    FunctionType subIface = registry.createInterfaceType(\"SubI\", null,\n+        ImmutableList.<String>of());\n     subIface.setExtendedInterfaces(\n         Lists.<ObjectType>newArrayList(iface.getInstanceType()));\n     assertTypeEquals(\n   }\n \n   public void testSetImplementsOnInterface() {\n-    FunctionType iface = registry.createInterfaceType(\"I\", null);\n-    FunctionType subIface = registry.createInterfaceType(\"SubI\", null);\n+    FunctionType iface = registry.createInterfaceType(\"I\", null,\n+        ImmutableList.<String>of());\n+    FunctionType subIface = registry.createInterfaceType(\"SubI\", null,\n+        ImmutableList.<String>of());\n     try {\n       subIface.setImplementedInterfaces(\n           ImmutableList.of(iface.getInstanceType()));\n--- a/test/com/google/javascript/rhino/jstype/JSTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/JSTypeTest.java\n     subclassCtor.setPrototypeBasedOn(unresolvedNamedType);\n     subclassOfUnresolvedNamedType = subclassCtor.getInstanceType();\n \n-    interfaceType = FunctionType.forInterface(registry, \"Interface\", null);\n+    interfaceType = FunctionType.forInterface(registry, \"Interface\", null,\n+        registry.createTemplateTypeMap(null, null));\n     interfaceInstType = interfaceType.getInstanceType();\n \n     subInterfaceType = FunctionType.forInterface(\n-        registry, \"SubInterface\", null);\n+        registry, \"SubInterface\", null,\n+        registry.createTemplateTypeMap(null, null));\n     subInterfaceType.setExtendedInterfaces(\n         Lists.<ObjectType>newArrayList(interfaceInstType));\n     subInterfaceInstType = subInterfaceType.getInstanceType();", "timestamp": 1362764552, "metainfo": ""}