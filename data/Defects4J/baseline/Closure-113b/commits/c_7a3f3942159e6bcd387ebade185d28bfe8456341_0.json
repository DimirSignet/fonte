{"sha": "7a3f3942159e6bcd387ebade185d28bfe8456341", "log": "Add some experimental extra statement fusion. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=44757683", "commit": "\n--- a/src/com/google/javascript/jscomp/StatementFusion.java\n+++ b/src/com/google/javascript/jscomp/StatementFusion.java\n  * goodies in {@link PeepholeSubstituteAlternateSyntax}.\n  *\n  */\n-public class StatementFusion extends AbstractPeepholeOptimization {\n+class StatementFusion extends AbstractPeepholeOptimization {\n+  // TODO(user): We probably need to test this more. The current compiler\n+  // assumes that there are more ;'s than ,'s in a real program. However,\n+  // this assumption may be incorrect. We can probably do a quick traverse\n+  // to check this assumption if that's neccessary.\n+  public static final boolean SHOULD_FAVOR_COMMA_OVER_SEMI_COLON = false;\n+\n+  private final boolean favorsCommaOverSemiColon;\n+\n+  public StatementFusion() {\n+    this(SHOULD_FAVOR_COMMA_OVER_SEMI_COLON);\n+  }\n+\n+  public StatementFusion(boolean favorsCommaOverSemiColon) {\n+    this.favorsCommaOverSemiColon = favorsCommaOverSemiColon;\n+  }\n \n   @Override\n   Node optimizeSubtree(Node n) {\n     // TODO(user): canFuseIntoOnestatement needs to be rewritten to\n-    // allow more aggressve use of comma's.\n-\n-    // The block of a function body always need { }.\n-    if (!n.getParent().isFunction() && canFuseIntoOneStatement(n)) {\n+    // allow more aggressive use of comma's.\n+\n+    if ((favorsCommaOverSemiColon || !n.getParent().isFunction())\n+        && canFuseIntoOneStatement(n)) {\n       Node start = n.getFirstChild();\n       Node end = n.getChildBefore(n.getLastChild());\n       Node result = fuseIntoOneStatement(n, start, end);\n   }\n \n   private boolean canFuseIntoOneStatement(Node block) {\n-    // Fold only statement block. NOT scripts block.\n-    if (!block.isBlock()) {\n+    // If we are favoring semi-colon, we shouldn't fuse script blocks.\n+    if (!favorsCommaOverSemiColon && !block.isBlock()) {\n       return false;\n     }\n \n--- a/test/com/google/javascript/jscomp/StatementFusionTest.java\n+++ b/test/com/google/javascript/jscomp/StatementFusionTest.java\n  */\n public class StatementFusionTest extends CompilerTestCase  {\n \n+  private boolean favorsCommas = false;\n+\n   @Override\n   public void setUp() throws Exception {\n     super.setUp();\n     enableLineNumberCheck(true);\n+    favorsCommas = false;\n   }\n \n   @Override\n   public CompilerPass getProcessor(final Compiler compiler) {\n     PeepholeOptimizationsPass peepholePass =\n-      new PeepholeOptimizationsPass(compiler, new StatementFusion());\n+      new PeepholeOptimizationsPass(\n+          compiler, new StatementFusion(favorsCommas));\n \n     return peepholePass;\n   }\n     fuseSame(\"a;b;c;do{}while(x)\");\n   }\n \n+  public void testFavorComma1() {\n+    favorsCommas = true;\n+    test(\"a;b;c\", \"a,b,c\");\n+  }\n+\n+  public void testFavorComma2() {\n+    favorsCommas = true;\n+    test(\"a;b;c;if(d){}\", \"if(a,b,c,d){}\");\n+  }\n+\n   public void testNoGlobalSchopeChanges() {\n     testSame(\"a,b,c\");\n   }", "timestamp": 1364947250, "metainfo": ""}