{"sha": "31baadd1293c5ae7af05b3a06a1ba3a06403e4ed", "log": "Unlike a normal call, a reference passed to JSCompiler_ObjectPropertyString must be considered a possible modification to the name itself, not a possible modification to an alias.  This fix unblocks the optimize parameters improvement.  R=nicksantos DELTA=27  (27 added, 0 deleted, 0 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1245   ", "commit": "\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n         return;\n       }\n \n+      // Unlike normal call/new parameters, references passed to\n+      // JSCompiler_ObjectPropertyString are not aliases of a value, but\n+      // a reference to the name itself, as such the value of the name is\n+      // unknown and can not be inlined.\n+      if (parent.getType() == Token.NEW) {\n+        Node target = parent.getFirstChild();\n+        if (target.getType() == Token.NAME && target.getString().equals(\n+            ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING)) {\n+          // This method is going to be replaced so don't inline it anywhere.\n+          fs.setInline(false);\n+        }\n+      }\n+\n       // If the name is being assigned to it can not be inlined.\n       if (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) {\n         // e.g. bar = something; <== we can't inline \"bar\"\n--- a/test/com/google/javascript/jscomp/InlineFunctionsTest.java\n+++ b/test/com/google/javascript/jscomp/InlineFunctionsTest.java\n              \"JSCompiler_renameProperty('foo')\");\n   }\n \n+  public void testReplacePropertyFunction() {\n+    // baseline: an alias doesn't prevents declaration removal, but not\n+    // inlining.\n+    test(\"function f(x) {return x} \" +\n+         \"foo(window, f); f(1)\",\n+         \"function f(x) {return x} \" +\n+         \"foo(window, f); 1\");\n+    // a reference passed to JSCompiler_ObjectPropertyString prevents inlining\n+    // as well.\n+    testSame(\"function f(x) {return x} \" +\n+             \"new JSCompiler_ObjectPropertyString(window, f); f(1)\");\n+  }\n+\n+\n   // Inline a single reference function into deeper modules\n   public void testCrossModuleInlining1() {\n     test(createModuleChain(", "timestamp": 1301932141, "metainfo": ""}