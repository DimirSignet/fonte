{"sha": "1a196b77fb5c6b699586ad6a9a2c3bc3ea57b345", "log": "fix a bug where unknown types were leaking into type inference, and poisoning qualified names   Tested: yes  R=acleung DELTA=97  (74 added, 19 deleted, 4 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3151   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n     scope = scope.createChildFlowScope();\n     if (node.getType() == Token.GETPROP) {\n       scope.inferQualifiedSlot(\n-          node.getQualifiedName(), getNativeType(UNKNOWN_TYPE), narrowed);\n+          node.getQualifiedName(), getJSType(node), narrowed);\n     } else {\n       redeclareSimpleVar(scope, node, narrowed);\n     }\n--- a/test/com/google/javascript/jscomp/CompilerTypeTestCase.java\n+++ b/test/com/google/javascript/jscomp/CompilerTypeTestCase.java\n       \"goog.isNull = function(x) {};\" +\n       \"goog.isString = function(x) {};\" +\n       \"goog.isObject = function(x) {};\" +\n-      \"goog.isDefAndNotNull = function(x) {};\";\n+      \"goog.isDefAndNotNull = function(x) {};\" +\n+      \"goog.asserts = {};\" +\n+      \"/** @return {*} */ goog.asserts.assert = function(x) { return x; };\";\n \n   /** A default set of externs for testing. */\n   static final String DEFAULT_EXTERNS =\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n   public void testClosure7() throws Exception {\n     testClosureTypes(\n         CLOSURE_DEFS +\n-        \"goog.asserts = {};\" +\n-        \"/** @return {*} */ goog.asserts.assert = function(x) { return x; };\" +\n         \"/** @type {string|null|undefined} */ var a = foo();\" +\n         \"/** @type {number} */\" +\n         \"var b = goog.asserts.assert(a);\",\n         \"right: number\");\n   }\n \n+  public void testTypeInferenceWithNoEntry1() throws Exception {\n+    testTypes(\n+        \"/** @param {number} x */ function f(x) {}\" +\n+        \"/** @constructor */ function Foo() {}\" +\n+        \"Foo.prototype.init = function() {\" +\n+        \"  /** @type {?{baz: number}} */ this.bar = {baz: 3};\" +\n+        \"};\" +\n+        \"/**\\n\" +\n+        \" * @extends {Foo}\\n\" +\n+        \" * @constructor\\n\" +\n+        \" */\" +\n+        \"function SubFoo() {}\" +\n+        \"/** Method */\" +\n+        \"SubFoo.prototype.method = function() {\" +\n+        \"  for (var i = 0; i < 10; i++) {\" +\n+        \"    f(this.bar);\" +\n+        \"    f(this.bar.baz);\" +\n+        \"  }\" +\n+        \"};\",\n+        \"actual parameter 1 of f does not match formal parameter\\n\"+\n+        \"found   : (null|{baz: number})\\n\" +\n+        \"required: number\");\n+  }\n+\n+  public void testTypeInferenceWithNoEntry2() throws Exception {\n+    testClosureTypes(\n+        CLOSURE_DEFS +\n+        \"/** @param {number} x */ function f(x) {}\" +\n+        \"/** @param {!Object} x */ function g(x) {}\" +\n+        \"/** @constructor */ function Foo() {}\" +\n+        \"Foo.prototype.init = function() {\" +\n+        \"  /** @type {?{baz: number}} */ this.bar = {baz: 3};\" +\n+        \"};\" +\n+        \"/**\\n\" +\n+        \" * @extends {Foo}\\n\" +\n+        \" * @constructor\\n\" +\n+        \" */\" +\n+        \"function SubFoo() {}\" +\n+        \"/** Method */\" +\n+        \"SubFoo.prototype.method = function() {\" +\n+        \"  for (var i = 0; i < 10; i++) {\" +\n+        \"    f(this.bar);\" +\n+        \"    goog.asserts.assert(this.bar);\" +\n+        \"    g(this.bar);\" +\n+        \"  }\" +\n+        \"};\",\n+        \"actual parameter 1 of f does not match formal parameter\\n\"+\n+        \"found   : (null|{baz: number})\\n\" +\n+        \"required: number\");\n+  }\n+\n   public void testForwardPropertyReference() throws Exception {\n     testTypes(\"/** @constructor */ var Foo = function() { this.init(); };\" +\n         \"/** @return {string} */\" +", "timestamp": 1314734348, "metainfo": ""}