{"sha": "30cef26cddd46c9bad49c18c3e4bedcaad26bd48", "log": "Change on 2010/04/12 by john          Remove the type registry usage from the legacy parser.          R=robert         DELTA=37  (0 added, 34 deleted, 3 changed)    Revision created by MOE tool push_codebase. MOE_MIGRATION=azggjh   ", "commit": "\n--- a/src/com/google/javascript/rhino/Parser.java\n+++ b/src/com/google/javascript/rhino/Parser.java\n \n package com.google.javascript.rhino;\n \n-import com.google.javascript.rhino.jstype.JSTypeRegistry;\n-\n import java.io.IOException;\n import java.io.Reader;\n import java.util.Hashtable;\n         TI_CHECK_LABEL = 1 << 17;  // indicates to check for label\n \n     CompilerEnvirons compilerEnv;\n-    private JSTypeRegistry typeRegistry;\n     private ErrorReporter errorReporter;\n     private String sourceURI;\n     boolean calledByCompileFunction;\n         return root;\n     }\n \n-    public Parser(CompilerEnvirons compilerEnv, ErrorReporter errorReporter,\n-                  JSTypeRegistry typeRegistry)\n+    public Parser(CompilerEnvirons compilerEnv, ErrorReporter errorReporter)\n     {\n         this.compilerEnv = compilerEnv;\n         this.errorReporter = errorReporter;\n-        this.typeRegistry = typeRegistry;\n-    }\n-\n-    public Parser(CompilerEnvirons compilerEnv, ErrorReporter errorReporter)\n-    {\n-        this(compilerEnv, errorReporter, null);\n     }\n \n     Decompiler createDecompiler(CompilerEnvirons compilerEnv)\n             // Should never happen\n             throw new IllegalStateException();\n         }\n-    }\n-\n-    /*\n-     * Gets the type registry, initializing it on the first call.\n-     * @return a type registry\n-     */\n-    public JSTypeRegistry getTypeRegistry()\n-    {\n-        if (typeRegistry == null) {\n-            typeRegistry = new JSTypeRegistry(errorReporter);\n-        }\n-        return typeRegistry;\n     }\n \n     /*\n                     addStrictWarning(\"msg.var.redecl\", s);\n             }\n             name = nf.createTaggedName(s, info, lineno, charno);\n-            if (info != null && info.hasEnumParameterType()) {\n-                typeRegistry.identifyEnumName(s);\n-            }\n \n             // omitted check for argument hiding\n \n             nf.addChildToBack(pn, name);\n             if (!matchToken(Token.COMMA))\n                 break;\n-        }\n-        if (varInfo != null && varInfo.hasEnumParameterType() &&\n-            pn.getChildCount() == 1) {\n-            typeRegistry.identifyEnumName(pn.getFirstChild().getString());\n         }\n         return pn;\n     }\n             pn = nf.createBinary(tt, pn, right, lineno, charno);\n             if (info != null) {\n                 pn.setJSDocInfo(info);\n-                if (info.hasEnumParameterType() &&\n-                    pn.getFirstChild().isUnscopedQualifiedName()) {\n-                    typeRegistry.identifyEnumName(\n-                            pn.getFirstChild().getQualifiedName());\n-                }\n             }\n         } else if (tt == Token.SEMI && pn.getType() == Token.GETPROP) {\n           // This may be dead code added intentionally, for JSDoc purposes.\n--- a/test/com/google/javascript/rhino/NodeTest.java\n+++ b/test/com/google/javascript/rhino/NodeTest.java\n     TestErrorReporter testErrorReporter = new TestErrorReporter(null, null);\n     environment.setErrorReporter(testErrorReporter);\n     environment.setParseJSDoc(true);\n-    Parser p = new Parser(environment, testErrorReporter, null);\n+    Parser p = new Parser(environment, testErrorReporter);\n     return p.parse(string, null, 0);\n   }\n }\n--- a/test/com/google/javascript/rhino/ParserTest.java\n+++ b/test/com/google/javascript/rhino/ParserTest.java\n     environment.setErrorReporter(testErrorReporter);\n     environment.setParseJSDoc(true);\n     environment.setParseJSDocDocumentation(true);\n-    Parser p = new Parser(environment, testErrorReporter, registry);\n+    Parser p = new Parser(environment, testErrorReporter);\n     Node script = p.parse(string, null, 0);\n \n     // verifying that all warnings were seen", "timestamp": 1271116527, "metainfo": ""}