{"sha": "3587cc3bb550dadee3c9aeac44041aa29087e74e", "log": "Fix some bugs where our object literal parsing fixes broke destructuring assignments. Requested by Hannes in https://github.com/mozilla/rhino/pull/30  R=johnlenz DELTA=53  (24 added, 20 deleted, 9 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4740   ", "commit": "\n--- a/lib/rhino/src/org/mozilla/javascript/CompilerEnvirons.java\n+++ b/lib/rhino/src/org/mozilla/javascript/CompilerEnvirons.java\n         languageVersion = Context.VERSION_DEFAULT;\n         generateDebugInfo = true;\n         reservedKeywordAsIdentifier = true;\n-        allowKeywordAsObjectPropertyName = false;\n         allowMemberExprAsFunctionName = false;\n         xmlAvailable = true;\n         optimizationLevel = 0;\n                              || cx.isGeneratingDebug());\n         reservedKeywordAsIdentifier\n             = cx.hasFeature(Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);\n-        allowKeywordAsObjectPropertyName\n-            = (languageVersion >= Context.VERSION_1_8);\n         allowMemberExprAsFunctionName\n             = cx.hasFeature(Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);\n         strictMode\n     public void setReservedKeywordAsIdentifier(boolean flag)\n     {\n         reservedKeywordAsIdentifier = flag;\n-    }\n-\n-    public boolean isAllowKeywordAsObjectPropertyName() {\n-      return allowKeywordAsObjectPropertyName;\n-    }\n-\n-    public void setAllowKeywordAsObjectPropertyName(boolean flag) {\n-      this.allowKeywordAsObjectPropertyName = flag;\n     }\n \n     /**\n         env.setWarnTrailingComma(true);\n         env.setLanguageVersion(170);\n         env.setReservedKeywordAsIdentifier(true);\n-        env.setAllowKeywordAsObjectPropertyName(true);\n         env.setIdeMode(true);\n         env.setErrorReporter(new ErrorCollector());\n         return env;\n     private int languageVersion;\n     private boolean generateDebugInfo;\n     private boolean reservedKeywordAsIdentifier;\n-    private boolean allowKeywordAsObjectPropertyName;\n     private boolean allowMemberExprAsFunctionName;\n     private boolean xmlAvailable;\n     private int optimizationLevel;\n--- a/lib/rhino/src/org/mozilla/javascript/Parser.java\n+++ b/lib/rhino/src/org/mozilla/javascript/Parser.java\n         if (!compilerEnv.isXmlAvailable()) {\n             int maybeName = nextToken();\n             if (maybeName != Token.NAME &&\n-                !(compilerEnv.isAllowKeywordAsObjectPropertyName()\n+                !(compilerEnv.isReservedKeywordAsIdentifier()\n                 && TokenStream.isKeyword(ts.getString()))) {\n               reportError(\"msg.no.name.after.dot\");\n             }\n                   int ppos = ts.tokenBeg;\n                   consumeToken();\n \n-                  if ((peekToken() != Token.COLON\n-                      && (\"get\".equals(propertyName)\n-                          || \"set\".equals(propertyName))))\n+                  // This code path needs to handle both destructuring object\n+                  // literals like:\n+                  // var {get, b} = {get: 1, b: 2};\n+                  // and getters like:\n+                  // var x = {get 1() { return 2; };\n+                  // So we check a whitelist of tokens to check if we're at the\n+                  // first case. (Because of keywords, the second case may be\n+                  // many tokens.)\n+                  int peeked = peekToken();\n+                  boolean maybeGetterOrSetter =\n+                      \"get\".equals(propertyName)\n+                      || \"set\".equals(propertyName);\n+                  if (maybeGetterOrSetter\n+                      && peeked != Token.COMMA && peeked != Token.COLON && peeked != Token.RC)\n                   {\n                       boolean isGet = \"get\".equals(propertyName);\n                       entryKind = isGet ? GET_ENTRY : SET_ENTRY;\n--- a/lib/rhino/testsrc/org/mozilla/javascript/tests/ParserTest.java\n+++ b/lib/rhino/testsrc/org/mozilla/javascript/tests/ParserTest.java\n import org.mozilla.javascript.ast.*;\n \n import org.mozilla.javascript.CompilerEnvirons;\n+import org.mozilla.javascript.Context;\n import org.mozilla.javascript.EvaluatorException;\n import org.mozilla.javascript.Parser;\n import org.mozilla.javascript.Token;\n import java.util.List;\n \n public class ParserTest extends TestCase {\n-    boolean allowKeywordsAsObjectLiteralsKeys = false;\n+    CompilerEnvirons environment;\n \n     @Override\n     protected void setUp() throws Exception {\n       super.setUp();\n-      allowKeywordsAsObjectLiteralsKeys = false;\n+      environment = new CompilerEnvirons();\n     }\n \n     public void testAutoSemiColonBetweenNames() {\n     }\n \n     public void testParseObjectLiteral1() {\n-      allowKeywordsAsObjectLiteralsKeys = true;\n+      environment.setReservedKeywordAsIdentifier(true);\n \n       parse(\"({a:1});\");\n       parse(\"({'a':1});\");\n \n     public void testParseObjectLiteral2() {\n       // keywords, fail\n+      environment.setReservedKeywordAsIdentifier(false);\n       expectParseErrors(\"({function:1});\",\n           new String[] { \"invalid property id\" });\n \n-      allowKeywordsAsObjectLiteralsKeys = true;\n+      environment.setReservedKeywordAsIdentifier(true);\n \n       // keywords ok\n       parse(\"({function:1});\");\n     }\n \n+    public void testParseObjectLiteral3() {\n+      environment.setLanguageVersion(Context.VERSION_1_8);\n+      environment.setReservedKeywordAsIdentifier(true);\n+      parse(\"var {get} = {get:1};\");\n+\n+      environment.setReservedKeywordAsIdentifier(false);\n+      parse(\"var {get} = {get:1};\");\n+      expectParseErrors(\"var {get} = {if:1};\",\n+          new String[] { \"invalid property id\" });\n+    }\n+\n     public void testParseKeywordPropertyAccess() {\n-      allowKeywordsAsObjectLiteralsKeys = true;\n+      environment.setReservedKeywordAsIdentifier(true);\n \n       // keywords ok\n       parse(\"({function:1}).function;\");\n     private AstRoot parse(\n         String string, final String [] errors, final String [] warnings,\n         boolean jsdoc) {\n-        CompilerEnvirons environment = new CompilerEnvirons();\n-        environment.setReservedKeywordAsIdentifier(\n-            allowKeywordsAsObjectLiteralsKeys);\n-\n         TestErrorReporter testErrorReporter =\n             new TestErrorReporter(errors, warnings) {\n           @Override\n     }\n \n     private AstRoot parseAsReader(String string) throws IOException {\n-        CompilerEnvirons environment = new CompilerEnvirons();\n-\n         TestErrorReporter testErrorReporter = new TestErrorReporter(null, null);\n         environment.setErrorReporter(testErrorReporter);\n \n--- a/src/com/google/javascript/jscomp/parsing/ParserRunner.java\n+++ b/src/com/google/javascript/jscomp/parsing/ParserRunner.java\n     boolean acceptEs5 =\n         config.isIdeMode || config.languageMode != LanguageMode.ECMASCRIPT3;\n     compilerEnv.setReservedKeywordAsIdentifier(acceptEs5);\n-    compilerEnv.setAllowKeywordAsObjectPropertyName(acceptEs5);\n \n     compilerEnv.setAllowMemberExprAsFunctionName(false);\n     compilerEnv.setIdeMode(config.isIdeMode);", "timestamp": 1336683911, "metainfo": ""}