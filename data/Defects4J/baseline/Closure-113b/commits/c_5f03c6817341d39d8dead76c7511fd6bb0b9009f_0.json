{"sha": "5f03c6817341d39d8dead76c7511fd6bb0b9009f", "log": "SmartNamePass shouldn't record assignment dependencies if the rhs is a call. The rhs is used by the context, so we don't want it removed if the lhs isn't used.  Fixes issue 1085. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=53691900", "commit": "\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n           } else {\n             recordDepScope(nameNode, ns);\n           }\n-        } else {\n+        } else if (!(parent.isCall() && parent.getFirstChild() == n)) {\n+          // The rhs of the assignment is the caller, so it's used by the\n+          // context. Don't associate it w/ the lhs.\n+          // FYI: this fixes only the specific case where the assignment is the\n+          // caller expression, but it could be nested deeper in the caller and\n+          // we would still get a bug.\n+          // See testAssignWithCall2 for an example of this.\n           recordDepScope(recordNode, ns);\n         }\n       }\n \n     @Override\n     public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (!(n.isName() ||\n-            NodeUtil.isGet(n) && !parent.isGetProp())) {\n+      if (!(n.isName() || (NodeUtil.isGet(n) && !parent.isGetProp()))) {\n         // This is not a simple or qualified name.\n         return;\n       }\n \n       // A value whose result is the return value of a function call\n       // can be an alias to global object.\n-      // Here we add a alias to the general \"global\" object\n+      // Here we add an alias to the general \"global\" object\n       // to act as a placeholder for the actual (unnamed) value.\n       if (maybeHiddenAlias(n)) {\n         recordAlias(name, WINDOW);\n--- a/test/com/google/javascript/jscomp/NameAnalyzerTest.java\n+++ b/test/com/google/javascript/jscomp/NameAnalyzerTest.java\n         \"\");\n   }\n \n+  public void testAssignWithCall() {\n+    test(\"var fun, x; (fun = function(){ x; })();\",\n+        \"var x; (function(){ x; })();\");\n+  }\n+\n+  // Currently this crashes the compiler because it erroneoursly removes var x\n+  // and later a sanity check fails.\n+  public void testAssignWithCall2() {\n+    test(\"var fun, x; (123, fun = function(){ x; })();\",\n+        \"(123, function(){ x; })();\");\n+  }\n+\n   public void testNestedAssign1() {\n     test(\"var a, b = a = 1, c = 2\", \"\");\n   }", "timestamp": 1380849675, "metainfo": ""}