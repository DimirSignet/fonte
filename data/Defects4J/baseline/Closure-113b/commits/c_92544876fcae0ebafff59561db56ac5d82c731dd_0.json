{"sha": "92544876fcae0ebafff59561db56ac5d82c731dd", "log": "Unify extern modification test cases. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50965441", "commit": "\n--- a/test/com/google/javascript/jscomp/CompilerTestCase.java\n+++ b/test/com/google/javascript/jscomp/CompilerTestCase.java\n     return mainRoot;\n   }\n \n+  protected void testExternChanges(\n+      String input, String expectedExtern) {\n+    testExternChanges(\"\", input, expectedExtern);\n+  }\n+\n+  protected void testExternChanges(\n+      String extern, String input, String expectedExtern) {\n+    Compiler compiler = createCompiler();\n+    CompilerOptions options = getOptions();\n+    compiler.init(\n+        ImmutableList.of(SourceFile.fromCode(\"extern\", extern)),\n+        ImmutableList.of(SourceFile.fromCode(\"input\", input)),\n+        options);\n+    compiler.parseInputs();\n+    assertFalse(compiler.hasErrors());\n+\n+    Node externsAndJs = compiler.getRoot();\n+    Node root = externsAndJs.getLastChild();\n+\n+    Node externs = externsAndJs.getFirstChild();\n+\n+    Node expected = compiler.parseTestCode(expectedExtern);\n+    assertFalse(compiler.hasErrors());\n+\n+    (getProcessor(compiler)).process(externs, root);\n+\n+    String externsCode = compiler.toSource(externs);\n+    String expectedCode = compiler.toSource(expected);\n+\n+    assertEquals(expectedCode, externsCode);\n+  }\n+\n   protected Node parseExpectedJs(String expected) {\n     return parseExpectedJs(new String[] {expected});\n   }\n--- a/test/com/google/javascript/jscomp/GenerateExportsTest.java\n+++ b/test/com/google/javascript/jscomp/GenerateExportsTest.java\n  */\n \n package com.google.javascript.jscomp;\n-\n-import com.google.common.collect.ImmutableList;\n-import com.google.javascript.rhino.Node;\n \n /**\n  * Generate exports unit test.\n     allowExternsChanges(true);\n     String code = \"var E = {/** @export */ A:1, B:2};\";\n     testSame(code);\n-    checkSynthesizedExtern(code, \"Object.prototype.A;\");\n+    testExternChanges(code, \"Object.prototype.A;\");\n   }\n \n   public void testExportClassMember1() {\n     allowExternsChanges(true);\n     String code = \"var E = function() { /** @export */ this.foo = 1; };\";\n     testSame(code);\n-    checkSynthesizedExtern(code, \"Object.prototype.foo;\");\n+    testExternChanges(code, \"Object.prototype.foo;\");\n   }\n \n   public void testExportClassMemberStub() {\n     allowExternsChanges(true);\n     String code = \"var E = function() { /** @export */ this.foo; };\";\n     testSame(code);\n-    checkSynthesizedExtern(code, \"Object.prototype.foo;\");\n+    testExternChanges(code, \"Object.prototype.foo;\");\n   }\n \n-  public void checkSynthesizedExtern(\n-      String input, String expectedExtern) {\n-    checkSynthesizedExtern(\"\", input, expectedExtern);\n-  }\n-\n-\n-  // TODO(johnlenz): make this common code and unify with the VarCheckTest\n-  public void checkSynthesizedExtern(\n-      String extern, String input, String expectedExtern) {\n-    Compiler compiler = createCompiler();\n-    CompilerOptions options = getOptions();\n-    compiler.init(\n-        ImmutableList.of(SourceFile.fromCode(\"extern\", extern)),\n-        ImmutableList.of(SourceFile.fromCode(\"input\", input)),\n-        options);\n-    compiler.parseInputs();\n-    assertFalse(compiler.hasErrors());\n-\n-    Node externsAndJs = compiler.getRoot();\n-    Node root = externsAndJs.getLastChild();\n-\n-    Node externs = externsAndJs.getFirstChild();\n-\n-    Node expected = compiler.parseTestCode(expectedExtern);\n-    assertFalse(compiler.hasErrors());\n-\n-    (getProcessor(compiler))\n-        .process(externs, root);\n-\n-    String externsCode = compiler.toSource(externs);\n-    String expectedCode = compiler.toSource(expected);\n-\n-    assertEquals(expectedCode, externsCode);\n-  }\n }\n--- a/test/com/google/javascript/jscomp/VarCheckTest.java\n+++ b/test/com/google/javascript/jscomp/VarCheckTest.java\n \n package com.google.javascript.jscomp;\n \n-import com.google.common.collect.ImmutableList;\n import com.google.common.collect.Lists;\n import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;\n import com.google.javascript.rhino.Node;\n \n   private CheckLevel externValidationErrorLevel;\n \n-  private CompilerPass testSetupPass;\n+  private boolean declarationCheck;\n \n   public VarCheckTest() {\n     super(EXTERNS);\n     strictModuleDepErrorLevel = CheckLevel.OFF;\n     externValidationErrorLevel = null;\n     sanityCheck = false;\n-    testSetupPass = null;\n+    declarationCheck = false;\n   }\n \n   @Override\n \n   @Override\n   protected CompilerPass getProcessor(final Compiler compiler) {\n-    if (!sanityCheck) {\n-      return new CompilerPass() {\n-        @Override public void process(Node externs, Node root) {\n-          if (testSetupPass != null) {\n-            testSetupPass.process(externs, root);\n-          }\n-          new VarCheck(compiler, false).process(externs, root);\n-          if (!compiler.hasErrors()) {\n-            new VarCheck(compiler, true).process(externs, root);\n-          }\n+    return new CompilerPass() {\n+      @Override public void process(Node externs, Node root) {\n+        new VarCheck(compiler, sanityCheck).process(externs, root);\n+        if (sanityCheck == false && !compiler.hasErrors()) {\n+          new VarCheck(compiler, true).process(externs, root);\n         }\n-      };\n-    }\n-    return new VarCheck(compiler, sanityCheck);\n+        if (declarationCheck) {\n+          new VariableTestCheck(compiler).process(externs, root);\n+        }\n+      }\n+    };\n   }\n \n   @Override\n \n   public void checkSynthesizedExtern(\n       String extern, String input, String expectedExtern) {\n-    Compiler compiler = new Compiler();\n-    CompilerOptions options = new CompilerOptions();\n-    options.setWarningLevel(\n-        DiagnosticGroup.forType(VarCheck.UNDEFINED_VAR_ERROR),\n-        CheckLevel.OFF);\n-    compiler.init(\n-        ImmutableList.of(SourceFile.fromCode(\"extern\", extern)),\n-        ImmutableList.of(SourceFile.fromCode(\"input\", input)),\n-        options);\n-    compiler.parseInputs();\n-    assertFalse(compiler.hasErrors());\n-\n-    Node externsAndJs = compiler.getRoot();\n-    Node root = externsAndJs.getLastChild();\n-\n-    Node externs = externsAndJs.getFirstChild();\n-\n-    Node expected = compiler.parseTestCode(expectedExtern);\n-    assertFalse(compiler.hasErrors());\n-\n-    (new VarCheck(compiler, sanityCheck))\n-        .process(externs, root);\n-    if (!sanityCheck) {\n-      (new VariableTestCheck(compiler)).process(externs, root);\n-    }\n-\n-    String externsCode = compiler.toSource(externs);\n-    String expectedCode = compiler.toSource(expected);\n-\n-    assertEquals(expectedCode, externsCode);\n+    declarationCheck = !sanityCheck;\n+    testExternChanges(extern, input, expectedExtern);\n   }\n }", "timestamp": 1377024956, "metainfo": ""}