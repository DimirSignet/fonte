{"sha": "539dac6618c3da99d12e9a2cc79d3b45c0a63f86", "log": "Make estimate calculation of sizes clearer. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=45624409", "commit": "\n--- a/src/com/google/javascript/jscomp/PerformanceTracker.java\n+++ b/src/com/google/javascript/jscomp/PerformanceTracker.java\n   // if there is any.\n   private final RecentChange codeChange = new RecentChange();\n \n-  private int initCodeSize = 0;\n-  private int initGzCodeSize = 0;\n+  private int initCodeSize = -1;\n+  private int initGzCodeSize = -1;\n \n   private int runtime = 0;\n   private int runs = 0;\n   private int changes = 0;\n   private int loopRuns = 0;\n   private int loopChanges = 0;\n-  private int codeSize = 0;\n-  private int gzCodeSize = 0;\n-  private int diff = 0;\n-  private int gzDiff = 0;\n+  private int codeSize = -1;  // estimate\n+  private int gzCodeSize = -1;  // estimate\n+  private int diff = 0;  // estimate\n+  private int gzDiff = 0;  // estimate\n+  private long finalCodeSize = -1;  // exact\n+  private long finalGzSize = -1;  // exact\n \n   private Deque<Stats> currentPass = new ArrayDeque<Stats>();\n \n     public long runtime = 0;\n     public int runs = 0;\n     public int changes = 0;\n-    public int diff = 0;\n-    public int gzDiff = 0;\n-    public int size = 0;\n-    public int gzSize = 0;\n+    public int diff = 0;  // estimate\n+    public int gzDiff = 0;  // estimate\n+    public int size;  // estimate\n+    public int gzSize;  // estimate\n   }\n \n   PerformanceTracker(Node jsRoot, TracerMode mode) {\n \n     // After parsing, initialize codeSize and gzCodeSize\n     if (passName.equals(Compiler.PARSING_PASS_NAME) && trackSize) {\n-      CodeSizeEstimatePrinter printer = new CodeSizeEstimatePrinter();\n-      CodeGenerator.forCostEstimation(printer).add(jsRoot);\n-      initCodeSize = codeSize = printer.calcSize();\n+      CodeSizeEstimatePrinter estimatePrinter = new CodeSizeEstimatePrinter();\n+      CodeGenerator.forCostEstimation(estimatePrinter).add(jsRoot);\n+      initCodeSize = codeSize = estimatePrinter.calcSize();\n       if (this.trackGzSize) {\n-        initGzCodeSize = gzCodeSize = printer.calcZippedSize();\n+        initGzCodeSize = gzCodeSize = estimatePrinter.calcZippedSize();\n       }\n     }\n \n     // Update fields related to code size\n     if (codeChange.hasCodeChanged() && trackSize) {\n       int newSize = 0;\n-      CodeSizeEstimatePrinter printer = new CodeSizeEstimatePrinter();\n-      CodeGenerator.forCostEstimation(printer).add(jsRoot);\n+      CodeSizeEstimatePrinter estimatePrinter = new CodeSizeEstimatePrinter();\n+      CodeGenerator.forCostEstimation(estimatePrinter).add(jsRoot);\n       if (trackSize) {\n-        newSize = printer.calcSize();\n+        newSize = estimatePrinter.calcSize();\n         logStats.diff = codeSize - newSize;\n         summaryStats.diff += logStats.diff;\n         codeSize = summaryStats.size = logStats.size = newSize;\n       }\n       if (trackGzSize) {\n-        newSize = printer.calcZippedSize();\n+        newSize = estimatePrinter.calcZippedSize();\n         logStats.gzDiff = gzCodeSize - newSize;\n         summaryStats.gzDiff += logStats.gzDiff;\n         gzCodeSize = summaryStats.gzSize = logStats.gzSize = newSize;\n   public ImmutableMap<String, Stats> getStats() {\n     calcTotalStats();\n     return summaryCopy;\n+  }\n+\n+  public void setFinalSizes(long finalCodeSize, long finalGzSize) {\n+    this.finalCodeSize = finalCodeSize;\n+    this.finalGzSize = finalGzSize;\n   }\n \n   class CmpEntries implements Comparator<Entry<String, Stats>> {\n           \"\\n#Changing runs: \" + String.valueOf(changes) +\n           \"\\n#Loopable runs: \" + String.valueOf(loopRuns) +\n           \"\\n#Changing loopable runs: \" + String.valueOf(loopChanges) +\n-          \"\\nReduction(bytes): \" + String.valueOf(diff) +\n-          \"\\nGzReduction(bytes): \" + String.valueOf(gzDiff) +\n-          \"\\nSize(bytes): \" + String.valueOf(codeSize) +\n-          \"\\nGzSize(bytes): \" + String.valueOf(gzCodeSize) + \"\\n\\n\");\n+          \"\\nEstimated Reduction(bytes): \" + String.valueOf(diff) +\n+          \"\\nEstimated GzReduction(bytes): \" + String.valueOf(gzDiff) +\n+          \"\\nEstimated Size(bytes): \" + String.valueOf(codeSize) +\n+          \"\\nEstimated GzSize(bytes): \" + String.valueOf(gzCodeSize) +\n+          \"\\nTotal Size(bytes): \" + String.valueOf(finalCodeSize) +\n+          \"\\nTotal GzSize(bytes): \" + String.valueOf(finalGzSize) +\n+          \"\\n\\n\");\n \n       output.write(\"Log:\\n\" +\n           \"pass,runtime,runs,changingRuns,reduction,gzReduction,size,gzSize\\n\");\n--- a/test/com/google/javascript/jscomp/IntegrationTest.java\n+++ b/test/com/google/javascript/jscomp/IntegrationTest.java\n         \"\\n#Changing runs: [0-9]+\" +\n         \"\\n#Loopable runs: [0-9]+\" +\n         \"\\n#Changing loopable runs: [0-9]+\" +\n-        \"\\nReduction\\\\(bytes\\\\): [0-9]+\" +\n-        \"\\nGzReduction\\\\(bytes\\\\): [0-9]+\" +\n-        \"\\nSize\\\\(bytes\\\\): [0-9]+\" +\n-        \"\\nGzSize\\\\(bytes\\\\): [0-9]+\" +\n+        \"\\nEstimated Reduction\\\\(bytes\\\\): [0-9]+\" +\n+        \"\\nEstimated GzReduction\\\\(bytes\\\\): [0-9]+\" +\n+        \"\\nEstimated Size\\\\(bytes\\\\): [0-9]+\" +\n+        \"\\nEstimated GzSize\\\\(bytes\\\\): [0-9]+\" +\n+        \"\\nTotal Size\\\\(bytes\\\\): -?[0-9]+\" +\n+        \"\\nTotal GzSize\\\\(bytes\\\\): -?[0-9]+\" +\n         \"\\n\\nLog:\\n\" +\n         \"pass,runtime,runs,changingRuns,reduction,gzReduction,size,gzSize.*\",\n         Pattern.DOTALL);", "timestamp": 1366675237, "metainfo": ""}