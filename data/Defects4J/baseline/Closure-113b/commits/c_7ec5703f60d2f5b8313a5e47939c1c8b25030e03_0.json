{"sha": "7ec5703f60d2f5b8313a5e47939c1c8b25030e03", "log": "fixed FieldCleanupPass to work for un-named objects too  R=nicksantos DELTA=27  (20 added, 0 deleted, 7 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3267   ", "commit": "\n--- a/src/com/google/javascript/jscomp/FieldCleanupPass.java\n+++ b/src/com/google/javascript/jscomp/FieldCleanupPass.java\n import com.google.javascript.jscomp.NodeTraversal.AbstractShallowCallback;\n import com.google.javascript.jscomp.NodeTraversal.Callback;\n import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.jstype.JSType;\n import com.google.javascript.rhino.jstype.JSTypeRegistry;\n import com.google.javascript.rhino.jstype.ObjectType;\n \n       // We are a root GetProp\n       if (NodeUtil.isGetProp(n) && !NodeUtil.isGetProp(p)) {\n         String propName = getFieldName(n);\n-        Iterable<ObjectType> types = ImmutableList.copyOf(\n-            typeRegistry.getEachReferenceTypeWithProperty(propName));\n-        for (ObjectType type : types) {\n-          Node pNode = type.getPropertyNode(propName);\n-          if (pNode != null && srcName.equals(pNode.getSourceFileName())) {\n-            typeRegistry.unregisterPropertyOnType(propName, type);\n-            type.removeProperty(propName);\n+        Iterable<JSType> types = ImmutableList.copyOf(\n+            typeRegistry.getTypesWithProperty(propName));\n+        for (JSType type : types) {\n+          ObjectType objType = type.toObjectType();\n+          if (objType != null) {\n+            Node pNode = objType.getPropertyNode(propName);\n+            if (pNode != null && srcName.equals(pNode.getSourceFileName())) {\n+              typeRegistry.unregisterPropertyOnType(propName, type);\n+              objType.removeProperty(propName);\n+            }\n           }\n         }\n       }", "timestamp": 1315959718, "metainfo": ""}