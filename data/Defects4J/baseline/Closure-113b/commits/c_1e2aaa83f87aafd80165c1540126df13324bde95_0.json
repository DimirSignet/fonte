{"sha": "1e2aaa83f87aafd80165c1540126df13324bde95", "log": "Allow obfuscating object literal keys using id generators.  I.e.  xid({foo: 'test', bar: 'test'}); obfuscates to {a: 'test', b: 'test'} ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=44470424", "commit": "\n--- a/src/com/google/javascript/jscomp/ReplaceIdGenerators.java\n+++ b/src/com/google/javascript/jscomp/ReplaceIdGenerators.java\n         }\n       }\n \n-      Node id = n.getFirstChild().getNext();\n-\n-      // TODO(user): Error on id not a string literal.\n-      if (!id.isString()) {\n-        return;\n-      }\n-\n+      Node arg = n.getFirstChild().getNext();\n+\n+      if (arg.isString()) {\n+        String rename = getObfuscatedName(arg, callName, nameGenerator, arg.getString());\n+        parent.replaceChild(n, IR.string(rename));\n+        compiler.reportCodeChange();\n+      } else if (arg.isObjectLit()) {\n+        for (Node key : arg.children()) {\n+          String rename = getObfuscatedName(key, callName, nameGenerator, key.getString());\n+          key.setString(rename);\n+          // Prevent standard renaming by marking the key as quoted.\n+          key.putBooleanProp(Node.QUOTED_PROP, true);\n+        }\n+        arg.detachFromParent();\n+        parent.replaceChild(n, arg);\n+        compiler.reportCodeChange();\n+      }\n+      // TODO(user): Error on id not a string or object literal.\n+    }\n+\n+    private String getObfuscatedName(Node id, String callName, NameSupplier nameGenerator,\n+        String name) {\n+      String rename = null;\n       Map<String, String> idGeneratorMap = idGeneratorMaps.get(callName);\n-      String rename = null;\n-\n-      String name = id.getString();\n       String instanceId = getIdForGeneratorNode(\n           nameGenerator.getRenameStrategy() == RenameStrategy.CONSISTENT, id);\n       if (nameGenerator.getRenameStrategy() == RenameStrategy.CONSISTENT) {\n       } else {\n         rename = nameGenerator.getName(instanceId, name);\n       }\n-\n-      parent.replaceChild(n, IR.string(rename));\n       idGeneratorMap.put(rename, instanceId);\n-\n-      compiler.reportCodeChange();\n-    }\n-  }\n+      return rename;\n+    }\n+  }\n+\n \n   /**\n    * @return The serialize map of generators and their ids and their\n   }\n \n   String getIdForGeneratorNode(boolean consistent, Node n) {\n-    Preconditions.checkState(n.isString());\n+    Preconditions.checkState(n.isString() || n.isStringKey());\n     if (consistent) {\n       return n.getString();\n     } else {\n--- a/test/com/google/javascript/jscomp/ReplaceIdGeneratorsTest.java\n+++ b/test/com/google/javascript/jscomp/ReplaceIdGeneratorsTest.java\n         \"foo1 = 'foo1$1';\");\n   }\n \n+  public void testObjectLit() {\n+    test(\"/** @idGenerator */ goog.xid = function() {};\" +\n+        \"things = goog.xid({foo1: 'test', 'foo bar': 'test'})\",\n+\n+        \"goog.xid = function() {};\" +\n+        \"things = {'a': 'test', 'b': 'test'}\",\n+\n+        \"goog.xid = function() {};\" +\n+        \"things = {'foo1$0': 'test', 'foo bar$1': 'test'}\");\n+  }\n+\n+  public void testObjectLit_empty() {\n+    test(\"/** @idGenerator */ goog.xid = function() {};\" +\n+        \"things = goog.xid({})\",\n+\n+        \"goog.xid = function() {};\" +\n+        \"things = {}\",\n+\n+        \"goog.xid = function() {};\" +\n+        \"things = {}\");\n+  }\n+\n   public void testSimpleConsistent() {\n     test(\"/** @consistentIdGenerator */ id = function() {};\" +\n          \"foo.bar = id('foo_bar')\",\n         \"foo.bar = '125lGg'\");\n   }\n \n-  public void testObjLit() {\n+  public void testInObjLit() {\n     test(\"/** @consistentIdGenerator */ get.id = function() {};\" +\n          \"foo.bar = {a: get.id('foo_bar')}\",\n ", "timestamp": 1364340514, "metainfo": ""}