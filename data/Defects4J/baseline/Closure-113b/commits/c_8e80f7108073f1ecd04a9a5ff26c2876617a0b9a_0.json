{"sha": "8e80f7108073f1ecd04a9a5ff26c2876617a0b9a", "log": "This does three things: 1) It makes using es3 keywords and reserved words non fatal by default, it rewrites it to be a quoted property access. 2) It improves the error message displayed when a property like this is seen. 3) It introduces an ES3 diagnostic group that can be used to make these warnings errors again.  Fixes issue 1030 ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=48372507", "commit": "\n--- a/src/com/google/javascript/jscomp/DiagnosticGroups.java\n+++ b/src/com/google/javascript/jscomp/DiagnosticGroups.java\n   static final String DIAGNOSTIC_GROUP_NAMES =\n       \"accessControls, ambiguousFunctionDecl, checkEventfulObjectDisposal, checkRegExp, \" +\n       \"checkStructDictInheritance, checkTypes, checkVars, const, \" +\n-      \"constantProperty, deprecated, duplicateMessage, \" +\n+      \"constantProperty, deprecated, duplicateMessage, es3, \" +\n       \"es5Strict, externsValidation, fileoverviewTags, globalThis, \" +\n       \"internetExplorerChecks, invalidCasts, misplacedTypeAnnotation, \" +\n       \"missingProperties, missingReturn,\" +\n       DiagnosticGroups.registerGroup(\"duplicate\",\n           SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR,\n           TypeValidator.DUP_VAR_DECLARATION);\n+\n+  public static final DiagnosticGroup ES3 =\n+      DiagnosticGroups.registerGroup(\"es3\",\n+          RhinoErrorReporter.INVALID_ES3_PROP_NAME,\n+          RhinoErrorReporter.TRAILING_COMMA);\n \n   public static final DiagnosticGroup ES5_STRICT =\n       DiagnosticGroups.registerGroup(\"es5Strict\",\n--- a/src/com/google/javascript/jscomp/RhinoErrorReporter.java\n+++ b/src/com/google/javascript/jscomp/RhinoErrorReporter.java\n           \"Type annotations are not allowed here. \" +\n           \"Are you missing parentheses?\");\n \n+  static final DiagnosticType INVALID_ES3_PROP_NAME = DiagnosticType.warning(\n+      \"JSC_INVALID_ES3_PROP_NAME\",\n+      \"Keywords and reserved words are not allowed as unquoted property \" +\n+      \"names in older versions of JavaScript. \" +\n+      \"If you are targeting newer versions of JavaScript, \" +\n+      \"set the appropriate language_in option.\");\n+\n   static final DiagnosticType PARSE_TREE_TOO_DEEP =\n       DiagnosticType.error(\"PARSE_TREE_TOO_DEEP\",\n           \"Parse tree too deep.\");\n             SimpleErrorReporter.getMessage0(\"msg.bad.jsdoc.tag\")),\n             BAD_JSDOC_ANNOTATION)\n \n+        // Unexpected @type annotations\n         .put(Pattern.compile(\"^Type annotations are not allowed here.*\"),\n             MISPLACED_TYPE_ANNOTATION)\n+\n+        // Unexpected @type annotations\n+        .put(Pattern.compile(\"^Keywords and reserved words\" +\n+            \" are not allowed as unquoted property.*\"),\n+            INVALID_ES3_PROP_NAME)\n \n         // Type annotation errors.\n         .put(Pattern.compile(\"^Bad type annotation.*\"),\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n import com.google.javascript.rhino.JSDocInfo;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n+import com.google.javascript.rhino.TokenStream;\n import com.google.javascript.rhino.head.ErrorReporter;\n import com.google.javascript.rhino.head.Token.CommentType;\n import com.google.javascript.rhino.head.ast.ArrayLiteral;\n class IRFactory {\n \n   static final String GETTER_ERROR_MESSAGE =\n-      \"getters are not supported in older versions of JS. \" +\n-      \"If you are targeting newer versions of JS, \" +\n+      \"getters are not supported in older versions of JavaScript. \" +\n+      \"If you are targeting newer versions of JavaScript, \" +\n       \"set the appropriate language_in option.\";\n \n   static final String SETTER_ERROR_MESSAGE =\n-      \"setters are not supported in older versions of JS. \" +\n-      \"If you are targeting newer versions of JS, \" +\n+      \"setters are not supported in older versions of JavaScript. \" +\n+      \"If you are targeting newer versions of JavaScript, \" +\n       \"set the appropriate language_in option.\";\n \n   static final String SUSPICIOUS_COMMENT_WARNING =\n \n   static final String MISPLACED_TYPE_ANNOTATION =\n       \"Type annotations are not allowed here. Are you missing parentheses?\";\n+\n+  static final String INVALID_ES3_PROP_NAME =\n+      \"Keywords and reserved words are not allowed as unquoted property \" +\n+      \"names in older versions of JavaScript. \" +\n+      \"If you are targeting newer versions of JavaScript, \" +\n+      \"set the appropriate language_in option.\";\n \n   private final String sourceString;\n   private final StaticSourceFile sourceFile;\n \n     switch (config.languageMode) {\n       case ECMASCRIPT3:\n-        // Reserved words are handled by the Rhino parser.\n-        reservedKeywords = null;\n+        reservedKeywords = null; // use TokenStream.isKeyword instead\n         break;\n       case ECMASCRIPT5:\n         reservedKeywords = ES5_RESERVED_KEYWORDS;\n       }\n     }\n \n-    /**\n-     * @return Whether the\n-     */\n+    private boolean isAllowedProp(String identifier) {\n+      if (config.languageMode == LanguageMode.ECMASCRIPT3) {\n+        return !TokenStream.isKeyword(identifier);\n+      }\n+      return true;\n+    }\n+\n     private boolean isReservedKeyword(String identifier) {\n+      if (config.languageMode == LanguageMode.ECMASCRIPT3) {\n+        return TokenStream.isKeyword(identifier);\n+      }\n       return reservedKeywords != null && reservedKeywords.contains(identifier);\n     }\n \n           }\n         }\n \n-        Node key = transformAsString(el.getLeft());\n+        AstNode rawKey = el.getLeft();\n+        Node key = transformAsString(rawKey);\n         key.setType(Token.STRING_KEY);\n+        if (rawKey instanceof Name && !isAllowedProp(key.getString())) {\n+          key.putBooleanProp(Node.QUOTED_PROP, true);\n+          errorReporter.warning(INVALID_ES3_PROP_NAME, sourceName,\n+              key.getLineno(), \"\", key.getCharno());\n+        }\n \n         Node value = transform(el.getRight());\n         if (el.isGetter()) {\n     @Override\n     Node processPropertyGet(PropertyGet getNode) {\n       Node leftChild = transform(getNode.getTarget());\n+      AstNode nodeProp = getNode.getProperty();\n+      Node rightChild = transformAsString(nodeProp);\n+      int nodeType = Token.GETPROP;\n+      if (nodeProp instanceof Name && !isAllowedProp(\n+          ((Name) nodeProp).getIdentifier())) {\n+        nodeType = Token.GETELEM;\n+        errorReporter.warning(INVALID_ES3_PROP_NAME, sourceName,\n+            rightChild.getLineno(), \"\", rightChild.getCharno());\n+      }\n       Node newNode = newNode(\n-          Token.GETPROP, leftChild, transformAsString(getNode.getProperty()));\n+          nodeType, leftChild, rightChild);\n       newNode.setLineno(leftChild.getLineno());\n       newNode.setCharno(leftChild.getCharno());\n       maybeSetLengthFrom(newNode, getNode);\n--- a/src/com/google/javascript/jscomp/parsing/ParserRunner.java\n+++ b/src/com/google/javascript/jscomp/parsing/ParserRunner.java\n \n   // Should never need to instantiate class of static methods.\n   private ParserRunner() {}\n-\n-  @Deprecated\n-  public static Config createConfig(boolean isIdeMode) {\n-    return createConfig(isIdeMode, LanguageMode.ECMASCRIPT3, false);\n-  }\n \n   public static Config createConfig(boolean isIdeMode,\n                                     LanguageMode languageMode,\n     compilerEnv.setWarnTrailingComma(\n         config.languageMode == LanguageMode.ECMASCRIPT3);\n \n-    // Do our own identifier check for ECMASCRIPT 5\n-    boolean acceptEs5 =\n-        config.isIdeMode || config.languageMode != LanguageMode.ECMASCRIPT3;\n-    compilerEnv.setReservedKeywordAsIdentifier(acceptEs5);\n+    compilerEnv.setReservedKeywordAsIdentifier(true);\n \n     compilerEnv.setAllowMemberExprAsFunctionName(false);\n     compilerEnv.setIdeMode(config.isIdeMode);\n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n   }\n \n   public void testES3ByDefault() {\n-    test(\"var x = f.function\", RhinoErrorReporter.PARSE_ERROR);\n+    test(\n+        \"var x = f.function\",\n+        \"var x = f['function']\",\n+        RhinoErrorReporter.INVALID_ES3_PROP_NAME);\n   }\n \n   public void testES5ChecksByDefault() {\n--- a/test/com/google/javascript/jscomp/IntegrationTest.java\n+++ b/test/com/google/javascript/jscomp/IntegrationTest.java\n     checkUnexpectedErrorsOrWarnings(compiler, 1);\n     assertEquals(\n         \"JSC_PARSE_ERROR. Parse error. \" +\n-        \"getters are not supported in older versions of JS. \" +\n-        \"If you are targeting newer versions of JS, \" +\n+        \"getters are not supported in older versions of JavaScript. \" +\n+        \"If you are targeting newer versions of JavaScript, \" +\n         \"set the appropriate language_in option. \" +\n         \"at i0 line 1 : 0\",\n         compiler.getErrors()[0].toString());\n--- a/test/com/google/javascript/jscomp/RhinoErrorReporterTest.java\n+++ b/test/com/google/javascript/jscomp/RhinoErrorReporterTest.java\n public class RhinoErrorReporterTest extends TestCase {\n \n   private boolean reportMisplacedTypeAnnotations;\n+  private boolean reportEs3Props;\n \n   @Override\n   protected void setUp() throws Exception {\n     reportMisplacedTypeAnnotations = false;\n+    reportEs3Props = true;\n     super.setUp();\n   }\n \n     String message =\n         \"Type annotations are not allowed here. \" +\n         \"Are you missing parentheses?\";\n-    assertWarning(\n-        \"var x = /** @type {string} */ y;\",\n-        RhinoErrorReporter.MISPLACED_TYPE_ANNOTATION,\n-        message);\n     JSError error = assertWarning(\n         \"var x = /** @type {string} */ y;\",\n         RhinoErrorReporter.MISPLACED_TYPE_ANNOTATION,\n         message);\n \n     assertEquals(1, error.getLineNumber());\n+    assertEquals(0, error.getCharno());\n+  }\n \n-    // Rhino uses the \"beginning\" of the line where the comma appears,\n-    // for some odd reason.\n-    assertEquals(0, error.getCharno());\n+  public void testInvalidEs3Prop() throws Exception {\n+    reportEs3Props = false;\n+\n+    assertNoWarningOrError(\"var x = y.function;\");\n+\n+    reportEs3Props = true;\n+\n+    String message =\n+        \"Keywords and reserved words are not allowed as unquoted property \" +\n+        \"names in older versions of JavaScript. \" +\n+        \"If you are targeting newer versions of JavaScript, \" +\n+        \"set the appropriate language_in option.\";\n+    JSError error = assertWarning(\n+        \"var x = y.function;\",\n+        RhinoErrorReporter.INVALID_ES3_PROP_NAME,\n+        message);\n+\n+    assertEquals(1, error.getLineNumber());\n+    assertEquals(10, error.getCharno());\n   }\n \n   /**\n           CheckLevel.WARNING);\n     }\n \n+    if (!reportEs3Props) {\n+      options.setWarningLevel(\n+          DiagnosticGroups.ES3,\n+          CheckLevel.OFF);\n+    }\n+\n     List<SourceFile> externs = ImmutableList.of();\n     List<SourceFile> inputs = ImmutableList.of(\n         SourceFile.fromCode(\"input\", code));\n     compiler.parseInputs();\n     return compiler;\n   }\n-\n-\n }\n--- a/test/com/google/javascript/jscomp/parsing/ParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/ParserTest.java\n   public void testReservedKeywords() {\n     mode = LanguageMode.ECMASCRIPT3;\n \n-    parseError(\"var boolean;\", \"missing variable name\");\n+    parseError(\"var boolean;\", \"identifier is a reserved word\");\n     parseError(\"function boolean() {};\",\n-        \"missing ( before function parameters.\");\n+        \"identifier is a reserved word\");\n     parseError(\"boolean = 1;\", \"identifier is a reserved word\");\n     parseError(\"class = 1;\", \"identifier is a reserved word\");\n     parseError(\"public = 2;\", \"identifier is a reserved word\");\n   public void testKeywordsAsProperties() {\n     mode = LanguageMode.ECMASCRIPT3;\n \n-    parseError(\"var x = {function: 1};\", \"invalid property id\");\n-    parseError(\"x.function;\", \"missing name after . operator\");\n+    parse(\"var x = {function: 1};\", IRFactory.INVALID_ES3_PROP_NAME);\n+    parse(\"x.function;\", IRFactory.INVALID_ES3_PROP_NAME);\n     parseError(\"var x = {get x(){} };\",\n         IRFactory.GETTER_ERROR_MESSAGE);\n-    parseError(\"var x = {get function(){} };\", \"invalid property id\");\n+    parseError(\"var x = {get function(){} };\", IRFactory.GETTER_ERROR_MESSAGE);\n     parseError(\"var x = {get 'function'(){} };\",\n         IRFactory.GETTER_ERROR_MESSAGE);\n     parseError(\"var x = {get 1(){} };\",\n         IRFactory.GETTER_ERROR_MESSAGE);\n-    parseError(\"var x = {set function(a){} };\", \"invalid property id\");\n+    parseError(\"var x = {set function(a){} };\", IRFactory.SETTER_ERROR_MESSAGE);\n     parseError(\"var x = {set 'function'(a){} };\",\n         IRFactory.SETTER_ERROR_MESSAGE);\n     parseError(\"var x = {set 1(a){} };\",\n         IRFactory.SETTER_ERROR_MESSAGE);\n-    parseError(\"var x = {class: 1};\", \"invalid property id\");\n-    parseError(\"x.class;\", \"missing name after . operator\");\n-    parse(\"var x = {let: 1};\");\n+    parse(\"var x = {class: 1};\", IRFactory.INVALID_ES3_PROP_NAME);\n+    parse(\"var x = {'class': 1};\");\n+    parse(\"x.class;\", IRFactory.INVALID_ES3_PROP_NAME);\n+    parse(\"x['class'];\");\n+    parse(\"var x = {let: 1};\");  // 'let' is not reserved in ES3\n     parse(\"x.let;\");\n-    parse(\"var x = {yield: 1};\");\n+    parse(\"var x = {yield: 1};\"); // 'yield' is not reserved in ES3\n     parse(\"x.yield;\");\n \n     mode = LanguageMode.ECMASCRIPT5;", "timestamp": 1371858264, "metainfo": ""}