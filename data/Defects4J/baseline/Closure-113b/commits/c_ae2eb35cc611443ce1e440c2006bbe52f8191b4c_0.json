{"sha": "ae2eb35cc611443ce1e440c2006bbe52f8191b4c", "log": "Some array handling cleanup.  R=acleung DELTA=18  (12 added, 0 deleted, 6 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=531   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n \n       case Token.ARRAYLIT:\n         add(\"[\");\n-        addList(first, (int[]) n.getProp(Node.SKIP_INDEXES_PROP));\n+        addArrayList(first, (int[]) n.getProp(Node.SKIP_INDEXES_PROP));\n         add(\"]\");\n         break;\n \n    * @param skipIndexes If not null, then the array of skipped entries in the\n    * array.\n    */\n-  void addList(Node firstInList, int[] skipIndexes) {\n+  void addArrayList(Node firstInList, int[] skipIndexes) {\n     int nextSlot = 0;\n     int nextSkipSlot = 0;\n     for (Node n = firstInList; n != null; n = n.getNext()) {\n--- a/test/com/google/javascript/jscomp/CodePrinterTest.java\n+++ b/test/com/google/javascript/jscomp/CodePrinterTest.java\n     assertPrint(\"if(x){;;function y(){};;}\", \"if(x){function y(){}}\");\n   }\n \n+  public void testPrintArray() {\n+    assertPrint(\"[void 0, void 0]\", \"[void 0,void 0]\");\n+    assertPrint(\"[undefined, undefined]\", \"[undefined,undefined]\");\n+    assertPrint(\"[ , , , undefined]\", \"[,,,undefined]\");\n+    assertPrint(\"[ , , , 0]\", \"[,,,0]\");\n+  }\n+\n   public void testHook() {\n     assertPrint(\"a ? b = 1 : c = 2\", \"a?b=1:c=2\");\n     assertPrint(\"x = a ? b = 1 : c = 2\", \"x=a?b=1:c=2\");\n     testReparse(\"v = (5, 6, 7, 8)\");\n     testReparse(\"d = 34.0; x = 0; y = .3; z = -22\");\n     testReparse(\"d = -x; t = !x + ~y;\");\n-    testReparse(\"'hi'; /* just a test */ stuff(a,b) \\n foo(); // and another \\n bar();\");\n+    testReparse(\"'hi'; /* just a test */ stuff(a,b) \\n\" +\n+            \" foo(); // and another \\n\" +\n+            \" bar();\");\n     testReparse(\"a = b++ + ++c; a = b++-++c; a = - --b; a = - ++b;\");\n     testReparse(\"a++; b= a++; b = ++a; b = a--; b = --a; a+=2; b-=5\");\n     testReparse(\"a = (2 + 3) * 4;\");\n     testReparse(\"a = 1 + (2 + 3) + 4;\");\n     testReparse(\"x = a ? b : c; x = a ? (b,3,5) : (foo(),bar());\");\n-    testReparse(\"a = b | c || d ^ e && f & !g != h << i <= j < k >>> l > m * n % !o\");\n-    testReparse(\"a == b; a != b; a === b; a == b == a; (a == b) == a; a == (b == a);\");\n+    testReparse(\"a = b | c || d ^ e \" +\n+            \"&& f & !g != h << i <= j < k >>> l > m * n % !o\");\n+    testReparse(\"a == b; a != b; a === b; a == b == a;\" +\n+            \" (a == b) == a; a == (b == a);\");\n     testReparse(\"if (a > b) a = b; if (b < 3) a = 3; else c = 4;\");\n     testReparse(\"if (a == b) { a++; } if (a == 0) { a++; } else { a --; }\");\n     testReparse(\"for (var i in a) b += i;\");\n-    testReparse(\"for (var i = 0; i < 10; i++){ b /= 2; if (b == 2)break;else continue;}\");\n+    testReparse(\"for (var i = 0; i < 10; i++){ b /= 2;\" +\n+            \" if (b == 2)break;else continue;}\");\n     testReparse(\"for (x = 0; x < 10; x++) a /= 2;\");\n     testReparse(\"for (;;) a++;\");\n     testReparse(\"while(true) { blah(); }while(true) blah();\");\n     assertPrint(\"var x = - - 2;\", \"var x=2\");\n     assertPrint(\"var x = - (2);\", \"var x=-2\");\n   }\n-  \n-  \n+\n+\n }", "timestamp": 1297813983, "metainfo": ""}