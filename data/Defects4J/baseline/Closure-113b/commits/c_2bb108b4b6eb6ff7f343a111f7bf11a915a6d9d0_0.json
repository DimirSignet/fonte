{"sha": "2bb108b4b6eb6ff7f343a111f7bf11a915a6d9d0", "log": "Put more stats in sponge's xml output. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=42815495", "commit": "\n--- a/src/com/google/javascript/jscomp/PerformanceTracker.java\n+++ b/src/com/google/javascript/jscomp/PerformanceTracker.java\n   // if there is any.\n   private final CodeChangeHandler codeChange = new CodeChangeHandler();\n \n+  private int initCodeSize = 0;\n+  private int initGzCodeSize = 0;\n+\n+  private int runtime = 0;\n+  private int runs = 0;\n+  private int changes = 0;\n+  private int loopRuns = 0;\n+  private int loopChanges = 0;\n   private int codeSize = 0;\n   private int gzCodeSize = 0;\n-  private int initCodeSize = 0;\n-  private int initGzCodeSize = 0;\n+  private int diff = 0;\n+  private int gzDiff = 0;\n \n   private Deque<Stats> currentPass = new ArrayDeque<Stats>();\n \n     }\n   }\n \n+  public int getRuntime() {\n+    calcTotalStats();\n+    return runtime;\n+  }\n+\n+  public int getSize() {\n+    calcTotalStats();\n+    return codeSize;\n+  }\n+\n+  public int getGzSize() {\n+    calcTotalStats();\n+    return gzCodeSize;\n+  }\n+\n   public ImmutableMap<String, Stats> getStats() {\n-    if (summaryCopy == null) {\n-      summaryCopy = ImmutableMap.copyOf(summary);\n-    }\n+    calcTotalStats();\n     return summaryCopy;\n   }\n \n     }\n   }\n \n+  private void calcTotalStats() {\n+    // This method only does work the first time it's called\n+    if (summaryCopy != null) {\n+      return;\n+    }\n+    summaryCopy = ImmutableMap.copyOf(summary);\n+    for (Entry<String, Stats> entry : summary.entrySet()) {\n+      Stats stats = entry.getValue();\n+      runtime += stats.runtime;\n+      runs += stats.runs;\n+      changes += stats.changes;\n+      if (!stats.isOneTime) {\n+        loopRuns += stats.runs;\n+        loopChanges += stats.changes;\n+      }\n+      diff += stats.diff;\n+      gzDiff += stats.gzDiff;\n+    }\n+    Preconditions.checkState(!trackSize || initCodeSize == diff + codeSize);\n+    Preconditions.checkState(!trackGzSize ||\n+        initGzCodeSize == gzDiff + gzCodeSize);\n+  }\n+\n   public void outputTracerReport(PrintStream pstr) {\n     JvmMetrics.maybeWriteJvmMetrics(pstr, \"verbose:pretty:all\");\n     OutputStreamWriter output = new OutputStreamWriter(pstr);\n     try {\n-      int runtime = 0;\n-      int runs = 0;\n-      int changes = 0;\n-      int loopRuns = 0;\n-      int loopChanges = 0;\n-      int diff = 0;\n-      int gzDiff = 0;\n+      calcTotalStats();\n \n       ArrayList<Entry<String, Stats>> a = new ArrayList<Entry<String, Stats>>();\n       for (Entry<String, Stats> entry : summary.entrySet()) {\n       for (Entry<String, Stats> entry : a) {\n         String key = entry.getKey();\n         Stats stats = entry.getValue();\n-        runtime += stats.runtime;\n-        runs += stats.runs;\n-        changes += stats.changes;\n-        if (!stats.isOneTime) {\n-          loopRuns += stats.runs;\n-          loopChanges += stats.changes;\n-        }\n-        diff += stats.diff;\n-        gzDiff += stats.gzDiff;\n         output.write(key + \",\" +\n             String.valueOf(stats.runtime) + \",\" +\n             String.valueOf(stats.runs) + \",\" +\n           \"\\nGzReduction(bytes): \" + String.valueOf(gzDiff) +\n           \"\\nSize(bytes): \" + String.valueOf(codeSize) +\n           \"\\nGzSize(bytes): \" + String.valueOf(gzCodeSize) + \"\\n\\n\");\n-\n-      Preconditions.checkState(!trackSize || initCodeSize == diff + codeSize);\n-      Preconditions.checkState(!trackGzSize ||\n-          initGzCodeSize == gzDiff + gzCodeSize);\n \n       output.write(\"Log:\\n\" +\n           \"pass,runtime,runs,changingRuns,reduction,gzReduction,size,gzSize\\n\");", "timestamp": 1361486262, "metainfo": ""}