{"sha": "6c373f658acbe9639d7efdeb8f345eabea3f40c7", "log": "Report missing properties for @struct types that only have the property defined on subtypes. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=48686846", "commit": "\n--- a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n+++ b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n    * Returns whether the given property can possibly be set on the given type.\n    */\n   public boolean canPropertyBeDefined(JSType type, String propertyName) {\n-    if (typesIndexedByProperty.containsKey(propertyName)) {\n-      for (JSType alt :\n-               typesIndexedByProperty.get(propertyName).getAlternates()) {\n-        JSType greatestSubtype = alt.getGreatestSubtype(type);\n-        if (!greatestSubtype.isEmptyType()) {\n-          // We've found a type with this property. Now we just have to make\n-          // sure it's not a type used for internal bookkeeping.\n-          RecordType maybeRecordType = greatestSubtype.toMaybeRecordType();\n-          if (maybeRecordType != null && maybeRecordType.isSynthetic()) {\n-            continue;\n+    if (type.isStruct()) {\n+      // We are stricter about \"struct\" types and only allow access to\n+      // properties that to the best of our knowledge are available at creation\n+      // time and specifically not properties only defined on subtypes.\n+      return type.hasProperty(propertyName);\n+    } else {\n+      if (typesIndexedByProperty.containsKey(propertyName)) {\n+        for (JSType alt :\n+                 typesIndexedByProperty.get(propertyName).getAlternates()) {\n+          JSType greatestSubtype = alt.getGreatestSubtype(type);\n+          if (!greatestSubtype.isEmptyType()) {\n+            // We've found a type with this property. Now we just have to make\n+            // sure it's not a type used for internal bookkeeping.\n+            RecordType maybeRecordType = greatestSubtype.toMaybeRecordType();\n+            if (maybeRecordType != null && maybeRecordType.isSynthetic()) {\n+              continue;\n+            }\n+\n+            return true;\n           }\n-\n-          return true;\n         }\n       }\n     }\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"Property bar never defined on A\", false);\n   }\n \n+  public void testNonexistentPropertyAccessStructSubtype() throws Exception {\n+    testTypes(\n+        \"/**\\n\" +\n+        \" * @constructor\\n\" +\n+        \" * @struct\\n\" +\n+        \" */\\n\" +\n+        \"var A = function() {};\" +\n+        \"\" +\n+        \"/**\\n\" +\n+        \" * @constructor\\n\" +\n+        \" * @struct\\n\" +\n+        \" * @extends {A}\\n\" +\n+        \" */\\n\" +\n+        \"var B = function() { this.bar = function(){}; };\" +\n+        \"\" +\n+        \"/** @param {A} a */\\n\" +\n+        \"function foo(a) {\\n\" +\n+        \"  if (a.bar) { a.bar(); }\\n\" +\n+        \"}\",\n+        \"Property bar never defined on A\", false);\n+  }\n+\n+  public void testNonexistentPropertyAccessStructSubtype2() throws Exception {\n+    testTypes(\n+        \"/**\\n\" +\n+        \" * @constructor\\n\" +\n+        \" * @struct\\n\" +\n+        \" */\\n\" +\n+        \"function Foo() {\\n\" +\n+        \"  this.x = 123;\\n\" +\n+        \"}\\n\" +\n+        \"var objlit = /** @struct */ { y: 234 };\\n\" +\n+        \"Foo.prototype = objlit;\\n\" +\n+        \"var n = objlit.x;\\n\",\n+        \"Property x never defined on Foo.prototype\", false);\n+  }\n+\n \n   private void testTypes(String js) throws Exception {\n     testTypes(js, (String) null);", "timestamp": 1372460972, "metainfo": ""}