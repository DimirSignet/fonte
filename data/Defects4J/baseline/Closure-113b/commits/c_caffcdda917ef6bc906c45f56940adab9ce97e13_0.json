{"sha": "caffcdda917ef6bc906c45f56940adab9ce97e13", "log": "Add a stub implementation for a namespace type Fixes issue 1063 R=dimvar", "commit": "\n--- a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n+++ b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n     if (type == null) {\n       // TODO(user): Each instance should support named type creation using\n       // interning.\n-      NamedType namedType =\n-          new NamedType(this, jsTypeName, sourceName, lineno, charno);\n+      NamedType namedType = createNamedType(jsTypeName, sourceName, lineno, charno);\n       unresolvedNamedTypes.put(scope, namedType);\n       type = namedType;\n     }\n    * Creates a named type.\n    */\n   @VisibleForTesting\n-  public JSType createNamedType(String reference,\n+  public NamedType createNamedType(String reference,\n       String sourceName, int lineno, int charno) {\n-    return new NamedType(this, reference, sourceName, lineno, charno);\n+    if (reference.endsWith(\".\")) {\n+      return new NamespaceType(this, reference, sourceName, lineno, charno);\n+    } else {\n+      return new NamedType(this, reference, sourceName, lineno, charno);\n+    }\n   }\n \n   /**\n         JSType namedType = getType(scope, n.getString(), sourceName,\n             n.getLineno(), n.getCharno());\n         if ((namedType instanceof ObjectType) &&\n+            !(namedType instanceof NamespaceType) &&\n             !(nonNullableTypeNames.contains(n.getString()))) {\n           Node typeList = n.getFirstChild();\n           int nAllowedTypes =\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n   private void handleTypeCycle(ErrorReporter t) {\n     setReferencedType(\n         registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));\n-    t.warning(\"Cycle detected in inheritance chain of type \" + reference,\n-        sourceName, lineno, charno);\n+    warning(t, \"Cycle detected in inheritance chain of type \" + reference);\n     setResolvedTypeInternal(getReferencedType());\n   }\n \n           ignoreForwardReferencedTypes &&\n           registry.isForwardDeclaredType(reference);\n       if (!isForwardDeclared && registry.isLastGeneration()) {\n-        t.warning(\"Bad type annotation. Unknown type \" + reference,\n-            sourceName, lineno, charno);\n+        warning(t, \"Bad type annotation. Unknown type \" + reference);\n       } else {\n         setReferencedType(\n             registry.getNativeObjectType(\n     }\n   }\n \n+  void warning(ErrorReporter reporter, String message) {\n+    reporter.warning(message, sourceName, lineno, charno);\n+  }\n+\n   /** Store enough information to define a property at a later time. */\n   private static final class PropertyContinuation {\n     private final String propertyName;\n--- /dev/null\n+++ b/src/com/google/javascript/rhino/jstype/NamespaceType.java\n+/*\n+ *\n+ * ***** BEGIN LICENSE BLOCK *****\n+ * Version: MPL 1.1/GPL 2.0\n+ *\n+ * The contents of this file are subject to the Mozilla Public License Version\n+ * 1.1 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ * http://www.mozilla.org/MPL/\n+ *\n+ * Software distributed under the License is distributed on an \"AS IS\" basis,\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n+ * for the specific language governing rights and limitations under the\n+ * License.\n+ *\n+ * The Original Code is Rhino code, released\n+ * May 6, 1999.\n+ *\n+ * The Initial Developer of the Original Code is\n+ * Netscape Communications Corporation.\n+ * Portions created by the Initial Developer are Copyright (C) 1997-1999\n+ * the Initial Developer. All Rights Reserved.\n+ *\n+ * Contributor(s):\n+ *   Nick Santos\n+ *\n+ * Alternatively, the contents of this file may be used under the terms of\n+ * the GNU General Public License Version 2 or later (the \"GPL\"), in which\n+ * case the provisions of the GPL are applicable instead of those above. If\n+ * you wish to allow use of your version of this file only under the terms of\n+ * the GPL and not to allow others to use your version of this file under the\n+ * MPL, indicate your decision by deleting the provisions above and replacing\n+ * them with the notice and other provisions required by the GPL. If you do\n+ * not delete the provisions above, a recipient may use your version of this\n+ * file under either the MPL or the GPL.\n+ *\n+ * ***** END LICENSE BLOCK ***** */\n+\n+package com.google.javascript.rhino.jstype;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Predicate;\n+import com.google.common.collect.Lists;\n+import com.google.javascript.rhino.ErrorReporter;\n+import com.google.javascript.rhino.Node;\n+\n+import java.util.List;\n+\n+/**\n+ * A namespace type is a reference to a particular object.\n+ *\n+ * This is generally useful when you have a particular object\n+ * in mind, but need to give it a name when it's passed to a function.\n+ *\n+ * For example,\n+ * <code>\n+ * /** @namespace /\n+ * var jQuery = {};\n+ *\n+ * /** @return {jQuery.} /\n+ * jQuery.get = function () {\n+ *   return jQuery // for easy chaining\n+ * }\n+ * </code>\n+ *\n+ * @see https://docs.google.com/document/d/1r37CJ6ZW0zk28IMn1Tu8UKKjs2WcJ-6dNEb3om7FoHQ\n+ * @author nicholas.j.santos@gmail.com (Nick Santos)\n+ */\n+class NamespaceType extends NamedType {\n+  private static final long serialVersionUID = 1L;\n+\n+  /**\n+   * Create a namespace type based on the reference.\n+   */\n+  NamespaceType(JSTypeRegistry registry, String reference,\n+      String sourceName, int lineno, int charno) {\n+    super(registry, reference, sourceName, lineno, charno);\n+  }\n+\n+  /**\n+   * Resolve the referenced type within the enclosing scope.\n+   */\n+  @Override\n+  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+    warning(t, \"Namespaces not supported yet (\" + getReferenceName() + \")\");\n+    return registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n+  }\n+}\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"/** @param {number} x */ function f(x) {}\" +\n         \"/** @param {...?} x */ function g(x) {}\" +\n         \"g(function(y) { f(y); }, true);\");\n+  }\n+\n+  public void testNamespaceType1() throws Exception {\n+    testTypes(\n+        \"/** @namespace */ var x = {};\" +\n+        \"/** @param {x.} y */ function f(y) {};\",\n+        \"Parse error. Namespaces not supported yet (x.)\");\n+  }\n+\n+  public void testNamespaceType2() throws Exception {\n+    testTypes(\n+        \"/** @namespace */ var x = {};\" +\n+        \"/** @namespace */ x.y = {};\" +\n+        \"/** @param {x.y.} y */ function f(y) {}\",\n+        \"Parse error. Namespaces not supported yet (x.y.)\");\n   }\n \n   public void testIssue61() throws Exception {\n--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n   public void testParseNamedTypeError2() throws Exception {\n     parse(\"@type {!goog.\\n * Bar\\n * .Baz} */\",\n         \"Bad type annotation. expected closing }\");\n+  }\n+\n+  public void testParseNamespaceType1() throws Exception {\n+    JSDocInfo info = parse(\"@type {goog.}*/\");\n+    assertTypeEquals(\n+        registry.createNamedType(\"goog.\", null, -1, -1),\n+        info.getType());\n   }\n \n   public void testTypedefType1() throws Exception {", "timestamp": 1376882428, "metainfo": ""}