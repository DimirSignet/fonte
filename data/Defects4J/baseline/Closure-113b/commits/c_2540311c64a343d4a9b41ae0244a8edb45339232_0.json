{"sha": "2540311c64a343d4a9b41ae0244a8edb45339232", "log": "Allow annotating object literals as structs.  R=nicksantos DELTA=77  (39 added, 1 deleted, 37 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5696   ", "commit": "\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n     private Node createNamespaceLiteral() {\n       Node objlit = IR.objectlit();\n       objlit.setJSType(\n-          compiler.getTypeRegistry().createAnonymousObjectType());\n+          compiler.getTypeRegistry().createAnonymousObjectType(null));\n       return objlit;\n     }\n \n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n    */\n   private void ensurePropertyDefined(Node getprop, JSType rightType) {\n     String propName = getprop.getLastChild().getString();\n-    JSType nodeType = getJSType(getprop.getFirstChild());\n+    Node obj = getprop.getFirstChild();\n+    JSType nodeType = getJSType(obj);\n     ObjectType objectType = ObjectType.cast(\n         nodeType.restrictByNotNullOrUndefined());\n     if (objectType == null) {\n       registry.registerPropertyOnType(propName, nodeType);\n     } else {\n+      // Don't add the property to @struct objects outside a constructor\n+      if (nodeType.isStruct() && !objectType.hasProperty(propName)) {\n+        if (!(obj.isThis() &&\n+              getJSType(syntacticScope.getRootNode()).isConstructor())) {\n+          return;\n+        }\n+      }\n+\n       if (ensurePropertyDeclaredHelper(getprop, objectType)) {\n         return;\n       }\n           } else {\n             objectType.defineInferredProperty(propName, rightType, getprop);\n           }\n-        } else if (getprop.getFirstChild().isThis() &&\n+        } else if (obj.isThis() &&\n                    getJSType(syntacticScope.getRootNode()).isConstructor()) {\n           objectType.defineInferredProperty(propName, rightType, getprop);\n         } else {\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n       // Handle the @lends annotation.\n       JSType type = null;\n       JSDocInfo info = objectLit.getJSDocInfo();\n-      if (info != null &&\n-          info.getLendsName() != null) {\n+      if (info != null && info.getLendsName() != null) {\n         String lendsName = info.getLendsName();\n         Var lendsVar = scope.getVar(lendsName);\n         if (lendsVar == null) {\n       }\n \n       if (type == null) {\n-        type = typeRegistry.createAnonymousObjectType();\n+        type = typeRegistry.createAnonymousObjectType(info);\n       }\n \n       setDeferredType(objectLit, type);\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n    */\n   public boolean isStruct() {\n     if (isObject()) {\n-      FunctionType ctor = toObjectType().getConstructor();\n-      // getConstructor can return an *interface* type, so it's not safe to\n-      // assume that makesStructs is only called on constructors.\n-      return ctor != null && ctor.makesStructs();\n+      ObjectType objType = toObjectType();\n+      FunctionType ctor = objType.getConstructor();\n+      // This test is true for object literals\n+      if (ctor == null) {\n+        JSDocInfo info = objType.getJSDocInfo();\n+        return info != null && info.makesStructs();\n+      } else {\n+        return ctor.makesStructs();\n+      }\n     }\n     return false;\n   }\n--- a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n+++ b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n import com.google.common.collect.Maps;\n import com.google.common.collect.Multimap;\n import com.google.javascript.rhino.ErrorReporter;\n+import com.google.javascript.rhino.JSDocInfo;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.ScriptRuntime;\n import com.google.javascript.rhino.Token;\n \n   /**\n    * Create an anonymous object type.\n-   */\n-  public ObjectType createAnonymousObjectType() {\n-    PrototypeObjectType type =\n-        new PrototypeObjectType(this, null, null);\n+   * @param info Used to mark object literals as structs; can be {@code null}\n+   */\n+  public ObjectType createAnonymousObjectType(JSDocInfo info) {\n+    PrototypeObjectType type = new PrototypeObjectType(this, null, null);\n     type.setPrettyPrint(true);\n+    type.setJSDocInfo(info);\n     return type;\n   }\n \n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n               \" */\\n\" +\n               \"function Foo() {}\\n\" +\n               \"(new Foo()).x += 123;\",\n+              new String[] {\n+                \"Property x never defined on Foo\",\n+                \"Cannot add a property to a struct instance \" +\n+                \"after it is constructed.\"\n+              });\n+  }\n+\n+  public void testSetprop10() throws Exception {\n+    // Create property on object literal that is a struct\n+    testTypes(\"/** \\n\" +\n+              \" * @constructor \\n\" +\n+              \" * @struct \\n\" +\n+              \" */ \\n\" +\n+              \"function Square(side) { \\n\" +\n+              \"  this.side = side; \\n\" +\n+              \"} \\n\" +\n+              \"Square.prototype = /** @struct */ {\\n\" +\n+              \"  area: function() { return this.side * this.side; }\\n\" +\n+              \"};\\n\" +\n+              \"Square.prototype.id = function(x) { return x; };\\n\",\n               \"Cannot add a property to a struct instance \" +\n               \"after it is constructed.\");\n   }\n--- a/test/com/google/javascript/jscomp/TypeInferenceTest.java\n+++ b/test/com/google/javascript/jscomp/TypeInferenceTest.java\n   }\n \n   public void testPropertyInference1() {\n-    ObjectType thisType = registry.createAnonymousObjectType();\n+    ObjectType thisType = registry.createAnonymousObjectType(null);\n     thisType.defineDeclaredProperty(\"foo\",\n         createUndefinableType(STRING_TYPE), null);\n     assumingThisType(thisType);\n   }\n \n   public void testPropertyInference2() {\n-    ObjectType thisType = registry.createAnonymousObjectType();\n+    ObjectType thisType = registry.createAnonymousObjectType(null);\n     thisType.defineDeclaredProperty(\"foo\",\n         createUndefinableType(STRING_TYPE), null);\n     assumingThisType(thisType);\n   }\n \n   public void testPropertyInference3() {\n-    ObjectType thisType = registry.createAnonymousObjectType();\n+    ObjectType thisType = registry.createAnonymousObjectType(null);\n     thisType.defineDeclaredProperty(\"foo\",\n         createUndefinableType(STRING_TYPE), null);\n     assumingThisType(thisType);\n--- a/test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java\n+++ b/test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java\n \n   public void testGetDeclaredType() {\n     JSTypeRegistry typeRegistry = new JSTypeRegistry(null);\n-    JSType type = typeRegistry.createAnonymousObjectType();\n+    JSType type = typeRegistry.createAnonymousObjectType(null);\n     String name = \"Foo\";\n     typeRegistry.declareType(name, type);\n     assertTypeEquals(type, typeRegistry.getType(name));\n \n   public void testGetDeclaredTypeInNamespace() {\n     JSTypeRegistry typeRegistry = new JSTypeRegistry(null);\n-    JSType type = typeRegistry.createAnonymousObjectType();\n+    JSType type = typeRegistry.createAnonymousObjectType(null);\n     String name = \"a.b.Foo\";\n     typeRegistry.declareType(name, type);\n     assertTypeEquals(type, typeRegistry.getType(name));\n   public void testTypeAsNamespace() {\n     JSTypeRegistry typeRegistry = new JSTypeRegistry(null);\n \n-    JSType type = typeRegistry.createAnonymousObjectType();\n+    JSType type = typeRegistry.createAnonymousObjectType(null);\n     String name = \"a.b.Foo\";\n     typeRegistry.declareType(name, type);\n     assertTypeEquals(type, typeRegistry.getType(name));\n \n-    type = typeRegistry.createAnonymousObjectType();\n+    type = typeRegistry.createAnonymousObjectType(null);\n     name = \"a.b.Foo.Bar\";\n     typeRegistry.declareType(name, type);\n     assertTypeEquals(type, typeRegistry.getType(name));\n \n     // Subclass of named type is still unresolved, even though the named type is\n     // now present in the registry.\n-    typeRegistry.declareType(\"Foo\", typeRegistry.createAnonymousObjectType());\n+    typeRegistry.declareType(\"Foo\",\n+                             typeRegistry.createAnonymousObjectType(null));\n     typeRegistry.resolveTypesInScope(scope);\n     assertTrue(subNamed.isUnknownType());\n \n \n     // Subclass of named type is still unresolved, even though the named type is\n     // now present in the registry.\n-    typeRegistry.declareType(\"Foo\", typeRegistry.createAnonymousObjectType());\n+    typeRegistry.declareType(\"Foo\",\n+                             typeRegistry.createAnonymousObjectType(null));\n     typeRegistry.resolveTypesInScope(scope);\n     assertTrue(functionType.getReturnType().isUnknownType());\n \n--- a/test/com/google/javascript/rhino/jstype/JSTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/JSTypeTest.java\n     googSubSubBar.setPrototypeBasedOn(googSubBar.getInstanceType());\n     googSubSubBarInst = googSubSubBar.getInstanceType();\n \n-    final ObjectType googObject = registry.createAnonymousObjectType();\n+    final ObjectType googObject = registry.createAnonymousObjectType(null);\n     googObject.defineDeclaredProperty(\"Bar\", googBar, null);\n \n     namedGoogBar.resolve(null, new AbstractStaticScope<JSType>() {\n     builder.addProperty(\"a\", googSubBarInst, null);\n     JSType record = builder.build();\n \n-    ObjectType subtypeProp = registry.createAnonymousObjectType();\n+    ObjectType subtypeProp = registry.createAnonymousObjectType(null);\n     subtypeProp.defineInferredProperty(\"a\", googSubSubBarInst, null);\n     assertTrue(subtypeProp.isSubtype(record));\n     assertFalse(record.isSubtype(subtypeProp));\n \n-    ObjectType supertypeProp = registry.createAnonymousObjectType();\n+    ObjectType supertypeProp = registry.createAnonymousObjectType(null);\n     supertypeProp.defineInferredProperty(\"a\", googBarInst, null);\n     assertFalse(supertypeProp.isSubtype(record));\n     assertFalse(record.isSubtype(supertypeProp));\n \n-    ObjectType declaredSubtypeProp = registry.createAnonymousObjectType();\n+    ObjectType declaredSubtypeProp = registry.createAnonymousObjectType(null);\n     declaredSubtypeProp.defineDeclaredProperty(\"a\", googSubSubBarInst,\n         null);\n     assertFalse(declaredSubtypeProp.isSubtype(record));\n     ObjectType instance = constructor.getInstanceType();\n \n     // replacing the prototype\n-    ObjectType prototype = registry.createAnonymousObjectType();\n+    ObjectType prototype = registry.createAnonymousObjectType(null);\n     prototype.defineDeclaredProperty(\"foo\", DATE_TYPE, null);\n     constructor.defineDeclaredProperty(\"prototype\", prototype, null);\n \n    * Tests how properties are counted for object types.\n    */\n   public void testObjectTypePropertiesCount() throws Exception {\n-    ObjectType sup = registry.createAnonymousObjectType();\n+    ObjectType sup = registry.createAnonymousObjectType(null);\n     int nativeProperties = sup.getPropertiesCount();\n \n     sup.defineDeclaredProperty(\"a\", DATE_TYPE, null);\n    * Tests that properties are correctly counted even when shadowing occurs.\n    */\n   public void testObjectTypePropertiesCountWithShadowing() {\n-    ObjectType sup = registry.createAnonymousObjectType();\n+    ObjectType sup = registry.createAnonymousObjectType(null);\n     int nativeProperties = sup.getPropertiesCount();\n \n     sup.defineDeclaredProperty(\"a\", OBJECT_TYPE, null);\n         ALL_TYPE,\n         createNullableType(OBJECT_TYPE),\n         OBJECT_TYPE,\n-        registry.createAnonymousObjectType(),\n+        registry.createAnonymousObjectType(null),\n         registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE),\n         registry.getNativeType(JSTypeNative.NO_TYPE));\n     verifySubtypeChain(typeChain);\n \n   public void testAnonymousEnumElementChain() throws Exception {\n     ObjectType enumElemType = registry.createEnumType(\n-        \"typeB\", null, registry.createAnonymousObjectType()).getElementsType();\n+        \"typeB\", null,\n+        registry.createAnonymousObjectType(null)).getElementsType();\n     List<JSType> typeChain = Lists.newArrayList(\n         ALL_TYPE,\n         createNullableType(OBJECT_TYPE),\n    */\n   public void testCreateAnonymousObjectType() throws Exception {\n     // anonymous\n-    ObjectType anonymous = registry.createAnonymousObjectType();\n+    ObjectType anonymous = registry.createAnonymousObjectType(null);\n     assertTypeEquals(OBJECT_TYPE, anonymous.getImplicitPrototype());\n     assertNull(anonymous.getReferenceName());\n     assertEquals(\"{}\", anonymous.toString());\n    */\n   public void testCreateAnonymousObjectType2() throws Exception {\n     // anonymous\n-    ObjectType anonymous = registry.createAnonymousObjectType();\n+    ObjectType anonymous = registry.createAnonymousObjectType(null);\n     anonymous.defineDeclaredProperty(\n         \"a\", NUMBER_TYPE, null);\n     anonymous.defineDeclaredProperty(\n    */\n   public void testHasOwnProperty() throws Exception {\n     ObjectType sup =\n-        registry.createObjectType(registry.createAnonymousObjectType());\n+        registry.createObjectType(registry.createAnonymousObjectType(null));\n     ObjectType sub = registry.createObjectType(sup);\n \n     sup.defineProperty(\"base\", null, false, null);\n \n   public void testGetPropertyNames() throws Exception {\n     ObjectType sup =\n-        registry.createObjectType(registry.createAnonymousObjectType());\n+        registry.createObjectType(registry.createAnonymousObjectType(null));\n     ObjectType sub = registry.createObjectType(sup);\n \n     sup.defineProperty(\"base\", null, false, null);\n \n   public void testGetAndSetJSDocInfoWithObjectTypes() throws Exception {\n     ObjectType sup =\n-        registry.createObjectType(registry.createAnonymousObjectType());\n+        registry.createObjectType(registry.createAnonymousObjectType(null));\n     ObjectType sub = registry.createObjectType(sup);\n \n     JSDocInfo deprecated = new JSDocInfo();\n--- a/test/com/google/javascript/rhino/jstype/PrototypeObjectTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/PrototypeObjectTypeTest.java\n public class PrototypeObjectTypeTest extends BaseJSTypeTestCase {\n \n   public void testToString() {\n-    ObjectType type = registry.createAnonymousObjectType();\n+    ObjectType type = registry.createAnonymousObjectType(null);\n     assertEquals(\"{}\", type.toString());\n \n     type.defineDeclaredProperty(\"foo\", NUMBER_TYPE, null);", "timestamp": 1351011353, "metainfo": ""}