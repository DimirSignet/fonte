{"sha": "5579355522a2c4994a06fb1b19f54eb530c2fd39", "log": "Add methods that operate on a Date object rfe 33102, from David Bowers  ", "commit": "\n--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n             }\n         }\n         throw new ParseException(\"Unable to parse the date: \" + str, -1);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Adds a number of years to a date returning a new object.\n+     * The original date object is unchanged.\n+     *\n+     * @param date  the date, not null\n+     * @param amount  the amount to add, may be negative\n+     * @return the new date object with the amount added\n+     * @throws IllegalArgumentException if the date is null\n+     */\n+    public static Date addYears(Date date, int amount) {\n+        return add(date, Calendar.YEAR, amount);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Adds a number of months to a date returning a new object.\n+     * The original date object is unchanged.\n+     *\n+     * @param date  the date, not null\n+     * @param amount  the amount to add, may be negative\n+     * @return the new date object with the amount added\n+     * @throws IllegalArgumentException if the date is null\n+     */\n+    public static Date addMonths(Date date, int amount) {\n+        return add(date, Calendar.MONTH, amount);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Adds a number of weeks to a date returning a new object.\n+     * The original date object is unchanged.\n+     *\n+     * @param date  the date, not null\n+     * @param amount  the amount to add, may be negative\n+     * @return the new date object with the amount added\n+     * @throws IllegalArgumentException if the date is null\n+     */\n+    public static Date addWeeks(Date date, int amount) {\n+        return add(date, Calendar.WEEK_OF_YEAR, amount);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Adds a number of days to a date returning a new object.\n+     * The original date object is unchanged.\n+     *\n+     * @param date  the date, not null\n+     * @param amount  the amount to add, may be negative\n+     * @return the new date object with the amount added\n+     * @throws IllegalArgumentException if the date is null\n+     */\n+    public static Date addDays(Date date, int amount) {\n+        return add(date, Calendar.DAY_OF_MONTH, amount);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Adds a number of hours to a date returning a new object.\n+     * The original date object is unchanged.\n+     *\n+     * @param date  the date, not null\n+     * @param amount  the amount to add, may be negative\n+     * @return the new date object with the amount added\n+     * @throws IllegalArgumentException if the date is null\n+     */\n+    public static Date addHours(Date date, int amount) {\n+        return add(date, Calendar.HOUR_OF_DAY, amount);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Adds a number of minutes to a date returning a new object.\n+     * The original date object is unchanged.\n+     *\n+     * @param date  the date, not null\n+     * @param amount  the amount to add, may be negative\n+     * @return the new date object with the amount added\n+     * @throws IllegalArgumentException if the date is null\n+     */\n+    public static Date addMinutes(Date date, int amount) {\n+        return add(date, Calendar.MINUTE, amount);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Adds a number of seconds to a date returning a new object.\n+     * The original date object is unchanged.\n+     *\n+     * @param date  the date, not null\n+     * @param amount  the amount to add, may be negative\n+     * @return the new date object with the amount added\n+     * @throws IllegalArgumentException if the date is null\n+     */\n+    public static Date addSeconds(Date date, int amount) {\n+        return add(date, Calendar.SECOND, amount);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Adds a number of milliseconds to a date returning a new object.\n+     * The original date object is unchanged.\n+     *\n+     * @param date  the date, not null\n+     * @param amount  the amount to add, may be negative\n+     * @return the new date object with the amount added\n+     * @throws IllegalArgumentException if the date is null\n+     */\n+    public static Date addMilliseconds(Date date, int amount) {\n+        return add(date, Calendar.MILLISECOND, amount);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Adds to a date returning a new object.\n+     * The original date object is unchanged.\n+     *\n+     * @param date  the date, not null\n+     * @param calendarField  the calendar field to add to\n+     * @param amount  the amount to add, may be negative\n+     * @return the new date object with the amount added\n+     * @throws IllegalArgumentException if the date is null\n+     */\n+    public static Date add(Date date, int calendarField, int amount) {\n+        if (date == null) {\n+            throw new IllegalArgumentException(\"The date must not be null\");\n+        }\n+        Calendar c = Calendar.getInstance();\n+        c.setTime(date);\n+        c.add(calendarField, amount);\n+        return c.getTime();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/test/org/apache/commons/lang/time/DateUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/time/DateUtilsTest.java\n  * @author <a href=\"mailto:steve@mungoknotwise.com\">Steven Caswell</a>\n  */\n public class DateUtilsTest extends TestCase {\n+\n+    private static final long MILLIS_TEST;\n+    static {\n+        GregorianCalendar cal = new GregorianCalendar(2000, 6, 5, 4, 3, 2);\n+        cal.set(Calendar.MILLISECOND, 1);\n+        MILLIS_TEST = cal.getTime().getTime();\n+    }\n+\n     DateFormat dateParser = null;\n     DateFormat dateTimeParser = null;\n     DateFormat timeZoneDateParser = null;\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n-    \n+\n+    //-----------------------------------------------------------------------\n+    public void testAddYears() throws Exception {\n+        Date base = new Date(MILLIS_TEST);\n+        Date result = DateUtils.addYears(base, 0);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n+        \n+        result = DateUtils.addYears(base, 1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2001, 6, 5, 4, 3, 2, 1);\n+        \n+        result = DateUtils.addYears(base, -1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 1999, 6, 5, 4, 3, 2, 1);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddMonths() throws Exception {\n+        Date base = new Date(MILLIS_TEST);\n+        Date result = DateUtils.addMonths(base, 0);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n+        \n+        result = DateUtils.addMonths(base, 1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 7, 5, 4, 3, 2, 1);\n+        \n+        result = DateUtils.addMonths(base, -1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 5, 5, 4, 3, 2, 1);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddWeeks() throws Exception {\n+        Date base = new Date(MILLIS_TEST);\n+        Date result = DateUtils.addWeeks(base, 0);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n+        \n+        result = DateUtils.addWeeks(base, 1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 12, 4, 3, 2, 1);\n+        \n+        result = DateUtils.addWeeks(base, -1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);      // july\n+        assertDate(result, 2000, 5, 28, 4, 3, 2, 1);   // june\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddDays() throws Exception {\n+        Date base = new Date(MILLIS_TEST);\n+        Date result = DateUtils.addDays(base, 0);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n+        \n+        result = DateUtils.addDays(base, 1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 6, 4, 3, 2, 1);\n+        \n+        result = DateUtils.addDays(base, -1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 4, 4, 3, 2, 1);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddHours() throws Exception {\n+        Date base = new Date(MILLIS_TEST);\n+        Date result = DateUtils.addHours(base, 0);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n+        \n+        result = DateUtils.addHours(base, 1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 5, 3, 2, 1);\n+        \n+        result = DateUtils.addHours(base, -1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 3, 3, 2, 1);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddMinutes() throws Exception {\n+        Date base = new Date(MILLIS_TEST);\n+        Date result = DateUtils.addMinutes(base, 0);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n+        \n+        result = DateUtils.addMinutes(base, 1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 4, 2, 1);\n+        \n+        result = DateUtils.addMinutes(base, -1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 2, 2, 1);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddSeconds() throws Exception {\n+        Date base = new Date(MILLIS_TEST);\n+        Date result = DateUtils.addSeconds(base, 0);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n+        \n+        result = DateUtils.addSeconds(base, 1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 3, 3, 1);\n+        \n+        result = DateUtils.addSeconds(base, -1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 3, 1, 1);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddMilliseconds() throws Exception {\n+        Date base = new Date(MILLIS_TEST);\n+        Date result = DateUtils.addMilliseconds(base, 0);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n+        \n+        result = DateUtils.addMilliseconds(base, 1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 3, 2, 2);\n+        \n+        result = DateUtils.addMilliseconds(base, -1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 3, 2, 0);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddByField() throws Exception {\n+        Date base = new Date(MILLIS_TEST);\n+        Date result = DateUtils.add(base, Calendar.YEAR, 0);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n+        \n+        result = DateUtils.add(base, Calendar.YEAR, 1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2001, 6, 5, 4, 3, 2, 1);\n+        \n+        result = DateUtils.add(base, Calendar.YEAR, -1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 1999, 6, 5, 4, 3, 2, 1);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private void assertDate(Date date, int year, int month, int day, int hour, int min, int sec, int mil) throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar();\n+        cal.setTime(date);\n+        assertEquals(year, cal.get(Calendar.YEAR));\n+        assertEquals(month, cal.get(Calendar.MONTH));\n+        assertEquals(day, cal.get(Calendar.DAY_OF_MONTH));\n+        assertEquals(hour, cal.get(Calendar.HOUR_OF_DAY));\n+        assertEquals(min, cal.get(Calendar.MINUTE));\n+        assertEquals(sec, cal.get(Calendar.SECOND));\n+        assertEquals(mil, cal.get(Calendar.MILLISECOND));\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Tests various values with the round method", "timestamp": 1145219397, "metainfo": ""}