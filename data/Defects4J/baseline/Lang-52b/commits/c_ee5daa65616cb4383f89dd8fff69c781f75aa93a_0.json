{"sha": "ee5daa65616cb4383f89dd8fff69c781f75aa93a", "log": "Bring EnumUtils public constructor testing in line with main package   ", "commit": "\n--- a/src/java/org/apache/commons/lang/enum/EnumUtils.java\n+++ b/src/java/org/apache/commons/lang/enum/EnumUtils.java\n  * @see ValuedEnum\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: EnumUtils.java,v 1.7 2003/07/14 22:25:04 bayard Exp $\n+ * @version $Id: EnumUtils.java,v 1.8 2003/07/30 23:21:39 scolebourne Exp $\n  */\n public class EnumUtils {\n \n     /**\n-     * Restricted constructor.\n+     * Public constructor. This class should not normally be instantiated.\n      */\n-    private EnumUtils() {\n+    public EnumUtils() {\n     }\n \n     /**\n--- a/src/test/org/apache/commons/lang/enum/EnumUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/enum/EnumUtilsTest.java\n  */\n package org.apache.commons.lang.enum;\n \n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n  * Test cases for the {@link Enum} class.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: EnumUtilsTest.java,v 1.4 2003/07/30 23:13:09 scolebourne Exp $\n+ * @version $Id: EnumUtilsTest.java,v 1.5 2003/07/30 23:21:39 scolebourne Exp $\n  */\n \n public final class EnumUtilsTest extends TestCase {\n         return suite;\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testConstructor() {\n+        assertNotNull(new EnumUtils());\n+        Constructor[] cons = EnumUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(EnumUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(EnumUtils.class.getModifiers()));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n     public void testIterator() {\n         Iterator it = EnumUtils.iterator(ColorEnum.class);\n         assertSame(ColorEnum.RED, it.next());\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    //-----------------------------------------------------------------------\n     public void testList() {\n         List list = EnumUtils.getEnumList(ColorEnum.class);\n         Iterator it = list.iterator();\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    //-----------------------------------------------------------------------\n     public void testMap() {\n         Map map = EnumUtils.getEnumMap(ColorEnum.class);\n         assertTrue(map.containsValue(ColorEnum.RED));\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    //-----------------------------------------------------------------------\n     public void testGet() {\n         assertSame(ColorEnum.RED, EnumUtils.getEnum(ColorEnum.class, \"Red\"));\n         assertSame(ColorEnum.GREEN, EnumUtils.getEnum(ColorEnum.class, \"Green\"));\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    //-----------------------------------------------------------------------\n     public void testGetValue() {\n         assertSame(ValuedColorEnum.RED, EnumUtils.getEnum(ValuedColorEnum.class, 1));\n         assertSame(ValuedColorEnum.GREEN, EnumUtils.getEnum(ValuedColorEnum.class, 2));", "timestamp": 1059607299, "metainfo": ""}