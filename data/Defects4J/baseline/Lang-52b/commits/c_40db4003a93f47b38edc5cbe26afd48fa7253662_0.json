{"sha": "40db4003a93f47b38edc5cbe26afd48fa7253662", "log": "Reworked class to avoid security exceptions from Michael Becke   ", "commit": "\n--- a/src/java/org/apache/commons/lang/SystemUtils.java\n+++ b/src/java/org/apache/commons/lang/SystemUtils.java\n \n /**\n  * <p>Common <code>System</code> class helpers.</p>\n+ * \n+ * <p>If a particular system property cannot be read due to security\n+ * restrictions, the field will return <code>null</code>.</p>\n  *\n  * @author Based on code from Avalon Excalibur\n  * @author Based on code from Lucene\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:sdowney@panix.com\">Steve Downey</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n+ * @author Michael Becke\n  * @since 1.0\n- * @version $Id: SystemUtils.java,v 1.9 2003/05/14 17:13:00 ggregory Exp $\n+ * @version $Id: SystemUtils.java,v 1.10 2003/05/22 21:51:26 scolebourne Exp $\n  */\n public class SystemUtils {\n     \n      * The <code>file.separator</code> System Property.\n      * File separator (\"/\" on UNIX).\n      * First in JDK version 1.1.\n-     */\n-    public static final String FILE_SEPARATOR = System.getProperty(\"file.separator\");\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property.\n+     */\n+    public static final String FILE_SEPARATOR = getSystemProperty(\"file.separator\");\n     \n \n     /**\n      * The <code>java.class.path</code> System Property.\n      * Java class path.\n      * First in JDK version 1.1.\n-     */\n-    public static final String JAVA_CLASS_PATH = System.getProperty(\"java.class.path\");\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property.\n+     */\n+    public static final String JAVA_CLASS_PATH = getSystemProperty(\"java.class.path\");\n     \n \n     /**\n      * The <code>java.class.version</code> System Property.\n      * Java class format version number.\n      * First in JDK version 1.1.\n-     */\n-    public static final String JAVA_CLASS_VERSION = System.getProperty(\"java.class.version\");\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property.\n+     */\n+    public static final String JAVA_CLASS_VERSION = getSystemProperty(\"java.class.version\");\n     \n \n     /**\n      * The <code>java.compiler</code> System Property.\n      * Name of JIT compiler to use.\n      * First in JDK version 1.4.\n-     */\n-    public static final String JAVA_COMPILER = System.getProperty(\"java.compiler\");\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property.\n+     */\n+    public static final String JAVA_COMPILER = getSystemProperty(\"java.compiler\");\n     \n \n     /**\n      * The <code>java.ext.dirs</code> System Property.\n      * Path of extension directory or directories.\n      * First in JDK version 1.3.\n-     */\n-    public static final String JAVA_EXT_DIRS = System.getProperty(\"java.ext.dirs\");\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property.\n+     */\n+    public static final String JAVA_EXT_DIRS = getSystemProperty(\"java.ext.dirs\");\n     \n \n     /**\n      * The <code>java.home</code> System Property.\n      * Java installation directory.\n      * First in JDK version 1.1.\n-     */\n-    public static final String JAVA_HOME = System.getProperty(\"java.home\");\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property.\n+     */\n+    public static final String JAVA_HOME = getSystemProperty(\"java.home\");\n     \n \n     /**\n      * The <code>java.io.tmpdir</code> System Property.\n      * Default temp file path.\n      * First in JDK version 1.4.\n-     */\n-    public static final String JAVA_IO_TMPDIR = System.getProperty(\"java.io.tmpdir\");\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property.\n+     */\n+    public static final String JAVA_IO_TMPDIR = getSystemProperty(\"java.io.tmpdir\");\n     \n \n     /**\n      * The <code>java.library.path</code> System Property.\n      * List of paths to search when loading libraries.\n      * First in JDK version 1.4.\n-     */\n-    public static final String JAVA_LIBRARY_PATH = System.getProperty(\"java.library.path\");\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property.\n+     */\n+    public static final String JAVA_LIBRARY_PATH = getSystemProperty(\"java.library.path\");\n     \n \n     /**\n      * The <code>java.specification.name</code> System Property.\n      * Java Runtime Environment specification name.\n      * First in JDK version 1.2.\n-     */\n-    public static final String JAVA_SPECIFICATION_NAME = System.getProperty(\"java.specification.name\");\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property.\n+     */\n+    public static final String JAVA_SPECIFICATION_NAME = getSystemProperty(\"java.specification.name\");\n     \n \n     /**\n      * The <code>java.specification.vendor</code> System Property.\n      * Java Runtime Environment specification vendor.\n      * First in JDK version 1.2.\n-     */\n-    public static final String JAVA_SPECIFICATION_VENDOR = System.getProperty(\"java.specification.vendor\");\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property.\n+     */\n+    public static final String JAVA_SPECIFICATION_VENDOR = getSystemProperty(\"java.specification.vendor\");\n     \n \n     /**\n      * The <code>java.specification.version</code> System Property.\n      * Java Runtime Environment specification version.\n      * First in JDK version 1.2.\n-     */\n-    public static final String JAVA_SPECIFICATION_VERSION = System.getProperty(\"java.specification.version\");\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property.\n+     */\n+    public static final String JAVA_SPECIFICATION_VERSION = getSystemProperty(\"java.specification.version\");\n     \n \n     /**\n      * The <code>java.vendor</code> System Property.\n      * Java vendor-specific string.\n      * First in JDK version 1.1.\n-     */\n-    public static final String JAVA_VENDOR = System.getProperty(\"java.vendor\");\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property.\n+     */\n+    public static final String JAVA_VENDOR = getSystemProperty(\"java.vendor\");\n     \n \n     /**\n      * The <code>java.vendor.url</code> System Property.\n      * Java vendor URL.\n      * First in JDK version 1.1. \n-     */\n-    public static final String JAVA_VENDOR_URL = System.getProperty(\"java.vendor.url\");\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property.\n+     */\n+    public static final String JAVA_VENDOR_URL = getSystemProperty(\"java.vendor.url\");\n     \n \n     /**\n      * The <code>java.version</code> System Property.\n      * Java version number.\n      * First in JDK version 1.1. \n-     */\n-    public static final String JAVA_VERSION = System.getProperty(\"java.version\");\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property.\n+     */\n+    public static final String JAVA_VERSION = getSystemProperty(\"java.version\");\n     \n \n     /**\n      * The <code>java.vm.name</code> System Property.\n      * Java Virtual Machine implementation name.\n      * First in JDK version 1.2.\n-     */\n-    public static final String JAVA_VM_NAME = System.getProperty(\"java.vm.name\");\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property.\n+     */\n+    public static final String JAVA_VM_NAME = getSystemProperty(\"java.vm.name\");\n     \n \n     /**\n      * The <code>java.vm.specification.name</code> System Property.\n      * Java Virtual Machine specification name.\n      * First in JDK version 1.2.\n-     */\n-    public static final String JAVA_VM_SPECIFICATION_NAME = System.getProperty(\"java.vm.specification.name\");\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property.\n+     */\n+    public static final String JAVA_VM_SPECIFICATION_NAME = getSystemProperty(\"java.vm.specification.name\");\n     \n \n     /**\n      * The <code>java.vm.specification.vendor</code> System Property.\n      * Java Virtual Machine specification vendor.\n      * First in JDK version 1.2.\n-     */\n-    public static final String JAVA_VM_SPECIFICATION_VENDOR = System.getProperty(\"java.vm.specification.vendor\");\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property.\n+     */\n+    public static final String JAVA_VM_SPECIFICATION_VENDOR = getSystemProperty(\"java.vm.specification.vendor\");\n     \n \n     /**\n      * The <code>java.vm.specification.version</code> System Property.\n      * Java Virtual Machine specification version.\n      * First in JDK version 1.2.\n-     */\n-    public static final String JAVA_VM_SPECIFICATION_VERSION = System.getProperty(\"java.vm.specification.version\");\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property.\n+     */\n+    public static final String JAVA_VM_SPECIFICATION_VERSION = getSystemProperty(\"java.vm.specification.version\");\n     \n \n     /**\n      * The <code>java.vm.vendor</code> System Property.\n      * Java Virtual Machine implementation vendor.\n      * First in JDK version 1.2.\n-     */\n-    public static final String JAVA_VM_VENDOR = System.getProperty(\"java.vm.vendor\");\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property.\n+     */\n+    public static final String JAVA_VM_VENDOR = getSystemProperty(\"java.vm.vendor\");\n     \n \n     /**\n      * The <code>java.vm.version</code> System Property.\n      * Java Virtual Machine implementation version.\n      * First in JDK version 1.2.\n-     */\n-    public static final String JAVA_VM_VERSION = System.getProperty(\"java.vm.version\");\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property.\n+     */\n+    public static final String JAVA_VM_VERSION = getSystemProperty(\"java.vm.version\");\n     \n \n     /**\n      * The <code>line.separator</code> System Property.\n      * Line separator (\"\\n\" on UNIX).\n      * First in JDK version 1.1. \n-     */\n-    public static final String LINE_SEPARATOR = System.getProperty(\"line.separator\");\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property.\n+     */\n+    public static final String LINE_SEPARATOR = getSystemProperty(\"line.separator\");\n     \n \n     /**\n      * The <code>os.arch</code> System Property.\n      * Operating system architecture.\n      * First in JDK version 1.1. \n-     */\n-    public static final String OS_ARCH = System.getProperty(\"os.arch\");\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property.\n+     */\n+    public static final String OS_ARCH = getSystemProperty(\"os.arch\");\n     \n \n     /**\n      * The <code>os.name</code> System Property.\n      * Operating system name.\n      * First in JDK version 1.1. \n-     */\n-    public static final String OS_NAME = System.getProperty(\"os.name\");\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property.\n+     */\n+    public static final String OS_NAME = getSystemProperty(\"os.name\");\n     \n \n     /**\n      * The <code>os.version</code> System Property.\n      * Operating system version.\n      * First in JDK version 1.1. \n-     */\n-    public static final String OS_VERSION = System.getProperty(\"os.version\");\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property.\n+     */\n+    public static final String OS_VERSION = getSystemProperty(\"os.version\");\n     \n \n     /**\n      * The <code>path.separator</code> System Property.\n      * Path separator (\":\" on UNIX).\n      * First in JDK version 1.1. \n-     */\n-    public static final String PATH_SEPARATOR = System.getProperty(\"path.separator\");\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property.\n+     */\n+    public static final String PATH_SEPARATOR = getSystemProperty(\"path.separator\");\n     \n \n     /**\n      * The <code>user.dir</code> System Property.\n      * User's current working directory.\n      * First in JDK version 1.1. \n-     */\n-    public static final String USER_DIR = System.getProperty(\"user.dir\");\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property.\n+     */\n+    public static final String USER_DIR = getSystemProperty(\"user.dir\");\n     \n \n     /**\n      * The <code>user.home</code> System Property.\n      * User's home directory.\n      * First in JDK version 1.1. \n-     */\n-    public static final String USER_HOME = System.getProperty(\"user.home\");\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property.\n+     */\n+    public static final String USER_HOME = getSystemProperty(\"user.home\");\n     \n \n     /**\n      * The <code>user.name</code> System Property.\n      * User's account name.\n      * First in JDK version 1.1. \n-     */\n-    public static final String USER_NAME = System.getProperty(\"user.name\");\n+     * <p>\n+     * Defaults to <code>null</code> if the runtime does not have\n+     * security access to read this property.\n+     */\n+    public static final String USER_NAME = getSystemProperty(\"user.name\");\n+    \n     \n     /** \n      * Is <code>true</code> if this is Java version 1.1 (also 1.1.x versions).\n      */\n     public static final boolean IS_JAVA_1_5 = JAVA_VERSION.startsWith(\"1.5.\");\n \n+\n+    /**\n+     * Gets a System property, defaulting to the given value if the property \n+     * cannot be read.\n+     * \n+     * @param property the system property name\n+     * @return the system property value or <code>null</code> if security problem\n+     */\n+    private static String getSystemProperty(String property) {\n+        try {\n+            return System.getProperty(property);\n+            \n+        } catch (SecurityException ex) {\n+            // we are not allowed to look at this property\n+            return null;\n+        }\n+    }    \n \n     // Parsing operating system may stay here, or it may be moved somewhere else entirely\n //    /** True iff this is running on Windows */", "timestamp": 1053640286, "metainfo": ""}