{"sha": "9b82eaecb12629bfb7861113f69d56e8de1d75a1", "log": "Fix RandomStringUtils to not throw NPE all the time   ", "commit": "\n--- a/src/java/org/apache/commons/lang/RandomStringUtils.java\n+++ b/src/java/org/apache/commons/lang/RandomStringUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: RandomStringUtils.java,v 1.19 2003/07/26 10:32:17 scolebourne Exp $\n+ * @version $Id: RandomStringUtils.java,v 1.20 2003/07/31 23:24:35 scolebourne Exp $\n  */\n public class RandomStringUtils {\n \n      * @return the random string\n      */\n     public static String random(int count, int start, int end, boolean letters, boolean numbers) {\n-        return random(count, start, end, letters, numbers, null);\n+        return random(count, start, end, letters, numbers, null, RANDOM);\n     }\n \n     /**\n      * @param end  the position in set of chars to end before\n      * @param letters  only allow letters?\n      * @param numbers  only allow numbers?\n-     * @param set  the set of chars to choose randoms from.\n+     * @param chars  the set of chars to choose randoms from.\n      *  If <code>null</code>, then it will use the set of all chars.\n      * @return the random string\n      * @throws ArrayIndexOutOfBoundsException if there are not\n      *  <code>(end - start) + 1</code> characters in the set array.\n      */\n-    public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set) {\n-        return random(count,start,end,letters,numbers,set,RANDOM);\n+    public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars) {\n+        return random(count, start, end, letters, numbers, chars, RANDOM);\n     }\n \n     /**\n      * @param end  the position in set of chars to end before\n      * @param letters  only allow letters?\n      * @param numbers  only allow numbers?\n-     * @param set  the set of chars to choose randoms from.\n+     * @param chars  the set of chars to choose randoms from.\n      *  If <code>null</code>, then it will use the set of all chars.\n      * @param random  a source of randomness.\n      * @return the random string\n      *  <code>(end - start) + 1</code> characters in the set array.\n      * @throws IllegalArgumentException if <code>count</code> &lt; 0.\n      */\n-    public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set, Random random) {\n-        if( count == 0 ) {\n+    public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) {\n+        if (count == 0) {\n             return \"\";\n-        } else if( count < 0 ) {\n+        } else if (count < 0) {\n             throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n         }\n-        if( (start == 0) && (end == 0) ) {\n+        if ((start == 0) && (end == 0)) {\n             end = 'z' + 1;\n             start = ' ';\n-            if(!letters && !numbers) {\n+            if (!letters && !numbers) {\n                 start = 0;\n                 end = Integer.MAX_VALUE;\n             }\n         StringBuffer buffer = new StringBuffer();\n         int gap = end - start;\n \n-        while(count-- != 0) {\n+        while (count-- != 0) {\n             char ch;\n-            if(set == null) {\n-                ch = (char)(random.nextInt(gap) + start);\n+            if (chars == null) {\n+                ch = (char) (random.nextInt(gap) + start);\n             } else {\n-                ch = set[random.nextInt(gap) + start];\n+                ch = chars[random.nextInt(gap) + start];\n             }\n-            if( (letters && numbers && Character.isLetterOrDigit(ch)) ||\n-                (letters && Character.isLetter(ch)) ||\n-                (numbers && Character.isDigit(ch)) ||\n-                (!letters && !numbers)\n-              ) \n-            {\n-                buffer.append( ch );\n+            if ((letters && numbers && Character.isLetterOrDigit(ch))\n+                || (letters && Character.isLetter(ch))\n+                || (numbers && Character.isDigit(ch))\n+                || (!letters && !numbers)) {\n+                buffer.append(ch);\n             } else {\n                 count++;\n             }\n      * specified.</p>\n      *\n      * @param count  the length of random string to create\n-     * @param set  the String containing the set of characters to use,\n-     *  must not be <code>null</code>\n-     * @return the random string\n-     * @throws NullPointerException if the set is <code>null</code>\n-     */\n-    public static String random(int count, String set) {\n-        return random(count, set.toCharArray());\n+     * @param chars  the String containing the set of characters to use,\n+     *  may be null\n+     * @return the random string\n+     * @throws IllegalArgumentException if <code>count</code> &lt; 0.\n+     */\n+    public static String random(int count, String chars) {\n+        if (chars == null) {\n+            return random(count, 0, 0, false, false, null, RANDOM);\n+        }\n+        return random(count, chars.toCharArray());\n     }\n \n     /**\n      * <p>Characters will be chosen from the set of characters specified.</p>\n      *\n      * @param count  the length of random string to create\n-     * @param set  the character array containing the set of characters to use\n-     *  must not be <code>null</code>\n-     * @return the random string\n-     * @throws NullPointerException if the set is <code>null</code>\n-     */\n-    public static String random(int count, char[] set) {\n-        return random(count, 0, set.length, false, false, set);\n-    }\n+     * @param chars  the character array containing the set of characters to use,\n+     *  may be null\n+     * @return the random string\n+     * @throws IllegalArgumentException if <code>count</code> &lt; 0.\n+     */\n+    public static String random(int count, char[] chars) {\n+        if (chars == null) {\n+            return random(count, 0, 0, false, false, null, RANDOM);\n+        }\n+        return random(count, 0, chars.length, false, false, chars, RANDOM);\n+    }\n+    \n }\n--- a/src/test/org/apache/commons/lang/RandomStringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/RandomStringUtilsTest.java\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author Phil Steitz\n- * @version $Id: RandomStringUtilsTest.java,v 1.9 2003/07/30 22:21:39 scolebourne Exp $\n+ * @version $Id: RandomStringUtilsTest.java,v 1.10 2003/07/31 23:24:35 scolebourne Exp $\n  */\n public class RandomStringUtilsTest extends junit.framework.TestCase {\n     /**\n         r2 = RandomStringUtils.random(50, set);\n         assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n         \n+        r1 = RandomStringUtils.random(50, (String) null);\n+        assertEquals(\"random(50) length\", 50, r1.length());\n+        r2 = RandomStringUtils.random(50, (String) null);\n+        assertEquals(\"random(50) length\", 50, r2.length());\n+        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n+        \n         set = \"stuvwxyz\";\n         r1 = RandomStringUtils.random(50, set.toCharArray());\n         assertEquals(\"random(50, \\\"stuvwxyz\\\")\", 50, r1.length());\n             assertTrue(\"random char in set\", set.indexOf(r1.charAt(i)) > -1);\n         }\n         r2 = RandomStringUtils.random(50, set);\n+        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n+        \n+        r1 = RandomStringUtils.random(50, (char[]) null);\n+        assertEquals(\"random(50) length\", 50, r1.length());\n+        r2 = RandomStringUtils.random(50, (char[]) null);\n+        assertEquals(\"random(50) length\", 50, r2.length());\n         assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n \n         long seed = System.currentTimeMillis();\n         r1 = RandomStringUtils.random(0);\n         assertEquals(\"random(0).equals(\\\"\\\")\", \"\", r1);\n \n-        Exception e = null;\n-        try {\n-            r1 = RandomStringUtils.random(-1);\n-        } catch (Exception e2) {\n-            e = e2;\n-        }\n-        assertNotNull(\"random(<0) throws exception\", e);\n+    }\n+    public void testExceptions() {\n+        try {\n+            RandomStringUtils.random(-1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            RandomStringUtils.random(-1, true, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            RandomStringUtils.random(-1, new char[0]);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            RandomStringUtils.random(-1, \"\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            RandomStringUtils.random(-1, 'a', 'z', false, false);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            RandomStringUtils.random(-1, 'a', 'z', false, false, new char[0]);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            RandomStringUtils.random(-1, 'a', 'z', false, false, new char[0], new Random());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n     }\n     \n     /**", "timestamp": 1059693875, "metainfo": ""}