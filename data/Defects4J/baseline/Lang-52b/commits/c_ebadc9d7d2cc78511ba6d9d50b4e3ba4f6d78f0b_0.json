{"sha": "ebadc9d7d2cc78511ba6d9d50b4e3ba4f6d78f0b", "log": "Fix to correctly identify the original author from Brian S O'Neill   ", "commit": "\n--- a/src/java/org/apache/commons/lang/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang/time/FastDateFormat.java\n  * time zones (eg. +08:00 or -11:00). This introduces a minor incompatability with\n  * Java 1.4, but at a gain of useful functionality.\n  * <p>\n- * NOTE: Code originally taken from the open source TreeTrove project.\n+ * NOTE: Code originally taken from the open source TeaTrove project.\n  *\n  * @author Brian S O'Neill\n  * @author Sean Schofield\n  * @author Gary Gregory\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: FastDateFormat.java,v 1.6 2003/06/08 23:14:23 scolebourne Exp $\n+ * @version $Id: FastDateFormat.java,v 1.7 2003/07/12 08:26:22 scolebourne Exp $\n  */\n public class FastDateFormat extends Format {\n     // A lot of the speed in this class comes from caching, but some comes\n     // Note that the fastest append to StringBuffer is a single char (used here).\n     // Note that Integer.toString() is not called, the conversion is simply\n     // taking the value and adding (mathematically) the ASCII value for '0'.\n-    // So, don't change this code! It works and is vary fast.\n+    // So, don't change this code! It works and is very fast.\n     \n     /** FULL locale dependent date or time style */\n     public static final int FULL = SimpleDateFormat.FULL;", "timestamp": 1057998382, "metainfo": ""}