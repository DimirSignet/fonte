{"sha": "10496897d06a68cd9555ae5368bd1889b7dfa862", "log": "javadoc sp  ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/StrTokenizer.java\n+++ b/src/java/org/apache/commons/lang/text/StrTokenizer.java\n  * This class can split a String into many smaller strings. It aims\n  * to do a similar job to {@link java.util.StringTokenizer StringTokenizer},\n  * however it offers much more control and flexibility including implementing\n- * the <code>ListIterator</code> interface. By default, it is setup\n+ * the <code>ListIterator</code> interface. By default, it is set up\n  * like <code>StringTokenizer</code>.\n  * <p>\n  * The input String is split into a number of <i>tokens</i>.\n     }\n \n     /**\n-     * Gets a new tokenizer instance which parses Comma Seperated Value strings\n+     * Gets a new tokenizer instance which parses Comma Separated Value strings\n      * initializing it with the given input.  The default for CSV processing\n-     * will be trim whitespace from both ends (which can be overriden with\n+     * will be trim whitespace from both ends (which can be overridden with\n      * the setTrimmer method).\n      * <p>\n      * You must call a \"reset\" method to set the string which you want to parse.\n-     * @return a new tokenizer instance which parses Comma Seperated Value strings\n+     * @return a new tokenizer instance which parses Comma Separated Value strings\n      */\n     public static StrTokenizer getCSVInstance() {\n         return getCSVClone();\n     }\n \n     /**\n-     * Gets a new tokenizer instance which parses Comma Seperated Value strings\n+     * Gets a new tokenizer instance which parses Comma Separated Value strings\n      * initializing it with the given input.  The default for CSV processing\n-     * will be trim whitespace from both ends (which can be overriden with\n+     * will be trim whitespace from both ends (which can be overridden with\n      * the setTrimmer method).\n      *\n      * @param input  the text to parse\n-     * @return a new tokenizer instance which parses Comma Seperated Value strings\n+     * @return a new tokenizer instance which parses Comma Separated Value strings\n      */\n     public static StrTokenizer getCSVInstance(String input) {\n         StrTokenizer tok = getCSVClone();\n     }\n \n     /**\n-     * Gets a new tokenizer instance which parses Comma Seperated Value strings\n+     * Gets a new tokenizer instance which parses Comma Separated Value strings\n      * initializing it with the given input.  The default for CSV processing\n-     * will be trim whitespace from both ends (which can be overriden with\n+     * will be trim whitespace from both ends (which can be overridden with\n      * the setTrimmer method).\n      *\n      * @param input  the text to parse\n-     * @return a new tokenizer instance which parses Comma Seperated Value strings\n+     * @return a new tokenizer instance which parses Comma Separated Value strings\n      */\n     public static StrTokenizer getCSVInstance(char[] input) {\n         StrTokenizer tok = getCSVClone();\n \n \n     /**\n-     * Gets a new tokenizer instance which parses Tab Seperated Value strings.\n+     * Gets a new tokenizer instance which parses Tab Separated Value strings.\n      * The default for CSV processing will be trim whitespace from both ends\n-     * (which can be overriden with the setTrimmer method).\n+     * (which can be overridden with the setTrimmer method).\n      * <p>\n      * You must call a \"reset\" method to set the string which you want to parse.\n-     * @return a new tokenizer instance which parses Tab Seperated Value strings.\n+     * @return a new tokenizer instance which parses Tab Separated Value strings.\n      */\n     public static StrTokenizer getTSVInstance() {\n         return getTSVClone();\n     }\n \n     /**\n-     * Gets a new tokenizer instance which parses Tab Seperated Value strings.\n+     * Gets a new tokenizer instance which parses Tab Separated Value strings.\n      * The default for CSV processing will be trim whitespace from both ends\n-     * (which can be overriden with the setTrimmer method).\n+     * (which can be overridden with the setTrimmer method).\n      * @param input  the string to parse\n-     * @return a new tokenizer instance which parses Tab Seperated Value strings.\n+     * @return a new tokenizer instance which parses Tab Separated Value strings.\n      */\n     public static StrTokenizer getTSVInstance(String input) {\n         StrTokenizer tok = getTSVClone();\n     }\n \n     /**\n-     * Gets a new tokenizer instance which parses Tab Seperated Value strings.\n+     * Gets a new tokenizer instance which parses Tab Separated Value strings.\n      * The default for CSV processing will be trim whitespace from both ends\n-     * (which can be overriden with the setTrimmer method).\n+     * (which can be overridden with the setTrimmer method).\n      * @param input  the string to parse\n-     * @return a new tokenizer instance which parses Tab Seperated Value strings.\n+     * @return a new tokenizer instance which parses Tab Separated Value strings.\n      */\n     public static StrTokenizer getTSVInstance(char[] input) {\n         StrTokenizer tok = getTSVClone();", "timestamp": 1193072480, "metainfo": ""}