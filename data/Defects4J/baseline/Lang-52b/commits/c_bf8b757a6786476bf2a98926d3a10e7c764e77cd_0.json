{"sha": "bf8b757a6786476bf2a98926d3a10e7c764e77cd", "log": "Make exception implement Nestable interface and use NestableDelegate bug 26954 (alternate implementation)   ", "commit": "\n--- a/src/java/org/apache/commons/lang/NotImplementedException.java\n+++ b/src/java/org/apache/commons/lang/NotImplementedException.java\n  */\n package org.apache.commons.lang;\n \n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+\n+import org.apache.commons.lang.exception.Nestable;\n+import org.apache.commons.lang.exception.NestableDelegate;\n+\n /**\n- * <p>Thrown to indicate that a method has not been implemented.</p>\n+ * <p>Thrown to indicate that a block of code has not been implemented.</p>\n  * \n  * @author Matthew Hawthorne\n+ * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: NotImplementedException.java,v 1.6 2004/02/18 22:59:49 ggregory Exp $\n+ * @version $Id: NotImplementedException.java,v 1.7 2004/03/04 00:13:38 scolebourne Exp $\n  */\n-public class NotImplementedException extends UnsupportedOperationException {\n+public class NotImplementedException\n+        extends UnsupportedOperationException implements Nestable {\n \n     /**\n-     * <p>Constructs the exception with the specified class.</p>\n+     * The exception helper to delegate nested exception handling to.\n+     */\n+    protected NestableDelegate delegate = new NestableDelegate(this);\n+\n+    /**\n+     * Holds the reference to the exception or error that caused\n+     * this exception to be thrown.\n+     */\n+    private Throwable cause;\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructs a new <code>NotImplementedException</code> with default\n+     * detail message.\n+     */\n+    public NotImplementedException() {\n+        super(\"Code is not implemented\");\n+    }\n+\n+    /**\n+     * Constructs a new <code>NotImplementedException</code> with specified\n+     * detail message.\n+     *\n+     * @param msg The error message.\n+     */\n+    public NotImplementedException(String msg) {\n+        super(msg == null ? \"Code is not implemented\" : msg);\n+    }\n+\n+    /**\n+     * Constructs a new <code>NotImplementedException</code> with specified\n+     * nested <code>Throwable</code> and default message.\n+     *\n+     * @param cause the exception or error that caused this exception to be\n+     * thrown\n+     */\n+    public NotImplementedException(Throwable cause) {\n+        super(\"Code is not implemented\");\n+        this.cause = cause;\n+    }\n+\n+    /**\n+     * Constructs a new <code>NotImplementedException</code> with specified\n+     * detail message and nested <code>Throwable</code>.\n+     *\n+     * @param msg    the error message\n+     * @param cause  the exception or error that caused this exception to be\n+     * thrown\n+     */\n+    public NotImplementedException(String msg, Throwable cause) {\n+        super(msg == null ? \"Code is not implemented\" : msg);\n+        this.cause = cause;\n+    }\n+\n+    /**\n+     * Constructs a new <code>NotImplementedException</code> referencing\n+     * the specified class.\n      * \n      * @param clazz  the <code>Class</code> that has not implemented the method\n      */\n     public NotImplementedException(Class clazz) {\n-        super(\n-            \"Method is not implemented in class \"\n-                + ((clazz == null) ? null : clazz.getName()));\n+        super((clazz == null ?\n+                \"Code is not implemented\" :\n+                \"Code is not implemented in \" + clazz));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Throwable getCause() {\n+        return cause;\n     }\n \n     /**\n-     * <p>Constructs the exception with the specified message.</p>\n-     * \n-     * @param msg  the exception message.\n+     * Returns the detail message string of this throwable. If it was\n+     * created with a null message, returns the following:\n+     * (cause==null ? null : cause.toString()).\n      */\n-    public NotImplementedException(String msg) {\n-        super(msg);\n+    public String getMessage() {\n+        if (super.getMessage() != null) {\n+            return super.getMessage();\n+        } else if (cause != null) {\n+            return cause.toString();\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public String getMessage(int index) {\n+        if (index == 0) {\n+            return super.getMessage();\n+        } else {\n+            return delegate.getMessage(index);\n+        }\n+    }\n+\n+    public String[] getMessages() {\n+        return delegate.getMessages();\n+    }\n+\n+    public Throwable getThrowable(int index) {\n+        return delegate.getThrowable(index);\n+    }\n+\n+    public int getThrowableCount() {\n+        return delegate.getThrowableCount();\n+    }\n+\n+    public Throwable[] getThrowables() {\n+        return delegate.getThrowables();\n+    }\n+\n+    public int indexOfThrowable(Class type) {\n+        return delegate.indexOfThrowable(type, 0);\n+    }\n+\n+    public int indexOfThrowable(Class type, int fromIndex) {\n+        return delegate.indexOfThrowable(type, fromIndex);\n+    }\n+\n+    public void printStackTrace() {\n+        delegate.printStackTrace();\n+    }\n+\n+    public void printStackTrace(PrintStream out) {\n+        delegate.printStackTrace(out);\n+    }\n+\n+    public void printStackTrace(PrintWriter out) {\n+        delegate.printStackTrace(out);\n+    }\n+\n+    public final void printPartialStackTrace(PrintWriter out) {\n+        super.printStackTrace(out);\n     }\n \n }\n--- a/src/test/org/apache/commons/lang/NotImplementedExceptionTest.java\n+++ b/src/test/org/apache/commons/lang/NotImplementedExceptionTest.java\n  * JUnit tests.\n  * \n  * @author Matthew Hawthorne\n- * @version $Id: NotImplementedExceptionTest.java,v 1.3 2004/02/18 23:06:19 ggregory Exp $\n+ * @version $Id: NotImplementedExceptionTest.java,v 1.4 2004/03/04 00:13:38 scolebourne Exp $\n  * @see NotImplementedException\n  */\n public class NotImplementedExceptionTest extends TestCase {\n         super(testName);\n     }\n \n-    // testConstructor\n-\n-    public void testConstructor_classArg_nullInput() {\n-        final Class c = null;\n-        new NotImplementedException(c);\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_() {\n+        NotImplementedException ex = new NotImplementedException();\n+        assertEquals(\"Code is not implemented\", ex.getMessage());\n+        assertEquals(null, ex.getCause());\n     }\n \n-    public void testConstructor_stringArg_nullInput() {\n-        final String s = null;\n-        new NotImplementedException(s);\n+    public void testConstructor_String1() {\n+        NotImplementedException ex = new NotImplementedException((String) null);\n+        assertEquals(\"Code is not implemented\", ex.getMessage());\n+        assertEquals(null, ex.getCause());\n+    }        \n+    public void testConstructor_String2() {\n+        NotImplementedException ex = new NotImplementedException(\"msg\");\n+        assertEquals(\"msg\", ex.getMessage());\n+        assertEquals(null, ex.getCause());\n     }\n \n-    // testGetMessage\n-\n-    public void testGetMessage_classArg_nullInput() {\n-        final Class c = null;\n-        final Throwable t = new NotImplementedException(c);\n-        assertEquals(\"Method is not implemented in class null\", t.getMessage());\n+    public void testConstructor_Throwable1() {\n+        NotImplementedException ex = new NotImplementedException((Throwable) null);\n+        assertEquals(\"Code is not implemented\", ex.getMessage());\n+        assertEquals(null, ex.getCause());\n+    }        \n+    public void testConstructor_Throwable2() {\n+        Exception npe = new NullPointerException();\n+        NotImplementedException ex = new NotImplementedException(npe);\n+        assertEquals(\"Code is not implemented\", ex.getMessage());\n+        assertSame(npe, ex.getCause());\n     }\n \n-    public void testGetMessage_classArg_validInput() {\n-        final Throwable t = new NotImplementedException(String.class);\n-        assertEquals(\n-            \"Method is not implemented in class java.lang.String\",\n-            t.getMessage());\n+    public void testConstructor_StringThrowable1() {\n+        NotImplementedException ex = new NotImplementedException((String) null, (Throwable) null);\n+        assertEquals(\"Code is not implemented\", ex.getMessage());\n+        assertEquals(null, ex.getCause());\n+    }\n+    public void testConstructor_StringThrowable2() {\n+        Exception npe = new NullPointerException();\n+        NotImplementedException ex = new NotImplementedException(\"msg\", npe);\n+        assertEquals(\"msg\", ex.getMessage());\n+        assertSame(npe, ex.getCause());\n     }\n \n-    public void testGetMessage_stringArg_nullInput() {\n-        final String s = null;\n-        final Throwable t = new NotImplementedException(s);\n-        assertEquals(null, t.getMessage());\n+    public void testConstructor_Class1() {\n+        NotImplementedException ex = new NotImplementedException((Class) null);\n+        assertEquals(\"Code is not implemented\", ex.getMessage());\n+        assertEquals(null, ex.getCause());\n+    }\n+    public void testConstructor_Class2() {\n+        NotImplementedException ex = new NotImplementedException(String.class);\n+        assertEquals(\"Code is not implemented in class java.lang.String\", ex.getMessage());\n+        assertEquals(null, ex.getCause());\n     }\n \n-    public void testGetMessage_stringArg_validInput() {\n-        final String msg = \"message\";\n-        final Throwable t = new NotImplementedException(msg);\n-        assertEquals(msg, t.getMessage());\n-    }\n-\n-} // NotImplementedExceptionTest\n+}", "timestamp": 1078359218, "metainfo": ""}