{"sha": "f8be419043f745df0a9d2a083a81defd035d448b", "log": "removed tabs from source, as per checkstyle  ", "commit": "\n--- a/src/java/org/apache/commons/lang/ClassUtils.java\n+++ b/src/java/org/apache/commons/lang/ClassUtils.java\n      * <p>Gets the package name from a <code>String</code>.</p>\n      *\n      * <p>The string passed in is assumed to be a class name - it is not checked.</p>\n-\t * <p>If the class is unpackaged, return an empty string.</p>\n+     * <p>If the class is unpackaged, return an empty string.</p>\n      * \n      * @param className  the className to get the package name for, may be <code>null</code>\n      * @return the package name or an empty string\n--- a/src/java/org/apache/commons/lang/Validate.java\n+++ b/src/java/org/apache/commons/lang/Validate.java\n  * @author Gary Gregory\n  * @author Norm Deane\n  * @since 2.0\n- * @version $Id: Validate.java,v 1.13 2004/10/08 21:44:41 scolebourne Exp $\n+ * @version $Id$\n  */\n public class Validate {\n     // Validate has no dependencies on other classes in Commons Lang at present\n      * @since 2.1\n      */\n     public static void allElementsOfType(Collection collection, Class clazz, String message) {\n-    \tValidate.notNull(collection);\n+        Validate.notNull(collection);\n         Validate.notNull(clazz);\n-    \tfor (Iterator it = collection.iterator(); it.hasNext(); ) {\n-    \t\tif (clazz.isInstance(it.next()) == false) {\n-    \t\t\tthrow new IllegalArgumentException(message);\n-    \t\t}\n-    \t}\n+        for (Iterator it = collection.iterator(); it.hasNext(); ) {\n+            if (clazz.isInstance(it.next()) == false) {\n+                throw new IllegalArgumentException(message);\n+            }\n+        }\n     }\n \n     /**\n      * @since 2.1\n      */\n     public static void allElementsOfType(Collection collection, Class clazz) {\n-    \tValidate.notNull(collection);\n+        Validate.notNull(collection);\n         Validate.notNull(clazz);\n-    \tint i = 0;\n-    \tfor (Iterator it = collection.iterator(); it.hasNext(); i++) {\n+        int i = 0;\n+        for (Iterator it = collection.iterator(); it.hasNext(); i++) {\n             if (clazz.isInstance(it.next()) == false) {\n-    \t\t\tthrow new IllegalArgumentException(\"The validated collection contains an element not of type \"\n+                throw new IllegalArgumentException(\"The validated collection contains an element not of type \"\n                     + clazz.getName() + \" at index: \" + i);\n-    \t\t}\n-    \t}\n+            }\n+        }\n     }\n \n }\n--- a/src/java/org/apache/commons/lang/text/StrTokenizer.java\n+++ b/src/java/org/apache/commons/lang/text/StrTokenizer.java\n  * @author Stephen Colebourne\n  * @author Gary D. Gregory\n  * @since 2.1\n- * @version $Id: StrTokenizer.java,v 1.6 2004/12/25 21:02:20 bayard Exp $\n+ * @version $Id$\n  */\n public class StrTokenizer implements ListIterator, Cloneable {\n \n \n         /* Trim string based on the trimmer matcher */\n         while (trimmer.isMatch(chars, 1, start) > 0) {\n-\t\t\tstart++;\n-\t\t}\n-\n-\t\tint length = Math.min(pos, len) - start;\n+            start++;\n+        }\n+\n+        int length = Math.min(pos, len) - start;\n \n         while (trimmer.isMatch(chars, 1, start + length - 1) > 0) {\n-\t\t\tlength--;\n-\t\t}\n+            length--;\n+        }\n \n         for (int i=0;i<length;i++) {\n-\t\t\tif (ignored.isMatch(chars, 1, start + i) == 0) {\n-\t\t\t\ttoken.append(chars[start + i]);\n-\t\t\t}\n-\t\t}\n+            if (ignored.isMatch(chars, 1, start + i) == 0) {\n+                token.append(chars[start + i]);\n+            }\n+        }\n \n \n         return pos + delimLen;\n--- a/src/test/org/apache/commons/lang/BitFieldTest.java\n+++ b/src/test/org/apache/commons/lang/BitFieldTest.java\n  * @author Scott Sanders\n  * @author Marc Johnson\n  * @author Glen Stampoultzis\n- * @version $Id: BitFieldTest.java,v 1.4 2004/02/18 23:06:19 ggregory Exp $\n+ * @version $Id$\n  */\n public class BitFieldTest extends TestCase {\n \n     }\n \n     public static Test suite() {\n-    \tTestSuite suite = new TestSuite(BitFieldTest.class);\n-    \tsuite.setName(\"BitField Tests\");\n+        TestSuite suite = new TestSuite(BitFieldTest.class);\n+        suite.setName(\"BitField Tests\");\n         return suite;\n     }\n \n--- a/src/test/org/apache/commons/lang/BooleanUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/BooleanUtilsTest.java\n  *\n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n- * @version $Id: BooleanUtilsTest.java,v 1.10 2004/10/08 21:27:00 scolebourne Exp $\n+ * @version $Id$\n  */\n public class BooleanUtilsTest extends TestCase {\n \n     }\n \n     public static Test suite() {\n-    \tTestSuite suite = new TestSuite(BooleanUtilsTest.class);\n-    \tsuite.setName(\"BooleanUtils Tests\");\n+        TestSuite suite = new TestSuite(BooleanUtilsTest.class);\n+        suite.setName(\"BooleanUtils Tests\");\n         return suite;\n     }\n \n--- a/src/test/org/apache/commons/lang/CharUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/CharUtilsTest.java\n  * Unit tests {@link org.apache.commons.lang.CharUtils}.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: CharUtilsTest.java,v 1.4 2004/03/10 23:23:46 scolebourne Exp $\n+ * @version $Id$\n  */\n public class CharUtilsTest extends TestCase {\n \n     }\n \n     public static Test suite() {\n-    \tTestSuite suite = new TestSuite(CharUtilsTest.class);\n-    \tsuite.setName(\"CharUtils Tests\");\n+        TestSuite suite = new TestSuite(CharUtilsTest.class);\n+        suite.setName(\"CharUtils Tests\");\n         return suite;\n     }\n \n--- a/src/test/org/apache/commons/lang/ClassUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ClassUtilsTest.java\n     }\n \n     public static Test suite() {\n-    \tTestSuite suite = new TestSuite(ClassUtilsTest.class);\n-    \tsuite.setName(\"ClassUtils Tests\");\n+        TestSuite suite = new TestSuite(ClassUtilsTest.class);\n+        suite.setName(\"ClassUtils Tests\");\n         return suite;\n     }\n \n     }\n \n     public static ClassLoader newSystemClassLoader() throws  SecurityException, IllegalArgumentException {\n-    \tClassLoader scl = ClassLoader.getSystemClassLoader();\n-    \tif (!(scl instanceof URLClassLoader)) {\n-    \t\tfail(\"Need a better test set up.\");\n-    \t}\n-    \tURLClassLoader urlScl = (URLClassLoader)scl;\n-    \treturn URLClassLoader.newInstance(urlScl.getURLs(), null);\n+        ClassLoader scl = ClassLoader.getSystemClassLoader();\n+        if (!(scl instanceof URLClassLoader)) {\n+            fail(\"Need a better test set up.\");\n+        }\n+        URLClassLoader urlScl = (URLClassLoader)scl;\n+        return URLClassLoader.newInstance(urlScl.getURLs(), null);\n     }\n \n }\n--- a/src/test/org/apache/commons/lang/NumberRangeTest.java\n+++ b/src/test/org/apache/commons/lang/NumberRangeTest.java\n  * @author <a href=\"mailto:chrise@esha.com\">Christopher Elkins</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author Tim O'Brien\n- * @version $Revision: 1.8 $ $Date: 2004/02/18 23:22:29 $\n+ * @version $Revision: 1.8 $ $Date$\n  */\n \n public final class NumberRangeTest extends TestCase {\n         assertEquals(\"Unexpected max on NumberRange\", 2.0, nr.getMaximum().doubleValue(), Double.MIN_VALUE);\n     }\n \n-\tpublic void testConstructorNullParameters() {\n-\t\ttry {\n-\t\t\tNumberRange nr = new NumberRange(null);\n-\t\t\tfail(\"NumberRange(null) did not throw an exception.\");\n-\t\t} catch (Exception e) {\n-\t\t\tassertTrue(\t\"NumberRange(null)\", e instanceof NullPointerException);\n-\t\t}\n-\n-\t\ttry {\n-\t\t\tNumberRange nr = new NumberRange(five, null);\n-\t\t\tfail(\"NumberRange(five, null) did not throw an exception.\");\n-\t\t} catch (Exception e) {\n-\t\t\tassertTrue(\"NumberRange(five, null)\", e instanceof NullPointerException);\n-\t\t}\n-\n-\t\ttry {\n-\t\t\tNumberRange nr = new NumberRange(null, five);\n-\t\t\tfail(\"NumberRange(null, five) did not throw an exception.\");\n-\t\t} catch (Exception e) {\n-\t\t\tassertTrue(\"NumberRange(null, five)\", e instanceof NullPointerException);\n-\t\t}\n-\t}\n+    public void testConstructorNullParameters() {\n+        try {\n+            NumberRange nr = new NumberRange(null);\n+            fail(\"NumberRange(null) did not throw an exception.\");\n+        } catch (Exception e) {\n+            assertTrue(    \"NumberRange(null)\", e instanceof NullPointerException);\n+        }\n+\n+        try {\n+            NumberRange nr = new NumberRange(five, null);\n+            fail(\"NumberRange(five, null) did not throw an exception.\");\n+        } catch (Exception e) {\n+            assertTrue(\"NumberRange(five, null)\", e instanceof NullPointerException);\n+        }\n+\n+        try {\n+            NumberRange nr = new NumberRange(null, five);\n+            fail(\"NumberRange(null, five) did not throw an exception.\");\n+        } catch (Exception e) {\n+            assertTrue(\"NumberRange(null, five)\", e instanceof NullPointerException);\n+        }\n+    }\n \n     public void testConstructorWithMaxLessThanMin() {\n         NumberRange nr = new NumberRange( new Double(2.0), new Double(1.0));\n--- a/src/test/org/apache/commons/lang/RandomStringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/RandomStringUtilsTest.java\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author Phil Steitz\n- * @version $Id: RandomStringUtilsTest.java,v 1.13 2004/02/18 23:06:19 ggregory Exp $\n+ * @version $Id$\n  */\n public class RandomStringUtilsTest extends junit.framework.TestCase {\n     /**\n     }\n \n     public static Test suite() {\n-    \tTestSuite suite = new TestSuite(RandomStringUtilsTest.class);\n-    \tsuite.setName(\"RandomStringUtils Tests\");\n+        TestSuite suite = new TestSuite(RandomStringUtilsTest.class);\n+        suite.setName(\"RandomStringUtils Tests\");\n         return suite;\n     }\n     \n--- a/src/test/org/apache/commons/lang/SerializationUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/SerializationUtilsTest.java\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n- * @version $Id: SerializationUtilsTest.java,v 1.6 2004/02/18 23:06:19 ggregory Exp $\n+ * @version $Id$\n  */\n public class SerializationUtilsTest extends TestCase {\n     private String iString;\n     }\n \n     public static Test suite() {\n-    \tTestSuite suite = new TestSuite(SerializationUtilsTest.class);\n-    \tsuite.setName(\"SerializationUtils Tests\");\n+        TestSuite suite = new TestSuite(SerializationUtilsTest.class);\n+        suite.setName(\"SerializationUtils Tests\");\n         return suite;\n     }\n \n--- a/src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author Phil Steitz\n- * @version $Id: StringUtilsEqualsIndexOfTest.java,v 1.10 2004/02/18 23:06:19 ggregory Exp $\n+ * @version $Id$\n  */\n public class StringUtilsEqualsIndexOfTest extends TestCase {\n     private static final String FOO = \"foo\";\n     }\n \n     public static Test suite() {\n-    \tTestSuite suite = new TestSuite(StringUtilsEqualsIndexOfTest.class);\n-    \tsuite.setName(\"StringUtilsEqualsIndexOf Tests\");\n+        TestSuite suite = new TestSuite(StringUtilsEqualsIndexOfTest.class);\n+        suite.setName(\"StringUtilsEqualsIndexOf Tests\");\n         return suite;\n     }\n \n--- a/src/test/org/apache/commons/lang/StringUtilsIsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsIsTest.java\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author Michael Davey\n- * @version $Id: StringUtilsIsTest.java,v 1.9 2004/02/24 22:31:43 fredrik Exp $\n+ * @version $Id$\n  */\n public class StringUtilsIsTest extends TestCase {\n \n     }\n \n     public static Test suite() {\n-    \tTestSuite suite = new TestSuite(StringUtilsIsTest.class);\n-    \tsuite.setName(\"StringUtilsIsXxx Tests\");\n+        TestSuite suite = new TestSuite(StringUtilsIsTest.class);\n+        suite.setName(\"StringUtilsIsXxx Tests\");\n         return suite;\n     }\n \n--- a/src/test/org/apache/commons/lang/StringUtilsSubstringTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsSubstringTest.java\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author Phil Steitz\n- * @version $Id: StringUtilsSubstringTest.java,v 1.14 2004/02/18 23:06:19 ggregory Exp $\n+ * @version $Id$\n  */\n public class StringUtilsSubstringTest extends TestCase {\n     private static final String FOO = \"foo\";\n     }\n \n     public static Test suite() {\n-    \tTestSuite suite = new TestSuite(StringUtilsSubstringTest.class);\n-    \tsuite.setName(\"StringUtilsSubstring Tests\");\n+        TestSuite suite = new TestSuite(StringUtilsSubstringTest.class);\n+        suite.setName(\"StringUtilsSubstring Tests\");\n         return suite;\n     }\n \n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n     }\n \n     public static Test suite() {\n-    \tTestSuite suite = new TestSuite(StringUtilsTest.class);\n-    \tsuite.setName(\"StringUtilsTest Tests\");\n+        TestSuite suite = new TestSuite(StringUtilsTest.class);\n+        suite.setName(\"StringUtilsTest Tests\");\n         return suite;\n     }\n \n--- a/src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n- * @version $Id: StringUtilsTrimEmptyTest.java,v 1.17 2004/02/18 23:06:19 ggregory Exp $\n+ * @version $Id$\n  */\n public class StringUtilsTrimEmptyTest extends TestCase {\n     private static final String FOO = \"foo\";\n     }\n \n     public static Test suite() {\n-    \tTestSuite suite = new TestSuite(StringUtilsTrimEmptyTest.class);\n-    \tsuite.setName(\"StringUtilsTrimEmpty Tests\");\n+        TestSuite suite = new TestSuite(StringUtilsTrimEmptyTest.class);\n+        suite.setName(\"StringUtilsTrimEmpty Tests\");\n         return suite;\n     }\n \n--- a/src/test/org/apache/commons/lang/ValidateTest.java\n+++ b/src/test/org/apache/commons/lang/ValidateTest.java\n  *\n  * @author Stephen Colebourne\n  * @author Norm Deane\n- * @version $Id: ValidateTest.java,v 1.6 2004/10/08 21:44:41 scolebourne Exp $\n+ * @version $Id$\n  */\n public class ValidateTest extends TestCase {\n \n     }\n \n     public static Test suite() {\n-    \tTestSuite suite = new TestSuite(ValidateTest.class);\n-    \tsuite.setName(\"Validate Tests\");\n+        TestSuite suite = new TestSuite(ValidateTest.class);\n+        suite.setName(\"Validate Tests\");\n         return suite;\n     }\n \n \n     //-----------------------------------------------------------------------\n     public void testAllElementsOfType() {\n-    \tList coll = new ArrayList();\n-    \tcoll.add(\"a\");\n-    \tcoll.add(\"b\");\n-    \tValidate.allElementsOfType(coll, String.class, \"MSG\");\n-    \ttry {\n-    \t\tValidate.allElementsOfType(coll, Integer.class, \"MSG\");\n-    \t\tfail(\"Expecting IllegalArgumentException\");\n-    \t} catch (IllegalArgumentException ex) {\n-    \t\tassertEquals(\"MSG\", ex.getMessage());\n-    \t}\n-    \tcoll.set(1, Boolean.FALSE);\n-    \ttry {\n-    \t\tValidate.allElementsOfType(coll, String.class);\n-    \t\tfail(\"Expecting IllegalArgumentException\");\n-    \t} catch (IllegalArgumentException ex) {\n-    \t\tassertEquals(\"The validated collection contains an element not of type java.lang.String at index: 1\", ex.getMessage());\n-    \t}\n+        List coll = new ArrayList();\n+        coll.add(\"a\");\n+        coll.add(\"b\");\n+        Validate.allElementsOfType(coll, String.class, \"MSG\");\n+        try {\n+            Validate.allElementsOfType(coll, Integer.class, \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+        coll.set(1, Boolean.FALSE);\n+        try {\n+            Validate.allElementsOfType(coll, String.class);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated collection contains an element not of type java.lang.String at index: 1\", ex.getMessage());\n+        }\n         \n         coll = new ArrayList();\n         coll.add(new Integer(5));\n--- a/src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java\n  *\n  * @author <a href=\"mailto:sdowney@panix.com\">Steve Downey</a>\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: CompareToBuilderTest.java,v 1.8 2004/02/18 23:00:51 ggregory Exp $\n+ * @version $Id$\n  */\n public class CompareToBuilderTest extends TestCase {\n \n         public int getA() {\n             return a;\n         }\n-\t\tpublic int compareTo(Object o) {\n-\t\t\tTestObject rhs = (TestObject) o;\n-\t\t\treturn (a < rhs.a) ? -1 : (a > rhs.a) ? +1 : 0;\n-\t\t}\n+        public int compareTo(Object o) {\n+            TestObject rhs = (TestObject) o;\n+            return (a < rhs.a) ? -1 : (a > rhs.a) ? +1 : 0;\n+        }\n     }\n \n     static class TestSubObject extends TestObject {\n--- a/src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author <a href=\"mailto:alex@apache.org\">Alex Chaffee</a>\n- * @version $Id: ToStringBuilderTest.java,v 1.16 2004/07/26 21:39:21 ggregory Exp $\n+ * @version $Id$\n  */\n public class ToStringBuilderTest extends TestCase {\n \n         this.validateEmptyReflectionRegistry();\n     }\n \n-\tstatic class ReflectionTestFixtureA {\n-\t\tprivate char a='a';\n+    static class ReflectionTestFixtureA {\n+        private char a='a';\n         private transient char transientA='t';\n-\t}\n-\n-\tstatic class ReflectionTestFixtureB extends ReflectionTestFixtureA {\n-\t\tprivate char b='b';\n+    }\n+\n+    static class ReflectionTestFixtureB extends ReflectionTestFixtureA {\n+        private char b='b';\n         private transient char transientB='t';\n-\t}\n+    }\n \n     public void testInnerClassReflection() {\n         Outer outer = new Outer();\n--- a/src/test/org/apache/commons/lang/enum/EnumTest.java\n+++ b/src/test/org/apache/commons/lang/enum/EnumTest.java\n  *\n  * @author Stephen Colebourne\n  * @author Gary D. Gregory\n- * @version $Id: EnumTest.java,v 1.17 2004/02/18 23:01:51 ggregory Exp $\n+ * @version $Id$\n  */\n \n public final class EnumTest extends TestCase {\n         assertNotNull(list);\n         \n         assertEquals( list.size(),\n-        \t\t\t\tColorEnum.getEnumMap().keySet().size());\n+                        ColorEnum.getEnumMap().keySet().size());\n         \n         Iterator it = list.iterator();\n         assertSame(ColorEnum.RED, it.next());\n--- a/src/test/org/apache/commons/lang/enum/ValuedEnumTest.java\n+++ b/src/test/org/apache/commons/lang/enum/ValuedEnumTest.java\n  * Test cases for the {@link Enum} class.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: ValuedEnumTest.java,v 1.7 2004/02/18 23:22:29 ggregory Exp $\n+ * @version $Id$\n  */\n \n public final class ValuedEnumTest extends TestCase {\n         assertNotNull(list);\n         \n         assertEquals( list.size(),\n-        \t\t\t ValuedColorEnum.getEnumMap().keySet().size());\n+                     ValuedColorEnum.getEnumMap().keySet().size());\n         \n         Iterator it = list.iterator();\n         assertSame(ValuedColorEnum.RED, it.next());\n         assertNotNull(map);\n         \n         assertEquals( map.keySet().size(),\n-        \t\t\t ValuedColorEnum.getEnumList().size());\n-        \t\t\t \n+                     ValuedColorEnum.getEnumList().size());\n+                     \n         assertTrue(map.containsValue(ValuedColorEnum.RED));\n         assertTrue(map.containsValue(ValuedColorEnum.GREEN));\n         assertTrue(map.containsValue(ValuedColorEnum.BLUE));\n--- a/src/test/org/apache/commons/lang/enums/EnumTest.java\n+++ b/src/test/org/apache/commons/lang/enums/EnumTest.java\n  *\n  * @author Stephen Colebourne\n  * @author Gary D. Gregory\n- * @version $Id: EnumTest.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ * @version $Id$\n  */\n \n public final class EnumTest extends TestCase {\n         assertNotNull(list);\n         \n         assertEquals( list.size(),\n-        \t\t\t\tColorEnum.getEnumMap().keySet().size());\n+                        ColorEnum.getEnumMap().keySet().size());\n         \n         Iterator it = list.iterator();\n         assertSame(ColorEnum.RED, it.next());\n--- a/src/test/org/apache/commons/lang/enums/ValuedEnumTest.java\n+++ b/src/test/org/apache/commons/lang/enums/ValuedEnumTest.java\n  * Test cases for the {@link Enum} class.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: ValuedEnumTest.java,v 1.1 2004/02/23 04:34:20 ggregory Exp $\n+ * @version $Id$\n  */\n \n public final class ValuedEnumTest extends TestCase {\n         assertNotNull(list);\n         \n         assertEquals( list.size(),\n-        \t\t\t ValuedColorEnum.getEnumMap().keySet().size());\n+                     ValuedColorEnum.getEnumMap().keySet().size());\n         \n         Iterator it = list.iterator();\n         assertSame(ValuedColorEnum.RED, it.next());\n         assertNotNull(map);\n         \n         assertEquals( map.keySet().size(),\n-        \t\t\t ValuedColorEnum.getEnumList().size());\n-        \t\t\t \n+                     ValuedColorEnum.getEnumList().size());\n+                     \n         assertTrue(map.containsValue(ValuedColorEnum.RED));\n         assertTrue(map.containsValue(ValuedColorEnum.GREEN));\n         assertTrue(map.containsValue(ValuedColorEnum.BLUE));\n--- a/src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java\n+++ b/src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java\n  *\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n  * @author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\n- * @version $Id: NestableDelegateTestCase.java,v 1.10 2004/12/25 19:50:09 bayard Exp $\n+ * @version $Id$\n  */\n public class NestableDelegateTestCase extends junit.framework.TestCase {\n     private static final String CONSTRUCTOR_FAILED_MSG = \n         \n         // Only testing the flags for jdk1.3 and below\n         if (!ExceptionUtils.isThrowableNested()) {\n-        \tNestableDelegate.topDown = true; NestableDelegate.trimStackFrames = true;\n+            NestableDelegate.topDown = true; NestableDelegate.trimStackFrames = true;\n             checkStackTrace(d, true, true, NestableDelegateTester1.class.getName()+\": level 1\", 24);\n             NestableDelegate.topDown = true; NestableDelegate.trimStackFrames = false;\n             checkStackTrace(d, true, false, NestableDelegateTester1.class.getName()+\": level 1\", 80);\n--- a/src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java\n+++ b/src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java\n  * Tests the org.apache.commons.lang.exception.NestableException class.\n  *\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n- * @version $Id: NestableExceptionTestCase.java,v 1.12 2004/10/09 10:45:24 scolebourne Exp $\n+ * @version $Id$\n  */\n public class NestableExceptionTestCase extends AbstractNestableTestCase {\n     \n     }\n     \n     public void testSerialization()\n-    \tthrows java.io.IOException, ClassNotFoundException\n-    {\n-    \tRuntimeException nestedEx = new RuntimeException(\"nested exception message\");\n-    \tNestableExceptionTester1 ex = new NestableExceptionTester1(\"serialization test\", nestedEx);\n-\n-\t\tassertTrue( \"implements java.io.Serializable\", nestedEx instanceof java.io.Serializable);\n-\t\t\n-\t\tassertTrue( \"implements java.io.Serializable\", ex instanceof java.io.Serializable);\n-\t\t\n-\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n-\t\tByteArrayInputStream bais = null;\n-\t\tObjectOutputStream oos = null;\n-\t\tObjectInputStream ois = null;\n-\n-\t\ttry\n-\t\t{\t\t\n-\t\t\toos = new ObjectOutputStream(baos);\n-\t\t\toos.writeObject(ex);\n-\t\t\toos.flush();\n-\t\t\tbais = new ByteArrayInputStream(baos.toByteArray());\n-\t\t\tois = new ObjectInputStream(bais);\n-\t\t\tNestableExceptionTester1 deserializedEx = (NestableExceptionTester1) ois.readObject();\n-\t\t\tassertEquals( \n-\t\t\t\t\t\"getThrowableCount() return value\",\n-\t\t\t\t\t\tex.getThrowableCount(),\n-\t\t\t\t\t\tdeserializedEx.getThrowableCount());\n-\t\t\t\n-\t\t\tfor (int i = 0; i < ex.getThrowableCount(); i++)\n-\t\t\t{\n-\t\t\t\tThrowable t = ex.getThrowable(i);\n-\t\t\t\tThrowable deserializedThrowable = deserializedEx.getThrowable(i);\n-\t\t\t\t\n-\t\t\t\tassertEquals( t.getClass(),\n-\t\t\t\t\t\tdeserializedThrowable.getClass());\n-\t\t\t\t\t\t\n-\t\t\t\tassertEquals(\n-\t\t\t\t\tt.getMessage(),\n-\t\t\t\t\tdeserializedThrowable.getMessage());\n-\t\t\t}\n-\t\t}\n-\t\tfinally\n-\t\t{\n-\t\t\tif (null != oos)\n-\t\t\t{\n-\t\t\t\ttry\n-\t\t\t\t{\n-\t\t\t\t\toos.close();\n-\t\t\t\t}\n-\t\t\t\tcatch (Exception ignored)\n-\t\t\t\t{\n-\t\t\t\t\t// intentionally empty\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\t\n+        throws java.io.IOException, ClassNotFoundException\n+    {\n+        RuntimeException nestedEx = new RuntimeException(\"nested exception message\");\n+        NestableExceptionTester1 ex = new NestableExceptionTester1(\"serialization test\", nestedEx);\n+\n+        assertTrue( \"implements java.io.Serializable\", nestedEx instanceof java.io.Serializable);\n+        \n+        assertTrue( \"implements java.io.Serializable\", ex instanceof java.io.Serializable);\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ByteArrayInputStream bais = null;\n+        ObjectOutputStream oos = null;\n+        ObjectInputStream ois = null;\n+\n+        try\n+        {        \n+            oos = new ObjectOutputStream(baos);\n+            oos.writeObject(ex);\n+            oos.flush();\n+            bais = new ByteArrayInputStream(baos.toByteArray());\n+            ois = new ObjectInputStream(bais);\n+            NestableExceptionTester1 deserializedEx = (NestableExceptionTester1) ois.readObject();\n+            assertEquals( \n+                    \"getThrowableCount() return value\",\n+                        ex.getThrowableCount(),\n+                        deserializedEx.getThrowableCount());\n+            \n+            for (int i = 0; i < ex.getThrowableCount(); i++)\n+            {\n+                Throwable t = ex.getThrowable(i);\n+                Throwable deserializedThrowable = deserializedEx.getThrowable(i);\n+                \n+                assertEquals( t.getClass(),\n+                        deserializedThrowable.getClass());\n+                        \n+                assertEquals(\n+                    t.getMessage(),\n+                    deserializedThrowable.getMessage());\n+            }\n+        }\n+        finally\n+        {\n+            if (null != oos)\n+            {\n+                try\n+                {\n+                    oos.close();\n+                }\n+                catch (Exception ignored)\n+                {\n+                    // intentionally empty\n+                }\n+            }\n+        }\n+        \n     }\n }\n \n--- a/src/test/org/apache/commons/lang/text/InterpolationTest.java\n+++ b/src/test/org/apache/commons/lang/text/InterpolationTest.java\n  *\n  * @author Henri Yandell\n  * @author Ken Fitzpatrick\n- * @version $Id: InterpolationTest.java,v 1.1 2004/09/05 00:56:31 bayard Exp $\n+ * @version $Id$\n  */\n public class InterpolationTest extends TestCase {\n \n     }\n \n     public static Test suite() {\n-    \tTestSuite suite = new TestSuite(InterpolationTest.class);\n-    \tsuite.setName(\"Interpolation Tests\");\n+        TestSuite suite = new TestSuite(InterpolationTest.class);\n+        suite.setName(\"Interpolation Tests\");\n         return suite;\n     }\n \n--- a/src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java\n     }\n \n     public static Test suite() {\n-    \tTestSuite suite = new TestSuite(DateFormatUtilsTest.class);\n-    \tsuite.setName(\"DateFormatUtils Tests\");\n+        TestSuite suite = new TestSuite(DateFormatUtilsTest.class);\n+        suite.setName(\"DateFormatUtils Tests\");\n         return suite;\n     }\n \n--- a/src/test/org/apache/commons/lang/time/DateUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/time/DateUtilsTest.java\n     }\n \n     public static Test suite() {\n-    \tTestSuite suite = new TestSuite(DateUtilsTest.class);\n-    \tsuite.setName(\"DateUtils Tests\");\n+        TestSuite suite = new TestSuite(DateUtilsTest.class);\n+        suite.setName(\"DateUtils Tests\");\n         return suite;\n     }\n \n--- a/src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java\n     }\n \n     public static Test suite() {\n-    \tTestSuite suite = new TestSuite(DurationFormatUtilsTest.class);\n-    \tsuite.setName(\"DurationFormatUtils Tests\");\n+        TestSuite suite = new TestSuite(DurationFormatUtilsTest.class);\n+        suite.setName(\"DurationFormatUtils Tests\");\n         return suite;\n     }\n \n--- a/src/test/org/apache/commons/lang/time/StopWatchTest.java\n+++ b/src/test/org/apache/commons/lang/time/StopWatchTest.java\n     }\n \n     public static Test suite() {\n-    \tTestSuite suite = new TestSuite(StopWatchTest.class);\n-    \tsuite.setName(\"StopWatch Tests\");\n+        TestSuite suite = new TestSuite(StopWatchTest.class);\n+        suite.setName(\"StopWatch Tests\");\n         return suite;\n     }\n ", "timestamp": 1107484675, "metainfo": ""}