{"sha": "c2c2ffafb0ad88f8d07c76a5a15f719a5500054b", "log": "Change scope of methods from package to public   ", "commit": "\n--- a/src/java/org/apache/commons/lang/exception/NestableDelegate.java\n+++ b/src/java/org/apache/commons/lang/exception/NestableDelegate.java\n \n import java.io.PrintStream;\n import java.io.PrintWriter;\n+import java.io.Serializable;\n import java.io.StringWriter;\n import java.util.*;\n \n  * @author Sean C. Sullivan\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: NestableDelegate.java,v 1.13 2003/05/14 02:59:13 bayard Exp $\n+ * @version $Id: NestableDelegate.java,v 1.14 2003/06/10 06:16:54 scolebourne Exp $\n  */\n-public class NestableDelegate implements java.io.Serializable {\n+public class NestableDelegate implements Serializable {\n \n     /**\n      * Constructor error message.\n      * @param nestable the Nestable implementation (<i>must</i> extend\n      * {@link java.lang.Throwable})\n      */\n-    NestableDelegate(Nestable nestable) {\n+    public NestableDelegate(Nestable nestable) {\n         if (nestable instanceof Throwable) {\n             this.nestable = (Throwable) nestable;\n         } else {\n      * negative or not less than the count of <code>Throwable</code>s in the\n      * chain\n      */\n-    String getMessage(int index) {\n+    public String getMessage(int index) {\n         Throwable t = this.getThrowable(index);\n         if (Nestable.class.isInstance(t)) {\n             return ((Nestable) t).getMessage(0);\n      * @return The concatenated message for this and all nested\n      * <code>Throwable</code>s\n      */\n-    String getMessage(String baseMsg) {\n+    public String getMessage(String baseMsg) {\n         StringBuffer msg = new StringBuffer();\n         if (baseMsg != null) {\n             msg.append(baseMsg);\n      *\n      * @return the error messages\n      */\n-    String[] getMessages() {\n+    public String[] getMessages() {\n         Throwable[] throwables = this.getThrowables();\n         String[] msgs = new String[throwables.length];\n         for (int i = 0; i < throwables.length; i++) {\n      * negative or not less than the count of <code>Throwable</code>s in the\n      * chain\n      */\n-    Throwable getThrowable(int index) {\n+    public Throwable getThrowable(int index) {\n         if (index == 0) {\n             return this.nestable;\n         }\n      *\n      * @return the throwable count\n      */\n-    int getThrowableCount() {\n+    public int getThrowableCount() {\n         return ExceptionUtils.getThrowableCount(this.nestable);\n     }\n \n      *\n      * @return the <code>Throwable</code>s\n      */\n-    Throwable[] getThrowables() {\n+    public Throwable[] getThrowables() {\n         return ExceptionUtils.getThrowables(this.nestable);\n     }\n \n      * is negative or not less than the count of <code>Throwable</code>s in the\n      * chain\n      */\n-    int indexOfThrowable(Class type, int fromIndex) {\n+    public int indexOfThrowable(Class type, int fromIndex) {\n         return ExceptionUtils.indexOfThrowable(this.nestable, type, fromIndex);\n     }\n \n      * @param t The <code>Throwable</code>.\n      * @return  An array of strings describing each stack frame.\n      */\n-    private String[] getStackFrames(Throwable t) {\n+    protected String[] getStackFrames(Throwable t) {\n         StringWriter sw = new StringWriter();\n         PrintWriter pw = new PrintWriter(sw, true);\n \n      *\n      * @param stacks The list containing String[] elements\n      */\n-     private void trimStackFrames(List stacks) {\n+    protected void trimStackFrames(List stacks) {\n          for (int size=stacks.size(), i=size-1; i > 0; i--) {\n              String[] curr = (String[]) stacks.get(i);\n              String[] next = (String[]) stacks.get(i-1); ", "timestamp": 1055225814, "metainfo": ""}