{"sha": "dc03d7c8f81fa7933a095e65860078c1e0c595b8", "log": "Use the name \"buffer\", not \"buf\".  ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n     private static final long serialVersionUID = 7628716375283629643L;\n \n     /** Internal data storage. */\n-    protected char[] buf;\n+    protected char[] buffer;\n     /** Current size of the buffer. */\n     protected int size;\n     /** The null text. */\n         if (initialCapacity <= 0) {\n             initialCapacity = CAPACITY;\n         }\n-        buf = new char[initialCapacity];\n+        buffer = new char[initialCapacity];\n     }\n \n     /**\n     public StrBuilder(String str) {\n         super();\n         if (str == null) {\n-            buf = new char[CAPACITY];\n+            buffer = new char[CAPACITY];\n         } else {\n-            buf = new char[str.length() + CAPACITY];\n+            buffer = new char[str.length() + CAPACITY];\n             append(str);\n         }\n     }\n             int newEnd = length;\n             size = length;\n             for (int i = oldEnd; i < newEnd; i++) {\n-                buf[i] = '\\0';\n+                buffer[i] = '\\0';\n             }\n         }\n     }\n      * @return the capacity\n      */\n     public int capacity() {\n-        return buf.length;\n+        return buffer.length;\n     }\n \n     /**\n      * @param capacity  the capacity to ensure\n      */\n     public void ensureCapacity(int capacity) {\n-        if (capacity > buf.length) {\n-            char[] old = buf;\n-            buf = new char[capacity];\n-            System.arraycopy(old, 0, buf, 0, size);\n+        if (capacity > buffer.length) {\n+            char[] old = buffer;\n+            buffer = new char[capacity];\n+            System.arraycopy(old, 0, buffer, 0, size);\n         }\n     }\n \n      * Minimizes the capacity to the actual length of the string.\n      */\n     public void minimizeCapacity() {\n-        if (buf.length > length()) {\n-            char[] old = buf;\n-            buf = new char[length()];\n-            System.arraycopy(old, 0, buf, 0, size);\n+        if (buffer.length > length()) {\n+            char[] old = buffer;\n+            buffer = new char[length()];\n+            System.arraycopy(old, 0, buffer, 0, size);\n         }\n     }\n \n         if (index < 0 || index >= length()) {\n             throw new StringIndexOutOfBoundsException(index);\n         }\n-        return buf[index];\n+        return buffer[index];\n     }\n \n     /**\n         if (index < 0 || index >= length()) {\n             throw new StringIndexOutOfBoundsException(index);\n         }\n-        buf[index] = ch;\n+        buffer[index] = ch;\n     }\n \n     //-----------------------------------------------------------------------\n             return ArrayUtils.EMPTY_CHAR_ARRAY;\n         }\n         char chars[] = new char[size];\n-        System.arraycopy(buf, 0, chars, 0, size);\n+        System.arraycopy(buffer, 0, chars, 0, size);\n         return chars;\n     }\n \n             return ArrayUtils.EMPTY_CHAR_ARRAY;\n         }\n         char chars[] = new char[len];\n-        System.arraycopy(buf, startIndex, chars, 0, len);\n+        System.arraycopy(buffer, startIndex, chars, 0, len);\n         return chars;\n     }\n \n         if (destination == null || destination.length < len) {\n             destination = new char[len];\n         }\n-        System.arraycopy(buf, 0, destination, 0, len);\n+        System.arraycopy(buffer, 0, destination, 0, len);\n         return destination;\n     }\n \n         if (startIndex > endIndex) {\n             throw new StringIndexOutOfBoundsException(\"end < start\");\n         }\n-        System.arraycopy(buf, startIndex, destination, destinationIndex, endIndex - startIndex);\n+        System.arraycopy(buffer, startIndex, destination, destinationIndex, endIndex - startIndex);\n     }\n \n     //-----------------------------------------------------------------------\n         if (strLen > 0) {\n             int len = length();\n             ensureCapacity(len + strLen);\n-            str.getChars(0, strLen, buf, len);\n+            str.getChars(0, strLen, buffer, len);\n             size += strLen;\n         }\n         return this;\n         if (strLen > 0) {\n             int len = length();\n             ensureCapacity(len + strLen);\n-            str.getChars(0, strLen, buf, len);\n+            str.getChars(0, strLen, buffer, len);\n             size += strLen;\n         }\n         return this;\n         if (strLen > 0) {\n             int len = length();\n             ensureCapacity(len + strLen);\n-            System.arraycopy(str.buf, 0, buf, len, strLen);\n+            System.arraycopy(str.buffer, 0, buffer, len, strLen);\n             size += strLen;\n         }\n         return this;\n         if (strLen > 0) {\n             int len = length();\n             ensureCapacity(len + strLen);\n-            System.arraycopy(chars, 0, buf, len, strLen);\n+            System.arraycopy(chars, 0, buffer, len, strLen);\n             size += strLen;\n         }\n         return this;\n         if (length > 0) {\n             int len = length();\n             ensureCapacity(len + length);\n-            System.arraycopy(chars, startIndex, buf, len, length);\n+            System.arraycopy(chars, startIndex, buffer, len, length);\n             size += length;\n         }\n         return this;\n     public StrBuilder append(boolean value) {\n         if (value) {\n             ensureCapacity(size + 4);\n-            buf[size++] = 't';\n-            buf[size++] = 'r';\n-            buf[size++] = 'u';\n-            buf[size++] = 'e';\n+            buffer[size++] = 't';\n+            buffer[size++] = 'r';\n+            buffer[size++] = 'u';\n+            buffer[size++] = 'e';\n         } else {\n             ensureCapacity(size + 5);\n-            buf[size++] = 'f';\n-            buf[size++] = 'a';\n-            buf[size++] = 'l';\n-            buf[size++] = 's';\n-            buf[size++] = 'e';\n+            buffer[size++] = 'f';\n+            buffer[size++] = 'a';\n+            buffer[size++] = 'l';\n+            buffer[size++] = 's';\n+            buffer[size++] = 'e';\n         }\n         return this;\n     }\n     public StrBuilder append(char ch) {\n         int len = length();\n         ensureCapacity(len + 1);\n-        buf[size++] = ch;\n+        buffer[size++] = ch;\n         return this;\n     }\n \n         if (length >= 0) {\n             ensureCapacity(size + length);\n             for (int i = 0; i < length; i++) {\n-                buf[size++] = padChar;\n+                buffer[size++] = padChar;\n             }\n         }\n         return this;\n             String str = (obj == null ? getNullText() : obj.toString());\n             int strLen = str.length();\n             if (strLen >= width) {\n-                str.getChars(strLen - width, strLen, buf, size);\n+                str.getChars(strLen - width, strLen, buffer, size);\n             } else {\n                 int padLen = width - strLen;\n                 for (int i = 0; i < padLen; i++) {\n-                    buf[size + i] = padChar;\n+                    buffer[size + i] = padChar;\n                 }\n-                str.getChars(0, strLen, buf, size + padLen);\n+                str.getChars(0, strLen, buffer, size + padLen);\n             }\n             size += width;\n         }\n             String str = (obj == null ? getNullText() : obj.toString());\n             int strLen = str.length();\n             if (strLen >= width) {\n-                str.getChars(0, strLen, buf, size);\n+                str.getChars(0, strLen, buffer, size);\n             } else {\n                 int padLen = width - strLen;\n-                str.getChars(0, strLen, buf, size);\n+                str.getChars(0, strLen, buffer, size);\n                 for (int i = 0; i < padLen; i++) {\n-                    buf[size + strLen + i] = padChar;\n+                    buffer[size + strLen + i] = padChar;\n                 }\n             }\n             size += width;\n         if (strLen > 0) {\n             int newSize = size + strLen;\n             ensureCapacity(newSize);\n-            System.arraycopy(buf, index, buf, index + strLen, size - index);\n+            System.arraycopy(buffer, index, buffer, index + strLen, size - index);\n             size = newSize;\n-            str.getChars(0, strLen, buf, index);\n+            str.getChars(0, strLen, buffer, index);\n         }\n         return this;\n     }\n         int len = chars.length;\n         if (len > 0) {\n             ensureCapacity(size + len);\n-            System.arraycopy(buf, index, buf, index + len, size - index);\n-            System.arraycopy(chars, 0, buf, index, len);\n+            System.arraycopy(buffer, index, buffer, index + len, size - index);\n+            System.arraycopy(chars, 0, buffer, index, len);\n             size += len;\n         }\n         return this;\n         }\n         if (length > 0) {\n             ensureCapacity(size + length);\n-            System.arraycopy(buf, index, buf, index + length, size - index);\n-            System.arraycopy(chars, offset, buf, index, length);\n+            System.arraycopy(buffer, index, buffer, index + length, size - index);\n+            System.arraycopy(chars, offset, buffer, index, length);\n             size += length;\n         }\n         return this;\n         validateIndex(index);\n         if (value) {\n             ensureCapacity(size + 4);\n-            System.arraycopy(buf, index, buf, index + 4, size - index);\n-            buf[index++] = 't';\n-            buf[index++] = 'r';\n-            buf[index++] = 'u';\n-            buf[index] = 'e';\n+            System.arraycopy(buffer, index, buffer, index + 4, size - index);\n+            buffer[index++] = 't';\n+            buffer[index++] = 'r';\n+            buffer[index++] = 'u';\n+            buffer[index] = 'e';\n             size += 4;\n         } else {\n             ensureCapacity(size + 5);\n-            System.arraycopy(buf, index, buf, index + 5, size - index);\n-            buf[index++] = 'f';\n-            buf[index++] = 'a';\n-            buf[index++] = 'l';\n-            buf[index++] = 's';\n-            buf[index] = 'e';\n+            System.arraycopy(buffer, index, buffer, index + 5, size - index);\n+            buffer[index++] = 'f';\n+            buffer[index++] = 'a';\n+            buffer[index++] = 'l';\n+            buffer[index++] = 's';\n+            buffer[index] = 'e';\n             size += 5;\n         }\n         return this;\n     public StrBuilder insert(int index, char value) {\n         validateIndex(index);\n         ensureCapacity(size + 1);\n-        System.arraycopy(buf, index, buf, index + 1, size - index);\n-        buf[index] = value;\n+        System.arraycopy(buffer, index, buffer, index + 1, size - index);\n+        buffer[index] = value;\n         size++;\n         return this;\n     }\n         endIndex = validateRange(startIndex, endIndex);\n         int len = endIndex - startIndex;\n         if (len > 0) {\n-            System.arraycopy(buf, endIndex, buf, startIndex, size - endIndex);\n+            System.arraycopy(buffer, endIndex, buffer, startIndex, size - endIndex);\n             size -= len;\n         }\n         return this;\n         if (index < 0 || index >= size) {\n             throw new StringIndexOutOfBoundsException(index);\n         }\n-        System.arraycopy(buf, index + 1, buf, index, size - index - 1);\n+        System.arraycopy(buffer, index + 1, buffer, index, size - index - 1);\n         size--;\n         return this;\n     }\n      */\n     public StrBuilder delete(char ch) {\n         for (int i = 0; i < size; i++) {\n-            if (buf[i] == ch) {\n+            if (buffer[i] == ch) {\n                 int start = i;\n                 while (++i < size) {\n-                    if (buf[i] != ch) {\n+                    if (buffer[i] != ch) {\n                         break;\n                     }\n                 }\n-                System.arraycopy(buf, i, buf, start, size - i);\n+                System.arraycopy(buffer, i, buffer, start, size - i);\n                 size -= (i - start);\n             }\n         }\n             ensureCapacity(newSize);\n         }\n         if (insertLen != removeLen) {\n-            System.arraycopy(buf, endIndex, buf, startIndex + insertLen, size - endIndex);\n+            System.arraycopy(buffer, endIndex, buffer, startIndex + insertLen, size - endIndex);\n             size = newSize;\n         }\n-        str.getChars(0, insertLen, buf, startIndex);\n+        str.getChars(0, insertLen, buffer, startIndex);\n         return this;\n     }\n \n         }\n         if (insertLen != removeLen) {\n             //shift the current characters to the right\n-            System.arraycopy(buf, endIndex, buf, startIndex + insertLen, size - endIndex);\n+            System.arraycopy(buffer, endIndex, buffer, startIndex + insertLen, size - endIndex);\n             //adjust the size accordingly\n             size += (insertLen - removeLen);\n         }\n-        builder.getChars(0, insertLen, buf, startIndex);\n+        builder.getChars(0, insertLen, buffer, startIndex);\n         return this;\n     }\n \n     public StrBuilder replace(char search, char replace) {\n         if (search != replace) {\n             for (int i = 0; i < size; i++) {\n-                if (buf[i] == search) {\n-                    buf[i] = replace;\n+                if (buffer[i] == search) {\n+                    buffer[i] = replace;\n                 }\n             }\n         }\n             return false;\n         }\n         for (int i = 0; i < len; i++) {\n-            if (buf[i] != str.charAt(i)) {\n+            if (buffer[i] != str.charAt(i)) {\n                 return false;\n             }\n         }\n         }\n         int pos = size - len;\n         for (int i = 0; i < len; i++,pos++) {\n-            if (buf[pos] != str.charAt(i)) {\n+            if (buffer[pos] != str.charAt(i)) {\n                 return false;\n             }\n         }\n      */\n     public String substring(int startIndex, int endIndex) {\n         endIndex = validateRange(startIndex, endIndex);\n-        return new String(buf, startIndex, endIndex - startIndex);\n+        return new String(buffer, startIndex, endIndex - startIndex);\n     }\n \n     /**\n         if (length <= 0) {\n             return \"\";\n         } else if (length >= size) {\n-            return new String(buf, 0, size);\n+            return new String(buffer, 0, size);\n         } else {\n-            return new String(buf, 0, length);\n+            return new String(buffer, 0, length);\n         }\n     }\n \n         if (length <= 0) {\n             return \"\";\n         } else if (length >= size) {\n-            return new String(buf, 0, size);\n+            return new String(buffer, 0, size);\n         } else {\n-            return new String(buf, size - length, length);\n+            return new String(buffer, size - length, length);\n         }\n     }\n \n             return \"\";\n         }\n         if (size <= index + length) {\n-            return new String(buf, index, size - index);\n+            return new String(buffer, index, size - index);\n         } else {\n-            return new String(buf, index, length);\n+            return new String(buffer, index, length);\n         }\n     }\n \n      * @return true if the builder contains the character\n      */\n     public boolean contains(char ch) {\n-        char[] thisBuf = buf;\n+        char[] thisBuf = buffer;\n         for (int i = 0; i < thisBuf.length; i++) {\n             if (thisBuf[i] == ch) {\n                 return true;\n         if (startIndex >= size) {\n             return -1;\n         }\n-        char[] thisBuf = buf;\n+        char[] thisBuf = buffer;\n         for (int i = startIndex; i < thisBuf.length; i++) {\n             if (thisBuf[i] == ch) {\n                 return i;\n             if (strLen == 1) {\n                 return indexOf(str.charAt(0), startIndex);\n             }\n-            char[] thisBuf = buf;\n+            char[] thisBuf = buffer;\n             outer:\n             for (int i = startIndex; i < thisBuf.length - strLen; i++) {\n                 for (int j = 0; j < strLen; j++) {\n             return -1;\n         }\n         for (int i = startIndex; i >= 0; i--) {\n-            if (buf[i] == ch) {\n+            if (buffer[i] == ch) {\n                 return i;\n             }\n         }\n             outer:\n             for (int i = startIndex - strLen + 1; i >= 0; i--) {\n                 for (int j = 0; j < strLen; j++) {\n-                    if (str.charAt(j) != buf[i + j]) {\n+                    if (str.charAt(j) != buffer[i + j]) {\n                         continue outer;\n                     }\n                 }\n         \n         int half = size / 2;\n         for (int leftIdx = 0, rightIdx = size - 1; leftIdx < half; leftIdx++,rightIdx--) {\n-            char swap = buf[leftIdx];\n-            buf[leftIdx] = buf[rightIdx];\n-            buf[rightIdx] = swap;\n+            char swap = buffer[leftIdx];\n+            buffer[leftIdx] = buffer[rightIdx];\n+            buffer[rightIdx] = swap;\n         }\n         return this;\n     }\n      * @return the builder as a String\n      */\n     public String toString() {\n-        return new String(buf, 0, size);\n+        return new String(buffer, 0, size);\n     }\n \n     /**\n      * @return the builder as a StringBuffer\n      */\n     public StringBuffer toStringBuffer() {\n-        return new StringBuffer(size).append(buf, 0, size);\n+        return new StringBuffer(size).append(buffer, 0, size);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/test/org/apache/commons/lang/text/StrBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/text/StrBuilderTest.java\n     //-----------------------------------------------------------------------\n     public void testCapacity() {\n         StrBuilder sb = new StrBuilder();\n-        assertEquals(sb.buf.length, sb.capacity());\n+        assertEquals(sb.buffer.length, sb.capacity());\n         \n         sb.append(\"HelloWorldHelloWorldHelloWorldHelloWorld\");\n-        assertEquals(sb.buf.length, sb.capacity());\n+        assertEquals(sb.buffer.length, sb.capacity());\n     }\n \n     public void testEnsureCapacity() {\n         sb.append(\"Hello\");\n         sb.clear();\n         assertEquals(0, sb.length());\n-        assertEquals(true, sb.buf.length >= 5);\n+        assertEquals(true, sb.buffer.length >= 5);\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1123092155, "metainfo": ""}