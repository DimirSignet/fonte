{"sha": "9446bb16086c3873320992d90a9fe2200e6cc89c", "log": "removed empty statement from catch block that takes no action, using comment only to denote no action; added super to empty constructors  ", "commit": "\n--- a/src/java/org/apache/commons/lang/enum/Enum.java\n+++ b/src/java/org/apache/commons/lang/enum/Enum.java\n          * <p>Restrictive constructor.</p>\n          */\n         private Entry() {\n-          ; // empty constructor\n+            super();\n         }\n     }\n \n                 String name = (String) mth.invoke(other, null);\n                 return iName.equals(name);\n             } catch (NoSuchMethodException e) {\n-                ; // ignore - should never happen\n+                // ignore - should never happen\n             } catch (IllegalAccessException e) {\n-                ; // ignore - should never happen\n+                // ignore - should never happen\n             } catch (InvocationTargetException e) {\n-                ; // ignore - should never happen\n+                // ignore - should never happen\n             }\n             return false;\n         }\n--- a/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n+++ b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n      * to be created, although that is not normally necessary.</p>\n      */\n     public ExceptionUtils() {\n-      ; // empty constructor\n+        super();\n     }\n \n     //-----------------------------------------------------------------------\n         try {\n             method = throwable.getClass().getMethod(methodName, null);\n         } catch (NoSuchMethodException ignored) {\n-          ; // exception ignored\n+            // exception ignored\n         } catch (SecurityException ignored) {\n-          ; // exception ignored\n+            // exception ignored\n         }\n \n         if (method != null && Throwable.class.isAssignableFrom(method.getReturnType())) {\n             try {\n                 return (Throwable) method.invoke(throwable, ArrayUtils.EMPTY_OBJECT_ARRAY);\n             } catch (IllegalAccessException ignored) {\n-              ; // exception ignored\n+                // exception ignored\n             } catch (IllegalArgumentException ignored) {\n-              ; // exception ignored\n+                // exception ignored\n             } catch (InvocationTargetException ignored) {\n-              ; // exception ignored\n+                // exception ignored\n             }\n         }\n         return null;\n         try {\n             field = throwable.getClass().getField(fieldName);\n         } catch (NoSuchFieldException ignored) {\n-          ; // exception ignored\n+            // exception ignored\n         } catch (SecurityException ignored) {\n-          ; // exception ignored\n+            // exception ignored\n         }\n \n         if (field != null && Throwable.class.isAssignableFrom(field.getType())) {\n             try {\n                 return (Throwable) field.get(throwable);\n             } catch (IllegalAccessException ignored) {\n-              ; // exception ignored\n+                // exception ignored\n             } catch (IllegalArgumentException ignored) {\n-              ; // exception ignored\n+                // exception ignored\n             }\n         }\n         return null;\n                     return true;\n                 }\n             } catch (NoSuchMethodException ignored) {\n-              ; // exception ignored\n+                // exception ignored\n             } catch (SecurityException ignored) {\n-              ; // exception ignored\n+                // exception ignored\n             }\n         }\n \n                 return true;\n             }\n         } catch (NoSuchFieldException ignored) {\n-          ; // exception ignored\n+            // exception ignored\n         } catch (SecurityException ignored) {\n-          ; // exception ignored\n+            // exception ignored\n         }\n \n         return false;\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n      * to operate.</p>\n      */\n     public NumberUtils() {\n-      ; // empty constructor\n+        super();\n     }\n \n     //-----------------------------------------------------------------------\n                         try {\n                             return createLong(numeric);\n                         } catch (NumberFormatException nfe) {\n-                            ; //Too big for a long\n+                            //Too big for a long\n                         }\n                         return createBigInteger(numeric);\n \n                         }\n \n                     } catch (NumberFormatException nfe) {\n-                      ; // empty catch\n+                        // ignore the bad number\n                     }\n                     //Fall through\n                 case 'd' :\n                             return d;\n                         }\n                     } catch (NumberFormatException nfe) {\n-                      ; // empty constructor\n+                        // ignore the bad number\n                     }\n                     try {\n                         return createBigDecimal(numeric);\n                     } catch (NumberFormatException e) {\n-                      ; // empty constructor\n+                        // ignore the bad number\n                     }\n                     //Fall through\n                 default :\n                 try {\n                     return createInteger(str);\n                 } catch (NumberFormatException nfe) {\n-                  ; // empty contructor\n+                    // ignore the bad number\n                 }\n                 try {\n                     return createLong(str);\n                 } catch (NumberFormatException nfe) {\n-                  ; // empty constructor\n+                    // ignore the bad number\n                 }\n                 return createBigInteger(str);\n \n                         return f;\n                     }\n                 } catch (NumberFormatException nfe) {\n-                  ; // empty constructor\n+                    // ignore the bad number\n                 }\n                 try {\n                     Double d = createDouble(str);\n                         return d;\n                     }\n                 } catch (NumberFormatException nfe) {\n-                  ; // empty constructor\n+                    // ignore the bad number\n                 }\n \n                 return createBigDecimal(str);", "timestamp": 1120612552, "metainfo": ""}