{"sha": "0cc52320e47838ec12a371a446faa3b48b1b19e8", "log": "[lang] Using ReflectionToStringBuilder and excluding secure fields. ASF Bugzilla Bug 36925. http://issues.apache.org/bugzilla/show_bug.cgi?id=36925  ", "commit": "\n--- a/src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java\n import java.lang.reflect.AccessibleObject;\n import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collection;\n import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n import java.util.Set;\n \n+import org.apache.commons.lang.ArrayUtils;\n import org.apache.commons.lang.ClassUtils;\n \n /**\n     }\n \n     /**\n-     * Builds a String for a toString method excluding the given field name.\n+     * Builds a String for a toString method excluding the given field names.\n+     * \n+     * @param object\n+     *            The object to \"toString\".\n+     * @param excludeFieldNames\n+     *            The field names to exclude. Null excludes nothing.\n+     * @return The toString value.\n+     */\n+    public static String toStringExclude(Object object, Collection excludeFieldNames) {\n+        return toStringExclude(object, toNoNullStringArray(excludeFieldNames));\n+    }\n+\n+    /**\n+     * Converts the given Collection into an array of Strings. The returned array does not contain <code>null</code>\n+     * entries. Note that {@link Arrays#sort(Object[])} will throw an {@link NullPointerException} if an array element \n+     * is <code>null</code>.\n+     * \n+     * @param collection\n+     *            The collection to convert\n+     * @return A new array of Strings.\n+     */\n+    private static String[] toNoNullStringArray(Collection collection) {\n+        if (collection == null) {\n+            return ArrayUtils.EMPTY_STRING_ARRAY;\n+        }\n+        return toNoNullStringArray(collection.toArray());\n+    }\n+\n+    /**\n+     * Returns a new array of Strings without null elements. Internal method used to normalize exclude lists\n+     * (arrays and collections). Note that {@link Arrays#sort(Object[])} will throw an {@link NullPointerException} \n+     * if an array element is <code>null</code>.\n+     * \n+     * @param array\n+     *            The array to check\n+     * @return The given array or a new array without null.\n+     */\n+    private static String[] toNoNullStringArray(Object[] array) {\n+        ArrayList list = new ArrayList(array.length);\n+        for (int i = 0; i < array.length; i++) {\n+            Object e = array[i];\n+            if (e != null) {\n+                list.add(e.toString());\n+            }\n+        }\n+        return (String[]) list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);\n+    }\n+    \n+\n+    /**\n+     * Builds a String for a toString method excluding the given field names.\n      * \n      * @param object\n      *            The object to \"toString\".\n      * Sets the field names to exclude.\n      * \n      * @param excludeFieldNamesParam\n-     *            The excludeFieldNames to set.\n+     *            The excludeFieldNames to excluding from toString or <code>null</code>.\n      * @return <code>this</code>\n      */\n     public ReflectionToStringBuilder setExcludeFieldNames(String[] excludeFieldNamesParam) {\n         if (excludeFieldNamesParam == null) {\n             this.excludeFieldNames = null;\n-        }\n-        this.excludeFieldNames = (String[]) excludeFieldNamesParam.clone();\n-        Arrays.sort(this.excludeFieldNames);\n+        } else {\n+            this.excludeFieldNames = (String[])toNoNullStringArray(excludeFieldNamesParam);\n+            Arrays.sort(this.excludeFieldNames);\n+        }\n         return this;\n     }\n ", "timestamp": 1145254687, "metainfo": ""}