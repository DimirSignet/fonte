{"sha": "8b12cda5431bf12810673e08958424399390bee9", "log": "Add primitiveToWrapper() bug 23683, from Norm Deane   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ClassUtils.java\n+++ b/src/java/org/apache/commons/lang/ClassUtils.java\n package org.apache.commons.lang;\n \n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.Map;\n /**\n  * <p>Operates on classes without using reflection.</p>\n  *\n  *\n  * @author Stephen Colebourne\n  * @author Gary Gregory\n+ * @author Norm Deane\n  * @since 2.0\n- * @version $Id: ClassUtils.java,v 1.22 2003/09/07 14:32:34 psteitz Exp $\n+ * @version $Id: ClassUtils.java,v 1.23 2003/10/23 21:03:43 scolebourne Exp $\n  */\n public class ClassUtils {\n \n      * <p>The inner class separator String: <code>$</code>.</p>\n      */\n     public static final String INNER_CLASS_SEPARATOR = String.valueOf(INNER_CLASS_SEPARATOR_CHAR);\n+    \n+    /** \n+     * Maps primitive <code>Class</code>es to their corresponding wrapper <code>Class</code>. \n+     */\n+    private static Map  primitiveWrapperMap = new HashMap();\n+    static {\n+         primitiveWrapperMap.put(Boolean.TYPE, Boolean.class);\n+         primitiveWrapperMap.put(Byte.TYPE, Byte.class);\n+         primitiveWrapperMap.put(Character.TYPE, Character.class);\n+         primitiveWrapperMap.put(Short.TYPE, Short.class);\n+         primitiveWrapperMap.put(Integer.TYPE, Integer.class);\n+         primitiveWrapperMap.put(Long.TYPE, Long.class);\n+         primitiveWrapperMap.put(Double.TYPE, Double.class);\n+         primitiveWrapperMap.put(Float.TYPE, Float.class);\n+    }\n     \n     /**\n      * <p>ClassUtils instances should NOT be constructed in standard programming.\n         return toClass.isAssignableFrom(cls);\n     }\n     \n+    /**\n+     * <p>Converts the specified primitive Class object to its corresponding\n+     * wrapper Class object.</p>\n+     *\n+     * @param cls  the class to convert, may be null\n+     * @return the wrapper class for <code>cls</code> or <code>cls</code> if\n+     * <code>cls</code> is not a primitive. <code>null</code> if null input.\n+     */\n+    public static Class primitiveToWrapper(Class cls) {\n+        Class convertedClass = cls;\n+        if (cls != null && cls.isPrimitive()) {\n+            convertedClass = (Class) primitiveWrapperMap.get(cls);\n+        }   \n+        return convertedClass;\n+    }\n+    \n     // Inner class\n     // ----------------------------------------------------------------------\n     /**\n      * <p>Is the specified class an inner class or static nested class.</p>\n      * \n-     * @param cls  the class to check\n+     * @param cls  the class to check, may be null\n      * @return <code>true</code> if the class is an inner or static nested class,\n      *  false if not or <code>null</code>\n      */\n--- a/src/test/org/apache/commons/lang/ClassUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ClassUtilsTest.java\n  * Unit tests {@link org.apache.commons.lang.ClassUtils}.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: ClassUtilsTest.java,v 1.6 2003/08/18 02:22:25 bayard Exp $\n+ * @version $Id: ClassUtilsTest.java,v 1.7 2003/10/23 21:03:44 scolebourne Exp $\n  */\n public class ClassUtilsTest extends TestCase {\n \n         assertEquals(\"boolean -> boolean\", true, ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE));\n     }\n     \n+    public void testPrimitiveToWrapper() {\n+       \n+        // test primitive classes\n+        assertEquals(\"boolean -> Boolean.class\", \n+            Boolean.class, ClassUtils.primitiveToWrapper(Boolean.TYPE));   \n+        assertEquals(\"byte -> Byte.class\",\n+            Byte.class, ClassUtils.primitiveToWrapper(Byte.TYPE));\n+        assertEquals(\"char -> Character.class\",\n+            Character.class, ClassUtils.primitiveToWrapper(Character.TYPE));\n+        assertEquals(\"short -> Short.class\",\n+            Short.class, ClassUtils.primitiveToWrapper(Short.TYPE));\n+        assertEquals(\"int -> Integer.class\",\n+            Integer.class, ClassUtils.primitiveToWrapper(Integer.TYPE));\n+        assertEquals(\"long -> Long.class\",\n+            Long.class, ClassUtils.primitiveToWrapper(Long.TYPE));\n+        assertEquals(\"double -> Double.class\",\n+            Double.class, ClassUtils.primitiveToWrapper(Double.TYPE));\n+        assertEquals(\"float -> Float.class\",\n+            Float.class, ClassUtils.primitiveToWrapper(Float.TYPE));\n+        \n+        // test a few other classes\n+        assertEquals(\"String.class -> String.class\",\n+            String.class, ClassUtils.primitiveToWrapper(String.class));\n+        assertEquals(\"ClassUtils.class -> ClassUtils.class\",\n+            org.apache.commons.lang.ClassUtils.class, \n+            ClassUtils.primitiveToWrapper(org.apache.commons.lang.ClassUtils.class));\n+            \n+        // test null     \n+        assertNull(\"null -> null\",\n+            ClassUtils.primitiveToWrapper(null));\n+    }\n+    \n //    public static List getAssignableFrom(List classes, Class superclass) {\n //    public static boolean isAssignable(Class[] classArray, Class[] toClassArray) {\n //    public static boolean isAssignable(Class cls, Class toClass) {", "timestamp": 1066943024, "metainfo": ""}