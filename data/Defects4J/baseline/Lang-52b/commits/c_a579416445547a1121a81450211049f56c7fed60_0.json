{"sha": "a579416445547a1121a81450211049f56c7fed60", "log": "typo fixed, a couple of extra overload methods added (need javadoc) and formatting for start->end changed to match millis implementation, for a pattern of M, 4 years is reported as 48 months and not 0 months.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Henri Yandell\n  * @since 2.1\n- * @version $Id: DurationFormatUtils.java,v 1.18 2004/09/27 03:40:15 bayard Exp $\n+ * @version $Id: DurationFormatUtils.java,v 1.19 2004/09/27 04:49:07 bayard Exp $\n  */\n public class DurationFormatUtils {\n \n     public static String formatISO(long millis) {\n         return format(millis, \"H:mm:ss.SSS\");\n     }\n+\n+    public static String format(long millis) {\n+        return format(millis, ISO_EXTENDED_FORMAT_PATTERN, false, TimeZone.getDefault() );\n+    }\n+    public static String format(long startMillis, long endMillis) {\n+        return format(startMillis, endMillis, ISO_EXTENDED_FORMAT_PATTERN, false, TimeZone.getDefault() );\n+    }\n+\n \n     /**\n      * <p>Get the time gap as a string, using the specified format, and padding with zeros and \n      * @param startMillis  the start of the duration\n      * @param endMillis  the end of the duration\n      * @param format  the way in which to format the duration\n-     * @param padWithZeros whether to pad the left hand side of numbers with 0's\n      * @return the time as a String\n      */\n-    public static String format(long startMillis, long endMillis, String format, boolean padWithZeros) {\n-        return format(startMillis, endMillis, format, padWithZeros, TimeZone.getDefault());\n+    public static String format(long startMillis, long endMillis, String format) {\n+        return format(startMillis, endMillis, format, true, TimeZone.getDefault());\n     }\n     /**\n      * <p>Get the time gap as a string, using the specified format.\n         int days = end.get(Calendar.DAY_OF_MONTH) - start.get(Calendar.DAY_OF_MONTH);\n         while(days < 0) {\n             days += 31;  // such overshooting is taken care of later on\n-            days -= 1;\n+            months -= 1;\n         }\n         int hours = end.get(Calendar.HOUR_OF_DAY) - start.get(Calendar.HOUR_OF_DAY);\n         while(hours < 0) {\n         days -= reduceAndCorrect( start, end, Calendar.DAY_OF_MONTH, days );\n         months -= reduceAndCorrect( start, end, Calendar.MONTH, months );\n         years -= reduceAndCorrect( start, end, Calendar.YEAR, years );\n+\n+        // This next block of code adds in values that \n+        // aren't requested. This allows the user to ask for the \n+        // number of months and get the real count and not just 0->11.\n+        if(!Token.containsTokenWithValue(tokens, y) ) {\n+            if(Token.containsTokenWithValue(tokens, M) ) {\n+                months += 12 * years;\n+                years = 0;\n+            } else {\n+                // TODO: this is a bit weak, needs work to know about leap years\n+                days += 365 * years;\n+                years = 0;\n+            }\n+        }\n+        if(!Token.containsTokenWithValue(tokens, M) ) {\n+            days += end.get(Calendar.DAY_OF_YEAR) - start.get(Calendar.DAY_OF_YEAR);\n+            months = 0;\n+        }\n+        if(!Token.containsTokenWithValue(tokens, d) ) {\n+            hours += 24 * days;\n+            days = 0;\n+        }\n+        if(!Token.containsTokenWithValue(tokens, H) ) {\n+            minutes += 60 * hours;\n+            hours = 0;\n+        }\n+        if(!Token.containsTokenWithValue(tokens, m) ) {\n+            seconds += 60 * minutes;\n+            minutes = 0;\n+        }\n+        if(!Token.containsTokenWithValue(tokens, s) ) {\n+            milliseconds += 1000 * seconds;\n+            seconds = 0;\n+        }\n \n         return formatDuration(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);\n     }", "timestamp": 1096260547, "metainfo": ""}