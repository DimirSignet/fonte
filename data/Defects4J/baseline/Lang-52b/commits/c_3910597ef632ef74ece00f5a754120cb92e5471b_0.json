{"sha": "3910597ef632ef74ece00f5a754120cb92e5471b", "log": "Remove  defaultString(Object)  from StringUtils Add  toString(Object)  to ObjectUtils   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ObjectUtils.java\n+++ b/src/java/org/apache/commons/lang/ObjectUtils.java\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 1.0\n- * @version $Id: ObjectUtils.java,v 1.12 2003/07/19 20:21:39 scolebourne Exp $\n+ * @version $Id: ObjectUtils.java,v 1.13 2003/07/20 15:41:52 scolebourne Exp $\n  */\n public class ObjectUtils {\n     \n     public ObjectUtils() {\n     }\n \n-    //--------------------------------------------------------------------\n-    \n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Returns a default value if the object passed is\n      * <code>null</code>.</p>\n         return object1.equals(object2);\n     }\n     \n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Gets the toString that would be produced by <code>Object</code>\n      * if a class did not override toString itself. <code>null</code>\n             .append(Integer.toHexString(System.identityHashCode(object)));\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Gets the <code>toString</code> of an <code>Object</code> returning\n+     * an empty string (\"\") if <code>null</code> input,</p>\n+     * \n+     * <pre>\n+     * ObjectUtils.toString(null)         = \"\"\n+     * ObjectUtils.toString(\"\")           = \"\"\n+     * ObjectUtils.toString(\"bat\")        = \"bat\"\n+     * ObjectUtils.toString(Boolean.TRUE) = \"true\"\n+     * </pre>\n+     * \n+     * @param obj  the Object to <code>toString</code>, may be null\n+     * @param nullStr  the String to return if <code>null</code> input, may be null\n+     * @return the passed in Object's toString, or nullStr if <code>null</code> input\n+     */\n+    public static String toString(Object obj) {\n+        return (obj == null ? \"\" : obj.toString());\n+    }\n+\n+    /**\n+     * <p>Gets the <code>toString</code> of an <code>Object</code> returning\n+     * an empty string (\"\") if <code>null</code> input,</p>\n+     * \n+     * <pre>\n+     * ObjectUtils.toString(null, null)           = null\n+     * ObjectUtils.toString(null, \"null\")         = \"null\"\n+     * ObjectUtils.toString(\"\", \"null\")           = \"\"\n+     * ObjectUtils.toString(\"bat\", \"null\")        = \"bat\"\n+     * ObjectUtils.toString(Boolean.TRUE, \"null\") = \"true\"\n+     * </pre>\n+     * \n+     * @param obj  the Object to <code>toString</code>, may be null\n+     * @param nullStr  the String to return if <code>null</code> input, may be null\n+     * @return the passed in Object's toString, or nullStr if <code>null</code> input\n+     */\n+    public static String toString(Object obj, String nullStr) {\n+        return (obj == null ? nullStr : obj.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Class used as a null placeholder where <code>null</code>\n      * has another meaning.</p>\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author Arun Mammen Thomas\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.73 2003/07/20 15:29:44 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.74 2003/07/20 15:41:52 scolebourne Exp $\n  */\n public class StringUtils {\n     // Performance testing notes (JDK 1.4, Jul03, scolebourne)\n     }\n \n     /**\n-     * <p>Returns either the passed in <code>Object</code> as a String,\n-     * or, if the <code>Object</code> is <code>null</code>,\n-     * an empty String (\"\").</p>\n-     * \n-     * <pre>\n-     * StringUtils.defaultString(null)         = \"null\"\n-     * StringUtils.defaultString(\"\")           = \"\"\n-     * StringUtils.defaultString(\"bat\")        = \"bat\"\n-     * StringUtils.defaultString(Boolean.TRUE) = \"true\"\n-     * </pre>\n-     * \n-     * @param obj  the Object to check, using <code>toString()</code>, may be null\n-     * @return the passed in Object's toString, or the empty String if it\n-     *  was <code>null</code>\n-     */\n-    public static String defaultString(Object obj) {\n-        return (obj == null ? \"\" : obj.toString());\n-    }\n-\n-    /**\n      * <p>Returns either the passed in String, \n      * or if the String is <code>null</code>, an empty String (\"\").</p>\n      * \n      */\n     public static String defaultString(String str, String defaultStr) {\n         return (str == null ? defaultStr : str);\n-    }\n-\n-    /**\n-     * <p>Returns either the passed in <code>Object</code> as a String,\n-     * or, if the <code>Object</code> is <code>null</code>, a passed\n-     * in default String.</p>\n-     * \n-     * <pre>\n-     * StringUtils.defaultString(null, \"null\")         = \"null\"\n-     * StringUtils.defaultString(\"\", \"null\")           = \"\"\n-     * StringUtils.defaultString(\"bat\", \"null\")        = \"bat\"\n-     * StringUtils.defaultString(Boolean.TRUE, \"null\") = \"true\"\n-     * </pre>\n-     * \n-     * @param obj  the Object to check, using <code>toString()</code>, may be null\n-     * @param defaultStr  the default String to return \n-     *  if the input is <code>null</code>, may be null\n-     * @return the passed in Object's toString, or the default if it was <code>null</code>\n-     */\n-    public static String defaultString(Object obj, String defaultStr) {\n-        return (obj == null ? defaultStr : obj.toString());\n     }\n \n     // Reversing\n--- a/src/test/org/apache/commons/lang/ObjectUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ObjectUtilsTest.java\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n- * @version $Id: ObjectUtilsTest.java,v 1.5 2003/07/16 01:47:40 ggregory Exp $\n+ * @version $Id: ObjectUtilsTest.java,v 1.6 2003/07/20 15:41:52 scolebourne Exp $\n  */\n public class ObjectUtilsTest extends TestCase {\n     private static final String FOO = \"foo\";\n         assertEquals(null, ObjectUtils.appendIdentityToString(new StringBuffer(), null));\n     }\n \n+    public void testToString_Object() {\n+        assertEquals(\"\", ObjectUtils.toString((Object) null) );\n+        assertEquals(Boolean.TRUE.toString(), ObjectUtils.toString(Boolean.TRUE) );\n+    }\n+            \n+    public void testToString_ObjectString() {\n+        assertEquals(BAR, ObjectUtils.toString((Object) null, BAR) );\n+        assertEquals(Boolean.TRUE.toString(), ObjectUtils.toString(Boolean.TRUE, BAR) );\n+    }\n+\n     public void testNull() {\n         assertTrue(ObjectUtils.NULL != null);\n         assertTrue(ObjectUtils.NULL instanceof ObjectUtils.Null);\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n  * @author <a href=\"mailto:fredrik@westermarck.com>Fredrik Westermarck</a>\n  * @author Holger Krauth\n  * @author <a href=\"hps@intermeta.de\">Henning P. Schmiedehausen</a>\n- * @version $Id: StringUtilsTest.java,v 1.33 2003/07/20 14:47:29 scolebourne Exp $\n+ * @version $Id: StringUtilsTest.java,v 1.34 2003/07/20 15:41:52 scolebourne Exp $\n  */\n public class StringUtilsTest extends TestCase {\n     \n         assertEquals(\"abc\", StringUtils.defaultString(\"abc\", \"xyz\") );\n     }\n     \n-    public void testDefault_Object() {\n-        assertEquals(\"\", StringUtils.defaultString((Object) null) );\n-        assertEquals(Boolean.TRUE.toString(), StringUtils.defaultString(Boolean.TRUE) );\n-    }\n-            \n-    public void testDefault_ObjectString() {\n-        assertEquals(BAR, StringUtils.defaultString((Object) null, BAR) );\n-        assertEquals(Boolean.TRUE.toString(), StringUtils.defaultString(Boolean.TRUE, BAR) );\n-    }\n-\n     //-----------------------------------------------------------------------\n     public void testEscapeFunctions_String() {\n         assertEquals(\"\", StringUtils.escape(\"\") );", "timestamp": 1058715712, "metainfo": ""}