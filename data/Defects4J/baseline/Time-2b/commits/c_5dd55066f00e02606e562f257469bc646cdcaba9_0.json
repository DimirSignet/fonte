{"sha": "5dd55066f00e02606e562f257469bc646cdcaba9", "log": "Add PeriodFormatBuilder.append(PeriodPrinter,PeriodParser)  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java\n \n     // List of Printers and Parsers used to build a final formatter.\n     private List iElementPairs;\n+    /** Set to true if the formatter is not a printer. */\n+    private boolean iNotPrinter;\n+    /** Set to true if the formatter is not a parser. */\n+    private boolean iNotParser;\n \n     // Last PeriodFormatter appended of each field type.\n     private FieldFormatter[] iFieldFormatters;\n      * of the formatter.\n      * \n      * @return the newly created formatter\n+     * @throws IllegalStateException if the builder can produce neither a printer nor a parser\n      */\n     public PeriodFormatter toFormatter() {\n-        PeriodFormatter formatter = toFormatter(iElementPairs);\n+        PeriodFormatter formatter = toFormatter(iElementPairs, iNotPrinter, iNotParser);\n         iFieldFormatters = (FieldFormatter[]) iFieldFormatters.clone();\n         return formatter;\n     }\n      * <p>\n      * Subsequent changes to this builder do not affect the returned printer.\n      * \n-     * @return the newly created printer\n+     * @return the newly created printer, null if builder cannot create a printer\n      */\n     public PeriodPrinter toPrinter() {\n+        if (iNotPrinter) {\n+            return null;\n+        }\n         return toFormatter().getPrinter();\n     }\n \n      * <p>\n      * Subsequent changes to this builder do not affect the returned parser.\n      * \n-     * @return the newly created parser\n+     * @return the newly created parser, null if builder cannot create a parser\n      */\n     public PeriodParser toParser() {\n+        if (iNotParser) {\n+            return null;\n+        }\n         return toFormatter().getParser();\n-    }\n-\n-    private static PeriodFormatter toFormatter(List elementPairs) {\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-            PeriodFormatter f = toFormatter(elementPairs.subList(2, size));\n-            sep = sep.finish(f.getPrinter(), f.getParser());\n-            return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n     }\n \n     //-----------------------------------------------------------------------\n         } else {\n             iElementPairs.clear();\n         }\n+        iNotPrinter = false;\n+        iNotParser = false;\n         iFieldFormatters = new FieldFormatter[10];\n     }\n \n         return this;\n     }\n \n-//    /**\n-//     * Appends a printer parser pair.\n-//     *\n-//     * @return this PeriodFormatterBuilder\n-//     */\n-//    public PeriodFormatterBuilder append(PeriodPrinter printer, PeriodParser parser) {\n-//        if (printer == null && parser == null) {\n-//            throw new IllegalArgumentException(\"No printer or parser supplied\");\n-//        }\n-//        clearPrefix();\n-//        append0(printer, parser);\n-//        return this;\n-//    }\n+    /**\n+     * Appends a printer parser pair.\n+     * <p>\n+     * Either the printer or the parser may be null, in which case the builder will\n+     * be unable to produce a parser or printer repectively.\n+     *\n+     * @param printer  appends a printer to the builder, null if printing is not supported\n+     * @param parser  appends a parser to the builder, null if parsing is not supported\n+     * @return this PeriodFormatterBuilder\n+     * @throw IllegalArgumentException if both the printer and parser are null\n+     */\n+    public PeriodFormatterBuilder append(PeriodPrinter printer, PeriodParser parser) {\n+        if (printer == null && parser == null) {\n+            throw new IllegalArgumentException(\"No printer or parser supplied\");\n+        }\n+        clearPrefix();\n+        append0(printer, parser);\n+        return this;\n+    }\n \n     /**\n      * Instructs the printer to emit specific text, and the parser to expect it.\n     private PeriodFormatterBuilder append0(PeriodPrinter printer, PeriodParser parser) {\n         iElementPairs.add(printer);\n         iElementPairs.add(parser);\n-        return this;\n+        iNotPrinter |= (printer == null);\n+        iNotParser |= (parser == null);\n+        return this;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private static PeriodFormatter toFormatter(List elementPairs, boolean notPrinter, boolean notParser) {\n+        if (notPrinter && notParser) {\n+            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+        }\n+        int size = elementPairs.size();\n+        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n+            Separator sep = (Separator) elementPairs.get(0);\n+            PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n+            sep = sep.finish(f.getPrinter(), f.getParser());\n+            return new PeriodFormatter(sep, sep);\n+        }\n+        Object[] comp = createComposite(elementPairs);\n+        if (notPrinter) {\n+            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+        } else if (notParser) {\n+            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+        } else {\n+            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+        }\n     }\n \n     private static Object[] createComposite(List elementPairs) {\n--- a/JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java\n     private static final Period TIME_PERIOD = new Period(0, 0, 0, 0, 5, 6, 7, 8);\n     private static final Period DATE_PERIOD = new Period(1, 2, 3, 4, 0, 0, 0, 0);\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    //private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    //private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n         originalDateTimeZone = null;\n         originalTimeZone = null;\n         originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToFormatterPrinterParser() {\n+        builder.appendYears();\n+        assertNotNull(builder.toFormatter());\n+        assertNotNull(builder.toPrinter());\n+        assertNotNull(builder.toParser());\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(0, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null));\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testFormatAppend_PrinterParser_null_null() {\n+        try {\n+            new PeriodFormatterBuilder().append(null, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testFormatAppend_PrinterParser_Printer_null() {\n+        PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral(\"-\").toPrinter();\n+        PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).appendMonths();\n+        assertNotNull(bld.toPrinter());\n+        assertNull(bld.toParser());\n+        \n+        PeriodFormatter f = bld.toFormatter();\n+        assertEquals(\"1-2\", f.print(PERIOD));\n+        try {\n+            f.parsePeriod(\"1-2\");\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+    }\n+\n+    public void testFormatAppend_PrinterParser_null_Parser() {\n+        PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral(\"-\").toParser();\n+        PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(null, parser).appendMonths();\n+        assertNull(bld.toPrinter());\n+        assertNotNull(bld.toParser());\n+        \n+        PeriodFormatter f = bld.toFormatter();\n+        try {\n+            f.print(PERIOD);\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod(\"1-2\"));\n+    }\n+\n+    public void testFormatAppend_PrinterParser_PrinterParser() {\n+        PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral(\"-\").toPrinter();\n+        PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral(\"-\").toParser();\n+        PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths();\n+        assertNotNull(bld.toPrinter());\n+        assertNotNull(bld.toParser());\n+        \n+        PeriodFormatter f = bld.toFormatter();\n+        assertEquals(\"1-2\", f.print(PERIOD));\n+        assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod(\"1-2\"));\n+    }\n+\n+    public void testFormatAppend_PrinterParser_Printer_null_null_Parser() {\n+        PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral(\"-\").toPrinter();\n+        PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral(\"-\").toParser();\n+        PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).append(null, parser);\n+        assertNull(bld.toPrinter());\n+        assertNull(bld.toParser());\n+        \n+        try {\n+            bld.toFormatter();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    public void testFormatAppend_PrinterParserThenClear() {\n+        PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral(\"-\").toPrinter();\n+        PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral(\"-\").toParser();\n+        PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).append(null, parser);\n+        assertNull(bld.toPrinter());\n+        assertNull(bld.toParser());\n+        bld.clear();\n+        bld.appendMonths();\n+        assertNotNull(bld.toPrinter());\n+        assertNotNull(bld.toParser());\n+    }\n+\n }", "timestamp": 1162508630, "metainfo": ""}