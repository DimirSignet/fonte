{"sha": "01ca66c29a2fc506615284f275e6b94af13a4171", "log": "Testing   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java\n                     throw new IllegalArgumentException(\"Maximum value exceeded for add\");\n                 }\n                 nextField = instant.getField(fieldIndex - 1);\n+                // test only works if this field is UTC (ie. local)\n                 if (getRangeDurationField() != nextField.getDurationField()) {\n                     throw new IllegalArgumentException(\"Fields invalid for add\");\n                 }\n--- a/JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java\n+++ b/JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import org.joda.time.Chronology;\n import org.joda.time.DateTimeFieldType;\n import org.joda.time.DurationField;\n import org.joda.time.DurationFieldType;\n     }\n \n     public void test_getAsText_RP_int_Locale() {\n-        // ReadablePartial partial, int fieldValue, Locale locale\n-        // TODO\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(\"20\", field.getAsText(new TimeOfDay(12, 30, 40, 50), 20, Locale.ENGLISH));\n+        assertEquals(\"20\", field.getAsText(new TimeOfDay(12, 30, 40, 50), 20, null));\n     }\n \n     public void test_getAsText_RP_Locale() {\n-        // ReadablePartial partial, Locale locale\n-        // TODO\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(\"40\", field.getAsText(new TimeOfDay(12, 30, 40, 50), Locale.ENGLISH));\n+        assertEquals(\"40\", field.getAsText(new TimeOfDay(12, 30, 40, 50), null));\n     }\n \n     public void test_getAsText_int_Locale() {\n     }\n \n     public void test_getAsShortText_RP_int_Locale() {\n-        // ReadablePartial partial, int fieldValue, Locale locale\n-        // TODO\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(\"20\", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), 20, Locale.ENGLISH));\n+        assertEquals(\"20\", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), 20, null));\n     }\n \n     public void test_getAsShortText_RP_Locale() {\n-        // ReadablePartial partial, Locale locale\n-        // TODO\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(\"40\", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), Locale.ENGLISH));\n+        assertEquals(\"40\", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), null));\n     }\n \n     public void test_getAsShortText_int_Locale() {\n     public void test_add_RP_int_intarray_int() {\n         int[] values = new int[] {10, 20, 30, 40};\n         int[] expected = new int[] {10, 20, 30, 40};\n-        BaseDateTimeField field = new MockBaseDateTimeField();\n+        BaseDateTimeField field = new MockStandardBaseDateTimeField();\n         int[] result = field.add(new TimeOfDay(), 2, values, 0);\n         assertEquals(true, Arrays.equals(expected, result));\n         \n         }\n     }\n \n+    static class MockStandardBaseDateTimeField extends MockBaseDateTimeField {\n+        protected MockStandardBaseDateTimeField() {\n+            super();\n+        }\n+        public DurationField getDurationField() {\n+            return Chronology.getISOUTC().seconds();\n+        }\n+        public DurationField getRangeDurationField() {\n+            return Chronology.getISOUTC().minutes();\n+        }\n+    }\n+\n     //-----------------------------------------------------------------------\n     static class MockCountingDurationField extends BaseDurationField {\n         static int add_int = 0;", "timestamp": 1096303280, "metainfo": ""}