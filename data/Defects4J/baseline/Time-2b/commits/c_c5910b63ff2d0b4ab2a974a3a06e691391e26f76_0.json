{"sha": "c5910b63ff2d0b4ab2a974a3a06e691391e26f76", "log": "Rename BuddhistEra to ThaiBuddistEra   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java\n  * Joda Software License, Version 1.0\n  *\n  *\n- * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * Copyright (c) 2001-2005 Stephen Colebourne.  \n  * All rights reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n             fields.weekyearOfCentury = new OffsetDateTimeField(\n                 field, DateTimeFieldType.weekyearOfCentury(), 1);\n             \n-            fields.era = BuddhistEraDateTimeField.INSTANCE;\n+            fields.era = ThaiBuddhistEraDateTimeField.INSTANCE;\n         }\n     }\n    \n--- /dev/null\n+++ b/JodaTime/src/java/org/joda/time/chrono/ThaiBuddhistEraDateTimeField.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2005 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.chrono;\n+\n+import java.util.Locale;\n+\n+import org.joda.time.DateTimeField;\n+import org.joda.time.DateTimeFieldType;\n+import org.joda.time.DurationField;\n+import org.joda.time.DurationFieldType;\n+import org.joda.time.field.BaseDateTimeField;\n+import org.joda.time.field.FieldUtils;\n+import org.joda.time.field.UnsupportedDurationField;\n+\n+/**\n+ * Provides time calculations for the buddhist era component of time.\n+ *\n+ * @author Stephen Colebourne\n+ * @author Brian S O'Neill\n+ * @since 1.0\n+ */\n+final class ThaiBuddhistEraDateTimeField extends BaseDateTimeField {\n+    \n+    /** Serialization version */\n+    private static final long serialVersionUID = -9175876774456816364L;\n+\n+    /**\n+     * Singleton instance\n+     */\n+    static final DateTimeField INSTANCE = new ThaiBuddhistEraDateTimeField();\n+\n+    /**\n+     * Restricted constructor\n+     */\n+    private ThaiBuddhistEraDateTimeField() {\n+        super(DateTimeFieldType.era());\n+    }\n+\n+    /**\n+     * Serialization singleton\n+     */\n+    private Object readResolve() {\n+        return INSTANCE;\n+    }\n+\n+    public boolean isLenient() {\n+        return false;\n+    }\n+\n+    /**\n+     * Get the Era component of the specified time instant.\n+     * \n+     * @param instant  the time instant in millis to query.\n+     * @return the era extracted from the input.\n+     */\n+    public int get(long instant) {\n+        return BuddhistChronology.BE;\n+    }\n+\n+    /**\n+     * Set the Era component of the specified time instant.\n+     * \n+     * @param instant  the time instant in millis to update.\n+     * @param era  the era (BuddhistChronology.BE) to update the time to.\n+     * @return the updated time instant.\n+     * @throws IllegalArgumentException  if era is invalid.\n+     */\n+    public long set(long instant, int era) {\n+        FieldUtils.verifyValueBounds(this, era, getMinimumValue(), getMaximumValue());\n+\n+        return instant;\n+    }\n+\n+    /**\n+     * @see org.joda.time.DateTimeField#set(long, String, Locale)\n+     */\n+    public long set(long instant, String text, Locale locale) {\n+        if (\"BE\".equals(text) == false) {\n+            throw new IllegalArgumentException(\"Invalid era text: \" + text);\n+        }\n+        return instant;\n+    }\n+\n+    public long roundFloor(long instant) {\n+        return Long.MIN_VALUE;\n+    }\n+\n+    public long roundCeiling(long instant) {\n+        return Long.MAX_VALUE;\n+    }\n+\n+    public long roundHalfFloor(long instant) {\n+        return Long.MIN_VALUE;\n+    }\n+\n+    public long roundHalfCeiling(long instant) {\n+        return Long.MIN_VALUE;\n+    }\n+\n+    public long roundHalfEven(long instant) {\n+        return Long.MIN_VALUE;\n+    }\n+\n+    public DurationField getDurationField() {\n+        return UnsupportedDurationField.getInstance(DurationFieldType.eras());\n+    }\n+\n+    public DurationField getRangeDurationField() {\n+        return null;\n+    }\n+\n+    public int getMinimumValue() {\n+        return BuddhistChronology.BE;\n+    }\n+\n+    public int getMaximumValue() {\n+        return BuddhistChronology.BE;\n+    }\n+\n+    public String getAsText(int fieldValue, Locale locale) {\n+        return \"BE\";\n+    }\n+\n+    public int getMaximumTextLength(Locale locale) {\n+        return 2;\n+    }\n+\n+}", "timestamp": 1107621436, "metainfo": ""}