{"sha": "e1da80dbf5a3a16c65fd5ee7756f234572bd6aef", "log": "Test Coptic Chronology properly   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import org.joda.time.Chronology;\n+import org.joda.time.DateTime;\n import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeField;\n import org.joda.time.DateTimeUtils;\n import org.joda.time.DateTimeZone;\n \n     private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n     private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n     private static final DateTimeZone TOKYO = DateTimeZone.getInstance(\"Asia/Tokyo\");\n+    private static final Chronology COPTIC_UTC = Chronology.getCopticUTC();\n+    private static final Chronology JULIAN_UTC = Chronology.getJulianUTC();\n+    private static final Chronology ISO_UTC = Chronology.getISOUTC();\n \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n         assertEquals(true, CopticChronology.getInstance().millisOfSecond().isSupported());\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testEpoch() {\n+        DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, COPTIC_UTC);\n+        assertEquals(new DateTime(284, 8, 29, 0, 0, 0, 0, JULIAN_UTC), epoch.withChronology(JULIAN_UTC));\n+    }\n+\n+    public void testEra() {\n+        assertEquals(1, CopticChronology.AM);\n+        try {\n+            new DateTime(-1, 13, 5, 0, 0, 0, 0, COPTIC_UTC);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Tests era, year, monthOfYear, dayOfMonth and dayOfWeek.\n+     */\n+    public void testCalendar() {\n+        System.out.println(\"\\nTestCopticChronology.testCalendar\");\n+        DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, COPTIC_UTC);\n+        long oneDay = DateTimeConstants.MILLIS_PER_DAY;\n+        long millis = epoch.getMillis();\n+        long end = new DateTime(3000, 1, 1, 0, 0, 0, 0, ISO_UTC).getMillis();\n+        DateTimeField dayOfWeek = COPTIC_UTC.dayOfWeek();\n+        DateTimeField dayOfYear = COPTIC_UTC.dayOfYear();\n+        DateTimeField dayOfMonth = COPTIC_UTC.dayOfMonth();\n+        DateTimeField monthOfYear = COPTIC_UTC.monthOfYear();\n+        DateTimeField year = COPTIC_UTC.year();\n+        DateTimeField era = COPTIC_UTC.era();\n+        int expectedDOW = 5;\n+        int expectedDOY = 1;\n+        int expectedDay = 1;\n+        int expectedMonth = 1;\n+        int expectedYear = 1;\n+        while (millis < end) {\n+            int dowValue = dayOfWeek.get(millis);\n+            int doyValue = dayOfYear.get(millis);\n+            int dayValue = dayOfMonth.get(millis);\n+            int monthValue = monthOfYear.get(millis);\n+            int yearValue = year.get(millis);\n+            int eraValue = era.get(millis);\n+            int monthLen = dayOfMonth.getMaximumValue(millis);\n+            if (monthValue < 1 || monthValue > 13) {\n+                fail(\"Bad month: \" + millis);\n+            }\n+            \n+            // test era\n+            assertEquals(1, era.get(millis));\n+            assertEquals(\"AM\", era.getAsText(millis));\n+            assertEquals(\"AM\", era.getAsShortText(millis));\n+            \n+            // test date\n+            assertEquals(expectedYear, yearValue);\n+            assertEquals(expectedMonth, monthValue);\n+            assertEquals(expectedDay, dayValue);\n+            assertEquals(expectedDOW, dowValue);\n+            assertEquals(expectedDOY, doyValue);\n+            \n+            // test leap year\n+            assertEquals(yearValue % 4 == 3, year.isLeap(millis));\n+            \n+            // test month length\n+            if (monthValue == 13) {\n+                assertEquals(yearValue % 4 == 3, monthOfYear.isLeap(millis));\n+                if (yearValue % 4 == 3) {\n+                    assertEquals(6, monthLen);\n+                } else {\n+                    assertEquals(5, monthLen);\n+                }\n+            } else {\n+                assertEquals(30, monthLen);\n+            }\n+            \n+            // recalculate date\n+            expectedDOW = (((expectedDOW + 1) - 1) % 7) + 1;\n+            expectedDay++;\n+            expectedDOY++;\n+            if (expectedDay == 31 && expectedMonth < 13) {\n+                expectedDay = 1;\n+                expectedMonth++;\n+            } else if (expectedMonth == 13) {\n+                if (expectedYear % 4 == 3 && expectedDay == 7) {\n+                    expectedDay = 1;\n+                    expectedMonth = 1;\n+                    expectedYear++;\n+                    expectedDOY = 1;\n+                } else if (expectedYear % 4 != 3 && expectedDay == 6) {\n+                    expectedDay = 1;\n+                    expectedMonth = 1;\n+                    expectedYear++;\n+                    expectedDOY = 1;\n+                }\n+            }\n+            millis += oneDay;\n+        }\n+    }\n+\n+    public void testSampleDate() {\n+        DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, ISO_UTC).withChronology(COPTIC_UTC);\n+        assertEquals(CopticChronology.AM, dt.getEra());\n+        assertEquals(18, dt.getCenturyOfEra());  // TODO confirm\n+        assertEquals(20, dt.getYearOfCentury());\n+        assertEquals(1720, dt.getYear());\n+        assertEquals(10, dt.getMonthOfYear());\n+        assertEquals(2, dt.getDayOfMonth());\n+        assertEquals(DateTimeConstants.WEDNESDAY, dt.getDayOfWeek());\n+        assertEquals(9 * 30 + 2, dt.getDayOfYear());\n+        assertEquals(0, dt.getHourOfDay());\n+        assertEquals(0, dt.getMinuteOfHour());\n+        assertEquals(0, dt.getSecondOfMinute());\n+        assertEquals(0, dt.getMillisOfSecond());\n+    }\n+\n+    public void testSampleDateWithZone() {\n+        DateTime dt = new DateTime(2004, 6, 9, 12, 0, 0, 0, PARIS).withChronology(COPTIC_UTC);\n+        assertEquals(CopticChronology.AM, dt.getEra());\n+        assertEquals(1720, dt.getYear());\n+        assertEquals(10, dt.getMonthOfYear());\n+        assertEquals(2, dt.getDayOfMonth());\n+        assertEquals(10, dt.getHourOfDay());  // PARIS is UTC+2 in summer (12-2=10)\n+        assertEquals(0, dt.getMinuteOfHour());\n+        assertEquals(0, dt.getSecondOfMinute());\n+        assertEquals(0, dt.getMillisOfSecond());\n+    }\n+\n }", "timestamp": 1107131253, "metainfo": ""}