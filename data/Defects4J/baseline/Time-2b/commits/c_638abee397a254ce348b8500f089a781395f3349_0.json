{"sha": "638abee397a254ce348b8500f089a781395f3349", "log": "Add tests and fix duration/add bugs in Coptic and Ethiopic chronology   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTimeConstants;\n-import org.joda.time.DurationField;\n-import org.joda.time.DurationFieldType;\n-import org.joda.time.field.PreciseDurationField;\n \n /**\n  * Abstract implementation of a calendar system based around fixed length months.\n \n     /** The length of the month in millis. */\n     static final long MILLIS_PER_MONTH = ((long) MONTH_LENGTH) * DateTimeConstants.MILLIS_PER_DAY;\n-\n-    /** Singleton fixed length month field used to build the monthOfYear field. */\n-    static final DurationField MONTH_DURATION_FIELD;\n-    static {\n-        // init after other static fields\n-        MONTH_DURATION_FIELD =  new PreciseDurationField\n-            (DurationFieldType.months(), MILLIS_PER_MONTH);\n-    }\n \n     //-----------------------------------------------------------------------\n     /**\n     }\n \n     //-----------------------------------------------------------------------\n+    int getMonthOfYear(long millis) {\n+        return (getDayOfYear(millis) - 1) / MONTH_LENGTH + 1;\n+    }\n+\n+    //-----------------------------------------------------------------------\n     int getMonthOfYear(long millis, int year) {\n         long monthZeroBased = (millis - getYearMillis(year)) / MILLIS_PER_MONTH;\n         return ((int) monthZeroBased) + 1;\n--- a/JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n \n /**\n  * Provides time calculations for the month of the year component of time.\n- * <p>\n- * This implementation assumes 12 months at present.\n  *\n  * @author Guy Allard\n  * @author Stephen Colebourne\n  * @author Brian S O'Neill\n- * @since 1.0\n+ * @since 1.2, refactored from GJMonthOfYearDateTimeField\n  */\n class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n \n     private static final long serialVersionUID = -8258715387168736L;\n \n     private static final int MIN = DateTimeConstants.JANUARY;\n-    private static final int MAX = DateTimeConstants.DECEMBER;\n \n     private final BaseGJChronology iChronology;\n+    private final int iMax;\n     private final int iLeapMonth;\n \n     /**\n     BasicMonthOfYearDateTimeField(BaseGJChronology chronology, int leapMonth) {\n         super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());\n         iChronology = chronology;\n+        iMax = iChronology.getMaxMonth();\n         iLeapMonth = leapMonth;\n     }\n \n         // Initially, monthToUse is zero-based\n         int monthToUse = thisMonth - 1 + months;\n         if (monthToUse >= 0) {\n-            yearToUse = thisYear + (monthToUse / MAX);\n-            monthToUse = (monthToUse % MAX) + 1;\n+            yearToUse = thisYear + (monthToUse / iMax);\n+            monthToUse = (monthToUse % iMax) + 1;\n         } else {\n-            yearToUse = thisYear + (monthToUse / MAX) - 1;\n+            yearToUse = thisYear + (monthToUse / iMax) - 1;\n             monthToUse = Math.abs(monthToUse);\n-            int remMonthToUse = monthToUse % MAX;\n+            int remMonthToUse = monthToUse % iMax;\n             // Take care of the boundary condition\n             if (remMonthToUse == 0) {\n-                remMonthToUse = MAX;\n-            }\n-            monthToUse = MAX - remMonthToUse + 1;\n+                remMonthToUse = iMax;\n+            }\n+            monthToUse = iMax - remMonthToUse + 1;\n             // Take care of the boundary condition\n             if (monthToUse == 1) {\n                 yearToUse += 1;\n         long yearToUse;\n         long monthToUse = thisMonth - 1 + months;\n         if (monthToUse >= 0) {\n-            yearToUse = thisYear + (monthToUse / MAX);\n-            monthToUse = (monthToUse % MAX) + 1;\n+            yearToUse = thisYear + (monthToUse / iMax);\n+            monthToUse = (monthToUse % iMax) + 1;\n         } else {\n-            yearToUse = thisYear + (monthToUse / MAX) - 1;\n+            yearToUse = thisYear + (monthToUse / iMax) - 1;\n             monthToUse = Math.abs(monthToUse);\n-            int remMonthToUse = (int)(monthToUse % MAX);\n+            int remMonthToUse = (int)(monthToUse % iMax);\n             if (remMonthToUse == 0) {\n-                remMonthToUse = MAX;\n-            }\n-            monthToUse = MAX - remMonthToUse + 1;\n+                remMonthToUse = iMax;\n+            }\n+            monthToUse = iMax - remMonthToUse + 1;\n             if (monthToUse == 1) {\n                 yearToUse += 1;\n             }\n      * @return the updated time instant.\n      */\n     public long addWrapField(long instant, int months) {\n-        return set(instant, FieldUtils.getWrappedValue(get(instant), months, MIN, MAX));\n+        return set(instant, FieldUtils.getWrappedValue(get(instant), months, MIN, iMax));\n     }\n \n     //-----------------------------------------------------------------------\n         int subtrahendYear = iChronology.getYear(subtrahendInstant);\n         int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);\n \n-        long difference = (minuendYear - subtrahendYear) * 12L + minuendMonth - subtrahendMonth;\n+        long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;\n \n         // Before adjusting for remainder, account for special case of add\n         // where the day-of-month is forced to the nearest sane value.\n      * @throws IllegalArgumentException  if month is invalid\n      */\n     public long set(long instant, int month) {\n-        FieldUtils.verifyValueBounds(this, month, MIN, MAX);\n+        FieldUtils.verifyValueBounds(this, month, MIN, iMax);\n         //\n         int thisYear = iChronology.getYear(instant);\n         //\n \n     //-----------------------------------------------------------------------\n     public int getMaximumValue() {\n-        return MAX;\n+        return iMax;\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java\n             fields.weekyear = new SkipDateTimeField(this, fields.weekyear);\n             \n             fields.era = ERA_FIELD;\n-            fields.months = MONTH_DURATION_FIELD;\n-            fields.monthOfYear = new BasicFixedMonthOfYearDateTimeField(this, MONTH_DURATION_FIELD);\n-            fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);\n+            fields.monthOfYear = new BasicMonthOfYearDateTimeField(this, 13);\n+            fields.months = fields.monthOfYear.getDurationField();\n         }\n     }\n \n--- a/JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java\n             fields.weekyear = new SkipDateTimeField(this, fields.weekyear);\n             \n             fields.era = ERA_FIELD;\n-            fields.months = MONTH_DURATION_FIELD;\n-            fields.monthOfYear = new BasicFixedMonthOfYearDateTimeField(this, MONTH_DURATION_FIELD);\n-            fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);\n+            fields.monthOfYear = new BasicMonthOfYearDateTimeField(this, 13);\n+            fields.months = fields.monthOfYear.getDurationField();\n         }\n     }\n \n--- a/JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java\n import org.joda.time.DateTimeField;\n import org.joda.time.DateTimeUtils;\n import org.joda.time.DateTimeZone;\n+import org.joda.time.DurationField;\n+import org.joda.time.DurationFieldType;\n+import org.joda.time.DateTime.Property;\n \n /**\n  * This class is a Junit unit test for CopticChronology.\n  */\n public class TestCopticChronology extends TestCase {\n \n-    private static long SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;\n+    private static final int MILLIS_PER_DAY = DateTimeConstants.MILLIS_PER_DAY;\n+\n+    private static long SKIP = 1 * MILLIS_PER_DAY;\n \n     private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n                      366 + 365;\n     // 2002-06-09\n     private long TEST_TIME_NOW =\n-            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * MILLIS_PER_DAY;\n \n     private DateTimeZone originalDateTimeZone = null;\n     private TimeZone originalTimeZone = null;\n     }\n \n     public static TestSuite suite() {\n-        SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;\n+        SKIP = 1 * MILLIS_PER_DAY;\n         return new TestSuite(TestCopticChronology.class);\n     }\n \n         assertEquals(false, CopticChronology.getInstanceUTC().centuries().isPrecise());\n         assertEquals(false, CopticChronology.getInstanceUTC().years().isPrecise());\n         assertEquals(false, CopticChronology.getInstanceUTC().weekyears().isPrecise());\n-        assertEquals(true, CopticChronology.getInstanceUTC().months().isPrecise());\n+        assertEquals(false, CopticChronology.getInstanceUTC().months().isPrecise());\n         assertEquals(true, CopticChronology.getInstanceUTC().weeks().isPrecise());\n         assertEquals(true, CopticChronology.getInstanceUTC().days().isPrecise());\n         assertEquals(true, CopticChronology.getInstanceUTC().halfdays().isPrecise());\n         assertEquals(CopticChronology.AM, dt.getEra());\n         assertEquals(18, dt.getCenturyOfEra());  // TODO confirm\n         assertEquals(20, dt.getYearOfCentury());\n+        assertEquals(1720, dt.getYearOfEra());\n+        \n         assertEquals(1720, dt.getYear());\n-        assertEquals(1720, dt.getYearOfEra());\n+        Property fld = dt.year();\n+        assertEquals(false, fld.isLeap());\n+        assertEquals(0, fld.getLeapAmount());\n+        assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType());\n+        assertEquals(new DateTime(1721, 10, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1));\n+        \n         assertEquals(10, dt.getMonthOfYear());\n+        fld = dt.monthOfYear();\n+        assertEquals(false, fld.isLeap());\n+        assertEquals(0, fld.getLeapAmount());\n+        assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType());\n+        assertEquals(1, fld.getMinimumValue());\n+        assertEquals(1, fld.getMinimumValueOverall());\n+        assertEquals(13, fld.getMaximumValue());\n+        assertEquals(13, fld.getMaximumValueOverall());\n+        assertEquals(new DateTime(1721, 1, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(4));\n+        assertEquals(new DateTime(1720, 1, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addWrapFieldToCopy(4));\n+        \n         assertEquals(2, dt.getDayOfMonth());\n+        fld = dt.dayOfMonth();\n+        assertEquals(false, fld.isLeap());\n+        assertEquals(0, fld.getLeapAmount());\n+        assertEquals(null, fld.getLeapDurationField());\n+        assertEquals(1, fld.getMinimumValue());\n+        assertEquals(1, fld.getMinimumValueOverall());\n+        assertEquals(30, fld.getMaximumValue());\n+        assertEquals(30, fld.getMaximumValueOverall());\n+        assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1));\n+        \n         assertEquals(DateTimeConstants.WEDNESDAY, dt.getDayOfWeek());\n+        fld = dt.dayOfWeek();\n+        assertEquals(false, fld.isLeap());\n+        assertEquals(0, fld.getLeapAmount());\n+        assertEquals(null, fld.getLeapDurationField());\n+        assertEquals(1, fld.getMinimumValue());\n+        assertEquals(1, fld.getMinimumValueOverall());\n+        assertEquals(7, fld.getMaximumValue());\n+        assertEquals(7, fld.getMaximumValueOverall());\n+        assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1));\n+        \n         assertEquals(9 * 30 + 2, dt.getDayOfYear());\n+        fld = dt.dayOfYear();\n+        assertEquals(false, fld.isLeap());\n+        assertEquals(0, fld.getLeapAmount());\n+        assertEquals(null, fld.getLeapDurationField());\n+        assertEquals(1, fld.getMinimumValue());\n+        assertEquals(1, fld.getMinimumValueOverall());\n+        assertEquals(365, fld.getMaximumValue());\n+        assertEquals(366, fld.getMaximumValueOverall());\n+        assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1));\n+        \n         assertEquals(0, dt.getHourOfDay());\n         assertEquals(0, dt.getMinuteOfHour());\n         assertEquals(0, dt.getSecondOfMinute());\n         assertEquals(0, dt.getMillisOfSecond());\n     }\n \n+    public void testDurationYear() {\n+        // Leap 1723\n+        DateTime dt20 = new DateTime(1720, 10, 2, 0, 0, 0, 0, COPTIC_UTC);\n+        DateTime dt21 = new DateTime(1721, 10, 2, 0, 0, 0, 0, COPTIC_UTC);\n+        DateTime dt22 = new DateTime(1722, 10, 2, 0, 0, 0, 0, COPTIC_UTC);\n+        DateTime dt23 = new DateTime(1723, 10, 2, 0, 0, 0, 0, COPTIC_UTC);\n+        DateTime dt24 = new DateTime(1724, 10, 2, 0, 0, 0, 0, COPTIC_UTC);\n+        \n+        DurationField fld = dt20.year().getDurationField();\n+        assertEquals(COPTIC_UTC.years(), fld);\n+        assertEquals(1L * 365L * MILLIS_PER_DAY, fld.getMillis(1, dt20.getMillis()));\n+        assertEquals(2L * 365L * MILLIS_PER_DAY, fld.getMillis(2, dt20.getMillis()));\n+        assertEquals(3L * 365L * MILLIS_PER_DAY, fld.getMillis(3, dt20.getMillis()));\n+        assertEquals((4L * 365L + 1L) * MILLIS_PER_DAY, fld.getMillis(4, dt20.getMillis()));\n+        \n+        assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getMillis(1));\n+        assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 2, fld.getMillis(2));\n+        \n+        assertEquals(1L * 365L * MILLIS_PER_DAY, fld.getMillis(1L, dt20.getMillis()));\n+        assertEquals(2L * 365L * MILLIS_PER_DAY, fld.getMillis(2L, dt20.getMillis()));\n+        assertEquals(3L * 365L * MILLIS_PER_DAY, fld.getMillis(3L, dt20.getMillis()));\n+        assertEquals((4L * 365L + 1L) * MILLIS_PER_DAY, fld.getMillis(4L, dt20.getMillis()));\n+        \n+        assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getMillis(1L));\n+        assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 2, fld.getMillis(2L));\n+        \n+        assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getUnitMillis());\n+        \n+        assertEquals(0, fld.getValue(1L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis()));\n+        assertEquals(1, fld.getValue(1L * 365L * MILLIS_PER_DAY, dt20.getMillis()));\n+        assertEquals(1, fld.getValue(1L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis()));\n+        assertEquals(1, fld.getValue(2L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis()));\n+        assertEquals(2, fld.getValue(2L * 365L * MILLIS_PER_DAY, dt20.getMillis()));\n+        assertEquals(2, fld.getValue(2L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis()));\n+        assertEquals(2, fld.getValue(3L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis()));\n+        assertEquals(3, fld.getValue(3L * 365L * MILLIS_PER_DAY, dt20.getMillis()));\n+        assertEquals(3, fld.getValue(3L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis()));\n+        assertEquals(3, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY - 1L, dt20.getMillis()));\n+        assertEquals(4, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY, dt20.getMillis()));\n+        assertEquals(4, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY + 1L, dt20.getMillis()));\n+        \n+        assertEquals(dt21.getMillis(), fld.add(dt20.getMillis(), 1));\n+        assertEquals(dt22.getMillis(), fld.add(dt20.getMillis(), 2));\n+        assertEquals(dt23.getMillis(), fld.add(dt20.getMillis(), 3));\n+        assertEquals(dt24.getMillis(), fld.add(dt20.getMillis(), 4));\n+        \n+        assertEquals(dt21.getMillis(), fld.add(dt20.getMillis(), 1L));\n+        assertEquals(dt22.getMillis(), fld.add(dt20.getMillis(), 2L));\n+        assertEquals(dt23.getMillis(), fld.add(dt20.getMillis(), 3L));\n+        assertEquals(dt24.getMillis(), fld.add(dt20.getMillis(), 4L));\n+    }\n+\n+    public void testDurationMonth() {\n+        // Leap 1723\n+        DateTime dt11 = new DateTime(1723, 11, 2, 0, 0, 0, 0, COPTIC_UTC);\n+        DateTime dt12 = new DateTime(1723, 12, 2, 0, 0, 0, 0, COPTIC_UTC);\n+        DateTime dt13 = new DateTime(1723, 13, 2, 0, 0, 0, 0, COPTIC_UTC);\n+        DateTime dt01 = new DateTime(1724, 1, 2, 0, 0, 0, 0, COPTIC_UTC);\n+        \n+        DurationField fld = dt11.monthOfYear().getDurationField();\n+        assertEquals(COPTIC_UTC.months(), fld);\n+        assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1, dt11.getMillis()));\n+        assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2, dt11.getMillis()));\n+        assertEquals((2L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(3, dt11.getMillis()));\n+        assertEquals((3L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(4, dt11.getMillis()));\n+        \n+        assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1));\n+        assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2));\n+        assertEquals(13L * 30L * MILLIS_PER_DAY, fld.getMillis(13));\n+        \n+        assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1L, dt11.getMillis()));\n+        assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2L, dt11.getMillis()));\n+        assertEquals((2L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(3L, dt11.getMillis()));\n+        assertEquals((3L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(4L, dt11.getMillis()));\n+        \n+        assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1L));\n+        assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2L));\n+        assertEquals(13L * 30L * MILLIS_PER_DAY, fld.getMillis(13L));\n+        \n+        assertEquals(0, fld.getValue(1L * 30L * MILLIS_PER_DAY - 1L, dt11.getMillis()));\n+        assertEquals(1, fld.getValue(1L * 30L * MILLIS_PER_DAY, dt11.getMillis()));\n+        assertEquals(1, fld.getValue(1L * 30L * MILLIS_PER_DAY + 1L, dt11.getMillis()));\n+        assertEquals(1, fld.getValue(2L * 30L * MILLIS_PER_DAY - 1L, dt11.getMillis()));\n+        assertEquals(2, fld.getValue(2L * 30L * MILLIS_PER_DAY, dt11.getMillis()));\n+        assertEquals(2, fld.getValue(2L * 30L * MILLIS_PER_DAY + 1L, dt11.getMillis()));\n+        assertEquals(2, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY - 1L, dt11.getMillis()));\n+        assertEquals(3, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY, dt11.getMillis()));\n+        assertEquals(3, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY + 1L, dt11.getMillis()));\n+        assertEquals(3, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY - 1L, dt11.getMillis()));\n+        assertEquals(4, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY, dt11.getMillis()));\n+        assertEquals(4, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY + 1L, dt11.getMillis()));\n+        \n+        assertEquals(dt12.getMillis(), fld.add(dt11.getMillis(), 1));\n+        assertEquals(dt13.getMillis(), fld.add(dt11.getMillis(), 2));\n+        assertEquals(dt01.getMillis(), fld.add(dt11.getMillis(), 3));\n+        \n+        assertEquals(dt12.getMillis(), fld.add(dt11.getMillis(), 1L));\n+        assertEquals(dt13.getMillis(), fld.add(dt11.getMillis(), 2L));\n+        assertEquals(dt01.getMillis(), fld.add(dt11.getMillis(), 3L));\n+    }\n+\n }\n--- a/JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java\n import org.joda.time.DateTimeField;\n import org.joda.time.DateTimeUtils;\n import org.joda.time.DateTimeZone;\n+import org.joda.time.DurationField;\n+import org.joda.time.DurationFieldType;\n+import org.joda.time.DateTime.Property;\n \n /**\n  * This class is a Junit unit test for EthiopicChronology.\n  */\n public class TestEthiopicChronology extends TestCase {\n \n-    private static long SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;\n+    private static final int MILLIS_PER_DAY = DateTimeConstants.MILLIS_PER_DAY;\n+\n+    private static long SKIP = 1 * MILLIS_PER_DAY;\n \n     private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n                      366 + 365;\n     // 2002-06-09\n     private long TEST_TIME_NOW =\n-            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * MILLIS_PER_DAY;\n \n     private DateTimeZone originalDateTimeZone = null;\n     private TimeZone originalTimeZone = null;\n     }\n \n     public static TestSuite suite() {\n-        SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;\n+        SKIP = 1 * MILLIS_PER_DAY;\n         return new TestSuite(TestEthiopicChronology.class);\n     }\n \n         assertEquals(false, EthiopicChronology.getInstanceUTC().centuries().isPrecise());\n         assertEquals(false, EthiopicChronology.getInstanceUTC().years().isPrecise());\n         assertEquals(false, EthiopicChronology.getInstanceUTC().weekyears().isPrecise());\n-        assertEquals(true, EthiopicChronology.getInstanceUTC().months().isPrecise());\n+        assertEquals(false, EthiopicChronology.getInstanceUTC().months().isPrecise());\n         assertEquals(true, EthiopicChronology.getInstanceUTC().weeks().isPrecise());\n         assertEquals(true, EthiopicChronology.getInstanceUTC().days().isPrecise());\n         assertEquals(true, EthiopicChronology.getInstanceUTC().halfdays().isPrecise());\n \n     public void testSampleDate() {\n         DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, ISO_UTC).withChronology(ETHIOPIC_UTC);\n-        System.out.println(dt);\n         assertEquals(EthiopicChronology.EE, dt.getEra());\n         assertEquals(20, dt.getCenturyOfEra());  // TODO confirm\n         assertEquals(96, dt.getYearOfCentury());\n+        assertEquals(1996, dt.getYearOfEra());\n+        \n         assertEquals(1996, dt.getYear());\n-        assertEquals(1996, dt.getYearOfEra());\n+        Property fld = dt.year();\n+        assertEquals(false, fld.isLeap());\n+        assertEquals(0, fld.getLeapAmount());\n+        assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType());\n+        assertEquals(new DateTime(1997, 10, 2, 0, 0, 0, 0, ETHIOPIC_UTC), fld.addToCopy(1));\n+        \n         assertEquals(10, dt.getMonthOfYear());\n+        fld = dt.monthOfYear();\n+        assertEquals(false, fld.isLeap());\n+        assertEquals(0, fld.getLeapAmount());\n+        assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType());\n+        assertEquals(1, fld.getMinimumValue());\n+        assertEquals(1, fld.getMinimumValueOverall());\n+        assertEquals(13, fld.getMaximumValue());\n+        assertEquals(13, fld.getMaximumValueOverall());\n+        assertEquals(new DateTime(1997, 1, 2, 0, 0, 0, 0, ETHIOPIC_UTC), fld.addToCopy(4));\n+        assertEquals(new DateTime(1996, 1, 2, 0, 0, 0, 0, ETHIOPIC_UTC), fld.addWrapFieldToCopy(4));\n+        \n         assertEquals(2, dt.getDayOfMonth());\n+        fld = dt.dayOfMonth();\n+        assertEquals(false, fld.isLeap());\n+        assertEquals(0, fld.getLeapAmount());\n+        assertEquals(null, fld.getLeapDurationField());\n+        assertEquals(1, fld.getMinimumValue());\n+        assertEquals(1, fld.getMinimumValueOverall());\n+        assertEquals(30, fld.getMaximumValue());\n+        assertEquals(30, fld.getMaximumValueOverall());\n+        assertEquals(new DateTime(1996, 10, 3, 0, 0, 0, 0, ETHIOPIC_UTC), fld.addToCopy(1));\n+        \n         assertEquals(DateTimeConstants.WEDNESDAY, dt.getDayOfWeek());\n+        fld = dt.dayOfWeek();\n+        assertEquals(false, fld.isLeap());\n+        assertEquals(0, fld.getLeapAmount());\n+        assertEquals(null, fld.getLeapDurationField());\n+        assertEquals(1, fld.getMinimumValue());\n+        assertEquals(1, fld.getMinimumValueOverall());\n+        assertEquals(7, fld.getMaximumValue());\n+        assertEquals(7, fld.getMaximumValueOverall());\n+        assertEquals(new DateTime(1996, 10, 3, 0, 0, 0, 0, ETHIOPIC_UTC), fld.addToCopy(1));\n+        \n         assertEquals(9 * 30 + 2, dt.getDayOfYear());\n+        fld = dt.dayOfYear();\n+        assertEquals(false, fld.isLeap());\n+        assertEquals(0, fld.getLeapAmount());\n+        assertEquals(null, fld.getLeapDurationField());\n+        assertEquals(1, fld.getMinimumValue());\n+        assertEquals(1, fld.getMinimumValueOverall());\n+        assertEquals(365, fld.getMaximumValue());\n+        assertEquals(366, fld.getMaximumValueOverall());\n+        assertEquals(new DateTime(1996, 10, 3, 0, 0, 0, 0, ETHIOPIC_UTC), fld.addToCopy(1));\n+        \n         assertEquals(0, dt.getHourOfDay());\n         assertEquals(0, dt.getMinuteOfHour());\n         assertEquals(0, dt.getSecondOfMinute());\n         assertEquals(0, dt.getMillisOfSecond());\n     }\n \n+    public void testDurationYear() {\n+        // Leap 1999, NotLeap 1996,97,98\n+        DateTime dt96 = new DateTime(1996, 10, 2, 0, 0, 0, 0, ETHIOPIC_UTC);\n+        DateTime dt97 = new DateTime(1997, 10, 2, 0, 0, 0, 0, ETHIOPIC_UTC);\n+        DateTime dt98 = new DateTime(1998, 10, 2, 0, 0, 0, 0, ETHIOPIC_UTC);\n+        DateTime dt99 = new DateTime(1999, 10, 2, 0, 0, 0, 0, ETHIOPIC_UTC);\n+        DateTime dt00 = new DateTime(2000, 10, 2, 0, 0, 0, 0, ETHIOPIC_UTC);\n+        \n+        DurationField fld = dt96.year().getDurationField();\n+        assertEquals(ETHIOPIC_UTC.years(), fld);\n+        assertEquals(1L * 365L * MILLIS_PER_DAY, fld.getMillis(1, dt96.getMillis()));\n+        assertEquals(2L * 365L * MILLIS_PER_DAY, fld.getMillis(2, dt96.getMillis()));\n+        assertEquals(3L * 365L * MILLIS_PER_DAY, fld.getMillis(3, dt96.getMillis()));\n+        assertEquals((4L * 365L + 1L) * MILLIS_PER_DAY, fld.getMillis(4, dt96.getMillis()));\n+        \n+        assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getMillis(1));\n+        assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 2, fld.getMillis(2));\n+        \n+        assertEquals(1L * 365L * MILLIS_PER_DAY, fld.getMillis(1L, dt96.getMillis()));\n+        assertEquals(2L * 365L * MILLIS_PER_DAY, fld.getMillis(2L, dt96.getMillis()));\n+        assertEquals(3L * 365L * MILLIS_PER_DAY, fld.getMillis(3L, dt96.getMillis()));\n+        assertEquals((4L * 365L + 1L) * MILLIS_PER_DAY, fld.getMillis(4L, dt96.getMillis()));\n+        \n+        assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getMillis(1L));\n+        assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 2, fld.getMillis(2L));\n+        \n+        assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getUnitMillis());\n+        \n+        assertEquals(0, fld.getValue(1L * 365L * MILLIS_PER_DAY - 1L, dt96.getMillis()));\n+        assertEquals(1, fld.getValue(1L * 365L * MILLIS_PER_DAY, dt96.getMillis()));\n+        assertEquals(1, fld.getValue(1L * 365L * MILLIS_PER_DAY + 1L, dt96.getMillis()));\n+        assertEquals(1, fld.getValue(2L * 365L * MILLIS_PER_DAY - 1L, dt96.getMillis()));\n+        assertEquals(2, fld.getValue(2L * 365L * MILLIS_PER_DAY, dt96.getMillis()));\n+        assertEquals(2, fld.getValue(2L * 365L * MILLIS_PER_DAY + 1L, dt96.getMillis()));\n+        assertEquals(2, fld.getValue(3L * 365L * MILLIS_PER_DAY - 1L, dt96.getMillis()));\n+        assertEquals(3, fld.getValue(3L * 365L * MILLIS_PER_DAY, dt96.getMillis()));\n+        assertEquals(3, fld.getValue(3L * 365L * MILLIS_PER_DAY + 1L, dt96.getMillis()));\n+        assertEquals(3, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY - 1L, dt96.getMillis()));\n+        assertEquals(4, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY, dt96.getMillis()));\n+        assertEquals(4, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY + 1L, dt96.getMillis()));\n+        \n+        assertEquals(dt97.getMillis(), fld.add(dt96.getMillis(), 1));\n+        assertEquals(dt98.getMillis(), fld.add(dt96.getMillis(), 2));\n+        assertEquals(dt99.getMillis(), fld.add(dt96.getMillis(), 3));\n+        assertEquals(dt00.getMillis(), fld.add(dt96.getMillis(), 4));\n+        \n+        assertEquals(dt97.getMillis(), fld.add(dt96.getMillis(), 1L));\n+        assertEquals(dt98.getMillis(), fld.add(dt96.getMillis(), 2L));\n+        assertEquals(dt99.getMillis(), fld.add(dt96.getMillis(), 3L));\n+        assertEquals(dt00.getMillis(), fld.add(dt96.getMillis(), 4L));\n+    }\n+\n+    public void testDurationMonth() {\n+        // Leap 1999, NotLeap 1996,97,98\n+        DateTime dt11 = new DateTime(1999, 11, 2, 0, 0, 0, 0, ETHIOPIC_UTC);\n+        DateTime dt12 = new DateTime(1999, 12, 2, 0, 0, 0, 0, ETHIOPIC_UTC);\n+        DateTime dt13 = new DateTime(1999, 13, 2, 0, 0, 0, 0, ETHIOPIC_UTC);\n+        DateTime dt01 = new DateTime(2000, 1, 2, 0, 0, 0, 0, ETHIOPIC_UTC);\n+        \n+        DurationField fld = dt11.monthOfYear().getDurationField();\n+        assertEquals(ETHIOPIC_UTC.months(), fld);\n+        assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1, dt11.getMillis()));\n+        assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2, dt11.getMillis()));\n+        assertEquals((2L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(3, dt11.getMillis()));\n+        assertEquals((3L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(4, dt11.getMillis()));\n+        \n+        assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1));\n+        assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2));\n+        assertEquals(13L * 30L * MILLIS_PER_DAY, fld.getMillis(13));\n+        \n+        assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1L, dt11.getMillis()));\n+        assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2L, dt11.getMillis()));\n+        assertEquals((2L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(3L, dt11.getMillis()));\n+        assertEquals((3L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(4L, dt11.getMillis()));\n+        \n+        assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1L));\n+        assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2L));\n+        assertEquals(13L * 30L * MILLIS_PER_DAY, fld.getMillis(13L));\n+        \n+        assertEquals(0, fld.getValue(1L * 30L * MILLIS_PER_DAY - 1L, dt11.getMillis()));\n+        assertEquals(1, fld.getValue(1L * 30L * MILLIS_PER_DAY, dt11.getMillis()));\n+        assertEquals(1, fld.getValue(1L * 30L * MILLIS_PER_DAY + 1L, dt11.getMillis()));\n+        assertEquals(1, fld.getValue(2L * 30L * MILLIS_PER_DAY - 1L, dt11.getMillis()));\n+        assertEquals(2, fld.getValue(2L * 30L * MILLIS_PER_DAY, dt11.getMillis()));\n+        assertEquals(2, fld.getValue(2L * 30L * MILLIS_PER_DAY + 1L, dt11.getMillis()));\n+        assertEquals(2, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY - 1L, dt11.getMillis()));\n+        assertEquals(3, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY, dt11.getMillis()));\n+        assertEquals(3, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY + 1L, dt11.getMillis()));\n+        assertEquals(3, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY - 1L, dt11.getMillis()));\n+        assertEquals(4, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY, dt11.getMillis()));\n+        assertEquals(4, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY + 1L, dt11.getMillis()));\n+        \n+        assertEquals(dt12.getMillis(), fld.add(dt11.getMillis(), 1));\n+        assertEquals(dt13.getMillis(), fld.add(dt11.getMillis(), 2));\n+        assertEquals(dt01.getMillis(), fld.add(dt11.getMillis(), 3));\n+        \n+        assertEquals(dt12.getMillis(), fld.add(dt11.getMillis(), 1L));\n+        assertEquals(dt13.getMillis(), fld.add(dt11.getMillis(), 2L));\n+        assertEquals(dt01.getMillis(), fld.add(dt11.getMillis(), 3L));\n+    }\n+\n }", "timestamp": 1133052694, "metainfo": ""}