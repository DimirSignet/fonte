{"sha": "3dd31f2d88ad2109502a508bfaf1d81f9f7a3808", "log": "Improved overflow detection and handling.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java\n             }\n             iField = field;\n             iTimeField = useTimeArithmetic(field);\n-            this.iZone = zone;\n+            iZone = zone;\n         }\n \n         public boolean isPrecise() {\n-            return iTimeField ? iField.isPrecise() : iZone.isFixed();\n+            return iTimeField ? iField.isPrecise() : this.iZone.isFixed();\n         }\n \n         public long getUnitMillis() {\n         }\n \n         public int getValue(long duration, long instant) {\n-            return iField.getValue(duration, instant + this.iZone.getOffset(instant));\n+            return iField.getValue(duration, addOffset(instant));\n         }\n \n         public long getValueAsLong(long duration, long instant) {\n-            return iField.getValueAsLong(duration, instant + this.iZone.getOffset(instant));\n+            return iField.getValueAsLong(duration, addOffset(instant));\n         }\n \n         public long getMillis(int value, long instant) {\n-            return iField.getMillis(value, instant + this.iZone.getOffset(instant));\n+            return iField.getMillis(value, addOffset(instant));\n         }\n \n         public long getMillis(long value, long instant) {\n-            return iField.getMillis(value, instant + this.iZone.getOffset(instant));\n+            return iField.getMillis(value, addOffset(instant));\n         }\n \n         public long add(long instant, int value) {\n+            int offset = getOffsetToAdd(instant);\n+            instant = iField.add(instant + offset, value);\n+            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));\n+        }\n+\n+        public long add(long instant, long value) {\n+            int offset = getOffsetToAdd(instant);\n+            instant = iField.add(instant + offset, value);\n+            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));\n+        }\n+\n+        public int getDifference(long minuendInstant, long subtrahendInstant) {\n+            int offset = getOffsetToAdd(subtrahendInstant);\n+            return iField.getDifference\n+                (minuendInstant + (iTimeField ? offset : getOffsetToAdd(minuendInstant)),\n+                 subtrahendInstant + offset);\n+        }\n+\n+        public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {\n+            int offset = getOffsetToAdd(subtrahendInstant);\n+            return iField.getDifferenceAsLong\n+                (minuendInstant + (iTimeField ? offset : getOffsetToAdd(minuendInstant)),\n+                 subtrahendInstant + offset);\n+        }\n+\n+        private int getOffsetToAdd(long instant) {\n             int offset = this.iZone.getOffset(instant);\n-            instant = iField.add(instant + offset, value);\n-            return instant - (iTimeField ? offset : this.iZone.getOffsetFromLocal(instant));\n-        }\n-\n-        public long add(long instant, long value) {\n+            long sum = instant + offset;\n+            // If there is a sign change, but the two values have the same sign...\n+            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {\n+                throw new ArithmeticException(\"Adding time zone offset caused overflow\");\n+            }\n+            return offset;\n+        }\n+\n+        private int getOffsetFromLocalToSubtract(long instant) {\n+            int offset = this.iZone.getOffsetFromLocal(instant);\n+            long diff = instant - offset;\n+            // If there is a sign change, but the two values have different signs...\n+            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {\n+                throw new ArithmeticException(\"Subtracting time zone offset caused overflow\");\n+            }\n+            return offset;\n+        }\n+\n+        private long addOffset(long instant) {\n             int offset = this.iZone.getOffset(instant);\n-            instant = iField.add(instant + offset, value);\n-            return instant - (iTimeField ? offset : this.iZone.getOffsetFromLocal(instant));\n-        }\n-\n-        public int getDifference(long minuendInstant, long subtrahendInstant) {\n-            int offset = this.iZone.getOffset(subtrahendInstant);\n-            return iField.getDifference\n-                (minuendInstant + (iTimeField ? offset : this.iZone.getOffset(minuendInstant)),\n-                 subtrahendInstant + offset);\n-        }\n-\n-        public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {\n-            int offset = this.iZone.getOffset(subtrahendInstant);\n-            return iField.getDifferenceAsLong\n-                (minuendInstant + (iTimeField ? offset : this.iZone.getOffset(minuendInstant)),\n-                 subtrahendInstant + offset);\n+            long sum = instant + offset;\n+            // If there is a sign change, but the two values have the same sign...\n+            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {\n+                throw new ArithmeticException(\"Adding time zone offset caused overflow\");\n+            }\n+            return sum;\n         }\n     }\n \n                 throw new IllegalArgumentException();\n             }\n             iField = field;\n-            this.iZone = zone;\n+            iZone = zone;\n             iDurationField = durationField;\n             iTimeField = useTimeArithmetic(durationField);\n             iRangeDurationField = rangeDurationField;\n         }\n \n         public int get(long instant) {\n-            return iField.get(instant + this.iZone.getOffset(instant));\n+            return iField.get(addOffset(instant));\n         }\n \n         public String getAsText(long instant, Locale locale) {\n-            return iField.getAsText(instant + this.iZone.getOffset(instant), locale);\n+            return iField.getAsText(addOffset(instant), locale);\n         }\n \n         public String getAsShortText(long instant, Locale locale) {\n-            return iField.getAsShortText(instant + this.iZone.getOffset(instant), locale);\n+            return iField.getAsShortText(addOffset(instant), locale);\n         }\n \n         public long add(long instant, int value) {\n-            int offset = this.iZone.getOffset(instant);\n+            int offset = getOffsetToAdd(instant);\n             instant = iField.add(instant + offset, value);\n-            return instant - (iTimeField ? offset : this.iZone.getOffsetFromLocal(instant));\n+            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));\n         }\n \n         public long add(long instant, long value) {\n-            int offset = this.iZone.getOffset(instant);\n+            int offset = getOffsetToAdd(instant);\n             instant = iField.add(instant + offset, value);\n-            return instant - (iTimeField ? offset : this.iZone.getOffsetFromLocal(instant));\n+            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));\n         }\n \n         public long addWrapField(long instant, int value) {\n-            int offset = this.iZone.getOffset(instant);\n+            int offset = getOffsetToAdd(instant);\n             instant = iField.addWrapField(instant + offset, value);\n-            return instant - (iTimeField ? offset : this.iZone.getOffsetFromLocal(instant));\n+            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));\n         }\n \n         public long set(long instant, int value) {\n-            long offset = this.iZone.getOffset(instant);\n+            long offset = getOffsetToAdd(instant);\n \n             instant = iField.set(instant + offset, value);\n-            long offsetFromLocal = this.iZone.getOffsetFromLocal(instant);\n+            long offsetFromLocal = getOffsetFromLocalToSubtract(instant);\n             instant -= offsetFromLocal;\n \n             if (offset != offsetFromLocal) {\n         }\n \n         public long set(long instant, String text, Locale locale) {\n-            instant = iField.set(instant + this.iZone.getOffset(instant), text, locale);\n+            instant = iField.set(addOffset(instant), text, locale);\n             // Cannot verify that new value stuck because set may be lenient.\n-            return instant - this.iZone.getOffsetFromLocal(instant);\n+            return instant - getOffsetFromLocalToSubtract(instant);\n         }\n \n         public int getDifference(long minuendInstant, long subtrahendInstant) {\n-            int offset = this.iZone.getOffset(subtrahendInstant);\n+            int offset = getOffsetToAdd(subtrahendInstant);\n             return iField.getDifference\n-                (minuendInstant + (iTimeField ? offset : this.iZone.getOffset(minuendInstant)),\n+                (minuendInstant + (iTimeField ? offset : getOffsetToAdd(minuendInstant)),\n                  subtrahendInstant + offset);\n         }\n \n         public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {\n-            int offset = this.iZone.getOffset(subtrahendInstant);\n+            int offset = getOffsetToAdd(subtrahendInstant);\n             return iField.getDifferenceAsLong\n-                (minuendInstant + (iTimeField ? offset : this.iZone.getOffset(minuendInstant)),\n+                (minuendInstant + (iTimeField ? offset : getOffsetToAdd(minuendInstant)),\n                  subtrahendInstant + offset);\n         }\n \n         }\n \n         public boolean isLeap(long instant) {\n-            return iField.isLeap(instant + this.iZone.getOffset(instant));\n+            return iField.isLeap(addOffset(instant));\n         }\n \n         public int getLeapAmount(long instant) {\n-            return iField.getLeapAmount(instant + this.iZone.getOffset(instant));\n+            return iField.getLeapAmount(addOffset(instant));\n         }\n \n         public final DurationField getLeapDurationField() {\n         }\n \n         public long roundFloor(long instant) {\n-            int offset = this.iZone.getOffset(instant);\n+            int offset = getOffsetToAdd(instant);\n             instant = iField.roundFloor(instant + offset);\n-            return instant - (iTimeField ? offset : this.iZone.getOffsetFromLocal(instant));\n+            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));\n         }\n \n         public long roundCeiling(long instant) {\n-            int offset = this.iZone.getOffset(instant);\n+            int offset = getOffsetToAdd(instant);\n             instant = iField.roundCeiling(instant + offset);\n-            return instant - (iTimeField ? offset : this.iZone.getOffsetFromLocal(instant));\n+            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));\n         }\n \n         public long remainder(long instant) {\n-            return iField.remainder(instant + this.iZone.getOffset(instant));\n+            return iField.remainder(addOffset(instant));\n         }\n \n         public int getMinimumValue() {\n         }\n \n         public int getMinimumValue(long instant) {\n-            return iField.getMinimumValue(instant + this.iZone.getOffset(instant));\n+            return iField.getMinimumValue(addOffset(instant));\n         }\n \n         public int getMinimumValue(ReadablePartial instant) {\n         }\n \n         public int getMaximumValue(long instant) {\n-            return iField.getMaximumValue(instant + this.iZone.getOffset(instant));\n+            return iField.getMaximumValue(addOffset(instant));\n         }\n \n         public int getMaximumValue(ReadablePartial instant) {\n         public int getMaximumShortTextLength(Locale locale) {\n             return iField.getMaximumShortTextLength(locale);\n         }\n+\n+        private int getOffsetToAdd(long instant) {\n+            int offset = this.iZone.getOffset(instant);\n+            long sum = instant + offset;\n+            // If there is a sign change, but the two values have the same sign...\n+            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {\n+                throw new ArithmeticException(\"Adding time zone offset caused overflow\");\n+            }\n+            return offset;\n+        }\n+\n+        private int getOffsetFromLocalToSubtract(long instant) {\n+            int offset = this.iZone.getOffsetFromLocal(instant);\n+            long diff = instant - offset;\n+            // If there is a sign change, but the two values have different signs...\n+            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {\n+                throw new ArithmeticException(\"Subtracting time zone offset caused overflow\");\n+            }\n+            return offset;\n+        }\n+\n+        private long addOffset(long instant) {\n+            int offset = this.iZone.getOffset(instant);\n+            long sum = instant + offset;\n+            // If there is a sign change, but the two values have the same sign...\n+            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {\n+                throw new ArithmeticException(\"Adding time zone offset caused overflow\");\n+            }\n+            return sum;\n+        }\n     }\n \n }\n--- a/JodaTime/src/java/org/joda/time/field/FieldUtils.java\n+++ b/JodaTime/src/java/org/joda/time/field/FieldUtils.java\n      * @throws ArithmeticException if the value is too big or too small\n      */\n     public static int safeAdd(int val1, int val2) {\n-        long total = ((long) val1) + ((long) val2);\n-        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {\n-            throw new ArithmeticException(\"The calculation caused an overflow: \" + val1 +\" + \" + val2);\n-        }\n-        return (int) total;\n+        int sum = val1 + val2;\n+        // If there is a sign change, but the two values have the same sign...\n+        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n+            throw new ArithmeticException\n+                (\"The calculation caused an overflow: \" + val1 + \" + \" + val2);\n+        }\n+        return sum;\n     }\n     \n     /**\n      * @throws ArithmeticException if the value is too big or too small\n      */\n     public static long safeAdd(long val1, long val2) {\n-        long total = val1 + val2;\n-        if (val1 > 0 && val2 > 0 && total < 0) {\n-            throw new ArithmeticException(\"The calculation caused an overflow: \" + val1 +\" + \" + val2);\n-        }\n-        if (val1 < 0 && val2 < 0 && total > 0) {\n-            throw new ArithmeticException(\"The calculation caused an overflow: \" + val1 +\" + \" + val2);\n-        }\n-        return total;\n+        long sum = val1 + val2;\n+        // If there is a sign change, but the two values have the same sign...\n+        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {\n+            throw new ArithmeticException\n+                (\"The calculation caused an overflow: \" + val1 + \" + \" + val2);\n+        }\n+        return sum;\n     }\n     \n     /**\n      * @throws ArithmeticException if the value is too big or too small\n      */\n     public static long safeSubtract(long val1, long val2) {\n-        if (val2 == Long.MIN_VALUE) {\n-            if (val1 <= 0L) {\n-                return (val1 - val2);\n-            }\n-            throw new ArithmeticException(\"The calculation caused an overflow: \" + val1 +\" - \" + val2);\n-        }\n-        return safeAdd(val1, -val2);\n+        long diff = val1 - val2;\n+        // If there is a sign change, but the two values have different signs...\n+        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {\n+            throw new ArithmeticException\n+                (\"The calculation caused an overflow: \" + val1 + \" - \" + val2);\n+        }\n+        return diff;\n     }\n     \n     /**\n      * @throws ArithmeticException if the value is too big or too small\n      */\n     public static long safeMultiply(long val1, long val2) {\n-        if (val1 == 0  || val2 == 0) {\n+        if (val1 == 0 || val2 == 0) {\n             return 0L;\n         }\n         long total = val1 * val2;\n         if (total / val2 != val1) {\n-            throw new ArithmeticException(\"The calculation caused an overflow: \" + val1 +\" * \" + val2);\n+            throw new ArithmeticException\n+                (\"The calculation caused an overflow: \" + val1 + \" * \" + val2);\n         }\n         return total;\n     }\n--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java\n         // calculations when printing multiple fields in a composite printer.\n         DateTimeZone zone = chrono.getZone();\n         int offset = zone.getOffset(instant);\n-        iPrinter.printTo(buf, instant + offset, chrono.withUTC(), offset, zone, iLocale);\n+        long adjustedInstant = instant + offset;\n+        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\n+            // Time zone offset overflow, so revert to UTC.\n+            adjustedInstant = instant;\n+            offset = 0;\n+        }\n+        iPrinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n     }\n \n     private void printTo(Writer buf, long instant, Chronology chrono) throws IOException {\n         // calculations when printing multiple fields in a composite printer.\n         DateTimeZone zone = chrono.getZone();\n         int offset = zone.getOffset(instant);\n-        iPrinter.printTo(buf, instant + offset, chrono.withUTC(), offset, zone, iLocale);\n+        long adjustedInstant = instant + offset;\n+        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {\n+            // Time zone offset overflow, so revert to UTC.\n+            adjustedInstant = instant;\n+            offset = 0;\n+        }\n+        iPrinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);\n     }\n \n     /**\n--- a/JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java\n+++ b/JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java\n             } catch (IllegalArgumentException e) {\n                 // Overflowed.\n                 start = instant;\n+            } catch (ArithmeticException e) {\n+                // Overflowed.\n+                start = instant;\n             }\n \n             try {\n             } catch (IllegalArgumentException e) {\n                 // Overflowed.\n                 end = instant;\n+            } catch (ArithmeticException e) {\n+                // Overflowed.\n+                end = instant;\n             }\n \n             return (start > end) ? end : start;\n             } catch (IllegalArgumentException e) {\n                 // Overflowed.\n                 start = instant;\n+            } catch (ArithmeticException e) {\n+                // Overflowed.\n+                start = instant;\n             }\n \n             try {\n                     end = instant;\n                 }\n             } catch (IllegalArgumentException e) {\n+                // Overflowed.\n+                end = instant;\n+            } catch (ArithmeticException e) {\n                 // Overflowed.\n                 end = instant;\n             }\n             } catch (IllegalArgumentException e) {\n                 // Overflowed.\n                 start = instant;\n+            } catch (ArithmeticException e) {\n+                // Overflowed.\n+                start = instant;\n             }\n \n             try {\n                 end = endRecurrence.next\n                     (instant, standardOffset, startRecurrence.getSaveMillis());\n             } catch (IllegalArgumentException e) {\n+                // Overflowed.\n+                end = instant;\n+            } catch (ArithmeticException e) {\n                 // Overflowed.\n                 end = instant;\n             }", "timestamp": 1126117619, "metainfo": ""}