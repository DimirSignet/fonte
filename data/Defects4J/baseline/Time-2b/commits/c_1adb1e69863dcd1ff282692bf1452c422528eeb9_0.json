{"sha": "1adb1e69863dcd1ff282692bf1452c422528eeb9", "log": "Fix DateTimeFormatter.parseInto() where it obtains the default year  Previously, wrong year could be obtained at year start/end in non UTC zones Now obtains year using the chronology of the ReadWritableInstant Fixes #21", "commit": "\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n import org.joda.time.DateTime;\n import org.joda.time.DateTimeUtils;\n import org.joda.time.DateTimeZone;\n+import org.joda.time.Instant;\n import org.joda.time.LocalDate;\n import org.joda.time.LocalDateTime;\n import org.joda.time.LocalTime;\n      * one's complement operator (~) on the return value.\n      * <p>\n      * This parse method ignores the {@link #getDefaultYear() default year} and\n-     * parses using the year from the supplied instant as the default.\n+     * parses using the year from the supplied instant based on the chronology\n+     * and time-zone of the supplied instant.\n      * <p>\n      * The parse will use the chronology of the instant.\n      *\n         \n         long instantMillis = instant.getMillis();\n         Chronology chrono = instant.getChronology();\n+        int defaultYear = DateTimeUtils.getChronology(chrono).year().get(instantMillis);\n         long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, chrono.year().get(instantLocal));\n+            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n--- a/src/test/java/org/joda/time/format/TestDateTimeFormatter.java\n+++ b/src/test/java/org/joda/time/format/TestDateTimeFormatter.java\n         assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, LONDON), result);\n     }\n \n+    public void testParseInto_monthDay_feb29_startOfYear() {\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"M d\").withLocale(Locale.UK);\n+        MutableDateTime result = new MutableDateTime(2004, 1, 1, 0, 0, 0, 0, LONDON);\n+        assertEquals(4, f.parseInto(result, \"2 29\", 0));\n+        assertEquals(new MutableDateTime(2004, 2, 29, 0, 0, 0, 0, LONDON), result);\n+    }\n+\n+    public void testParseInto_monthDay_feb29_OfYear() {\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"M d\").withLocale(Locale.UK);\n+        MutableDateTime result = new MutableDateTime(2004, 12, 31, 23, 59, 59, 999, LONDON);\n+        assertEquals(4, f.parseInto(result, \"2 29\", 0));\n+        assertEquals(new MutableDateTime(2004, 2, 29, 23, 59, 59, 999, LONDON), result);\n+    }\n+\n+    public void testParseInto_monthDay_feb29_newYork() {\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"M d\").withLocale(Locale.UK);\n+        MutableDateTime result = new MutableDateTime(2004, 1, 9, 12, 20, 30, 0, NEWYORK);\n+        assertEquals(4, f.parseInto(result, \"2 29\", 0));\n+        assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, NEWYORK), result);\n+    }\n+\n+    public void testParseInto_monthDay_feb29_newYork_startOfYear() {\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"M d\").withLocale(Locale.UK);\n+        MutableDateTime result = new MutableDateTime(2004, 1, 1, 0, 0, 0, 0, NEWYORK);\n+        assertEquals(4, f.parseInto(result, \"2 29\", 0));\n+        assertEquals(new MutableDateTime(2004, 2, 29, 0, 0, 0, 0, NEWYORK), result);\n+    }\n+\n+    public void testParseInto_monthDay_feb29_newYork_endOfYear() {\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"M d\").withLocale(Locale.UK);\n+        MutableDateTime result = new MutableDateTime(2004, 12, 31, 23, 59, 59, 999, NEWYORK);\n+        assertEquals(4, f.parseInto(result, \"2 29\", 0));\n+        assertEquals(new MutableDateTime(2004, 2, 29, 23, 59, 59, 999, NEWYORK), result);\n+    }\n+\n+    public void testParseInto_monthDay_feb29_tokyo() {\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"M d\").withLocale(Locale.UK);\n+        MutableDateTime result = new MutableDateTime(2004, 1, 9, 12, 20, 30, 0, TOKYO);\n+        assertEquals(4, f.parseInto(result, \"2 29\", 0));\n+        assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, TOKYO), result);\n+    }\n+\n+    public void testParseInto_monthDay_feb29_tokyo_startOfYear() {\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"M d\").withLocale(Locale.UK);\n+        MutableDateTime result = new MutableDateTime(2004, 1, 1, 0, 0, 0, 0, TOKYO);\n+        assertEquals(4, f.parseInto(result, \"2 29\", 0));\n+        assertEquals(new MutableDateTime(2004, 2, 29, 0, 0, 0, 0, TOKYO), result);\n+    }\n+\n+    public void testParseInto_monthDay_feb29_tokyo_endOfYear() {\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"M d\").withLocale(Locale.UK);\n+        MutableDateTime result = new MutableDateTime(2004, 12, 31, 23, 59, 59, 999, TOKYO);\n+        assertEquals(4, f.parseInto(result, \"2 29\", 0));\n+        assertEquals(new MutableDateTime(2004, 2, 29, 23, 59, 59, 999, TOKYO), result);\n+    }\n+\n     public void testParseInto_monthDay_withDefaultYear_feb29() {\n         DateTimeFormatter f = DateTimeFormat.forPattern(\"M d\").withDefaultYear(2012);\n         MutableDateTime result = new MutableDateTime(2004, 1, 9, 12, 20, 30, 0, LONDON);\n         assertEquals(4, f.parseInto(result, \"2 29\", 0));\n         assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, LONDON), result);\n+    }\n+\n+    public void testParseInto_monthDay_withDefaultYear_feb29_newYork() {\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"M d\").withDefaultYear(2012);\n+        MutableDateTime result = new MutableDateTime(2004, 1, 9, 12, 20, 30, 0, NEWYORK);\n+        assertEquals(4, f.parseInto(result, \"2 29\", 0));\n+        assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, NEWYORK), result);\n+    }\n+\n+    public void testParseInto_monthDay_withDefaultYear_feb29_newYork_endOfYear() {\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"M d\").withDefaultYear(2012);\n+        MutableDateTime result = new MutableDateTime(2004, 12, 9, 12, 20, 30, 0, NEWYORK);\n+        assertEquals(4, f.parseInto(result, \"2 29\", 0));\n+        assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, NEWYORK), result);\n     }\n \n     public void testParseMillis_fractionOfSecondLong() {", "timestamp": 1374365577, "metainfo": ""}