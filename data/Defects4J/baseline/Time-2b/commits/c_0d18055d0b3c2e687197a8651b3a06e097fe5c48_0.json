{"sha": "0d18055d0b3c2e687197a8651b3a06e097fe5c48", "log": "Use DurationFieldType in DurationField   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeField.java\n     public abstract DateTimeFieldType getType();\n \n     /**\n-     * Get the name of the field, intended for debugging purposes only. By\n-     * convention, names follow a pattern of \"dddOfRrr\", where \"ddd\" represents\n-     * the (singular) duration field name and \"Rrr\" represents the (singular)\n-     * range duration field name. If the range field is not applicable, then\n+     * Get the name of the field.\n+     * <p>\n+     * By convention, names follow a pattern of \"dddOfRrr\", where \"ddd\" represents\n+     * the (singular) duration unit field name and \"Rrr\" represents the (singular)\n+     * duration range field name. If the range field is not applicable, then\n      * the name of the field is simply the (singular) duration field name.\n      * \n      * @return field name\n--- a/JodaTime/src/java/org/joda/time/DateTimeFieldType.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeFieldType.java\n      * \n      * @return duration unit of the field, never null\n      */\n-    public DurationFieldType getUnitDurationType() {\n+    public DurationFieldType getDurationType() {\n         return iUnitType;\n     }\n \n--- a/JodaTime/src/java/org/joda/time/DurationField.java\n+++ b/JodaTime/src/java/org/joda/time/DurationField.java\n public abstract class DurationField implements Comparable {\n \n     /**\n-     * Get the name of the field, intended for debugging purposes only. By\n-     * convention, names are plural.\n+     * Get the type of the field.\n+     * \n+     * @return field type\n+     */\n+    public abstract DurationFieldType getType();\n+\n+    /**\n+     * Get the name of the field.\n+     * <p>\n+     * By convention, names are plural.\n      * \n      * @return field name\n      */\n--- a/JodaTime/src/java/org/joda/time/PeriodType.java\n+++ b/JodaTime/src/java/org/joda/time/PeriodType.java\n      * @return DurationField or UnsupportedDurationField if unsupported\n      */\n     public DurationField years() {\n-        return UnsupportedDurationField.getInstance(\"years\");\n+        return UnsupportedDurationField.getInstance(DurationFieldType.years());\n     }\n \n     /**\n      * @return DurationField or UnsupportedDurationField if unsupported\n      */\n     public DurationField months() {\n-        return UnsupportedDurationField.getInstance(\"months\");\n+        return UnsupportedDurationField.getInstance(DurationFieldType.months());\n     }\n \n     /**\n      * @return DurationField or UnsupportedDurationField if unsupported\n      */\n     public DurationField weeks() {\n-        return UnsupportedDurationField.getInstance(\"weeks\");\n+        return UnsupportedDurationField.getInstance(DurationFieldType.weeks());\n     }\n \n     /**\n      * @return DurationField or UnsupportedDurationField if unsupported\n      */\n     public DurationField days() {\n-        return UnsupportedDurationField.getInstance(\"days\");\n+        return UnsupportedDurationField.getInstance(DurationFieldType.days());\n     }\n \n     /**\n      * @return DurationField or UnsupportedDurationField if unsupported\n      */\n     public DurationField hours() {\n-        return UnsupportedDurationField.getInstance(\"hours\");\n+        return UnsupportedDurationField.getInstance(DurationFieldType.hours());\n     }\n \n     /**\n      * @return DurationField or UnsupportedDurationField if unsupported\n      */\n     public DurationField minutes() {\n-        return UnsupportedDurationField.getInstance(\"minutes\");\n+        return UnsupportedDurationField.getInstance(DurationFieldType.minutes());\n     }\n \n     /**\n      * @return DurationField or UnsupportedDurationField if unsupported\n      */\n     public DurationField seconds() {\n-        return UnsupportedDurationField.getInstance(\"seconds\");\n+        return UnsupportedDurationField.getInstance(DurationFieldType.seconds());\n     }\n \n     /**\n      * @return DurationField or UnsupportedDurationField if unsupported\n      */\n     public DurationField millis() {\n-        return UnsupportedDurationField.getInstance(\"millis\");\n+        return UnsupportedDurationField.getInstance(DurationFieldType.millis());\n     }\n \n     //-----------------------------------------------------------------------\n         \n         PreciseYearDayType(Chronology chrono) {\n             super(chrono);\n-            iYears = new ScaledDurationField(chrono.days(), \"PreciseYears\", 365);\n+            iYears = new ScaledDurationField(chrono.days(), DurationFieldType.years(), 365);\n             // rely on days/weeks to be precise because only ISO UTC used\n         }\n \n         \n         PreciseYearMonthType(Chronology chrono) {\n             super(chrono);\n-            iMonths = new ScaledDurationField(chrono.days(), \"PreciseMonths\", 30);\n+            iMonths = new ScaledDurationField(chrono.days(), DurationFieldType.months(), 30);\n         }\n \n         public PeriodType withChronology(Chronology chrono) {\n \n         public DurationField years() {\n             if ((iMask & (1 << 0)) != 0) {\n-                return UnsupportedDurationField.getInstance(\"years\");\n+                return UnsupportedDurationField.getInstance(DurationFieldType.years());\n             }\n             return iType.years();\n         }\n \n         public DurationField months() {\n             if ((iMask & (1 << 1)) != 0) {\n-                return UnsupportedDurationField.getInstance(\"months\");\n+                return UnsupportedDurationField.getInstance(DurationFieldType.months());\n             }\n             return iType.months();\n         }\n \n         public DurationField weeks() {\n             if ((iMask & (1 << 2)) != 0) {\n-                return UnsupportedDurationField.getInstance(\"weeks\");\n+                return UnsupportedDurationField.getInstance(DurationFieldType.weeks());\n             }\n             return iType.weeks();\n         }\n \n         public DurationField days() {\n             if ((iMask & (1 << 3)) != 0) {\n-                return UnsupportedDurationField.getInstance(\"days\");\n+                return UnsupportedDurationField.getInstance(DurationFieldType.days());\n             }\n             return iType.days();\n         }\n \n         public DurationField hours() {\n             if ((iMask & (1 << 4)) != 0) {\n-                return UnsupportedDurationField.getInstance(\"hours\");\n+                return UnsupportedDurationField.getInstance(DurationFieldType.hours());\n             }\n             return iType.hours();\n         }\n \n         public DurationField minutes() {\n             if ((iMask & (1 << 5)) != 0) {\n-                return UnsupportedDurationField.getInstance(\"minutes\");\n+                return UnsupportedDurationField.getInstance(DurationFieldType.minutes());\n             }\n             return iType.minutes();\n         }\n \n         public DurationField seconds() {\n             if ((iMask & (1 << 6)) != 0) {\n-                return UnsupportedDurationField.getInstance(\"seconds\");\n+                return UnsupportedDurationField.getInstance(DurationFieldType.seconds());\n             }\n             return iType.seconds();\n         }\n \n         public DurationField millis() {\n             if ((iMask & (1 << 7)) != 0) {\n-                return UnsupportedDurationField.getInstance(\"millis\");\n+                return UnsupportedDurationField.getInstance(DurationFieldType.millis());\n             }\n             return iType.millis();\n         }\n--- a/JodaTime/src/java/org/joda/time/chrono/BaseChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/BaseChronology.java\n import org.joda.time.DateTimeZone;\n import org.joda.time.DateTimeField;\n import org.joda.time.DurationField;\n+import org.joda.time.DurationFieldType;\n import org.joda.time.ReadablePartial;\n import org.joda.time.field.UnsupportedDateTimeField;\n import org.joda.time.field.UnsupportedDurationField;\n         }\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Get the field from the type.\n+     * <p>\n+     * This method obtains the <code>DurationField</code> for the <code>DurationFieldType</code>.\n+     * It is essentially a generic way of calling one of the field methods.\n+     *\n+     * @param type  a field type, usually obtained from DurationFieldType\n+     * @return the chronology field\n+     * @throws IllegalArgumentException if the field is null\n+     */\n+    public DurationField getField(DurationFieldType type) {\n+        if (type == DurationFieldType.millis()) {\n+            return millis();\n+        } else if (type == DurationFieldType.seconds()) {\n+            return seconds();\n+        } else if (type == DurationFieldType.minutes()) {\n+            return minutes();\n+        } else if (type == DurationFieldType.hours()) {\n+            return hours();\n+        } else if (type == DurationFieldType.halfdays()) {\n+            return halfdays();\n+        } else if (type == DurationFieldType.days()) {\n+            return days();\n+        } else if (type == DurationFieldType.weeks()) {\n+            return weeks();\n+        } else if (type == DurationFieldType.weekyears()) {\n+            return weekyears();\n+        } else if (type == DurationFieldType.months()) {\n+            return months();\n+        } else if (type == DurationFieldType.years()) {\n+            return years();\n+        } else if (type == DurationFieldType.centuries()) {\n+            return centuries();\n+        } else if (type == DurationFieldType.eras()) {\n+            return eras();\n+        } else {\n+            throw new IllegalArgumentException(\"Unrecognised field: \" + type);\n+        }\n+    }\n+\n     // Millis\n     //-----------------------------------------------------------------------\n     /**\n      * @return DurationField or UnsupportedDurationField if unsupported\n      */\n     public DurationField millis() {\n-        return UnsupportedDurationField.getInstance(\"millis\");\n+        return UnsupportedDurationField.getInstance(DurationFieldType.millis());\n     }\n \n     /**\n      * @return DurationField or UnsupportedDurationField if unsupported\n      */\n     public DurationField seconds() {\n-        return UnsupportedDurationField.getInstance(\"seconds\");\n+        return UnsupportedDurationField.getInstance(DurationFieldType.seconds());\n     }\n \n     /**\n      * @return DurationField or UnsupportedDurationField if unsupported\n      */\n     public DurationField minutes() {\n-        return UnsupportedDurationField.getInstance(\"minutes\");\n+        return UnsupportedDurationField.getInstance(DurationFieldType.minutes());\n     }\n \n     /**\n      * @return DurationField or UnsupportedDurationField if unsupported\n      */\n     public DurationField hours() {\n-        return UnsupportedDurationField.getInstance(\"hours\");\n+        return UnsupportedDurationField.getInstance(DurationFieldType.hours());\n     }\n \n     /**\n     }\n \n     /**\n+     * Get the halfdays duration field for this chronology.\n+     * \n+     * @return DurationField or UnsupportedDurationField if unsupported\n+     */\n+    public DurationField halfdays() {\n+        return UnsupportedDurationField.getInstance(DurationFieldType.halfdays());\n+    }\n+\n+    /**\n      * Get the hour of am/pm (0-11) field for this chronology.\n      * \n      * @return DateTimeField or UnsupportedDateTimeField if unsupported\n      * @return DateTimeField or UnsupportedDateTimeField if unsupported\n      */\n     public DateTimeField halfdayOfDay() {\n-        return UnsupportedDateTimeField.getInstance\n-            (DateTimeFieldType.halfdayOfDay(), UnsupportedDurationField.getInstance(\"halfdays\"));\n+        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.halfdayOfDay(), halfdays());\n     }\n \n     // Day\n      * @return DurationField or UnsupportedDurationField if unsupported\n      */\n     public DurationField days() {\n-        return UnsupportedDurationField.getInstance(\"days\");\n+        return UnsupportedDurationField.getInstance(DurationFieldType.days());\n     }\n \n     /**\n      * @return DurationField or UnsupportedDurationField if unsupported\n      */\n     public DurationField weeks() {\n-        return UnsupportedDurationField.getInstance(\"weeks\");\n+        return UnsupportedDurationField.getInstance(DurationFieldType.weeks());\n     }\n \n     /**\n      * @return DurationField or UnsupportedDurationField if unsupported\n      */\n     public DurationField weekyears() {\n-        return UnsupportedDurationField.getInstance(\"weekyears\");\n+        return UnsupportedDurationField.getInstance(DurationFieldType.weekyears());\n     }\n \n     /**\n      * @return DurationField or UnsupportedDurationField if unsupported\n      */\n     public DurationField months() {\n-        return UnsupportedDurationField.getInstance(\"months\");\n+        return UnsupportedDurationField.getInstance(DurationFieldType.months());\n     }\n \n     /**\n      * @return DurationField or UnsupportedDurationField if unsupported\n      */\n     public DurationField years() {\n-        return UnsupportedDurationField.getInstance(\"years\");\n+        return UnsupportedDurationField.getInstance(DurationFieldType.years());\n     }\n \n     /**\n      * @return DurationField or UnsupportedDurationField if unsupported\n      */\n     public DurationField centuries() {\n-        return UnsupportedDurationField.getInstance(\"centuries\");\n+        return UnsupportedDurationField.getInstance(DurationFieldType.centuries());\n     }\n \n     /**\n      * @return DurationField or UnsupportedDurationField if unsupported\n      */\n     public DurationField eras() {\n-        return UnsupportedDurationField.getInstance(\"eras\");\n+        return UnsupportedDurationField.getInstance(DurationFieldType.eras());\n     }\n \n     /**\n--- a/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java\n import org.joda.time.DateTimeFieldType;\n import org.joda.time.DateTimeZone;\n import org.joda.time.DurationField;\n+import org.joda.time.DurationFieldType;\n import org.joda.time.field.DividedDateTimeField;\n import org.joda.time.field.FieldUtils;\n import org.joda.time.field.MillisDurationField;\n \n         cMillisField = MillisDurationField.INSTANCE;\n         cSecondsField = new PreciseDurationField\n-            (\"seconds\", DateTimeConstants.MILLIS_PER_SECOND);\n+            (DurationFieldType.seconds(), DateTimeConstants.MILLIS_PER_SECOND);\n         cMinutesField = new PreciseDurationField\n-            (\"minutes\", DateTimeConstants.MILLIS_PER_MINUTE);\n+            (DurationFieldType.minutes(), DateTimeConstants.MILLIS_PER_MINUTE);\n         cHoursField = new PreciseDurationField\n-            (\"hours\", DateTimeConstants.MILLIS_PER_HOUR);\n+            (DurationFieldType.hours(), DateTimeConstants.MILLIS_PER_HOUR);\n         cHalfdaysField = new PreciseDurationField\n-            (\"halfdays\", DateTimeConstants.MILLIS_PER_DAY / 2);\n+            (DurationFieldType.halfdays(), DateTimeConstants.MILLIS_PER_DAY / 2);\n         cDaysField = new PreciseDurationField\n-            (\"days\", DateTimeConstants.MILLIS_PER_DAY);\n+            (DurationFieldType.days(), DateTimeConstants.MILLIS_PER_DAY);\n         cWeeksField = new PreciseDurationField\n-            (\"weeks\", DateTimeConstants.MILLIS_PER_WEEK);\n+            (DurationFieldType.weeks(), DateTimeConstants.MILLIS_PER_WEEK);\n \n         cMillisOfSecondField = new PreciseDateTimeField\n             (DateTimeFieldType.millisOfSecond(), cMillisField, cSecondsField);\n         DateTimeField field = new OffsetDateTimeField(\n             fields.yearOfEra, 99);\n         fields.centuryOfEra = new DividedDateTimeField(\n-            field, DateTimeFieldType.centuryOfEra(), \"centuries\", 100);\n+            field, DateTimeFieldType.centuryOfEra(), 100);\n         \n         field = new RemainderDateTimeField(\n             (DividedDateTimeField) fields.centuryOfEra);\n--- a/JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java\n             \n             field = new OffsetDateTimeField(fields.yearOfEra, 99);\n             fields.centuryOfEra = new DividedDateTimeField(\n-                field, DateTimeFieldType.centuryOfEra(), \"centuries\", 100);\n+                field, DateTimeFieldType.centuryOfEra(), 100);\n             \n             field = new RemainderDateTimeField(\n                 (DividedDateTimeField) fields.centuryOfEra);\n--- a/JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java\n import org.joda.time.DateTimeField;\n import org.joda.time.DateTimeFieldType;\n import org.joda.time.DurationField;\n+import org.joda.time.DurationFieldType;\n import org.joda.time.field.BaseDateTimeField;\n+import org.joda.time.field.FieldUtils;\n import org.joda.time.field.UnsupportedDurationField;\n-import org.joda.time.field.FieldUtils;\n \n /**\n  * Provides time calculations for the buddhist era component of time.\n     }\n \n     public DurationField getDurationField() {\n-        return UnsupportedDurationField.getInstance(\"eras\");\n+        return UnsupportedDurationField.getInstance(DurationFieldType.eras());\n     }\n \n     public DurationField getRangeDurationField() {\n--- a/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java\n import org.joda.time.DateTimeConstants;\n import org.joda.time.DateTimeZone;\n import org.joda.time.DurationField;\n+import org.joda.time.DurationFieldType;\n import org.joda.time.field.FieldUtils;\n import org.joda.time.field.PreciseDurationField;\n \n \n     static {\n         cMonthsField =  new PreciseDurationField\n-            (\"months\", 30L * DateTimeConstants.MILLIS_PER_DAY);\n+            (DurationFieldType.months(), 30L * DateTimeConstants.MILLIS_PER_DAY);\n         INSTANCE_UTC = getInstance(DateTimeZone.UTC);\n     }\n \n--- a/JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java\n import org.joda.time.DateTimeField;\n import org.joda.time.DateTimeFieldType;\n import org.joda.time.DurationField;\n+import org.joda.time.DurationFieldType;\n import org.joda.time.field.BaseDateTimeField;\n+import org.joda.time.field.FieldUtils;\n import org.joda.time.field.UnsupportedDurationField;\n-import org.joda.time.field.FieldUtils;\n \n /**\n  * Provides time calculations for the coptic era component of time.\n     }\n \n     public DurationField getDurationField() {\n-        return UnsupportedDurationField.getInstance(\"eras\");\n+        return UnsupportedDurationField.getInstance(DurationFieldType.eras());\n     }\n \n     public DurationField getRangeDurationField() {\n--- a/JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java\n      * Restricted constructor\n      */\n     CopticYearDateTimeField(BaseGJChronology chronology) {\n-        super(DateTimeFieldType.year(), \"years\", chronology.getAverageMillisPerYear());\n+        super(DateTimeFieldType.year(), chronology.getAverageMillisPerYear());\n         iChronology = chronology;\n     }\n \n--- a/JodaTime/src/java/org/joda/time/chrono/GJChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/GJChronology.java\n         private final ImpreciseCutoverField iField;\n \n         LinkedDurationField(DurationField durationField, ImpreciseCutoverField dateTimeField) {\n-            super(durationField, durationField.getName());\n+            super(durationField, durationField.getType());\n             iField = dateTimeField;\n         }\n \n--- a/JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java\n import org.joda.time.DateTimeConstants;\n import org.joda.time.DateTimeFieldType;\n import org.joda.time.DurationField;\n+import org.joda.time.DurationFieldType;\n import org.joda.time.field.BaseDateTimeField;\n+import org.joda.time.field.FieldUtils;\n import org.joda.time.field.UnsupportedDurationField;\n-import org.joda.time.field.FieldUtils;\n \n /**\n  * Provides time calculations for the era component of time.\n     }\n \n     public DurationField getDurationField() {\n-        return UnsupportedDurationField.getInstance(\"eras\");\n+        return UnsupportedDurationField.getInstance(DurationFieldType.eras());\n     }\n \n     public DurationField getRangeDurationField() {\n--- a/JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java\n      * Restricted constructor\n      */\n     GJMonthOfYearDateTimeField(BaseGJChronology chronology) {\n-        super(DateTimeFieldType.monthOfYear(), \"months\", chronology.getAverageMillisPerMonth());\n+        super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());\n         iChronology = chronology;\n     }\n \n--- a/JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java\n      * Restricted constructor\n      */\n     GJWeekyearDateTimeField(BaseGJChronology chronology) {\n-        super(DateTimeFieldType.weekyear(), \"weekyears\", chronology.getAverageMillisPerYear());\n+        super(DateTimeFieldType.weekyear(), chronology.getAverageMillisPerYear());\n         iChronology = chronology;\n     }\n \n--- a/JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java\n      * Restricted constructor\n      */\n     GJYearDateTimeField(BaseGJChronology chronology) {\n-        super(DateTimeFieldType.year(), \"years\", chronology.getAverageMillisPerYear());\n+        super(DateTimeFieldType.year(), chronology.getAverageMillisPerYear());\n         iChronology = chronology;\n     }\n \n--- a/JodaTime/src/java/org/joda/time/chrono/ISOChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/ISOChronology.java\n         if (getBase().getZone() == DateTimeZone.UTC) {\n             // Use zero based century and year of century.\n             fields.centuryOfEra = new DividedDateTimeField(\n-                ISOYearOfEraDateTimeField.INSTANCE, DateTimeFieldType.centuryOfEra(), \"centuries\", 100);\n+                ISOYearOfEraDateTimeField.INSTANCE, DateTimeFieldType.centuryOfEra(), 100);\n             fields.yearOfCentury = new RemainderDateTimeField(\n                 (DividedDateTimeField) fields.centuryOfEra, DateTimeFieldType.yearOfCentury());\n \n--- a/JodaTime/src/java/org/joda/time/chrono/LimitChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/LimitChronology.java\n         private static final long serialVersionUID = 8049297699408782284L;\n \n         LimitDurationField(DurationField field) {\n-            super(field, field.getName());\n+            super(field, field.getType());\n         }\n \n         public int getValue(long duration, long instant) {\n--- a/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java\n         final DateTimeZone iZone;\n \n         ZonedDurationField(DurationField field, DateTimeZone zone) {\n-            super(field.getName());\n+            super(field.getType());\n             if (!field.isSupported()) {\n                 throw new IllegalArgumentException();\n             }\n--- a/JodaTime/src/java/org/joda/time/field/BaseDurationField.java\n+++ b/JodaTime/src/java/org/joda/time/field/BaseDurationField.java\n \n import java.io.Serializable;\n import org.joda.time.DurationField;\n+import org.joda.time.DurationFieldType;\n \n /**\n  * BaseDurationField provides the common behaviour for DurationField\n     private static final long serialVersionUID = -2554245107589433218L;\n \n     /** A desriptive name for the field. */\n-    private final String iName;\n-\n-    protected BaseDurationField(String name) {\n+    private final DurationFieldType iType;\n+\n+    protected BaseDurationField(DurationFieldType type) {\n         super();\n-        if (name == null) {\n-            throw new IllegalArgumentException(\"The name must not be null\");\n+        if (type == null) {\n+            throw new IllegalArgumentException(\"The type must not be null\");\n         }\n-        iName = name;\n+        iType = type;\n+    }\n+\n+    public final DurationFieldType getType() {\n+        return iType;\n     }\n \n     public final String getName() {\n-        return iName;\n+        return iType.getName();\n     }\n \n     /**\n--- a/JodaTime/src/java/org/joda/time/field/DecoratedDurationField.java\n+++ b/JodaTime/src/java/org/joda/time/field/DecoratedDurationField.java\n package org.joda.time.field;\n \n import org.joda.time.DurationField;\n+import org.joda.time.DurationFieldType;\n \n /**\n  * <code>DecoratedDurationField</code> extends {@link BaseDurationField},\n     private final DurationField iField;\n \n     /**\n-     * @param name allow name to be overridden\n+     * Constructor.\n+     * \n+     * @param field  the base field\n+     * @param type  the type to actually use\n      */\n-    public DecoratedDurationField(DurationField field, String name) {\n-        super(name);\n+    public DecoratedDurationField(DurationField field, DurationFieldType type) {\n+        super(type);\n         if (field == null) {\n             throw new IllegalArgumentException(\"The field must not be null\");\n         }\n         iField = field;\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Gets the wrapped duration field.\n      * \n--- a/JodaTime/src/java/org/joda/time/field/DelegatedDurationField.java\n+++ b/JodaTime/src/java/org/joda/time/field/DelegatedDurationField.java\n \n import java.io.Serializable;\n import org.joda.time.DurationField;\n+import org.joda.time.DurationFieldType;\n \n /**\n  * <code>DelegatedDurationField</code> delegates each method call to the\n \n     /** The DurationField being wrapped */\n     private final DurationField iField;\n-    /** A desriptive name for the field */\n-    private final String iName;\n+    /** The field type */\n+    private final DurationFieldType iType;\n \n+    /**\n+     * Constructor.\n+     * \n+     * @param field  the base field\n+     */\n     protected DelegatedDurationField(DurationField field) {\n         this(field, null);\n     }\n \n     /**\n-     * @param name allow name to be overridden\n+     * Constructor.\n+     * \n+     * @param field  the base field\n+     * @param type  the field type to use\n      */\n-    protected DelegatedDurationField(DurationField field, String name) {\n+    protected DelegatedDurationField(DurationField field, DurationFieldType type) {\n+        super();\n         if (field == null) {\n             throw new IllegalArgumentException(\"The field must not be null\");\n         }\n         iField = field;\n-        iName = name;\n+        iType = (type == null ? field.getType() : type);\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Gets the wrapped duration field.\n      * \n         return iField;\n     }\n \n+    public DurationFieldType getType() {\n+        return iType;\n+    }\n+\n     public String getName() {\n-        return (iName == null) ? iField.getName() : iName;\n+        return iType.getName();\n     }\n \n     /**\n     }\n \n     public String toString() {\n-        return (iName == null) ? iField.toString() :\n-            (\"DurationField[\" + iName + ']');\n+        return (iType == null) ? iField.toString() :\n+            (\"DurationField[\" + iType + ']');\n     }\n \n }\n--- a/JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java\n      * \n      * @param field  the field to wrap, like \"year()\".\n      * @param type  the field type this field will actually use\n-     * @param durationName  short, descriptive name, like \"centuries\".\n      * @param divisor  divisor, such as 100 years in a century\n      * @throws IllegalArgumentException if divisor is less than two\n      */\n     public DividedDateTimeField(DateTimeField field,\n-                                DateTimeFieldType type, String durationName, int divisor) {\n+                                DateTimeFieldType type, int divisor) {\n         super(field, type);\n                 \n         if (divisor < 2) {\n         if (unitField == null) {\n             iDurationField = null;\n         } else {\n-            iDurationField = new ScaledDurationField(unitField, durationName, divisor);\n+            iDurationField = new ScaledDurationField(\n+                unitField, type.getDurationType(), divisor);\n         }\n \n         iDivisor = divisor;\n--- a/JodaTime/src/java/org/joda/time/field/ImpreciseDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/ImpreciseDateTimeField.java\n \n import org.joda.time.DateTimeFieldType;\n import org.joda.time.DurationField;\n+import org.joda.time.DurationFieldType;\n \n /**\n  * Abstract datetime field class that defines its own DurationField, which\n      * Constructor.\n      * \n      * @param type  the field type\n-     * @param durationName  short, descriptive name, like \"months\".\n      * @param unitMillis  the average duration unit milliseconds\n      */\n-    public ImpreciseDateTimeField(DateTimeFieldType type, String durationName, long unitMillis) {\n+    public ImpreciseDateTimeField(DateTimeFieldType type, long unitMillis) {\n         super(type);\n         iUnitMillis = unitMillis;\n-        iDurationField = new LinkedDurationField(durationName);\n+        iDurationField = new LinkedDurationField(type.getDurationType());\n     }\n \n     public abstract int get(long instant);\n     private final class LinkedDurationField extends BaseDurationField {\n         private static final long serialVersionUID = -203813474600094134L;\n \n-        LinkedDurationField(String name) {\n-            super(name);\n+        LinkedDurationField(DurationFieldType type) {\n+            super(type);\n         }\n     \n         public boolean isPrecise() {\n--- a/JodaTime/src/java/org/joda/time/field/MillisDurationField.java\n+++ b/JodaTime/src/java/org/joda/time/field/MillisDurationField.java\n package org.joda.time.field;\n \n import java.io.Serializable;\n+\n import org.joda.time.DurationField;\n+import org.joda.time.DurationFieldType;\n \n /**\n  * Duration field class representing a field with a fixed unit length of one\n     }\n     \n     //------------------------------------------------------------------------\n+    public DurationFieldType getType() {\n+        return DurationFieldType.millis();\n+    }\n+\n     public String getName() {\n         return \"millis\";\n     }\n--- a/JodaTime/src/java/org/joda/time/field/PreciseDurationField.java\n+++ b/JodaTime/src/java/org/joda/time/field/PreciseDurationField.java\n  */\n package org.joda.time.field;\n \n+import org.joda.time.DurationFieldType;\n+\n /**\n  * Duration field class representing a field with a fixed unit length.\n  * <p>\n     /**\n      * Constructor.\n      * \n-     * @param name  the name of the field, like \"seconds\"\n+     * @param type  the field type\n      * @param unitMillis  the unit milliseconds\n      */    \n-    public PreciseDurationField(String name, long unitMillis) {\n-        super(name);\n+    public PreciseDurationField(DurationFieldType type, long unitMillis) {\n+        super(type);\n         iUnitMillis = unitMillis;\n     }\n     \n--- a/JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java\n      * \n      * @param field  the field to wrap, like \"year()\".\n      * @param type  the field type this field actually uses\n-     * @param rangeName  short, descriptive name, like \"centuries\".\n      * @param divisor  divisor, such as 100 years in a century\n      * @throws IllegalArgumentException if divisor is less than two\n      */\n     public RemainderDateTimeField(DateTimeField field,\n-                                  DateTimeFieldType type, String rangeName, int divisor) {\n+                                  DateTimeFieldType type, int divisor) {\n         super(field, type);\n \n         if (divisor < 2) {\n         if (rangeField == null) {\n             iRangeField = null;\n         } else {\n-            iRangeField = new ScaledDurationField(rangeField, rangeName, divisor);\n+            iRangeField = new ScaledDurationField(\n+                rangeField, type.getRangeDurationType(), divisor);\n         }\n \n         iDivisor = divisor;\n--- a/JodaTime/src/java/org/joda/time/field/ScaledDurationField.java\n+++ b/JodaTime/src/java/org/joda/time/field/ScaledDurationField.java\n package org.joda.time.field;\n \n import org.joda.time.DurationField;\n+import org.joda.time.DurationFieldType;\n \n /**\n  * Scales a DurationField such that it's unit millis becomes larger in\n      * Constructor\n      * \n      * @param field  the field to wrap, like \"year()\".\n-     * @param name  short, descriptive name, like \"centuries\".\n+     * @param type  the type this field will actually use\n      * @param scalar  scalar, such as 100 years in a century\n      * @throws IllegalArgumentException if scalar is zero or one.\n      */\n-    public ScaledDurationField(DurationField field, String name, int scalar) {\n-        super(field, name);\n+    public ScaledDurationField(DurationField field, DurationFieldType type, int scalar) {\n+        super(field, type);\n         if (scalar == 0 || scalar == 1) {\n             throw new IllegalArgumentException(\"The scalar must not be 0 or 1\");\n         }\n--- a/JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java\n      * Names should be of standard format, such as 'monthOfYear' or 'hourOfDay'.\n      * The returned instance is cached.\n      * \n-     * @param name  the name to obtain\n+     * @param type  the type to obtain\n      * @return the instance\n      * @throws IllegalArgumentException if durationField is null\n      */\n--- a/JodaTime/src/java/org/joda/time/field/UnsupportedDurationField.java\n+++ b/JodaTime/src/java/org/joda/time/field/UnsupportedDurationField.java\n import java.io.Serializable;\n import java.util.HashMap;\n import org.joda.time.DurationField;\n+import org.joda.time.DurationFieldType;\n \n /**\n  * A placeholder implementation to use when a duration field is not supported.\n      * Names should be plural, such as 'years' or 'hours'.\n      * The returned instance is cached.\n      * \n-     * @param name  the name to obtain\n+     * @param type  the type to obtain\n      * @return the instance\n      */\n-    public static synchronized UnsupportedDurationField getInstance(String name) {\n+    public static synchronized UnsupportedDurationField getInstance(DurationFieldType type) {\n         UnsupportedDurationField field;\n         if (cCache == null) {\n             cCache = new HashMap(7);\n             field = null;\n         } else {\n-            field = (UnsupportedDurationField)cCache.get(name);\n+            field = (UnsupportedDurationField) cCache.get(type);\n         }\n         if (field == null) {\n-            field = new UnsupportedDurationField(name);\n-            cCache.put(name, field);\n+            field = new UnsupportedDurationField(type);\n+            cCache.put(type, field);\n         }\n         return field;\n     }\n \n     /** The name of the field */\n-    private final String iName;\n+    private final DurationFieldType iType;\n \n     /**\n      * Constructor.\n      * \n-     * @param name  the name to use\n-     */\n-    private UnsupportedDurationField(String name) {\n-        iName = name;\n+     * @param type  the type to use\n+     */\n+    private UnsupportedDurationField(DurationFieldType type) {\n+        iType = type;\n     }\n \n     //-----------------------------------------------------------------------\n     // Design note: Simple Accessors return a suitable value, but methods\n     // intended to perform calculations throw an UnsupportedOperationException.\n \n+    public final DurationFieldType getType() {\n+        return iType;\n+    }\n+\n     public String getName() {\n-        return iName;\n+        return iType.getName();\n     }\n \n     /**\n      * @return debug string\n      */\n     public String toString() {\n-        return \"UnsupportedDurationField\";\n+        return \"UnsupportedDurationField[\" + getName() + ']';\n     }\n \n     /**\n      * Ensure proper singleton serialization\n      */\n     private Object readResolve() {\n-        return getInstance(iName);\n+        return getInstance(iType);\n     }\n \n     private UnsupportedOperationException unsupported() {\n-        return new UnsupportedOperationException(iName + \" field is unsupported\");\n+        return new UnsupportedOperationException(iType + \" field is unsupported\");\n     }\n \n }\n--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java\n+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java\n                     switch (c) {\n                     case 'x':\n                         field = new RemainderDateTimeField\n-                            (chronoUTC.weekyear(), DateTimeFieldType.weekyearOfCentury(), \"centuries\", 100);\n+                            (chronoUTC.weekyear(), DateTimeFieldType.weekyearOfCentury(), 100);\n                         break;\n                     case 'y': default:\n                         field = new RemainderDateTimeField\n-                            (chronoUTC.year(), DateTimeFieldType.yearOfCentury(), \"centuries\", 100);\n+                            (chronoUTC.year(), DateTimeFieldType.yearOfCentury(), 100);\n                         break;\n                     case 'Y':\n                         field = new RemainderDateTimeField\n-                            (chronoUTC.yearOfEra(), DateTimeFieldType.yearOfCentury(), \"centuries\", 100);\n+                            (chronoUTC.yearOfEra(), DateTimeFieldType.yearOfCentury(), 100);\n                         break;\n                     }\n                     builder.appendDecimal(field, 2, 2);\n--- a/JodaTime/src/test/org/joda/time/chrono/gj/TestGJDateTimeField.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/gj/TestGJDateTimeField.java\n abstract class TestGJDateTimeField extends ImpreciseDateTimeField {\n     protected final TestGJChronology iChronology;\n \n-    public TestGJDateTimeField(DateTimeFieldType type, String duratioName,\n-                               long unitMillis, TestGJChronology chrono) {\n-        super(type, duratioName, unitMillis);\n+    public TestGJDateTimeField(DateTimeFieldType type, long unitMillis, TestGJChronology chrono) {\n+        super(type, unitMillis);\n         iChronology = chrono;\n     }\n \n--- a/JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfMonthField.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfMonthField.java\n  */\n class TestGJDayOfMonthField extends TestGJDateTimeField {\n     public TestGJDayOfMonthField(TestGJChronology chrono) {\n-        super(DateTimeFieldType.dayOfMonth(), \"days\", chrono.MILLIS_PER_DAY, chrono);\n+        super(DateTimeFieldType.dayOfMonth(), chrono.MILLIS_PER_DAY, chrono);\n     }\n \n     public int get(long millis) {\n--- a/JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfWeekField.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfWeekField.java\n  */\n class TestGJDayOfWeekField extends TestGJDateTimeField {\n     public TestGJDayOfWeekField(TestGJChronology chrono) {\n-        super(DateTimeFieldType.dayOfWeek(), \"days\", chrono.MILLIS_PER_DAY, chrono);\n+        super(DateTimeFieldType.dayOfWeek(), chrono.MILLIS_PER_DAY, chrono);\n     }\n \n     public int get(long millis) {\n--- a/JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfYearField.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfYearField.java\n  */\n class TestGJDayOfYearField extends TestGJDateTimeField {\n     public TestGJDayOfYearField(TestGJChronology chrono) {\n-        super(DateTimeFieldType.dayOfYear(), \"days\", chrono.MILLIS_PER_DAY, chrono);\n+        super(DateTimeFieldType.dayOfYear(), chrono.MILLIS_PER_DAY, chrono);\n     }\n \n     public int get(long millis) {\n--- a/JodaTime/src/test/org/joda/time/chrono/gj/TestGJMonthOfYearField.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/gj/TestGJMonthOfYearField.java\n  */\n class TestGJMonthOfYearField extends TestGJDateTimeField {\n     public TestGJMonthOfYearField(TestGJChronology chrono) {\n-        super(DateTimeFieldType.monthOfYear(), \"months\", chrono.millisPerMonth(), chrono);\n+        super(DateTimeFieldType.monthOfYear(), chrono.millisPerMonth(), chrono);\n     }\n \n     public int get(long millis) {\n--- a/JodaTime/src/test/org/joda/time/chrono/gj/TestGJWeekOfWeekyearField.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/gj/TestGJWeekOfWeekyearField.java\n  */\n class TestGJWeekOfWeekyearField extends TestGJDateTimeField {\n     public TestGJWeekOfWeekyearField(TestGJChronology chrono) {\n-        super(DateTimeFieldType.weekOfWeekyear(), \"weeks\",\n+        super(DateTimeFieldType.weekOfWeekyear(),\n               (long)(chrono.MILLIS_PER_DAY * 7), chrono);\n     }\n \n--- a/JodaTime/src/test/org/joda/time/chrono/gj/TestGJWeekyearField.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/gj/TestGJWeekyearField.java\n  */\n class TestGJWeekyearField extends TestGJDateTimeField {\n     public TestGJWeekyearField(TestGJChronology chrono) {\n-        super(DateTimeFieldType.weekyear(), \"weekyears\", chrono.millisPerYear(), chrono);\n+        super(DateTimeFieldType.weekyear(), chrono.millisPerYear(), chrono);\n     }\n \n     public int get(long millis) {\n--- a/JodaTime/src/test/org/joda/time/chrono/gj/TestGJYearField.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/gj/TestGJYearField.java\n  */\n class TestGJYearField extends TestGJDateTimeField {\n     public TestGJYearField(TestGJChronology chrono) {\n-        super(DateTimeFieldType.year(), \"years\", chrono.millisPerYear(), chrono);\n+        super(DateTimeFieldType.year(), chrono.millisPerYear(), chrono);\n     }\n \n     public int get(long millis) {", "timestamp": 1094165238, "metainfo": ""}