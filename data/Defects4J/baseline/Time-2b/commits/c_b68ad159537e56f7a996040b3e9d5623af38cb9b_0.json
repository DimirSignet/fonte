{"sha": "b68ad159537e56f7a996040b3e9d5623af38cb9b", "log": "Convert to Maven 2  ", "commit": "\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/test/java/org/joda/time/contrib/hibernate/Event.java\n+/*\n+ *  Copyright 2001-2008 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.hibernate;\n+\n+import java.io.Serializable;\n+\n+import org.joda.time.DateTime;\n+import org.joda.time.LocalDate;\n+import org.joda.time.LocalDateTime;\n+import org.joda.time.LocalTime;\n+\n+/**\n+ * PO to be stored using hibernate\n+ */\n+public class Event implements Serializable\n+{\n+    private int id;\n+    private DateTime dateTime;\n+\tprivate LocalDate localDate;\n+\tprivate LocalTime localTime;\n+\tprivate LocalTime localTime2;\n+\tprivate LocalTime localTime3;\n+\tprivate LocalDateTime localDateTime;\n+\n+\tpublic Event()\n+    {\n+    }\n+\n+    public int getId()\n+    {\n+        return id;\n+    }\n+\n+    public void setId(int id)\n+    {\n+        this.id = id;\n+    }\n+\n+    public DateTime getDateTime()\n+    {\n+        return dateTime;\n+    }\n+\n+    public void setDateTime(DateTime dateTime)\n+    {\n+        this.dateTime = dateTime;\n+    }\n+\n+\tpublic LocalDate getLocalDate()\n+\t{\n+\t\treturn localDate;\n+\t}\n+\n+\tpublic void setLocalDate(LocalDate localDate)\n+\t{\n+\t\tthis.localDate = localDate;\n+\t}\n+\n+\tpublic LocalTime getLocalTime()\n+\t{\n+\t\treturn localTime;\n+\t}\n+\n+\tpublic void setLocalTime(LocalTime localTime)\n+\t{\n+\t\tthis.localTime = localTime;\n+\t}\n+\n+\tpublic LocalTime getLocalTime2()\n+\t{\n+\t\treturn localTime2;\n+\t}\n+\n+\tpublic void setLocalTime2(LocalTime localTime2)\n+\t{\n+\t\tthis.localTime2 = localTime2;\n+\t}\n+\n+\tpublic LocalTime getLocalTime3()\n+\t{\n+\t\treturn localTime3;\n+\t}\n+\n+\tpublic void setLocalTime3(LocalTime localTime3)\n+\t{\n+\t\tthis.localTime3 = localTime3;\n+\t}\n+\n+    public LocalDateTime getLocalDateTime()\n+    {\n+        return localDateTime;\n+    }\n+\n+    public void setLocalDateTime(LocalDateTime localDateTime)\n+    {\n+        this.localDateTime = localDateTime;\n+    }\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/test/java/org/joda/time/contrib/hibernate/EventTZ.java\n+/*\n+ *  Copyright 2001-2007 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.hibernate;\n+\n+import java.io.Serializable;\n+\n+import org.joda.time.DateTime;\n+\n+/**\n+ * PO to be stored using hibernate\n+ */\n+public class EventTZ implements Serializable\n+{\n+    private int id;\n+    private DateTime dateTime;\n+\n+    public EventTZ()\n+    {\n+    }\n+\n+    public int getId()\n+    {\n+        return id;\n+    }\n+\n+    public void setId(int id)\n+    {\n+        this.id = id;\n+    }\n+\n+    public DateTime getDateTime()\n+    {\n+        return dateTime;\n+    }\n+\n+    public void setDateTime(DateTime dateTime)\n+    {\n+        this.dateTime = dateTime;\n+    }\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/test/java/org/joda/time/contrib/hibernate/HibernateTestCase.java\n+/*\n+ *  Copyright 2001-2007 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.hibernate;\n+\n+import junit.framework.TestCase;\n+\n+import org.hibernate.SessionFactory;\n+import org.hibernate.cfg.Configuration;\n+import org.hibernate.dialect.HSQLDialect;\n+import org.hibernate.tool.hbm2ddl.SchemaUpdate;\n+\n+import java.sql.Connection;\n+import java.sql.Statement;\n+\n+public abstract class HibernateTestCase extends TestCase\n+{\n+\tprivate SessionFactory factory;\n+    private Configuration cfg;\n+\n+    protected SessionFactory getSessionFactory()\n+\t{\n+\t\tif (this.factory == null)\n+\t\t{\n+                    cfg = new Configuration();\n+\n+                    setupConfiguration(cfg);\n+\n+\t\t\tcfg.setProperty(\"hibernate.connection.driver_class\", \"org.hsqldb.jdbcDriver\");\n+\t\t\tcfg.setProperty(\"hibernate.connection.url\", \"jdbc:hsqldb:mem:hbmtest\" + getClass().getName());\n+\t\t\tcfg.setProperty(\"hibernate.dialect\", HSQLDialect.class.getName());\n+\n+\t\t\tcfg.setProperty(\"hibernate.show_sql\", \"true\");\n+\t\t\tSessionFactory factory = cfg.buildSessionFactory();\n+\n+\t\t\tSchemaUpdate update = new SchemaUpdate(cfg);\n+\t\t\tupdate.execute(true, true);\n+\n+\t\t\tthis.factory = factory;\n+\t\t}\n+\t\treturn factory;\n+\t}\n+\n+\tprotected void tearDown() throws Exception\n+\t{\n+            final String[] dropSQLs = cfg.generateDropSchemaScript(new HSQLDialect());\n+            final Connection connection = getSessionFactory().openSession().connection();\n+            try {\n+                Statement stmt = connection.createStatement();\n+                for (int i = 0; i < dropSQLs.length; i++) {\n+                    //System.out.println(\"dropSQLs[i] = \" + dropSQLs[i]);\n+                    stmt.executeUpdate(dropSQLs[i]);\n+                }\n+            } finally {\n+                connection.close();\n+            }\n+\n+            if (this.factory != null)\n+\t\t{\n+\t\t\tthis.factory.close();\n+\t\t\tthis.factory = null;\n+\t\t}\n+\t}\n+\n+\tprotected abstract void setupConfiguration(Configuration cfg);\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/test/java/org/joda/time/contrib/hibernate/Plan.java\n+/*\n+ *  Copyright 2001-2007 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.hibernate;\n+\n+import org.joda.time.Interval;\n+\n+public class Plan\n+{\n+    private int id;\n+    private Interval period;\n+\n+    public Plan()\n+    {\n+    }\n+    \n+    public Plan(int id)\n+    {\n+        setId(id);\n+    }\n+\n+    private void setId(int id)\n+    {\n+        this.id = id;\n+    }\n+    \n+    public int getId()\n+    {\n+        return id;\n+    }\n+    \n+    public Interval getPeriod()\n+    {\n+        return period;\n+    }\n+    \n+    public void setPeriod(Interval period)\n+    {\n+        this.period = period;\n+    }\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/test/java/org/joda/time/contrib/hibernate/Schedule.java\n+/*\n+ *  Copyright 2001-2007 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.hibernate;\n+\n+import java.io.Serializable;\n+\n+import org.joda.time.TimeOfDay;\n+import org.joda.time.YearMonthDay;\n+\n+/**\n+ * PO to be stored using hibernate\n+ */\n+public class Schedule implements Serializable\n+{\n+    private int id;\n+    private YearMonthDay startDate;\n+\tprivate TimeOfDay nextTime;\n+\tprivate TimeOfDay nextTimeMillis;\n+\n+\tpublic Schedule()\n+    {\n+    }\n+\n+    public int getId()\n+    {\n+        return id;\n+    }\n+\n+    public void setId(int id)\n+    {\n+        this.id = id;\n+    }\n+\n+\tpublic YearMonthDay getStartDate()\n+\t{\n+\t\treturn startDate;\n+\t}\n+\n+\tpublic void setStartDate(YearMonthDay startDate)\n+\t{\n+\t\tthis.startDate = startDate;\n+\t}\n+\n+\tpublic TimeOfDay getNextTime()\n+\t{\n+\t\treturn nextTime;\n+\t}\n+\n+\tpublic void setNextTime(TimeOfDay nextTime)\n+\t{\n+\t\tthis.nextTime = nextTime;\n+\t}\n+\n+\tpublic TimeOfDay getNextTimeMillis()\n+\t{\n+\t\treturn nextTimeMillis;\n+\t}\n+\n+\tpublic void setNextTimeMillis(TimeOfDay nextTimeMillis)\n+\t{\n+\t\tthis.nextTimeMillis = nextTimeMillis;\n+\t}\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/test/java/org/joda/time/contrib/hibernate/TestPersistentDateTime.java\n+/*\n+ *  Copyright 2001-2007 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.hibernate;\n+\n+import java.io.File;\n+import java.sql.SQLException;\n+\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.cfg.Configuration;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+\n+public class TestPersistentDateTime extends HibernateTestCase\n+{\n+    private DateTime[] writeReadTimes = new DateTime[]\n+    {\n+        new DateTime(2004, 2, 25, 17, 3, 45, 760),\n+        new DateTime(1980, 3, 11,  2, 3, 45,   0, DateTimeZone.forOffsetHours(2))\n+    };\n+\n+    public void testSimpleStore() throws SQLException\n+    {\n+        SessionFactory factory = getSessionFactory();\n+\n+        Session session = factory.openSession();\n+\n+        for (int i = 0; i<writeReadTimes.length; i++)\n+        {\n+            DateTime writeReadTime = writeReadTimes[i];\n+\n+            Event event = new Event();\n+            event.setId(i);\n+            event.setDateTime(writeReadTime);\n+\n+            session.save(event);\n+        }\n+\n+        session.flush();\n+        session.connection().commit();\n+        session.close();\n+\n+        for (int i = 0; i<writeReadTimes.length; i++)\n+        {\n+            DateTime writeReadTime = writeReadTimes[i];\n+\n+            session = factory.openSession();\n+            Event eventReread = (Event) session.get(Event.class, new Integer(i));\n+\n+            assertNotNull(\"get failed - event#'\" + i + \"'not found\", eventReread);\n+            assertNotNull(\"get failed - returned null\", eventReread.getDateTime());\n+\n+            // we loose the timezone, so we have to normalize both to offset=0\n+            assertEquals(\"get failed - returned different time\",\n+                writeReadTime.toDateTime(DateTimeZone.forOffsetHours(0)),\n+                eventReread.getDateTime().toDateTime(DateTimeZone.forOffsetHours(0)));\n+\n+            session.close();\n+        }\n+    }\n+\n+    public void testStoreWithTimezone() throws SQLException\n+    {\n+        SessionFactory factory = getSessionFactory();\n+\n+        Session session = factory.openSession();\n+\n+        for (int i = 0; i<writeReadTimes.length; i++)\n+        {\n+            DateTime writeReadTime = writeReadTimes[i];\n+\n+            EventTZ event = new EventTZ();\n+            event.setId(i);\n+            event.setDateTime(writeReadTime);\n+\n+            session.save(event);\n+        }\n+\n+        session.flush();\n+        session.connection().commit();\n+        session.close();\n+\n+        for (int i = 0; i<writeReadTimes.length; i++)\n+        {\n+            DateTime writeReadTime = writeReadTimes[i];\n+\n+            session = factory.openSession();\n+            EventTZ eventReread = (EventTZ) session.get(EventTZ.class, new Integer(i));\n+\n+            assertNotNull(\"get failed - event#'\" + i + \"'not found\", eventReread);\n+            assertNotNull(\"get failed - returned null\", eventReread.getDateTime());\n+\n+            assertEquals(\"get failed - returned different time\",\n+                writeReadTime, eventReread.getDateTime());\n+        }\n+\t\t\n+\t\tsession.close();\n+    }\n+\n+\tprotected void setupConfiguration(Configuration cfg)\n+\t{\n+\t\tcfg.addFile(new File(\"src/test/org/joda/time/contrib/hibernate/event.hbm.xml\"));\n+\t\tcfg.addFile(new File(\"src/test/org/joda/time/contrib/hibernate/eventTZ.hbm.xml\"));\n+\t}\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/test/java/org/joda/time/contrib/hibernate/TestPersistentDuration.java\n+package org.joda.time.contrib.hibernate;\n+\n+import junit.framework.Assert;\n+import org.hibernate.Session;\n+import org.hibernate.cfg.Configuration;\n+import org.joda.time.DateTime;\n+import org.joda.time.Duration;\n+import org.joda.time.Period;\n+import org.joda.time.contrib.hibernate.testmodel.SomethingThatLasts;\n+\n+import java.io.IOException;\n+import java.io.File;\n+import java.sql.SQLException;\n+\n+/**\n+ * @author gjoseph\n+ * @author $Author: $ (last edit)\n+ * @version $Revision: $\n+ */\n+public class TestPersistentDuration extends HibernateTestCase {\n+    protected void setupConfiguration(Configuration cfg) {\n+        cfg.addFile(new File(\"src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatLasts.hbm.xml\"));\n+    }\n+\n+    private Duration[] durations = new Duration[]{\n+            Duration.ZERO, new Duration(30), Period.seconds(30).toDurationTo(new DateTime()), Period.months(3).toDurationFrom(new DateTime())\n+    };\n+\n+    public void testSimpleStore() throws SQLException, IOException {\n+        Session session = getSessionFactory().openSession();\n+\n+        for (int i = 0; i < durations.length; i++) {\n+            SomethingThatLasts thing = new SomethingThatLasts();\n+            thing.setId(i);\n+            thing.setName(\"test_\" + i);\n+            thing.setTheDuration(durations[i]);\n+            session.save(thing);\n+        }\n+\n+        session.flush();\n+        session.connection().commit();\n+        session.close();\n+\n+        for (int i = 0; i < durations.length; i++) {\n+            session = getSessionFactory().openSession();\n+            SomethingThatLasts lastingThing = (SomethingThatLasts) session.get(SomethingThatLasts.class, new Long(i));\n+\n+            Assert.assertNotNull(lastingThing);\n+            Assert.assertEquals(i, lastingThing.getId());\n+            Assert.assertEquals(\"test_\" + i, lastingThing.getName());\n+            Assert.assertEquals(durations[i], lastingThing.getTheDuration());\n+\n+            session.close();\n+        }\n+\n+        // printSqlQueryResults(\"SELECT * FROM lasting\");\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/test/java/org/joda/time/contrib/hibernate/TestPersistentInstant.java\n+/*\n+ *  Copyright 2001-2009 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.hibernate;\n+\n+import java.io.File;\n+import java.sql.SQLException;\n+\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.cfg.Configuration;\n+import org.joda.time.Instant;\n+\n+public class TestPersistentInstant extends HibernateTestCase\n+{\n+    private Instant[] writeReadTimes = new Instant[]\n+    {\n+        new Instant(0),\n+\t\tnew Instant(1000),\n+\t\tnew Instant(1000000)\n+    };\n+\n+    public void testSimpleStore() throws SQLException\n+    {\n+        SessionFactory factory = getSessionFactory();\n+\n+        Session session = factory.openSession();\n+\n+        for (int i = 0; i<writeReadTimes.length; i++)\n+        {\n+            Instant writeReadTime = writeReadTimes[i];\n+\n+            ThingWithInstant thing = new ThingWithInstant();\n+            thing.setId(i);\n+            thing.setInstant(writeReadTime);\n+\n+            session.save(thing);\n+        }\n+\n+        session.flush();\n+        session.connection().commit();\n+        session.close();\n+\n+        for (int i = 0; i<writeReadTimes.length; i++)\n+        {\n+            Instant writeReadTime = writeReadTimes[i];\n+\n+            session = factory.openSession();\n+            ThingWithInstant thingReread = (ThingWithInstant)session.get(ThingWithInstant.class, new Integer(i));\n+\n+            assertNotNull(\"get failed - thing#'\" + i + \"'not found\", thingReread);\n+            assertNotNull(\"get failed - returned null\", thingReread.getInstant());\n+\n+\t\t\tInstant reReadTime = thingReread.getInstant();\n+\t\t\tif (writeReadTime.getMillis() != reReadTime.getMillis())\n+\t\t\t{\n+\t\t\t\tfail(\"get failed - returned different date. expected \" + writeReadTime + \" was \" + thingReread.getInstant());\n+\t\t\t}\n+\t\t}\n+\n+\t\tsession.close();\n+    }\n+\n+\tprotected void setupConfiguration(Configuration cfg)\n+\t{\n+\t\tcfg.addFile(new File(\"src/test/org/joda/time/contrib/hibernate/thingWithInstant.hbm.xml\"));\n+\t}\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/test/java/org/joda/time/contrib/hibernate/TestPersistentInstantAsBigInt.java\n+/*\n+ *  Copyright 2001-2009 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.hibernate;\n+\n+import java.io.File;\n+import java.sql.SQLException;\n+\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.cfg.Configuration;\n+import org.joda.time.Instant;\n+\n+public class TestPersistentInstantAsBigInt extends HibernateTestCase\n+{\n+    private Instant[] writeReadTimes = new Instant[]\n+    {\n+        new Instant(0),\n+\t\tnew Instant(1000),\n+\t\tnew Instant(1000000)\n+    };\n+\n+    public void testSimpleStore() throws SQLException\n+    {\n+        SessionFactory factory = getSessionFactory();\n+\n+        Session session = factory.openSession();\n+\n+        for (int i = 0; i<writeReadTimes.length; i++)\n+        {\n+            Instant writeReadTime = writeReadTimes[i];\n+\n+            ThingWithInstant thing = new ThingWithInstant();\n+            thing.setId(i);\n+            thing.setInstant(writeReadTime);\n+\n+            session.save(thing);\n+        }\n+\n+        session.flush();\n+        session.connection().commit();\n+        session.close();\n+\n+        for (int i = 0; i<writeReadTimes.length; i++)\n+        {\n+            Instant writeReadTime = writeReadTimes[i];\n+\n+            session = factory.openSession();\n+            ThingWithInstant thingReread = (ThingWithInstant)session.get(ThingWithInstant.class, new Integer(i));\n+\n+            assertNotNull(\"get failed - thing#'\" + i + \"'not found\", thingReread);\n+            assertNotNull(\"get failed - returned null\", thingReread.getInstant());\n+\n+\t\t\tInstant reReadTime = thingReread.getInstant();\n+\t\t\tif (writeReadTime.getMillis() != reReadTime.getMillis())\n+\t\t\t{\n+\t\t\t\tfail(\"get failed - returned different date. expected \" + writeReadTime + \" was \" + thingReread.getInstant());\n+\t\t\t}\n+\t\t}\n+\n+\t\tsession.close();\n+    }\n+\n+\tprotected void setupConfiguration(Configuration cfg)\n+\t{\n+\t\tcfg.addFile(new File(\"src/test/org/joda/time/contrib/hibernate/thingWithInstantAsBigInt.hbm.xml\"));\n+\t}\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/test/java/org/joda/time/contrib/hibernate/TestPersistentInterval.java\n+/*\n+ *  Copyright 2001-2007 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.hibernate;\n+\n+import java.io.File;\n+import java.sql.SQLException;\n+import java.util.List;\n+\n+import org.hibernate.Query;\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.Transaction;\n+import org.hibernate.cfg.Configuration;\n+import org.joda.time.DateTime;\n+import org.joda.time.Interval;\n+\n+public class TestPersistentInterval extends HibernateTestCase\n+{\n+    private SessionFactory factory;\n+    private Session session;\n+    private DateTime beginDateTime;\n+    private DateTime endDateTime;\n+    private Transaction transaction;\n+    private String intervalQuery;\n+    \n+    protected void setUp() throws SQLException\n+    {\n+        factory = getSessionFactory();\n+        store();\n+        intervalQuery = \"from Plan where :aDate between period.start and period.end\";\n+    }\n+    \n+    private void store() throws SQLException\n+    {\n+        openAndBegin();\n+        \n+        Plan plan = new Plan(1);\n+        beginDateTime = new DateTime(1980, 3, 11, 2, 3, 45, 0);\n+        endDateTime = new DateTime(2004, 2, 25, 17, 3, 45, 760);\n+        Interval period = new Interval(beginDateTime, endDateTime);\n+        \n+        plan.setPeriod(period);\n+        \n+        session.save(plan);\n+        session.flush();\n+        \n+        commitAndClose();\n+    }\n+\n+    private void openAndBegin()\n+    {\n+        session = factory.openSession();\n+        transaction = session.beginTransaction();\n+    }\n+    \n+    private void commitAndClose()\n+    {\n+        transaction.commit();\n+        session.close();\n+    }\n+    \n+    public void testQueryById() throws SQLException\n+    {\n+        openAndBegin();\n+        Interval persistedPeriod = queryPlan().getPeriod();\n+        commitAndClose();\n+        assertPlanPeriod(persistedPeriod);\n+    }\n+\n+    private void assertPlanPeriod(Interval period)\n+    {\n+        assertEquals(beginDateTime, period.getStart());\n+        assertEquals(endDateTime, period.getEnd());\n+    }\n+\n+    private Plan queryPlan()\n+    {\n+        return (Plan) session.get(Plan.class, new Integer(1));\n+    }\n+    \n+    public void testQueryInsideInterval() throws SQLException\n+    {\n+        openAndBegin();\n+        DateTime includedDateTime = new DateTime(2004, 1, 10, 0, 0, 0, 0);\n+        Query query = session.createQuery(intervalQuery)\n+                             .setParameter(\"aDate\", includedDateTime.toDate());\n+        List queriedPlans = query.list();\n+        commitAndClose();\n+        assertEquals(1, queriedPlans.size());\n+        assertPlanPeriod(((Plan) queriedPlans.get(0)).getPeriod());\n+    }\n+    \n+    public void testQueryOutsideInterval()\n+    {\n+        openAndBegin();\n+        DateTime excludedDateTime = new DateTime(2007, 1, 10, 0, 0, 0, 0);\n+        Query query = session.createQuery(intervalQuery)\n+                             .setParameter(\"aDate\", excludedDateTime.toDate());\n+        List queriedPlans = query.list();\n+        commitAndClose();\n+        assertEquals(0, queriedPlans.size());\n+    }\n+\n+    protected void setupConfiguration(Configuration cfg)\n+    {\n+        cfg.addFile(new File(\"src/test/org/joda/time/contrib/hibernate/plan.hbm.xml\"));\n+    }\n+    \n+    protected void tearDown() throws Exception\n+    {\n+        remove();\n+        super.tearDown();\n+    }\n+\n+    private void remove()\n+    {\n+        openAndBegin();\n+        session.delete(queryPlan());\n+        commitAndClose();\n+    }\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/test/java/org/joda/time/contrib/hibernate/TestPersistentIntervalNull.java\n+/*\n+ *  Copyright 2001-2008 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.hibernate;\n+\n+import java.io.File;\n+import java.sql.SQLException;\n+\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.Transaction;\n+import org.hibernate.cfg.Configuration;\n+import org.joda.time.Interval;\n+\n+public class TestPersistentIntervalNull extends HibernateTestCase\n+{\n+    private SessionFactory factory;\n+    private Session session;\n+    private Transaction transaction;\n+    \n+    protected void setUp() throws SQLException\n+    {\n+        factory = getSessionFactory();\n+        store();\n+    }\n+    \n+    private void store() throws SQLException\n+    {\n+        openAndBegin();\n+        \n+        Plan plan = new Plan(1);\n+        plan.setPeriod(null);\n+        \n+        session.save(plan);\n+        session.flush();\n+        \n+        commitAndClose();\n+    }\n+\n+    private void openAndBegin()\n+    {\n+        session = factory.openSession();\n+        transaction = session.beginTransaction();\n+    }\n+    \n+    private void commitAndClose()\n+    {\n+        transaction.commit();\n+        session.close();\n+    }\n+    \n+    public void testQueryById() throws SQLException\n+    {\n+        openAndBegin();\n+        Interval persistedPeriod = queryPlan().getPeriod();\n+        commitAndClose();\n+        assertPlanPeriod(persistedPeriod);\n+    }\n+\n+    private void assertPlanPeriod(Interval period)\n+    {\n+        assertNull(period);\n+    }\n+\n+    private Plan queryPlan()\n+    {\n+        return (Plan) session.get(Plan.class, new Integer(1));\n+    }\n+    \n+    protected void setupConfiguration(Configuration cfg)\n+    {\n+        cfg.addFile(new File(\"src/test/org/joda/time/contrib/hibernate/plan.hbm.xml\"));\n+    }\n+    \n+    protected void tearDown() throws Exception\n+    {\n+        remove();\n+        super.tearDown();\n+    }\n+\n+    private void remove()\n+    {\n+        openAndBegin();\n+        session.delete(queryPlan());\n+        commitAndClose();\n+    }\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/test/java/org/joda/time/contrib/hibernate/TestPersistentLocalDate.java\n+/*\n+ *  Copyright 2001-2007 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.hibernate;\n+\n+import java.io.File;\n+import java.sql.SQLException;\n+\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.cfg.Configuration;\n+import org.joda.time.LocalDate;\n+\n+public class TestPersistentLocalDate extends HibernateTestCase\n+{\n+    private LocalDate[] writeReadTimes = new LocalDate[]\n+    {\n+        new LocalDate(2004, 2, 25),\n+        new LocalDate(1980, 3, 11)\n+    };\n+\n+    public void testSimpleStore() throws SQLException\n+\t{\n+        SessionFactory factory = getSessionFactory();\n+\n+        Session session = factory.openSession();\n+\n+        for (int i = 0; i<writeReadTimes.length; i++)\n+        {\n+            LocalDate writeReadTime = writeReadTimes[i];\n+\n+            Event event = new Event();\n+            event.setId(i);\n+            event.setLocalDate(writeReadTime);\n+\n+            session.save(event);\n+        }\n+\n+        session.flush();\n+        session.connection().commit();\n+        session.close();\n+\n+        for (int i = 0; i<writeReadTimes.length; i++)\n+        {\n+            LocalDate writeReadTime = writeReadTimes[i];\n+\n+            session = factory.openSession();\n+            Event eventReread = (Event) session.get(Event.class, new Integer(i));\n+\n+            assertNotNull(\"get failed - event#'\" + i + \"'not found\", eventReread);\n+            assertNotNull(\"get failed - returned null\", eventReread.getLocalDate());\n+\n+            // we loose the timezone, so we have to normalize both to offset=0\n+            assertEquals(\"get failed - returned different time\",\n+                writeReadTime,\n+                eventReread.getLocalDate());\n+\n+            session.close();\n+        }\n+    }\n+\n+\tprotected void setupConfiguration(Configuration cfg)\n+\t{\n+\t\tcfg.addFile(new File(\"src/test/org/joda/time/contrib/hibernate/event.hbm.xml\"));\n+\t\tcfg.addFile(new File(\"src/test/org/joda/time/contrib/hibernate/eventTZ.hbm.xml\"));\n+\t}\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/test/java/org/joda/time/contrib/hibernate/TestPersistentLocalDateTime.java\n+/*\n+ *  Copyright 2001-2008 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.hibernate;\n+\n+import java.io.File;\n+import java.sql.SQLException;\n+\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.cfg.Configuration;\n+import org.joda.time.LocalDateTime;\n+\n+public class TestPersistentLocalDateTime extends HibernateTestCase\n+{\n+    private LocalDateTime[] writeReadTimes = new LocalDateTime[]\n+    {\n+        new LocalDateTime(2004, 2, 25, 12, 11, 10),\n+        new LocalDateTime(1980, 3, 11, 13, 12, 11)\n+    };\n+\n+    public void testSimpleStore() throws SQLException\n+\t{\n+        SessionFactory factory = getSessionFactory();\n+\n+        Session session = factory.openSession();\n+\n+        for (int i = 0; i<writeReadTimes.length; i++)\n+        {\n+            LocalDateTime writeReadTime = writeReadTimes[i];\n+\n+            Event event = new Event();\n+            event.setId(i);\n+            event.setLocalDateTime(writeReadTime);\n+\n+            session.save(event);\n+        }\n+\n+        session.flush();\n+        session.connection().commit();\n+        session.close();\n+\n+        for (int i = 0; i<writeReadTimes.length; i++)\n+        {\n+            LocalDateTime writeReadTime = writeReadTimes[i];\n+\n+            session = factory.openSession();\n+            Event eventReread = (Event) session.get(Event.class, new Integer(i));\n+\n+            assertNotNull(\"get failed - event#'\" + i + \"'not found\", eventReread);\n+            assertNotNull(\"get failed - returned null\", eventReread.getLocalDateTime());\n+\n+            // we loose the timezone, so we have to normalize both to offset=0\n+            assertEquals(\"get failed - returned different time\",\n+                writeReadTime,\n+                eventReread.getLocalDateTime());\n+\n+            session.close();\n+        }\n+    }\n+\n+\tprotected void setupConfiguration(Configuration cfg)\n+\t{\n+\t\tcfg.addFile(new File(\"src/test/org/joda/time/contrib/hibernate/event.hbm.xml\"));\n+\t\tcfg.addFile(new File(\"src/test/org/joda/time/contrib/hibernate/eventTZ.hbm.xml\"));\n+\t}\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/test/java/org/joda/time/contrib/hibernate/TestPersistentLocalTime.java\n+/*\n+ *  Copyright 2001-2007 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.hibernate;\n+\n+import java.io.File;\n+import java.sql.SQLException;\n+\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.cfg.Configuration;\n+import org.joda.time.LocalTime;\n+\n+public class TestPersistentLocalTime extends HibernateTestCase\n+{\n+    private LocalTime[] writeReadTimes = new LocalTime[]\n+    {\n+        new LocalTime(14, 2, 25),\n+        new LocalTime(23, 59, 59, 999),\n+\t\tnew LocalTime(0, 0, 0)\n+    };\n+\n+    public void testSimpleStore() throws SQLException\n+\t{\n+        SessionFactory factory = getSessionFactory();\n+\n+        Session session = factory.openSession();\n+\n+        for (int i = 0; i<writeReadTimes.length; i++)\n+        {\n+            LocalTime writeReadTime = writeReadTimes[i];\n+\n+            Event event = new Event();\n+            event.setId(i);\n+            event.setLocalTime(writeReadTime);\n+\t\t\tevent.setLocalTime2(writeReadTime);\n+\t\t\tevent.setLocalTime3(writeReadTime);\n+\n+            session.save(event);\n+        }\n+\n+        session.flush();\n+        session.connection().commit();\n+        session.close();\n+\n+        for (int i = 0; i<writeReadTimes.length; i++)\n+        {\n+            LocalTime writeReadTime = writeReadTimes[i];\n+\n+            session = factory.openSession();\n+            Event eventReread = (Event) session.get(Event.class, new Integer(i));\n+\n+            assertNotNull(\"get failed - event#'\" + i + \"'not found\", eventReread);\n+            assertNotNull(\"get failed - returned null\", eventReread.getLocalTime());\n+\t\t\tassertNotNull(\"get failed - returned null\", eventReread.getLocalTime2());\n+\t\t\tassertNotNull(\"get failed - returned null\", eventReread.getLocalTime3());\n+\n+            // we might loose the millis, depends on database\n+            assertEquals(\"get failed - returned different time (TIME)\",\n+                writeReadTime.getMillisOfDay()/1000,\n+                eventReread.getLocalTime().getMillisOfDay()/1000);\n+\n+\t\t\tassertEquals(\"get failed - returned different time (INT)\",\n+\t\t\t\twriteReadTime.getMillisOfDay(),\n+\t\t\t\teventReread.getLocalTime2().getMillisOfDay());\n+\n+\t\t\tassertEquals(\"get failed - returned different time (STRING)\",\n+\t\t\t\twriteReadTime.getMillisOfDay(),\n+\t\t\t\teventReread.getLocalTime3().getMillisOfDay());\n+\n+\t\t\tsession.close();\n+        }\n+    }\n+\n+\tprotected void setupConfiguration(Configuration cfg)\n+\t{\n+\t\tcfg.addFile(new File(\"src/test/org/joda/time/contrib/hibernate/event.hbm.xml\"));\n+\t\tcfg.addFile(new File(\"src/test/org/joda/time/contrib/hibernate/eventTZ.hbm.xml\"));\n+\t}\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/test/java/org/joda/time/contrib/hibernate/TestPersistentPeriod.java\n+package org.joda.time.contrib.hibernate;\n+\n+import junit.framework.Assert;\n+import org.hibernate.Session;\n+import org.hibernate.cfg.Configuration;\n+import org.joda.time.Period;\n+import org.joda.time.contrib.hibernate.testmodel.SomethingThatHappens;\n+\n+import java.io.IOException;\n+import java.io.File;\n+import java.sql.SQLException;\n+\n+/**\n+ * @author gjoseph\n+ * @author $Author: $ (last edit)\n+ * @version $Revision: $\n+ */\n+public class TestPersistentPeriod extends HibernateTestCase {\n+    protected void setupConfiguration(Configuration cfg) {\n+        cfg.addFile(new File(\"src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatHappens.hbm.xml\"));\n+    }\n+\n+    private Period[] periods = new Period[]{\n+            Period.days(2), Period.seconds(30), Period.months(3),\n+            new Period(30), new Period(4, 35, 40, 141),\n+            new Period(28, 10, 2, 2, 4, 35, 40, 141), new Period(28, 10, 0, 16, 4, 35, 40, 141),\n+            // new Period(new DateTime()),\n+            // new Period(new YearMonthDay()),\n+            // new Period(new YearMonthDay(2005, 12, 25)),\n+            // new Period(new YearMonthDay(2005, 0, 25)), new Period(new YearMonthDay(2005, 13, 25)),\n+            // new Period(new DateTime(CopticChronology.getInstance())            )\n+    };\n+\n+    public void testSimpleStore() throws SQLException, IOException {\n+        Session session = getSessionFactory().openSession();\n+\n+        for (int i = 0; i < periods.length; i++) {\n+            SomethingThatHappens thing = new SomethingThatHappens();\n+            thing.setId(i);\n+            thing.setName(\"test_\" + i);\n+            thing.setThePeriod(periods[i]);\n+            session.save(thing);\n+        }\n+\n+        session.flush();\n+        session.connection().commit();\n+        session.close();\n+\n+        for (int i = 0; i < periods.length; i++) {\n+            session = getSessionFactory().openSession();\n+            SomethingThatHappens happeningThing = (SomethingThatHappens) session.get(SomethingThatHappens.class, new Long(i));\n+\n+            Assert.assertNotNull(happeningThing);\n+            Assert.assertEquals(i, happeningThing.getId());\n+            Assert.assertEquals(\"test_\" + i, happeningThing.getName());\n+            Assert.assertEquals(periods[i], happeningThing.getThePeriod());\n+\n+            session.close();\n+        }\n+\n+        // printSqlQueryResults(\"SELECT * FROM happening\");\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/test/java/org/joda/time/contrib/hibernate/TestPersistentTimeOfDay.java\n+/*\n+ *  Copyright 2001-2007 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.hibernate;\n+\n+import java.io.File;\n+import java.sql.SQLException;\n+\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.cfg.Configuration;\n+import org.joda.time.TimeOfDay;\n+\n+public class TestPersistentTimeOfDay extends HibernateTestCase\n+{\n+    private TimeOfDay[] writeReadTimes = new TimeOfDay[]\n+    {\n+        new TimeOfDay(12, 10, 31),\n+        new TimeOfDay(23,  7, 43, 120)\n+    };\n+\n+    public void testSimpleStore() throws SQLException\n+    {\n+        SessionFactory factory = getSessionFactory();\n+\n+        Session session = factory.openSession();\n+\n+        for (int i = 0; i<writeReadTimes.length; i++)\n+        {\n+            TimeOfDay writeReadTime = writeReadTimes[i];\n+\n+            Schedule event = new Schedule();\n+            event.setId(i);\n+            event.setNextTime(writeReadTime);\n+\n+            session.save(event);\n+        }\n+\n+        session.flush();\n+        session.connection().commit();\n+        session.close();\n+\n+        for (int i = 0; i<writeReadTimes.length; i++)\n+        {\n+            TimeOfDay writeReadTime = writeReadTimes[i];\n+\n+            session = factory.openSession();\n+            Schedule eventReread = (Schedule) session.get(Schedule.class, new Integer(i));\n+\n+            assertNotNull(\"get failed - event#'\" + i + \"'not found\", eventReread);\n+            assertNotNull(\"get failed - returned null\", eventReread.getNextTime());\n+\n+\t\t\tTimeOfDay reReadTime = eventReread.getNextTime();\n+\t\t\tif (writeReadTime.getHourOfDay() != reReadTime.getHourOfDay() ||\n+\t\t\t\twriteReadTime.getMinuteOfHour() != reReadTime.getMinuteOfHour() ||\n+\t\t\t\twriteReadTime.getSecondOfMinute() != reReadTime.getSecondOfMinute())\n+\t\t\t{\n+\t\t\t\tfail(\"get failed - returned different date. expected \" + writeReadTime + \" was \" + eventReread.getNextTime());\n+\t\t\t}\n+\n+\t\t\tif (writeReadTime.getMillisOfSecond() != reReadTime.getMillisOfSecond())\n+\t\t\t{\n+\t\t\t\tSystem.out.println(\"millis different, might happen?\");\n+\t\t\t}\n+\t\t}\n+\n+\t\tsession.close();\n+    }\n+\n+\tprotected void setupConfiguration(Configuration cfg)\n+\t{\n+\t\tcfg.addFile(new File(\"src/test/org/joda/time/contrib/hibernate/schedule.hbm.xml\"));\n+\t}\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/test/java/org/joda/time/contrib/hibernate/TestPersistentTimeOfDayExact.java\n+/*\n+ *  Copyright 2001-2007 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.hibernate;\n+\n+import java.io.File;\n+import java.sql.SQLException;\n+\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.cfg.Configuration;\n+import org.joda.time.TimeOfDay;\n+\n+public class TestPersistentTimeOfDayExact extends HibernateTestCase\n+{\n+    private TimeOfDay[] writeReadTimes = new TimeOfDay[]\n+    {\n+        new TimeOfDay(12, 10, 31),\n+        new TimeOfDay(23,  7, 43, 120)\n+    };\n+\n+    public void testSimpleStore() throws SQLException\n+    {\n+        SessionFactory factory = getSessionFactory();\n+\n+        Session session = factory.openSession();\n+\n+        for (int i = 0; i<writeReadTimes.length; i++)\n+        {\n+            TimeOfDay writeReadTime = writeReadTimes[i];\n+\n+            Schedule event = new Schedule();\n+            event.setId(i);\n+            event.setNextTimeMillis(writeReadTime);\n+\n+            session.save(event);\n+        }\n+\n+        session.flush();\n+        session.connection().commit();\n+        session.close();\n+\n+        for (int i = 0; i<writeReadTimes.length; i++)\n+        {\n+            TimeOfDay writeReadTime = writeReadTimes[i];\n+\n+            session = factory.openSession();\n+            Schedule eventReread = (Schedule) session.get(Schedule.class, new Integer(i));\n+\n+            assertNotNull(\"get failed - event#'\" + i + \"'not found\", eventReread);\n+            assertNotNull(\"get failed - returned null\", eventReread.getNextTimeMillis());\n+\n+\t\t\tassertEquals(\"get failed - returned different date.\", writeReadTime, eventReread.getNextTimeMillis());\n+\t\t}\n+\n+\t\tsession.close();\n+    }\n+\n+\tprotected void setupConfiguration(Configuration cfg)\n+\t{\n+\t\tcfg.addFile(new File(\"src/test/org/joda/time/contrib/hibernate/schedule.hbm.xml\"));\n+\t}\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/test/java/org/joda/time/contrib/hibernate/TestPersistentYearMonthDay.java\n+/*\n+ *  Copyright 2001-2007 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.hibernate;\n+\n+import java.io.File;\n+import java.sql.SQLException;\n+\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.cfg.Configuration;\n+import org.joda.time.YearMonthDay;\n+\n+public class TestPersistentYearMonthDay extends HibernateTestCase\n+{\n+    private YearMonthDay[] writeReadTimes = new YearMonthDay[]\n+    {\n+        new YearMonthDay(2004, 2, 25),\n+        new YearMonthDay(1980, 3, 11)\n+    };\n+\n+    public void testSimpleStore() throws SQLException\n+    {\n+        SessionFactory factory = getSessionFactory();\n+\n+        Session session = factory.openSession();\n+\n+        for (int i = 0; i<writeReadTimes.length; i++)\n+        {\n+            YearMonthDay writeReadTime = writeReadTimes[i];\n+\n+            Schedule event = new Schedule();\n+            event.setId(i);\n+            event.setStartDate(writeReadTime);\n+\n+            session.save(event);\n+        }\n+\n+        session.flush();\n+        session.connection().commit();\n+        session.close();\n+\n+        for (int i = 0; i<writeReadTimes.length; i++)\n+        {\n+            YearMonthDay writeReadTime = writeReadTimes[i];\n+\n+            session = factory.openSession();\n+            Schedule eventReread = (Schedule) session.get(Schedule.class, new Integer(i));\n+\n+            assertNotNull(\"get failed - event#'\" + i + \"'not found\", eventReread);\n+            assertNotNull(\"get failed - returned null\", eventReread.getStartDate());\n+\n+            assertEquals(\"get failed - returned different date\", writeReadTime, eventReread.getStartDate());\n+        }\n+\t\t\n+\t\tsession.close();\n+    }\n+\n+\tprotected void setupConfiguration(Configuration cfg)\n+\t{\n+\t\tcfg.addFile(new File(\"src/test/org/joda/time/contrib/hibernate/schedule.hbm.xml\"));\n+\t}\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/test/java/org/joda/time/contrib/hibernate/ThingWithInstant.java\n+/*\n+ *  Copyright 2001-2009 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.hibernate;\n+\n+import java.io.Serializable;\n+\n+import org.joda.time.Instant;\n+\n+public class ThingWithInstant implements Serializable\n+{\n+\tprivate int id;\n+\tprivate Instant instant;\n+\n+\tpublic ThingWithInstant()\n+\t{}\n+\t\n+\tpublic int getId()\n+\t{\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(int id)\n+\t{\n+\t\tthis.id = id;\n+\t}\n+\n+\tpublic Instant getInstant()\n+\t{\n+\t\treturn instant;\n+\t}\n+\n+\tpublic void setInstant(Instant instant)\n+\t{\n+\t\tthis.instant = instant;\n+\t}\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/test/java/org/joda/time/contrib/hibernate/testmodel/SomethingThatHappens.java\n+package org.joda.time.contrib.hibernate.testmodel;\n+\n+import org.joda.time.Period;\n+\n+import java.io.Serializable;\n+\n+/**\n+ *\n+ * @author gjoseph\n+ * @author $Author: $ (last edit)\n+ * @version $Revision: $\n+ */\n+public class SomethingThatHappens implements Serializable {\n+    private long id;\n+    private String name;\n+    private Period thePeriod;\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public Period getThePeriod() {\n+        return thePeriod;\n+    }\n+\n+    public void setThePeriod(Period thePeriod) {\n+        this.thePeriod = thePeriod;\n+    }\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/hibernate/src/test/java/org/joda/time/contrib/hibernate/testmodel/SomethingThatLasts.java\n+package org.joda.time.contrib.hibernate.testmodel;\n+\n+import org.joda.time.Duration;\n+\n+import java.io.Serializable;\n+\n+/**\n+ *\n+ * @author gjoseph\n+ * @author $Author: $ (last edit)\n+ * @version $Revision: $\n+ */\n+public class SomethingThatLasts implements Serializable {\n+    private long id;\n+    private String name;\n+    private Duration theDuration;\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public Duration getTheDuration() {\n+        return theDuration;\n+    }\n+\n+    public void setTheDuration(Duration theDuration) {\n+        this.theDuration = theDuration;\n+    }\n+\n+}", "timestamp": 1257642191, "metainfo": ""}