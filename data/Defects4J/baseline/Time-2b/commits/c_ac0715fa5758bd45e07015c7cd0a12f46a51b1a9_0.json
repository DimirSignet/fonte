{"sha": "ac0715fa5758bd45e07015c7cd0a12f46a51b1a9", "log": "Fix null handling from testing   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/AbstractDuration.java\n+++ b/JodaTime/src/java/org/joda/time/AbstractDuration.java\n      * To add just once, pass in a scalar of one. To subtract once, pass\n      * in a scalar of minus one.\n      *\n-     * @param instant  the instant to add the duration to\n+     * @param instant  the instant to add the duration to, null means now\n      * @param scalar  the number of times to add the duration, negative to subtract\n      * @return instant with the original value plus this duration times scalar\n-     * @throws IllegalArgumentException if the instant is null\n      * @throws ArithmeticException if the result of the calculation is too large\n      */\n     public final Instant addTo(ReadableInstant instant, int scalar) {\n+        if (instant == null) {\n+            return new Instant(addTo(DateTimeUtils.currentTimeMillis(), scalar));\n+        }\n         return new Instant(addTo(instant.getMillis(), scalar));\n     }\n \n      * To add just once, pass in a scalar of one. To subtract once, pass\n      * in a scalar of minus one.\n      *\n-     * @param instant  the instant to update with the added duration\n+     * @param instant  the instant to update with the added duration, must not be null\n      * @param scalar  the number of times to add the duration, negative to subtract\n      * @throws IllegalArgumentException if the instant is null\n      * @throws ArithmeticException if the result of the calculation is too large\n      */\n     public final void addInto(ReadWritableInstant instant, int scalar) {\n+        if (instant == null) {\n+            throw new IllegalArgumentException(\"The instant must not be null\");\n+        }\n         instant.setMillis(addTo(instant.getMillis(), scalar));\n     }\n ", "timestamp": 1090621084, "metainfo": ""}