{"sha": "29ae347c15b45eca15a642f483a1f08a37c3f166", "log": "Removed comments about exceptions which are no longer thrown.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/AbstractDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/AbstractDateTime.java\n      *\n      * @param instant  the milliseconds since 1970-01-01T00:00:00Z to set the\n      * instant to\n-     * @throws IllegalArgumentException if the value is invalid\n      */\n     protected void setMillis(long instant) {\n         iMillis = instant;\n      * all lower subclasses are also immutable.\n      * \n      * @param chronology  the chronology to use, null means ISOChronology in default zone\n-     * @throws IllegalArgumentException if the value is invalid\n      */\n     protected void setChronology(Chronology chronology) {\n         iChronology = selectChronology(chronology);\n      * zone does not affect the millisecond value of this instant.\n      *\n      * @param zone  the time zone to use, null means default zone\n-     * @throws IllegalArgumentException if the value is invalid\n      * @see #moveDateTimeZone\n      */\n     protected void setDateTimeZone(DateTimeZone zone) {\n      * relative to the new time zone.\n      *\n      * @param zone  the time zone to use, null means default zone\n-     * @throws IllegalArgumentException if the value is invalid\n      * @see #setDateTimeZone\n      */\n     protected void moveDateTimeZone(DateTimeZone zone) {", "timestamp": 1078636604, "metainfo": ""}