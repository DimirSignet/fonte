{"sha": "496a7466a870a0849b4e59856bd3a34ea599bf1d", "log": "Clarify javadoc, suggested by Neil Martin  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateTime.java\n+++ b/JodaTime/src/java/org/joda/time/DateTime.java\n \n /**\n  * DateTime is the standard implementation of an unmodifiable datetime class.\n- * It holds the datetime as milliseconds from the Java epoch of 1970-01-01T00:00:00Z.\n  * <p>\n- * This class uses a Chronology internally. The Chronology determines how the\n+ * <code>DateTime</code> is the most widely used implementation of\n+ * {@link ReadableInstant}. As with all instants, it represents an exact\n+ * point on the time-line, but limited to the precision of milliseconds.\n+ * A <code>DateTime</code> calculates its fields with respect to a\n+ * {@link DateTimeZone time zone}.\n+ * <p>\n+ * Internally, the class holds two pieces of data. Firstly, it holds the\n+ * datetime as milliseconds from the Java epoch of 1970-01-01T00:00:00Z.\n+ * Secondly, it holds a {@link Chronology} which determines how the\n  * millisecond instant value is converted into the date time fields.\n- * The default Chronology is <code>ISOChronology</code> which is the agreed\n- * international standard and compatable with the modern Gregorian calendar.\n- *\n- * <p>Each individual field can be queried in two ways:\n+ * The default Chronology is {@link ISOChronology} which is the agreed\n+ * international standard and compatible with the modern Gregorian calendar.\n+ * <p>\n+ * Each individual field can be queried in two ways:\n  * <ul>\n  * <li><code>getHourOfDay()</code>\n  * <li><code>hourOfDay().get()</code>\n  * <li>set\n  * <li>rounding\n  * </ul>\n- *\n  * <p>\n  * DateTime is thread-safe and immutable, provided that the Chronology is as well.\n  * All standard Chronology classes supplied are thread-safe and immutable.\n      * Returns a copy of this datetime with the specified duration added.\n      * <p>\n      * If the amount is zero or null, then <code>this</code> is returned.\n+     * This datetime instance is immutable and unaffected by this method call.\n      * \n      * @param duration  the duration, in millis, to add to this one\n      * @return a copy of this datetime with the duration added\n      * Returns a copy of this datetime with the specified duration added.\n      * <p>\n      * If the amount is zero or null, then <code>this</code> is returned.\n+     * This datetime instance is immutable and unaffected by this method call.\n      * \n      * @param duration  the duration to add to this one, null means zero\n      * @return a copy of this datetime with the duration added\n     /**\n      * Returns a copy of this datetime with the specified period added.\n      * <p>\n-     * If the amount is zero or null, then <code>this</code> is returned.\n+     * This method will add each element of the period one by one, from largest\n+     * to smallest, adjusting the datetime to be accurate between each.\n+     * <p>\n+     * Thus, adding a period of one month and one day to 2007-03-31 will\n+     * work as follows:\n+     * First add one month and adjust, resulting in 2007-04-30\n+     * Then add one day and adjust, resulting in 2007-05-01.\n      * <p>\n      * This method is typically used to add complex period instances.\n      * Adding one field is best achieved using methods\n      * like {@link #plusYears(int)}.\n+     * <p>\n+     * If the amount is zero or null, then <code>this</code> is returned.\n+     * This datetime instance is immutable and unaffected by this method call.\n      * \n      * @param period  the duration to add to this one, null means zero\n      * @return a copy of this datetime with the period added\n     /**\n      * Returns a copy of this datetime plus the specified number of years.\n      * <p>\n-     * This datetime instance is immutable and unaffected by this method call.\n+     * The calculation will do its best to only change the year field\n+     * retaining the same month of year.\n+     * However, in certain circumstances, it may be necessary to alter\n+     * smaller fields. For example, 2008-02-29 plus one year cannot result\n+     * in 2009-02-29, so the day of month is adjusted to 2009-02-28.\n      * <p>\n      * The following three lines are identical in effect:\n      * <pre>\n      * DateTime added = dt.plus(Period.years(6));\n      * DateTime added = dt.withFieldAdded(DurationFieldType.years(), 6);\n      * </pre>\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n      *\n      * @param years  the amount of years to add, may be negative\n      * @return the new datetime plus the increased years\n     /**\n      * Returns a copy of this datetime plus the specified number of months.\n      * <p>\n-     * This datetime instance is immutable and unaffected by this method call.\n+     * The calculation will do its best to only change the month field\n+     * retaining the same day of month.\n+     * However, in certain circumstances, it may be necessary to alter\n+     * smaller fields. For example, 2007-03-31 plus one month cannot result\n+     * in 2007-04-31, so the day of month is adjusted to 2007-04-30.\n      * <p>\n      * The following three lines are identical in effect:\n      * <pre>\n      * DateTime added = dt.plus(Period.months(6));\n      * DateTime added = dt.withFieldAdded(DurationFieldType.months(), 6);\n      * </pre>\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n      *\n      * @param months  the amount of months to add, may be negative\n      * @return the new datetime plus the increased months\n     /**\n      * Returns a copy of this datetime plus the specified number of weeks.\n      * <p>\n-     * This datetime instance is immutable and unaffected by this method call.\n+     * The calculation operates as if it were adding the equivalent in days.\n      * <p>\n      * The following three lines are identical in effect:\n      * <pre>\n      * DateTime added = dt.plus(Period.weeks(6));\n      * DateTime added = dt.withFieldAdded(DurationFieldType.weeks(), 6);\n      * </pre>\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n      *\n      * @param weeks  the amount of weeks to add, may be negative\n      * @return the new datetime plus the increased weeks\n     /**\n      * Returns a copy of this datetime plus the specified number of days.\n      * <p>\n-     * This datetime instance is immutable and unaffected by this method call.\n+     * The calculation will do its best to only change the day field\n+     * retaining the same time of day.\n+     * However, in certain circumstances, typically daylight savings cutover,\n+     * it may be necessary to alter the time fields.\n+     * <p>\n+     * In spring an hour is typically removed. If adding one day results in\n+     * the time being within the cutover then the time is adjusted to be\n+     * within summer time. For example, if the cutover is from 01:59 to 03:00\n+     * and the result of this method would have been 02:30, then the result\n+     * will be adjusted to 03:30.\n      * <p>\n      * The following three lines are identical in effect:\n      * <pre>\n      * DateTime added = dt.plus(Period.days(6));\n      * DateTime added = dt.withFieldAdded(DurationFieldType.days(), 6);\n      * </pre>\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n      *\n      * @param days  the amount of days to add, may be negative\n      * @return the new datetime plus the increased days\n     /**\n      * Returns a copy of this datetime plus the specified number of hours.\n      * <p>\n-     * This datetime instance is immutable and unaffected by this method call.\n+     * The calculation will add a duration equivalent to the number of hours\n+     * expressed in milliseconds.\n+     * <p>\n+     * For example, if a spring daylight savings cutover is from 01:59 to 03:00\n+     * then adding one hour to 01:30 will result in 03:30. This is a duration\n+     * of one hour later, even though the hour field value changed from 1 to 3.\n      * <p>\n      * The following three lines are identical in effect:\n      * <pre>\n      * DateTime added = dt.plus(Period.hours(6));\n      * DateTime added = dt.withFieldAdded(DurationFieldType.hours(), 6);\n      * </pre>\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n      *\n      * @param hours  the amount of hours to add, may be negative\n      * @return the new datetime plus the increased hours\n     /**\n      * Returns a copy of this datetime plus the specified number of minutes.\n      * <p>\n-     * This datetime instance is immutable and unaffected by this method call.\n+     * The calculation will add a duration equivalent to the number of minutes\n+     * expressed in milliseconds.\n      * <p>\n      * The following three lines are identical in effect:\n      * <pre>\n      * DateTime added = dt.plus(Period.minutes(6));\n      * DateTime added = dt.withFieldAdded(DurationFieldType.minutes(), 6);\n      * </pre>\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n      *\n      * @param minutes  the amount of minutes to add, may be negative\n      * @return the new datetime plus the increased minutes\n     /**\n      * Returns a copy of this datetime plus the specified number of seconds.\n      * <p>\n-     * This datetime instance is immutable and unaffected by this method call.\n+     * The calculation will add a duration equivalent to the number of seconds\n+     * expressed in milliseconds.\n      * <p>\n      * The following three lines are identical in effect:\n      * <pre>\n      * DateTime added = dt.plus(Period.seconds(6));\n      * DateTime added = dt.withFieldAdded(DurationFieldType.seconds(), 6);\n      * </pre>\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n      *\n      * @param seconds  the amount of seconds to add, may be negative\n      * @return the new datetime plus the increased seconds\n     /**\n      * Returns a copy of this datetime plus the specified number of millis.\n      * <p>\n-     * This datetime instance is immutable and unaffected by this method call.\n+     * The calculation will add a duration equivalent to the number of milliseconds.\n      * <p>\n      * The following three lines are identical in effect:\n      * <pre>\n      * DateTime added = dt.plus(Period.millis(6));\n      * DateTime added = dt.withFieldAdded(DurationFieldType.millis(), 6);\n      * </pre>\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n      *\n      * @param millis  the amount of millis to add, may be negative\n      * @return the new datetime plus the increased millis\n      * Returns a copy of this datetime with the specified duration taken away.\n      * <p>\n      * If the amount is zero or null, then <code>this</code> is returned.\n+     * This datetime instance is immutable and unaffected by this method call.\n      * \n      * @param duration  the duration, in millis, to reduce this instant by\n      * @return a copy of this datetime with the duration taken away\n      * Returns a copy of this datetime with the specified duration taken away.\n      * <p>\n      * If the amount is zero or null, then <code>this</code> is returned.\n+     * This datetime instance is immutable and unaffected by this method call.\n      * \n      * @param duration  the duration to reduce this instant by\n      * @return a copy of this datetime with the duration taken away\n     /**\n      * Returns a copy of this datetime with the specified period taken away.\n      * <p>\n-     * If the amount is zero or null, then <code>this</code> is returned.\n+     * This method will subtract each element of the period one by one, from\n+     * largest to smallest, adjusting the datetime to be accurate between each.\n+     * <p>\n+     * Thus, subtracting a period of one month and one day from 2007-05-31 will\n+     * work as follows:\n+     * First subtract one month and adjust, resulting in 2007-04-30\n+     * Then subtract one day and adjust, resulting in 2007-04-29.\n+     * Note that the day has been adjusted by two.\n      * <p>\n      * This method is typically used to subtract complex period instances.\n      * Subtracting one field is best achieved using methods\n      * like {@link #minusYears(int)}.\n+     * <p>\n+     * If the amount is zero or null, then <code>this</code> is returned.\n+     * This datetime instance is immutable and unaffected by this method call.\n      * \n      * @param period  the period to reduce this instant by\n      * @return a copy of this datetime with the period taken away\n     /**\n      * Returns a copy of this datetime minus the specified number of years.\n      * <p>\n-     * This datetime instance is immutable and unaffected by this method call.\n+     * The calculation will do its best to only change the year field\n+     * retaining the same month of year.\n+     * However, in certain circumstances, it may be necessary to alter\n+     * smaller fields. For example, 2008-02-29 minus one year cannot result\n+     * in 2007-02-29, so the day of month is adjusted to 2007-02-28.\n      * <p>\n      * The following three lines are identical in effect:\n      * <pre>\n      * DateTime subtracted = dt.minus(Period.years(6));\n      * DateTime subtracted = dt.withFieldAdded(DurationFieldType.years(), -6);\n      * </pre>\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n      *\n      * @param years  the amount of years to subtract, may be negative\n      * @return the new datetime minus the increased years\n     /**\n      * Returns a copy of this datetime minus the specified number of months.\n      * <p>\n-     * This datetime instance is immutable and unaffected by this method call.\n+     * The calculation will do its best to only change the month field\n+     * retaining the same day of month.\n+     * However, in certain circumstances, it may be necessary to alter\n+     * smaller fields. For example, 2007-05-31 minus one month cannot result\n+     * in 2007-04-31, so the day of month is adjusted to 2007-04-30.\n      * <p>\n      * The following three lines are identical in effect:\n      * <pre>\n      * DateTime subtracted = dt.minus(Period.months(6));\n      * DateTime subtracted = dt.withFieldAdded(DurationFieldType.months(), -6);\n      * </pre>\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n      *\n      * @param months  the amount of months to subtract, may be negative\n      * @return the new datetime minus the increased months\n     /**\n      * Returns a copy of this datetime minus the specified number of weeks.\n      * <p>\n-     * This datetime instance is immutable and unaffected by this method call.\n+     * The calculation operates as if it were subtracting the equivalent in days.\n      * <p>\n      * The following three lines are identical in effect:\n      * <pre>\n      * DateTime subtracted = dt.minus(Period.weeks(6));\n      * DateTime subtracted = dt.withFieldAdded(DurationFieldType.weeks(), -6);\n      * </pre>\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n      *\n      * @param weeks  the amount of weeks to subtract, may be negative\n      * @return the new datetime minus the increased weeks\n     /**\n      * Returns a copy of this datetime minus the specified number of days.\n      * <p>\n-     * This datetime instance is immutable and unaffected by this method call.\n+     * The calculation will do its best to only change the day field\n+     * retaining the same time of day.\n+     * However, in certain circumstances, typically daylight savings cutover,\n+     * it may be necessary to alter the time fields.\n+     * <p>\n+     * In spring an hour is typically removed. If subtracting one day results\n+     * in the time being within the cutover then the time is adjusted to be\n+     * within summer time. For example, if the cutover is from 01:59 to 03:00\n+     * and the result of this method would have been 02:30, then the result\n+     * will be adjusted to 03:30.\n      * <p>\n      * The following three lines are identical in effect:\n      * <pre>\n      * DateTime subtracted = dt.minus(Period.days(6));\n      * DateTime subtracted = dt.withFieldAdded(DurationFieldType.days(), -6);\n      * </pre>\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n      *\n      * @param days  the amount of days to subtract, may be negative\n      * @return the new datetime minus the increased days\n     /**\n      * Returns a copy of this datetime minus the specified number of hours.\n      * <p>\n-     * This datetime instance is immutable and unaffected by this method call.\n+     * The calculation will subtract a duration equivalent to the number of\n+     * hours expressed in milliseconds.\n+     * <p>\n+     * For example, if a spring daylight savings cutover is from 01:59 to 03:00\n+     * then subtracting one hour from 03:30 will result in 01:30. This is a\n+     * duration of one hour earlier, even though the hour field value changed\n+     * from 3 to 1.\n      * <p>\n      * The following three lines are identical in effect:\n      * <pre>\n      * DateTime subtracted = dt.minus(Period.hours(6));\n      * DateTime subtracted = dt.withFieldAdded(DurationFieldType.hours(), -6);\n      * </pre>\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n      *\n      * @param hours  the amount of hours to subtract, may be negative\n      * @return the new datetime minus the increased hours\n     /**\n      * Returns a copy of this datetime minus the specified number of minutes.\n      * <p>\n-     * This datetime instance is immutable and unaffected by this method call.\n+     * The calculation will subtract a duration equivalent to the number of\n+     * minutes expressed in milliseconds.\n      * <p>\n      * The following three lines are identical in effect:\n      * <pre>\n      * DateTime subtracted = dt.minus(Period.minutes(6));\n      * DateTime subtracted = dt.withFieldAdded(DurationFieldType.minutes(), -6);\n      * </pre>\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n      *\n      * @param minutes  the amount of minutes to subtract, may be negative\n      * @return the new datetime minus the increased minutes\n     /**\n      * Returns a copy of this datetime minus the specified number of seconds.\n      * <p>\n-     * This datetime instance is immutable and unaffected by this method call.\n+     * The calculation will subtract a duration equivalent to the number of\n+     * seconds expressed in milliseconds.\n      * <p>\n      * The following three lines are identical in effect:\n      * <pre>\n      * DateTime subtracted = dt.minus(Period.seconds(6));\n      * DateTime subtracted = dt.withFieldAdded(DurationFieldType.seconds(), -6);\n      * </pre>\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n      *\n      * @param seconds  the amount of seconds to subtract, may be negative\n      * @return the new datetime minus the increased seconds\n     /**\n      * Returns a copy of this datetime minus the specified number of millis.\n      * <p>\n-     * This datetime instance is immutable and unaffected by this method call.\n+     * The calculation will subtract a duration equivalent to the number of\n+     * milliseconds.\n      * <p>\n      * The following three lines are identical in effect:\n      * <pre>\n      * DateTime subtracted = dt.minus(Period.millis(6));\n      * DateTime subtracted = dt.withFieldAdded(DurationFieldType.millis(), -6);\n      * </pre>\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n      *\n      * @param millis  the amount of millis to subtract, may be negative\n      * @return the new datetime minus the increased millis\n--- a/JodaTime/src/java/org/joda/time/Instant.java\n+++ b/JodaTime/src/java/org/joda/time/Instant.java\n \n /**\n  * Instant is the standard implementation of a fully immutable instant in time.\n- * It holds the instant as milliseconds from the Java Epoch of 1970-01-01T00:00:00Z.\n  * <p>\n- * The chronology used is always ISO in the UTC time zone.\n- * This corresponds to the definition of the Java Epoch.\n+ * <code>Instant</code> is an implementation of {@link ReadableInstant}.\n+ * As with all instants, it represents an exact point on the time-line,\n+ * but limited to the precision of milliseconds. An <code>Instant</code>\n+ * should be used to represent a point in time irrespective of any other\n+ * factor, such as chronology or time zone.\n  * <p>\n- * An Instant can be used to compare two <code>DateTime</code> objects:\n+ * Internally, the class holds one piece of data, the instant as milliseconds\n+ * from the Java epoch of 1970-01-01T00:00:00Z.\n+ * <p>\n+ * For example, an Instant can be used to compare two <code>DateTime</code>\n+ * objects irrespective of chronology or time zone.\n  * <pre>\n  * boolean sameInstant = dt1.toInstant().equals(dt2.toInstant());\n  * </pre>\n- * This code will return true if the two <code>DateTime</code> objects represent\n- * the same instant regardless of chronology or time zone.\n- * <p>\n  * Note that the following code will also perform the same check:\n  * <pre>\n  * boolean sameInstant = dt1.isEqual(dt2);\n \n     /**\n      * Gets the chronology of the instant, which is ISO in the UTC zone.\n+     * <p>\n+     * This method returns {@link ISOChronology#getInstanceUTC()} which\n+     * corresponds to the definition of the Java epoch 1970-01-01T00:00:00Z.\n      * \n      * @return ISO in the UTC zone\n      */\n--- a/JodaTime/src/java/org/joda/time/LocalDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/LocalDateTime.java\n  * DayOfYear and MillisOfDay.\n  * However, <b>all</b> fields may in fact be queried.\n  * <p>\n- * Internally, LocalDateTime holds the datetime as milliseconds\n- * from 1970-01-01T00:00:00. This represents the <i>local</i> millisecond\n- * count which differs from the epoch-based millisecond value in a\n- * <code>ReadableInstant</code> implementation by the amount of the zone offset.\n+ * Internally, LocalDateTime uses a single millisecond-based value to\n+ * represent the local datetime. This value is only used internally and\n+ * is not exposed to applications.\n  * <p>\n  * Calculations on LocalDateTime are performed using a {@link Chronology}.\n  * This chronology will be set internally to be in the UTC time zone\n--- a/JodaTime/src/java/org/joda/time/base/AbstractInstant.java\n+++ b/JodaTime/src/java/org/joda/time/base/AbstractInstant.java\n     //-----------------------------------------------------------------------\n     /**\n      * Compares this object with the specified object for equality based\n-     * on the millisecond instant and the Chronology.\n+     * on the millisecond instant, chronology and time zone.\n+     * <p>\n+     * Two objects which represent the same instant in time, but are in\n+     * different time zones (based on time zone id), will be considered to\n+     * be different. Only two objects with the same {@link DateTimeZone},\n+     * {@link Chronology} and instant are equal.\n+     * <p>\n+     * See {@link #isEqual(ReadableInstant)} for an equals method that\n+     * ignores the Chronology and time zone.\n      * <p>\n      * All ReadableInstant instances are accepted.\n-     * <p>\n-     * See {@link #isEqual(ReadableInstant)} for an equals method that\n-     * ignores the Chronology.\n      *\n      * @param readableInstant  a readable instant to check against\n      * @return true if millisecond and chronology are equal, false if", "timestamp": 1186228040, "metainfo": ""}