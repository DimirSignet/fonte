{"sha": "d7bc2156a97e10be86006abc2c92ac86fa8678f8", "log": "Override implementation of getDateOnlyMillis.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java\n import org.joda.time.DateTimeConstants;\n import org.joda.time.DateTimeZone;\n import org.joda.time.DurationField;\n+import org.joda.time.field.FieldUtils;\n import org.joda.time.field.PreciseDurationField;\n \n /**\n         return getInstance(zone);\n     }\n \n+    public long getDateOnlyMillis(int year, int monthOfYear, int dayOfMonth)\n+        throws IllegalArgumentException\n+    {\n+        Chronology base;\n+        if ((base = getBase()) != null) {\n+            return base.getDateOnlyMillis(year, monthOfYear, dayOfMonth);\n+        }\n+\n+        FieldUtils.verifyValueBounds(\"year\", year, getMinYear(), getMaxYear());\n+        FieldUtils.verifyValueBounds(\"monthOfYear\", monthOfYear, 1, 13);\n+\n+        int dayLimit = (monthOfYear != 13) ? 30 : (isLeapYear(year) ? 6 : 5);\n+        FieldUtils.verifyValueBounds(\"dayOfMonth\", dayOfMonth, 1, dayLimit);\n+\n+        long instant = getYearMillis(year);\n+\n+        if (monthOfYear > 1) {\n+            instant += (monthOfYear - 1) * 30L * DateTimeConstants.MILLIS_PER_DAY;\n+        }\n+\n+        if (dayOfMonth != 1) {\n+            instant += (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;\n+        }\n+\n+        return instant;\n+    }\n+\n     boolean isLeapYear(int year) {\n         return (year & 3) == 3;\n     }", "timestamp": 1075654849, "metainfo": ""}