{"sha": "06867a48517f71c740016cd3d9e84558ab56cd49", "log": "Add Duration multipliedBy/dividedBy/negated  Tweak pull request Fixes #72", "commit": "\n--- a/src/main/java/org/joda/time/Duration.java\n+++ b/src/main/java/org/joda/time/Duration.java\n      * @param multiplicand  the multiplicand to multiply this one by\n      * @return the new duration instance\n      */\n-    public Duration multipliedBy(long multiplicand)\n-    {\n-        if(multiplicand == 1)\n-            return this;\n+    public Duration multipliedBy(long multiplicand) {\n+        if (multiplicand == 1) {\n+            return this;\n+        }\n         return new Duration(FieldUtils.safeMultiply(getMillis(), multiplicand));\n     }\n \n      * @param divisor  the divisor to divide this one by\n      * @return the new duration instance\n      */\n-    public Duration dividedBy(long divisor)\n-    {\n-        if(divisor == 1)\n-            return this;\n+    public Duration dividedBy(long divisor) {\n+        if (divisor == 1) {\n+            return this;\n+        }\n         return new Duration(FieldUtils.safeDivide(getMillis(), divisor));\n     }\n \n      * \n      * @return the new duration instance\n      */\n-    public Duration negated()\n-    {\n-        if(getMillis() == Long.MIN_VALUE)\n+    public Duration negated() {\n+        if (getMillis() == Long.MIN_VALUE) {\n             throw new ArithmeticException(\"Negation of this duration would overflow\");\n+        }\n         return new Duration(-getMillis());\n     }\n \n--- a/src/main/java/org/joda/time/field/FieldUtils.java\n+++ b/src/main/java/org/joda/time/field/FieldUtils.java\n         }\n         return total;\n     }\n-    \n+\n     /**\n      * Divides the dividend by the divisor throwing an exception if \n      * overflow occurs or the divisor is zero.\n      * @return the new total\n      * @throws ArithmeticException if the operation overflows or the divisor is zero\n      */\n-    public static long safeDivide(long dividend, long divisor)\n-    {\n-        if(dividend == Long.MIN_VALUE && divisor == -1L)\n+    public static long safeDivide(long dividend, long divisor) {\n+        if (dividend == Long.MIN_VALUE && divisor == -1L) {\n             throw new ArithmeticException(\"Multiplication overflows a long: \" + dividend + \" / \" + divisor);\n+        }\n         return dividend / divisor;\n     }\n \n--- a/src/test/java/org/joda/time/field/TestFieldUtils.java\n+++ b/src/test/java/org/joda/time/field/TestFieldUtils.java\n         assertEquals(0L, FieldUtils.safeDivide(1L, 3L));\n         assertEquals(3L, FieldUtils.safeDivide(3L, 1L));\n         \n+        assertEquals(1L, FieldUtils.safeDivide(5L, 3L));\n+        assertEquals(-1L, FieldUtils.safeDivide(5L, -3L));\n+        assertEquals(-1L, FieldUtils.safeDivide(-5L, 3L));\n+        assertEquals(1L, FieldUtils.safeDivide(-5L, -3L));\n+        \n         assertEquals(2L, FieldUtils.safeDivide(6L, 3L));\n         assertEquals(-2L, FieldUtils.safeDivide(6L, -3L));\n         assertEquals(-2L, FieldUtils.safeDivide(-6L, 3L));\n         assertEquals(2L, FieldUtils.safeDivide(-6L, -3L));\n         \n+        assertEquals(2L, FieldUtils.safeDivide(7L, 3L));\n+        assertEquals(-2L, FieldUtils.safeDivide(7L, -3L));\n+        assertEquals(-2L, FieldUtils.safeDivide(-7L, 3L));\n+        assertEquals(2L, FieldUtils.safeDivide(-7L, -3L));\n+        \n         assertEquals(Long.MAX_VALUE, FieldUtils.safeDivide(Long.MAX_VALUE, 1L));\n         assertEquals(Long.MIN_VALUE, FieldUtils.safeDivide(Long.MIN_VALUE, 1L));\n         assertEquals(-Long.MAX_VALUE, FieldUtils.safeDivide(Long.MAX_VALUE, -1L));\n         } catch (ArithmeticException e) {\n         }\n     }\n+\n }\n-", "timestamp": 1380896013, "metainfo": ""}