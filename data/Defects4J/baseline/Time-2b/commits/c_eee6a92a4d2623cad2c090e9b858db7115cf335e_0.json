{"sha": "eee6a92a4d2623cad2c090e9b858db7115cf335e", "log": "Fixed formatting of time zone name near DST transition.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java\n         public void printTo(\n                 StringBuffer buf, long instant, Chronology chrono,\n                 int displayOffset, DateTimeZone displayZone, Locale locale) {\n-            buf.append(print(instant, displayZone, locale));\n+            buf.append(print(instant - displayOffset, displayZone, locale));\n         }\n \n         public void printTo(\n                 Writer out, long instant, Chronology chrono,\n                 int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException {\n-            out.write(print(instant, displayZone, locale));\n+            out.write(print(instant - displayOffset, displayZone, locale));\n         }\n \n         private String print(long instant, DateTimeZone displayZone, Locale locale) {\n--- a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java\n         assertEquals(expect, result);\n     }\n \n+    // Ensure time zone name switches properly at the zone DST transition.\n+    public void testZoneNameNearTransition() {\n+        DateTime inDST_1  = new DateTime(2005, 10, 30, 1, 0, 0, 0, NEWYORK);\n+        DateTime inDST_2  = new DateTime(2005, 10, 30, 1, 59, 59, 999, NEWYORK);\n+        DateTime onDST    = new DateTime(2005, 10, 30, 2, 0, 0, 0, NEWYORK);\n+        DateTime outDST   = new DateTime(2005, 10, 30, 2, 0, 0, 1, NEWYORK);\n+        DateTime outDST_2 = new DateTime(2005, 10, 30, 2, 0, 1, 0, NEWYORK);\n+\n+        DateTimeFormatter fmt = DateTimeFormat.forPattern(\"yyy-MM-dd HH:mm:ss.S zzzz\");\n+        assertEquals(\"2005-10-30 01:00:00.0 Eastern Daylight Time\", fmt.print(inDST_1));\n+        assertEquals(\"2005-10-30 01:59:59.9 Eastern Daylight Time\", fmt.print(inDST_2));\n+        assertEquals(\"2005-10-30 02:00:00.0 Eastern Standard Time\", fmt.print(onDST));\n+        assertEquals(\"2005-10-30 02:00:00.0 Eastern Standard Time\", fmt.print(outDST));\n+        assertEquals(\"2005-10-30 02:00:01.0 Eastern Standard Time\", fmt.print(outDST_2));\n+    }\n+\n+    // Ensure time zone name switches properly at the zone DST transition.\n+    public void testZoneShortNameNearTransition() {\n+        DateTime inDST_1  = new DateTime(2005, 10, 30, 1, 0, 0, 0, NEWYORK);\n+        DateTime inDST_2  = new DateTime(2005, 10, 30, 1, 59, 59, 999, NEWYORK);\n+        DateTime onDST    = new DateTime(2005, 10, 30, 2, 0, 0, 0, NEWYORK);\n+        DateTime outDST   = new DateTime(2005, 10, 30, 2, 0, 0, 1, NEWYORK);\n+        DateTime outDST_2 = new DateTime(2005, 10, 30, 2, 0, 1, 0, NEWYORK);\n+\n+        DateTimeFormatter fmt = DateTimeFormat.forPattern(\"yyy-MM-dd HH:mm:ss.S z\");\n+        assertEquals(\"2005-10-30 01:00:00.0 EDT\", fmt.print(inDST_1));\n+        assertEquals(\"2005-10-30 01:59:59.9 EDT\", fmt.print(inDST_2));\n+        assertEquals(\"2005-10-30 02:00:00.0 EST\", fmt.print(onDST));\n+        assertEquals(\"2005-10-30 02:00:00.0 EST\", fmt.print(outDST));\n+        assertEquals(\"2005-10-30 02:00:01.0 EST\", fmt.print(outDST_2));\n+    }\n+\n }", "timestamp": 1129996399, "metainfo": ""}