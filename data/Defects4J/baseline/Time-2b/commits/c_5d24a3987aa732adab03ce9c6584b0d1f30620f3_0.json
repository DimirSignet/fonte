{"sha": "5d24a3987aa732adab03ce9c6584b0d1f30620f3", "log": "Simplify set implementation.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/PreciseDurationDateTimeField.java\n     static final long serialVersionUID = 5004523158306266035L;\n \n     /** The fractional unit in millis */\n-    private final long iUnitMillis;\n+    final long iUnitMillis;\n \n     private final DurationField iUnitField;\n \n      * @throws IllegalArgumentException if value is too large or too small.\n      */\n     public long set(long instant, int value) {\n-        int max;\n-        if (getRangeDurationField().isPrecise()) {\n-            max = getMaximumValue();\n-        } else {\n-            max = getMaximumValueForSet(instant, value);\n-        }\n-        Utils.verifyValueBounds(this, value, getMinimumValue(), max);\n+        Utils.verifyValueBounds(this, value, getMinimumValue(),\n+                                getMaximumValueForSet(instant, value));\n         return instant + (value - get(instant)) * iUnitMillis;\n     }\n \n     }\n \n     /**\n-     * Called by the set method if the range duration field is imprecise. By\n-     * default, returns getMaximumValue(instant). Override to provide a faster\n+     * Called by the set method to get the maximum allowed value. By default,\n+     * returns getMaximumValue(instant). Override to provide a faster\n      * implementation.\n      */\n     protected int getMaximumValueForSet(long instant, int value) {", "timestamp": 1073152166, "metainfo": ""}