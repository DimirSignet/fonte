{"sha": "eab5533ec9e6bc4fefa7b4a52f463bbd84c34d5d", "log": "StringBuffer decorator   ", "commit": "\n--- /dev/null\n+++ b/JodaTime/src/java/org/joda/time/format/StringBufferWriter.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.format;\n+\n+import java.io.IOException;\n+import java.io.Writer;\n+\n+/**\n+ * Writer that decorates a specified StringBuffer, a class that should be in the JDK.\n+ * <p>\n+ * StringBufferWriter is mutable and not thread-safe.\n+ *\n+ * @author Sun JDK StringWriter\n+ * @author Stephen Colebourne\n+ * @since 1.0\n+ */\n+class StringBufferWriter extends Writer {\n+\n+    /** The string buffer to decorate. */\n+    private StringBuffer iBuffer;\n+\n+    /**\n+     * Constructs a writer that decorates the specified buffer.\n+     */\n+    public StringBufferWriter(StringBuffer buf) {\n+        iBuffer = buf;\n+        lock = buf;\n+    }\n+\n+    public void write(int ch) {\n+        iBuffer.append((char) ch);\n+    }\n+\n+    public void write(char chars[], int off, int len) {\n+        if ((off < 0)\n+            || (off > chars.length)\n+            || (len < 0)\n+            || ((off + len) > chars.length)\n+            || ((off + len) < 0)) {\n+            throw new IndexOutOfBoundsException();\n+        } else if (len == 0) {\n+            return;\n+        }\n+        iBuffer.append(chars, off, len);\n+    }\n+\n+    public void write(String str) {\n+        iBuffer.append(str);\n+    }\n+\n+    public void write(String str, int off, int len) {\n+        iBuffer.append(str.substring(off, off + len));\n+    }\n+\n+    public void flush() {\n+    }\n+\n+    public void close() throws IOException {\n+    }\n+\n+    public String toString() {\n+        return iBuffer.toString();\n+    }\n+}", "timestamp": 1088374930, "metainfo": ""}