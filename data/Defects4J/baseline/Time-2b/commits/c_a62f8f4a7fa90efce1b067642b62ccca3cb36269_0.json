{"sha": "a62f8f4a7fa90efce1b067642b62ccca3cb36269", "log": "Convert to maven 2  ", "commit": "\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/ClassLoadTest.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import org.joda.time.base.AbstractDateTime;\n+import org.joda.time.base.AbstractInstant;\n+\n+/**\n+ * This class displays what the ClassLoader is up to.\n+ * Run using JVM -verbose:class.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class ClassLoadTest {\n+\n+    // run using JVM -verbose:class\n+    public static void main(String[] args) {\n+        System.out.println(\"-----------------------------------------------\");\n+        System.out.println(\"-----------AbstractInstant---------------------\");\n+        Class cls = AbstractInstant.class;\n+        System.out.println(\"-----------ReadableDateTime--------------------\");\n+        cls = ReadableDateTime.class;\n+        System.out.println(\"-----------AbstractDateTime--------------------\");\n+        cls = AbstractDateTime.class;\n+        System.out.println(\"-----------DateTime----------------------------\");\n+        cls = DateTime.class;\n+        System.out.println(\"-----------DateTimeZone------------------------\");\n+        cls = DateTimeZone.class;\n+        System.out.println(\"-----------new DateTime()----------------------\");\n+        DateTime dt = new DateTime();\n+        System.out.println(\"-----------new DateTime(ReadableInstant)-------\");\n+        dt = new DateTime(dt);\n+        System.out.println(\"-----------new DateTime(Long)------------------\");\n+        dt = new DateTime(new Long(0));\n+        System.out.println(\"-----------------------------------------------\");\n+    }\n+    \n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/MockNullZoneChronology.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import org.joda.time.chrono.BaseChronology;\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * Mock class for unit testing.\n+ * \n+ * @author Stephen Colebourne\n+ */\n+class MockNullZoneChronology extends BaseChronology {\n+\n+    public DateTimeZone getZone() {\n+        return null;\n+    }\n+    public Chronology withUTC() {\n+        return this;\n+    }\n+    public Chronology withZone(DateTimeZone zone) {\n+        return this;\n+    }\n+    public DateTimeField dayOfMonth() {  // for DateMidnight test\n+        return ISOChronology.getInstance().dayOfMonth();\n+    }\n+    public String toString() {\n+        return \"\";\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/MockPartial.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * A basic mock testing class for a PartialInstant that doesn't extend AbstractPartialInstant.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class MockPartial implements ReadablePartial {\n+    \n+    public static final ReadablePartial EMPTY_INSTANCE = new MockPartial();\n+    \n+    public Chronology getChronology() {\n+        return ISOChronology.getInstanceUTC();\n+    }\n+    public int size() {\n+        return getFields().length;\n+    }\n+    public DateTimeFieldType getFieldType(int index) {\n+        return getFields()[index].getType();\n+    }\n+    public DateTimeField getField(int index) {\n+        return getFields()[index];\n+    }\n+    public int getValue(int index) {\n+        return getValues()[index];\n+    }\n+    public int get(DateTimeFieldType field) {\n+        return 0;\n+    }\n+    public boolean isSupported(DateTimeFieldType field) {\n+        return false;\n+    }\n+    public DateTime toDateTime(DateTimeZone zone) {\n+        return null;\n+    }\n+    public DateTime toDateTime(ReadableInstant base) {\n+        return null;\n+    }\n+    public DateTimeField[] getFields() {\n+        return new DateTimeField[0];\n+    }\n+    public int[] getValues() {\n+        return new int[0];\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/MockZone.java\n+/*\n+ *  Copyright 2001-2007 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+public class MockZone extends DateTimeZone {\n+\n+    long transition;\n+    int winterOffset;\n+\n+    public MockZone(long transition, int winterOffset) {\n+        super(\"MockZone\");\n+        this.transition = transition;\n+        this.winterOffset = winterOffset;\n+    }\n+\n+    public int getOffset(long instant) {\n+        return (instant < transition ? winterOffset : winterOffset + 3600000);\n+    }\n+\n+    public int getStandardOffset(long instant) {\n+        return winterOffset;\n+    }\n+\n+    public long nextTransition(long instant) {\n+        return (instant < transition ? transition : transition + 180L * DateTimeConstants.MILLIS_PER_DAY);\n+    }\n+\n+    public long previousTransition(long instant) {\n+        return (instant > transition ? transition : transition - 180L * DateTimeConstants.MILLIS_PER_DAY);\n+    }\n+\n+    public boolean isFixed() {\n+        return false;\n+    }\n+\n+    public String getNameKey(long instant) {\n+        return null;\n+    }\n+\n+    public boolean equals(Object object) {\n+        return false;\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestAbstractPartial.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.base.AbstractPartial;\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.field.AbstractPartialFieldProperty;\n+\n+/**\n+ * This class is a Junit unit test for YearMonthDay.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestAbstractPartial extends TestCase {\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    \n+    private long TEST_TIME_NOW =\n+            (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    private long TEST_TIME1 =\n+        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private long TEST_TIME2 =\n+        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestAbstractPartial.class);\n+    }\n+\n+    public TestAbstractPartial(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetValue() throws Throwable {\n+        MockPartial mock = new MockPartial();\n+        assertEquals(1970, mock.getValue(0));\n+        assertEquals(1, mock.getValue(1));\n+        \n+        try {\n+            mock.getValue(-1);\n+            fail();\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            mock.getValue(2);\n+            fail();\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testGetValues() throws Throwable {\n+        MockPartial mock = new MockPartial();\n+        int[] vals = mock.getValues();\n+        assertEquals(2, vals.length);\n+        assertEquals(1970, vals[0]);\n+        assertEquals(1, vals[1]);\n+    }\n+\n+    public void testGetField() throws Throwable {\n+        MockPartial mock = new MockPartial();\n+        assertEquals(BuddhistChronology.getInstanceUTC().year(), mock.getField(0));\n+        assertEquals(BuddhistChronology.getInstanceUTC().monthOfYear(), mock.getField(1));\n+        \n+        try {\n+            mock.getField(-1);\n+            fail();\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            mock.getField(2);\n+            fail();\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testGetFieldType() throws Throwable {\n+        MockPartial mock = new MockPartial();\n+        assertEquals(DateTimeFieldType.year(), mock.getFieldType(0));\n+        assertEquals(DateTimeFieldType.monthOfYear(), mock.getFieldType(1));\n+        \n+        try {\n+            mock.getFieldType(-1);\n+            fail();\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            mock.getFieldType(2);\n+            fail();\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testGetFieldTypes() throws Throwable {\n+        MockPartial mock = new MockPartial();\n+        DateTimeFieldType[] vals = mock.getFieldTypes();\n+        assertEquals(2, vals.length);\n+        assertEquals(DateTimeFieldType.year(), vals[0]);\n+        assertEquals(DateTimeFieldType.monthOfYear(), vals[1]);\n+    }\n+\n+    public void testGetPropertyEquals() throws Throwable {\n+        MockProperty0 prop0 = new MockProperty0();\n+        assertEquals(true, prop0.equals(prop0));\n+        assertEquals(true, prop0.equals(new MockProperty0()));\n+        assertEquals(false, prop0.equals(new MockProperty1()));\n+        assertEquals(false, prop0.equals(new MockProperty0Val()));\n+        assertEquals(false, prop0.equals(new MockProperty0Field()));\n+        assertEquals(false, prop0.equals(new MockProperty0Chrono()));\n+        assertEquals(false, prop0.equals(\"\"));\n+        assertEquals(false, prop0.equals(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    static class MockPartial extends AbstractPartial {\n+        \n+        int[] val = new int[] {1970, 1};\n+        \n+        MockPartial() {\n+            super();\n+        }\n+\n+        protected DateTimeField getField(int index, Chronology chrono) {\n+            switch (index) {\n+                case 0:\n+                    return chrono.year();\n+                case 1:\n+                    return chrono.monthOfYear();\n+                default:\n+                    throw new IndexOutOfBoundsException();\n+            }\n+        }\n+\n+        public int size() {\n+            return 2;\n+        }\n+        \n+        public int getValue(int index) {\n+            return val[index];\n+        }\n+\n+        public void setValue(int index, int value) {\n+            val[index] = value;\n+        }\n+\n+        public Chronology getChronology() {\n+            return BuddhistChronology.getInstanceUTC();\n+        }\n+    }\n+    \n+    static class MockProperty0 extends AbstractPartialFieldProperty {\n+        MockPartial partial = new MockPartial();\n+        public DateTimeField getField() {\n+            return partial.getField(0);\n+        }\n+        public ReadablePartial getReadablePartial() {\n+            return partial;\n+        }\n+        public int get() {\n+            return partial.getValue(0);\n+        }\n+    }\n+    static class MockProperty1 extends AbstractPartialFieldProperty {\n+        MockPartial partial = new MockPartial();\n+        public DateTimeField getField() {\n+            return partial.getField(1);\n+        }\n+        public ReadablePartial getReadablePartial() {\n+            return partial;\n+        }\n+        public int get() {\n+            return partial.getValue(1);\n+        }\n+    }\n+    static class MockProperty0Field extends MockProperty0 {\n+        public DateTimeField getField() {\n+            return BuddhistChronology.getInstanceUTC().hourOfDay();\n+        }\n+    }\n+    static class MockProperty0Val extends MockProperty0 {\n+        public int get() {\n+            return 99;\n+        }\n+    }\n+    static class MockProperty0Chrono extends MockProperty0 {\n+        public ReadablePartial getReadablePartial() {\n+            return new MockPartial() {\n+                public Chronology getChronology() {\n+                    return ISOChronology.getInstanceUTC();\n+                }\n+            };\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestAll.java\n+/*\n+ *  Copyright 2001-2009 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Entry point for all tests in this package.\n+ * \n+ * @version $Revision$ $Date$\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestAll extends TestCase {\n+\n+    public TestAll(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite();\n+        suite.addTest(TestChronology.suite());\n+        suite.addTest(TestDateTimeFieldType.suite());\n+        suite.addTest(TestDurationFieldType.suite());\n+        \n+        suite.addTest(TestInstant_Constructors.suite());\n+        suite.addTest(TestInstant_Basics.suite());\n+        \n+        suite.addTest(TestDateTime_Constructors.suite());\n+        suite.addTest(TestDateTime_Basics.suite());\n+        suite.addTest(TestDateTime_Properties.suite());\n+        \n+        suite.addTest(TestMutableDateTime_Constructors.suite());\n+        suite.addTest(TestMutableDateTime_Basics.suite());\n+        suite.addTest(TestMutableDateTime_Sets.suite());\n+        suite.addTest(TestMutableDateTime_Adds.suite());\n+        suite.addTest(TestMutableDateTime_Properties.suite());\n+        \n+        suite.addTest(TestDateMidnight_Constructors.suite());\n+        suite.addTest(TestDateMidnight_Basics.suite());\n+        suite.addTest(TestDateMidnight_Properties.suite());\n+        \n+        suite.addTest(TestDuration_Constructors.suite());\n+        suite.addTest(TestDuration_Basics.suite());\n+        \n+        suite.addTest(TestInterval_Constructors.suite());\n+        suite.addTest(TestInterval_Basics.suite());\n+        \n+        suite.addTest(TestLocalDateTime_Constructors.suite());\n+        suite.addTest(TestLocalDateTime_Basics.suite());\n+        suite.addTest(TestLocalDateTime_Properties.suite());\n+        \n+        suite.addTest(TestLocalDate_Constructors.suite());\n+        suite.addTest(TestLocalDate_Basics.suite());\n+        suite.addTest(TestLocalDate_Properties.suite());\n+        \n+        suite.addTest(TestLocalTime_Constructors.suite());\n+        suite.addTest(TestLocalTime_Basics.suite());\n+        suite.addTest(TestLocalTime_Properties.suite());\n+        \n+        suite.addTest(TestMutableInterval_Constructors.suite());\n+        suite.addTest(TestMutableInterval_Basics.suite());\n+        suite.addTest(TestMutableInterval_Updates.suite());\n+        \n+        suite.addTest(TestPeriod_Constructors.suite());\n+        suite.addTest(TestPeriod_Basics.suite());\n+        \n+        suite.addTest(TestMutablePeriod_Constructors.suite());\n+        suite.addTest(TestMutablePeriod_Basics.suite());\n+        suite.addTest(TestMutablePeriod_Updates.suite());\n+        \n+        suite.addTest(TestBaseSingleFieldPeriod.suite());\n+        suite.addTest(TestYears.suite());\n+        suite.addTest(TestMonths.suite());\n+        suite.addTest(TestWeeks.suite());\n+        suite.addTest(TestDays.suite());\n+        suite.addTest(TestHours.suite());\n+        suite.addTest(TestMinutes.suite());\n+        suite.addTest(TestSeconds.suite());\n+        \n+        suite.addTest(TestTimeOfDay_Basics.suite());\n+        suite.addTest(TestTimeOfDay_Constructors.suite());\n+        suite.addTest(TestTimeOfDay_Properties.suite());\n+        \n+        suite.addTest(TestYearMonthDay_Basics.suite());\n+        suite.addTest(TestYearMonthDay_Constructors.suite());\n+        suite.addTest(TestYearMonthDay_Properties.suite());\n+        \n+        suite.addTest(TestYearMonth_Basics.suite());\n+        suite.addTest(TestYearMonth_Constructors.suite());\n+        suite.addTest(TestYearMonth_Properties.suite());\n+        \n+        suite.addTest(TestMonthDay_Basics.suite());\n+        suite.addTest(TestMonthDay_Constructors.suite());\n+        suite.addTest(TestMonthDay_Properties.suite());\n+        \n+        suite.addTest(TestPartial_Basics.suite());\n+        suite.addTest(TestPartial_Constructors.suite());\n+        suite.addTest(TestPartial_Properties.suite());\n+        suite.addTest(TestPartial_Match.suite());\n+        \n+        suite.addTest(TestAbstractPartial.suite());\n+        suite.addTest(TestBasePartial.suite());\n+        \n+        suite.addTest(TestDateTimeComparator.suite());\n+        suite.addTest(TestDateTimeConstants.suite());\n+        suite.addTest(TestDateTimeUtils.suite());\n+        suite.addTest(TestDateTimeZone.suite());\n+        suite.addTest(TestDateTimeZoneCutover.suite());\n+        suite.addTest(TestPeriodType.suite());\n+//        suite.addTest(TestParseISO.suite());\n+        suite.addTest(TestDurationField.suite());\n+        \n+        suite.addTest(TestSerialization.suite());\n+        suite.addTest(TestIllegalFieldValueException.suite());\n+        return suite;\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = {\n+            TestAll.class.getName()\n+        };\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestAllPackages.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.TimeZone;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Entry point for all tests in Joda Time.\n+ * \n+ * @version $Revision$ $Date$\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestAllPackages extends TestCase {\n+\n+    public TestAllPackages(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite();\n+        suite.addTest(org.joda.time.TestAll.suite());\n+        suite.addTest(org.joda.time.chrono.TestAll.suite());\n+        suite.addTest(org.joda.time.chrono.gj.TestAll.suite());\n+        suite.addTest(org.joda.time.convert.TestAll.suite());\n+        suite.addTest(org.joda.time.field.TestAll.suite());\n+        suite.addTest(org.joda.time.format.TestAll.suite());\n+        suite.addTest(org.joda.time.tz.TestAll.suite());\n+        return suite;\n+    }\n+\n+    public static void main(String args[]) {\n+        // setup a time zone other than one tester is in\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Asia/Seoul\"));\n+        \n+        // run tests\n+        String[] testCaseName = {\n+            TestAllPackages.class.getName()\n+        };\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestBasePartial.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.base.BasePartial;\n+\n+/**\n+ * This class is a Junit unit test for YearMonthDay.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestBasePartial extends TestCase {\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    \n+    private long TEST_TIME_NOW =\n+            (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    private long TEST_TIME1 =\n+        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private long TEST_TIME2 =\n+        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestBasePartial.class);\n+    }\n+\n+    public TestBasePartial(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetMethods() throws Throwable {\n+        MockPartial mock = new MockPartial();\n+        assertEquals(1970, mock.getYear());\n+        assertEquals(1, mock.getMonthOfYear());\n+        \n+        mock.setYear(2004);\n+        assertEquals(2004, mock.getYear());\n+        assertEquals(1, mock.getMonthOfYear());\n+        \n+        mock.setMonthOfYear(6);\n+        assertEquals(2004, mock.getYear());\n+        assertEquals(6, mock.getMonthOfYear());\n+        \n+        mock.set(2005, 5);\n+        assertEquals(2005, mock.getYear());\n+        assertEquals(5, mock.getMonthOfYear());\n+        \n+        try {\n+            mock.setMonthOfYear(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(2005, mock.getYear());\n+        assertEquals(5, mock.getMonthOfYear());\n+        \n+        try {\n+            mock.setMonthOfYear(13);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(2005, mock.getYear());\n+        assertEquals(5, mock.getMonthOfYear());\n+    }\n+\n+    static class MockPartial extends BasePartial {\n+        \n+        MockPartial() {\n+            super(new int[] {1970, 1}, null);\n+        }\n+\n+        protected DateTimeField getField(int index, Chronology chrono) {\n+            switch (index) {\n+                case 0:\n+                    return chrono.year();\n+                case 1:\n+                    return chrono.monthOfYear();\n+                default:\n+                    throw new IndexOutOfBoundsException();\n+            }\n+        }\n+\n+        public int size() {\n+            return 2;\n+        }\n+        \n+        public int getYear() {\n+            return getValue(0);\n+        }\n+        \n+        public void setYear(int year) {\n+            setValue(0, year);\n+        }\n+        \n+        public int getMonthOfYear() {\n+            return getValue(1);\n+        }\n+        \n+        public void setMonthOfYear(int month) {\n+            setValue(1, month);\n+        }\n+        \n+        public void set(int year, int month) {\n+            setValues(new int[] {year, month});\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestBaseSingleFieldPeriod.java\n+/*\n+ *  Copyright 2001-2009 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.base.BaseSingleFieldPeriod;\n+\n+/**\n+ * This class is a Junit unit test for BaseSingleFieldPeriod.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestBaseSingleFieldPeriod extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestBaseSingleFieldPeriod.class);\n+    }\n+\n+    public TestBaseSingleFieldPeriod(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+    }\n+\n+    protected void tearDown() throws Exception {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_between_RInstant() {\n+        // test using Days\n+        DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);\n+        DateTime end1 = new DateTime(2006, 6, 12, 12, 0, 0, 0, PARIS);\n+        DateTime end2 = new DateTime(2006, 6, 15, 18, 0, 0, 0, PARIS);\n+        \n+        assertEquals(3, Single.between(start, end1, DurationFieldType.days()));\n+        assertEquals(0, Single.between(start, start, DurationFieldType.days()));\n+        assertEquals(0, Single.between(end1, end1, DurationFieldType.days()));\n+        assertEquals(-3, Single.between(end1, start, DurationFieldType.days()));\n+        assertEquals(6, Single.between(start, end2, DurationFieldType.days()));\n+        try {\n+            Single.between(start, (ReadableInstant) null, DurationFieldType.days());\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        try {\n+            Single.between((ReadableInstant) null, end1, DurationFieldType.days());\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        try {\n+            Single.between((ReadableInstant) null, (ReadableInstant) null, DurationFieldType.days());\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testFactory_between_RPartial() {\n+        LocalDate start = new LocalDate(2006, 6, 9);\n+        LocalDate end1 = new LocalDate(2006, 6, 12);\n+        YearMonthDay end2 = new YearMonthDay(2006, 6, 15);\n+        \n+        Single zero = new Single(0);\n+        assertEquals(3, Single.between(start, end1, zero));\n+        assertEquals(0, Single.between(start, start, zero));\n+        assertEquals(0, Single.between(end1, end1, zero));\n+        assertEquals(-3, Single.between(end1, start, zero));\n+        assertEquals(6, Single.between(start, end2, zero));\n+        try {\n+            Single.between(start, (ReadablePartial) null, zero);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        try {\n+            Single.between((ReadablePartial) null, end1, zero);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        try {\n+            Single.between((ReadablePartial) null, (ReadablePartial) null, zero);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        try {\n+            Single.between(start, new LocalTime(), zero);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        try {\n+            Single.between(new Partial(DateTimeFieldType.dayOfWeek(), 2), new Partial(DateTimeFieldType.dayOfMonth(), 3), zero);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        Partial p = new Partial(\n+                new DateTimeFieldType[] {DateTimeFieldType.year(), DateTimeFieldType.hourOfDay()},\n+                new int[] {1, 2});\n+        try {\n+            Single.between(p, p, zero);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testFactory_standardPeriodIn_RPeriod() {\n+        assertEquals(0, Single.standardPeriodIn((ReadablePeriod) null, DateTimeConstants.MILLIS_PER_DAY));\n+        assertEquals(0, Single.standardPeriodIn(Period.ZERO, DateTimeConstants.MILLIS_PER_DAY));\n+        assertEquals(1, Single.standardPeriodIn(new Period(0, 0, 0, 1, 0, 0, 0, 0), DateTimeConstants.MILLIS_PER_DAY));\n+        assertEquals(123, Single.standardPeriodIn(Period.days(123), DateTimeConstants.MILLIS_PER_DAY));\n+        assertEquals(-987, Single.standardPeriodIn(Period.days(-987), DateTimeConstants.MILLIS_PER_DAY));\n+        assertEquals(1, Single.standardPeriodIn(Period.hours(47), DateTimeConstants.MILLIS_PER_DAY));\n+        assertEquals(2, Single.standardPeriodIn(Period.hours(48), DateTimeConstants.MILLIS_PER_DAY));\n+        assertEquals(2, Single.standardPeriodIn(Period.hours(49), DateTimeConstants.MILLIS_PER_DAY));\n+        assertEquals(14, Single.standardPeriodIn(Period.weeks(2), DateTimeConstants.MILLIS_PER_DAY));\n+        try {\n+            Single.standardPeriodIn(Period.months(1), DateTimeConstants.MILLIS_PER_DAY);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expeceted\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testValueIndexMethods() {\n+        Single test = new Single(20);\n+        assertEquals(1, test.size());\n+        assertEquals(20, test.getValue(0));\n+        try {\n+            test.getValue(1);\n+            fail();\n+        } catch (IndexOutOfBoundsException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testFieldTypeIndexMethods() {\n+        Single test = new Single(20);\n+        assertEquals(1, test.size());\n+        assertEquals(DurationFieldType.days(), test.getFieldType(0));\n+        try {\n+            test.getFieldType(1);\n+            fail();\n+        } catch (IndexOutOfBoundsException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testIsSupported() {\n+        Single test = new Single(20);\n+        assertEquals(false, test.isSupported(DurationFieldType.years()));\n+        assertEquals(false, test.isSupported(DurationFieldType.months()));\n+        assertEquals(false, test.isSupported(DurationFieldType.weeks()));\n+        assertEquals(true, test.isSupported(DurationFieldType.days()));\n+        assertEquals(false, test.isSupported(DurationFieldType.hours()));\n+        assertEquals(false, test.isSupported(DurationFieldType.minutes()));\n+        assertEquals(false, test.isSupported(DurationFieldType.seconds()));\n+        assertEquals(false, test.isSupported(DurationFieldType.millis()));\n+    }        \n+\n+    public void testGet() {\n+        Single test = new Single(20);\n+        assertEquals(0, test.get(DurationFieldType.years()));\n+        assertEquals(0, test.get(DurationFieldType.months()));\n+        assertEquals(0, test.get(DurationFieldType.weeks()));\n+        assertEquals(20, test.get(DurationFieldType.days()));\n+        assertEquals(0, test.get(DurationFieldType.hours()));\n+        assertEquals(0, test.get(DurationFieldType.minutes()));\n+        assertEquals(0, test.get(DurationFieldType.seconds()));\n+        assertEquals(0, test.get(DurationFieldType.millis()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testEqualsHashCode() {\n+        Single testA = new Single(20);\n+        Single testB = new Single(20);\n+        assertEquals(true, testA.equals(testB));\n+        assertEquals(true, testB.equals(testA));\n+        assertEquals(true, testA.equals(testA));\n+        assertEquals(true, testB.equals(testB));\n+        assertEquals(true, testA.hashCode() == testB.hashCode());\n+        assertEquals(true, testA.hashCode() == testA.hashCode());\n+        assertEquals(true, testB.hashCode() == testB.hashCode());\n+        \n+        Single testC = new Single(30);\n+        assertEquals(false, testA.equals(testC));\n+        assertEquals(false, testB.equals(testC));\n+        assertEquals(false, testC.equals(testA));\n+        assertEquals(false, testC.equals(testB));\n+        assertEquals(false, testA.hashCode() == testC.hashCode());\n+        assertEquals(false, testB.hashCode() == testC.hashCode());\n+        \n+        assertEquals(true, testA.equals(Days.days(20)));\n+        assertEquals(true, testA.equals(new Period(0, 0, 0, 20, 0, 0, 0, 0, PeriodType.days())));\n+        assertEquals(false, testA.equals(Period.days(2)));\n+        assertEquals(false, testA.equals(\"Hello\"));\n+        assertEquals(false, testA.equals(Hours.hours(2)));\n+        assertEquals(false, testA.equals(null));\n+    }\n+\n+    public void testCompareTo() {\n+        Single test1 = new Single(21);\n+        Single test2 = new Single(22);\n+        Single test3 = new Single(23);\n+        assertEquals(true, test1.compareTo(test1) == 0);\n+        assertEquals(true, test1.compareTo(test2) < 0);\n+        assertEquals(true, test1.compareTo(test3) < 0);\n+        assertEquals(true, test2.compareTo(test1) > 0);\n+        assertEquals(true, test2.compareTo(test2) == 0);\n+        assertEquals(true, test2.compareTo(test3) < 0);\n+        assertEquals(true, test3.compareTo(test1) > 0);\n+        assertEquals(true, test3.compareTo(test2) > 0);\n+        assertEquals(true, test3.compareTo(test3) == 0);\n+        \n+//        try {\n+//            test1.compareTo(\"Hello\");\n+//            fail();\n+//        } catch (ClassCastException ex) {\n+//            // expected\n+//        }\n+//        try {\n+//            test1.compareTo(new Period(0, 0, 0, 21, 0, 0, 0, 0, PeriodType.days()));\n+//            fail();\n+//        } catch (ClassCastException ex) {\n+//            // expected\n+//        }\n+        try {\n+            test1.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToPeriod() {\n+        Single test = new Single(20);\n+        Period expected = Period.days(20);\n+        assertEquals(expected, test.toPeriod());\n+    }\n+\n+    public void testToMutablePeriod() {\n+        Single test = new Single(20);\n+        MutablePeriod expected = new MutablePeriod(0, 0, 0, 20, 0, 0, 0, 0);\n+        assertEquals(expected, test.toMutablePeriod());\n+    }\n+\n+//    public void testToDurationFrom() {\n+//        Period test = new Period(123L);\n+//        assertEquals(new Duration(123L), test.toDurationFrom(new Instant(0L)));\n+//    }\n+//\n+//    public void testToDurationTo() {\n+//        Period test = new Period(123L);\n+//        assertEquals(new Duration(123L), test.toDurationTo(new Instant(123L)));\n+//    }\n+//\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetSetValue() {\n+        Single test = new Single(20);\n+        assertEquals(20, test.getValue());\n+        test.setValue(10);\n+        assertEquals(10, test.getValue());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /** Test class. */\n+    static class Single extends BaseSingleFieldPeriod {\n+\n+        public Single(int period) {\n+            super(period);\n+        }\n+        \n+        public static int between(ReadableInstant start, ReadableInstant end, DurationFieldType field) {\n+            return BaseSingleFieldPeriod.between(start, end, field);\n+        }\n+        \n+        public static int between(ReadablePartial start, ReadablePartial end, ReadablePeriod zeroInstance) {\n+            return BaseSingleFieldPeriod.between(start, end, zeroInstance);\n+        }\n+        \n+        public static int standardPeriodIn(ReadablePeriod period, long millisPerUnit) {\n+            return BaseSingleFieldPeriod.standardPeriodIn(period, millisPerUnit);\n+        }\n+        \n+        public DurationFieldType getFieldType() {\n+            return DurationFieldType.days();\n+        }\n+\n+        public PeriodType getPeriodType() {\n+            return PeriodType.days();\n+        }\n+        \n+        public int getValue() {\n+            return super.getValue();\n+        }\n+        \n+        public void setValue(int value) {\n+            super.setValue(value);\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestChronology.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.EthiopicChronology;\n+import org.joda.time.chrono.GJChronology;\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.chrono.IslamicChronology;\n+import org.joda.time.chrono.JulianChronology;\n+import org.joda.time.chrono.LenientChronology;\n+import org.joda.time.chrono.LimitChronology;\n+import org.joda.time.chrono.StrictChronology;\n+import org.joda.time.chrono.ZonedChronology;\n+\n+/**\n+ * This class is a Junit unit test for Chronology.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestChronology extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+//    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestChronology.class);\n+    }\n+\n+    public TestChronology(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testEqualsHashCode_ISO() {\n+        Chronology chrono1 = ISOChronology.getInstanceUTC();\n+        Chronology chrono2 = ISOChronology.getInstanceUTC();\n+        Chronology chrono3 = ISOChronology.getInstance();\n+        \n+        assertEquals(true, chrono1.equals(chrono2));\n+        assertEquals(false, chrono1.equals(chrono3));\n+        \n+        DateTime dt1 = new DateTime(0L, chrono1);\n+        DateTime dt2 = new DateTime(0L, chrono2);\n+        DateTime dt3 = new DateTime(0L, chrono3);\n+        \n+        assertEquals(true, dt1.equals(dt2));\n+        assertEquals(false, dt1.equals(dt3));\n+        \n+        assertEquals(true, chrono1.hashCode() == chrono2.hashCode());\n+        assertEquals(false, chrono1.hashCode() == chrono3.hashCode());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testEqualsHashCode_Lenient() {\n+        Chronology chrono1 = LenientChronology.getInstance(ISOChronology.getInstanceUTC());\n+        Chronology chrono2 = LenientChronology.getInstance(ISOChronology.getInstanceUTC());\n+        Chronology chrono3 = LenientChronology.getInstance(ISOChronology.getInstance());\n+        \n+        assertEquals(true, chrono1.equals(chrono2));\n+        assertEquals(false, chrono1.equals(chrono3));\n+        \n+        DateTime dt1 = new DateTime(0L, chrono1);\n+        DateTime dt2 = new DateTime(0L, chrono2);\n+        DateTime dt3 = new DateTime(0L, chrono3);\n+        \n+        assertEquals(true, dt1.equals(dt2));\n+        assertEquals(false, dt1.equals(dt3));\n+        \n+        assertEquals(true, chrono1.hashCode() == chrono2.hashCode());\n+        assertEquals(false, chrono1.hashCode() == chrono3.hashCode());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testEqualsHashCode_Strict() {\n+        Chronology chrono1 = StrictChronology.getInstance(ISOChronology.getInstanceUTC());\n+        Chronology chrono2 = StrictChronology.getInstance(ISOChronology.getInstanceUTC());\n+        Chronology chrono3 = StrictChronology.getInstance(ISOChronology.getInstance());\n+        \n+        assertEquals(true, chrono1.equals(chrono2));\n+        assertEquals(false, chrono1.equals(chrono3));\n+        \n+        DateTime dt1 = new DateTime(0L, chrono1);\n+        DateTime dt2 = new DateTime(0L, chrono2);\n+        DateTime dt3 = new DateTime(0L, chrono3);\n+        \n+        assertEquals(true, dt1.equals(dt2));\n+        assertEquals(false, dt1.equals(dt3));\n+        \n+        assertEquals(true, chrono1.hashCode() == chrono2.hashCode());\n+        assertEquals(false, chrono1.hashCode() == chrono3.hashCode());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testEqualsHashCode_Limit() {\n+        DateTime lower = new DateTime(0L);\n+        DateTime higherA = new DateTime(1000000L);\n+        DateTime higherB = new DateTime(2000000L);\n+        \n+        Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA);\n+        Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA);\n+        Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB);\n+        Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA);\n+        \n+        assertEquals(true, chrono1.equals(chrono2A));\n+        assertEquals(false, chrono1.equals(chrono2B));\n+        assertEquals(false, chrono1.equals(chrono3));\n+        \n+        DateTime dt1 = new DateTime(0L, chrono1);\n+        DateTime dt2A = new DateTime(0L, chrono2A);\n+        DateTime dt2B = new DateTime(0L, chrono2B);\n+        DateTime dt3 = new DateTime(0L, chrono3);\n+        \n+        assertEquals(true, dt1.equals(dt2A));\n+        assertEquals(false, dt1.equals(dt2B));\n+        assertEquals(false, dt1.equals(dt3));\n+        \n+        assertEquals(true, chrono1.hashCode() == chrono2A.hashCode());\n+        assertEquals(false, chrono1.hashCode() == chrono2B.hashCode());\n+        assertEquals(false, chrono1.hashCode() == chrono3.hashCode());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testEqualsHashCode_Zoned() {\n+        DateTimeZone zoneA = DateTimeZone.forID(\"Europe/Paris\");\n+        DateTimeZone zoneB = DateTimeZone.forID(\"Asia/Tokyo\");\n+        \n+        Chronology chrono1 = ZonedChronology.getInstance(ISOChronology.getInstanceUTC(), zoneA);\n+        Chronology chrono2 = ZonedChronology.getInstance(ISOChronology.getInstanceUTC(), zoneA);\n+        Chronology chrono3 = ZonedChronology.getInstance(ISOChronology.getInstanceUTC(), zoneB);\n+        \n+        assertEquals(true, chrono1.equals(chrono2));\n+        assertEquals(false, chrono1.equals(chrono3));\n+        \n+        DateTime dt1 = new DateTime(0L, chrono1);\n+        DateTime dt2 = new DateTime(0L, chrono2);\n+        DateTime dt3 = new DateTime(0L, chrono3);\n+        \n+        assertEquals(true, dt1.equals(dt2));\n+        assertEquals(false, dt1.equals(dt3));\n+        \n+        assertEquals(true, chrono1.hashCode() == chrono2.hashCode());\n+        assertEquals(false, chrono1.hashCode() == chrono3.hashCode());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        DateTimeZone paris = DateTimeZone.forID(\"Europe/Paris\");\n+        ISOChronology isoParis = ISOChronology.getInstance(paris);\n+        \n+        assertEquals(\"ISOChronology[Europe/Paris]\", isoParis.toString());\n+        assertEquals(\"GJChronology[Europe/Paris]\", GJChronology.getInstance(paris).toString());\n+        assertEquals(\"GregorianChronology[Europe/Paris]\", GregorianChronology.getInstance(paris).toString());\n+        assertEquals(\"JulianChronology[Europe/Paris]\", JulianChronology.getInstance(paris).toString());\n+        assertEquals(\"BuddhistChronology[Europe/Paris]\", BuddhistChronology.getInstance(paris).toString());\n+        assertEquals(\"CopticChronology[Europe/Paris]\", CopticChronology.getInstance(paris).toString());\n+        assertEquals(\"EthiopicChronology[Europe/Paris]\", EthiopicChronology.getInstance(paris).toString());\n+        assertEquals(\"IslamicChronology[Europe/Paris]\", IslamicChronology.getInstance(paris).toString());\n+        \n+        assertEquals(\"LenientChronology[ISOChronology[Europe/Paris]]\", LenientChronology.getInstance(isoParis).toString());\n+        assertEquals(\"StrictChronology[ISOChronology[Europe/Paris]]\", StrictChronology.getInstance(isoParis).toString());\n+        assertEquals(\"LimitChronology[ISOChronology[Europe/Paris], NoLimit, NoLimit]\", LimitChronology.getInstance(isoParis, null, null).toString());\n+        assertEquals(\"ZonedChronology[ISOChronology[UTC], Europe/Paris]\", ZonedChronology.getInstance(isoParis, paris).toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestDateMidnight_Basics.java\n+/*\n+ *  Copyright 2001-2009 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.base.AbstractInstant;\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.GJChronology;\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.field.UnsupportedDateTimeField;\n+import org.joda.time.field.UnsupportedDurationField;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n+\n+/**\n+ * This class is a Junit unit test for DateMidnight.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestDateMidnight_Basics extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone NEWYORK = DateTimeZone.forID(\"America/New_York\");\n+\n+    // the default time zone is set to LONDON in setUp()\n+    // we have to hard code LONDON here (instead of ISOChronology.getInstance() etc.)\n+    // as TestAll sets up a different time zone for better all-round testing\n+    private static final ISOChronology ISO_DEFAULT = ISOChronology.getInstance(LONDON);\n+    private static final ISOChronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static final GJChronology GJ_DEFAULT = GJChronology.getInstance(LONDON);\n+    private static final GregorianChronology GREGORIAN_DEFAULT = GregorianChronology.getInstance(LONDON);\n+    private static final GregorianChronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);\n+    private static final BuddhistChronology BUDDHIST_DEFAULT = BuddhistChronology.getInstance(LONDON);\n+    private static final CopticChronology COPTIC_DEFAULT = CopticChronology.getInstance(LONDON);\n+\n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW_UTC =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+    private long TEST_TIME_NOW_LONDON =\n+            TEST_TIME_NOW_UTC - DateTimeConstants.MILLIS_PER_HOUR;\n+//    private long TEST_TIME_NOW_PARIS =\n+//            TEST_TIME_NOW_UTC - 2*DateTimeConstants.MILLIS_PER_HOUR;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1_UTC =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    private long TEST_TIME1_LONDON =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            - DateTimeConstants.MILLIS_PER_HOUR;\n+    private long TEST_TIME1_PARIS =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            - 2*DateTimeConstants.MILLIS_PER_HOUR;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2_UTC =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    private long TEST_TIME2_LONDON =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+             - DateTimeConstants.MILLIS_PER_HOUR;\n+    private long TEST_TIME2_PARIS =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+             - 2*DateTimeConstants.MILLIS_PER_HOUR;\n+    \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestDateMidnight_Basics.class);\n+    }\n+\n+    public TestDateMidnight_Basics(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW_UTC);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW_UTC).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1_UTC).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2_UTC).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGet_DateTimeField() {\n+        DateMidnight test = new DateMidnight();\n+        assertEquals(1, test.get(ISO_DEFAULT.era()));\n+        assertEquals(20, test.get(ISO_DEFAULT.centuryOfEra()));\n+        assertEquals(2, test.get(ISO_DEFAULT.yearOfCentury()));\n+        assertEquals(2002, test.get(ISO_DEFAULT.yearOfEra()));\n+        assertEquals(2002, test.get(ISO_DEFAULT.year()));\n+        assertEquals(6, test.get(ISO_DEFAULT.monthOfYear()));\n+        assertEquals(9, test.get(ISO_DEFAULT.dayOfMonth()));\n+        assertEquals(2002, test.get(ISO_DEFAULT.weekyear()));\n+        assertEquals(23, test.get(ISO_DEFAULT.weekOfWeekyear()));\n+        assertEquals(7, test.get(ISO_DEFAULT.dayOfWeek()));\n+        assertEquals(160, test.get(ISO_DEFAULT.dayOfYear()));\n+        assertEquals(0, test.get(ISO_DEFAULT.halfdayOfDay()));\n+        assertEquals(0, test.get(ISO_DEFAULT.hourOfHalfday()));\n+        assertEquals(24, test.get(ISO_DEFAULT.clockhourOfDay()));\n+        assertEquals(12, test.get(ISO_DEFAULT.clockhourOfHalfday()));\n+        assertEquals(0, test.get(ISO_DEFAULT.hourOfDay()));\n+        assertEquals(0, test.get(ISO_DEFAULT.minuteOfHour()));\n+        assertEquals(0, test.get(ISO_DEFAULT.minuteOfDay()));\n+        assertEquals(0, test.get(ISO_DEFAULT.secondOfMinute()));\n+        assertEquals(0, test.get(ISO_DEFAULT.secondOfDay()));\n+        assertEquals(0, test.get(ISO_DEFAULT.millisOfSecond()));\n+        assertEquals(0, test.get(ISO_DEFAULT.millisOfDay()));\n+        try {\n+            test.get((DateTimeField) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testGet_DateTimeFieldType() {\n+        DateMidnight test = new DateMidnight();\n+        assertEquals(1, test.get(DateTimeFieldType.era()));\n+        assertEquals(20, test.get(DateTimeFieldType.centuryOfEra()));\n+        assertEquals(2, test.get(DateTimeFieldType.yearOfCentury()));\n+        assertEquals(2002, test.get(DateTimeFieldType.yearOfEra()));\n+        assertEquals(2002, test.get(DateTimeFieldType.year()));\n+        assertEquals(6, test.get(DateTimeFieldType.monthOfYear()));\n+        assertEquals(9, test.get(DateTimeFieldType.dayOfMonth()));\n+        assertEquals(2002, test.get(DateTimeFieldType.weekyear()));\n+        assertEquals(23, test.get(DateTimeFieldType.weekOfWeekyear()));\n+        assertEquals(7, test.get(DateTimeFieldType.dayOfWeek()));\n+        assertEquals(160, test.get(DateTimeFieldType.dayOfYear()));\n+        assertEquals(0, test.get(DateTimeFieldType.halfdayOfDay()));\n+        assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday()));\n+        assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay()));\n+        assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday()));\n+        assertEquals(0, test.get(DateTimeFieldType.hourOfDay()));\n+        assertEquals(0, test.get(DateTimeFieldType.minuteOfHour()));\n+        assertEquals(0, test.get(DateTimeFieldType.minuteOfDay()));\n+        assertEquals(0, test.get(DateTimeFieldType.secondOfMinute()));\n+        assertEquals(0, test.get(DateTimeFieldType.secondOfDay()));\n+        assertEquals(0, test.get(DateTimeFieldType.millisOfSecond()));\n+        assertEquals(0, test.get(DateTimeFieldType.millisOfDay()));\n+        try {\n+            test.get((DateTimeFieldType) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetters() {\n+        DateMidnight test = new DateMidnight();\n+        \n+        assertEquals(ISO_DEFAULT, test.getChronology());\n+        assertEquals(LONDON, test.getZone());\n+        assertEquals(TEST_TIME_NOW_LONDON, test.getMillis());\n+        \n+        assertEquals(1, test.getEra());\n+        assertEquals(20, test.getCenturyOfEra());\n+        assertEquals(2, test.getYearOfCentury());\n+        assertEquals(2002, test.getYearOfEra());\n+        assertEquals(2002, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(2002, test.getWeekyear());\n+        assertEquals(23, test.getWeekOfWeekyear());\n+        assertEquals(7, test.getDayOfWeek());\n+        assertEquals(160, test.getDayOfYear());\n+        assertEquals(0, test.getHourOfDay());\n+        assertEquals(0, test.getMinuteOfHour());\n+        assertEquals(0, test.getMinuteOfDay());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getSecondOfDay());\n+        assertEquals(0, test.getMillisOfSecond());\n+        assertEquals(0, test.getMillisOfDay());\n+    }\n+\n+    public void testWithers() {\n+        DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT);\n+        check(test.withYear(2000), 2000, 6, 9);\n+        check(test.withMonthOfYear(2), 1970, 2, 9);\n+        check(test.withDayOfMonth(2), 1970, 6, 2);\n+        check(test.withDayOfYear(6), 1970, 1, 6);\n+        check(test.withDayOfWeek(6), 1970, 6, 13);\n+        check(test.withWeekOfWeekyear(6), 1970, 2, 3);\n+        check(test.withWeekyear(1971), 1971, 6, 15);\n+        check(test.withYearOfCentury(60), 1960, 6, 9);\n+        check(test.withCenturyOfEra(21), 2070, 6, 9);\n+        check(test.withYearOfEra(1066), 1066, 6, 9);\n+        check(test.withEra(DateTimeConstants.BC), -1970, 6, 9);\n+        \n+        try {\n+            test.withMonthOfYear(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.withMonthOfYear(13);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testEqualsHashCode() {\n+        DateMidnight test1 = new DateMidnight(TEST_TIME1_UTC);\n+        DateMidnight test2 = new DateMidnight(TEST_TIME1_UTC);\n+        assertEquals(true, test1.equals(test2));\n+        assertEquals(true, test2.equals(test1));\n+        assertEquals(true, test1.equals(test1));\n+        assertEquals(true, test2.equals(test2));\n+        assertEquals(true, test1.hashCode() == test2.hashCode());\n+        assertEquals(true, test1.hashCode() == test1.hashCode());\n+        assertEquals(true, test2.hashCode() == test2.hashCode());\n+        \n+        DateMidnight test3 = new DateMidnight(TEST_TIME2_UTC);\n+        assertEquals(false, test1.equals(test3));\n+        assertEquals(false, test2.equals(test3));\n+        assertEquals(false, test3.equals(test1));\n+        assertEquals(false, test3.equals(test2));\n+        assertEquals(false, test1.hashCode() == test3.hashCode());\n+        assertEquals(false, test2.hashCode() == test3.hashCode());\n+        \n+        assertEquals(false, test1.equals(\"Hello\"));\n+        assertEquals(true, test1.equals(new MockInstant()));\n+        assertEquals(false, test1.equals(new DateMidnight(TEST_TIME1_UTC, GREGORIAN_DEFAULT)));\n+    }\n+    \n+    class MockInstant extends AbstractInstant {\n+        public String toString() {\n+            return null;\n+        }\n+        public long getMillis() {\n+            return TEST_TIME1_LONDON;\n+        }\n+        public Chronology getChronology() {\n+            return ISO_DEFAULT;\n+        }\n+    }\n+\n+    public void testCompareTo() {\n+        DateMidnight test1 = new DateMidnight(TEST_TIME1_UTC);\n+        DateMidnight test1a = new DateMidnight(TEST_TIME1_UTC);\n+        assertEquals(0, test1.compareTo(test1a));\n+        assertEquals(0, test1a.compareTo(test1));\n+        assertEquals(0, test1.compareTo(test1));\n+        assertEquals(0, test1a.compareTo(test1a));\n+        \n+        DateMidnight test2 = new DateMidnight(TEST_TIME2_UTC);\n+        assertEquals(-1, test1.compareTo(test2));\n+        assertEquals(+1, test2.compareTo(test1));\n+        \n+        DateMidnight test3 = new DateMidnight(TEST_TIME2_UTC, GREGORIAN_PARIS);\n+        assertEquals(-1, test1.compareTo(test3));\n+        assertEquals(+1, test3.compareTo(test1));\n+        assertEquals(-1, test3.compareTo(test2));  // midnight paris before london\n+        \n+        assertEquals(+1, test2.compareTo(new MockInstant()));\n+        assertEquals(0, test1.compareTo(new MockInstant()));\n+        \n+        try {\n+            test1.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+//        try {\n+//            test1.compareTo(new Date());\n+//            fail();\n+//        } catch (ClassCastException ex) {}\n+    }\n+    \n+    public void testIsEqual() {\n+        DateMidnight test1 = new DateMidnight(TEST_TIME1_UTC);\n+        DateMidnight test1a = new DateMidnight(TEST_TIME1_UTC);\n+        assertEquals(true, test1.isEqual(test1a));\n+        assertEquals(true, test1a.isEqual(test1));\n+        assertEquals(true, test1.isEqual(test1));\n+        assertEquals(true, test1a.isEqual(test1a));\n+        \n+        DateMidnight test2 = new DateMidnight(TEST_TIME2_UTC);\n+        assertEquals(false, test1.isEqual(test2));\n+        assertEquals(false, test2.isEqual(test1));\n+        \n+        DateMidnight test3 = new DateMidnight(TEST_TIME2_UTC, GREGORIAN_PARIS);\n+        assertEquals(false, test1.isEqual(test3));\n+        assertEquals(false, test3.isEqual(test1));\n+        assertEquals(false, test3.isEqual(test2));  // midnight paris before london\n+        \n+        assertEquals(false, test2.isEqual(new MockInstant()));\n+        assertEquals(true, test1.isEqual(new MockInstant()));\n+        \n+        assertEquals(false, new DateMidnight(TEST_TIME_NOW_UTC + DateTimeConstants.MILLIS_PER_DAY, DateTimeZone.UTC).isEqual(null));\n+        assertEquals(true, new DateMidnight(TEST_TIME_NOW_UTC, DateTimeZone.UTC).isEqual(null));\n+        assertEquals(false, new DateMidnight(TEST_TIME_NOW_UTC - DateTimeConstants.MILLIS_PER_DAY, DateTimeZone.UTC).isEqual(null));\n+        \n+        assertEquals(false, new DateMidnight(2004, 6, 9).isEqual(new DateTime(2004, 6, 8, 23, 59, 59, 999)));\n+        assertEquals(true, new DateMidnight(2004, 6, 9).isEqual(new DateTime(2004, 6, 9, 0, 0, 0, 0)));\n+        assertEquals(false, new DateMidnight(2004, 6, 9).isEqual(new DateTime(2004, 6, 9, 0, 0, 0, 1)));\n+    }\n+    \n+    public void testIsBefore() {\n+        DateMidnight test1 = new DateMidnight(TEST_TIME1_UTC);\n+        DateMidnight test1a = new DateMidnight(TEST_TIME1_UTC);\n+        assertEquals(false, test1.isBefore(test1a));\n+        assertEquals(false, test1a.isBefore(test1));\n+        assertEquals(false, test1.isBefore(test1));\n+        assertEquals(false, test1a.isBefore(test1a));\n+        \n+        DateMidnight test2 = new DateMidnight(TEST_TIME2_UTC);\n+        assertEquals(true, test1.isBefore(test2));\n+        assertEquals(false, test2.isBefore(test1));\n+        \n+        DateMidnight test3 = new DateMidnight(TEST_TIME2_UTC, GREGORIAN_PARIS);\n+        assertEquals(true, test1.isBefore(test3));\n+        assertEquals(false, test3.isBefore(test1));\n+        assertEquals(true, test3.isBefore(test2));  // midnight paris before london\n+        \n+        assertEquals(false, test2.isBefore(new MockInstant()));\n+        assertEquals(false, test1.isBefore(new MockInstant()));\n+        \n+        assertEquals(false, new DateMidnight(TEST_TIME_NOW_UTC + DateTimeConstants.MILLIS_PER_DAY, DateTimeZone.UTC).isBefore(null));\n+        assertEquals(false, new DateMidnight(TEST_TIME_NOW_UTC, DateTimeZone.UTC).isBefore(null));\n+        assertEquals(true, new DateMidnight(TEST_TIME_NOW_UTC - DateTimeConstants.MILLIS_PER_DAY, DateTimeZone.UTC).isBefore(null));\n+        \n+        assertEquals(false, new DateMidnight(2004, 6, 9).isBefore(new DateTime(2004, 6, 8, 23, 59, 59, 999)));\n+        assertEquals(false, new DateMidnight(2004, 6, 9).isBefore(new DateTime(2004, 6, 9, 0, 0, 0, 0)));\n+        assertEquals(true, new DateMidnight(2004, 6, 9).isBefore(new DateTime(2004, 6, 9, 0, 0, 0, 1)));\n+    }\n+    \n+    public void testIsAfter() {\n+        DateMidnight test1 = new DateMidnight(TEST_TIME1_UTC);\n+        DateMidnight test1a = new DateMidnight(TEST_TIME1_UTC);\n+        assertEquals(false, test1.isAfter(test1a));\n+        assertEquals(false, test1a.isAfter(test1));\n+        assertEquals(false, test1.isAfter(test1));\n+        assertEquals(false, test1a.isAfter(test1a));\n+        \n+        DateMidnight test2 = new DateMidnight(TEST_TIME2_UTC);\n+        assertEquals(false, test1.isAfter(test2));\n+        assertEquals(true, test2.isAfter(test1));\n+        \n+        DateMidnight test3 = new DateMidnight(TEST_TIME2_UTC, GREGORIAN_PARIS);\n+        assertEquals(false, test1.isAfter(test3));\n+        assertEquals(true, test3.isAfter(test1));\n+        assertEquals(false, test3.isAfter(test2));  // midnight paris before london\n+        \n+        assertEquals(true, test2.isAfter(new MockInstant()));\n+        assertEquals(false, test1.isAfter(new MockInstant()));\n+        \n+        assertEquals(true, new DateMidnight(TEST_TIME_NOW_UTC + DateTimeConstants.MILLIS_PER_DAY, DateTimeZone.UTC).isAfter(null));\n+        assertEquals(false, new DateMidnight(TEST_TIME_NOW_UTC, DateTimeZone.UTC).isAfter(null));\n+        assertEquals(false, new DateMidnight(TEST_TIME_NOW_UTC - DateTimeConstants.MILLIS_PER_DAY, DateTimeZone.UTC).isAfter(null));\n+        \n+        assertEquals(true, new DateMidnight(2004, 6, 9).isAfter(new DateTime(2004, 6, 8, 23, 59, 59, 999)));\n+        assertEquals(false, new DateMidnight(2004, 6, 9).isAfter(new DateTime(2004, 6, 9, 0, 0, 0, 0)));\n+        assertEquals(false, new DateMidnight(2004, 6, 9).isAfter(new DateTime(2004, 6, 9, 0, 0, 0, 1)));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        DateMidnight test = new DateMidnight(TEST_TIME_NOW_UTC);\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        DateMidnight result = (DateMidnight) ois.readObject();\n+        ois.close();\n+        \n+        assertEquals(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        DateMidnight test = new DateMidnight(TEST_TIME_NOW_UTC);\n+        assertEquals(\"2002-06-09T00:00:00.000+01:00\", test.toString());\n+        \n+        test = new DateMidnight(TEST_TIME_NOW_UTC, PARIS);\n+        assertEquals(\"2002-06-09T00:00:00.000+02:00\", test.toString());\n+        \n+        test = new DateMidnight(TEST_TIME_NOW_UTC, NEWYORK);\n+        assertEquals(\"2002-06-08T00:00:00.000-04:00\", test.toString());  // the 8th\n+    }\n+\n+    public void testToString_String() {\n+        DateMidnight test = new DateMidnight(TEST_TIME_NOW_UTC);\n+        assertEquals(\"2002 00\", test.toString(\"yyyy HH\"));\n+        assertEquals(\"2002-06-09T00:00:00.000+01:00\", test.toString((String) null));\n+    }\n+\n+    public void testToString_String_String() {\n+        DateMidnight test = new DateMidnight(TEST_TIME_NOW_UTC);\n+        assertEquals(\"Sun 9/6\", test.toString(\"EEE d/M\", Locale.ENGLISH));\n+        assertEquals(\"dim. 9/6\", test.toString(\"EEE d/M\", Locale.FRENCH));\n+        assertEquals(\"2002-06-09T00:00:00.000+01:00\", test.toString(null, Locale.ENGLISH));\n+        assertEquals(\"Sun 9/6\", test.toString(\"EEE d/M\", null));\n+        assertEquals(\"2002-06-09T00:00:00.000+01:00\", test.toString(null, null));\n+    }\n+\n+    public void testToString_DTFormatter() {\n+        DateMidnight test = new DateMidnight(TEST_TIME_NOW_UTC);\n+        assertEquals(\"2002 00\", test.toString(DateTimeFormat.forPattern(\"yyyy HH\")));\n+        assertEquals(\"2002-06-09T00:00:00.000+01:00\", test.toString((DateTimeFormatter) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToInstant() {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC);\n+        Instant result = test.toInstant();\n+        assertEquals(TEST_TIME1_LONDON, result.getMillis());\n+    }\n+\n+    public void testToDateTime() {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, PARIS);\n+        DateTime result = test.toDateTime();\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(TEST_TIME1_PARIS, result.getMillis());\n+        assertEquals(PARIS, result.getZone());\n+    }\n+\n+    public void testToDateTimeISO() {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, PARIS);\n+        DateTime result = test.toDateTimeISO();\n+        assertSame(DateTime.class, result.getClass());\n+        assertSame(ISOChronology.class, result.getChronology().getClass());\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISO_PARIS, result.getChronology());\n+    }\n+\n+    public void testToDateTime_DateTimeZone() {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC);\n+        DateTime result = test.toDateTime(LONDON);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(TEST_TIME1_LONDON, result.getMillis());\n+        assertEquals(LONDON, result.getZone());\n+\n+        test = new DateMidnight(TEST_TIME1_UTC);\n+        result = test.toDateTime(PARIS);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(TEST_TIME1_LONDON, result.getMillis());\n+        assertEquals(PARIS, result.getZone());\n+\n+        test = new DateMidnight(TEST_TIME1_UTC, PARIS);\n+        result = test.toDateTime((DateTimeZone) null);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(TEST_TIME1_PARIS, result.getMillis());\n+        assertEquals(LONDON, result.getZone());\n+\n+        test = new DateMidnight(TEST_TIME1_UTC);\n+        result = test.toDateTime((DateTimeZone) null);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(TEST_TIME1_LONDON, result.getMillis());\n+        assertEquals(LONDON, result.getZone());\n+    }\n+\n+    public void testToDateTime_Chronology() {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC);\n+        DateTime result = test.toDateTime(ISO_DEFAULT);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(TEST_TIME1_LONDON, result.getMillis());\n+        assertEquals(LONDON, result.getZone());\n+\n+        test = new DateMidnight(TEST_TIME1_UTC);\n+        result = test.toDateTime(GREGORIAN_PARIS);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(TEST_TIME1_LONDON, result.getMillis());\n+        assertEquals(GREGORIAN_PARIS, result.getChronology());\n+\n+        test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS);\n+        result = test.toDateTime((Chronology) null);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(TEST_TIME1_PARIS, result.getMillis());\n+        assertEquals(ISO_DEFAULT, result.getChronology());\n+\n+        test = new DateMidnight(TEST_TIME1_UTC);\n+        result = test.toDateTime((Chronology) null);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(TEST_TIME1_LONDON, result.getMillis());\n+        assertEquals(ISO_DEFAULT, result.getChronology());\n+    }\n+\n+    public void testToMutableDateTime() {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, PARIS);\n+        MutableDateTime result = test.toMutableDateTime();\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISO_PARIS, result.getChronology());\n+    }\n+\n+    public void testToMutableDateTimeISO() {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, PARIS);\n+        MutableDateTime result = test.toMutableDateTimeISO();\n+        assertSame(MutableDateTime.class, result.getClass());\n+        assertSame(ISOChronology.class, result.getChronology().getClass());\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISO_PARIS, result.getChronology());\n+    }\n+\n+    public void testToMutableDateTime_DateTimeZone() {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC);\n+        MutableDateTime result = test.toMutableDateTime(LONDON);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISO_DEFAULT, result.getChronology());\n+\n+        test = new DateMidnight(TEST_TIME1_UTC);\n+        result = test.toMutableDateTime(PARIS);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISO_PARIS, result.getChronology());\n+\n+        test = new DateMidnight(TEST_TIME1_UTC, PARIS);\n+        result = test.toMutableDateTime((DateTimeZone) null);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISO_DEFAULT, result.getChronology());\n+\n+        test = new DateMidnight(TEST_TIME1_UTC);\n+        result = test.toMutableDateTime((DateTimeZone) null);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISO_DEFAULT, result.getChronology());\n+    }\n+\n+    public void testToMutableDateTime_Chronology() {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC);\n+        MutableDateTime result = test.toMutableDateTime(ISO_DEFAULT);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISO_DEFAULT, result.getChronology());\n+\n+        test = new DateMidnight(TEST_TIME1_UTC);\n+        result = test.toMutableDateTime(GREGORIAN_PARIS);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(GREGORIAN_PARIS, result.getChronology());\n+\n+        test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS);\n+        result = test.toMutableDateTime((Chronology) null);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISO_DEFAULT, result.getChronology());\n+\n+        test = new DateMidnight(TEST_TIME1_UTC);\n+        result = test.toMutableDateTime((Chronology) null);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISO_DEFAULT, result.getChronology());\n+    }\n+\n+    public void testToDate() {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC);\n+        Date result = test.toDate();\n+        assertEquals(test.getMillis(), result.getTime());\n+    }\n+\n+    public void testToCalendar_Locale() {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC);\n+        Calendar result = test.toCalendar(null);\n+        assertEquals(test.getMillis(), result.getTime().getTime());\n+        assertEquals(TimeZone.getTimeZone(\"Europe/London\"), result.getTimeZone());\n+\n+        test = new DateMidnight(TEST_TIME1_UTC, PARIS);\n+        result = test.toCalendar(null);\n+        assertEquals(test.getMillis(), result.getTime().getTime());\n+        assertEquals(TimeZone.getTimeZone(\"Europe/Paris\"), result.getTimeZone());\n+\n+        test = new DateMidnight(TEST_TIME1_UTC, PARIS);\n+        result = test.toCalendar(Locale.UK);\n+        assertEquals(test.getMillis(), result.getTime().getTime());\n+        assertEquals(TimeZone.getTimeZone(\"Europe/Paris\"), result.getTimeZone());\n+    }\n+\n+    public void testToGregorianCalendar() {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC);\n+        GregorianCalendar result = test.toGregorianCalendar();\n+        assertEquals(test.getMillis(), result.getTime().getTime());\n+        assertEquals(TimeZone.getTimeZone(\"Europe/London\"), result.getTimeZone());\n+\n+        test = new DateMidnight(TEST_TIME1_UTC, PARIS);\n+        result = test.toGregorianCalendar();\n+        assertEquals(test.getMillis(), result.getTime().getTime());\n+        assertEquals(TimeZone.getTimeZone(\"Europe/Paris\"), result.getTimeZone());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToYearMonthDay() {\n+        DateMidnight base = new DateMidnight(TEST_TIME1_UTC, COPTIC_DEFAULT);\n+        YearMonthDay test = base.toYearMonthDay();\n+        assertEquals(new YearMonthDay(TEST_TIME1_UTC, COPTIC_DEFAULT), test);\n+    }\n+\n+    public void testToLocalDate() {\n+        DateMidnight base = new DateMidnight(TEST_TIME1_UTC, COPTIC_DEFAULT);\n+        LocalDate test = base.toLocalDate();\n+        assertEquals(new LocalDate(TEST_TIME1_UTC, COPTIC_DEFAULT), test);\n+    }\n+\n+    public void testToInterval() {\n+        DateMidnight base = new DateMidnight(TEST_TIME1_UTC, COPTIC_DEFAULT);\n+        Interval test = base.toInterval();\n+        DateMidnight end = base.plus(Period.days(1));\n+        assertEquals(new Interval(base, end), test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithMillis_long() {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC);\n+        DateMidnight result = test.withMillis(TEST_TIME2_UTC);\n+        assertEquals(TEST_TIME2_LONDON, result.getMillis());\n+        assertEquals(test.getChronology(), result.getChronology());\n+        \n+        test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS);\n+        result = test.withMillis(TEST_TIME2_UTC);\n+        assertEquals(TEST_TIME2_PARIS, result.getMillis());\n+        assertEquals(test.getChronology(), result.getChronology());\n+        \n+        test = new DateMidnight(TEST_TIME1_UTC);\n+        result = test.withMillis(TEST_TIME1_UTC);\n+        assertSame(test, result);\n+    }\n+\n+    public void testWithChronology_Chronology() {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC);\n+        DateMidnight result = test.withChronology(GREGORIAN_PARIS);\n+        assertEquals(TEST_TIME1_LONDON, test.getMillis());\n+        assertEquals(TEST_TIME1_PARIS, result.getMillis());\n+        assertEquals(GREGORIAN_PARIS, result.getChronology());\n+        \n+        test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS);\n+        result = test.withChronology(null);\n+        assertEquals(TEST_TIME1_PARIS, test.getMillis());\n+        // midnight Paris is previous day in London\n+        assertEquals(TEST_TIME1_LONDON - DateTimeConstants.MILLIS_PER_DAY, result.getMillis());\n+        assertEquals(ISO_DEFAULT, result.getChronology());\n+        \n+        test = new DateMidnight(TEST_TIME1_UTC);\n+        result = test.withChronology(null);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISO_DEFAULT, result.getChronology());\n+        \n+        test = new DateMidnight(TEST_TIME1_UTC);\n+        result = test.withChronology(ISO_DEFAULT);\n+        assertSame(test, result);\n+    }\n+\n+    public void testWithZoneRetainFields_DateTimeZone() {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC);\n+        DateMidnight result = test.withZoneRetainFields(PARIS);\n+        assertEquals(TEST_TIME1_LONDON, test.getMillis());\n+        assertEquals(TEST_TIME1_PARIS, result.getMillis());\n+        assertEquals(ISO_PARIS, result.getChronology());\n+        \n+        test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS);\n+        result = test.withZoneRetainFields(null);\n+        assertEquals(TEST_TIME1_PARIS, test.getMillis());\n+        assertEquals(TEST_TIME1_LONDON, result.getMillis());\n+        assertEquals(GREGORIAN_DEFAULT, result.getChronology());\n+        \n+        test = new DateMidnight(TEST_TIME1_UTC);\n+        result = test.withZoneRetainFields(LONDON);\n+        assertSame(test, result);\n+        \n+        test = new DateMidnight(TEST_TIME1_UTC);\n+        result = test.withZoneRetainFields(null);\n+        assertSame(test, result);\n+        \n+        test = new DateMidnight(TEST_TIME1_UTC, new MockNullZoneChronology());\n+        result = test.withZoneRetainFields(LONDON);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithFields_RPartial() {\n+        DateMidnight test = new DateMidnight(2004, 5, 6);\n+        DateMidnight result = test.withFields(new YearMonthDay(2003, 4, 5));\n+        DateMidnight expected = new DateMidnight(2003, 4, 5);\n+        assertEquals(expected, result);\n+        \n+        test = new DateMidnight(TEST_TIME1_UTC);\n+        result = test.withFields(null);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithField1() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        DateMidnight result = test.withField(DateTimeFieldType.year(), 2006);\n+        \n+        assertEquals(new DateMidnight(2004, 6, 9), test);\n+        assertEquals(new DateMidnight(2006, 6, 9), result);\n+    }\n+\n+    public void testWithField2() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        try {\n+            test.withField(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithFieldAdded1() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        DateMidnight result = test.withFieldAdded(DurationFieldType.years(), 6);\n+        \n+        assertEquals(new DateMidnight(2004, 6, 9), test);\n+        assertEquals(new DateMidnight(2010, 6, 9), result);\n+    }\n+\n+    public void testWithFieldAdded2() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        try {\n+            test.withFieldAdded(null, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded3() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        try {\n+            test.withFieldAdded(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded4() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        DateMidnight result = test.withFieldAdded(DurationFieldType.years(), 0);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithDurationAdded_long_int() {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT);\n+        DateMidnight result = test.withDurationAdded(123456789L, 1);\n+        DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.withDurationAdded(123456789L, 0);\n+        assertSame(test, result);\n+        \n+        result = test.withDurationAdded(123456789L, 2);\n+        expected = new DateMidnight(test.getMillis() + (2L * 123456789L), BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.withDurationAdded(123456789L, -3);\n+        expected = new DateMidnight(test.getMillis() - (3L * 123456789L), BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testWithDurationAdded_RD_int() {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT);\n+        DateMidnight result = test.withDurationAdded(new Duration(123456789L), 1);\n+        DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.withDurationAdded(null, 1);\n+        assertSame(test, result);\n+        \n+        result = test.withDurationAdded(new Duration(123456789L), 0);\n+        assertSame(test, result);\n+        \n+        result = test.withDurationAdded(new Duration(123456789L), 2);\n+        expected = new DateMidnight(test.getMillis() + (2L * 123456789L), BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.withDurationAdded(new Duration(123456789L), -3);\n+        expected = new DateMidnight(test.getMillis() - (3L * 123456789L), BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithDurationAdded_RP_int() {\n+        DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT);\n+        DateMidnight result = test.withPeriodAdded(new Period(1, 2, 3, 4, 5, 6, 7, 8), 1);\n+        DateMidnight expected = new DateMidnight(2003, 7, 28, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.withPeriodAdded(null, 1);\n+        assertSame(test, result);\n+        \n+        result = test.withPeriodAdded(new Period(1, 2, 3, 4, 5, 6, 7, 8), 0);\n+        assertSame(test, result);\n+        \n+        result = test.withPeriodAdded(new Period(1, 2, 0, 4, 5, 6, 7, 8), 3);\n+        expected = new DateMidnight(2005, 11, 15, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.withPeriodAdded(new Period(1, 2, 0, 1, 1, 2, 3, 4), -1);\n+        expected = new DateMidnight(2001, 3, 1, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+    }\n+\n+    //-----------------------------------------------------------------------    \n+    public void testPlus_long() {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT);\n+        DateMidnight result = test.plus(123456789L);\n+        DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+    }\n+    \n+    public void testPlus_RD() {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT);\n+        DateMidnight result = test.plus(new Duration(123456789L));\n+        DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.plus((ReadableDuration) null);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlus_RP() {\n+        DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT);\n+        DateMidnight result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8));\n+        DateMidnight expected = new DateMidnight(2003, 7, 28, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.plus((ReadablePeriod) null);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusYears_int() {\n+        DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT);\n+        DateMidnight result = test.plusYears(1);\n+        DateMidnight expected = new DateMidnight(2003, 5, 3, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusYears(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusMonths_int() {\n+        DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT);\n+        DateMidnight result = test.plusMonths(1);\n+        DateMidnight expected = new DateMidnight(2002, 6, 3, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusMonths(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusWeeks_int() {\n+        DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT);\n+        DateMidnight result = test.plusWeeks(1);\n+        DateMidnight expected = new DateMidnight(2002, 5, 10, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusWeeks(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusDays_int() {\n+        DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT);\n+        DateMidnight result = test.plusDays(1);\n+        DateMidnight expected = new DateMidnight(2002, 5, 4, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusDays(0);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------    \n+    public void testMinus_long() {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT);\n+        DateMidnight result = test.minus(123456789L);\n+        DateMidnight expected = new DateMidnight(test.getMillis() - 123456789L, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+    }\n+\n+    public void testMinus_RD() {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT);\n+        DateMidnight result = test.minus(new Duration(123456789L));\n+        DateMidnight expected = new DateMidnight(test.getMillis() - 123456789L, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.minus((ReadableDuration) null);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinus_RP() {\n+        DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT);\n+        DateMidnight result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));\n+        DateMidnight expected = new DateMidnight(2001, 3, 25, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.minus((ReadablePeriod) null);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusYears_int() {\n+        DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT);\n+        DateMidnight result = test.minusYears(1);\n+        DateMidnight expected = new DateMidnight(2001, 5, 3, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusYears(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusMonths_int() {\n+        DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT);\n+        DateMidnight result = test.minusMonths(1);\n+        DateMidnight expected = new DateMidnight(2002, 4, 3, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusMonths(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusWeeks_int() {\n+        DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT);\n+        DateMidnight result = test.minusWeeks(1);\n+        DateMidnight expected = new DateMidnight(2002, 4, 26, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusWeeks(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusDays_int() {\n+        DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT);\n+        DateMidnight result = test.minusDays(1);\n+        DateMidnight expected = new DateMidnight(2002, 5, 2, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusDays(0);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testProperty() {\n+        DateMidnight test = new DateMidnight();\n+        assertEquals(test.year(), test.property(DateTimeFieldType.year()));\n+        assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek()));\n+        assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear()));\n+        assertEquals(test.property(DateTimeFieldType.millisOfSecond()), test.property(DateTimeFieldType.millisOfSecond()));\n+        DateTimeFieldType bad = new DateTimeFieldType(\"bad\") {\n+            public DurationFieldType getDurationType() {\n+                return DurationFieldType.weeks();\n+            }\n+            public DurationFieldType getRangeDurationType() {\n+                return null;\n+            }\n+            public DateTimeField getField(Chronology chronology) {\n+                return UnsupportedDateTimeField.getInstance(this, UnsupportedDurationField.getInstance(getDurationType()));\n+            }\n+        };\n+        try {\n+            test.property(bad);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.property(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private void check(DateMidnight test, int year, int month, int day) {\n+        assertEquals(year, test.getYear());\n+        assertEquals(month, test.getMonthOfYear());\n+        assertEquals(day, test.getDayOfMonth());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestDateMidnight_Constructors.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Date;\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.convert.ConverterManager;\n+import org.joda.time.convert.MockZeroNullIntegerConverter;\n+\n+/**\n+ * This class is a Junit unit test for DateMidnight.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestDateMidnight_Constructors extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW_UTC =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+    private long TEST_TIME_NOW_LONDON =\n+            TEST_TIME_NOW_UTC - DateTimeConstants.MILLIS_PER_HOUR;\n+    private long TEST_TIME_NOW_PARIS =\n+            TEST_TIME_NOW_UTC - 2*DateTimeConstants.MILLIS_PER_HOUR;\n+    \n+    // 2002-04-05\n+    private long TEST_TIME1_UTC =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    private long TEST_TIME1_LONDON =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            - DateTimeConstants.MILLIS_PER_HOUR;\n+    private long TEST_TIME1_PARIS =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            - 2*DateTimeConstants.MILLIS_PER_HOUR;\n+    \n+    // 2003-05-06\n+    private long TEST_TIME2_UTC =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    private long TEST_TIME2_LONDON =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+             - DateTimeConstants.MILLIS_PER_HOUR;\n+    private long TEST_TIME2_PARIS =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+             - 2*DateTimeConstants.MILLIS_PER_HOUR;\n+    \n+    private DateTimeZone zone = null;\n+    private Locale locale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestDateMidnight_Constructors.class);\n+    }\n+\n+    public TestDateMidnight_Constructors(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW_UTC);\n+        zone = DateTimeZone.getDefault();\n+        locale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        Locale.setDefault(locale);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW_UTC).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1_UTC).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2_UTC).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor ()\n+     */\n+    public void testConstructor() throws Throwable {\n+        DateMidnight test = new DateMidnight();\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW_LONDON, test.getMillis());\n+        assertEquals(2002, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (DateTimeZone)\n+     */\n+    public void testConstructor_DateTimeZone() throws Throwable {\n+        DateMidnight test = new DateMidnight(PARIS);\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+        assertEquals(TEST_TIME_NOW_PARIS, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (DateTimeZone=null)\n+     */\n+    public void testConstructor_nullDateTimeZone() throws Throwable {\n+        DateMidnight test = new DateMidnight((DateTimeZone) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW_LONDON, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Chronology)\n+     */\n+    public void testConstructor_Chronology() throws Throwable {\n+        DateMidnight test = new DateMidnight(GregorianChronology.getInstance());\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW_LONDON, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Chronology=null)\n+     */\n+    public void testConstructor_nullChronology() throws Throwable {\n+        DateMidnight test = new DateMidnight((Chronology) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW_LONDON, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (long)\n+     */\n+    public void testConstructor_long1() throws Throwable {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME1_LONDON, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (long)\n+     */\n+    public void testConstructor_long2() throws Throwable {\n+        DateMidnight test = new DateMidnight(TEST_TIME2_UTC);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME2_LONDON, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (long, DateTimeZone)\n+     */\n+    public void testConstructor_long1_DateTimeZone() throws Throwable {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, PARIS);\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+        assertEquals(TEST_TIME1_PARIS, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (long, DateTimeZone)\n+     */\n+    public void testConstructor_long2_DateTimeZone() throws Throwable {\n+        DateMidnight test = new DateMidnight(TEST_TIME2_UTC, PARIS);\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+        assertEquals(TEST_TIME2_PARIS, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (long, DateTimeZone=null)\n+     */\n+    public void testConstructor_long_nullDateTimeZone() throws Throwable {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, (DateTimeZone) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME1_LONDON, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (long, Chronology)\n+     */\n+    public void testConstructor_long1_Chronology() throws Throwable {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, GregorianChronology.getInstance());\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME1_LONDON, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (long, Chronology)\n+     */\n+    public void testConstructor_long2_Chronology() throws Throwable {\n+        DateMidnight test = new DateMidnight(TEST_TIME2_UTC, GregorianChronology.getInstance());\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME2_LONDON, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (long, Chronology=null)\n+     */\n+    public void testConstructor_long_nullChronology() throws Throwable {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, (Chronology) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME1_LONDON, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (Object)\n+     */\n+    public void testConstructor_Object() throws Throwable {\n+        Date date = new Date(TEST_TIME1_UTC);\n+        DateMidnight test = new DateMidnight(date);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME1_LONDON, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object)\n+     */\n+    public void testConstructor_invalidObject() throws Throwable {\n+        try {\n+            new DateMidnight(new Object());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (Object=null)\n+     */\n+    public void testConstructor_nullObject() throws Throwable {\n+        DateMidnight test = new DateMidnight((Object) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW_LONDON, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object=null)\n+     */\n+    public void testConstructor_badconverterObject() throws Throwable {\n+        try {\n+            ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n+            DateMidnight test = new DateMidnight(new Integer(0));\n+            assertEquals(ISOChronology.getInstance(), test.getChronology());\n+            assertEquals(0L - DateTimeConstants.MILLIS_PER_HOUR, test.getMillis());\n+        } finally {\n+            ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n+        }\n+    }\n+\n+    /**\n+     * Test constructor (Object, DateTimeZone)\n+     */\n+    public void testConstructor_Object_DateTimeZone() throws Throwable {\n+        Date date = new Date(TEST_TIME1_UTC);\n+        DateMidnight test = new DateMidnight(date, PARIS);\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+        assertEquals(TEST_TIME1_PARIS, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object, DateTimeZone)\n+     */\n+    public void testConstructor_invalidObject_DateTimeZone() throws Throwable {\n+        try {\n+            new DateMidnight(new Object(), PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (Object=null, DateTimeZone)\n+     */\n+    public void testConstructor_nullObject_DateTimeZone() throws Throwable {\n+        DateMidnight test = new DateMidnight((Object) null, PARIS);\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+        assertEquals(TEST_TIME_NOW_PARIS, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object, DateTimeZone=null)\n+     */\n+    public void testConstructor_Object_nullDateTimeZone() throws Throwable {\n+        Date date = new Date(TEST_TIME1_UTC);\n+        DateMidnight test = new DateMidnight(date, (DateTimeZone) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME1_LONDON, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object=null, DateTimeZone=null)\n+     */\n+    public void testConstructor_nullObject_nullDateTimeZone() throws Throwable {\n+        DateMidnight test = new DateMidnight((Object) null, (DateTimeZone) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW_LONDON, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object, DateTimeZone)\n+     */\n+    public void testConstructor_badconverterObject_DateTimeZone() throws Throwable {\n+        try {\n+            ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n+            DateMidnight test = new DateMidnight(new Integer(0), GregorianChronology.getInstance());\n+            assertEquals(ISOChronology.getInstance(), test.getChronology());\n+            assertEquals(0L - DateTimeConstants.MILLIS_PER_HOUR, test.getMillis());\n+        } finally {\n+            ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n+        }\n+    }\n+\n+    /**\n+     * Test constructor (Object, Chronology)\n+     */\n+    public void testConstructor_Object_Chronology() throws Throwable {\n+        Date date = new Date(TEST_TIME1_UTC);\n+        DateMidnight test = new DateMidnight(date, GregorianChronology.getInstance());\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME1_LONDON, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object, Chronology)\n+     */\n+    public void testConstructor_invalidObject_Chronology() throws Throwable {\n+        try {\n+            new DateMidnight(new Object(), GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (Object=null, Chronology)\n+     */\n+    public void testConstructor_nullObject_Chronology() throws Throwable {\n+        DateMidnight test = new DateMidnight((Object) null, GregorianChronology.getInstance());\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW_LONDON, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object, Chronology=null)\n+     */\n+    public void testConstructor_Object_nullChronology() throws Throwable {\n+        Date date = new Date(TEST_TIME1_UTC);\n+        DateMidnight test = new DateMidnight(date, (Chronology) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME1_LONDON, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object=null, Chronology=null)\n+     */\n+    public void testConstructor_nullObject_nullChronology() throws Throwable {\n+        DateMidnight test = new DateMidnight((Object) null, (Chronology) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW_LONDON, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object, Chronology)\n+     */\n+    public void testConstructor_badconverterObject_Chronology() throws Throwable {\n+        try {\n+            ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n+            DateMidnight test = new DateMidnight(new Integer(0), GregorianChronology.getInstance());\n+            assertEquals(ISOChronology.getInstance(), test.getChronology());\n+            assertEquals(0L - DateTimeConstants.MILLIS_PER_HOUR, test.getMillis());\n+        } finally {\n+            ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (int, int, int)\n+     */\n+    public void testConstructor_int_int_int() throws Throwable {\n+        DateMidnight test = new DateMidnight(2002, 6, 9);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(LONDON, test.getZone());\n+        assertEquals(TEST_TIME_NOW_LONDON, test.getMillis());\n+        assertEquals(2002, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        try {\n+            new DateMidnight(Integer.MIN_VALUE, 6, 9);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateMidnight(Integer.MAX_VALUE, 6, 9);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateMidnight(2002, 0, 9);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateMidnight(2002, 13, 9);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateMidnight(2002, 6, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateMidnight(2002, 6, 31);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        new DateMidnight(2002, 7, 31);\n+        try {\n+            new DateMidnight(2002, 7, 32);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, DateTimeZone)\n+     */\n+    public void testConstructor_int_int_int_DateTimeZone() throws Throwable {\n+        DateMidnight test = new DateMidnight(2002, 6, 9, PARIS);\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+        assertEquals(TEST_TIME_NOW_PARIS, test.getMillis());\n+        assertEquals(2002, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        try {\n+            new DateMidnight(Integer.MIN_VALUE, 6, 9, PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateMidnight(Integer.MAX_VALUE, 6, 9, PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateMidnight(2002, 0, 9, PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateMidnight(2002, 13, 9, PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateMidnight(2002, 6, 0, PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateMidnight(2002, 6, 31, PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        new DateMidnight(2002, 7, 31, PARIS);\n+        try {\n+            new DateMidnight(2002, 7, 32, PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, DateTimeZone=null)\n+     */\n+    public void testConstructor_int_int_int_nullDateTimeZone() throws Throwable {\n+        DateMidnight test = new DateMidnight(2002, 6, 9, (DateTimeZone) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW_LONDON, test.getMillis());\n+        assertEquals(2002, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, Chronology)\n+     */\n+    public void testConstructor_int_int_int_Chronology() throws Throwable {\n+        DateMidnight test = new DateMidnight(2002, 6, 9, GregorianChronology.getInstance());\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW_LONDON, test.getMillis());\n+        assertEquals(2002, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        try {\n+            new DateMidnight(Integer.MIN_VALUE, 6, 9, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateMidnight(Integer.MAX_VALUE, 6, 9, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateMidnight(2002, 0, 9, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateMidnight(2002, 13, 9, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateMidnight(2002, 6, 0, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateMidnight(2002, 6, 31, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        new DateMidnight(2002, 7, 31, GregorianChronology.getInstance());\n+        try {\n+            new DateMidnight(2002, 7, 32, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, Chronology=null)\n+     */\n+    public void testConstructor_int_int_int_nullChronology() throws Throwable {\n+        DateMidnight test = new DateMidnight(2002, 6, 9, (Chronology) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW_LONDON, test.getMillis());\n+        assertEquals(2002, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestDateMidnight_Properties.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.LenientChronology;\n+import org.joda.time.chrono.StrictChronology;\n+\n+/**\n+ * This class is a Junit unit test for DateTime.\n+ *\n+ * @author Stephen Colebourne\n+ * @author Mike Schrag\n+ */\n+public class TestDateMidnight_Properties extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+\n+    //private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05 Fri\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06 Tue\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private DateTimeZone zone = null;\n+    private Locale locale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestDateMidnight_Properties.class);\n+    }\n+\n+    public TestDateMidnight_Properties(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        locale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        Locale.setDefault(locale);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetEra() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        assertSame(test.getChronology().era(), test.era().getField());\n+        assertEquals(\"era\", test.era().getName());\n+        assertEquals(\"Property[era]\", test.era().toString());\n+        assertSame(test, test.era().getDateMidnight());\n+        assertEquals(1, test.era().get());\n+        assertEquals(\"AD\", test.era().getAsText());\n+        assertEquals(\"ap. J.-C.\", test.era().getAsText(Locale.FRENCH));\n+        assertEquals(\"AD\", test.era().getAsShortText());\n+        assertEquals(\"ap. J.-C.\", test.era().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().eras(), test.era().getDurationField());\n+        assertEquals(null, test.era().getRangeDurationField());\n+        assertEquals(2, test.era().getMaximumTextLength(null));\n+        assertEquals(9, test.era().getMaximumTextLength(Locale.FRENCH));\n+        assertEquals(2, test.era().getMaximumShortTextLength(null));\n+        assertEquals(9, test.era().getMaximumShortTextLength(Locale.FRENCH));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetYearOfEra() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        assertSame(test.getChronology().yearOfEra(), test.yearOfEra().getField());\n+        assertEquals(\"yearOfEra\", test.yearOfEra().getName());\n+        assertEquals(\"Property[yearOfEra]\", test.yearOfEra().toString());\n+        assertSame(test, test.yearOfEra().getDateMidnight());\n+        assertEquals(2004, test.yearOfEra().get());\n+        assertEquals(\"2004\", test.yearOfEra().getAsText());\n+        assertEquals(\"2004\", test.yearOfEra().getAsText(Locale.FRENCH));\n+        assertEquals(\"2004\", test.yearOfEra().getAsShortText());\n+        assertEquals(\"2004\", test.yearOfEra().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().years(), test.yearOfEra().getDurationField());\n+        assertEquals(null, test.yearOfEra().getRangeDurationField());\n+        assertEquals(9, test.yearOfEra().getMaximumTextLength(null));\n+        assertEquals(9, test.yearOfEra().getMaximumShortTextLength(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetCenturyOfEra() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        assertSame(test.getChronology().centuryOfEra(), test.centuryOfEra().getField());\n+        assertEquals(\"centuryOfEra\", test.centuryOfEra().getName());\n+        assertEquals(\"Property[centuryOfEra]\", test.centuryOfEra().toString());\n+        assertSame(test, test.centuryOfEra().getDateMidnight());\n+        assertEquals(20, test.centuryOfEra().get());\n+        assertEquals(\"20\", test.centuryOfEra().getAsText());\n+        assertEquals(\"20\", test.centuryOfEra().getAsText(Locale.FRENCH));\n+        assertEquals(\"20\", test.centuryOfEra().getAsShortText());\n+        assertEquals(\"20\", test.centuryOfEra().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().centuries(), test.centuryOfEra().getDurationField());\n+        assertEquals(null, test.centuryOfEra().getRangeDurationField());\n+        assertEquals(7, test.centuryOfEra().getMaximumTextLength(null));\n+        assertEquals(7, test.centuryOfEra().getMaximumShortTextLength(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetYearOfCentury() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        assertSame(test.getChronology().yearOfCentury(), test.yearOfCentury().getField());\n+        assertEquals(\"yearOfCentury\", test.yearOfCentury().getName());\n+        assertEquals(\"Property[yearOfCentury]\", test.yearOfCentury().toString());\n+        assertSame(test, test.yearOfCentury().getDateMidnight());\n+        assertEquals(4, test.yearOfCentury().get());\n+        assertEquals(\"4\", test.yearOfCentury().getAsText());\n+        assertEquals(\"4\", test.yearOfCentury().getAsText(Locale.FRENCH));\n+        assertEquals(\"4\", test.yearOfCentury().getAsShortText());\n+        assertEquals(\"4\", test.yearOfCentury().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().years(), test.yearOfCentury().getDurationField());\n+        assertEquals(test.getChronology().centuries(), test.yearOfCentury().getRangeDurationField());\n+        assertEquals(2, test.yearOfCentury().getMaximumTextLength(null));\n+        assertEquals(2, test.yearOfCentury().getMaximumShortTextLength(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetWeekyear() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        assertSame(test.getChronology().weekyear(), test.weekyear().getField());\n+        assertEquals(\"weekyear\", test.weekyear().getName());\n+        assertEquals(\"Property[weekyear]\", test.weekyear().toString());\n+        assertSame(test, test.weekyear().getDateMidnight());\n+        assertEquals(2004, test.weekyear().get());\n+        assertEquals(\"2004\", test.weekyear().getAsText());\n+        assertEquals(\"2004\", test.weekyear().getAsText(Locale.FRENCH));\n+        assertEquals(\"2004\", test.weekyear().getAsShortText());\n+        assertEquals(\"2004\", test.weekyear().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().weekyears(), test.weekyear().getDurationField());\n+        assertEquals(null, test.weekyear().getRangeDurationField());\n+        assertEquals(9, test.weekyear().getMaximumTextLength(null));\n+        assertEquals(9, test.weekyear().getMaximumShortTextLength(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetYear() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        assertSame(test.getChronology().year(), test.year().getField());\n+        assertEquals(\"year\", test.year().getName());\n+        assertEquals(\"Property[year]\", test.year().toString());\n+        assertSame(test, test.year().getDateMidnight());\n+        assertEquals(2004, test.year().get());\n+        assertEquals(\"2004\", test.year().getAsText());\n+        assertEquals(\"2004\", test.year().getAsText(Locale.FRENCH));\n+        assertEquals(\"2004\", test.year().getAsShortText());\n+        assertEquals(\"2004\", test.year().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().years(), test.year().getDurationField());\n+        assertEquals(null, test.year().getRangeDurationField());\n+        assertEquals(9, test.year().getMaximumTextLength(null));\n+        assertEquals(9, test.year().getMaximumShortTextLength(null));\n+        assertEquals(-292275054, test.year().getMinimumValue());\n+        assertEquals(-292275054, test.year().getMinimumValueOverall());\n+        assertEquals(292278993, test.year().getMaximumValue());\n+        assertEquals(292278993, test.year().getMaximumValueOverall());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMonthOfYear() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField());\n+        assertEquals(\"monthOfYear\", test.monthOfYear().getName());\n+        assertEquals(\"Property[monthOfYear]\", test.monthOfYear().toString());\n+        assertSame(test, test.monthOfYear().getDateMidnight());\n+        assertEquals(6, test.monthOfYear().get());\n+        assertEquals(\"6\", test.monthOfYear().getAsString());\n+        assertEquals(\"June\", test.monthOfYear().getAsText());\n+        assertEquals(\"juin\", test.monthOfYear().getAsText(Locale.FRENCH));\n+        assertEquals(\"Jun\", test.monthOfYear().getAsShortText());\n+        assertEquals(\"juin\", test.monthOfYear().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField());\n+        assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField());\n+        assertEquals(9, test.monthOfYear().getMaximumTextLength(null));\n+        assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null));\n+        test = new DateMidnight(2004, 7, 9);\n+        assertEquals(\"juillet\", test.monthOfYear().getAsText(Locale.FRENCH));\n+        assertEquals(\"juil.\", test.monthOfYear().getAsShortText(Locale.FRENCH));\n+        assertEquals(1, test.monthOfYear().getMinimumValue());\n+        assertEquals(1, test.monthOfYear().getMinimumValueOverall());\n+        assertEquals(12, test.monthOfYear().getMaximumValue());\n+        assertEquals(12, test.monthOfYear().getMaximumValueOverall());\n+        assertEquals(1, test.monthOfYear().getMinimumValue());\n+        assertEquals(1, test.monthOfYear().getMinimumValueOverall());\n+        assertEquals(12, test.monthOfYear().getMaximumValue());\n+        assertEquals(12, test.monthOfYear().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertySetMonthOfYear() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        DateMidnight copy = test.monthOfYear().setCopy(8);\n+        assertEquals(2004, copy.getYear());\n+        assertEquals(8, copy.getMonthOfYear());\n+        assertEquals(9, copy.getDayOfMonth());\n+    }\n+\n+    public void testPropertySetTextMonthOfYear() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        DateMidnight copy = test.monthOfYear().setCopy(\"8\");\n+        assertEquals(2004, copy.getYear());\n+        assertEquals(8, copy.getMonthOfYear());\n+        assertEquals(9, copy.getDayOfMonth());\n+    }\n+\n+    public void testPropertySetTextLocaleMonthOfYear() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        DateMidnight copy = test.monthOfYear().setCopy(\"mars\", Locale.FRENCH);\n+        assertEquals(2004, copy.getYear());\n+        assertEquals(3, copy.getMonthOfYear());\n+        assertEquals(9, copy.getDayOfMonth());\n+    }\n+\n+    public void testPropertyAddMonthOfYear() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        DateMidnight copy = test.monthOfYear().addToCopy(8);\n+        assertEquals(2005, copy.getYear());\n+        assertEquals(2, copy.getMonthOfYear());\n+        assertEquals(9, copy.getDayOfMonth());\n+    }\n+\n+    public void testPropertyAddLongMonthOfYear() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        DateMidnight copy = test.monthOfYear().addToCopy(8L);\n+        assertEquals(2005, copy.getYear());\n+        assertEquals(2, copy.getMonthOfYear());\n+        assertEquals(9, copy.getDayOfMonth());\n+    }\n+\n+    public void testPropertyAddWrapFieldMonthOfYear() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        DateMidnight copy = test.monthOfYear().addWrapFieldToCopy(8);\n+        assertEquals(2004, copy.getYear());\n+        assertEquals(2, copy.getMonthOfYear());\n+        assertEquals(9, copy.getDayOfMonth());\n+    }\n+\n+    public void testPropertyGetDifferenceMonthOfYear() {\n+        DateMidnight test1 = new DateMidnight(2004, 6, 9);\n+        DateMidnight test2 = new DateMidnight(2004, 8, 9);\n+        assertEquals(-2, test1.monthOfYear().getDifference(test2));\n+        assertEquals(2, test2.monthOfYear().getDifference(test1));\n+        assertEquals(-2L, test1.monthOfYear().getDifferenceAsLong(test2));\n+        assertEquals(2L, test2.monthOfYear().getDifferenceAsLong(test1));\n+    }\n+\n+    public void testPropertyRoundFloorMonthOfYear() {\n+        DateMidnight test = new DateMidnight(2004, 6, 16);\n+        DateMidnight copy = test.monthOfYear().roundFloorCopy();\n+        assertEquals(\"2004-06-01T00:00:00.000+01:00\", copy.toString());\n+    }\n+\n+    public void testPropertyRoundCeilingMonthOfYear() {\n+        DateMidnight test = new DateMidnight(2004, 6, 16);\n+        DateMidnight copy = test.monthOfYear().roundCeilingCopy();\n+        assertEquals(\"2004-07-01T00:00:00.000+01:00\", copy.toString());\n+    }\n+\n+    public void testPropertyRoundHalfFloorMonthOfYear() {\n+        DateMidnight test = new DateMidnight(2004, 6, 16);\n+        DateMidnight copy = test.monthOfYear().roundHalfFloorCopy();\n+        assertEquals(\"2004-06-01T00:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateMidnight(2004, 6, 17);\n+        copy = test.monthOfYear().roundHalfFloorCopy();\n+        assertEquals(\"2004-07-01T00:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateMidnight(2004, 6, 15);\n+        copy = test.monthOfYear().roundHalfFloorCopy();\n+        assertEquals(\"2004-06-01T00:00:00.000+01:00\", copy.toString());\n+    }\n+\n+    public void testPropertyRoundHalfCeilingMonthOfYear() {\n+        DateMidnight test = new DateMidnight(2004, 6, 16);\n+        DateMidnight copy = test.monthOfYear().roundHalfCeilingCopy();\n+        assertEquals(\"2004-07-01T00:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateMidnight(2004, 6, 17);\n+        copy = test.monthOfYear().roundHalfCeilingCopy();\n+        assertEquals(\"2004-07-01T00:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateMidnight(2004, 6, 15);\n+        copy = test.monthOfYear().roundHalfCeilingCopy();\n+        assertEquals(\"2004-06-01T00:00:00.000+01:00\", copy.toString());\n+    }\n+\n+    public void testPropertyRoundHalfEvenMonthOfYear() {\n+        DateMidnight test = new DateMidnight(2004, 6, 16);\n+        DateMidnight copy = test.monthOfYear().roundHalfEvenCopy();\n+        assertEquals(\"2004-06-01T00:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateMidnight(2004, 9, 16);\n+        copy = test.monthOfYear().roundHalfEvenCopy();\n+        assertEquals(\"2004-10-01T00:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateMidnight(2004, 6, 17);\n+        copy = test.monthOfYear().roundHalfEvenCopy();\n+        assertEquals(\"2004-07-01T00:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateMidnight(2004, 6, 15);\n+        copy = test.monthOfYear().roundHalfEvenCopy();\n+        assertEquals(\"2004-06-01T00:00:00.000+01:00\", copy.toString());\n+    }\n+\n+    public void testPropertyRemainderMonthOfYear() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        assertEquals((9L - 1L) * DateTimeConstants.MILLIS_PER_DAY, test.monthOfYear().remainder());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetDayOfMonth() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField());\n+        assertEquals(\"dayOfMonth\", test.dayOfMonth().getName());\n+        assertEquals(\"Property[dayOfMonth]\", test.dayOfMonth().toString());\n+        assertSame(test, test.dayOfMonth().getDateMidnight());\n+        assertEquals(9, test.dayOfMonth().get());\n+        assertEquals(\"9\", test.dayOfMonth().getAsText());\n+        assertEquals(\"9\", test.dayOfMonth().getAsText(Locale.FRENCH));\n+        assertEquals(\"9\", test.dayOfMonth().getAsShortText());\n+        assertEquals(\"9\", test.dayOfMonth().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField());\n+        assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField());\n+        assertEquals(2, test.dayOfMonth().getMaximumTextLength(null));\n+        assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null));\n+        assertEquals(1, test.dayOfMonth().getMinimumValue());\n+        assertEquals(1, test.dayOfMonth().getMinimumValueOverall());\n+        assertEquals(30, test.dayOfMonth().getMaximumValue());\n+        assertEquals(31, test.dayOfMonth().getMaximumValueOverall());\n+        assertEquals(false, test.dayOfMonth().isLeap());\n+        assertEquals(0, test.dayOfMonth().getLeapAmount());\n+        assertEquals(null, test.dayOfMonth().getLeapDurationField());\n+    }\n+\n+    public void testPropertyWithMaximumValueDayOfMonth() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        DateMidnight copy = test.dayOfMonth().withMaximumValue();\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-06-30T00:00:00.000+01:00\", copy.toString());\n+    }\n+\n+    public void testPropertyWithMinimumValueDayOfMonth() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        DateMidnight copy = test.dayOfMonth().withMinimumValue();\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-06-01T00:00:00.000+01:00\", copy.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetDayOfYear() {\n+        // 31+29+31+30+31+9 = 161\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        assertSame(test.getChronology().dayOfYear(), test.dayOfYear().getField());\n+        assertEquals(\"dayOfYear\", test.dayOfYear().getName());\n+        assertEquals(\"Property[dayOfYear]\", test.dayOfYear().toString());\n+        assertSame(test, test.dayOfYear().getDateMidnight());\n+        assertEquals(161, test.dayOfYear().get());\n+        assertEquals(\"161\", test.dayOfYear().getAsText());\n+        assertEquals(\"161\", test.dayOfYear().getAsText(Locale.FRENCH));\n+        assertEquals(\"161\", test.dayOfYear().getAsShortText());\n+        assertEquals(\"161\", test.dayOfYear().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().days(), test.dayOfYear().getDurationField());\n+        assertEquals(test.getChronology().years(), test.dayOfYear().getRangeDurationField());\n+        assertEquals(3, test.dayOfYear().getMaximumTextLength(null));\n+        assertEquals(3, test.dayOfYear().getMaximumShortTextLength(null));\n+        assertEquals(false, test.dayOfYear().isLeap());\n+        assertEquals(0, test.dayOfYear().getLeapAmount());\n+        assertEquals(null, test.dayOfYear().getLeapDurationField());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetWeekOfWeekyear() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        assertSame(test.getChronology().weekOfWeekyear(), test.weekOfWeekyear().getField());\n+        assertEquals(\"weekOfWeekyear\", test.weekOfWeekyear().getName());\n+        assertEquals(\"Property[weekOfWeekyear]\", test.weekOfWeekyear().toString());\n+        assertSame(test, test.weekOfWeekyear().getDateMidnight());\n+        assertEquals(24, test.weekOfWeekyear().get());\n+        assertEquals(\"24\", test.weekOfWeekyear().getAsText());\n+        assertEquals(\"24\", test.weekOfWeekyear().getAsText(Locale.FRENCH));\n+        assertEquals(\"24\", test.weekOfWeekyear().getAsShortText());\n+        assertEquals(\"24\", test.weekOfWeekyear().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().weeks(), test.weekOfWeekyear().getDurationField());\n+        assertEquals(test.getChronology().weekyears(), test.weekOfWeekyear().getRangeDurationField());\n+        assertEquals(2, test.weekOfWeekyear().getMaximumTextLength(null));\n+        assertEquals(2, test.weekOfWeekyear().getMaximumShortTextLength(null));\n+        assertEquals(false, test.weekOfWeekyear().isLeap());\n+        assertEquals(0, test.weekOfWeekyear().getLeapAmount());\n+        assertEquals(null, test.weekOfWeekyear().getLeapDurationField());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetDayOfWeek() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        assertSame(test.getChronology().dayOfWeek(), test.dayOfWeek().getField());\n+        assertEquals(\"dayOfWeek\", test.dayOfWeek().getName());\n+        assertEquals(\"Property[dayOfWeek]\", test.dayOfWeek().toString());\n+        assertSame(test, test.dayOfWeek().getDateMidnight());\n+        assertEquals(3, test.dayOfWeek().get());\n+        assertEquals(\"3\", test.dayOfWeek().getAsString());\n+        assertEquals(\"Wednesday\", test.dayOfWeek().getAsText());\n+        assertEquals(\"mercredi\", test.dayOfWeek().getAsText(Locale.FRENCH));\n+        assertEquals(\"Wed\", test.dayOfWeek().getAsShortText());\n+        assertEquals(\"mer.\", test.dayOfWeek().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().days(), test.dayOfWeek().getDurationField());\n+        assertEquals(test.getChronology().weeks(), test.dayOfWeek().getRangeDurationField());\n+        assertEquals(9, test.dayOfWeek().getMaximumTextLength(null));\n+        assertEquals(8, test.dayOfWeek().getMaximumTextLength(Locale.FRENCH));\n+        assertEquals(3, test.dayOfWeek().getMaximumShortTextLength(null));\n+        assertEquals(4, test.dayOfWeek().getMaximumShortTextLength(Locale.FRENCH));\n+        assertEquals(1, test.dayOfWeek().getMinimumValue());\n+        assertEquals(1, test.dayOfWeek().getMinimumValueOverall());\n+        assertEquals(7, test.dayOfWeek().getMaximumValue());\n+        assertEquals(7, test.dayOfWeek().getMaximumValueOverall());\n+        assertEquals(false, test.dayOfWeek().isLeap());\n+        assertEquals(0, test.dayOfWeek().getLeapAmount());\n+        assertEquals(null, test.dayOfWeek().getLeapDurationField());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyToIntervalYearOfEra() {\n+      DateMidnight test = new DateMidnight(2004, 6, 9);\n+      Interval testInterval = test.yearOfEra().toInterval();\n+      assertEquals(new DateMidnight(2004, 1, 1), testInterval.getStart());\n+      assertEquals(new DateMidnight(2005, 1, 1), testInterval.getEnd());\n+    }\n+\n+    public void testPropertyToIntervalYearOfCentury() {\n+      DateMidnight test = new DateMidnight(2004, 6, 9);\n+      Interval testInterval = test.yearOfCentury().toInterval();\n+      assertEquals(new DateMidnight(2004, 1, 1), testInterval.getStart());\n+      assertEquals(new DateMidnight(2005, 1, 1), testInterval.getEnd());\n+    }\n+\n+    public void testPropertyToIntervalYear() {\n+      DateMidnight test = new DateMidnight(2004, 6, 9);\n+      Interval testInterval = test.year().toInterval();\n+      assertEquals(new DateMidnight(2004, 1, 1), testInterval.getStart());\n+      assertEquals(new DateMidnight(2005, 1, 1), testInterval.getEnd());\n+    }\n+\n+    public void testPropertyToIntervalMonthOfYear() {\n+      DateMidnight test = new DateMidnight(2004, 6, 9);\n+      Interval testInterval = test.monthOfYear().toInterval();\n+      assertEquals(new DateMidnight(2004, 6, 1), testInterval.getStart());\n+      assertEquals(new DateMidnight(2004, 7, 1), testInterval.getEnd());\n+    }\n+\n+    public void testPropertyToIntervalDayOfMonth() {\n+      DateMidnight test = new DateMidnight(2004, 6, 9);\n+      Interval testInterval = test.dayOfMonth().toInterval();\n+      assertEquals(new DateMidnight(2004, 6, 9), testInterval.getStart());\n+      assertEquals(new DateMidnight(2004, 6, 10), testInterval.getEnd());\n+\n+      DateMidnight febTest = new DateMidnight(2004, 2, 29);\n+      Interval febTestInterval = febTest.dayOfMonth().toInterval();\n+      assertEquals(new DateMidnight(2004, 2, 29), febTestInterval.getStart());\n+      assertEquals(new DateMidnight(2004, 3, 1), febTestInterval.getEnd());\n+    }\n+\n+    public void testPropertyEqualsHashCodeLenient() {\n+        DateMidnight test1 = new DateMidnight(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS));\n+        DateMidnight test2 = new DateMidnight(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS));\n+        assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth()));\n+        assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth()));\n+        assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));\n+        assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth()));\n+        assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());\n+        assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());\n+        assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());\n+    }\n+\n+    public void testPropertyEqualsHashCodeStrict() {\n+        DateMidnight test1 = new DateMidnight(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS));\n+        DateMidnight test2 = new DateMidnight(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS));\n+        assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth()));\n+        assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth()));\n+        assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));\n+        assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth()));\n+        assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());\n+        assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());\n+        assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestDateTimeComparator.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.ISOChronology;\n+/**\n+ * This class is a Junit unit test for the\n+ * org.joda.time.DateTimeComparator class.\n+ *\n+ * @author Guy Allard\n+ */\n+public class TestDateTimeComparator extends TestCase {\n+\n+    private static final Chronology ISO = ISOChronology.getInstance();\n+    \n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestDateTimeComparator.class);\n+    }\n+\n+    public TestDateTimeComparator(String name) {\n+        super(name);\n+    }\n+\n+    /**\n+     * A reference to a DateTime object.\n+     */\n+    DateTime aDateTime = null;\n+    /**\n+     * A reference to a DateTime object.\n+     */\n+    DateTime bDateTime = null;\n+    /**\n+     * A reference to a DateTimeComparator object\n+     * (a Comparator) for millis of seconds.\n+     */\n+    Comparator cMillis = null;\n+    /**\n+     * A reference to a DateTimeComparator object\n+     * (a Comparator) for seconds.\n+     */\n+    Comparator cSecond = null;\n+    /**\n+     * A reference to a DateTimeComparator object\n+     * (a Comparator) for minutes.\n+     */\n+    Comparator cMinute = null;\n+    /**\n+     * A reference to a DateTimeComparator object\n+     * (a Comparator) for hours.\n+     */\n+    Comparator cHour = null;\n+    /**\n+     * A reference to a DateTimeComparator object\n+     * (a Comparator) for day of the week.\n+     */\n+    Comparator cDayOfWeek = null;\n+    /**\n+     * A reference to a DateTimeComparator object\n+     * (a Comparator) for day of the month.\n+     */\n+    Comparator cDayOfMonth = null;\n+    /**\n+     * A reference to a DateTimeComparator object\n+     * (a Comparator) for day of the year.\n+     */\n+    Comparator cDayOfYear = null;\n+    /**\n+     * A reference to a DateTimeComparator object\n+     * (a Comparator) for week of the weekyear.\n+     */\n+    Comparator cWeekOfWeekyear = null;\n+    /**\n+     * A reference to a DateTimeComparator object\n+     * (a Comparator) for year given a week of the year.\n+     */\n+    Comparator cWeekyear = null;\n+    /**\n+     * A reference to a DateTimeComparator object\n+     * (a Comparator) for months.\n+     */\n+    Comparator cMonth = null;\n+    /**\n+     * A reference to a DateTimeComparator object\n+     * (a Comparator) for year.\n+     */\n+    Comparator cYear = null;\n+    /**\n+     * A reference to a DateTimeComparator object\n+     * (a Comparator) for the date portion of an\n+     * object.\n+     */\n+    Comparator cDate = null;\n+    /**\n+     * A reference to a DateTimeComparator object\n+     * (a Comparator) for the time portion of an\n+     * object.\n+     */\n+    Comparator cTime = null;\n+    /**\n+     * Junit <code>setUp()</code> method.\n+     */\n+    public void setUp() /* throws Exception */ {\n+        Chronology chrono = ISOChronology.getInstanceUTC();\n+\n+        // super.setUp();\n+        // Obtain comparator's\n+        cMillis = DateTimeComparator.getInstance(null, DateTimeFieldType.secondOfMinute());\n+        cSecond = DateTimeComparator.getInstance(DateTimeFieldType.secondOfMinute(), DateTimeFieldType.minuteOfHour());\n+        cMinute = DateTimeComparator.getInstance(DateTimeFieldType.minuteOfHour(), DateTimeFieldType.hourOfDay());\n+        cHour = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay(), DateTimeFieldType.dayOfYear());\n+        cDayOfWeek = DateTimeComparator.getInstance(DateTimeFieldType.dayOfWeek(), DateTimeFieldType.weekOfWeekyear());\n+        cDayOfMonth = DateTimeComparator.getInstance(DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear());\n+        cDayOfYear = DateTimeComparator.getInstance(DateTimeFieldType.dayOfYear(), DateTimeFieldType.year());\n+        cWeekOfWeekyear = DateTimeComparator.getInstance(DateTimeFieldType.weekOfWeekyear(), DateTimeFieldType.weekyear());\n+        cWeekyear = DateTimeComparator.getInstance(DateTimeFieldType.weekyear());\n+        cMonth = DateTimeComparator.getInstance(DateTimeFieldType.monthOfYear(), DateTimeFieldType.year());\n+        cYear = DateTimeComparator.getInstance(DateTimeFieldType.year());\n+        cDate = DateTimeComparator.getDateOnlyInstance();\n+        cTime = DateTimeComparator.getTimeOnlyInstance();\n+    }\n+\n+    /**\n+     * Junit <code>tearDown()</code> method.\n+     */\n+    protected void tearDown() /* throws Exception */ {\n+        // super.tearDown();\n+        aDateTime = null;\n+        bDateTime = null;\n+        //\n+        cMillis = null;\n+        cSecond = null;\n+        cMinute = null;\n+        cHour = null;\n+        cDayOfWeek = null;\n+        cDayOfMonth = null;\n+        cDayOfYear = null;\n+        cWeekOfWeekyear = null;\n+        cWeekyear = null;\n+        cMonth = null;\n+        cYear = null;\n+        cDate = null;\n+        cTime = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testClass() {\n+        assertEquals(true, Modifier.isPublic(DateTimeComparator.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(DateTimeComparator.class.getModifiers()));\n+        assertEquals(1, DateTimeComparator.class.getDeclaredConstructors().length);\n+        assertEquals(true, Modifier.isProtected(DateTimeComparator.class.getDeclaredConstructors()[0].getModifiers()));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testStaticGetInstance() {\n+        DateTimeComparator c = DateTimeComparator.getInstance();\n+        assertEquals(null, c.getLowerLimit());\n+        assertEquals(null, c.getUpperLimit());\n+        assertEquals(\"DateTimeComparator[]\", c.toString());\n+    }        \n+    public void testStaticGetDateOnlyInstance() {\n+        DateTimeComparator c = DateTimeComparator.getDateOnlyInstance();\n+        assertEquals(DateTimeFieldType.dayOfYear(), c.getLowerLimit());\n+        assertEquals(null, c.getUpperLimit());\n+        assertEquals(\"DateTimeComparator[dayOfYear-]\", c.toString());\n+        \n+        assertSame(DateTimeComparator.getDateOnlyInstance(), DateTimeComparator.getDateOnlyInstance());\n+    }\n+    public void testStaticGetTimeOnlyInstance() {\n+        DateTimeComparator c = DateTimeComparator.getTimeOnlyInstance();\n+        assertEquals(null, c.getLowerLimit());\n+        assertEquals(DateTimeFieldType.dayOfYear(), c.getUpperLimit());\n+        assertEquals(\"DateTimeComparator[-dayOfYear]\", c.toString());\n+        \n+        assertSame(DateTimeComparator.getTimeOnlyInstance(), DateTimeComparator.getTimeOnlyInstance());\n+    }\n+    public void testStaticGetInstanceLower() {\n+        DateTimeComparator c = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay());\n+        assertEquals(DateTimeFieldType.hourOfDay(), c.getLowerLimit());\n+        assertEquals(null, c.getUpperLimit());\n+        assertEquals(\"DateTimeComparator[hourOfDay-]\", c.toString());\n+        \n+        c = DateTimeComparator.getInstance(null);\n+        assertSame(DateTimeComparator.getInstance(), c);\n+    }\n+    public void testStaticGetInstanceLowerUpper() {\n+        DateTimeComparator c = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay(), DateTimeFieldType.dayOfYear());\n+        assertEquals(DateTimeFieldType.hourOfDay(), c.getLowerLimit());\n+        assertEquals(DateTimeFieldType.dayOfYear(), c.getUpperLimit());\n+        assertEquals(\"DateTimeComparator[hourOfDay-dayOfYear]\", c.toString());\n+        \n+        c = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay(), DateTimeFieldType.hourOfDay());\n+        assertEquals(DateTimeFieldType.hourOfDay(), c.getLowerLimit());\n+        assertEquals(DateTimeFieldType.hourOfDay(), c.getUpperLimit());\n+        assertEquals(\"DateTimeComparator[hourOfDay]\", c.toString());\n+        \n+        c = DateTimeComparator.getInstance(null, null);\n+        assertSame(DateTimeComparator.getInstance(), c);\n+        \n+        c = DateTimeComparator.getInstance(DateTimeFieldType.dayOfYear(), null);\n+        assertSame(DateTimeComparator.getDateOnlyInstance(), c);\n+        \n+        c = DateTimeComparator.getInstance(null, DateTimeFieldType.dayOfYear());\n+        assertSame(DateTimeComparator.getTimeOnlyInstance(), c);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testEqualsHashCode() {\n+        DateTimeComparator c1 = DateTimeComparator.getInstance();\n+        assertEquals(true, c1.equals(c1));\n+        assertEquals(false, c1.equals(null));\n+        assertEquals(true, c1.hashCode() == c1.hashCode());\n+        \n+        DateTimeComparator c2 = DateTimeComparator.getTimeOnlyInstance();\n+        assertEquals(true, c2.equals(c2));\n+        assertEquals(false, c2.equals(c1));\n+        assertEquals(false, c1.equals(c2));\n+        assertEquals(false, c2.equals(null));\n+        assertEquals(false, c1.hashCode() == c2.hashCode());\n+        \n+        DateTimeComparator c3 = DateTimeComparator.getTimeOnlyInstance();\n+        assertEquals(true, c3.equals(c3));\n+        assertEquals(false, c3.equals(c1));\n+        assertEquals(true, c3.equals(c2));\n+        assertEquals(false, c1.equals(c3));\n+        assertEquals(true, c2.equals(c3));\n+        assertEquals(false, c1.hashCode() == c3.hashCode());\n+        assertEquals(true, c2.hashCode() == c3.hashCode());\n+        \n+        DateTimeComparator c4 = DateTimeComparator.getDateOnlyInstance();\n+        assertEquals(false, c4.hashCode() == c3.hashCode());\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testSerialization1() throws Exception {\n+        DateTimeField f = ISO.dayOfYear();\n+        f.toString();\n+        DateTimeComparator c = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay(), DateTimeFieldType.dayOfYear());\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(c);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        DateTimeComparator result = (DateTimeComparator) ois.readObject();\n+        ois.close();\n+        \n+        assertEquals(c, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization2() throws Exception {\n+        DateTimeComparator c = DateTimeComparator.getInstance();\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(c);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        DateTimeComparator result = (DateTimeComparator) ois.readObject();\n+        ois.close();\n+        \n+        assertSame(c, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test all basic comparator operation with DateTime objects.\n+     */\n+    public void testBasicComps1() {\n+        aDateTime = new DateTime( System.currentTimeMillis(), DateTimeZone.UTC );\n+        bDateTime = new DateTime( aDateTime.getMillis(), DateTimeZone.UTC );\n+        assertEquals( \"getMillis\", aDateTime.getMillis(),\n+            bDateTime.getMillis() );\n+        assertEquals( \"MILLIS\", 0, cMillis.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"SECOND\", 0, cSecond.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"MINUTE\", 0, cMinute.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"HOUR\", 0, cHour.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"DOW\", 0, cDayOfWeek.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"DOM\", 0, cDayOfMonth.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"DOY\", 0, cDayOfYear.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"WOW\", 0, cWeekOfWeekyear.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"WY\", 0, cWeekyear.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"MONTH\", 0, cMonth.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"YEAR\", 0, cYear.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"DATE\", 0, cDate.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"TIME\", 0, cTime.compare( aDateTime, bDateTime ) );\n+    }   // end of testBasicComps\n+\n+\n+    /**\n+     * Test all basic comparator operation with ReadableInstant objects.\n+     */\n+    public void testBasicComps2() {\n+        ReadableInstant aDateTime = new DateTime( System.currentTimeMillis(), DateTimeZone.UTC );\n+        ReadableInstant bDateTime = new DateTime( aDateTime.getMillis(), DateTimeZone.UTC );\n+        assertEquals( \"getMillis\", aDateTime.getMillis(),\n+            bDateTime.getMillis() );\n+        assertEquals( \"MILLIS\", 0, cMillis.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"SECOND\", 0, cSecond.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"MINUTE\", 0, cMinute.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"HOUR\", 0, cHour.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"DOW\", 0, cDayOfWeek.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"DOM\", 0, cDayOfMonth.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"DOY\", 0, cDayOfYear.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"WOW\", 0, cWeekOfWeekyear.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"WY\", 0, cWeekyear.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"MONTH\", 0, cMonth.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"YEAR\", 0, cYear.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"DATE\", 0, cDate.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"TIME\", 0, cTime.compare( aDateTime, bDateTime ) );\n+    }   // end of testBasicComps\n+\n+    /**\n+     * Test all basic comparator operation with java Date objects.\n+     */\n+    public void testBasicComps3() {\n+        Date aDateTime\n+            = new Date( System.currentTimeMillis() );\n+        Date bDateTime\n+            = new Date( aDateTime.getTime() );\n+        assertEquals( \"MILLIS\", 0, cMillis.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"SECOND\", 0, cSecond.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"MINUTE\", 0, cMinute.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"HOUR\", 0, cHour.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"DOW\", 0, cDayOfWeek.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"DOM\", 0, cDayOfMonth.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"DOY\", 0, cDayOfYear.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"WOW\", 0, cWeekOfWeekyear.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"WY\", 0, cWeekyear.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"MONTH\", 0, cMonth.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"YEAR\", 0, cYear.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"DATE\", 0, cDate.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"TIME\", 0, cTime.compare( aDateTime, bDateTime ) );\n+    }   // end of testBasicComps\n+\n+    /**\n+     * Test all basic comparator operation with Long objects.\n+     */\n+    public void testBasicComps4() {\n+        Long aDateTime\n+            = new Long( System.currentTimeMillis() );\n+        Long bDateTime\n+            = new Long( aDateTime.longValue() );\n+        assertEquals( \"MILLIS\", 0, cMillis.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"SECOND\", 0, cSecond.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"MINUTE\", 0, cMinute.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"HOUR\", 0, cHour.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"DOW\", 0, cDayOfWeek.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"DOM\", 0, cDayOfMonth.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"DOY\", 0, cDayOfYear.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"WOW\", 0, cWeekOfWeekyear.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"WY\", 0, cWeekyear.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"MONTH\", 0, cMonth.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"YEAR\", 0, cYear.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"DATE\", 0, cDate.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"TIME\", 0, cTime.compare( aDateTime, bDateTime ) );\n+    }   // end of testBasicComps\n+\n+    /**\n+     * Test all basic comparator operation with Calendar objects.\n+     */\n+    public void testBasicComps5() {\n+        Calendar aDateTime\n+            = Calendar.getInstance();   // right now\n+        Calendar bDateTime = aDateTime;\n+        assertEquals( \"MILLIS\", 0, cMillis.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"SECOND\", 0, cSecond.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"MINUTE\", 0, cMinute.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"HOUR\", 0, cHour.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"DOW\", 0, cDayOfWeek.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"DOM\", 0, cDayOfMonth.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"DOY\", 0, cDayOfYear.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"WOW\", 0, cWeekOfWeekyear.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"WY\", 0, cWeekyear.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"MONTH\", 0, cMonth.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"YEAR\", 0, cYear.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"DATE\", 0, cDate.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"TIME\", 0, cTime.compare( aDateTime, bDateTime ) );\n+    }   // end of testBasicComps\n+\n+\n+    /**\n+     * Test unequal comparisons with millis of second comparators.\n+     */\n+    public void testMillis() {\n+        aDateTime = new DateTime( System.currentTimeMillis(), DateTimeZone.UTC );\n+        bDateTime = new DateTime( aDateTime.getMillis() + 1, DateTimeZone.UTC );\n+        assertEquals( \"MillisM1\", -1, cMillis.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"MillisP1\", 1, cMillis.compare( bDateTime, aDateTime ) );\n+    }   // end of testMillis\n+\n+    /**\n+     * Test unequal comparisons with second comparators.\n+     */\n+    public void testSecond() {\n+        aDateTime = getADate( \"1969-12-31T23:59:58\" );\n+        bDateTime = getADate( \"1969-12-31T23:50:59\" );\n+        assertEquals( \"SecondM1a\", -1, cSecond.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"SecondP1a\", 1, cSecond.compare( bDateTime, aDateTime ) );\n+        aDateTime = getADate( \"1970-01-01T00:00:00\" );\n+        bDateTime = getADate( \"1970-01-01T00:00:01\" );\n+        assertEquals( \"SecondM1b\", -1, cSecond.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"SecondP1b\", 1, cSecond.compare( bDateTime, aDateTime ) );\n+    }   // end of testSecond\n+\n+    /**\n+     * Test unequal comparisons with minute comparators.\n+     */\n+    public void testMinute() {\n+        aDateTime = getADate( \"1969-12-31T23:58:00\" );\n+        bDateTime = getADate( \"1969-12-31T23:59:00\" );\n+        assertEquals( \"MinuteM1a\", -1, cMinute.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"MinuteP1a\", 1, cMinute.compare( bDateTime, aDateTime ) );\n+        aDateTime = getADate( \"1970-01-01T00:00:00\" );\n+        bDateTime = getADate( \"1970-01-01T00:01:00\" );\n+        assertEquals( \"MinuteM1b\", -1, cMinute.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"MinuteP1b\", 1, cMinute.compare( bDateTime, aDateTime ) );\n+    }   // end of testMinute\n+\n+    /**\n+     * Test unequal comparisons with hour comparators.\n+     */\n+    public void testHour() {\n+        aDateTime = getADate( \"1969-12-31T22:00:00\" );\n+        bDateTime = getADate( \"1969-12-31T23:00:00\" );\n+        assertEquals( \"HourM1a\", -1, cHour.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"HourP1a\", 1, cHour.compare( bDateTime, aDateTime ) );\n+        aDateTime = getADate( \"1970-01-01T00:00:00\" );\n+        bDateTime = getADate( \"1970-01-01T01:00:00\" );\n+        assertEquals( \"HourM1b\", -1, cHour.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"HourP1b\", 1, cHour.compare( bDateTime, aDateTime ) );\n+        aDateTime = getADate( \"1969-12-31T23:59:59\" );\n+        bDateTime = getADate( \"1970-01-01T00:00:00\" );\n+        assertEquals( \"HourP1c\", 1, cHour.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"HourM1c\", -1, cHour.compare( bDateTime, aDateTime ) );\n+    }   // end of testHour\n+\n+    /**\n+     * Test unequal comparisons with day of week comparators.\n+     */\n+    public void testDOW() {\n+        /*\n+         * Dates chosen when I wrote the code, so I know what day of\n+         * the week it is.\n+         */\n+        aDateTime = getADate( \"2002-04-12T00:00:00\" );\n+        bDateTime = getADate( \"2002-04-13T00:00:00\" );\n+        assertEquals( \"DOWM1a\", -1, cDayOfWeek.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"DOWP1a\", 1, cDayOfWeek.compare( bDateTime, aDateTime ) );\n+    }   // end of testDOW\n+\n+    /**\n+     * Test unequal comparisons with day of month comparators.\n+     */\n+    public void testDOM() {\n+        aDateTime = getADate( \"2002-04-12T00:00:00\" );\n+        bDateTime = getADate( \"2002-04-13T00:00:00\" );\n+        assertEquals( \"DOMM1a\", -1, cDayOfMonth.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"DOMP1a\", 1, cDayOfMonth.compare( bDateTime, aDateTime ) );\n+        aDateTime = getADate( \"2000-12-01T00:00:00\" );\n+        bDateTime = getADate( \"1814-04-30T00:00:00\" );\n+        assertEquals( \"DOMM1b\", -1, cDayOfMonth.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"DOMP1b\", 1, cDayOfMonth.compare( bDateTime, aDateTime ) );\n+    }   // end of testDOM\n+\n+    /**\n+     * Test unequal comparisons with day of year comparators.\n+     */\n+    public void testDOY() {\n+        aDateTime = getADate( \"2002-04-12T00:00:00\" );\n+        bDateTime = getADate( \"2002-04-13T00:00:00\" );\n+        assertEquals( \"DOYM1a\", -1, cDayOfYear.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"DOYP1a\", 1, cDayOfYear.compare( bDateTime, aDateTime ) );\n+        aDateTime = getADate( \"2000-02-29T00:00:00\" );\n+        bDateTime = getADate( \"1814-11-30T00:00:00\" );\n+        assertEquals( \"DOYM1b\", -1, cDayOfYear.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"DOYP1b\", 1, cDayOfYear.compare( bDateTime, aDateTime ) );\n+    }   // end of testDOY\n+\n+    /**\n+     * Test unequal comparisons with week of weekyear comparators.\n+     */\n+    public void testWOW() {\n+        // 1st week of year contains Jan 04.\n+        aDateTime = getADate( \"2000-01-04T00:00:00\" );\n+        bDateTime = getADate( \"2000-01-11T00:00:00\" );\n+        assertEquals( \"WOWM1a\", -1,\n+            cWeekOfWeekyear.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"WOWP1a\", 1,\n+            cWeekOfWeekyear.compare( bDateTime, aDateTime ) );\n+        aDateTime = getADate( \"2000-01-04T00:00:00\" );\n+        bDateTime = getADate( \"1999-12-31T00:00:00\" );\n+        assertEquals( \"WOWM1b\", -1,\n+            cWeekOfWeekyear.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"WOWP1b\", 1,\n+            cWeekOfWeekyear.compare( bDateTime, aDateTime ) );\n+    }   // end of testMillis\n+\n+    /**\n+     * Test unequal comparisons with year given the week comparators.\n+     */\n+    public void testWOYY() {\n+        // How do I test the end conditions of this?\n+        // Don't understand ......\n+        aDateTime = getADate( \"1998-12-31T23:59:59\" );\n+        bDateTime = getADate( \"1999-01-01T00:00:00\" );\n+        assertEquals( \"YOYYZ\", 0, cWeekyear.compare( aDateTime, bDateTime ) );\n+        bDateTime = getADate( \"1999-01-04T00:00:00\" );\n+        assertEquals( \"YOYYM1\", -1, cWeekyear.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"YOYYP1\", 1, cWeekyear.compare( bDateTime, aDateTime ) );\n+    }   // end of testWOYY\n+\n+    /**\n+     * Test unequal comparisons with month comparators.\n+     */\n+    public void testMonth() {\n+        aDateTime = getADate( \"2002-04-30T00:00:00\" );\n+        bDateTime = getADate( \"2002-05-01T00:00:00\" );\n+        assertEquals( \"MONTHM1a\", -1, cMonth.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"MONTHP1a\", 1, cMonth.compare( bDateTime, aDateTime ) );\n+        aDateTime = getADate( \"1900-01-01T00:00:00\" );\n+        bDateTime = getADate( \"1899-12-31T00:00:00\" );\n+        assertEquals( \"MONTHM1b\", -1, cMonth.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"MONTHP1b\", 1, cMonth.compare( bDateTime, aDateTime ) );\n+    }   // end of testMonth\n+\n+    /**\n+     * Test unequal comparisons with year comparators.\n+     */\n+    public void testYear() {\n+        aDateTime = getADate( \"2000-01-01T00:00:00\" );\n+        bDateTime = getADate( \"2001-01-01T00:00:00\" );\n+        assertEquals( \"YEARM1a\", -1, cYear.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"YEARP1a\", 1, cYear.compare( bDateTime, aDateTime ) );\n+        aDateTime = getADate( \"1968-12-31T23:59:59\" );\n+        bDateTime = getADate( \"1970-01-01T00:00:00\" );\n+        assertEquals( \"YEARM1b\", -1, cYear.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"YEARP1b\", 1, cYear.compare( bDateTime, aDateTime ) );\n+        aDateTime = getADate( \"1969-12-31T23:59:59\" );\n+        bDateTime = getADate( \"1970-01-01T00:00:00\" );\n+        assertEquals( \"YEARM1c\", -1, cYear.compare( aDateTime, bDateTime ) );\n+        assertEquals( \"YEARP1c\", 1, cYear.compare( bDateTime, aDateTime ) );\n+    }   // end of testYear\n+\n+    /*\n+     * 'List' processing tests follow.\n+     */\n+\n+     /**\n+      * Test sorting with full default comparator.\n+      */\n+     public void testListBasic() {\n+        String[] dtStrs = {\n+            \"1999-02-01T00:00:00\",\n+            \"1998-01-20T00:00:00\"\n+        };\n+        //\n+        List sl = loadAList( dtStrs );\n+        boolean isSorted1 = isListSorted( sl );\n+        Collections.sort( sl );\n+        boolean isSorted2 = isListSorted( sl );\n+        assertEquals(\"ListBasic\", !isSorted1, isSorted2);\n+     } // end of testListBasic\n+\n+     /**\n+      * Test sorting with millis of second comparator.\n+      */\n+    public void testListMillis() {\n+        //\n+        List sl = new ArrayList();\n+        long base = 12345L * 1000L;\n+        sl.add( new DateTime( base + 999L, DateTimeZone.UTC ) );\n+        sl.add( new DateTime( base + 222L, DateTimeZone.UTC ) );\n+        sl.add( new DateTime( base + 456L, DateTimeZone.UTC ) );\n+        sl.add( new DateTime( base + 888L, DateTimeZone.UTC ) );\n+        sl.add( new DateTime( base + 123L, DateTimeZone.UTC ) );\n+        sl.add( new DateTime( base + 000L, DateTimeZone.UTC ) );\n+        //\n+        boolean isSorted1 = isListSorted( sl );\n+        Collections.sort( sl, cMillis );\n+        boolean isSorted2 = isListSorted( sl );\n+        assertEquals(\"ListLillis\", !isSorted1, isSorted2);\n+    } // end of testListSecond\n+\n+\n+     /**\n+      * Test sorting with second comparator.\n+      */\n+    public void testListSecond() {\n+        String[] dtStrs = {\n+            \"1999-02-01T00:00:10\",\n+            \"1999-02-01T00:00:30\",\n+            \"1999-02-01T00:00:25\",\n+            \"1999-02-01T00:00:18\",\n+            \"1999-02-01T00:00:01\",\n+            \"1999-02-01T00:00:59\",\n+            \"1999-02-01T00:00:22\"\n+        };\n+        //\n+        List sl = loadAList( dtStrs );\n+        boolean isSorted1 = isListSorted( sl );\n+        Collections.sort( sl, cSecond );\n+        boolean isSorted2 = isListSorted( sl );\n+        assertEquals(\"ListSecond\", !isSorted1, isSorted2);\n+    } // end of testListSecond\n+\n+     /**\n+      * Test sorting with minute comparator.\n+      */\n+    public void testListMinute() {\n+        String[] dtStrs = {\n+            \"1999-02-01T00:10:00\",\n+            \"1999-02-01T00:30:00\",\n+            \"1999-02-01T00:25:00\",\n+            \"1999-02-01T00:18:00\",\n+            \"1999-02-01T00:01:00\",\n+            \"1999-02-01T00:59:00\",\n+            \"1999-02-01T00:22:00\"\n+        };\n+        //\n+        List sl = loadAList( dtStrs );\n+        boolean isSorted1 = isListSorted( sl );\n+        Collections.sort( sl, cMinute );\n+        boolean isSorted2 = isListSorted( sl );\n+        assertEquals(\"ListMinute\", !isSorted1, isSorted2);\n+    } // end of testListMinute\n+\n+     /**\n+      * Test sorting with hour comparator.\n+      */\n+    public void testListHour() {\n+        String[] dtStrs = {\n+            \"1999-02-01T10:00:00\",\n+            \"1999-02-01T23:00:00\",\n+            \"1999-02-01T01:00:00\",\n+            \"1999-02-01T15:00:00\",\n+            \"1999-02-01T05:00:00\",\n+            \"1999-02-01T20:00:00\",\n+            \"1999-02-01T17:00:00\"\n+        };\n+        //\n+        List sl = loadAList( dtStrs );\n+        boolean isSorted1 = isListSorted( sl );\n+        Collections.sort( sl, cHour );\n+        boolean isSorted2 = isListSorted( sl );\n+        assertEquals(\"ListHour\", !isSorted1, isSorted2);\n+    } // end of testListHour\n+\n+\n+     /**\n+      * Test sorting with day of week comparator.\n+      */\n+    public void testListDOW() {\n+        String[] dtStrs = {\n+            /* 2002-04-15 = Monday */\n+            \"2002-04-21T10:00:00\",\n+            \"2002-04-16T10:00:00\",\n+            \"2002-04-15T10:00:00\",\n+            \"2002-04-17T10:00:00\",\n+            \"2002-04-19T10:00:00\",\n+            \"2002-04-18T10:00:00\",\n+            \"2002-04-20T10:00:00\"\n+        };\n+        //\n+        List sl = loadAList( dtStrs );\n+        boolean isSorted1 = isListSorted( sl );\n+        Collections.sort( sl, cDayOfWeek );\n+        boolean isSorted2 = isListSorted( sl );\n+        assertEquals(\"ListDOW\", !isSorted1, isSorted2);\n+    } // end of testListDOW\n+\n+     /**\n+      * Test sorting with day of month comparator.\n+      */\n+    public void testListDOM() {\n+        String[] dtStrs = {\n+            /* 2002-04-14 = Sunday */\n+            \"2002-04-20T10:00:00\",\n+            \"2002-04-16T10:00:00\",\n+            \"2002-04-15T10:00:00\",\n+            \"2002-04-17T10:00:00\",\n+            \"2002-04-19T10:00:00\",\n+            \"2002-04-18T10:00:00\",\n+            \"2002-04-14T10:00:00\"\n+        };\n+        //\n+        List sl = loadAList( dtStrs );\n+        boolean isSorted1 = isListSorted( sl );\n+        Collections.sort( sl, cDayOfMonth );\n+        boolean isSorted2 = isListSorted( sl );\n+        assertEquals(\"ListDOM\", !isSorted1, isSorted2);\n+    } // end of testListDOM\n+\n+     /**\n+      * Test sorting with day of year comparator.\n+      */\n+    public void testListDOY() {\n+        String[] dtStrs = {\n+            \"2002-04-20T10:00:00\",\n+            \"2002-01-16T10:00:00\",\n+            \"2002-12-31T10:00:00\",\n+            \"2002-09-14T10:00:00\",\n+            \"2002-09-19T10:00:00\",\n+            \"2002-02-14T10:00:00\",\n+            \"2002-10-30T10:00:00\"\n+        };\n+        //\n+        List sl = loadAList( dtStrs );\n+        boolean isSorted1 = isListSorted( sl );\n+        Collections.sort( sl, cDayOfYear );\n+        boolean isSorted2 = isListSorted( sl );\n+        assertEquals(\"ListDOY\", !isSorted1, isSorted2);\n+    } // end of testListDOY\n+\n+     /**\n+      * Test sorting with week of weekyear comparator.\n+      */\n+    public void testListWOW() {\n+        String[] dtStrs = {\n+            \"2002-04-01T10:00:00\",\n+            \"2002-01-01T10:00:00\",\n+            \"2002-12-01T10:00:00\",\n+            \"2002-09-01T10:00:00\",\n+            \"2002-09-01T10:00:00\",\n+            \"2002-02-01T10:00:00\",\n+            \"2002-10-01T10:00:00\"\n+        };\n+        //\n+        List sl = loadAList( dtStrs );\n+        boolean isSorted1 = isListSorted( sl );\n+        Collections.sort( sl, cWeekOfWeekyear );\n+        boolean isSorted2 = isListSorted( sl );\n+        assertEquals(\"ListWOW\", !isSorted1, isSorted2);\n+    } // end of testListWOW\n+\n+     /**\n+      * Test sorting with year (given week) comparator.\n+      */\n+    public void testListYOYY() {\n+        // ?? How to catch end conditions ??\n+        String[] dtStrs = {\n+            \"2010-04-01T10:00:00\",\n+            \"2002-01-01T10:00:00\"\n+        };\n+        //\n+        List sl = loadAList( dtStrs );\n+        boolean isSorted1 = isListSorted( sl );\n+        Collections.sort( sl, cWeekyear );\n+        boolean isSorted2 = isListSorted( sl );\n+        assertEquals(\"ListYOYY\", !isSorted1, isSorted2);\n+    } // end of testListYOYY\n+\n+\n+     /**\n+      * Test sorting with month comparator.\n+      */\n+    public void testListMonth() {\n+        String[] dtStrs = {\n+            \"2002-04-01T10:00:00\",\n+            \"2002-01-01T10:00:00\",\n+            \"2002-12-01T10:00:00\",\n+            \"2002-09-01T10:00:00\",\n+            \"2002-09-01T10:00:00\",\n+            \"2002-02-01T10:00:00\",\n+            \"2002-10-01T10:00:00\"\n+        };\n+        //\n+        List sl = loadAList( dtStrs );\n+        boolean isSorted1 = isListSorted( sl );\n+        Collections.sort( sl, cMonth );\n+        boolean isSorted2 = isListSorted( sl );\n+        assertEquals(\"ListMonth\", !isSorted1, isSorted2);\n+    } // end of testListMonth\n+\n+     /**\n+      * Test sorting with year comparator.\n+      */\n+     public void testListYear() {\n+        String[] dtStrs = {\n+            \"1999-02-01T00:00:00\",\n+            \"1998-02-01T00:00:00\",\n+            \"2525-02-01T00:00:00\",\n+            \"1776-02-01T00:00:00\",\n+            \"1863-02-01T00:00:00\",\n+            \"1066-02-01T00:00:00\",\n+            \"2100-02-01T00:00:00\"\n+        };\n+        //\n+        List sl = loadAList( dtStrs );\n+        boolean isSorted1 = isListSorted( sl );\n+        Collections.sort( sl, cYear );\n+        boolean isSorted2 = isListSorted( sl );\n+        assertEquals(\"ListYear\", !isSorted1, isSorted2);\n+     } // end of testListYear\n+\n+     /**\n+      * Test sorting with date only comparator.\n+      */\n+    public void testListDate() {\n+        String[] dtStrs = {\n+            \"1999-02-01T00:00:00\",\n+            \"1998-10-03T00:00:00\",\n+            \"2525-05-20T00:00:00\",\n+            \"1776-12-25T00:00:00\",\n+            \"1863-01-31T00:00:00\",\n+            \"1066-09-22T00:00:00\",\n+            \"2100-07-04T00:00:00\"\n+        };\n+        //\n+        List sl = loadAList( dtStrs );\n+        boolean isSorted1 = isListSorted( sl );\n+        Collections.sort( sl, cDate );\n+        boolean isSorted2 = isListSorted( sl );\n+        assertEquals(\"ListDate\", !isSorted1, isSorted2);\n+    } // end of testListDate\n+\n+     /**\n+      * Test sorting with time only comparator.\n+      */\n+    public void testListTime() {\n+        String[] dtStrs = {\n+            \"1999-02-01T01:02:05\",\n+            \"1999-02-01T22:22:22\",\n+            \"1999-02-01T05:30:45\",\n+            \"1999-02-01T09:17:59\",\n+            \"1999-02-01T09:17:58\",\n+            \"1999-02-01T15:30:00\",\n+            \"1999-02-01T17:00:44\"\n+        };\n+        //\n+        List sl = loadAList( dtStrs );\n+        boolean isSorted1 = isListSorted( sl );\n+        Collections.sort( sl, cTime );\n+        boolean isSorted2 = isListSorted( sl );\n+        assertEquals(\"ListTime\", !isSorted1, isSorted2);\n+    } // end of testListTime\n+\n+\n+    /**\n+     * Test comparator operation with null object(s).\n+     */\n+    public void testNullDT() {\n+        // null means now\n+        aDateTime = getADate(\"2000-01-01T00:00:00\");\n+        assertTrue(cYear.compare(null, aDateTime) > 0);\n+        assertTrue(cYear.compare(aDateTime, null) < 0);\n+    }\n+\n+    /**\n+     * Test comparator operation with an invalid object type.\n+     */\n+    public void testInvalidObj() {\n+        aDateTime = getADate(\"2000-01-01T00:00:00\");\n+        try {\n+            cYear.compare(\"FreeBird\", aDateTime);\n+            fail(\"Invalid object failed\");\n+        } catch (IllegalArgumentException cce) {}\n+    }\n+\n+    // private convenience methods\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Creates a date to test with.\n+     */\n+    private DateTime getADate(String s) {\n+        DateTime retDT = null;\n+        try {\n+            retDT = new DateTime(s, DateTimeZone.UTC);\n+        } catch (IllegalArgumentException pe) {\n+            pe.printStackTrace();\n+        }\n+        return retDT;\n+    }\n+\n+    /**\n+     * Load a string array.\n+     */\n+    private List loadAList(String[] someStrs) {\n+        List newList = new ArrayList();\n+        try {\n+            for (int i = 0; i < someStrs.length; ++i) {\n+                newList.add(new DateTime(someStrs[i], DateTimeZone.UTC));\n+            } // end of the for\n+        } catch (IllegalArgumentException pe) {\n+            pe.printStackTrace();\n+        }\n+        return newList;\n+    }\n+\n+    /**\n+     * Check if the list is sorted.\n+     */\n+    private boolean isListSorted(List tl) {\n+        // tl must be populated with DateTime objects.\n+        DateTime lhDT = (DateTime)tl.get(0);\n+        DateTime rhDT = null;\n+        Long lhVal = new Long( lhDT.getMillis() );\n+        Long rhVal = null;\n+        for (int i = 1; i < tl.size(); ++i) {\n+            rhDT = (DateTime)tl.get(i);\n+            rhVal = new Long( rhDT.getMillis() );\n+            if ( lhVal.compareTo( rhVal) > 0 ) return false;\n+            //\n+            lhVal = rhVal;  // swap for next iteration\n+            lhDT = rhDT;    // swap for next iteration\n+        }\n+        return true;\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestDateTimeConstants.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test case.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestDateTimeConstants extends TestCase {\n+\n+    /**\n+     * The main method for this test program.\n+     * @param args command line arguments.\n+     */\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    /**\n+     * TestSuite is a junit required method.\n+     */\n+    public static TestSuite suite() {\n+        return new TestSuite(TestDateTimeConstants.class);\n+    }\n+\n+    /**\n+     * TestDateTimeComparator constructor.\n+     * @param name\n+     */\n+    public TestDateTimeConstants(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor() {\n+        DateTimeConstants c = new DateTimeConstants() {\n+        };\n+        c.toString();\n+    }\n+\n+    public void testHalfdaysOfDay() {\n+        assertEquals(0, DateTimeConstants.AM);\n+        assertEquals(1, DateTimeConstants.PM);\n+    }\n+\n+    public void testDaysOfWeek() {\n+        assertEquals(1, DateTimeConstants.MONDAY);\n+        assertEquals(2, DateTimeConstants.TUESDAY);\n+        assertEquals(3, DateTimeConstants.WEDNESDAY);\n+        assertEquals(4, DateTimeConstants.THURSDAY);\n+        assertEquals(5, DateTimeConstants.FRIDAY);\n+        assertEquals(6, DateTimeConstants.SATURDAY);\n+        assertEquals(7, DateTimeConstants.SUNDAY);\n+    }\n+\n+    public void testMonthsOfYear() {\n+        assertEquals(1, DateTimeConstants.JANUARY);\n+        assertEquals(2, DateTimeConstants.FEBRUARY);\n+        assertEquals(3, DateTimeConstants.MARCH);\n+        assertEquals(4, DateTimeConstants.APRIL);\n+        assertEquals(5, DateTimeConstants.MAY);\n+        assertEquals(6, DateTimeConstants.JUNE);\n+        assertEquals(7, DateTimeConstants.JULY);\n+        assertEquals(8, DateTimeConstants.AUGUST);\n+        assertEquals(9, DateTimeConstants.SEPTEMBER);\n+        assertEquals(10, DateTimeConstants.OCTOBER);\n+        assertEquals(11, DateTimeConstants.NOVEMBER);\n+        assertEquals(12, DateTimeConstants.DECEMBER);\n+    }\n+\n+    public void testEras() {\n+        assertEquals(0, DateTimeConstants.BC);\n+        assertEquals(0, DateTimeConstants.BCE);\n+        assertEquals(1, DateTimeConstants.AD);\n+        assertEquals(1, DateTimeConstants.CE);\n+    }\n+\n+    public void testMaths() {\n+        assertEquals(1000, DateTimeConstants.MILLIS_PER_SECOND);\n+        assertEquals(60 * 1000, DateTimeConstants.MILLIS_PER_MINUTE);\n+        assertEquals(60 * 60 * 1000, DateTimeConstants.MILLIS_PER_HOUR);\n+        assertEquals(24 * 60 * 60 * 1000, DateTimeConstants.MILLIS_PER_DAY);\n+        assertEquals(7 * 24 * 60 * 60 * 1000, DateTimeConstants.MILLIS_PER_WEEK);\n+        \n+        assertEquals(60, DateTimeConstants.SECONDS_PER_MINUTE);\n+        assertEquals(60 * 60, DateTimeConstants.SECONDS_PER_HOUR);\n+        assertEquals(24 * 60 * 60, DateTimeConstants.SECONDS_PER_DAY);\n+        assertEquals(7 * 24 * 60 * 60, DateTimeConstants.SECONDS_PER_WEEK);\n+        \n+        assertEquals(60, DateTimeConstants.MINUTES_PER_HOUR);\n+        assertEquals(24 * 60, DateTimeConstants.MINUTES_PER_DAY);\n+        assertEquals(7 * 24 * 60, DateTimeConstants.MINUTES_PER_WEEK);\n+        \n+        assertEquals(24, DateTimeConstants.HOURS_PER_DAY);\n+        assertEquals(7 * 24, DateTimeConstants.HOURS_PER_WEEK);\n+        \n+        assertEquals(7, DateTimeConstants.DAYS_PER_WEEK);\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestDateTimeFieldType.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.lang.reflect.Constructor;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.CopticChronology;\n+\n+/**\n+ * This class is a Junit unit test for Chronology.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestDateTimeFieldType extends TestCase {\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestDateTimeFieldType.class);\n+    }\n+\n+    public TestDateTimeFieldType(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+    }\n+\n+    protected void tearDown() throws Exception {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_era() throws Exception {\n+        assertEquals(DateTimeFieldType.era(), DateTimeFieldType.era());\n+        assertEquals(\"era\", DateTimeFieldType.era().getName());\n+        assertEquals(DurationFieldType.eras(), DateTimeFieldType.era().getDurationType());\n+        assertEquals(null, DateTimeFieldType.era().getRangeDurationType());\n+        assertEquals(CopticChronology.getInstanceUTC().era(), DateTimeFieldType.era().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().era().isSupported(), DateTimeFieldType.era().isSupported(CopticChronology.getInstanceUTC()));\n+        assertSerialization(DateTimeFieldType.era());\n+    }\n+\n+    public void test_centuryOfEra() throws Exception {\n+        assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra());\n+        assertEquals(\"centuryOfEra\", DateTimeFieldType.centuryOfEra().getName());\n+        assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType());\n+        assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType());\n+        assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC()));\n+        assertSerialization(DateTimeFieldType.centuryOfEra());\n+    }\n+\n+    public void test_yearOfCentury() throws Exception {\n+        assertEquals(DateTimeFieldType.yearOfCentury(), DateTimeFieldType.yearOfCentury());\n+        assertEquals(\"yearOfCentury\", DateTimeFieldType.yearOfCentury().getName());\n+        assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfCentury().getDurationType());\n+        assertEquals(DurationFieldType.centuries(), DateTimeFieldType.yearOfCentury().getRangeDurationType());\n+        assertEquals(CopticChronology.getInstanceUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(CopticChronology.getInstanceUTC()));\n+        assertSerialization(DateTimeFieldType.yearOfCentury());\n+    }\n+\n+    public void test_yearOfEra() throws Exception {\n+        assertEquals(DateTimeFieldType.yearOfEra(), DateTimeFieldType.yearOfEra());\n+        assertEquals(\"yearOfEra\", DateTimeFieldType.yearOfEra().getName());\n+        assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfEra().getDurationType());\n+        assertEquals(DurationFieldType.eras(), DateTimeFieldType.yearOfEra().getRangeDurationType());\n+        assertEquals(CopticChronology.getInstanceUTC().yearOfEra(), DateTimeFieldType.yearOfEra().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().yearOfEra().isSupported(), DateTimeFieldType.yearOfEra().isSupported(CopticChronology.getInstanceUTC()));\n+        assertSerialization(DateTimeFieldType.yearOfEra());\n+    }\n+\n+    public void test_year() throws Exception {\n+        assertEquals(DateTimeFieldType.year(), DateTimeFieldType.year());\n+        assertEquals(\"year\", DateTimeFieldType.year().getName());\n+        assertEquals(DurationFieldType.years(), DateTimeFieldType.year().getDurationType());\n+        assertEquals(null, DateTimeFieldType.year().getRangeDurationType());\n+        assertEquals(CopticChronology.getInstanceUTC().year(), DateTimeFieldType.year().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().year().isSupported(), DateTimeFieldType.year().isSupported(CopticChronology.getInstanceUTC()));\n+        assertSerialization(DateTimeFieldType.year());\n+    }\n+\n+    public void test_monthOfYear() throws Exception {\n+        assertEquals(DateTimeFieldType.monthOfYear(), DateTimeFieldType.monthOfYear());\n+        assertEquals(\"monthOfYear\", DateTimeFieldType.monthOfYear().getName());\n+        assertEquals(DurationFieldType.months(), DateTimeFieldType.monthOfYear().getDurationType());\n+        assertEquals(DurationFieldType.years(), DateTimeFieldType.monthOfYear().getRangeDurationType());\n+        assertEquals(CopticChronology.getInstanceUTC().monthOfYear(), DateTimeFieldType.monthOfYear().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().monthOfYear().isSupported(), DateTimeFieldType.monthOfYear().isSupported(CopticChronology.getInstanceUTC()));\n+        assertSerialization(DateTimeFieldType.monthOfYear());\n+    }\n+\n+    public void test_weekyearOfCentury() throws Exception {\n+        assertEquals(DateTimeFieldType.weekyearOfCentury(), DateTimeFieldType.weekyearOfCentury());\n+        assertEquals(\"weekyearOfCentury\", DateTimeFieldType.weekyearOfCentury().getName());\n+        assertEquals(DurationFieldType.weekyears(), DateTimeFieldType.weekyearOfCentury().getDurationType());\n+        assertEquals(DurationFieldType.centuries(), DateTimeFieldType.weekyearOfCentury().getRangeDurationType());\n+        assertEquals(CopticChronology.getInstanceUTC().weekyearOfCentury(), DateTimeFieldType.weekyearOfCentury().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().weekyearOfCentury().isSupported(), DateTimeFieldType.weekyearOfCentury().isSupported(CopticChronology.getInstanceUTC()));\n+        assertSerialization(DateTimeFieldType.weekyearOfCentury());\n+    }\n+\n+    public void test_weekyear() throws Exception {\n+        assertEquals(DateTimeFieldType.weekyear(), DateTimeFieldType.weekyear());\n+        assertEquals(\"weekyear\", DateTimeFieldType.weekyear().getName());\n+        assertEquals(DurationFieldType.weekyears(), DateTimeFieldType.weekyear().getDurationType());\n+        assertEquals(null, DateTimeFieldType.weekyear().getRangeDurationType());\n+        assertEquals(CopticChronology.getInstanceUTC().weekyear(), DateTimeFieldType.weekyear().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().weekyear().isSupported(), DateTimeFieldType.weekyear().isSupported(CopticChronology.getInstanceUTC()));\n+        assertSerialization(DateTimeFieldType.weekyear());\n+    }\n+\n+    public void test_weekOfWeekyear() throws Exception {\n+        assertEquals(DateTimeFieldType.weekOfWeekyear(), DateTimeFieldType.weekOfWeekyear());\n+        assertEquals(\"weekOfWeekyear\", DateTimeFieldType.weekOfWeekyear().getName());\n+        assertEquals(DurationFieldType.weeks(), DateTimeFieldType.weekOfWeekyear().getDurationType());\n+        assertEquals(DurationFieldType.weekyears(), DateTimeFieldType.weekOfWeekyear().getRangeDurationType());\n+        assertEquals(CopticChronology.getInstanceUTC().weekOfWeekyear(), DateTimeFieldType.weekOfWeekyear().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().weekOfWeekyear().isSupported(), DateTimeFieldType.weekOfWeekyear().isSupported(CopticChronology.getInstanceUTC()));\n+        assertSerialization(DateTimeFieldType.weekOfWeekyear());\n+    }\n+\n+    public void test_dayOfYear() throws Exception {\n+        assertEquals(DateTimeFieldType.dayOfYear(), DateTimeFieldType.dayOfYear());\n+        assertEquals(\"dayOfYear\", DateTimeFieldType.dayOfYear().getName());\n+        assertEquals(DurationFieldType.days(), DateTimeFieldType.dayOfYear().getDurationType());\n+        assertEquals(DurationFieldType.years(), DateTimeFieldType.dayOfYear().getRangeDurationType());\n+        assertEquals(CopticChronology.getInstanceUTC().dayOfYear(), DateTimeFieldType.dayOfYear().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().dayOfYear().isSupported(), DateTimeFieldType.dayOfYear().isSupported(CopticChronology.getInstanceUTC()));\n+        assertSerialization(DateTimeFieldType.dayOfYear());\n+    }\n+\n+    public void test_dayOfMonth() throws Exception {\n+        assertEquals(DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfMonth());\n+        assertEquals(\"dayOfMonth\", DateTimeFieldType.dayOfMonth().getName());\n+        assertEquals(DurationFieldType.days(), DateTimeFieldType.dayOfMonth().getDurationType());\n+        assertEquals(DurationFieldType.months(), DateTimeFieldType.dayOfMonth().getRangeDurationType());\n+        assertEquals(CopticChronology.getInstanceUTC().dayOfMonth(), DateTimeFieldType.dayOfMonth().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().dayOfMonth().isSupported(), DateTimeFieldType.dayOfMonth().isSupported(CopticChronology.getInstanceUTC()));\n+        assertSerialization(DateTimeFieldType.dayOfMonth());\n+    }\n+\n+    public void test_dayOfWeek() throws Exception {\n+        assertEquals(DateTimeFieldType.dayOfWeek(), DateTimeFieldType.dayOfWeek());\n+        assertEquals(\"dayOfWeek\", DateTimeFieldType.dayOfWeek().getName());\n+        assertEquals(DurationFieldType.days(), DateTimeFieldType.dayOfWeek().getDurationType());\n+        assertEquals(DurationFieldType.weeks(), DateTimeFieldType.dayOfWeek().getRangeDurationType());\n+        assertEquals(CopticChronology.getInstanceUTC().dayOfWeek(), DateTimeFieldType.dayOfWeek().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().dayOfWeek().isSupported(), DateTimeFieldType.dayOfWeek().isSupported(CopticChronology.getInstanceUTC()));\n+        assertSerialization(DateTimeFieldType.dayOfWeek());\n+    }\n+\n+    public void test_halfdayOfDay() throws Exception {\n+        assertEquals(DateTimeFieldType.halfdayOfDay(), DateTimeFieldType.halfdayOfDay());\n+        assertEquals(\"halfdayOfDay\", DateTimeFieldType.halfdayOfDay().getName());\n+        assertEquals(DurationFieldType.halfdays(), DateTimeFieldType.halfdayOfDay().getDurationType());\n+        assertEquals(DurationFieldType.days(), DateTimeFieldType.halfdayOfDay().getRangeDurationType());\n+        assertEquals(CopticChronology.getInstanceUTC().halfdayOfDay(), DateTimeFieldType.halfdayOfDay().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().halfdayOfDay().isSupported(), DateTimeFieldType.halfdayOfDay().isSupported(CopticChronology.getInstanceUTC()));\n+        assertSerialization(DateTimeFieldType.halfdayOfDay());\n+    }\n+\n+    public void test_clockhourOfDay() throws Exception {\n+        assertEquals(DateTimeFieldType.clockhourOfDay(), DateTimeFieldType.clockhourOfDay());\n+        assertEquals(\"clockhourOfDay\", DateTimeFieldType.clockhourOfDay().getName());\n+        assertEquals(DurationFieldType.hours(), DateTimeFieldType.clockhourOfDay().getDurationType());\n+        assertEquals(DurationFieldType.days(), DateTimeFieldType.clockhourOfDay().getRangeDurationType());\n+        assertEquals(CopticChronology.getInstanceUTC().clockhourOfDay(), DateTimeFieldType.clockhourOfDay().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().clockhourOfDay().isSupported(), DateTimeFieldType.clockhourOfDay().isSupported(CopticChronology.getInstanceUTC()));\n+        assertSerialization(DateTimeFieldType.clockhourOfDay());\n+    }\n+\n+    public void test_clockhourOfHalfday() throws Exception {\n+        assertEquals(DateTimeFieldType.clockhourOfHalfday(), DateTimeFieldType.clockhourOfHalfday());\n+        assertEquals(\"clockhourOfHalfday\", DateTimeFieldType.clockhourOfHalfday().getName());\n+        assertEquals(DurationFieldType.hours(), DateTimeFieldType.clockhourOfHalfday().getDurationType());\n+        assertEquals(DurationFieldType.halfdays(), DateTimeFieldType.clockhourOfHalfday().getRangeDurationType());\n+        assertEquals(CopticChronology.getInstanceUTC().clockhourOfHalfday(), DateTimeFieldType.clockhourOfHalfday().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().clockhourOfHalfday().isSupported(), DateTimeFieldType.clockhourOfHalfday().isSupported(CopticChronology.getInstanceUTC()));\n+        assertSerialization(DateTimeFieldType.clockhourOfHalfday());\n+    }\n+\n+    public void test_hourOfHalfday() throws Exception {\n+        assertEquals(DateTimeFieldType.hourOfHalfday(), DateTimeFieldType.hourOfHalfday());\n+        assertEquals(\"hourOfHalfday\", DateTimeFieldType.hourOfHalfday().getName());\n+        assertEquals(DurationFieldType.hours(), DateTimeFieldType.hourOfHalfday().getDurationType());\n+        assertEquals(DurationFieldType.halfdays(), DateTimeFieldType.hourOfHalfday().getRangeDurationType());\n+        assertEquals(CopticChronology.getInstanceUTC().hourOfHalfday(), DateTimeFieldType.hourOfHalfday().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().hourOfHalfday().isSupported(), DateTimeFieldType.hourOfHalfday().isSupported(CopticChronology.getInstanceUTC()));\n+        assertSerialization(DateTimeFieldType.hourOfHalfday());\n+    }\n+\n+    public void test_hourOfDay() throws Exception {\n+        assertEquals(DateTimeFieldType.hourOfDay(), DateTimeFieldType.hourOfDay());\n+        assertEquals(\"hourOfDay\", DateTimeFieldType.hourOfDay().getName());\n+        assertEquals(DurationFieldType.hours(), DateTimeFieldType.hourOfDay().getDurationType());\n+        assertEquals(DurationFieldType.days(), DateTimeFieldType.hourOfDay().getRangeDurationType());\n+        assertEquals(CopticChronology.getInstanceUTC().hourOfDay(), DateTimeFieldType.hourOfDay().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().hourOfDay().isSupported(), DateTimeFieldType.hourOfDay().isSupported(CopticChronology.getInstanceUTC()));\n+        assertSerialization(DateTimeFieldType.hourOfDay());\n+    }\n+\n+    public void test_minuteOfDay() throws Exception {\n+        assertEquals(DateTimeFieldType.minuteOfDay(), DateTimeFieldType.minuteOfDay());\n+        assertEquals(\"minuteOfDay\", DateTimeFieldType.minuteOfDay().getName());\n+        assertEquals(DurationFieldType.minutes(), DateTimeFieldType.minuteOfDay().getDurationType());\n+        assertEquals(DurationFieldType.days(), DateTimeFieldType.minuteOfDay().getRangeDurationType());\n+        assertEquals(CopticChronology.getInstanceUTC().minuteOfDay(), DateTimeFieldType.minuteOfDay().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().minuteOfDay().isSupported(), DateTimeFieldType.minuteOfDay().isSupported(CopticChronology.getInstanceUTC()));\n+        assertSerialization(DateTimeFieldType.minuteOfDay());\n+    }\n+\n+    public void test_minuteOfHour() throws Exception {\n+        assertEquals(DateTimeFieldType.minuteOfHour(), DateTimeFieldType.minuteOfHour());\n+        assertEquals(\"minuteOfHour\", DateTimeFieldType.minuteOfHour().getName());\n+        assertEquals(DurationFieldType.minutes(), DateTimeFieldType.minuteOfHour().getDurationType());\n+        assertEquals(DurationFieldType.hours(), DateTimeFieldType.minuteOfHour().getRangeDurationType());\n+        assertEquals(CopticChronology.getInstanceUTC().minuteOfHour(), DateTimeFieldType.minuteOfHour().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().minuteOfHour().isSupported(), DateTimeFieldType.minuteOfHour().isSupported(CopticChronology.getInstanceUTC()));\n+        assertSerialization(DateTimeFieldType.minuteOfHour());\n+    }\n+\n+    public void test_secondOfDay() throws Exception {\n+        assertEquals(DateTimeFieldType.secondOfDay(), DateTimeFieldType.secondOfDay());\n+        assertEquals(\"secondOfDay\", DateTimeFieldType.secondOfDay().getName());\n+        assertEquals(DurationFieldType.seconds(), DateTimeFieldType.secondOfDay().getDurationType());\n+        assertEquals(DurationFieldType.days(), DateTimeFieldType.secondOfDay().getRangeDurationType());\n+        assertEquals(CopticChronology.getInstanceUTC().secondOfDay(), DateTimeFieldType.secondOfDay().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().secondOfDay().isSupported(), DateTimeFieldType.secondOfDay().isSupported(CopticChronology.getInstanceUTC()));\n+        assertSerialization(DateTimeFieldType.secondOfDay());\n+    }\n+\n+    public void test_secondOfMinute() throws Exception {\n+        assertEquals(DateTimeFieldType.secondOfMinute(), DateTimeFieldType.secondOfMinute());\n+        assertEquals(\"secondOfMinute\", DateTimeFieldType.secondOfMinute().getName());\n+        assertEquals(DurationFieldType.seconds(), DateTimeFieldType.secondOfMinute().getDurationType());\n+        assertEquals(DurationFieldType.minutes(), DateTimeFieldType.secondOfMinute().getRangeDurationType());\n+        assertEquals(CopticChronology.getInstanceUTC().secondOfMinute(), DateTimeFieldType.secondOfMinute().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().secondOfMinute().isSupported(), DateTimeFieldType.secondOfMinute().isSupported(CopticChronology.getInstanceUTC()));\n+        assertSerialization(DateTimeFieldType.secondOfMinute());\n+    }\n+\n+    public void test_millisOfDay() throws Exception {\n+        assertEquals(DateTimeFieldType.millisOfDay(), DateTimeFieldType.millisOfDay());\n+        assertEquals(\"millisOfDay\", DateTimeFieldType.millisOfDay().getName());\n+        assertEquals(DurationFieldType.millis(), DateTimeFieldType.millisOfDay().getDurationType());\n+        assertEquals(DurationFieldType.days(), DateTimeFieldType.millisOfDay().getRangeDurationType());\n+        assertEquals(CopticChronology.getInstanceUTC().millisOfDay(), DateTimeFieldType.millisOfDay().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().millisOfDay().isSupported(), DateTimeFieldType.millisOfDay().isSupported(CopticChronology.getInstanceUTC()));\n+        assertSerialization(DateTimeFieldType.millisOfDay());\n+    }\n+\n+    public void test_millisOfSecond() throws Exception {\n+        assertEquals(DateTimeFieldType.millisOfSecond(), DateTimeFieldType.millisOfSecond());\n+        assertEquals(\"millisOfSecond\", DateTimeFieldType.millisOfSecond().getName());\n+        assertEquals(DurationFieldType.millis(), DateTimeFieldType.millisOfSecond().getDurationType());\n+        assertEquals(DurationFieldType.seconds(), DateTimeFieldType.millisOfSecond().getRangeDurationType());\n+        assertEquals(CopticChronology.getInstanceUTC().millisOfSecond(), DateTimeFieldType.millisOfSecond().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().millisOfSecond().isSupported(), DateTimeFieldType.millisOfSecond().isSupported(CopticChronology.getInstanceUTC()));\n+        assertSerialization(DateTimeFieldType.millisOfSecond());\n+    }\n+\n+    public void test_other() throws Exception {\n+        assertEquals(1, DateTimeFieldType.class.getDeclaredClasses().length);\n+        Class cls = DateTimeFieldType.class.getDeclaredClasses()[0];\n+        assertEquals(1, cls.getDeclaredConstructors().length);\n+        Constructor con = cls.getDeclaredConstructors()[0];\n+        Object[] params = new Object[] {\n+            \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n+        con.setAccessible(true);  // for Apache Harmony JVM\n+        DateTimeFieldType type = (DateTimeFieldType) con.newInstance(params);\n+        \n+        assertEquals(\"other\", type.getName());\n+        assertSame(DurationFieldType.hours(), type.getDurationType());\n+        assertSame(DurationFieldType.months(), type.getRangeDurationType());\n+        try {\n+            type.getField(CopticChronology.getInstanceUTC());\n+            fail();\n+        } catch (InternalError ex) {}\n+        DateTimeFieldType result = doSerialization(type);\n+        assertEquals(type.getName(), result.getName());\n+        assertNotSame(type, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private void assertSerialization(DateTimeFieldType type) throws Exception {\n+        DateTimeFieldType result = doSerialization(type);\n+        assertSame(type, result);\n+    }\n+\n+    private DateTimeFieldType doSerialization(DateTimeFieldType type) throws Exception {\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(type);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        DateTimeFieldType result = (DateTimeFieldType) ois.readObject();\n+        ois.close();\n+        return result;\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestDateTimeUtils.java\n+/*\n+ *  Copyright 2001-2010 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.lang.reflect.Modifier;\n+import java.security.AllPermission;\n+import java.security.CodeSource;\n+import java.security.Permission;\n+import java.security.PermissionCollection;\n+import java.security.Permissions;\n+import java.security.Policy;\n+import java.security.ProtectionDomain;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTimeUtils.MillisProvider;\n+import org.joda.time.base.AbstractInstant;\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.GJChronology;\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * This class is a Junit unit test for DateTimeUtils.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestDateTimeUtils extends TestCase {\n+\n+    private static final GJChronology GJ = GJChronology.getInstance();\n+    private static final boolean OLD_JDK;\n+    static {\n+        String str = System.getProperty(\"java.version\");\n+        boolean old = true;\n+        if (str.length() > 3 &&\n+            str.charAt(0) == '1' &&\n+            str.charAt(1) == '.' &&\n+            (str.charAt(2) == '4' || str.charAt(2) == '5' || str.charAt(2) == '6')) {\n+            old = false;\n+        }\n+        OLD_JDK = old;\n+    }\n+\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private static final Policy RESTRICT;\n+    private static final Policy ALLOW;\n+    static {\n+        // don't call Policy.getPolicy()\n+        RESTRICT = new Policy() {\n+            public PermissionCollection getPermissions(CodeSource codesource) {\n+                Permissions p = new Permissions();\n+                p.add(new AllPermission());  // enable everything\n+                return p;\n+            }\n+            public void refresh() {\n+            }\n+            public boolean implies(ProtectionDomain domain, Permission permission) {\n+                if (permission instanceof JodaTimePermission) {\n+                    return false;\n+                }\n+                return true;\n+//                return super.implies(domain, permission);\n+            }\n+        };\n+        ALLOW = new Policy() {\n+            public PermissionCollection getPermissions(CodeSource codesource) {\n+                Permissions p = new Permissions();\n+                p.add(new AllPermission());  // enable everything\n+                return p;\n+            }\n+            public void refresh() {\n+            }\n+        };\n+    }\n+    \n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestDateTimeUtils.class);\n+    }\n+\n+    public TestDateTimeUtils(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+    }\n+\n+    protected void tearDown() throws Exception {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testClass() {\n+        Class cls = DateTimeUtils.class;\n+        assertEquals(true, Modifier.isPublic(cls.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(cls.getModifiers()));\n+        \n+        assertEquals(1, cls.getDeclaredConstructors().length);\n+        assertEquals(true, Modifier.isProtected(cls.getDeclaredConstructors()[0].getModifiers()));\n+        \n+        DateTimeUtils utils = new DateTimeUtils() {};\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testSystemMillis() {\n+        long nowSystem = System.currentTimeMillis();\n+        long now = DateTimeUtils.currentTimeMillis();\n+        assertTrue((now >= nowSystem));\n+        assertTrue((now - nowSystem) < 10000L);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSystemMillisSecurity() {\n+        if (OLD_JDK) {\n+            return;\n+        }\n+        try {\n+            try {\n+                Policy.setPolicy(RESTRICT);\n+                System.setSecurityManager(new SecurityManager());\n+                DateTimeUtils.setCurrentMillisSystem();\n+                fail();\n+            } catch (SecurityException ex) {\n+                // ok\n+            } finally {\n+                System.setSecurityManager(null);\n+                Policy.setPolicy(ALLOW);\n+            }\n+        } finally {\n+            DateTimeUtils.setCurrentMillisSystem();\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFixedMillis() {\n+        try {\n+            DateTimeUtils.setCurrentMillisFixed(0L);\n+            assertEquals(0L, DateTimeUtils.currentTimeMillis());\n+            assertEquals(0L, DateTimeUtils.currentTimeMillis());\n+            assertEquals(0L, DateTimeUtils.currentTimeMillis());\n+        } finally {\n+            DateTimeUtils.setCurrentMillisSystem();\n+        }\n+        long nowSystem = System.currentTimeMillis();\n+        long now = DateTimeUtils.currentTimeMillis();\n+        assertTrue((now >= nowSystem));\n+        assertTrue((now - nowSystem) < 10000L);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFixedMillisSecurity() {\n+        if (OLD_JDK) {\n+            return;\n+        }\n+        try {\n+            try {\n+                Policy.setPolicy(RESTRICT);\n+                System.setSecurityManager(new SecurityManager());\n+                DateTimeUtils.setCurrentMillisFixed(0L);\n+                fail();\n+            } catch (SecurityException ex) {\n+                // ok\n+            } finally {\n+                System.setSecurityManager(null);\n+                Policy.setPolicy(ALLOW);\n+            }\n+        } finally {\n+            DateTimeUtils.setCurrentMillisSystem();\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testOffsetMillis() {\n+        try {\n+            // set time to one day ago\n+            DateTimeUtils.setCurrentMillisOffset(-24 * 60 *  60 * 1000);\n+            long nowSystem = System.currentTimeMillis();\n+            long now = DateTimeUtils.currentTimeMillis();\n+            long nowAdjustDay = now + (24 * 60 *  60 * 1000);\n+            assertTrue((now < nowSystem));\n+            assertTrue((nowAdjustDay >= nowSystem));\n+            assertTrue((nowAdjustDay - nowSystem) < 10000L);\n+        } finally {\n+            DateTimeUtils.setCurrentMillisSystem();\n+        }\n+        long nowSystem = System.currentTimeMillis();\n+        long now = DateTimeUtils.currentTimeMillis();\n+        assertTrue((now >= nowSystem));\n+        assertTrue((now - nowSystem) < 10000L);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testOffsetMillisToZero() {\n+        long now1 = 0L;\n+        try {\n+            // set time to one day ago\n+            DateTimeUtils.setCurrentMillisOffset(0);\n+            now1 = DateTimeUtils.currentTimeMillis();\n+        } finally {\n+            DateTimeUtils.setCurrentMillisSystem();\n+        }\n+        long now2 = DateTimeUtils.currentTimeMillis();\n+        assertEquals(now1, now2);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testOffsetMillisSecurity() {\n+        if (OLD_JDK) {\n+            return;\n+        }\n+        try {\n+            try {\n+                Policy.setPolicy(RESTRICT);\n+                System.setSecurityManager(new SecurityManager());\n+                DateTimeUtils.setCurrentMillisOffset(-24 * 60 *  60 * 1000);\n+                fail();\n+            } catch (SecurityException ex) {\n+                // ok\n+            } finally {\n+                System.setSecurityManager(null);\n+                Policy.setPolicy(ALLOW);\n+            }\n+        } finally {\n+            DateTimeUtils.setCurrentMillisSystem();\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMillisProvider() {\n+        try {\n+            DateTimeUtils.setCurrentMillisProvider(new MillisProvider() {\n+                public long getMillis() {\n+                    return 1L;\n+                }\n+            });\n+            assertEquals(1L, DateTimeUtils.currentTimeMillis());\n+        } finally {\n+            DateTimeUtils.setCurrentMillisSystem();\n+        }\n+    }\n+\n+    public void testMillisProvider_null() {\n+        try {\n+            DateTimeUtils.setCurrentMillisProvider(null);\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMillisProviderSecurity() {\n+        if (OLD_JDK) {\n+            return;\n+        }\n+        try {\n+            try {\n+                Policy.setPolicy(RESTRICT);\n+                System.setSecurityManager(new SecurityManager());\n+                DateTimeUtils.setCurrentMillisProvider(new MillisProvider() {\n+                    public long getMillis() {\n+                        return 0L;\n+                    }\n+                });\n+                fail();\n+            } catch (SecurityException ex) {\n+                // ok\n+            } finally {\n+                System.setSecurityManager(null);\n+                Policy.setPolicy(ALLOW);\n+            }\n+        } finally {\n+            DateTimeUtils.setCurrentMillisSystem();\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetInstantMillis_RI() {\n+        Instant i = new Instant(123L);\n+        assertEquals(123L, DateTimeUtils.getInstantMillis(i));\n+        try {\n+            DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+            assertEquals(TEST_TIME_NOW, DateTimeUtils.getInstantMillis(null));\n+        } finally {\n+            DateTimeUtils.setCurrentMillisSystem();\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetInstantChronology_RI() {\n+        DateTime dt = new DateTime(123L, BuddhistChronology.getInstance());\n+        assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getInstantChronology(dt));\n+        \n+        Instant i = new Instant(123L);\n+        assertEquals(ISOChronology.getInstanceUTC(), DateTimeUtils.getInstantChronology(i));\n+        \n+        AbstractInstant ai = new AbstractInstant() {\n+            public long getMillis() {\n+                return 0L;\n+            }\n+            public Chronology getChronology() {\n+                return null; // testing for this\n+            }\n+        };\n+        assertEquals(ISOChronology.getInstance(), DateTimeUtils.getInstantChronology(ai));\n+        \n+        assertEquals(ISOChronology.getInstance(), DateTimeUtils.getInstantChronology(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetIntervalChronology_RInterval() {\n+        Interval dt = new Interval(123L, 456L, BuddhistChronology.getInstance());\n+        assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getIntervalChronology(dt));\n+        \n+        assertEquals(ISOChronology.getInstance(), DateTimeUtils.getIntervalChronology(null));\n+        \n+        MutableInterval ai = new MutableInterval() {\n+            public Chronology getChronology() {\n+                return null; // testing for this\n+            }\n+        };\n+        assertEquals(ISOChronology.getInstance(), DateTimeUtils.getIntervalChronology(ai));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetIntervalChronology_RI_RI() {\n+        DateTime dt1 = new DateTime(123L, BuddhistChronology.getInstance());\n+        DateTime dt2 = new DateTime(123L, CopticChronology.getInstance());\n+        assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getIntervalChronology(dt1, dt2));\n+        assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getIntervalChronology(dt1, null));\n+        assertEquals(CopticChronology.getInstance(), DateTimeUtils.getIntervalChronology(null, dt2));\n+        assertEquals(ISOChronology.getInstance(), DateTimeUtils.getIntervalChronology(null, null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetReadableInterval_ReadableInterval() {\n+        ReadableInterval input = new Interval(0, 100L);\n+        assertEquals(input, DateTimeUtils.getReadableInterval(input));\n+        \n+        try {\n+            DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+            assertEquals(new Interval(TEST_TIME_NOW, TEST_TIME_NOW), DateTimeUtils.getReadableInterval(null));\n+        } finally {\n+            DateTimeUtils.setCurrentMillisSystem();\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetChronology_Chronology() {\n+        assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getChronology(BuddhistChronology.getInstance()));\n+        assertEquals(ISOChronology.getInstance(), DateTimeUtils.getChronology(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetZone_Zone() {\n+        assertEquals(PARIS, DateTimeUtils.getZone(PARIS));\n+        assertEquals(DateTimeZone.getDefault(), DateTimeUtils.getZone(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetPeriodType_PeriodType() {\n+        assertEquals(PeriodType.dayTime(), DateTimeUtils.getPeriodType(PeriodType.dayTime()));\n+        assertEquals(PeriodType.standard(), DateTimeUtils.getPeriodType(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetDurationMillis_RI() {\n+        Duration dur = new Duration(123L);\n+        assertEquals(123L, DateTimeUtils.getDurationMillis(dur));\n+        assertEquals(0L, DateTimeUtils.getDurationMillis(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsContiguous_RP() {\n+        YearMonthDay ymd = new YearMonthDay(2005, 6, 9);\n+        assertEquals(true, DateTimeUtils.isContiguous(ymd));\n+        TimeOfDay tod = new TimeOfDay(12, 20, 30, 0);\n+        assertEquals(true, DateTimeUtils.isContiguous(tod));\n+        Partial year = new Partial(DateTimeFieldType.year(), 2005);\n+        assertEquals(true, DateTimeUtils.isContiguous(year));\n+        Partial hourOfDay = new Partial(DateTimeFieldType.hourOfDay(), 12);\n+        assertEquals(true, DateTimeUtils.isContiguous(hourOfDay));\n+        Partial yearHour = year.with(DateTimeFieldType.hourOfDay(), 12);\n+        assertEquals(false, DateTimeUtils.isContiguous(yearHour));\n+        Partial ymdd = new Partial(ymd).with(DateTimeFieldType.dayOfWeek(), 2);\n+        assertEquals(false, DateTimeUtils.isContiguous(ymdd));\n+        Partial dd = new Partial(DateTimeFieldType.dayOfMonth(), 13).with(DateTimeFieldType.dayOfWeek(), 5);\n+        assertEquals(false, DateTimeUtils.isContiguous(dd));\n+        \n+        try {\n+            DateTimeUtils.isContiguous((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsContiguous_RP_GJChronology() {\n+        YearMonthDay ymd = new YearMonthDay(2005, 6, 9, GJ);\n+        assertEquals(true, DateTimeUtils.isContiguous(ymd));\n+        TimeOfDay tod = new TimeOfDay(12, 20, 30, 0, GJ);\n+        assertEquals(true, DateTimeUtils.isContiguous(tod));\n+        Partial year = new Partial(DateTimeFieldType.year(), 2005, GJ);\n+        assertEquals(true, DateTimeUtils.isContiguous(year));\n+        Partial hourOfDay = new Partial(DateTimeFieldType.hourOfDay(), 12, GJ);\n+        assertEquals(true, DateTimeUtils.isContiguous(hourOfDay));\n+        Partial yearHour = year.with(DateTimeFieldType.hourOfDay(), 12);\n+        assertEquals(false, DateTimeUtils.isContiguous(yearHour));\n+        Partial ymdd = new Partial(ymd).with(DateTimeFieldType.dayOfWeek(), 2);\n+        assertEquals(false, DateTimeUtils.isContiguous(ymdd));\n+        Partial dd = new Partial(DateTimeFieldType.dayOfMonth(), 13).with(DateTimeFieldType.dayOfWeek(), 5);\n+        assertEquals(false, DateTimeUtils.isContiguous(dd));\n+        \n+        try {\n+            DateTimeUtils.isContiguous((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestDateTimeZone.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.PrintStream;\n+import java.lang.reflect.Modifier;\n+import java.security.AllPermission;\n+import java.security.CodeSource;\n+import java.security.Permission;\n+import java.security.PermissionCollection;\n+import java.security.Permissions;\n+import java.security.Policy;\n+import java.security.ProtectionDomain;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Set;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.tz.DefaultNameProvider;\n+import org.joda.time.tz.NameProvider;\n+import org.joda.time.tz.Provider;\n+import org.joda.time.tz.UTCProvider;\n+import org.joda.time.tz.ZoneInfoProvider;\n+\n+/**\n+ * This class is a JUnit test for DateTimeZone.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestDateTimeZone extends TestCase {\n+    private static final boolean OLD_JDK;\n+    static {\n+        String str = System.getProperty(\"java.version\");\n+        boolean old = true;\n+        if (str.length() > 3 &&\n+            str.charAt(0) == '1' &&\n+            str.charAt(1) == '.' &&\n+            (str.charAt(2) == '4' || str.charAt(2) == '5' || str.charAt(2) == '6')) {\n+            old = false;\n+        }\n+        OLD_JDK = old;\n+    }\n+    \n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_SUMMER =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-01-09\n+    private long TEST_TIME_WINTER =\n+            (y2002days + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+//    // 2002-04-05 Fri\n+//    private long TEST_TIME1 =\n+//            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+//            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+//            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+//        \n+//    // 2003-05-06 Tue\n+//    private long TEST_TIME2 =\n+//            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+//            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+//            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    \n+    private static final Policy RESTRICT;\n+    private static final Policy ALLOW;\n+    static {\n+        // don't call Policy.getPolicy()\n+        RESTRICT = new Policy() {\n+            public PermissionCollection getPermissions(CodeSource codesource) {\n+                Permissions p = new Permissions();\n+                p.add(new AllPermission());  // enable everything\n+                return p;\n+            }\n+            public void refresh() {\n+            }\n+            public boolean implies(ProtectionDomain domain, Permission permission) {\n+                if (permission instanceof JodaTimePermission) {\n+                    return false;\n+                }\n+                return true;\n+//                return super.implies(domain, permission);\n+            }\n+        };\n+        ALLOW = new Policy() {\n+            public PermissionCollection getPermissions(CodeSource codesource) {\n+                Permissions p = new Permissions();\n+                p.add(new AllPermission());  // enable everything\n+                return p;\n+            }\n+            public void refresh() {\n+            }\n+        };\n+    }\n+    \n+    private DateTimeZone zone;\n+    private Locale locale;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestDateTimeZone.class);\n+    }\n+\n+    public TestDateTimeZone(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        locale = Locale.getDefault();\n+        zone = DateTimeZone.getDefault();\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        Locale.setDefault(locale);\n+        DateTimeZone.setDefault(zone);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testDefault() {\n+        assertNotNull(DateTimeZone.getDefault());\n+        \n+        DateTimeZone.setDefault(PARIS);\n+        assertSame(PARIS, DateTimeZone.getDefault());\n+        \n+        try {\n+            DateTimeZone.setDefault(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+            \n+    public void testDefaultSecurity() {\n+        if (OLD_JDK) {\n+            return;\n+        }\n+        try {\n+            Policy.setPolicy(RESTRICT);\n+            System.setSecurityManager(new SecurityManager());\n+            DateTimeZone.setDefault(PARIS);\n+            fail();\n+        } catch (SecurityException ex) {\n+            // ok\n+        } finally {\n+            System.setSecurityManager(null);\n+            Policy.setPolicy(ALLOW);\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForID_String() {\n+        assertEquals(DateTimeZone.getDefault(), DateTimeZone.forID((String) null));\n+        \n+        DateTimeZone zone = DateTimeZone.forID(\"Europe/London\");\n+        assertEquals(\"Europe/London\", zone.getID());\n+        \n+        zone = DateTimeZone.forID(\"UTC\");\n+        assertSame(DateTimeZone.UTC, zone);\n+        \n+        zone = DateTimeZone.forID(\"+00:00\");\n+        assertSame(DateTimeZone.UTC, zone);\n+        \n+        zone = DateTimeZone.forID(\"+00\");\n+        assertSame(DateTimeZone.UTC, zone);\n+        \n+        zone = DateTimeZone.forID(\"+01:23\");\n+        assertEquals(\"+01:23\", zone.getID());\n+        assertEquals(DateTimeConstants.MILLIS_PER_HOUR + (23L * DateTimeConstants.MILLIS_PER_MINUTE),\n+                zone.getOffset(TEST_TIME_SUMMER));\n+        \n+        zone = DateTimeZone.forID(\"-02:00\");\n+        assertEquals(\"-02:00\", zone.getID());\n+        assertEquals((-2L * DateTimeConstants.MILLIS_PER_HOUR),\n+                zone.getOffset(TEST_TIME_SUMMER));\n+        \n+        zone = DateTimeZone.forID(\"-07:05:34.0\");\n+        assertEquals(\"-07:05:34\", zone.getID());\n+        assertEquals((-7L * DateTimeConstants.MILLIS_PER_HOUR) +\n+                    (-5L * DateTimeConstants.MILLIS_PER_MINUTE) +\n+                    (-34L * DateTimeConstants.MILLIS_PER_SECOND),\n+                    zone.getOffset(TEST_TIME_SUMMER));\n+        \n+        try {\n+            DateTimeZone.forID(\"SST\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateTimeZone.forID(\"Europe/UK\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateTimeZone.forID(\"+\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateTimeZone.forID(\"+0\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForOffsetHours_int() {\n+        assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHours(0));\n+        assertEquals(DateTimeZone.forID(\"+03:00\"), DateTimeZone.forOffsetHours(3));\n+        assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHours(-2));\n+        try {\n+            DateTimeZone.forOffsetHours(999999);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }        \n+\n+    //-----------------------------------------------------------------------\n+    public void testForOffsetHoursMinutes_int_int() {\n+        assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));\n+        assertEquals(DateTimeZone.forID(\"+03:15\"), DateTimeZone.forOffsetHoursMinutes(3, 15));\n+        assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));\n+        assertEquals(DateTimeZone.forID(\"-02:30\"), DateTimeZone.forOffsetHoursMinutes(-2, 30));\n+        try {\n+            DateTimeZone.forOffsetHoursMinutes(2, 60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateTimeZone.forOffsetHoursMinutes(2, -1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateTimeZone.forOffsetHoursMinutes(-2, -1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateTimeZone.forOffsetHoursMinutes(999999, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }        \n+\n+    //-----------------------------------------------------------------------\n+    public void testForOffsetMillis_int() {\n+        assertSame(DateTimeZone.UTC, DateTimeZone.forOffsetMillis(0));\n+        assertEquals(DateTimeZone.forID(\"+03:00\"), DateTimeZone.forOffsetMillis(3 * 60 * 60 * 1000));\n+        assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetMillis(-2 * 60 * 60 * 1000));\n+        assertEquals(DateTimeZone.forID(\"+04:45:17.045\"),\n+                DateTimeZone.forOffsetMillis(\n+                        4 * 60 * 60 * 1000 + 45 * 60 * 1000 + 17 * 1000 + 45));\n+    }        \n+\n+    //-----------------------------------------------------------------------\n+    public void testForTimeZone_TimeZone() {\n+        assertEquals(DateTimeZone.getDefault(), DateTimeZone.forTimeZone((TimeZone) null));\n+        \n+        DateTimeZone zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"Europe/London\"));\n+        assertEquals(\"Europe/London\", zone.getID());\n+        assertSame(DateTimeZone.UTC, DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"UTC\")));\n+        \n+        zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"+00:00\"));\n+        assertSame(DateTimeZone.UTC, zone);\n+        \n+        zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"GMT+00:00\"));\n+        assertSame(DateTimeZone.UTC, zone);\n+        \n+        zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"GMT+00:00\"));\n+        assertSame(DateTimeZone.UTC, zone);\n+        \n+        zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"GMT+00\"));\n+        assertSame(DateTimeZone.UTC, zone);\n+        \n+        zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"GMT+01:23\"));\n+        assertEquals(\"+01:23\", zone.getID());\n+        assertEquals(DateTimeConstants.MILLIS_PER_HOUR + (23L * DateTimeConstants.MILLIS_PER_MINUTE),\n+                zone.getOffset(TEST_TIME_SUMMER));\n+        \n+        zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"GMT-02:00\"));\n+        assertEquals(\"-02:00\", zone.getID());\n+        assertEquals((-2L * DateTimeConstants.MILLIS_PER_HOUR), zone.getOffset(TEST_TIME_SUMMER));\n+        \n+        zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"EST\"));\n+        assertEquals(\"America/New_York\", zone.getID());\n+    }\n+\n+    public void testTimeZoneConversion() {\n+        TimeZone jdkTimeZone = TimeZone.getTimeZone(\"GMT-10\");\n+        assertEquals(\"GMT-10:00\", jdkTimeZone.getID());\n+        \n+        DateTimeZone jodaTimeZone = DateTimeZone.forTimeZone(jdkTimeZone);\n+        assertEquals(\"-10:00\", jodaTimeZone.getID());\n+        assertEquals(jdkTimeZone.getRawOffset(), jodaTimeZone.getOffset(0L));\n+        \n+        TimeZone convertedTimeZone = jodaTimeZone.toTimeZone();\n+        assertEquals(\"GMT-10:00\", jdkTimeZone.getID());\n+        \n+        assertEquals(jdkTimeZone.getID(), convertedTimeZone.getID());\n+        assertEquals(jdkTimeZone.getRawOffset(), convertedTimeZone.getRawOffset());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetAvailableIDs() {\n+        assertTrue(DateTimeZone.getAvailableIDs().contains(\"UTC\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testProvider() {\n+        try {\n+            assertNotNull(DateTimeZone.getProvider());\n+        \n+            Provider provider = DateTimeZone.getProvider();\n+            DateTimeZone.setProvider(null);\n+            assertEquals(provider.getClass(), DateTimeZone.getProvider().getClass());\n+        \n+            try {\n+                DateTimeZone.setProvider(new MockNullIDSProvider());\n+                fail();\n+            } catch (IllegalArgumentException ex) {}\n+            try {\n+                DateTimeZone.setProvider(new MockEmptyIDSProvider());\n+                fail();\n+            } catch (IllegalArgumentException ex) {}\n+            try {\n+                DateTimeZone.setProvider(new MockNoUTCProvider());\n+                fail();\n+            } catch (IllegalArgumentException ex) {}\n+            try {\n+                DateTimeZone.setProvider(new MockBadUTCProvider());\n+                fail();\n+            } catch (IllegalArgumentException ex) {}\n+        \n+            Provider prov = new MockOKProvider();\n+            DateTimeZone.setProvider(prov);\n+            assertSame(prov, DateTimeZone.getProvider());\n+            assertEquals(2, DateTimeZone.getAvailableIDs().size());\n+            assertTrue(DateTimeZone.getAvailableIDs().contains(\"UTC\"));\n+            assertTrue(DateTimeZone.getAvailableIDs().contains(\"Europe/London\"));\n+        } finally {\n+            DateTimeZone.setProvider(null);\n+            assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass());\n+        }\n+        \n+        try {\n+            System.setProperty(\"org.joda.time.DateTimeZone.Provider\", \"org.joda.time.tz.UTCProvider\");\n+            DateTimeZone.setProvider(null);\n+            assertEquals(UTCProvider.class, DateTimeZone.getProvider().getClass());\n+        } finally {\n+            System.getProperties().remove(\"org.joda.time.DateTimeZone.Provider\");\n+            DateTimeZone.setProvider(null);\n+            assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass());\n+        }\n+        \n+        PrintStream syserr = System.err;\n+        try {\n+            System.setProperty(\"org.joda.time.DateTimeZone.Provider\", \"xxx\");\n+            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+            System.setErr(new PrintStream(baos));\n+            \n+            DateTimeZone.setProvider(null);\n+            \n+            assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass());\n+            String str = new String(baos.toByteArray());\n+            assertTrue(str.indexOf(\"java.lang.ClassNotFoundException\") >= 0);\n+        } finally {\n+            System.setErr(syserr);\n+            System.getProperties().remove(\"org.joda.time.DateTimeZone.Provider\");\n+            DateTimeZone.setProvider(null);\n+            assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass());\n+        }\n+    }\n+    \n+    public void testProviderSecurity() {\n+        if (OLD_JDK) {\n+            return;\n+        }\n+        try {\n+            Policy.setPolicy(RESTRICT);\n+            System.setSecurityManager(new SecurityManager());\n+            DateTimeZone.setProvider(new MockOKProvider());\n+            fail();\n+        } catch (SecurityException ex) {\n+            // ok\n+        } finally {\n+            System.setSecurityManager(null);\n+            Policy.setPolicy(ALLOW);\n+        }\n+    }\n+\n+    static class MockNullIDSProvider implements Provider {\n+        public Set getAvailableIDs() {\n+            return null;\n+        }\n+        public DateTimeZone getZone(String id) {\n+            return null;\n+        }\n+    }\n+    static class MockEmptyIDSProvider implements Provider {\n+        public Set getAvailableIDs() {\n+            return new HashSet();\n+        }\n+        public DateTimeZone getZone(String id) {\n+            return null;\n+        }\n+    }\n+    static class MockNoUTCProvider implements Provider {\n+        public Set getAvailableIDs() {\n+            Set set = new HashSet();\n+            set.add(\"Europe/London\");\n+            return set;\n+        }\n+        public DateTimeZone getZone(String id) {\n+            return null;\n+        }\n+    }\n+    static class MockBadUTCProvider implements Provider {\n+        public Set getAvailableIDs() {\n+            Set set = new HashSet();\n+            set.add(\"UTC\");\n+            set.add(\"Europe/London\");\n+            return set;\n+        }\n+        public DateTimeZone getZone(String id) {\n+            return null;\n+        }\n+    }\n+    static class MockOKProvider implements Provider {\n+        public Set getAvailableIDs() {\n+            Set set = new HashSet();\n+            set.add(\"UTC\");\n+            set.add(\"Europe/London\");\n+            return set;\n+        }\n+        public DateTimeZone getZone(String id) {\n+            return DateTimeZone.UTC;\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNameProvider() {\n+        try {\n+            assertNotNull(DateTimeZone.getNameProvider());\n+        \n+            NameProvider provider = DateTimeZone.getNameProvider();\n+            DateTimeZone.setNameProvider(null);\n+            assertEquals(provider.getClass(), DateTimeZone.getNameProvider().getClass());\n+        \n+            provider = new MockOKButNullNameProvider();\n+            DateTimeZone.setNameProvider(provider);\n+            assertSame(provider, DateTimeZone.getNameProvider());\n+            \n+            assertEquals(\"+00:00\", DateTimeZone.UTC.getShortName(TEST_TIME_SUMMER));\n+            assertEquals(\"+00:00\", DateTimeZone.UTC.getName(TEST_TIME_SUMMER));\n+        } finally {\n+            DateTimeZone.setNameProvider(null);\n+        }\n+        \n+        try {\n+            System.setProperty(\"org.joda.time.DateTimeZone.NameProvider\", \"org.joda.time.tz.DefaultNameProvider\");\n+            DateTimeZone.setNameProvider(null);\n+            assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass());\n+        } finally {\n+            System.getProperties().remove(\"org.joda.time.DateTimeZone.NameProvider\");\n+            DateTimeZone.setNameProvider(null);\n+            assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass());\n+        }\n+        \n+        PrintStream syserr = System.err;\n+        try {\n+            System.setProperty(\"org.joda.time.DateTimeZone.NameProvider\", \"xxx\");\n+            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+            System.setErr(new PrintStream(baos));\n+            \n+            DateTimeZone.setNameProvider(null);\n+            \n+            assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass());\n+            String str = new String(baos.toByteArray());\n+            assertTrue(str.indexOf(\"java.lang.ClassNotFoundException\") >= 0);\n+        } finally {\n+            System.setErr(syserr);\n+            System.getProperties().remove(\"org.joda.time.DateTimeZone.NameProvider\");\n+            DateTimeZone.setNameProvider(null);\n+            assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass());\n+        }\n+    }        \n+    \n+    public void testNameProviderSecurity() {\n+        if (OLD_JDK) {\n+            return;\n+        }\n+        try {\n+            Policy.setPolicy(RESTRICT);\n+            System.setSecurityManager(new SecurityManager());\n+            DateTimeZone.setNameProvider(new MockOKButNullNameProvider());\n+            fail();\n+        } catch (SecurityException ex) {\n+            // ok\n+        } finally {\n+            System.setSecurityManager(null);\n+            Policy.setPolicy(ALLOW);\n+        }\n+    }\n+\n+    static class MockOKButNullNameProvider implements NameProvider {\n+        public String getShortName(Locale locale, String id, String nameKey) {\n+            return null;\n+        }\n+        public String getName(Locale locale, String id, String nameKey) {\n+            return null;\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor() {\n+        assertEquals(1, DateTimeZone.class.getDeclaredConstructors().length);\n+        assertTrue(Modifier.isProtected(DateTimeZone.class.getDeclaredConstructors()[0].getModifiers()));\n+        try {\n+            new DateTimeZone(null) {\n+                public String getNameKey(long instant) {\n+                    return null;\n+                }\n+                public int getOffset(long instant) {\n+                    return 0;\n+                }\n+                public int getStandardOffset(long instant) {\n+                    return 0;\n+                }\n+                public boolean isFixed() {\n+                    return false;\n+                }\n+                public long nextTransition(long instant) {\n+                    return 0;\n+                }\n+                public long previousTransition(long instant) {\n+                    return 0;\n+                }\n+                public boolean equals(Object object) {\n+                    return false;\n+                }\n+            };\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetID() {\n+        DateTimeZone zone = DateTimeZone.forID(\"Europe/Paris\");\n+        assertEquals(\"Europe/Paris\", zone.getID());\n+    }\n+\n+    public void testGetNameKey() {\n+        DateTimeZone zone = DateTimeZone.forID(\"Europe/London\");\n+        assertEquals(\"BST\", zone.getNameKey(TEST_TIME_SUMMER));\n+        assertEquals(\"GMT\", zone.getNameKey(TEST_TIME_WINTER));\n+    }\n+\n+    public void testGetShortName() {\n+        DateTimeZone zone = DateTimeZone.forID(\"Europe/London\");\n+        assertEquals(\"BST\", zone.getShortName(TEST_TIME_SUMMER));\n+        assertEquals(\"GMT\", zone.getShortName(TEST_TIME_WINTER));\n+        assertEquals(\"BST\", zone.getShortName(TEST_TIME_SUMMER, Locale.ENGLISH));\n+    }\n+            \n+    public void testGetShortNameProviderName() {\n+        assertEquals(null, DateTimeZone.getNameProvider().getShortName(null, \"Europe/London\", \"BST\"));\n+        assertEquals(null, DateTimeZone.getNameProvider().getShortName(Locale.ENGLISH, null, \"BST\"));\n+        assertEquals(null, DateTimeZone.getNameProvider().getShortName(Locale.ENGLISH, \"Europe/London\", null));\n+        assertEquals(null, DateTimeZone.getNameProvider().getShortName(null, null, null));\n+    }\n+    \n+    public void testGetShortNameNullKey() {\n+        DateTimeZone zone = new MockDateTimeZone(\"Europe/London\");\n+        assertEquals(\"Europe/London\", zone.getShortName(TEST_TIME_SUMMER, Locale.ENGLISH));\n+    }\n+    \n+    public void testGetName() {\n+        DateTimeZone zone = DateTimeZone.forID(\"Europe/London\");\n+        assertEquals(\"British Summer Time\", zone.getName(TEST_TIME_SUMMER));\n+        assertEquals(\"Greenwich Mean Time\", zone.getName(TEST_TIME_WINTER));\n+        assertEquals(\"British Summer Time\", zone.getName(TEST_TIME_SUMMER, Locale.ENGLISH));\n+        \n+    }\n+    \n+    public void testGetNameProviderName() {\n+        assertEquals(null, DateTimeZone.getNameProvider().getName(null, \"Europe/London\", \"BST\"));\n+        assertEquals(null, DateTimeZone.getNameProvider().getName(Locale.ENGLISH, null, \"BST\"));\n+        assertEquals(null, DateTimeZone.getNameProvider().getName(Locale.ENGLISH, \"Europe/London\", null));\n+        assertEquals(null, DateTimeZone.getNameProvider().getName(null, null, null));\n+    }\n+    \n+    public void testGetNameNullKey() {\n+        DateTimeZone zone = new MockDateTimeZone(\"Europe/London\");\n+        assertEquals(\"Europe/London\", zone.getName(TEST_TIME_SUMMER, Locale.ENGLISH));\n+    }\n+    \n+    static class MockDateTimeZone extends DateTimeZone {\n+        public MockDateTimeZone(String id) {\n+            super(id);\n+        }\n+        public String getNameKey(long instant) {\n+            return null;  // null\n+        }\n+        public int getOffset(long instant) {\n+            return 0;\n+        }\n+        public int getStandardOffset(long instant) {\n+            return 0;\n+        }\n+        public boolean isFixed() {\n+            return false;\n+        }\n+        public long nextTransition(long instant) {\n+            return 0;\n+        }\n+        public long previousTransition(long instant) {\n+            return 0;\n+        }\n+        public boolean equals(Object object) {\n+            return false;\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetOffset_long() {\n+        DateTimeZone zone = DateTimeZone.forID(\"Europe/Paris\");\n+        assertEquals(2L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(TEST_TIME_SUMMER));\n+        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(TEST_TIME_WINTER));\n+        \n+        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getStandardOffset(TEST_TIME_SUMMER));\n+        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getStandardOffset(TEST_TIME_WINTER));\n+        \n+        assertEquals(2L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffsetFromLocal(TEST_TIME_SUMMER));\n+        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffsetFromLocal(TEST_TIME_WINTER));\n+        \n+        assertEquals(false, zone.isStandardOffset(TEST_TIME_SUMMER));\n+        assertEquals(true, zone.isStandardOffset(TEST_TIME_WINTER));\n+    }\n+\n+    public void testGetOffset_RI() {\n+        DateTimeZone zone = DateTimeZone.forID(\"Europe/Paris\");\n+        assertEquals(2L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(new Instant(TEST_TIME_SUMMER)));\n+        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(new Instant(TEST_TIME_WINTER)));\n+        \n+        assertEquals(zone.getOffset(DateTimeUtils.currentTimeMillis()), zone.getOffset(null));\n+    }\n+\n+    public void testGetOffsetFixed() {\n+        DateTimeZone zone = DateTimeZone.forID(\"+01:00\");\n+        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(TEST_TIME_SUMMER));\n+        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(TEST_TIME_WINTER));\n+        \n+        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getStandardOffset(TEST_TIME_SUMMER));\n+        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getStandardOffset(TEST_TIME_WINTER));\n+        \n+        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffsetFromLocal(TEST_TIME_SUMMER));\n+        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffsetFromLocal(TEST_TIME_WINTER));\n+        \n+        assertEquals(true, zone.isStandardOffset(TEST_TIME_SUMMER));\n+        assertEquals(true, zone.isStandardOffset(TEST_TIME_WINTER));\n+    }\n+\n+    public void testGetOffsetFixed_RI() {\n+        DateTimeZone zone = DateTimeZone.forID(\"+01:00\");\n+        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(new Instant(TEST_TIME_SUMMER)));\n+        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(new Instant(TEST_TIME_WINTER)));\n+        \n+        assertEquals(zone.getOffset(DateTimeUtils.currentTimeMillis()), zone.getOffset(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetMillisKeepLocal() {\n+        long millisLondon = TEST_TIME_SUMMER;\n+        long millisParis = TEST_TIME_SUMMER - 1L * DateTimeConstants.MILLIS_PER_HOUR;\n+        \n+        assertEquals(millisLondon, LONDON.getMillisKeepLocal(LONDON, millisLondon));\n+        assertEquals(millisParis, LONDON.getMillisKeepLocal(LONDON, millisParis));\n+        assertEquals(millisLondon, PARIS.getMillisKeepLocal(PARIS, millisLondon));\n+        assertEquals(millisParis, PARIS.getMillisKeepLocal(PARIS, millisParis));\n+        \n+        assertEquals(millisParis, LONDON.getMillisKeepLocal(PARIS, millisLondon));\n+        assertEquals(millisLondon, PARIS.getMillisKeepLocal(LONDON, millisParis));\n+        \n+        DateTimeZone zone = DateTimeZone.getDefault();\n+        try {\n+            DateTimeZone.setDefault(LONDON);\n+            assertEquals(millisLondon, PARIS.getMillisKeepLocal(null, millisParis));\n+        } finally {\n+            DateTimeZone.setDefault(zone);\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsFixed() {\n+        DateTimeZone zone = DateTimeZone.forID(\"Europe/Paris\");\n+        assertEquals(false, zone.isFixed());\n+        assertEquals(true, DateTimeZone.UTC.isFixed());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTransitionFixed() {\n+        DateTimeZone zone = DateTimeZone.forID(\"+01:00\");\n+        assertEquals(TEST_TIME_SUMMER, zone.nextTransition(TEST_TIME_SUMMER));\n+        assertEquals(TEST_TIME_WINTER, zone.nextTransition(TEST_TIME_WINTER));\n+        assertEquals(TEST_TIME_SUMMER, zone.previousTransition(TEST_TIME_SUMMER));\n+        assertEquals(TEST_TIME_WINTER, zone.previousTransition(TEST_TIME_WINTER));\n+    }\n+\n+//    //-----------------------------------------------------------------------\n+//    public void testIsLocalDateTimeOverlap_Berlin() {\n+//        DateTimeZone zone = DateTimeZone.forID(\"Europe/Berlin\");\n+//        assertEquals(false, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 10, 28, 1, 0)));\n+//        assertEquals(false, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 10, 28, 1, 59, 59, 99)));\n+//        assertEquals(true, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 10, 28, 2, 0)));\n+//        assertEquals(true, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 10, 28, 2, 30)));\n+//        assertEquals(true, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 10, 28, 2, 59, 59, 99)));\n+//        assertEquals(false, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 10, 28, 3, 0)));\n+//        assertEquals(false, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 10, 28, 4, 0)));\n+//        \n+//        assertEquals(false, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 3, 25, 1, 30)));  // before gap\n+//        assertEquals(false, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 3, 25, 2, 30)));  // gap\n+//        assertEquals(false, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 3, 25, 3, 30)));  // after gap\n+//        assertEquals(false, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 12, 24, 12, 34)));\n+//    }\n+//\n+//    //-----------------------------------------------------------------------\n+//    public void testIsLocalDateTimeOverlap_NewYork() {\n+//        DateTimeZone zone = DateTimeZone.forID(\"America/New_York\");\n+//        assertEquals(false, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 11, 4, 0, 0)));\n+//        assertEquals(false, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 11, 4, 0, 59, 59, 99)));\n+//        assertEquals(true, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 11, 4, 1, 0)));\n+//        assertEquals(true, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 11, 4, 1, 30)));\n+//        assertEquals(true, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 11, 4, 1, 59, 59, 99)));\n+//        assertEquals(false, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 11, 4, 2, 0)));\n+//        assertEquals(false, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 11, 4, 3, 0)));\n+//        \n+//        assertEquals(false, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 3, 11, 1, 30)));  // before gap\n+//        assertEquals(false, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 3, 11, 2, 30)));  // gap\n+//        assertEquals(false, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 3, 11, 3, 30)));  // after gap\n+//        assertEquals(false, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 12, 24, 12, 34)));\n+//    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsLocalDateTimeGap_Berlin() {\n+        DateTimeZone zone = DateTimeZone.forID(\"Europe/Berlin\");\n+        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 0)));\n+        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 59, 59, 99)));\n+        assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 0)));\n+        assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 30)));\n+        assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 59, 59, 99)));\n+        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 3, 0)));\n+        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 4, 0)));\n+        \n+        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 1, 30)));  // before overlap\n+        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 2, 30)));  // overlap\n+        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 3, 30)));  // after overlap\n+        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 12, 24, 12, 34)));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsLocalDateTimeGap_NewYork() {\n+        DateTimeZone zone = DateTimeZone.forID(\"America/New_York\");\n+        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 11, 1, 0)));\n+        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 11, 1, 59, 59, 99)));\n+        assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 11, 2, 0)));\n+        assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 11, 2, 30)));\n+        assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 11, 2, 59, 59, 99)));\n+        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 11, 3, 0)));\n+        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 11, 4, 0)));\n+        \n+        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 11, 4, 0, 30)));  // before overlap\n+        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 11, 4, 1, 30)));  // overlap\n+        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 11, 4, 2, 30)));  // after overlap\n+        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 12, 24, 12, 34)));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToTimeZone() {\n+        DateTimeZone zone = DateTimeZone.forID(\"Europe/Paris\");\n+        TimeZone tz = zone.toTimeZone();\n+        assertEquals(\"Europe/Paris\", tz.getID());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testEqualsHashCode() {\n+        DateTimeZone zone1 = DateTimeZone.forID(\"Europe/Paris\");\n+        DateTimeZone zone2 = DateTimeZone.forID(\"Europe/Paris\");\n+        assertEquals(true, zone1.equals(zone1));\n+        assertEquals(true, zone1.equals(zone2));\n+        assertEquals(true, zone2.equals(zone1));\n+        assertEquals(true, zone2.equals(zone2));\n+        assertEquals(true, zone1.hashCode() == zone2.hashCode());\n+        \n+        DateTimeZone zone3 = DateTimeZone.forID(\"Europe/London\");\n+        assertEquals(true, zone3.equals(zone3));\n+        assertEquals(false, zone1.equals(zone3));\n+        assertEquals(false, zone2.equals(zone3));\n+        assertEquals(false, zone3.equals(zone1));\n+        assertEquals(false, zone3.equals(zone2));\n+        assertEquals(false, zone1.hashCode() == zone3.hashCode());\n+        assertEquals(true, zone3.hashCode() == zone3.hashCode());\n+        \n+        DateTimeZone zone4 = DateTimeZone.forID(\"+01:00\");\n+        assertEquals(true, zone4.equals(zone4));\n+        assertEquals(false, zone1.equals(zone4));\n+        assertEquals(false, zone2.equals(zone4));\n+        assertEquals(false, zone3.equals(zone4));\n+        assertEquals(false, zone4.equals(zone1));\n+        assertEquals(false, zone4.equals(zone2));\n+        assertEquals(false, zone4.equals(zone3));\n+        assertEquals(false, zone1.hashCode() == zone4.hashCode());\n+        assertEquals(true, zone4.hashCode() == zone4.hashCode());\n+        \n+        DateTimeZone zone5 = DateTimeZone.forID(\"+02:00\");\n+        assertEquals(true, zone5.equals(zone5));\n+        assertEquals(false, zone1.equals(zone5));\n+        assertEquals(false, zone2.equals(zone5));\n+        assertEquals(false, zone3.equals(zone5));\n+        assertEquals(false, zone4.equals(zone5));\n+        assertEquals(false, zone5.equals(zone1));\n+        assertEquals(false, zone5.equals(zone2));\n+        assertEquals(false, zone5.equals(zone3));\n+        assertEquals(false, zone5.equals(zone4));\n+        assertEquals(false, zone1.hashCode() == zone5.hashCode());\n+        assertEquals(true, zone5.hashCode() == zone5.hashCode());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        DateTimeZone zone = DateTimeZone.forID(\"Europe/Paris\");\n+        assertEquals(\"Europe/Paris\", zone.toString());\n+        assertEquals(\"UTC\", DateTimeZone.UTC.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization1() throws Exception {\n+        DateTimeZone zone = DateTimeZone.forID(\"Europe/Paris\");\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(zone);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        DateTimeZone result = (DateTimeZone) ois.readObject();\n+        ois.close();\n+        \n+        assertSame(zone, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization2() throws Exception {\n+        DateTimeZone zone = DateTimeZone.forID(\"+01:00\");\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(zone);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        DateTimeZone result = (DateTimeZone) ois.readObject();\n+        ois.close();\n+        \n+        assertSame(zone, result);\n+    }\n+\n+    public void testCommentParse() throws Exception {\n+        // A bug in ZoneInfoCompiler's handling of comments broke Europe/Athens\n+        // after 1980. This test is included to make sure it doesn't break again.\n+\n+        DateTimeZone zone = DateTimeZone.forID(\"Europe/Athens\");\n+        DateTime dt = new DateTime(2005, 5, 5, 20, 10, 15, 0, zone);\n+        assertEquals(1115313015000L, dt.getMillis());\n+    }\n+\n+    public void testPatchedNameKeysLondon() throws Exception {\n+        // the tz database does not have unique name keys [1716305]\n+        DateTimeZone zone = DateTimeZone.forID(\"Europe/London\");\n+        \n+        DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0);\n+        String str1 = zone.getName(now.getMillis());\n+        String str2 = zone.getName(now.plusMonths(6).getMillis());\n+        assertEquals(false, str1.equals(str2));\n+    }\n+\n+    public void testPatchedNameKeysSydney() throws Exception {\n+        // the tz database does not have unique name keys [1716305]\n+        DateTimeZone zone = DateTimeZone.forID(\"Australia/Sydney\");\n+        \n+        DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0);\n+        String str1 = zone.getName(now.getMillis());\n+        String str2 = zone.getName(now.plusMonths(6).getMillis());\n+        assertEquals(false, str1.equals(str2));\n+    }\n+\n+    public void testPatchedNameKeysSydneyHistoric() throws Exception {\n+        // the tz database does not have unique name keys [1716305]\n+        DateTimeZone zone = DateTimeZone.forID(\"Australia/Sydney\");\n+        \n+        DateTime now = new DateTime(1996, 1, 1, 0, 0, 0, 0);\n+        String str1 = zone.getName(now.getMillis());\n+        String str2 = zone.getName(now.plusMonths(6).getMillis());\n+        assertEquals(false, str1.equals(str2));\n+    }\n+\n+    public void testPatchedNameKeysGazaHistoric() throws Exception {\n+        // the tz database does not have unique name keys [1716305]\n+        DateTimeZone zone = DateTimeZone.forID(\"Africa/Johannesburg\");\n+        \n+        DateTime now = new DateTime(1943, 1, 1, 0, 0, 0, 0);\n+        String str1 = zone.getName(now.getMillis());\n+        String str2 = zone.getName(now.plusMonths(6).getMillis());\n+        assertEquals(false, str1.equals(str2));\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java\n+/*\n+ *  Copyright 2001-2007 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.tz.DateTimeZoneBuilder;\n+\n+/**\n+ * This class is a JUnit test for DateTimeZone.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestDateTimeZoneCutover extends TestCase {\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestDateTimeZoneCutover.class);\n+    }\n+\n+    public TestDateTimeZoneCutover(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+    }\n+\n+    protected void tearDown() throws Exception {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //------------------------ Bug [1710316] --------------------------------\n+    //-----------------------------------------------------------------------\n+    // The behaviour of getOffsetFromLocal is defined in its javadoc\n+    // However, this definition doesn't work for all DateTimeField operations\n+    \n+    /** Mock zone simulating Asia/Gaza cutover at midnight 2007-04-01 */\n+    private static long CUTOVER_GAZA = 1175378400000L;\n+    private static int OFFSET_GAZA = 7200000;  // +02:00\n+    private static final DateTimeZone MOCK_GAZA = new MockZone(CUTOVER_GAZA, OFFSET_GAZA);\n+\n+    //-----------------------------------------------------------------------\n+    public void test_MockGazaIsCorrect() {\n+        DateTime pre = new DateTime(CUTOVER_GAZA - 1L, MOCK_GAZA);\n+        assertEquals(\"2007-03-31T23:59:59.999+02:00\", pre.toString());\n+        DateTime at = new DateTime(CUTOVER_GAZA, MOCK_GAZA);\n+        assertEquals(\"2007-04-01T01:00:00.000+03:00\", at.toString());\n+        DateTime post = new DateTime(CUTOVER_GAZA + 1L, MOCK_GAZA);\n+        assertEquals(\"2007-04-01T01:00:00.001+03:00\", post.toString());\n+    }\n+\n+    public void test_getOffsetFromLocal_Gaza() {\n+        doTest_getOffsetFromLocal_Gaza(-1, 23, 0, \"2007-03-31T23:00:00.000+02:00\");\n+        doTest_getOffsetFromLocal_Gaza(-1, 23, 30, \"2007-03-31T23:30:00.000+02:00\");\n+        doTest_getOffsetFromLocal_Gaza(0, 0, 0, \"2007-04-01T01:00:00.000+03:00\");\n+        doTest_getOffsetFromLocal_Gaza(0, 0, 30, \"2007-04-01T01:30:00.000+03:00\");\n+        doTest_getOffsetFromLocal_Gaza(0, 1, 0, \"2007-04-01T01:00:00.000+03:00\");\n+        doTest_getOffsetFromLocal_Gaza(0, 1, 30, \"2007-04-01T01:30:00.000+03:00\");\n+        doTest_getOffsetFromLocal_Gaza(0, 2, 0, \"2007-04-01T02:00:00.000+03:00\");\n+        doTest_getOffsetFromLocal_Gaza(0, 3, 0, \"2007-04-01T03:00:00.000+03:00\");\n+        doTest_getOffsetFromLocal_Gaza(0, 4, 0, \"2007-04-01T04:00:00.000+03:00\");\n+        doTest_getOffsetFromLocal_Gaza(0, 5, 0, \"2007-04-01T05:00:00.000+03:00\");\n+        doTest_getOffsetFromLocal_Gaza(0, 6, 0, \"2007-04-01T06:00:00.000+03:00\");\n+    }\n+\n+    private void doTest_getOffsetFromLocal_Gaza(int days, int hour, int min, String expected) {\n+        DateTime dt = new DateTime(2007, 4, 1, hour, min, 0, 0, DateTimeZone.UTC).plusDays(days);\n+        int offset = MOCK_GAZA.getOffsetFromLocal(dt.getMillis());\n+        DateTime res = new DateTime(dt.getMillis() - offset, MOCK_GAZA);\n+        assertEquals(res.toString(), expected, res.toString());\n+    }\n+\n+    public void test_DateTime_roundFloor_Gaza() {\n+        DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_GAZA);\n+        assertEquals(\"2007-04-01T08:00:00.000+03:00\", dt.toString());\n+        DateTime rounded = dt.dayOfMonth().roundFloorCopy();\n+        assertEquals(\"2007-04-01T01:00:00.000+03:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundCeiling_Gaza() {\n+        DateTime dt = new DateTime(2007, 3, 31, 20, 0, 0, 0, MOCK_GAZA);\n+        assertEquals(\"2007-03-31T20:00:00.000+02:00\", dt.toString());\n+        DateTime rounded = dt.dayOfMonth().roundCeilingCopy();\n+        assertEquals(\"2007-04-01T01:00:00.000+03:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_setHourZero_Gaza() {\n+        DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_GAZA);\n+        assertEquals(\"2007-04-01T08:00:00.000+03:00\", dt.toString());\n+        try {\n+            dt.hourOfDay().setCopy(0);\n+            fail();\n+        } catch (IllegalFieldValueException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void test_DateTime_withHourZero_Gaza() {\n+        DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_GAZA);\n+        assertEquals(\"2007-04-01T08:00:00.000+03:00\", dt.toString());\n+        try {\n+            dt.withHourOfDay(0);\n+            fail();\n+        } catch (IllegalFieldValueException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void test_DateTime_withDay_Gaza() {\n+        DateTime dt = new DateTime(2007, 4, 2, 0, 0, 0, 0, MOCK_GAZA);\n+        assertEquals(\"2007-04-02T00:00:00.000+03:00\", dt.toString());\n+        DateTime res = dt.withDayOfMonth(1);\n+        assertEquals(\"2007-04-01T01:00:00.000+03:00\", res.toString());\n+    }\n+\n+    public void test_DateTime_minusHour_Gaza() {\n+        DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_GAZA);\n+        assertEquals(\"2007-04-01T08:00:00.000+03:00\", dt.toString());\n+        \n+        DateTime minus7 = dt.minusHours(7);\n+        assertEquals(\"2007-04-01T01:00:00.000+03:00\", minus7.toString());\n+        DateTime minus8 = dt.minusHours(8);\n+        assertEquals(\"2007-03-31T23:00:00.000+02:00\", minus8.toString());\n+        DateTime minus9 = dt.minusHours(9);\n+        assertEquals(\"2007-03-31T22:00:00.000+02:00\", minus9.toString());\n+    }\n+\n+    public void test_DateTime_plusHour_Gaza() {\n+        DateTime dt = new DateTime(2007, 3, 31, 16, 0, 0, 0, MOCK_GAZA);\n+        assertEquals(\"2007-03-31T16:00:00.000+02:00\", dt.toString());\n+        \n+        DateTime plus7 = dt.plusHours(7);\n+        assertEquals(\"2007-03-31T23:00:00.000+02:00\", plus7.toString());\n+        DateTime plus8 = dt.plusHours(8);\n+        assertEquals(\"2007-04-01T01:00:00.000+03:00\", plus8.toString());\n+        DateTime plus9 = dt.plusHours(9);\n+        assertEquals(\"2007-04-01T02:00:00.000+03:00\", plus9.toString());\n+    }\n+\n+    public void test_DateTime_minusDay_Gaza() {\n+        DateTime dt = new DateTime(2007, 4, 2, 0, 0, 0, 0, MOCK_GAZA);\n+        assertEquals(\"2007-04-02T00:00:00.000+03:00\", dt.toString());\n+        \n+        DateTime minus1 = dt.minusDays(1);\n+        assertEquals(\"2007-04-01T01:00:00.000+03:00\", minus1.toString());\n+        DateTime minus2 = dt.minusDays(2);\n+        assertEquals(\"2007-03-31T00:00:00.000+02:00\", minus2.toString());\n+    }\n+\n+    public void test_DateTime_plusDay_Gaza() {\n+        DateTime dt = new DateTime(2007, 3, 31, 0, 0, 0, 0, MOCK_GAZA);\n+        assertEquals(\"2007-03-31T00:00:00.000+02:00\", dt.toString());\n+        \n+        DateTime plus1 = dt.plusDays(1);\n+        assertEquals(\"2007-04-01T01:00:00.000+03:00\", plus1.toString());\n+        DateTime plus2 = dt.plusDays(2);\n+        assertEquals(\"2007-04-02T00:00:00.000+03:00\", plus2.toString());\n+    }\n+\n+    public void test_DateTime_plusDayMidGap_Gaza() {\n+        DateTime dt = new DateTime(2007, 3, 31, 0, 30, 0, 0, MOCK_GAZA);\n+        assertEquals(\"2007-03-31T00:30:00.000+02:00\", dt.toString());\n+        \n+        DateTime plus1 = dt.plusDays(1);\n+        assertEquals(\"2007-04-01T01:30:00.000+03:00\", plus1.toString());\n+        DateTime plus2 = dt.plusDays(2);\n+        assertEquals(\"2007-04-02T00:30:00.000+03:00\", plus2.toString());\n+    }\n+\n+    public void test_DateTime_addWrapFieldDay_Gaza() {\n+        DateTime dt = new DateTime(2007, 4, 30, 0, 0, 0, 0, MOCK_GAZA);\n+        assertEquals(\"2007-04-30T00:00:00.000+03:00\", dt.toString());\n+        \n+        DateTime plus1 = dt.dayOfMonth().addWrapFieldToCopy(1);\n+        assertEquals(\"2007-04-01T01:00:00.000+03:00\", plus1.toString());\n+        DateTime plus2 = dt.dayOfMonth().addWrapFieldToCopy(2);\n+        assertEquals(\"2007-04-02T00:00:00.000+03:00\", plus2.toString());\n+    }\n+\n+    public void test_DateTime_withZoneRetainFields_Gaza() {\n+        DateTime dt = new DateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC);\n+        assertEquals(\"2007-04-01T00:00:00.000Z\", dt.toString());\n+        \n+        DateTime res = dt.withZoneRetainFields(MOCK_GAZA);\n+        assertEquals(\"2007-04-01T01:00:00.000+03:00\", res.toString());\n+    }\n+\n+    public void test_MutableDateTime_withZoneRetainFields_Gaza() {\n+        MutableDateTime dt = new MutableDateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC);\n+        assertEquals(\"2007-04-01T00:00:00.000Z\", dt.toString());\n+        \n+        dt.setZoneRetainFields(MOCK_GAZA);\n+        assertEquals(\"2007-04-01T01:00:00.000+03:00\", dt.toString());\n+    }\n+\n+    public void test_LocalDate_new_Gaza() {\n+        LocalDate date1 = new LocalDate(CUTOVER_GAZA, MOCK_GAZA);\n+        assertEquals(\"2007-04-01\", date1.toString());\n+        \n+        LocalDate date2 = new LocalDate(CUTOVER_GAZA - 1, MOCK_GAZA);\n+        assertEquals(\"2007-03-31\", date2.toString());\n+    }\n+\n+    public void test_LocalDate_toDateMidnight_Gaza() {\n+        LocalDate date = new LocalDate(2007, 4, 1);\n+        try {\n+            date.toDateMidnight(MOCK_GAZA);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(true, ex.getMessage().startsWith(\"Illegal instant due to time zone offset transition\"));\n+        }\n+    }\n+\n+    public void test_DateTime_new_Gaza() {\n+        try {\n+            new DateTime(2007, 4, 1, 0, 0, 0, 0, MOCK_GAZA);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(true, ex.getMessage().indexOf(\"Illegal instant due to time zone offset transition\") >= 0);\n+        }\n+    }\n+\n+    public void test_DateTime_newValid_Gaza() {\n+        new DateTime(2007, 3, 31, 19, 0, 0, 0, MOCK_GAZA);\n+        new DateTime(2007, 3, 31, 20, 0, 0, 0, MOCK_GAZA);\n+        new DateTime(2007, 3, 31, 21, 0, 0, 0, MOCK_GAZA);\n+        new DateTime(2007, 3, 31, 22, 0, 0, 0, MOCK_GAZA);\n+        new DateTime(2007, 3, 31, 23, 0, 0, 0, MOCK_GAZA);\n+        new DateTime(2007, 4, 1, 1, 0, 0, 0, MOCK_GAZA);\n+        new DateTime(2007, 4, 1, 2, 0, 0, 0, MOCK_GAZA);\n+        new DateTime(2007, 4, 1, 3, 0, 0, 0, MOCK_GAZA);\n+    }\n+\n+    public void test_DateTime_parse_Gaza() {\n+        try {\n+            new DateTime(\"2007-04-01T00:00\", MOCK_GAZA);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(true, ex.getMessage().indexOf(\"Illegal instant due to time zone offset transition\") >= 0);\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //------------------------ Bug [1710316] --------------------------------\n+    //-----------------------------------------------------------------------\n+    /** Mock zone simulating America/Grand_Turk cutover at midnight 2007-04-01 */\n+    private static long CUTOVER_TURK = 1175403600000L;\n+    private static int OFFSET_TURK = -18000000;  // -05:00\n+    private static final DateTimeZone MOCK_TURK = new MockZone(CUTOVER_TURK, OFFSET_TURK);\n+\n+    //-----------------------------------------------------------------------\n+    public void test_MockTurkIsCorrect() {\n+        DateTime pre = new DateTime(CUTOVER_TURK - 1L, MOCK_TURK);\n+        assertEquals(\"2007-03-31T23:59:59.999-05:00\", pre.toString());\n+        DateTime at = new DateTime(CUTOVER_TURK, MOCK_TURK);\n+        assertEquals(\"2007-04-01T01:00:00.000-04:00\", at.toString());\n+        DateTime post = new DateTime(CUTOVER_TURK + 1L, MOCK_TURK);\n+        assertEquals(\"2007-04-01T01:00:00.001-04:00\", post.toString());\n+    }\n+\n+    public void test_getOffsetFromLocal_Turk() {\n+        doTest_getOffsetFromLocal_Turk(-1, 23, 0, \"2007-03-31T23:00:00.000-05:00\");\n+        doTest_getOffsetFromLocal_Turk(-1, 23, 30, \"2007-03-31T23:30:00.000-05:00\");\n+        doTest_getOffsetFromLocal_Turk(0, 0, 0, \"2007-04-01T01:00:00.000-04:00\");\n+        doTest_getOffsetFromLocal_Turk(0, 0, 30, \"2007-04-01T01:30:00.000-04:00\");\n+        doTest_getOffsetFromLocal_Turk(0, 1, 0, \"2007-04-01T01:00:00.000-04:00\");\n+        doTest_getOffsetFromLocal_Turk(0, 1, 30, \"2007-04-01T01:30:00.000-04:00\");\n+        doTest_getOffsetFromLocal_Turk(0, 2, 0, \"2007-04-01T02:00:00.000-04:00\");\n+        doTest_getOffsetFromLocal_Turk(0, 3, 0, \"2007-04-01T03:00:00.000-04:00\");\n+        doTest_getOffsetFromLocal_Turk(0, 4, 0, \"2007-04-01T04:00:00.000-04:00\");\n+        doTest_getOffsetFromLocal_Turk(0, 5, 0, \"2007-04-01T05:00:00.000-04:00\");\n+        doTest_getOffsetFromLocal_Turk(0, 6, 0, \"2007-04-01T06:00:00.000-04:00\");\n+    }\n+\n+    private void doTest_getOffsetFromLocal_Turk(int days, int hour, int min, String expected) {\n+        DateTime dt = new DateTime(2007, 4, 1, hour, min, 0, 0, DateTimeZone.UTC).plusDays(days);\n+        int offset = MOCK_TURK.getOffsetFromLocal(dt.getMillis());\n+        DateTime res = new DateTime(dt.getMillis() - offset, MOCK_TURK);\n+        assertEquals(res.toString(), expected, res.toString());\n+    }\n+\n+    public void test_DateTime_roundFloor_Turk() {\n+        DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_TURK);\n+        assertEquals(\"2007-04-01T08:00:00.000-04:00\", dt.toString());\n+        DateTime rounded = dt.dayOfMonth().roundFloorCopy();\n+        assertEquals(\"2007-04-01T01:00:00.000-04:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundFloorNotDST_Turk() {\n+        DateTime dt = new DateTime(2007, 4, 2, 8, 0, 0, 0, MOCK_TURK);\n+        assertEquals(\"2007-04-02T08:00:00.000-04:00\", dt.toString());\n+        DateTime rounded = dt.dayOfMonth().roundFloorCopy();\n+        assertEquals(\"2007-04-02T00:00:00.000-04:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundCeiling_Turk() {\n+        DateTime dt = new DateTime(2007, 3, 31, 20, 0, 0, 0, MOCK_TURK);\n+        assertEquals(\"2007-03-31T20:00:00.000-05:00\", dt.toString());\n+        DateTime rounded = dt.dayOfMonth().roundCeilingCopy();\n+        assertEquals(\"2007-04-01T01:00:00.000-04:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_setHourZero_Turk() {\n+        DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_TURK);\n+        assertEquals(\"2007-04-01T08:00:00.000-04:00\", dt.toString());\n+        try {\n+            dt.hourOfDay().setCopy(0);\n+            fail();\n+        } catch (IllegalFieldValueException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void test_DateTime_withHourZero_Turk() {\n+        DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_TURK);\n+        assertEquals(\"2007-04-01T08:00:00.000-04:00\", dt.toString());\n+        try {\n+            dt.withHourOfDay(0);\n+            fail();\n+        } catch (IllegalFieldValueException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void test_DateTime_withDay_Turk() {\n+        DateTime dt = new DateTime(2007, 4, 2, 0, 0, 0, 0, MOCK_TURK);\n+        assertEquals(\"2007-04-02T00:00:00.000-04:00\", dt.toString());\n+        DateTime res = dt.withDayOfMonth(1);\n+        assertEquals(\"2007-04-01T01:00:00.000-04:00\", res.toString());\n+    }\n+\n+    public void test_DateTime_minusHour_Turk() {\n+        DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_TURK);\n+        assertEquals(\"2007-04-01T08:00:00.000-04:00\", dt.toString());\n+        \n+        DateTime minus7 = dt.minusHours(7);\n+        assertEquals(\"2007-04-01T01:00:00.000-04:00\", minus7.toString());\n+        DateTime minus8 = dt.minusHours(8);\n+        assertEquals(\"2007-03-31T23:00:00.000-05:00\", minus8.toString());\n+        DateTime minus9 = dt.minusHours(9);\n+        assertEquals(\"2007-03-31T22:00:00.000-05:00\", minus9.toString());\n+    }\n+\n+    public void test_DateTime_plusHour_Turk() {\n+        DateTime dt = new DateTime(2007, 3, 31, 16, 0, 0, 0, MOCK_TURK);\n+        assertEquals(\"2007-03-31T16:00:00.000-05:00\", dt.toString());\n+        \n+        DateTime plus7 = dt.plusHours(7);\n+        assertEquals(\"2007-03-31T23:00:00.000-05:00\", plus7.toString());\n+        DateTime plus8 = dt.plusHours(8);\n+        assertEquals(\"2007-04-01T01:00:00.000-04:00\", plus8.toString());\n+        DateTime plus9 = dt.plusHours(9);\n+        assertEquals(\"2007-04-01T02:00:00.000-04:00\", plus9.toString());\n+    }\n+\n+    public void test_DateTime_minusDay_Turk() {\n+        DateTime dt = new DateTime(2007, 4, 2, 0, 0, 0, 0, MOCK_TURK);\n+        assertEquals(\"2007-04-02T00:00:00.000-04:00\", dt.toString());\n+        \n+        DateTime minus1 = dt.minusDays(1);\n+        assertEquals(\"2007-04-01T01:00:00.000-04:00\", minus1.toString());\n+        DateTime minus2 = dt.minusDays(2);\n+        assertEquals(\"2007-03-31T00:00:00.000-05:00\", minus2.toString());\n+    }\n+\n+    public void test_DateTime_plusDay_Turk() {\n+        DateTime dt = new DateTime(2007, 3, 31, 0, 0, 0, 0, MOCK_TURK);\n+        assertEquals(\"2007-03-31T00:00:00.000-05:00\", dt.toString());\n+        \n+        DateTime plus1 = dt.plusDays(1);\n+        assertEquals(\"2007-04-01T01:00:00.000-04:00\", plus1.toString());\n+        DateTime plus2 = dt.plusDays(2);\n+        assertEquals(\"2007-04-02T00:00:00.000-04:00\", plus2.toString());\n+    }\n+\n+    public void test_DateTime_plusDayMidGap_Turk() {\n+        DateTime dt = new DateTime(2007, 3, 31, 0, 30, 0, 0, MOCK_TURK);\n+        assertEquals(\"2007-03-31T00:30:00.000-05:00\", dt.toString());\n+        \n+        DateTime plus1 = dt.plusDays(1);\n+        assertEquals(\"2007-04-01T01:30:00.000-04:00\", plus1.toString());\n+        DateTime plus2 = dt.plusDays(2);\n+        assertEquals(\"2007-04-02T00:30:00.000-04:00\", plus2.toString());\n+    }\n+\n+    public void test_DateTime_addWrapFieldDay_Turk() {\n+        DateTime dt = new DateTime(2007, 4, 30, 0, 0, 0, 0, MOCK_TURK);\n+        assertEquals(\"2007-04-30T00:00:00.000-04:00\", dt.toString());\n+        \n+        DateTime plus1 = dt.dayOfMonth().addWrapFieldToCopy(1);\n+        assertEquals(\"2007-04-01T01:00:00.000-04:00\", plus1.toString());\n+        DateTime plus2 = dt.dayOfMonth().addWrapFieldToCopy(2);\n+        assertEquals(\"2007-04-02T00:00:00.000-04:00\", plus2.toString());\n+    }\n+\n+    public void test_DateTime_withZoneRetainFields_Turk() {\n+        DateTime dt = new DateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC);\n+        assertEquals(\"2007-04-01T00:00:00.000Z\", dt.toString());\n+        \n+        DateTime res = dt.withZoneRetainFields(MOCK_TURK);\n+        assertEquals(\"2007-04-01T01:00:00.000-04:00\", res.toString());\n+    }\n+\n+    public void test_MutableDateTime_setZoneRetainFields_Turk() {\n+        MutableDateTime dt = new MutableDateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC);\n+        assertEquals(\"2007-04-01T00:00:00.000Z\", dt.toString());\n+        \n+        dt.setZoneRetainFields(MOCK_TURK);\n+        assertEquals(\"2007-04-01T01:00:00.000-04:00\", dt.toString());\n+    }\n+\n+    public void test_LocalDate_new_Turk() {\n+        LocalDate date1 = new LocalDate(CUTOVER_TURK, MOCK_TURK);\n+        assertEquals(\"2007-04-01\", date1.toString());\n+        \n+        LocalDate date2 = new LocalDate(CUTOVER_TURK - 1, MOCK_TURK);\n+        assertEquals(\"2007-03-31\", date2.toString());\n+    }\n+\n+    public void test_LocalDate_toDateMidnight_Turk() {\n+        LocalDate date = new LocalDate(2007, 4, 1);\n+        try {\n+            date.toDateMidnight(MOCK_TURK);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(true, ex.getMessage().startsWith(\"Illegal instant due to time zone offset transition\"));\n+        }\n+    }\n+\n+    public void test_DateTime_new_Turk() {\n+        try {\n+            new DateTime(2007, 4, 1, 0, 0, 0, 0, MOCK_TURK);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(true, ex.getMessage().indexOf(\"Illegal instant due to time zone offset transition\") >= 0);\n+        }\n+    }\n+\n+    public void test_DateTime_newValid_Turk() {\n+        new DateTime(2007, 3, 31, 23, 0, 0, 0, MOCK_TURK);\n+        new DateTime(2007, 4, 1, 1, 0, 0, 0, MOCK_TURK);\n+        new DateTime(2007, 4, 1, 2, 0, 0, 0, MOCK_TURK);\n+        new DateTime(2007, 4, 1, 3, 0, 0, 0, MOCK_TURK);\n+        new DateTime(2007, 4, 1, 4, 0, 0, 0, MOCK_TURK);\n+        new DateTime(2007, 4, 1, 5, 0, 0, 0, MOCK_TURK);\n+        new DateTime(2007, 4, 1, 6, 0, 0, 0, MOCK_TURK);\n+    }\n+\n+    public void test_DateTime_parse_Turk() {\n+        try {\n+            new DateTime(\"2007-04-01T00:00\", MOCK_TURK);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(true, ex.getMessage().indexOf(\"Illegal instant due to time zone offset transition\") >= 0);\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    /** America/New_York cutover from 01:59 to 03:00 on 2007-03-11 */\n+    private static long CUTOVER_NEW_YORK_SPRING = 1173596400000L;  // 2007-03-11T03:00:00.000-04:00\n+    private static final DateTimeZone ZONE_NEW_YORK = DateTimeZone.forID(\"America/New_York\");\n+//  DateTime x = new DateTime(2007, 1, 1, 0, 0, 0, 0, ZONE_NEW_YORK);\n+//  System.out.println(ZONE_NEW_YORK.nextTransition(x.getMillis()));\n+//  DateTime y = new DateTime(ZONE_NEW_YORK.nextTransition(x.getMillis()), ZONE_NEW_YORK);\n+//  System.out.println(y);\n+\n+    //-----------------------------------------------------------------------\n+    public void test_NewYorkIsCorrect_Spring() {\n+        DateTime pre = new DateTime(CUTOVER_NEW_YORK_SPRING - 1L, ZONE_NEW_YORK);\n+        assertEquals(\"2007-03-11T01:59:59.999-05:00\", pre.toString());\n+        DateTime at = new DateTime(CUTOVER_NEW_YORK_SPRING, ZONE_NEW_YORK);\n+        assertEquals(\"2007-03-11T03:00:00.000-04:00\", at.toString());\n+        DateTime post = new DateTime(CUTOVER_NEW_YORK_SPRING + 1L, ZONE_NEW_YORK);\n+        assertEquals(\"2007-03-11T03:00:00.001-04:00\", post.toString());\n+    }\n+\n+    public void test_getOffsetFromLocal_NewYork_Spring() {\n+        doTest_getOffsetFromLocal(3, 11, 1, 0, \"2007-03-11T01:00:00.000-05:00\", ZONE_NEW_YORK);\n+        doTest_getOffsetFromLocal(3, 11, 1,30, \"2007-03-11T01:30:00.000-05:00\", ZONE_NEW_YORK);\n+        \n+        doTest_getOffsetFromLocal(3, 11, 2, 0, \"2007-03-11T03:00:00.000-04:00\", ZONE_NEW_YORK);\n+        doTest_getOffsetFromLocal(3, 11, 2,30, \"2007-03-11T03:30:00.000-04:00\", ZONE_NEW_YORK);\n+        \n+        doTest_getOffsetFromLocal(3, 11, 3, 0, \"2007-03-11T03:00:00.000-04:00\", ZONE_NEW_YORK);\n+        doTest_getOffsetFromLocal(3, 11, 3,30, \"2007-03-11T03:30:00.000-04:00\", ZONE_NEW_YORK);\n+        doTest_getOffsetFromLocal(3, 11, 4, 0, \"2007-03-11T04:00:00.000-04:00\", ZONE_NEW_YORK);\n+        doTest_getOffsetFromLocal(3, 11, 5, 0, \"2007-03-11T05:00:00.000-04:00\", ZONE_NEW_YORK);\n+        doTest_getOffsetFromLocal(3, 11, 6, 0, \"2007-03-11T06:00:00.000-04:00\", ZONE_NEW_YORK);\n+        doTest_getOffsetFromLocal(3, 11, 7, 0, \"2007-03-11T07:00:00.000-04:00\", ZONE_NEW_YORK);\n+        doTest_getOffsetFromLocal(3, 11, 8, 0, \"2007-03-11T08:00:00.000-04:00\", ZONE_NEW_YORK);\n+    }\n+\n+    public void test_DateTime_setHourAcross_NewYork_Spring() {\n+        DateTime dt = new DateTime(2007, 3, 11, 0, 0, 0, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-03-11T00:00:00.000-05:00\", dt.toString());\n+        DateTime res = dt.hourOfDay().setCopy(4);\n+        assertEquals(\"2007-03-11T04:00:00.000-04:00\", res.toString());\n+    }\n+\n+    public void test_DateTime_setHourForward_NewYork_Spring() {\n+        DateTime dt = new DateTime(2007, 3, 11, 0, 0, 0, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-03-11T00:00:00.000-05:00\", dt.toString());\n+        \n+        try {\n+            dt.hourOfDay().setCopy(2);\n+            fail();\n+        } catch (IllegalFieldValueException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void test_DateTime_setHourBack_NewYork_Spring() {\n+        DateTime dt = new DateTime(2007, 3, 11, 8, 0, 0, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-03-11T08:00:00.000-04:00\", dt.toString());\n+        \n+        try {\n+            dt.hourOfDay().setCopy(2);\n+            fail();\n+        } catch (IllegalFieldValueException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_DateTime_roundFloor_day_NewYork_Spring_preCutover() {\n+        DateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-03-11T01:30:00.000-05:00\", dt.toString());\n+        DateTime rounded = dt.dayOfMonth().roundFloorCopy();\n+        assertEquals(\"2007-03-11T00:00:00.000-05:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundFloor_day_NewYork_Spring_postCutover() {\n+        DateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-03-11T03:30:00.000-04:00\", dt.toString());\n+        DateTime rounded = dt.dayOfMonth().roundFloorCopy();\n+        assertEquals(\"2007-03-11T00:00:00.000-05:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundFloor_hour_NewYork_Spring_preCutover() {\n+        DateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-03-11T01:30:00.000-05:00\", dt.toString());\n+        DateTime rounded = dt.hourOfDay().roundFloorCopy();\n+        assertEquals(\"2007-03-11T01:00:00.000-05:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundFloor_hour_NewYork_Spring_postCutover() {\n+        DateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-03-11T03:30:00.000-04:00\", dt.toString());\n+        DateTime rounded = dt.hourOfDay().roundFloorCopy();\n+        assertEquals(\"2007-03-11T03:00:00.000-04:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundFloor_minute_NewYork_Spring_preCutover() {\n+        DateTime dt = new DateTime(2007, 3, 11, 1, 30, 40, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-03-11T01:30:40.000-05:00\", dt.toString());\n+        DateTime rounded = dt.minuteOfHour().roundFloorCopy();\n+        assertEquals(\"2007-03-11T01:30:00.000-05:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundFloor_minute_NewYork_Spring_postCutover() {\n+        DateTime dt = new DateTime(2007, 3, 11, 3, 30, 40, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-03-11T03:30:40.000-04:00\", dt.toString());\n+        DateTime rounded = dt.minuteOfHour().roundFloorCopy();\n+        assertEquals(\"2007-03-11T03:30:00.000-04:00\", rounded.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_DateTime_roundCeiling_day_NewYork_Spring_preCutover() {\n+        DateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-03-11T01:30:00.000-05:00\", dt.toString());\n+        DateTime rounded = dt.dayOfMonth().roundCeilingCopy();\n+        assertEquals(\"2007-03-12T00:00:00.000-04:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundCeiling_day_NewYork_Spring_postCutover() {\n+        DateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-03-11T03:30:00.000-04:00\", dt.toString());\n+        DateTime rounded = dt.dayOfMonth().roundCeilingCopy();\n+        assertEquals(\"2007-03-12T00:00:00.000-04:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundCeiling_hour_NewYork_Spring_preCutover() {\n+        DateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-03-11T01:30:00.000-05:00\", dt.toString());\n+        DateTime rounded = dt.hourOfDay().roundCeilingCopy();\n+        assertEquals(\"2007-03-11T03:00:00.000-04:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundCeiling_hour_NewYork_Spring_postCutover() {\n+        DateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-03-11T03:30:00.000-04:00\", dt.toString());\n+        DateTime rounded = dt.hourOfDay().roundCeilingCopy();\n+        assertEquals(\"2007-03-11T04:00:00.000-04:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundCeiling_minute_NewYork_Spring_preCutover() {\n+        DateTime dt = new DateTime(2007, 3, 11, 1, 30, 40, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-03-11T01:30:40.000-05:00\", dt.toString());\n+        DateTime rounded = dt.minuteOfHour().roundCeilingCopy();\n+        assertEquals(\"2007-03-11T01:31:00.000-05:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundCeiling_minute_NewYork_Spring_postCutover() {\n+        DateTime dt = new DateTime(2007, 3, 11, 3, 30, 40, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-03-11T03:30:40.000-04:00\", dt.toString());\n+        DateTime rounded = dt.minuteOfHour().roundCeilingCopy();\n+        assertEquals(\"2007-03-11T03:31:00.000-04:00\", rounded.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /** America/New_York cutover from 01:59 to 01:00 on 2007-11-04 */\n+    private static long CUTOVER_NEW_YORK_AUTUMN = 1194156000000L;  // 2007-11-04T01:00:00.000-05:00\n+\n+    //-----------------------------------------------------------------------\n+    public void test_NewYorkIsCorrect_Autumn() {\n+        DateTime pre = new DateTime(CUTOVER_NEW_YORK_AUTUMN - 1L, ZONE_NEW_YORK);\n+        assertEquals(\"2007-11-04T01:59:59.999-04:00\", pre.toString());\n+        DateTime at = new DateTime(CUTOVER_NEW_YORK_AUTUMN, ZONE_NEW_YORK);\n+        assertEquals(\"2007-11-04T01:00:00.000-05:00\", at.toString());\n+        DateTime post = new DateTime(CUTOVER_NEW_YORK_AUTUMN + 1L, ZONE_NEW_YORK);\n+        assertEquals(\"2007-11-04T01:00:00.001-05:00\", post.toString());\n+    }\n+\n+    public void test_getOffsetFromLocal_NewYork_Autumn() {\n+        doTest_getOffsetFromLocal(11, 4, 0, 0, \"2007-11-04T00:00:00.000-04:00\", ZONE_NEW_YORK);\n+        doTest_getOffsetFromLocal(11, 4, 0,30, \"2007-11-04T00:30:00.000-04:00\", ZONE_NEW_YORK);\n+        \n+        doTest_getOffsetFromLocal(11, 4, 1, 0, \"2007-11-04T01:00:00.000-04:00\", ZONE_NEW_YORK);\n+        doTest_getOffsetFromLocal(11, 4, 1,30, \"2007-11-04T01:30:00.000-04:00\", ZONE_NEW_YORK);\n+        \n+        doTest_getOffsetFromLocal(11, 4, 2, 0, \"2007-11-04T02:00:00.000-05:00\", ZONE_NEW_YORK);\n+        doTest_getOffsetFromLocal(11, 4, 2,30, \"2007-11-04T02:30:00.000-05:00\", ZONE_NEW_YORK);\n+        doTest_getOffsetFromLocal(11, 4, 3, 0, \"2007-11-04T03:00:00.000-05:00\", ZONE_NEW_YORK);\n+        doTest_getOffsetFromLocal(11, 4, 3,30, \"2007-11-04T03:30:00.000-05:00\", ZONE_NEW_YORK);\n+        doTest_getOffsetFromLocal(11, 4, 4, 0, \"2007-11-04T04:00:00.000-05:00\", ZONE_NEW_YORK);\n+        doTest_getOffsetFromLocal(11, 4, 5, 0, \"2007-11-04T05:00:00.000-05:00\", ZONE_NEW_YORK);\n+        doTest_getOffsetFromLocal(11, 4, 6, 0, \"2007-11-04T06:00:00.000-05:00\", ZONE_NEW_YORK);\n+        doTest_getOffsetFromLocal(11, 4, 7, 0, \"2007-11-04T07:00:00.000-05:00\", ZONE_NEW_YORK);\n+        doTest_getOffsetFromLocal(11, 4, 8, 0, \"2007-11-04T08:00:00.000-05:00\", ZONE_NEW_YORK);\n+    }\n+\n+    public void test_DateTime_plusHour_NewYork_Autumn() {\n+        DateTime dt = new DateTime(2007, 11, 3, 18, 0, 0, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-11-03T18:00:00.000-04:00\", dt.toString());\n+        \n+        DateTime plus6 = dt.plusHours(6);\n+        assertEquals(\"2007-11-04T00:00:00.000-04:00\", plus6.toString());\n+        DateTime plus7 = dt.plusHours(7);\n+        assertEquals(\"2007-11-04T01:00:00.000-04:00\", plus7.toString());\n+        DateTime plus8 = dt.plusHours(8);\n+        assertEquals(\"2007-11-04T01:00:00.000-05:00\", plus8.toString());\n+        DateTime plus9 = dt.plusHours(9);\n+        assertEquals(\"2007-11-04T02:00:00.000-05:00\", plus9.toString());\n+    }\n+\n+    public void test_DateTime_minusHour_NewYork_Autumn() {\n+        DateTime dt = new DateTime(2007, 11, 4, 8, 0, 0, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-11-04T08:00:00.000-05:00\", dt.toString());\n+        \n+        DateTime minus6 = dt.minusHours(6);\n+        assertEquals(\"2007-11-04T02:00:00.000-05:00\", minus6.toString());\n+        DateTime minus7 = dt.minusHours(7);\n+        assertEquals(\"2007-11-04T01:00:00.000-05:00\", minus7.toString());\n+        DateTime minus8 = dt.minusHours(8);\n+        assertEquals(\"2007-11-04T01:00:00.000-04:00\", minus8.toString());\n+        DateTime minus9 = dt.minusHours(9);\n+        assertEquals(\"2007-11-04T00:00:00.000-04:00\", minus9.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_DateTime_roundFloor_day_NewYork_Autumn_preCutover() {\n+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-11-04T01:30:00.000-04:00\", dt.toString());\n+        DateTime rounded = dt.dayOfMonth().roundFloorCopy();\n+        assertEquals(\"2007-11-04T00:00:00.000-04:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundFloor_day_NewYork_Autumn_postCutover() {\n+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK).plusHours(1);\n+        assertEquals(\"2007-11-04T01:30:00.000-05:00\", dt.toString());\n+        DateTime rounded = dt.dayOfMonth().roundFloorCopy();\n+        assertEquals(\"2007-11-04T00:00:00.000-04:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundFloor_hourOfDay_NewYork_Autumn_preCutover() {\n+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-11-04T01:30:00.000-04:00\", dt.toString());\n+        DateTime rounded = dt.hourOfDay().roundFloorCopy();\n+        assertEquals(\"2007-11-04T01:00:00.000-04:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundFloor_hourOfDay_NewYork_Autumn_postCutover() {\n+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK).plusHours(1);\n+        assertEquals(\"2007-11-04T01:30:00.000-05:00\", dt.toString());\n+        DateTime rounded = dt.hourOfDay().roundFloorCopy();\n+        assertEquals(\"2007-11-04T01:00:00.000-05:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundFloor_minuteOfHour_NewYork_Autumn_preCutover() {\n+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-11-04T01:30:40.000-04:00\", dt.toString());\n+        DateTime rounded = dt.minuteOfHour().roundFloorCopy();\n+        assertEquals(\"2007-11-04T01:30:00.000-04:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundFloor_minuteOfHour_NewYork_Autumn_postCutover() {\n+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 0, ZONE_NEW_YORK).plusHours(1);\n+        assertEquals(\"2007-11-04T01:30:40.000-05:00\", dt.toString());\n+        DateTime rounded = dt.minuteOfHour().roundFloorCopy();\n+        assertEquals(\"2007-11-04T01:30:00.000-05:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundFloor_secondOfMinute_NewYork_Autumn_preCutover() {\n+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 500, ZONE_NEW_YORK);\n+        assertEquals(\"2007-11-04T01:30:40.500-04:00\", dt.toString());\n+        DateTime rounded = dt.secondOfMinute().roundFloorCopy();\n+        assertEquals(\"2007-11-04T01:30:40.000-04:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundFloor_secondOfMinute_NewYork_Autumn_postCutover() {\n+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 500, ZONE_NEW_YORK).plusHours(1);\n+        assertEquals(\"2007-11-04T01:30:40.500-05:00\", dt.toString());\n+        DateTime rounded = dt.secondOfMinute().roundFloorCopy();\n+        assertEquals(\"2007-11-04T01:30:40.000-05:00\", rounded.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_DateTime_roundCeiling_day_NewYork_Autumn_preCutover() {\n+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-11-04T01:30:00.000-04:00\", dt.toString());\n+        DateTime rounded = dt.dayOfMonth().roundCeilingCopy();\n+        assertEquals(\"2007-11-05T00:00:00.000-05:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundCeiling_day_NewYork_Autumn_postCutover() {\n+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK).plusHours(1);\n+        assertEquals(\"2007-11-04T01:30:00.000-05:00\", dt.toString());\n+        DateTime rounded = dt.dayOfMonth().roundCeilingCopy();\n+        assertEquals(\"2007-11-05T00:00:00.000-05:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundCeiling_hourOfDay_NewYork_Autumn_preCutover() {\n+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-11-04T01:30:00.000-04:00\", dt.toString());\n+        DateTime rounded = dt.hourOfDay().roundCeilingCopy();\n+        assertEquals(\"2007-11-04T01:00:00.000-05:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundCeiling_hourOfDay_NewYork_Autumn_postCutover() {\n+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK).plusHours(1);\n+        assertEquals(\"2007-11-04T01:30:00.000-05:00\", dt.toString());\n+        DateTime rounded = dt.hourOfDay().roundCeilingCopy();\n+        assertEquals(\"2007-11-04T02:00:00.000-05:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundCeiling_minuteOfHour_NewYork_Autumn_preCutover() {\n+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 0, ZONE_NEW_YORK);\n+        assertEquals(\"2007-11-04T01:30:40.000-04:00\", dt.toString());\n+        DateTime rounded = dt.minuteOfHour().roundCeilingCopy();\n+        assertEquals(\"2007-11-04T01:31:00.000-04:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundCeiling_minuteOfHour_NewYork_Autumn_postCutover() {\n+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 0, ZONE_NEW_YORK).plusHours(1);\n+        assertEquals(\"2007-11-04T01:30:40.000-05:00\", dt.toString());\n+        DateTime rounded = dt.minuteOfHour().roundCeilingCopy();\n+        assertEquals(\"2007-11-04T01:31:00.000-05:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundCeiling_secondOfMinute_NewYork_Autumn_preCutover() {\n+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 500, ZONE_NEW_YORK);\n+        assertEquals(\"2007-11-04T01:30:40.500-04:00\", dt.toString());\n+        DateTime rounded = dt.secondOfMinute().roundCeilingCopy();\n+        assertEquals(\"2007-11-04T01:30:41.000-04:00\", rounded.toString());\n+    }\n+\n+    public void test_DateTime_roundCeiling_secondOfMinute_NewYork_Autumn_postCutover() {\n+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 500, ZONE_NEW_YORK).plusHours(1);\n+        assertEquals(\"2007-11-04T01:30:40.500-05:00\", dt.toString());\n+        DateTime rounded = dt.secondOfMinute().roundCeilingCopy();\n+        assertEquals(\"2007-11-04T01:30:41.000-05:00\", rounded.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /** Europe/Moscow cutover from 01:59 to 03:00 on 2007-03-25 */\n+    private static long CUTOVER_MOSCOW_SPRING = 1174777200000L;  // 2007-03-25T03:00:00.000+04:00\n+    private static final DateTimeZone ZONE_MOSCOW = DateTimeZone.forID(\"Europe/Moscow\");\n+\n+    //-----------------------------------------------------------------------\n+    public void test_MoscowIsCorrect_Spring() {\n+//      DateTime x = new DateTime(2007, 7, 1, 0, 0, 0, 0, ZONE_MOSCOW);\n+//      System.out.println(ZONE_MOSCOW.nextTransition(x.getMillis()));\n+//      DateTime y = new DateTime(ZONE_MOSCOW.nextTransition(x.getMillis()), ZONE_MOSCOW);\n+//      System.out.println(y);\n+        DateTime pre = new DateTime(CUTOVER_MOSCOW_SPRING - 1L, ZONE_MOSCOW);\n+        assertEquals(\"2007-03-25T01:59:59.999+03:00\", pre.toString());\n+        DateTime at = new DateTime(CUTOVER_MOSCOW_SPRING, ZONE_MOSCOW);\n+        assertEquals(\"2007-03-25T03:00:00.000+04:00\", at.toString());\n+        DateTime post = new DateTime(CUTOVER_MOSCOW_SPRING + 1L, ZONE_MOSCOW);\n+        assertEquals(\"2007-03-25T03:00:00.001+04:00\", post.toString());\n+    }\n+\n+    public void test_getOffsetFromLocal_Moscow_Spring() {\n+        doTest_getOffsetFromLocal(3, 25, 1, 0, \"2007-03-25T01:00:00.000+03:00\", ZONE_MOSCOW);\n+        doTest_getOffsetFromLocal(3, 25, 1,30, \"2007-03-25T01:30:00.000+03:00\", ZONE_MOSCOW);\n+        \n+        doTest_getOffsetFromLocal(3, 25, 2, 0, \"2007-03-25T03:00:00.000+04:00\", ZONE_MOSCOW);\n+        doTest_getOffsetFromLocal(3, 25, 2,30, \"2007-03-25T03:30:00.000+04:00\", ZONE_MOSCOW);\n+        \n+        doTest_getOffsetFromLocal(3, 25, 3, 0, \"2007-03-25T03:00:00.000+04:00\", ZONE_MOSCOW);\n+        doTest_getOffsetFromLocal(3, 25, 3,30, \"2007-03-25T03:30:00.000+04:00\", ZONE_MOSCOW);\n+        doTest_getOffsetFromLocal(3, 25, 4, 0, \"2007-03-25T04:00:00.000+04:00\", ZONE_MOSCOW);\n+        doTest_getOffsetFromLocal(3, 25, 5, 0, \"2007-03-25T05:00:00.000+04:00\", ZONE_MOSCOW);\n+        doTest_getOffsetFromLocal(3, 25, 6, 0, \"2007-03-25T06:00:00.000+04:00\", ZONE_MOSCOW);\n+        doTest_getOffsetFromLocal(3, 25, 7, 0, \"2007-03-25T07:00:00.000+04:00\", ZONE_MOSCOW);\n+        doTest_getOffsetFromLocal(3, 25, 8, 0, \"2007-03-25T08:00:00.000+04:00\", ZONE_MOSCOW);\n+    }\n+\n+    public void test_DateTime_setHourAcross_Moscow_Spring() {\n+        DateTime dt = new DateTime(2007, 3, 25, 0, 0, 0, 0, ZONE_MOSCOW);\n+        assertEquals(\"2007-03-25T00:00:00.000+03:00\", dt.toString());\n+        DateTime res = dt.hourOfDay().setCopy(4);\n+        assertEquals(\"2007-03-25T04:00:00.000+04:00\", res.toString());\n+    }\n+\n+    public void test_DateTime_setHourForward_Moscow_Spring() {\n+        DateTime dt = new DateTime(2007, 3, 25, 0, 0, 0, 0, ZONE_MOSCOW);\n+        assertEquals(\"2007-03-25T00:00:00.000+03:00\", dt.toString());\n+        \n+        try {\n+            dt.hourOfDay().setCopy(2);\n+            fail();\n+        } catch (IllegalFieldValueException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void test_DateTime_setHourBack_Moscow_Spring() {\n+        DateTime dt = new DateTime(2007, 3, 25, 8, 0, 0, 0, ZONE_MOSCOW);\n+        assertEquals(\"2007-03-25T08:00:00.000+04:00\", dt.toString());\n+        \n+        try {\n+            dt.hourOfDay().setCopy(2);\n+            fail();\n+        } catch (IllegalFieldValueException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /** America/New_York cutover from 02:59 to 02:00 on 2007-10-28 */\n+    private static long CUTOVER_MOSCOW_AUTUMN = 1193526000000L;  // 2007-10-28T02:00:00.000+03:00\n+\n+    //-----------------------------------------------------------------------\n+    public void test_MoscowIsCorrect_Autumn() {\n+        DateTime pre = new DateTime(CUTOVER_MOSCOW_AUTUMN - 1L, ZONE_MOSCOW);\n+        assertEquals(\"2007-10-28T02:59:59.999+04:00\", pre.toString());\n+        DateTime at = new DateTime(CUTOVER_MOSCOW_AUTUMN, ZONE_MOSCOW);\n+        assertEquals(\"2007-10-28T02:00:00.000+03:00\", at.toString());\n+        DateTime post = new DateTime(CUTOVER_MOSCOW_AUTUMN + 1L, ZONE_MOSCOW);\n+        assertEquals(\"2007-10-28T02:00:00.001+03:00\", post.toString());\n+    }\n+\n+    // broken, and getOffsetFromLocal has no obvious way to determine which is correct\n+//    public void test_getOffsetFromLocal_Moscow_Autumn() {\n+//        doTest_getOffsetFromLocal(10, 28, 0, 0, \"2007-10-28T00:00:00.000+04:00\", ZONE_MOSCOW);\n+//        doTest_getOffsetFromLocal(10, 28, 0,30, \"2007-10-28T00:30:00.000+04:00\", ZONE_MOSCOW);\n+//        doTest_getOffsetFromLocal(10, 28, 1, 0, \"2007-10-28T01:00:00.000+04:00\", ZONE_MOSCOW);\n+//        doTest_getOffsetFromLocal(10, 28, 1,30, \"2007-10-28T01:30:00.000+04:00\", ZONE_MOSCOW);\n+//        \n+//        doTest_getOffsetFromLocal(10, 28, 2, 0, \"2007-10-28T02:00:00.000+04:00\", ZONE_MOSCOW);\n+//        doTest_getOffsetFromLocal(10, 28, 2,30, \"2007-10-28T02:30:00.000+04:00\", ZONE_MOSCOW);\n+//        \n+//        doTest_getOffsetFromLocal(10, 28, 3, 0, \"2007-10-28T03:00:00.000+03:00\", ZONE_MOSCOW);\n+//        doTest_getOffsetFromLocal(10, 28, 3,30, \"2007-10-28T03:30:00.000+03:00\", ZONE_MOSCOW);\n+//        doTest_getOffsetFromLocal(10, 28, 4, 0, \"2007-10-28T04:00:00.000+03:00\", ZONE_MOSCOW);\n+//        doTest_getOffsetFromLocal(10, 28, 5, 0, \"2007-10-28T05:00:00.000+03:00\", ZONE_MOSCOW);\n+//        doTest_getOffsetFromLocal(10, 28, 6, 0, \"2007-10-28T06:00:00.000+03:00\", ZONE_MOSCOW);\n+//        doTest_getOffsetFromLocal(10, 28, 7, 0, \"2007-10-28T07:00:00.000+03:00\", ZONE_MOSCOW);\n+//        doTest_getOffsetFromLocal(10, 28, 8, 0, \"2007-10-28T08:00:00.000+03:00\", ZONE_MOSCOW);\n+//    }\n+\n+    public void test_DateTime_plusHour_Moscow_Autumn() {\n+        DateTime dt = new DateTime(2007, 10, 27, 19, 0, 0, 0, ZONE_MOSCOW);\n+        assertEquals(\"2007-10-27T19:00:00.000+04:00\", dt.toString());\n+        \n+        DateTime plus6 = dt.plusHours(6);\n+        assertEquals(\"2007-10-28T01:00:00.000+04:00\", plus6.toString());\n+        DateTime plus7 = dt.plusHours(7);\n+        assertEquals(\"2007-10-28T02:00:00.000+04:00\", plus7.toString());\n+        DateTime plus8 = dt.plusHours(8);\n+        assertEquals(\"2007-10-28T02:00:00.000+03:00\", plus8.toString());\n+        DateTime plus9 = dt.plusHours(9);\n+        assertEquals(\"2007-10-28T03:00:00.000+03:00\", plus9.toString());\n+    }\n+\n+    public void test_DateTime_minusHour_Moscow_Autumn() {\n+        DateTime dt = new DateTime(2007, 10, 28, 9, 0, 0, 0, ZONE_MOSCOW);\n+        assertEquals(\"2007-10-28T09:00:00.000+03:00\", dt.toString());\n+        \n+        DateTime minus6 = dt.minusHours(6);\n+        assertEquals(\"2007-10-28T03:00:00.000+03:00\", minus6.toString());\n+        DateTime minus7 = dt.minusHours(7);\n+        assertEquals(\"2007-10-28T02:00:00.000+03:00\", minus7.toString());\n+        DateTime minus8 = dt.minusHours(8);\n+        assertEquals(\"2007-10-28T02:00:00.000+04:00\", minus8.toString());\n+        DateTime minus9 = dt.minusHours(9);\n+        assertEquals(\"2007-10-28T01:00:00.000+04:00\", minus9.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    /** America/Guatemala cutover from 23:59 to 23:00 on 2006-09-30 */\n+    private static long CUTOVER_GUATEMALA_AUTUMN = 1159678800000L; // 2006-09-30T23:00:00.000-06:00\n+    private static final DateTimeZone ZONE_GUATEMALA = DateTimeZone.forID(\"America/Guatemala\");\n+\n+    //-----------------------------------------------------------------------\n+    public void test_GuatemataIsCorrect_Autumn() {\n+        DateTime pre = new DateTime(CUTOVER_GUATEMALA_AUTUMN - 1L, ZONE_GUATEMALA);\n+        assertEquals(\"2006-09-30T23:59:59.999-05:00\", pre.toString());\n+        DateTime at = new DateTime(CUTOVER_GUATEMALA_AUTUMN, ZONE_GUATEMALA);\n+        assertEquals(\"2006-09-30T23:00:00.000-06:00\", at.toString());\n+        DateTime post = new DateTime(CUTOVER_GUATEMALA_AUTUMN + 1L, ZONE_GUATEMALA);\n+        assertEquals(\"2006-09-30T23:00:00.001-06:00\", post.toString());\n+    }\n+\n+    public void test_getOffsetFromLocal_Guatemata_Autumn() {\n+        doTest_getOffsetFromLocal( 2006, 9,30,23, 0,\n+                                  \"2006-09-30T23:00:00.000-05:00\", ZONE_GUATEMALA);\n+        doTest_getOffsetFromLocal( 2006, 9,30,23,30,\n+                                  \"2006-09-30T23:30:00.000-05:00\", ZONE_GUATEMALA);\n+        \n+        doTest_getOffsetFromLocal( 2006, 9,30,23, 0,\n+                                  \"2006-09-30T23:00:00.000-05:00\", ZONE_GUATEMALA);\n+        doTest_getOffsetFromLocal( 2006, 9,30,23,30,\n+                                  \"2006-09-30T23:30:00.000-05:00\", ZONE_GUATEMALA);\n+        \n+        doTest_getOffsetFromLocal( 2006,10, 1, 0, 0,\n+                                  \"2006-10-01T00:00:00.000-06:00\", ZONE_GUATEMALA);\n+        doTest_getOffsetFromLocal( 2006,10, 1, 0,30,\n+                                  \"2006-10-01T00:30:00.000-06:00\", ZONE_GUATEMALA);\n+        doTest_getOffsetFromLocal( 2006,10, 1, 1, 0,\n+                                  \"2006-10-01T01:00:00.000-06:00\", ZONE_GUATEMALA);\n+        doTest_getOffsetFromLocal( 2006,10, 1, 1,30,\n+                                  \"2006-10-01T01:30:00.000-06:00\", ZONE_GUATEMALA);\n+        doTest_getOffsetFromLocal( 2006,10, 1, 2, 0,\n+                                  \"2006-10-01T02:00:00.000-06:00\", ZONE_GUATEMALA);\n+        doTest_getOffsetFromLocal( 2006,10, 1, 2,30,\n+                                  \"2006-10-01T02:30:00.000-06:00\", ZONE_GUATEMALA);\n+        doTest_getOffsetFromLocal( 2006,10, 1, 3, 0,\n+                                  \"2006-10-01T03:00:00.000-06:00\", ZONE_GUATEMALA);\n+        doTest_getOffsetFromLocal( 2006,10, 1, 3,30,\n+                                  \"2006-10-01T03:30:00.000-06:00\", ZONE_GUATEMALA);\n+        doTest_getOffsetFromLocal( 2006,10, 1, 4, 0,\n+                                  \"2006-10-01T04:00:00.000-06:00\", ZONE_GUATEMALA);\n+        doTest_getOffsetFromLocal( 2006,10, 1, 4,30,\n+                                  \"2006-10-01T04:30:00.000-06:00\", ZONE_GUATEMALA);\n+        doTest_getOffsetFromLocal( 2006,10, 1, 5, 0,\n+                                  \"2006-10-01T05:00:00.000-06:00\", ZONE_GUATEMALA);\n+        doTest_getOffsetFromLocal( 2006,10, 1, 5,30,\n+                                  \"2006-10-01T05:30:00.000-06:00\", ZONE_GUATEMALA);\n+        doTest_getOffsetFromLocal( 2006,10, 1, 6, 0,\n+                                  \"2006-10-01T06:00:00.000-06:00\", ZONE_GUATEMALA);\n+        doTest_getOffsetFromLocal( 2006,10, 1, 6,30,\n+                                  \"2006-10-01T06:30:00.000-06:00\", ZONE_GUATEMALA);\n+    }\n+\n+    public void test_DateTime_plusHour_Guatemata_Autumn() {\n+        DateTime dt = new DateTime(2006, 9, 30, 20, 0, 0, 0, ZONE_GUATEMALA);\n+        assertEquals(\"2006-09-30T20:00:00.000-05:00\", dt.toString());\n+        \n+        DateTime plus1 = dt.plusHours(1);\n+        assertEquals(\"2006-09-30T21:00:00.000-05:00\", plus1.toString());\n+        DateTime plus2 = dt.plusHours(2);\n+        assertEquals(\"2006-09-30T22:00:00.000-05:00\", plus2.toString());\n+        DateTime plus3 = dt.plusHours(3);\n+        assertEquals(\"2006-09-30T23:00:00.000-05:00\", plus3.toString());\n+        DateTime plus4 = dt.plusHours(4);\n+        assertEquals(\"2006-09-30T23:00:00.000-06:00\", plus4.toString());\n+        DateTime plus5 = dt.plusHours(5);\n+        assertEquals(\"2006-10-01T00:00:00.000-06:00\", plus5.toString());\n+        DateTime plus6 = dt.plusHours(6);\n+        assertEquals(\"2006-10-01T01:00:00.000-06:00\", plus6.toString());\n+        DateTime plus7 = dt.plusHours(7);\n+        assertEquals(\"2006-10-01T02:00:00.000-06:00\", plus7.toString());\n+    }\n+\n+    public void test_DateTime_minusHour_Guatemata_Autumn() {\n+        DateTime dt = new DateTime(2006, 10, 1, 2, 0, 0, 0, ZONE_GUATEMALA);\n+        assertEquals(\"2006-10-01T02:00:00.000-06:00\", dt.toString());\n+        \n+        DateTime minus1 = dt.minusHours(1);\n+        assertEquals(\"2006-10-01T01:00:00.000-06:00\", minus1.toString());\n+        DateTime minus2 = dt.minusHours(2);\n+        assertEquals(\"2006-10-01T00:00:00.000-06:00\", minus2.toString());\n+        DateTime minus3 = dt.minusHours(3);\n+        assertEquals(\"2006-09-30T23:00:00.000-06:00\", minus3.toString());\n+        DateTime minus4 = dt.minusHours(4);\n+        assertEquals(\"2006-09-30T23:00:00.000-05:00\", minus4.toString());\n+        DateTime minus5 = dt.minusHours(5);\n+        assertEquals(\"2006-09-30T22:00:00.000-05:00\", minus5.toString());\n+        DateTime minus6 = dt.minusHours(6);\n+        assertEquals(\"2006-09-30T21:00:00.000-05:00\", minus6.toString());\n+        DateTime minus7 = dt.minusHours(7);\n+        assertEquals(\"2006-09-30T20:00:00.000-05:00\", minus7.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+\n+    public void test_DateTime_JustAfterLastEverOverlap() {\n+        // based on America/Argentina/Catamarca in file 2009s\n+        DateTimeZone zone = new DateTimeZoneBuilder()\n+            .setStandardOffset(-3 * DateTimeConstants.MILLIS_PER_HOUR)\n+            .addRecurringSavings(\"SUMMER\", 1 * DateTimeConstants.MILLIS_PER_HOUR, 2000, 2008,\n+                                    'w', 4, 10, 0, true, 23 * DateTimeConstants.MILLIS_PER_HOUR)\n+            .addRecurringSavings(\"WINTER\", 0, 2000, 2008,\n+                                    'w', 8, 10, 0, true, 0 * DateTimeConstants.MILLIS_PER_HOUR)\n+            .toDateTimeZone(\"Zone\", false);\n+        \n+        LocalDate date = new LocalDate(2008, 8, 10);\n+        assertEquals(\"2008-08-10\", date.toString());\n+        \n+        DateTime dt = date.toDateTimeAtStartOfDay(zone);\n+        System.out.println(dt);\n+        assertEquals(\"2008-08-10T00:00:00.000-03:00\", dt.toString());\n+    }\n+\n+//    public void test_toDateMidnight_SaoPaolo() {\n+//        // RFE: 1684259\n+//        DateTimeZone zone = DateTimeZone.forID(\"America/Sao_Paulo\");\n+//        LocalDate baseDate = new LocalDate(2006, 11, 5);\n+//        DateMidnight dm = baseDate.toDateMidnight(zone);\n+//        assertEquals(\"2006-11-05T00:00:00.000-03:00\", dm.toString());\n+//        DateTime dt = baseDate.toDateTimeAtMidnight(zone);\n+//        assertEquals(\"2006-11-05T00:00:00.000-03:00\", dt.toString());\n+//    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    private void doTest_getOffsetFromLocal(int month, int day, int hour, int min,\n+                                           String expected, DateTimeZone zone)\n+    {\n+        doTest_getOffsetFromLocal(2007, month, day, hour, min, expected, zone);\n+    }\n+\n+    private void doTest_getOffsetFromLocal(int year, int month, int day, int hour, int min,\n+                                           String expected, DateTimeZone zone)\n+    {\n+        DateTime dt = new DateTime(year, month, day, hour, min, 0, 0, DateTimeZone.UTC);\n+        int offset = zone.getOffsetFromLocal(dt.getMillis());\n+        DateTime res = new DateTime(dt.getMillis() - offset, zone);\n+        assertEquals(res.toString(), expected, res.toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestDateTime_Basics.java\n+/*\n+ *  Copyright 2001-2009 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.base.AbstractInstant;\n+import org.joda.time.chrono.BaseChronology;\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.GJChronology;\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.field.UnsupportedDateTimeField;\n+import org.joda.time.field.UnsupportedDurationField;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n+\n+/**\n+ * This class is a Junit unit test for DateTime.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestDateTime_Basics extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+\n+    // the default time zone is set to LONDON in setUp()\n+    // we have to hard code LONDON here (instead of ISOChronology.getInstance() etc.)\n+    // as TestAll sets up a different time zone for better all-round testing\n+    private static final ISOChronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    private static final ISOChronology ISO_DEFAULT = ISOChronology.getInstance(LONDON);\n+    private static final ISOChronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static final GJChronology GJ_DEFAULT = GJChronology.getInstance(LONDON);\n+    private static final GregorianChronology GREGORIAN_DEFAULT = GregorianChronology.getInstance(LONDON);\n+    private static final GregorianChronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);\n+    private static final BuddhistChronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n+    private static final BuddhistChronology BUDDHIST_DEFAULT = BuddhistChronology.getInstance(LONDON);\n+    private static final CopticChronology COPTIC_DEFAULT = CopticChronology.getInstance(LONDON);\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestDateTime_Basics.class);\n+    }\n+\n+    public TestDateTime_Basics(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGet_DateTimeField() {\n+        DateTime test = new DateTime();\n+        assertEquals(1, test.get(ISO_DEFAULT.era()));\n+        assertEquals(20, test.get(ISO_DEFAULT.centuryOfEra()));\n+        assertEquals(2, test.get(ISO_DEFAULT.yearOfCentury()));\n+        assertEquals(2002, test.get(ISO_DEFAULT.yearOfEra()));\n+        assertEquals(2002, test.get(ISO_DEFAULT.year()));\n+        assertEquals(6, test.get(ISO_DEFAULT.monthOfYear()));\n+        assertEquals(9, test.get(ISO_DEFAULT.dayOfMonth()));\n+        assertEquals(2002, test.get(ISO_DEFAULT.weekyear()));\n+        assertEquals(23, test.get(ISO_DEFAULT.weekOfWeekyear()));\n+        assertEquals(7, test.get(ISO_DEFAULT.dayOfWeek()));\n+        assertEquals(160, test.get(ISO_DEFAULT.dayOfYear()));\n+        assertEquals(0, test.get(ISO_DEFAULT.halfdayOfDay()));\n+        assertEquals(1, test.get(ISO_DEFAULT.hourOfHalfday()));\n+        assertEquals(1, test.get(ISO_DEFAULT.clockhourOfDay()));\n+        assertEquals(1, test.get(ISO_DEFAULT.clockhourOfHalfday()));\n+        assertEquals(1, test.get(ISO_DEFAULT.hourOfDay()));\n+        assertEquals(0, test.get(ISO_DEFAULT.minuteOfHour()));\n+        assertEquals(60, test.get(ISO_DEFAULT.minuteOfDay()));\n+        assertEquals(0, test.get(ISO_DEFAULT.secondOfMinute()));\n+        assertEquals(60 * 60, test.get(ISO_DEFAULT.secondOfDay()));\n+        assertEquals(0, test.get(ISO_DEFAULT.millisOfSecond()));\n+        assertEquals(60 * 60 * 1000, test.get(ISO_DEFAULT.millisOfDay()));\n+        try {\n+            test.get((DateTimeField) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testGet_DateTimeFieldType() {\n+        DateTime test = new DateTime();\n+        assertEquals(1, test.get(DateTimeFieldType.era()));\n+        assertEquals(20, test.get(DateTimeFieldType.centuryOfEra()));\n+        assertEquals(2, test.get(DateTimeFieldType.yearOfCentury()));\n+        assertEquals(2002, test.get(DateTimeFieldType.yearOfEra()));\n+        assertEquals(2002, test.get(DateTimeFieldType.year()));\n+        assertEquals(6, test.get(DateTimeFieldType.monthOfYear()));\n+        assertEquals(9, test.get(DateTimeFieldType.dayOfMonth()));\n+        assertEquals(2002, test.get(DateTimeFieldType.weekyear()));\n+        assertEquals(23, test.get(DateTimeFieldType.weekOfWeekyear()));\n+        assertEquals(7, test.get(DateTimeFieldType.dayOfWeek()));\n+        assertEquals(160, test.get(DateTimeFieldType.dayOfYear()));\n+        assertEquals(0, test.get(DateTimeFieldType.halfdayOfDay()));\n+        assertEquals(1, test.get(DateTimeFieldType.hourOfHalfday()));\n+        assertEquals(1, test.get(DateTimeFieldType.clockhourOfDay()));\n+        assertEquals(1, test.get(DateTimeFieldType.clockhourOfHalfday()));\n+        assertEquals(1, test.get(DateTimeFieldType.hourOfDay()));\n+        assertEquals(0, test.get(DateTimeFieldType.minuteOfHour()));\n+        assertEquals(60, test.get(DateTimeFieldType.minuteOfDay()));\n+        assertEquals(0, test.get(DateTimeFieldType.secondOfMinute()));\n+        assertEquals(60 * 60, test.get(DateTimeFieldType.secondOfDay()));\n+        assertEquals(0, test.get(DateTimeFieldType.millisOfSecond()));\n+        assertEquals(60 * 60 * 1000, test.get(DateTimeFieldType.millisOfDay()));\n+        try {\n+            test.get((DateTimeFieldType) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testIsSupported_DateTimeFieldType() {\n+        DateTime test = new DateTime();\n+        assertEquals(true, test.isSupported(DateTimeFieldType.era()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.centuryOfEra()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.yearOfCentury()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.yearOfEra()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.year()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.weekyear()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.weekOfWeekyear()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfWeek()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.halfdayOfDay()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.hourOfHalfday()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfDay()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfHalfday()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.hourOfDay()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfHour()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfDay()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.secondOfMinute()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.secondOfDay()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.millisOfSecond()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.millisOfDay()));\n+        assertEquals(false, test.isSupported(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetters() {\n+        DateTime test = new DateTime();\n+        \n+        assertEquals(ISO_DEFAULT, test.getChronology());\n+        assertEquals(LONDON, test.getZone());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+        \n+        assertEquals(1, test.getEra());\n+        assertEquals(20, test.getCenturyOfEra());\n+        assertEquals(2, test.getYearOfCentury());\n+        assertEquals(2002, test.getYearOfEra());\n+        assertEquals(2002, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(2002, test.getWeekyear());\n+        assertEquals(23, test.getWeekOfWeekyear());\n+        assertEquals(7, test.getDayOfWeek());\n+        assertEquals(160, test.getDayOfYear());\n+        assertEquals(1, test.getHourOfDay());\n+        assertEquals(0, test.getMinuteOfHour());\n+        assertEquals(60, test.getMinuteOfDay());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(60 * 60, test.getSecondOfDay());\n+        assertEquals(0, test.getMillisOfSecond());\n+        assertEquals(60 * 60 * 1000, test.getMillisOfDay());\n+    }\n+\n+    public void testWithers() {\n+        DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT);\n+        check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40);\n+        check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40);\n+        check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40);\n+        check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40);\n+        check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40);\n+        check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40);\n+        check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40);\n+        check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40);\n+        check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40);\n+        check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40);\n+        check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40);\n+        check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40);\n+        check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40);\n+        check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40);\n+        check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6);\n+        check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234);\n+        \n+        try {\n+            test.withMonthOfYear(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.withMonthOfYear(13);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testEqualsHashCode() {\n+        DateTime test1 = new DateTime(TEST_TIME1);\n+        DateTime test2 = new DateTime(TEST_TIME1);\n+        assertEquals(true, test1.equals(test2));\n+        assertEquals(true, test2.equals(test1));\n+        assertEquals(true, test1.equals(test1));\n+        assertEquals(true, test2.equals(test2));\n+        assertEquals(true, test1.hashCode() == test2.hashCode());\n+        assertEquals(true, test1.hashCode() == test1.hashCode());\n+        assertEquals(true, test2.hashCode() == test2.hashCode());\n+        \n+        DateTime test3 = new DateTime(TEST_TIME2);\n+        assertEquals(false, test1.equals(test3));\n+        assertEquals(false, test2.equals(test3));\n+        assertEquals(false, test3.equals(test1));\n+        assertEquals(false, test3.equals(test2));\n+        assertEquals(false, test1.hashCode() == test3.hashCode());\n+        assertEquals(false, test2.hashCode() == test3.hashCode());\n+        \n+        assertEquals(false, test1.equals(\"Hello\"));\n+        assertEquals(true, test1.equals(new MockInstant()));\n+        assertEquals(false, test1.equals(new DateTime(TEST_TIME1, GREGORIAN_DEFAULT)));\n+        assertEquals(true, new DateTime(TEST_TIME1, new MockEqualsChronology()).equals(new DateTime(TEST_TIME1, new MockEqualsChronology())));\n+        assertEquals(false, new DateTime(TEST_TIME1, new MockEqualsChronology()).equals(new DateTime(TEST_TIME1, ISO_DEFAULT)));\n+    }\n+    \n+    class MockInstant extends AbstractInstant {\n+        public String toString() {\n+            return null;\n+        }\n+        public long getMillis() {\n+            return TEST_TIME1;\n+        }\n+        public Chronology getChronology() {\n+            return ISO_DEFAULT;\n+        }\n+    }\n+\n+    class MockEqualsChronology extends BaseChronology {\n+        public boolean equals(Object obj) {\n+            return obj instanceof MockEqualsChronology;\n+        }\n+        public DateTimeZone getZone() {\n+            return null;\n+        }\n+        public Chronology withUTC() {\n+            return this;\n+        }\n+        public Chronology withZone(DateTimeZone zone) {\n+            return this;\n+        }\n+        public String toString() {\n+            return \"\";\n+        }\n+    }\n+\n+    public void testCompareTo() {\n+        DateTime test1 = new DateTime(TEST_TIME1);\n+        DateTime test1a = new DateTime(TEST_TIME1);\n+        assertEquals(0, test1.compareTo(test1a));\n+        assertEquals(0, test1a.compareTo(test1));\n+        assertEquals(0, test1.compareTo(test1));\n+        assertEquals(0, test1a.compareTo(test1a));\n+        \n+        DateTime test2 = new DateTime(TEST_TIME2);\n+        assertEquals(-1, test1.compareTo(test2));\n+        assertEquals(+1, test2.compareTo(test1));\n+        \n+        DateTime test3 = new DateTime(TEST_TIME2, GREGORIAN_PARIS);\n+        assertEquals(-1, test1.compareTo(test3));\n+        assertEquals(+1, test3.compareTo(test1));\n+        assertEquals(0, test3.compareTo(test2));\n+        \n+        assertEquals(+1, test2.compareTo(new MockInstant()));\n+        assertEquals(0, test1.compareTo(new MockInstant()));\n+        \n+        try {\n+            test1.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+//        try {\n+//            test1.compareTo(new Date());\n+//            fail();\n+//        } catch (ClassCastException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsEqual_long() {\n+        assertEquals(false, new DateTime(TEST_TIME1).isEqual(TEST_TIME2));\n+        assertEquals(true, new DateTime(TEST_TIME1).isEqual(TEST_TIME1));\n+        assertEquals(false, new DateTime(TEST_TIME2).isEqual(TEST_TIME1));\n+    }\n+    \n+    public void testIsEqualNow() {\n+        assertEquals(false, new DateTime(TEST_TIME_NOW - 1).isEqualNow());\n+        assertEquals(true, new DateTime(TEST_TIME_NOW).isEqualNow());\n+        assertEquals(false, new DateTime(TEST_TIME_NOW + 1).isEqualNow());\n+    }\n+    \n+    public void testIsEqual_RI() {\n+        DateTime test1 = new DateTime(TEST_TIME1);\n+        DateTime test1a = new DateTime(TEST_TIME1);\n+        assertEquals(true, test1.isEqual(test1a));\n+        assertEquals(true, test1a.isEqual(test1));\n+        assertEquals(true, test1.isEqual(test1));\n+        assertEquals(true, test1a.isEqual(test1a));\n+        \n+        DateTime test2 = new DateTime(TEST_TIME2);\n+        assertEquals(false, test1.isEqual(test2));\n+        assertEquals(false, test2.isEqual(test1));\n+        \n+        DateTime test3 = new DateTime(TEST_TIME2, GREGORIAN_PARIS);\n+        assertEquals(false, test1.isEqual(test3));\n+        assertEquals(false, test3.isEqual(test1));\n+        assertEquals(true, test3.isEqual(test2));\n+        \n+        assertEquals(false, test2.isEqual(new MockInstant()));\n+        assertEquals(true, test1.isEqual(new MockInstant()));\n+        \n+        assertEquals(false, new DateTime(TEST_TIME_NOW + 1).isEqual(null));\n+        assertEquals(true, new DateTime(TEST_TIME_NOW).isEqual(null));\n+        assertEquals(false, new DateTime(TEST_TIME_NOW - 1).isEqual(null));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsBefore_long() {\n+        assertEquals(true, new DateTime(TEST_TIME1).isBefore(TEST_TIME2));\n+        assertEquals(false, new DateTime(TEST_TIME1).isBefore(TEST_TIME1));\n+        assertEquals(false, new DateTime(TEST_TIME2).isBefore(TEST_TIME1));\n+    }\n+    \n+    public void testIsBeforeNow() {\n+        assertEquals(true, new DateTime(TEST_TIME_NOW - 1).isBeforeNow());\n+        assertEquals(false, new DateTime(TEST_TIME_NOW).isBeforeNow());\n+        assertEquals(false, new DateTime(TEST_TIME_NOW + 1).isBeforeNow());\n+    }\n+    \n+    public void testIsBefore_RI() {\n+        DateTime test1 = new DateTime(TEST_TIME1);\n+        DateTime test1a = new DateTime(TEST_TIME1);\n+        assertEquals(false, test1.isBefore(test1a));\n+        assertEquals(false, test1a.isBefore(test1));\n+        assertEquals(false, test1.isBefore(test1));\n+        assertEquals(false, test1a.isBefore(test1a));\n+        \n+        DateTime test2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.isBefore(test2));\n+        assertEquals(false, test2.isBefore(test1));\n+        \n+        DateTime test3 = new DateTime(TEST_TIME2, GREGORIAN_PARIS);\n+        assertEquals(true, test1.isBefore(test3));\n+        assertEquals(false, test3.isBefore(test1));\n+        assertEquals(false, test3.isBefore(test2));\n+        \n+        assertEquals(false, test2.isBefore(new MockInstant()));\n+        assertEquals(false, test1.isBefore(new MockInstant()));\n+        \n+        assertEquals(false, new DateTime(TEST_TIME_NOW + 1).isBefore(null));\n+        assertEquals(false, new DateTime(TEST_TIME_NOW).isBefore(null));\n+        assertEquals(true, new DateTime(TEST_TIME_NOW - 1).isBefore(null));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsAfter_long() {\n+        assertEquals(false, new DateTime(TEST_TIME1).isAfter(TEST_TIME2));\n+        assertEquals(false, new DateTime(TEST_TIME1).isAfter(TEST_TIME1));\n+        assertEquals(true, new DateTime(TEST_TIME2).isAfter(TEST_TIME1));\n+    }\n+    \n+    public void testIsAfterNow() {\n+        assertEquals(false, new DateTime(TEST_TIME_NOW - 1).isAfterNow());\n+        assertEquals(false, new DateTime(TEST_TIME_NOW).isAfterNow());\n+        assertEquals(true, new DateTime(TEST_TIME_NOW + 1).isAfterNow());\n+    }\n+    \n+    public void testIsAfter_RI() {\n+        DateTime test1 = new DateTime(TEST_TIME1);\n+        DateTime test1a = new DateTime(TEST_TIME1);\n+        assertEquals(false, test1.isAfter(test1a));\n+        assertEquals(false, test1a.isAfter(test1));\n+        assertEquals(false, test1.isAfter(test1));\n+        assertEquals(false, test1a.isAfter(test1a));\n+        \n+        DateTime test2 = new DateTime(TEST_TIME2);\n+        assertEquals(false, test1.isAfter(test2));\n+        assertEquals(true, test2.isAfter(test1));\n+        \n+        DateTime test3 = new DateTime(TEST_TIME2, GREGORIAN_PARIS);\n+        assertEquals(false, test1.isAfter(test3));\n+        assertEquals(true, test3.isAfter(test1));\n+        assertEquals(false, test3.isAfter(test2));\n+        \n+        assertEquals(true, test2.isAfter(new MockInstant()));\n+        assertEquals(false, test1.isAfter(new MockInstant()));\n+        \n+        assertEquals(true, new DateTime(TEST_TIME_NOW + 1).isAfter(null));\n+        assertEquals(false, new DateTime(TEST_TIME_NOW).isAfter(null));\n+        assertEquals(false, new DateTime(TEST_TIME_NOW - 1).isAfter(null));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        DateTime test = new DateTime(TEST_TIME_NOW);\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        DateTime result = (DateTime) ois.readObject();\n+        ois.close();\n+        \n+        assertEquals(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        DateTime test = new DateTime(TEST_TIME_NOW);\n+        assertEquals(\"2002-06-09T01:00:00.000+01:00\", test.toString());\n+        \n+        test = new DateTime(TEST_TIME_NOW, PARIS);\n+        assertEquals(\"2002-06-09T02:00:00.000+02:00\", test.toString());\n+    }\n+\n+    public void testToString_String() {\n+        DateTime test = new DateTime(TEST_TIME_NOW);\n+        assertEquals(\"2002 01\", test.toString(\"yyyy HH\"));\n+        assertEquals(\"2002-06-09T01:00:00.000+01:00\", test.toString((String) null));\n+    }\n+\n+    public void testToString_String_Locale() {\n+        DateTime test = new DateTime(TEST_TIME_NOW);\n+        assertEquals(\"Sun 9/6\", test.toString(\"EEE d/M\", Locale.ENGLISH));\n+        assertEquals(\"dim. 9/6\", test.toString(\"EEE d/M\", Locale.FRENCH));\n+        assertEquals(\"2002-06-09T01:00:00.000+01:00\", test.toString(null, Locale.ENGLISH));\n+        assertEquals(\"Sun 9/6\", test.toString(\"EEE d/M\", null));\n+        assertEquals(\"2002-06-09T01:00:00.000+01:00\", test.toString(null, null));\n+    }\n+\n+    public void testToString_DTFormatter() {\n+        DateMidnight test = new DateMidnight(TEST_TIME_NOW);\n+        assertEquals(\"2002 00\", test.toString(DateTimeFormat.forPattern(\"yyyy HH\")));\n+        assertEquals(\"2002-06-09T00:00:00.000+01:00\", test.toString((DateTimeFormatter) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToInstant() {\n+        DateTime test = new DateTime(TEST_TIME1);\n+        Instant result = test.toInstant();\n+        assertEquals(TEST_TIME1, result.getMillis());\n+    }\n+\n+    public void testToDateTime() {\n+        DateTime test = new DateTime(TEST_TIME1);\n+        DateTime result = test.toDateTime();\n+        assertSame(test, result);\n+    }\n+\n+    public void testToDateTimeISO() {\n+        DateTime test = new DateTime(TEST_TIME1);\n+        DateTime result = test.toDateTimeISO();\n+        assertSame(test, result);\n+        \n+        test = new DateTime(TEST_TIME1, ISO_PARIS);\n+        result = test.toDateTimeISO();\n+        assertSame(DateTime.class, result.getClass());\n+        assertSame(ISOChronology.class, result.getChronology().getClass());\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISO_PARIS, result.getChronology());\n+        assertNotSame(test, result);\n+        \n+        test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT);\n+        result = test.toDateTimeISO();\n+        assertSame(DateTime.class, result.getClass());\n+        assertSame(ISOChronology.class, result.getChronology().getClass());\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISO_DEFAULT, result.getChronology());\n+        assertNotSame(test, result);\n+        \n+        test = new DateTime(TEST_TIME1, new MockNullZoneChronology());\n+        result = test.toDateTimeISO();\n+        assertSame(DateTime.class, result.getClass());\n+        assertSame(ISOChronology.class, result.getChronology().getClass());\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISO_DEFAULT, result.getChronology());\n+        assertNotSame(test, result);\n+    }\n+\n+    public void testToDateTime_DateTimeZone() {\n+        DateTime test = new DateTime(TEST_TIME1);\n+        DateTime result = test.toDateTime(LONDON);\n+        assertSame(test, result);\n+\n+        test = new DateTime(TEST_TIME1);\n+        result = test.toDateTime(PARIS);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(PARIS, result.getZone());\n+\n+        test = new DateTime(TEST_TIME1, PARIS);\n+        result = test.toDateTime((DateTimeZone) null);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(LONDON, result.getZone());\n+\n+        test = new DateTime(TEST_TIME1);\n+        result = test.toDateTime((DateTimeZone) null);\n+        assertSame(test, result);\n+    }\n+\n+    public void testToDateTime_Chronology() {\n+        DateTime test = new DateTime(TEST_TIME1);\n+        DateTime result = test.toDateTime(ISO_DEFAULT);\n+        assertSame(test, result);\n+\n+        test = new DateTime(TEST_TIME1);\n+        result = test.toDateTime(GREGORIAN_PARIS);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(GREGORIAN_PARIS, result.getChronology());\n+\n+        test = new DateTime(TEST_TIME1, GREGORIAN_PARIS);\n+        result = test.toDateTime((Chronology) null);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISO_DEFAULT, result.getChronology());\n+\n+        test = new DateTime(TEST_TIME1);\n+        result = test.toDateTime((Chronology) null);\n+        assertSame(test, result);\n+    }\n+\n+    public void testToMutableDateTime() {\n+        DateTime test = new DateTime(TEST_TIME1, PARIS);\n+        MutableDateTime result = test.toMutableDateTime();\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISO_PARIS, result.getChronology());\n+    }\n+\n+    public void testToMutableDateTimeISO() {\n+        DateTime test = new DateTime(TEST_TIME1, PARIS);\n+        MutableDateTime result = test.toMutableDateTimeISO();\n+        assertSame(MutableDateTime.class, result.getClass());\n+        assertSame(ISOChronology.class, result.getChronology().getClass());\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISO_PARIS, result.getChronology());\n+    }\n+\n+    public void testToMutableDateTime_DateTimeZone() {\n+        DateTime test = new DateTime(TEST_TIME1);\n+        MutableDateTime result = test.toMutableDateTime(LONDON);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISO_DEFAULT, result.getChronology());\n+\n+        test = new DateTime(TEST_TIME1);\n+        result = test.toMutableDateTime(PARIS);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISO_PARIS, result.getChronology());\n+\n+        test = new DateTime(TEST_TIME1, PARIS);\n+        result = test.toMutableDateTime((DateTimeZone) null);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISO_DEFAULT, result.getChronology());\n+\n+        test = new DateTime(TEST_TIME1);\n+        result = test.toMutableDateTime((DateTimeZone) null);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISO_DEFAULT, result.getChronology());\n+    }\n+\n+    public void testToMutableDateTime_Chronology() {\n+        DateTime test = new DateTime(TEST_TIME1);\n+        MutableDateTime result = test.toMutableDateTime(ISO_DEFAULT);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISO_DEFAULT, result.getChronology());\n+\n+        test = new DateTime(TEST_TIME1);\n+        result = test.toMutableDateTime(GREGORIAN_PARIS);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(GREGORIAN_PARIS, result.getChronology());\n+\n+        test = new DateTime(TEST_TIME1, GREGORIAN_PARIS);\n+        result = test.toMutableDateTime((Chronology) null);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISO_DEFAULT, result.getChronology());\n+\n+        test = new DateTime(TEST_TIME1);\n+        result = test.toMutableDateTime((Chronology) null);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISO_DEFAULT, result.getChronology());\n+    }\n+\n+    public void testToDate() {\n+        DateTime test = new DateTime(TEST_TIME1);\n+        Date result = test.toDate();\n+        assertEquals(test.getMillis(), result.getTime());\n+    }\n+\n+    public void testToCalendar_Locale() {\n+        DateTime test = new DateTime(TEST_TIME1);\n+        Calendar result = test.toCalendar(null);\n+        assertEquals(test.getMillis(), result.getTime().getTime());\n+        assertEquals(TimeZone.getTimeZone(\"Europe/London\"), result.getTimeZone());\n+\n+        test = new DateTime(TEST_TIME1, PARIS);\n+        result = test.toCalendar(null);\n+        assertEquals(test.getMillis(), result.getTime().getTime());\n+        assertEquals(TimeZone.getTimeZone(\"Europe/Paris\"), result.getTimeZone());\n+\n+        test = new DateTime(TEST_TIME1, PARIS);\n+        result = test.toCalendar(Locale.UK);\n+        assertEquals(test.getMillis(), result.getTime().getTime());\n+        assertEquals(TimeZone.getTimeZone(\"Europe/Paris\"), result.getTimeZone());\n+    }\n+\n+    public void testToGregorianCalendar() {\n+        DateTime test = new DateTime(TEST_TIME1);\n+        GregorianCalendar result = test.toGregorianCalendar();\n+        assertEquals(test.getMillis(), result.getTime().getTime());\n+        assertEquals(TimeZone.getTimeZone(\"Europe/London\"), result.getTimeZone());\n+\n+        test = new DateTime(TEST_TIME1, PARIS);\n+        result = test.toGregorianCalendar();\n+        assertEquals(test.getMillis(), result.getTime().getTime());\n+        assertEquals(TimeZone.getTimeZone(\"Europe/Paris\"), result.getTimeZone());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateMidnight() {\n+        DateTime base = new DateTime(TEST_TIME1, COPTIC_DEFAULT);\n+        DateMidnight test = base.toDateMidnight();\n+        assertEquals(new DateMidnight(base, COPTIC_DEFAULT), test);\n+    }\n+\n+    public void testToYearMonthDay() {\n+        DateTime base = new DateTime(TEST_TIME1, COPTIC_DEFAULT);\n+        YearMonthDay test = base.toYearMonthDay();\n+        assertEquals(new YearMonthDay(TEST_TIME1, COPTIC_DEFAULT), test);\n+    }\n+\n+    public void testToTimeOfDay() {\n+        DateTime base = new DateTime(TEST_TIME1, COPTIC_DEFAULT);\n+        TimeOfDay test = base.toTimeOfDay();\n+        assertEquals(new TimeOfDay(TEST_TIME1, COPTIC_DEFAULT), test);\n+    }\n+\n+    public void testToLocalDateTime() {\n+        DateTime base = new DateTime(TEST_TIME1, COPTIC_DEFAULT);\n+        LocalDateTime test = base.toLocalDateTime();\n+        assertEquals(new LocalDateTime(TEST_TIME1, COPTIC_DEFAULT), test);\n+    }\n+\n+    public void testToLocalDate() {\n+        DateTime base = new DateTime(TEST_TIME1, COPTIC_DEFAULT);\n+        LocalDate test = base.toLocalDate();\n+        assertEquals(new LocalDate(TEST_TIME1, COPTIC_DEFAULT), test);\n+    }\n+\n+    public void testToLocalTime() {\n+        DateTime base = new DateTime(TEST_TIME1, COPTIC_DEFAULT);\n+        LocalTime test = base.toLocalTime();\n+        assertEquals(new LocalTime(TEST_TIME1, COPTIC_DEFAULT), test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithMillis_long() {\n+        DateTime test = new DateTime(TEST_TIME1);\n+        DateTime result = test.withMillis(TEST_TIME2);\n+        assertEquals(TEST_TIME2, result.getMillis());\n+        assertEquals(test.getChronology(), result.getChronology());\n+        \n+        test = new DateTime(TEST_TIME1, GREGORIAN_PARIS);\n+        result = test.withMillis(TEST_TIME2);\n+        assertEquals(TEST_TIME2, result.getMillis());\n+        assertEquals(test.getChronology(), result.getChronology());\n+        \n+        test = new DateTime(TEST_TIME1);\n+        result = test.withMillis(TEST_TIME1);\n+        assertSame(test, result);\n+    }\n+\n+    public void testWithChronology_Chronology() {\n+        DateTime test = new DateTime(TEST_TIME1);\n+        DateTime result = test.withChronology(GREGORIAN_PARIS);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(GREGORIAN_PARIS, result.getChronology());\n+        \n+        test = new DateTime(TEST_TIME1, GREGORIAN_PARIS);\n+        result = test.withChronology(null);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISO_DEFAULT, result.getChronology());\n+        \n+        test = new DateTime(TEST_TIME1);\n+        result = test.withChronology(null);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISO_DEFAULT, result.getChronology());\n+        \n+        test = new DateTime(TEST_TIME1);\n+        result = test.withChronology(ISO_DEFAULT);\n+        assertSame(test, result);\n+    }\n+\n+    public void testWithZone_DateTimeZone() {\n+        DateTime test = new DateTime(TEST_TIME1);\n+        DateTime result = test.withZone(PARIS);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISO_PARIS, result.getChronology());\n+        \n+        test = new DateTime(TEST_TIME1, GREGORIAN_PARIS);\n+        result = test.withZone(null);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(GREGORIAN_DEFAULT, result.getChronology());\n+        \n+        test = new DateTime(TEST_TIME1);\n+        result = test.withZone(null);\n+        assertSame(test, result);\n+    }\n+\n+    public void testWithZoneRetainFields_DateTimeZone() {\n+        DateTime test = new DateTime(TEST_TIME1);\n+        DateTime result = test.withZoneRetainFields(PARIS);\n+        assertEquals(test.getMillis() - DateTimeConstants.MILLIS_PER_HOUR, result.getMillis());\n+        assertEquals(ISO_PARIS, result.getChronology());\n+        \n+        test = new DateTime(TEST_TIME1);\n+        result = test.withZoneRetainFields(LONDON);\n+        assertSame(test, result);\n+        \n+        test = new DateTime(TEST_TIME1);\n+        result = test.withZoneRetainFields(null);\n+        assertSame(test, result);\n+        \n+        test = new DateTime(TEST_TIME1, GREGORIAN_PARIS);\n+        result = test.withZoneRetainFields(null);\n+        assertEquals(test.getMillis() + DateTimeConstants.MILLIS_PER_HOUR, result.getMillis());\n+        assertEquals(GREGORIAN_DEFAULT, result.getChronology());\n+        \n+        test = new DateTime(TEST_TIME1, new MockNullZoneChronology());\n+        result = test.withZoneRetainFields(LONDON);\n+        assertSame(test, result);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testWithDate_int_int_int() {\n+        DateTime test = new DateTime(2002, 4, 5, 1, 2, 3, 4, ISO_UTC);\n+        DateTime result = test.withDate(2003, 5, 6);\n+        DateTime expected = new DateTime(2003, 5, 6, 1, 2, 3, 4, ISO_UTC);\n+        assertEquals(expected, result);\n+        \n+        test = new DateTime(TEST_TIME1);\n+        try {\n+            test.withDate(2003, 13, 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    public void testWithTime_int_int_int() {\n+        DateTime test = new DateTime(TEST_TIME1 - 12345L, BUDDHIST_UTC);\n+        DateTime result = test.withTime(12, 24, 0, 0);\n+        assertEquals(TEST_TIME1, result.getMillis());\n+        assertEquals(BUDDHIST_UTC, result.getChronology());\n+        \n+        test = new DateTime(TEST_TIME1);\n+        try {\n+            test.withTime(25, 1, 1, 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    public void testWithFields_RPartial() {\n+        DateTime test = new DateTime(2004, 5, 6, 7, 8, 9, 0);\n+        DateTime result = test.withFields(new YearMonthDay(2003, 4, 5));\n+        DateTime expected = new DateTime(2003, 4, 5, 7, 8, 9, 0);\n+        assertEquals(expected, result);\n+        \n+        test = new DateTime(TEST_TIME1);\n+        result = test.withFields(null);\n+        assertSame(test, result);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testWithField1() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime result = test.withField(DateTimeFieldType.year(), 2006);\n+        \n+        assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0), test);\n+        assertEquals(new DateTime(2006, 6, 9, 0, 0, 0, 0), result);\n+    }\n+\n+    public void testWithField2() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        try {\n+            test.withField(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithFieldAdded1() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime result = test.withFieldAdded(DurationFieldType.years(), 6);\n+        \n+        assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0), test);\n+        assertEquals(new DateTime(2010, 6, 9, 0, 0, 0, 0), result);\n+    }\n+\n+    public void testWithFieldAdded2() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        try {\n+            test.withFieldAdded(null, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded3() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        try {\n+            test.withFieldAdded(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded4() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime result = test.withFieldAdded(DurationFieldType.years(), 0);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithDurationAdded_long_int() {\n+        DateTime test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT);\n+        DateTime result = test.withDurationAdded(123456789L, 1);\n+        DateTime expected = new DateTime(TEST_TIME1 + 123456789L, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.withDurationAdded(123456789L, 0);\n+        assertSame(test, result);\n+        \n+        result = test.withDurationAdded(123456789L, 2);\n+        expected = new DateTime(TEST_TIME1 + (2L * 123456789L), BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.withDurationAdded(123456789L, -3);\n+        expected = new DateTime(TEST_TIME1 - (3L * 123456789L), BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testWithDurationAdded_RD_int() {\n+        DateTime test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT);\n+        DateTime result = test.withDurationAdded(new Duration(123456789L), 1);\n+        DateTime expected = new DateTime(TEST_TIME1 + 123456789L, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.withDurationAdded(null, 1);\n+        assertSame(test, result);\n+        \n+        result = test.withDurationAdded(new Duration(123456789L), 0);\n+        assertSame(test, result);\n+        \n+        result = test.withDurationAdded(new Duration(123456789L), 2);\n+        expected = new DateTime(TEST_TIME1 + (2L * 123456789L), BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.withDurationAdded(new Duration(123456789L), -3);\n+        expected = new DateTime(TEST_TIME1 - (3L * 123456789L), BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testWithDurationAdded_RP_int() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);\n+        DateTime result = test.withPeriodAdded(new Period(1, 2, 3, 4, 5, 6, 7, 8), 1);\n+        DateTime expected = new DateTime(2003, 7, 28, 6, 8, 10, 12, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.withPeriodAdded(null, 1);\n+        assertSame(test, result);\n+        \n+        result = test.withPeriodAdded(new Period(1, 2, 3, 4, 5, 6, 7, 8), 0);\n+        assertSame(test, result);\n+        \n+        result = test.withPeriodAdded(new Period(1, 2, 0, 4, 5, 6, 7, 8), 3);\n+        expected = new DateTime(2005, 11, 15, 16, 20, 24, 28, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.withPeriodAdded(new Period(1, 2, 0, 1, 1, 2, 3, 4), -1);\n+        expected = new DateTime(2001, 3, 2, 0, 0, 0, 0, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+    }\n+\n+    //-----------------------------------------------------------------------    \n+    public void testPlus_long() {\n+        DateTime test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT);\n+        DateTime result = test.plus(123456789L);\n+        DateTime expected = new DateTime(TEST_TIME1 + 123456789L, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+    }\n+    \n+    public void testPlus_RD() {\n+        DateTime test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT);\n+        DateTime result = test.plus(new Duration(123456789L));\n+        DateTime expected = new DateTime(TEST_TIME1 + 123456789L, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.plus((ReadableDuration) null);\n+        assertSame(test, result);\n+    }\n+    \n+    public void testPlus_RP() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);\n+        DateTime result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8));\n+        DateTime expected = new DateTime(2003, 7, 28, 6, 8, 10, 12, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.plus((ReadablePeriod) null);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusYears_int() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);\n+        DateTime result = test.plusYears(1);\n+        DateTime expected = new DateTime(2003, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusYears(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusMonths_int() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);\n+        DateTime result = test.plusMonths(1);\n+        DateTime expected = new DateTime(2002, 6, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusMonths(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusWeeks_int() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);\n+        DateTime result = test.plusWeeks(1);\n+        DateTime expected = new DateTime(2002, 5, 10, 1, 2, 3, 4, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusWeeks(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusDays_int() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);\n+        DateTime result = test.plusDays(1);\n+        DateTime expected = new DateTime(2002, 5, 4, 1, 2, 3, 4, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusDays(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusHours_int() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);\n+        DateTime result = test.plusHours(1);\n+        DateTime expected = new DateTime(2002, 5, 3, 2, 2, 3, 4, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusHours(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusMinutes_int() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);\n+        DateTime result = test.plusMinutes(1);\n+        DateTime expected = new DateTime(2002, 5, 3, 1, 3, 3, 4, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusMinutes(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusSeconds_int() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);\n+        DateTime result = test.plusSeconds(1);\n+        DateTime expected = new DateTime(2002, 5, 3, 1, 2, 4, 4, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusSeconds(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusMillis_int() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);\n+        DateTime result = test.plusMillis(1);\n+        DateTime expected = new DateTime(2002, 5, 3, 1, 2, 3, 5, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusMillis(0);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------    \n+    public void testMinus_long() {\n+        DateTime test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT);\n+        DateTime result = test.minus(123456789L);\n+        DateTime expected = new DateTime(TEST_TIME1 - 123456789L, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+    }\n+    \n+    public void testMinus_RD() {\n+        DateTime test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT);\n+        DateTime result = test.minus(new Duration(123456789L));\n+        DateTime expected = new DateTime(TEST_TIME1 - 123456789L, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.minus((ReadableDuration) null);\n+        assertSame(test, result);\n+    }\n+    \n+    public void testMinus_RP() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);\n+        DateTime result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));\n+        DateTime expected = new DateTime(2001, 3, 26, 0, 1, 2, 3, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.minus((ReadablePeriod) null);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusYears_int() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);\n+        DateTime result = test.minusYears(1);\n+        DateTime expected = new DateTime(2001, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusYears(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusMonths_int() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);\n+        DateTime result = test.minusMonths(1);\n+        DateTime expected = new DateTime(2002, 4, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusMonths(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusWeeks_int() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);\n+        DateTime result = test.minusWeeks(1);\n+        DateTime expected = new DateTime(2002, 4, 26, 1, 2, 3, 4, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusWeeks(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusDays_int() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);\n+        DateTime result = test.minusDays(1);\n+        DateTime expected = new DateTime(2002, 5, 2, 1, 2, 3, 4, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusDays(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusHours_int() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);\n+        DateTime result = test.minusHours(1);\n+        DateTime expected = new DateTime(2002, 5, 3, 0, 2, 3, 4, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusHours(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusMinutes_int() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);\n+        DateTime result = test.minusMinutes(1);\n+        DateTime expected = new DateTime(2002, 5, 3, 1, 1, 3, 4, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusMinutes(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusSeconds_int() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);\n+        DateTime result = test.minusSeconds(1);\n+        DateTime expected = new DateTime(2002, 5, 3, 1, 2, 2, 4, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusSeconds(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusMillis_int() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);\n+        DateTime result = test.minusMillis(1);\n+        DateTime expected = new DateTime(2002, 5, 3, 1, 2, 3, 3, BUDDHIST_DEFAULT);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusMillis(0);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testProperty() {\n+        DateTime test = new DateTime();\n+        assertEquals(test.year(), test.property(DateTimeFieldType.year()));\n+        assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek()));\n+        assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute()));\n+        assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond()));\n+        DateTimeFieldType bad = new DateTimeFieldType(\"bad\") {\n+            public DurationFieldType getDurationType() {\n+                return DurationFieldType.weeks();\n+            }\n+            public DurationFieldType getRangeDurationType() {\n+                return null;\n+            }\n+            public DateTimeField getField(Chronology chronology) {\n+                return UnsupportedDateTimeField.getInstance(this, UnsupportedDurationField.getInstance(getDurationType()));\n+            }\n+        };\n+        try {\n+            test.property(bad);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.property(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private void check(DateTime test, int year, int month, int day, int hour, int min, int sec, int mil) {\n+        assertEquals(year, test.getYear());\n+        assertEquals(month, test.getMonthOfYear());\n+        assertEquals(day, test.getDayOfMonth());\n+        assertEquals(hour, test.getHourOfDay());\n+        assertEquals(min, test.getMinuteOfHour());\n+        assertEquals(sec, test.getSecondOfMinute());\n+        assertEquals(mil, test.getMillisOfSecond());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestDateTime_Constructors.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Date;\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.convert.ConverterManager;\n+import org.joda.time.convert.MockZeroNullIntegerConverter;\n+\n+/**\n+ * This class is a Junit unit test for DateTime.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestDateTime_Constructors extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private DateTimeZone zone = null;\n+    private Locale locale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestDateTime_Constructors.class);\n+    }\n+\n+    public TestDateTime_Constructors(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        locale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        java.util.TimeZone.setDefault(LONDON.toTimeZone());\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        java.util.TimeZone.setDefault(zone.toTimeZone());\n+        Locale.setDefault(locale);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor ()\n+     */\n+    public void testConstructor() throws Throwable {\n+        DateTime test = new DateTime();\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (DateTimeZone)\n+     */\n+    public void testConstructor_DateTimeZone() throws Throwable {\n+        DateTime test = new DateTime(PARIS);\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (DateTimeZone=null)\n+     */\n+    public void testConstructor_nullDateTimeZone() throws Throwable {\n+        DateTime test = new DateTime((DateTimeZone) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Chronology)\n+     */\n+    public void testConstructor_Chronology() throws Throwable {\n+        DateTime test = new DateTime(GregorianChronology.getInstance());\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Chronology=null)\n+     */\n+    public void testConstructor_nullChronology() throws Throwable {\n+        DateTime test = new DateTime((Chronology) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (long)\n+     */\n+    public void testConstructor_long1() throws Throwable {\n+        DateTime test = new DateTime(TEST_TIME1);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (long)\n+     */\n+    public void testConstructor_long2() throws Throwable {\n+        DateTime test = new DateTime(TEST_TIME2);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME2, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (long, DateTimeZone)\n+     */\n+    public void testConstructor_long1_DateTimeZone() throws Throwable {\n+        DateTime test = new DateTime(TEST_TIME1, PARIS);\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (long, DateTimeZone)\n+     */\n+    public void testConstructor_long2_DateTimeZone() throws Throwable {\n+        DateTime test = new DateTime(TEST_TIME2, PARIS);\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+        assertEquals(TEST_TIME2, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (long, DateTimeZone=null)\n+     */\n+    public void testConstructor_long_nullDateTimeZone() throws Throwable {\n+        DateTime test = new DateTime(TEST_TIME1, (DateTimeZone) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (long, Chronology)\n+     */\n+    public void testConstructor_long1_Chronology() throws Throwable {\n+        DateTime test = new DateTime(TEST_TIME1, GregorianChronology.getInstance());\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (long, Chronology)\n+     */\n+    public void testConstructor_long2_Chronology() throws Throwable {\n+        DateTime test = new DateTime(TEST_TIME2, GregorianChronology.getInstance());\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME2, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (long, Chronology=null)\n+     */\n+    public void testConstructor_long_nullChronology() throws Throwable {\n+        DateTime test = new DateTime(TEST_TIME1, (Chronology) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (Object)\n+     */\n+    public void testConstructor_Object() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        DateTime test = new DateTime(date);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object)\n+     */\n+    public void testConstructor_invalidObject() throws Throwable {\n+        try {\n+            new DateTime(new Object());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (Object=null)\n+     */\n+    public void testConstructor_nullObject() throws Throwable {\n+        DateTime test = new DateTime((Object) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object=null)\n+     */\n+    public void testConstructor_badconverterObject() throws Throwable {\n+        try {\n+            ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n+            DateTime test = new DateTime(new Integer(0));\n+            assertEquals(ISOChronology.getInstance(), test.getChronology());\n+            assertEquals(0L, test.getMillis());\n+        } finally {\n+            ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n+        }\n+    }\n+\n+    public void testConstructor_ObjectString1() throws Throwable {\n+        DateTime test = new DateTime(\"1972-12-03\");\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(1972, test.getYear());\n+        assertEquals(12, test.getMonthOfYear());\n+        assertEquals(3, test.getDayOfMonth());\n+        assertEquals(0, test.getHourOfDay());\n+        assertEquals(0, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectString2() throws Throwable {\n+        DateTime test = new DateTime(\"2006-06-03T+14:00\");\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(2006, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(2, test.getDayOfMonth());  // timezone\n+        assertEquals(11, test.getHourOfDay());  // test zone is +1, so shift back (14 - 1) hours from midnight\n+        assertEquals(0, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectString3() throws Throwable {\n+        DateTime test = new DateTime(\"1972-12-03T10:20:30.040\");\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(1972, test.getYear());\n+        assertEquals(12, test.getMonthOfYear());\n+        assertEquals(3, test.getDayOfMonth());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectString4() throws Throwable {\n+        DateTime test = new DateTime(\"2006-06-03T10:20:30.040+14:00\");\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(2006, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(2, test.getDayOfMonth());  // timezone\n+        assertEquals(21, test.getHourOfDay());  // test zone is +1, so shift back (14 - 1) hours from 10am\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectString5() throws Throwable {\n+        DateTime test = new DateTime(\"T10:20:30.040\");\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(1, test.getMonthOfYear());\n+        assertEquals(1, test.getDayOfMonth());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectString6() throws Throwable {\n+        DateTime test = new DateTime(\"T10:20:30.040+14:00\");\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(1969, test.getYear());  // timezone\n+        assertEquals(12, test.getMonthOfYear());  // timezone\n+        assertEquals(31, test.getDayOfMonth());  // timezone\n+        assertEquals(21, test.getHourOfDay());  // test zone is +1, so shift back (14 - 1) hours from 10am\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectString7() throws Throwable {\n+        DateTime test = new DateTime(\"10\");\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(10, test.getYear());\n+        assertEquals(1, test.getMonthOfYear());\n+        assertEquals(1, test.getDayOfMonth());\n+        assertEquals(0, test.getHourOfDay());\n+        assertEquals(0, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectStringEx1() throws Throwable {\n+        try {\n+            new DateTime(\"10:20:30.040\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testConstructor_ObjectStringEx2() throws Throwable {\n+        try {\n+            new DateTime(\"10:20:30.040+14:00\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (Object, DateTimeZone)\n+     */\n+    public void testConstructor_Object_DateTimeZone() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        DateTime test = new DateTime(date, PARIS);\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object, DateTimeZone)\n+     */\n+    public void testConstructor_invalidObject_DateTimeZone() throws Throwable {\n+        try {\n+            new DateTime(new Object(), PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (Object=null, DateTimeZone)\n+     */\n+    public void testConstructor_nullObject_DateTimeZone() throws Throwable {\n+        DateTime test = new DateTime((Object) null, PARIS);\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object, DateTimeZone=null)\n+     */\n+    public void testConstructor_Object_nullDateTimeZone() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        DateTime test = new DateTime(date, (DateTimeZone) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object=null, DateTimeZone=null)\n+     */\n+    public void testConstructor_nullObject_nullDateTimeZone() throws Throwable {\n+        DateTime test = new DateTime((Object) null, (DateTimeZone) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object, DateTimeZone)\n+     */\n+    public void testConstructor_badconverterObject_DateTimeZone() throws Throwable {\n+        try {\n+            ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n+            DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n+            assertEquals(ISOChronology.getInstance(), test.getChronology());\n+            assertEquals(0L, test.getMillis());\n+        } finally {\n+            ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n+        }\n+    }\n+\n+    /**\n+     * Test constructor (Object, Chronology)\n+     */\n+    public void testConstructor_Object_Chronology() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        DateTime test = new DateTime(date, GregorianChronology.getInstance());\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object, Chronology)\n+     */\n+    public void testConstructor_invalidObject_Chronology() throws Throwable {\n+        try {\n+            new DateTime(new Object(), GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (Object=null, Chronology)\n+     */\n+    public void testConstructor_nullObject_Chronology() throws Throwable {\n+        DateTime test = new DateTime((Object) null, GregorianChronology.getInstance());\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object, Chronology=null)\n+     */\n+    public void testConstructor_Object_nullChronology() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        DateTime test = new DateTime(date, (Chronology) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object=null, Chronology=null)\n+     */\n+    public void testConstructor_nullObject_nullChronology() throws Throwable {\n+        DateTime test = new DateTime((Object) null, (Chronology) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object, Chronology)\n+     */\n+    public void testConstructor_badconverterObject_Chronology() throws Throwable {\n+        try {\n+            ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n+            DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n+            assertEquals(ISOChronology.getInstance(), test.getChronology());\n+            assertEquals(0L, test.getMillis());\n+        } finally {\n+            ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (int, int, int, int, int)\n+     */\n+    public void testConstructor_int_int_int_int_int() throws Throwable {\n+        DateTime test = new DateTime(2002, 6, 9, 1, 0);  // +01:00\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(LONDON, test.getZone());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, int, int, DateTimeZone)\n+     */\n+    public void testConstructor_int_int_int_int_int_DateTimeZone() throws Throwable {\n+        DateTime test = new DateTime(2002, 6, 9, 2, 0, PARIS);  // +02:00\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, int, int, DateTimeZone=null)\n+     */\n+    public void testConstructor_int_int_int_int_int_nullDateTimeZone() throws Throwable {\n+        DateTime test = new DateTime(2002, 6, 9, 1, 0, (DateTimeZone) null);  // +01:00\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, int, int, Chronology)\n+     */\n+    public void testConstructor_int_int_int_int_int_Chronology() throws Throwable {\n+        DateTime test = new DateTime(2002, 6, 9, 1, 0, GregorianChronology.getInstance());  // +01:00\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, int, int, Chronology=null)\n+     */\n+    public void testConstructor_int_int_int_int_int_nullChronology() throws Throwable {\n+        DateTime test = new DateTime(2002, 6, 9, 1, 0, (Chronology) null);  // +01:00\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (int, int, int, int, int, int)\n+     */\n+    public void testConstructor_int_int_int_int_int_int() throws Throwable {\n+        DateTime test = new DateTime(2002, 6, 9, 1, 0, 0);  // +01:00\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(LONDON, test.getZone());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, int, int, int, DateTimeZone)\n+     */\n+    public void testConstructor_int_int_int_int_int_int_DateTimeZone() throws Throwable {\n+        DateTime test = new DateTime(2002, 6, 9, 2, 0, 0, PARIS);  // +02:00\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, int, int, int, DateTimeZone=null)\n+     */\n+    public void testConstructor_int_int_int_int_int_int_nullDateTimeZone() throws Throwable {\n+        DateTime test = new DateTime(2002, 6, 9, 1, 0, 0, (DateTimeZone) null);  // +01:00\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, int, int, int, Chronology)\n+     */\n+    public void testConstructor_int_int_int_int_int_int_Chronology() throws Throwable {\n+        DateTime test = new DateTime(2002, 6, 9, 1, 0, 0, GregorianChronology.getInstance());  // +01:00\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, int, int, int, Chronology=null)\n+     */\n+    public void testConstructor_int_int_int_int_int_int_nullChronology() throws Throwable {\n+        DateTime test = new DateTime(2002, 6, 9, 1, 0, 0, (Chronology) null);  // +01:00\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (int, int, int)\n+     */\n+    public void testConstructor_int_int_int_int_int_int_int() throws Throwable {\n+        DateTime test = new DateTime(2002, 6, 9, 1, 0, 0, 0);  // +01:00\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(LONDON, test.getZone());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+        try {\n+            new DateTime(Integer.MIN_VALUE, 6, 9, 0, 0, 0, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateTime(Integer.MAX_VALUE, 6, 9, 0, 0, 0, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateTime(2002, 0, 9, 0, 0, 0, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateTime(2002, 13, 9, 0, 0, 0, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateTime(2002, 6, 0, 0, 0, 0, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateTime(2002, 6, 31, 0, 0, 0, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        new DateTime(2002, 7, 31, 0, 0, 0, 0);\n+        try {\n+            new DateTime(2002, 7, 32, 0, 0, 0, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, DateTimeZone)\n+     */\n+    public void testConstructor_int_int_int_int_int_int_int_DateTimeZone() throws Throwable {\n+        DateTime test = new DateTime(2002, 6, 9, 2, 0, 0, 0, PARIS);  // +02:00\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+        try {\n+            new DateTime(Integer.MIN_VALUE, 6, 9, 0, 0, 0, 0, PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateTime(Integer.MAX_VALUE, 6, 9, 0, 0, 0, 0, PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateTime(2002, 0, 9, 0, 0, 0, 0, PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateTime(2002, 13, 9, 0, 0, 0, 0, PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateTime(2002, 6, 0, 0, 0, 0, 0, PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateTime(2002, 6, 31, 0, 0, 0, 0, PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        new DateTime(2002, 7, 31, 0, 0, 0, 0, PARIS);\n+        try {\n+            new DateTime(2002, 7, 32, 0, 0, 0, 0, PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, DateTimeZone=null)\n+     */\n+    public void testConstructor_int_int_int_int_int_int_int_nullDateTimeZone() throws Throwable {\n+        DateTime test = new DateTime(2002, 6, 9, 1, 0, 0, 0, (DateTimeZone) null);  // +01:00\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, Chronology)\n+     */\n+    public void testConstructor_int_int_int_int_int_int_int_Chronology() throws Throwable {\n+        DateTime test = new DateTime(2002, 6, 9, 1, 0, 0, 0, GregorianChronology.getInstance());  // +01:00\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+        try {\n+            new DateTime(Integer.MIN_VALUE, 6, 9, 0, 0, 0, 0, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateTime(Integer.MAX_VALUE, 6, 9, 0, 0, 0, 0, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateTime(2002, 0, 9, 0, 0, 0, 0, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateTime(2002, 13, 9, 0, 0, 0, 0, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateTime(2002, 6, 0, 0, 0, 0, 0, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateTime(2002, 6, 31, 0, 0, 0, 0, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        new DateTime(2002, 7, 31, 0, 0, 0, 0, GregorianChronology.getInstance());\n+        try {\n+            new DateTime(2002, 7, 32, 0, 0, 0, 0, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, Chronology=null)\n+     */\n+    public void testConstructor_int_int_int_int_int_int_int_nullChronology() throws Throwable {\n+        DateTime test = new DateTime(2002, 6, 9, 1, 0, 0, 0, (Chronology) null);  // +01:00\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestDateTime_Properties.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.LenientChronology;\n+import org.joda.time.chrono.StrictChronology;\n+\n+/**\n+ * This class is a Junit unit test for DateTime.\n+ *\n+ * @author Stephen Colebourne\n+ * @author Mike Schrag\n+ */\n+public class TestDateTime_Properties extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+\n+    //private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05 Fri\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06 Tue\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private DateTimeZone zone = null;\n+    private Locale locale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestDateTime_Properties.class);\n+    }\n+\n+    public TestDateTime_Properties(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        locale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        Locale.setDefault(locale);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetEra() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().era(), test.era().getField());\n+        assertEquals(\"era\", test.era().getName());\n+        assertEquals(\"Property[era]\", test.era().toString());\n+        assertSame(test, test.era().getDateTime());\n+        assertEquals(1, test.era().get());\n+        assertEquals(\"1\", test.era().getAsString());\n+        assertEquals(\"AD\", test.era().getAsText());\n+        assertEquals(\"AD\", test.era().getField().getAsText(1, Locale.ENGLISH));\n+        assertEquals(\"ap. J.-C.\", test.era().getAsText(Locale.FRENCH));\n+        assertEquals(\"ap. J.-C.\", test.era().getField().getAsText(1, Locale.FRENCH));\n+        assertEquals(\"AD\", test.era().getAsShortText());\n+        assertEquals(\"AD\", test.era().getField().getAsShortText(1, Locale.ENGLISH));\n+        assertEquals(\"ap. J.-C.\", test.era().getAsShortText(Locale.FRENCH));\n+        assertEquals(\"ap. J.-C.\", test.era().getField().getAsShortText(1, Locale.FRENCH));\n+        assertEquals(test.getChronology().eras(), test.era().getDurationField());\n+        assertEquals(null, test.era().getRangeDurationField());\n+        assertEquals(2, test.era().getMaximumTextLength(null));\n+        assertEquals(9, test.era().getMaximumTextLength(Locale.FRENCH));\n+        assertEquals(2, test.era().getMaximumShortTextLength(null));\n+        assertEquals(9, test.era().getMaximumShortTextLength(Locale.FRENCH));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetYearOfEra() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().yearOfEra(), test.yearOfEra().getField());\n+        assertEquals(\"yearOfEra\", test.yearOfEra().getName());\n+        assertEquals(\"Property[yearOfEra]\", test.yearOfEra().toString());\n+        assertSame(test, test.yearOfEra().getDateTime());\n+        assertEquals(2004, test.yearOfEra().get());\n+        assertEquals(\"2004\", test.yearOfEra().getAsString());\n+        assertEquals(\"2004\", test.yearOfEra().getAsText());\n+        assertEquals(\"2004\", test.yearOfEra().getAsText(Locale.FRENCH));\n+        assertEquals(\"2004\", test.yearOfEra().getAsShortText());\n+        assertEquals(\"2004\", test.yearOfEra().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().years(), test.yearOfEra().getDurationField());\n+        assertEquals(null, test.yearOfEra().getRangeDurationField());\n+        assertEquals(9, test.yearOfEra().getMaximumTextLength(null));\n+        assertEquals(9, test.yearOfEra().getMaximumShortTextLength(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetCenturyOfEra() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().centuryOfEra(), test.centuryOfEra().getField());\n+        assertEquals(\"centuryOfEra\", test.centuryOfEra().getName());\n+        assertEquals(\"Property[centuryOfEra]\", test.centuryOfEra().toString());\n+        assertSame(test, test.centuryOfEra().getDateTime());\n+        assertEquals(20, test.centuryOfEra().get());\n+        assertEquals(\"20\", test.centuryOfEra().getAsString());\n+        assertEquals(\"20\", test.centuryOfEra().getAsText());\n+        assertEquals(\"20\", test.centuryOfEra().getAsText(Locale.FRENCH));\n+        assertEquals(\"20\", test.centuryOfEra().getAsShortText());\n+        assertEquals(\"20\", test.centuryOfEra().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().centuries(), test.centuryOfEra().getDurationField());\n+        assertEquals(null, test.centuryOfEra().getRangeDurationField());\n+        assertEquals(7, test.centuryOfEra().getMaximumTextLength(null));\n+        assertEquals(7, test.centuryOfEra().getMaximumShortTextLength(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetYearOfCentury() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().yearOfCentury(), test.yearOfCentury().getField());\n+        assertEquals(\"yearOfCentury\", test.yearOfCentury().getName());\n+        assertEquals(\"Property[yearOfCentury]\", test.yearOfCentury().toString());\n+        assertSame(test, test.yearOfCentury().getDateTime());\n+        assertEquals(4, test.yearOfCentury().get());\n+        assertEquals(\"4\", test.yearOfCentury().getAsString());\n+        assertEquals(\"4\", test.yearOfCentury().getAsText());\n+        assertEquals(\"4\", test.yearOfCentury().getAsText(Locale.FRENCH));\n+        assertEquals(\"4\", test.yearOfCentury().getAsShortText());\n+        assertEquals(\"4\", test.yearOfCentury().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().years(), test.yearOfCentury().getDurationField());\n+        assertEquals(test.getChronology().centuries(), test.yearOfCentury().getRangeDurationField());\n+        assertEquals(2, test.yearOfCentury().getMaximumTextLength(null));\n+        assertEquals(2, test.yearOfCentury().getMaximumShortTextLength(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetWeekyear() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().weekyear(), test.weekyear().getField());\n+        assertEquals(\"weekyear\", test.weekyear().getName());\n+        assertEquals(\"Property[weekyear]\", test.weekyear().toString());\n+        assertSame(test, test.weekyear().getDateTime());\n+        assertEquals(2004, test.weekyear().get());\n+        assertEquals(\"2004\", test.weekyear().getAsString());\n+        assertEquals(\"2004\", test.weekyear().getAsText());\n+        assertEquals(\"2004\", test.weekyear().getAsText(Locale.FRENCH));\n+        assertEquals(\"2004\", test.weekyear().getAsShortText());\n+        assertEquals(\"2004\", test.weekyear().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().weekyears(), test.weekyear().getDurationField());\n+        assertEquals(null, test.weekyear().getRangeDurationField());\n+        assertEquals(9, test.weekyear().getMaximumTextLength(null));\n+        assertEquals(9, test.weekyear().getMaximumShortTextLength(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetYear() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().year(), test.year().getField());\n+        assertEquals(\"year\", test.year().getName());\n+        assertEquals(\"Property[year]\", test.year().toString());\n+        assertSame(test, test.year().getDateTime());\n+        assertEquals(2004, test.year().get());\n+        assertEquals(\"2004\", test.year().getAsString());\n+        assertEquals(\"2004\", test.year().getAsText());\n+        assertEquals(\"2004\", test.year().getAsText(Locale.FRENCH));\n+        assertEquals(\"2004\", test.year().getAsShortText());\n+        assertEquals(\"2004\", test.year().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().years(), test.year().getDurationField());\n+        assertEquals(null, test.year().getRangeDurationField());\n+        assertEquals(9, test.year().getMaximumTextLength(null));\n+        assertEquals(9, test.year().getMaximumShortTextLength(null));\n+        assertEquals(-292275054, test.year().getMinimumValue());\n+        assertEquals(-292275054, test.year().getMinimumValueOverall());\n+        assertEquals(292278993, test.year().getMaximumValue());\n+        assertEquals(292278993, test.year().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyLeapYear() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertEquals(true, test.year().isLeap());\n+        assertEquals(1, test.year().getLeapAmount());\n+        assertEquals(test.getChronology().days(), test.year().getLeapDurationField());\n+        test = new DateTime(2003, 6, 9, 0, 0, 0, 0);\n+        assertEquals(false, test.year().isLeap());\n+        assertEquals(0, test.year().getLeapAmount());\n+        assertEquals(test.getChronology().days(), test.year().getLeapDurationField());\n+    }\n+\n+    public void testPropertyAddYear() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.year().addToCopy(9);\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2013-06-09T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.year().addToCopy(0);\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.year().addToCopy(292277023 - 2004);\n+        assertEquals(292277023, copy.getYear());\n+        \n+        try {\n+            test.year().addToCopy(292278993 - 2004 + 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        copy = test.year().addToCopy(-2004);\n+        assertEquals(0, copy.getYear());\n+        \n+        copy = test.year().addToCopy(-2005);\n+        assertEquals(-1, copy.getYear());\n+        \n+        try {\n+            test.year().addToCopy(-292275054 - 2004 - 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertyAddWrapFieldYear() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.year().addWrapFieldToCopy(9);\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2013-06-09T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.year().addWrapFieldToCopy(0);\n+        assertEquals(2004, copy.getYear());\n+        \n+        copy = test.year().addWrapFieldToCopy(292278993 - 2004 + 1);\n+        assertEquals(-292275054, copy.getYear());\n+        \n+        copy = test.year().addWrapFieldToCopy(-292275054 - 2004 - 1);\n+        assertEquals(292278993, copy.getYear());\n+    }\n+\n+    public void testPropertySetYear() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.year().setCopy(1960);\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"1960-06-09T00:00:00.000+01:00\", copy.toString());\n+    }\n+\n+    public void testPropertySetTextYear() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.year().setCopy(\"1960\");\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"1960-06-09T00:00:00.000+01:00\", copy.toString());\n+    }\n+\n+    public void testPropertyCompareToYear() {\n+        DateTime test1 = new DateTime(TEST_TIME1);\n+        DateTime test2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.year().compareTo(test2) < 0);\n+        assertEquals(true, test2.year().compareTo(test1) > 0);\n+        assertEquals(true, test1.year().compareTo(test1) == 0);\n+        try {\n+            test1.year().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertyCompareToYear2() {\n+        DateTime test1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        YearMonthDay ymd1 = new YearMonthDay(2003, 6, 9);\n+        YearMonthDay ymd2 = new YearMonthDay(2004, 6, 9);\n+        YearMonthDay ymd3 = new YearMonthDay(2005, 6, 9);\n+        assertEquals(true, test1.year().compareTo(ymd1) > 0);\n+        assertEquals(true, test1.year().compareTo(ymd2) == 0);\n+        assertEquals(true, test1.year().compareTo(ymd3) < 0);\n+        try {\n+            test1.year().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertyEqualsHashCodeYear() {\n+        DateTime test1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertEquals(true, test1.year().equals(test1.year()));\n+        assertEquals(true, test1.year().equals(new DateTime(2004, 6, 9, 0, 0, 0, 0).year()));\n+        assertEquals(false, test1.year().equals(new DateTime(2004, 6, 9, 0, 0, 0, 0).monthOfYear()));\n+        assertEquals(false, test1.year().equals(new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()).year()));\n+        \n+        assertEquals(true, test1.year().hashCode() == test1.year().hashCode());\n+        assertEquals(true, test1.year().hashCode() == new DateTime(2004, 6, 9, 0, 0, 0, 0).year().hashCode());\n+        assertEquals(false, test1.year().hashCode() == new DateTime(2004, 6, 9, 0, 0, 0, 0).monthOfYear().hashCode());\n+        assertEquals(false, test1.year().hashCode() == new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()).year().hashCode());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMonthOfYear() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField());\n+        assertEquals(\"monthOfYear\", test.monthOfYear().getName());\n+        assertEquals(\"Property[monthOfYear]\", test.monthOfYear().toString());\n+        assertSame(test, test.monthOfYear().getDateTime());\n+        assertEquals(6, test.monthOfYear().get());\n+        assertEquals(\"6\", test.monthOfYear().getAsString());\n+        assertEquals(\"June\", test.monthOfYear().getAsText());\n+        assertEquals(\"June\", test.monthOfYear().getField().getAsText(6, Locale.ENGLISH));\n+        assertEquals(\"juin\", test.monthOfYear().getAsText(Locale.FRENCH));\n+        assertEquals(\"juin\", test.monthOfYear().getField().getAsText(6, Locale.FRENCH));\n+        assertEquals(\"Jun\", test.monthOfYear().getAsShortText());\n+        assertEquals(\"Jun\", test.monthOfYear().getField().getAsShortText(6, Locale.ENGLISH));\n+        assertEquals(\"juin\", test.monthOfYear().getAsShortText(Locale.FRENCH));\n+        assertEquals(\"juin\", test.monthOfYear().getField().getAsShortText(6, Locale.FRENCH));\n+        assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField());\n+        assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField());\n+        assertEquals(9, test.monthOfYear().getMaximumTextLength(null));\n+        assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null));\n+        test = new DateTime(2004, 7, 9, 0, 0, 0, 0);\n+        assertEquals(\"juillet\", test.monthOfYear().getAsText(Locale.FRENCH));\n+        assertEquals(\"juillet\", test.monthOfYear().getField().getAsText(7, Locale.FRENCH));\n+        assertEquals(\"juil.\", test.monthOfYear().getAsShortText(Locale.FRENCH));\n+        assertEquals(\"juil.\", test.monthOfYear().getField().getAsShortText(7, Locale.FRENCH));\n+        assertEquals(1, test.monthOfYear().getMinimumValue());\n+        assertEquals(1, test.monthOfYear().getMinimumValueOverall());\n+        assertEquals(12, test.monthOfYear().getMaximumValue());\n+        assertEquals(12, test.monthOfYear().getMaximumValueOverall());\n+        assertEquals(1, test.monthOfYear().getMinimumValue());\n+        assertEquals(1, test.monthOfYear().getMinimumValueOverall());\n+        assertEquals(12, test.monthOfYear().getMaximumValue());\n+        assertEquals(12, test.monthOfYear().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyLeapMonthOfYear() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertEquals(false, test.monthOfYear().isLeap());\n+        assertEquals(0, test.monthOfYear().getLeapAmount());\n+        assertEquals(test.getChronology().days(), test.monthOfYear().getLeapDurationField());\n+        \n+        test = new DateTime(2004, 2, 9, 0, 0, 0, 0);\n+        assertEquals(true, test.monthOfYear().isLeap());\n+        assertEquals(1, test.monthOfYear().getLeapAmount());\n+        assertEquals(test.getChronology().days(), test.monthOfYear().getLeapDurationField());\n+        \n+        test = new DateTime(2003, 6, 9, 0, 0, 0, 0);\n+        assertEquals(false, test.monthOfYear().isLeap());\n+        assertEquals(0, test.monthOfYear().getLeapAmount());\n+        assertEquals(test.getChronology().days(), test.monthOfYear().getLeapDurationField());\n+        \n+        test = new DateTime(2003, 2, 9, 0, 0, 0, 0);\n+        assertEquals(false, test.monthOfYear().isLeap());\n+        assertEquals(0, test.monthOfYear().getLeapAmount());\n+        assertEquals(test.getChronology().days(), test.monthOfYear().getLeapDurationField());\n+    }\n+\n+    public void testPropertyAddMonthOfYear() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.monthOfYear().addToCopy(6);\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-12-09T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.monthOfYear().addToCopy(7);\n+        assertEquals(\"2005-01-09T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.monthOfYear().addToCopy(-5);\n+        assertEquals(\"2004-01-09T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.monthOfYear().addToCopy(-6);\n+        assertEquals(\"2003-12-09T00:00:00.000Z\", copy.toString());\n+        \n+        test = new DateTime(2004, 1, 31, 0, 0, 0, 0);\n+        copy = test.monthOfYear().addToCopy(1);\n+        assertEquals(\"2004-01-31T00:00:00.000Z\", test.toString());\n+        assertEquals(\"2004-02-29T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.monthOfYear().addToCopy(2);\n+        assertEquals(\"2004-03-31T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.monthOfYear().addToCopy(3);\n+        assertEquals(\"2004-04-30T00:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateTime(2003, 1, 31, 0, 0, 0, 0);\n+        copy = test.monthOfYear().addToCopy(1);\n+        assertEquals(\"2003-02-28T00:00:00.000Z\", copy.toString());\n+    }\n+\n+    public void testPropertyAddWrapFieldMonthOfYear() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.monthOfYear().addWrapFieldToCopy(4);\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-10-09T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.monthOfYear().addWrapFieldToCopy(8);\n+        assertEquals(\"2004-02-09T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.monthOfYear().addWrapFieldToCopy(-8);\n+        assertEquals(\"2004-10-09T00:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateTime(2004, 1, 31, 0, 0, 0, 0);\n+        copy = test.monthOfYear().addWrapFieldToCopy(1);\n+        assertEquals(\"2004-01-31T00:00:00.000Z\", test.toString());\n+        assertEquals(\"2004-02-29T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.monthOfYear().addWrapFieldToCopy(2);\n+        assertEquals(\"2004-03-31T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.monthOfYear().addWrapFieldToCopy(3);\n+        assertEquals(\"2004-04-30T00:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateTime(2005, 1, 31, 0, 0, 0, 0);\n+        copy = test.monthOfYear().addWrapFieldToCopy(1);\n+        assertEquals(\"2005-01-31T00:00:00.000Z\", test.toString());\n+        assertEquals(\"2005-02-28T00:00:00.000Z\", copy.toString());\n+    }\n+\n+    public void testPropertySetMonthOfYear() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.monthOfYear().setCopy(12);\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-12-09T00:00:00.000Z\", copy.toString());\n+        \n+        test = new DateTime(2004, 1, 31, 0, 0, 0, 0);\n+        copy = test.monthOfYear().setCopy(2);\n+        assertEquals(\"2004-02-29T00:00:00.000Z\", copy.toString());\n+        \n+        try {\n+            test.monthOfYear().setCopy(13);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.monthOfYear().setCopy(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextMonthOfYear() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.monthOfYear().setCopy(\"12\");\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-12-09T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.monthOfYear().setCopy(\"December\");\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-12-09T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.monthOfYear().setCopy(\"Dec\");\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-12-09T00:00:00.000Z\", copy.toString());\n+    }\n+\n+    public void testPropertyCompareToMonthOfYear() {\n+        DateTime test1 = new DateTime(TEST_TIME1);\n+        DateTime test2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.monthOfYear().compareTo(test2) < 0);\n+        assertEquals(true, test2.monthOfYear().compareTo(test1) > 0);\n+        assertEquals(true, test1.monthOfYear().compareTo(test1) == 0);\n+        try {\n+            test1.monthOfYear().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0);\n+        assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0);\n+        assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0);\n+        try {\n+            test1.monthOfYear().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetDayOfMonth() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField());\n+        assertEquals(\"dayOfMonth\", test.dayOfMonth().getName());\n+        assertEquals(\"Property[dayOfMonth]\", test.dayOfMonth().toString());\n+        assertSame(test, test.dayOfMonth().getDateTime());\n+        assertEquals(9, test.dayOfMonth().get());\n+        assertEquals(\"9\", test.dayOfMonth().getAsString());\n+        assertEquals(\"9\", test.dayOfMonth().getAsText());\n+        assertEquals(\"9\", test.dayOfMonth().getAsText(Locale.FRENCH));\n+        assertEquals(\"9\", test.dayOfMonth().getAsShortText());\n+        assertEquals(\"9\", test.dayOfMonth().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField());\n+        assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField());\n+        assertEquals(2, test.dayOfMonth().getMaximumTextLength(null));\n+        assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null));\n+        assertEquals(1, test.dayOfMonth().getMinimumValue());\n+        assertEquals(1, test.dayOfMonth().getMinimumValueOverall());\n+        assertEquals(30, test.dayOfMonth().getMaximumValue());\n+        assertEquals(31, test.dayOfMonth().getMaximumValueOverall());\n+        assertEquals(false, test.dayOfMonth().isLeap());\n+        assertEquals(0, test.dayOfMonth().getLeapAmount());\n+        assertEquals(null, test.dayOfMonth().getLeapDurationField());\n+    }\n+\n+    public void testPropertyGetMaxMinValuesDayOfMonth() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertEquals(1, test.dayOfMonth().getMinimumValue());\n+        assertEquals(1, test.dayOfMonth().getMinimumValueOverall());\n+        assertEquals(30, test.dayOfMonth().getMaximumValue());\n+        assertEquals(31, test.dayOfMonth().getMaximumValueOverall());\n+        test = new DateTime(2004, 7, 9, 0, 0, 0, 0);\n+        assertEquals(31, test.dayOfMonth().getMaximumValue());\n+        test = new DateTime(2004, 2, 9, 0, 0, 0, 0);\n+        assertEquals(29, test.dayOfMonth().getMaximumValue());\n+        test = new DateTime(2003, 2, 9, 0, 0, 0, 0);\n+        assertEquals(28, test.dayOfMonth().getMaximumValue());\n+    }\n+\n+    public void testPropertyAddDayOfMonth() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.dayOfMonth().addToCopy(9);\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-06-18T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfMonth().addToCopy(21);\n+        assertEquals(\"2004-06-30T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfMonth().addToCopy(22);\n+        assertEquals(\"2004-07-01T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfMonth().addToCopy(22 + 30);\n+        assertEquals(\"2004-07-31T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfMonth().addToCopy(22 + 31);\n+        assertEquals(\"2004-08-01T00:00:00.000+01:00\", copy.toString());\n+\n+        copy = test.dayOfMonth().addToCopy(21 + 31 + 31 + 30 + 31 + 30 + 31);\n+        assertEquals(\"2004-12-31T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.dayOfMonth().addToCopy(22 + 31 + 31 + 30 + 31 + 30 + 31);\n+        assertEquals(\"2005-01-01T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.dayOfMonth().addToCopy(-8);\n+        assertEquals(\"2004-06-01T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfMonth().addToCopy(-9);\n+        assertEquals(\"2004-05-31T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfMonth().addToCopy(-8 - 31 - 30 - 31 - 29 - 31);\n+        assertEquals(\"2004-01-01T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.dayOfMonth().addToCopy(-9 - 31 - 30 - 31 - 29 - 31);\n+        assertEquals(\"2003-12-31T00:00:00.000Z\", copy.toString());\n+    }\n+\n+    public void testPropertyAddWrapFieldDayOfMonth() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.dayOfMonth().addWrapFieldToCopy(21);\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-06-30T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfMonth().addWrapFieldToCopy(22);\n+        assertEquals(\"2004-06-01T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfMonth().addWrapFieldToCopy(-12);\n+        assertEquals(\"2004-06-27T00:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateTime(2004, 7, 9, 0, 0, 0, 0);\n+        copy = test.dayOfMonth().addWrapFieldToCopy(21);\n+        assertEquals(\"2004-07-30T00:00:00.000+01:00\", copy.toString());\n+    \n+        copy = test.dayOfMonth().addWrapFieldToCopy(22);\n+        assertEquals(\"2004-07-31T00:00:00.000+01:00\", copy.toString());\n+    \n+        copy = test.dayOfMonth().addWrapFieldToCopy(23);\n+        assertEquals(\"2004-07-01T00:00:00.000+01:00\", copy.toString());\n+    \n+        copy = test.dayOfMonth().addWrapFieldToCopy(-12);\n+        assertEquals(\"2004-07-28T00:00:00.000+01:00\", copy.toString());\n+    }\n+\n+    public void testPropertySetDayOfMonth() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.dayOfMonth().setCopy(12);\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-06-12T00:00:00.000+01:00\", copy.toString());\n+        \n+        try {\n+            test.dayOfMonth().setCopy(31);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.dayOfMonth().setCopy(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextDayOfMonth() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.dayOfMonth().setCopy(\"12\");\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-06-12T00:00:00.000+01:00\", copy.toString());\n+    }\n+\n+    public void testPropertyWithMaximumValueDayOfMonth() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.dayOfMonth().withMaximumValue();\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-06-30T00:00:00.000+01:00\", copy.toString());\n+    }\n+\n+    public void testPropertyWithMinimumValueDayOfMonth() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.dayOfMonth().withMinimumValue();\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-06-01T00:00:00.000+01:00\", copy.toString());\n+    }\n+\n+    public void testPropertyCompareToDayOfMonth() {\n+        DateTime test1 = new DateTime(TEST_TIME1);\n+        DateTime test2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0);\n+        assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0);\n+        assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0);\n+        try {\n+            test1.dayOfMonth().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0);\n+        assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0);\n+        assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0);\n+        try {\n+            test1.dayOfMonth().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetDayOfYear() {\n+        // 31+29+31+30+31+9 = 161\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().dayOfYear(), test.dayOfYear().getField());\n+        assertEquals(\"dayOfYear\", test.dayOfYear().getName());\n+        assertEquals(\"Property[dayOfYear]\", test.dayOfYear().toString());\n+        assertSame(test, test.dayOfYear().getDateTime());\n+        assertEquals(161, test.dayOfYear().get());\n+        assertEquals(\"161\", test.dayOfYear().getAsString());\n+        assertEquals(\"161\", test.dayOfYear().getAsText());\n+        assertEquals(\"161\", test.dayOfYear().getAsText(Locale.FRENCH));\n+        assertEquals(\"161\", test.dayOfYear().getAsShortText());\n+        assertEquals(\"161\", test.dayOfYear().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().days(), test.dayOfYear().getDurationField());\n+        assertEquals(test.getChronology().years(), test.dayOfYear().getRangeDurationField());\n+        assertEquals(3, test.dayOfYear().getMaximumTextLength(null));\n+        assertEquals(3, test.dayOfYear().getMaximumShortTextLength(null));\n+        assertEquals(false, test.dayOfYear().isLeap());\n+        assertEquals(0, test.dayOfYear().getLeapAmount());\n+        assertEquals(null, test.dayOfYear().getLeapDurationField());\n+    }\n+\n+    public void testPropertyGetMaxMinValuesDayOfYear() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertEquals(1, test.dayOfYear().getMinimumValue());\n+        assertEquals(1, test.dayOfYear().getMinimumValueOverall());\n+        assertEquals(366, test.dayOfYear().getMaximumValue());\n+        assertEquals(366, test.dayOfYear().getMaximumValueOverall());\n+        test = new DateTime(2002, 6, 9, 0, 0, 0, 0);\n+        assertEquals(365, test.dayOfYear().getMaximumValue());\n+        assertEquals(366, test.dayOfYear().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyAddDayOfYear() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.dayOfYear().addToCopy(9);\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-06-18T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfYear().addToCopy(21);\n+        assertEquals(\"2004-06-30T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfYear().addToCopy(22);\n+        assertEquals(\"2004-07-01T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfYear().addToCopy(21 + 31 + 31 + 30 + 31 + 30 + 31);\n+        assertEquals(\"2004-12-31T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.dayOfYear().addToCopy(22 + 31 + 31 + 30 + 31 + 30 + 31);\n+        assertEquals(\"2005-01-01T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.dayOfYear().addToCopy(-8);\n+        assertEquals(\"2004-06-01T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfYear().addToCopy(-9);\n+        assertEquals(\"2004-05-31T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfYear().addToCopy(-8 - 31 - 30 - 31 - 29 - 31);\n+        assertEquals(\"2004-01-01T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.dayOfYear().addToCopy(-9 - 31 - 30 - 31 - 29 - 31);\n+        assertEquals(\"2003-12-31T00:00:00.000Z\", copy.toString());\n+    }\n+\n+    public void testPropertyAddWrapFieldDayOfYear() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.dayOfYear().addWrapFieldToCopy(21);\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-06-30T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfYear().addWrapFieldToCopy(22);\n+        assertEquals(\"2004-07-01T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfYear().addWrapFieldToCopy(-12);\n+        assertEquals(\"2004-05-28T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfYear().addWrapFieldToCopy(205);\n+        assertEquals(\"2004-12-31T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.dayOfYear().addWrapFieldToCopy(206);\n+        assertEquals(\"2004-01-01T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.dayOfYear().addWrapFieldToCopy(-160);\n+        assertEquals(\"2004-01-01T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.dayOfYear().addWrapFieldToCopy(-161);\n+        assertEquals(\"2004-12-31T00:00:00.000Z\", copy.toString());\n+    }\n+\n+    public void testPropertySetDayOfYear() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.dayOfYear().setCopy(12);\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-01-12T00:00:00.000Z\", copy.toString());\n+        \n+        try {\n+            test.dayOfYear().setCopy(367);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.dayOfYear().setCopy(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextDayOfYear() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.dayOfYear().setCopy(\"12\");\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-01-12T00:00:00.000Z\", copy.toString());\n+    }\n+\n+    public void testPropertyCompareToDayOfYear() {\n+        DateTime test1 = new DateTime(TEST_TIME1);\n+        DateTime test2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.dayOfYear().compareTo(test2) < 0);\n+        assertEquals(true, test2.dayOfYear().compareTo(test1) > 0);\n+        assertEquals(true, test1.dayOfYear().compareTo(test1) == 0);\n+        try {\n+            test1.dayOfYear().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.dayOfYear().compareTo(dt2) < 0);\n+        assertEquals(true, test2.dayOfYear().compareTo(dt1) > 0);\n+        assertEquals(true, test1.dayOfYear().compareTo(dt1) == 0);\n+        try {\n+            test1.dayOfYear().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetWeekOfWeekyear() {\n+        // 2002-01-01 = Thu\n+        // 2002-12-31 = Thu (+364 days)\n+        // 2003-12-30 = Thu (+364 days)\n+        // 2004-01-03 = Mon             W1\n+        // 2004-01-31 = Mon (+28 days)  W5\n+        // 2004-02-28 = Mon (+28 days)  W9\n+        // 2004-03-27 = Mon (+28 days)  W13\n+        // 2004-04-24 = Mon (+28 days)  W17\n+        // 2004-05-23 = Mon (+28 days)  W21\n+        // 2004-06-05 = Mon (+14 days)  W23\n+        // 2004-06-09 = Fri\n+        // 2004-12-25 = Mon             W52\n+        // 2005-01-01 = Mon             W1\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().weekOfWeekyear(), test.weekOfWeekyear().getField());\n+        assertEquals(\"weekOfWeekyear\", test.weekOfWeekyear().getName());\n+        assertEquals(\"Property[weekOfWeekyear]\", test.weekOfWeekyear().toString());\n+        assertSame(test, test.weekOfWeekyear().getDateTime());\n+        assertEquals(24, test.weekOfWeekyear().get());\n+        assertEquals(\"24\", test.weekOfWeekyear().getAsString());\n+        assertEquals(\"24\", test.weekOfWeekyear().getAsText());\n+        assertEquals(\"24\", test.weekOfWeekyear().getAsText(Locale.FRENCH));\n+        assertEquals(\"24\", test.weekOfWeekyear().getAsShortText());\n+        assertEquals(\"24\", test.weekOfWeekyear().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().weeks(), test.weekOfWeekyear().getDurationField());\n+        assertEquals(test.getChronology().weekyears(), test.weekOfWeekyear().getRangeDurationField());\n+        assertEquals(2, test.weekOfWeekyear().getMaximumTextLength(null));\n+        assertEquals(2, test.weekOfWeekyear().getMaximumShortTextLength(null));\n+        assertEquals(false, test.weekOfWeekyear().isLeap());\n+        assertEquals(0, test.weekOfWeekyear().getLeapAmount());\n+        assertEquals(null, test.weekOfWeekyear().getLeapDurationField());\n+    }\n+\n+    public void testPropertyGetMaxMinValuesWeekOfWeekyear() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertEquals(1, test.weekOfWeekyear().getMinimumValue());\n+        assertEquals(1, test.weekOfWeekyear().getMinimumValueOverall());\n+        assertEquals(53, test.weekOfWeekyear().getMaximumValue());\n+        assertEquals(53, test.weekOfWeekyear().getMaximumValueOverall());\n+        test = new DateTime(2005, 6, 9, 0, 0, 0, 0);\n+        assertEquals(52, test.weekOfWeekyear().getMaximumValue());\n+        assertEquals(53, test.weekOfWeekyear().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyAddWeekOfWeekyear() {\n+        DateTime test = new DateTime(2004, 6, 7, 0, 0, 0, 0);\n+        DateTime copy = test.weekOfWeekyear().addToCopy(1);\n+        assertEquals(\"2004-06-07T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-06-14T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.weekOfWeekyear().addToCopy(29);\n+        assertEquals(\"2004-12-27T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.weekOfWeekyear().addToCopy(30);\n+        assertEquals(\"2005-01-03T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.weekOfWeekyear().addToCopy(-22);\n+        assertEquals(\"2004-01-05T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.weekOfWeekyear().addToCopy(-23);\n+        assertEquals(\"2003-12-29T00:00:00.000Z\", copy.toString());\n+    }\n+\n+    public void testPropertyAddWrapFieldWeekOfWeekyear() {\n+        DateTime test = new DateTime(2004, 6, 7, 0, 0, 0, 0);\n+        DateTime copy = test.weekOfWeekyear().addWrapFieldToCopy(1);\n+        assertEquals(\"2004-06-07T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-06-14T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.weekOfWeekyear().addWrapFieldToCopy(29);\n+        assertEquals(\"2004-12-27T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.weekOfWeekyear().addWrapFieldToCopy(30);\n+        assertEquals(\"2003-12-29T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.weekOfWeekyear().addWrapFieldToCopy(-23);\n+        assertEquals(\"2003-12-29T00:00:00.000Z\", copy.toString());\n+    }\n+\n+    public void testPropertySetWeekOfWeekyear() {\n+        DateTime test = new DateTime(2004, 6, 7, 0, 0, 0, 0);\n+        DateTime copy = test.weekOfWeekyear().setCopy(4);\n+        assertEquals(\"2004-06-07T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-01-19T00:00:00.000Z\", copy.toString());\n+        \n+        try {\n+            test.weekOfWeekyear().setCopy(54);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.weekOfWeekyear().setCopy(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextWeekOfWeekyear() {\n+        DateTime test = new DateTime(2004, 6, 7, 0, 0, 0, 0);\n+        DateTime copy = test.weekOfWeekyear().setCopy(\"4\");\n+        assertEquals(\"2004-06-07T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-01-19T00:00:00.000Z\", copy.toString());\n+    }\n+\n+    public void testPropertyCompareToWeekOfWeekyear() {\n+        DateTime test1 = new DateTime(TEST_TIME1);\n+        DateTime test2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.weekOfWeekyear().compareTo(test2) < 0);\n+        assertEquals(true, test2.weekOfWeekyear().compareTo(test1) > 0);\n+        assertEquals(true, test1.weekOfWeekyear().compareTo(test1) == 0);\n+        try {\n+            test1.weekOfWeekyear().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.weekOfWeekyear().compareTo(dt2) < 0);\n+        assertEquals(true, test2.weekOfWeekyear().compareTo(dt1) > 0);\n+        assertEquals(true, test1.weekOfWeekyear().compareTo(dt1) == 0);\n+        try {\n+            test1.weekOfWeekyear().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetDayOfWeek() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().dayOfWeek(), test.dayOfWeek().getField());\n+        assertEquals(\"dayOfWeek\", test.dayOfWeek().getName());\n+        assertEquals(\"Property[dayOfWeek]\", test.dayOfWeek().toString());\n+        assertSame(test, test.dayOfWeek().getDateTime());\n+        assertEquals(3, test.dayOfWeek().get());\n+        assertEquals(\"3\", test.dayOfWeek().getAsString());\n+        assertEquals(\"Wednesday\", test.dayOfWeek().getAsText());\n+        assertEquals(\"Wednesday\", test.dayOfWeek().getField().getAsText(3, Locale.ENGLISH));\n+        assertEquals(\"mercredi\", test.dayOfWeek().getAsText(Locale.FRENCH));\n+        assertEquals(\"mercredi\", test.dayOfWeek().getField().getAsText(3, Locale.FRENCH));\n+        assertEquals(\"Wed\", test.dayOfWeek().getAsShortText());\n+        assertEquals(\"Wed\", test.dayOfWeek().getField().getAsShortText(3, Locale.ENGLISH));\n+        assertEquals(\"mer.\", test.dayOfWeek().getAsShortText(Locale.FRENCH));\n+        assertEquals(\"mer.\", test.dayOfWeek().getField().getAsShortText(3, Locale.FRENCH));\n+        assertEquals(test.getChronology().days(), test.dayOfWeek().getDurationField());\n+        assertEquals(test.getChronology().weeks(), test.dayOfWeek().getRangeDurationField());\n+        assertEquals(9, test.dayOfWeek().getMaximumTextLength(null));\n+        assertEquals(8, test.dayOfWeek().getMaximumTextLength(Locale.FRENCH));\n+        assertEquals(3, test.dayOfWeek().getMaximumShortTextLength(null));\n+        assertEquals(4, test.dayOfWeek().getMaximumShortTextLength(Locale.FRENCH));\n+        assertEquals(1, test.dayOfWeek().getMinimumValue());\n+        assertEquals(1, test.dayOfWeek().getMinimumValueOverall());\n+        assertEquals(7, test.dayOfWeek().getMaximumValue());\n+        assertEquals(7, test.dayOfWeek().getMaximumValueOverall());\n+        assertEquals(false, test.dayOfWeek().isLeap());\n+        assertEquals(0, test.dayOfWeek().getLeapAmount());\n+        assertEquals(null, test.dayOfWeek().getLeapDurationField());\n+    }\n+\n+    public void testPropertyAddDayOfWeek() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.dayOfWeek().addToCopy(1);\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-06-10T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfWeek().addToCopy(21);\n+        assertEquals(\"2004-06-30T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfWeek().addToCopy(22);\n+        assertEquals(\"2004-07-01T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfWeek().addToCopy(21 + 31 + 31 + 30 + 31 + 30 + 31);\n+        assertEquals(\"2004-12-31T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.dayOfWeek().addToCopy(22 + 31 + 31 + 30 + 31 + 30 + 31);\n+        assertEquals(\"2005-01-01T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.dayOfWeek().addToCopy(-8);\n+        assertEquals(\"2004-06-01T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfWeek().addToCopy(-9);\n+        assertEquals(\"2004-05-31T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfWeek().addToCopy(-8 - 31 - 30 - 31 - 29 - 31);\n+        assertEquals(\"2004-01-01T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.dayOfWeek().addToCopy(-9 - 31 - 30 - 31 - 29 - 31);\n+        assertEquals(\"2003-12-31T00:00:00.000Z\", copy.toString());\n+    }\n+\n+    public void testPropertyAddLongDayOfWeek() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.dayOfWeek().addToCopy(1L);\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-06-10T00:00:00.000+01:00\", copy.toString());\n+    }        \n+\n+    public void testPropertyAddWrapFieldDayOfWeek() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);  // Wed\n+        DateTime copy = test.dayOfWeek().addWrapFieldToCopy(1);\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-06-10T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfWeek().addWrapFieldToCopy(5);\n+        assertEquals(\"2004-06-07T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfWeek().addWrapFieldToCopy(-10);\n+        assertEquals(\"2004-06-13T00:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateTime(2004, 6, 2, 0, 0, 0, 0);\n+        copy = test.dayOfWeek().addWrapFieldToCopy(5);\n+        assertEquals(\"2004-06-02T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-05-31T00:00:00.000+01:00\", copy.toString());\n+    }\n+\n+    public void testPropertySetDayOfWeek() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.dayOfWeek().setCopy(4);\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-06-10T00:00:00.000+01:00\", copy.toString());\n+        \n+        try {\n+            test.dayOfWeek().setCopy(8);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.dayOfWeek().setCopy(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextDayOfWeek() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.dayOfWeek().setCopy(\"4\");\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-06-10T00:00:00.000+01:00\", copy.toString());\n+        copy = test.dayOfWeek().setCopy(\"Mon\");\n+        assertEquals(\"2004-06-07T00:00:00.000+01:00\", copy.toString());\n+        copy = test.dayOfWeek().setCopy(\"Tuesday\");\n+        assertEquals(\"2004-06-08T00:00:00.000+01:00\", copy.toString());\n+        copy = test.dayOfWeek().setCopy(\"lundi\", Locale.FRENCH);\n+        assertEquals(\"2004-06-07T00:00:00.000+01:00\", copy.toString());\n+    }\n+\n+    public void testPropertyCompareToDayOfWeek() {\n+        DateTime test1 = new DateTime(TEST_TIME1);\n+        DateTime test2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test2.dayOfWeek().compareTo(test1) < 0);\n+        assertEquals(true, test1.dayOfWeek().compareTo(test2) > 0);\n+        assertEquals(true, test1.dayOfWeek().compareTo(test1) == 0);\n+        try {\n+            test1.dayOfWeek().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test2.dayOfWeek().compareTo(dt1) < 0);\n+        assertEquals(true, test1.dayOfWeek().compareTo(dt2) > 0);\n+        assertEquals(true, test1.dayOfWeek().compareTo(dt1) == 0);\n+        try {\n+            test1.dayOfWeek().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetHourOfDay() {\n+        DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53);\n+        assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField());\n+        assertEquals(\"hourOfDay\", test.hourOfDay().getName());\n+        assertEquals(\"Property[hourOfDay]\", test.hourOfDay().toString());\n+        assertSame(test, test.hourOfDay().getDateTime());\n+        assertEquals(13, test.hourOfDay().get());\n+        assertEquals(\"13\", test.hourOfDay().getAsString());\n+        assertEquals(\"13\", test.hourOfDay().getAsText());\n+        assertEquals(\"13\", test.hourOfDay().getAsText(Locale.FRENCH));\n+        assertEquals(\"13\", test.hourOfDay().getAsShortText());\n+        assertEquals(\"13\", test.hourOfDay().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField());\n+        assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField());\n+        assertEquals(2, test.hourOfDay().getMaximumTextLength(null));\n+        assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyGetDifferenceHourOfDay() {\n+        DateTime test1 = new DateTime(2004, 6, 9, 13, 30, 0, 0);\n+        DateTime test2 = new DateTime(2004, 6, 9, 15, 30, 0, 0);\n+        assertEquals(-2, test1.hourOfDay().getDifference(test2));\n+        assertEquals(2, test2.hourOfDay().getDifference(test1));\n+        assertEquals(-2L, test1.hourOfDay().getDifferenceAsLong(test2));\n+        assertEquals(2L, test2.hourOfDay().getDifferenceAsLong(test1));\n+        \n+        DateTime test = new DateTime(TEST_TIME_NOW + (13L * DateTimeConstants.MILLIS_PER_HOUR));\n+        assertEquals(13, test.hourOfDay().getDifference(null));\n+        assertEquals(13L, test.hourOfDay().getDifferenceAsLong(null));\n+    }\n+\n+    public void testPropertyRoundFloorHourOfDay() {\n+        DateTime test = new DateTime(2004, 6, 9, 13, 30, 0, 0);\n+        DateTime copy = test.hourOfDay().roundFloorCopy();\n+        assertEquals(\"2004-06-09T13:00:00.000+01:00\", copy.toString());\n+    }\n+\n+    public void testPropertyRoundCeilingHourOfDay() {\n+        DateTime test = new DateTime(2004, 6, 9, 13, 30, 0, 0);\n+        DateTime copy = test.hourOfDay().roundCeilingCopy();\n+        assertEquals(\"2004-06-09T14:00:00.000+01:00\", copy.toString());\n+    }\n+\n+    public void testPropertyRoundHalfFloorHourOfDay() {\n+        DateTime test = new DateTime(2004, 6, 9, 13, 30, 0, 0);\n+        DateTime copy = test.hourOfDay().roundHalfFloorCopy();\n+        assertEquals(\"2004-06-09T13:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateTime(2004, 6, 9, 13, 30, 0, 1);\n+        copy = test.hourOfDay().roundHalfFloorCopy();\n+        assertEquals(\"2004-06-09T14:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateTime(2004, 6, 9, 13, 29, 59, 999);\n+        copy = test.hourOfDay().roundHalfFloorCopy();\n+        assertEquals(\"2004-06-09T13:00:00.000+01:00\", copy.toString());\n+    }\n+\n+    public void testPropertyRoundHalfCeilingHourOfDay() {\n+        DateTime test = new DateTime(2004, 6, 9, 13, 30, 0, 0);\n+        DateTime copy = test.hourOfDay().roundHalfCeilingCopy();\n+        assertEquals(\"2004-06-09T14:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateTime(2004, 6, 9, 13, 30, 0, 1);\n+        copy = test.hourOfDay().roundHalfCeilingCopy();\n+        assertEquals(\"2004-06-09T14:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateTime(2004, 6, 9, 13, 29, 59, 999);\n+        copy = test.hourOfDay().roundHalfCeilingCopy();\n+        assertEquals(\"2004-06-09T13:00:00.000+01:00\", copy.toString());\n+    }\n+\n+    public void testPropertyRoundHalfEvenHourOfDay() {\n+        DateTime test = new DateTime(2004, 6, 9, 13, 30, 0, 0);\n+        DateTime copy = test.hourOfDay().roundHalfEvenCopy();\n+        assertEquals(\"2004-06-09T14:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateTime(2004, 6, 9, 14, 30, 0, 0);\n+        copy = test.hourOfDay().roundHalfEvenCopy();\n+        assertEquals(\"2004-06-09T14:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateTime(2004, 6, 9, 13, 30, 0, 1);\n+        copy = test.hourOfDay().roundHalfEvenCopy();\n+        assertEquals(\"2004-06-09T14:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateTime(2004, 6, 9, 13, 29, 59, 999);\n+        copy = test.hourOfDay().roundHalfEvenCopy();\n+        assertEquals(\"2004-06-09T13:00:00.000+01:00\", copy.toString());\n+    }\n+\n+    public void testPropertyRemainderHourOfDay() {\n+        DateTime test = new DateTime(2004, 6, 9, 13, 30, 0, 0);\n+        assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMinuteOfHour() {\n+        DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53);\n+        assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField());\n+        assertEquals(\"minuteOfHour\", test.minuteOfHour().getName());\n+        assertEquals(\"Property[minuteOfHour]\", test.minuteOfHour().toString());\n+        assertSame(test, test.minuteOfHour().getDateTime());\n+        assertEquals(23, test.minuteOfHour().get());\n+        assertEquals(\"23\", test.minuteOfHour().getAsString());\n+        assertEquals(\"23\", test.minuteOfHour().getAsText());\n+        assertEquals(\"23\", test.minuteOfHour().getAsText(Locale.FRENCH));\n+        assertEquals(\"23\", test.minuteOfHour().getAsShortText());\n+        assertEquals(\"23\", test.minuteOfHour().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField());\n+        assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField());\n+        assertEquals(2, test.minuteOfHour().getMaximumTextLength(null));\n+        assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMinuteOfDay() {\n+        DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53);\n+        assertSame(test.getChronology().minuteOfDay(), test.minuteOfDay().getField());\n+        assertEquals(\"minuteOfDay\", test.minuteOfDay().getName());\n+        assertEquals(\"Property[minuteOfDay]\", test.minuteOfDay().toString());\n+        assertSame(test, test.minuteOfDay().getDateTime());\n+        assertEquals(803, test.minuteOfDay().get());\n+        assertEquals(\"803\", test.minuteOfDay().getAsString());\n+        assertEquals(\"803\", test.minuteOfDay().getAsText());\n+        assertEquals(\"803\", test.minuteOfDay().getAsText(Locale.FRENCH));\n+        assertEquals(\"803\", test.minuteOfDay().getAsShortText());\n+        assertEquals(\"803\", test.minuteOfDay().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().minutes(), test.minuteOfDay().getDurationField());\n+        assertEquals(test.getChronology().days(), test.minuteOfDay().getRangeDurationField());\n+        assertEquals(4, test.minuteOfDay().getMaximumTextLength(null));\n+        assertEquals(4, test.minuteOfDay().getMaximumShortTextLength(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetSecondOfMinute() {\n+        DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53);\n+        assertSame(test.getChronology().secondOfMinute(), test.secondOfMinute().getField());\n+        assertEquals(\"secondOfMinute\", test.secondOfMinute().getName());\n+        assertEquals(\"Property[secondOfMinute]\", test.secondOfMinute().toString());\n+        assertSame(test, test.secondOfMinute().getDateTime());\n+        assertEquals(43, test.secondOfMinute().get());\n+        assertEquals(\"43\", test.secondOfMinute().getAsString());\n+        assertEquals(\"43\", test.secondOfMinute().getAsText());\n+        assertEquals(\"43\", test.secondOfMinute().getAsText(Locale.FRENCH));\n+        assertEquals(\"43\", test.secondOfMinute().getAsShortText());\n+        assertEquals(\"43\", test.secondOfMinute().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().seconds(), test.secondOfMinute().getDurationField());\n+        assertEquals(test.getChronology().minutes(), test.secondOfMinute().getRangeDurationField());\n+        assertEquals(2, test.secondOfMinute().getMaximumTextLength(null));\n+        assertEquals(2, test.secondOfMinute().getMaximumShortTextLength(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetSecondOfDay() {\n+        DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53);\n+        assertSame(test.getChronology().secondOfDay(), test.secondOfDay().getField());\n+        assertEquals(\"secondOfDay\", test.secondOfDay().getName());\n+        assertEquals(\"Property[secondOfDay]\", test.secondOfDay().toString());\n+        assertSame(test, test.secondOfDay().getDateTime());\n+        assertEquals(48223, test.secondOfDay().get());\n+        assertEquals(\"48223\", test.secondOfDay().getAsString());\n+        assertEquals(\"48223\", test.secondOfDay().getAsText());\n+        assertEquals(\"48223\", test.secondOfDay().getAsText(Locale.FRENCH));\n+        assertEquals(\"48223\", test.secondOfDay().getAsShortText());\n+        assertEquals(\"48223\", test.secondOfDay().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().seconds(), test.secondOfDay().getDurationField());\n+        assertEquals(test.getChronology().days(), test.secondOfDay().getRangeDurationField());\n+        assertEquals(5, test.secondOfDay().getMaximumTextLength(null));\n+        assertEquals(5, test.secondOfDay().getMaximumShortTextLength(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMillisOfSecond() {\n+        DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53);\n+        assertSame(test.getChronology().millisOfSecond(), test.millisOfSecond().getField());\n+        assertEquals(\"millisOfSecond\", test.millisOfSecond().getName());\n+        assertEquals(\"Property[millisOfSecond]\", test.millisOfSecond().toString());\n+        assertSame(test, test.millisOfSecond().getDateTime());\n+        assertEquals(53, test.millisOfSecond().get());\n+        assertEquals(\"53\", test.millisOfSecond().getAsString());\n+        assertEquals(\"53\", test.millisOfSecond().getAsText());\n+        assertEquals(\"53\", test.millisOfSecond().getAsText(Locale.FRENCH));\n+        assertEquals(\"53\", test.millisOfSecond().getAsShortText());\n+        assertEquals(\"53\", test.millisOfSecond().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().millis(), test.millisOfSecond().getDurationField());\n+        assertEquals(test.getChronology().seconds(), test.millisOfSecond().getRangeDurationField());\n+        assertEquals(3, test.millisOfSecond().getMaximumTextLength(null));\n+        assertEquals(3, test.millisOfSecond().getMaximumShortTextLength(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMillisOfDay() {\n+        DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53);\n+        assertSame(test.getChronology().millisOfDay(), test.millisOfDay().getField());\n+        assertEquals(\"millisOfDay\", test.millisOfDay().getName());\n+        assertEquals(\"Property[millisOfDay]\", test.millisOfDay().toString());\n+        assertSame(test, test.millisOfDay().getDateTime());\n+        assertEquals(48223053, test.millisOfDay().get());\n+        assertEquals(\"48223053\", test.millisOfDay().getAsString());\n+        assertEquals(\"48223053\", test.millisOfDay().getAsText());\n+        assertEquals(\"48223053\", test.millisOfDay().getAsText(Locale.FRENCH));\n+        assertEquals(\"48223053\", test.millisOfDay().getAsShortText());\n+        assertEquals(\"48223053\", test.millisOfDay().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().millis(), test.millisOfDay().getDurationField());\n+        assertEquals(test.getChronology().days(), test.millisOfDay().getRangeDurationField());\n+        assertEquals(8, test.millisOfDay().getMaximumTextLength(null));\n+        assertEquals(8, test.millisOfDay().getMaximumShortTextLength(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyToIntervalYearOfEra() {\n+      DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.yearOfEra().toInterval();\n+      assertEquals(new DateTime(2004, 1, 1, 0, 0, 0, 0), testInterval.getStart());\n+      assertEquals(new DateTime(2005, 1, 1, 0, 0, 0, 0), testInterval.getEnd());\n+    }\n+\n+    public void testPropertyToIntervalYearOfCentury() {\n+      DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.yearOfCentury().toInterval();\n+      assertEquals(new DateTime(2004, 1, 1, 0, 0, 0, 0), testInterval.getStart());\n+      assertEquals(new DateTime(2005, 1, 1, 0, 0, 0, 0), testInterval.getEnd());\n+    }\n+\n+    public void testPropertyToIntervalYear() {\n+      DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.year().toInterval();\n+      assertEquals(new DateTime(2004, 1, 1, 0, 0, 0, 0), testInterval.getStart());\n+      assertEquals(new DateTime(2005, 1, 1, 0, 0, 0, 0), testInterval.getEnd());\n+    }\n+\n+    public void testPropertyToIntervalMonthOfYear() {\n+      DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.monthOfYear().toInterval();\n+      assertEquals(new DateTime(2004, 6, 1, 0, 0, 0, 0), testInterval.getStart());\n+      assertEquals(new DateTime(2004, 7, 1, 0, 0, 0, 0), testInterval.getEnd());\n+    }\n+\n+    public void testPropertyToIntervalDayOfMonth() {\n+      DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.dayOfMonth().toInterval();\n+      assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0), testInterval.getStart());\n+      assertEquals(new DateTime(2004, 6, 10, 0, 0, 0, 0), testInterval.getEnd());\n+\n+      DateTime febTest = new DateTime(2004, 2, 29, 13, 23, 43, 53);\n+      Interval febTestInterval = febTest.dayOfMonth().toInterval();\n+      assertEquals(new DateTime(2004, 2, 29, 0, 0, 0, 0), febTestInterval.getStart());\n+      assertEquals(new DateTime(2004, 3, 1, 0, 0, 0, 0), febTestInterval.getEnd());\n+    }\n+\n+    public void testPropertyToIntervalHourOfDay() {\n+      DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.hourOfDay().toInterval();\n+      assertEquals(new DateTime(2004, 6, 9, 13, 0, 0, 0), testInterval.getStart());\n+      assertEquals(new DateTime(2004, 6, 9, 14, 0, 0, 0), testInterval.getEnd());\n+\n+      DateTime midnightTest = new DateTime(2004, 6, 9, 23, 23, 43, 53);\n+      Interval midnightTestInterval = midnightTest.hourOfDay().toInterval();\n+      assertEquals(new DateTime(2004, 6, 9, 23, 0, 0, 0), midnightTestInterval.getStart());\n+      assertEquals(new DateTime(2004, 6, 10, 0, 0, 0, 0), midnightTestInterval.getEnd());\n+    }\n+\n+    public void testPropertyToIntervalMinuteOfHour() {\n+      DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.minuteOfHour().toInterval();\n+      assertEquals(new DateTime(2004, 6, 9, 13, 23, 0, 0), testInterval.getStart());\n+      assertEquals(new DateTime(2004, 6, 9, 13, 24, 0, 0), testInterval.getEnd());\n+    }\n+\n+    public void testPropertyToIntervalSecondOfMinute() {\n+      DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.secondOfMinute().toInterval();\n+      assertEquals(new DateTime(2004, 6, 9, 13, 23, 43, 0), testInterval.getStart());\n+      assertEquals(new DateTime(2004, 6, 9, 13, 23, 44, 0), testInterval.getEnd());\n+    }\n+\n+    public void testPropertyToIntervalMillisOfSecond() {\n+      DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.millisOfSecond().toInterval();\n+      assertEquals(new DateTime(2004, 6, 9, 13, 23, 43, 53), testInterval.getStart());\n+      assertEquals(new DateTime(2004, 6, 9, 13, 23, 43, 54), testInterval.getEnd());\n+    }\n+\n+    public void testPropertyEqualsHashCodeLenient() {\n+        DateTime test1 = new DateTime(1970, 6, 9, 0, 0, 0, 0, LenientChronology.getInstance(COPTIC_PARIS));\n+        DateTime test2 = new DateTime(1970, 6, 9, 0, 0, 0, 0, LenientChronology.getInstance(COPTIC_PARIS));\n+        assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth()));\n+        assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth()));\n+        assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));\n+        assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth()));\n+        assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());\n+        assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());\n+        assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());\n+    }\n+\n+    public void testPropertyEqualsHashCodeStrict() {\n+        DateTime test1 = new DateTime(1970, 6, 9, 0, 0, 0, 0, StrictChronology.getInstance(COPTIC_PARIS));\n+        DateTime test2 = new DateTime(1970, 6, 9, 0, 0, 0, 0, StrictChronology.getInstance(COPTIC_PARIS));\n+        assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth()));\n+        assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth()));\n+        assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));\n+        assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth()));\n+        assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());\n+        assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());\n+        assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestDays.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * This class is a Junit unit test for Days.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestDays extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestDays.class);\n+    }\n+\n+    public TestDays(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+    }\n+\n+    protected void tearDown() throws Exception {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstants() {\n+        assertEquals(0, Days.ZERO.getDays());\n+        assertEquals(1, Days.ONE.getDays());\n+        assertEquals(2, Days.TWO.getDays());\n+        assertEquals(3, Days.THREE.getDays());\n+        assertEquals(4, Days.FOUR.getDays());\n+        assertEquals(5, Days.FIVE.getDays());\n+        assertEquals(6, Days.SIX.getDays());\n+        assertEquals(7, Days.SEVEN.getDays());\n+        assertEquals(Integer.MAX_VALUE, Days.MAX_VALUE.getDays());\n+        assertEquals(Integer.MIN_VALUE, Days.MIN_VALUE.getDays());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_days_int() {\n+        assertSame(Days.ZERO, Days.days(0));\n+        assertSame(Days.ONE, Days.days(1));\n+        assertSame(Days.TWO, Days.days(2));\n+        assertSame(Days.THREE, Days.days(3));\n+        assertSame(Days.FOUR, Days.days(4));\n+        assertSame(Days.FIVE, Days.days(5));\n+        assertSame(Days.SIX, Days.days(6));\n+        assertSame(Days.SEVEN, Days.days(7));\n+        assertSame(Days.MAX_VALUE, Days.days(Integer.MAX_VALUE));\n+        assertSame(Days.MIN_VALUE, Days.days(Integer.MIN_VALUE));\n+        assertEquals(-1, Days.days(-1).getDays());\n+        assertEquals(8, Days.days(8).getDays());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_daysBetween_RInstant() {\n+        DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);\n+        DateTime end1 = new DateTime(2006, 6, 12, 12, 0, 0, 0, PARIS);\n+        DateTime end2 = new DateTime(2006, 6, 15, 18, 0, 0, 0, PARIS);\n+        \n+        assertEquals(3, Days.daysBetween(start, end1).getDays());\n+        assertEquals(0, Days.daysBetween(start, start).getDays());\n+        assertEquals(0, Days.daysBetween(end1, end1).getDays());\n+        assertEquals(-3, Days.daysBetween(end1, start).getDays());\n+        assertEquals(6, Days.daysBetween(start, end2).getDays());\n+    }\n+\n+    public void testFactory_daysBetween_RPartial() {\n+        LocalDate start = new LocalDate(2006, 6, 9);\n+        LocalDate end1 = new LocalDate(2006, 6, 12);\n+        YearMonthDay end2 = new YearMonthDay(2006, 6, 15);\n+        \n+        assertEquals(3, Days.daysBetween(start, end1).getDays());\n+        assertEquals(0, Days.daysBetween(start, start).getDays());\n+        assertEquals(0, Days.daysBetween(end1, end1).getDays());\n+        assertEquals(-3, Days.daysBetween(end1, start).getDays());\n+        assertEquals(6, Days.daysBetween(start, end2).getDays());\n+    }\n+\n+    public void testFactory_daysIn_RInterval() {\n+        DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);\n+        DateTime end1 = new DateTime(2006, 6, 12, 12, 0, 0, 0, PARIS);\n+        DateTime end2 = new DateTime(2006, 6, 15, 18, 0, 0, 0, PARIS);\n+        \n+        assertEquals(0, Days.daysIn((ReadableInterval) null).getDays());\n+        assertEquals(3, Days.daysIn(new Interval(start, end1)).getDays());\n+        assertEquals(0, Days.daysIn(new Interval(start, start)).getDays());\n+        assertEquals(0, Days.daysIn(new Interval(end1, end1)).getDays());\n+        assertEquals(6, Days.daysIn(new Interval(start, end2)).getDays());\n+    }\n+\n+    public void testFactory_standardDaysIn_RPeriod() {\n+        assertEquals(0, Days.standardDaysIn((ReadablePeriod) null).getDays());\n+        assertEquals(0, Days.standardDaysIn(Period.ZERO).getDays());\n+        assertEquals(1, Days.standardDaysIn(new Period(0, 0, 0, 1, 0, 0, 0, 0)).getDays());\n+        assertEquals(123, Days.standardDaysIn(Period.days(123)).getDays());\n+        assertEquals(-987, Days.standardDaysIn(Period.days(-987)).getDays());\n+        assertEquals(1, Days.standardDaysIn(Period.hours(47)).getDays());\n+        assertEquals(2, Days.standardDaysIn(Period.hours(48)).getDays());\n+        assertEquals(2, Days.standardDaysIn(Period.hours(49)).getDays());\n+        assertEquals(14, Days.standardDaysIn(Period.weeks(2)).getDays());\n+        try {\n+            Days.standardDaysIn(Period.months(1));\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expeceted\n+        }\n+    }\n+\n+    public void testFactory_parseDays_String() {\n+        assertEquals(0, Days.parseDays((String) null).getDays());\n+        assertEquals(0, Days.parseDays(\"P0D\").getDays());\n+        assertEquals(1, Days.parseDays(\"P1D\").getDays());\n+        assertEquals(-3, Days.parseDays(\"P-3D\").getDays());\n+        assertEquals(2, Days.parseDays(\"P0Y0M2D\").getDays());\n+        assertEquals(2, Days.parseDays(\"P2DT0H0M\").getDays());\n+        try {\n+            Days.parseDays(\"P1Y1D\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expeceted\n+        }\n+        try {\n+            Days.parseDays(\"P1DT1H\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expeceted\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetMethods() {\n+        Days test = Days.days(20);\n+        assertEquals(20, test.getDays());\n+    }\n+\n+    public void testGetFieldType() {\n+        Days test = Days.days(20);\n+        assertEquals(DurationFieldType.days(), test.getFieldType());\n+    }\n+\n+    public void testGetPeriodType() {\n+        Days test = Days.days(20);\n+        assertEquals(PeriodType.days(), test.getPeriodType());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsGreaterThan() {\n+        assertEquals(true, Days.THREE.isGreaterThan(Days.TWO));\n+        assertEquals(false, Days.THREE.isGreaterThan(Days.THREE));\n+        assertEquals(false, Days.TWO.isGreaterThan(Days.THREE));\n+        assertEquals(true, Days.ONE.isGreaterThan(null));\n+        assertEquals(false, Days.days(-1).isGreaterThan(null));\n+    }\n+\n+    public void testIsLessThan() {\n+        assertEquals(false, Days.THREE.isLessThan(Days.TWO));\n+        assertEquals(false, Days.THREE.isLessThan(Days.THREE));\n+        assertEquals(true, Days.TWO.isLessThan(Days.THREE));\n+        assertEquals(false, Days.ONE.isLessThan(null));\n+        assertEquals(true, Days.days(-1).isLessThan(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        Days test = Days.days(20);\n+        assertEquals(\"P20D\", test.toString());\n+        \n+        test = Days.days(-20);\n+        assertEquals(\"P-20D\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        Days test = Days.SEVEN;\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        Days result = (Days) ois.readObject();\n+        ois.close();\n+        \n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToStandardWeeks() {\n+        Days test = Days.days(14);\n+        Weeks expected = Weeks.weeks(2);\n+        assertEquals(expected, test.toStandardWeeks());\n+    }\n+\n+    public void testToStandardHours() {\n+        Days test = Days.days(2);\n+        Hours expected = Hours.hours(2 * 24);\n+        assertEquals(expected, test.toStandardHours());\n+        \n+        try {\n+            Days.MAX_VALUE.toStandardHours();\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testToStandardMinutes() {\n+        Days test = Days.days(2);\n+        Minutes expected = Minutes.minutes(2 * 24 * 60);\n+        assertEquals(expected, test.toStandardMinutes());\n+        \n+        try {\n+            Days.MAX_VALUE.toStandardMinutes();\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testToStandardSeconds() {\n+        Days test = Days.days(2);\n+        Seconds expected = Seconds.seconds(2 * 24 * 60 * 60);\n+        assertEquals(expected, test.toStandardSeconds());\n+        \n+        try {\n+            Days.MAX_VALUE.toStandardSeconds();\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testToStandardDuration() {\n+        Days test = Days.days(20);\n+        Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_DAY);\n+        assertEquals(expected, test.toStandardDuration());\n+        \n+        expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_DAY);\n+        assertEquals(expected, Days.MAX_VALUE.toStandardDuration());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPlus_int() {\n+        Days test2 = Days.days(2);\n+        Days result = test2.plus(3);\n+        assertEquals(2, test2.getDays());\n+        assertEquals(5, result.getDays());\n+        \n+        assertEquals(1, Days.ONE.plus(0).getDays());\n+        \n+        try {\n+            Days.MAX_VALUE.plus(1);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testPlus_Days() {\n+        Days test2 = Days.days(2);\n+        Days test3 = Days.days(3);\n+        Days result = test2.plus(test3);\n+        assertEquals(2, test2.getDays());\n+        assertEquals(3, test3.getDays());\n+        assertEquals(5, result.getDays());\n+        \n+        assertEquals(1, Days.ONE.plus(Days.ZERO).getDays());\n+        assertEquals(1, Days.ONE.plus((Days) null).getDays());\n+        \n+        try {\n+            Days.MAX_VALUE.plus(Days.ONE);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testMinus_int() {\n+        Days test2 = Days.days(2);\n+        Days result = test2.minus(3);\n+        assertEquals(2, test2.getDays());\n+        assertEquals(-1, result.getDays());\n+        \n+        assertEquals(1, Days.ONE.minus(0).getDays());\n+        \n+        try {\n+            Days.MIN_VALUE.minus(1);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testMinus_Days() {\n+        Days test2 = Days.days(2);\n+        Days test3 = Days.days(3);\n+        Days result = test2.minus(test3);\n+        assertEquals(2, test2.getDays());\n+        assertEquals(3, test3.getDays());\n+        assertEquals(-1, result.getDays());\n+        \n+        assertEquals(1, Days.ONE.minus(Days.ZERO).getDays());\n+        assertEquals(1, Days.ONE.minus((Days) null).getDays());\n+        \n+        try {\n+            Days.MIN_VALUE.minus(Days.ONE);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testMultipliedBy_int() {\n+        Days test = Days.days(2);\n+        assertEquals(6, test.multipliedBy(3).getDays());\n+        assertEquals(2, test.getDays());\n+        assertEquals(-6, test.multipliedBy(-3).getDays());\n+        assertSame(test, test.multipliedBy(1));\n+        \n+        Days halfMax = Days.days(Integer.MAX_VALUE / 2 + 1);\n+        try {\n+            halfMax.multipliedBy(2);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testDividedBy_int() {\n+        Days test = Days.days(12);\n+        assertEquals(6, test.dividedBy(2).getDays());\n+        assertEquals(12, test.getDays());\n+        assertEquals(4, test.dividedBy(3).getDays());\n+        assertEquals(3, test.dividedBy(4).getDays());\n+        assertEquals(2, test.dividedBy(5).getDays());\n+        assertEquals(2, test.dividedBy(6).getDays());\n+        assertSame(test, test.dividedBy(1));\n+        \n+        try {\n+            Days.ONE.dividedBy(0);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testNegated() {\n+        Days test = Days.days(12);\n+        assertEquals(-12, test.negated().getDays());\n+        assertEquals(12, test.getDays());\n+        \n+        try {\n+            Days.MIN_VALUE.negated();\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddToLocalDate() {\n+        Days test = Days.days(20);\n+        LocalDate date = new LocalDate(2006, 6, 1);\n+        LocalDate expected = new LocalDate(2006, 6, 21);\n+        assertEquals(expected, date.plus(test));\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestDurationField.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import org.joda.time.chrono.ISOChronology;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * This class is a Junit unit test for DurationField.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestDurationField extends TestCase {\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestDurationField.class);\n+    }\n+\n+    public TestDurationField(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+    }\n+\n+    protected void tearDown() throws Exception {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_subtract() throws Exception {\n+        DurationField fld = ISOChronology.getInstanceUTC().millis();\n+        assertEquals(900, fld.subtract(1000L, 100));\n+        assertEquals(900L, fld.subtract(1000L, 100L));\n+        assertEquals((1000L - Integer.MAX_VALUE), fld.subtract(1000L, Integer.MAX_VALUE));\n+        assertEquals((1000L - Integer.MIN_VALUE), fld.subtract(1000L, Integer.MIN_VALUE));\n+        assertEquals((1000L - Long.MAX_VALUE), fld.subtract(1000L, Long.MAX_VALUE));\n+        try {\n+            fld.subtract(-1000L, Long.MIN_VALUE);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestDurationFieldType.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.lang.reflect.Constructor;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.CopticChronology;\n+\n+/**\n+ * This class is a Junit unit test for DurationFieldType.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestDurationFieldType extends TestCase {\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestDurationFieldType.class);\n+    }\n+\n+    public TestDurationFieldType(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+    }\n+\n+    protected void tearDown() throws Exception {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_eras() throws Exception {\n+        assertEquals(DurationFieldType.eras(), DurationFieldType.eras());\n+        assertEquals(\"eras\", DurationFieldType.eras().getName());\n+        assertEquals(CopticChronology.getInstanceUTC().eras(), DurationFieldType.eras().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().eras().isSupported(), DurationFieldType.eras().isSupported(CopticChronology.getInstanceUTC()));\n+        assertSerialization(DurationFieldType.eras());\n+    }\n+\n+    public void test_centuries() throws Exception {\n+        assertEquals(DurationFieldType.centuries(), DurationFieldType.centuries());\n+        assertEquals(\"centuries\", DurationFieldType.centuries().getName());\n+        assertEquals(CopticChronology.getInstanceUTC().centuries(), DurationFieldType.centuries().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().centuries().isSupported(), DurationFieldType.centuries().isSupported(CopticChronology.getInstanceUTC()));\n+        assertSerialization(DurationFieldType.centuries());\n+    }\n+\n+    public void test_years() throws Exception {\n+        assertEquals(DurationFieldType.years(), DurationFieldType.years());\n+        assertEquals(\"years\", DurationFieldType.years().getName());\n+        assertEquals(CopticChronology.getInstanceUTC().years(), DurationFieldType.years().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().years().isSupported(), DurationFieldType.years().isSupported(CopticChronology.getInstanceUTC()));\n+        assertSerialization(DurationFieldType.years());\n+    }\n+\n+    public void test_months() throws Exception {\n+        assertEquals(DurationFieldType.months(), DurationFieldType.months());\n+        assertEquals(\"months\", DurationFieldType.months().getName());\n+        assertEquals(CopticChronology.getInstanceUTC().months(), DurationFieldType.months().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().months().isSupported(), DurationFieldType.months().isSupported(CopticChronology.getInstanceUTC()));\n+        assertSerialization(DurationFieldType.months());\n+    }\n+\n+    public void test_weekyears() throws Exception {\n+        assertEquals(DurationFieldType.weekyears(), DurationFieldType.weekyears());\n+        assertEquals(\"weekyears\", DurationFieldType.weekyears().getName());\n+        assertEquals(CopticChronology.getInstanceUTC().weekyears(), DurationFieldType.weekyears().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().weekyears().isSupported(), DurationFieldType.weekyears().isSupported(CopticChronology.getInstanceUTC()));\n+        assertSerialization(DurationFieldType.weekyears());\n+    }\n+\n+    public void test_weeks() throws Exception {\n+        assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks());\n+        assertEquals(\"weeks\", DurationFieldType.weeks().getName());\n+        assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC()));\n+        assertSerialization(DurationFieldType.weeks());\n+    }\n+\n+    public void test_days() throws Exception {\n+        assertEquals(DurationFieldType.days(), DurationFieldType.days());\n+        assertEquals(\"days\", DurationFieldType.days().getName());\n+        assertEquals(CopticChronology.getInstanceUTC().days(), DurationFieldType.days().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().days().isSupported(), DurationFieldType.days().isSupported(CopticChronology.getInstanceUTC()));\n+        assertSerialization(DurationFieldType.days());\n+    }\n+\n+    public void test_halfdays() throws Exception {\n+        assertEquals(DurationFieldType.halfdays(), DurationFieldType.halfdays());\n+        assertEquals(\"halfdays\", DurationFieldType.halfdays().getName());\n+        assertEquals(CopticChronology.getInstanceUTC().halfdays(), DurationFieldType.halfdays().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().halfdays().isSupported(), DurationFieldType.halfdays().isSupported(CopticChronology.getInstanceUTC()));\n+        assertSerialization(DurationFieldType.halfdays());\n+    }\n+\n+    public void test_hours() throws Exception {\n+        assertEquals(DurationFieldType.hours(), DurationFieldType.hours());\n+        assertEquals(\"hours\", DurationFieldType.hours().getName());\n+        assertEquals(CopticChronology.getInstanceUTC().hours(), DurationFieldType.hours().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().hours().isSupported(), DurationFieldType.hours().isSupported(CopticChronology.getInstanceUTC()));\n+        assertSerialization(DurationFieldType.hours());\n+    }\n+\n+    public void test_minutes() throws Exception {\n+        assertEquals(DurationFieldType.minutes(), DurationFieldType.minutes());\n+        assertEquals(\"minutes\", DurationFieldType.minutes().getName());\n+        assertEquals(CopticChronology.getInstanceUTC().minutes(), DurationFieldType.minutes().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().minutes().isSupported(), DurationFieldType.minutes().isSupported(CopticChronology.getInstanceUTC()));\n+        assertSerialization(DurationFieldType.minutes());\n+    }\n+\n+    public void test_seconds() throws Exception {\n+        assertEquals(DurationFieldType.seconds(), DurationFieldType.seconds());\n+        assertEquals(\"seconds\", DurationFieldType.seconds().getName());\n+        assertEquals(CopticChronology.getInstanceUTC().seconds(), DurationFieldType.seconds().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().seconds().isSupported(), DurationFieldType.seconds().isSupported(CopticChronology.getInstanceUTC()));\n+        assertSerialization(DurationFieldType.seconds());\n+    }\n+\n+    public void test_millis() throws Exception {\n+        assertEquals(DurationFieldType.millis(), DurationFieldType.millis());\n+        assertEquals(\"millis\", DurationFieldType.millis().getName());\n+        assertEquals(CopticChronology.getInstanceUTC().millis(), DurationFieldType.millis().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().millis().isSupported(), DurationFieldType.millis().isSupported(CopticChronology.getInstanceUTC()));\n+        assertSerialization(DurationFieldType.millis());\n+    }\n+\n+    public void test_other() throws Exception {\n+        assertEquals(1, DurationFieldType.class.getDeclaredClasses().length);\n+        Class cls = DurationFieldType.class.getDeclaredClasses()[0];\n+        assertEquals(1, cls.getDeclaredConstructors().length);\n+        Constructor con = cls.getDeclaredConstructors()[0];\n+        Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n+        DurationFieldType type = (DurationFieldType) con.newInstance(params);\n+        \n+        assertEquals(\"other\", type.getName());\n+        try {\n+            type.getField(CopticChronology.getInstanceUTC());\n+            fail();\n+        } catch (InternalError ex) {}\n+        DurationFieldType result = doSerialization(type);\n+        assertEquals(type.getName(), result.getName());\n+        assertNotSame(type, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private void assertSerialization(DurationFieldType type) throws Exception {\n+        DurationFieldType result = doSerialization(type);\n+        assertSame(type, result);\n+    }\n+\n+    private DurationFieldType doSerialization(DurationFieldType type) throws Exception {\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(type);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        DurationFieldType result = (DurationFieldType) ois.readObject();\n+        ois.close();\n+        return result;\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestDuration_Basics.java\n+/*\n+ *  Copyright 2001-2009 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.base.AbstractDuration;\n+import org.joda.time.base.BaseDuration;\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * This class is a Junit unit test for Duration.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestDuration_Basics extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestDuration_Basics.class);\n+    }\n+\n+    public TestDuration_Basics(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetMillis() {\n+        Duration test = new Duration(0L);\n+        assertEquals(0, test.getMillis());\n+        \n+        test = new Duration(1234567890L);\n+        assertEquals(1234567890L, test.getMillis());\n+    }\n+\n+    public void testEqualsHashCode() {\n+        Duration test1 = new Duration(123L);\n+        Duration test2 = new Duration(123L);\n+        assertEquals(true, test1.equals(test2));\n+        assertEquals(true, test2.equals(test1));\n+        assertEquals(true, test1.equals(test1));\n+        assertEquals(true, test2.equals(test2));\n+        assertEquals(true, test1.hashCode() == test2.hashCode());\n+        assertEquals(true, test1.hashCode() == test1.hashCode());\n+        assertEquals(true, test2.hashCode() == test2.hashCode());\n+        \n+        Duration test3 = new Duration(321L);\n+        assertEquals(false, test1.equals(test3));\n+        assertEquals(false, test2.equals(test3));\n+        assertEquals(false, test3.equals(test1));\n+        assertEquals(false, test3.equals(test2));\n+        assertEquals(false, test1.hashCode() == test3.hashCode());\n+        assertEquals(false, test2.hashCode() == test3.hashCode());\n+        \n+        assertEquals(false, test1.equals(\"Hello\"));\n+        assertEquals(true, test1.equals(new MockDuration(123L)));\n+    }\n+    \n+    class MockDuration extends AbstractDuration {\n+        private final long iValue;\n+        public MockDuration(long value) {\n+            super();\n+            iValue = value;\n+        }\n+        public long getMillis() {\n+            return iValue;\n+        }\n+    }\n+\n+    public void testCompareTo() {\n+        Duration test1 = new Duration(123L);\n+        Duration test1a = new Duration(123L);\n+        assertEquals(0, test1.compareTo(test1a));\n+        assertEquals(0, test1a.compareTo(test1));\n+        assertEquals(0, test1.compareTo(test1));\n+        assertEquals(0, test1a.compareTo(test1a));\n+        \n+        Duration test2 = new Duration(321L);\n+        assertEquals(-1, test1.compareTo(test2));\n+        assertEquals(+1, test2.compareTo(test1));\n+        \n+        assertEquals(+1, test2.compareTo(new MockDuration(123L)));\n+        assertEquals(0, test1.compareTo(new MockDuration(123L)));\n+        \n+        try {\n+            test1.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+//        try {\n+//            test1.compareTo(new Long(123L));\n+//            fail();\n+//        } catch (ClassCastException ex) {}\n+    }\n+\n+    public void testIsEqual() {\n+        Duration test1 = new Duration(123L);\n+        Duration test1a = new Duration(123L);\n+        assertEquals(true, test1.isEqual(test1a));\n+        assertEquals(true, test1a.isEqual(test1));\n+        assertEquals(true, test1.isEqual(test1));\n+        assertEquals(true, test1a.isEqual(test1a));\n+        \n+        Duration test2 = new Duration(321L);\n+        assertEquals(false, test1.isEqual(test2));\n+        assertEquals(false, test2.isEqual(test1));\n+        \n+        assertEquals(false, test2.isEqual(new MockDuration(123L)));\n+        assertEquals(true, test1.isEqual(new MockDuration(123L)));\n+        assertEquals(false, test1.isEqual(null));\n+        assertEquals(true, new Duration(0L).isEqual(null));\n+    }\n+    \n+    public void testIsBefore() {\n+        Duration test1 = new Duration(123L);\n+        Duration test1a = new Duration(123L);\n+        assertEquals(false, test1.isShorterThan(test1a));\n+        assertEquals(false, test1a.isShorterThan(test1));\n+        assertEquals(false, test1.isShorterThan(test1));\n+        assertEquals(false, test1a.isShorterThan(test1a));\n+        \n+        Duration test2 = new Duration(321L);\n+        assertEquals(true, test1.isShorterThan(test2));\n+        assertEquals(false, test2.isShorterThan(test1));\n+        \n+        assertEquals(false, test2.isShorterThan(new MockDuration(123L)));\n+        assertEquals(false, test1.isShorterThan(new MockDuration(123L)));\n+        assertEquals(false, test1.isShorterThan(null));\n+        assertEquals(false, new Duration(0L).isShorterThan(null));\n+    }\n+    \n+    public void testIsAfter() {\n+        Duration test1 = new Duration(123L);\n+        Duration test1a = new Duration(123L);\n+        assertEquals(false, test1.isLongerThan(test1a));\n+        assertEquals(false, test1a.isLongerThan(test1));\n+        assertEquals(false, test1.isLongerThan(test1));\n+        assertEquals(false, test1a.isLongerThan(test1a));\n+        \n+        Duration test2 = new Duration(321L);\n+        assertEquals(false, test1.isLongerThan(test2));\n+        assertEquals(true, test2.isLongerThan(test1));\n+        \n+        assertEquals(true, test2.isLongerThan(new MockDuration(123L)));\n+        assertEquals(false, test1.isLongerThan(new MockDuration(123L)));\n+        assertEquals(true, test1.isLongerThan(null));\n+        assertEquals(false, new Duration(0L).isLongerThan(null));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        Duration test = new Duration(123L);\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        Duration result = (Duration) ois.readObject();\n+        ois.close();\n+        \n+        assertEquals(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetStandardSeconds() {\n+        Duration test = new Duration(0L);\n+        assertEquals(0, test.getStandardSeconds());\n+        test = new Duration(1L);\n+        assertEquals(0, test.getStandardSeconds());\n+        test = new Duration(999L);\n+        assertEquals(0, test.getStandardSeconds());\n+        test = new Duration(1000L);\n+        assertEquals(1, test.getStandardSeconds());\n+        test = new Duration(1001L);\n+        assertEquals(1, test.getStandardSeconds());\n+        test = new Duration(1999L);\n+        assertEquals(1, test.getStandardSeconds());\n+        test = new Duration(2000L);\n+        assertEquals(2, test.getStandardSeconds());\n+        test = new Duration(-1L);\n+        assertEquals(0, test.getStandardSeconds());\n+        test = new Duration(-999L);\n+        assertEquals(0, test.getStandardSeconds());\n+        test = new Duration(-1000L);\n+        assertEquals(-1, test.getStandardSeconds());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        long length = (365L + 2L * 30L + 3L * 7L + 4L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 845L;\n+        Duration test = new Duration(length);\n+        assertEquals(\"PT\" + (length / 1000) + \".\" + (length % 1000) + \"S\", test.toString());\n+        \n+        test = new Duration(0L);\n+        assertEquals(\"PT0S\", test.toString());\n+        \n+        test = new Duration(12345L);\n+        assertEquals(\"PT12.345S\", test.toString());\n+        \n+        test = new Duration(-12345L);\n+        assertEquals(\"PT-12.345S\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDuration1() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.toDuration();\n+        assertSame(test, result);\n+    }\n+    \n+    public void testToDuration2() {\n+        MockDuration test = new MockDuration(123L);\n+        Duration result = test.toDuration();\n+        assertNotSame(test, result);\n+        assertEquals(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToStandardDays() {\n+        Duration test = new Duration(0L);\n+        assertEquals(Days.days(0), test.toStandardDays());\n+        test = new Duration(1L);\n+        assertEquals(Days.days(0), test.toStandardDays());\n+        test = new Duration(24 * 60 * 60000L - 1);\n+        assertEquals(Days.days(0), test.toStandardDays());\n+        test = new Duration(24 * 60 * 60000L);\n+        assertEquals(Days.days(1), test.toStandardDays());\n+        test = new Duration(24 * 60 * 60000L + 1);\n+        assertEquals(Days.days(1), test.toStandardDays());\n+        test = new Duration(2 * 24 * 60 * 60000L - 1);\n+        assertEquals(Days.days(1), test.toStandardDays());\n+        test = new Duration(2 * 24 * 60 * 60000L);\n+        assertEquals(Days.days(2), test.toStandardDays());\n+        test = new Duration(-1L);\n+        assertEquals(Days.days(0), test.toStandardDays());\n+        test = new Duration(-24 * 60 * 60000L + 1);\n+        assertEquals(Days.days(0), test.toStandardDays());\n+        test = new Duration(-24 * 60 * 60000L);\n+        assertEquals(Days.days(-1), test.toStandardDays());\n+    }\n+\n+    public void testToStandardDays_overflow() {\n+        Duration test = new Duration((((long) Integer.MAX_VALUE) + 1) * 24L * 60L * 60000L);\n+        try {\n+            test.toStandardDays();\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToStandardHours() {\n+        Duration test = new Duration(0L);\n+        assertEquals(Hours.hours(0), test.toStandardHours());\n+        test = new Duration(1L);\n+        assertEquals(Hours.hours(0), test.toStandardHours());\n+        test = new Duration(3600000L - 1);\n+        assertEquals(Hours.hours(0), test.toStandardHours());\n+        test = new Duration(3600000L);\n+        assertEquals(Hours.hours(1), test.toStandardHours());\n+        test = new Duration(3600000L + 1);\n+        assertEquals(Hours.hours(1), test.toStandardHours());\n+        test = new Duration(2 * 3600000L - 1);\n+        assertEquals(Hours.hours(1), test.toStandardHours());\n+        test = new Duration(2 * 3600000L);\n+        assertEquals(Hours.hours(2), test.toStandardHours());\n+        test = new Duration(-1L);\n+        assertEquals(Hours.hours(0), test.toStandardHours());\n+        test = new Duration(-3600000L + 1);\n+        assertEquals(Hours.hours(0), test.toStandardHours());\n+        test = new Duration(-3600000L);\n+        assertEquals(Hours.hours(-1), test.toStandardHours());\n+    }\n+\n+    public void testToStandardHours_overflow() {\n+        Duration test = new Duration(((long) Integer.MAX_VALUE) * 3600000L + 3600000L);\n+        try {\n+            test.toStandardHours();\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToStandardMinutes() {\n+        Duration test = new Duration(0L);\n+        assertEquals(Minutes.minutes(0), test.toStandardMinutes());\n+        test = new Duration(1L);\n+        assertEquals(Minutes.minutes(0), test.toStandardMinutes());\n+        test = new Duration(60000L - 1);\n+        assertEquals(Minutes.minutes(0), test.toStandardMinutes());\n+        test = new Duration(60000L);\n+        assertEquals(Minutes.minutes(1), test.toStandardMinutes());\n+        test = new Duration(60000L + 1);\n+        assertEquals(Minutes.minutes(1), test.toStandardMinutes());\n+        test = new Duration(2 * 60000L - 1);\n+        assertEquals(Minutes.minutes(1), test.toStandardMinutes());\n+        test = new Duration(2 * 60000L);\n+        assertEquals(Minutes.minutes(2), test.toStandardMinutes());\n+        test = new Duration(-1L);\n+        assertEquals(Minutes.minutes(0), test.toStandardMinutes());\n+        test = new Duration(-60000L + 1);\n+        assertEquals(Minutes.minutes(0), test.toStandardMinutes());\n+        test = new Duration(-60000L);\n+        assertEquals(Minutes.minutes(-1), test.toStandardMinutes());\n+    }\n+\n+    public void testToStandardMinutes_overflow() {\n+        Duration test = new Duration(((long) Integer.MAX_VALUE) * 60000L + 60000L);\n+        try {\n+            test.toStandardMinutes();\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToStandardSeconds() {\n+        Duration test = new Duration(0L);\n+        assertEquals(Seconds.seconds(0), test.toStandardSeconds());\n+        test = new Duration(1L);\n+        assertEquals(Seconds.seconds(0), test.toStandardSeconds());\n+        test = new Duration(999L);\n+        assertEquals(Seconds.seconds(0), test.toStandardSeconds());\n+        test = new Duration(1000L);\n+        assertEquals(Seconds.seconds(1), test.toStandardSeconds());\n+        test = new Duration(1001L);\n+        assertEquals(Seconds.seconds(1), test.toStandardSeconds());\n+        test = new Duration(1999L);\n+        assertEquals(Seconds.seconds(1), test.toStandardSeconds());\n+        test = new Duration(2000L);\n+        assertEquals(Seconds.seconds(2), test.toStandardSeconds());\n+        test = new Duration(-1L);\n+        assertEquals(Seconds.seconds(0), test.toStandardSeconds());\n+        test = new Duration(-999L);\n+        assertEquals(Seconds.seconds(0), test.toStandardSeconds());\n+        test = new Duration(-1000L);\n+        assertEquals(Seconds.seconds(-1), test.toStandardSeconds());\n+    }\n+\n+    public void testToStandardSeconds_overflow() {\n+        Duration test = new Duration(((long) Integer.MAX_VALUE) * 1000L + 1000L);\n+        try {\n+            test.toStandardSeconds();\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToPeriod() {\n+        long length =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        Duration test = new Duration(length);\n+        Period result = test.toPeriod();\n+        assertEquals(new Period(test), result);\n+        assertEquals(new Period(test.getMillis()), result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToPeriod_PeriodType() {\n+        long length =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        Duration test = new Duration(length);\n+        Period result = test.toPeriod(PeriodType.standard().withMillisRemoved());\n+        assertEquals(new Period(test, PeriodType.standard().withMillisRemoved()), result);\n+        assertEquals(new Period(test.getMillis(), PeriodType.standard().withMillisRemoved()), result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToPeriod_Chronology() {\n+        long length =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        Duration test = new Duration(length);\n+        Period result = test.toPeriod(ISOChronology.getInstanceUTC());\n+        assertEquals(new Period(test, ISOChronology.getInstanceUTC()), result);\n+        assertEquals(new Period(test.getMillis(), ISOChronology.getInstanceUTC()), result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToPeriod_PeriodType_Chronology() {\n+        long length =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        Duration test = new Duration(length);\n+        Period result = test.toPeriod(PeriodType.standard().withMillisRemoved(), ISOChronology.getInstanceUTC());\n+        assertEquals(new Period(test, PeriodType.standard().withMillisRemoved(), ISOChronology.getInstanceUTC()), result);\n+        assertEquals(new Period(test.getMillis(), PeriodType.standard().withMillisRemoved(), ISOChronology.getInstanceUTC()), result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToPeriodFrom() {\n+        long length =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        Duration test = new Duration(length);\n+        DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        Period result = test.toPeriodFrom(dt);\n+        assertEquals(new Period(dt, test), result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToPeriodFrom_PeriodType() {\n+        long length =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        Duration test = new Duration(length);\n+        DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        Period result = test.toPeriodFrom(dt, PeriodType.standard().withMillisRemoved());\n+        assertEquals(new Period(dt, test, PeriodType.standard().withMillisRemoved()), result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToPeriodTo() {\n+        long length =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        Duration test = new Duration(length);\n+        DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        Period result = test.toPeriodTo(dt);\n+        assertEquals(new Period(test, dt), result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToPeriodTo_PeriodType() {\n+        long length =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        Duration test = new Duration(length);\n+        DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        Period result = test.toPeriodTo(dt, PeriodType.standard().withMillisRemoved());\n+        assertEquals(new Period(test, dt, PeriodType.standard().withMillisRemoved()), result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToIntervalFrom() {\n+        long length =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        Duration test = new Duration(length);\n+        DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        Interval result = test.toIntervalFrom(dt);\n+        assertEquals(new Interval(dt, test), result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToIntervalTo() {\n+        long length =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        Duration test = new Duration(length);\n+        DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        Interval result = test.toIntervalTo(dt);\n+        assertEquals(new Interval(test, dt), result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithMillis1() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.withMillis(123L);\n+        assertSame(test, result);\n+    }\n+\n+    public void testWithMillis2() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.withMillis(1234567890L);\n+        assertEquals(1234567890L, result.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithDurationAdded_long_int1() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.withDurationAdded(8000L, 1);\n+        assertEquals(8123L, result.getMillis());\n+    }\n+\n+    public void testWithDurationAdded_long_int2() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.withDurationAdded(8000L, 2);\n+        assertEquals(16123L, result.getMillis());\n+    }\n+\n+    public void testWithDurationAdded_long_int3() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.withDurationAdded(8000L, -1);\n+        assertEquals((123L - 8000L), result.getMillis());\n+    }\n+\n+    public void testWithDurationAdded_long_int4() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.withDurationAdded(0L, 1);\n+        assertSame(test, result);\n+    }\n+\n+    public void testWithDurationAdded_long_int5() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.withDurationAdded(8000L, 0);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPlus_long1() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.plus(8000L);\n+        assertEquals(8123L, result.getMillis());\n+    }\n+\n+    public void testPlus_long2() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.plus(0L);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMinus_long1() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.minus(8000L);\n+        assertEquals(123L - 8000L, result.getMillis());\n+    }\n+\n+    public void testMinus_long2() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.minus(0L);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithDurationAdded_RD_int1() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.withDurationAdded(new Duration(8000L), 1);\n+        assertEquals(8123L, result.getMillis());\n+    }\n+\n+    public void testWithDurationAdded_RD_int2() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.withDurationAdded(new Duration(8000L), 2);\n+        assertEquals(16123L, result.getMillis());\n+    }\n+\n+    public void testWithDurationAdded_RD_int3() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.withDurationAdded(new Duration(8000L), -1);\n+        assertEquals((123L - 8000L), result.getMillis());\n+    }\n+\n+    public void testWithDurationAdded_RD_int4() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.withDurationAdded(new Duration(0L), 1);\n+        assertSame(test, result);\n+    }\n+\n+    public void testWithDurationAdded_RD_int5() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.withDurationAdded(new Duration(8000L), 0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testWithDurationAdded_RD_int6() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.withDurationAdded(null, 0);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPlus_RD1() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.plus(new Duration(8000L));\n+        assertEquals(8123L, result.getMillis());\n+    }\n+\n+    public void testPlus_RD2() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.plus(new Duration(0L));\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlus_RD3() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.plus(null);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMinus_RD1() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.minus(new Duration(8000L));\n+        assertEquals(123L - 8000L, result.getMillis());\n+    }\n+\n+    public void testMinus_RD2() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.minus(new Duration(0L));\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinus_RD3() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.minus(null);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMutableDuration() {\n+        // no MutableDuration, so...\n+        MockMutableDuration test = new MockMutableDuration(123L);\n+        assertEquals(123L, test.getMillis());\n+        \n+        test.setMillis(2345L);\n+        assertEquals(2345L, test.getMillis());\n+    }\n+\n+    static class MockMutableDuration extends BaseDuration {\n+        public MockMutableDuration(long duration) {\n+            super(duration);\n+        }\n+        public void setMillis(long duration) {\n+            super.setMillis(duration);\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestDuration_Constructors.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * This class is a JUnit test for Duration.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestDuration_Constructors extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestDuration_Constructors.class);\n+    }\n+\n+    public TestDuration_Constructors(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor ()\n+     */\n+    public void testZERO() throws Throwable {\n+        Duration test = Duration.ZERO;\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_standardDays_long() throws Throwable {\n+        Duration test = Duration.standardDays(1);\n+        assertEquals(24L * 60L * 60L * 1000L, test.getMillis());\n+        \n+        test = Duration.standardDays(2);\n+        assertEquals(2L * 24L * 60L * 60L * 1000L, test.getMillis());\n+        \n+        test = Duration.standardDays(0);\n+        assertSame(Duration.ZERO, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_standardHours_long() throws Throwable {\n+        Duration test = Duration.standardHours(1);\n+        assertEquals(60L * 60L * 1000L, test.getMillis());\n+        \n+        test = Duration.standardHours(2);\n+        assertEquals(2L * 60L * 60L * 1000L, test.getMillis());\n+        \n+        test = Duration.standardHours(0);\n+        assertSame(Duration.ZERO, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_standardMinutes_long() throws Throwable {\n+        Duration test = Duration.standardMinutes(1);\n+        assertEquals(60L * 1000L, test.getMillis());\n+        \n+        test = Duration.standardMinutes(2);\n+        assertEquals(2L * 60L * 1000L, test.getMillis());\n+        \n+        test = Duration.standardMinutes(0);\n+        assertSame(Duration.ZERO, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_standardSeconds_long() throws Throwable {\n+        Duration test = Duration.standardSeconds(1);\n+        assertEquals(1000L, test.getMillis());\n+        \n+        test = Duration.standardSeconds(2);\n+        assertEquals(2L * 1000L, test.getMillis());\n+        \n+        test = Duration.standardSeconds(0);\n+        assertSame(Duration.ZERO, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_millis_long() throws Throwable {\n+        Duration test = Duration.millis(1);\n+        assertEquals(1L, test.getMillis());\n+        \n+        test = Duration.millis(2);\n+        assertEquals(2L, test.getMillis());\n+        \n+        test = Duration.millis(0);\n+        assertSame(Duration.ZERO, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long1() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        Duration test = new Duration(length);\n+        assertEquals(length, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_long1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Duration test = new Duration(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RI_RI1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Duration test = new Duration(dt1, dt2);\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getMillis());\n+    }\n+\n+    public void testConstructor_RI_RI2() throws Throwable {\n+        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n+        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        Duration test = new Duration(dt1, dt2);\n+        assertEquals(dt2.getMillis() - TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    public void testConstructor_RI_RI3() throws Throwable {\n+        DateTime dt1 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        DateTime dt2 = null;  // 2002-06-09T01:00+01:00\n+        Duration test = new Duration(dt1, dt2);\n+        assertEquals(TEST_TIME_NOW - dt1.getMillis(), test.getMillis());\n+    }\n+\n+    public void testConstructor_RI_RI4() throws Throwable {\n+        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n+        DateTime dt2 = null;  // 2002-06-09T01:00+01:00\n+        Duration test = new Duration(dt1, dt2);\n+        assertEquals(0L, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (Object)\n+     */\n+    public void testConstructor_Object1() throws Throwable {\n+        Duration test = new Duration(\"PT72.345S\");\n+        assertEquals(72345, test.getMillis());\n+    }\n+\n+    public void testConstructor_Object2() throws Throwable {\n+        Duration test = new Duration((Object) null);\n+        assertEquals(0L, test.getMillis());\n+    }\n+\n+    public void testConstructor_Object3() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        Long base = new Long(length);\n+        Duration test = new Duration(base);\n+        assertEquals(length, test.getMillis());\n+    }\n+\n+    public void testConstructor_Object4() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Duration base = new Duration(dt1, dt2);\n+        Duration test = new Duration(base);\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getMillis());\n+    }\n+\n+    public void testConstructor_Object5() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Interval base = new Interval(dt1, dt2);\n+        Duration test = new Duration(base);\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getMillis());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestHours.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * This class is a Junit unit test for Hours.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestHours extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestHours.class);\n+    }\n+\n+    public TestHours(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+    }\n+\n+    protected void tearDown() throws Exception {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstants() {\n+        assertEquals(0, Hours.ZERO.getHours());\n+        assertEquals(1, Hours.ONE.getHours());\n+        assertEquals(2, Hours.TWO.getHours());\n+        assertEquals(3, Hours.THREE.getHours());\n+        assertEquals(4, Hours.FOUR.getHours());\n+        assertEquals(5, Hours.FIVE.getHours());\n+        assertEquals(6, Hours.SIX.getHours());\n+        assertEquals(7, Hours.SEVEN.getHours());\n+        assertEquals(8, Hours.EIGHT.getHours());\n+        assertEquals(Integer.MAX_VALUE, Hours.MAX_VALUE.getHours());\n+        assertEquals(Integer.MIN_VALUE, Hours.MIN_VALUE.getHours());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_hours_int() {\n+        assertSame(Hours.ZERO, Hours.hours(0));\n+        assertSame(Hours.ONE, Hours.hours(1));\n+        assertSame(Hours.TWO, Hours.hours(2));\n+        assertSame(Hours.THREE, Hours.hours(3));\n+        assertSame(Hours.FOUR, Hours.hours(4));\n+        assertSame(Hours.FIVE, Hours.hours(5));\n+        assertSame(Hours.SIX, Hours.hours(6));\n+        assertSame(Hours.SEVEN, Hours.hours(7));\n+        assertSame(Hours.EIGHT, Hours.hours(8));\n+        assertSame(Hours.MAX_VALUE, Hours.hours(Integer.MAX_VALUE));\n+        assertSame(Hours.MIN_VALUE, Hours.hours(Integer.MIN_VALUE));\n+        assertEquals(-1, Hours.hours(-1).getHours());\n+        assertEquals(9, Hours.hours(9).getHours());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_hoursBetween_RInstant() {\n+        DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);\n+        DateTime end1 = new DateTime(2006, 6, 9, 15, 0, 0, 0, PARIS);\n+        DateTime end2 = new DateTime(2006, 6, 9, 18, 0, 0, 0, PARIS);\n+        \n+        assertEquals(3, Hours.hoursBetween(start, end1).getHours());\n+        assertEquals(0, Hours.hoursBetween(start, start).getHours());\n+        assertEquals(0, Hours.hoursBetween(end1, end1).getHours());\n+        assertEquals(-3, Hours.hoursBetween(end1, start).getHours());\n+        assertEquals(6, Hours.hoursBetween(start, end2).getHours());\n+    }\n+\n+    public void testFactory_hoursBetween_RPartial() {\n+        LocalTime start = new LocalTime(12, 0);\n+        LocalTime end1 = new LocalTime(15, 0);\n+        TimeOfDay end2 = new TimeOfDay(18, 0);\n+        \n+        assertEquals(3, Hours.hoursBetween(start, end1).getHours());\n+        assertEquals(0, Hours.hoursBetween(start, start).getHours());\n+        assertEquals(0, Hours.hoursBetween(end1, end1).getHours());\n+        assertEquals(-3, Hours.hoursBetween(end1, start).getHours());\n+        assertEquals(6, Hours.hoursBetween(start, end2).getHours());\n+    }\n+\n+    public void testFactory_hoursIn_RInterval() {\n+        DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);\n+        DateTime end1 = new DateTime(2006, 6, 9, 15, 0, 0, 0, PARIS);\n+        DateTime end2 = new DateTime(2006, 6, 9, 18, 0, 0, 0, PARIS);\n+        \n+        assertEquals(0, Hours.hoursIn((ReadableInterval) null).getHours());\n+        assertEquals(3, Hours.hoursIn(new Interval(start, end1)).getHours());\n+        assertEquals(0, Hours.hoursIn(new Interval(start, start)).getHours());\n+        assertEquals(0, Hours.hoursIn(new Interval(end1, end1)).getHours());\n+        assertEquals(6, Hours.hoursIn(new Interval(start, end2)).getHours());\n+    }\n+\n+    public void testFactory_standardHoursIn_RPeriod() {\n+        assertEquals(0, Hours.standardHoursIn((ReadablePeriod) null).getHours());\n+        assertEquals(0, Hours.standardHoursIn(Period.ZERO).getHours());\n+        assertEquals(1, Hours.standardHoursIn(new Period(0, 0, 0, 0, 1, 0, 0, 0)).getHours());\n+        assertEquals(123, Hours.standardHoursIn(Period.hours(123)).getHours());\n+        assertEquals(-987, Hours.standardHoursIn(Period.hours(-987)).getHours());\n+        assertEquals(1, Hours.standardHoursIn(Period.minutes(119)).getHours());\n+        assertEquals(2, Hours.standardHoursIn(Period.minutes(120)).getHours());\n+        assertEquals(2, Hours.standardHoursIn(Period.minutes(121)).getHours());\n+        assertEquals(48, Hours.standardHoursIn(Period.days(2)).getHours());\n+        try {\n+            Hours.standardHoursIn(Period.months(1));\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expeceted\n+        }\n+    }\n+\n+    public void testFactory_parseHours_String() {\n+        assertEquals(0, Hours.parseHours((String) null).getHours());\n+        assertEquals(0, Hours.parseHours(\"PT0H\").getHours());\n+        assertEquals(1, Hours.parseHours(\"PT1H\").getHours());\n+        assertEquals(-3, Hours.parseHours(\"PT-3H\").getHours());\n+        assertEquals(2, Hours.parseHours(\"P0Y0M0DT2H\").getHours());\n+        assertEquals(2, Hours.parseHours(\"PT2H0M\").getHours());\n+        try {\n+            Hours.parseHours(\"P1Y1D\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expeceted\n+        }\n+        try {\n+            Hours.parseHours(\"P1DT1H\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expeceted\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetMethods() {\n+        Hours test = Hours.hours(20);\n+        assertEquals(20, test.getHours());\n+    }\n+\n+    public void testGetFieldType() {\n+        Hours test = Hours.hours(20);\n+        assertEquals(DurationFieldType.hours(), test.getFieldType());\n+    }\n+\n+    public void testGetPeriodType() {\n+        Hours test = Hours.hours(20);\n+        assertEquals(PeriodType.hours(), test.getPeriodType());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsGreaterThan() {\n+        assertEquals(true, Hours.THREE.isGreaterThan(Hours.TWO));\n+        assertEquals(false, Hours.THREE.isGreaterThan(Hours.THREE));\n+        assertEquals(false, Hours.TWO.isGreaterThan(Hours.THREE));\n+        assertEquals(true, Hours.ONE.isGreaterThan(null));\n+        assertEquals(false, Hours.hours(-1).isGreaterThan(null));\n+    }\n+\n+    public void testIsLessThan() {\n+        assertEquals(false, Hours.THREE.isLessThan(Hours.TWO));\n+        assertEquals(false, Hours.THREE.isLessThan(Hours.THREE));\n+        assertEquals(true, Hours.TWO.isLessThan(Hours.THREE));\n+        assertEquals(false, Hours.ONE.isLessThan(null));\n+        assertEquals(true, Hours.hours(-1).isLessThan(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        Hours test = Hours.hours(20);\n+        assertEquals(\"PT20H\", test.toString());\n+        \n+        test = Hours.hours(-20);\n+        assertEquals(\"PT-20H\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        Hours test = Hours.SEVEN;\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        Hours result = (Hours) ois.readObject();\n+        ois.close();\n+        \n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToStandardWeeks() {\n+        Hours test = Hours.hours(24 * 7 * 2);\n+        Weeks expected = Weeks.weeks(2);\n+        assertEquals(expected, test.toStandardWeeks());\n+    }\n+\n+    public void testToStandardDays() {\n+        Hours test = Hours.hours(24 * 2);\n+        Days expected = Days.days(2);\n+        assertEquals(expected, test.toStandardDays());\n+    }\n+\n+    public void testToStandardMinutes() {\n+        Hours test = Hours.hours(3);\n+        Minutes expected = Minutes.minutes(3 * 60);\n+        assertEquals(expected, test.toStandardMinutes());\n+        \n+        try {\n+            Hours.MAX_VALUE.toStandardMinutes();\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testToStandardSeconds() {\n+        Hours test = Hours.hours(3);\n+        Seconds expected = Seconds.seconds(3 * 60 * 60);\n+        assertEquals(expected, test.toStandardSeconds());\n+        \n+        try {\n+            Hours.MAX_VALUE.toStandardSeconds();\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testToStandardDuration() {\n+        Hours test = Hours.hours(20);\n+        Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_HOUR);\n+        assertEquals(expected, test.toStandardDuration());\n+        \n+        expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_HOUR);\n+        assertEquals(expected, Hours.MAX_VALUE.toStandardDuration());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPlus_int() {\n+        Hours test2 = Hours.hours(2);\n+        Hours result = test2.plus(3);\n+        assertEquals(2, test2.getHours());\n+        assertEquals(5, result.getHours());\n+        \n+        assertEquals(1, Hours.ONE.plus(0).getHours());\n+        \n+        try {\n+            Hours.MAX_VALUE.plus(1);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testPlus_Hours() {\n+        Hours test2 = Hours.hours(2);\n+        Hours test3 = Hours.hours(3);\n+        Hours result = test2.plus(test3);\n+        assertEquals(2, test2.getHours());\n+        assertEquals(3, test3.getHours());\n+        assertEquals(5, result.getHours());\n+        \n+        assertEquals(1, Hours.ONE.plus(Hours.ZERO).getHours());\n+        assertEquals(1, Hours.ONE.plus((Hours) null).getHours());\n+        \n+        try {\n+            Hours.MAX_VALUE.plus(Hours.ONE);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testMinus_int() {\n+        Hours test2 = Hours.hours(2);\n+        Hours result = test2.minus(3);\n+        assertEquals(2, test2.getHours());\n+        assertEquals(-1, result.getHours());\n+        \n+        assertEquals(1, Hours.ONE.minus(0).getHours());\n+        \n+        try {\n+            Hours.MIN_VALUE.minus(1);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testMinus_Hours() {\n+        Hours test2 = Hours.hours(2);\n+        Hours test3 = Hours.hours(3);\n+        Hours result = test2.minus(test3);\n+        assertEquals(2, test2.getHours());\n+        assertEquals(3, test3.getHours());\n+        assertEquals(-1, result.getHours());\n+        \n+        assertEquals(1, Hours.ONE.minus(Hours.ZERO).getHours());\n+        assertEquals(1, Hours.ONE.minus((Hours) null).getHours());\n+        \n+        try {\n+            Hours.MIN_VALUE.minus(Hours.ONE);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testMultipliedBy_int() {\n+        Hours test = Hours.hours(2);\n+        assertEquals(6, test.multipliedBy(3).getHours());\n+        assertEquals(2, test.getHours());\n+        assertEquals(-6, test.multipliedBy(-3).getHours());\n+        assertSame(test, test.multipliedBy(1));\n+        \n+        Hours halfMax = Hours.hours(Integer.MAX_VALUE / 2 + 1);\n+        try {\n+            halfMax.multipliedBy(2);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testDividedBy_int() {\n+        Hours test = Hours.hours(12);\n+        assertEquals(6, test.dividedBy(2).getHours());\n+        assertEquals(12, test.getHours());\n+        assertEquals(4, test.dividedBy(3).getHours());\n+        assertEquals(3, test.dividedBy(4).getHours());\n+        assertEquals(2, test.dividedBy(5).getHours());\n+        assertEquals(2, test.dividedBy(6).getHours());\n+        assertSame(test, test.dividedBy(1));\n+        \n+        try {\n+            Hours.ONE.dividedBy(0);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testNegated() {\n+        Hours test = Hours.hours(12);\n+        assertEquals(-12, test.negated().getHours());\n+        assertEquals(12, test.getHours());\n+        \n+        try {\n+            Hours.MIN_VALUE.negated();\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddToLocalDate() {\n+        Hours test = Hours.hours(26);\n+        LocalDateTime date = new LocalDateTime(2006, 6, 1, 0, 0, 0, 0);\n+        LocalDateTime expected = new LocalDateTime(2006, 6, 2, 2, 0, 0, 0);\n+        assertEquals(expected, date.plus(test));\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestIllegalFieldValueException.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.GJChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.chrono.JulianChronology;\n+import org.joda.time.field.FieldUtils;\n+import org.joda.time.field.SkipDateTimeField;\n+\n+/**\n+ * Tests IllegalFieldValueException by triggering it from other methods.\n+ *\n+ * @author Brian S O'Neill\n+ */\n+public class TestIllegalFieldValueException extends TestCase {\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestIllegalFieldValueException.class);\n+    }\n+\n+    public TestIllegalFieldValueException(String name) {\n+        super(name);\n+    }\n+\n+    public void testVerifyValueBounds() {\n+        try {\n+            FieldUtils.verifyValueBounds(ISOChronology.getInstance().monthOfYear(), -5, 1, 31);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+            assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType());\n+            assertEquals(null, e.getDurationFieldType());\n+            assertEquals(\"monthOfYear\", e.getFieldName());\n+            assertEquals(new Integer(-5), e.getIllegalNumberValue());\n+            assertEquals(null, e.getIllegalStringValue());\n+            assertEquals(\"-5\", e.getIllegalValueAsString());\n+            assertEquals(new Integer(1), e.getLowerBound());\n+            assertEquals(new Integer(31), e.getUpperBound());\n+        }\n+\n+        try {\n+            FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), 27, 0, 23);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+            assertEquals(DateTimeFieldType.hourOfDay(), e.getDateTimeFieldType());\n+            assertEquals(null, e.getDurationFieldType());\n+            assertEquals(\"hourOfDay\", e.getFieldName());\n+            assertEquals(new Integer(27), e.getIllegalNumberValue());\n+            assertEquals(null, e.getIllegalStringValue());\n+            assertEquals(\"27\", e.getIllegalValueAsString());\n+            assertEquals(new Integer(0), e.getLowerBound());\n+            assertEquals(new Integer(23), e.getUpperBound());\n+        }\n+\n+        try {\n+            FieldUtils.verifyValueBounds(\"foo\", 1, 2, 3);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+            assertEquals(null, e.getDateTimeFieldType());\n+            assertEquals(null, e.getDurationFieldType());\n+            assertEquals(\"foo\", e.getFieldName());\n+            assertEquals(new Integer(1), e.getIllegalNumberValue());\n+            assertEquals(null, e.getIllegalStringValue());\n+            assertEquals(\"1\", e.getIllegalValueAsString());\n+            assertEquals(new Integer(2), e.getLowerBound());\n+            assertEquals(new Integer(3), e.getUpperBound());\n+        }\n+    }\n+\n+    public void testSkipDateTimeField() {\n+        DateTimeField field = new SkipDateTimeField\n+            (ISOChronology.getInstanceUTC(), ISOChronology.getInstanceUTC().year(), 1970);\n+        try {\n+            field.set(0, 1970);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+            assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType());\n+            assertEquals(null, e.getDurationFieldType());\n+            assertEquals(\"year\", e.getFieldName());\n+            assertEquals(new Integer(1970), e.getIllegalNumberValue());\n+            assertEquals(null, e.getIllegalStringValue());\n+            assertEquals(\"1970\", e.getIllegalValueAsString());\n+            assertEquals(null, e.getLowerBound());\n+            assertEquals(null, e.getUpperBound());\n+        }\n+    }\n+\n+    public void testSetText() {\n+        try {\n+            ISOChronology.getInstanceUTC().year().set(0, null, java.util.Locale.US);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+            assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType());\n+            assertEquals(null, e.getDurationFieldType());\n+            assertEquals(\"year\", e.getFieldName());\n+            assertEquals(null, e.getIllegalNumberValue());\n+            assertEquals(null, e.getIllegalStringValue());\n+            assertEquals(\"null\", e.getIllegalValueAsString());\n+            assertEquals(null, e.getLowerBound());\n+            assertEquals(null, e.getUpperBound());\n+        }\n+\n+        try {\n+            ISOChronology.getInstanceUTC().year().set(0, \"nineteen seventy\", java.util.Locale.US);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+            assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType());\n+            assertEquals(null, e.getDurationFieldType());\n+            assertEquals(\"year\", e.getFieldName());\n+            assertEquals(null, e.getIllegalNumberValue());\n+            assertEquals(\"nineteen seventy\", e.getIllegalStringValue());\n+            assertEquals(\"nineteen seventy\", e.getIllegalValueAsString());\n+            assertEquals(null, e.getLowerBound());\n+            assertEquals(null, e.getUpperBound());\n+        }\n+\n+        try {\n+            ISOChronology.getInstanceUTC().era().set(0, \"long ago\", java.util.Locale.US);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+            assertEquals(DateTimeFieldType.era(), e.getDateTimeFieldType());\n+            assertEquals(null, e.getDurationFieldType());\n+            assertEquals(\"era\", e.getFieldName());\n+            assertEquals(null, e.getIllegalNumberValue());\n+            assertEquals(\"long ago\", e.getIllegalStringValue());\n+            assertEquals(\"long ago\", e.getIllegalValueAsString());\n+            assertEquals(null, e.getLowerBound());\n+            assertEquals(null, e.getUpperBound());\n+        }\n+\n+        try {\n+            ISOChronology.getInstanceUTC().monthOfYear().set(0, \"spring\", java.util.Locale.US);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+            assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType());\n+            assertEquals(null, e.getDurationFieldType());\n+            assertEquals(\"monthOfYear\", e.getFieldName());\n+            assertEquals(null, e.getIllegalNumberValue());\n+            assertEquals(\"spring\", e.getIllegalStringValue());\n+            assertEquals(\"spring\", e.getIllegalValueAsString());\n+            assertEquals(null, e.getLowerBound());\n+            assertEquals(null, e.getUpperBound());\n+        }\n+\n+        try {\n+            ISOChronology.getInstanceUTC().dayOfWeek().set(0, \"yesterday\", java.util.Locale.US);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+            assertEquals(DateTimeFieldType.dayOfWeek(), e.getDateTimeFieldType());\n+            assertEquals(null, e.getDurationFieldType());\n+            assertEquals(\"dayOfWeek\", e.getFieldName());\n+            assertEquals(null, e.getIllegalNumberValue());\n+            assertEquals(\"yesterday\", e.getIllegalStringValue());\n+            assertEquals(\"yesterday\", e.getIllegalValueAsString());\n+            assertEquals(null, e.getLowerBound());\n+            assertEquals(null, e.getUpperBound());\n+        }\n+\n+        try {\n+            ISOChronology.getInstanceUTC().halfdayOfDay().set(0, \"morning\", java.util.Locale.US);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+            assertEquals(DateTimeFieldType.halfdayOfDay(), e.getDateTimeFieldType());\n+            assertEquals(null, e.getDurationFieldType());\n+            assertEquals(\"halfdayOfDay\", e.getFieldName());\n+            assertEquals(null, e.getIllegalNumberValue());\n+            assertEquals(\"morning\", e.getIllegalStringValue());\n+            assertEquals(\"morning\", e.getIllegalValueAsString());\n+            assertEquals(null, e.getLowerBound());\n+            assertEquals(null, e.getUpperBound());\n+        }\n+    }\n+\n+    public void testZoneTransition() {\n+        DateTime dt = new DateTime\n+            (2005, 4, 3, 1, 0, 0, 0, DateTimeZone.forID(\"America/Los_Angeles\"));\n+        try {\n+            dt.hourOfDay().setCopy(2);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+            assertEquals(DateTimeFieldType.hourOfDay(), e.getDateTimeFieldType());\n+            assertEquals(null, e.getDurationFieldType());\n+            assertEquals(\"hourOfDay\", e.getFieldName());\n+            assertEquals(new Integer(2), e.getIllegalNumberValue());\n+            assertEquals(null, e.getIllegalStringValue());\n+            assertEquals(\"2\", e.getIllegalValueAsString());\n+            assertEquals(null, e.getLowerBound());\n+            assertEquals(null, e.getUpperBound());\n+        }\n+    }\n+\n+    public void testJulianYearZero() {\n+        DateTime dt = new DateTime(JulianChronology.getInstanceUTC());\n+        try {\n+            dt.year().setCopy(0);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+            assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType());\n+            assertEquals(null, e.getDurationFieldType());\n+            assertEquals(\"year\", e.getFieldName());\n+            assertEquals(new Integer(0), e.getIllegalNumberValue());\n+            assertEquals(null, e.getIllegalStringValue());\n+            assertEquals(\"0\", e.getIllegalValueAsString());\n+            assertEquals(null, e.getLowerBound());\n+            assertEquals(null, e.getUpperBound());\n+        }\n+    }\n+\n+    public void testGJCutover() {\n+        DateTime dt = new DateTime(\"1582-10-04\", GJChronology.getInstanceUTC());\n+        try {\n+            dt.dayOfMonth().setCopy(5);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+            assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType());\n+            assertEquals(null, e.getDurationFieldType());\n+            assertEquals(\"dayOfMonth\", e.getFieldName());\n+            assertEquals(new Integer(5), e.getIllegalNumberValue());\n+            assertEquals(null, e.getIllegalStringValue());\n+            assertEquals(\"5\", e.getIllegalValueAsString());\n+            assertEquals(null, e.getLowerBound());\n+            assertEquals(null, e.getUpperBound());\n+        }\n+\n+        dt = new DateTime(\"1582-10-15\", GJChronology.getInstanceUTC());\n+        try {\n+            dt.dayOfMonth().setCopy(14);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+            assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType());\n+            assertEquals(null, e.getDurationFieldType());\n+            assertEquals(\"dayOfMonth\", e.getFieldName());\n+            assertEquals(new Integer(14), e.getIllegalNumberValue());\n+            assertEquals(null, e.getIllegalStringValue());\n+            assertEquals(\"14\", e.getIllegalValueAsString());\n+            assertEquals(null, e.getLowerBound());\n+            assertEquals(null, e.getUpperBound());\n+        }\n+    }\n+\n+    public void testReadablePartialValidate() {\n+        try {\n+            new YearMonthDay(1970, -5, 1);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+            assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType());\n+            assertEquals(null, e.getDurationFieldType());\n+            assertEquals(\"monthOfYear\", e.getFieldName());\n+            assertEquals(new Integer(-5), e.getIllegalNumberValue());\n+            assertEquals(null, e.getIllegalStringValue());\n+            assertEquals(\"-5\", e.getIllegalValueAsString());\n+            assertEquals(new Integer(1), e.getLowerBound());\n+            assertEquals(null, e.getUpperBound());\n+        }\n+\n+        try {\n+            new YearMonthDay(1970, 500, 1);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+            assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType());\n+            assertEquals(null, e.getDurationFieldType());\n+            assertEquals(\"monthOfYear\", e.getFieldName());\n+            assertEquals(new Integer(500), e.getIllegalNumberValue());\n+            assertEquals(null, e.getIllegalStringValue());\n+            assertEquals(\"500\", e.getIllegalValueAsString());\n+            assertEquals(null, e.getLowerBound());\n+            assertEquals(new Integer(12), e.getUpperBound());\n+        }\n+\n+        try {\n+            new YearMonthDay(1970, 2, 30);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+            assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType());\n+            assertEquals(null, e.getDurationFieldType());\n+            assertEquals(\"dayOfMonth\", e.getFieldName());\n+            assertEquals(new Integer(30), e.getIllegalNumberValue());\n+            assertEquals(null, e.getIllegalStringValue());\n+            assertEquals(\"30\", e.getIllegalValueAsString());\n+            assertEquals(null, e.getLowerBound());\n+            assertEquals(new Integer(28), e.getUpperBound());\n+        }\n+    }\n+\n+    // Test extra constructors not currently called by anything\n+    public void testOtherConstructors() {\n+        IllegalFieldValueException e = new IllegalFieldValueException\n+            (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n+        assertEquals(null, e.getDateTimeFieldType());\n+        assertEquals(DurationFieldType.days(), e.getDurationFieldType());\n+        assertEquals(\"days\", e.getFieldName());\n+        assertEquals(new Integer(1), e.getIllegalNumberValue());\n+        assertEquals(null, e.getIllegalStringValue());\n+        assertEquals(\"1\", e.getIllegalValueAsString());\n+        assertEquals(new Integer(2), e.getLowerBound());\n+        assertEquals(new Integer(3), e.getUpperBound());\n+\n+        e = new IllegalFieldValueException(DurationFieldType.months(), \"five\");\n+        assertEquals(null, e.getDateTimeFieldType());\n+        assertEquals(DurationFieldType.months(), e.getDurationFieldType());\n+        assertEquals(\"months\", e.getFieldName());\n+        assertEquals(null, e.getIllegalNumberValue());\n+        assertEquals(\"five\", e.getIllegalStringValue());\n+        assertEquals(\"five\", e.getIllegalValueAsString());\n+        assertEquals(null, e.getLowerBound());\n+        assertEquals(null, e.getUpperBound());\n+\n+        e = new IllegalFieldValueException(\"months\", \"five\");\n+        assertEquals(null, e.getDateTimeFieldType());\n+        assertEquals(null, e.getDurationFieldType());\n+        assertEquals(\"months\", e.getFieldName());\n+        assertEquals(null, e.getIllegalNumberValue());\n+        assertEquals(\"five\", e.getIllegalStringValue());\n+        assertEquals(\"five\", e.getIllegalValueAsString());\n+        assertEquals(null, e.getLowerBound());\n+        assertEquals(null, e.getUpperBound());\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestInstant_Basics.java\n+/*\n+ *  Copyright 2001-2009 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.lang.reflect.Modifier;\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.base.AbstractInstant;\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * This class is a Junit unit test for Instant.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestInstant_Basics extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestInstant_Basics.class);\n+    }\n+\n+    public TestInstant_Basics(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGet_DateTimeFieldType() {\n+        Instant test = new Instant();  // 2002-06-09\n+        assertEquals(1, test.get(DateTimeFieldType.era()));\n+        assertEquals(20, test.get(DateTimeFieldType.centuryOfEra()));\n+        assertEquals(2, test.get(DateTimeFieldType.yearOfCentury()));\n+        assertEquals(2002, test.get(DateTimeFieldType.yearOfEra()));\n+        assertEquals(2002, test.get(DateTimeFieldType.year()));\n+        assertEquals(6, test.get(DateTimeFieldType.monthOfYear()));\n+        assertEquals(9, test.get(DateTimeFieldType.dayOfMonth()));\n+        assertEquals(2002, test.get(DateTimeFieldType.weekyear()));\n+        assertEquals(23, test.get(DateTimeFieldType.weekOfWeekyear()));\n+        assertEquals(7, test.get(DateTimeFieldType.dayOfWeek()));\n+        assertEquals(160, test.get(DateTimeFieldType.dayOfYear()));\n+        assertEquals(0, test.get(DateTimeFieldType.halfdayOfDay()));\n+        assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday()));  // UTC zone\n+        assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay()));  // UTC zone\n+        assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday()));  // UTC zone\n+        assertEquals(0, test.get(DateTimeFieldType.hourOfDay()));  // UTC zone\n+        assertEquals(0, test.get(DateTimeFieldType.minuteOfHour()));\n+        assertEquals(0, test.get(DateTimeFieldType.minuteOfDay()));\n+        assertEquals(0, test.get(DateTimeFieldType.secondOfMinute()));\n+        assertEquals(0, test.get(DateTimeFieldType.secondOfDay()));\n+        assertEquals(0, test.get(DateTimeFieldType.millisOfSecond()));\n+        assertEquals(0, test.get(DateTimeFieldType.millisOfDay()));\n+        try {\n+            test.get((DateTimeFieldType) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testGet_DateTimeField() {\n+        Instant test = new Instant();  // 2002-06-09\n+        assertEquals(1, test.get(ISOChronology.getInstance().era()));\n+        assertEquals(20, test.get(ISOChronology.getInstance().centuryOfEra()));\n+        assertEquals(2, test.get(ISOChronology.getInstance().yearOfCentury()));\n+        assertEquals(2002, test.get(ISOChronology.getInstance().yearOfEra()));\n+        assertEquals(2002, test.get(ISOChronology.getInstance().year()));\n+        assertEquals(6, test.get(ISOChronology.getInstance().monthOfYear()));\n+        assertEquals(9, test.get(ISOChronology.getInstance().dayOfMonth()));\n+        assertEquals(2002, test.get(ISOChronology.getInstance().weekyear()));\n+        assertEquals(23, test.get(ISOChronology.getInstance().weekOfWeekyear()));\n+        assertEquals(7, test.get(ISOChronology.getInstance().dayOfWeek()));\n+        assertEquals(160, test.get(ISOChronology.getInstance().dayOfYear()));\n+        assertEquals(0, test.get(ISOChronology.getInstance().halfdayOfDay()));\n+        assertEquals(1, test.get(ISOChronology.getInstance().hourOfHalfday()));\n+        assertEquals(1, test.get(ISOChronology.getInstance().clockhourOfDay()));\n+        assertEquals(1, test.get(ISOChronology.getInstance().clockhourOfHalfday()));\n+        assertEquals(1, test.get(ISOChronology.getInstance().hourOfDay()));\n+        assertEquals(0, test.get(ISOChronology.getInstance().minuteOfHour()));\n+        assertEquals(60, test.get(ISOChronology.getInstance().minuteOfDay()));\n+        assertEquals(0, test.get(ISOChronology.getInstance().secondOfMinute()));\n+        assertEquals(60 * 60, test.get(ISOChronology.getInstance().secondOfDay()));\n+        assertEquals(0, test.get(ISOChronology.getInstance().millisOfSecond()));\n+        assertEquals(60 * 60 * 1000, test.get(ISOChronology.getInstance().millisOfDay()));\n+        try {\n+            test.get((DateTimeField) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testGetMethods() {\n+        Instant test = new Instant();\n+        \n+        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(DateTimeZone.UTC, test.getZone());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    public void testEqualsHashCode() {\n+        Instant test1 = new Instant(TEST_TIME1);\n+        Instant test2 = new Instant(TEST_TIME1);\n+        assertEquals(true, test1.equals(test2));\n+        assertEquals(true, test2.equals(test1));\n+        assertEquals(true, test1.equals(test1));\n+        assertEquals(true, test2.equals(test2));\n+        assertEquals(true, test1.hashCode() == test2.hashCode());\n+        assertEquals(true, test1.hashCode() == test1.hashCode());\n+        assertEquals(true, test2.hashCode() == test2.hashCode());\n+        \n+        Instant test3 = new Instant(TEST_TIME2);\n+        assertEquals(false, test1.equals(test3));\n+        assertEquals(false, test2.equals(test3));\n+        assertEquals(false, test3.equals(test1));\n+        assertEquals(false, test3.equals(test2));\n+        assertEquals(false, test1.hashCode() == test3.hashCode());\n+        assertEquals(false, test2.hashCode() == test3.hashCode());\n+        \n+        assertEquals(false, test1.equals(\"Hello\"));\n+        assertEquals(true, test1.equals(new MockInstant()));\n+        assertEquals(false, test1.equals(new DateTime(TEST_TIME1)));\n+    }\n+    \n+    class MockInstant extends AbstractInstant {\n+        public String toString() {\n+            return null;\n+        }\n+        public long getMillis() {\n+            return TEST_TIME1;\n+        }\n+        public Chronology getChronology() {\n+            return ISOChronology.getInstanceUTC();\n+        }\n+    }\n+\n+    public void testCompareTo() {\n+        Instant test1 = new Instant(TEST_TIME1);\n+        Instant test1a = new Instant(TEST_TIME1);\n+        assertEquals(0, test1.compareTo(test1a));\n+        assertEquals(0, test1a.compareTo(test1));\n+        assertEquals(0, test1.compareTo(test1));\n+        assertEquals(0, test1a.compareTo(test1a));\n+        \n+        Instant test2 = new Instant(TEST_TIME2);\n+        assertEquals(-1, test1.compareTo(test2));\n+        assertEquals(+1, test2.compareTo(test1));\n+        \n+        DateTime test3 = new DateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS));\n+        assertEquals(-1, test1.compareTo(test3));\n+        assertEquals(+1, test3.compareTo(test1));\n+        assertEquals(0, test3.compareTo(test2));\n+        \n+        assertEquals(+1, test2.compareTo(new MockInstant()));\n+        assertEquals(0, test1.compareTo(new MockInstant()));\n+        \n+        try {\n+            test1.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+//        try {\n+//            test1.compareTo(new Date());\n+//            fail();\n+//        } catch (ClassCastException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsEqual_long() {\n+        assertEquals(false, new Instant(TEST_TIME1).isEqual(TEST_TIME2));\n+        assertEquals(true, new Instant(TEST_TIME1).isEqual(TEST_TIME1));\n+        assertEquals(false, new Instant(TEST_TIME2).isEqual(TEST_TIME1));\n+    }\n+    \n+    public void testIsEqualNow() {\n+        assertEquals(false, new Instant(TEST_TIME_NOW - 1).isEqualNow());\n+        assertEquals(true, new Instant(TEST_TIME_NOW).isEqualNow());\n+        assertEquals(false, new Instant(TEST_TIME_NOW + 1).isEqualNow());\n+    }\n+    \n+    public void testIsEqual_RI() {\n+        Instant test1 = new Instant(TEST_TIME1);\n+        Instant test1a = new Instant(TEST_TIME1);\n+        assertEquals(true, test1.isEqual(test1a));\n+        assertEquals(true, test1a.isEqual(test1));\n+        assertEquals(true, test1.isEqual(test1));\n+        assertEquals(true, test1a.isEqual(test1a));\n+        \n+        Instant test2 = new Instant(TEST_TIME2);\n+        assertEquals(false, test1.isEqual(test2));\n+        assertEquals(false, test2.isEqual(test1));\n+        \n+        DateTime test3 = new DateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS));\n+        assertEquals(false, test1.isEqual(test3));\n+        assertEquals(false, test3.isEqual(test1));\n+        assertEquals(true, test3.isEqual(test2));\n+        \n+        assertEquals(false, test2.isEqual(new MockInstant()));\n+        assertEquals(true, test1.isEqual(new MockInstant()));\n+        \n+        assertEquals(false, new Instant(TEST_TIME_NOW + 1).isEqual(null));\n+        assertEquals(true, new Instant(TEST_TIME_NOW).isEqual(null));\n+        assertEquals(false, new Instant(TEST_TIME_NOW - 1).isEqual(null));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsBefore_long() {\n+        assertEquals(true, new Instant(TEST_TIME1).isBefore(TEST_TIME2));\n+        assertEquals(false, new Instant(TEST_TIME1).isBefore(TEST_TIME1));\n+        assertEquals(false, new Instant(TEST_TIME2).isBefore(TEST_TIME1));\n+    }\n+    \n+    public void testIsBeforeNow() {\n+        assertEquals(true, new Instant(TEST_TIME_NOW - 1).isBeforeNow());\n+        assertEquals(false, new Instant(TEST_TIME_NOW).isBeforeNow());\n+        assertEquals(false, new Instant(TEST_TIME_NOW + 1).isBeforeNow());\n+    }\n+    \n+    public void testIsBefore_RI() {\n+        Instant test1 = new Instant(TEST_TIME1);\n+        Instant test1a = new Instant(TEST_TIME1);\n+        assertEquals(false, test1.isBefore(test1a));\n+        assertEquals(false, test1a.isBefore(test1));\n+        assertEquals(false, test1.isBefore(test1));\n+        assertEquals(false, test1a.isBefore(test1a));\n+        \n+        Instant test2 = new Instant(TEST_TIME2);\n+        assertEquals(true, test1.isBefore(test2));\n+        assertEquals(false, test2.isBefore(test1));\n+        \n+        DateTime test3 = new DateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS));\n+        assertEquals(true, test1.isBefore(test3));\n+        assertEquals(false, test3.isBefore(test1));\n+        assertEquals(false, test3.isBefore(test2));\n+        \n+        assertEquals(false, test2.isBefore(new MockInstant()));\n+        assertEquals(false, test1.isBefore(new MockInstant()));\n+        \n+        assertEquals(false, new Instant(TEST_TIME_NOW + 1).isBefore(null));\n+        assertEquals(false, new Instant(TEST_TIME_NOW).isBefore(null));\n+        assertEquals(true, new Instant(TEST_TIME_NOW - 1).isBefore(null));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsAfter_long() {\n+        assertEquals(false, new Instant(TEST_TIME1).isAfter(TEST_TIME2));\n+        assertEquals(false, new Instant(TEST_TIME1).isAfter(TEST_TIME1));\n+        assertEquals(true, new Instant(TEST_TIME2).isAfter(TEST_TIME1));\n+    }\n+    \n+    public void testIsAfterNow() {\n+        assertEquals(false, new Instant(TEST_TIME_NOW - 1).isAfterNow());\n+        assertEquals(false, new Instant(TEST_TIME_NOW).isAfterNow());\n+        assertEquals(true, new Instant(TEST_TIME_NOW + 1).isAfterNow());\n+    }\n+    \n+    public void testIsAfter_RI() {\n+        Instant test1 = new Instant(TEST_TIME1);\n+        Instant test1a = new Instant(TEST_TIME1);\n+        assertEquals(false, test1.isAfter(test1a));\n+        assertEquals(false, test1a.isAfter(test1));\n+        assertEquals(false, test1.isAfter(test1));\n+        assertEquals(false, test1a.isAfter(test1a));\n+        \n+        Instant test2 = new Instant(TEST_TIME2);\n+        assertEquals(false, test1.isAfter(test2));\n+        assertEquals(true, test2.isAfter(test1));\n+        \n+        DateTime test3 = new DateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS));\n+        assertEquals(false, test1.isAfter(test3));\n+        assertEquals(true, test3.isAfter(test1));\n+        assertEquals(false, test3.isAfter(test2));\n+        \n+        assertEquals(true, test2.isAfter(new MockInstant()));\n+        assertEquals(false, test1.isAfter(new MockInstant()));\n+        \n+        assertEquals(true, new Instant(TEST_TIME_NOW + 1).isAfter(null));\n+        assertEquals(false, new Instant(TEST_TIME_NOW).isAfter(null));\n+        assertEquals(false, new Instant(TEST_TIME_NOW - 1).isAfter(null));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        Instant test = new Instant(TEST_TIME_NOW);\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        Instant result = (Instant) ois.readObject();\n+        ois.close();\n+        \n+        assertEquals(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        Instant test = new Instant(TEST_TIME_NOW);\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToInstant() {\n+        Instant test = new Instant(TEST_TIME1);\n+        Instant result = test.toInstant();\n+        assertSame(test, result);\n+    }\n+\n+    public void testToDateTime() {\n+        Instant test = new Instant(TEST_TIME1);\n+        DateTime result = test.toDateTime();\n+        assertEquals(TEST_TIME1, result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+    }\n+\n+    public void testToDateTimeISO() {\n+        Instant test = new Instant(TEST_TIME1);\n+        DateTime result = test.toDateTimeISO();\n+        assertSame(DateTime.class, result.getClass());\n+        assertSame(ISOChronology.class, result.getChronology().getClass());\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+    }\n+\n+    public void testToDateTime_DateTimeZone() {\n+        Instant test = new Instant(TEST_TIME1);\n+        DateTime result = test.toDateTime(LONDON);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(LONDON), result.getChronology());\n+\n+        test = new Instant(TEST_TIME1);\n+        result = test.toDateTime(PARIS);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());\n+\n+        test = new Instant(TEST_TIME1);\n+        result = test.toDateTime((DateTimeZone) null);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+    }\n+\n+    public void testToDateTime_Chronology() {\n+        Instant test = new Instant(TEST_TIME1);\n+        DateTime result = test.toDateTime(ISOChronology.getInstance());\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+\n+        test = new Instant(TEST_TIME1);\n+        result = test.toDateTime(GregorianChronology.getInstance(PARIS));\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(GregorianChronology.getInstance(PARIS), result.getChronology());\n+\n+        test = new Instant(TEST_TIME1);\n+        result = test.toDateTime((Chronology) null);\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+    }\n+\n+    public void testToMutableDateTime() {\n+        Instant test = new Instant(TEST_TIME1);\n+        MutableDateTime result = test.toMutableDateTime();\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+    }\n+\n+    public void testToMutableDateTimeISO() {\n+        Instant test = new Instant(TEST_TIME1);\n+        MutableDateTime result = test.toMutableDateTimeISO();\n+        assertSame(MutableDateTime.class, result.getClass());\n+        assertSame(ISOChronology.class, result.getChronology().getClass());\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+    }\n+\n+    public void testToMutableDateTime_DateTimeZone() {\n+        Instant test = new Instant(TEST_TIME1);\n+        MutableDateTime result = test.toMutableDateTime(LONDON);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+\n+        test = new Instant(TEST_TIME1);\n+        result = test.toMutableDateTime(PARIS);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());\n+\n+        test = new Instant(TEST_TIME1);\n+        result = test.toMutableDateTime((DateTimeZone) null);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+    }\n+\n+    public void testToMutableDateTime_Chronology() {\n+        Instant test = new Instant(TEST_TIME1);\n+        MutableDateTime result = test.toMutableDateTime(ISOChronology.getInstance());\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+\n+        test = new Instant(TEST_TIME1);\n+        result = test.toMutableDateTime(GregorianChronology.getInstance(PARIS));\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(GregorianChronology.getInstance(PARIS), result.getChronology());\n+\n+        test = new Instant(TEST_TIME1);\n+        result = test.toMutableDateTime((Chronology) null);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+    }\n+\n+    public void testToDate() {\n+        Instant test = new Instant(TEST_TIME1);\n+        Date result = test.toDate();\n+        assertEquals(test.getMillis(), result.getTime());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithMillis_long() {\n+        Instant test = new Instant(TEST_TIME1);\n+        Instant result = test.withMillis(TEST_TIME2);\n+        assertEquals(TEST_TIME2, result.getMillis());\n+        assertEquals(test.getChronology(), result.getChronology());\n+        \n+        test = new Instant(TEST_TIME1);\n+        result = test.withMillis(TEST_TIME1);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithDurationAdded_long_int() {\n+        Instant test = new Instant(TEST_TIME1);\n+        Instant result = test.withDurationAdded(123456789L, 1);\n+        Instant expected = new Instant(TEST_TIME1 + 123456789L);\n+        assertEquals(expected, result);\n+        \n+        result = test.withDurationAdded(123456789L, 0);\n+        assertSame(test, result);\n+        \n+        result = test.withDurationAdded(123456789L, 2);\n+        expected = new Instant(TEST_TIME1 + (2L * 123456789L));\n+        assertEquals(expected, result);\n+        \n+        result = test.withDurationAdded(123456789L, -3);\n+        expected = new Instant(TEST_TIME1 - (3L * 123456789L));\n+        assertEquals(expected, result);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testWithDurationAdded_RD_int() {\n+        Instant test = new Instant(TEST_TIME1);\n+        Instant result = test.withDurationAdded(new Duration(123456789L), 1);\n+        Instant expected = new Instant(TEST_TIME1 + 123456789L);\n+        assertEquals(expected, result);\n+        \n+        result = test.withDurationAdded(null, 1);\n+        assertSame(test, result);\n+        \n+        result = test.withDurationAdded(new Duration(123456789L), 0);\n+        assertSame(test, result);\n+        \n+        result = test.withDurationAdded(new Duration(123456789L), 2);\n+        expected = new Instant(TEST_TIME1 + (2L * 123456789L));\n+        assertEquals(expected, result);\n+        \n+        result = test.withDurationAdded(new Duration(123456789L), -3);\n+        expected = new Instant(TEST_TIME1 - (3L * 123456789L));\n+        assertEquals(expected, result);\n+    }\n+    \n+    //-----------------------------------------------------------------------    \n+    public void testPlus_long() {\n+        Instant test = new Instant(TEST_TIME1);\n+        Instant result = test.plus(123456789L);\n+        Instant expected = new Instant(TEST_TIME1 + 123456789L);\n+        assertEquals(expected, result);\n+    }\n+    \n+    public void testPlus_RD() {\n+        Instant test = new Instant(TEST_TIME1);\n+        Instant result = test.plus(new Duration(123456789L));\n+        Instant expected = new Instant(TEST_TIME1 + 123456789L);\n+        assertEquals(expected, result);\n+        \n+        result = test.plus((ReadableDuration) null);\n+        assertSame(test, result);\n+    }\n+    \n+    //-----------------------------------------------------------------------    \n+    public void testMinus_long() {\n+        Instant test = new Instant(TEST_TIME1);\n+        Instant result = test.minus(123456789L);\n+        Instant expected = new Instant(TEST_TIME1 - 123456789L);\n+        assertEquals(expected, result);\n+    }\n+    \n+    public void testMinus_RD() {\n+        Instant test = new Instant(TEST_TIME1);\n+        Instant result = test.minus(new Duration(123456789L));\n+        Instant expected = new Instant(TEST_TIME1 - 123456789L);\n+        assertEquals(expected, result);\n+        \n+        result = test.minus((ReadableDuration) null);\n+        assertSame(test, result);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testImmutable() {\n+        assertTrue(Modifier.isFinal(Instant.class.getModifiers()));\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestInstant_Constructors.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Date;\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.convert.ConverterManager;\n+import org.joda.time.convert.MockZeroNullIntegerConverter;\n+\n+/**\n+ * This class is a Junit unit test for Instant.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestInstant_Constructors extends TestCase {\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    \n+    // 1970-06-09\n+    private long TEST_TIME_NOW =\n+            (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 1970-04-05\n+    private long TEST_TIME1 =\n+        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 1971-05-06\n+    private long TEST_TIME2 =\n+        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private DateTimeZone zone = null;\n+    private Locale locale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestInstant_Constructors.class);\n+    }\n+\n+    public TestInstant_Constructors(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        locale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        java.util.TimeZone.setDefault(LONDON.toTimeZone());\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        java.util.TimeZone.setDefault(zone.toTimeZone());\n+        Locale.setDefault(locale);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor ()\n+     */\n+    public void testConstructor() throws Throwable {\n+        Instant test = new Instant();\n+        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (long)\n+     */\n+    public void testConstructor_long1() throws Throwable {\n+        Instant test = new Instant(TEST_TIME1);\n+        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (long)\n+     */\n+    public void testConstructor_long2() throws Throwable {\n+        Instant test = new Instant(TEST_TIME2);\n+        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(TEST_TIME2, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (Object)\n+     */\n+    public void testConstructor_Object() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        Instant test = new Instant(date);\n+        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object)\n+     */\n+    public void testConstructor_invalidObject() throws Throwable {\n+        try {\n+            new Instant(new Object());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (Object=null)\n+     */\n+    public void testConstructor_nullObject() throws Throwable {\n+        Instant test = new Instant((Object) null);\n+        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object=null)\n+     */\n+    public void testConstructor_badconverterObject() throws Throwable {\n+        try {\n+            ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n+            Instant test = new Instant(new Integer(0));\n+            assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n+            assertEquals(0L, test.getMillis());\n+        } finally {\n+            ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestInterval_Basics.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.base.AbstractInterval;\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.GJChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.chrono.LenientChronology;\n+\n+/**\n+ * This class is a Junit unit test for Instant.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestInterval_Basics extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone MOSCOW = DateTimeZone.forID(\"Europe/Moscow\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+    private Interval interval37;\n+    private Interval interval33;\n+\n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestInterval_Basics.class);\n+    }\n+\n+    public TestInterval_Basics(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(PARIS);\n+        TimeZone.setDefault(PARIS.toTimeZone());\n+        Locale.setDefault(Locale.FRANCE);\n+        interval37 = new Interval(3, 7);\n+        interval33 = new Interval(3, 3);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetMillis() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        assertEquals(TEST_TIME1, test.getStartMillis());\n+        assertEquals(TEST_TIME1, test.getStart().getMillis());\n+        assertEquals(TEST_TIME2, test.getEndMillis());\n+        assertEquals(TEST_TIME2, test.getEnd().getMillis());\n+        assertEquals(TEST_TIME2 - TEST_TIME1, test.toDurationMillis());\n+        assertEquals(TEST_TIME2 - TEST_TIME1, test.toDuration().getMillis());\n+    }\n+\n+    public void testGetDuration1() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        assertEquals(TEST_TIME2 - TEST_TIME1, test.toDurationMillis());\n+        assertEquals(TEST_TIME2 - TEST_TIME1, test.toDuration().getMillis());\n+    }\n+\n+    public void testGetDuration2() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME1);\n+        assertSame(Duration.ZERO, test.toDuration());\n+    }\n+\n+    public void testEqualsHashCode() {\n+        Interval test1 = new Interval(TEST_TIME1, TEST_TIME2);\n+        Interval test2 = new Interval(TEST_TIME1, TEST_TIME2);\n+        assertEquals(true, test1.equals(test2));\n+        assertEquals(true, test2.equals(test1));\n+        assertEquals(true, test1.equals(test1));\n+        assertEquals(true, test2.equals(test2));\n+        assertEquals(true, test1.hashCode() == test2.hashCode());\n+        assertEquals(true, test1.hashCode() == test1.hashCode());\n+        assertEquals(true, test2.hashCode() == test2.hashCode());\n+        \n+        Interval test3 = new Interval(TEST_TIME_NOW, TEST_TIME2);\n+        assertEquals(false, test1.equals(test3));\n+        assertEquals(false, test2.equals(test3));\n+        assertEquals(false, test3.equals(test1));\n+        assertEquals(false, test3.equals(test2));\n+        assertEquals(false, test1.hashCode() == test3.hashCode());\n+        assertEquals(false, test2.hashCode() == test3.hashCode());\n+        \n+        Interval test4 = new Interval(TEST_TIME1, TEST_TIME2, GJChronology.getInstance());\n+        assertEquals(true, test4.equals(test4));\n+        assertEquals(false, test1.equals(test4));\n+        assertEquals(false, test2.equals(test4));\n+        assertEquals(false, test4.equals(test1));\n+        assertEquals(false, test4.equals(test2));\n+        assertEquals(false, test1.hashCode() == test4.hashCode());\n+        assertEquals(false, test2.hashCode() == test4.hashCode());\n+        \n+        MutableInterval test5 = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        assertEquals(true, test1.equals(test5));\n+        assertEquals(true, test2.equals(test5));\n+        assertEquals(false, test3.equals(test5));\n+        assertEquals(true, test5.equals(test1));\n+        assertEquals(true, test5.equals(test2));\n+        assertEquals(false, test5.equals(test3));\n+        assertEquals(true, test1.hashCode() == test5.hashCode());\n+        assertEquals(true, test2.hashCode() == test5.hashCode());\n+        assertEquals(false, test3.hashCode() == test5.hashCode());\n+        \n+        assertEquals(false, test1.equals(\"Hello\"));\n+        assertEquals(true, test1.equals(new MockInterval()));\n+        assertEquals(false, test1.equals(new DateTime(TEST_TIME1)));\n+    }\n+\n+    class MockInterval extends AbstractInterval {\n+        public MockInterval() {\n+            super();\n+        }\n+        public Chronology getChronology() {\n+            return ISOChronology.getInstance();\n+        }\n+        public long getStartMillis() {\n+            return TEST_TIME1;\n+        }\n+        public long getEndMillis() {\n+            return TEST_TIME2;\n+        }\n+    }\n+\n+    public void testEqualsHashCodeLenient() {\n+        Interval test1 = new Interval(\n+                new DateTime(TEST_TIME1, LenientChronology.getInstance(COPTIC_PARIS)),\n+                new DateTime(TEST_TIME2, LenientChronology.getInstance(COPTIC_PARIS)));\n+        Interval test2 = new Interval(\n+                new DateTime(TEST_TIME1, LenientChronology.getInstance(COPTIC_PARIS)),\n+                new DateTime(TEST_TIME2, LenientChronology.getInstance(COPTIC_PARIS)));\n+        assertEquals(true, test1.equals(test2));\n+        assertEquals(true, test2.equals(test1));\n+        assertEquals(true, test1.equals(test1));\n+        assertEquals(true, test2.equals(test2));\n+        assertEquals(true, test1.hashCode() == test2.hashCode());\n+        assertEquals(true, test1.hashCode() == test1.hashCode());\n+        assertEquals(true, test2.hashCode() == test2.hashCode());\n+    }\n+\n+    public void testEqualsHashCodeStrict() {\n+        Interval test1 = new Interval(\n+                new DateTime(TEST_TIME1, LenientChronology.getInstance(COPTIC_PARIS)),\n+                new DateTime(TEST_TIME2, LenientChronology.getInstance(COPTIC_PARIS)));\n+        Interval test2 = new Interval(\n+                new DateTime(TEST_TIME1, LenientChronology.getInstance(COPTIC_PARIS)),\n+                new DateTime(TEST_TIME2, LenientChronology.getInstance(COPTIC_PARIS)));\n+        assertEquals(true, test1.equals(test2));\n+        assertEquals(true, test2.equals(test1));\n+        assertEquals(true, test1.equals(test1));\n+        assertEquals(true, test2.equals(test2));\n+        assertEquals(true, test1.hashCode() == test2.hashCode());\n+        assertEquals(true, test1.hashCode() == test1.hashCode());\n+        assertEquals(true, test2.hashCode() == test2.hashCode());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_useCase_ContainsOverlapAbutGap() {\n+        // this is a simple test to ensure that the use case of these methods is OK\n+        // when comparing any two intervals they can be in one and only one of these states\n+        // (a) have a gap between them, (b) abut or (c) overlap\n+        // contains is a subset of overlap\n+        Interval test1020 = new Interval(10, 20);\n+        \n+        // [4,8) [10,20) - gap\n+        Interval interval = new Interval(4, 8);\n+        assertNotNull(test1020.gap(interval));\n+        assertEquals(false, test1020.abuts(interval));\n+        assertEquals(false, test1020.overlaps(interval));\n+        assertEquals(false, test1020.contains(interval));\n+        assertNotNull(interval.gap(test1020));\n+        assertEquals(false, interval.abuts(test1020));\n+        assertEquals(false, interval.overlaps(test1020));\n+        assertEquals(false, interval.contains(test1020));\n+        \n+        // [6,10) [10,20) - abuts\n+        interval = new Interval(6, 10);\n+        assertNull(test1020.gap(interval));\n+        assertEquals(true, test1020.abuts(interval));\n+        assertEquals(false, test1020.overlaps(interval));\n+        assertEquals(false, test1020.contains(interval));\n+        assertNull(interval.gap(test1020));\n+        assertEquals(true, interval.abuts(test1020));\n+        assertEquals(false, interval.overlaps(test1020));\n+        assertEquals(false, interval.contains(test1020));\n+        \n+        // [8,12) [10,20) - overlaps\n+        interval = new Interval(8, 12);\n+        assertNull(test1020.gap(interval));\n+        assertEquals(false, test1020.abuts(interval));\n+        assertEquals(true, test1020.overlaps(interval));\n+        assertEquals(false, test1020.contains(interval));\n+        assertNull(interval.gap(test1020));\n+        assertEquals(false, interval.abuts(test1020));\n+        assertEquals(true, interval.overlaps(test1020));\n+        assertEquals(false, interval.contains(test1020));\n+        \n+        // [10,14) [10,20) - overlaps and contains-one-way\n+        interval = new Interval(10, 14);\n+        assertNull(test1020.gap(interval));\n+        assertEquals(false, test1020.abuts(interval));\n+        assertEquals(true, test1020.overlaps(interval));\n+        assertEquals(true, test1020.contains(interval));\n+        assertNull(interval.gap(test1020));\n+        assertEquals(false, interval.abuts(test1020));\n+        assertEquals(true, interval.overlaps(test1020));\n+        assertEquals(false, interval.contains(test1020));\n+        \n+        // [10,20) [10,20) - overlaps and contains-both-ways\n+        assertNull(test1020.gap(interval));\n+        assertEquals(false, test1020.abuts(test1020));\n+        assertEquals(true, test1020.overlaps(test1020));\n+        assertEquals(true, test1020.contains(test1020));\n+        \n+        // [10,20) [16,20) - overlaps and contains-one-way\n+        interval = new Interval(16, 20);\n+        assertNull(test1020.gap(interval));\n+        assertEquals(false, test1020.abuts(interval));\n+        assertEquals(true, test1020.overlaps(interval));\n+        assertEquals(true, test1020.contains(interval));\n+        assertNull(interval.gap(test1020));\n+        assertEquals(false, interval.abuts(test1020));\n+        assertEquals(true, interval.overlaps(test1020));\n+        assertEquals(false, interval.contains(test1020));\n+        \n+        // [10,20) [18,22) - overlaps\n+        interval = new Interval(18, 22);\n+        assertNull(test1020.gap(interval));\n+        assertEquals(false, test1020.abuts(interval));\n+        assertEquals(true, test1020.overlaps(interval));\n+        assertEquals(false, test1020.contains(interval));\n+        assertNull(interval.gap(test1020));\n+        assertEquals(false, interval.abuts(test1020));\n+        assertEquals(true, interval.overlaps(test1020));\n+        assertEquals(false, interval.contains(test1020));\n+        \n+        // [10,20) [20,24) - abuts\n+        interval = new Interval(20, 24);\n+        assertNull(test1020.gap(interval));\n+        assertEquals(true, test1020.abuts(interval));\n+        assertEquals(false, test1020.overlaps(interval));\n+        assertEquals(false, test1020.contains(interval));\n+        assertNull(interval.gap(test1020));\n+        assertEquals(true, interval.abuts(test1020));\n+        assertEquals(false, interval.overlaps(test1020));\n+        assertEquals(false, interval.contains(test1020));\n+        \n+        // [10,20) [22,26) - gap\n+        interval = new Interval(22, 26);\n+        assertNotNull(test1020.gap(interval));\n+        assertEquals(false, test1020.abuts(interval));\n+        assertEquals(false, test1020.overlaps(interval));\n+        assertEquals(false, test1020.contains(interval));\n+        assertNotNull(interval.gap(test1020));\n+        assertEquals(false, interval.abuts(test1020));\n+        assertEquals(false, interval.overlaps(test1020));\n+        assertEquals(false, interval.contains(test1020));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_useCase_ContainsOverlapAbutGap_zeroDuration() {\n+        // this is a simple test to ensure that the use case of these methods\n+        // is OK when considering a zero duration inerval\n+        // when comparing any two intervals they can be in one and only one of these states\n+        // (a) have a gap between them, (b) abut or (c) overlap\n+        // contains is a subset of overlap\n+        Interval test1020 = new Interval(10, 20);\n+        \n+        // [8,8) [10,20) - gap\n+        Interval interval = new Interval(8, 8);\n+        assertNotNull(test1020.gap(interval));\n+        assertEquals(false, test1020.abuts(interval));\n+        assertEquals(false, test1020.overlaps(interval));\n+        assertEquals(false, test1020.contains(interval));\n+        assertNotNull(interval.gap(test1020));\n+        assertEquals(false, interval.abuts(test1020));\n+        assertEquals(false, interval.overlaps(test1020));\n+        assertEquals(false, interval.contains(test1020));\n+        \n+        // [10,10) [10,20) - abuts and contains-one-way\n+        interval = new Interval(10, 10);\n+        assertNull(test1020.gap(interval));\n+        assertEquals(true,  test1020.abuts(interval));\n+        assertEquals(false, test1020.overlaps(interval));  // abuts, so can't overlap\n+        assertEquals(true,  test1020.contains(interval));  // normal contains zero-duration\n+        assertNull(interval.gap(test1020));\n+        assertEquals(true,  interval.abuts(test1020));\n+        assertEquals(false, interval.overlaps(test1020));  // abuts, so can't overlap\n+        assertEquals(false, interval.contains(test1020));  // zero-duration does not contain normal\n+        \n+        // [12,12) [10,20) - contains-one-way and overlaps\n+        interval = new Interval(12, 12);\n+        assertNull(test1020.gap(interval));\n+        assertEquals(false, test1020.abuts(interval));\n+        assertEquals(true,  test1020.overlaps(interval));\n+        assertEquals(true,  test1020.contains(interval));  // normal contains zero-duration\n+        assertNull(interval.gap(test1020));\n+        assertEquals(false, interval.abuts(test1020));\n+        assertEquals(true,  interval.overlaps(test1020));\n+        assertEquals(false, interval.contains(test1020));  // zero-duration does not contain normal\n+        \n+        // [10,20) [20,20) - abuts\n+        interval = new Interval(20, 20);\n+        assertNull(test1020.gap(interval));\n+        assertEquals(true,  test1020.abuts(interval));\n+        assertEquals(false, test1020.overlaps(interval));\n+        assertEquals(false, test1020.contains(interval));\n+        assertNull(interval.gap(test1020));\n+        assertEquals(true,  interval.abuts(test1020));\n+        assertEquals(false, interval.overlaps(test1020));\n+        assertEquals(false, interval.contains(test1020));\n+        \n+        // [10,20) [22,22) - gap\n+        interval = new Interval(22, 22);\n+        assertNotNull(test1020.gap(interval));\n+        assertEquals(false, test1020.abuts(interval));\n+        assertEquals(false, test1020.overlaps(interval));\n+        assertEquals(false, test1020.contains(interval));\n+        assertNotNull(interval.gap(test1020));\n+        assertEquals(false, interval.abuts(test1020));\n+        assertEquals(false, interval.overlaps(test1020));\n+        assertEquals(false, interval.contains(test1020));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_useCase_ContainsOverlapAbutGap_bothZeroDuration() {\n+        // this is a simple test to ensure that the use case of these methods\n+        // is OK when considering two zero duration inervals\n+        // this is the simplest case, as the two intervals either have a gap or not\n+        // if not, then they are equal and abut\n+        Interval test0808 = new Interval(8, 8);\n+        Interval test1010 = new Interval(10, 10);\n+        \n+        // [8,8) [10,10) - gap\n+        assertNotNull(test1010.gap(test0808));\n+        assertEquals(false, test1010.abuts(test0808));\n+        assertEquals(false, test1010.overlaps(test0808));\n+        assertEquals(false, test1010.contains(test0808));\n+        assertNotNull(test0808.gap(test1010));\n+        assertEquals(false, test0808.abuts(test1010));\n+        assertEquals(false, test0808.overlaps(test1010));\n+        assertEquals(false, test0808.contains(test1010));\n+        \n+        // [10,10) [10,10) - abuts\n+        assertNull(test1010.gap(test1010));\n+        assertEquals(true,  test1010.abuts(test1010));\n+        assertEquals(false, test1010.overlaps(test1010));\n+        assertEquals(false, test1010.contains(test1010));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testContains_long() {\n+        assertEquals(false, interval37.contains(2));  // value before\n+        assertEquals(true,  interval37.contains(3));\n+        assertEquals(true,  interval37.contains(4));\n+        assertEquals(true,  interval37.contains(5));\n+        assertEquals(true,  interval37.contains(6));\n+        assertEquals(false, interval37.contains(7));  // value after\n+        assertEquals(false, interval37.contains(8));  // value after\n+    }\n+\n+    public void testContains_long_zeroDuration() {\n+        assertEquals(false, interval33.contains(2));  // value before\n+        assertEquals(false, interval33.contains(3));  // zero length duration contains nothing\n+        assertEquals(false, interval33.contains(4));  // value after\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testContainsNow() {\n+        DateTimeUtils.setCurrentMillisFixed(2);\n+        assertEquals(false, interval37.containsNow());  // value before\n+        DateTimeUtils.setCurrentMillisFixed(3);\n+        assertEquals(true,  interval37.containsNow());\n+        DateTimeUtils.setCurrentMillisFixed(4);\n+        assertEquals(true,  interval37.containsNow());\n+        DateTimeUtils.setCurrentMillisFixed(6);\n+        assertEquals(true,  interval37.containsNow());\n+        DateTimeUtils.setCurrentMillisFixed(7);\n+        assertEquals(false, interval37.containsNow());  // value after\n+        DateTimeUtils.setCurrentMillisFixed(8);\n+        assertEquals(false, interval37.containsNow());  // value after\n+        \n+        DateTimeUtils.setCurrentMillisFixed(2);\n+        assertEquals(false, interval33.containsNow());  // value before\n+        DateTimeUtils.setCurrentMillisFixed(3);\n+        assertEquals(false, interval33.containsNow());  // zero length duration contains nothing\n+        DateTimeUtils.setCurrentMillisFixed(4);\n+        assertEquals(false, interval33.containsNow());  // value after\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testContains_RI() {\n+        assertEquals(false, interval37.contains(new Instant(2)));  // value before\n+        assertEquals(true,  interval37.contains(new Instant(3)));\n+        assertEquals(true,  interval37.contains(new Instant(4)));\n+        assertEquals(true,  interval37.contains(new Instant(5)));\n+        assertEquals(true,  interval37.contains(new Instant(6)));\n+        assertEquals(false, interval37.contains(new Instant(7)));  // value after\n+        assertEquals(false, interval37.contains(new Instant(8)));  // value after\n+    }\n+\n+    public void testContains_RI_null() {\n+        DateTimeUtils.setCurrentMillisFixed(2);\n+        assertEquals(false, interval37.contains((ReadableInstant) null));  // value before\n+        DateTimeUtils.setCurrentMillisFixed(3);\n+        assertEquals(true,  interval37.contains((ReadableInstant) null));\n+        DateTimeUtils.setCurrentMillisFixed(4);\n+        assertEquals(true,  interval37.contains((ReadableInstant) null));\n+        DateTimeUtils.setCurrentMillisFixed(6);\n+        assertEquals(true,  interval37.contains((ReadableInstant) null));\n+        DateTimeUtils.setCurrentMillisFixed(7);\n+        assertEquals(false, interval37.contains((ReadableInstant) null));  // value after\n+        DateTimeUtils.setCurrentMillisFixed(8);\n+        assertEquals(false, interval37.contains((ReadableInstant) null));  // value after\n+    }\n+\n+    public void testContains_RI_zeroDuration() {\n+        assertEquals(false, interval33.contains(new Instant(2)));  // value before\n+        assertEquals(false, interval33.contains(new Instant(3)));  // zero length duration contains nothing\n+        assertEquals(false, interval33.contains(new Instant(4)));  // value after\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testContains_RInterval() {\n+        assertEquals(false, interval37.contains(new Interval(1, 2)));  // gap before\n+        assertEquals(false, interval37.contains(new Interval(2, 2)));  // gap before\n+        \n+        assertEquals(false, interval37.contains(new Interval(2, 3)));  // abuts before\n+        assertEquals(true,  interval37.contains(new Interval(3, 3)));\n+        \n+        assertEquals(false, interval37.contains(new Interval(2, 4)));  // starts before\n+        assertEquals(true,  interval37.contains(new Interval(3, 4)));\n+        assertEquals(true,  interval37.contains(new Interval(4, 4)));\n+        \n+        assertEquals(false, interval37.contains(new Interval(2, 6)));  // starts before\n+        assertEquals(true,  interval37.contains(new Interval(3, 6)));\n+        assertEquals(true,  interval37.contains(new Interval(4, 6)));\n+        assertEquals(true,  interval37.contains(new Interval(5, 6)));\n+        assertEquals(true,  interval37.contains(new Interval(6, 6)));\n+        \n+        assertEquals(false, interval37.contains(new Interval(2, 7)));  // starts before\n+        assertEquals(true,  interval37.contains(new Interval(3, 7)));\n+        assertEquals(true,  interval37.contains(new Interval(4, 7)));\n+        assertEquals(true,  interval37.contains(new Interval(5, 7)));\n+        assertEquals(true,  interval37.contains(new Interval(6, 7)));\n+        assertEquals(false, interval37.contains(new Interval(7, 7)));  // abuts after\n+        \n+        assertEquals(false, interval37.contains(new Interval(2, 8)));  // ends after\n+        assertEquals(false, interval37.contains(new Interval(3, 8)));  // ends after\n+        assertEquals(false, interval37.contains(new Interval(4, 8)));  // ends after\n+        assertEquals(false, interval37.contains(new Interval(5, 8)));  // ends after\n+        assertEquals(false, interval37.contains(new Interval(6, 8)));  // ends after\n+        assertEquals(false, interval37.contains(new Interval(7, 8)));  // abuts after\n+        assertEquals(false, interval37.contains(new Interval(8, 8)));  // gap after\n+        \n+        assertEquals(false, interval37.contains(new Interval(8, 9)));  // gap after\n+        assertEquals(false, interval37.contains(new Interval(9, 9)));  // gap after\n+    }\n+\n+    public void testContains_RInterval_null() {\n+        DateTimeUtils.setCurrentMillisFixed(2);\n+        assertEquals(false, interval37.contains((ReadableInterval) null));  // gap before\n+        DateTimeUtils.setCurrentMillisFixed(3);\n+        assertEquals(true,  interval37.contains((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(4);\n+        assertEquals(true,  interval37.contains((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(6);\n+        assertEquals(true,  interval37.contains((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(7);\n+        assertEquals(false, interval37.contains((ReadableInterval) null));  // abuts after\n+        DateTimeUtils.setCurrentMillisFixed(8);\n+        assertEquals(false, interval37.contains((ReadableInterval) null));  // gap after\n+    }\n+\n+    public void testContains_RInterval_zeroDuration() {\n+        assertEquals(false, interval33.contains(interval33));  // zero length duration contains nothing\n+        assertEquals(false, interval33.contains(interval37));  // zero-duration cannot contain anything\n+        assertEquals(true,  interval37.contains(interval33));\n+        assertEquals(false, interval33.contains(new Interval(1, 2)));  // zero-duration cannot contain anything\n+        assertEquals(false, interval33.contains(new Interval(8, 9)));  // zero-duration cannot contain anything\n+        assertEquals(false, interval33.contains(new Interval(1, 9)));  // zero-duration cannot contain anything\n+        \n+        DateTimeUtils.setCurrentMillisFixed(2);\n+        assertEquals(false, interval33.contains((ReadableInterval) null));  // gap before\n+        DateTimeUtils.setCurrentMillisFixed(3);\n+        assertEquals(false, interval33.contains((ReadableInterval) null));  // zero length duration contains nothing\n+        DateTimeUtils.setCurrentMillisFixed(4);\n+        assertEquals(false, interval33.contains((ReadableInterval) null));  // gap after\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testOverlaps_RInterval() {\n+        assertEquals(false, interval37.overlaps(new Interval(1, 2)));  // gap before\n+        assertEquals(false, interval37.overlaps(new Interval(2, 2)));  // gap before\n+        \n+        assertEquals(false, interval37.overlaps(new Interval(2, 3)));  // abuts before\n+        assertEquals(false, interval37.overlaps(new Interval(3, 3)));  // abuts before\n+        \n+        assertEquals(true,  interval37.overlaps(new Interval(2, 4)));\n+        assertEquals(true,  interval37.overlaps(new Interval(3, 4)));\n+        assertEquals(true,  interval37.overlaps(new Interval(4, 4)));\n+        \n+        assertEquals(true,  interval37.overlaps(new Interval(2, 6)));\n+        assertEquals(true,  interval37.overlaps(new Interval(3, 6)));\n+        assertEquals(true,  interval37.overlaps(new Interval(4, 6)));\n+        assertEquals(true,  interval37.overlaps(new Interval(5, 6)));\n+        assertEquals(true,  interval37.overlaps(new Interval(6, 6)));\n+        \n+        assertEquals(true,  interval37.overlaps(new Interval(2, 7)));\n+        assertEquals(true,  interval37.overlaps(new Interval(3, 7)));\n+        assertEquals(true,  interval37.overlaps(new Interval(4, 7)));\n+        assertEquals(true,  interval37.overlaps(new Interval(5, 7)));\n+        assertEquals(true,  interval37.overlaps(new Interval(6, 7)));\n+        assertEquals(false, interval37.overlaps(new Interval(7, 7)));  // abuts after\n+        \n+        assertEquals(true,  interval37.overlaps(new Interval(2, 8)));\n+        assertEquals(true,  interval37.overlaps(new Interval(3, 8)));\n+        assertEquals(true,  interval37.overlaps(new Interval(4, 8)));\n+        assertEquals(true,  interval37.overlaps(new Interval(5, 8)));\n+        assertEquals(true,  interval37.overlaps(new Interval(6, 8)));\n+        assertEquals(false, interval37.overlaps(new Interval(7, 8)));  // abuts after\n+        assertEquals(false, interval37.overlaps(new Interval(8, 8)));  // gap after\n+        \n+        assertEquals(false, interval37.overlaps(new Interval(8, 9)));  // gap after\n+        assertEquals(false, interval37.overlaps(new Interval(9, 9)));  // gap after\n+    }\n+\n+    public void testOverlaps_RInterval_null() {\n+        DateTimeUtils.setCurrentMillisFixed(2);\n+        assertEquals(false, interval37.overlaps((ReadableInterval) null));  // gap before\n+        DateTimeUtils.setCurrentMillisFixed(3);\n+        assertEquals(false, interval37.overlaps((ReadableInterval) null));  // abuts before\n+        DateTimeUtils.setCurrentMillisFixed(4);\n+        assertEquals(true,  interval37.overlaps((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(6);\n+        assertEquals(true,  interval37.overlaps((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(7);\n+        assertEquals(false, interval37.overlaps((ReadableInterval) null));  // abuts after\n+        DateTimeUtils.setCurrentMillisFixed(8);\n+        assertEquals(false, interval37.overlaps((ReadableInterval) null));  // gap after\n+        \n+        DateTimeUtils.setCurrentMillisFixed(3);\n+        assertEquals(false, interval33.overlaps((ReadableInterval) null));  // abuts before and after\n+    }\n+\n+    public void testOverlaps_RInterval_zeroDuration() {\n+        assertEquals(false, interval33.overlaps(interval33));  // abuts before and after\n+        assertEquals(false, interval33.overlaps(interval37));  // abuts before\n+        assertEquals(false, interval37.overlaps(interval33));  // abuts before\n+        assertEquals(false, interval33.overlaps(new Interval(1, 2)));\n+        assertEquals(false, interval33.overlaps(new Interval(8, 9)));\n+        assertEquals(true,  interval33.overlaps(new Interval(1, 9)));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testOverlap_RInterval() {\n+        assertEquals(null, interval37.overlap(new Interval(1, 2)));  // gap before\n+        assertEquals(null, interval37.overlap(new Interval(2, 2)));  // gap before\n+        \n+        assertEquals(null, interval37.overlap(new Interval(2, 3)));  // abuts before\n+        assertEquals(null, interval37.overlap(new Interval(3, 3)));  // abuts before\n+        \n+        assertEquals(new Interval(3, 4), interval37.overlap(new Interval(2, 4)));  // truncated start\n+        assertEquals(new Interval(3, 4), interval37.overlap(new Interval(3, 4)));\n+        assertEquals(new Interval(4, 4), interval37.overlap(new Interval(4, 4)));\n+        \n+        assertEquals(new Interval(3, 7), interval37.overlap(new Interval(2, 7)));  // truncated start\n+        assertEquals(new Interval(3, 7), interval37.overlap(new Interval(3, 7)));\n+        assertEquals(new Interval(4, 7), interval37.overlap(new Interval(4, 7)));\n+        assertEquals(new Interval(5, 7), interval37.overlap(new Interval(5, 7)));\n+        assertEquals(new Interval(6, 7), interval37.overlap(new Interval(6, 7)));\n+        assertEquals(null, interval37.overlap(new Interval(7, 7)));  // abuts after\n+        \n+        assertEquals(new Interval(3, 7), interval37.overlap(new Interval(2, 8)));  // truncated start and end\n+        assertEquals(new Interval(3, 7), interval37.overlap(new Interval(3, 8)));  // truncated end\n+        assertEquals(new Interval(4, 7), interval37.overlap(new Interval(4, 8)));  // truncated end\n+        assertEquals(new Interval(5, 7), interval37.overlap(new Interval(5, 8)));  // truncated end\n+        assertEquals(new Interval(6, 7), interval37.overlap(new Interval(6, 8)));  // truncated end\n+        assertEquals(null, interval37.overlap(new Interval(7, 8)));  // abuts after\n+        assertEquals(null, interval37.overlap(new Interval(8, 8)));  // gap after\n+    }\n+\n+    public void testOverlap_RInterval_null() {\n+        DateTimeUtils.setCurrentMillisFixed(2);\n+        assertEquals(null, interval37.overlap((ReadableInterval) null));  // gap before\n+        DateTimeUtils.setCurrentMillisFixed(3);\n+        assertEquals(null, interval37.overlap((ReadableInterval) null));  // abuts before\n+        DateTimeUtils.setCurrentMillisFixed(4);\n+        assertEquals(new Interval(4, 4), interval37.overlap((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(6);\n+        assertEquals(new Interval(6, 6), interval37.overlap((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(7);\n+        assertEquals(null, interval37.overlap((ReadableInterval) null));  // abuts after\n+        DateTimeUtils.setCurrentMillisFixed(8);\n+        assertEquals(null, interval37.overlap((ReadableInterval) null));  // gap after\n+        \n+        DateTimeUtils.setCurrentMillisFixed(3);\n+        assertEquals(null, interval33.overlap((ReadableInterval) null));  // abuts before and after\n+    }\n+\n+    public void testOverlap_RInterval_zone() {\n+        Interval testA = new Interval(new DateTime(3, LONDON), new DateTime(7, LONDON));\n+        assertEquals(ISOChronology.getInstance(LONDON), testA.getChronology());\n+        \n+        Interval testB = new Interval(new DateTime(4, MOSCOW), new DateTime(8, MOSCOW));\n+        assertEquals(ISOChronology.getInstance(MOSCOW), testB.getChronology());\n+        \n+        Interval resultAB = testA.overlap(testB);\n+        assertEquals(ISOChronology.getInstance(LONDON), resultAB.getChronology());\n+        \n+        Interval resultBA = testB.overlap(testA);\n+        assertEquals(ISOChronology.getInstance(MOSCOW), resultBA.getChronology());\n+    }\n+\n+    public void testOverlap_RInterval_zoneUTC() {\n+        Interval testA = new Interval(new Instant(3), new Instant(7));\n+        assertEquals(ISOChronology.getInstanceUTC(), testA.getChronology());\n+        \n+        Interval testB = new Interval(new Instant(4), new Instant(8));\n+        assertEquals(ISOChronology.getInstanceUTC(), testB.getChronology());\n+        \n+        Interval result = testA.overlap(testB);\n+        assertEquals(ISOChronology.getInstanceUTC(), result.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGap_RInterval() {\n+        assertEquals(new Interval(1, 3), interval37.gap(new Interval(0, 1)));\n+        assertEquals(new Interval(1, 3), interval37.gap(new Interval(1, 1)));\n+        \n+        assertEquals(null, interval37.gap(new Interval(2, 3)));  // abuts before\n+        assertEquals(null, interval37.gap(new Interval(3, 3)));  // abuts before\n+        \n+        assertEquals(null, interval37.gap(new Interval(4, 6)));  // overlaps\n+        \n+        assertEquals(null, interval37.gap(new Interval(3, 7)));  // overlaps\n+        assertEquals(null, interval37.gap(new Interval(6, 7)));  // overlaps\n+        assertEquals(null, interval37.gap(new Interval(7, 7)));  // abuts after\n+        \n+        assertEquals(null, interval37.gap(new Interval(6, 8)));  // overlaps\n+        assertEquals(null, interval37.gap(new Interval(7, 8)));  // abuts after\n+        assertEquals(new Interval(7, 8), interval37.gap(new Interval(8, 8)));\n+        \n+        assertEquals(null, interval37.gap(new Interval(6, 9)));  // overlaps\n+        assertEquals(null, interval37.gap(new Interval(7, 9)));  // abuts after\n+        assertEquals(new Interval(7, 8), interval37.gap(new Interval(8, 9)));\n+        assertEquals(new Interval(7, 9), interval37.gap(new Interval(9, 9)));\n+    }\n+\n+    public void testGap_RInterval_null() {\n+        DateTimeUtils.setCurrentMillisFixed(2);\n+        assertEquals(new Interval(2, 3),  interval37.gap((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(3);\n+        assertEquals(null,  interval37.gap((ReadableInterval) null));  // abuts before\n+        DateTimeUtils.setCurrentMillisFixed(4);\n+        assertEquals(null,  interval37.gap((ReadableInterval) null));  // overlaps\n+        DateTimeUtils.setCurrentMillisFixed(6);\n+        assertEquals(null,  interval37.gap((ReadableInterval) null));  // overlaps\n+        DateTimeUtils.setCurrentMillisFixed(7);\n+        assertEquals(null,  interval37.gap((ReadableInterval) null));  // abuts after\n+        DateTimeUtils.setCurrentMillisFixed(8);\n+        assertEquals(new Interval(7, 8),  interval37.gap((ReadableInterval) null));\n+    }\n+\n+    public void testGap_RInterval_zone() {\n+        Interval testA = new Interval(new DateTime(3, LONDON), new DateTime(7, LONDON));\n+        assertEquals(ISOChronology.getInstance(LONDON), testA.getChronology());\n+        \n+        Interval testB = new Interval(new DateTime(1, MOSCOW), new DateTime(2, MOSCOW));\n+        assertEquals(ISOChronology.getInstance(MOSCOW), testB.getChronology());\n+        \n+        Interval resultAB = testA.gap(testB);\n+        assertEquals(ISOChronology.getInstance(LONDON), resultAB.getChronology());\n+        \n+        Interval resultBA = testB.gap(testA);\n+        assertEquals(ISOChronology.getInstance(MOSCOW), resultBA.getChronology());\n+    }\n+\n+    public void testGap_RInterval_zoneUTC() {\n+        Interval testA = new Interval(new Instant(3), new Instant(7));\n+        assertEquals(ISOChronology.getInstanceUTC(), testA.getChronology());\n+        \n+        Interval testB = new Interval(new Instant(1), new Instant(2));\n+        assertEquals(ISOChronology.getInstanceUTC(), testB.getChronology());\n+        \n+        Interval result = testA.gap(testB);\n+        assertEquals(ISOChronology.getInstanceUTC(), result.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAbuts_RInterval() {\n+        assertEquals(false, interval37.abuts(new Interval(1, 2)));  // gap before\n+        assertEquals(false, interval37.abuts(new Interval(2, 2)));  // gap before\n+        \n+        assertEquals(true,  interval37.abuts(new Interval(2, 3)));\n+        assertEquals(true,  interval37.abuts(new Interval(3, 3)));\n+        \n+        assertEquals(false, interval37.abuts(new Interval(2, 4)));  // overlaps\n+        assertEquals(false, interval37.abuts(new Interval(3, 4)));  // overlaps\n+        assertEquals(false, interval37.abuts(new Interval(4, 4)));  // overlaps\n+        \n+        assertEquals(false, interval37.abuts(new Interval(2, 6)));  // overlaps\n+        assertEquals(false, interval37.abuts(new Interval(3, 6)));  // overlaps\n+        assertEquals(false, interval37.abuts(new Interval(4, 6)));  // overlaps\n+        assertEquals(false, interval37.abuts(new Interval(5, 6)));  // overlaps\n+        assertEquals(false, interval37.abuts(new Interval(6, 6)));  // overlaps\n+        \n+        assertEquals(false, interval37.abuts(new Interval(2, 7)));  // overlaps\n+        assertEquals(false, interval37.abuts(new Interval(3, 7)));  // overlaps\n+        assertEquals(false, interval37.abuts(new Interval(4, 7)));  // overlaps\n+        assertEquals(false, interval37.abuts(new Interval(5, 7)));  // overlaps\n+        assertEquals(false, interval37.abuts(new Interval(6, 7)));  // overlaps\n+        assertEquals(true,  interval37.abuts(new Interval(7, 7)));\n+        \n+        assertEquals(false, interval37.abuts(new Interval(2, 8)));  // overlaps\n+        assertEquals(false, interval37.abuts(new Interval(3, 8)));  // overlaps\n+        assertEquals(false, interval37.abuts(new Interval(4, 8)));  // overlaps\n+        assertEquals(false, interval37.abuts(new Interval(5, 8)));  // overlaps\n+        assertEquals(false, interval37.abuts(new Interval(6, 8)));  // overlaps\n+        assertEquals(true,  interval37.abuts(new Interval(7, 8)));\n+        assertEquals(false, interval37.abuts(new Interval(8, 8)));  // gap after\n+        \n+        assertEquals(false, interval37.abuts(new Interval(8, 9)));  // gap after\n+        assertEquals(false, interval37.abuts(new Interval(9, 9)));  // gap after\n+    }\n+\n+    public void testAbuts_RInterval_null() {\n+        DateTimeUtils.setCurrentMillisFixed(2);\n+        assertEquals(false,  interval37.abuts((ReadableInterval) null));  // gap before\n+        DateTimeUtils.setCurrentMillisFixed(3);\n+        assertEquals(true,  interval37.abuts((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(4);\n+        assertEquals(false,  interval37.abuts((ReadableInterval) null));  // overlaps\n+        DateTimeUtils.setCurrentMillisFixed(6);\n+        assertEquals(false,  interval37.abuts((ReadableInterval) null));  // overlaps\n+        DateTimeUtils.setCurrentMillisFixed(7);\n+        assertEquals(true,  interval37.abuts((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(8);\n+        assertEquals(false,  interval37.abuts((ReadableInterval) null));  // gap after\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testIsBefore_long() {\n+        assertEquals(false, interval37.isBefore(2));\n+        assertEquals(false, interval37.isBefore(3));\n+        assertEquals(false, interval37.isBefore(4));\n+        assertEquals(false, interval37.isBefore(5));\n+        assertEquals(false, interval37.isBefore(6));\n+        assertEquals(true,  interval37.isBefore(7));\n+        assertEquals(true,  interval37.isBefore(8));\n+    }\n+\n+    public void testIsBeforeNow() {\n+        DateTimeUtils.setCurrentMillisFixed(2);\n+        assertEquals(false, interval37.isBeforeNow());\n+        DateTimeUtils.setCurrentMillisFixed(3);\n+        assertEquals(false, interval37.isBeforeNow());\n+        DateTimeUtils.setCurrentMillisFixed(4);\n+        assertEquals(false, interval37.isBeforeNow());\n+        DateTimeUtils.setCurrentMillisFixed(6);\n+        assertEquals(false, interval37.isBeforeNow());\n+        DateTimeUtils.setCurrentMillisFixed(7);\n+        assertEquals(true, interval37.isBeforeNow());\n+        DateTimeUtils.setCurrentMillisFixed(8);\n+        assertEquals(true, interval37.isBeforeNow());\n+    }\n+\n+    public void testIsBefore_RI() {\n+        assertEquals(false, interval37.isBefore(new Instant(2)));\n+        assertEquals(false, interval37.isBefore(new Instant(3)));\n+        assertEquals(false, interval37.isBefore(new Instant(4)));\n+        assertEquals(false, interval37.isBefore(new Instant(5)));\n+        assertEquals(false, interval37.isBefore(new Instant(6)));\n+        assertEquals(true,  interval37.isBefore(new Instant(7)));\n+        assertEquals(true,  interval37.isBefore(new Instant(8)));\n+    }\n+\n+    public void testIsBefore_RI_null() {\n+        DateTimeUtils.setCurrentMillisFixed(2);\n+        assertEquals(false, interval37.isBefore((ReadableInstant) null));\n+        DateTimeUtils.setCurrentMillisFixed(3);\n+        assertEquals(false, interval37.isBefore((ReadableInstant) null));\n+        DateTimeUtils.setCurrentMillisFixed(4);\n+        assertEquals(false, interval37.isBefore((ReadableInstant) null));\n+        DateTimeUtils.setCurrentMillisFixed(6);\n+        assertEquals(false, interval37.isBefore((ReadableInstant) null));\n+        DateTimeUtils.setCurrentMillisFixed(7);\n+        assertEquals(true, interval37.isBefore((ReadableInstant) null));\n+        DateTimeUtils.setCurrentMillisFixed(8);\n+        assertEquals(true, interval37.isBefore((ReadableInstant) null));\n+    }\n+\n+    public void testIsBefore_RInterval() {\n+        assertEquals(false, interval37.isBefore(new Interval(Long.MIN_VALUE, 2)));\n+        assertEquals(false, interval37.isBefore(new Interval(Long.MIN_VALUE, 3)));\n+        assertEquals(false, interval37.isBefore(new Interval(Long.MIN_VALUE, 4)));\n+        \n+        assertEquals(false, interval37.isBefore(new Interval(6, Long.MAX_VALUE)));\n+        assertEquals(true, interval37.isBefore(new Interval(7, Long.MAX_VALUE)));\n+        assertEquals(true, interval37.isBefore(new Interval(8, Long.MAX_VALUE)));\n+    }\n+\n+    public void testIsBefore_RInterval_null() {\n+        DateTimeUtils.setCurrentMillisFixed(2);\n+        assertEquals(false, interval37.isBefore((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(3);\n+        assertEquals(false, interval37.isBefore((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(4);\n+        assertEquals(false, interval37.isBefore((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(6);\n+        assertEquals(false, interval37.isBefore((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(7);\n+        assertEquals(true, interval37.isBefore((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(8);\n+        assertEquals(true, interval37.isBefore((ReadableInterval) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsAfter_long() {\n+        assertEquals(true,  interval37.isAfter(2));\n+        assertEquals(false, interval37.isAfter(3));\n+        assertEquals(false, interval37.isAfter(4));\n+        assertEquals(false, interval37.isAfter(5));\n+        assertEquals(false, interval37.isAfter(6));\n+        assertEquals(false, interval37.isAfter(7));\n+        assertEquals(false, interval37.isAfter(8));\n+    }\n+\n+    public void testIsAfterNow() {\n+        DateTimeUtils.setCurrentMillisFixed(2);\n+        assertEquals(true, interval37.isAfterNow());\n+        DateTimeUtils.setCurrentMillisFixed(3);\n+        assertEquals(false, interval37.isAfterNow());\n+        DateTimeUtils.setCurrentMillisFixed(4);\n+        assertEquals(false, interval37.isAfterNow());\n+        DateTimeUtils.setCurrentMillisFixed(6);\n+        assertEquals(false, interval37.isAfterNow());\n+        DateTimeUtils.setCurrentMillisFixed(7);\n+        assertEquals(false, interval37.isAfterNow());\n+        DateTimeUtils.setCurrentMillisFixed(8);\n+        assertEquals(false, interval37.isAfterNow());\n+    }\n+\n+    public void testIsAfter_RI() {\n+        assertEquals(true,  interval37.isAfter(new Instant(2)));\n+        assertEquals(false, interval37.isAfter(new Instant(3)));\n+        assertEquals(false, interval37.isAfter(new Instant(4)));\n+        assertEquals(false, interval37.isAfter(new Instant(5)));\n+        assertEquals(false, interval37.isAfter(new Instant(6)));\n+        assertEquals(false, interval37.isAfter(new Instant(7)));\n+        assertEquals(false, interval37.isAfter(new Instant(8)));\n+    }\n+\n+    public void testIsAfter_RI_null() {\n+        DateTimeUtils.setCurrentMillisFixed(2);\n+        assertEquals(true, interval37.isAfter((ReadableInstant) null));\n+        DateTimeUtils.setCurrentMillisFixed(3);\n+        assertEquals(false, interval37.isAfter((ReadableInstant) null));\n+        DateTimeUtils.setCurrentMillisFixed(4);\n+        assertEquals(false, interval37.isAfter((ReadableInstant) null));\n+        DateTimeUtils.setCurrentMillisFixed(6);\n+        assertEquals(false, interval37.isAfter((ReadableInstant) null));\n+        DateTimeUtils.setCurrentMillisFixed(7);\n+        assertEquals(false, interval37.isAfter((ReadableInstant) null));\n+        DateTimeUtils.setCurrentMillisFixed(8);\n+        assertEquals(false, interval37.isAfter((ReadableInstant) null));\n+    }\n+\n+    public void testIsAfter_RInterval() {\n+        assertEquals(true, interval37.isAfter(new Interval(Long.MIN_VALUE, 2)));\n+        assertEquals(true, interval37.isAfter(new Interval(Long.MIN_VALUE, 3)));\n+        assertEquals(false, interval37.isAfter(new Interval(Long.MIN_VALUE, 4)));\n+        \n+        assertEquals(false, interval37.isAfter(new Interval(6, Long.MAX_VALUE)));\n+        assertEquals(false, interval37.isAfter(new Interval(7, Long.MAX_VALUE)));\n+        assertEquals(false, interval37.isAfter(new Interval(8, Long.MAX_VALUE)));\n+    }\n+\n+    public void testIsAfter_RInterval_null() {\n+        DateTimeUtils.setCurrentMillisFixed(2);\n+        assertEquals(true, interval37.isAfter((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(3);\n+        assertEquals(true, interval37.isAfter((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(4);\n+        assertEquals(false, interval37.isAfter((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(6);\n+        assertEquals(false, interval37.isAfter((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(7);\n+        assertEquals(false, interval37.isAfter((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(8);\n+        assertEquals(false, interval37.isAfter((ReadableInterval) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToInterval1() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n+        Interval result = test.toInterval();\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToMutableInterval1() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n+        MutableInterval result = test.toMutableInterval();\n+        assertEquals(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToPeriod() {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10, COPTIC_PARIS);\n+        DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18, COPTIC_PARIS);\n+        Interval base = new Interval(dt1, dt2);\n+        \n+        Period test = base.toPeriod();\n+        Period expected = new Period(dt1, dt2, PeriodType.standard());\n+        assertEquals(expected, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToPeriod_PeriodType1() {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10, COPTIC_PARIS);\n+        DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18, COPTIC_PARIS);\n+        Interval base = new Interval(dt1, dt2);\n+        \n+        Period test = base.toPeriod(null);\n+        Period expected = new Period(dt1, dt2, PeriodType.standard());\n+        assertEquals(expected, test);\n+    }\n+\n+    public void testToPeriod_PeriodType2() {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10);\n+        DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18);\n+        Interval base = new Interval(dt1, dt2);\n+        \n+        Period test = base.toPeriod(PeriodType.yearWeekDayTime());\n+        Period expected = new Period(dt1, dt2, PeriodType.yearWeekDayTime());\n+        assertEquals(expected, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        Interval result = (Interval) ois.readObject();\n+        ois.close();\n+        \n+        assertEquals(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10, DateTimeZone.UTC);\n+        DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18, DateTimeZone.UTC);\n+        Interval test = new Interval(dt1, dt2);\n+        assertEquals(\"2004-06-09T07:08:09.010/2005-08-13T12:14:16.018\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithChronology1() {\n+        Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n+        Interval test = base.withChronology(BuddhistChronology.getInstance());\n+        assertEquals(new Interval(TEST_TIME1, TEST_TIME2, BuddhistChronology.getInstance()), test);\n+    }\n+\n+    public void testWithChronology2() {\n+        Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n+        Interval test = base.withChronology(null);\n+        assertEquals(new Interval(TEST_TIME1, TEST_TIME2, ISOChronology.getInstance()), test);\n+    }\n+\n+    public void testWithChronology3() {\n+        Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n+        Interval test = base.withChronology(COPTIC_PARIS);\n+        assertSame(base, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithStartMillis_long1() {\n+        Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n+        Interval test = base.withStartMillis(TEST_TIME1 - 1);\n+        assertEquals(new Interval(TEST_TIME1 - 1, TEST_TIME2, COPTIC_PARIS), test);\n+    }\n+\n+    public void testWithStartMillis_long2() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        try {\n+            test.withStartMillis(TEST_TIME2 + 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithStartMillis_long3() {\n+        Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n+        Interval test = base.withStartMillis(TEST_TIME1);\n+        assertSame(base, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithStartInstant_RI1() {\n+        Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n+        Interval test = base.withStart(new Instant(TEST_TIME1 - 1));\n+        assertEquals(new Interval(TEST_TIME1 - 1, TEST_TIME2, COPTIC_PARIS), test);\n+    }\n+\n+    public void testWithStartInstant_RI2() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        try {\n+            test.withStart(new Instant(TEST_TIME2 + 1));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithStartInstant_RI3() {\n+        Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n+        Interval test = base.withStart(null);\n+        assertEquals(new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS), test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithEndMillis_long1() {\n+        Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n+        Interval test = base.withEndMillis(TEST_TIME2 - 1);\n+        assertEquals(new Interval(TEST_TIME1, TEST_TIME2 - 1, COPTIC_PARIS), test);\n+    }\n+\n+    public void testWithEndMillis_long2() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        try {\n+            test.withEndMillis(TEST_TIME1 - 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithEndMillis_long3() {\n+        Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n+        Interval test = base.withEndMillis(TEST_TIME2);\n+        assertSame(base, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithEndInstant_RI1() {\n+        Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n+        Interval test = base.withEnd(new Instant(TEST_TIME2 - 1));\n+        assertEquals(new Interval(TEST_TIME1, TEST_TIME2 - 1, COPTIC_PARIS), test);\n+    }\n+\n+    public void testWithEndInstant_RI2() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        try {\n+            test.withEnd(new Instant(TEST_TIME1 - 1));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithEndInstant_RI3() {\n+        Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n+        Interval test = base.withEnd(null);\n+        assertEquals(new Interval(TEST_TIME1, TEST_TIME_NOW, COPTIC_PARIS), test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithDurationAfterStart1() throws Throwable {\n+        Duration dur = new Duration(TEST_TIME2 - TEST_TIME_NOW);\n+        Interval base = new Interval(TEST_TIME_NOW, TEST_TIME_NOW, COPTIC_PARIS);\n+        Interval test = base.withDurationAfterStart(dur);\n+        \n+        assertEquals(new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS), test);\n+    }\n+\n+    public void testWithDurationAfterStart2() throws Throwable {\n+        Interval base = new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS);\n+        Interval test = base.withDurationAfterStart(null);\n+        \n+        assertEquals(new Interval(TEST_TIME_NOW, TEST_TIME_NOW, COPTIC_PARIS), test);\n+    }\n+\n+    public void testWithDurationAfterStart3() throws Throwable {\n+        Duration dur = new Duration(-1);\n+        Interval base = new Interval(TEST_TIME_NOW, TEST_TIME_NOW);\n+        try {\n+            base.withDurationAfterStart(dur);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithDurationAfterStart4() throws Throwable {\n+        Interval base = new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS);\n+        Interval test = base.withDurationAfterStart(base.toDuration());\n+        \n+        assertSame(base, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithDurationBeforeEnd1() throws Throwable {\n+        Duration dur = new Duration(TEST_TIME_NOW - TEST_TIME1);\n+        Interval base = new Interval(TEST_TIME_NOW, TEST_TIME_NOW, COPTIC_PARIS);\n+        Interval test = base.withDurationBeforeEnd(dur);\n+        \n+        assertEquals(new Interval(TEST_TIME1, TEST_TIME_NOW, COPTIC_PARIS), test);\n+    }\n+\n+    public void testWithDurationBeforeEnd2() throws Throwable {\n+        Interval base = new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS);\n+        Interval test = base.withDurationBeforeEnd(null);\n+        \n+        assertEquals(new Interval(TEST_TIME2, TEST_TIME2, COPTIC_PARIS), test);\n+    }\n+\n+    public void testWithDurationBeforeEnd3() throws Throwable {\n+        Duration dur = new Duration(-1);\n+        Interval base = new Interval(TEST_TIME_NOW, TEST_TIME_NOW);\n+        try {\n+            base.withDurationBeforeEnd(dur);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithDurationBeforeEnd4() throws Throwable {\n+        Interval base = new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS);\n+        Interval test = base.withDurationBeforeEnd(base.toDuration());\n+        \n+        assertSame(base, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithPeriodAfterStart1() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW, COPTIC_PARIS);\n+        Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0);\n+        \n+        Interval base = new Interval(dt, dt);\n+        Interval test = base.withPeriodAfterStart(dur);\n+        assertEquals(new Interval(dt, dur), test);\n+    }\n+\n+    public void testWithPeriodAfterStart2() throws Throwable {\n+        Interval base = new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS);\n+        Interval test = base.withPeriodAfterStart(null);\n+        \n+        assertEquals(new Interval(TEST_TIME_NOW, TEST_TIME_NOW, COPTIC_PARIS), test);\n+    }\n+\n+    public void testWithPeriodAfterStart3() throws Throwable {\n+        Period per = new Period(0, 0, 0, 0, 0, 0, 0, -1);\n+        Interval base = new Interval(TEST_TIME_NOW, TEST_TIME_NOW);\n+        try {\n+            base.withPeriodAfterStart(per);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithPeriodBeforeEnd1() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW, COPTIC_PARIS);\n+        Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0);\n+        \n+        Interval base = new Interval(dt, dt);\n+        Interval test = base.withPeriodBeforeEnd(dur);\n+        assertEquals(new Interval(dur, dt), test);\n+    }\n+\n+    public void testWithPeriodBeforeEnd2() throws Throwable {\n+        Interval base = new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS);\n+        Interval test = base.withPeriodBeforeEnd(null);\n+        \n+        assertEquals(new Interval(TEST_TIME2, TEST_TIME2, COPTIC_PARIS), test);\n+    }\n+\n+    public void testWithPeriodBeforeEnd3() throws Throwable {\n+        Period per = new Period(0, 0, 0, 0, 0, 0, 0, -1);\n+        Interval base = new Interval(TEST_TIME_NOW, TEST_TIME_NOW);\n+        try {\n+            base.withPeriodBeforeEnd(per);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestInterval_Constructors.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.GJChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.convert.ConverterManager;\n+import org.joda.time.convert.IntervalConverter;\n+\n+/**\n+ * This class is a JUnit test for Interval.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestInterval_Constructors extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+//    // 2002-04-05\n+//    private long TEST_TIME1 =\n+//            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+//            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+//            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+//        \n+//    // 2003-05-06\n+//    private long TEST_TIME2 =\n+//            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+//            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+//            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestInterval_Constructors.class);\n+    }\n+\n+    public TestInterval_Constructors(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(PARIS);\n+        TimeZone.setDefault(PARIS.toTimeZone());\n+        Locale.setDefault(Locale.FRANCE);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_long1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Interval test = new Interval(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+    }\n+\n+    public void testConstructor_long_long2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        Interval test = new Interval(dt1.getMillis(), dt1.getMillis());\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt1.getMillis(), test.getEndMillis());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+    }\n+\n+    public void testConstructor_long_long3() throws Throwable {\n+        DateTime dt1 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        DateTime dt2 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        try {\n+            new Interval(dt1.getMillis(), dt2.getMillis());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_long_Zone() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Interval test = new Interval(dt1.getMillis(), dt2.getMillis(), LONDON);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+        assertEquals(ISOChronology.getInstance(LONDON), test.getChronology());\n+    }\n+\n+    public void testConstructor_long_long_nullZone() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Interval test = new Interval(dt1.getMillis(), dt2.getMillis(), (DateTimeZone) null);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_long_Chronology() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Interval test = new Interval(dt1.getMillis(), dt2.getMillis(), GJChronology.getInstance());\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+        assertEquals(GJChronology.getInstance(), test.getChronology());\n+    }\n+\n+    public void testConstructor_long_long_nullChronology() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Interval test = new Interval(dt1.getMillis(), dt2.getMillis(), (Chronology) null);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RI_RI1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Interval test = new Interval(dt1, dt2);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RI2() throws Throwable {\n+        Instant dt1 = new Instant(new DateTime(2004, 6, 9, 0, 0, 0, 0));\n+        Instant dt2 = new Instant(new DateTime(2005, 7, 10, 1, 1, 1, 1));\n+        Interval test = new Interval(dt1, dt2);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RI3() throws Throwable {\n+        Interval test = new Interval((ReadableInstant) null, (ReadableInstant) null);\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RI4() throws Throwable {\n+        DateTime dt1 = new DateTime(2000, 6, 9, 0, 0, 0, 0);\n+        Interval test = new Interval(dt1, (ReadableInstant) null);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RI5() throws Throwable {\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Interval test = new Interval((ReadableInstant) null, dt2);\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RI6() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        Interval test = new Interval(dt1, dt1);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt1.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RI7() throws Throwable {\n+        DateTime dt1 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        DateTime dt2 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        try {\n+            new Interval(dt1, dt2);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_RI_RI_chronoStart() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, GJChronology.getInstance());\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Interval test = new Interval(dt1, dt2);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+        assertEquals(GJChronology.getInstance(), test.getChronology());\n+    }\n+\n+    public void testConstructor_RI_RI_chronoEnd() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, GJChronology.getInstance());\n+        Interval test = new Interval(dt1, dt2);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+    }\n+\n+    public void testConstructor_RI_RI_zones() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, LONDON);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, PARIS);\n+        Interval test = new Interval(dt1, dt2);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+        assertEquals(ISOChronology.getInstance(LONDON), test.getChronology());\n+    }\n+\n+    public void testConstructor_RI_RI_instant() throws Throwable {\n+        Instant dt1 = new Instant(12345678L);\n+        Instant dt2 = new Instant(22345678L);\n+        Interval test = new Interval(dt1, dt2);\n+        assertEquals(12345678L, test.getStartMillis());\n+        assertEquals(22345678L, test.getEndMillis());\n+        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RI_RP1() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0);\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().months().add(result, 6);\n+        result = ISOChronology.getInstance().hours().add(result, 1);\n+        \n+        Interval test = new Interval(dt, dur);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(result, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RP2() throws Throwable {\n+        Instant dt = new Instant(new DateTime(TEST_TIME_NOW));\n+        Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0);\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstanceUTC().months().add(result, 6);\n+        result = ISOChronology.getInstanceUTC().days().add(result, 3);\n+        result = ISOChronology.getInstanceUTC().hours().add(result, 1);\n+        \n+        Interval test = new Interval(dt, dur);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(result, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RP3() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW, CopticChronology.getInstanceUTC());\n+        Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.standard());\n+        long result = TEST_TIME_NOW;\n+        result = CopticChronology.getInstanceUTC().months().add(result, 6);\n+        result = CopticChronology.getInstanceUTC().days().add(result, 3);\n+        result = CopticChronology.getInstanceUTC().hours().add(result, 1);\n+        \n+        Interval test = new Interval(dt, dur);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(result, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RP4() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Period dur = new Period(1 * DateTimeConstants.MILLIS_PER_HOUR + 23L);\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().hours().add(result, 1);\n+        result = ISOChronology.getInstance().millis().add(result, 23);\n+        \n+        Interval test = new Interval(dt, dur);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(result, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RP5() throws Throwable {\n+        Interval test = new Interval((ReadableInstant) null, (ReadablePeriod) null);\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RP6() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Interval test = new Interval(dt, (ReadablePeriod) null);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RP7() throws Throwable {\n+        Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0);\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().monthOfYear().add(result, 6);\n+        result = ISOChronology.getInstance().hourOfDay().add(result, 1);\n+        \n+        Interval test = new Interval((ReadableInstant) null, dur);\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(result, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RP8() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Period dur = new Period(0, 0, 0, 0, 0, 0, 0, -1);\n+        try {\n+            new Interval(dt, dur);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RP_RI1() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0);\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().months().add(result, -6);\n+        result = ISOChronology.getInstance().hours().add(result, -1);\n+        \n+        Interval test = new Interval(dur, dt);\n+        assertEquals(result, test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RP_RI2() throws Throwable {\n+        Instant dt = new Instant(new DateTime(TEST_TIME_NOW));\n+        Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0);\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstanceUTC().months().add(result, -6);\n+        result = ISOChronology.getInstanceUTC().days().add(result, -3);\n+        result = ISOChronology.getInstanceUTC().hours().add(result, -1);\n+        \n+        Interval test = new Interval(dur, dt);\n+        assertEquals(result, test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RP_RI3() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW, CopticChronology.getInstanceUTC());\n+        Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.standard());\n+        long result = TEST_TIME_NOW;\n+        result = CopticChronology.getInstanceUTC().months().add(result, -6);\n+        result = CopticChronology.getInstanceUTC().days().add(result, -3);\n+        result = CopticChronology.getInstanceUTC().hours().add(result, -1);\n+        \n+        Interval test = new Interval(dur, dt);\n+        assertEquals(result, test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RP_RI4() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Period dur = new Period(1 * DateTimeConstants.MILLIS_PER_HOUR + 23L);\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().hours().add(result, -1);\n+        result = ISOChronology.getInstance().millis().add(result, -23);\n+        \n+        Interval test = new Interval(dur, dt);\n+        assertEquals(result, test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RP_RI5() throws Throwable {\n+        Interval test = new Interval((ReadablePeriod) null, (ReadableInstant) null);\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RP_RI6() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Interval test = new Interval((ReadablePeriod) null, dt);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RP_RI7() throws Throwable {\n+        Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0);\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().monthOfYear().add(result, -6);\n+        result = ISOChronology.getInstance().hourOfDay().add(result, -1);\n+        \n+        Interval test = new Interval(dur, (ReadableInstant) null);\n+        assertEquals(result, test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RP_RI8() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Period dur = new Period(0, 0, 0, 0, 0, 0, 0, -1);\n+        try {\n+            new Interval(dur, dt);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RI_RD1() throws Throwable {\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().months().add(result, 6);\n+        result = ISOChronology.getInstance().hours().add(result, 1);\n+        \n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Duration dur = new Duration(result - TEST_TIME_NOW);\n+        \n+        Interval test = new Interval(dt, dur);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(result, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RD2() throws Throwable {\n+        Interval test = new Interval((ReadableInstant) null, (ReadableDuration) null);\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RD3() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Interval test = new Interval(dt, (ReadableDuration) null);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RD4() throws Throwable {\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().monthOfYear().add(result, 6);\n+        result = ISOChronology.getInstance().hourOfDay().add(result, 1);\n+        \n+        Duration dur = new Duration(result - TEST_TIME_NOW);\n+        \n+        Interval test = new Interval((ReadableInstant) null, dur);\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(result, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RD5() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Duration dur = new Duration(-1);\n+        try {\n+            new Interval(dt, dur);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RD_RI1() throws Throwable {\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().months().add(result, -6);\n+        result = ISOChronology.getInstance().hours().add(result, -1);\n+        \n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Duration dur = new Duration(TEST_TIME_NOW - result);\n+        \n+        Interval test = new Interval(dur, dt);\n+        assertEquals(result, test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RD_RI2() throws Throwable {\n+        Interval test = new Interval((ReadableDuration) null, (ReadableInstant) null);\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RD_RI3() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Interval test = new Interval((ReadableDuration) null, dt);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RD_RI4() throws Throwable {\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().monthOfYear().add(result, -6);\n+        result = ISOChronology.getInstance().hourOfDay().add(result, -1);\n+        \n+        Duration dur = new Duration(TEST_TIME_NOW - result);\n+        \n+        Interval test = new Interval(dur, (ReadableInstant) null);\n+        assertEquals(result, test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RD_RI5() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Duration dur = new Duration(-1);\n+        try {\n+            new Interval(dur, dt);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_Object1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Interval test = new Interval(dt1.toString() + '/' + dt2.toString());\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_Object2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Interval base = new Interval(dt1, dt2);\n+        \n+        Interval test = new Interval(base);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_Object3() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MutableInterval base = new MutableInterval(dt1, dt2);\n+        \n+        Interval test = new Interval(base);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_Object4() throws Throwable {\n+        MockInterval base = new MockInterval();\n+        Interval test = new Interval(base);\n+        assertEquals(base.getStartMillis(), test.getStartMillis());\n+        assertEquals(base.getEndMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_Object5() throws Throwable {\n+        IntervalConverter oldConv = ConverterManager.getInstance().getIntervalConverter(\"\");\n+        IntervalConverter conv = new IntervalConverter() {\n+            public boolean isReadableInterval(Object object, Chronology chrono) {\n+                return false;\n+            }\n+            public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) {\n+                interval.setChronology(chrono);\n+                interval.setInterval(1234L, 5678L);\n+            }\n+            public Class getSupportedType() {\n+                return String.class;\n+            }\n+        };\n+        try {\n+            ConverterManager.getInstance().addIntervalConverter(conv);\n+            DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+            DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+            Interval test = new Interval(dt1.toString() + '/' + dt2.toString());\n+            assertEquals(1234L, test.getStartMillis());\n+            assertEquals(5678L, test.getEndMillis());\n+        } finally {\n+            ConverterManager.getInstance().addIntervalConverter(oldConv);\n+        }\n+    }\n+\n+    public void testConstructor_Object6() throws Throwable {\n+        IntervalConverter oldConv = ConverterManager.getInstance().getIntervalConverter(new Interval(0L, 0L));\n+        IntervalConverter conv = new IntervalConverter() {\n+            public boolean isReadableInterval(Object object, Chronology chrono) {\n+                return false;\n+            }\n+            public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) {\n+                interval.setChronology(chrono);\n+                interval.setInterval(1234L, 5678L);\n+            }\n+            public Class getSupportedType() {\n+                return ReadableInterval.class;\n+            }\n+        };\n+        try {\n+            ConverterManager.getInstance().addIntervalConverter(conv);\n+            Interval base = new Interval(-1000L, 1000L);\n+            Interval test = new Interval(base);\n+            assertEquals(1234L, test.getStartMillis());\n+            assertEquals(5678L, test.getEndMillis());\n+        } finally {\n+            ConverterManager.getInstance().addIntervalConverter(oldConv);\n+        }\n+    }\n+\n+    class MockInterval implements ReadableInterval {\n+        public Chronology getChronology() {\n+            return ISOChronology.getInstance();\n+        }\n+        public long getStartMillis() {\n+            return 1234L;\n+        }\n+        public DateTime getStart() {\n+            return new DateTime(1234L);\n+        }\n+        public long getEndMillis() {\n+            return 5678L;\n+        }\n+        public DateTime getEnd() {\n+            return new DateTime(5678L);\n+        }\n+        public long toDurationMillis() {\n+            return (5678L - 1234L);\n+        }\n+        public Duration toDuration() {\n+            return new Duration(5678L - 1234L);\n+        }\n+        public boolean contains(long millisInstant) {\n+            return false;\n+        }\n+        public boolean containsNow() {\n+            return false;\n+        }\n+        public boolean contains(ReadableInstant instant) {\n+            return false;\n+        }\n+        public boolean contains(ReadableInterval interval) {\n+            return false;\n+        }\n+        public boolean overlaps(ReadableInterval interval) {\n+            return false;\n+        }\n+        public boolean isBefore(ReadableInstant instant) {\n+            return false;\n+        }\n+        public boolean isBefore(ReadableInterval interval) {\n+            return false;\n+        }\n+        public boolean isAfter(ReadableInstant instant) {\n+            return false;\n+        }\n+        public boolean isAfter(ReadableInterval interval) {\n+            return false;\n+        }\n+        public Interval toInterval() {\n+            return null;\n+        }\n+        public MutableInterval toMutableInterval() {\n+            return null;\n+        }\n+        public Period toPeriod() {\n+            return null;\n+        }\n+        public Period toPeriod(PeriodType type) {\n+            return null;\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_Object_Chronology1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Interval base = new Interval(dt1, dt2);\n+        \n+        Interval test = new Interval(base, BuddhistChronology.getInstance());\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+        assertEquals(BuddhistChronology.getInstance(), test.getChronology());\n+    }\n+\n+    public void testConstructor_Object_Chronology2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Interval base = new Interval(dt1, dt2);\n+        \n+        Interval test = new Interval(base, null);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestLocalDateTime_Basics.java\n+/*\n+ *  Copyright 2001-2009 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.Locale;\n+import java.util.SimpleTimeZone;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.GJChronology;\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n+\n+/**\n+ * This class is a Junit unit test for LocalDate.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestLocalDateTime_Basics extends TestCase {\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    private static final int OFFSET = 1;\n+    private static final GJChronology GJ_UTC = GJChronology.getInstanceUTC();\n+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+    private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);\n+    private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);\n+    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n+    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);\n+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();\n+    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n+    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);\n+    private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);\n+    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n+\n+//    private long TEST_TIME1 =\n+//        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+//        + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+//        + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+//\n+//    private long TEST_TIME2 =\n+//        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+//        + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+//        + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+\n+    private int MILLIS_OF_DAY_UTC =\n+        (int) (10L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 20L * DateTimeConstants.MILLIS_PER_MINUTE\n+        + 30L * DateTimeConstants.MILLIS_PER_SECOND\n+        + 40L);\n+\n+    private long TEST_TIME_NOW_UTC =\n+        (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY + MILLIS_OF_DAY_UTC;\n+\n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestLocalDateTime_Basics.class);\n+    }\n+\n+    public TestLocalDateTime_Basics(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW_UTC);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGet_DateTimeFieldType() {\n+        LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40);\n+        assertEquals(1970, test.get(DateTimeFieldType.year()));\n+        assertEquals(6, test.get(DateTimeFieldType.monthOfYear()));\n+        assertEquals(9, test.get(DateTimeFieldType.dayOfMonth()));\n+        assertEquals(2, test.get(DateTimeFieldType.dayOfWeek()));\n+        assertEquals(160, test.get(DateTimeFieldType.dayOfYear()));\n+        assertEquals(24, test.get(DateTimeFieldType.weekOfWeekyear()));\n+        assertEquals(1970, test.get(DateTimeFieldType.weekyear()));\n+        assertEquals(10, test.get(DateTimeFieldType.hourOfDay()));\n+        assertEquals(20, test.get(DateTimeFieldType.minuteOfHour()));\n+        assertEquals(30, test.get(DateTimeFieldType.secondOfMinute()));\n+        assertEquals(40, test.get(DateTimeFieldType.millisOfSecond()));\n+        assertEquals(MILLIS_OF_DAY_UTC / 60000 , test.get(DateTimeFieldType.minuteOfDay()));\n+        assertEquals(MILLIS_OF_DAY_UTC / 1000 , test.get(DateTimeFieldType.secondOfDay()));\n+        assertEquals(MILLIS_OF_DAY_UTC , test.get(DateTimeFieldType.millisOfDay()));\n+        assertEquals(10, test.get(DateTimeFieldType.hourOfHalfday()));\n+        assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay()));\n+        \n+        test = new LocalDateTime(1970, 6, 9, 12, 30);\n+        assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday()));\n+        assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday()));\n+        assertEquals(12, test.get(DateTimeFieldType.clockhourOfDay()));\n+        assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay()));\n+        test = new LocalDateTime(1970, 6, 9, 14, 30);\n+        assertEquals(2, test.get(DateTimeFieldType.hourOfHalfday()));\n+        assertEquals(2, test.get(DateTimeFieldType.clockhourOfHalfday()));\n+        assertEquals(14, test.get(DateTimeFieldType.clockhourOfDay()));\n+        assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay()));\n+        test = new LocalDateTime(1970, 6, 9, 0, 30);\n+        assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday()));\n+        assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday()));\n+        assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay()));\n+        assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay()));\n+        try {\n+            test.get(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testSize() {\n+        LocalDateTime test = new LocalDateTime();\n+        assertEquals(4, test.size());\n+    }\n+\n+    public void testGetFieldType_int() {\n+        LocalDateTime test = new LocalDateTime(COPTIC_PARIS);\n+        assertSame(DateTimeFieldType.year(), test.getFieldType(0));\n+        assertSame(DateTimeFieldType.monthOfYear(), test.getFieldType(1));\n+        assertSame(DateTimeFieldType.dayOfMonth(), test.getFieldType(2));\n+        assertSame(DateTimeFieldType.millisOfDay(), test.getFieldType(3));\n+        try {\n+            test.getFieldType(-1);\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            test.getFieldType(3);\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testGetFieldTypes() {\n+        LocalDateTime test = new LocalDateTime(COPTIC_PARIS);\n+        DateTimeFieldType[] fields = test.getFieldTypes();\n+        assertSame(DateTimeFieldType.year(), fields[0]);\n+        assertSame(DateTimeFieldType.monthOfYear(), fields[1]);\n+        assertSame(DateTimeFieldType.dayOfMonth(), fields[2]);\n+        assertSame(DateTimeFieldType.millisOfDay(), fields[3]);\n+        assertNotSame(test.getFieldTypes(), test.getFieldTypes());\n+    }\n+\n+    public void testGetField_int() {\n+        LocalDateTime test = new LocalDateTime(COPTIC_PARIS);\n+        assertSame(COPTIC_UTC.year(), test.getField(0));\n+        assertSame(COPTIC_UTC.monthOfYear(), test.getField(1));\n+        assertSame(COPTIC_UTC.dayOfMonth(), test.getField(2));\n+        assertSame(COPTIC_UTC.millisOfDay(), test.getField(3));\n+        try {\n+            test.getField(-1);\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            test.getField(3);\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testGetFields() {\n+        LocalDateTime test = new LocalDateTime(COPTIC_PARIS);\n+        DateTimeField[] fields = test.getFields();\n+        assertSame(COPTIC_UTC.year(), fields[0]);\n+        assertSame(COPTIC_UTC.monthOfYear(), fields[1]);\n+        assertSame(COPTIC_UTC.dayOfMonth(), fields[2]);\n+        assertSame(COPTIC_UTC.millisOfDay(), fields[3]);\n+        assertNotSame(test.getFields(), test.getFields());\n+    }\n+\n+    public void testGetValue_int() {\n+        LocalDateTime test = new LocalDateTime(ISO_UTC);\n+        assertEquals(1970, test.getValue(0));\n+        assertEquals(6, test.getValue(1));\n+        assertEquals(9, test.getValue(2));\n+        assertEquals(MILLIS_OF_DAY_UTC, test.getValue(3));\n+        try {\n+            test.getValue(-1);\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            test.getValue(3);\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testGetValues() {\n+        LocalDateTime test = new LocalDateTime(ISO_UTC);\n+        int[] values = test.getValues();\n+        assertEquals(1970, values[0]);\n+        assertEquals(6, values[1]);\n+        assertEquals(9, values[2]);\n+        assertEquals(MILLIS_OF_DAY_UTC, values[3]);\n+        assertNotSame(test.getValues(), test.getValues());\n+    }\n+\n+    public void testIsSupported_DateTimeFieldType() {\n+        LocalDateTime test = new LocalDateTime();\n+        assertEquals(true, test.isSupported(DateTimeFieldType.year()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfWeek()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.weekOfWeekyear()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.weekyear()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.yearOfCentury()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.yearOfEra()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.centuryOfEra()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.weekyearOfCentury()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.era()));\n+        \n+        assertEquals(true, test.isSupported(DateTimeFieldType.hourOfDay()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfHour()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.secondOfMinute()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.millisOfSecond()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfDay()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.secondOfDay()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.millisOfDay()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.hourOfHalfday()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.halfdayOfDay()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfHalfday()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfDay()));\n+        \n+        assertEquals(false, test.isSupported((DateTimeFieldType) null));\n+    }\n+\n+    public void testIsSupported_DurationFieldType() {\n+        LocalDateTime test = new LocalDateTime();\n+        assertEquals(false, test.isSupported(DurationFieldType.eras()));\n+        assertEquals(true, test.isSupported(DurationFieldType.centuries()));\n+        assertEquals(true, test.isSupported(DurationFieldType.years()));\n+        assertEquals(true, test.isSupported(DurationFieldType.months()));\n+        assertEquals(true, test.isSupported(DurationFieldType.weekyears()));\n+        assertEquals(true, test.isSupported(DurationFieldType.weeks()));\n+        assertEquals(true, test.isSupported(DurationFieldType.days()));\n+        \n+        assertEquals(true, test.isSupported(DurationFieldType.hours()));\n+        assertEquals(true, test.isSupported(DurationFieldType.minutes()));\n+        assertEquals(true, test.isSupported(DurationFieldType.seconds()));\n+        assertEquals(true, test.isSupported(DurationFieldType.millis()));\n+        assertEquals(true, test.isSupported(DurationFieldType.halfdays()));\n+        \n+        assertEquals(false, test.isSupported((DurationFieldType) null));\n+    }\n+\n+    public void testEqualsHashCode() {\n+        LocalDateTime test1 = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, COPTIC_PARIS);\n+        LocalDateTime test2 = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, COPTIC_PARIS);\n+        assertEquals(true, test1.equals(test2));\n+        assertEquals(true, test2.equals(test1));\n+        assertEquals(true, test1.equals(test1));\n+        assertEquals(true, test2.equals(test2));\n+        assertEquals(true, test1.hashCode() == test2.hashCode());\n+        assertEquals(true, test1.hashCode() == test1.hashCode());\n+        assertEquals(true, test2.hashCode() == test2.hashCode());\n+        \n+        LocalDateTime test3 = new LocalDateTime(1971, 6, 9, 10, 20, 30, 40);\n+        assertEquals(false, test1.equals(test3));\n+        assertEquals(false, test2.equals(test3));\n+        assertEquals(false, test3.equals(test1));\n+        assertEquals(false, test3.equals(test2));\n+        assertEquals(false, test1.hashCode() == test3.hashCode());\n+        assertEquals(false, test2.hashCode() == test3.hashCode());\n+        \n+        assertEquals(false, test1.equals(\"Hello\"));\n+        assertEquals(true, test1.equals(new MockInstant()));\n+        Partial partial = new Partial(\n+                new DateTimeFieldType[] {\n+                        DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(),\n+                        DateTimeFieldType.dayOfMonth(), DateTimeFieldType.millisOfDay()},\n+                new int[] {1970, 6, 9, MILLIS_OF_DAY_UTC}, COPTIC_PARIS);\n+        assertEquals(true, test1.equals(partial));\n+        assertEquals(true, test1.hashCode() == partial.hashCode());\n+        assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE));\n+    }\n+    \n+    class MockInstant extends MockPartial {\n+        public Chronology getChronology() {\n+            return COPTIC_UTC;\n+        }\n+        public DateTimeField[] getFields() {\n+            return new DateTimeField[] {\n+                COPTIC_UTC.year(),\n+                COPTIC_UTC.monthOfYear(),\n+                COPTIC_UTC.dayOfMonth(),\n+                COPTIC_UTC.millisOfDay(),\n+            };\n+        }\n+        public int[] getValues() {\n+            return new int[] {1970, 6, 9, MILLIS_OF_DAY_UTC};\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testCompareTo() {\n+        LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40);\n+        LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40);\n+        assertEquals(0, test1.compareTo(test1a));\n+        assertEquals(0, test1a.compareTo(test1));\n+        assertEquals(0, test1.compareTo(test1));\n+        assertEquals(0, test1a.compareTo(test1a));\n+        \n+        LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40);\n+        assertEquals(-1, test1.compareTo(test2));\n+        assertEquals(+1, test2.compareTo(test1));\n+        \n+        LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC);\n+        assertEquals(-1, test1.compareTo(test3));\n+        assertEquals(+1, test3.compareTo(test1));\n+        assertEquals(0, test3.compareTo(test2));\n+        \n+        DateTimeFieldType[] types = new DateTimeFieldType[] {\n+            DateTimeFieldType.year(),\n+            DateTimeFieldType.monthOfYear(),\n+            DateTimeFieldType.dayOfMonth(),\n+            DateTimeFieldType.millisOfDay(),\n+        };\n+        int[] values = new int[] {2005, 6, 2, MILLIS_OF_DAY_UTC};\n+        Partial p = new Partial(types, values);\n+        assertEquals(0, test1.compareTo(p));\n+        try {\n+            test1.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+//        try {\n+//            test1.compareTo(new Date());\n+//            fail();\n+//        } catch (ClassCastException ex) {}\n+        try {\n+            test1.compareTo(new YearMonthDay());\n+            fail();\n+        } catch (ClassCastException ex) {}\n+        try {\n+            test1.compareTo(new TimeOfDay());\n+            fail();\n+        } catch (ClassCastException ex) {}\n+        Partial partial = new Partial()\n+            .with(DateTimeFieldType.centuryOfEra(), 1)\n+            .with(DateTimeFieldType.halfdayOfDay(), 0)\n+            .with(DateTimeFieldType.dayOfMonth(), 9);\n+        try {\n+            new LocalDateTime(1970, 6, 9, 10, 20, 30, 40).compareTo(partial);\n+            fail();\n+        } catch (ClassCastException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsEqual_LocalDateTime() {\n+        LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40);\n+        LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40);\n+        assertEquals(true, test1.isEqual(test1a));\n+        assertEquals(true, test1a.isEqual(test1));\n+        assertEquals(true, test1.isEqual(test1));\n+        assertEquals(true, test1a.isEqual(test1a));\n+        \n+        LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40);\n+        assertEquals(false, test1.isEqual(test2));\n+        assertEquals(false, test2.isEqual(test1));\n+        \n+        LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC);\n+        assertEquals(false, test1.isEqual(test3));\n+        assertEquals(false, test3.isEqual(test1));\n+        assertEquals(true, test3.isEqual(test2));\n+        \n+        try {\n+            new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isEqual(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsBefore_LocalDateTime() {\n+        LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40);\n+        LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40);\n+        assertEquals(false, test1.isBefore(test1a));\n+        assertEquals(false, test1a.isBefore(test1));\n+        assertEquals(false, test1.isBefore(test1));\n+        assertEquals(false, test1a.isBefore(test1a));\n+        \n+        LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40);\n+        assertEquals(true, test1.isBefore(test2));\n+        assertEquals(false, test2.isBefore(test1));\n+        \n+        LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC);\n+        assertEquals(true, test1.isBefore(test3));\n+        assertEquals(false, test3.isBefore(test1));\n+        assertEquals(false, test3.isBefore(test2));\n+        \n+        try {\n+            new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isBefore(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsAfter_LocalDateTime() {\n+        LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40);\n+        LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40);\n+        assertEquals(false, test1.isAfter(test1a));\n+        assertEquals(false, test1a.isAfter(test1));\n+        assertEquals(false, test1.isAfter(test1));\n+        assertEquals(false, test1a.isAfter(test1a));\n+        \n+        LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40);\n+        assertEquals(false, test1.isAfter(test2));\n+        assertEquals(true, test2.isAfter(test1));\n+        \n+        LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC);\n+        assertEquals(false, test1.isAfter(test3));\n+        assertEquals(true, test3.isAfter(test1));\n+        assertEquals(false, test3.isAfter(test2));\n+        \n+        try {\n+            new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isAfter(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithDate() {\n+        LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime result = test.withDate(2006, 2, 1);\n+        \n+        check(test, 2004, 6, 9, 10, 20, 30, 40);\n+        check(result, 2006, 2, 1, 10, 20, 30, 40);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithTime() {\n+        LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime result = test.withTime(9, 8, 7, 6);\n+        \n+        check(test, 2004, 6, 9, 10, 20, 30, 40);\n+        check(result, 2004, 6, 9, 9, 8, 7, 6);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithField_DateTimeFieldType_int_1() {\n+        LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime result = test.withField(DateTimeFieldType.year(), 2006);\n+        \n+        assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30, 40), test);\n+        assertEquals(new LocalDateTime(2006, 6, 9, 10, 20, 30, 40), result);\n+    }\n+\n+    public void testWithField_DateTimeFieldType_int_2() {\n+        LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40);\n+        try {\n+            test.withField(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithField_DateTimeFieldType_int_3() {\n+        LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime result = test.withField(DateTimeFieldType.year(), 2004);\n+        assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30, 40), test);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithFieldAdded_DurationFieldType_int_1() {\n+        LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime result = test.withFieldAdded(DurationFieldType.years(), 6);\n+        \n+        assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30, 40), test);\n+        assertEquals(new LocalDateTime(2010, 6, 9, 10, 20, 30, 40), result);\n+    }\n+\n+    public void testWithFieldAdded_DurationFieldType_int_2() {\n+        LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40);\n+        try {\n+            test.withFieldAdded(null, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded_DurationFieldType_int_3() {\n+        LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40);\n+        try {\n+            test.withFieldAdded(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded_DurationFieldType_int_4() {\n+        LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime result = test.withFieldAdded(DurationFieldType.years(), 0);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPlus_RP() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.plus(new Period(1, 2, 3, 4, 29, 6, 7, 8));\n+        LocalDateTime expected = new LocalDateTime(2003, 7, 29, 15, 26, 37, 48, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.plus((ReadablePeriod) null);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusYears_int() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.plusYears(1);\n+        LocalDateTime expected = new LocalDateTime(2003, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusYears(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusMonths_int() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.plusMonths(1);\n+        LocalDateTime expected = new LocalDateTime(2002, 6, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusMonths(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusWeeks_int() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.plusWeeks(1);\n+        LocalDateTime expected = new LocalDateTime(2002, 5, 10, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusWeeks(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusDays_int() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.plusDays(1);\n+        LocalDateTime expected = new LocalDateTime(2002, 5, 4, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusDays(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusHours_int() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.plusHours(1);\n+        LocalDateTime expected = new LocalDateTime(2002, 5, 3, 11, 20, 30, 40, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusHours(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusMinutes_int() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.plusMinutes(1);\n+        LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 21, 30, 40, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusMinutes(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusSeconds_int() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.plusSeconds(1);\n+        LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 20, 31, 40, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusSeconds(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusMillis_int() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.plusMillis(1);\n+        LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 20, 30, 41, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusMillis(0);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMinus_RP() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));\n+        \n+        LocalDateTime expected = new LocalDateTime(2001, 3, 26, 9, 19, 29, 39, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.minus((ReadablePeriod) null);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusYears_int() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.minusYears(1);\n+        LocalDateTime expected = new LocalDateTime(2001, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusYears(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusMonths_int() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.minusMonths(1);\n+        LocalDateTime expected = new LocalDateTime(2002, 4, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusMonths(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusWeeks_int() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.minusWeeks(1);\n+        LocalDateTime expected = new LocalDateTime(2002, 4, 26, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusWeeks(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusDays_int() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.minusDays(1);\n+        LocalDateTime expected = new LocalDateTime(2002, 5, 2, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusDays(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusHours_int() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.minusHours(1);\n+        LocalDateTime expected = new LocalDateTime(2002, 5, 3, 9, 20, 30, 40, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusHours(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusMinutes_int() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.minusMinutes(1);\n+        LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 19, 30, 40, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusMinutes(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusSeconds_int() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.minusSeconds(1);\n+        LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 20, 29, 40, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusSeconds(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusMillis_int() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.minusMillis(1);\n+        LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 20, 30, 39, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusMillis(0);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetters() {\n+        LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC);\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(160, test.getDayOfYear());\n+        assertEquals(2, test.getDayOfWeek());\n+        assertEquals(24, test.getWeekOfWeekyear());\n+        assertEquals(1970, test.getWeekyear());\n+        assertEquals(70, test.getYearOfCentury());\n+        assertEquals(20, test.getCenturyOfEra());\n+        assertEquals(1970, test.getYearOfEra());\n+        assertEquals(DateTimeConstants.AD, test.getEra());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+        assertEquals(MILLIS_OF_DAY_UTC, test.getMillisOfDay());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithers() {\n+        LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC);\n+        check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40);\n+        check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40);\n+        check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40);\n+        check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40);\n+        check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40);\n+        check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40);\n+        check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40);\n+        check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40);\n+        check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40);\n+        check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40);\n+        check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40);\n+        check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40);\n+        check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40);\n+        check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40);\n+        check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6);\n+        check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234);\n+        try {\n+            test.withMonthOfYear(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.withMonthOfYear(13);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateTime() {\n+        LocalDateTime base = new LocalDateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_PARIS); // PARIS irrelevant\n+        \n+        DateTime test = base.toDateTime();\n+        check(base, 2005, 6, 9, 6, 7, 8, 9);\n+        DateTime expected = new DateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_LONDON);\n+        assertEquals(expected, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateTime_Zone() {\n+        LocalDateTime base = new LocalDateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_PARIS); // PARIS irrelevant\n+        \n+        DateTime test = base.toDateTime(TOKYO);\n+        check(base, 2005, 6, 9, 6, 7, 8, 9);\n+        DateTime expected = new DateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_TOKYO);\n+        assertEquals(expected, test);\n+    }\n+\n+    public void testToDateTime_nullZone() {\n+        LocalDateTime base = new LocalDateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_PARIS); // PARIS irrelevant\n+        \n+        DateTime test = base.toDateTime((DateTimeZone) null);\n+        check(base, 2005, 6, 9, 6, 7, 8, 9);\n+        DateTime expected = new DateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_LONDON);\n+        assertEquals(expected, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToLocalDate() {\n+        LocalDateTime base = new LocalDateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_PARIS); // PARIS irrelevant\n+        LocalDate expected = new LocalDate(2005, 6, 9, COPTIC_LONDON);\n+        assertEquals(expected,base.toLocalDate());\n+    }\n+\n+    public void testToLocalTime() {\n+        LocalDateTime base = new LocalDateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_PARIS); // PARIS irrelevant\n+        LocalTime expected = new LocalTime(6, 7, 8, 9, COPTIC_LONDON);\n+        assertEquals(expected,base.toLocalTime());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateTime_RI() {\n+        LocalDateTime base = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, COPTIC_PARIS);\n+        DateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7, BUDDHIST_TOKYO);\n+        \n+        DateTime test = base.toDateTime(dt);\n+        check(base, 2005, 6, 9, 10, 20, 30, 40);\n+        DateTime expected = new DateTime(2005, 6, 9, 10, 20, 30, 40, BUDDHIST_TOKYO);\n+        assertEquals(expected, test);\n+    }\n+\n+    public void testToDateTime_nullRI() {\n+        LocalDateTime base = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, COPTIC_PARIS);\n+        \n+        DateTime test = base.toDateTime((ReadableInstant) null);\n+        check(base, 2005, 6, 9, 10, 20, 30, 40);\n+        DateTime expected = new DateTime(2005, 6, 9, 10, 20, 30, 40, ISO_LONDON);\n+        assertEquals(expected, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDate_summer() {\n+        LocalDateTime base = new LocalDateTime(2005, 7, 9, 10, 20, 30, 40, COPTIC_PARIS);\n+        \n+        Date test = base.toDate();\n+        check(base, 2005, 7, 9, 10, 20, 30, 40);\n+        \n+        GregorianCalendar gcal = new GregorianCalendar();\n+        gcal.clear();\n+        gcal.set(Calendar.YEAR, 2005);\n+        gcal.set(Calendar.MONTH, Calendar.JULY);\n+        gcal.set(Calendar.DAY_OF_MONTH, 9);\n+        gcal.set(Calendar.HOUR_OF_DAY, 10);\n+        gcal.set(Calendar.MINUTE, 20);\n+        gcal.set(Calendar.SECOND, 30);\n+        gcal.set(Calendar.MILLISECOND, 40);\n+        assertEquals(gcal.getTime(), test);\n+    }\n+\n+    public void testToDate_winter() {\n+        LocalDateTime base = new LocalDateTime(2005, 1, 9, 10, 20, 30, 40, COPTIC_PARIS);\n+        \n+        Date test = base.toDate();\n+        check(base, 2005, 1, 9, 10, 20, 30, 40);\n+        \n+        GregorianCalendar gcal = new GregorianCalendar();\n+        gcal.clear();\n+        gcal.set(Calendar.YEAR, 2005);\n+        gcal.set(Calendar.MONTH, Calendar.JANUARY);\n+        gcal.set(Calendar.DAY_OF_MONTH, 9);\n+        gcal.set(Calendar.HOUR_OF_DAY, 10);\n+        gcal.set(Calendar.MINUTE, 20);\n+        gcal.set(Calendar.SECOND, 30);\n+        gcal.set(Calendar.MILLISECOND, 40);\n+        assertEquals(gcal.getTime(), test);\n+    }\n+\n+    public void testToDate_springDST() {\n+        LocalDateTime base = new LocalDateTime(2007, 4, 2, 0, 20, 0, 0);\n+        \n+        SimpleTimeZone testZone = new SimpleTimeZone(3600000, \"NoMidnight\",\n+                Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000);\n+        TimeZone currentZone = TimeZone.getDefault();\n+        try {\n+            TimeZone.setDefault(testZone);\n+            Date test = base.toDate();\n+            check(base, 2007, 4, 2, 0, 20, 0, 0);\n+            assertEquals(\"Mon Apr 02 01:00:00 GMT+02:00 2007\", test.toString());\n+        } finally {\n+            TimeZone.setDefault(currentZone);\n+        }\n+    }\n+\n+    public void testToDate_springDST_2Hour40Savings() {\n+        LocalDateTime base = new LocalDateTime(2007, 4, 2, 0, 20, 0, 0);\n+        \n+        SimpleTimeZone testZone = new SimpleTimeZone(3600000, \"NoMidnight\",\n+                Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000, (3600000 / 6) * 16);\n+        TimeZone currentZone = TimeZone.getDefault();\n+        try {\n+            TimeZone.setDefault(testZone);\n+            Date test = base.toDate();\n+            check(base, 2007, 4, 2, 0, 20, 0, 0);\n+            assertEquals(\"Mon Apr 02 02:40:00 GMT+03:40 2007\", test.toString());\n+        } finally {\n+            TimeZone.setDefault(currentZone);\n+        }\n+    }\n+\n+    public void testToDate_autumnDST() {\n+        LocalDateTime base = new LocalDateTime(2007, 10, 2, 0, 20, 30, 0);\n+        \n+        SimpleTimeZone testZone = new SimpleTimeZone(3600000, \"NoMidnight\",\n+                Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000);\n+        TimeZone currentZone = TimeZone.getDefault();\n+        try {\n+            TimeZone.setDefault(testZone);\n+            Date test = base.toDate();\n+            check(base, 2007, 10, 2, 0, 20, 30, 0);\n+            assertEquals(\"Tue Oct 02 00:20:30 GMT+02:00 2007\", test.toString());\n+        } finally {\n+            TimeZone.setDefault(currentZone);\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testProperty() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, GJ_UTC);\n+        assertEquals(test.year(), test.property(DateTimeFieldType.year()));\n+        assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear()));\n+        assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth()));\n+        assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek()));\n+        assertEquals(test.dayOfYear(), test.property(DateTimeFieldType.dayOfYear()));\n+        assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear()));\n+        assertEquals(test.weekyear(), test.property(DateTimeFieldType.weekyear()));\n+        assertEquals(test.yearOfCentury(), test.property(DateTimeFieldType.yearOfCentury()));\n+        assertEquals(test.yearOfEra(), test.property(DateTimeFieldType.yearOfEra()));\n+        assertEquals(test.centuryOfEra(), test.property(DateTimeFieldType.centuryOfEra()));\n+        assertEquals(test.era(), test.property(DateTimeFieldType.era()));\n+        assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay()));\n+        assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour()));\n+        assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute()));\n+        assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond()));\n+        assertEquals(test.millisOfDay(), test.property(DateTimeFieldType.millisOfDay()));\n+        \n+        try {\n+            test.property(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalDateTime());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40, COPTIC_PARIS);\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        LocalDateTime result = (LocalDateTime) ois.readObject();\n+        ois.close();\n+        \n+        assertEquals(test, result);\n+        assertTrue(Arrays.equals(test.getValues(), result.getValues()));\n+        assertTrue(Arrays.equals(test.getFields(), result.getFields()));\n+        assertEquals(test.getChronology(), result.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        LocalDateTime test = new LocalDateTime(2002, 6, 9, 10, 20, 30, 40);\n+        assertEquals(\"2002-06-09T10:20:30.040\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString_String() {\n+        LocalDateTime test = new LocalDateTime(2002, 6, 9, 10, 20, 30, 40);\n+        assertEquals(\"2002 10\", test.toString(\"yyyy HH\"));\n+        assertEquals(\"2002-06-09T10:20:30.040\", test.toString((String) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString_String_Locale() {\n+        LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40);\n+        assertEquals(\"Tue 9/6\", test.toString(\"EEE d/M\", Locale.ENGLISH));\n+        assertEquals(\"mar. 9/6\", test.toString(\"EEE d/M\", Locale.FRENCH));\n+        assertEquals(\"1970-06-09T10:20:30.040\", test.toString(null, Locale.ENGLISH));\n+        assertEquals(\"Tue 9/6\", test.toString(\"EEE d/M\", null));\n+        assertEquals(\"1970-06-09T10:20:30.040\", test.toString(null, null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString_DTFormatter() {\n+        LocalDateTime test = new LocalDateTime(2002, 6, 9, 10, 20, 30, 40);\n+        assertEquals(\"2002 10\", test.toString(DateTimeFormat.forPattern(\"yyyy HH\")));\n+        assertEquals(\"2002-06-09T10:20:30.040\", test.toString((DateTimeFormatter) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private void check(LocalDateTime test, int year, int month, int day, int hour, int min, int sec, int mil) {\n+        assertEquals(year, test.getYear());\n+        assertEquals(month, test.getMonthOfYear());\n+        assertEquals(day, test.getDayOfMonth());\n+        assertEquals(hour, test.getHourOfDay());\n+        assertEquals(min, test.getMinuteOfHour());\n+        assertEquals(sec, test.getSecondOfMinute());\n+        assertEquals(mil, test.getMillisOfSecond());\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * This class is a Junit unit test for LocalDateTime.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestLocalDateTime_Constructors extends TestCase {\n+\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone MOSCOW = DateTimeZone.forID(\"Europe/Moscow\");\n+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();\n+    private static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);\n+    private static final Chronology GREGORIAN_MOSCOW = GregorianChronology.getInstance(MOSCOW);\n+    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n+    private static final int OFFSET_PARIS = PARIS.getOffset(0L) / DateTimeConstants.MILLIS_PER_HOUR;\n+    private static final int OFFSET_MOSCOW = MOSCOW.getOffset(0L) / DateTimeConstants.MILLIS_PER_HOUR;\n+    \n+    private long MILLIS_OF_DAY =\n+        10L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 20L * DateTimeConstants.MILLIS_PER_MINUTE\n+        + 30L * DateTimeConstants.MILLIS_PER_SECOND\n+        + 40L;\n+    private long TEST_TIME_NOW =\n+        (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + MILLIS_OF_DAY;\n+\n+    private long TEST_TIME1 =\n+        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    private long TEST_TIME2 =\n+        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+\n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestLocalDateTime_Constructors.class);\n+    }\n+\n+    public TestLocalDateTime_Constructors(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(MOSCOW);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_FromCalendarFields() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n+        cal.set(Calendar.MILLISECOND, 7);\n+        LocalDateTime expected = new LocalDateTime(1970, 2, 3, 4, 5, 6, 7);\n+        assertEquals(expected, LocalDateTime.fromCalendarFields(cal));\n+        try {\n+            LocalDateTime.fromCalendarFields((Calendar) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_FromDateFields() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n+        cal.set(Calendar.MILLISECOND, 7);\n+        LocalDateTime expected = new LocalDateTime(1970, 2, 3, 4, 5 ,6, 7);\n+        assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));\n+        try {\n+            LocalDateTime.fromDateFields((Date) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor() throws Throwable {\n+        LocalDateTime test = new LocalDateTime();\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(10 + OFFSET_MOSCOW, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_DateTimeZone() throws Throwable {\n+        DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        // 23:59 in London is 00:59 the following day in Paris\n+        \n+        LocalDateTime test = new LocalDateTime(LONDON);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(2005, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(8, test.getDayOfMonth());\n+        assertEquals(23, test.getHourOfDay());\n+        assertEquals(59, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+        \n+        test = new LocalDateTime(PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(2005, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(0, test.getHourOfDay());\n+        assertEquals(59, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_nullDateTimeZone() throws Throwable {\n+        LocalDateTime test = new LocalDateTime((DateTimeZone) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(10 + OFFSET_MOSCOW, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_Chronology() throws Throwable {\n+        LocalDateTime test = new LocalDateTime(GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(10 + OFFSET_PARIS, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_nullChronology() throws Throwable {\n+        LocalDateTime test = new LocalDateTime((Chronology) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(10 + OFFSET_MOSCOW, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long1() throws Throwable {\n+        LocalDateTime test = new LocalDateTime(TEST_TIME1);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+        assertEquals(12 + OFFSET_MOSCOW, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_long2() throws Throwable {\n+        LocalDateTime test = new LocalDateTime(TEST_TIME2);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1971, test.getYear());\n+        assertEquals(5, test.getMonthOfYear());\n+        assertEquals(7, test.getDayOfMonth());\n+        assertEquals(14 + OFFSET_MOSCOW, test.getHourOfDay());\n+        assertEquals(28, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long1_DateTimeZone() throws Throwable {\n+        LocalDateTime test = new LocalDateTime(TEST_TIME1, PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+        assertEquals(12 + OFFSET_PARIS, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_long2_DateTimeZone() throws Throwable {\n+        LocalDateTime test = new LocalDateTime(TEST_TIME2, PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1971, test.getYear());\n+        assertEquals(5, test.getMonthOfYear());\n+        assertEquals(7, test.getDayOfMonth());\n+        assertEquals(14 + OFFSET_PARIS, test.getHourOfDay());\n+        assertEquals(28, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_long_nullDateTimeZone() throws Throwable {\n+        LocalDateTime test = new LocalDateTime(TEST_TIME1, (DateTimeZone) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+        assertEquals(12 + OFFSET_MOSCOW, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long1_Chronology() throws Throwable {\n+        LocalDateTime test = new LocalDateTime(TEST_TIME1, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+        assertEquals(12 + OFFSET_PARIS, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_long2_Chronology() throws Throwable {\n+        LocalDateTime test = new LocalDateTime(TEST_TIME2, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1971, test.getYear());\n+        assertEquals(5, test.getMonthOfYear());\n+        assertEquals(7, test.getDayOfMonth());\n+        assertEquals(14 + OFFSET_PARIS, test.getHourOfDay());\n+        assertEquals(28, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_long_nullChronology() throws Throwable {\n+        LocalDateTime test = new LocalDateTime(TEST_TIME1, (Chronology) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+        assertEquals(12 + OFFSET_MOSCOW, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_Object1() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        LocalDateTime test = new LocalDateTime(date);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+        assertEquals(12 + OFFSET_MOSCOW, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_nullObject() throws Throwable {\n+        LocalDateTime test = new LocalDateTime((Object) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(10 + OFFSET_MOSCOW, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectString1() throws Throwable {\n+        LocalDateTime test = new LocalDateTime(\"1972-04-06\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1972, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+        assertEquals(0, test.getHourOfDay());\n+        assertEquals(0, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectString2() throws Throwable {\n+        LocalDateTime test = new LocalDateTime(\"1972-037\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1972, test.getYear());\n+        assertEquals(2, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+        assertEquals(0, test.getHourOfDay());\n+        assertEquals(0, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectString3() throws Throwable {\n+        LocalDateTime test = new LocalDateTime(\"1972-04-06T10:20:30.040\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1972, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectString4() throws Throwable {\n+        LocalDateTime test = new LocalDateTime(\"1972-04-06T10:20\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1972, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectStringEx1() throws Throwable {\n+        try {\n+            new LocalDateTime(\"1970-04-06T+14:00\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectStringEx2() throws Throwable {\n+        try {\n+            new LocalDateTime(\"1970-04-06T10:20:30.040+14:00\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectStringEx3() throws Throwable {\n+        try {\n+            new LocalDateTime(\"T10:20:30.040\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectStringEx4() throws Throwable {\n+        try {\n+            new LocalDateTime(\"T10:20:30.040+14:00\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectStringEx5() throws Throwable {\n+        try {\n+            new LocalDateTime(\"10:20:30.040\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectStringEx6() throws Throwable {\n+        try {\n+            new LocalDateTime(\"10:20:30.040+14:00\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectLocalDateTime() throws Throwable {\n+        LocalDateTime dt = new LocalDateTime(1970, 5, 6, 10, 20, 30, 40, BUDDHIST_UTC);\n+        LocalDateTime test = new LocalDateTime(dt);\n+        assertEquals(BUDDHIST_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(5, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectLocalDate() throws Throwable {\n+        LocalDate date = new LocalDate(1970, 5, 6);\n+        try {\n+            new LocalDateTime(date);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectLocalTime() throws Throwable {\n+        LocalTime time = new LocalTime(10, 20, 30, 40);\n+        try {\n+            new LocalDateTime(time);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_Object_DateTimeZone() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        LocalDateTime test = new LocalDateTime(date, PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+        assertEquals(12 + OFFSET_PARIS, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_Object_DateTimeZoneMoscow() throws Throwable {\n+        LocalDateTime test = new LocalDateTime(\"1970-04-06T12:24:00\", MOSCOW);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+        assertEquals(12, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_Object_DateTimeZoneMoscowBadDateTime() throws Throwable {\n+        // 1981-03-31T23:59:59.999+03:00 followed by 1981-04-01T01:00:00.000+04:00\n+        // 1981-09-30T23:59:59.999+04:00 followed by 1981-09-30T23:00:00.000+03:00\n+        \n+        // when a DST non-existing time is passed in, it should still work (ie. zone ignored)\n+        LocalDateTime test = new LocalDateTime(\"1981-04-01T00:30:00\", MOSCOW);  // doesnt exist\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1981, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(1, test.getDayOfMonth());\n+        assertEquals(0, test.getHourOfDay());\n+        assertEquals(30, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_nullObject_DateTimeZone() throws Throwable {\n+        LocalDateTime test = new LocalDateTime((Object) null, PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(10 + OFFSET_PARIS, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_Object_nullDateTimeZone() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        LocalDateTime test = new LocalDateTime(date, (DateTimeZone) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+        assertEquals(12 + OFFSET_MOSCOW, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_nullObject_nullDateTimeZone() throws Throwable {\n+        LocalDateTime test = new LocalDateTime((Object) null, (DateTimeZone) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(10 + OFFSET_MOSCOW, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_Object_Chronology() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        LocalDateTime test = new LocalDateTime(date, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+        assertEquals(12 + OFFSET_PARIS, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_Object_ChronologyMoscow() throws Throwable {\n+        LocalDateTime test = new LocalDateTime(\"1970-04-06T12:24:00\", GREGORIAN_MOSCOW);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+        assertEquals(12, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_Object_ChronologyMoscowBadDateTime() throws Throwable {\n+        // 1981-03-31T23:59:59.999+03:00 followed by 1981-04-01T01:00:00.000+04:00\n+        // 1981-09-30T23:59:59.999+04:00 followed by 1981-09-30T23:00:00.000+03:00\n+        \n+        // when a DST non-existing time is passed in, it should still work (ie. zone ignored)\n+        LocalDateTime test = new LocalDateTime(\"1981-04-01T00:30:00\", GREGORIAN_MOSCOW);  // doesnt exist\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1981, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(1, test.getDayOfMonth());\n+        assertEquals(0, test.getHourOfDay());\n+        assertEquals(30, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_nullObject_Chronology() throws Throwable {\n+        LocalDateTime test = new LocalDateTime((Object) null, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(10 + OFFSET_PARIS, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_Object_nullChronology() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        LocalDateTime test = new LocalDateTime(date, (Chronology) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+        assertEquals(12 + OFFSET_MOSCOW, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_nullObject_nullChronology() throws Throwable {\n+        LocalDateTime test = new LocalDateTime((Object) null, (Chronology) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(10 + OFFSET_MOSCOW, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_int_int_int_int_int() throws Throwable {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(2005, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_int_int_int_int_int_int() throws Throwable {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(2005, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_int_int_int_int_int_int_int() throws Throwable {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(2005, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+        try {\n+            new LocalDateTime(Integer.MIN_VALUE, 6, 9, 10, 20, 30, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDateTime(Integer.MAX_VALUE, 6, 9, 10, 20, 30, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDateTime(2005, 0, 9, 10, 20, 30, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDateTime(2005, 13, 9, 10, 20, 30, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDateTime(2005, 6, 0, 10, 20, 30, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDateTime(2005, 6, 31, 10, 20, 30, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        new LocalDateTime(2005, 7, 31, 10, 20, 30, 40);\n+        try {\n+            new LocalDateTime(2005, 7, 32, 10, 20, 30, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_int_int_int_Chronology() throws Throwable {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(2005, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(10, test.getHourOfDay());  // PARIS has no effect\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+        try {\n+            new LocalDateTime(Integer.MIN_VALUE, 6, 9, 10, 20, 30, 40, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDateTime(Integer.MAX_VALUE, 6, 9, 10, 20, 30, 40, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDateTime(2005, 0, 9, 10, 20, 30, 40, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDateTime(2005, 13, 9, 10, 20, 30, 40, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDateTime(2005, 6, 0, 10, 20, 30, 40, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDateTime(2005, 6, 31, 10, 20, 30, 40, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        new LocalDateTime(2005, 7, 31, 10, 20, 30, 40, GREGORIAN_PARIS);\n+        try {\n+            new LocalDateTime(2005, 7, 32, 10, 20, 30, 40, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_int_int_int_nullChronology() throws Throwable {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(2005, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestLocalDateTime_Properties.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.CopticChronology;\n+\n+/**\n+ * This class is a Junit unit test for LocalDateTime.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestLocalDateTime_Properties extends TestCase {\n+\n+    private static final CopticChronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+\n+    private int MILLIS_OF_DAY =\n+        (int) (10L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 20L * DateTimeConstants.MILLIS_PER_MINUTE\n+        + 30L * DateTimeConstants.MILLIS_PER_SECOND\n+        + 40L);\n+    private long TEST_TIME_NOW =\n+        (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + MILLIS_OF_DAY;\n+    private long TEST_TIME1 =\n+        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 1L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 2L * DateTimeConstants.MILLIS_PER_MINUTE\n+        + 3L * DateTimeConstants.MILLIS_PER_SECOND\n+        + 4L;\n+    private long TEST_TIME2 =\n+        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 4L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 5L * DateTimeConstants.MILLIS_PER_MINUTE\n+        + 6L * DateTimeConstants.MILLIS_PER_SECOND\n+        + 7L;\n+\n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestLocalDateTime_Properties.class);\n+    }\n+\n+    public TestLocalDateTime_Properties(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetYear() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        assertSame(test.getChronology().year(), test.year().getField());\n+        assertEquals(\"year\", test.year().getName());\n+        assertEquals(\"Property[year]\", test.year().toString());\n+        assertSame(test, test.year().getLocalDateTime());\n+        assertEquals(1972, test.year().get());\n+        assertEquals(\"1972\", test.year().getAsString());\n+        assertEquals(\"1972\", test.year().getAsText());\n+        assertEquals(\"1972\", test.year().getAsText(Locale.FRENCH));\n+        assertEquals(\"1972\", test.year().getAsShortText());\n+        assertEquals(\"1972\", test.year().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().years(), test.year().getDurationField());\n+        assertEquals(null, test.year().getRangeDurationField());\n+        assertEquals(9, test.year().getMaximumTextLength(null));\n+        assertEquals(9, test.year().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesYear() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        assertEquals(-292275054, test.year().getMinimumValue());\n+        assertEquals(-292275054, test.year().getMinimumValueOverall());\n+        assertEquals(292278993, test.year().getMaximumValue());\n+        assertEquals(292278993, test.year().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyAddToCopyYear() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.year().addToCopy(9);\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+        check(copy, 1981, 6, 9, 10, 20, 30, 40);\n+        \n+        copy = test.year().addToCopy(0);\n+        check(copy, 1972, 6, 9, 10, 20, 30, 40);\n+        \n+        copy = test.year().addToCopy(292278993 - 1972);\n+        check(copy, 292278993, 6, 9, 10, 20, 30, 40);\n+        \n+        try {\n+            test.year().addToCopy(292278993 - 1972 + 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+        \n+        copy = test.year().addToCopy(-1972);\n+        check(copy, 0, 6, 9, 10, 20, 30, 40);\n+        \n+        copy = test.year().addToCopy(-1973);\n+        check(copy, -1, 6, 9, 10, 20, 30, 40);\n+        \n+        try {\n+            test.year().addToCopy(-292275054 - 1972 - 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyAddWrapFieldToCopyYear() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.year().addWrapFieldToCopy(9);\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+        check(copy, 1981, 6, 9, 10, 20, 30, 40);\n+        \n+        copy = test.year().addWrapFieldToCopy(0);\n+        check(copy, 1972, 6, 9, 10, 20, 30, 40);\n+        \n+        copy = test.year().addWrapFieldToCopy(292278993 - 1972 + 1);\n+        check(copy, -292275054, 6, 9, 10, 20, 30, 40);\n+        \n+        copy = test.year().addWrapFieldToCopy(-292275054 - 1972 - 1);\n+        check(copy, 292278993, 6, 9, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertySetCopyYear() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.year().setCopy(12);\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+        check(copy, 12, 6, 9, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertySetCopyTextYear() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.year().setCopy(\"12\");\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+        check(copy, 12, 6, 9, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyCompareToYear() {\n+        LocalDateTime test1 = new LocalDateTime(TEST_TIME1);\n+        LocalDateTime test2 = new LocalDateTime(TEST_TIME2);\n+        assertEquals(true, test1.year().compareTo(test2) < 0);\n+        assertEquals(true, test2.year().compareTo(test1) > 0);\n+        assertEquals(true, test1.year().compareTo(test1) == 0);\n+        try {\n+            test1.year().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.year().compareTo(dt2) < 0);\n+        assertEquals(true, test2.year().compareTo(dt1) > 0);\n+        assertEquals(true, test1.year().compareTo(dt1) == 0);\n+        try {\n+            test1.year().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMonth() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField());\n+        assertEquals(\"monthOfYear\", test.monthOfYear().getName());\n+        assertEquals(\"Property[monthOfYear]\", test.monthOfYear().toString());\n+        assertSame(test, test.monthOfYear().getLocalDateTime());\n+        assertEquals(6, test.monthOfYear().get());\n+        assertEquals(\"6\", test.monthOfYear().getAsString());\n+        assertEquals(\"June\", test.monthOfYear().getAsText());\n+        assertEquals(\"juin\", test.monthOfYear().getAsText(Locale.FRENCH));\n+        assertEquals(\"Jun\", test.monthOfYear().getAsShortText());\n+        assertEquals(\"juin\", test.monthOfYear().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField());\n+        assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField());\n+        assertEquals(9, test.monthOfYear().getMaximumTextLength(null));\n+        assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null));\n+        test = new LocalDateTime(1972, 7, 9, 10, 20, 30, 40);\n+        assertEquals(\"juillet\", test.monthOfYear().getAsText(Locale.FRENCH));\n+        assertEquals(\"juil.\", test.monthOfYear().getAsShortText(Locale.FRENCH));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesMonth() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        assertEquals(1, test.monthOfYear().getMinimumValue());\n+        assertEquals(1, test.monthOfYear().getMinimumValueOverall());\n+        assertEquals(12, test.monthOfYear().getMaximumValue());\n+        assertEquals(12, test.monthOfYear().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyAddToCopyMonth() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.monthOfYear().addToCopy(6);\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+        check(copy, 1972, 12, 9, 10, 20, 30, 40);\n+        \n+        copy = test.monthOfYear().addToCopy(7);\n+        check(copy, 1973, 1, 9, 10, 20, 30, 40);\n+        \n+        copy = test.monthOfYear().addToCopy(-5);\n+        check(copy, 1972, 1, 9, 10, 20, 30, 40);\n+        \n+        copy = test.monthOfYear().addToCopy(-6);\n+        check(copy, 1971, 12, 9, 10, 20, 30, 40);\n+        \n+        test = new LocalDateTime(1972, 1, 31, 10, 20, 30, 40);\n+        copy = test.monthOfYear().addToCopy(1);\n+        check(copy, 1972, 2, 29, 10, 20, 30, 40);\n+        \n+        copy = test.monthOfYear().addToCopy(2);\n+        check(copy, 1972, 3, 31, 10, 20, 30, 40);\n+        \n+        copy = test.monthOfYear().addToCopy(3);\n+        check(copy, 1972, 4, 30, 10, 20, 30, 40);\n+        \n+        test = new LocalDateTime(1971, 1, 31, 10, 20, 30, 40);\n+        copy = test.monthOfYear().addToCopy(1);\n+        check(copy, 1971, 2, 28, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyAddWrapFieldToCopyMonth() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.monthOfYear().addWrapFieldToCopy(4);\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+        check(copy, 1972, 10, 9, 10, 20, 30, 40);\n+        \n+        copy = test.monthOfYear().addWrapFieldToCopy(8);\n+        check(copy, 1972, 2, 9, 10, 20, 30, 40);\n+        \n+        copy = test.monthOfYear().addWrapFieldToCopy(-8);\n+        check(copy, 1972, 10, 9, 10, 20, 30, 40);\n+        \n+        test = new LocalDateTime(1972, 1, 31, 10, 20, 30, 40);\n+        copy = test.monthOfYear().addWrapFieldToCopy(1);\n+        check(copy, 1972, 2, 29, 10, 20, 30, 40);\n+        \n+        copy = test.monthOfYear().addWrapFieldToCopy(2);\n+        check(copy, 1972, 3, 31, 10, 20, 30, 40);\n+        \n+        copy = test.monthOfYear().addWrapFieldToCopy(3);\n+        check(copy, 1972, 4, 30, 10, 20, 30, 40);\n+        \n+        test = new LocalDateTime(1971, 1, 31, 10, 20, 30, 40);\n+        copy = test.monthOfYear().addWrapFieldToCopy(1);\n+        check(copy, 1971, 2, 28, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertySetCopyMonth() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.monthOfYear().setCopy(12);\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+        check(copy, 1972, 12, 9, 10, 20, 30, 40);\n+        \n+        test = new LocalDateTime(1972, 1, 31, 10, 20, 30, 40);\n+        copy = test.monthOfYear().setCopy(2);\n+        check(copy, 1972, 2, 29, 10, 20, 30, 40);\n+        \n+        try {\n+            test.monthOfYear().setCopy(13);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.monthOfYear().setCopy(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetCopyTextMonth() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.monthOfYear().setCopy(\"12\");\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+        check(copy, 1972, 12, 9, 10, 20, 30, 40);\n+        \n+        copy = test.monthOfYear().setCopy(\"December\");\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+        check(copy, 1972, 12, 9, 10, 20, 30, 40);\n+        \n+        copy = test.monthOfYear().setCopy(\"Dec\");\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+        check(copy, 1972, 12, 9, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyCompareToMonth() {\n+        LocalDateTime test1 = new LocalDateTime(TEST_TIME1);\n+        LocalDateTime test2 = new LocalDateTime(TEST_TIME2);\n+        assertEquals(true, test1.monthOfYear().compareTo(test2) < 0);\n+        assertEquals(true, test2.monthOfYear().compareTo(test1) > 0);\n+        assertEquals(true, test1.monthOfYear().compareTo(test1) == 0);\n+        try {\n+            test1.monthOfYear().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0);\n+        assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0);\n+        assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0);\n+        try {\n+            test1.monthOfYear().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetDay() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField());\n+        assertEquals(\"dayOfMonth\", test.dayOfMonth().getName());\n+        assertEquals(\"Property[dayOfMonth]\", test.dayOfMonth().toString());\n+        assertSame(test, test.dayOfMonth().getLocalDateTime());\n+        assertEquals(9, test.dayOfMonth().get());\n+        assertEquals(\"9\", test.dayOfMonth().getAsString());\n+        assertEquals(\"9\", test.dayOfMonth().getAsText());\n+        assertEquals(\"9\", test.dayOfMonth().getAsText(Locale.FRENCH));\n+        assertEquals(\"9\", test.dayOfMonth().getAsShortText());\n+        assertEquals(\"9\", test.dayOfMonth().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField());\n+        assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField());\n+        assertEquals(2, test.dayOfMonth().getMaximumTextLength(null));\n+        assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesDay() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        assertEquals(1, test.dayOfMonth().getMinimumValue());\n+        assertEquals(1, test.dayOfMonth().getMinimumValueOverall());\n+        assertEquals(30, test.dayOfMonth().getMaximumValue());\n+        assertEquals(31, test.dayOfMonth().getMaximumValueOverall());\n+        test = new LocalDateTime(1972, 7, 9, 10, 20, 30, 40);\n+        assertEquals(31, test.dayOfMonth().getMaximumValue());\n+        test = new LocalDateTime(1972, 2, 9, 10, 20, 30, 40);\n+        assertEquals(29, test.dayOfMonth().getMaximumValue());\n+        test = new LocalDateTime(1971, 2, 9, 10, 20, 30, 40);\n+        assertEquals(28, test.dayOfMonth().getMaximumValue());\n+    }\n+\n+    public void testPropertyAddToCopyDay() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.dayOfMonth().addToCopy(9);\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+        check(copy, 1972, 6, 18, 10, 20, 30, 40);\n+        \n+        copy = test.dayOfMonth().addToCopy(21);\n+        check(copy, 1972, 6, 30, 10, 20, 30, 40);\n+        \n+        copy = test.dayOfMonth().addToCopy(22);\n+        check(copy, 1972, 7, 1, 10, 20, 30, 40);\n+        \n+        copy = test.dayOfMonth().addToCopy(22 + 30);\n+        check(copy, 1972, 7, 31, 10, 20, 30, 40);\n+        \n+        copy = test.dayOfMonth().addToCopy(22 + 31);\n+        check(copy, 1972, 8, 1, 10, 20, 30, 40);\n+\n+        copy = test.dayOfMonth().addToCopy(21 + 31 + 31 + 30 + 31 + 30 + 31);\n+        check(copy, 1972, 12, 31, 10, 20, 30, 40);\n+        \n+        copy = test.dayOfMonth().addToCopy(22 + 31 + 31 + 30 + 31 + 30 + 31);\n+        check(copy, 1973, 1, 1, 10, 20, 30, 40);\n+        \n+        copy = test.dayOfMonth().addToCopy(-8);\n+        check(copy, 1972, 6, 1, 10, 20, 30, 40);\n+        \n+        copy = test.dayOfMonth().addToCopy(-9);\n+        check(copy, 1972, 5, 31, 10, 20, 30, 40);\n+        \n+        copy = test.dayOfMonth().addToCopy(-8 - 31 - 30 - 31 - 29 - 31);\n+        check(copy, 1972, 1, 1, 10, 20, 30, 40);\n+        \n+        copy = test.dayOfMonth().addToCopy(-9 - 31 - 30 - 31 - 29 - 31);\n+        check(copy, 1971, 12, 31, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyAddWrapFieldToCopyDay() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.dayOfMonth().addWrapFieldToCopy(21);\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+        check(copy, 1972, 6, 30, 10, 20, 30, 40);\n+        \n+        copy = test.dayOfMonth().addWrapFieldToCopy(22);\n+        check(copy, 1972, 6, 1, 10, 20, 30, 40);\n+        \n+        copy = test.dayOfMonth().addWrapFieldToCopy(-12);\n+        check(copy, 1972, 6, 27, 10, 20, 30, 40);\n+        \n+        test = new LocalDateTime(1972, 7, 9, 10, 20, 30, 40);\n+        copy = test.dayOfMonth().addWrapFieldToCopy(21);\n+        check(copy, 1972, 7, 30, 10, 20, 30, 40);\n+    \n+        copy = test.dayOfMonth().addWrapFieldToCopy(22);\n+        check(copy, 1972, 7, 31, 10, 20, 30, 40);\n+    \n+        copy = test.dayOfMonth().addWrapFieldToCopy(23);\n+        check(copy, 1972, 7, 1, 10, 20, 30, 40);\n+    \n+        copy = test.dayOfMonth().addWrapFieldToCopy(-12);\n+        check(copy, 1972, 7, 28, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertySetCopyDay() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.dayOfMonth().setCopy(12);\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+        check(copy, 1972, 6, 12, 10, 20, 30, 40);\n+        \n+        try {\n+            test.dayOfMonth().setCopy(31);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.dayOfMonth().setCopy(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetCopyTextDay() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.dayOfMonth().setCopy(\"12\");\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+        check(copy, 1972, 6, 12, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyWithMaximumValueDayOfMonth() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.dayOfMonth().withMaximumValue();\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+        check(copy, 1972, 6, 30, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyWithMinimumValueDayOfMonth() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.dayOfMonth().withMinimumValue();\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+        check(copy, 1972, 6, 1, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyCompareToDay() {\n+        LocalDateTime test1 = new LocalDateTime(TEST_TIME1);\n+        LocalDateTime test2 = new LocalDateTime(TEST_TIME2);\n+        assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0);\n+        assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0);\n+        assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0);\n+        try {\n+            test1.dayOfMonth().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0);\n+        assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0);\n+        assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0);\n+        try {\n+            test1.dayOfMonth().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertyEquals() {\n+        LocalDateTime test1 = new LocalDateTime(2005, 11, 8, 10, 20, 30, 40);\n+        LocalDateTime test2 = new LocalDateTime(2005, 11, 9, 10, 20, 30, 40);\n+        LocalDateTime test3 = new LocalDateTime(2005, 11, 8, 10, 20, 30, 40, COPTIC_UTC);\n+        assertEquals(false, test1.dayOfMonth().equals(test1.year()));\n+        assertEquals(false, test1.dayOfMonth().equals(test1.monthOfYear()));\n+        assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));\n+        assertEquals(false, test1.dayOfMonth().equals(test2.year()));\n+        assertEquals(false, test1.dayOfMonth().equals(test2.monthOfYear()));\n+        assertEquals(false, test1.dayOfMonth().equals(test2.dayOfMonth()));\n+        \n+        assertEquals(false, test1.monthOfYear().equals(test1.year()));\n+        assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear()));\n+        assertEquals(false, test1.monthOfYear().equals(test1.dayOfMonth()));\n+        assertEquals(false, test1.monthOfYear().equals(test2.year()));\n+        assertEquals(true, test1.monthOfYear().equals(test2.monthOfYear()));\n+        assertEquals(false, test1.monthOfYear().equals(test2.dayOfMonth()));\n+        \n+        assertEquals(false, test1.dayOfMonth().equals(null));\n+        assertEquals(false, test1.dayOfMonth().equals(\"any\"));\n+        \n+        // chrono\n+        assertEquals(false, test1.dayOfMonth().equals(test3.dayOfMonth()));\n+    }\n+\n+    public void testPropertyHashCode() {\n+        LocalDateTime test1 = new LocalDateTime(2005, 11, 8, 10, 20, 30, 40);\n+        LocalDateTime test2 = new LocalDateTime(2005, 11, 9, 10, 20, 30, 40);\n+        assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());\n+        assertEquals(false, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());\n+        assertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode());\n+        assertEquals(true, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetHour() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField());\n+        assertEquals(\"hourOfDay\", test.hourOfDay().getName());\n+        assertEquals(\"Property[hourOfDay]\", test.hourOfDay().toString());\n+        assertSame(test, test.hourOfDay().getLocalDateTime());\n+        assertEquals(10, test.hourOfDay().get());\n+        assertEquals(\"10\", test.hourOfDay().getAsString());\n+        assertEquals(\"10\", test.hourOfDay().getAsText());\n+        assertEquals(\"10\", test.hourOfDay().getAsText(Locale.FRENCH));\n+        assertEquals(\"10\", test.hourOfDay().getAsShortText());\n+        assertEquals(\"10\", test.hourOfDay().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField());\n+        assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField());\n+        assertEquals(2, test.hourOfDay().getMaximumTextLength(null));\n+        assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyRoundHour() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20);\n+        check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0);\n+        check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 10, 0, 0, 0);\n+        \n+        test = new LocalDateTime(2005, 6, 9, 10, 40);\n+        check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0);\n+        check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 11, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 11, 0, 0, 0);\n+        \n+        test = new LocalDateTime(2005, 6, 9, 10, 30);\n+        check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0);\n+        check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 10, 0, 0, 0);\n+        \n+        test = new LocalDateTime(2005, 6, 9, 11, 30);\n+        check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 12, 0, 0, 0);\n+        check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 11, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 12, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 11, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 12, 0, 0, 0);\n+    }\n+\n+    public void testPropertyGetMaxMinValuesHour() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        assertEquals(0, test.hourOfDay().getMinimumValue());\n+        assertEquals(0, test.hourOfDay().getMinimumValueOverall());\n+        assertEquals(23, test.hourOfDay().getMaximumValue());\n+        assertEquals(23, test.hourOfDay().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyWithMaxMinValueHour() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 0, 20, 30, 40);\n+        check(test.hourOfDay().withMaximumValue(), 2005, 6, 9, 23, 20, 30, 40);\n+        check(test.hourOfDay().withMinimumValue(), 2005, 6, 9, 0, 20, 30, 40);\n+    }\n+\n+    public void testPropertyAddToCopyHour() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.hourOfDay().addToCopy(9);\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 19, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addToCopy(0);\n+        check(copy, 2005, 6, 9, 10, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addToCopy(13);\n+        check(copy, 2005, 6, 9, 23, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addToCopy(14);\n+        check(copy, 2005, 6, 10, 0, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addToCopy(-10);\n+        check(copy, 2005, 6, 9, 0, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addToCopy(-11);\n+        check(copy, 2005, 6, 8, 23, 20, 30, 40);\n+    }\n+\n+    public void testPropertyAddWrapFieldToCopyHour() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.hourOfDay().addWrapFieldToCopy(9);\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 19, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addWrapFieldToCopy(0);\n+        check(copy, 2005, 6, 9, 10, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addWrapFieldToCopy(18);\n+        check(copy, 2005, 6, 9, 4, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addWrapFieldToCopy(-15);\n+        check(copy, 2005, 6, 9, 19, 20, 30, 40);\n+    }\n+\n+    public void testPropertySetHour() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.hourOfDay().setCopy(12);\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 12, 20, 30, 40);\n+        \n+        try {\n+            test.hourOfDay().setCopy(24);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.hourOfDay().setCopy(-1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextHour() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.hourOfDay().setCopy(\"12\");\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 12, 20, 30, 40);\n+    }\n+\n+    public void testPropertyWithMaximumValueHour() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.hourOfDay().withMaximumValue();\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 23, 20, 30, 40);\n+    }\n+\n+    public void testPropertyWithMinimumValueHour() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.hourOfDay().withMinimumValue();\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 0, 20, 30, 40);\n+    }\n+\n+    public void testPropertyCompareToHour() {\n+        LocalDateTime test1 = new LocalDateTime(TEST_TIME1);\n+        LocalDateTime test2 = new LocalDateTime(TEST_TIME2);\n+        assertEquals(true, test1.hourOfDay().compareTo(test2) < 0);\n+        assertEquals(true, test2.hourOfDay().compareTo(test1) > 0);\n+        assertEquals(true, test1.hourOfDay().compareTo(test1) == 0);\n+        try {\n+            test1.hourOfDay().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.hourOfDay().compareTo(dt2) < 0);\n+        assertEquals(true, test2.hourOfDay().compareTo(dt1) > 0);\n+        assertEquals(true, test1.hourOfDay().compareTo(dt1) == 0);\n+        try {\n+            test1.hourOfDay().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMinute() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField());\n+        assertEquals(\"minuteOfHour\", test.minuteOfHour().getName());\n+        assertEquals(\"Property[minuteOfHour]\", test.minuteOfHour().toString());\n+        assertSame(test, test.minuteOfHour().getLocalDateTime());\n+        assertEquals(20, test.minuteOfHour().get());\n+        assertEquals(\"20\", test.minuteOfHour().getAsString());\n+        assertEquals(\"20\", test.minuteOfHour().getAsText());\n+        assertEquals(\"20\", test.minuteOfHour().getAsText(Locale.FRENCH));\n+        assertEquals(\"20\", test.minuteOfHour().getAsShortText());\n+        assertEquals(\"20\", test.minuteOfHour().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField());\n+        assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField());\n+        assertEquals(2, test.minuteOfHour().getMaximumTextLength(null));\n+        assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesMinute() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        assertEquals(0, test.minuteOfHour().getMinimumValue());\n+        assertEquals(0, test.minuteOfHour().getMinimumValueOverall());\n+        assertEquals(59, test.minuteOfHour().getMaximumValue());\n+        assertEquals(59, test.minuteOfHour().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyWithMaxMinValueMinute() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        check(test.minuteOfHour().withMaximumValue(), 2005, 6, 9, 10, 59, 30, 40);\n+        check(test.minuteOfHour().withMinimumValue(), 2005, 6, 9, 10, 0, 30, 40);\n+    }\n+\n+    public void testPropertyAddToCopyMinute() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.minuteOfHour().addToCopy(9);\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 10, 29, 30, 40);\n+        \n+        copy = test.minuteOfHour().addToCopy(39);\n+        check(copy, 2005, 6, 9, 10, 59, 30, 40);\n+        \n+        copy = test.minuteOfHour().addToCopy(40);\n+        check(copy, 2005, 6, 9, 11, 0, 30, 40);\n+        \n+        copy = test.minuteOfHour().addToCopy(1 * 60 + 45);\n+        check(copy, 2005, 6, 9, 12, 5, 30, 40);\n+        \n+        copy = test.minuteOfHour().addToCopy(13 * 60 + 39);\n+        check(copy, 2005, 6, 9, 23, 59, 30, 40);\n+        \n+        copy = test.minuteOfHour().addToCopy(13 * 60 + 40);\n+        check(copy, 2005, 6, 10, 0, 0, 30, 40);\n+        \n+        copy = test.minuteOfHour().addToCopy(-9);\n+        check(copy, 2005, 6, 9, 10, 11, 30, 40);\n+        \n+        copy = test.minuteOfHour().addToCopy(-19);\n+        check(copy, 2005, 6, 9, 10, 1, 30, 40);\n+        \n+        copy = test.minuteOfHour().addToCopy(-20);\n+        check(copy, 2005, 6, 9, 10, 0, 30, 40);\n+        \n+        copy = test.minuteOfHour().addToCopy(-21);\n+        check(copy, 2005, 6, 9, 9, 59, 30, 40);\n+        \n+        copy = test.minuteOfHour().addToCopy(-(10 * 60 + 20));\n+        check(copy, 2005, 6, 9, 0, 0, 30, 40);\n+        \n+        copy = test.minuteOfHour().addToCopy(-(10 * 60 + 21));\n+        check(copy, 2005, 6, 8, 23, 59, 30, 40);\n+    }\n+\n+    public void testPropertyAddWrapFieldToCopyMinute() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.minuteOfHour().addWrapFieldToCopy(9);\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 10, 29, 30, 40);\n+        \n+        copy = test.minuteOfHour().addWrapFieldToCopy(49);\n+        check(copy, 2005, 6, 9, 10, 9, 30, 40);\n+        \n+        copy = test.minuteOfHour().addWrapFieldToCopy(-47);\n+        check(copy, 2005, 6, 9, 10, 33, 30, 40);\n+    }\n+\n+    public void testPropertySetMinute() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.minuteOfHour().setCopy(12);\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 10, 12, 30, 40);\n+        \n+        try {\n+            test.minuteOfHour().setCopy(60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.minuteOfHour().setCopy(-1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextMinute() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.minuteOfHour().setCopy(\"12\");\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 10, 12, 30, 40);\n+    }\n+\n+    public void testPropertyCompareToMinute() {\n+        LocalDateTime test1 = new LocalDateTime(TEST_TIME1);\n+        LocalDateTime test2 = new LocalDateTime(TEST_TIME2);\n+        assertEquals(true, test1.minuteOfHour().compareTo(test2) < 0);\n+        assertEquals(true, test2.minuteOfHour().compareTo(test1) > 0);\n+        assertEquals(true, test1.minuteOfHour().compareTo(test1) == 0);\n+        try {\n+            test1.minuteOfHour().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.minuteOfHour().compareTo(dt2) < 0);\n+        assertEquals(true, test2.minuteOfHour().compareTo(dt1) > 0);\n+        assertEquals(true, test1.minuteOfHour().compareTo(dt1) == 0);\n+        try {\n+            test1.minuteOfHour().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetSecond() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        assertSame(test.getChronology().secondOfMinute(), test.secondOfMinute().getField());\n+        assertEquals(\"secondOfMinute\", test.secondOfMinute().getName());\n+        assertEquals(\"Property[secondOfMinute]\", test.secondOfMinute().toString());\n+        assertSame(test, test.secondOfMinute().getLocalDateTime());\n+        assertEquals(30, test.secondOfMinute().get());\n+        assertEquals(\"30\", test.secondOfMinute().getAsString());\n+        assertEquals(\"30\", test.secondOfMinute().getAsText());\n+        assertEquals(\"30\", test.secondOfMinute().getAsText(Locale.FRENCH));\n+        assertEquals(\"30\", test.secondOfMinute().getAsShortText());\n+        assertEquals(\"30\", test.secondOfMinute().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().seconds(), test.secondOfMinute().getDurationField());\n+        assertEquals(test.getChronology().minutes(), test.secondOfMinute().getRangeDurationField());\n+        assertEquals(2, test.secondOfMinute().getMaximumTextLength(null));\n+        assertEquals(2, test.secondOfMinute().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesSecond() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        assertEquals(0, test.secondOfMinute().getMinimumValue());\n+        assertEquals(0, test.secondOfMinute().getMinimumValueOverall());\n+        assertEquals(59, test.secondOfMinute().getMaximumValue());\n+        assertEquals(59, test.secondOfMinute().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyWithMaxMinValueSecond() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        check(test.secondOfMinute().withMaximumValue(), 2005, 6, 9, 10, 20, 59, 40);\n+        check(test.secondOfMinute().withMinimumValue(), 2005, 6, 9, 10, 20, 0, 40);\n+    }\n+\n+    public void testPropertyAddToCopySecond() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.secondOfMinute().addToCopy(9);\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 10, 20, 39, 40);\n+        \n+        copy = test.secondOfMinute().addToCopy(29);\n+        check(copy, 2005, 6, 9, 10, 20, 59, 40);\n+        \n+        copy = test.secondOfMinute().addToCopy(30);\n+        check(copy, 2005, 6, 9, 10, 21, 0, 40);\n+        \n+        copy = test.secondOfMinute().addToCopy(39 * 60 + 29);\n+        check(copy, 2005, 6, 9, 10, 59, 59, 40);\n+        \n+        copy = test.secondOfMinute().addToCopy(39 * 60 + 30);\n+        check(copy, 2005, 6, 9, 11, 0, 0, 40);\n+        \n+        copy = test.secondOfMinute().addToCopy(13 * 60 * 60 + 39 * 60 + 30);\n+        check(copy, 2005, 6, 10, 0, 0, 0, 40);\n+        \n+        copy = test.secondOfMinute().addToCopy(-9);\n+        check(copy, 2005, 6, 9, 10, 20, 21, 40);\n+        \n+        copy = test.secondOfMinute().addToCopy(-30);\n+        check(copy, 2005, 6, 9, 10, 20, 0, 40);\n+        \n+        copy = test.secondOfMinute().addToCopy(-31);\n+        check(copy, 2005, 6, 9, 10, 19, 59, 40);\n+        \n+        copy = test.secondOfMinute().addToCopy(-(10 * 60 * 60 + 20 * 60 + 30));\n+        check(copy, 2005, 6, 9, 0, 0, 0, 40);\n+        \n+        copy = test.secondOfMinute().addToCopy(-(10 * 60 * 60 + 20 * 60 + 31));\n+        check(copy, 2005, 6, 8, 23, 59, 59, 40);\n+    }\n+\n+    public void testPropertyAddWrapFieldToCopySecond() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.secondOfMinute().addWrapFieldToCopy(9);\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 10, 20, 39, 40);\n+        \n+        copy = test.secondOfMinute().addWrapFieldToCopy(49);\n+        check(copy, 2005, 6, 9, 10, 20, 19, 40);\n+        \n+        copy = test.secondOfMinute().addWrapFieldToCopy(-47);\n+        check(copy, 2005, 6, 9, 10, 20, 43, 40);\n+    }\n+\n+    public void testPropertySetSecond() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.secondOfMinute().setCopy(12);\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 10, 20, 12, 40);\n+        \n+        try {\n+            test.secondOfMinute().setCopy(60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.secondOfMinute().setCopy(-1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextSecond() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.secondOfMinute().setCopy(\"12\");\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 10, 20, 12, 40);\n+    }\n+\n+    public void testPropertyCompareToSecond() {\n+        LocalDateTime test1 = new LocalDateTime(TEST_TIME1);\n+        LocalDateTime test2 = new LocalDateTime(TEST_TIME2);\n+        assertEquals(true, test1.secondOfMinute().compareTo(test2) < 0);\n+        assertEquals(true, test2.secondOfMinute().compareTo(test1) > 0);\n+        assertEquals(true, test1.secondOfMinute().compareTo(test1) == 0);\n+        try {\n+            test1.secondOfMinute().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.secondOfMinute().compareTo(dt2) < 0);\n+        assertEquals(true, test2.secondOfMinute().compareTo(dt1) > 0);\n+        assertEquals(true, test1.secondOfMinute().compareTo(dt1) == 0);\n+        try {\n+            test1.secondOfMinute().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMilli() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        assertSame(test.getChronology().millisOfSecond(), test.millisOfSecond().getField());\n+        assertEquals(\"millisOfSecond\", test.millisOfSecond().getName());\n+        assertEquals(\"Property[millisOfSecond]\", test.millisOfSecond().toString());\n+        assertSame(test, test.millisOfSecond().getLocalDateTime());\n+        assertEquals(40, test.millisOfSecond().get());\n+        assertEquals(\"40\", test.millisOfSecond().getAsString());\n+        assertEquals(\"40\", test.millisOfSecond().getAsText());\n+        assertEquals(\"40\", test.millisOfSecond().getAsText(Locale.FRENCH));\n+        assertEquals(\"40\", test.millisOfSecond().getAsShortText());\n+        assertEquals(\"40\", test.millisOfSecond().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().millis(), test.millisOfSecond().getDurationField());\n+        assertEquals(test.getChronology().seconds(), test.millisOfSecond().getRangeDurationField());\n+        assertEquals(3, test.millisOfSecond().getMaximumTextLength(null));\n+        assertEquals(3, test.millisOfSecond().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesMilli() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        assertEquals(0, test.millisOfSecond().getMinimumValue());\n+        assertEquals(0, test.millisOfSecond().getMinimumValueOverall());\n+        assertEquals(999, test.millisOfSecond().getMaximumValue());\n+        assertEquals(999, test.millisOfSecond().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyWithMaxMinValueMilli() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        check(test.millisOfSecond().withMaximumValue(), 2005, 6, 9, 10, 20, 30, 999);\n+        check(test.millisOfSecond().withMinimumValue(), 2005, 6, 9, 10, 20, 30, 0);\n+    }\n+\n+    public void testPropertyAddToCopyMilli() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.millisOfSecond().addToCopy(9);\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 10, 20, 30, 49);\n+        \n+        copy = test.millisOfSecond().addToCopy(959);\n+        check(copy, 2005, 6, 9, 10, 20, 30, 999);\n+        \n+        copy = test.millisOfSecond().addToCopy(960);\n+        check(copy, 2005, 6, 9, 10, 20, 31, 0);\n+        \n+        copy = test.millisOfSecond().addToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959);\n+        check(copy, 2005, 6, 9, 23, 59, 59, 999);\n+        \n+        copy = test.millisOfSecond().addToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960);\n+        check(copy, 2005, 6, 10, 0, 0, 0, 0);\n+        \n+        copy = test.millisOfSecond().addToCopy(-9);\n+        check(copy, 2005, 6, 9, 10, 20, 30, 31);\n+        \n+        copy = test.millisOfSecond().addToCopy(-40);\n+        check(copy, 2005, 6, 9, 10, 20, 30, 0);\n+        \n+        copy = test.millisOfSecond().addToCopy(-41);\n+        check(copy, 2005, 6, 9, 10, 20, 29, 999);\n+        \n+        copy = test.millisOfSecond().addToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40));\n+        check(copy, 2005, 6, 9, 0, 0, 0, 0);\n+        \n+        copy = test.millisOfSecond().addToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41));\n+        check(copy, 2005, 6, 8, 23, 59, 59, 999);\n+    }\n+\n+    public void testPropertyAddWrapFieldToCopyMilli() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.millisOfSecond().addWrapFieldToCopy(9);\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 10, 20, 30, 49);\n+        \n+        copy = test.millisOfSecond().addWrapFieldToCopy(995);\n+        check(copy, 2005, 6, 9, 10, 20, 30, 35);\n+        \n+        copy = test.millisOfSecond().addWrapFieldToCopy(-47);\n+        check(copy, 2005, 6, 9, 10, 20, 30, 993);\n+    }\n+\n+    public void testPropertySetMilli() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.millisOfSecond().setCopy(12);\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 10, 20, 30, 12);\n+        \n+        try {\n+            test.millisOfSecond().setCopy(1000);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.millisOfSecond().setCopy(-1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextMilli() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.millisOfSecond().setCopy(\"12\");\n+        check(test, 2005, 6, 9, 10, 20, 30, 40);\n+        check(copy, 2005, 6, 9, 10, 20, 30, 12);\n+    }\n+\n+    public void testPropertyCompareToMilli() {\n+        LocalDateTime test1 = new LocalDateTime(TEST_TIME1);\n+        LocalDateTime test2 = new LocalDateTime(TEST_TIME2);\n+        assertEquals(true, test1.millisOfSecond().compareTo(test2) < 0);\n+        assertEquals(true, test2.millisOfSecond().compareTo(test1) > 0);\n+        assertEquals(true, test1.millisOfSecond().compareTo(test1) == 0);\n+        try {\n+            test1.millisOfSecond().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.millisOfSecond().compareTo(dt2) < 0);\n+        assertEquals(true, test2.millisOfSecond().compareTo(dt1) > 0);\n+        assertEquals(true, test1.millisOfSecond().compareTo(dt1) == 0);\n+        try {\n+            test1.millisOfSecond().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private void check(LocalDateTime test, int year, int month, int day, int hour, int min, int sec, int mil) {\n+        assertEquals(year, test.getYear());\n+        assertEquals(month, test.getMonthOfYear());\n+        assertEquals(day, test.getDayOfMonth());\n+        assertEquals(hour, test.getHourOfDay());\n+        assertEquals(min, test.getMinuteOfHour());\n+        assertEquals(sec, test.getSecondOfMinute());\n+        assertEquals(mil, test.getMillisOfSecond());\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestLocalDate_Basics.java\n+/*\n+ *  Copyright 2001-2009 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.Locale;\n+import java.util.SimpleTimeZone;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.GJChronology;\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.chrono.LenientChronology;\n+import org.joda.time.chrono.StrictChronology;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n+\n+/**\n+ * This class is a Junit unit test for LocalDate.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestLocalDate_Basics extends TestCase {\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+//    private static final int OFFSET = 1;\n+    private static final GJChronology GJ_UTC = GJChronology.getInstanceUTC();\n+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+    private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);\n+    private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);\n+    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+//    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n+//    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);\n+//    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n+    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);\n+    private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);\n+//    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n+\n+    /** Mock zone simulating Asia/Gaza cutover at midnight 2007-04-01 */\n+    private static long CUTOVER_GAZA = 1175378400000L;\n+    private static int OFFSET_GAZA = 7200000;  // +02:00\n+    private static final DateTimeZone MOCK_GAZA = new MockZone(CUTOVER_GAZA, OFFSET_GAZA);\n+\n+    private long TEST_TIME_NOW =\n+            (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+//    private long TEST_TIME1 =\n+//        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+//        + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+//        + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+//        \n+//    private long TEST_TIME2 =\n+//        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+//        + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+//        + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestLocalDate_Basics.class);\n+    }\n+\n+    public TestLocalDate_Basics(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGet_DateTimeFieldType() {\n+        LocalDate test = new LocalDate();\n+        assertEquals(1970, test.get(DateTimeFieldType.year()));\n+        assertEquals(6, test.get(DateTimeFieldType.monthOfYear()));\n+        assertEquals(9, test.get(DateTimeFieldType.dayOfMonth()));\n+        assertEquals(2, test.get(DateTimeFieldType.dayOfWeek()));\n+        assertEquals(160, test.get(DateTimeFieldType.dayOfYear()));\n+        assertEquals(24, test.get(DateTimeFieldType.weekOfWeekyear()));\n+        assertEquals(1970, test.get(DateTimeFieldType.weekyear()));\n+        try {\n+            test.get(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.get(DateTimeFieldType.hourOfDay());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testSize() {\n+        LocalDate test = new LocalDate();\n+        assertEquals(3, test.size());\n+    }\n+\n+    public void testGetFieldType_int() {\n+        LocalDate test = new LocalDate(COPTIC_PARIS);\n+        assertSame(DateTimeFieldType.year(), test.getFieldType(0));\n+        assertSame(DateTimeFieldType.monthOfYear(), test.getFieldType(1));\n+        assertSame(DateTimeFieldType.dayOfMonth(), test.getFieldType(2));\n+        try {\n+            test.getFieldType(-1);\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            test.getFieldType(3);\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testGetFieldTypes() {\n+        LocalDate test = new LocalDate(COPTIC_PARIS);\n+        DateTimeFieldType[] fields = test.getFieldTypes();\n+        assertSame(DateTimeFieldType.year(), fields[0]);\n+        assertSame(DateTimeFieldType.monthOfYear(), fields[1]);\n+        assertSame(DateTimeFieldType.dayOfMonth(), fields[2]);\n+        assertNotSame(test.getFieldTypes(), test.getFieldTypes());\n+    }\n+\n+    public void testGetField_int() {\n+        LocalDate test = new LocalDate(COPTIC_PARIS);\n+        assertSame(COPTIC_UTC.year(), test.getField(0));\n+        assertSame(COPTIC_UTC.monthOfYear(), test.getField(1));\n+        assertSame(COPTIC_UTC.dayOfMonth(), test.getField(2));\n+        try {\n+            test.getField(-1);\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            test.getField(3);\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testGetFields() {\n+        LocalDate test = new LocalDate(COPTIC_PARIS);\n+        DateTimeField[] fields = test.getFields();\n+        assertSame(COPTIC_UTC.year(), fields[0]);\n+        assertSame(COPTIC_UTC.monthOfYear(), fields[1]);\n+        assertSame(COPTIC_UTC.dayOfMonth(), fields[2]);\n+        assertNotSame(test.getFields(), test.getFields());\n+    }\n+\n+    public void testGetValue_int() {\n+        LocalDate test = new LocalDate();\n+        assertEquals(1970, test.getValue(0));\n+        assertEquals(6, test.getValue(1));\n+        assertEquals(9, test.getValue(2));\n+        try {\n+            test.getValue(-1);\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            test.getValue(3);\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testGetValues() {\n+        LocalDate test = new LocalDate();\n+        int[] values = test.getValues();\n+        assertEquals(1970, values[0]);\n+        assertEquals(6, values[1]);\n+        assertEquals(9, values[2]);\n+        assertNotSame(test.getValues(), test.getValues());\n+    }\n+\n+    public void testIsSupported_DateTimeFieldType() {\n+        LocalDate test = new LocalDate(COPTIC_PARIS);\n+        assertEquals(true, test.isSupported(DateTimeFieldType.year()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfWeek()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.weekOfWeekyear()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.weekyear()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.yearOfCentury()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.yearOfEra()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.centuryOfEra()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.weekyearOfCentury()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.era()));\n+        assertEquals(false, test.isSupported(DateTimeFieldType.hourOfDay()));\n+        assertEquals(false, test.isSupported((DateTimeFieldType) null));\n+    }\n+\n+    public void testIsSupported_DurationFieldType() {\n+        LocalDate test = new LocalDate(1970, 6, 9);\n+        assertEquals(false, test.isSupported(DurationFieldType.eras()));\n+        assertEquals(true, test.isSupported(DurationFieldType.centuries()));\n+        assertEquals(true, test.isSupported(DurationFieldType.years()));\n+        assertEquals(true, test.isSupported(DurationFieldType.months()));\n+        assertEquals(true, test.isSupported(DurationFieldType.weekyears()));\n+        assertEquals(true, test.isSupported(DurationFieldType.weeks()));\n+        assertEquals(true, test.isSupported(DurationFieldType.days()));\n+        \n+        assertEquals(false, test.isSupported(DurationFieldType.hours()));\n+        assertEquals(false, test.isSupported((DurationFieldType) null));\n+    }\n+\n+    public void testEqualsHashCode() {\n+        LocalDate test1 = new LocalDate(1970, 6, 9, COPTIC_PARIS);\n+        LocalDate test2 = new LocalDate(1970, 6, 9, COPTIC_PARIS);\n+        assertEquals(true, test1.equals(test2));\n+        assertEquals(true, test2.equals(test1));\n+        assertEquals(true, test1.equals(test1));\n+        assertEquals(true, test2.equals(test2));\n+        assertEquals(true, test1.hashCode() == test2.hashCode());\n+        assertEquals(true, test1.hashCode() == test1.hashCode());\n+        assertEquals(true, test2.hashCode() == test2.hashCode());\n+        \n+        LocalDate test3 = new LocalDate(1971, 6, 9);\n+        assertEquals(false, test1.equals(test3));\n+        assertEquals(false, test2.equals(test3));\n+        assertEquals(false, test3.equals(test1));\n+        assertEquals(false, test3.equals(test2));\n+        assertEquals(false, test1.hashCode() == test3.hashCode());\n+        assertEquals(false, test2.hashCode() == test3.hashCode());\n+        \n+        assertEquals(false, test1.equals(\"Hello\"));\n+        assertEquals(true, test1.equals(new MockInstant()));\n+        assertEquals(true, test1.equals(new YearMonthDay(1970, 6, 9, COPTIC_PARIS)));\n+        assertEquals(true, test1.hashCode() == new YearMonthDay(1970, 6, 9, COPTIC_PARIS).hashCode());\n+        assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE));\n+    }\n+\n+    class MockInstant extends MockPartial {\n+        public Chronology getChronology() {\n+            return COPTIC_UTC;\n+        }\n+        public DateTimeField[] getFields() {\n+            return new DateTimeField[] {\n+                COPTIC_UTC.year(),\n+                COPTIC_UTC.monthOfYear(),\n+                COPTIC_UTC.dayOfMonth(),\n+            };\n+        }\n+        public int[] getValues() {\n+            return new int[] {1970, 6, 9};\n+        }\n+    }\n+\n+    public void testEqualsHashCodeLenient() {\n+        LocalDate test1 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS));\n+        LocalDate test2 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS));\n+        assertEquals(true, test1.equals(test2));\n+        assertEquals(true, test2.equals(test1));\n+        assertEquals(true, test1.equals(test1));\n+        assertEquals(true, test2.equals(test2));\n+        assertEquals(true, test1.hashCode() == test2.hashCode());\n+        assertEquals(true, test1.hashCode() == test1.hashCode());\n+        assertEquals(true, test2.hashCode() == test2.hashCode());\n+    }\n+\n+    public void testEqualsHashCodeStrict() {\n+        LocalDate test1 = new LocalDate(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS));\n+        LocalDate test2 = new LocalDate(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS));\n+        assertEquals(true, test1.equals(test2));\n+        assertEquals(true, test2.equals(test1));\n+        assertEquals(true, test1.equals(test1));\n+        assertEquals(true, test2.equals(test2));\n+        assertEquals(true, test1.hashCode() == test2.hashCode());\n+        assertEquals(true, test1.hashCode() == test1.hashCode());\n+        assertEquals(true, test2.hashCode() == test2.hashCode());\n+    }\n+\n+    public void testEqualsHashCodeAPI() {\n+        LocalDate test = new LocalDate(1970, 6, 9, COPTIC_PARIS);\n+        int expected = 157;\n+        expected = 23 * expected + 1970;\n+        expected = 23 * expected + COPTIC_UTC.year().getType().hashCode();\n+        expected = 23 * expected + 6;\n+        expected = 23 * expected + COPTIC_UTC.monthOfYear().getType().hashCode();\n+        expected = 23 * expected + 9;\n+        expected = 23 * expected + COPTIC_UTC.dayOfMonth().getType().hashCode();\n+        expected += COPTIC_UTC.hashCode();\n+        assertEquals(expected, test.hashCode());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testCompareTo() {\n+        LocalDate test1 = new LocalDate(2005, 6, 2);\n+        LocalDate test1a = new LocalDate(2005, 6, 2);\n+        assertEquals(0, test1.compareTo(test1a));\n+        assertEquals(0, test1a.compareTo(test1));\n+        assertEquals(0, test1.compareTo(test1));\n+        assertEquals(0, test1a.compareTo(test1a));\n+        \n+        LocalDate test2 = new LocalDate(2005, 7, 2);\n+        assertEquals(-1, test1.compareTo(test2));\n+        assertEquals(+1, test2.compareTo(test1));\n+        \n+        LocalDate test3 = new LocalDate(2005, 7, 2, GregorianChronology.getInstanceUTC());\n+        assertEquals(-1, test1.compareTo(test3));\n+        assertEquals(+1, test3.compareTo(test1));\n+        assertEquals(0, test3.compareTo(test2));\n+        \n+        DateTimeFieldType[] types = new DateTimeFieldType[] {\n+            DateTimeFieldType.year(),\n+            DateTimeFieldType.monthOfYear(),\n+            DateTimeFieldType.dayOfMonth(),\n+        };\n+        int[] values = new int[] {2005, 6, 2};\n+        Partial p = new Partial(types, values);\n+        assertEquals(0, test1.compareTo(p));\n+        assertEquals(0, test1.compareTo(new YearMonthDay(2005, 6, 2)));\n+        try {\n+            test1.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+//        try {\n+//            test1.compareTo(new Date());\n+//            fail();\n+//        } catch (ClassCastException ex) {}\n+        try {\n+            test1.compareTo(new TimeOfDay());\n+            fail();\n+        } catch (ClassCastException ex) {}\n+        Partial partial = new Partial()\n+            .with(DateTimeFieldType.centuryOfEra(), 1)\n+            .with(DateTimeFieldType.halfdayOfDay(), 0)\n+            .with(DateTimeFieldType.dayOfMonth(), 9);\n+        try {\n+            new LocalDate(1970, 6, 9).compareTo(partial);\n+            fail();\n+        } catch (ClassCastException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsEqual_LocalDate() {\n+        LocalDate test1 = new LocalDate(2005, 6, 2);\n+        LocalDate test1a = new LocalDate(2005, 6, 2);\n+        assertEquals(true, test1.isEqual(test1a));\n+        assertEquals(true, test1a.isEqual(test1));\n+        assertEquals(true, test1.isEqual(test1));\n+        assertEquals(true, test1a.isEqual(test1a));\n+        \n+        LocalDate test2 = new LocalDate(2005, 7, 2);\n+        assertEquals(false, test1.isEqual(test2));\n+        assertEquals(false, test2.isEqual(test1));\n+        \n+        LocalDate test3 = new LocalDate(2005, 7, 2, GregorianChronology.getInstanceUTC());\n+        assertEquals(false, test1.isEqual(test3));\n+        assertEquals(false, test3.isEqual(test1));\n+        assertEquals(true, test3.isEqual(test2));\n+        \n+        try {\n+            new LocalDate(2005, 7, 2).isEqual(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsBefore_LocalDate() {\n+        LocalDate test1 = new LocalDate(2005, 6, 2);\n+        LocalDate test1a = new LocalDate(2005, 6, 2);\n+        assertEquals(false, test1.isBefore(test1a));\n+        assertEquals(false, test1a.isBefore(test1));\n+        assertEquals(false, test1.isBefore(test1));\n+        assertEquals(false, test1a.isBefore(test1a));\n+        \n+        LocalDate test2 = new LocalDate(2005, 7, 2);\n+        assertEquals(true, test1.isBefore(test2));\n+        assertEquals(false, test2.isBefore(test1));\n+        \n+        LocalDate test3 = new LocalDate(2005, 7, 2, GregorianChronology.getInstanceUTC());\n+        assertEquals(true, test1.isBefore(test3));\n+        assertEquals(false, test3.isBefore(test1));\n+        assertEquals(false, test3.isBefore(test2));\n+        \n+        try {\n+            new LocalDate(2005, 7, 2).isBefore(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsAfter_LocalDate() {\n+        LocalDate test1 = new LocalDate(2005, 6, 2);\n+        LocalDate test1a = new LocalDate(2005, 6, 2);\n+        assertEquals(false, test1.isAfter(test1a));\n+        assertEquals(false, test1a.isAfter(test1));\n+        assertEquals(false, test1.isAfter(test1));\n+        assertEquals(false, test1a.isAfter(test1a));\n+        \n+        LocalDate test2 = new LocalDate(2005, 7, 2);\n+        assertEquals(false, test1.isAfter(test2));\n+        assertEquals(true, test2.isAfter(test1));\n+        \n+        LocalDate test3 = new LocalDate(2005, 7, 2, GregorianChronology.getInstanceUTC());\n+        assertEquals(false, test1.isAfter(test3));\n+        assertEquals(true, test3.isAfter(test1));\n+        assertEquals(false, test3.isAfter(test2));\n+        \n+        try {\n+            new LocalDate(2005, 7, 2).isAfter(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithField_DateTimeFieldType_int_1() {\n+        LocalDate test = new LocalDate(2004, 6, 9);\n+        LocalDate result = test.withField(DateTimeFieldType.year(), 2006);\n+        \n+        assertEquals(new LocalDate(2004, 6, 9), test);\n+        assertEquals(new LocalDate(2006, 6, 9), result);\n+    }\n+\n+    public void testWithField_DateTimeFieldType_int_2() {\n+        LocalDate test = new LocalDate(2004, 6, 9);\n+        try {\n+            test.withField(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithField_DateTimeFieldType_int_3() {\n+        LocalDate test = new LocalDate(2004, 6, 9);\n+        try {\n+            test.withField(DateTimeFieldType.hourOfDay(), 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithField_DateTimeFieldType_int_4() {\n+        LocalDate test = new LocalDate(2004, 6, 9);\n+        LocalDate result = test.withField(DateTimeFieldType.year(), 2004);\n+        assertEquals(new LocalDate(2004, 6, 9), test);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithFieldAdded_DurationFieldType_int_1() {\n+        LocalDate test = new LocalDate(2004, 6, 9);\n+        LocalDate result = test.withFieldAdded(DurationFieldType.years(), 6);\n+        \n+        assertEquals(new LocalDate(2004, 6, 9), test);\n+        assertEquals(new LocalDate(2010, 6, 9), result);\n+    }\n+\n+    public void testWithFieldAdded_DurationFieldType_int_2() {\n+        LocalDate test = new LocalDate(2004, 6, 9);\n+        try {\n+            test.withFieldAdded(null, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded_DurationFieldType_int_3() {\n+        LocalDate test = new LocalDate(2004, 6, 9);\n+        try {\n+            test.withFieldAdded(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded_DurationFieldType_int_4() {\n+        LocalDate test = new LocalDate(2004, 6, 9);\n+        LocalDate result = test.withFieldAdded(DurationFieldType.years(), 0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testWithFieldAdded_DurationFieldType_int_5() {\n+        LocalDate test = new LocalDate(2004, 6, 9);\n+        try {\n+            test.withFieldAdded(DurationFieldType.hours(), 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPlus_RP() {\n+        LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON);\n+        LocalDate result = test.plus(new Period(1, 2, 3, 4, 29, 6, 7, 8));\n+        LocalDate expected = new LocalDate(2003, 7, 28, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.plus((ReadablePeriod) null);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusYears_int() {\n+        LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON);\n+        LocalDate result = test.plusYears(1);\n+        LocalDate expected = new LocalDate(2003, 5, 3, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusYears(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusMonths_int() {\n+        LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON);\n+        LocalDate result = test.plusMonths(1);\n+        LocalDate expected = new LocalDate(2002, 6, 3, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusMonths(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusWeeks_int() {\n+        LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON);\n+        LocalDate result = test.plusWeeks(1);\n+        LocalDate expected = new LocalDate(2002, 5, 10, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusWeeks(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusDays_int() {\n+        LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON);\n+        LocalDate result = test.plusDays(1);\n+        LocalDate expected = new LocalDate(2002, 5, 4, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusDays(0);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMinus_RP() {\n+        LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON);\n+        LocalDate result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));\n+        \n+        // TODO breaks because it subtracts millis now, and thus goes\n+        // into the previous day\n+        \n+        LocalDate expected = new LocalDate(2001, 3, 26, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.minus((ReadablePeriod) null);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusYears_int() {\n+        LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON);\n+        LocalDate result = test.minusYears(1);\n+        LocalDate expected = new LocalDate(2001, 5, 3, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusYears(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusMonths_int() {\n+        LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON);\n+        LocalDate result = test.minusMonths(1);\n+        LocalDate expected = new LocalDate(2002, 4, 3, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusMonths(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusWeeks_int() {\n+        LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON);\n+        LocalDate result = test.minusWeeks(1);\n+        LocalDate expected = new LocalDate(2002, 4, 26, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusWeeks(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusDays_int() {\n+        LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON);\n+        LocalDate result = test.minusDays(1);\n+        LocalDate expected = new LocalDate(2002, 5, 2, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusDays(0);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetters() {\n+        LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC);\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(160, test.getDayOfYear());\n+        assertEquals(2, test.getDayOfWeek());\n+        assertEquals(24, test.getWeekOfWeekyear());\n+        assertEquals(1970, test.getWeekyear());\n+        assertEquals(70, test.getYearOfCentury());\n+        assertEquals(20, test.getCenturyOfEra());\n+        assertEquals(1970, test.getYearOfEra());\n+        assertEquals(DateTimeConstants.AD, test.getEra());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithers() {\n+        LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC);\n+        check(test.withYear(2000), 2000, 6, 9);\n+        check(test.withMonthOfYear(2), 1970, 2, 9);\n+        check(test.withDayOfMonth(2), 1970, 6, 2);\n+        check(test.withDayOfYear(6), 1970, 1, 6);\n+        check(test.withDayOfWeek(6), 1970, 6, 13);\n+        check(test.withWeekOfWeekyear(6), 1970, 2, 3);\n+        check(test.withWeekyear(1971), 1971, 6, 15);\n+        check(test.withYearOfCentury(60), 1960, 6, 9);\n+        check(test.withCenturyOfEra(21), 2070, 6, 9);\n+        check(test.withYearOfEra(1066), 1066, 6, 9);\n+        check(test.withEra(DateTimeConstants.BC), -1970, 6, 9);\n+        try {\n+            test.withMonthOfYear(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.withMonthOfYear(13);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateTimeAtStartOfDay() {\n+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);\n+        \n+        DateTime test = base.toDateTimeAtStartOfDay();\n+        check(base, 2005, 6, 9);\n+        assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test);\n+    }\n+\n+    public void testToDateTimeAtStartOfDay_avoidDST() {\n+        LocalDate base = new LocalDate(2007, 4, 1);\n+        \n+        DateTimeZone.setDefault(MOCK_GAZA);\n+        DateTime test = base.toDateTimeAtStartOfDay();\n+        check(base, 2007, 4, 1);\n+        assertEquals(new DateTime(2007, 4, 1, 1, 0, 0, 0, MOCK_GAZA), test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateTimeAtStartOfDay_Zone() {\n+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);\n+        \n+        DateTime test = base.toDateTimeAtStartOfDay(TOKYO);\n+        check(base, 2005, 6, 9);\n+        assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_TOKYO), test);\n+    }\n+\n+    public void testToDateTimeAtStartOfDay_Zone_avoidDST() {\n+        LocalDate base = new LocalDate(2007, 4, 1);\n+        \n+        DateTime test = base.toDateTimeAtStartOfDay(MOCK_GAZA);\n+        check(base, 2007, 4, 1);\n+        assertEquals(new DateTime(2007, 4, 1, 1, 0, 0, 0, MOCK_GAZA), test);\n+    }\n+\n+    public void testToDateTimeAtStartOfDay_nullZone() {\n+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);\n+        \n+        DateTime test = base.toDateTimeAtStartOfDay((DateTimeZone) null);\n+        check(base, 2005, 6, 9);\n+        assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateTimeAtCurrentTime() {\n+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n+        DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        \n+        DateTime test = base.toDateTimeAtCurrentTime();\n+        check(base, 2005, 6, 9);\n+        DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON);\n+        expected = expected.year().setCopy(2005);\n+        expected = expected.monthOfYear().setCopy(6);\n+        expected = expected.dayOfMonth().setCopy(9);\n+        assertEquals(expected, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateTimeAtCurrentTime_Zone() {\n+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n+        DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        \n+        DateTime test = base.toDateTimeAtCurrentTime(TOKYO);\n+        check(base, 2005, 6, 9);\n+        DateTime expected = new DateTime(dt.getMillis(), COPTIC_TOKYO);\n+        expected = expected.year().setCopy(2005);\n+        expected = expected.monthOfYear().setCopy(6);\n+        expected = expected.dayOfMonth().setCopy(9);\n+        assertEquals(expected, test);\n+    }\n+\n+    public void testToDateTimeAtCurrentTime_nullZone() {\n+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n+        DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        \n+        DateTime test = base.toDateTimeAtCurrentTime((DateTimeZone) null);\n+        check(base, 2005, 6, 9);\n+        DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON);\n+        expected = expected.year().setCopy(2005);\n+        expected = expected.monthOfYear().setCopy(6);\n+        expected = expected.dayOfMonth().setCopy(9);\n+        assertEquals(expected, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToLocalDateTime_LocalTime() {\n+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n+        LocalTime tod = new LocalTime(12, 13, 14, 15, COPTIC_TOKYO);\n+        \n+        LocalDateTime test = base.toLocalDateTime(tod);\n+        check(base, 2005, 6, 9);\n+        LocalDateTime expected = new LocalDateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_UTC);\n+        assertEquals(expected, test);\n+    }\n+\n+    public void testToLocalDateTime_nullLocalTime() {\n+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n+        \n+        try {\n+            base.toLocalDateTime((LocalTime) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testToLocalDateTime_wrongChronologyLocalTime() {\n+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n+        LocalTime tod = new LocalTime(12, 13, 14, 15, BUDDHIST_PARIS); // PARIS irrelevant\n+        \n+        try {\n+            base.toLocalDateTime(tod);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateTime_LocalTime() {\n+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n+        LocalTime tod = new LocalTime(12, 13, 14, 15, COPTIC_TOKYO);\n+        \n+        DateTime test = base.toDateTime(tod);\n+        check(base, 2005, 6, 9);\n+        DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_LONDON);\n+        assertEquals(expected, test);\n+    }\n+\n+    public void testToDateTime_nullLocalTime() {\n+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n+        long now = new DateTime(2004, 5, 8, 12, 13, 14, 15, COPTIC_LONDON).getMillis();\n+        DateTimeUtils.setCurrentMillisFixed(now);\n+        \n+        DateTime test = base.toDateTime((LocalTime) null);\n+        check(base, 2005, 6, 9);\n+        DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_LONDON);\n+        assertEquals(expected, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateTime_LocalTime_Zone() {\n+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n+        LocalTime tod = new LocalTime(12, 13, 14, 15, COPTIC_TOKYO);\n+        \n+        DateTime test = base.toDateTime(tod, TOKYO);\n+        check(base, 2005, 6, 9);\n+        DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_TOKYO);\n+        assertEquals(expected, test);\n+    }\n+\n+    public void testToDateTime_LocalTime_nullZone() {\n+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n+        LocalTime tod = new LocalTime(12, 13, 14, 15, COPTIC_TOKYO);\n+        \n+        DateTime test = base.toDateTime(tod, null);\n+        check(base, 2005, 6, 9);\n+        DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_LONDON);\n+        assertEquals(expected, test);\n+    }\n+\n+    public void testToDateTime_nullLocalTime_Zone() {\n+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n+        long now = new DateTime(2004, 5, 8, 12, 13, 14, 15, COPTIC_TOKYO).getMillis();\n+        DateTimeUtils.setCurrentMillisFixed(now);\n+        \n+        DateTime test = base.toDateTime((LocalTime) null, TOKYO);\n+        check(base, 2005, 6, 9);\n+        DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_TOKYO);\n+        assertEquals(expected, test);\n+    }\n+\n+    public void testToDateTime_wrongChronoLocalTime_Zone() {\n+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n+        LocalTime tod = new LocalTime(12, 13, 14, 15, BUDDHIST_TOKYO);\n+        \n+        try {\n+            base.toDateTime(tod, LONDON);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateMidnight() {\n+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);\n+        \n+        DateMidnight test = base.toDateMidnight();\n+        check(base, 2005, 6, 9);\n+        assertEquals(new DateMidnight(2005, 6, 9, COPTIC_LONDON), test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateMidnight_Zone() {\n+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);\n+        \n+        DateMidnight test = base.toDateMidnight(TOKYO);\n+        check(base, 2005, 6, 9);\n+        assertEquals(new DateMidnight(2005, 6, 9, COPTIC_TOKYO), test);\n+    }\n+\n+    public void testToDateMidnight_nullZone() {\n+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);\n+        \n+        DateMidnight test = base.toDateMidnight((DateTimeZone) null);\n+        check(base, 2005, 6, 9);\n+        assertEquals(new DateMidnight(2005, 6, 9, COPTIC_LONDON), test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateTime_RI() {\n+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);\n+        DateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7);\n+        \n+        DateTime test = base.toDateTime(dt);\n+        check(base, 2005, 6, 9);\n+        DateTime expected = dt;\n+        expected = expected.year().setCopy(2005);\n+        expected = expected.monthOfYear().setCopy(6);\n+        expected = expected.dayOfMonth().setCopy(9);\n+        assertEquals(expected, test);\n+    }\n+\n+    public void testToDateTime_nullRI() {\n+        LocalDate base = new LocalDate(2005, 6, 9);\n+        DateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        \n+        DateTime test = base.toDateTime((ReadableInstant) null);\n+        check(base, 2005, 6, 9);\n+        DateTime expected = dt;\n+        expected = expected.year().setCopy(2005);\n+        expected = expected.monthOfYear().setCopy(6);\n+        expected = expected.dayOfMonth().setCopy(9);\n+        assertEquals(expected, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToInterval() {\n+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n+        Interval test = base.toInterval();\n+        check(base, 2005, 6, 9);\n+        DateTime start = base.toDateTimeAtStartOfDay();\n+        DateTime end = start.plus(Period.days(1));\n+        Interval expected = new Interval(start, end);\n+        assertEquals(expected, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToInterval_Zone() {\n+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n+        Interval test = base.toInterval(TOKYO);\n+        check(base, 2005, 6, 9);\n+        DateTime start = base.toDateTimeAtStartOfDay(TOKYO);\n+        DateTime end = start.plus(Period.days(1));\n+        Interval expected = new Interval(start, end);\n+        assertEquals(expected, test);\n+    }\n+\n+    public void testToInterval_Zone_noMidnight() {\n+        LocalDate base = new LocalDate(2006, 4, 1, ISO_LONDON);  // LONDON irrelevant\n+        DateTimeZone gaza = DateTimeZone.forID(\"Asia/Gaza\");\n+        Interval test = base.toInterval(gaza);\n+        check(base, 2006, 4, 1);\n+        DateTime start = new DateTime(2006, 4, 1, 1, 0, 0, 0, gaza);\n+        DateTime end = new DateTime(2006, 4, 2, 0, 0, 0, 0, gaza);\n+        Interval expected = new Interval(start, end);\n+        assertEquals(expected, test);\n+    }\n+\n+    public void testToInterval_nullZone() {\n+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n+        Interval test = base.toInterval(null);\n+        check(base, 2005, 6, 9);\n+        DateTime start = base.toDateTimeAtStartOfDay(LONDON);\n+        DateTime end = start.plus(Period.days(1));\n+        Interval expected = new Interval(start, end);\n+        assertEquals(expected, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDate_summer() {\n+        LocalDate base = new LocalDate(2005, 7, 9, COPTIC_PARIS);\n+        \n+        Date test = base.toDate();\n+        check(base, 2005, 7, 9);\n+        \n+        GregorianCalendar gcal = new GregorianCalendar();\n+        gcal.clear();\n+        gcal.set(Calendar.YEAR, 2005);\n+        gcal.set(Calendar.MONTH, Calendar.JULY);\n+        gcal.set(Calendar.DAY_OF_MONTH, 9);\n+        assertEquals(gcal.getTime(), test);\n+    }\n+\n+    public void testToDate_winter() {\n+        LocalDate base = new LocalDate(2005, 1, 9, COPTIC_PARIS);\n+        \n+        Date test = base.toDate();\n+        check(base, 2005, 1, 9);\n+        \n+        GregorianCalendar gcal = new GregorianCalendar();\n+        gcal.clear();\n+        gcal.set(Calendar.YEAR, 2005);\n+        gcal.set(Calendar.MONTH, Calendar.JANUARY);\n+        gcal.set(Calendar.DAY_OF_MONTH, 9);\n+        assertEquals(gcal.getTime(), test);\n+    }\n+\n+    public void testToDate_springDST() {\n+        LocalDate base = new LocalDate(2007, 4, 2);\n+        \n+        SimpleTimeZone testZone = new SimpleTimeZone(3600000, \"NoMidnight\",\n+                Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000);\n+        TimeZone currentZone = TimeZone.getDefault();\n+        try {\n+            TimeZone.setDefault(testZone);\n+            Date test = base.toDate();\n+            check(base, 2007, 4, 2);\n+            assertEquals(\"Mon Apr 02 01:00:00 GMT+02:00 2007\", test.toString());\n+        } finally {\n+            TimeZone.setDefault(currentZone);\n+        }\n+    }\n+\n+    public void testToDate_springDST_2Hour40Savings() {\n+        LocalDate base = new LocalDate(2007, 4, 2);\n+        \n+        SimpleTimeZone testZone = new SimpleTimeZone(3600000, \"NoMidnight\",\n+                Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000, (3600000 / 6) * 16);\n+        TimeZone currentZone = TimeZone.getDefault();\n+        try {\n+            TimeZone.setDefault(testZone);\n+            Date test = base.toDate();\n+            check(base, 2007, 4, 2);\n+            assertEquals(\"Mon Apr 02 02:40:00 GMT+03:40 2007\", test.toString());\n+        } finally {\n+            TimeZone.setDefault(currentZone);\n+        }\n+    }\n+\n+    public void testToDate_autumnDST() {\n+        LocalDate base = new LocalDate(2007, 10, 2);\n+        \n+        SimpleTimeZone testZone = new SimpleTimeZone(3600000, \"NoMidnight\",\n+                Calendar.APRIL, 2, 0, 0, Calendar.OCTOBER, 2, 0, 3600000);\n+        TimeZone currentZone = TimeZone.getDefault();\n+        try {\n+            TimeZone.setDefault(testZone);\n+            Date test = base.toDate();\n+            check(base, 2007, 10, 2);\n+            assertEquals(\"Tue Oct 02 00:00:00 GMT+02:00 2007\", test.toString());\n+        } finally {\n+            TimeZone.setDefault(currentZone);\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testProperty() {\n+        LocalDate test = new LocalDate(2005, 6, 9, GJ_UTC);\n+        assertEquals(test.year(), test.property(DateTimeFieldType.year()));\n+        assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear()));\n+        assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth()));\n+        assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek()));\n+        assertEquals(test.dayOfYear(), test.property(DateTimeFieldType.dayOfYear()));\n+        assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear()));\n+        assertEquals(test.weekyear(), test.property(DateTimeFieldType.weekyear()));\n+        assertEquals(test.yearOfCentury(), test.property(DateTimeFieldType.yearOfCentury()));\n+        assertEquals(test.yearOfEra(), test.property(DateTimeFieldType.yearOfEra()));\n+        assertEquals(test.centuryOfEra(), test.property(DateTimeFieldType.centuryOfEra()));\n+        assertEquals(test.era(), test.property(DateTimeFieldType.era()));\n+        try {\n+            test.property(DateTimeFieldType.millisOfDay());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.property(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS);\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        LocalDate result = (LocalDate) ois.readObject();\n+        ois.close();\n+        \n+        assertEquals(test, result);\n+        assertTrue(Arrays.equals(test.getValues(), result.getValues()));\n+        assertTrue(Arrays.equals(test.getFields(), result.getFields()));\n+        assertEquals(test.getChronology(), result.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        LocalDate test = new LocalDate(2002, 6, 9);\n+        assertEquals(\"2002-06-09\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString_String() {\n+        LocalDate test = new LocalDate(2002, 6, 9);\n+        assertEquals(\"2002 \\ufffd\\ufffd\", test.toString(\"yyyy HH\"));\n+        assertEquals(\"2002-06-09\", test.toString((String) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString_String_Locale() {\n+        LocalDate test = new LocalDate(1970, 6, 9);\n+        assertEquals(\"Tue 9/6\", test.toString(\"EEE d/M\", Locale.ENGLISH));\n+        assertEquals(\"mar. 9/6\", test.toString(\"EEE d/M\", Locale.FRENCH));\n+        assertEquals(\"1970-06-09\", test.toString(null, Locale.ENGLISH));\n+        assertEquals(\"Tue 9/6\", test.toString(\"EEE d/M\", null));\n+        assertEquals(\"1970-06-09\", test.toString(null, null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString_DTFormatter() {\n+        LocalDate test = new LocalDate(2002, 6, 9);\n+        assertEquals(\"2002 \\ufffd\\ufffd\", test.toString(DateTimeFormat.forPattern(\"yyyy HH\")));\n+        assertEquals(\"2002-06-09\", test.toString((DateTimeFormatter) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private void check(LocalDate test, int hour, int min, int sec) {\n+        assertEquals(hour, test.getYear());\n+        assertEquals(min, test.getMonthOfYear());\n+        assertEquals(sec, test.getDayOfMonth());\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestLocalDate_Constructors.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * This class is a Junit unit test for LocalDate.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestLocalDate_Constructors extends TestCase {\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n+    private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();\n+    private static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);\n+    \n+    private long TEST_TIME_NOW =\n+            (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    private long TEST_TIME1 =\n+        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    private long TEST_TIME1_ROUNDED =\n+        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+    private long TEST_TIME2 =\n+        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+\n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestLocalDate_Constructors.class);\n+    }\n+\n+    public TestLocalDate_Constructors(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_FromCalendarFields() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n+        cal.set(Calendar.MILLISECOND, 7);\n+        LocalDate expected = new LocalDate(1970, 2, 3);\n+        assertEquals(expected, LocalDate.fromCalendarFields(cal));\n+        try {\n+            LocalDate.fromCalendarFields((Calendar) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_FromDateFields() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n+        cal.set(Calendar.MILLISECOND, 7);\n+        LocalDate expected = new LocalDate(1970, 2, 3);\n+        assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));\n+        try {\n+            LocalDate.fromDateFields((Date) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor() throws Throwable {\n+        LocalDate test = new LocalDate();\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_DateTimeZone() throws Throwable {\n+        DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        // 23:59 in London is 00:59 the following day in Paris\n+        \n+        LocalDate test = new LocalDate(LONDON);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(2005, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(8, test.getDayOfMonth());\n+        \n+        test = new LocalDate(PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(2005, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_nullDateTimeZone() throws Throwable {\n+        DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        // 23:59 in London is 00:59 the following day in Paris\n+        \n+        LocalDate test = new LocalDate((DateTimeZone) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(2005, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(8, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_Chronology() throws Throwable {\n+        LocalDate test = new LocalDate(GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_nullChronology() throws Throwable {\n+        LocalDate test = new LocalDate((Chronology) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long1() throws Throwable {\n+        LocalDate test = new LocalDate(TEST_TIME1);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_long2() throws Throwable {\n+        LocalDate test = new LocalDate(TEST_TIME2);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1971, test.getYear());\n+        assertEquals(5, test.getMonthOfYear());\n+        assertEquals(7, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_long1_DateTimeZone() throws Throwable {\n+        LocalDate test = new LocalDate(TEST_TIME1, PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+        assertEquals(TEST_TIME1_ROUNDED, test.getLocalMillis());\n+    }\n+\n+    public void testConstructor_long2_DateTimeZone() throws Throwable {\n+        LocalDate test = new LocalDate(TEST_TIME2, PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1971, test.getYear());\n+        assertEquals(5, test.getMonthOfYear());\n+        assertEquals(7, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_long3_DateTimeZone() throws Throwable {\n+        DateTime dt = new DateTime(2006, 6, 9, 0, 0, 0, 0, PARIS);\n+        DateTime dtUTC = new DateTime(2006, 6, 9, 0, 0, 0, 0, DateTimeZone.UTC);\n+        \n+        LocalDate test = new LocalDate(dt.getMillis(), PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(2006, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(dtUTC.getMillis(), test.getLocalMillis());\n+    }\n+\n+    public void testConstructor_long4_DateTimeZone() throws Throwable {\n+        DateTime dt = new DateTime(2006, 6, 9, 23, 59, 59, 999, PARIS);\n+        DateTime dtUTC = new DateTime(2006, 6, 9, 0, 0, 0, 0, DateTimeZone.UTC);\n+        \n+        LocalDate test = new LocalDate(dt.getMillis(), PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(2006, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(dtUTC.getMillis(), test.getLocalMillis());\n+    }\n+\n+    public void testConstructor_long_nullDateTimeZone() throws Throwable {\n+        LocalDate test = new LocalDate(TEST_TIME1, (DateTimeZone) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_long1_Chronology() throws Throwable {\n+        LocalDate test = new LocalDate(TEST_TIME1, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_long2_Chronology() throws Throwable {\n+        LocalDate test = new LocalDate(TEST_TIME2, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1971, test.getYear());\n+        assertEquals(5, test.getMonthOfYear());\n+        assertEquals(7, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_long_nullChronology() throws Throwable {\n+        LocalDate test = new LocalDate(TEST_TIME1, (Chronology) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_Object1() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        LocalDate test = new LocalDate(date);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_nullObject() throws Throwable {\n+        LocalDate test = new LocalDate((Object) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_ObjectString1() throws Throwable {\n+        LocalDate test = new LocalDate(\"1972-04-06\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1972, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_ObjectString2() throws Throwable {\n+        LocalDate test = new LocalDate(\"1972-037\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1972, test.getYear());\n+        assertEquals(2, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_ObjectString3() throws Throwable {\n+        LocalDate test = new LocalDate(\"1972-02\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1972, test.getYear());\n+        assertEquals(2, test.getMonthOfYear());\n+        assertEquals(1, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_ObjectStringEx1() throws Throwable {\n+        try {\n+            new LocalDate(\"1970-04-06T+14:00\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectStringEx2() throws Throwable {\n+        try {\n+            new LocalDate(\"1970-04-06T10:20:30.040\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectStringEx3() throws Throwable {\n+        try {\n+            new LocalDate(\"1970-04-06T10:20:30.040+14:00\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectStringEx4() throws Throwable {\n+        try {\n+            new LocalDate(\"T10:20:30.040\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectStringEx5() throws Throwable {\n+        try {\n+            new LocalDate(\"T10:20:30.040+14:00\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectStringEx6() throws Throwable {\n+        try {\n+            new LocalDate(\"10:20:30.040\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectStringEx7() throws Throwable {\n+        try {\n+            new LocalDate(\"10:20:30.040+14:00\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectLocalDate() throws Throwable {\n+        LocalDate date = new LocalDate(1970, 4, 6, BUDDHIST_UTC);\n+        LocalDate test = new LocalDate(date);\n+        assertEquals(BUDDHIST_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_ObjectLocalTime() throws Throwable {\n+        LocalTime time = new LocalTime(10, 20, 30, 40, BUDDHIST_UTC);\n+        try {\n+            new LocalDate(time);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectLocalDateTime() throws Throwable {\n+        LocalDateTime dt = new LocalDateTime(1970, 5, 6, 10, 20, 30, 40, BUDDHIST_UTC);\n+        LocalDate test = new LocalDate(dt);\n+        assertEquals(BUDDHIST_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(5, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_ObjectYearMonthDay() throws Throwable {\n+        YearMonthDay date = new YearMonthDay(1970, 4, 6, BUDDHIST_UTC);\n+        LocalDate test = new LocalDate(date);\n+        assertEquals(BUDDHIST_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_Object_DateTimeZone() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        LocalDate test = new LocalDate(date, PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_nullObject_DateTimeZone() throws Throwable {\n+        LocalDate test = new LocalDate((Object) null, PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_Object_nullDateTimeZone() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        LocalDate test = new LocalDate(date, (DateTimeZone) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_nullObject_nullDateTimeZone() throws Throwable {\n+        LocalDate test = new LocalDate((Object) null, (DateTimeZone) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_Object_Chronology() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        LocalDate test = new LocalDate(date, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_nullObject_Chronology() throws Throwable {\n+        LocalDate test = new LocalDate((Object) null, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_Object_nullChronology() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        LocalDate test = new LocalDate(date, (Chronology) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_nullObject_nullChronology() throws Throwable {\n+        LocalDate test = new LocalDate((Object) null, (Chronology) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_int_int_int() throws Throwable {\n+        LocalDate test = new LocalDate(1970, 6, 9);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        try {\n+            new LocalDate(Integer.MIN_VALUE, 6, 9);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDate(Integer.MAX_VALUE, 6, 9);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDate(1970, 0, 9);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDate(1970, 13, 9);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDate(1970, 6, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDate(1970, 6, 31);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        new LocalDate(1970, 7, 31);\n+        try {\n+            new LocalDate(1970, 7, 32);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_int_int_int_Chronology() throws Throwable {\n+        LocalDate test = new LocalDate(1970, 6, 9, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        try {\n+            new LocalDate(Integer.MIN_VALUE, 6, 9, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDate(Integer.MAX_VALUE, 6, 9, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDate(1970, 0, 9, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDate(1970, 13, 9, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDate(1970, 6, 0, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDate(1970, 6, 31, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        new LocalDate(1970, 7, 31, GREGORIAN_PARIS);\n+        try {\n+            new LocalDate(1970, 7, 32, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_int_int_int_nullChronology() throws Throwable {\n+        LocalDate test = new LocalDate(1970, 6, 9, null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestLocalDate_Properties.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.LenientChronology;\n+import org.joda.time.chrono.StrictChronology;\n+\n+/**\n+ * This class is a Junit unit test for YearMonthDay.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestLocalDate_Properties extends TestCase {\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+\n+    private long TEST_TIME_NOW =\n+            (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    private long TEST_TIME1 =\n+        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private long TEST_TIME2 =\n+        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestLocalDate_Properties.class);\n+    }\n+\n+    public TestLocalDate_Properties(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetYear() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        assertSame(test.getChronology().year(), test.year().getField());\n+        assertEquals(\"year\", test.year().getName());\n+        assertEquals(\"Property[year]\", test.year().toString());\n+        assertSame(test, test.year().getLocalDate());\n+        assertEquals(1972, test.year().get());\n+        assertEquals(\"1972\", test.year().getAsString());\n+        assertEquals(\"1972\", test.year().getAsText());\n+        assertEquals(\"1972\", test.year().getAsText(Locale.FRENCH));\n+        assertEquals(\"1972\", test.year().getAsShortText());\n+        assertEquals(\"1972\", test.year().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().years(), test.year().getDurationField());\n+        assertEquals(null, test.year().getRangeDurationField());\n+        assertEquals(9, test.year().getMaximumTextLength(null));\n+        assertEquals(9, test.year().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesYear() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        assertEquals(-292275054, test.year().getMinimumValue());\n+        assertEquals(-292275054, test.year().getMinimumValueOverall());\n+        assertEquals(292278993, test.year().getMaximumValue());\n+        assertEquals(292278993, test.year().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyAddToCopyYear() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.year().addToCopy(9);\n+        check(test, 1972, 6, 9);\n+        check(copy, 1981, 6, 9);\n+        \n+        copy = test.year().addToCopy(0);\n+        check(copy, 1972, 6, 9);\n+        \n+        copy = test.year().addToCopy(292278993 - 1972);\n+        check(copy, 292278993, 6, 9);\n+        \n+        try {\n+            test.year().addToCopy(292278993 - 1972 + 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 1972, 6, 9);\n+        \n+        copy = test.year().addToCopy(-1972);\n+        check(copy, 0, 6, 9);\n+        \n+        copy = test.year().addToCopy(-1973);\n+        check(copy, -1, 6, 9);\n+        \n+        try {\n+            test.year().addToCopy(-292275054 - 1972 - 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 1972, 6, 9);\n+    }\n+\n+    public void testPropertyAddWrapFieldToCopyYear() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.year().addWrapFieldToCopy(9);\n+        check(test, 1972, 6, 9);\n+        check(copy, 1981, 6, 9);\n+        \n+        copy = test.year().addWrapFieldToCopy(0);\n+        check(copy, 1972, 6, 9);\n+        \n+        copy = test.year().addWrapFieldToCopy(292278993 - 1972 + 1);\n+        check(copy, -292275054, 6, 9);\n+        \n+        copy = test.year().addWrapFieldToCopy(-292275054 - 1972 - 1);\n+        check(copy, 292278993, 6, 9);\n+    }\n+\n+    public void testPropertySetCopyYear() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.year().setCopy(12);\n+        check(test, 1972, 6, 9);\n+        check(copy, 12, 6, 9);\n+    }\n+\n+    public void testPropertySetCopyTextYear() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.year().setCopy(\"12\");\n+        check(test, 1972, 6, 9);\n+        check(copy, 12, 6, 9);\n+    }\n+\n+    public void testPropertyCompareToYear() {\n+        LocalDate test1 = new LocalDate(TEST_TIME1);\n+        LocalDate test2 = new LocalDate(TEST_TIME2);\n+        assertEquals(true, test1.year().compareTo(test2) < 0);\n+        assertEquals(true, test2.year().compareTo(test1) > 0);\n+        assertEquals(true, test1.year().compareTo(test1) == 0);\n+        try {\n+            test1.year().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.year().compareTo(dt2) < 0);\n+        assertEquals(true, test2.year().compareTo(dt1) > 0);\n+        assertEquals(true, test1.year().compareTo(dt1) == 0);\n+        try {\n+            test1.year().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMonth() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField());\n+        assertEquals(\"monthOfYear\", test.monthOfYear().getName());\n+        assertEquals(\"Property[monthOfYear]\", test.monthOfYear().toString());\n+        assertSame(test, test.monthOfYear().getLocalDate());\n+        assertEquals(6, test.monthOfYear().get());\n+        assertEquals(\"6\", test.monthOfYear().getAsString());\n+        assertEquals(\"June\", test.monthOfYear().getAsText());\n+        assertEquals(\"juin\", test.monthOfYear().getAsText(Locale.FRENCH));\n+        assertEquals(\"Jun\", test.monthOfYear().getAsShortText());\n+        assertEquals(\"juin\", test.monthOfYear().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField());\n+        assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField());\n+        assertEquals(9, test.monthOfYear().getMaximumTextLength(null));\n+        assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null));\n+        test = new LocalDate(1972, 7, 9);\n+        assertEquals(\"juillet\", test.monthOfYear().getAsText(Locale.FRENCH));\n+        assertEquals(\"juil.\", test.monthOfYear().getAsShortText(Locale.FRENCH));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesMonth() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        assertEquals(1, test.monthOfYear().getMinimumValue());\n+        assertEquals(1, test.monthOfYear().getMinimumValueOverall());\n+        assertEquals(12, test.monthOfYear().getMaximumValue());\n+        assertEquals(12, test.monthOfYear().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyAddToCopyMonth() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.monthOfYear().addToCopy(6);\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 12, 9);\n+        \n+        copy = test.monthOfYear().addToCopy(7);\n+        check(copy, 1973, 1, 9);\n+        \n+        copy = test.monthOfYear().addToCopy(-5);\n+        check(copy, 1972, 1, 9);\n+        \n+        copy = test.monthOfYear().addToCopy(-6);\n+        check(copy, 1971, 12, 9);\n+        \n+        test = new LocalDate(1972, 1, 31);\n+        copy = test.monthOfYear().addToCopy(1);\n+        check(copy, 1972, 2, 29);\n+        \n+        copy = test.monthOfYear().addToCopy(2);\n+        check(copy, 1972, 3, 31);\n+        \n+        copy = test.monthOfYear().addToCopy(3);\n+        check(copy, 1972, 4, 30);\n+        \n+        test = new LocalDate(1971, 1, 31);\n+        copy = test.monthOfYear().addToCopy(1);\n+        check(copy, 1971, 2, 28);\n+    }\n+\n+    public void testPropertyAddWrapFieldToCopyMonth() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.monthOfYear().addWrapFieldToCopy(4);\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 10, 9);\n+        \n+        copy = test.monthOfYear().addWrapFieldToCopy(8);\n+        check(copy, 1972, 2, 9);\n+        \n+        copy = test.monthOfYear().addWrapFieldToCopy(-8);\n+        check(copy, 1972, 10, 9);\n+        \n+        test = new LocalDate(1972, 1, 31);\n+        copy = test.monthOfYear().addWrapFieldToCopy(1);\n+        check(copy, 1972, 2, 29);\n+        \n+        copy = test.monthOfYear().addWrapFieldToCopy(2);\n+        check(copy, 1972, 3, 31);\n+        \n+        copy = test.monthOfYear().addWrapFieldToCopy(3);\n+        check(copy, 1972, 4, 30);\n+        \n+        test = new LocalDate(1971, 1, 31);\n+        copy = test.monthOfYear().addWrapFieldToCopy(1);\n+        check(copy, 1971, 2, 28);\n+    }\n+\n+    public void testPropertySetCopyMonth() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.monthOfYear().setCopy(12);\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 12, 9);\n+        \n+        test = new LocalDate(1972, 1, 31);\n+        copy = test.monthOfYear().setCopy(2);\n+        check(copy, 1972, 2, 29);\n+        \n+        try {\n+            test.monthOfYear().setCopy(13);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.monthOfYear().setCopy(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetCopyTextMonth() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.monthOfYear().setCopy(\"12\");\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 12, 9);\n+        \n+        copy = test.monthOfYear().setCopy(\"December\");\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 12, 9);\n+        \n+        copy = test.monthOfYear().setCopy(\"Dec\");\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 12, 9);\n+    }\n+\n+    public void testPropertyCompareToMonth() {\n+        LocalDate test1 = new LocalDate(TEST_TIME1);\n+        LocalDate test2 = new LocalDate(TEST_TIME2);\n+        assertEquals(true, test1.monthOfYear().compareTo(test2) < 0);\n+        assertEquals(true, test2.monthOfYear().compareTo(test1) > 0);\n+        assertEquals(true, test1.monthOfYear().compareTo(test1) == 0);\n+        try {\n+            test1.monthOfYear().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0);\n+        assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0);\n+        assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0);\n+        try {\n+            test1.monthOfYear().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetDay() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField());\n+        assertEquals(\"dayOfMonth\", test.dayOfMonth().getName());\n+        assertEquals(\"Property[dayOfMonth]\", test.dayOfMonth().toString());\n+        assertSame(test, test.dayOfMonth().getLocalDate());\n+        assertEquals(9, test.dayOfMonth().get());\n+        assertEquals(\"9\", test.dayOfMonth().getAsString());\n+        assertEquals(\"9\", test.dayOfMonth().getAsText());\n+        assertEquals(\"9\", test.dayOfMonth().getAsText(Locale.FRENCH));\n+        assertEquals(\"9\", test.dayOfMonth().getAsShortText());\n+        assertEquals(\"9\", test.dayOfMonth().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField());\n+        assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField());\n+        assertEquals(2, test.dayOfMonth().getMaximumTextLength(null));\n+        assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesDay() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        assertEquals(1, test.dayOfMonth().getMinimumValue());\n+        assertEquals(1, test.dayOfMonth().getMinimumValueOverall());\n+        assertEquals(30, test.dayOfMonth().getMaximumValue());\n+        assertEquals(31, test.dayOfMonth().getMaximumValueOverall());\n+        test = new LocalDate(1972, 7, 9);\n+        assertEquals(31, test.dayOfMonth().getMaximumValue());\n+        test = new LocalDate(1972, 2, 9);\n+        assertEquals(29, test.dayOfMonth().getMaximumValue());\n+        test = new LocalDate(1971, 2, 9);\n+        assertEquals(28, test.dayOfMonth().getMaximumValue());\n+    }\n+\n+    public void testPropertyAddToCopyDay() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.dayOfMonth().addToCopy(9);\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 6, 18);\n+        \n+        copy = test.dayOfMonth().addToCopy(21);\n+        check(copy, 1972, 6, 30);\n+        \n+        copy = test.dayOfMonth().addToCopy(22);\n+        check(copy, 1972, 7, 1);\n+        \n+        copy = test.dayOfMonth().addToCopy(22 + 30);\n+        check(copy, 1972, 7, 31);\n+        \n+        copy = test.dayOfMonth().addToCopy(22 + 31);\n+        check(copy, 1972, 8, 1);\n+\n+        copy = test.dayOfMonth().addToCopy(21 + 31 + 31 + 30 + 31 + 30 + 31);\n+        check(copy, 1972, 12, 31);\n+        \n+        copy = test.dayOfMonth().addToCopy(22 + 31 + 31 + 30 + 31 + 30 + 31);\n+        check(copy, 1973, 1, 1);\n+        \n+        copy = test.dayOfMonth().addToCopy(-8);\n+        check(copy, 1972, 6, 1);\n+        \n+        copy = test.dayOfMonth().addToCopy(-9);\n+        check(copy, 1972, 5, 31);\n+        \n+        copy = test.dayOfMonth().addToCopy(-8 - 31 - 30 - 31 - 29 - 31);\n+        check(copy, 1972, 1, 1);\n+        \n+        copy = test.dayOfMonth().addToCopy(-9 - 31 - 30 - 31 - 29 - 31);\n+        check(copy, 1971, 12, 31);\n+    }\n+\n+    public void testPropertyAddWrapFieldToCopyDay() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.dayOfMonth().addWrapFieldToCopy(21);\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 6, 30);\n+        \n+        copy = test.dayOfMonth().addWrapFieldToCopy(22);\n+        check(copy, 1972, 6, 1);\n+        \n+        copy = test.dayOfMonth().addWrapFieldToCopy(-12);\n+        check(copy, 1972, 6, 27);\n+        \n+        test = new LocalDate(1972, 7, 9);\n+        copy = test.dayOfMonth().addWrapFieldToCopy(21);\n+        check(copy, 1972, 7, 30);\n+    \n+        copy = test.dayOfMonth().addWrapFieldToCopy(22);\n+        check(copy, 1972, 7, 31);\n+    \n+        copy = test.dayOfMonth().addWrapFieldToCopy(23);\n+        check(copy, 1972, 7, 1);\n+    \n+        copy = test.dayOfMonth().addWrapFieldToCopy(-12);\n+        check(copy, 1972, 7, 28);\n+    }\n+\n+    public void testPropertySetCopyDay() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.dayOfMonth().setCopy(12);\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 6, 12);\n+        \n+        try {\n+            test.dayOfMonth().setCopy(31);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.dayOfMonth().setCopy(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetCopyTextDay() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.dayOfMonth().setCopy(\"12\");\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 6, 12);\n+    }\n+\n+    public void testPropertyWithMaximumValueDayOfMonth() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.dayOfMonth().withMaximumValue();\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 6, 30);\n+    }\n+\n+    public void testPropertyWithMinimumValueDayOfMonth() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.dayOfMonth().withMinimumValue();\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 6, 1);\n+    }\n+\n+    public void testPropertyCompareToDay() {\n+        LocalDate test1 = new LocalDate(TEST_TIME1);\n+        LocalDate test2 = new LocalDate(TEST_TIME2);\n+        assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0);\n+        assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0);\n+        assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0);\n+        try {\n+            test1.dayOfMonth().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0);\n+        assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0);\n+        assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0);\n+        try {\n+            test1.dayOfMonth().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertyEquals() {\n+        LocalDate test1 = new LocalDate(2005, 11, 8);\n+        LocalDate test2 = new LocalDate(2005, 11, 9);\n+        LocalDate test3 = new LocalDate(2005, 11, 8, CopticChronology.getInstanceUTC());\n+        assertEquals(false, test1.dayOfMonth().equals(test1.year()));\n+        assertEquals(false, test1.dayOfMonth().equals(test1.monthOfYear()));\n+        assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));\n+        assertEquals(false, test1.dayOfMonth().equals(test2.year()));\n+        assertEquals(false, test1.dayOfMonth().equals(test2.monthOfYear()));\n+        assertEquals(false, test1.dayOfMonth().equals(test2.dayOfMonth()));\n+        \n+        assertEquals(false, test1.monthOfYear().equals(test1.year()));\n+        assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear()));\n+        assertEquals(false, test1.monthOfYear().equals(test1.dayOfMonth()));\n+        assertEquals(false, test1.monthOfYear().equals(test2.year()));\n+        assertEquals(true, test1.monthOfYear().equals(test2.monthOfYear()));\n+        assertEquals(false, test1.monthOfYear().equals(test2.dayOfMonth()));\n+        \n+        assertEquals(false, test1.dayOfMonth().equals(null));\n+        assertEquals(false, test1.dayOfMonth().equals(\"any\"));\n+        \n+        // chrono\n+        assertEquals(false, test1.dayOfMonth().equals(test3.dayOfMonth()));\n+    }\n+\n+    public void testPropertyHashCode() {\n+        LocalDate test1 = new LocalDate(2005, 11, 8);\n+        LocalDate test2 = new LocalDate(2005, 11, 9);\n+        assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());\n+        assertEquals(false, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());\n+        assertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode());\n+        assertEquals(true, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode());\n+    }\n+\n+    public void testPropertyEqualsHashCodeLenient() {\n+        LocalDate test1 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS));\n+        LocalDate test2 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS));\n+        assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth()));\n+        assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth()));\n+        assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));\n+        assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth()));\n+        assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());\n+        assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());\n+        assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());\n+    }\n+\n+    public void testPropertyEqualsHashCodeStrict() {\n+        LocalDate test1 = new LocalDate(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS));\n+        LocalDate test2 = new LocalDate(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS));\n+        assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth()));\n+        assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth()));\n+        assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));\n+        assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth()));\n+        assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());\n+        assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());\n+        assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private void check(LocalDate test, int year, int month, int day) {\n+        assertEquals(year, test.getYear());\n+        assertEquals(month, test.getMonthOfYear());\n+        assertEquals(day, test.getDayOfMonth());\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestLocalTime_Basics.java\n+/*\n+ *  Copyright 2001-2009 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Arrays;\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n+\n+/**\n+ * This class is a Junit unit test for LocalTime.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestLocalTime_Basics extends TestCase {\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+    private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);\n+    private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);\n+    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);\n+\n+    private long TEST_TIME_NOW =\n+            10L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 20L * DateTimeConstants.MILLIS_PER_MINUTE\n+            + 30L * DateTimeConstants.MILLIS_PER_SECOND\n+            + 40L;\n+\n+//    private long TEST_TIME1 =\n+//        1L * DateTimeConstants.MILLIS_PER_HOUR\n+//        + 2L * DateTimeConstants.MILLIS_PER_MINUTE\n+//        + 3L * DateTimeConstants.MILLIS_PER_SECOND\n+//        + 4L;\n+\n+    private long TEST_TIME2 =\n+        1L * DateTimeConstants.MILLIS_PER_DAY\n+        + 5L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 6L * DateTimeConstants.MILLIS_PER_MINUTE\n+        + 7L * DateTimeConstants.MILLIS_PER_SECOND\n+        + 8L;\n+\n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestLocalTime_Basics.class);\n+    }\n+\n+    public TestLocalTime_Basics(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGet_DateTimeFieldType() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertEquals(10, test.get(DateTimeFieldType.hourOfDay()));\n+        assertEquals(20, test.get(DateTimeFieldType.minuteOfHour()));\n+        assertEquals(30, test.get(DateTimeFieldType.secondOfMinute()));\n+        assertEquals(40, test.get(DateTimeFieldType.millisOfSecond()));\n+        assertEquals(TEST_TIME_NOW / 60000 , test.get(DateTimeFieldType.minuteOfDay()));\n+        assertEquals(TEST_TIME_NOW / 1000 , test.get(DateTimeFieldType.secondOfDay()));\n+        assertEquals(TEST_TIME_NOW , test.get(DateTimeFieldType.millisOfDay()));\n+        assertEquals(10, test.get(DateTimeFieldType.hourOfHalfday()));\n+        assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay()));\n+        test = new LocalTime(12, 30);\n+        assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday()));\n+        assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday()));\n+        assertEquals(12, test.get(DateTimeFieldType.clockhourOfDay()));\n+        assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay()));\n+        test = new LocalTime(14, 30);\n+        assertEquals(2, test.get(DateTimeFieldType.hourOfHalfday()));\n+        assertEquals(2, test.get(DateTimeFieldType.clockhourOfHalfday()));\n+        assertEquals(14, test.get(DateTimeFieldType.clockhourOfDay()));\n+        assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay()));\n+        test = new LocalTime(0, 30);\n+        assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday()));\n+        assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday()));\n+        assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay()));\n+        assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay()));\n+        try {\n+            test.get(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.get(DateTimeFieldType.dayOfMonth());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testSize() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertEquals(4, test.size());\n+    }\n+\n+    public void testGetFieldType_int() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertSame(DateTimeFieldType.hourOfDay(), test.getFieldType(0));\n+        assertSame(DateTimeFieldType.minuteOfHour(), test.getFieldType(1));\n+        assertSame(DateTimeFieldType.secondOfMinute(), test.getFieldType(2));\n+        assertSame(DateTimeFieldType.millisOfSecond(), test.getFieldType(3));\n+        try {\n+            test.getFieldType(-1);\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            test.getFieldType(5);\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testGetFieldTypes() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        DateTimeFieldType[] fields = test.getFieldTypes();\n+        assertSame(DateTimeFieldType.hourOfDay(), fields[0]);\n+        assertSame(DateTimeFieldType.minuteOfHour(), fields[1]);\n+        assertSame(DateTimeFieldType.secondOfMinute(), fields[2]);\n+        assertSame(DateTimeFieldType.millisOfSecond(), fields[3]);\n+        assertNotSame(test.getFieldTypes(), test.getFieldTypes());\n+    }\n+\n+    public void testGetField_int() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_UTC);\n+        assertSame(COPTIC_UTC.hourOfDay(), test.getField(0));\n+        assertSame(COPTIC_UTC.minuteOfHour(), test.getField(1));\n+        assertSame(COPTIC_UTC.secondOfMinute(), test.getField(2));\n+        assertSame(COPTIC_UTC.millisOfSecond(), test.getField(3));\n+        try {\n+            test.getField(-1);\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            test.getField(5);\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testGetFields() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_UTC);\n+        DateTimeField[] fields = test.getFields();\n+        assertSame(COPTIC_UTC.hourOfDay(), fields[0]);\n+        assertSame(COPTIC_UTC.minuteOfHour(), fields[1]);\n+        assertSame(COPTIC_UTC.secondOfMinute(), fields[2]);\n+        assertSame(COPTIC_UTC.millisOfSecond(), fields[3]);\n+        assertNotSame(test.getFields(), test.getFields());\n+    }\n+\n+    public void testGetValue_int() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_PARIS);\n+        assertEquals(10, test.getValue(0));\n+        assertEquals(20, test.getValue(1));\n+        assertEquals(30, test.getValue(2));\n+        assertEquals(40, test.getValue(3));\n+        try {\n+            test.getValue(-1);\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            test.getValue(5);\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testGetValues() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_UTC);\n+        int[] values = test.getValues();\n+        assertEquals(10, values[0]);\n+        assertEquals(20, values[1]);\n+        assertEquals(30, values[2]);\n+        assertEquals(40, values[3]);\n+        assertNotSame(test.getValues(), test.getValues());\n+    }\n+\n+    public void testIsSupported_DateTimeFieldType() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertEquals(true, test.isSupported(DateTimeFieldType.hourOfDay()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfHour()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.secondOfMinute()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.millisOfSecond()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfDay()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.secondOfDay()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.millisOfDay()));\n+        \n+        assertEquals(true, test.isSupported(DateTimeFieldType.hourOfHalfday()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.halfdayOfDay()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfHalfday()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfDay()));\n+        \n+        assertEquals(false, test.isSupported(DateTimeFieldType.dayOfMonth()));\n+        assertEquals(false, test.isSupported((DateTimeFieldType) null));\n+        \n+        DateTimeFieldType d = new DateTimeFieldType(\"hours\") {\n+            public DurationFieldType getDurationType() {\n+                return DurationFieldType.hours();\n+            }\n+            public DurationFieldType getRangeDurationType() {\n+                return null;\n+            }\n+            public DateTimeField getField(Chronology chronology) {\n+                return chronology.hourOfDay();\n+            }\n+        };\n+        assertEquals(false, test.isSupported(d));\n+        \n+        d = new DateTimeFieldType(\"hourOfYear\") {\n+            public DurationFieldType getDurationType() {\n+                return DurationFieldType.hours();\n+            }\n+            public DurationFieldType getRangeDurationType() {\n+                return DurationFieldType.years();\n+            }\n+            public DateTimeField getField(Chronology chronology) {\n+                return chronology.hourOfDay();\n+            }\n+        };\n+        assertEquals(false, test.isSupported(d));\n+    }\n+\n+    public void testIsSupported_DurationFieldType() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertEquals(true, test.isSupported(DurationFieldType.hours()));\n+        assertEquals(true, test.isSupported(DurationFieldType.minutes()));\n+        assertEquals(true, test.isSupported(DurationFieldType.seconds()));\n+        assertEquals(true, test.isSupported(DurationFieldType.millis()));\n+        assertEquals(true, test.isSupported(DurationFieldType.halfdays()));\n+        \n+        assertEquals(false, test.isSupported(DurationFieldType.days()));\n+        assertEquals(false, test.isSupported((DurationFieldType) null));\n+    }\n+\n+    public void testEqualsHashCode() {\n+        LocalTime test1 = new LocalTime(10, 20, 30, 40, COPTIC_PARIS);\n+        LocalTime test2 = new LocalTime(10, 20, 30, 40, COPTIC_PARIS);\n+        assertEquals(true, test1.equals(test2));\n+        assertEquals(true, test2.equals(test1));\n+        assertEquals(true, test1.equals(test1));\n+        assertEquals(true, test2.equals(test2));\n+        assertEquals(true, test1.hashCode() == test2.hashCode());\n+        assertEquals(true, test1.hashCode() == test1.hashCode());\n+        assertEquals(true, test2.hashCode() == test2.hashCode());\n+        \n+        LocalTime test3 = new LocalTime(15, 20, 30, 40);\n+        assertEquals(false, test1.equals(test3));\n+        assertEquals(false, test2.equals(test3));\n+        assertEquals(false, test3.equals(test1));\n+        assertEquals(false, test3.equals(test2));\n+        assertEquals(false, test1.hashCode() == test3.hashCode());\n+        assertEquals(false, test2.hashCode() == test3.hashCode());\n+        \n+        assertEquals(false, test1.equals(\"Hello\"));\n+        assertEquals(true, test1.equals(new TimeOfDay(10, 20, 30, 40, COPTIC_UTC)));\n+        assertEquals(true, test1.hashCode() == new TimeOfDay(10, 20, 30, 40, COPTIC_UTC).hashCode());\n+        assertEquals(true, test1.equals(new MockInstant()));\n+        assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE));\n+    }\n+\n+    class MockInstant extends MockPartial {\n+        public Chronology getChronology() {\n+            return COPTIC_UTC;\n+        }\n+        public DateTimeField[] getFields() {\n+            return new DateTimeField[] {\n+                COPTIC_UTC.hourOfDay(),\n+                COPTIC_UTC.minuteOfHour(),\n+                COPTIC_UTC.secondOfMinute(),\n+                COPTIC_UTC.millisOfSecond(),\n+            };\n+        }\n+        public int[] getValues() {\n+            return new int[] {10, 20, 30, 40};\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testCompareTo() {\n+        LocalTime test1 = new LocalTime(10, 20, 30, 40);\n+        LocalTime test1a = new LocalTime(10, 20, 30, 40);\n+        assertEquals(0, test1.compareTo(test1a));\n+        assertEquals(0, test1a.compareTo(test1));\n+        assertEquals(0, test1.compareTo(test1));\n+        assertEquals(0, test1a.compareTo(test1a));\n+        \n+        LocalTime test2 = new LocalTime(10, 20, 35, 40);\n+        assertEquals(-1, test1.compareTo(test2));\n+        assertEquals(+1, test2.compareTo(test1));\n+        \n+        LocalTime test3 = new LocalTime(10, 20, 35, 40, GregorianChronology.getInstanceUTC());\n+        assertEquals(-1, test1.compareTo(test3));\n+        assertEquals(+1, test3.compareTo(test1));\n+        assertEquals(0, test3.compareTo(test2));\n+        \n+        DateTimeFieldType[] types = new DateTimeFieldType[] {\n+            DateTimeFieldType.hourOfDay(),\n+            DateTimeFieldType.minuteOfHour(),\n+            DateTimeFieldType.secondOfMinute(),\n+            DateTimeFieldType.millisOfSecond(),\n+        };\n+        int[] values = new int[] {10, 20, 30, 40};\n+        Partial p = new Partial(types, values);\n+        assertEquals(0, test1.compareTo(p));\n+        assertEquals(0, test1.compareTo(new TimeOfDay(10, 20, 30, 40)));\n+        try {\n+            test1.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+//        try {\n+//            test1.compareTo(new Date());\n+//            fail();\n+//        } catch (ClassCastException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsEqual_LocalTime() {\n+        LocalTime test1 = new LocalTime(10, 20, 30, 40);\n+        LocalTime test1a = new LocalTime(10, 20, 30, 40);\n+        assertEquals(true, test1.isEqual(test1a));\n+        assertEquals(true, test1a.isEqual(test1));\n+        assertEquals(true, test1.isEqual(test1));\n+        assertEquals(true, test1a.isEqual(test1a));\n+        \n+        LocalTime test2 = new LocalTime(10, 20, 35, 40);\n+        assertEquals(false, test1.isEqual(test2));\n+        assertEquals(false, test2.isEqual(test1));\n+        \n+        LocalTime test3 = new LocalTime(10, 20, 35, 40, GregorianChronology.getInstanceUTC());\n+        assertEquals(false, test1.isEqual(test3));\n+        assertEquals(false, test3.isEqual(test1));\n+        assertEquals(true, test3.isEqual(test2));\n+        \n+        try {\n+            new LocalTime(10, 20, 35, 40).isEqual(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsBefore_LocalTime() {\n+        LocalTime test1 = new LocalTime(10, 20, 30, 40);\n+        LocalTime test1a = new LocalTime(10, 20, 30, 40);\n+        assertEquals(false, test1.isBefore(test1a));\n+        assertEquals(false, test1a.isBefore(test1));\n+        assertEquals(false, test1.isBefore(test1));\n+        assertEquals(false, test1a.isBefore(test1a));\n+        \n+        LocalTime test2 = new LocalTime(10, 20, 35, 40);\n+        assertEquals(true, test1.isBefore(test2));\n+        assertEquals(false, test2.isBefore(test1));\n+        \n+        LocalTime test3 = new LocalTime(10, 20, 35, 40, GregorianChronology.getInstanceUTC());\n+        assertEquals(true, test1.isBefore(test3));\n+        assertEquals(false, test3.isBefore(test1));\n+        assertEquals(false, test3.isBefore(test2));\n+        \n+        try {\n+            new LocalTime(10, 20, 35, 40).isBefore(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsAfter_LocalTime() {\n+        LocalTime test1 = new LocalTime(10, 20, 30, 40);\n+        LocalTime test1a = new LocalTime(10, 20, 30, 40);\n+        assertEquals(false, test1.isAfter(test1a));\n+        assertEquals(false, test1a.isAfter(test1));\n+        assertEquals(false, test1.isAfter(test1));\n+        assertEquals(false, test1a.isAfter(test1a));\n+        \n+        LocalTime test2 = new LocalTime(10, 20, 35, 40);\n+        assertEquals(false, test1.isAfter(test2));\n+        assertEquals(true, test2.isAfter(test1));\n+        \n+        LocalTime test3 = new LocalTime(10, 20, 35, 40, GregorianChronology.getInstanceUTC());\n+        assertEquals(false, test1.isAfter(test3));\n+        assertEquals(true, test3.isAfter(test1));\n+        assertEquals(false, test3.isAfter(test2));\n+        \n+        try {\n+            new LocalTime(10, 20, 35, 40).isAfter(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithField_DateTimeFieldType_int_1() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime result = test.withField(DateTimeFieldType.hourOfDay(), 15);\n+        \n+        assertEquals(new LocalTime(10, 20, 30, 40), test);\n+        assertEquals(new LocalTime(15, 20, 30, 40), result);\n+    }\n+\n+    public void testWithField_DateTimeFieldType_int_2() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        try {\n+            test.withField(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithField_DateTimeFieldType_int_3() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        try {\n+            test.withField(DateTimeFieldType.dayOfMonth(), 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithField_DateTimeFieldType_int_4() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime result = test.withField(DateTimeFieldType.hourOfDay(), 10);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithFieldAdded_DurationFieldType_int_1() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime result = test.withFieldAdded(DurationFieldType.hours(), 6);\n+        \n+        assertEquals(new LocalTime(10, 20, 30, 40), test);\n+        assertEquals(new LocalTime(16, 20, 30, 40), result);\n+    }\n+\n+    public void testWithFieldAdded_DurationFieldType_int_2() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        try {\n+            test.withFieldAdded(null, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded_DurationFieldType_int_3() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        try {\n+            test.withFieldAdded(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded_DurationFieldType_int_4() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime result = test.withFieldAdded(DurationFieldType.hours(), 0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testWithFieldAdded_DurationFieldType_int_5() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        try {\n+            test.withFieldAdded(DurationFieldType.days(), 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded_DurationFieldType_int_6() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime result = test.withFieldAdded(DurationFieldType.hours(), 16);\n+        \n+        assertEquals(new LocalTime(10, 20, 30, 40), test);\n+        assertEquals(new LocalTime(2, 20, 30, 40), result);\n+    }\n+\n+    public void testWithFieldAdded_DurationFieldType_int_7() {\n+        LocalTime test = new LocalTime(23, 59, 59, 999);\n+        LocalTime result = test.withFieldAdded(DurationFieldType.millis(), 1);\n+        assertEquals(new LocalTime(0, 0, 0, 0), result);\n+        \n+        test = new LocalTime(23, 59, 59, 999);\n+        result = test.withFieldAdded(DurationFieldType.seconds(), 1);\n+        assertEquals(new LocalTime(0, 0, 0, 999), result);\n+        \n+        test = new LocalTime(23, 59, 59, 999);\n+        result = test.withFieldAdded(DurationFieldType.minutes(), 1);\n+        assertEquals(new LocalTime(0, 0, 59, 999), result);\n+        \n+        test = new LocalTime(23, 59, 59, 999);\n+        result = test.withFieldAdded(DurationFieldType.hours(), 1);\n+        assertEquals(new LocalTime(0, 59, 59, 999), result);\n+    }\n+\n+    public void testWithFieldAdded_DurationFieldType_int_8() {\n+        LocalTime test = new LocalTime(0, 0, 0, 0);\n+        LocalTime result = test.withFieldAdded(DurationFieldType.millis(), -1);\n+        assertEquals(new LocalTime(23, 59, 59, 999), result);\n+        \n+        test = new LocalTime(0, 0, 0, 0);\n+        result = test.withFieldAdded(DurationFieldType.seconds(), -1);\n+        assertEquals(new LocalTime(23, 59, 59, 0), result);\n+        \n+        test = new LocalTime(0, 0, 0, 0);\n+        result = test.withFieldAdded(DurationFieldType.minutes(), -1);\n+        assertEquals(new LocalTime(23, 59, 0, 0), result);\n+        \n+        test = new LocalTime(0, 0, 0, 0);\n+        result = test.withFieldAdded(DurationFieldType.hours(), -1);\n+        assertEquals(new LocalTime(23, 0, 0, 0), result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPlus_RP() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalTime result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8));\n+        LocalTime expected = new LocalTime(15, 26, 37, 48, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.plus((ReadablePeriod) null);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusHours_int() {\n+        LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON);\n+        LocalTime result = test.plusHours(1);\n+        LocalTime expected = new LocalTime(2, 2, 3, 4, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusHours(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusMinutes_int() {\n+        LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON);\n+        LocalTime result = test.plusMinutes(1);\n+        LocalTime expected = new LocalTime(1, 3, 3, 4, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusMinutes(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusSeconds_int() {\n+        LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON);\n+        LocalTime result = test.plusSeconds(1);\n+        LocalTime expected = new LocalTime(1, 2, 4, 4, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusSeconds(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusMillis_int() {\n+        LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON);\n+        LocalTime result = test.plusMillis(1);\n+        LocalTime expected = new LocalTime(1, 2, 3, 5, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusMillis(0);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMinus_RP() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalTime result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));\n+        LocalTime expected = new LocalTime(9, 19, 29, 39, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.minus((ReadablePeriod) null);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusHours_int() {\n+        LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON);\n+        LocalTime result = test.minusHours(1);\n+        LocalTime expected = new LocalTime(0, 2, 3, 4, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusHours(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusMinutes_int() {\n+        LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON);\n+        LocalTime result = test.minusMinutes(1);\n+        LocalTime expected = new LocalTime(1, 1, 3, 4, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusMinutes(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusSeconds_int() {\n+        LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON);\n+        LocalTime result = test.minusSeconds(1);\n+        LocalTime expected = new LocalTime(1, 2, 2, 4, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusSeconds(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusMillis_int() {\n+        LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON);\n+        LocalTime result = test.minusMillis(1);\n+        LocalTime expected = new LocalTime(1, 2, 3, 3, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusMillis(0);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetters() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+        assertEquals(TEST_TIME_NOW, test.getMillisOfDay());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithers() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        check(test.withHourOfDay(6), 6, 20, 30, 40);\n+        check(test.withMinuteOfHour(6), 10, 6, 30, 40);\n+        check(test.withSecondOfMinute(6), 10, 20, 6, 40);\n+        check(test.withMillisOfSecond(6), 10, 20, 30, 6);\n+        check(test.withMillisOfDay(61234), 0, 1, 1, 234);\n+        try {\n+            test.withHourOfDay(-1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.withHourOfDay(24);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateTimeTodayDefaultZone() {\n+        LocalTime base = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); // PARIS irrelevant\n+        DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        \n+        DateTime test = base.toDateTimeToday();\n+        check(base, 10, 20, 30, 40);\n+        DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON);\n+        expected = expected.hourOfDay().setCopy(10);\n+        expected = expected.minuteOfHour().setCopy(20);\n+        expected = expected.secondOfMinute().setCopy(30);\n+        expected = expected.millisOfSecond().setCopy(40);\n+        assertEquals(expected, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateTimeToday_Zone() {\n+        LocalTime base = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); // PARIS irrelevant\n+        DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        \n+        DateTime test = base.toDateTimeToday(TOKYO);\n+        check(base, 10, 20, 30, 40);\n+        DateTime expected = new DateTime(dt.getMillis(), COPTIC_TOKYO);\n+        expected = expected.hourOfDay().setCopy(10);\n+        expected = expected.minuteOfHour().setCopy(20);\n+        expected = expected.secondOfMinute().setCopy(30);\n+        expected = expected.millisOfSecond().setCopy(40);\n+        assertEquals(expected, test);\n+    }\n+\n+    public void testToDateTimeToday_nullZone() {\n+        LocalTime base = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); // PARIS irrelevant\n+        DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        \n+        DateTime test = base.toDateTimeToday((DateTimeZone) null);\n+        check(base, 10, 20, 30, 40);\n+        DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON);\n+        expected = expected.hourOfDay().setCopy(10);\n+        expected = expected.minuteOfHour().setCopy(20);\n+        expected = expected.secondOfMinute().setCopy(30);\n+        expected = expected.millisOfSecond().setCopy(40);\n+        assertEquals(expected, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateTime_RI() {\n+        LocalTime base = new LocalTime(10, 20, 30, 40, COPTIC_PARIS);\n+        DateTime dt = new DateTime(0L); // LONDON zone\n+        assertEquals(\"1970-01-01T01:00:00.000+01:00\", dt.toString());\n+        \n+        DateTime test = base.toDateTime(dt);\n+        check(base, 10, 20, 30, 40);\n+        assertEquals(\"1970-01-01T01:00:00.000+01:00\", dt.toString());\n+        assertEquals(\"1970-01-01T10:20:30.040+01:00\", test.toString());\n+    }\n+\n+    public void testToDateTime_nullRI() {\n+        LocalTime base = new LocalTime(1, 2, 3, 4);\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME2);\n+        \n+        DateTime test = base.toDateTime((ReadableInstant) null);\n+        check(base, 1, 2, 3, 4);\n+        assertEquals(\"1970-01-02T01:02:03.004+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testProperty() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay()));\n+        assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour()));\n+        assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute()));\n+        assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond()));\n+        assertEquals(test.millisOfDay(), test.property(DateTimeFieldType.millisOfDay()));\n+        \n+        assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalTime());\n+        assertEquals(test, test.property(DateTimeFieldType.secondOfDay()).getLocalTime());\n+        assertEquals(test, test.property(DateTimeFieldType.millisOfDay()).getLocalTime());\n+        assertEquals(test, test.property(DateTimeFieldType.hourOfHalfday()).getLocalTime());\n+        assertEquals(test, test.property(DateTimeFieldType.halfdayOfDay()).getLocalTime());\n+        assertEquals(test, test.property(DateTimeFieldType.clockhourOfHalfday()).getLocalTime());\n+        assertEquals(test, test.property(DateTimeFieldType.clockhourOfDay()).getLocalTime());\n+        \n+        try {\n+            test.property(DateTimeFieldType.dayOfWeek());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.property(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_PARIS);\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        LocalTime result = (LocalTime) ois.readObject();\n+        ois.close();\n+        \n+        assertEquals(test, result);\n+        assertTrue(Arrays.equals(test.getValues(), result.getValues()));\n+        assertTrue(Arrays.equals(test.getFields(), result.getFields()));\n+        assertEquals(test.getChronology(), result.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertEquals(\"10:20:30.040\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString_String() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertEquals(\"\\ufffd\\ufffd\\ufffd\\ufffd 10\", test.toString(\"yyyy HH\"));\n+        assertEquals(\"10:20:30.040\", test.toString((String) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString_String_Locale() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertEquals(\"10 20\", test.toString(\"H m\", Locale.ENGLISH));\n+        assertEquals(\"10:20:30.040\", test.toString(null, Locale.ENGLISH));\n+        assertEquals(\"10 20\", test.toString(\"H m\", null));\n+        assertEquals(\"10:20:30.040\", test.toString(null, null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString_DTFormatter() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertEquals(\"\\ufffd\\ufffd\\ufffd\\ufffd 10\", test.toString(DateTimeFormat.forPattern(\"yyyy HH\")));\n+        assertEquals(\"10:20:30.040\", test.toString((DateTimeFormatter) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private void check(LocalTime test, int hour, int min, int sec, int milli) {\n+        assertEquals(hour, test.getHourOfDay());\n+        assertEquals(min, test.getMinuteOfHour());\n+        assertEquals(sec, test.getSecondOfMinute());\n+        assertEquals(milli, test.getMillisOfSecond());\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestLocalTime_Constructors.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.GJChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.chrono.JulianChronology;\n+\n+/**\n+ * This class is a Junit unit test for LocalTime.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestLocalTime_Constructors extends TestCase {\n+\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    private static final DateTimeZone NEW_YORK = DateTimeZone.forID(\"America/New_York\");\n+    private static final ISOChronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    private static final JulianChronology JULIAN_LONDON = JulianChronology.getInstance(LONDON);\n+    private static final JulianChronology JULIAN_PARIS = JulianChronology.getInstance(PARIS);\n+    private static final JulianChronology JULIAN_UTC = JulianChronology.getInstanceUTC();\n+    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n+    private static final int OFFSET_LONDON = LONDON.getOffset(0L) / DateTimeConstants.MILLIS_PER_HOUR;\n+    private static final int OFFSET_PARIS = PARIS.getOffset(0L) / DateTimeConstants.MILLIS_PER_HOUR;\n+\n+    private long TEST_TIME_NOW =\n+            10L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 20L * DateTimeConstants.MILLIS_PER_MINUTE\n+            + 30L * DateTimeConstants.MILLIS_PER_SECOND\n+            + 40L;\n+\n+    private long TEST_TIME1 =\n+        1L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 2L * DateTimeConstants.MILLIS_PER_MINUTE\n+        + 3L * DateTimeConstants.MILLIS_PER_SECOND\n+        + 4L;\n+\n+    private long TEST_TIME2 =\n+        1L * DateTimeConstants.MILLIS_PER_DAY\n+        + 5L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 6L * DateTimeConstants.MILLIS_PER_MINUTE\n+        + 7L * DateTimeConstants.MILLIS_PER_SECOND\n+        + 8L;\n+\n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestLocalTime_Constructors.class);\n+    }\n+\n+    public TestLocalTime_Constructors(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        java.util.TimeZone.setDefault(LONDON.toTimeZone());\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        java.util.TimeZone.setDefault(zone.toTimeZone());\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor ()\n+     */\n+    public void testConstantMidnight() throws Throwable {\n+        LocalTime test = LocalTime.MIDNIGHT;\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(0, test.getHourOfDay());\n+        assertEquals(0, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_FromCalendarFields_Calendar() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n+        cal.set(Calendar.MILLISECOND, 7);\n+        LocalTime expected = new LocalTime(4, 5, 6, 7);\n+        assertEquals(expected, LocalTime.fromCalendarFields(cal));\n+        try {\n+            LocalTime.fromCalendarFields((Calendar) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_FromDateFields_after1970() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n+        cal.set(Calendar.MILLISECOND, 7);\n+        LocalTime expected = new LocalTime(4, 5, 6, 7);\n+        assertEquals(expected, LocalTime.fromDateFields(cal.getTime()));\n+    }\n+\n+    public void testFactory_FromDateFields_before1970() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(1969, 1, 3, 4, 5, 6);\n+        cal.set(Calendar.MILLISECOND, 7);\n+        LocalTime expected = new LocalTime(4, 5, 6, 7);\n+        assertEquals(expected, LocalTime.fromDateFields(cal.getTime()));\n+    }\n+\n+    public void testFactory_FromDateFields_null() throws Exception {\n+        try {\n+            LocalTime.fromDateFields((Date) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactoryMillisOfDay_long() throws Throwable {\n+        LocalTime test = LocalTime.fromMillisOfDay(TEST_TIME1);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactoryMillisOfDay_long_Chronology() throws Throwable {\n+        LocalTime test = LocalTime.fromMillisOfDay(TEST_TIME1, JULIAN_LONDON);\n+        assertEquals(JULIAN_UTC, test.getChronology());\n+        assertEquals(1, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    public void testFactoryMillisOfDay_long_nullChronology() throws Throwable {\n+        LocalTime test = LocalTime.fromMillisOfDay(TEST_TIME1, null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor() throws Throwable {\n+        LocalTime test = new LocalTime();\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_DateTimeZone() throws Throwable {\n+        DateTime dt = new DateTime(2005, 6, 8, 23, 59, 30, 40, LONDON);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        // 23:59 in London is 00:59 the following day in Paris\n+        \n+        LocalTime test = new LocalTime(LONDON);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(23, test.getHourOfDay());\n+        assertEquals(59, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+        \n+        test = new LocalTime(PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(0, test.getHourOfDay());\n+        assertEquals(59, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_nullDateTimeZone() throws Throwable {\n+        DateTime dt = new DateTime(2005, 6, 8, 23, 59, 30, 40, LONDON);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        // 23:59 in London is 00:59 the following day in Paris\n+        \n+        LocalTime test = new LocalTime((DateTimeZone) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(23, test.getHourOfDay());\n+        assertEquals(59, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_Chronology() throws Throwable {\n+        LocalTime test = new LocalTime(JULIAN_LONDON);\n+        assertEquals(JULIAN_UTC, test.getChronology());\n+        assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_nullChronology() throws Throwable {\n+        LocalTime test = new LocalTime((Chronology) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long1() throws Throwable {\n+        LocalTime test = new LocalTime(TEST_TIME1);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_long2() throws Throwable {\n+        LocalTime test = new LocalTime(TEST_TIME2);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(5 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(6, test.getMinuteOfHour());\n+        assertEquals(7, test.getSecondOfMinute());\n+        assertEquals(8, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_DateTimeZone() throws Throwable {\n+        LocalTime test = new LocalTime(TEST_TIME1, PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1 + OFFSET_PARIS, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_long_DateTimeZone_2() throws Throwable {\n+        DateTime dt = new DateTime(2007, 6, 9, 1, 2, 3, 4, PARIS);\n+        DateTime dtUTC = new DateTime(1970, 1, 1, 1, 2, 3, 4, DateTimeZone.UTC);\n+        \n+        LocalTime test = new LocalTime(dt.getMillis(), PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+        assertEquals(dtUTC.getMillis(), test.getLocalMillis());\n+    }\n+\n+    public void testConstructor_long_nullDateTimeZone() throws Throwable {\n+        LocalTime test = new LocalTime(TEST_TIME1, (DateTimeZone) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long1_Chronology() throws Throwable {\n+        LocalTime test = new LocalTime(TEST_TIME1, JULIAN_PARIS);\n+        assertEquals(JULIAN_UTC, test.getChronology());\n+        assertEquals(1 + OFFSET_PARIS, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_long2_Chronology() throws Throwable {\n+        LocalTime test = new LocalTime(TEST_TIME2, JULIAN_LONDON);\n+        assertEquals(JULIAN_UTC, test.getChronology());\n+        assertEquals(5 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(6, test.getMinuteOfHour());\n+        assertEquals(7, test.getSecondOfMinute());\n+        assertEquals(8, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_long_nullChronology() throws Throwable {\n+        LocalTime test = new LocalTime(TEST_TIME1, (Chronology) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_Object1() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        LocalTime test = new LocalTime(date);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_Object2() throws Throwable {\n+        Calendar cal = new GregorianCalendar();\n+        cal.setTime(new Date(TEST_TIME1));\n+        LocalTime test = new LocalTime(cal);\n+        assertEquals(GJChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_nullObject() throws Throwable {\n+        LocalTime test = new LocalTime((Object) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectString1() throws Throwable {\n+        LocalTime test = new LocalTime(\"10:20:30.040\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectString1Tokyo() throws Throwable {\n+        DateTimeZone.setDefault(TOKYO);\n+        LocalTime test = new LocalTime(\"10:20:30.040\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectString1NewYork() throws Throwable {\n+        DateTimeZone.setDefault(NEW_YORK);\n+        LocalTime test = new LocalTime(\"10:20:30.040\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectString2() throws Throwable {\n+        LocalTime test = new LocalTime(\"T10:20:30.040\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectString3() throws Throwable {\n+        LocalTime test = new LocalTime(\"10:20\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectString4() throws Throwable {\n+        LocalTime test = new LocalTime(\"10\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(0, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectStringEx1() throws Throwable {\n+        try {\n+            new LocalTime(\"1970-04-06\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectStringEx2() throws Throwable {\n+        try {\n+            new LocalTime(\"1970-04-06T+14:00\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectStringEx3() throws Throwable {\n+        try {\n+            new LocalTime(\"1970-04-06T10:20:30.040\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectStringEx4() throws Throwable {\n+        try {\n+            new LocalTime(\"1970-04-06T10:20:30.040+14:00\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectStringEx5() throws Throwable {\n+        try {\n+            new LocalTime(\"T10:20:30.040+04:00\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectStringEx6() throws Throwable {\n+        try {\n+            new LocalTime(\"10:20:30.040+04:00\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectLocalTime() throws Throwable {\n+        LocalTime time = new LocalTime(10, 20, 30, 40, BUDDHIST_UTC);\n+        LocalTime test = new LocalTime(time);\n+        assertEquals(BUDDHIST_UTC, test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectLocalDate() throws Throwable {\n+        LocalDate date = new LocalDate(1970, 4, 6, BUDDHIST_UTC);\n+        try {\n+            new LocalTime(date);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectLocalDateTime() throws Throwable {\n+        LocalDateTime dt = new LocalDateTime(1970, 5, 6, 10, 20, 30, 40, BUDDHIST_UTC);\n+        LocalTime test = new LocalTime(dt);\n+        assertEquals(BUDDHIST_UTC, test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectTimeOfDay() throws Throwable {\n+        TimeOfDay time = new TimeOfDay(10, 20, 30, 40, BUDDHIST_UTC);\n+        LocalTime test = new LocalTime(time);\n+        assertEquals(BUDDHIST_UTC, test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_Object1_DateTimeZone() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        LocalTime test = new LocalTime(date, PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1 + OFFSET_PARIS, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectString_DateTimeZoneLondon() throws Throwable {\n+        LocalTime test = new LocalTime(\"04:20\", LONDON);\n+        assertEquals(4, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+    }\n+\n+    public void testConstructor_ObjectString_DateTimeZoneTokyo() throws Throwable {\n+        LocalTime test = new LocalTime(\"04:20\", TOKYO);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(4, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+    }\n+\n+    public void testConstructor_ObjectString_DateTimeZoneNewYork() throws Throwable {\n+        LocalTime test = new LocalTime(\"04:20\", NEW_YORK);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(4, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+    }\n+\n+    public void testConstructor_nullObject_DateTimeZone() throws Throwable {\n+        LocalTime test = new LocalTime((Object) null, PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10 + OFFSET_PARIS, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_Object_nullDateTimeZone() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        LocalTime test = new LocalTime(date, (DateTimeZone) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_nullObject_nullDateTimeZone() throws Throwable {\n+        LocalTime test = new LocalTime((Object) null, (DateTimeZone) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_Object1_Chronology() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        LocalTime test = new LocalTime(date, JULIAN_LONDON);\n+        assertEquals(JULIAN_UTC, test.getChronology());\n+        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_Object2_Chronology() throws Throwable {\n+        LocalTime test = new LocalTime(\"T10:20\");\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+        \n+        try {\n+            new LocalTime(\"T1020\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_nullObject_Chronology() throws Throwable {\n+        LocalTime test = new LocalTime((Object) null, JULIAN_LONDON);\n+        assertEquals(JULIAN_UTC, test.getChronology());\n+        assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_Object_nullChronology() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        LocalTime test = new LocalTime(date, (Chronology) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_nullObject_nullChronology() throws Throwable {\n+        LocalTime test = new LocalTime((Object) null, (Chronology) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_int_int() throws Throwable {\n+        LocalTime test = new LocalTime(10, 20);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+        try {\n+            new LocalTime(-1, 20);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(24, 20);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, -1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, 60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_int_int_int() throws Throwable {\n+        LocalTime test = new LocalTime(10, 20, 30);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+        try {\n+            new LocalTime(-1, 20, 30);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(24, 20, 30);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, -1, 30);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, 60, 30);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, 20, -1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, 20, 60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_int_int_int_int() throws Throwable {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+        try {\n+            new LocalTime(-1, 20, 30, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(24, 20, 30, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, -1, 30, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, 60, 30, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, 20, -1, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, 20, 60, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, 20, 30, -1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, 20, 30, 1000);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_int_int_int_int_Chronology() throws Throwable {\n+        LocalTime test = new LocalTime(10, 20, 30, 40, JULIAN_LONDON);\n+        assertEquals(JULIAN_UTC, test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+        try {\n+            new LocalTime(-1, 20, 30, 40, JULIAN_LONDON);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(24, 20, 30, 40, JULIAN_LONDON);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, -1, 30, 40, JULIAN_LONDON);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, 60, 30, 40, JULIAN_LONDON);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, 20, -1, 40, JULIAN_LONDON);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, 20, 60, 40, JULIAN_LONDON);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, 20, 30, -1, JULIAN_LONDON);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, 20, 30, 1000, JULIAN_LONDON);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_int_int_int_int_nullChronology() throws Throwable {\n+        LocalTime test = new LocalTime(10, 20, 30, 40, null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestLocalTime_Properties.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * This class is a Junit unit test for TimeOfDay.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestLocalTime_Properties extends TestCase {\n+\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+\n+    private long TEST_TIME_NOW =\n+            10L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 20L * DateTimeConstants.MILLIS_PER_MINUTE\n+            + 30L * DateTimeConstants.MILLIS_PER_SECOND\n+            + 40L;\n+\n+    private long TEST_TIME1 =\n+        1L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 2L * DateTimeConstants.MILLIS_PER_MINUTE\n+        + 3L * DateTimeConstants.MILLIS_PER_SECOND\n+        + 4L;\n+\n+    private long TEST_TIME2 =\n+        1L * DateTimeConstants.MILLIS_PER_DAY\n+        + 5L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 6L * DateTimeConstants.MILLIS_PER_MINUTE\n+        + 7L * DateTimeConstants.MILLIS_PER_SECOND\n+        + 8L;\n+\n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestLocalTime_Properties.class);\n+    }\n+\n+    public TestLocalTime_Properties(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetHour() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField());\n+        assertEquals(\"hourOfDay\", test.hourOfDay().getName());\n+        assertEquals(\"Property[hourOfDay]\", test.hourOfDay().toString());\n+        assertSame(test, test.hourOfDay().getLocalTime());\n+        assertEquals(10, test.hourOfDay().get());\n+        assertEquals(\"10\", test.hourOfDay().getAsString());\n+        assertEquals(\"10\", test.hourOfDay().getAsText());\n+        assertEquals(\"10\", test.hourOfDay().getAsText(Locale.FRENCH));\n+        assertEquals(\"10\", test.hourOfDay().getAsShortText());\n+        assertEquals(\"10\", test.hourOfDay().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField());\n+        assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField());\n+        assertEquals(2, test.hourOfDay().getMaximumTextLength(null));\n+        assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyRoundHour() {\n+        LocalTime test = new LocalTime(10, 20);\n+        check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0);\n+        check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfCeilingCopy(), 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0);\n+        \n+        test = new LocalTime(10, 40);\n+        check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0);\n+        check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfEvenCopy(), 11, 0, 0, 0);\n+        \n+        test = new LocalTime(10, 30);\n+        check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0);\n+        check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0);\n+        \n+        test = new LocalTime(11, 30);\n+        check(test.hourOfDay().roundCeilingCopy(), 12, 0, 0, 0);\n+        check(test.hourOfDay().roundFloorCopy(), 11, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfCeilingCopy(), 12, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfEvenCopy(), 12, 0, 0, 0);\n+    }\n+\n+    public void testPropertyGetMaxMinValuesHour() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertEquals(0, test.hourOfDay().getMinimumValue());\n+        assertEquals(0, test.hourOfDay().getMinimumValueOverall());\n+        assertEquals(23, test.hourOfDay().getMaximumValue());\n+        assertEquals(23, test.hourOfDay().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyWithMaxMinValueHour() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        check(test.hourOfDay().withMaximumValue(), 23, 20, 30, 40);\n+        check(test.hourOfDay().withMinimumValue(), 0, 20, 30, 40);\n+    }\n+\n+    public void testPropertyPlusHour() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.hourOfDay().addCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 19, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addCopy(0);\n+        check(copy, 10, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addCopy(13);\n+        check(copy, 23, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addCopy(14);\n+        check(copy, 0, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addCopy(-10);\n+        check(copy, 0, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addCopy(-11);\n+        check(copy, 23, 20, 30, 40);\n+    }\n+\n+    public void testPropertyPlusNoWrapHour() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.hourOfDay().addNoWrapToCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 19, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addNoWrapToCopy(0);\n+        check(copy, 10, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addNoWrapToCopy(13);\n+        check(copy, 23, 20, 30, 40);\n+        \n+        try {\n+            test.hourOfDay().addNoWrapToCopy(14);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addNoWrapToCopy(-10);\n+        check(copy, 0, 20, 30, 40);\n+        \n+        try {\n+            test.hourOfDay().addNoWrapToCopy(-11);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyPlusWrapFieldHour() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.hourOfDay().addWrapFieldToCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 19, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addWrapFieldToCopy(0);\n+        check(copy, 10, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addWrapFieldToCopy(18);\n+        check(copy, 4, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addWrapFieldToCopy(-15);\n+        check(copy, 19, 20, 30, 40);\n+    }\n+\n+    public void testPropertySetHour() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.hourOfDay().setCopy(12);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 12, 20, 30, 40);\n+        \n+        try {\n+            test.hourOfDay().setCopy(24);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.hourOfDay().setCopy(-1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextHour() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.hourOfDay().setCopy(\"12\");\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 12, 20, 30, 40);\n+    }\n+\n+    public void testPropertyWithMaximumValueHour() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.hourOfDay().withMaximumValue();\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 23, 20, 30, 40);\n+    }\n+\n+    public void testPropertyWithMinimumValueHour() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.hourOfDay().withMinimumValue();\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 0, 20, 30, 40);\n+    }\n+\n+    public void testPropertyCompareToHour() {\n+        LocalTime test1 = new LocalTime(TEST_TIME1);\n+        LocalTime test2 = new LocalTime(TEST_TIME2);\n+        assertEquals(true, test1.hourOfDay().compareTo(test2) < 0);\n+        assertEquals(true, test2.hourOfDay().compareTo(test1) > 0);\n+        assertEquals(true, test1.hourOfDay().compareTo(test1) == 0);\n+        try {\n+            test1.hourOfDay().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.hourOfDay().compareTo(dt2) < 0);\n+        assertEquals(true, test2.hourOfDay().compareTo(dt1) > 0);\n+        assertEquals(true, test1.hourOfDay().compareTo(dt1) == 0);\n+        try {\n+            test1.hourOfDay().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMinute() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField());\n+        assertEquals(\"minuteOfHour\", test.minuteOfHour().getName());\n+        assertEquals(\"Property[minuteOfHour]\", test.minuteOfHour().toString());\n+        assertSame(test, test.minuteOfHour().getLocalTime());\n+        assertEquals(20, test.minuteOfHour().get());\n+        assertEquals(\"20\", test.minuteOfHour().getAsString());\n+        assertEquals(\"20\", test.minuteOfHour().getAsText());\n+        assertEquals(\"20\", test.minuteOfHour().getAsText(Locale.FRENCH));\n+        assertEquals(\"20\", test.minuteOfHour().getAsShortText());\n+        assertEquals(\"20\", test.minuteOfHour().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField());\n+        assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField());\n+        assertEquals(2, test.minuteOfHour().getMaximumTextLength(null));\n+        assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesMinute() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertEquals(0, test.minuteOfHour().getMinimumValue());\n+        assertEquals(0, test.minuteOfHour().getMinimumValueOverall());\n+        assertEquals(59, test.minuteOfHour().getMaximumValue());\n+        assertEquals(59, test.minuteOfHour().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyWithMaxMinValueMinute() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        check(test.minuteOfHour().withMaximumValue(), 10, 59, 30, 40);\n+        check(test.minuteOfHour().withMinimumValue(), 10, 0, 30, 40);\n+    }\n+\n+    public void testPropertyPlusMinute() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.minuteOfHour().addCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 29, 30, 40);\n+        \n+        copy = test.minuteOfHour().addCopy(39);\n+        check(copy, 10, 59, 30, 40);\n+        \n+        copy = test.minuteOfHour().addCopy(40);\n+        check(copy, 11, 0, 30, 40);\n+        \n+        copy = test.minuteOfHour().addCopy(1 * 60 + 45);\n+        check(copy, 12, 5, 30, 40);\n+        \n+        copy = test.minuteOfHour().addCopy(13 * 60 + 39);\n+        check(copy, 23, 59, 30, 40);\n+        \n+        copy = test.minuteOfHour().addCopy(13 * 60 + 40);\n+        check(copy, 0, 0, 30, 40);\n+        \n+        copy = test.minuteOfHour().addCopy(-9);\n+        check(copy, 10, 11, 30, 40);\n+        \n+        copy = test.minuteOfHour().addCopy(-19);\n+        check(copy, 10, 1, 30, 40);\n+        \n+        copy = test.minuteOfHour().addCopy(-20);\n+        check(copy, 10, 0, 30, 40);\n+        \n+        copy = test.minuteOfHour().addCopy(-21);\n+        check(copy, 9, 59, 30, 40);\n+        \n+        copy = test.minuteOfHour().addCopy(-(10 * 60 + 20));\n+        check(copy, 0, 0, 30, 40);\n+        \n+        copy = test.minuteOfHour().addCopy(-(10 * 60 + 21));\n+        check(copy, 23, 59, 30, 40);\n+    }\n+\n+    public void testPropertyPlusNoWrapMinute() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.minuteOfHour().addNoWrapToCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 29, 30, 40);\n+        \n+        copy = test.minuteOfHour().addNoWrapToCopy(39);\n+        check(copy, 10, 59, 30, 40);\n+        \n+        copy = test.minuteOfHour().addNoWrapToCopy(40);\n+        check(copy, 11, 0, 30, 40);\n+        \n+        copy = test.minuteOfHour().addNoWrapToCopy(1 * 60 + 45);\n+        check(copy, 12, 5, 30, 40);\n+        \n+        copy = test.minuteOfHour().addNoWrapToCopy(13 * 60 + 39);\n+        check(copy, 23, 59, 30, 40);\n+        \n+        try {\n+            test.minuteOfHour().addNoWrapToCopy(13 * 60 + 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+        \n+        copy = test.minuteOfHour().addNoWrapToCopy(-9);\n+        check(copy, 10, 11, 30, 40);\n+        \n+        copy = test.minuteOfHour().addNoWrapToCopy(-19);\n+        check(copy, 10, 1, 30, 40);\n+        \n+        copy = test.minuteOfHour().addNoWrapToCopy(-20);\n+        check(copy, 10, 0, 30, 40);\n+        \n+        copy = test.minuteOfHour().addNoWrapToCopy(-21);\n+        check(copy, 9, 59, 30, 40);\n+        \n+        copy = test.minuteOfHour().addNoWrapToCopy(-(10 * 60 + 20));\n+        check(copy, 0, 0, 30, 40);\n+        \n+        try {\n+            test.minuteOfHour().addNoWrapToCopy(-(10 * 60 + 21));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyPlusWrapFieldMinute() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.minuteOfHour().addWrapFieldToCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 29, 30, 40);\n+        \n+        copy = test.minuteOfHour().addWrapFieldToCopy(49);\n+        check(copy, 10, 9, 30, 40);\n+        \n+        copy = test.minuteOfHour().addWrapFieldToCopy(-47);\n+        check(copy, 10, 33, 30, 40);\n+    }\n+\n+    public void testPropertySetMinute() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.minuteOfHour().setCopy(12);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 12, 30, 40);\n+        \n+        try {\n+            test.minuteOfHour().setCopy(60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.minuteOfHour().setCopy(-1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextMinute() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.minuteOfHour().setCopy(\"12\");\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 12, 30, 40);\n+    }\n+\n+    public void testPropertyCompareToMinute() {\n+        LocalTime test1 = new LocalTime(TEST_TIME1);\n+        LocalTime test2 = new LocalTime(TEST_TIME2);\n+        assertEquals(true, test1.minuteOfHour().compareTo(test2) < 0);\n+        assertEquals(true, test2.minuteOfHour().compareTo(test1) > 0);\n+        assertEquals(true, test1.minuteOfHour().compareTo(test1) == 0);\n+        try {\n+            test1.minuteOfHour().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.minuteOfHour().compareTo(dt2) < 0);\n+        assertEquals(true, test2.minuteOfHour().compareTo(dt1) > 0);\n+        assertEquals(true, test1.minuteOfHour().compareTo(dt1) == 0);\n+        try {\n+            test1.minuteOfHour().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetSecond() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertSame(test.getChronology().secondOfMinute(), test.secondOfMinute().getField());\n+        assertEquals(\"secondOfMinute\", test.secondOfMinute().getName());\n+        assertEquals(\"Property[secondOfMinute]\", test.secondOfMinute().toString());\n+        assertSame(test, test.secondOfMinute().getLocalTime());\n+        assertEquals(30, test.secondOfMinute().get());\n+        assertEquals(\"30\", test.secondOfMinute().getAsString());\n+        assertEquals(\"30\", test.secondOfMinute().getAsText());\n+        assertEquals(\"30\", test.secondOfMinute().getAsText(Locale.FRENCH));\n+        assertEquals(\"30\", test.secondOfMinute().getAsShortText());\n+        assertEquals(\"30\", test.secondOfMinute().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().seconds(), test.secondOfMinute().getDurationField());\n+        assertEquals(test.getChronology().minutes(), test.secondOfMinute().getRangeDurationField());\n+        assertEquals(2, test.secondOfMinute().getMaximumTextLength(null));\n+        assertEquals(2, test.secondOfMinute().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesSecond() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertEquals(0, test.secondOfMinute().getMinimumValue());\n+        assertEquals(0, test.secondOfMinute().getMinimumValueOverall());\n+        assertEquals(59, test.secondOfMinute().getMaximumValue());\n+        assertEquals(59, test.secondOfMinute().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyWithMaxMinValueSecond() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        check(test.secondOfMinute().withMaximumValue(), 10, 20, 59, 40);\n+        check(test.secondOfMinute().withMinimumValue(), 10, 20, 0, 40);\n+    }\n+\n+    public void testPropertyPlusSecond() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.secondOfMinute().addCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 39, 40);\n+        \n+        copy = test.secondOfMinute().addCopy(29);\n+        check(copy, 10, 20, 59, 40);\n+        \n+        copy = test.secondOfMinute().addCopy(30);\n+        check(copy, 10, 21, 0, 40);\n+        \n+        copy = test.secondOfMinute().addCopy(39 * 60 + 29);\n+        check(copy, 10, 59, 59, 40);\n+        \n+        copy = test.secondOfMinute().addCopy(39 * 60 + 30);\n+        check(copy, 11, 0, 0, 40);\n+        \n+        copy = test.secondOfMinute().addCopy(13 * 60 * 60 + 39 * 60 + 30);\n+        check(copy, 0, 0, 0, 40);\n+        \n+        copy = test.secondOfMinute().addCopy(-9);\n+        check(copy, 10, 20, 21, 40);\n+        \n+        copy = test.secondOfMinute().addCopy(-30);\n+        check(copy, 10, 20, 0, 40);\n+        \n+        copy = test.secondOfMinute().addCopy(-31);\n+        check(copy, 10, 19, 59, 40);\n+        \n+        copy = test.secondOfMinute().addCopy(-(10 * 60 * 60 + 20 * 60 + 30));\n+        check(copy, 0, 0, 0, 40);\n+        \n+        copy = test.secondOfMinute().addCopy(-(10 * 60 * 60 + 20 * 60 + 31));\n+        check(copy, 23, 59, 59, 40);\n+    }\n+\n+    public void testPropertyPlusNoWrapSecond() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.secondOfMinute().addNoWrapToCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 39, 40);\n+        \n+        copy = test.secondOfMinute().addNoWrapToCopy(29);\n+        check(copy, 10, 20, 59, 40);\n+        \n+        copy = test.secondOfMinute().addNoWrapToCopy(30);\n+        check(copy, 10, 21, 0, 40);\n+        \n+        copy = test.secondOfMinute().addNoWrapToCopy(39 * 60 + 29);\n+        check(copy, 10, 59, 59, 40);\n+        \n+        copy = test.secondOfMinute().addNoWrapToCopy(39 * 60 + 30);\n+        check(copy, 11, 0, 0, 40);\n+        \n+        try {\n+            test.secondOfMinute().addNoWrapToCopy(13 * 60 * 60 + 39 * 60 + 30);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+        \n+        copy = test.secondOfMinute().addNoWrapToCopy(-9);\n+        check(copy, 10, 20, 21, 40);\n+        \n+        copy = test.secondOfMinute().addNoWrapToCopy(-30);\n+        check(copy, 10, 20, 0, 40);\n+        \n+        copy = test.secondOfMinute().addNoWrapToCopy(-31);\n+        check(copy, 10, 19, 59, 40);\n+        \n+        copy = test.secondOfMinute().addNoWrapToCopy(-(10 * 60 * 60 + 20 * 60 + 30));\n+        check(copy, 0, 0, 0, 40);\n+        \n+        try {\n+            test.secondOfMinute().addNoWrapToCopy(-(10 * 60 * 60 + 20 * 60 + 31));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyPlusWrapFieldSecond() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.secondOfMinute().addWrapFieldToCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 39, 40);\n+        \n+        copy = test.secondOfMinute().addWrapFieldToCopy(49);\n+        check(copy, 10, 20, 19, 40);\n+        \n+        copy = test.secondOfMinute().addWrapFieldToCopy(-47);\n+        check(copy, 10, 20, 43, 40);\n+    }\n+\n+    public void testPropertySetSecond() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.secondOfMinute().setCopy(12);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 12, 40);\n+        \n+        try {\n+            test.secondOfMinute().setCopy(60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.secondOfMinute().setCopy(-1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextSecond() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.secondOfMinute().setCopy(\"12\");\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 12, 40);\n+    }\n+\n+    public void testPropertyCompareToSecond() {\n+        LocalTime test1 = new LocalTime(TEST_TIME1);\n+        LocalTime test2 = new LocalTime(TEST_TIME2);\n+        assertEquals(true, test1.secondOfMinute().compareTo(test2) < 0);\n+        assertEquals(true, test2.secondOfMinute().compareTo(test1) > 0);\n+        assertEquals(true, test1.secondOfMinute().compareTo(test1) == 0);\n+        try {\n+            test1.secondOfMinute().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.secondOfMinute().compareTo(dt2) < 0);\n+        assertEquals(true, test2.secondOfMinute().compareTo(dt1) > 0);\n+        assertEquals(true, test1.secondOfMinute().compareTo(dt1) == 0);\n+        try {\n+            test1.secondOfMinute().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMilli() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertSame(test.getChronology().millisOfSecond(), test.millisOfSecond().getField());\n+        assertEquals(\"millisOfSecond\", test.millisOfSecond().getName());\n+        assertEquals(\"Property[millisOfSecond]\", test.millisOfSecond().toString());\n+        assertSame(test, test.millisOfSecond().getLocalTime());\n+        assertEquals(40, test.millisOfSecond().get());\n+        assertEquals(\"40\", test.millisOfSecond().getAsString());\n+        assertEquals(\"40\", test.millisOfSecond().getAsText());\n+        assertEquals(\"40\", test.millisOfSecond().getAsText(Locale.FRENCH));\n+        assertEquals(\"40\", test.millisOfSecond().getAsShortText());\n+        assertEquals(\"40\", test.millisOfSecond().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().millis(), test.millisOfSecond().getDurationField());\n+        assertEquals(test.getChronology().seconds(), test.millisOfSecond().getRangeDurationField());\n+        assertEquals(3, test.millisOfSecond().getMaximumTextLength(null));\n+        assertEquals(3, test.millisOfSecond().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesMilli() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertEquals(0, test.millisOfSecond().getMinimumValue());\n+        assertEquals(0, test.millisOfSecond().getMinimumValueOverall());\n+        assertEquals(999, test.millisOfSecond().getMaximumValue());\n+        assertEquals(999, test.millisOfSecond().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyWithMaxMinValueMilli() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        check(test.millisOfSecond().withMaximumValue(), 10, 20, 30, 999);\n+        check(test.millisOfSecond().withMinimumValue(), 10, 20, 30, 0);\n+    }\n+\n+    public void testPropertyPlusMilli() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.millisOfSecond().addCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 30, 49);\n+        \n+        copy = test.millisOfSecond().addCopy(959);\n+        check(copy, 10, 20, 30, 999);\n+        \n+        copy = test.millisOfSecond().addCopy(960);\n+        check(copy, 10, 20, 31, 0);\n+        \n+        copy = test.millisOfSecond().addCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959);\n+        check(copy, 23, 59, 59, 999);\n+        \n+        copy = test.millisOfSecond().addCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960);\n+        check(copy, 0, 0, 0, 0);\n+        \n+        copy = test.millisOfSecond().addCopy(-9);\n+        check(copy, 10, 20, 30, 31);\n+        \n+        copy = test.millisOfSecond().addCopy(-40);\n+        check(copy, 10, 20, 30, 0);\n+        \n+        copy = test.millisOfSecond().addCopy(-41);\n+        check(copy, 10, 20, 29, 999);\n+        \n+        copy = test.millisOfSecond().addCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40));\n+        check(copy, 0, 0, 0, 0);\n+        \n+        copy = test.millisOfSecond().addCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41));\n+        check(copy, 23, 59, 59, 999);\n+    }\n+\n+    public void testPropertyPlusNoWrapMilli() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.millisOfSecond().addNoWrapToCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 30, 49);\n+        \n+        copy = test.millisOfSecond().addNoWrapToCopy(959);\n+        check(copy, 10, 20, 30, 999);\n+        \n+        copy = test.millisOfSecond().addNoWrapToCopy(960);\n+        check(copy, 10, 20, 31, 0);\n+        \n+        copy = test.millisOfSecond().addNoWrapToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959);\n+        check(copy, 23, 59, 59, 999);\n+        \n+        try {\n+            test.millisOfSecond().addNoWrapToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+        \n+        copy = test.millisOfSecond().addNoWrapToCopy(-9);\n+        check(copy, 10, 20, 30, 31);\n+        \n+        copy = test.millisOfSecond().addNoWrapToCopy(-40);\n+        check(copy, 10, 20, 30, 0);\n+        \n+        copy = test.millisOfSecond().addNoWrapToCopy(-41);\n+        check(copy, 10, 20, 29, 999);\n+        \n+        copy = test.millisOfSecond().addNoWrapToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40));\n+        check(copy, 0, 0, 0, 0);\n+        \n+        try {\n+            test.millisOfSecond().addNoWrapToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyPlusWrapFieldMilli() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.millisOfSecond().addWrapFieldToCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 30, 49);\n+        \n+        copy = test.millisOfSecond().addWrapFieldToCopy(995);\n+        check(copy, 10, 20, 30, 35);\n+        \n+        copy = test.millisOfSecond().addWrapFieldToCopy(-47);\n+        check(copy, 10, 20, 30, 993);\n+    }\n+\n+    public void testPropertySetMilli() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.millisOfSecond().setCopy(12);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 30, 12);\n+        \n+        try {\n+            test.millisOfSecond().setCopy(1000);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.millisOfSecond().setCopy(-1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextMilli() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.millisOfSecond().setCopy(\"12\");\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 30, 12);\n+    }\n+\n+    public void testPropertyCompareToMilli() {\n+        LocalTime test1 = new LocalTime(TEST_TIME1);\n+        LocalTime test2 = new LocalTime(TEST_TIME2);\n+        assertEquals(true, test1.millisOfSecond().compareTo(test2) < 0);\n+        assertEquals(true, test2.millisOfSecond().compareTo(test1) > 0);\n+        assertEquals(true, test1.millisOfSecond().compareTo(test1) == 0);\n+        try {\n+            test1.millisOfSecond().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.millisOfSecond().compareTo(dt2) < 0);\n+        assertEquals(true, test2.millisOfSecond().compareTo(dt1) > 0);\n+        assertEquals(true, test1.millisOfSecond().compareTo(dt1) == 0);\n+        try {\n+            test1.millisOfSecond().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private void check(LocalTime test, int hour, int min, int sec, int milli) {\n+        assertEquals(hour, test.getHourOfDay());\n+        assertEquals(min, test.getMinuteOfHour());\n+        assertEquals(sec, test.getSecondOfMinute());\n+        assertEquals(milli, test.getMillisOfSecond());\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestMinutes.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * This class is a Junit unit test for Minutes.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestMinutes extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestMinutes.class);\n+    }\n+\n+    public TestMinutes(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+    }\n+\n+    protected void tearDown() throws Exception {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstants() {\n+        assertEquals(0, Minutes.ZERO.getMinutes());\n+        assertEquals(1, Minutes.ONE.getMinutes());\n+        assertEquals(2, Minutes.TWO.getMinutes());\n+        assertEquals(3, Minutes.THREE.getMinutes());\n+        assertEquals(Integer.MAX_VALUE, Minutes.MAX_VALUE.getMinutes());\n+        assertEquals(Integer.MIN_VALUE, Minutes.MIN_VALUE.getMinutes());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_minutes_int() {\n+        assertSame(Minutes.ZERO, Minutes.minutes(0));\n+        assertSame(Minutes.ONE, Minutes.minutes(1));\n+        assertSame(Minutes.TWO, Minutes.minutes(2));\n+        assertSame(Minutes.THREE, Minutes.minutes(3));\n+        assertSame(Minutes.MAX_VALUE, Minutes.minutes(Integer.MAX_VALUE));\n+        assertSame(Minutes.MIN_VALUE, Minutes.minutes(Integer.MIN_VALUE));\n+        assertEquals(-1, Minutes.minutes(-1).getMinutes());\n+        assertEquals(4, Minutes.minutes(4).getMinutes());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_minutesBetween_RInstant() {\n+        DateTime start = new DateTime(2006, 6, 9, 12, 3, 0, 0, PARIS);\n+        DateTime end1 = new DateTime(2006, 6, 9, 12, 6, 0, 0, PARIS);\n+        DateTime end2 = new DateTime(2006, 6, 9, 12, 9, 0, 0, PARIS);\n+        \n+        assertEquals(3, Minutes.minutesBetween(start, end1).getMinutes());\n+        assertEquals(0, Minutes.minutesBetween(start, start).getMinutes());\n+        assertEquals(0, Minutes.minutesBetween(end1, end1).getMinutes());\n+        assertEquals(-3, Minutes.minutesBetween(end1, start).getMinutes());\n+        assertEquals(6, Minutes.minutesBetween(start, end2).getMinutes());\n+    }\n+\n+    public void testFactory_minutesBetween_RPartial() {\n+        LocalTime start = new LocalTime(12, 3);\n+        LocalTime end1 = new LocalTime(12, 6);\n+        TimeOfDay end2 = new TimeOfDay(12, 9);\n+        \n+        assertEquals(3, Minutes.minutesBetween(start, end1).getMinutes());\n+        assertEquals(0, Minutes.minutesBetween(start, start).getMinutes());\n+        assertEquals(0, Minutes.minutesBetween(end1, end1).getMinutes());\n+        assertEquals(-3, Minutes.minutesBetween(end1, start).getMinutes());\n+        assertEquals(6, Minutes.minutesBetween(start, end2).getMinutes());\n+    }\n+\n+    public void testFactory_minutesIn_RInterval() {\n+        DateTime start = new DateTime(2006, 6, 9, 12, 3, 0, 0, PARIS);\n+        DateTime end1 = new DateTime(2006, 6, 9, 12, 6, 0, 0, PARIS);\n+        DateTime end2 = new DateTime(2006, 6, 9, 12, 9, 0, 0, PARIS);\n+        \n+        assertEquals(0, Minutes.minutesIn((ReadableInterval) null).getMinutes());\n+        assertEquals(3, Minutes.minutesIn(new Interval(start, end1)).getMinutes());\n+        assertEquals(0, Minutes.minutesIn(new Interval(start, start)).getMinutes());\n+        assertEquals(0, Minutes.minutesIn(new Interval(end1, end1)).getMinutes());\n+        assertEquals(6, Minutes.minutesIn(new Interval(start, end2)).getMinutes());\n+    }\n+\n+    public void testFactory_standardMinutesIn_RPeriod() {\n+        assertEquals(0, Minutes.standardMinutesIn((ReadablePeriod) null).getMinutes());\n+        assertEquals(0, Minutes.standardMinutesIn(Period.ZERO).getMinutes());\n+        assertEquals(1, Minutes.standardMinutesIn(new Period(0, 0, 0, 0, 0, 1, 0, 0)).getMinutes());\n+        assertEquals(123, Minutes.standardMinutesIn(Period.minutes(123)).getMinutes());\n+        assertEquals(-987, Minutes.standardMinutesIn(Period.minutes(-987)).getMinutes());\n+        assertEquals(1, Minutes.standardMinutesIn(Period.seconds(119)).getMinutes());\n+        assertEquals(2, Minutes.standardMinutesIn(Period.seconds(120)).getMinutes());\n+        assertEquals(2, Minutes.standardMinutesIn(Period.seconds(121)).getMinutes());\n+        assertEquals(120, Minutes.standardMinutesIn(Period.hours(2)).getMinutes());\n+        try {\n+            Minutes.standardMinutesIn(Period.months(1));\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expeceted\n+        }\n+    }\n+\n+    public void testFactory_parseMinutes_String() {\n+        assertEquals(0, Minutes.parseMinutes((String) null).getMinutes());\n+        assertEquals(0, Minutes.parseMinutes(\"PT0M\").getMinutes());\n+        assertEquals(1, Minutes.parseMinutes(\"PT1M\").getMinutes());\n+        assertEquals(-3, Minutes.parseMinutes(\"PT-3M\").getMinutes());\n+        assertEquals(2, Minutes.parseMinutes(\"P0Y0M0DT2M\").getMinutes());\n+        assertEquals(2, Minutes.parseMinutes(\"PT0H2M\").getMinutes());\n+        try {\n+            Minutes.parseMinutes(\"P1Y1D\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expeceted\n+        }\n+        try {\n+            Minutes.parseMinutes(\"P1DT1M\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expeceted\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetMethods() {\n+        Minutes test = Minutes.minutes(20);\n+        assertEquals(20, test.getMinutes());\n+    }\n+\n+    public void testGetFieldType() {\n+        Minutes test = Minutes.minutes(20);\n+        assertEquals(DurationFieldType.minutes(), test.getFieldType());\n+    }\n+\n+    public void testGetPeriodType() {\n+        Minutes test = Minutes.minutes(20);\n+        assertEquals(PeriodType.minutes(), test.getPeriodType());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsGreaterThan() {\n+        assertEquals(true, Minutes.THREE.isGreaterThan(Minutes.TWO));\n+        assertEquals(false, Minutes.THREE.isGreaterThan(Minutes.THREE));\n+        assertEquals(false, Minutes.TWO.isGreaterThan(Minutes.THREE));\n+        assertEquals(true, Minutes.ONE.isGreaterThan(null));\n+        assertEquals(false, Minutes.minutes(-1).isGreaterThan(null));\n+    }\n+\n+    public void testIsLessThan() {\n+        assertEquals(false, Minutes.THREE.isLessThan(Minutes.TWO));\n+        assertEquals(false, Minutes.THREE.isLessThan(Minutes.THREE));\n+        assertEquals(true, Minutes.TWO.isLessThan(Minutes.THREE));\n+        assertEquals(false, Minutes.ONE.isLessThan(null));\n+        assertEquals(true, Minutes.minutes(-1).isLessThan(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        Minutes test = Minutes.minutes(20);\n+        assertEquals(\"PT20M\", test.toString());\n+        \n+        test = Minutes.minutes(-20);\n+        assertEquals(\"PT-20M\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        Minutes test = Minutes.THREE;\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        Minutes result = (Minutes) ois.readObject();\n+        ois.close();\n+        \n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToStandardWeeks() {\n+        Minutes test = Minutes.minutes(60 * 24 * 7 * 2);\n+        Weeks expected = Weeks.weeks(2);\n+        assertEquals(expected, test.toStandardWeeks());\n+    }\n+\n+    public void testToStandardDays() {\n+        Minutes test = Minutes.minutes(60 * 24 * 2);\n+        Days expected = Days.days(2);\n+        assertEquals(expected, test.toStandardDays());\n+    }\n+\n+    public void testToStandardHours() {\n+        Minutes test = Minutes.minutes(3 * 60);\n+        Hours expected = Hours.hours(3);\n+        assertEquals(expected, test.toStandardHours());\n+    }\n+\n+    public void testToStandardSeconds() {\n+        Minutes test = Minutes.minutes(3);\n+        Seconds expected = Seconds.seconds(3 * 60);\n+        assertEquals(expected, test.toStandardSeconds());\n+        \n+        try {\n+            Minutes.MAX_VALUE.toStandardSeconds();\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testToStandardDuration() {\n+        Minutes test = Minutes.minutes(20);\n+        Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_MINUTE);\n+        assertEquals(expected, test.toStandardDuration());\n+        \n+        expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_MINUTE);\n+        assertEquals(expected, Minutes.MAX_VALUE.toStandardDuration());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPlus_int() {\n+        Minutes test2 = Minutes.minutes(2);\n+        Minutes result = test2.plus(3);\n+        assertEquals(2, test2.getMinutes());\n+        assertEquals(5, result.getMinutes());\n+        \n+        assertEquals(1, Minutes.ONE.plus(0).getMinutes());\n+        \n+        try {\n+            Minutes.MAX_VALUE.plus(1);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testPlus_Minutes() {\n+        Minutes test2 = Minutes.minutes(2);\n+        Minutes test3 = Minutes.minutes(3);\n+        Minutes result = test2.plus(test3);\n+        assertEquals(2, test2.getMinutes());\n+        assertEquals(3, test3.getMinutes());\n+        assertEquals(5, result.getMinutes());\n+        \n+        assertEquals(1, Minutes.ONE.plus(Minutes.ZERO).getMinutes());\n+        assertEquals(1, Minutes.ONE.plus((Minutes) null).getMinutes());\n+        \n+        try {\n+            Minutes.MAX_VALUE.plus(Minutes.ONE);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testMinus_int() {\n+        Minutes test2 = Minutes.minutes(2);\n+        Minutes result = test2.minus(3);\n+        assertEquals(2, test2.getMinutes());\n+        assertEquals(-1, result.getMinutes());\n+        \n+        assertEquals(1, Minutes.ONE.minus(0).getMinutes());\n+        \n+        try {\n+            Minutes.MIN_VALUE.minus(1);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testMinus_Minutes() {\n+        Minutes test2 = Minutes.minutes(2);\n+        Minutes test3 = Minutes.minutes(3);\n+        Minutes result = test2.minus(test3);\n+        assertEquals(2, test2.getMinutes());\n+        assertEquals(3, test3.getMinutes());\n+        assertEquals(-1, result.getMinutes());\n+        \n+        assertEquals(1, Minutes.ONE.minus(Minutes.ZERO).getMinutes());\n+        assertEquals(1, Minutes.ONE.minus((Minutes) null).getMinutes());\n+        \n+        try {\n+            Minutes.MIN_VALUE.minus(Minutes.ONE);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testMultipliedBy_int() {\n+        Minutes test = Minutes.minutes(2);\n+        assertEquals(6, test.multipliedBy(3).getMinutes());\n+        assertEquals(2, test.getMinutes());\n+        assertEquals(-6, test.multipliedBy(-3).getMinutes());\n+        assertSame(test, test.multipliedBy(1));\n+        \n+        Minutes halfMax = Minutes.minutes(Integer.MAX_VALUE / 2 + 1);\n+        try {\n+            halfMax.multipliedBy(2);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testDividedBy_int() {\n+        Minutes test = Minutes.minutes(12);\n+        assertEquals(6, test.dividedBy(2).getMinutes());\n+        assertEquals(12, test.getMinutes());\n+        assertEquals(4, test.dividedBy(3).getMinutes());\n+        assertEquals(3, test.dividedBy(4).getMinutes());\n+        assertEquals(2, test.dividedBy(5).getMinutes());\n+        assertEquals(2, test.dividedBy(6).getMinutes());\n+        assertSame(test, test.dividedBy(1));\n+        \n+        try {\n+            Minutes.ONE.dividedBy(0);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testNegated() {\n+        Minutes test = Minutes.minutes(12);\n+        assertEquals(-12, test.negated().getMinutes());\n+        assertEquals(12, test.getMinutes());\n+        \n+        try {\n+            Minutes.MIN_VALUE.negated();\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddToLocalDate() {\n+        Minutes test = Minutes.minutes(26);\n+        LocalDateTime date = new LocalDateTime(2006, 6, 1, 0, 0, 0, 0);\n+        LocalDateTime expected = new LocalDateTime(2006, 6, 1, 0, 26, 0, 0);\n+        assertEquals(expected, date.plus(test));\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestMonthDay_Basics.java\n+/*\n+ *  Copyright 2001-2010 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Arrays;\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n+\n+/**\n+ * This class is a Junit unit test for MonthDay. Based on {@link TestYearMonth_Basics} \n+ */\n+public class TestMonthDay_Basics extends TestCase {\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+//    private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);\n+    private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);\n+    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+//    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+//    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n+//    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);\n+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+//    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n+//    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);\n+    private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);\n+    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n+    \n+    private long TEST_TIME_NOW =\n+            (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+\n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestMonthDay_Basics.class);\n+    }\n+\n+    public TestMonthDay_Basics(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGet() {\n+        MonthDay test = new MonthDay();\n+        assertEquals(6, test.get(DateTimeFieldType.monthOfYear()));\n+        assertEquals(9, test.get(DateTimeFieldType.dayOfMonth()));\n+        try {\n+            test.get(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.get(DateTimeFieldType.year());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testSize() {\n+        MonthDay test = new MonthDay();\n+        assertEquals(2, test.size());\n+    }\n+\n+    public void testGetFieldType() {\n+        MonthDay test = new MonthDay(COPTIC_PARIS);\n+        assertSame(DateTimeFieldType.monthOfYear(), test.getFieldType(0));\n+        assertSame(DateTimeFieldType.dayOfMonth(), test.getFieldType(1));\n+\n+        try {\n+            test.getFieldType(-1);\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            test.getFieldType(2);\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testGetFieldTypes() {\n+        MonthDay test = new MonthDay(COPTIC_PARIS);\n+        DateTimeFieldType[] fields = test.getFieldTypes();\n+        assertEquals(2, fields.length);\n+        assertSame(DateTimeFieldType.monthOfYear(), fields[0]);\n+        assertSame(DateTimeFieldType.dayOfMonth(), fields[1]);\n+        assertNotSame(test.getFieldTypes(), test.getFieldTypes());\n+    }\n+\n+    public void testGetField() {\n+        MonthDay test = new MonthDay(COPTIC_PARIS);\n+        assertSame(COPTIC_UTC.monthOfYear(), test.getField(0));\n+        assertSame(COPTIC_UTC.dayOfMonth(), test.getField(1));\n+        try {\n+            test.getField(-1);\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            test.getField(2);\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testGetFields() {\n+        MonthDay test = new MonthDay(COPTIC_PARIS);\n+        DateTimeField[] fields = test.getFields();\n+        assertEquals(2, fields.length);\n+        assertSame(COPTIC_UTC.monthOfYear(), fields[0]);\n+        assertSame(COPTIC_UTC.dayOfMonth(), fields[1]);\n+        assertNotSame(test.getFields(), test.getFields());\n+    }\n+\n+    public void testGetValue() {\n+        MonthDay test = new MonthDay();\n+        assertEquals(6, test.getValue(0));\n+        assertEquals(9, test.getValue(1));\n+        try {\n+            test.getValue(-1);\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            test.getValue(2);\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testGetValues() {\n+        MonthDay test = new MonthDay();\n+        int[] values = test.getValues();\n+        assertEquals(2, values.length);\n+        assertEquals(6, values[0]);\n+        assertEquals(9, values[1]);\n+        assertNotSame(test.getValues(), test.getValues());\n+    }\n+\n+    public void testIsSupported() {\n+        MonthDay test = new MonthDay(COPTIC_PARIS);\n+        assertEquals(false, test.isSupported(DateTimeFieldType.year()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth()));\n+        assertEquals(false, test.isSupported(DateTimeFieldType.hourOfDay()));\n+    }\n+\n+    public void testEqualsHashCode() {\n+        MonthDay test1 = new MonthDay(10, 6, COPTIC_PARIS);\n+        MonthDay test2 = new MonthDay(10, 6, COPTIC_PARIS);\n+        assertEquals(true, test1.equals(test2));\n+        assertEquals(true, test2.equals(test1));\n+        assertEquals(true, test1.equals(test1));\n+        assertEquals(true, test2.equals(test2));\n+        assertEquals(true, test1.hashCode() == test2.hashCode());\n+        assertEquals(true, test1.hashCode() == test1.hashCode());\n+        assertEquals(true, test2.hashCode() == test2.hashCode());\n+        \n+        MonthDay test3 = new MonthDay(10, 6);\n+        assertEquals(false, test1.equals(test3));\n+        assertEquals(false, test2.equals(test3));\n+        assertEquals(false, test3.equals(test1));\n+        assertEquals(false, test3.equals(test2));\n+        assertEquals(false, test1.hashCode() == test3.hashCode());\n+        assertEquals(false, test2.hashCode() == test3.hashCode());\n+        \n+        assertEquals(false, test1.equals(\"Hello\"));\n+        assertEquals(true, test1.equals(new MockMD()));\n+        assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE));\n+    }\n+    \n+    class MockMD extends MockPartial {\n+        \n+        @Override\n+        public Chronology getChronology() {\n+            return COPTIC_UTC;\n+        }\n+        \n+        @Override\n+        public DateTimeField[] getFields() {\n+            return new DateTimeField[] {\n+                COPTIC_UTC.monthOfYear(),\n+                COPTIC_UTC.dayOfMonth()\n+            };\n+        }\n+        \n+        @Override\n+        public int[] getValues() {\n+            return new int[] {10, 6};\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testCompareTo() {\n+        MonthDay test1 = new MonthDay(6, 6);\n+        MonthDay test1a = new MonthDay(6, 6);\n+        assertEquals(0, test1.compareTo(test1a));\n+        assertEquals(0, test1a.compareTo(test1));\n+        assertEquals(0, test1.compareTo(test1));\n+        assertEquals(0, test1a.compareTo(test1a));\n+        \n+        MonthDay test2 = new MonthDay(6, 7);\n+        assertEquals(-1, test1.compareTo(test2));\n+        assertEquals(+1, test2.compareTo(test1));\n+        \n+        MonthDay test3 = new MonthDay(6, 7, GregorianChronology.getInstanceUTC());\n+        assertEquals(-1, test1.compareTo(test3));\n+        assertEquals(+1, test3.compareTo(test1));\n+        assertEquals(0, test3.compareTo(test2));\n+        \n+        DateTimeFieldType[] types = new DateTimeFieldType[] {\n+            DateTimeFieldType.monthOfYear(),\n+            DateTimeFieldType.dayOfMonth()\n+        };\n+        int[] values = new int[] {6, 6};\n+        Partial p = new Partial(types, values);\n+        assertEquals(0, test1.compareTo(p));\n+        try {\n+            test1.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+        try {\n+            test1.compareTo(new LocalTime());\n+            fail();\n+        } catch (ClassCastException ex) {}\n+        Partial partial = new Partial()\n+            .with(DateTimeFieldType.centuryOfEra(), 1)\n+            .with(DateTimeFieldType.halfdayOfDay(), 0)\n+            .with(DateTimeFieldType.dayOfMonth(), 9);\n+        try {\n+            new MonthDay(10, 6).compareTo(partial);\n+            fail();\n+        } catch (ClassCastException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsEqual_MD() {\n+        MonthDay test1 = new MonthDay(6, 6);\n+        MonthDay test1a = new MonthDay(6, 6);\n+        assertEquals(true, test1.isEqual(test1a));\n+        assertEquals(true, test1a.isEqual(test1));\n+        assertEquals(true, test1.isEqual(test1));\n+        assertEquals(true, test1a.isEqual(test1a));\n+        \n+        MonthDay test2 = new MonthDay(6, 7);\n+        assertEquals(false, test1.isEqual(test2));\n+        assertEquals(false, test2.isEqual(test1));\n+        \n+        MonthDay test3 = new MonthDay(6, 7, GregorianChronology.getInstanceUTC());\n+        assertEquals(false, test1.isEqual(test3));\n+        assertEquals(false, test3.isEqual(test1));\n+        assertEquals(true, test3.isEqual(test2));\n+        \n+        try {\n+            new MonthDay(6, 7).isEqual(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsBefore_MD() {\n+        MonthDay test1 = new MonthDay(6, 6);\n+        MonthDay test1a = new MonthDay(6, 6);\n+        assertEquals(false, test1.isBefore(test1a));\n+        assertEquals(false, test1a.isBefore(test1));\n+        assertEquals(false, test1.isBefore(test1));\n+        assertEquals(false, test1a.isBefore(test1a));\n+        \n+        MonthDay test2 = new MonthDay(6, 7);\n+        assertEquals(true, test1.isBefore(test2));\n+        assertEquals(false, test2.isBefore(test1));\n+        \n+        MonthDay test3 = new MonthDay(6, 7, GregorianChronology.getInstanceUTC());\n+        assertEquals(true, test1.isBefore(test3));\n+        assertEquals(false, test3.isBefore(test1));\n+        assertEquals(false, test3.isBefore(test2));\n+        \n+        try {\n+            new MonthDay(6, 7).isBefore(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsAfter_MD() {\n+        MonthDay test1 = new MonthDay(6, 6);\n+        MonthDay test1a = new MonthDay(6, 6);\n+        assertEquals(false, test1.isAfter(test1a));\n+        assertEquals(false, test1a.isAfter(test1));\n+        assertEquals(false, test1.isAfter(test1));\n+        assertEquals(false, test1a.isAfter(test1a));\n+        \n+        MonthDay test2 = new MonthDay(6, 7);\n+        assertEquals(false, test1.isAfter(test2));\n+        assertEquals(true, test2.isAfter(test1));\n+        \n+        MonthDay test3 = new MonthDay(6, 7, GregorianChronology.getInstanceUTC());\n+        assertEquals(false, test1.isAfter(test3));\n+        assertEquals(true, test3.isAfter(test1));\n+        assertEquals(false, test3.isAfter(test2));\n+        \n+        try {\n+            new MonthDay(6, 7).isAfter(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testWithChronologyRetainFields_Chrono() {\n+        MonthDay base = new MonthDay(6, 6, COPTIC_PARIS);\n+        MonthDay test = base.withChronologyRetainFields(BUDDHIST_TOKYO);\n+        check(base, 6, 6);\n+        assertEquals(COPTIC_UTC, base.getChronology());\n+        check(test, 6, 6);\n+        assertEquals(BUDDHIST_UTC, test.getChronology());\n+    }\n+\n+    public void testWithChronologyRetainFields_sameChrono() {\n+        MonthDay base = new MonthDay(6, 6, COPTIC_PARIS);\n+        MonthDay test = base.withChronologyRetainFields(COPTIC_TOKYO);\n+        assertSame(base, test);\n+    }\n+\n+    public void testWithChronologyRetainFields_nullChrono() {\n+        MonthDay base = new MonthDay(6, 6, COPTIC_PARIS);\n+        MonthDay test = base.withChronologyRetainFields(null);\n+        check(base, 6, 6);\n+        assertEquals(COPTIC_UTC, base.getChronology());\n+        check(test, 6, 6);\n+        assertEquals(ISO_UTC, test.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithField() {\n+        MonthDay test = new MonthDay(9, 6);\n+        MonthDay result = test.withField(DateTimeFieldType.monthOfYear(), 10);\n+        \n+        assertEquals(new MonthDay(9, 6), test);\n+        assertEquals(new MonthDay(10, 6), result);\n+    }\n+\n+    public void testWithField_nullField() {\n+        MonthDay test = new MonthDay(9, 6);\n+        try {\n+            test.withField(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithField_unknownField() {\n+        MonthDay test = new MonthDay(9, 6);\n+        try {\n+            test.withField(DateTimeFieldType.hourOfDay(), 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithField_same() {\n+        MonthDay test = new MonthDay(9, 6);\n+        MonthDay result = test.withField(DateTimeFieldType.monthOfYear(), 9);\n+        assertEquals(new MonthDay(9, 6), test);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithFieldAdded() {\n+        MonthDay test = new MonthDay(9, 6);\n+        MonthDay result = test.withFieldAdded(DurationFieldType.months(), 1);\n+        \n+        assertEquals(new MonthDay(9, 6), test);\n+        assertEquals(new MonthDay(10, 6), result);\n+    }\n+\n+    public void testWithFieldAdded_nullField_zero() {\n+        MonthDay test = new MonthDay(9, 6);\n+        try {\n+            test.withFieldAdded(null, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded_nullField_nonZero() {\n+        MonthDay test = new MonthDay(9, 6);\n+        try {\n+            test.withFieldAdded(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded_zero() {\n+        MonthDay test = new MonthDay(9, 6);\n+        MonthDay result = test.withFieldAdded(DurationFieldType.months(), 0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testWithFieldAdded_unknownField() {\n+        MonthDay test = new MonthDay(9, 6);\n+        try {\n+            test.withFieldAdded(DurationFieldType.hours(), 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPlus_RP() {\n+        MonthDay test = new MonthDay(6, 5, BuddhistChronology.getInstance());\n+        MonthDay result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8));\n+        MonthDay expected = new MonthDay(8, 9, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plus((ReadablePeriod) null);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusMonths_int() {\n+        MonthDay test = new MonthDay(6, 5, BuddhistChronology.getInstance());\n+        MonthDay result = test.plusMonths(1);\n+        MonthDay expected = new MonthDay(7, 5, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+    }\n+\n+    public void testPlusMonths_int_same() {\n+        MonthDay test = new MonthDay(6, 5, ISO_UTC);\n+        MonthDay result = test.plusMonths(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusMonths_int_wrap() {\n+        MonthDay test = new MonthDay(6, 5, ISO_UTC);\n+        MonthDay result = test.plusMonths(10);\n+        MonthDay expected = new MonthDay(4, 5, ISO_UTC);\n+        assertEquals(expected, result);\n+    }\n+\n+    public void testPlusMonths_int_adjust() {\n+        MonthDay test = new MonthDay(7, 31, ISO_UTC);\n+        MonthDay result = test.plusMonths(2);\n+        MonthDay expected = new MonthDay(9, 30, ISO_UTC);\n+        assertEquals(expected, result);\n+    }\n+\n+    public void testPlusDays_int() {\n+        MonthDay test = new MonthDay(5, 10, BuddhistChronology.getInstance());\n+        MonthDay result = test.plusDays(1);\n+        MonthDay expected = new MonthDay(5, 11, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+    }\n+\n+    public void testPlusDays_same() {\n+        MonthDay test = new MonthDay(5, 10, BuddhistChronology.getInstance());\n+        MonthDay result = test.plusDays(0);\n+        assertSame(test, result);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testMinus_RP() {\n+        MonthDay test = new MonthDay(6, 5, BuddhistChronology.getInstance());\n+        MonthDay result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));\n+        MonthDay expected = new MonthDay(5, 4, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minus((ReadablePeriod) null);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusMonths_int() {\n+        MonthDay test = new MonthDay(6, 5, BuddhistChronology.getInstance());\n+        MonthDay result = test.minusMonths(1);\n+        MonthDay expected = new MonthDay(5, 5, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+    }\n+\n+    public void testMinusMonths_int_same() {\n+        MonthDay test = new MonthDay(6, 5, ISO_UTC);\n+        MonthDay result = test.minusMonths(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusMonths_int_wrap() {\n+        MonthDay test = new MonthDay(6, 5, ISO_UTC);\n+        MonthDay result = test.minusMonths(10);\n+        MonthDay expected = new MonthDay(8, 5, ISO_UTC);\n+        assertEquals(expected, result);\n+    }\n+\n+    public void testMinusMonths_int_adjust() {\n+        MonthDay test = new MonthDay(7, 31, ISO_UTC);\n+        MonthDay result = test.minusMonths(3);\n+        MonthDay expected = new MonthDay(4, 30, ISO_UTC);\n+        assertEquals(expected, result);\n+    }\n+\n+    public void testMinusDays_int() {\n+        MonthDay test = new MonthDay(5, 11, BuddhistChronology.getInstance());\n+        MonthDay result = test.minusDays(1);\n+        MonthDay expected = new MonthDay(5, 10, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+    }\n+\n+    public void testMinusDays_same() {\n+        MonthDay test = new MonthDay(5, 11, BuddhistChronology.getInstance());\n+        MonthDay result = test.minusDays(0);\n+        assertSame(test, result);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testToLocalDate() {\n+        MonthDay base = new MonthDay(6, 6, COPTIC_UTC);\n+        LocalDate test = base.toLocalDate(2009);\n+        assertEquals(new LocalDate(2009, 6, 6, COPTIC_UTC), test);\n+        try {\n+            base.toLocalDate(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateTime_RI() {\n+        MonthDay base = new MonthDay(6, 6, COPTIC_PARIS);\n+        DateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7);\n+        \n+        DateTime test = base.toDateTime(dt);\n+        check(base, 6, 6);\n+        DateTime expected = dt;\n+        expected = expected.monthOfYear().setCopy(6);\n+        expected = expected.dayOfMonth().setCopy(6);\n+        assertEquals(expected, test);\n+    }\n+\n+    public void testToDateTime_nullRI() {\n+        MonthDay base = new MonthDay(6, 6);\n+        DateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        \n+        DateTime test = base.toDateTime((ReadableInstant) null);\n+        check(base, 6, 6);\n+        DateTime expected = dt;\n+        expected = expected.monthOfYear().setCopy(6);\n+        expected = expected.dayOfMonth().setCopy(6);\n+        assertEquals(expected, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithers() {\n+        MonthDay test = new MonthDay(10, 6);\n+        check(test.withMonthOfYear(5), 5, 6);\n+        check(test.withDayOfMonth(2), 10, 2);\n+        try {\n+            test.withMonthOfYear(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.withMonthOfYear(13);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testProperty() {\n+        MonthDay test = new MonthDay(6, 6);\n+        assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear()));\n+        assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth()));\n+        try {\n+            test.property(DateTimeFieldType.millisOfDay());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.property(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        MonthDay test = new MonthDay(5, 6, COPTIC_PARIS);\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        MonthDay result = (MonthDay) ois.readObject();\n+        ois.close();\n+        \n+        assertEquals(test, result);\n+        assertTrue(Arrays.equals(test.getValues(), result.getValues()));\n+        assertTrue(Arrays.equals(test.getFields(), result.getFields()));\n+        assertEquals(test.getChronology(), result.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        MonthDay test = new MonthDay(5, 6);\n+        assertEquals(\"--05-06\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString_String() {\n+        MonthDay test = new MonthDay(5, 6);\n+        assertEquals(\"05 \\ufffd\\ufffd\", test.toString(\"MM HH\"));\n+        assertEquals(\"--05-06\", test.toString((String) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString_String_Locale() {\n+        MonthDay test = new MonthDay(5, 6);\n+        assertEquals(\"\\ufffd 6/5\", test.toString(\"EEE d/M\", Locale.ENGLISH));\n+        assertEquals(\"\\ufffd 6/5\", test.toString(\"EEE d/M\", Locale.FRENCH));\n+        assertEquals(\"--05-06\", test.toString(null, Locale.ENGLISH));\n+        assertEquals(\"\\ufffd 6/5\", test.toString(\"EEE d/M\", null));\n+        assertEquals(\"--05-06\", test.toString(null, null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString_DTFormatter() {\n+        MonthDay test = new MonthDay(5, 6);\n+        assertEquals(\"05 \\ufffd\\ufffd\", test.toString(DateTimeFormat.forPattern(\"MM HH\")));\n+        assertEquals(\"--05-06\", test.toString((DateTimeFormatter) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private void check(MonthDay test, int month, int day) {\n+        assertEquals(month, test.getMonthOfYear());\n+        assertEquals(day, test.getDayOfMonth());\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java\n+/*\n+ *  Copyright 2001-2010 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * This class is a Junit unit test for MonthDay. Based on {@link TestYearMonth_Constuctors} \n+ */\n+public class TestMonthDay_Constructors extends TestCase {\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();\n+    private static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);\n+    \n+    private long TEST_TIME_NOW =\n+            (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    private long TEST_TIME1 =\n+        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private long TEST_TIME2 =\n+        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestMonthDay_Constructors.class);\n+    }\n+\n+    public TestMonthDay_Constructors(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_FromCalendarFields() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n+        cal.set(Calendar.MILLISECOND, 7);\n+        MonthDay expected = new MonthDay(2, 3);\n+        assertEquals(expected, MonthDay.fromCalendarFields(cal));\n+        try {\n+            MonthDay.fromCalendarFields(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_FromDateFields() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n+        cal.set(Calendar.MILLISECOND, 7);\n+        MonthDay expected = new MonthDay(2, 3);\n+        assertEquals(expected, MonthDay.fromDateFields(cal.getTime()));\n+        try {\n+            MonthDay.fromDateFields(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor ()\n+     */\n+    public void testConstructor() throws Throwable {\n+        MonthDay test = new MonthDay();\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (DateTimeZone)\n+     */\n+    public void testConstructor_DateTimeZone() throws Throwable {\n+        DateTime dt = new DateTime(2005, 6, 30, 23, 59, 0, 0, LONDON);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        // 23:59 in London is 00:59 the following day in Paris\n+        \n+        MonthDay test = new MonthDay(LONDON);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(30, test.getDayOfMonth());\n+        \n+        test = new MonthDay(PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(7, test.getMonthOfYear());\n+        assertEquals(1, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (DateTimeZone=null)\n+     */\n+    public void testConstructor_nullDateTimeZone() throws Throwable {\n+        DateTime dt = new DateTime(2005, 6, 30, 23, 59, 0, 0, LONDON);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        // 23:59 in London is 00:59 the following day in Paris\n+        \n+        MonthDay test = new MonthDay((DateTimeZone) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(30, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (Chronology)\n+     */\n+    public void testConstructor_Chronology() throws Throwable {\n+        MonthDay test = new MonthDay(GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (Chronology=null)\n+     */\n+    public void testConstructor_nullChronology() throws Throwable {\n+        MonthDay test = new MonthDay((Chronology) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (long)\n+     */\n+    public void testConstructor_long1() throws Throwable {\n+        MonthDay test = new MonthDay(TEST_TIME1);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (long)\n+     */\n+    public void testConstructor_long2() throws Throwable {\n+        MonthDay test = new MonthDay(TEST_TIME2);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(5, test.getMonthOfYear());\n+        assertEquals(7, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (long, Chronology)\n+     */\n+    public void testConstructor_long1_Chronology() throws Throwable {\n+        MonthDay test = new MonthDay(TEST_TIME1, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (long, Chronology)\n+     */\n+    public void testConstructor_long2_Chronology() throws Throwable {\n+        MonthDay test = new MonthDay(TEST_TIME2, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(5, test.getMonthOfYear());\n+        assertEquals(7, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (long, Chronology=null)\n+     */\n+    public void testConstructor_long_nullChronology() throws Throwable {\n+        MonthDay test = new MonthDay(TEST_TIME1, null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_Object() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        MonthDay test = new MonthDay(date);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_nullObject() throws Throwable {\n+        MonthDay test = new MonthDay((Object) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_ObjectString1() throws Throwable {\n+        MonthDay test = new MonthDay(\"1972-12\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(12, test.getMonthOfYear());\n+        assertEquals(1, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_ObjectString2() throws Throwable {\n+        MonthDay test = new MonthDay(\"1972-12-01T+14:00\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(11, test.getMonthOfYear());  // timezone\n+        assertEquals(30, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_ObjectString3() throws Throwable {\n+        MonthDay test = new MonthDay(\"1972-12-03T10:20:30.040\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(12, test.getMonthOfYear());\n+        assertEquals(3, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_ObjectString4() throws Throwable {\n+        MonthDay test = new MonthDay(\"1972-12-01T10:20:30.040+14:00\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(11, test.getMonthOfYear());  // timezone\n+        assertEquals(30, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_ObjectString5() throws Throwable {\n+        MonthDay test = new MonthDay(\"10\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1, test.getMonthOfYear());\n+        assertEquals(1, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_ObjectStringEx1() throws Throwable {\n+        try {\n+            new MonthDay(\"T10:20:30.040\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testConstructor_ObjectStringEx2() throws Throwable {\n+        try {\n+            new MonthDay(\"T10:20:30.040+14:00\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testConstructor_ObjectStringEx3() throws Throwable {\n+        try {\n+            new MonthDay(\"10:20:30.040\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testConstructor_ObjectStringEx4() throws Throwable {\n+        try {\n+            new MonthDay(\"10:20:30.040+14:00\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (Object, Chronology)\n+     */\n+    public void testConstructor_Object_Chronology() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        MonthDay test = new MonthDay(date, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (Object=null, Chronology)\n+     */\n+    public void testConstructor_nullObject_Chronology() throws Throwable {\n+        MonthDay test = new MonthDay((Object) null, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (Object, Chronology=null)\n+     */\n+    public void testConstructor_Object_nullChronology() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        MonthDay test = new MonthDay(date, null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (Object=null, Chronology=null)\n+     */\n+    public void testConstructor_nullObject_nullChronology() throws Throwable {\n+        MonthDay test = new MonthDay((Object) null, null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (int, int)\n+     */\n+    public void testConstructor_int_int() throws Throwable {\n+        MonthDay test = new MonthDay(6, 30);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(30, test.getDayOfMonth());\n+        try {\n+            new MonthDay(Integer.MIN_VALUE, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MonthDay(Integer.MAX_VALUE, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MonthDay(1970, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MonthDay(1970, 13);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (int, int, Chronology)\n+     */\n+    public void testConstructor_int_int_Chronology() throws Throwable {\n+        MonthDay test = new MonthDay(6, 30, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(30, test.getDayOfMonth());\n+        try {\n+            new MonthDay(Integer.MIN_VALUE, 6, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MonthDay(Integer.MAX_VALUE, 6, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MonthDay(1970, 0, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MonthDay(1970, 13, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (int, int, Chronology=null)\n+     */\n+    public void testConstructor_int_int_nullChronology() throws Throwable {\n+        MonthDay test = new MonthDay(6, 30, null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(30, test.getDayOfMonth());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestMonthDay_Properties.java\n+/*\n+ *  Copyright 2001-2010 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.LenientChronology;\n+import org.joda.time.chrono.StrictChronology;\n+\n+/**\n+ * This class is a Junit unit test for MonthDay. Based on {@link TestYearMonth_Propeties} \n+ */\n+public class TestMonthDay_Properties extends TestCase {\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+\n+    private long TEST_TIME_NOW =\n+            (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    private long TEST_TIME1 =\n+        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private long TEST_TIME2 =\n+        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestMonthDay_Properties.class);\n+    }\n+\n+    public TestMonthDay_Properties(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMonthOfYear() {\n+        MonthDay test = new MonthDay(9, 6);\n+        assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField());\n+        assertEquals(\"monthOfYear\", test.monthOfYear().getName());\n+        assertEquals(\"Property[monthOfYear]\", test.monthOfYear().toString());\n+        assertSame(test, test.monthOfYear().getReadablePartial());\n+        assertSame(test, test.monthOfYear().getMonthDay());\n+        assertEquals(9, test.monthOfYear().get());\n+        assertEquals(\"9\", test.monthOfYear().getAsString());\n+        assertEquals(\"September\", test.monthOfYear().getAsText());\n+        assertEquals(\"septembre\", test.monthOfYear().getAsText(Locale.FRENCH));\n+        assertEquals(\"Sep\", test.monthOfYear().getAsShortText());\n+        assertEquals(\"sept.\", test.monthOfYear().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField());\n+        // assertEquals(test.getChronology().days(), test.dayOfMonth().getRangeDurationField());\n+        assertEquals(9, test.monthOfYear().getMaximumTextLength(null));\n+        assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesMonthOfYear() {\n+        MonthDay test = new MonthDay(10, 6);\n+        assertEquals(1, test.monthOfYear().getMinimumValue());\n+        assertEquals(1, test.monthOfYear().getMinimumValueOverall());\n+        assertEquals(12, test.monthOfYear().getMaximumValue());\n+        assertEquals(12, test.monthOfYear().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyAddMonthOfYear() {\n+        MonthDay test = new MonthDay(3, 6);\n+        MonthDay copy = test.monthOfYear().addToCopy(9);\n+        check(test, 3, 6);\n+        check(copy, 12, 6);\n+        \n+        copy = test.monthOfYear().addToCopy(0);\n+        check(copy, 3, 6);\n+\n+        check(test, 3, 6);\n+        \n+        copy = test.monthOfYear().addToCopy(-3);\n+        check(copy, 12, 6);\n+        check(test, 3, 6);\n+    }\n+\n+    public void testPropertyAddWrapFieldMonthOfYear() {\n+        MonthDay test = new MonthDay(5, 6);\n+        MonthDay copy = test.monthOfYear().addWrapFieldToCopy(2);\n+        check(test, 5, 6);\n+        check(copy, 7, 6);\n+        \n+        copy = test.monthOfYear().addWrapFieldToCopy(2);\n+        check(copy, 7, 6);\n+        \n+        copy = test.monthOfYear().addWrapFieldToCopy(292278993 - 4 + 1);\n+        check(copy, 11, 6);\n+        \n+        copy = test.monthOfYear().addWrapFieldToCopy(-292275054 - 4 - 1);\n+        check(copy, 6, 6);\n+    }\n+\n+    public void testPropertySetMonthOfYear() {\n+        MonthDay test = new MonthDay(10, 6);\n+        MonthDay copy = test.monthOfYear().setCopy(12);\n+        check(test, 10, 6);\n+        check(copy, 12, 6);\n+    }\n+\n+    public void testPropertySetTextMonthOfYear() {\n+        MonthDay test = new MonthDay(10, 6);\n+        MonthDay copy = test.monthOfYear().setCopy(\"12\");\n+        check(test, 10, 6);\n+        check(copy, 12, 6);\n+    }\n+\n+    public void testPropertyCompareToMonthOfYear() {\n+        MonthDay test1 = new MonthDay(TEST_TIME1);\n+        MonthDay test2 = new MonthDay(TEST_TIME2);\n+        assertEquals(true, test1.monthOfYear().compareTo(test2) < 0);\n+        assertEquals(true, test2.monthOfYear().compareTo(test1) > 0);\n+        assertEquals(true, test1.monthOfYear().compareTo(test1) == 0);\n+        try {\n+            test1.monthOfYear().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0);\n+        assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0);\n+        assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0);\n+        try {\n+            test1.monthOfYear().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetDayOfMonth() {\n+        MonthDay test = new MonthDay(4, 6);\n+        assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField());\n+        assertEquals(\"dayOfMonth\", test.dayOfMonth().getName());\n+        assertEquals(\"Property[dayOfMonth]\", test.dayOfMonth().toString());\n+        assertSame(test, test.dayOfMonth().getReadablePartial());\n+        assertSame(test, test.dayOfMonth().getMonthDay());\n+        assertEquals(6, test.dayOfMonth().get());\n+        assertEquals(\"6\", test.dayOfMonth().getAsString());\n+        assertEquals(\"6\", test.dayOfMonth().getAsText());\n+        assertEquals(\"6\", test.dayOfMonth().getAsText(Locale.FRENCH));\n+        assertEquals(\"6\", test.dayOfMonth().getAsShortText());\n+        assertEquals(\"6\", test.dayOfMonth().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField());\n+        assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField());\n+        assertEquals(2, test.dayOfMonth().getMaximumTextLength(null));\n+        assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null));\n+        test = new MonthDay(4, 7);\n+        assertEquals(\"7\", test.dayOfMonth().getAsText(Locale.FRENCH));\n+        assertEquals(\"7\", test.dayOfMonth().getAsShortText(Locale.FRENCH));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesDayOfMonth() {\n+        MonthDay test = new MonthDay(4, 6);\n+        assertEquals(1, test.dayOfMonth().getMinimumValue());\n+        assertEquals(1, test.dayOfMonth().getMinimumValueOverall());\n+        assertEquals(30, test.dayOfMonth().getMaximumValue());\n+        assertEquals(31, test.dayOfMonth().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyAddDayOfMonth() {\n+        MonthDay test = new MonthDay(4, 6);\n+        MonthDay copy = test.dayOfMonth().addToCopy(6);\n+        check(test, 4, 6);\n+        check(copy, 4, 12);\n+        \n+        copy = test.dayOfMonth().addToCopy(7);\n+        check(copy, 4, 13);\n+        \n+        copy = test.dayOfMonth().addToCopy(-5);\n+        check(copy, 4, 1);\n+        \n+        copy = test.dayOfMonth().addToCopy(-6);\n+        check(copy, 3, 31);\n+    }\n+\n+    public void testPropertyAddWrapFieldDayOfMonth() {\n+        MonthDay test = new MonthDay(4, 6);\n+        MonthDay copy = test.dayOfMonth().addWrapFieldToCopy(4);\n+        check(test, 4, 6);\n+        check(copy, 4, 10);\n+        \n+        copy = test.dayOfMonth().addWrapFieldToCopy(8);\n+        check(copy, 4, 14);\n+        \n+        copy = test.dayOfMonth().addWrapFieldToCopy(-8);\n+        check(copy, 4, 28);\n+    }\n+\n+    public void testPropertySetDayOfMonth() {\n+        MonthDay test = new MonthDay(4, 6);\n+        MonthDay copy = test.dayOfMonth().setCopy(12);\n+        check(test, 4, 6);\n+        check(copy, 4, 12);\n+        \n+        try {\n+            test.dayOfMonth().setCopy(33);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.dayOfMonth().setCopy(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextDayOfMonth() {\n+        MonthDay test = new MonthDay(4, 6);\n+        MonthDay copy = test.dayOfMonth().setCopy(\"12\");\n+        check(test, 4, 6);\n+        check(copy, 4, 12);\n+        \n+        copy = test.dayOfMonth().setCopy(\"2\");\n+        check(test, 4, 6);\n+        check(copy, 4, 2);\n+        \n+        copy = test.dayOfMonth().setCopy(\"4\");\n+        check(test, 4, 6);\n+        check(copy, 4, 4);\n+    }\n+\n+    public void testPropertyCompareToDayOfMonth() {\n+        MonthDay test1 = new MonthDay(TEST_TIME1);\n+        MonthDay test2 = new MonthDay(TEST_TIME2);\n+        assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0);\n+        assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0);\n+        assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0);\n+        try {\n+            test1.dayOfMonth().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0);\n+        assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0);\n+        assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0);\n+        try {\n+            test1.dayOfMonth().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyEquals() {\n+        MonthDay test1 = new MonthDay(11, 11);\n+        MonthDay test2 = new MonthDay(11, 12);\n+        MonthDay test3 = new MonthDay(11, 11, CopticChronology.getInstanceUTC());\n+        assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));\n+        assertEquals(false, test1.dayOfMonth().equals(test1.monthOfYear()));\n+        assertEquals(false, test1.dayOfMonth().equals(test2.dayOfMonth()));\n+        assertEquals(false, test1.dayOfMonth().equals(test2.monthOfYear()));\n+        \n+        assertEquals(false, test1.monthOfYear().equals(test1.dayOfMonth()));\n+        assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear()));\n+        assertEquals(false, test1.monthOfYear().equals(test2.dayOfMonth()));\n+        assertEquals(true, test1.monthOfYear().equals(test2.monthOfYear()));\n+        \n+        assertEquals(false, test1.dayOfMonth().equals(null));\n+        assertEquals(false, test1.dayOfMonth().equals(\"any\"));\n+        \n+        // chrono\n+        assertEquals(false, test1.dayOfMonth().equals(test3.dayOfMonth()));\n+    }\n+\n+    public void testPropertyHashCode() {\n+        MonthDay test1 = new MonthDay(5, 11);\n+        MonthDay test2 = new MonthDay(5, 12);\n+        assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());\n+        assertEquals(false, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());\n+        assertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode());\n+        assertEquals(true, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode());\n+    }\n+\n+    public void testPropertyEqualsHashCodeLenient() {\n+        MonthDay test1 = new MonthDay(5, 6, LenientChronology.getInstance(COPTIC_PARIS));\n+        MonthDay test2 = new MonthDay(5, 6, LenientChronology.getInstance(COPTIC_PARIS));\n+        assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth()));\n+        assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth()));\n+        assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));\n+        assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth()));\n+        assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());\n+        assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());\n+        assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());\n+    }\n+\n+    public void testPropertyEqualsHashCodeStrict() {\n+        MonthDay test1 = new MonthDay(5, 6, StrictChronology.getInstance(COPTIC_PARIS));\n+        MonthDay test2 = new MonthDay(5, 6, StrictChronology.getInstance(COPTIC_PARIS));\n+        assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth()));\n+        assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth()));\n+        assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));\n+        assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth()));\n+        assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());\n+        assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());\n+        assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private void check(MonthDay test, int monthOfYear, int dayOfMonth) {\n+        assertEquals(monthOfYear, test.getMonthOfYear());\n+        assertEquals(dayOfMonth, test.getDayOfMonth());\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestMonths.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * This class is a Junit unit test for Months.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestMonths extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestMonths.class);\n+    }\n+\n+    public TestMonths(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+    }\n+\n+    protected void tearDown() throws Exception {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstants() {\n+        assertEquals(0, Months.ZERO.getMonths());\n+        assertEquals(1, Months.ONE.getMonths());\n+        assertEquals(2, Months.TWO.getMonths());\n+        assertEquals(3, Months.THREE.getMonths());\n+        assertEquals(4, Months.FOUR.getMonths());\n+        assertEquals(5, Months.FIVE.getMonths());\n+        assertEquals(6, Months.SIX.getMonths());\n+        assertEquals(7, Months.SEVEN.getMonths());\n+        assertEquals(8, Months.EIGHT.getMonths());\n+        assertEquals(9, Months.NINE.getMonths());\n+        assertEquals(10, Months.TEN.getMonths());\n+        assertEquals(11, Months.ELEVEN.getMonths());\n+        assertEquals(12, Months.TWELVE.getMonths());\n+        assertEquals(Integer.MAX_VALUE, Months.MAX_VALUE.getMonths());\n+        assertEquals(Integer.MIN_VALUE, Months.MIN_VALUE.getMonths());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_months_int() {\n+        assertSame(Months.ZERO, Months.months(0));\n+        assertSame(Months.ONE, Months.months(1));\n+        assertSame(Months.TWO, Months.months(2));\n+        assertSame(Months.THREE, Months.months(3));\n+        assertSame(Months.FOUR, Months.months(4));\n+        assertSame(Months.FIVE, Months.months(5));\n+        assertSame(Months.SIX, Months.months(6));\n+        assertSame(Months.SEVEN, Months.months(7));\n+        assertSame(Months.EIGHT, Months.months(8));\n+        assertSame(Months.NINE, Months.months(9));\n+        assertSame(Months.TEN, Months.months(10));\n+        assertSame(Months.ELEVEN, Months.months(11));\n+        assertSame(Months.TWELVE, Months.months(12));\n+        assertSame(Months.MAX_VALUE, Months.months(Integer.MAX_VALUE));\n+        assertSame(Months.MIN_VALUE, Months.months(Integer.MIN_VALUE));\n+        assertEquals(-1, Months.months(-1).getMonths());\n+        assertEquals(13, Months.months(13).getMonths());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_monthsBetween_RInstant() {\n+        DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);\n+        DateTime end1 = new DateTime(2006, 9, 9, 12, 0, 0, 0, PARIS);\n+        DateTime end2 = new DateTime(2006, 12, 9, 12, 0, 0, 0, PARIS);\n+        \n+        assertEquals(3, Months.monthsBetween(start, end1).getMonths());\n+        assertEquals(0, Months.monthsBetween(start, start).getMonths());\n+        assertEquals(0, Months.monthsBetween(end1, end1).getMonths());\n+        assertEquals(-3, Months.monthsBetween(end1, start).getMonths());\n+        assertEquals(6, Months.monthsBetween(start, end2).getMonths());\n+    }\n+\n+    public void testFactory_monthsBetween_RPartial() {\n+        LocalDate start = new LocalDate(2006, 6, 9);\n+        LocalDate end1 = new LocalDate(2006, 9, 9);\n+        YearMonthDay end2 = new YearMonthDay(2006, 12, 9);\n+        \n+        assertEquals(3, Months.monthsBetween(start, end1).getMonths());\n+        assertEquals(0, Months.monthsBetween(start, start).getMonths());\n+        assertEquals(0, Months.monthsBetween(end1, end1).getMonths());\n+        assertEquals(-3, Months.monthsBetween(end1, start).getMonths());\n+        assertEquals(6, Months.monthsBetween(start, end2).getMonths());\n+    }\n+\n+    public void testFactory_monthsIn_RInterval() {\n+        DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);\n+        DateTime end1 = new DateTime(2006, 9, 9, 12, 0, 0, 0, PARIS);\n+        DateTime end2 = new DateTime(2006, 12, 9, 12, 0, 0, 0, PARIS);\n+        \n+        assertEquals(0, Months.monthsIn((ReadableInterval) null).getMonths());\n+        assertEquals(3, Months.monthsIn(new Interval(start, end1)).getMonths());\n+        assertEquals(0, Months.monthsIn(new Interval(start, start)).getMonths());\n+        assertEquals(0, Months.monthsIn(new Interval(end1, end1)).getMonths());\n+        assertEquals(6, Months.monthsIn(new Interval(start, end2)).getMonths());\n+    }\n+\n+    public void testFactory_parseMonths_String() {\n+        assertEquals(0, Months.parseMonths((String) null).getMonths());\n+        assertEquals(0, Months.parseMonths(\"P0M\").getMonths());\n+        assertEquals(1, Months.parseMonths(\"P1M\").getMonths());\n+        assertEquals(-3, Months.parseMonths(\"P-3M\").getMonths());\n+        assertEquals(2, Months.parseMonths(\"P0Y2M\").getMonths());\n+        assertEquals(2, Months.parseMonths(\"P2MT0H0M\").getMonths());\n+        try {\n+            Months.parseMonths(\"P1Y1D\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expeceted\n+        }\n+        try {\n+            Months.parseMonths(\"P1MT1H\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expeceted\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetMethods() {\n+        Months test = Months.months(20);\n+        assertEquals(20, test.getMonths());\n+    }\n+\n+    public void testGetFieldType() {\n+        Months test = Months.months(20);\n+        assertEquals(DurationFieldType.months(), test.getFieldType());\n+    }\n+\n+    public void testGetPeriodType() {\n+        Months test = Months.months(20);\n+        assertEquals(PeriodType.months(), test.getPeriodType());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsGreaterThan() {\n+        assertEquals(true, Months.THREE.isGreaterThan(Months.TWO));\n+        assertEquals(false, Months.THREE.isGreaterThan(Months.THREE));\n+        assertEquals(false, Months.TWO.isGreaterThan(Months.THREE));\n+        assertEquals(true, Months.ONE.isGreaterThan(null));\n+        assertEquals(false, Months.months(-1).isGreaterThan(null));\n+    }\n+\n+    public void testIsLessThan() {\n+        assertEquals(false, Months.THREE.isLessThan(Months.TWO));\n+        assertEquals(false, Months.THREE.isLessThan(Months.THREE));\n+        assertEquals(true, Months.TWO.isLessThan(Months.THREE));\n+        assertEquals(false, Months.ONE.isLessThan(null));\n+        assertEquals(true, Months.months(-1).isLessThan(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        Months test = Months.months(20);\n+        assertEquals(\"P20M\", test.toString());\n+        \n+        test = Months.months(-20);\n+        assertEquals(\"P-20M\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        Months test = Months.THREE;\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        Months result = (Months) ois.readObject();\n+        ois.close();\n+        \n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPlus_int() {\n+        Months test2 = Months.months(2);\n+        Months result = test2.plus(3);\n+        assertEquals(2, test2.getMonths());\n+        assertEquals(5, result.getMonths());\n+        \n+        assertEquals(1, Months.ONE.plus(0).getMonths());\n+        \n+        try {\n+            Months.MAX_VALUE.plus(1);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testPlus_Months() {\n+        Months test2 = Months.months(2);\n+        Months test3 = Months.months(3);\n+        Months result = test2.plus(test3);\n+        assertEquals(2, test2.getMonths());\n+        assertEquals(3, test3.getMonths());\n+        assertEquals(5, result.getMonths());\n+        \n+        assertEquals(1, Months.ONE.plus(Months.ZERO).getMonths());\n+        assertEquals(1, Months.ONE.plus((Months) null).getMonths());\n+        \n+        try {\n+            Months.MAX_VALUE.plus(Months.ONE);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testMinus_int() {\n+        Months test2 = Months.months(2);\n+        Months result = test2.minus(3);\n+        assertEquals(2, test2.getMonths());\n+        assertEquals(-1, result.getMonths());\n+        \n+        assertEquals(1, Months.ONE.minus(0).getMonths());\n+        \n+        try {\n+            Months.MIN_VALUE.minus(1);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testMinus_Months() {\n+        Months test2 = Months.months(2);\n+        Months test3 = Months.months(3);\n+        Months result = test2.minus(test3);\n+        assertEquals(2, test2.getMonths());\n+        assertEquals(3, test3.getMonths());\n+        assertEquals(-1, result.getMonths());\n+        \n+        assertEquals(1, Months.ONE.minus(Months.ZERO).getMonths());\n+        assertEquals(1, Months.ONE.minus((Months) null).getMonths());\n+        \n+        try {\n+            Months.MIN_VALUE.minus(Months.ONE);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testMultipliedBy_int() {\n+        Months test = Months.months(2);\n+        assertEquals(6, test.multipliedBy(3).getMonths());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(-6, test.multipliedBy(-3).getMonths());\n+        assertSame(test, test.multipliedBy(1));\n+        \n+        Months halfMax = Months.months(Integer.MAX_VALUE / 2 + 1);\n+        try {\n+            halfMax.multipliedBy(2);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testDividedBy_int() {\n+        Months test = Months.months(12);\n+        assertEquals(6, test.dividedBy(2).getMonths());\n+        assertEquals(12, test.getMonths());\n+        assertEquals(4, test.dividedBy(3).getMonths());\n+        assertEquals(3, test.dividedBy(4).getMonths());\n+        assertEquals(2, test.dividedBy(5).getMonths());\n+        assertEquals(2, test.dividedBy(6).getMonths());\n+        assertSame(test, test.dividedBy(1));\n+        \n+        try {\n+            Months.ONE.dividedBy(0);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testNegated() {\n+        Months test = Months.months(12);\n+        assertEquals(-12, test.negated().getMonths());\n+        assertEquals(12, test.getMonths());\n+        \n+        try {\n+            Months.MIN_VALUE.negated();\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddToLocalDate() {\n+        Months test = Months.months(3);\n+        LocalDate date = new LocalDate(2006, 6, 1);\n+        LocalDate expected = new LocalDate(2006, 9, 1);\n+        assertEquals(expected, date.plus(test));\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestMutableDateTime_Adds.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * This class is a JUnit test for MutableDateTime.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestMutableDateTime_Adds extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestMutableDateTime_Adds.class);\n+    }\n+\n+    public TestMutableDateTime_Adds(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAdd_long1() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.add(123456L);\n+        assertEquals(TEST_TIME1 + 123456L, test.getMillis());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAdd_RD1() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.add(new Duration(123456L));\n+        assertEquals(TEST_TIME1 + 123456L, test.getMillis());\n+    }\n+\n+    public void testAdd_RD2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.add((ReadableDuration) null);\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAdd_RD_int1() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.add(new Duration(123456L), -2);\n+        assertEquals(TEST_TIME1 - (2L * 123456L), test.getMillis());\n+    }\n+\n+    public void testAdd_RD_int2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.add((ReadableDuration) null, 1);\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAdd_RP1() {\n+        Period d = new Period(1, 1, 0, 1, 1, 1, 1, 1);\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        assertEquals(\"2002-06-09T05:06:07.008+01:00\", test.toString());\n+        test.add(d);\n+        assertEquals(\"2003-07-10T06:07:08.009+01:00\", test.toString());\n+    }\n+\n+    public void testAdd_RP2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.add((ReadablePeriod) null);\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAdd_RP_int1() {\n+        Period d = new Period(0, 0, 0, 0, 0, 0, 1, 2);\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.add(d, -2);\n+        assertEquals(TEST_TIME1 - (2L * 1002L), test.getMillis());\n+    }\n+\n+    public void testAdd_RP_int2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.add((ReadablePeriod) null, 1);\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAdd_DurationFieldType_int1() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.add(DurationFieldType.years(), 8);\n+        assertEquals(2010, test.getYear());\n+    }\n+\n+    public void testAdd_DurationFieldType_int2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        try {\n+            test.add((DurationFieldType) null, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    public void testAdd_DurationFieldType_int3() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        try {\n+            test.add((DurationFieldType) null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddYears_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.addYears(8);\n+        assertEquals(\"2010-06-09T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddMonths_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.addMonths(6);\n+        assertEquals(\"2002-12-09T05:06:07.008Z\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddDays_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.addDays(17);\n+        assertEquals(\"2002-06-26T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddWeekyears_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.addWeekyears(-1);\n+        assertEquals(\"2001-06-10T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddWeeks_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.addWeeks(-21);\n+        assertEquals(\"2002-01-13T05:06:07.008Z\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddHours_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.addHours(13);\n+        assertEquals(\"2002-06-09T18:06:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddMinutes_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.addMinutes(13);\n+        assertEquals(\"2002-06-09T05:19:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddSeconds_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.addSeconds(13);\n+        assertEquals(\"2002-06-09T05:06:20.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddMillis_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.addMillis(13);\n+        assertEquals(\"2002-06-09T05:06:07.021+01:00\", test.toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestMutableDateTime_Basics.java\n+/*\n+ *  Copyright 2001-2009 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.base.AbstractInstant;\n+import org.joda.time.chrono.BaseChronology;\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.field.UnsupportedDateTimeField;\n+import org.joda.time.field.UnsupportedDurationField;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n+\n+/**\n+ * This class is a JUnit test for MutableDateTime.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestMutableDateTime_Basics extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestMutableDateTime_Basics.class);\n+    }\n+\n+    public TestMutableDateTime_Basics(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGet_DateTimeField() {\n+        MutableDateTime test = new MutableDateTime();\n+        assertEquals(1, test.get(ISOChronology.getInstance().era()));\n+        assertEquals(20, test.get(ISOChronology.getInstance().centuryOfEra()));\n+        assertEquals(2, test.get(ISOChronology.getInstance().yearOfCentury()));\n+        assertEquals(2002, test.get(ISOChronology.getInstance().yearOfEra()));\n+        assertEquals(2002, test.get(ISOChronology.getInstance().year()));\n+        assertEquals(6, test.get(ISOChronology.getInstance().monthOfYear()));\n+        assertEquals(9, test.get(ISOChronology.getInstance().dayOfMonth()));\n+        assertEquals(2002, test.get(ISOChronology.getInstance().weekyear()));\n+        assertEquals(23, test.get(ISOChronology.getInstance().weekOfWeekyear()));\n+        assertEquals(7, test.get(ISOChronology.getInstance().dayOfWeek()));\n+        assertEquals(160, test.get(ISOChronology.getInstance().dayOfYear()));\n+        assertEquals(0, test.get(ISOChronology.getInstance().halfdayOfDay()));\n+        assertEquals(1, test.get(ISOChronology.getInstance().hourOfHalfday()));\n+        assertEquals(1, test.get(ISOChronology.getInstance().clockhourOfDay()));\n+        assertEquals(1, test.get(ISOChronology.getInstance().clockhourOfHalfday()));\n+        assertEquals(1, test.get(ISOChronology.getInstance().hourOfDay()));\n+        assertEquals(0, test.get(ISOChronology.getInstance().minuteOfHour()));\n+        assertEquals(60, test.get(ISOChronology.getInstance().minuteOfDay()));\n+        assertEquals(0, test.get(ISOChronology.getInstance().secondOfMinute()));\n+        assertEquals(60 * 60, test.get(ISOChronology.getInstance().secondOfDay()));\n+        assertEquals(0, test.get(ISOChronology.getInstance().millisOfSecond()));\n+        assertEquals(60 * 60 * 1000, test.get(ISOChronology.getInstance().millisOfDay()));\n+        try {\n+            test.get((DateTimeField) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testGet_DateTimeFieldType() {\n+        MutableDateTime test = new MutableDateTime();\n+        assertEquals(1, test.get(DateTimeFieldType.era()));\n+        assertEquals(20, test.get(DateTimeFieldType.centuryOfEra()));\n+        assertEquals(2, test.get(DateTimeFieldType.yearOfCentury()));\n+        assertEquals(2002, test.get(DateTimeFieldType.yearOfEra()));\n+        assertEquals(2002, test.get(DateTimeFieldType.year()));\n+        assertEquals(6, test.get(DateTimeFieldType.monthOfYear()));\n+        assertEquals(9, test.get(DateTimeFieldType.dayOfMonth()));\n+        assertEquals(2002, test.get(DateTimeFieldType.weekyear()));\n+        assertEquals(23, test.get(DateTimeFieldType.weekOfWeekyear()));\n+        assertEquals(7, test.get(DateTimeFieldType.dayOfWeek()));\n+        assertEquals(160, test.get(DateTimeFieldType.dayOfYear()));\n+        assertEquals(0, test.get(DateTimeFieldType.halfdayOfDay()));\n+        assertEquals(1, test.get(DateTimeFieldType.hourOfHalfday()));\n+        assertEquals(1, test.get(DateTimeFieldType.clockhourOfDay()));\n+        assertEquals(1, test.get(DateTimeFieldType.clockhourOfHalfday()));\n+        assertEquals(1, test.get(DateTimeFieldType.hourOfDay()));\n+        assertEquals(0, test.get(DateTimeFieldType.minuteOfHour()));\n+        assertEquals(60, test.get(DateTimeFieldType.minuteOfDay()));\n+        assertEquals(0, test.get(DateTimeFieldType.secondOfMinute()));\n+        assertEquals(60 * 60, test.get(DateTimeFieldType.secondOfDay()));\n+        assertEquals(0, test.get(DateTimeFieldType.millisOfSecond()));\n+        assertEquals(60 * 60 * 1000, test.get(DateTimeFieldType.millisOfDay()));\n+        try {\n+            test.get((DateTimeFieldType) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testGetMethods() {\n+        MutableDateTime test = new MutableDateTime();\n+        \n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(LONDON, test.getZone());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+        \n+        assertEquals(1, test.getEra());\n+        assertEquals(20, test.getCenturyOfEra());\n+        assertEquals(2, test.getYearOfCentury());\n+        assertEquals(2002, test.getYearOfEra());\n+        assertEquals(2002, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(2002, test.getWeekyear());\n+        assertEquals(23, test.getWeekOfWeekyear());\n+        assertEquals(7, test.getDayOfWeek());\n+        assertEquals(160, test.getDayOfYear());\n+        assertEquals(1, test.getHourOfDay());\n+        assertEquals(0, test.getMinuteOfHour());\n+        assertEquals(60, test.getMinuteOfDay());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(60 * 60, test.getSecondOfDay());\n+        assertEquals(0, test.getMillisOfSecond());\n+        assertEquals(60 * 60 * 1000, test.getMillisOfDay());\n+    }\n+\n+    public void testEqualsHashCode() {\n+        MutableDateTime test1 = new MutableDateTime(TEST_TIME1);\n+        MutableDateTime test2 = new MutableDateTime(TEST_TIME1);\n+        assertEquals(true, test1.equals(test2));\n+        assertEquals(true, test2.equals(test1));\n+        assertEquals(true, test1.equals(test1));\n+        assertEquals(true, test2.equals(test2));\n+        assertEquals(true, test1.hashCode() == test2.hashCode());\n+        assertEquals(true, test1.hashCode() == test1.hashCode());\n+        assertEquals(true, test2.hashCode() == test2.hashCode());\n+        \n+        MutableDateTime test3 = new MutableDateTime(TEST_TIME2);\n+        assertEquals(false, test1.equals(test3));\n+        assertEquals(false, test2.equals(test3));\n+        assertEquals(false, test3.equals(test1));\n+        assertEquals(false, test3.equals(test2));\n+        assertEquals(false, test1.hashCode() == test3.hashCode());\n+        assertEquals(false, test2.hashCode() == test3.hashCode());\n+        \n+        DateTime test4 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test4.equals(test3));\n+        assertEquals(true, test3.equals(test4));\n+        assertEquals(false, test4.equals(test1));\n+        assertEquals(false, test1.equals(test4));\n+        assertEquals(true, test3.hashCode() == test4.hashCode());\n+        assertEquals(false, test1.hashCode() == test4.hashCode());\n+        \n+        MutableDateTime test5 = new MutableDateTime(TEST_TIME2);\n+        test5.setRounding(ISOChronology.getInstance().millisOfSecond());\n+        assertEquals(true, test5.equals(test3));\n+        assertEquals(true, test5.equals(test4));\n+        assertEquals(true, test3.equals(test5));\n+        assertEquals(true, test4.equals(test5));\n+        assertEquals(true, test3.hashCode() == test5.hashCode());\n+        assertEquals(true, test4.hashCode() == test5.hashCode());\n+        \n+        assertEquals(false, test1.equals(\"Hello\"));\n+        assertEquals(true, test1.equals(new MockInstant()));\n+        assertEquals(false, test1.equals(new MutableDateTime(TEST_TIME1, GregorianChronology.getInstance())));\n+        assertEquals(true, new MutableDateTime(TEST_TIME1, new MockEqualsChronology()).equals(new MutableDateTime(TEST_TIME1, new MockEqualsChronology())));\n+        assertEquals(false, new MutableDateTime(TEST_TIME1, new MockEqualsChronology()).equals(new MutableDateTime(TEST_TIME1, ISOChronology.getInstance())));\n+    }\n+    \n+    class MockInstant extends AbstractInstant {\n+        public String toString() {\n+            return null;\n+        }\n+        public long getMillis() {\n+            return TEST_TIME1;\n+        }\n+        public Chronology getChronology() {\n+            return ISOChronology.getInstance();\n+        }\n+    }\n+\n+    class MockEqualsChronology extends BaseChronology {\n+        public boolean equals(Object obj) {\n+            return obj instanceof MockEqualsChronology;\n+        }\n+        public DateTimeZone getZone() {\n+            return null;\n+        }\n+        public Chronology withUTC() {\n+            return this;\n+        }\n+        public Chronology withZone(DateTimeZone zone) {\n+            return this;\n+        }\n+        public String toString() {\n+            return \"\";\n+        }\n+    }\n+\n+    public void testCompareTo() {\n+        MutableDateTime test1 = new MutableDateTime(TEST_TIME1);\n+        MutableDateTime test1a = new MutableDateTime(TEST_TIME1);\n+        assertEquals(0, test1.compareTo(test1a));\n+        assertEquals(0, test1a.compareTo(test1));\n+        assertEquals(0, test1.compareTo(test1));\n+        assertEquals(0, test1a.compareTo(test1a));\n+        \n+        MutableDateTime test2 = new MutableDateTime(TEST_TIME2);\n+        assertEquals(-1, test1.compareTo(test2));\n+        assertEquals(+1, test2.compareTo(test1));\n+        \n+        MutableDateTime test3 = new MutableDateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS));\n+        assertEquals(-1, test1.compareTo(test3));\n+        assertEquals(+1, test3.compareTo(test1));\n+        assertEquals(0, test3.compareTo(test2));\n+        \n+        assertEquals(+1, test2.compareTo(new MockInstant()));\n+        assertEquals(0, test1.compareTo(new MockInstant()));\n+        \n+        try {\n+            test1.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+//        try {\n+//            test1.compareTo(new Date());\n+//            fail();\n+//        } catch (ClassCastException ex) {}\n+    }\n+    \n+    public void testIsEqual() {\n+        MutableDateTime test1 = new MutableDateTime(TEST_TIME1);\n+        MutableDateTime test1a = new MutableDateTime(TEST_TIME1);\n+        assertEquals(true, test1.isEqual(test1a));\n+        assertEquals(true, test1a.isEqual(test1));\n+        assertEquals(true, test1.isEqual(test1));\n+        assertEquals(true, test1a.isEqual(test1a));\n+        \n+        MutableDateTime test2 = new MutableDateTime(TEST_TIME2);\n+        assertEquals(false, test1.isEqual(test2));\n+        assertEquals(false, test2.isEqual(test1));\n+        \n+        MutableDateTime test3 = new MutableDateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS));\n+        assertEquals(false, test1.isEqual(test3));\n+        assertEquals(false, test3.isEqual(test1));\n+        assertEquals(true, test3.isEqual(test2));\n+        \n+        assertEquals(false, test2.isEqual(new MockInstant()));\n+        assertEquals(true, test1.isEqual(new MockInstant()));\n+        \n+        assertEquals(false, new MutableDateTime(TEST_TIME_NOW + 1).isEqual(null));\n+        assertEquals(true, new MutableDateTime(TEST_TIME_NOW).isEqual(null));\n+        assertEquals(false, new MutableDateTime(TEST_TIME_NOW - 1).isEqual(null));\n+    }\n+    \n+    public void testIsBefore() {\n+        MutableDateTime test1 = new MutableDateTime(TEST_TIME1);\n+        MutableDateTime test1a = new MutableDateTime(TEST_TIME1);\n+        assertEquals(false, test1.isBefore(test1a));\n+        assertEquals(false, test1a.isBefore(test1));\n+        assertEquals(false, test1.isBefore(test1));\n+        assertEquals(false, test1a.isBefore(test1a));\n+        \n+        MutableDateTime test2 = new MutableDateTime(TEST_TIME2);\n+        assertEquals(true, test1.isBefore(test2));\n+        assertEquals(false, test2.isBefore(test1));\n+        \n+        MutableDateTime test3 = new MutableDateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS));\n+        assertEquals(true, test1.isBefore(test3));\n+        assertEquals(false, test3.isBefore(test1));\n+        assertEquals(false, test3.isBefore(test2));\n+        \n+        assertEquals(false, test2.isBefore(new MockInstant()));\n+        assertEquals(false, test1.isBefore(new MockInstant()));\n+        \n+        assertEquals(false, new MutableDateTime(TEST_TIME_NOW + 1).isBefore(null));\n+        assertEquals(false, new MutableDateTime(TEST_TIME_NOW).isBefore(null));\n+        assertEquals(true, new MutableDateTime(TEST_TIME_NOW - 1).isBefore(null));\n+    }\n+    \n+    public void testIsAfter() {\n+        MutableDateTime test1 = new MutableDateTime(TEST_TIME1);\n+        MutableDateTime test1a = new MutableDateTime(TEST_TIME1);\n+        assertEquals(false, test1.isAfter(test1a));\n+        assertEquals(false, test1a.isAfter(test1));\n+        assertEquals(false, test1.isAfter(test1));\n+        assertEquals(false, test1a.isAfter(test1a));\n+        \n+        MutableDateTime test2 = new MutableDateTime(TEST_TIME2);\n+        assertEquals(false, test1.isAfter(test2));\n+        assertEquals(true, test2.isAfter(test1));\n+        \n+        MutableDateTime test3 = new MutableDateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS));\n+        assertEquals(false, test1.isAfter(test3));\n+        assertEquals(true, test3.isAfter(test1));\n+        assertEquals(false, test3.isAfter(test2));\n+        \n+        assertEquals(true, test2.isAfter(new MockInstant()));\n+        assertEquals(false, test1.isAfter(new MockInstant()));\n+        \n+        assertEquals(true, new MutableDateTime(TEST_TIME_NOW + 1).isAfter(null));\n+        assertEquals(false, new MutableDateTime(TEST_TIME_NOW).isAfter(null));\n+        assertEquals(false, new MutableDateTime(TEST_TIME_NOW - 1).isAfter(null));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME_NOW);\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        MutableDateTime result = (MutableDateTime) ois.readObject();\n+        ois.close();\n+        \n+        assertEquals(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME_NOW);\n+        assertEquals(\"2002-06-09T01:00:00.000+01:00\", test.toString());\n+        \n+        test = new MutableDateTime(TEST_TIME_NOW, PARIS);\n+        assertEquals(\"2002-06-09T02:00:00.000+02:00\", test.toString());\n+    }\n+\n+    public void testToString_String() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME_NOW);\n+        assertEquals(\"2002 01\", test.toString(\"yyyy HH\"));\n+        assertEquals(\"2002-06-09T01:00:00.000+01:00\", test.toString((String) null));\n+    }\n+\n+    public void testToString_String_String() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME_NOW);\n+        assertEquals(\"Sun 9/6\", test.toString(\"EEE d/M\", Locale.ENGLISH));\n+        assertEquals(\"dim. 9/6\", test.toString(\"EEE d/M\", Locale.FRENCH));\n+        assertEquals(\"2002-06-09T01:00:00.000+01:00\", test.toString(null, Locale.ENGLISH));\n+        assertEquals(\"Sun 9/6\", test.toString(\"EEE d/M\", null));\n+        assertEquals(\"2002-06-09T01:00:00.000+01:00\", test.toString(null, null));\n+    }\n+\n+    public void testToString_DTFormatter() {\n+        DateMidnight test = new DateMidnight(TEST_TIME_NOW);\n+        assertEquals(\"2002 00\", test.toString(DateTimeFormat.forPattern(\"yyyy HH\")));\n+        assertEquals(\"2002-06-09T00:00:00.000+01:00\", test.toString((DateTimeFormatter) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToInstant() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        Instant result = test.toInstant();\n+        assertEquals(TEST_TIME1, result.getMillis());\n+    }\n+\n+    public void testToDateTime() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1, PARIS);\n+        DateTime result = test.toDateTime();\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());\n+    }\n+\n+    public void testToDateTimeISO() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1, PARIS);\n+        DateTime result = test.toDateTimeISO();\n+        assertSame(DateTime.class, result.getClass());\n+        assertSame(ISOChronology.class, result.getChronology().getClass());\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());\n+    }\n+\n+    public void testToDateTime_DateTimeZone() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        MutableDateTime result = test.toMutableDateTime(LONDON);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(test.getChronology(), result.getChronology());\n+        assertEquals(LONDON, result.getZone());\n+\n+        test = new MutableDateTime(TEST_TIME1);\n+        result = test.toMutableDateTime(PARIS);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(PARIS, result.getZone());\n+\n+        test = new MutableDateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS));\n+        result = test.toMutableDateTime((DateTimeZone) null);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(GregorianChronology.getInstance(LONDON), result.getChronology());\n+\n+        test = new MutableDateTime(TEST_TIME1, PARIS);\n+        result = test.toMutableDateTime((DateTimeZone) null);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(LONDON, result.getZone());\n+\n+        test = new MutableDateTime(TEST_TIME1);\n+        result = test.toMutableDateTime((DateTimeZone) null);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(LONDON, result.getZone());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+    }\n+\n+    public void testToDateTime_Chronology() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        MutableDateTime result = test.toMutableDateTime(ISOChronology.getInstance());\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+\n+        test = new MutableDateTime(TEST_TIME1);\n+        result = test.toMutableDateTime(GregorianChronology.getInstance(PARIS));\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(GregorianChronology.getInstance(PARIS), result.getChronology());\n+\n+        test = new MutableDateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS));\n+        result = test.toMutableDateTime((Chronology) null);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+\n+        test = new MutableDateTime(TEST_TIME1);\n+        result = test.toMutableDateTime((Chronology) null);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+    }\n+\n+    public void testToMutableDateTime() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1, PARIS);\n+        MutableDateTime result = test.toMutableDateTime();\n+        assertTrue(test != result);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());\n+    }\n+\n+    public void testToMutableDateTimeISO() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1, PARIS);\n+        MutableDateTime result = test.toMutableDateTimeISO();\n+        assertSame(MutableDateTime.class, result.getClass());\n+        assertSame(ISOChronology.class, result.getChronology().getClass());\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());\n+        assertNotSame(test, result);\n+    }\n+\n+    public void testToMutableDateTime_DateTimeZone() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        MutableDateTime result = test.toMutableDateTime(LONDON);\n+        assertTrue(test != result);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(LONDON), result.getChronology());\n+\n+        test = new MutableDateTime(TEST_TIME1);\n+        result = test.toMutableDateTime(PARIS);\n+        assertTrue(test != result);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());\n+\n+        test = new MutableDateTime(TEST_TIME1, PARIS);\n+        result = test.toMutableDateTime((DateTimeZone) null);\n+        assertTrue(test != result);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+\n+        test = new MutableDateTime(TEST_TIME1);\n+        result = test.toMutableDateTime((DateTimeZone) null);\n+        assertTrue(test != result);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+    }\n+\n+    public void testToMutableDateTime_Chronology() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        MutableDateTime result = test.toMutableDateTime(ISOChronology.getInstance());\n+        assertTrue(test != result);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+\n+        test = new MutableDateTime(TEST_TIME1);\n+        result = test.toMutableDateTime(GregorianChronology.getInstance(PARIS));\n+        assertTrue(test != result);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(GregorianChronology.getInstance(PARIS), result.getChronology());\n+\n+        test = new MutableDateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS));\n+        result = test.toMutableDateTime((Chronology) null);\n+        assertTrue(test != result);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+\n+        test = new MutableDateTime(TEST_TIME1);\n+        result = test.toMutableDateTime((Chronology) null);\n+        assertTrue(test != result);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+    }\n+\n+    public void testToDate() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        Date result = test.toDate();\n+        assertEquals(test.getMillis(), result.getTime());\n+    }\n+\n+    public void testToCalendar_Locale() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        Calendar result = test.toCalendar(null);\n+        assertEquals(test.getMillis(), result.getTime().getTime());\n+        assertEquals(TimeZone.getTimeZone(\"Europe/London\"), result.getTimeZone());\n+\n+        test = new MutableDateTime(TEST_TIME1, PARIS);\n+        result = test.toCalendar(null);\n+        assertEquals(test.getMillis(), result.getTime().getTime());\n+        assertEquals(TimeZone.getTimeZone(\"Europe/Paris\"), result.getTimeZone());\n+\n+        test = new MutableDateTime(TEST_TIME1, PARIS);\n+        result = test.toCalendar(Locale.UK);\n+        assertEquals(test.getMillis(), result.getTime().getTime());\n+        assertEquals(TimeZone.getTimeZone(\"Europe/Paris\"), result.getTimeZone());\n+    }\n+\n+    public void testToGregorianCalendar() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        GregorianCalendar result = test.toGregorianCalendar();\n+        assertEquals(test.getMillis(), result.getTime().getTime());\n+        assertEquals(TimeZone.getTimeZone(\"Europe/London\"), result.getTimeZone());\n+\n+        test = new MutableDateTime(TEST_TIME1, PARIS);\n+        result = test.toGregorianCalendar();\n+        assertEquals(test.getMillis(), result.getTime().getTime());\n+        assertEquals(TimeZone.getTimeZone(\"Europe/Paris\"), result.getTimeZone());\n+    }\n+\n+    public void testClone() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        MutableDateTime result = (MutableDateTime) test.clone();\n+        assertEquals(true, test.equals(result));\n+        assertEquals(true, test != result);\n+    }\n+\n+    public void testCopy() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        MutableDateTime result = test.copy();\n+        assertEquals(true, test.equals(result));\n+        assertEquals(true, test != result);\n+    }\n+\n+    public void testRounding1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setRounding(ISOChronology.getInstance().hourOfDay());\n+        assertEquals(\"2002-06-09T05:00:00.000+01:00\", test.toString());\n+        assertEquals(MutableDateTime.ROUND_FLOOR, test.getRoundingMode());\n+        assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField());\n+    }\n+\n+    public void testRounding2() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_CEILING);\n+        assertEquals(\"2002-06-09T06:00:00.000+01:00\", test.toString());\n+        assertEquals(MutableDateTime.ROUND_CEILING, test.getRoundingMode());\n+        assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField());\n+    }\n+\n+    public void testRounding3() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_HALF_CEILING);\n+        assertEquals(\"2002-06-09T05:00:00.000+01:00\", test.toString());\n+        assertEquals(MutableDateTime.ROUND_HALF_CEILING, test.getRoundingMode());\n+        assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField());\n+        \n+        test = new MutableDateTime(2002, 6, 9, 5, 30, 0, 0);\n+        test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_HALF_CEILING);\n+        assertEquals(\"2002-06-09T06:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testRounding4() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_HALF_FLOOR);\n+        assertEquals(\"2002-06-09T05:00:00.000+01:00\", test.toString());\n+        assertEquals(MutableDateTime.ROUND_HALF_FLOOR, test.getRoundingMode());\n+        assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField());\n+        \n+        test = new MutableDateTime(2002, 6, 9, 5, 30, 0, 0);\n+        test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_HALF_FLOOR);\n+        assertEquals(\"2002-06-09T05:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testRounding5() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_HALF_EVEN);\n+        assertEquals(\"2002-06-09T05:00:00.000+01:00\", test.toString());\n+        assertEquals(MutableDateTime.ROUND_HALF_EVEN, test.getRoundingMode());\n+        assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField());\n+        \n+        test = new MutableDateTime(2002, 6, 9, 5, 30, 0, 0);\n+        test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_HALF_EVEN);\n+        assertEquals(\"2002-06-09T06:00:00.000+01:00\", test.toString());\n+        \n+        test = new MutableDateTime(2002, 6, 9, 4, 30, 0, 0);\n+        test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_HALF_EVEN);\n+        assertEquals(\"2002-06-09T04:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testRounding6() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_NONE);\n+        assertEquals(\"2002-06-09T05:06:07.008+01:00\", test.toString());\n+        assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode());\n+        assertEquals(null, test.getRoundingField());\n+    }\n+\n+    public void testRounding7() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        try {\n+            test.setRounding(ISOChronology.getInstance().hourOfDay(), -1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testRounding8() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode());\n+        assertEquals(null, test.getRoundingField());\n+        \n+        test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_CEILING);\n+        assertEquals(MutableDateTime.ROUND_CEILING, test.getRoundingMode());\n+        assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField());\n+        \n+        test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_NONE);\n+        assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode());\n+        assertEquals(null, test.getRoundingField());\n+        \n+        test.setRounding(null, -1);\n+        assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode());\n+        assertEquals(null, test.getRoundingField());\n+        \n+        test.setRounding(ISOChronology.getInstance().hourOfDay());\n+        assertEquals(MutableDateTime.ROUND_FLOOR, test.getRoundingMode());\n+        assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField());\n+        \n+        test.setRounding(null);\n+        assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode());\n+        assertEquals(null, test.getRoundingField());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testProperty() {\n+        MutableDateTime test = new MutableDateTime();\n+        assertEquals(test.year(), test.property(DateTimeFieldType.year()));\n+        assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek()));\n+        assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute()));\n+        assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond()));\n+        DateTimeFieldType bad = new DateTimeFieldType(\"bad\") {\n+            public DurationFieldType getDurationType() {\n+                return DurationFieldType.weeks();\n+            }\n+            public DurationFieldType getRangeDurationType() {\n+                return null;\n+            }\n+            public DateTimeField getField(Chronology chronology) {\n+                return UnsupportedDateTimeField.getInstance(this, UnsupportedDurationField.getInstance(getDurationType()));\n+            }\n+        };\n+        try {\n+            test.property(bad);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.property(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestMutableDateTime_Constructors.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Date;\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.convert.ConverterManager;\n+import org.joda.time.convert.MockZeroNullIntegerConverter;\n+\n+/**\n+ * This class is a Junit unit test for MutableDateTime.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestMutableDateTime_Constructors extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private DateTimeZone zone = null;\n+    private Locale locale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestMutableDateTime_Constructors.class);\n+    }\n+\n+    public TestMutableDateTime_Constructors(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        locale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        java.util.TimeZone.setDefault(LONDON.toTimeZone());\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        java.util.TimeZone.setDefault(zone.toTimeZone());\n+        Locale.setDefault(locale);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor ()\n+     */\n+    public void testConstructor() throws Throwable {\n+        MutableDateTime test = new MutableDateTime();\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (DateTimeZone)\n+     */\n+    public void testConstructor_DateTimeZone() throws Throwable {\n+        MutableDateTime test = new MutableDateTime(PARIS);\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (DateTimeZone=null)\n+     */\n+    public void testConstructor_nullDateTimeZone() throws Throwable {\n+        MutableDateTime test = new MutableDateTime((DateTimeZone) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Chronology)\n+     */\n+    public void testConstructor_Chronology() throws Throwable {\n+        MutableDateTime test = new MutableDateTime(GregorianChronology.getInstance());\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Chronology=null)\n+     */\n+    public void testConstructor_nullChronology() throws Throwable {\n+        MutableDateTime test = new MutableDateTime((Chronology) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (long)\n+     */\n+    public void testConstructor_long1() throws Throwable {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (long)\n+     */\n+    public void testConstructor_long2() throws Throwable {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME2);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME2, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (long, DateTimeZone)\n+     */\n+    public void testConstructor_long1_DateTimeZone() throws Throwable {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1, PARIS);\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (long, DateTimeZone)\n+     */\n+    public void testConstructor_long2_DateTimeZone() throws Throwable {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME2, PARIS);\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+        assertEquals(TEST_TIME2, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (long, DateTimeZone=null)\n+     */\n+    public void testConstructor_long_nullDateTimeZone() throws Throwable {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1, (DateTimeZone) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (long, Chronology)\n+     */\n+    public void testConstructor_long1_Chronology() throws Throwable {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1, GregorianChronology.getInstance());\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (long, Chronology)\n+     */\n+    public void testConstructor_long2_Chronology() throws Throwable {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME2, GregorianChronology.getInstance());\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME2, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (long, Chronology=null)\n+     */\n+    public void testConstructor_long_nullChronology() throws Throwable {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1, (Chronology) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (Object)\n+     */\n+    public void testConstructor_Object() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        MutableDateTime test = new MutableDateTime(date);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object)\n+     */\n+    public void testConstructor_invalidObject() throws Throwable {\n+        try {\n+            new MutableDateTime(new Object());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (Object=null)\n+     */\n+    public void testConstructor_nullObject() throws Throwable {\n+        MutableDateTime test = new MutableDateTime((Object) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object=null)\n+     */\n+    public void testConstructor_badconverterObject() throws Throwable {\n+        try {\n+            ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n+            MutableDateTime test = new MutableDateTime(new Integer(0));\n+            assertEquals(ISOChronology.getInstance(), test.getChronology());\n+            assertEquals(0L, test.getMillis());\n+        } finally {\n+            ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n+        }\n+    }\n+\n+    /**\n+     * Test constructor (Object, DateTimeZone)\n+     */\n+    public void testConstructor_Object_DateTimeZone() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        MutableDateTime test = new MutableDateTime(date, PARIS);\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object, DateTimeZone)\n+     */\n+    public void testConstructor_invalidObject_DateTimeZone() throws Throwable {\n+        try {\n+            new MutableDateTime(new Object(), PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (Object=null, DateTimeZone)\n+     */\n+    public void testConstructor_nullObject_DateTimeZone() throws Throwable {\n+        MutableDateTime test = new MutableDateTime((Object) null, PARIS);\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object, DateTimeZone=null)\n+     */\n+    public void testConstructor_Object_nullDateTimeZone() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        MutableDateTime test = new MutableDateTime(date, (DateTimeZone) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object=null, DateTimeZone=null)\n+     */\n+    public void testConstructor_nullObject_nullDateTimeZone() throws Throwable {\n+        MutableDateTime test = new MutableDateTime((Object) null, (DateTimeZone) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object, DateTimeZone)\n+     */\n+    public void testConstructor_badconverterObject_DateTimeZone() throws Throwable {\n+        try {\n+            ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n+            MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n+            assertEquals(ISOChronology.getInstance(), test.getChronology());\n+            assertEquals(0L, test.getMillis());\n+        } finally {\n+            ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n+        }\n+    }\n+\n+    /**\n+     * Test constructor (Object, Chronology)\n+     */\n+    public void testConstructor_Object_Chronology() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        MutableDateTime test = new MutableDateTime(date, GregorianChronology.getInstance());\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object, Chronology)\n+     */\n+    public void testConstructor_invalidObject_Chronology() throws Throwable {\n+        try {\n+            new MutableDateTime(new Object(), GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (Object=null, Chronology)\n+     */\n+    public void testConstructor_nullObject_Chronology() throws Throwable {\n+        MutableDateTime test = new MutableDateTime((Object) null, GregorianChronology.getInstance());\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object, Chronology=null)\n+     */\n+    public void testConstructor_Object_nullChronology() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        MutableDateTime test = new MutableDateTime(date, (Chronology) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object=null, Chronology=null)\n+     */\n+    public void testConstructor_nullObject_nullChronology() throws Throwable {\n+        MutableDateTime test = new MutableDateTime((Object) null, (Chronology) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object, Chronology)\n+     */\n+    public void testConstructor_badconverterObject_Chronology() throws Throwable {\n+        try {\n+            ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n+            MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n+            assertEquals(ISOChronology.getInstance(), test.getChronology());\n+            assertEquals(0L, test.getMillis());\n+        } finally {\n+            ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (int, int, int)\n+     */\n+    public void testConstructor_int_int_int_int_int_int_int() throws Throwable {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 1, 0, 0, 0);  // +01:00\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(LONDON, test.getZone());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+        try {\n+            new MutableDateTime(Integer.MIN_VALUE, 6, 9, 0, 0, 0, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MutableDateTime(Integer.MAX_VALUE, 6, 9, 0, 0, 0, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MutableDateTime(2002, 0, 9, 0, 0, 0, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MutableDateTime(2002, 13, 9, 0, 0, 0, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MutableDateTime(2002, 6, 0, 0, 0, 0, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MutableDateTime(2002, 6, 31, 0, 0, 0, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        new MutableDateTime(2002, 7, 31, 0, 0, 0, 0);\n+        try {\n+            new MutableDateTime(2002, 7, 32, 0, 0, 0, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, DateTimeZone)\n+     */\n+    public void testConstructor_int_int_int_int_int_int_int_DateTimeZone() throws Throwable {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 2, 0, 0, 0, PARIS);  // +02:00\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+        try {\n+            new MutableDateTime(Integer.MIN_VALUE, 6, 9, 0, 0, 0, 0, PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MutableDateTime(Integer.MAX_VALUE, 6, 9, 0, 0, 0, 0, PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MutableDateTime(2002, 0, 9, 0, 0, 0, 0, PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MutableDateTime(2002, 13, 9, 0, 0, 0, 0, PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MutableDateTime(2002, 6, 0, 0, 0, 0, 0, PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MutableDateTime(2002, 6, 31, 0, 0, 0, 0, PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        new MutableDateTime(2002, 7, 31, 0, 0, 0, 0, PARIS);\n+        try {\n+            new MutableDateTime(2002, 7, 32, 0, 0, 0, 0, PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, DateTimeZone=null)\n+     */\n+    public void testConstructor_int_int_int_int_int_int_int_nullDateTimeZone() throws Throwable {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 1, 0, 0, 0, (DateTimeZone) null);  // +01:00\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, Chronology)\n+     */\n+    public void testConstructor_int_int_int_int_int_int_int_Chronology() throws Throwable {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 1, 0, 0, 0, GregorianChronology.getInstance());  // +01:00\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+        try {\n+            new MutableDateTime(Integer.MIN_VALUE, 6, 9, 0, 0, 0, 0, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MutableDateTime(Integer.MAX_VALUE, 6, 9, 0, 0, 0, 0, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MutableDateTime(2002, 0, 9, 0, 0, 0, 0, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MutableDateTime(2002, 13, 9, 0, 0, 0, 0, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MutableDateTime(2002, 6, 0, 0, 0, 0, 0, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MutableDateTime(2002, 6, 31, 0, 0, 0, 0, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        new MutableDateTime(2002, 7, 31, 0, 0, 0, 0, GregorianChronology.getInstance());\n+        try {\n+            new MutableDateTime(2002, 7, 32, 0, 0, 0, 0, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, Chronology=null)\n+     */\n+    public void testConstructor_int_int_int_int_int_int_int_nullChronology() throws Throwable {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 1, 0, 0, 0, (Chronology) null);  // +01:00\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestMutableDateTime_Properties.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * This class is a Junit unit test for DateTime.\n+ *\n+ * @author Stephen Colebourne\n+ * @author Mike Schrag\n+ */\n+public class TestMutableDateTime_Properties extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    //private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05 Fri\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06 Tue\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private DateTimeZone zone = null;\n+    private Locale locale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestMutableDateTime_Properties.class);\n+    }\n+\n+    public TestMutableDateTime_Properties(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        locale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        Locale.setDefault(locale);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetEra() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().era(), test.era().getField());\n+        assertEquals(\"era\", test.era().getName());\n+        assertEquals(\"Property[era]\", test.era().toString());\n+        assertSame(test, test.era().getMutableDateTime());\n+        assertEquals(1, test.era().get());\n+        assertEquals(\"AD\", test.era().getAsText());\n+        assertEquals(\"ap. J.-C.\", test.era().getAsText(Locale.FRENCH));\n+        assertEquals(\"AD\", test.era().getAsShortText());\n+        assertEquals(\"ap. J.-C.\", test.era().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().eras(), test.era().getDurationField());\n+        assertEquals(null, test.era().getRangeDurationField());\n+        assertEquals(2, test.era().getMaximumTextLength(null));\n+        assertEquals(9, test.era().getMaximumTextLength(Locale.FRENCH));\n+        assertEquals(2, test.era().getMaximumShortTextLength(null));\n+        assertEquals(9, test.era().getMaximumShortTextLength(Locale.FRENCH));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetYearOfEra() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().yearOfEra(), test.yearOfEra().getField());\n+        assertEquals(\"yearOfEra\", test.yearOfEra().getName());\n+        assertEquals(\"Property[yearOfEra]\", test.yearOfEra().toString());\n+        assertEquals(2004, test.yearOfEra().get());\n+        assertEquals(\"2004\", test.yearOfEra().getAsText());\n+        assertEquals(\"2004\", test.yearOfEra().getAsText(Locale.FRENCH));\n+        assertEquals(\"2004\", test.yearOfEra().getAsShortText());\n+        assertEquals(\"2004\", test.yearOfEra().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().years(), test.yearOfEra().getDurationField());\n+        assertEquals(null, test.yearOfEra().getRangeDurationField());\n+        assertEquals(9, test.yearOfEra().getMaximumTextLength(null));\n+        assertEquals(9, test.yearOfEra().getMaximumShortTextLength(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetCenturyOfEra() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().centuryOfEra(), test.centuryOfEra().getField());\n+        assertEquals(\"centuryOfEra\", test.centuryOfEra().getName());\n+        assertEquals(\"Property[centuryOfEra]\", test.centuryOfEra().toString());\n+        assertEquals(20, test.centuryOfEra().get());\n+        assertEquals(\"20\", test.centuryOfEra().getAsText());\n+        assertEquals(\"20\", test.centuryOfEra().getAsText(Locale.FRENCH));\n+        assertEquals(\"20\", test.centuryOfEra().getAsShortText());\n+        assertEquals(\"20\", test.centuryOfEra().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().centuries(), test.centuryOfEra().getDurationField());\n+        assertEquals(null, test.centuryOfEra().getRangeDurationField());\n+        assertEquals(7, test.centuryOfEra().getMaximumTextLength(null));\n+        assertEquals(7, test.centuryOfEra().getMaximumShortTextLength(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetYearOfCentury() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().yearOfCentury(), test.yearOfCentury().getField());\n+        assertEquals(\"yearOfCentury\", test.yearOfCentury().getName());\n+        assertEquals(\"Property[yearOfCentury]\", test.yearOfCentury().toString());\n+        assertEquals(4, test.yearOfCentury().get());\n+        assertEquals(\"4\", test.yearOfCentury().getAsText());\n+        assertEquals(\"4\", test.yearOfCentury().getAsText(Locale.FRENCH));\n+        assertEquals(\"4\", test.yearOfCentury().getAsShortText());\n+        assertEquals(\"4\", test.yearOfCentury().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().years(), test.yearOfCentury().getDurationField());\n+        assertEquals(test.getChronology().centuries(), test.yearOfCentury().getRangeDurationField());\n+        assertEquals(2, test.yearOfCentury().getMaximumTextLength(null));\n+        assertEquals(2, test.yearOfCentury().getMaximumShortTextLength(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetWeekyear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().weekyear(), test.weekyear().getField());\n+        assertEquals(\"weekyear\", test.weekyear().getName());\n+        assertEquals(\"Property[weekyear]\", test.weekyear().toString());\n+        assertEquals(2004, test.weekyear().get());\n+        assertEquals(\"2004\", test.weekyear().getAsText());\n+        assertEquals(\"2004\", test.weekyear().getAsText(Locale.FRENCH));\n+        assertEquals(\"2004\", test.weekyear().getAsShortText());\n+        assertEquals(\"2004\", test.weekyear().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().weekyears(), test.weekyear().getDurationField());\n+        assertEquals(null, test.weekyear().getRangeDurationField());\n+        assertEquals(9, test.weekyear().getMaximumTextLength(null));\n+        assertEquals(9, test.weekyear().getMaximumShortTextLength(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetYear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().year(), test.year().getField());\n+        assertEquals(\"year\", test.year().getName());\n+        assertEquals(\"Property[year]\", test.year().toString());\n+        assertEquals(2004, test.year().get());\n+        assertEquals(\"2004\", test.year().getAsText());\n+        assertEquals(\"2004\", test.year().getAsText(Locale.FRENCH));\n+        assertEquals(\"2004\", test.year().getAsShortText());\n+        assertEquals(\"2004\", test.year().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().years(), test.year().getDurationField());\n+        assertEquals(null, test.year().getRangeDurationField());\n+        assertEquals(9, test.year().getMaximumTextLength(null));\n+        assertEquals(9, test.year().getMaximumShortTextLength(null));\n+        assertEquals(-292275054, test.year().getMinimumValue());\n+        assertEquals(-292275054, test.year().getMinimumValueOverall());\n+        assertEquals(292278993, test.year().getMaximumValue());\n+        assertEquals(292278993, test.year().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyAddYear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.year().add(9);\n+        assertEquals(\"2013-06-09T00:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testPropertyAddWrapFieldYear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.year().addWrapField(9);\n+        assertEquals(\"2013-06-09T00:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testPropertySetYear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.year().set(1960);\n+        assertEquals(\"1960-06-09T00:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testPropertySetTextYear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.year().set(\"1960\");\n+        assertEquals(\"1960-06-09T00:00:00.000+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMonthOfYear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField());\n+        assertEquals(\"monthOfYear\", test.monthOfYear().getName());\n+        assertEquals(\"Property[monthOfYear]\", test.monthOfYear().toString());\n+        assertEquals(6, test.monthOfYear().get());\n+        assertEquals(\"June\", test.monthOfYear().getAsText());\n+        assertEquals(\"juin\", test.monthOfYear().getAsText(Locale.FRENCH));\n+        assertEquals(\"Jun\", test.monthOfYear().getAsShortText());\n+        assertEquals(\"juin\", test.monthOfYear().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField());\n+        assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField());\n+        assertEquals(9, test.monthOfYear().getMaximumTextLength(null));\n+        assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null));\n+        test = new MutableDateTime(2004, 7, 9, 0, 0, 0, 0);\n+        assertEquals(\"juillet\", test.monthOfYear().getAsText(Locale.FRENCH));\n+        assertEquals(\"juil.\", test.monthOfYear().getAsShortText(Locale.FRENCH));\n+        assertEquals(1, test.monthOfYear().getMinimumValue());\n+        assertEquals(1, test.monthOfYear().getMinimumValueOverall());\n+        assertEquals(12, test.monthOfYear().getMaximumValue());\n+        assertEquals(12, test.monthOfYear().getMaximumValueOverall());\n+        assertEquals(1, test.monthOfYear().getMinimumValue());\n+        assertEquals(1, test.monthOfYear().getMinimumValueOverall());\n+        assertEquals(12, test.monthOfYear().getMaximumValue());\n+        assertEquals(12, test.monthOfYear().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyAddMonthOfYear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.monthOfYear().add(6);\n+        assertEquals(\"2004-12-09T00:00:00.000Z\", test.toString());\n+    }\n+\n+    public void testPropertyAddWrapFieldMonthOfYear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.monthOfYear().addWrapField(8);\n+        assertEquals(\"2004-02-09T00:00:00.000Z\", test.toString());\n+    }\n+\n+    public void testPropertySetMonthOfYear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.monthOfYear().set(12);\n+        assertEquals(\"2004-12-09T00:00:00.000Z\", test.toString());\n+    }\n+\n+    public void testPropertySetTextMonthOfYear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.monthOfYear().set(\"12\");\n+        assertEquals(\"2004-12-09T00:00:00.000Z\", test.toString());\n+        \n+        test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.monthOfYear().set(\"December\");\n+        assertEquals(\"2004-12-09T00:00:00.000Z\", test.toString());\n+        \n+        test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.monthOfYear().set(\"Dec\");\n+        assertEquals(\"2004-12-09T00:00:00.000Z\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetDayOfMonth() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField());\n+        assertEquals(\"dayOfMonth\", test.dayOfMonth().getName());\n+        assertEquals(\"Property[dayOfMonth]\", test.dayOfMonth().toString());\n+        assertEquals(9, test.dayOfMonth().get());\n+        assertEquals(\"9\", test.dayOfMonth().getAsText());\n+        assertEquals(\"9\", test.dayOfMonth().getAsText(Locale.FRENCH));\n+        assertEquals(\"9\", test.dayOfMonth().getAsShortText());\n+        assertEquals(\"9\", test.dayOfMonth().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField());\n+        assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField());\n+        assertEquals(2, test.dayOfMonth().getMaximumTextLength(null));\n+        assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null));\n+        assertEquals(1, test.dayOfMonth().getMinimumValue());\n+        assertEquals(1, test.dayOfMonth().getMinimumValueOverall());\n+        assertEquals(30, test.dayOfMonth().getMaximumValue());\n+        assertEquals(31, test.dayOfMonth().getMaximumValueOverall());\n+        assertEquals(false, test.dayOfMonth().isLeap());\n+        assertEquals(0, test.dayOfMonth().getLeapAmount());\n+        assertEquals(null, test.dayOfMonth().getLeapDurationField());\n+    }\n+\n+    public void testPropertyAddDayOfMonth() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.dayOfMonth().add(9);\n+        assertEquals(\"2004-06-18T00:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testPropertyAddWrapFieldDayOfMonth() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.dayOfMonth().addWrapField(22);\n+        assertEquals(\"2004-06-01T00:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testPropertySetDayOfMonth() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.dayOfMonth().set(12);\n+        assertEquals(\"2004-06-12T00:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testPropertySetTextDayOfMonth() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.dayOfMonth().set(\"12\");\n+        assertEquals(\"2004-06-12T00:00:00.000+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetDayOfYear() {\n+        // 31+29+31+30+31+9 = 161\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().dayOfYear(), test.dayOfYear().getField());\n+        assertEquals(\"dayOfYear\", test.dayOfYear().getName());\n+        assertEquals(\"Property[dayOfYear]\", test.dayOfYear().toString());\n+        assertEquals(161, test.dayOfYear().get());\n+        assertEquals(\"161\", test.dayOfYear().getAsText());\n+        assertEquals(\"161\", test.dayOfYear().getAsText(Locale.FRENCH));\n+        assertEquals(\"161\", test.dayOfYear().getAsShortText());\n+        assertEquals(\"161\", test.dayOfYear().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().days(), test.dayOfYear().getDurationField());\n+        assertEquals(test.getChronology().years(), test.dayOfYear().getRangeDurationField());\n+        assertEquals(3, test.dayOfYear().getMaximumTextLength(null));\n+        assertEquals(3, test.dayOfYear().getMaximumShortTextLength(null));\n+        assertEquals(false, test.dayOfYear().isLeap());\n+        assertEquals(0, test.dayOfYear().getLeapAmount());\n+        assertEquals(null, test.dayOfYear().getLeapDurationField());\n+    }\n+\n+    public void testPropertyAddDayOfYear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.dayOfYear().add(9);\n+        assertEquals(\"2004-06-18T00:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testPropertyAddWrapFieldDayOfYear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.dayOfYear().addWrapField(206);\n+        assertEquals(\"2004-01-01T00:00:00.000Z\", test.toString());\n+    }\n+\n+    public void testPropertySetDayOfYear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.dayOfYear().set(12);\n+        assertEquals(\"2004-01-12T00:00:00.000Z\", test.toString());\n+    }\n+\n+    public void testPropertySetTextDayOfYear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.dayOfYear().set(\"12\");\n+        assertEquals(\"2004-01-12T00:00:00.000Z\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetWeekOfWeekyear() {\n+        // 2002-01-01 = Thu\n+        // 2002-12-31 = Thu (+364 days)\n+        // 2003-12-30 = Thu (+364 days)\n+        // 2004-01-03 = Mon             W1\n+        // 2004-01-31 = Mon (+28 days)  W5\n+        // 2004-02-28 = Mon (+28 days)  W9\n+        // 2004-03-27 = Mon (+28 days)  W13\n+        // 2004-04-24 = Mon (+28 days)  W17\n+        // 2004-05-23 = Mon (+28 days)  W21\n+        // 2004-06-05 = Mon (+14 days)  W23\n+        // 2004-06-09 = Fri\n+        // 2004-12-25 = Mon             W52\n+        // 2005-01-01 = Mon             W1\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().weekOfWeekyear(), test.weekOfWeekyear().getField());\n+        assertEquals(\"weekOfWeekyear\", test.weekOfWeekyear().getName());\n+        assertEquals(\"Property[weekOfWeekyear]\", test.weekOfWeekyear().toString());\n+        assertEquals(24, test.weekOfWeekyear().get());\n+        assertEquals(\"24\", test.weekOfWeekyear().getAsText());\n+        assertEquals(\"24\", test.weekOfWeekyear().getAsText(Locale.FRENCH));\n+        assertEquals(\"24\", test.weekOfWeekyear().getAsShortText());\n+        assertEquals(\"24\", test.weekOfWeekyear().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().weeks(), test.weekOfWeekyear().getDurationField());\n+        assertEquals(test.getChronology().weekyears(), test.weekOfWeekyear().getRangeDurationField());\n+        assertEquals(2, test.weekOfWeekyear().getMaximumTextLength(null));\n+        assertEquals(2, test.weekOfWeekyear().getMaximumShortTextLength(null));\n+        assertEquals(false, test.weekOfWeekyear().isLeap());\n+        assertEquals(0, test.weekOfWeekyear().getLeapAmount());\n+        assertEquals(null, test.weekOfWeekyear().getLeapDurationField());\n+    }\n+\n+    public void testPropertyAddWeekOfWeekyear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 7, 0, 0, 0, 0);\n+        test.weekOfWeekyear().add(1);\n+        assertEquals(\"2004-06-14T00:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testPropertyAddWrapFieldWeekOfWeekyear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 7, 0, 0, 0, 0);\n+        test.weekOfWeekyear().addWrapField(30);\n+        assertEquals(\"2003-12-29T00:00:00.000Z\", test.toString());\n+    }\n+\n+    public void testPropertySetWeekOfWeekyear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 7, 0, 0, 0, 0);\n+        test.weekOfWeekyear().set(4);\n+        assertEquals(\"2004-01-19T00:00:00.000Z\", test.toString());\n+    }\n+\n+    public void testPropertySetTextWeekOfWeekyear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 7, 0, 0, 0, 0);\n+        test.weekOfWeekyear().set(\"4\");\n+        assertEquals(\"2004-01-19T00:00:00.000Z\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetDayOfWeek() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().dayOfWeek(), test.dayOfWeek().getField());\n+        assertEquals(\"dayOfWeek\", test.dayOfWeek().getName());\n+        assertEquals(\"Property[dayOfWeek]\", test.dayOfWeek().toString());\n+        assertEquals(3, test.dayOfWeek().get());\n+        assertEquals(\"Wednesday\", test.dayOfWeek().getAsText());\n+        assertEquals(\"mercredi\", test.dayOfWeek().getAsText(Locale.FRENCH));\n+        assertEquals(\"Wed\", test.dayOfWeek().getAsShortText());\n+        assertEquals(\"mer.\", test.dayOfWeek().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().days(), test.dayOfWeek().getDurationField());\n+        assertEquals(test.getChronology().weeks(), test.dayOfWeek().getRangeDurationField());\n+        assertEquals(9, test.dayOfWeek().getMaximumTextLength(null));\n+        assertEquals(8, test.dayOfWeek().getMaximumTextLength(Locale.FRENCH));\n+        assertEquals(3, test.dayOfWeek().getMaximumShortTextLength(null));\n+        assertEquals(4, test.dayOfWeek().getMaximumShortTextLength(Locale.FRENCH));\n+        assertEquals(1, test.dayOfWeek().getMinimumValue());\n+        assertEquals(1, test.dayOfWeek().getMinimumValueOverall());\n+        assertEquals(7, test.dayOfWeek().getMaximumValue());\n+        assertEquals(7, test.dayOfWeek().getMaximumValueOverall());\n+        assertEquals(false, test.dayOfWeek().isLeap());\n+        assertEquals(0, test.dayOfWeek().getLeapAmount());\n+        assertEquals(null, test.dayOfWeek().getLeapDurationField());\n+    }\n+\n+    public void testPropertyAddDayOfWeek() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.dayOfWeek().add(1);\n+        assertEquals(\"2004-06-10T00:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testPropertyAddLongDayOfWeek() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.dayOfWeek().add(1L);\n+        assertEquals(\"2004-06-10T00:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testPropertyAddWrapFieldDayOfWeek() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);  // Wed\n+        test.dayOfWeek().addWrapField(5);\n+        assertEquals(\"2004-06-07T00:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testPropertySetDayOfWeek() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.dayOfWeek().set(4);\n+        assertEquals(\"2004-06-10T00:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testPropertySetTextDayOfWeek() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.dayOfWeek().set(\"4\");\n+        assertEquals(\"2004-06-10T00:00:00.000+01:00\", test.toString());\n+        \n+        test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.dayOfWeek().set(\"Mon\");\n+        assertEquals(\"2004-06-07T00:00:00.000+01:00\", test.toString());\n+        \n+        test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.dayOfWeek().set(\"Tuesday\");\n+        assertEquals(\"2004-06-08T00:00:00.000+01:00\", test.toString());\n+        \n+        test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.dayOfWeek().set(\"lundi\", Locale.FRENCH);\n+        assertEquals(\"2004-06-07T00:00:00.000+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetHourOfDay() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);\n+        assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField());\n+        assertEquals(\"hourOfDay\", test.hourOfDay().getName());\n+        assertEquals(\"Property[hourOfDay]\", test.hourOfDay().toString());\n+        assertEquals(13, test.hourOfDay().get());\n+        assertEquals(\"13\", test.hourOfDay().getAsText());\n+        assertEquals(\"13\", test.hourOfDay().getAsText(Locale.FRENCH));\n+        assertEquals(\"13\", test.hourOfDay().getAsShortText());\n+        assertEquals(\"13\", test.hourOfDay().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField());\n+        assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField());\n+        assertEquals(2, test.hourOfDay().getMaximumTextLength(null));\n+        assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyRoundFloorHourOfDay() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0);\n+        test.hourOfDay().roundFloor();\n+        assertEquals(\"2004-06-09T13:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testPropertyRoundCeilingHourOfDay() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0);\n+        test.hourOfDay().roundCeiling();\n+        assertEquals(\"2004-06-09T14:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testPropertyRoundHalfFloorHourOfDay() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0);\n+        test.hourOfDay().roundHalfFloor();\n+        assertEquals(\"2004-06-09T13:00:00.000+01:00\", test.toString());\n+        \n+        test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 1);\n+        test.hourOfDay().roundHalfFloor();\n+        assertEquals(\"2004-06-09T14:00:00.000+01:00\", test.toString());\n+        \n+        test = new MutableDateTime(2004, 6, 9, 13, 29, 59, 999);\n+        test.hourOfDay().roundHalfFloor();\n+        assertEquals(\"2004-06-09T13:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testPropertyRoundHalfCeilingHourOfDay() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0);\n+        test.hourOfDay().roundHalfCeiling();\n+        assertEquals(\"2004-06-09T14:00:00.000+01:00\", test.toString());\n+        \n+        test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 1);\n+        test.hourOfDay().roundHalfCeiling();\n+        assertEquals(\"2004-06-09T14:00:00.000+01:00\", test.toString());\n+        \n+        test = new MutableDateTime(2004, 6, 9, 13, 29, 59, 999);\n+        test.hourOfDay().roundHalfCeiling();\n+        assertEquals(\"2004-06-09T13:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testPropertyRoundHalfEvenHourOfDay() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0);\n+        test.hourOfDay().roundHalfEven();\n+        assertEquals(\"2004-06-09T14:00:00.000+01:00\", test.toString());\n+        \n+        test = new MutableDateTime(2004, 6, 9, 14, 30, 0, 0);\n+        test.hourOfDay().roundHalfEven();\n+        assertEquals(\"2004-06-09T14:00:00.000+01:00\", test.toString());\n+        \n+        test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 1);\n+        test.hourOfDay().roundHalfEven();\n+        assertEquals(\"2004-06-09T14:00:00.000+01:00\", test.toString());\n+        \n+        test = new MutableDateTime(2004, 6, 9, 13, 29, 59, 999);\n+        test.hourOfDay().roundHalfEven();\n+        assertEquals(\"2004-06-09T13:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testPropertyRemainderHourOfDay() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0);\n+        assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMinuteOfHour() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);\n+        assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField());\n+        assertEquals(\"minuteOfHour\", test.minuteOfHour().getName());\n+        assertEquals(\"Property[minuteOfHour]\", test.minuteOfHour().toString());\n+        assertEquals(23, test.minuteOfHour().get());\n+        assertEquals(\"23\", test.minuteOfHour().getAsText());\n+        assertEquals(\"23\", test.minuteOfHour().getAsText(Locale.FRENCH));\n+        assertEquals(\"23\", test.minuteOfHour().getAsShortText());\n+        assertEquals(\"23\", test.minuteOfHour().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField());\n+        assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField());\n+        assertEquals(2, test.minuteOfHour().getMaximumTextLength(null));\n+        assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMinuteOfDay() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);\n+        assertSame(test.getChronology().minuteOfDay(), test.minuteOfDay().getField());\n+        assertEquals(\"minuteOfDay\", test.minuteOfDay().getName());\n+        assertEquals(\"Property[minuteOfDay]\", test.minuteOfDay().toString());\n+        assertEquals(803, test.minuteOfDay().get());\n+        assertEquals(\"803\", test.minuteOfDay().getAsText());\n+        assertEquals(\"803\", test.minuteOfDay().getAsText(Locale.FRENCH));\n+        assertEquals(\"803\", test.minuteOfDay().getAsShortText());\n+        assertEquals(\"803\", test.minuteOfDay().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().minutes(), test.minuteOfDay().getDurationField());\n+        assertEquals(test.getChronology().days(), test.minuteOfDay().getRangeDurationField());\n+        assertEquals(4, test.minuteOfDay().getMaximumTextLength(null));\n+        assertEquals(4, test.minuteOfDay().getMaximumShortTextLength(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetSecondOfMinute() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);\n+        assertSame(test.getChronology().secondOfMinute(), test.secondOfMinute().getField());\n+        assertEquals(\"secondOfMinute\", test.secondOfMinute().getName());\n+        assertEquals(\"Property[secondOfMinute]\", test.secondOfMinute().toString());\n+        assertEquals(43, test.secondOfMinute().get());\n+        assertEquals(\"43\", test.secondOfMinute().getAsText());\n+        assertEquals(\"43\", test.secondOfMinute().getAsText(Locale.FRENCH));\n+        assertEquals(\"43\", test.secondOfMinute().getAsShortText());\n+        assertEquals(\"43\", test.secondOfMinute().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().seconds(), test.secondOfMinute().getDurationField());\n+        assertEquals(test.getChronology().minutes(), test.secondOfMinute().getRangeDurationField());\n+        assertEquals(2, test.secondOfMinute().getMaximumTextLength(null));\n+        assertEquals(2, test.secondOfMinute().getMaximumShortTextLength(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetSecondOfDay() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);\n+        assertSame(test.getChronology().secondOfDay(), test.secondOfDay().getField());\n+        assertEquals(\"secondOfDay\", test.secondOfDay().getName());\n+        assertEquals(\"Property[secondOfDay]\", test.secondOfDay().toString());\n+        assertEquals(48223, test.secondOfDay().get());\n+        assertEquals(\"48223\", test.secondOfDay().getAsText());\n+        assertEquals(\"48223\", test.secondOfDay().getAsText(Locale.FRENCH));\n+        assertEquals(\"48223\", test.secondOfDay().getAsShortText());\n+        assertEquals(\"48223\", test.secondOfDay().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().seconds(), test.secondOfDay().getDurationField());\n+        assertEquals(test.getChronology().days(), test.secondOfDay().getRangeDurationField());\n+        assertEquals(5, test.secondOfDay().getMaximumTextLength(null));\n+        assertEquals(5, test.secondOfDay().getMaximumShortTextLength(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMillisOfSecond() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);\n+        assertSame(test.getChronology().millisOfSecond(), test.millisOfSecond().getField());\n+        assertEquals(\"millisOfSecond\", test.millisOfSecond().getName());\n+        assertEquals(\"Property[millisOfSecond]\", test.millisOfSecond().toString());\n+        assertEquals(53, test.millisOfSecond().get());\n+        assertEquals(\"53\", test.millisOfSecond().getAsText());\n+        assertEquals(\"53\", test.millisOfSecond().getAsText(Locale.FRENCH));\n+        assertEquals(\"53\", test.millisOfSecond().getAsShortText());\n+        assertEquals(\"53\", test.millisOfSecond().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().millis(), test.millisOfSecond().getDurationField());\n+        assertEquals(test.getChronology().seconds(), test.millisOfSecond().getRangeDurationField());\n+        assertEquals(3, test.millisOfSecond().getMaximumTextLength(null));\n+        assertEquals(3, test.millisOfSecond().getMaximumShortTextLength(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMillisOfDay() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);\n+        assertSame(test.getChronology().millisOfDay(), test.millisOfDay().getField());\n+        assertEquals(\"millisOfDay\", test.millisOfDay().getName());\n+        assertEquals(\"Property[millisOfDay]\", test.millisOfDay().toString());\n+        assertEquals(48223053, test.millisOfDay().get());\n+        assertEquals(\"48223053\", test.millisOfDay().getAsText());\n+        assertEquals(\"48223053\", test.millisOfDay().getAsText(Locale.FRENCH));\n+        assertEquals(\"48223053\", test.millisOfDay().getAsShortText());\n+        assertEquals(\"48223053\", test.millisOfDay().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().millis(), test.millisOfDay().getDurationField());\n+        assertEquals(test.getChronology().days(), test.millisOfDay().getRangeDurationField());\n+        assertEquals(8, test.millisOfDay().getMaximumTextLength(null));\n+        assertEquals(8, test.millisOfDay().getMaximumShortTextLength(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyToIntervalYearOfEra() {\n+      MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.yearOfEra().toInterval();\n+      assertEquals(new MutableDateTime(2004, 1, 1, 0, 0, 0, 0), testInterval.getStart());\n+      assertEquals(new MutableDateTime(2005, 1, 1, 0, 0, 0, 0), testInterval.getEnd());\n+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test);\n+    }\n+\n+    public void testPropertyToIntervalYearOfCentury() {\n+      MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.yearOfCentury().toInterval();\n+      assertEquals(new MutableDateTime(2004, 1, 1, 0, 0, 0, 0), testInterval.getStart());\n+      assertEquals(new MutableDateTime(2005, 1, 1, 0, 0, 0, 0), testInterval.getEnd());\n+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test);\n+    }\n+\n+    public void testPropertyToIntervalYear() {\n+      MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.year().toInterval();\n+      assertEquals(new MutableDateTime(2004, 1, 1, 0, 0, 0, 0), testInterval.getStart());\n+      assertEquals(new MutableDateTime(2005, 1, 1, 0, 0, 0, 0), testInterval.getEnd());\n+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test);\n+    }\n+\n+    public void testPropertyToIntervalMonthOfYear() {\n+      MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.monthOfYear().toInterval();\n+      assertEquals(new MutableDateTime(2004, 6, 1, 0, 0, 0, 0), testInterval.getStart());\n+      assertEquals(new MutableDateTime(2004, 7, 1, 0, 0, 0, 0), testInterval.getEnd());\n+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test);\n+    }\n+\n+    public void testPropertyToIntervalDayOfMonth() {\n+      MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.dayOfMonth().toInterval();\n+      assertEquals(new MutableDateTime(2004, 6, 9, 0, 0, 0, 0), testInterval.getStart());\n+      assertEquals(new MutableDateTime(2004, 6, 10, 0, 0, 0, 0), testInterval.getEnd());\n+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test);\n+\n+      MutableDateTime febTest = new MutableDateTime(2004, 2, 29, 13, 23, 43, 53);\n+      Interval febTestInterval = febTest.dayOfMonth().toInterval();\n+      assertEquals(new MutableDateTime(2004, 2, 29, 0, 0, 0, 0), febTestInterval.getStart());\n+      assertEquals(new MutableDateTime(2004, 3, 1, 0, 0, 0, 0), febTestInterval.getEnd());\n+      assertEquals(new MutableDateTime(2004, 2, 29, 13, 23, 43, 53), febTest);\n+    }\n+\n+    public void testPropertyToIntervalHourOfDay() {\n+      MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.hourOfDay().toInterval();\n+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 0, 0, 0), testInterval.getStart());\n+      assertEquals(new MutableDateTime(2004, 6, 9, 14, 0, 0, 0), testInterval.getEnd());\n+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test);\n+\n+      MutableDateTime midnightTest = new MutableDateTime(2004, 6, 9, 23, 23, 43, 53);\n+      Interval midnightTestInterval = midnightTest.hourOfDay().toInterval();\n+      assertEquals(new MutableDateTime(2004, 6, 9, 23, 0, 0, 0), midnightTestInterval.getStart());\n+      assertEquals(new MutableDateTime(2004, 6, 10, 0, 0, 0, 0), midnightTestInterval.getEnd());\n+      assertEquals(new MutableDateTime(2004, 6, 9, 23, 23, 43, 53), midnightTest);\n+    }\n+\n+    public void testPropertyToIntervalMinuteOfHour() {\n+      MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.minuteOfHour().toInterval();\n+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 0, 0), testInterval.getStart());\n+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 24, 0, 0), testInterval.getEnd());\n+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test);\n+    }\n+\n+    public void testPropertyToIntervalSecondOfMinute() {\n+      MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.secondOfMinute().toInterval();\n+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 0), testInterval.getStart());\n+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 44, 0), testInterval.getEnd());\n+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test);\n+    }\n+\n+    public void testPropertyToIntervalMillisOfSecond() {\n+      MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);\n+      Interval testInterval = test.millisOfSecond().toInterval();\n+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), testInterval.getStart());\n+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 54), testInterval.getEnd());\n+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test);\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestMutableDateTime_Sets.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * This class is a JUnit test for MutableDateTime.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestMutableDateTime_Sets extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestMutableDateTime_Sets.class);\n+    }\n+\n+    public TestMutableDateTime_Sets(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetMillis_long1() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.setMillis(TEST_TIME2);\n+        assertEquals(TEST_TIME2, test.getMillis());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetChronology_Chronology1() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.setChronology(GregorianChronology.getInstance(PARIS));\n+        assertEquals(TEST_TIME1, test.getMillis());\n+        assertEquals(GregorianChronology.getInstance(PARIS), test.getChronology());\n+    }        \n+\n+    public void testSetChronology_Chronology2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.setChronology(null);\n+        assertEquals(TEST_TIME1, test.getMillis());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetZone_DateTimeZone1() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.setZone(PARIS);\n+        assertEquals(TEST_TIME1, test.getMillis());\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+    }        \n+\n+    public void testSetZone_DateTimeZone2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.setZone(null);\n+        assertEquals(TEST_TIME1, test.getMillis());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+    }        \n+\n+    //-----------------------------------------------------------------------\n+    public void testSetZoneRetainFields_DateTimeZone1() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.setZoneRetainFields(PARIS);\n+        assertEquals(TEST_TIME1 - DateTimeConstants.MILLIS_PER_HOUR, test.getMillis());\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+    }        \n+\n+    public void testSetZoneRetainFields_DateTimeZone2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.setZoneRetainFields(null);\n+        assertEquals(TEST_TIME1, test.getMillis());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+    }        \n+\n+    public void testSetZoneRetainFields_DateTimeZone3() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS));\n+        test.setZoneRetainFields(null);\n+        assertEquals(TEST_TIME1 + DateTimeConstants.MILLIS_PER_HOUR, test.getMillis());\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+    }        \n+\n+    public void testSetZoneRetainFields_DateTimeZone4() {\n+        Chronology chrono = new MockNullZoneChronology();\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1, chrono);\n+        test.setZoneRetainFields(PARIS);\n+        assertEquals(TEST_TIME1 - DateTimeConstants.MILLIS_PER_HOUR, test.getMillis());\n+        assertSame(chrono, test.getChronology());\n+    }        \n+\n+    //-----------------------------------------------------------------------\n+    public void testSetMillis_RI1() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1, BuddhistChronology.getInstance());\n+        test.setMillis(new Instant(TEST_TIME2));\n+        assertEquals(TEST_TIME2, test.getMillis());\n+        assertEquals(BuddhistChronology.getInstance(), test.getChronology());\n+    }\n+\n+    public void testSetMillis_RI2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1, BuddhistChronology.getInstance());\n+        test.setMillis(null);\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+        assertEquals(BuddhistChronology.getInstance(), test.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSet_DateTimeFieldType_int1() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.set(DateTimeFieldType.year(), 2010);\n+        assertEquals(2010, test.getYear());\n+    }\n+\n+    public void testSet_DateTimeFieldType_int2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        try {\n+            test.set(null, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    public void testSet_DateTimeFieldType_int3() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        try {\n+            test.set(DateTimeFieldType.monthOfYear(), 13);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetDate_int_int_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501);\n+        test.setDate(2010, 12, 3);\n+        assertEquals(2010, test.getYear());\n+        assertEquals(12, test.getMonthOfYear());\n+        assertEquals(3, test.getDayOfMonth());\n+        assertEquals(12, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(48, test.getSecondOfMinute());\n+        assertEquals(501, test.getMillisOfSecond());\n+    }\n+\n+    public void testSetDate_int_int_int2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        try {\n+            test.setDate(2010, 13, 3);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetDate_long1() {\n+        long setter = new DateTime(2010, 12, 3, 5, 7, 9, 501).getMillis();\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501);\n+        test.setDate(setter);\n+        assertEquals(2010, test.getYear());\n+        assertEquals(12, test.getMonthOfYear());\n+        assertEquals(3, test.getDayOfMonth());\n+        assertEquals(12, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(48, test.getSecondOfMinute());\n+        assertEquals(501, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetDate_RI1() {\n+        DateTime setter = new DateTime(2010, 12, 3, 5, 7, 9, 501);\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501);\n+        test.setDate(setter);\n+        assertEquals(2010, test.getYear());\n+        assertEquals(12, test.getMonthOfYear());\n+        assertEquals(3, test.getDayOfMonth());\n+        assertEquals(12, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(48, test.getSecondOfMinute());\n+        assertEquals(501, test.getMillisOfSecond());\n+    }\n+\n+    public void testSetDate_RI2() {\n+        MutableDateTime test = new MutableDateTime(2010, 7, 8, 12, 24, 48, 501);\n+        test.setDate(null);  // sets to TEST_TIME_NOW\n+        assertEquals(2002, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(12, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(48, test.getSecondOfMinute());\n+        assertEquals(501, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetTime_int_int_int_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501);\n+        test.setTime(5, 6, 7, 8);\n+        assertEquals(2002, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(5, test.getHourOfDay());\n+        assertEquals(6, test.getMinuteOfHour());\n+        assertEquals(7, test.getSecondOfMinute());\n+        assertEquals(8, test.getMillisOfSecond());\n+    }\n+\n+    public void testSetTime_int_int_int2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        try {\n+            test.setTime(60, 6, 7, 8);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetTime_long1() {\n+        long setter = new DateTime(2010, 12, 3, 5, 7, 9, 11).getMillis();\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501);\n+        test.setTime(setter);\n+        assertEquals(2002, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(5, test.getHourOfDay());\n+        assertEquals(7, test.getMinuteOfHour());\n+        assertEquals(9, test.getSecondOfMinute());\n+        assertEquals(11, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetTime_RI1() {\n+        DateTime setter = new DateTime(2010, 12, 3, 5, 7, 9, 11);\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501);\n+        test.setTime(setter);\n+        assertEquals(2002, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(5, test.getHourOfDay());\n+        assertEquals(7, test.getMinuteOfHour());\n+        assertEquals(9, test.getSecondOfMinute());\n+        assertEquals(11, test.getMillisOfSecond());\n+    }\n+\n+    public void testSetTime_RI2() {\n+        MutableDateTime test = new MutableDateTime(2010, 7, 8, 12, 24, 48, 501);\n+        test.setTime(null);  // sets to TEST_TIME_NOW, which has no time part\n+        assertEquals(2010, test.getYear());\n+        assertEquals(7, test.getMonthOfYear());\n+        assertEquals(8, test.getDayOfMonth());\n+        assertEquals(new DateTime(TEST_TIME_NOW).getHourOfDay(), test.getHourOfDay());\n+        assertEquals(new DateTime(TEST_TIME_NOW).getMinuteOfHour(), test.getMinuteOfHour());\n+        assertEquals(new DateTime(TEST_TIME_NOW).getSecondOfMinute(), test.getSecondOfMinute());\n+        assertEquals(new DateTime(TEST_TIME_NOW).getMillisOfSecond(), test.getMillisOfSecond());\n+    }\n+\n+    public void testSetTime_Object3() {\n+        DateTime temp = new DateTime(2010, 12, 3, 5, 7, 9, 11);\n+        DateTime setter = new DateTime(temp.getMillis(), new MockNullZoneChronology());\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501);\n+        test.setTime(setter);\n+        assertEquals(2002, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(5, test.getHourOfDay());\n+        assertEquals(7, test.getMinuteOfHour());\n+        assertEquals(9, test.getSecondOfMinute());\n+        assertEquals(11, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetDateTime_int_int_int_int_int_int_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501);\n+        test.setDateTime(2010, 12, 3, 5, 6, 7, 8);\n+        assertEquals(2010, test.getYear());\n+        assertEquals(12, test.getMonthOfYear());\n+        assertEquals(3, test.getDayOfMonth());\n+        assertEquals(5, test.getHourOfDay());\n+        assertEquals(6, test.getMinuteOfHour());\n+        assertEquals(7, test.getSecondOfMinute());\n+        assertEquals(8, test.getMillisOfSecond());\n+    }\n+    \n+    public void testSetDateTime_int_int_int_int_int_int_int2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        try {\n+            test.setDateTime(2010, 13, 3, 5, 6, 7, 8);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+        }\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetYear_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setYear(2010);\n+        assertEquals(\"2010-06-09T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetMonthOfYear_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setMonthOfYear(12);\n+        assertEquals(\"2002-12-09T05:06:07.008Z\", test.toString());\n+    }\n+\n+    public void testSetMonthOfYear_int2() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        try {\n+            test.setMonthOfYear(13);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(\"2002-06-09T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetDayOfMonth_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setDayOfMonth(17);\n+        assertEquals(\"2002-06-17T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    public void testSetDayOfMonth_int2() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        try {\n+            test.setDayOfMonth(31);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(\"2002-06-09T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetDayOfYear_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setDayOfYear(3);\n+        assertEquals(\"2002-01-03T05:06:07.008Z\", test.toString());\n+    }\n+\n+    public void testSetDayOfYear_int2() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        try {\n+            test.setDayOfYear(366);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(\"2002-06-09T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetWeekyear_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setWeekyear(2001);\n+        assertEquals(\"2001-06-10T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetWeekOfWeekyear_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setWeekOfWeekyear(2);\n+        assertEquals(\"2002-01-13T05:06:07.008Z\", test.toString());\n+    }\n+\n+    public void testSetWeekOfWeekyear_int2() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        try {\n+            test.setWeekOfWeekyear(53);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(\"2002-06-09T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetDayOfWeek_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setDayOfWeek(5);\n+        assertEquals(\"2002-06-07T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    public void testSetDayOfWeek_int2() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        try {\n+            test.setDayOfWeek(8);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(\"2002-06-09T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetHourOfDay_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setHourOfDay(13);\n+        assertEquals(\"2002-06-09T13:06:07.008+01:00\", test.toString());\n+    }\n+\n+    public void testSetHourOfDay_int2() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        try {\n+            test.setHourOfDay(24);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(\"2002-06-09T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetMinuteOfHour_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setMinuteOfHour(13);\n+        assertEquals(\"2002-06-09T05:13:07.008+01:00\", test.toString());\n+    }\n+\n+    public void testSetMinuteOfHour_int2() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        try {\n+            test.setMinuteOfHour(60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(\"2002-06-09T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetMinuteOfDay_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setMinuteOfDay(13);\n+        assertEquals(\"2002-06-09T00:13:07.008+01:00\", test.toString());\n+    }\n+\n+    public void testSetMinuteOfDay_int2() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        try {\n+            test.setMinuteOfDay(24 * 60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(\"2002-06-09T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetSecondOfMinute_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setSecondOfMinute(13);\n+        assertEquals(\"2002-06-09T05:06:13.008+01:00\", test.toString());\n+    }\n+\n+    public void testSetSecondOfMinute_int2() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        try {\n+            test.setSecondOfMinute(60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(\"2002-06-09T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetSecondOfDay_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setSecondOfDay(13);\n+        assertEquals(\"2002-06-09T00:00:13.008+01:00\", test.toString());\n+    }\n+\n+    public void testSetSecondOfDay_int2() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        try {\n+            test.setSecondOfDay(24 * 60 * 60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(\"2002-06-09T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetMilliOfSecond_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setMillisOfSecond(13);\n+        assertEquals(\"2002-06-09T05:06:07.013+01:00\", test.toString());\n+    }\n+\n+    public void testSetMilliOfSecond_int2() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        try {\n+            test.setMillisOfSecond(1000);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(\"2002-06-09T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetMilliOfDay_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setMillisOfDay(13);\n+        assertEquals(\"2002-06-09T00:00:00.013+01:00\", test.toString());\n+    }\n+\n+    public void testSetMilliOfDay_int2() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        try {\n+            test.setMillisOfDay(24 * 60 * 60 * 1000);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(\"2002-06-09T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestMutableInterval_Basics.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.base.AbstractInterval;\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.GJChronology;\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * This class is a Junit unit test for Instant.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestMutableInterval_Basics extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestMutableInterval_Basics.class);\n+    }\n+\n+    public TestMutableInterval_Basics(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetMillis() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        assertEquals(TEST_TIME1, test.getStartMillis());\n+        assertEquals(TEST_TIME1, test.getStart().getMillis());\n+        assertEquals(TEST_TIME2, test.getEndMillis());\n+        assertEquals(TEST_TIME2, test.getEnd().getMillis());\n+        assertEquals(TEST_TIME2 - TEST_TIME1, test.toDurationMillis());\n+        assertEquals(TEST_TIME2 - TEST_TIME1, test.toDuration().getMillis());\n+    }\n+\n+    public void testGetDuration1() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        assertEquals(TEST_TIME2 - TEST_TIME1, test.toDurationMillis());\n+        assertEquals(TEST_TIME2 - TEST_TIME1, test.toDuration().getMillis());\n+    }\n+\n+    public void testGetDuration2() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME1);\n+        assertSame(Duration.ZERO, test.toDuration());\n+    }\n+\n+    public void testEqualsHashCode() {\n+        MutableInterval test1 = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        MutableInterval test2 = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        assertEquals(true, test1.equals(test2));\n+        assertEquals(true, test2.equals(test1));\n+        assertEquals(true, test1.equals(test1));\n+        assertEquals(true, test2.equals(test2));\n+        assertEquals(true, test1.hashCode() == test2.hashCode());\n+        assertEquals(true, test1.hashCode() == test1.hashCode());\n+        assertEquals(true, test2.hashCode() == test2.hashCode());\n+        \n+        MutableInterval test3 = new MutableInterval(TEST_TIME_NOW, TEST_TIME2);\n+        assertEquals(false, test1.equals(test3));\n+        assertEquals(false, test2.equals(test3));\n+        assertEquals(false, test3.equals(test1));\n+        assertEquals(false, test3.equals(test2));\n+        assertEquals(false, test1.hashCode() == test3.hashCode());\n+        assertEquals(false, test2.hashCode() == test3.hashCode());\n+        \n+        MutableInterval test4 = new MutableInterval(TEST_TIME1, TEST_TIME2, GJChronology.getInstance());\n+        assertEquals(true, test4.equals(test4));\n+        assertEquals(false, test1.equals(test4));\n+        assertEquals(false, test2.equals(test4));\n+        assertEquals(false, test4.equals(test1));\n+        assertEquals(false, test4.equals(test2));\n+        assertEquals(false, test1.hashCode() == test4.hashCode());\n+        assertEquals(false, test2.hashCode() == test4.hashCode());\n+        \n+        MutableInterval test5 = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        assertEquals(true, test1.equals(test5));\n+        assertEquals(true, test2.equals(test5));\n+        assertEquals(false, test3.equals(test5));\n+        assertEquals(true, test5.equals(test1));\n+        assertEquals(true, test5.equals(test2));\n+        assertEquals(false, test5.equals(test3));\n+        assertEquals(true, test1.hashCode() == test5.hashCode());\n+        assertEquals(true, test2.hashCode() == test5.hashCode());\n+        assertEquals(false, test3.hashCode() == test5.hashCode());\n+        \n+        assertEquals(false, test1.equals(\"Hello\"));\n+        assertEquals(true, test1.equals(new MockInterval()));\n+        assertEquals(false, test1.equals(new DateTime(TEST_TIME1)));\n+    }\n+    \n+    class MockInterval extends AbstractInterval {\n+        public MockInterval() {\n+            super();\n+        }\n+        public Chronology getChronology() {\n+            return ISOChronology.getInstance();\n+        }\n+        public long getStartMillis() {\n+            return TEST_TIME1;\n+        }\n+        public long getEndMillis() {\n+            return TEST_TIME2;\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testContains_long() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        assertEquals(true, test.contains(TEST_TIME1));\n+        assertEquals(false, test.contains(TEST_TIME1 - 1));\n+        assertEquals(true, test.contains(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2));\n+        assertEquals(false, test.contains(TEST_TIME2));\n+        assertEquals(true, test.contains(TEST_TIME2 - 1));\n+    }\n+\n+    public void testContainsNow() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        \n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME1);\n+        assertEquals(true, test.containsNow());\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME1 - 1);\n+        assertEquals(false, test.containsNow());\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2);\n+        assertEquals(true, test.containsNow());\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME2);\n+        assertEquals(false, test.containsNow());\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME2 - 1);\n+        assertEquals(true, test.containsNow());\n+    }\n+\n+    public void testContains_RI() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        assertEquals(true, test.contains(new Instant(TEST_TIME1)));\n+        assertEquals(false, test.contains(new Instant(TEST_TIME1 - 1)));\n+        assertEquals(true, test.contains(new Instant(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2)));\n+        assertEquals(false, test.contains(new Instant(TEST_TIME2)));\n+        assertEquals(true, test.contains(new Instant(TEST_TIME2 - 1)));\n+        assertEquals(true, test.contains((ReadableInstant) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testContains_RInterval() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        \n+        assertEquals(true, test.contains(new Interval(TEST_TIME1, TEST_TIME1)));\n+        assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME1)));\n+        \n+        assertEquals(true, test.contains(new Interval(TEST_TIME1, TEST_TIME1 + 1)));\n+        assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1)));\n+        assertEquals(true, test.contains(new Interval(TEST_TIME1 + 1, TEST_TIME1 + 1)));\n+        \n+        assertEquals(true, test.contains(new Interval(TEST_TIME1, TEST_TIME2)));\n+        assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME2)));\n+        assertEquals(true, test.contains(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2)));\n+        assertEquals(false, test.contains(new Interval(TEST_TIME2, TEST_TIME2)));\n+        assertEquals(true, test.contains(new Interval(TEST_TIME2 - 1, TEST_TIME2)));\n+        \n+        assertEquals(true, test.contains(new Interval(TEST_TIME1, TEST_TIME2 - 1)));\n+        assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME2 - 1)));\n+        assertEquals(true, test.contains(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2 - 1)));\n+        assertEquals(true, test.contains(new Interval(TEST_TIME2 - 1, TEST_TIME2 - 1)));\n+        assertEquals(true, test.contains(new Interval(TEST_TIME2 - 2, TEST_TIME2 - 1)));\n+        \n+        assertEquals(false, test.contains(new Interval(TEST_TIME1, TEST_TIME2 + 1)));\n+        assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME2 + 1)));\n+        assertEquals(false, test.contains(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2 + 1)));\n+        assertEquals(false, test.contains(new Interval(TEST_TIME2, TEST_TIME2 + 1)));\n+        assertEquals(false, test.contains(new Interval(TEST_TIME2 - 1, TEST_TIME2 + 1)));\n+        assertEquals(false, test.contains(new Interval(TEST_TIME1 - 2, TEST_TIME1 - 1)));\n+        \n+        assertEquals(true, test.contains((ReadableInterval) null));\n+    }\n+\n+    public void testOverlaps_RInterval() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        \n+        assertEquals(false, test.overlaps(new Interval(TEST_TIME1, TEST_TIME1)));\n+        assertEquals(false, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1)));\n+        \n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME1 + 1)));\n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1)));\n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 + 1, TEST_TIME1 + 1)));\n+        \n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME2)));\n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME2)));\n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2)));\n+        assertEquals(false, test.overlaps(new Interval(TEST_TIME2, TEST_TIME2)));\n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME2 - 1, TEST_TIME2)));\n+        \n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME2 + 1)));\n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME2 + 1)));\n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2 + 1)));\n+        assertEquals(false, test.overlaps(new Interval(TEST_TIME2, TEST_TIME2 + 1)));\n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME2 - 1, TEST_TIME2 + 1)));\n+        \n+        assertEquals(false, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 - 1)));\n+        assertEquals(false, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1)));\n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1)));\n+        \n+        assertEquals(true, test.overlaps((ReadableInterval) null));\n+        \n+        MutableInterval empty = new MutableInterval(TEST_TIME1, TEST_TIME1);\n+        assertEquals(false, empty.overlaps(empty));\n+        assertEquals(false, empty.overlaps(test));\n+        assertEquals(false, test.overlaps(empty));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsBefore_long() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        \n+        assertEquals(false, test.isBefore(TEST_TIME1 - 1));\n+        assertEquals(false, test.isBefore(TEST_TIME1));\n+        assertEquals(false, test.isBefore(TEST_TIME1 + 1));\n+        \n+        assertEquals(false, test.isBefore(TEST_TIME2 - 1));\n+        assertEquals(true, test.isBefore(TEST_TIME2));\n+        assertEquals(true, test.isBefore(TEST_TIME2 + 1));\n+    }\n+\n+    public void testIsBeforeNow() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        \n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME2 - 1);\n+        assertEquals(false, test.isBeforeNow());\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME2);\n+        assertEquals(true, test.isBeforeNow());\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME2 + 1);\n+        assertEquals(true, test.isBeforeNow());\n+    }\n+\n+    public void testIsBefore_RI() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        \n+        assertEquals(false, test.isBefore(new Instant(TEST_TIME1 - 1)));\n+        assertEquals(false, test.isBefore(new Instant(TEST_TIME1)));\n+        assertEquals(false, test.isBefore(new Instant(TEST_TIME1 + 1)));\n+        \n+        assertEquals(false, test.isBefore(new Instant(TEST_TIME2 - 1)));\n+        assertEquals(true, test.isBefore(new Instant(TEST_TIME2)));\n+        assertEquals(true, test.isBefore(new Instant(TEST_TIME2 + 1)));\n+        \n+        assertEquals(false, test.isBefore((ReadableInstant) null));\n+    }\n+\n+    public void testIsBefore_RInterval() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        \n+        assertEquals(false, test.isBefore(new Interval(Long.MIN_VALUE, TEST_TIME1 - 1)));\n+        assertEquals(false, test.isBefore(new Interval(Long.MIN_VALUE, TEST_TIME1)));\n+        assertEquals(false, test.isBefore(new Interval(Long.MIN_VALUE, TEST_TIME1 + 1)));\n+        \n+        assertEquals(false, test.isBefore(new Interval(TEST_TIME2 - 1, Long.MAX_VALUE)));\n+        assertEquals(true, test.isBefore(new Interval(TEST_TIME2, Long.MAX_VALUE)));\n+        assertEquals(true, test.isBefore(new Interval(TEST_TIME2 + 1, Long.MAX_VALUE)));\n+        \n+        assertEquals(false, test.isBefore((ReadableInterval) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsAfter_long() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        \n+        assertEquals(true, test.isAfter(TEST_TIME1 - 1));\n+        assertEquals(false, test.isAfter(TEST_TIME1));\n+        assertEquals(false, test.isAfter(TEST_TIME1 + 1));\n+        \n+        assertEquals(false, test.isAfter(TEST_TIME2 - 1));\n+        assertEquals(false, test.isAfter(TEST_TIME2));\n+        assertEquals(false, test.isAfter(TEST_TIME2 + 1));\n+    }\n+\n+    public void testIsAfterNow() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        \n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME1 - 1);\n+        assertEquals(true, test.isAfterNow());\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME1);\n+        assertEquals(false, test.isAfterNow());\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME1 + 1);\n+        assertEquals(false, test.isAfterNow());\n+    }\n+\n+    public void testIsAfter_RI() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        \n+        assertEquals(true, test.isAfter(new Instant(TEST_TIME1 - 1)));\n+        assertEquals(false, test.isAfter(new Instant(TEST_TIME1)));\n+        assertEquals(false, test.isAfter(new Instant(TEST_TIME1 + 1)));\n+        \n+        assertEquals(false, test.isAfter(new Instant(TEST_TIME2 - 1)));\n+        assertEquals(false, test.isAfter(new Instant(TEST_TIME2)));\n+        assertEquals(false, test.isAfter(new Instant(TEST_TIME2 + 1)));\n+        \n+        assertEquals(false, test.isAfter((ReadableInstant) null));\n+    }\n+\n+    public void testIsAfter_RInterval() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        \n+        assertEquals(true, test.isAfter(new Interval(Long.MIN_VALUE, TEST_TIME1 - 1)));\n+        assertEquals(true, test.isAfter(new Interval(Long.MIN_VALUE, TEST_TIME1)));\n+        assertEquals(false, test.isAfter(new Interval(Long.MIN_VALUE, TEST_TIME1 + 1)));\n+        \n+        assertEquals(false, test.isAfter(new Interval(TEST_TIME2 - 1, Long.MAX_VALUE)));\n+        assertEquals(false, test.isAfter(new Interval(TEST_TIME2, Long.MAX_VALUE)));\n+        assertEquals(false, test.isAfter(new Interval(TEST_TIME2 + 1, Long.MAX_VALUE)));\n+        \n+        assertEquals(false, test.isAfter((ReadableInterval) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToInterval1() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n+        Interval result = test.toInterval();\n+        assertEquals(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToMutableInterval1() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n+        MutableInterval result = test.toMutableInterval();\n+        assertEquals(test, result);\n+        assertNotSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToPeriod() {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10, COPTIC_PARIS);\n+        DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18, COPTIC_PARIS);\n+        MutableInterval base = new MutableInterval(dt1, dt2);\n+        \n+        Period test = base.toPeriod();\n+        Period expected = new Period(dt1, dt2, PeriodType.standard());\n+        assertEquals(expected, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToPeriod_PeriodType1() {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10, COPTIC_PARIS);\n+        DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18, COPTIC_PARIS);\n+        MutableInterval base = new MutableInterval(dt1, dt2);\n+        \n+        Period test = base.toPeriod(null);\n+        Period expected = new Period(dt1, dt2, PeriodType.standard());\n+        assertEquals(expected, test);\n+    }\n+\n+    public void testToPeriod_PeriodType2() {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10);\n+        DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18);\n+        MutableInterval base = new MutableInterval(dt1, dt2);\n+        \n+        Period test = base.toPeriod(PeriodType.yearWeekDayTime());\n+        Period expected = new Period(dt1, dt2, PeriodType.yearWeekDayTime());\n+        assertEquals(expected, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        MutableInterval result = (MutableInterval) ois.readObject();\n+        ois.close();\n+        \n+        assertEquals(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10, DateTimeZone.UTC);\n+        DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18, DateTimeZone.UTC);\n+        MutableInterval test = new MutableInterval(dt1, dt2);\n+        assertEquals(\"2004-06-09T07:08:09.010/2005-08-13T12:14:16.018\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testCopy() {\n+        MutableInterval test = new MutableInterval(123L, 456L, COPTIC_PARIS);\n+        MutableInterval cloned = test.copy();\n+        assertEquals(test, cloned);\n+        assertNotSame(test, cloned);\n+    }\n+    public void testClone() {\n+        MutableInterval test = new MutableInterval(123L, 456L, COPTIC_PARIS);\n+        MutableInterval cloned = (MutableInterval) test.clone();\n+        assertEquals(test, cloned);\n+        assertNotSame(test, cloned);\n+    }\n+\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestMutableInterval_Constructors.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.GJChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.convert.ConverterManager;\n+import org.joda.time.convert.IntervalConverter;\n+\n+/**\n+ * This class is a JUnit test for Interval.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestMutableInterval_Constructors extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestMutableInterval_Constructors.class);\n+    }\n+\n+    public TestMutableInterval_Constructors(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor() throws Throwable {\n+        MutableInterval test = new MutableInterval();\n+        assertEquals(0L, test.getStartMillis());\n+        assertEquals(0L, test.getEndMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_long1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MutableInterval test = new MutableInterval(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+    }\n+\n+    public void testConstructor_long_long2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        MutableInterval test = new MutableInterval(dt1.getMillis(), dt1.getMillis());\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt1.getMillis(), test.getEndMillis());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+    }\n+\n+    public void testConstructor_long_long3() throws Throwable {\n+        DateTime dt1 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        DateTime dt2 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        try {\n+            new MutableInterval(dt1.getMillis(), dt2.getMillis());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_long_Chronology1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MutableInterval test = new MutableInterval(dt1.getMillis(), dt2.getMillis(), GJChronology.getInstance());\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+        assertEquals(GJChronology.getInstance(), test.getChronology());\n+    }\n+\n+    public void testConstructor_long_long_Chronology2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MutableInterval test = new MutableInterval(dt1.getMillis(), dt2.getMillis(), null);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RI_RI1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MutableInterval test = new MutableInterval(dt1, dt2);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RI2() throws Throwable {\n+        Instant dt1 = new Instant(new DateTime(2004, 6, 9, 0, 0, 0, 0));\n+        Instant dt2 = new Instant(new DateTime(2005, 7, 10, 1, 1, 1, 1));\n+        MutableInterval test = new MutableInterval(dt1, dt2);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RI3() throws Throwable {\n+        MutableInterval test = new MutableInterval((ReadableInstant) null, (ReadableInstant) null);\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RI4() throws Throwable {\n+        DateTime dt1 = new DateTime(2000, 6, 9, 0, 0, 0, 0);\n+        MutableInterval test = new MutableInterval(dt1, (ReadableInstant) null);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RI5() throws Throwable {\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MutableInterval test = new MutableInterval((ReadableInstant) null, dt2);\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RI6() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        MutableInterval test = new MutableInterval(dt1, dt1);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt1.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RI7() throws Throwable {\n+        DateTime dt1 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        DateTime dt2 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        try {\n+            new MutableInterval(dt1, dt2);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_RI_RI8() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, GJChronology.getInstance());\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MutableInterval test = new MutableInterval(dt1, dt2);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+        assertEquals(GJChronology.getInstance(), test.getChronology());\n+    }\n+\n+    public void testConstructor_RI_RI9() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, GJChronology.getInstance());\n+        MutableInterval test = new MutableInterval(dt1, dt2);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RI_RP1() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0);\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().months().add(result, 6);\n+        result = ISOChronology.getInstance().hours().add(result, 1);\n+        \n+        MutableInterval test = new MutableInterval(dt, dur);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(result, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RP2() throws Throwable {\n+        Instant dt = new Instant(new DateTime(TEST_TIME_NOW));\n+        Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0);\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstanceUTC().months().add(result, 6);\n+        result = ISOChronology.getInstanceUTC().days().add(result, 3);\n+        result = ISOChronology.getInstanceUTC().hours().add(result, 1);\n+        \n+        MutableInterval test = new MutableInterval(dt, dur);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(result, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RP3() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW, ISOChronology.getInstanceUTC());\n+        Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.standard());\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstanceUTC().months().add(result, 6);\n+        result = ISOChronology.getInstanceUTC().days().add(result, 3);\n+        result = ISOChronology.getInstanceUTC().hours().add(result, 1);\n+        \n+        MutableInterval test = new MutableInterval(dt, dur);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(result, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RP4() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Period dur = new Period(1 * DateTimeConstants.MILLIS_PER_HOUR + 23L);\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().hours().add(result, 1);\n+        result = ISOChronology.getInstance().millis().add(result, 23);\n+        \n+        MutableInterval test = new MutableInterval(dt, dur);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(result, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RP5() throws Throwable {\n+        MutableInterval test = new MutableInterval((ReadableInstant) null, (ReadablePeriod) null);\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RP6() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        MutableInterval test = new MutableInterval(dt, (ReadablePeriod) null);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RP7() throws Throwable {\n+        Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0);\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().monthOfYear().add(result, 6);\n+        result = ISOChronology.getInstance().hourOfDay().add(result, 1);\n+        \n+        MutableInterval test = new MutableInterval((ReadableInstant) null, dur);\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(result, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RP8() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Period dur = new Period(0, 0, 0, 0, 0, 0, 0, -1);\n+        try {\n+            new MutableInterval(dt, dur);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RP_RI1() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0);\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().months().add(result, -6);\n+        result = ISOChronology.getInstance().hours().add(result, -1);\n+        \n+        MutableInterval test = new MutableInterval(dur, dt);\n+        assertEquals(result, test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RP_RI2() throws Throwable {\n+        Instant dt = new Instant(new DateTime(TEST_TIME_NOW));\n+        Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0);\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstanceUTC().months().add(result, -6);\n+        result = ISOChronology.getInstanceUTC().days().add(result, -3);\n+        result = ISOChronology.getInstanceUTC().hours().add(result, -1);\n+        \n+        MutableInterval test = new MutableInterval(dur, dt);\n+        assertEquals(result, test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RP_RI3() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW, ISOChronology.getInstanceUTC());\n+        Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.standard());\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstanceUTC().months().add(result, -6);\n+        result = ISOChronology.getInstanceUTC().days().add(result, -3);\n+        result = ISOChronology.getInstanceUTC().hours().add(result, -1);\n+        \n+        MutableInterval test = new MutableInterval(dur, dt);\n+        assertEquals(result, test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RP_RI4() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Period dur = new Period(1 * DateTimeConstants.MILLIS_PER_HOUR + 23L);\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().hours().add(result, -1);\n+        result = ISOChronology.getInstance().millis().add(result, -23);\n+        \n+        MutableInterval test = new MutableInterval(dur, dt);\n+        assertEquals(result, test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RP_RI5() throws Throwable {\n+        MutableInterval test = new MutableInterval((ReadablePeriod) null, (ReadableInstant) null);\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RP_RI6() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        MutableInterval test = new MutableInterval((ReadablePeriod) null, dt);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RP_RI7() throws Throwable {\n+        Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0);\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().monthOfYear().add(result, -6);\n+        result = ISOChronology.getInstance().hourOfDay().add(result, -1);\n+        \n+        MutableInterval test = new MutableInterval(dur, (ReadableInstant) null);\n+        assertEquals(result, test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RP_RI8() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Period dur = new Period(0, 0, 0, 0, 0, 0, 0, -1);\n+        try {\n+            new MutableInterval(dur, dt);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RI_RD1() throws Throwable {\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().months().add(result, 6);\n+        result = ISOChronology.getInstance().hours().add(result, 1);\n+        \n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Duration dur = new Duration(result - TEST_TIME_NOW);\n+        \n+        MutableInterval test = new MutableInterval(dt, dur);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(result, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RD2() throws Throwable {\n+        MutableInterval test = new MutableInterval((ReadableInstant) null, (ReadableDuration) null);\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RD3() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        MutableInterval test = new MutableInterval(dt, (ReadableDuration) null);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RD4() throws Throwable {\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().monthOfYear().add(result, 6);\n+        result = ISOChronology.getInstance().hourOfDay().add(result, 1);\n+        \n+        Duration dur = new Duration(result - TEST_TIME_NOW);\n+        \n+        MutableInterval test = new MutableInterval((ReadableInstant) null, dur);\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(result, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RD5() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Duration dur = new Duration(-1);\n+        try {\n+            new MutableInterval(dt, dur);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RD_RI1() throws Throwable {\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().months().add(result, -6);\n+        result = ISOChronology.getInstance().hours().add(result, -1);\n+        \n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Duration dur = new Duration(TEST_TIME_NOW - result);\n+        \n+        MutableInterval test = new MutableInterval(dur, dt);\n+        assertEquals(result, test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RD_RI2() throws Throwable {\n+        MutableInterval test = new MutableInterval((ReadableDuration) null, (ReadableInstant) null);\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RD_RI3() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        MutableInterval test = new MutableInterval((ReadableDuration) null, dt);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RD_RI4() throws Throwable {\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().monthOfYear().add(result, -6);\n+        result = ISOChronology.getInstance().hourOfDay().add(result, -1);\n+        \n+        Duration dur = new Duration(TEST_TIME_NOW - result);\n+        \n+        MutableInterval test = new MutableInterval(dur, (ReadableInstant) null);\n+        assertEquals(result, test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RD_RI5() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Duration dur = new Duration(-1);\n+        try {\n+            new MutableInterval(dur, dt);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_Object1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MutableInterval test = new MutableInterval(dt1.toString() + '/' + dt2.toString());\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_Object2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MutableInterval base = new MutableInterval(dt1, dt2);\n+        \n+        MutableInterval test = new MutableInterval(base);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_Object3() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Interval base = new Interval(dt1, dt2);\n+        \n+        MutableInterval test = new MutableInterval(base);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_Object4() throws Throwable {\n+        MockInterval base = new MockInterval();\n+        MutableInterval test = new MutableInterval(base);\n+        assertEquals(base.getStartMillis(), test.getStartMillis());\n+        assertEquals(base.getEndMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_Object5() throws Throwable {\n+        IntervalConverter oldConv = ConverterManager.getInstance().getIntervalConverter(\"\");\n+        IntervalConverter conv = new IntervalConverter() {\n+            public boolean isReadableInterval(Object object, Chronology chrono) {\n+                return false;\n+            }\n+            public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) {\n+                interval.setChronology(chrono);\n+                interval.setInterval(1234L, 5678L);\n+            }\n+            public Class getSupportedType() {\n+                return String.class;\n+            }\n+        };\n+        try {\n+            ConverterManager.getInstance().addIntervalConverter(conv);\n+            DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+            DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+            MutableInterval test = new MutableInterval(dt1.toString() + '/' + dt2.toString());\n+            assertEquals(1234L, test.getStartMillis());\n+            assertEquals(5678L, test.getEndMillis());\n+        } finally {\n+            ConverterManager.getInstance().addIntervalConverter(oldConv);\n+        }\n+    }\n+\n+    public void testConstructor_Object6() throws Throwable {\n+        IntervalConverter oldConv = ConverterManager.getInstance().getIntervalConverter(new MutableInterval(0L, 0L));\n+        IntervalConverter conv = new IntervalConverter() {\n+            public boolean isReadableInterval(Object object, Chronology chrono) {\n+                return false;\n+            }\n+            public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) {\n+                interval.setChronology(chrono);\n+                interval.setInterval(1234L, 5678L);\n+            }\n+            public Class getSupportedType() {\n+                return ReadableInterval.class;\n+            }\n+        };\n+        try {\n+            ConverterManager.getInstance().addIntervalConverter(conv);\n+            Interval base = new Interval(-1000L, 1000L);\n+            MutableInterval test = new MutableInterval(base);\n+            assertEquals(1234L, test.getStartMillis());\n+            assertEquals(5678L, test.getEndMillis());\n+        } finally {\n+            ConverterManager.getInstance().addIntervalConverter(oldConv);\n+        }\n+    }\n+\n+    class MockInterval implements ReadableInterval {\n+        public Chronology getChronology() {\n+            return ISOChronology.getInstance();\n+        }\n+        public long getStartMillis() {\n+            return 1234L;\n+        }\n+        public DateTime getStart() {\n+            return new DateTime(1234L);\n+        }\n+        public long getEndMillis() {\n+            return 5678L;\n+        }\n+        public DateTime getEnd() {\n+            return new DateTime(5678L);\n+        }\n+        public long toDurationMillis() {\n+            return (5678L - 1234L);\n+        }\n+        public Duration toDuration() {\n+            return new Duration(5678L - 1234L);\n+        }\n+        public boolean contains(long millisInstant) {\n+            return false;\n+        }\n+        public boolean containsNow() {\n+            return false;\n+        }\n+        public boolean contains(ReadableInstant instant) {\n+            return false;\n+        }\n+        public boolean contains(ReadableInterval interval) {\n+            return false;\n+        }\n+        public boolean overlaps(ReadableInterval interval) {\n+            return false;\n+        }\n+        public boolean isBefore(ReadableInstant instant) {\n+            return false;\n+        }\n+        public boolean isBefore(ReadableInterval interval) {\n+            return false;\n+        }\n+        public boolean isAfter(ReadableInstant instant) {\n+            return false;\n+        }\n+        public boolean isAfter(ReadableInterval interval) {\n+            return false;\n+        }\n+        public Interval toInterval() {\n+            return null;\n+        }\n+        public MutableInterval toMutableInterval() {\n+            return null;\n+        }\n+        public Period toPeriod() {\n+            return null;\n+        }\n+        public Period toPeriod(PeriodType type) {\n+            return null;\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_Object_Chronology1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Interval base = new Interval(dt1, dt2);\n+        \n+        MutableInterval test = new MutableInterval(base, BuddhistChronology.getInstance());\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+        assertEquals(BuddhistChronology.getInstance(), test.getChronology());\n+    }\n+\n+    public void testConstructor_Object_Chronology2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Interval base = new Interval(dt1, dt2);\n+        \n+        MutableInterval test = new MutableInterval(base, null);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestMutableInterval_Updates.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.base.AbstractInterval;\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * This class is a Junit unit test for Instant.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestMutableInterval_Updates extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestMutableInterval_Updates.class);\n+    }\n+\n+    public TestMutableInterval_Updates(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetInterval_long_long1() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        test.setInterval(TEST_TIME1 - 1, TEST_TIME2 + 1);\n+        assertEquals(TEST_TIME1 - 1, test.getStartMillis());\n+        assertEquals(TEST_TIME2 + 1, test.getEndMillis());\n+    }\n+\n+    public void testSetInterval_long_long2() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        try {\n+            test.setInterval(TEST_TIME1 - 1, TEST_TIME1 - 2);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetInterval_RI_RI1() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        test.setInterval(new Instant(TEST_TIME1 - 1), new Instant(TEST_TIME2 + 1));\n+        assertEquals(TEST_TIME1 - 1, test.getStartMillis());\n+        assertEquals(TEST_TIME2 + 1, test.getEndMillis());\n+    }\n+\n+    public void testSetInterval_RI_RI2() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        try {\n+            test.setInterval(new Instant(TEST_TIME1 - 1), new Instant(TEST_TIME1 - 2));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testSetInterval_RI_RI3() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        test.setInterval(null, new Instant(TEST_TIME2 + 1));\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(TEST_TIME2 + 1, test.getEndMillis());\n+    }\n+\n+    public void testSetInterval_RI_RI4() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        test.setInterval(new Instant(TEST_TIME1 - 1), null);\n+        assertEquals(TEST_TIME1 - 1, test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    public void testSetInterval_RI_RI5() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        test.setInterval(null, null);\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetInterval_RInterval1() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        test.setInterval(new Interval(TEST_TIME1 - 1, TEST_TIME2 + 1));\n+        assertEquals(TEST_TIME1 - 1, test.getStartMillis());\n+        assertEquals(TEST_TIME2 + 1, test.getEndMillis());\n+    }\n+\n+    public void testSetInterval_RInterval2() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        try {\n+            test.setInterval(new MockBadInterval());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    class MockBadInterval extends AbstractInterval {\n+        public Chronology getChronology() {\n+            return ISOChronology.getInstance();\n+        }\n+        public long getStartMillis() {\n+            return TEST_TIME1 - 1;\n+        }\n+        public long getEndMillis() {\n+            return TEST_TIME1 - 2;\n+        }\n+    }\n+\n+    public void testSetInterval_RInterval3() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        try {\n+            test.setInterval(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testSetStartMillis_long1() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        test.setStartMillis(TEST_TIME1 - 1);\n+        assertEquals(TEST_TIME1 - 1, test.getStartMillis());\n+        assertEquals(TEST_TIME2, test.getEndMillis());\n+    }\n+\n+    public void testSetStartMillis_long2() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        try {\n+            test.setStartMillis(TEST_TIME2 + 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetStart_RI1() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        test.setStart(new Instant(TEST_TIME1 - 1));\n+        assertEquals(TEST_TIME1 - 1, test.getStartMillis());\n+        assertEquals(TEST_TIME2, test.getEndMillis());\n+    }\n+\n+    public void testSetStart_RI2() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        try {\n+            test.setStart(new Instant(TEST_TIME2 + 1));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testSetStart_RI3() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        test.setStart(null);\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(TEST_TIME2, test.getEndMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetEndMillis_long1() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        test.setEndMillis(TEST_TIME2 + 1);\n+        assertEquals(TEST_TIME1, test.getStartMillis());\n+        assertEquals(TEST_TIME2 + 1, test.getEndMillis());\n+    }\n+\n+    public void testSetEndMillis_long2() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        try {\n+            test.setEndMillis(TEST_TIME1 - 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetEnd_RI1() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        test.setEnd(new Instant(TEST_TIME2 + 1));\n+        assertEquals(TEST_TIME1, test.getStartMillis());\n+        assertEquals(TEST_TIME2 + 1, test.getEndMillis());\n+    }\n+\n+    public void testSetEnd_RI2() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        try {\n+            test.setEnd(new Instant(TEST_TIME1 - 1));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testSetEnd_RI3() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        test.setEnd(null);\n+        assertEquals(TEST_TIME1, test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetDurationAfterStart_long1() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        test.setDurationAfterStart(123L);\n+        assertEquals(TEST_TIME1, test.getStartMillis());\n+        assertEquals(TEST_TIME1 + 123L, test.getEndMillis());\n+    }\n+\n+    public void testSeDurationAfterStart_long2() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        try {\n+            test.setDurationAfterStart(-1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetDurationAfterStart_RI1() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        test.setDurationAfterStart(new Duration(123L));\n+        assertEquals(TEST_TIME1, test.getStartMillis());\n+        assertEquals(TEST_TIME1 + 123L, test.getEndMillis());\n+    }\n+\n+    public void testSeDurationAfterStart_RI2() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        try {\n+            test.setDurationAfterStart(new Duration(-1));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testSetDurationAfterStart_RI3() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        test.setDurationAfterStart(null);\n+        assertEquals(TEST_TIME1, test.getStartMillis());\n+        assertEquals(TEST_TIME1, test.getEndMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetDurationBeforeEnd_long1() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        test.setDurationBeforeEnd(123L);\n+        assertEquals(TEST_TIME2 - 123L, test.getStartMillis());\n+        assertEquals(TEST_TIME2, test.getEndMillis());\n+    }\n+\n+    public void testSeDurationBeforeEnd_long2() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        try {\n+            test.setDurationBeforeEnd(-1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetDurationBeforeEnd_RI1() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        test.setDurationBeforeEnd(new Duration(123L));\n+        assertEquals(TEST_TIME2 - 123L, test.getStartMillis());\n+        assertEquals(TEST_TIME2, test.getEndMillis());\n+    }\n+\n+    public void testSeDurationBeforeEnd_RI2() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        try {\n+            test.setDurationBeforeEnd(new Duration(-1));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testSetDurationBeforeEnd_RI3() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        test.setDurationBeforeEnd(null);\n+        assertEquals(TEST_TIME2, test.getStartMillis());\n+        assertEquals(TEST_TIME2, test.getEndMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetPeriodAfterStart_RI1() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        test.setPeriodAfterStart(new Period(123L));\n+        assertEquals(TEST_TIME1, test.getStartMillis());\n+        assertEquals(TEST_TIME1 + 123L, test.getEndMillis());\n+    }\n+\n+    public void testSePeriodAfterStart_RI2() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        try {\n+            test.setPeriodAfterStart(new Period(-1L));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testSetPeriodAfterStart_RI3() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        test.setPeriodAfterStart(null);\n+        assertEquals(TEST_TIME1, test.getStartMillis());\n+        assertEquals(TEST_TIME1, test.getEndMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetPeriodBeforeEnd_RI1() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        test.setPeriodBeforeEnd(new Period(123L));\n+        assertEquals(TEST_TIME2 - 123L, test.getStartMillis());\n+        assertEquals(TEST_TIME2, test.getEndMillis());\n+    }\n+\n+    public void testSePeriodBeforeEnd_RI2() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        try {\n+            test.setPeriodBeforeEnd(new Period(-1L));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testSetPeriodBeforeEnd_RI3() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        test.setPeriodBeforeEnd(null);\n+        assertEquals(TEST_TIME2, test.getStartMillis());\n+        assertEquals(TEST_TIME2, test.getEndMillis());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestMutablePeriod_Basics.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.base.BasePeriod;\n+\n+/**\n+ * This class is a Junit unit test for MutableDuration.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestMutablePeriod_Basics extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestMutablePeriod_Basics.class);\n+    }\n+\n+    public TestMutablePeriod_Basics(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetPeriodType() {\n+        MutablePeriod test = new MutablePeriod();\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+    }\n+\n+    public void testGetMethods() {\n+        MutablePeriod test = new MutablePeriod();\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testEqualsHashCode() {\n+        MutablePeriod test1 = new MutablePeriod(123L);\n+        MutablePeriod test2 = new MutablePeriod(123L);\n+        assertEquals(true, test1.equals(test2));\n+        assertEquals(true, test2.equals(test1));\n+        assertEquals(true, test1.equals(test1));\n+        assertEquals(true, test2.equals(test2));\n+        assertEquals(true, test1.hashCode() == test2.hashCode());\n+        assertEquals(true, test1.hashCode() == test1.hashCode());\n+        assertEquals(true, test2.hashCode() == test2.hashCode());\n+        \n+        MutablePeriod test3 = new MutablePeriod(321L);\n+        assertEquals(false, test1.equals(test3));\n+        assertEquals(false, test2.equals(test3));\n+        assertEquals(false, test3.equals(test1));\n+        assertEquals(false, test3.equals(test2));\n+        assertEquals(false, test1.hashCode() == test3.hashCode());\n+        assertEquals(false, test2.hashCode() == test3.hashCode());\n+        \n+        assertEquals(false, test1.equals(\"Hello\"));\n+        assertEquals(true, test1.equals(new MockMutablePeriod(123L)));\n+        assertEquals(false, test1.equals(new Period(123L, PeriodType.dayTime())));\n+    }\n+    \n+    class MockMutablePeriod extends BasePeriod {\n+        public MockMutablePeriod(long value) {\n+            super(value, null, null);\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        MutablePeriod test = new MutablePeriod(123L);\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        MutablePeriod result = (MutablePeriod) ois.readObject();\n+        ois.close();\n+        \n+        assertEquals(test, result);\n+    }\n+\n+//    //-----------------------------------------------------------------------\n+//    public void testAddTo1() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, 1);\n+//        expected = ISOChronology.getInstance().months().add(expected, 2);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+//        expected = ISOChronology.getInstance().days().add(expected, 4);\n+//        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+//        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+//        \n+//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+//        long added = test.addTo(TEST_TIME_NOW, 1);\n+//        assertEquals(expected, added);\n+//    }\n+//    \n+//    public void testAddTo2() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, -2);\n+//        expected = ISOChronology.getInstance().months().add(expected, -4);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+//        expected = ISOChronology.getInstance().days().add(expected, -8);\n+//        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+//        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+//        \n+//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+//        long added = test.addTo(TEST_TIME_NOW, -2);\n+//        assertEquals(expected, added);\n+//    }\n+//    \n+//    public void testAddTo3() {\n+//        long expected = TEST_TIME_NOW;\n+//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+//        long added = test.addTo(TEST_TIME_NOW, 0);\n+//        assertEquals(expected, added);\n+//    }\n+//    \n+//    public void testAddTo4() {\n+//        long expected = TEST_TIME_NOW + 100L;\n+//        MutablePeriod test = new MutablePeriod(100L);\n+//        long added = test.addTo(TEST_TIME_NOW, 1);\n+//        assertEquals(expected, added);\n+//    }\n+//    \n+//    //-----------------------------------------------------------------------\n+//    public void testAddToWithChronology1() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, 1);\n+//        expected = ISOChronology.getInstance().months().add(expected, 2);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+//        expected = ISOChronology.getInstance().days().add(expected, 4);\n+//        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+//        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+//        \n+//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+//        long added = test.addTo(TEST_TIME_NOW, 1, ISOChronology.getInstance());\n+//        assertEquals(expected, added);\n+//    }\n+//    \n+//    public void testAddToWithChronology2() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstanceUTC().years().add(expected, -2);\n+//        expected = ISOChronology.getInstanceUTC().months().add(expected, -4);\n+//        expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);\n+//        expected = ISOChronology.getInstanceUTC().days().add(expected, -8);\n+//        expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);\n+//        expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);\n+//        expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);\n+//        expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n+//        \n+//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n+//        long added = test.addTo(TEST_TIME_NOW, -2, ISOChronology.getInstanceUTC());  // chrono specified so use it\n+//        assertEquals(expected, added);\n+//    }\n+//    \n+//    public void testAddToWithChronology3() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, -2);\n+//        expected = ISOChronology.getInstance().months().add(expected, -4);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+//        expected = ISOChronology.getInstance().days().add(expected, -8);\n+//        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+//        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+//        \n+//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n+//        long added = test.addTo(TEST_TIME_NOW, -2, null);  // no chrono so use default\n+//        assertEquals(expected, added);\n+//    }\n+//    \n+//    //-----------------------------------------------------------------------\n+//    public void testAddToRI1() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, 1);\n+//        expected = ISOChronology.getInstance().months().add(expected, 2);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+//        expected = ISOChronology.getInstance().days().add(expected, 4);\n+//        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+//        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+//        \n+//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+//        DateTime added = test.addTo(new Instant(), 1);  // Instant has no time zone, use default\n+//        assertEquals(expected, added.getMillis());\n+//        assertEquals(ISOChronology.getInstance(), added.getChronology());\n+//    }\n+//    \n+//    public void testAddToRI2() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, -2);\n+//        expected = ISOChronology.getInstance().months().add(expected, -4);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+//        expected = ISOChronology.getInstance().days().add(expected, -8);\n+//        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+//        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+//        \n+//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n+//        DateTime added = test.addTo(new Instant(), -2);  // Instant has no time zone, use default\n+//        assertEquals(expected, added.getMillis());\n+//        assertEquals(ISOChronology.getInstance(), added.getChronology());\n+//    }\n+//    \n+//    public void testAddToRI3() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstanceUTC().years().add(expected, -2);\n+//        expected = ISOChronology.getInstanceUTC().months().add(expected, -4);\n+//        expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);\n+//        expected = ISOChronology.getInstanceUTC().days().add(expected, -8);\n+//        expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);\n+//        expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);\n+//        expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);\n+//        expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n+//        \n+//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n+//        DateTime added = test.addTo(new DateTime(ISOChronology.getInstanceUTC()), -2);  // DateTime has UTC time zone\n+//        assertEquals(expected, added.getMillis());\n+//        assertEquals(ISOChronology.getInstanceUTC(), added.getChronology());\n+//    }\n+//    \n+//    public void testAddToRI4() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance(PARIS).years().add(expected, -2);\n+//        expected = ISOChronology.getInstance(PARIS).months().add(expected, -4);\n+//        expected = ISOChronology.getInstance(PARIS).weeks().add(expected, -6);\n+//        expected = ISOChronology.getInstance(PARIS).days().add(expected, -8);\n+//        expected = ISOChronology.getInstance(PARIS).hours().add(expected, -10);\n+//        expected = ISOChronology.getInstance(PARIS).minutes().add(expected, -12);\n+//        expected = ISOChronology.getInstance(PARIS).seconds().add(expected, -14);\n+//        expected = ISOChronology.getInstance(PARIS).millis().add(expected, -16);\n+//        \n+//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n+//        DateTime added = test.addTo(new DateTime(PARIS), -2);  // DateTime has PARIS time zone\n+//        assertEquals(expected, added.getMillis());\n+//        assertEquals(ISOChronology.getInstance(PARIS), added.getChronology());\n+//    }\n+//    \n+//    public void testAddToRI5() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, -2);\n+//        expected = ISOChronology.getInstance().months().add(expected, -4);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+//        expected = ISOChronology.getInstance().days().add(expected, -8);\n+//        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+//        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+//        \n+//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n+//        DateTime added = test.addTo(null, -2);  // null has no time zone, use default\n+//        assertEquals(expected, added.getMillis());\n+//        assertEquals(ISOChronology.getInstance(), added.getChronology());\n+//    }\n+//    \n+//    //-----------------------------------------------------------------------\n+//    public void testAddIntoRWI1() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, 1);\n+//        expected = ISOChronology.getInstance().months().add(expected, 2);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+//        expected = ISOChronology.getInstance().days().add(expected, 4);\n+//        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+//        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+//        \n+//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+//        MutableDateTime mdt = new MutableDateTime();\n+//        test.addInto(mdt, 1);\n+//        assertEquals(expected, mdt.getMillis());\n+//    }\n+//    \n+//    public void testAddIntoRWI2() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, -2);\n+//        expected = ISOChronology.getInstance().months().add(expected, -4);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+//        expected = ISOChronology.getInstance().days().add(expected, -8);\n+//        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+//        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+//        \n+//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n+//        MutableDateTime mdt = new MutableDateTime();\n+//        test.addInto(mdt, -2);  // MutableDateTime has a chronology, use it\n+//        assertEquals(expected, mdt.getMillis());\n+//    }\n+//    \n+//    public void testAddIntoRWI3() {\n+//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+//        try {\n+//            test.addInto(null, 1);\n+//            fail();\n+//        } catch (IllegalArgumentException ex) {}\n+//    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        assertEquals(\"P1Y2M3W4DT5H6M7.008S\", test.toString());\n+        \n+        test = new MutablePeriod(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"PT0S\", test.toString());\n+        \n+        test = new MutablePeriod(12345L);\n+        assertEquals(\"PT12.345S\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToPeriod() {\n+        MutablePeriod test = new MutablePeriod(123L);\n+        Period result = test.toPeriod();\n+        assertEquals(test, result);\n+    }\n+\n+    public void testToMutablePeriod() {\n+        MutablePeriod test = new MutablePeriod(123L);\n+        MutablePeriod result = test.toMutablePeriod();\n+        assertEquals(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+//    public void testToDurationMillisFrom() {\n+//        MutablePeriod test = new MutablePeriod(123L);\n+//        assertEquals(123L, test.toDurationMillisFrom(0L, null));\n+//    }\n+\n+    public void testToDurationFrom() {\n+        MutablePeriod test = new MutablePeriod(123L);\n+        assertEquals(new Duration(123L), test.toDurationFrom(new Instant(0L)));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testCopy() {\n+        MutablePeriod test = new MutablePeriod(123L);\n+        MutablePeriod copy = test.copy();\n+        assertEquals(test.getPeriodType(), copy.getPeriodType());\n+        assertEquals(test, copy);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testClone() {\n+        MutablePeriod test = new MutablePeriod(123L);\n+        MutablePeriod copy = (MutablePeriod) test.clone();\n+        assertEquals(test.getPeriodType(), copy.getPeriodType());\n+        assertEquals(test, copy);\n+    }\n+    \n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestMutablePeriod_Constructors.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * This class is a JUnit test for MutableDuration.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestMutablePeriod_Constructors extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestMutablePeriod_Constructors.class);\n+    }\n+\n+    public TestMutablePeriod_Constructors(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor ()\n+     */\n+    public void testConstructor1() throws Throwable {\n+        MutablePeriod test = new MutablePeriod();\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (PeriodType)\n+     */\n+    public void testConstructor_PeriodType1() throws Throwable {\n+        MutablePeriod test = new MutablePeriod(PeriodType.yearMonthDayTime());\n+        assertEquals(PeriodType.yearMonthDayTime(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testConstructor_PeriodType2() throws Throwable {\n+        MutablePeriod test = new MutablePeriod((PeriodType) null);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long1() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        MutablePeriod test = new MutablePeriod(length);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals((4 * 24) + 5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    public void testConstructor_long2() throws Throwable {\n+        long length =\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        MutablePeriod test = new MutablePeriod(length);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    public void testConstructor_long3() throws Throwable {\n+        long length =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        MutablePeriod test = new MutablePeriod(length);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        // only time fields are precise in AllType\n+        assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals((450 * 24) + 5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_PeriodType1() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        MutablePeriod test = new MutablePeriod(length, (PeriodType) null);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals((4 * 24) + 5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    public void testConstructor_long_PeriodType2() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        MutablePeriod test = new MutablePeriod(length, PeriodType.millis());\n+        assertEquals(PeriodType.millis(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(length, test.getMillis());\n+    }\n+\n+    public void testConstructor_long_PeriodType3() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        MutablePeriod test = new MutablePeriod(length, PeriodType.standard());\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals((4 * 24) + 5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    public void testConstructor_long_PeriodType4() throws Throwable {\n+        long length =\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        MutablePeriod test = new MutablePeriod(length, PeriodType.standard().withMillisRemoved());\n+        assertEquals(PeriodType.standard().withMillisRemoved(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_Chronology1() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        MutablePeriod test = new MutablePeriod(length, ISOChronology.getInstance());\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals((4 * 24) + 5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    public void testConstructor_long_Chronology2() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        MutablePeriod test = new MutablePeriod(length, ISOChronology.getInstanceUTC());\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    public void testConstructor_long_Chronology3() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        MutablePeriod test = new MutablePeriod(length, (Chronology) null);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals((4 * 24) + 5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_PeriodType_Chronology1() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        MutablePeriod test = new MutablePeriod(length, PeriodType.time().withMillisRemoved(), ISOChronology.getInstance());\n+        assertEquals(PeriodType.time().withMillisRemoved(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals((4 * 24) + 5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testConstructor_long_PeriodType_Chronology2() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        MutablePeriod test = new MutablePeriod(length, PeriodType.standard(), ISOChronology.getInstanceUTC());\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    public void testConstructor_long_PeriodType_Chronology3() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        MutablePeriod test = new MutablePeriod(length, PeriodType.standard(), (Chronology) null);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals((4 * 24) + 5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    public void testConstructor_long_PeriodType_Chronology4() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        MutablePeriod test = new MutablePeriod(length, (PeriodType) null, (Chronology) null);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals((4 * 24) + 5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (4ints)\n+     */\n+    public void testConstructor_4int1() throws Throwable {\n+        MutablePeriod test = new MutablePeriod(5, 6, 7, 8);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (8ints)\n+     */\n+    public void testConstructor_8int1() throws Throwable {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (8ints)\n+     */\n+    public void testConstructor_8int__PeriodType1() throws Throwable {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, null);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    public void testConstructor_8int__PeriodType2() throws Throwable {\n+        MutablePeriod test = new MutablePeriod(0, 0, 0, 0, 5, 6, 7, 8, PeriodType.dayTime());\n+        assertEquals(PeriodType.dayTime(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    public void testConstructor_8int__PeriodType3() throws Throwable {\n+        try {\n+            new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.dayTime());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_long1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_long_long2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_long_PeriodType1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), (PeriodType) null);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_long_long_PeriodType2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2004, 7, 10, 1, 1, 1, 1);\n+        MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), PeriodType.dayTime());\n+        assertEquals(PeriodType.dayTime(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(31, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_long_long_PeriodType3() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2004, 6, 9, 1, 1, 1, 1);\n+        MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), PeriodType.standard().withMillisRemoved());\n+        assertEquals(PeriodType.standard().withMillisRemoved(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_long_Chronology1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance());\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance());\n+        MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance());\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_long_long_Chronology2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), (Chronology) null);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_long_PeriodType_Chronology1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance());\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance());\n+        MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), (PeriodType) null, CopticChronology.getInstance());\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_long_long_PeriodType_Chronology2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), (PeriodType) null, null);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RI_RI1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MutablePeriod test = new MutablePeriod(dt1, dt2);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_RI_RI2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        MutablePeriod test = new MutablePeriod(dt1, dt2);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_RI_RI3() throws Throwable {\n+        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n+        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        MutablePeriod test = new MutablePeriod(dt1, dt2);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(3, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_RI_RI4() throws Throwable {\n+        DateTime dt1 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        DateTime dt2 = null;  // 2002-06-09T01:00+01:00\n+        MutablePeriod test = new MutablePeriod(dt1, dt2);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(-3, test.getYears());\n+        assertEquals(-1, test.getMonths());\n+        assertEquals(-1, test.getWeeks());\n+        assertEquals(-1, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(-1, test.getMinutes());\n+        assertEquals(-1, test.getSeconds());\n+        assertEquals(-1, test.getMillis());\n+    }\n+\n+    public void testConstructor_RI_RI5() throws Throwable {\n+        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n+        DateTime dt2 = null;  // 2002-06-09T01:00+01:00\n+        MutablePeriod test = new MutablePeriod(dt1, dt2);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RI_RI_PeriodType1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MutablePeriod test = new MutablePeriod(dt1, dt2, null);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_RI_RI_PeriodType2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2004, 7, 10, 1, 1, 1, 1);\n+        MutablePeriod test = new MutablePeriod(dt1, dt2, PeriodType.dayTime());\n+        assertEquals(PeriodType.dayTime(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(31, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_RI_RI_PeriodType3() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2004, 6, 9, 1, 1, 1, 1);\n+        MutablePeriod test = new MutablePeriod(dt1, dt2, PeriodType.standard().withMillisRemoved());\n+        assertEquals(PeriodType.standard().withMillisRemoved(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testConstructor_RI_RI_PeriodType4() throws Throwable {\n+        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n+        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        MutablePeriod test = new MutablePeriod(dt1, dt2, PeriodType.standard());\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(3, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_RI_RI_PeriodType5() throws Throwable {\n+        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n+        DateTime dt2 = null;  // 2002-06-09T01:00+01:00\n+        MutablePeriod test = new MutablePeriod(dt1, dt2, PeriodType.standard());\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RI_RD1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Duration dur = new Interval(dt1, dt2).toDuration();\n+        MutablePeriod test = new MutablePeriod(dt1, dur);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_RI_RD2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        Duration dur = null;\n+        MutablePeriod test = new MutablePeriod(dt1, dur);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RI_RD_PeriodType1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Duration dur = new Interval(dt1, dt2).toDuration();\n+        MutablePeriod test = new MutablePeriod(dt1, dur, PeriodType.yearDayTime());\n+        assertEquals(PeriodType.yearDayTime(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(31, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_RI_RD_PeriodType2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        Duration dur = null;\n+        MutablePeriod test = new MutablePeriod(dt1, dur, (PeriodType) null);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (Object)\n+     */\n+    public void testConstructor_Object1() throws Throwable {\n+        MutablePeriod test = new MutablePeriod(\"P1Y2M3D\");\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(3, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testConstructor_Object2() throws Throwable {\n+        MutablePeriod test = new MutablePeriod((Object) null);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testConstructor_Object3() throws Throwable {\n+        MutablePeriod test = new MutablePeriod(new Period(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.dayTime()));\n+        assertEquals(PeriodType.dayTime(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(2, test.getMinutes());\n+        assertEquals(3, test.getSeconds());\n+        assertEquals(4, test.getMillis());\n+    }\n+\n+    public void testConstructor_Object4() throws Throwable {\n+        Period base = new Period(1, 1, 0, 1, 1, 1, 1, 1, PeriodType.standard());\n+        MutablePeriod test = new MutablePeriod(base);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (Object,PeriodType)\n+     */\n+    public void testConstructor_Object_PeriodType1() throws Throwable {\n+        MutablePeriod test = new MutablePeriod(\"P1Y2M3D\", PeriodType.yearMonthDayTime());\n+        assertEquals(PeriodType.yearMonthDayTime(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(3, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testConstructor_Object_PeriodType2() throws Throwable {\n+        MutablePeriod test = new MutablePeriod((Object) null, PeriodType.yearMonthDayTime());\n+        assertEquals(PeriodType.yearMonthDayTime(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testConstructor_Object_PeriodType3() throws Throwable {\n+        MutablePeriod test = new MutablePeriod(new Period(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.dayTime()), PeriodType.yearMonthDayTime());\n+        assertEquals(PeriodType.yearMonthDayTime(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(2, test.getMinutes());\n+        assertEquals(3, test.getSeconds());\n+        assertEquals(4, test.getMillis());\n+    }\n+\n+    public void testConstructor_Object_PeriodType4() throws Throwable {\n+        MutablePeriod test = new MutablePeriod(new Period(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.dayTime()), (PeriodType) null);\n+        assertEquals(PeriodType.dayTime(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(2, test.getMinutes());\n+        assertEquals(3, test.getSeconds());\n+        assertEquals(4, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_Object_Chronology1() throws Throwable {\n+        long length =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        MutablePeriod test = new MutablePeriod(new Duration(length), ISOChronology.getInstance());\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals((450 * 24) + 5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    public void testConstructor_Object_Chronology2() throws Throwable {\n+        long length =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        MutablePeriod test = new MutablePeriod(new Duration(length), ISOChronology.getInstanceUTC());\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n+        assertEquals(0, test.getMonths());\n+        assertEquals(64, test.getWeeks());\n+        assertEquals(2, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestMutablePeriod_Updates.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * This class is a JUnit test for MutableDuration.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestMutablePeriod_Updates extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestMutablePeriod_Updates.class);\n+    }\n+\n+    public TestMutablePeriod_Updates(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testClear() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.clear();\n+        assertEquals(new MutablePeriod(), test);\n+        \n+        test = new MutablePeriod(1, 2, 0, 4, 5, 6, 7, 8, PeriodType.yearMonthDayTime());\n+        test.clear();\n+        assertEquals(new MutablePeriod(PeriodType.yearMonthDayTime()), test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddYears() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addYears(10);\n+        assertEquals(11, test.getYears());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addYears(-10);\n+        assertEquals(-9, test.getYears());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addYears(0);\n+        assertEquals(1, test.getYears());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddMonths() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addMonths(10);\n+        assertEquals(12, test.getMonths());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addMonths(-10);\n+        assertEquals(-8, test.getMonths());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addMonths(0);\n+        assertEquals(2, test.getMonths());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddWeeks() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addWeeks(10);\n+        assertEquals(13, test.getWeeks());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addWeeks(-10);\n+        assertEquals(-7, test.getWeeks());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addWeeks(0);\n+        assertEquals(3, test.getWeeks());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddDays() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addDays(10);\n+        assertEquals(14, test.getDays());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addDays(-10);\n+        assertEquals(-6, test.getDays());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addDays(0);\n+        assertEquals(4, test.getDays());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddHours() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addHours(10);\n+        assertEquals(15, test.getHours());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addHours(-10);\n+        assertEquals(-5, test.getHours());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addHours(0);\n+        assertEquals(5, test.getHours());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddMinutes() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addMinutes(10);\n+        assertEquals(16, test.getMinutes());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addMinutes(-10);\n+        assertEquals(-4, test.getMinutes());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addMinutes(0);\n+        assertEquals(6, test.getMinutes());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddSeconds() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addSeconds(10);\n+        assertEquals(17, test.getSeconds());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addSeconds(-10);\n+        assertEquals(-3, test.getSeconds());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addSeconds(0);\n+        assertEquals(7, test.getSeconds());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddMillis() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addMillis(10);\n+        assertEquals(18, test.getMillis());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addMillis(-10);\n+        assertEquals(-2, test.getMillis());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addMillis(0);\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetYears() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setYears(10);\n+        assertEquals(10, test.getYears());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setYears(-10);\n+        assertEquals(-10, test.getYears());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setYears(0);\n+        assertEquals(0, test.getYears());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setYears(1);\n+        assertEquals(1, test.getYears());\n+        \n+        test = new MutablePeriod(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.millis());\n+        try {\n+            test.setYears(1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetMonths() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setMonths(10);\n+        assertEquals(10, test.getMonths());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setMonths(-10);\n+        assertEquals(-10, test.getMonths());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setMonths(0);\n+        assertEquals(0, test.getMonths());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setMonths(2);\n+        assertEquals(2, test.getMonths());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetWeeks() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setWeeks(10);\n+        assertEquals(10, test.getWeeks());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setWeeks(-10);\n+        assertEquals(-10, test.getWeeks());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setWeeks(0);\n+        assertEquals(0, test.getWeeks());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setWeeks(3);\n+        assertEquals(3, test.getWeeks());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetDays() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setDays(10);\n+        assertEquals(10, test.getDays());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setDays(-10);\n+        assertEquals(-10, test.getDays());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setDays(0);\n+        assertEquals(0, test.getDays());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setDays(4);\n+        assertEquals(4, test.getDays());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetHours() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setHours(10);\n+        assertEquals(10, test.getHours());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setHours(-10);\n+        assertEquals(-10, test.getHours());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setHours(0);\n+        assertEquals(0, test.getHours());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setHours(5);\n+        assertEquals(5, test.getHours());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetMinutes() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setMinutes(10);\n+        assertEquals(10, test.getMinutes());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setMinutes(-10);\n+        assertEquals(-10, test.getMinutes());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setMinutes(0);\n+        assertEquals(0, test.getMinutes());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setMinutes(6);\n+        assertEquals(6, test.getMinutes());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetSeconds() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setSeconds(10);\n+        assertEquals(10, test.getSeconds());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setSeconds(-10);\n+        assertEquals(-10, test.getSeconds());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setSeconds(0);\n+        assertEquals(0, test.getSeconds());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setSeconds(7);\n+        assertEquals(7, test.getSeconds());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetMillis() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setMillis(10);\n+        assertEquals(10, test.getMillis());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setMillis(-10);\n+        assertEquals(-10, test.getMillis());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setMillis(0);\n+        assertEquals(0, test.getMillis());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setMillis(8);\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSet_Field() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.set(DurationFieldType.years(), 10);\n+        assertEquals(10, test.getYears());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        try {\n+            test.set(null, 10);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAdd_Field() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.add(DurationFieldType.years(), 10);\n+        assertEquals(11, test.getYears());\n+        \n+        test = new MutablePeriod(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.millis());\n+        test.add(DurationFieldType.years(), 0);\n+        assertEquals(0, test.getYears());\n+        assertEquals(1, test.getMillis());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        try {\n+            test.add(null, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        try {\n+            test.add(null, 10);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetPeriod_8ints1() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setPeriod(11, 12, 13, 14, 15, 16, 17, 18);\n+        assertEquals(11, test.getYears());\n+        assertEquals(12, test.getMonths());\n+        assertEquals(13, test.getWeeks());\n+        assertEquals(14, test.getDays());\n+        assertEquals(15, test.getHours());\n+        assertEquals(16, test.getMinutes());\n+        assertEquals(17, test.getSeconds());\n+        assertEquals(18, test.getMillis());\n+    }\n+\n+    public void testSetPeriod_8ints2() {\n+        MutablePeriod test = new MutablePeriod(100L, PeriodType.millis());\n+        try {\n+            test.setPeriod(11, 12, 13, 14, 15, 16, 17, 18);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(100, test.getMillis());\n+    }\n+\n+    public void testSetPeriod_8ints3() {\n+        MutablePeriod test = new MutablePeriod(100L, PeriodType.millis());\n+        test.setPeriod(0, 0, 0, 0, 0, 0, 0, 18);\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(18, test.getMillis());\n+    }\n+\n+    public void testSetPeriod_8ints4() {\n+        MutablePeriod test = new MutablePeriod(0, 0, 0, 0, 5, 6, 7, 8);\n+        test.setPeriod(11, 12, 13, 14, 15, 16, 17, 18);\n+        assertEquals(11, test.getYears());\n+        assertEquals(12, test.getMonths());\n+        assertEquals(13, test.getWeeks());\n+        assertEquals(14, test.getDays());\n+        assertEquals(15, test.getHours());\n+        assertEquals(16, test.getMinutes());\n+        assertEquals(17, test.getSeconds());\n+        assertEquals(18, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetPeriod_RP1() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setPeriod(new MutablePeriod(11, 12, 13, 14, 15, 16, 17, 18));\n+        assertEquals(11, test.getYears());\n+        assertEquals(12, test.getMonths());\n+        assertEquals(13, test.getWeeks());\n+        assertEquals(14, test.getDays());\n+        assertEquals(15, test.getHours());\n+        assertEquals(16, test.getMinutes());\n+        assertEquals(17, test.getSeconds());\n+        assertEquals(18, test.getMillis());\n+    }\n+\n+    public void testSetPeriod_RP2() {\n+        MutablePeriod test = new MutablePeriod(100L, PeriodType.millis());\n+        try {\n+            test.setPeriod(new MutablePeriod(11, 12, 13, 14, 15, 16, 17, 18));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(100, test.getMillis());\n+    }\n+\n+    public void testSetPeriod_RP3() {\n+        MutablePeriod test = new MutablePeriod(100L, PeriodType.millis());\n+        test.setPeriod(new MutablePeriod(0, 0, 0, 0, 0, 0, 0, 18));\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(18, test.getMillis());\n+    }\n+\n+    public void testSetPeriod_RP4() {\n+        MutablePeriod test = new MutablePeriod(0, 0, 0, 0, 5, 6, 7, 8);\n+        test.setPeriod(new MutablePeriod(11, 12, 13, 14, 15, 16, 17, 18));\n+        assertEquals(11, test.getYears());\n+        assertEquals(12, test.getMonths());\n+        assertEquals(13, test.getWeeks());\n+        assertEquals(14, test.getDays());\n+        assertEquals(15, test.getHours());\n+        assertEquals(16, test.getMinutes());\n+        assertEquals(17, test.getSeconds());\n+        assertEquals(18, test.getMillis());\n+    }\n+\n+    public void testSetPeriod_RP5() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setPeriod((ReadablePeriod) null);\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetPeriod_long_long1() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20);\n+        test.setPeriod(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testSetPeriod_long_long2() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20);\n+        test.setPeriod(dt2.getMillis(), dt1.getMillis());\n+        assertEquals(-1, test.getYears());\n+        assertEquals(-1, test.getMonths());\n+        assertEquals(-1, test.getWeeks());\n+        assertEquals(-1, test.getDays());\n+        assertEquals(-1, test.getHours());\n+        assertEquals(-1, test.getMinutes());\n+        assertEquals(-1, test.getSeconds());\n+        assertEquals(-1, test.getMillis());\n+    }\n+\n+    public void testSetPeriod_long_long3() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        test.setPeriod(dt1.getMillis(), dt1.getMillis());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testSetPeriod_long_long_NoYears() {\n+        MutablePeriod test = new MutablePeriod(PeriodType.standard().withYearsRemoved());\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20);\n+        test.setPeriod(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(0, test.getYears());\n+        assertEquals(13, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testSetPeriod_long_long_NoMonths() {\n+        MutablePeriod test = new MutablePeriod(PeriodType.standard().withMonthsRemoved());\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20);\n+        test.setPeriod(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(1, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(5, test.getWeeks());\n+        assertEquals(3, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testSetPeriod_long_long_NoWeeks() {\n+        MutablePeriod test = new MutablePeriod(PeriodType.standard().withWeeksRemoved());\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20);\n+        test.setPeriod(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(8, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testSetPeriod_long_long_NoDays() {\n+        MutablePeriod test = new MutablePeriod(PeriodType.standard().withDaysRemoved());\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20);\n+        test.setPeriod(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(25, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testSetPeriod_long_long_NoHours() {\n+        MutablePeriod test = new MutablePeriod(PeriodType.standard().withHoursRemoved());\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20);\n+        test.setPeriod(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(61, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testSetPeriod_long_long_NoMinutes() {\n+        MutablePeriod test = new MutablePeriod(PeriodType.standard().withMinutesRemoved());\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20);\n+        test.setPeriod(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(61, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testSetPeriod_long_long_NoSeconds() {\n+        MutablePeriod test = new MutablePeriod(PeriodType.standard().withSecondsRemoved());\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20);\n+        test.setPeriod(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(1001, test.getMillis());\n+    }\n+\n+    public void testSetPeriod_long_long_NoMillis() {\n+        MutablePeriod test = new MutablePeriod(PeriodType.standard().withMillisRemoved());\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20);\n+        test.setPeriod(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetPeriod_RI_RI1() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20);\n+        test.setPeriod(dt1, dt2);\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testSetPeriod_RI_RI2() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20);\n+        test.setPeriod(dt2, dt1);\n+        assertEquals(-1, test.getYears());\n+        assertEquals(-1, test.getMonths());\n+        assertEquals(-1, test.getWeeks());\n+        assertEquals(-1, test.getDays());\n+        assertEquals(-1, test.getHours());\n+        assertEquals(-1, test.getMinutes());\n+        assertEquals(-1, test.getSeconds());\n+        assertEquals(-1, test.getMillis());\n+    }\n+\n+    public void testSetPeriod_RI_RI3() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        test.setPeriod(dt1, dt1);\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetPeriod_RInterval1() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20);\n+        test.setPeriod(new Interval(dt1, dt2));\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testSetPeriod_RInterval2() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setPeriod((ReadableInterval) null);\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetPeriod_long1() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setPeriod(100L);\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(100, test.getMillis());\n+    }\n+\n+    public void testSetPeriod_long2() {\n+        MutablePeriod test = new MutablePeriod();\n+        test.setPeriod(\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L);\n+        // only time fields are precise\n+        assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals((450 * 24) + 5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+//    public void testSetPeriod_long3() {\n+//        MutablePeriod test = new MutablePeriod(PeriodType.getPreciseYearMonthType());\n+//        test.setPeriod(\n+//            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+//            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+//            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+//            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L);\n+//        assertEquals(1, test.getYears());\n+//        assertEquals(2, test.getMonths());\n+//        assertEquals(0, test.getWeeks());\n+//        assertEquals(25, test.getDays());\n+//        assertEquals(5, test.getHours());\n+//        assertEquals(6, test.getMinutes());\n+//        assertEquals(7, test.getSeconds());\n+//        assertEquals(8, test.getMillis());\n+//    }\n+//\n+//    public void testSetPeriod_long4() {\n+//        MutablePeriod test = new MutablePeriod(PeriodType.getPreciseYearWeekType());\n+//        test.setPeriod(\n+//            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+//            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+//            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+//            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L);\n+//        assertEquals(1, test.getYears());\n+//        assertEquals(0, test.getMonths());\n+//        assertEquals(12, test.getWeeks());\n+//        assertEquals(1, test.getDays());\n+//        assertEquals(5, test.getHours());\n+//        assertEquals(6, test.getMinutes());\n+//        assertEquals(7, test.getSeconds());\n+//        assertEquals(8, test.getMillis());\n+//    }\n+//\n+//    public void testSetPeriod_long_NoYears() {\n+//        long ms =\n+//            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+//            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+//            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+//            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+//        MutablePeriod test = new MutablePeriod(PeriodType.getPreciseYearMonthType().withYearsRemoved());\n+//        test.setPeriod(ms);\n+//        assertEquals(0, test.getYears());\n+//        assertEquals(15, test.getMonths()); // totalDays=365+85=450=15*30\n+//        assertEquals(0, test.getWeeks());\n+//        assertEquals(0, test.getDays());\n+//        assertEquals(5, test.getHours());\n+//        assertEquals(6, test.getMinutes());\n+//        assertEquals(7, test.getSeconds());\n+//        assertEquals(8, test.getMillis());\n+//        assertEquals(ms, test.toDurationMillis());\n+//    }\n+//\n+//    public void testSetPeriod_long_NoMonths() {\n+//        long ms =\n+//            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+//            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+//            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+//            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+//        MutablePeriod test = new MutablePeriod(PeriodType.getPreciseYearMonthType().withMonthsRemoved());\n+//        test.setPeriod(ms);\n+//        assertEquals(1, test.getYears());\n+//        assertEquals(0, test.getMonths());\n+//        assertEquals(0, test.getWeeks());\n+//        assertEquals(85, test.getDays());\n+//        assertEquals(5, test.getHours());\n+//        assertEquals(6, test.getMinutes());\n+//        assertEquals(7, test.getSeconds());\n+//        assertEquals(8, test.getMillis());\n+//        assertEquals(ms, test.toDurationMillis());\n+//    }\n+//\n+//    public void testSetPeriod_long_NoWeeks() {\n+//        long ms =\n+//            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+//            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+//            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+//            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+//        MutablePeriod test = new MutablePeriod(PeriodType.getPreciseYearWeekType().withWeeksRemoved());\n+//        test.setPeriod(ms);\n+//        assertEquals(1, test.getYears());\n+//        assertEquals(0, test.getMonths());\n+//        assertEquals(0, test.getWeeks());\n+//        assertEquals(85, test.getDays());\n+//        assertEquals(5, test.getHours());\n+//        assertEquals(6, test.getMinutes());\n+//        assertEquals(7, test.getSeconds());\n+//        assertEquals(8, test.getMillis());\n+//        assertEquals(ms, test.toDurationMillis());\n+//    }\n+//\n+//    public void testSetPeriod_long_NoDays() {\n+//        long ms =\n+//            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+//            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+//            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+//            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+//        MutablePeriod test = new MutablePeriod(PeriodType.getPreciseYearMonthType().withDaysRemoved());\n+//        test.setPeriod(ms);\n+//        assertEquals(1, test.getYears());\n+//        assertEquals(2, test.getMonths());\n+//        assertEquals(0, test.getWeeks());\n+//        assertEquals(0, test.getDays());\n+//        assertEquals(5 + 25 * 24, test.getHours());\n+//        assertEquals(6, test.getMinutes());\n+//        assertEquals(7, test.getSeconds());\n+//        assertEquals(8, test.getMillis());\n+//        assertEquals(ms, test.toDurationMillis());\n+//    }\n+//\n+//    public void testSetPeriod_long_NoHours() {\n+//        long ms =\n+//            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+//            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+//            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+//            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+//        MutablePeriod test = new MutablePeriod(PeriodType.getPreciseYearMonthType().withHoursRemoved());\n+//        test.setPeriod(ms);\n+//        assertEquals(1, test.getYears());\n+//        assertEquals(2, test.getMonths());\n+//        assertEquals(0, test.getWeeks());\n+//        assertEquals(25, test.getDays());\n+//        assertEquals(0, test.getHours());\n+//        assertEquals(6 + 5 * 60, test.getMinutes());\n+//        assertEquals(7, test.getSeconds());\n+//        assertEquals(8, test.getMillis());\n+//        assertEquals(ms, test.toDurationMillis());\n+//    }\n+//\n+//    public void testSetPeriod_long_NoMinutes() {\n+//        long ms =\n+//            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+//            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+//            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+//            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+//        MutablePeriod test = new MutablePeriod(PeriodType.getPreciseYearMonthType().withMinutesRemoved());\n+//        test.setPeriod(ms);\n+//        assertEquals(1, test.getYears());\n+//        assertEquals(2, test.getMonths());\n+//        assertEquals(0, test.getWeeks());\n+//        assertEquals(25, test.getDays());\n+//        assertEquals(5, test.getHours());\n+//        assertEquals(0, test.getMinutes());\n+//        assertEquals(7 + 6 * 60, test.getSeconds());\n+//        assertEquals(8, test.getMillis());\n+//        assertEquals(ms, test.toDurationMillis());\n+//    }\n+//\n+//    public void testSetPeriod_long_NoSeconds() {\n+//        long ms =\n+//            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+//            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+//            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+//            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+//        MutablePeriod test = new MutablePeriod(PeriodType.getPreciseYearMonthType().withSecondsRemoved());\n+//        test.setPeriod(ms);\n+//        assertEquals(1, test.getYears());\n+//        assertEquals(2, test.getMonths());\n+//        assertEquals(0, test.getWeeks());\n+//        assertEquals(25, test.getDays());\n+//        assertEquals(5, test.getHours());\n+//        assertEquals(6, test.getMinutes());\n+//        assertEquals(0, test.getSeconds());\n+//        assertEquals(8 + 7 * 1000, test.getMillis());\n+//        assertEquals(ms, test.toDurationMillis());\n+//    }\n+//\n+//    public void testSetPeriod_long_NoMillis() {\n+//        long ms =\n+//            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+//            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+//            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+//            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+//        MutablePeriod test = new MutablePeriod(PeriodType.getPreciseYearMonthType().withMillisRemoved());\n+//        test.setPeriod(ms);\n+//        assertEquals(1, test.getYears());\n+//        assertEquals(2, test.getMonths());\n+//        assertEquals(0, test.getWeeks());\n+//        assertEquals(25, test.getDays());\n+//        assertEquals(5, test.getHours());\n+//        assertEquals(6, test.getMinutes());\n+//        assertEquals(7, test.getSeconds());\n+//        assertEquals(0, test.getMillis());\n+//        assertEquals(ms - 8, test.toDurationMillis());\n+//    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetPeriod_RD1() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setPeriod(new Duration(100L));\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(100, test.getMillis());\n+    }\n+\n+    public void testSetPeriod_RD2() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        long length =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        test.setPeriod(new Duration(length));\n+        // only time fields are precise\n+        assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals((450 * 24) + 5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    public void testSetPeriod_RD3() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setPeriod((ReadableDuration) null);\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAdd_8ints1() {\n+        MutablePeriod test = new MutablePeriod(100L);\n+        test.add(1, 2, 3, 4, 5, 6, 7, 8);\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(108, test.getMillis());\n+    }\n+\n+    public void testAdd_8ints2() {\n+        MutablePeriod test = new MutablePeriod(100L, PeriodType.yearMonthDayTime());\n+        try {\n+            test.add(1, 2, 3, 4, 5, 6, 7, 8);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(100, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAdd_long1() {\n+        MutablePeriod test = new MutablePeriod(100L);\n+        test.add(100L);\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(200, test.getMillis());\n+    }\n+\n+    public void testAdd_long2() {\n+        MutablePeriod test = new MutablePeriod(100L, PeriodType.standard());\n+        long ms =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        test.add(ms);\n+        // only time fields are precise\n+        assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals((450 * 24) + 5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(108, test.getMillis());\n+    }\n+\n+    public void testAdd_long3() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.add(2100L);\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(9, test.getSeconds());\n+        assertEquals(108, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAdd_long_Chronology1() {\n+        MutablePeriod test = new MutablePeriod(100L);\n+        test.add(100L, ISOChronology.getInstance());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(200, test.getMillis());\n+    }\n+\n+    public void testAdd_long_Chronology2() {\n+        MutablePeriod test = new MutablePeriod(100L, PeriodType.standard());\n+        long ms =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        test.add(ms, ISOChronology.getInstance());\n+        // only time fields are precise\n+        assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450 days\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals((450 * 24) + 5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(108, test.getMillis());\n+    }\n+\n+    public void testAdd_long_Chronology3() {\n+        MutablePeriod test = new MutablePeriod(100L, PeriodType.standard());\n+        long ms =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        test.add(ms, ISOChronology.getInstanceUTC());\n+        // UTC, so weeks and day also precise\n+        assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450 days\n+        assertEquals(0, test.getMonths());\n+        assertEquals(64, test.getWeeks());\n+        assertEquals(2, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(108, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAdd_RD1() {\n+        MutablePeriod test = new MutablePeriod(100L);\n+        test.add(new Duration(100L));\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(200, test.getMillis());\n+    }\n+\n+    public void testAdd_RD2() {\n+        MutablePeriod test = new MutablePeriod(100L, PeriodType.yearMonthDayTime());\n+        long ms =\n+            (4L + (3L * 7L)) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        test.add(new Duration(ms));\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals((4 + (3 * 7)) * 24 + 5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(108, test.getMillis());\n+    }\n+\n+    public void testAdd_RD3() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.add((ReadableDuration) null);\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAdd_RP1() {\n+        MutablePeriod test = new MutablePeriod(100L);\n+        test.add(new Period(100L));\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(200, test.getMillis());\n+    }\n+\n+    public void testAdd_RP2() {\n+        MutablePeriod test = new MutablePeriod(100L, PeriodType.standard());  // All type\n+        test.add(new Period(1, 2, 3, 4, 5, 6, 7, 0, PeriodType.standard().withMillisRemoved()));\n+        // add field value, ignore different types\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(100, test.getMillis());\n+    }\n+\n+    public void testAdd_RP3() {\n+        MutablePeriod test = new MutablePeriod(100L, PeriodType.standard());\n+        test.add(new Period(0L));\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(100, test.getMillis());\n+    }\n+\n+    public void testAdd_RP4() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 0, 4, 5, 6, 7, 8, PeriodType.yearMonthDayTime());\n+        try {\n+            test.add(new Period(1, 2, 3, 4, 5, 6, 7, 8));  // cannot set weeks\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    public void testAdd_RP5() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 0, 4, 5, 6, 7, 8, PeriodType.yearMonthDayTime());\n+        test.add(new Period(1, 2, 0, 4, 5, 6, 7, 8));  // can set weeks as zero\n+        assertEquals(2, test.getYears());\n+        assertEquals(4, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(8, test.getDays());\n+        assertEquals(10, test.getHours());\n+        assertEquals(12, test.getMinutes());\n+        assertEquals(14, test.getSeconds());\n+        assertEquals(16, test.getMillis());\n+    }\n+\n+    public void testAdd_RP6() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.add((ReadablePeriod) null);\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAdd_RInterval1() {\n+        MutablePeriod test = new MutablePeriod(100L);\n+        test.add(new Interval(100L, 200L));\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(200, test.getMillis());\n+    }\n+\n+    public void testAdd_RInterval2() {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 12, 18, 0, 0, 0, 8);\n+        MutablePeriod test = new MutablePeriod(100L);  // All type\n+        test.add(new Interval(dt1, dt2));\n+        assertEquals(1, test.getYears());  // add field value from interval\n+        assertEquals(6, test.getMonths());  // add field value from interval\n+        assertEquals(1, test.getWeeks());  // add field value from interval\n+        assertEquals(2, test.getDays());  // add field value from interval\n+        assertEquals(0, test.getHours());  // time zone OK\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(108, test.getMillis());\n+    }\n+\n+    public void testAdd_RInterval3() {\n+        MutablePeriod test = new MutablePeriod(100L, PeriodType.yearMonthDayTime());\n+        test.add(new Interval(0L, 0L));\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(100, test.getMillis());\n+    }\n+\n+    public void testAdd_RInterval4() {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 17, 0, 0, 0, 8);\n+        MutablePeriod test = new MutablePeriod(100L, PeriodType.yearMonthDayTime());\n+        test.add(new Interval(dt1, dt2));\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());  // no weeks\n+        assertEquals(8, test.getDays());  // week added to days\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(108, test.getMillis());\n+    }\n+\n+    public void testAdd_RInterval5() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.add((ReadableInterval) null);\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMergePeriod_RP1() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.mergePeriod(new MutablePeriod(0, 0, 0, 14, 15, 16, 17, 18, PeriodType.dayTime()));\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(14, test.getDays());\n+        assertEquals(15, test.getHours());\n+        assertEquals(16, test.getMinutes());\n+        assertEquals(17, test.getSeconds());\n+        assertEquals(18, test.getMillis());\n+    }\n+\n+    public void testMergePeriod_RP2() {\n+        MutablePeriod test = new MutablePeriod(100L, PeriodType.millis());\n+        try {\n+            test.mergePeriod(new MutablePeriod(11, 12, 13, 14, 15, 16, 17, 18));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(100, test.getMillis());\n+    }\n+\n+    public void testMergePeriod_RP3() {\n+        MutablePeriod test = new MutablePeriod(100L, PeriodType.millis());\n+        test.mergePeriod(new MutablePeriod(0, 0, 0, 0, 0, 0, 0, 18));\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(18, test.getMillis());\n+    }\n+\n+    public void testMergePeriod_RP4() {\n+        MutablePeriod test = new MutablePeriod(0, 0, 0, 0, 5, 6, 7, 8);\n+        test.mergePeriod(new MutablePeriod(11, 12, 13, 14, 15, 16, 17, 18));\n+        assertEquals(11, test.getYears());\n+        assertEquals(12, test.getMonths());\n+        assertEquals(13, test.getWeeks());\n+        assertEquals(14, test.getDays());\n+        assertEquals(15, test.getHours());\n+        assertEquals(16, test.getMinutes());\n+        assertEquals(17, test.getSeconds());\n+        assertEquals(18, test.getMillis());\n+    }\n+\n+    public void testMergePeriod_RP5() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.mergePeriod((ReadablePeriod) null);\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestParseISO.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import junit.framework.Assert;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.format.DateTimeFormatter;\n+import org.joda.time.format.ISODateTimeFormat;\n+\n+/**\n+ * Unit test the parsing of ISO format datetimes\n+ *\n+ * @author Guy Allard\n+ * @author Stephen Colebourne\n+ */\n+public class TestParseISO extends TestCase {\n+    \n+    private static final int DEFAULT = 99999;\n+\n+    /**\n+     * This is the main class for this test suite.\n+     * @param args command line arguments.\n+     */\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+    \n+    /**\n+     * TestSuite suite() is a junit required method.\n+     * @see org.joda.test.time.BulkTest\n+     */\n+    public static TestSuite suite() {\n+        return new TestSuite(TestParseISO.class);\n+    }\n+    \n+    /**\n+     * Constructor.\n+     * @param name\n+     */\n+    public TestParseISO(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+    }\n+    \n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    // Dates\n+    //-----------------------------------------------------------------------\n+    public void testSpecCompleteDate() {\n+        new DMatcher(\"5.2.1.1\", \"1999-10-20\", \"19991020\",\n+            19, 99, 10, 20, DEFAULT).run();\n+    }        \n+    //-----------------------------------------------------------------------\n+    public void testSpecReducedPrecisionCYM() {\n+        new DMatcher(\"5.2.1.2\", \"1999-10\", \"199910\",\n+            19, 99, 10, DEFAULT, DEFAULT).run();\n+    }\n+    public void testSpecReducedPrecisionCY() {\n+        new DMatcher(\"5.2.1.2\", \"1999\", \"1999\",\n+            19, 99, DEFAULT, DEFAULT, DEFAULT).run();\n+    }\n+    public void testSpecReducedPrecisionC() {\n+        new DMatcher(\"5.2.1.2\", \"20\", \"20\",\n+            20, DEFAULT, DEFAULT, DEFAULT, DEFAULT).run();\n+        new DMatcher(\"5.2.1.2\", \"19\", \"19\",\n+            19, DEFAULT, DEFAULT, DEFAULT, DEFAULT).run();\n+    }\n+    //-----------------------------------------------------------------------\n+    public void testSpecTruncatedYMD() {\n+        new DMatcher(\"5.2.1.3\", \"85-04-11\", \"850411\",\n+            DEFAULT, 85, 4, 11, DEFAULT).run();\n+    }\n+    public void testSpecTruncatedYM() {\n+        new DMatcher(\"5.2.1.3\", \"-85-04\", \"-8504\",\n+            DEFAULT, 85, 4, DEFAULT, DEFAULT).run();\n+    }\n+    public void testSpecTruncatedY() {\n+        new DMatcher(\"5.2.1.3\", \"-85\", \"-85\",\n+            DEFAULT, 85, DEFAULT, DEFAULT, DEFAULT).run();\n+    }\n+    public void testSpecTruncatedMD() {\n+        new DMatcher(\"5.2.1.3\", \"--04-11\", \"--0411\",\n+            DEFAULT, DEFAULT, 4, 11, DEFAULT).run();\n+    }\n+    public void testSpecTruncatedM() {\n+        new DMatcher(\"5.2.1.3\", \"--04\", \"--04\",\n+            DEFAULT, DEFAULT, 4, DEFAULT, DEFAULT).run();\n+    }\n+    public void testSpecTruncatedD() {\n+        new DMatcher(\"5.2.1.3\", \"---11\", \"---11\",\n+            DEFAULT, DEFAULT, DEFAULT, 11, DEFAULT).run();\n+    }\n+    //-----------------------------------------------------------------------\n+    public void testSpecExpandedCYMD() {\n+        new DMatcher(\"5.2.1.4\", \"+001985-04-11\", \"+0019850411\",\n+            19, 85, 4, 11, DEFAULT).run();\n+    }\n+    public void testSpecExpandedCYM() {\n+        new DMatcher(\"5.2.1.4\", \"+001985-04\", \"+00198504\",\n+            19, 85, 4, DEFAULT, DEFAULT).run();\n+    }\n+    public void testSpecExpandedCY() {\n+        new DMatcher(\"5.2.1.4\", \"+001985\", \"+001985\",\n+            19, 85, DEFAULT, DEFAULT, DEFAULT).run();\n+    }\n+    public void testSpecExpandedC() {\n+        // Not supported - could only tell difference from CY if you knew\n+        // number of digits representing year\n+//        new DMatcher(\"5.2.1.4\", \"+0019\", \"+0019\",\n+//            19, DEFAULT, DEFAULT, DEFAULT, DEFAULT).assert();\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    // Ordinal based date\n+    //-----------------------------------------------------------------------\n+    public void testSpecOrdinalComplete() {\n+        new DMatcher(\"5.2.2.1\", \"1985-101\", \"1985101\",\n+            19, 85, 4, 11, DEFAULT).run();\n+        new DMatcher(\"5.2.2.1\", \"1985-021\", \"1985021\",\n+            19, 85, 1, 21, DEFAULT).run();\n+        new DMatcher(\"5.2.2.1\", \"1985-006\", \"1985006\",\n+            19, 85, 1, 6, DEFAULT).run();\n+    }\n+    //-----------------------------------------------------------------------\n+    public void testSpecOrdinalTruncatedYD() {\n+        new DMatcher(\"5.2.2.2\", \"85-101\", \"85101\",\n+            DEFAULT, 85, 4, 11, DEFAULT).run();\n+    }\n+    public void testSpecOrdinalTruncatedD() {\n+        new DMatcher(\"5.2.2.2\", \"-101\", \"-101\",\n+            DEFAULT, DEFAULT, 4, 11, DEFAULT).run();\n+    }\n+    //-----------------------------------------------------------------------\n+    public void testSpecOrdinalExpandedYD() {\n+        new DMatcher(\"5.2.2.3\", \"+001985-101\", \"+001985101\",\n+            19, 85, 4, 11, DEFAULT).run();\n+    }\n+    //-----------------------------------------------------------------------\n+    // Week based date\n+    //-----------------------------------------------------------------------\n+    public void testSpecWeekComplete() {\n+        new DMatcher(\"5.2.3.1\", \"1985-W15-1\", \"1985W151\",\n+            19, 85, 4, 8, DEFAULT).run();\n+        new DMatcher(\"5.2.3.1\", \"1985-W15-2\", \"1985W152\",\n+            19, 85, 4, 9, DEFAULT).run();\n+        new DMatcher(\"5.2.3.1\", \"1985-W15-3\", \"1985W153\",\n+            19, 85, 4, 10, DEFAULT).run();\n+        new DMatcher(\"5.2.3.1\", \"1985-W15-4\", \"1985W154\",\n+            19, 85, 4, 11, DEFAULT).run();\n+        new DMatcher(\"5.2.3.1\", \"1985-W15-5\", \"1985W155\",\n+            19, 85, 4, 12, DEFAULT).run();\n+        new DMatcher(\"5.2.3.1\", \"1985-W15-6\", \"1985W156\",\n+            19, 85, 4, 13, DEFAULT).run();\n+        new DMatcher(\"5.2.3.1\", \"1985-W15-7\", \"1985W157\",\n+            19, 85, 4, 14, DEFAULT).run();\n+    }\n+    //-----------------------------------------------------------------------\n+    public void testSpecWeekReducedPrecision() {\n+        // test date is Sunday, which should be left alone\n+        new DMatcher(\"5.2.3.2\", \"1985-W15\", \"1985W15\",\n+            19, 85, 4, 14, DEFAULT).run();\n+    }\n+    //-----------------------------------------------------------------------\n+    public void testSpecWeekTruncatedYWD() {\n+        new DMatcher(\"5.2.3.2\", \"85-W154\", \"85W154\",\n+            DEFAULT, 85, 4, 11, DEFAULT).run();\n+    }\n+    public void testSpecWeekTruncatedYW() {\n+        // test date is Sunday, which should be left alone\n+        new DMatcher(\"5.2.3.2\", \"85-W15\", \"85W15\",\n+            DEFAULT, 85, 4, 14, DEFAULT).run();\n+    }\n+    public void testSpecWeekTruncatedDWD() {\n+        // decade not supported\n+    }\n+    public void testSpecWeekTruncatedDW() {\n+        // decade not supported\n+    }\n+    public void testSpecWeekTruncatedWD() {\n+        new DMatcher(\"5.2.3.2\", \"-W154\", \"-W154\",\n+            DEFAULT, DEFAULT, 4, 11, DEFAULT).run();\n+    }\n+    public void testSpecWeekTruncatedW() {\n+        // test date is Sunday, which should be left alone\n+        new DMatcher(\"5.2.3.2\", \"-W15\", \"-W15\",\n+            DEFAULT, DEFAULT, 4, 14, DEFAULT).run();\n+    }\n+    public void testSpecWeekTruncatedD() {\n+        // test date is Sunday 3rd Dec, thus relative Thursday is 30th Nov\n+        new DMatcher(\"5.2.3.3\", \"-W-4\", \"-W-4\",\n+            DEFAULT, DEFAULT, 11, 30, DEFAULT).run();\n+    }\n+    public void testSpecWeekExpandedYWD() {\n+        // test date is Sunday 3rd Dec, thus relative Thursday is 30th Nov\n+        new DMatcher(\"5.2.3.4\", \"+001985-W15-4\", \"+001985W154\",\n+            19, 85, 4, 11, DEFAULT).run();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    // Times\n+    //-----------------------------------------------------------------------\n+    public void testSpecTimeComplete() {\n+        new TMatcher(\"5.3.1.1\", \"23:20:50\", \"232050\",\n+            23, 20, 50, 0, DEFAULT).run();\n+    }\n+    //-----------------------------------------------------------------------\n+    public void testSpecTimeReducedPrecisionHM() {\n+        new TMatcher(\"5.3.1.2\", \"23:20\", \"2320\",\n+            23, 20, DEFAULT, DEFAULT, DEFAULT).run();\n+    }\n+    public void testSpecTimeReducedPrecisionH() {\n+        new TMatcher(\"5.3.1.2\", \"23\", \"23\",\n+            23, DEFAULT, DEFAULT, DEFAULT, DEFAULT).run();\n+    }\n+    //-----------------------------------------------------------------------\n+    public void testSpecTimeFractionalHMS() {\n+        new TMatcher(\"5.3.1.3\", \"23:20:50.607\", \"232050.607\",\n+            23, 20, 50, 607, DEFAULT).run();\n+        new TMatcher(\"5.3.1.3\", \"23:20:50,607\", \"232050,607\",\n+            23, 20, 50, 607, DEFAULT).run();\n+    }\n+    public void testSpecTimeFractionalHM() {\n+        new TMatcher(\"5.3.1.3\", \"23:20.4\", \"2320.4\",\n+            23, 20, 24, 0, DEFAULT).run();\n+        new TMatcher(\"5.3.1.3\", \"23:20,4\", \"2320,4\",\n+            23, 20, 24, 0, DEFAULT).run();\n+    }\n+    public void testSpecTimeFractionalH() {\n+        new TMatcher(\"5.3.1.3\", \"23.25\", \"23.25\",\n+            23, 15, 0, 0, DEFAULT).run();\n+        new TMatcher(\"5.3.1.3\", \"23.25\", \"23,25\",\n+            23, 15, 0, 0, DEFAULT).run();\n+    }\n+    //-----------------------------------------------------------------------\n+    public void testSpecTimeTruncatedMS() {\n+        new TMatcher(\"5.3.1.4\", \"-20:50\", \"-2050\",\n+            DEFAULT, 20, 50, 0, DEFAULT).run();\n+    }\n+    public void testSpecTimeTruncatedM() {\n+        new TMatcher(\"5.3.1.4\", \"-20\", \"-20\",\n+            DEFAULT, 20, DEFAULT, DEFAULT, DEFAULT).run();\n+    }\n+    public void testSpecTimeTruncatedS() {\n+        new TMatcher(\"5.3.1.4\", \"--50\", \"--50\",\n+            DEFAULT, DEFAULT, 50, 0, DEFAULT).run();\n+    }\n+    public void testSpecTimeTruncatedFractionMS() {\n+        new TMatcher(\"5.3.1.4\", \"-20:50.607\", \"-2050.607\",\n+            DEFAULT, 20, 50, 607, DEFAULT).run();\n+    }\n+    public void testSpecTimeTruncatedFractionM() {\n+        new TMatcher(\"5.3.1.4\", \"-20.4\", \"-20.4\",\n+            DEFAULT, 20, 24, 0, DEFAULT).run();\n+    }\n+    public void testSpecTimeTruncatedFractionS() {\n+        new TMatcher(\"5.3.1.4\", \"--50.607\", \"--50.607\",\n+            DEFAULT, DEFAULT, 50, 607, DEFAULT).run();\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Perform test.\n+     */        \n+    protected static abstract class Matcher extends Assert {\n+        String spec, extended, basic;\n+        int century, yearOfCentury, monthOfYear, dayOfMonth, hour, min, sec, milli, zone;\n+        MutableDateTime dt;\n+        \n+        protected Matcher(String spec, String extended, String basic) {\n+            this.spec = spec;\n+            this.extended = extended;\n+            this.basic = basic;\n+        }\n+        \n+        protected abstract void run();\n+        protected void assertDate() {\n+            String msg = \"\\nSpec:   \" + spec + \"\\nParsed: \" + extended + \"\\nTo:     \" + dt;\n+            assertEquals(msg + \"\\nCentury: \", century, dt.getCenturyOfEra());\n+            assertEquals(msg + \"\\nYear: \", yearOfCentury, dt.getYearOfCentury());\n+            assertEquals(msg + \"\\nMonth: \", monthOfYear, dt.getMonthOfYear());\n+            assertEquals(msg + \"\\nDay: \", dayOfMonth, dt.getDayOfMonth());\n+            assertEquals(msg + \"\\nHour: \", hour, dt.getHourOfDay());\n+            assertEquals(msg + \"\\nMinute: \", min, dt.getMinuteOfHour());\n+            assertEquals(msg + \"\\nSecond: \", sec, dt.getSecondOfMinute());\n+            assertEquals(msg + \"\\nMilli: \", milli, dt.getMillisOfSecond());\n+            DateTimeZone z;\n+            if (zone == DEFAULT) {\n+                z = DateTimeZone.getDefault();\n+            } else if (zone == 0) {\n+                    z = DateTimeZone.UTC;\n+            } else {\n+                String str = \"0\" + Math.abs(zone) + \":00\";\n+                str = str.substring(str.length() - 4);\n+                str = (zone < 0 ? \"-\" : \"+\") + str;\n+                z = DateTimeZone.forID(str);\n+            }\n+            assertEquals(msg + \"\\nZone: \", z, dt.getZone());\n+        }\n+        protected void parse(DateTimeFormatter p) {\n+            int result = p.parseInto(dt, extended, 0);\n+            assertTrue(\"\\nSpec:   \" + spec + \"\\nParsed: \" + extended + \"\\nTo:     \"\n+                + dt + \"\\nParse failed at: \" + ~result,\n+                result >= 0);\n+        }\n+    }\n+    protected static class DTMatcher extends Matcher {\n+        protected DTMatcher(String spec, String extended, String basic,\n+                int century, int yearOfCentury, int monthOfYear, int dayOfMonth,\n+                int hour, int min, int sec, int milli, int zone) {\n+            super(spec, extended, basic);\n+            this.century = (century == DEFAULT ? 19 : century);\n+            this.yearOfCentury = (yearOfCentury == DEFAULT ? 72 : yearOfCentury);\n+            this.monthOfYear = (monthOfYear == DEFAULT ? 12 : monthOfYear);\n+            this.dayOfMonth = (dayOfMonth == DEFAULT ? 3 : dayOfMonth);\n+            this.hour = (hour == DEFAULT ? 10 : hour);\n+            this.min = (min == DEFAULT ? 32 : min);\n+            this.sec = (sec == DEFAULT ? 40 : sec);\n+            this.milli = (milli == DEFAULT ? 205 : milli);\n+            this.zone = zone;\n+        }            \n+        protected void run() {\n+            dt = new MutableDateTime(1972, 12, 3, 10, 32, 40, 205);\n+            parse(ISODateTimeFormat.dateTimeParser());\n+            super.assertDate();\n+        }\n+    }\n+    protected static class DMatcher extends Matcher {\n+        protected DMatcher(String spec, String extended, String basic,\n+                int century, int yearOfCentury, int monthOfYear, int dayOfMonth, int zone) {\n+            super(spec, extended, basic);\n+            this.century = (century == DEFAULT ? 19 : century);\n+            this.yearOfCentury = (yearOfCentury == DEFAULT ? 72 : yearOfCentury);\n+            this.monthOfYear = (monthOfYear == DEFAULT ? 12 : monthOfYear);\n+            this.dayOfMonth = (dayOfMonth == DEFAULT ? 3 : dayOfMonth);\n+            this.hour = 10;\n+            this.min = 32;\n+            this.sec = 40;\n+            this.milli = 205;\n+            this.zone = zone;\n+        }\n+        protected void run() {\n+            dt = new MutableDateTime(1972, 12, 3, 10, 32, 40, 205);\n+            parse(ISODateTimeFormat.dateParser());\n+            super.assertDate();\n+        \n+            dt = new MutableDateTime(1972, 12, 3, 10, 32, 40, 205);\n+            parse(ISODateTimeFormat.dateTimeParser());\n+            super.assertDate();\n+        }\n+    }\n+    protected static class TMatcher extends Matcher {\n+        protected TMatcher(String spec, String extended, String basic,\n+                int hour, int min, int sec, int milli, int zone) {\n+            super(spec, extended, basic);\n+            this.century = 19;\n+            this.yearOfCentury = 72;\n+            this.monthOfYear = 12;\n+            this.dayOfMonth = 3;\n+            this.hour = (hour == DEFAULT ? 10 : hour);\n+            this.min = (min == DEFAULT ? 32 : min);\n+            this.sec = (sec == DEFAULT ? 40 : sec);\n+            this.milli = (milli == DEFAULT ? 205 : milli);\n+            this.zone = zone;\n+        }\n+        protected void run() {\n+            dt = new MutableDateTime(1972, 12, 3, 10, 32, 40, 205);\n+            parse(ISODateTimeFormat.timeParser());\n+            super.assertDate();\n+            \n+            extended = \"T\" + extended;\n+            dt = new MutableDateTime(1972, 12, 3, 10, 32, 40, 205);\n+            parse(ISODateTimeFormat.timeParser());\n+            super.assertDate();\n+            \n+            dt = new MutableDateTime(1972, 12, 3, 10, 32, 40, 205);\n+            parse(ISODateTimeFormat.dateTimeParser());\n+            super.assertDate();\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestPartial_Basics.java\n+/*\n+ *  Copyright 2001-2009 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Arrays;\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n+\n+/**\n+ * This class is a Junit unit test for Partial.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestPartial_Basics extends TestCase {\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    private static final int OFFSET = 1;\n+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+    private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);\n+    private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);\n+    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n+    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);\n+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n+    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);\n+    private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);\n+    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n+    \n+    private long TEST_TIME_NOW =\n+            10L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 20L * DateTimeConstants.MILLIS_PER_MINUTE\n+            + 30L * DateTimeConstants.MILLIS_PER_SECOND\n+            + 40L;\n+            \n+    private long TEST_TIME1 =\n+        1L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 2L * DateTimeConstants.MILLIS_PER_MINUTE\n+        + 3L * DateTimeConstants.MILLIS_PER_SECOND\n+        + 4L;\n+        \n+    private long TEST_TIME2 =\n+        1L * DateTimeConstants.MILLIS_PER_DAY\n+        + 5L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 6L * DateTimeConstants.MILLIS_PER_MINUTE\n+        + 7L * DateTimeConstants.MILLIS_PER_SECOND\n+        + 8L;\n+        \n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestPartial_Basics.class);\n+    }\n+\n+    public TestPartial_Basics(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGet() {\n+        Partial test = createHourMinPartial();\n+        assertEquals(10, test.get(DateTimeFieldType.hourOfDay()));\n+        assertEquals(20, test.get(DateTimeFieldType.minuteOfHour()));\n+        try {\n+            test.get(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.get(DateTimeFieldType.secondOfMinute());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testSize() {\n+        Partial test = createHourMinPartial();\n+        assertEquals(2, test.size());\n+    }\n+\n+    public void testGetFieldType() {\n+        Partial test = createHourMinPartial();\n+        assertSame(DateTimeFieldType.hourOfDay(), test.getFieldType(0));\n+        assertSame(DateTimeFieldType.minuteOfHour(), test.getFieldType(1));\n+        try {\n+            test.getFieldType(-1);\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            test.getFieldType(2);\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testGetFieldTypes() {\n+        Partial test = createHourMinPartial();\n+        DateTimeFieldType[] fields = test.getFieldTypes();\n+        assertEquals(2, fields.length);\n+        assertSame(DateTimeFieldType.hourOfDay(), fields[0]);\n+        assertSame(DateTimeFieldType.minuteOfHour(), fields[1]);\n+        assertNotSame(test.getFieldTypes(), test.getFieldTypes());\n+    }\n+\n+    public void testGetField() {\n+        Partial test = createHourMinPartial(COPTIC_PARIS);\n+        assertSame(CopticChronology.getInstanceUTC().hourOfDay(), test.getField(0));\n+        assertSame(CopticChronology.getInstanceUTC().minuteOfHour(), test.getField(1));\n+        try {\n+            test.getField(-1);\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            test.getField(5);\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testGetFields() {\n+        Partial test = createHourMinPartial(COPTIC_PARIS);\n+        DateTimeField[] fields = test.getFields();\n+        assertEquals(2, fields.length);\n+        assertSame(CopticChronology.getInstanceUTC().hourOfDay(), fields[0]);\n+        assertSame(CopticChronology.getInstanceUTC().minuteOfHour(), fields[1]);\n+        assertNotSame(test.getFields(), test.getFields());\n+    }\n+\n+    public void testGetValue() {\n+        Partial test = createHourMinPartial(COPTIC_PARIS);\n+        assertEquals(10, test.getValue(0));\n+        assertEquals(20, test.getValue(1));\n+        try {\n+            test.getValue(-1);\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            test.getValue(2);\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testGetValues() {\n+        Partial test = createHourMinPartial(COPTIC_PARIS);\n+        int[] values = test.getValues();\n+        assertEquals(2, values.length);\n+        assertEquals(10, values[0]);\n+        assertEquals(20, values[1]);\n+        assertNotSame(test.getValues(), test.getValues());\n+    }\n+\n+    public void testIsSupported() {\n+        Partial test = createHourMinPartial(COPTIC_PARIS);\n+        assertEquals(true, test.isSupported(DateTimeFieldType.hourOfDay()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfHour()));\n+        assertEquals(false, test.isSupported(DateTimeFieldType.secondOfMinute()));\n+        assertEquals(false, test.isSupported(DateTimeFieldType.millisOfSecond()));\n+        assertEquals(false, test.isSupported(DateTimeFieldType.dayOfMonth()));\n+    }\n+\n+    public void testEqualsHashCode() {\n+        Partial test1 = createHourMinPartial(COPTIC_PARIS);\n+        Partial test2 = createHourMinPartial(COPTIC_PARIS);\n+        assertEquals(true, test1.equals(test2));\n+        assertEquals(true, test2.equals(test1));\n+        assertEquals(true, test1.equals(test1));\n+        assertEquals(true, test2.equals(test2));\n+        assertEquals(true, test1.hashCode() == test2.hashCode());\n+        assertEquals(true, test1.hashCode() == test1.hashCode());\n+        assertEquals(true, test2.hashCode() == test2.hashCode());\n+        \n+        Partial test3 = createHourMinPartial2(COPTIC_PARIS);\n+        assertEquals(false, test1.equals(test3));\n+        assertEquals(false, test2.equals(test3));\n+        assertEquals(false, test3.equals(test1));\n+        assertEquals(false, test3.equals(test2));\n+        assertEquals(false, test1.hashCode() == test3.hashCode());\n+        assertEquals(false, test2.hashCode() == test3.hashCode());\n+        \n+        assertEquals(false, test1.equals(\"Hello\"));\n+        assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE));\n+        assertEquals(new TimeOfDay(10, 20, 30, 40), createTODPartial(ISO_UTC));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testCompareTo() {\n+        Partial test1 = createHourMinPartial();\n+        Partial test1a = createHourMinPartial();\n+        assertEquals(0, test1.compareTo(test1a));\n+        assertEquals(0, test1a.compareTo(test1));\n+        assertEquals(0, test1.compareTo(test1));\n+        assertEquals(0, test1a.compareTo(test1a));\n+        \n+        Partial test2 = createHourMinPartial2(ISO_UTC);\n+        assertEquals(-1, test1.compareTo(test2));\n+        assertEquals(+1, test2.compareTo(test1));\n+        \n+        Partial test3 = createHourMinPartial2(COPTIC_UTC);\n+        assertEquals(-1, test1.compareTo(test3));\n+        assertEquals(+1, test3.compareTo(test1));\n+        assertEquals(0, test3.compareTo(test2));\n+        \n+        assertEquals(0, new TimeOfDay(10, 20, 30, 40).compareTo(createTODPartial(ISO_UTC)));\n+        \n+        try {\n+            test1.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+//        try {\n+//            test1.compareTo(new Date());\n+//            fail();\n+//        } catch (ClassCastException ex) {}\n+        try {\n+            test1.compareTo(new YearMonthDay());\n+            fail();\n+        } catch (ClassCastException ex) {}\n+        try {\n+            createTODPartial(ISO_UTC).without(DateTimeFieldType.hourOfDay()).compareTo(new YearMonthDay());\n+            fail();\n+        } catch (ClassCastException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsEqual_TOD() {\n+        Partial test1 = createHourMinPartial();\n+        Partial test1a = createHourMinPartial();\n+        assertEquals(true, test1.isEqual(test1a));\n+        assertEquals(true, test1a.isEqual(test1));\n+        assertEquals(true, test1.isEqual(test1));\n+        assertEquals(true, test1a.isEqual(test1a));\n+        \n+        Partial test2 = createHourMinPartial2(ISO_UTC);\n+        assertEquals(false, test1.isEqual(test2));\n+        assertEquals(false, test2.isEqual(test1));\n+        \n+        Partial test3 = createHourMinPartial2(COPTIC_UTC);\n+        assertEquals(false, test1.isEqual(test3));\n+        assertEquals(false, test3.isEqual(test1));\n+        assertEquals(true, test3.isEqual(test2));\n+        \n+        try {\n+            createHourMinPartial().isEqual(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsBefore_TOD() {\n+        Partial test1 = createHourMinPartial();\n+        Partial test1a = createHourMinPartial();\n+        assertEquals(false, test1.isBefore(test1a));\n+        assertEquals(false, test1a.isBefore(test1));\n+        assertEquals(false, test1.isBefore(test1));\n+        assertEquals(false, test1a.isBefore(test1a));\n+        \n+        Partial test2 = createHourMinPartial2(ISO_UTC);\n+        assertEquals(true, test1.isBefore(test2));\n+        assertEquals(false, test2.isBefore(test1));\n+        \n+        Partial test3 = createHourMinPartial2(COPTIC_UTC);\n+        assertEquals(true, test1.isBefore(test3));\n+        assertEquals(false, test3.isBefore(test1));\n+        assertEquals(false, test3.isBefore(test2));\n+        \n+        try {\n+            createHourMinPartial().isBefore(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsAfter_TOD() {\n+        Partial test1 = createHourMinPartial();\n+        Partial test1a = createHourMinPartial();\n+        assertEquals(false, test1.isAfter(test1a));\n+        assertEquals(false, test1a.isAfter(test1));\n+        assertEquals(false, test1.isAfter(test1));\n+        assertEquals(false, test1a.isAfter(test1a));\n+        \n+        Partial test2 = createHourMinPartial2(ISO_UTC);\n+        assertEquals(false, test1.isAfter(test2));\n+        assertEquals(true, test2.isAfter(test1));\n+        \n+        Partial test3 = createHourMinPartial2(COPTIC_UTC);\n+        assertEquals(false, test1.isAfter(test3));\n+        assertEquals(true, test3.isAfter(test1));\n+        assertEquals(false, test3.isAfter(test2));\n+        \n+        try {\n+            createHourMinPartial().isAfter(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testWithChronologyRetainFields_Chrono() {\n+        Partial base = createHourMinPartial(COPTIC_PARIS);\n+        Partial test = base.withChronologyRetainFields(BUDDHIST_TOKYO);\n+        check(base, 10, 20);\n+        assertEquals(COPTIC_UTC, base.getChronology());\n+        check(test, 10, 20);\n+        assertEquals(BUDDHIST_UTC, test.getChronology());\n+    }\n+\n+    public void testWithChronologyRetainFields_sameChrono() {\n+        Partial base = createHourMinPartial(COPTIC_PARIS);\n+        Partial test = base.withChronologyRetainFields(COPTIC_TOKYO);\n+        assertSame(base, test);\n+    }\n+\n+    public void testWithChronologyRetainFields_nullChrono() {\n+        Partial base = createHourMinPartial(COPTIC_PARIS);\n+        Partial test = base.withChronologyRetainFields(null);\n+        check(base, 10, 20);\n+        assertEquals(COPTIC_UTC, base.getChronology());\n+        check(test, 10, 20);\n+        assertEquals(ISO_UTC, test.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWith1() {\n+        Partial test = createHourMinPartial();\n+        Partial result = test.with(DateTimeFieldType.hourOfDay(), 15);\n+        check(test, 10, 20);\n+        check(result, 15, 20);\n+    }\n+\n+    public void testWith2() {\n+        Partial test = createHourMinPartial();\n+        try {\n+            test.with(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20);\n+    }\n+\n+    public void testWith3a() {\n+        Partial test = createHourMinPartial();\n+        Partial result = test.with(DateTimeFieldType.secondOfMinute(), 15);\n+        check(test, 10, 20);\n+        assertEquals(3, result.size());\n+        assertEquals(true, result.isSupported(DateTimeFieldType.hourOfDay()));\n+        assertEquals(true, result.isSupported(DateTimeFieldType.minuteOfHour()));\n+        assertEquals(true, result.isSupported(DateTimeFieldType.secondOfMinute()));\n+        assertEquals(DateTimeFieldType.hourOfDay(), result.getFieldType(0));\n+        assertEquals(DateTimeFieldType.minuteOfHour(), result.getFieldType(1));\n+        assertEquals(DateTimeFieldType.secondOfMinute(), result.getFieldType(2));\n+        assertEquals(10, result.get(DateTimeFieldType.hourOfDay()));\n+        assertEquals(20, result.get(DateTimeFieldType.minuteOfHour()));\n+        assertEquals(15, result.get(DateTimeFieldType.secondOfMinute()));\n+    }\n+\n+    public void testWith3b() {\n+        Partial test = createHourMinPartial();\n+        Partial result = test.with(DateTimeFieldType.minuteOfDay(), 15);\n+        check(test, 10, 20);\n+        assertEquals(3, result.size());\n+        assertEquals(true, result.isSupported(DateTimeFieldType.hourOfDay()));\n+        assertEquals(true, result.isSupported(DateTimeFieldType.minuteOfDay()));\n+        assertEquals(true, result.isSupported(DateTimeFieldType.minuteOfHour()));\n+        assertEquals(DateTimeFieldType.hourOfDay(), result.getFieldType(0));\n+        assertEquals(DateTimeFieldType.minuteOfDay(), result.getFieldType(1));\n+        assertEquals(DateTimeFieldType.minuteOfHour(), result.getFieldType(2));\n+        assertEquals(10, result.get(DateTimeFieldType.hourOfDay()));\n+        assertEquals(20, result.get(DateTimeFieldType.minuteOfHour()));\n+        assertEquals(15, result.get(DateTimeFieldType.minuteOfDay()));\n+    }\n+\n+    public void testWith3c() {\n+        Partial test = createHourMinPartial();\n+        Partial result = test.with(DateTimeFieldType.dayOfMonth(), 15);\n+        check(test, 10, 20);\n+        assertEquals(3, result.size());\n+        assertEquals(true, result.isSupported(DateTimeFieldType.dayOfMonth()));\n+        assertEquals(true, result.isSupported(DateTimeFieldType.hourOfDay()));\n+        assertEquals(true, result.isSupported(DateTimeFieldType.minuteOfHour()));\n+        assertEquals(DateTimeFieldType.dayOfMonth(), result.getFieldType(0));\n+        assertEquals(DateTimeFieldType.hourOfDay(), result.getFieldType(1));\n+        assertEquals(DateTimeFieldType.minuteOfHour(), result.getFieldType(2));\n+        assertEquals(10, result.get(DateTimeFieldType.hourOfDay()));\n+        assertEquals(20, result.get(DateTimeFieldType.minuteOfHour()));\n+        assertEquals(15, result.get(DateTimeFieldType.dayOfMonth()));\n+    }\n+\n+    public void testWith3d() {\n+        Partial test = new Partial(DateTimeFieldType.year(), 2005);\n+        Partial result = test.with(DateTimeFieldType.monthOfYear(), 6);\n+        assertEquals(2, result.size());\n+        assertEquals(2005, result.get(DateTimeFieldType.year()));\n+        assertEquals(6, result.get(DateTimeFieldType.monthOfYear()));\n+    }        \n+\n+    public void testWith3e() {\n+        Partial test = new Partial(DateTimeFieldType.era(), 1);\n+        Partial result = test.with(DateTimeFieldType.halfdayOfDay(), 0);\n+        assertEquals(2, result.size());\n+        assertEquals(1, result.get(DateTimeFieldType.era()));\n+        assertEquals(0, result.get(DateTimeFieldType.halfdayOfDay()));\n+        assertEquals(0, result.indexOf(DateTimeFieldType.era()));\n+        assertEquals(1, result.indexOf(DateTimeFieldType.halfdayOfDay()));\n+    }        \n+\n+    public void testWith3f() {\n+        Partial test = new Partial(DateTimeFieldType.halfdayOfDay(), 0);\n+        Partial result = test.with(DateTimeFieldType.era(), 1);\n+        assertEquals(2, result.size());\n+        assertEquals(1, result.get(DateTimeFieldType.era()));\n+        assertEquals(0, result.get(DateTimeFieldType.halfdayOfDay()));\n+        assertEquals(0, result.indexOf(DateTimeFieldType.era()));\n+        assertEquals(1, result.indexOf(DateTimeFieldType.halfdayOfDay()));\n+    }        \n+\n+    public void testWith4() {\n+        Partial test = createHourMinPartial();\n+        Partial result = test.with(DateTimeFieldType.hourOfDay(), 10);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithout1() {\n+        Partial test = createHourMinPartial();\n+        Partial result = test.without(DateTimeFieldType.year());\n+        check(test, 10, 20);\n+        check(result, 10, 20);\n+    }\n+\n+    public void testWithout2() {\n+        Partial test = createHourMinPartial();\n+        Partial result = test.without((DateTimeFieldType) null);\n+        check(test, 10, 20);\n+        check(result, 10, 20);\n+    }\n+\n+    public void testWithout3() {\n+        Partial test = createHourMinPartial();\n+        Partial result = test.without(DateTimeFieldType.hourOfDay());\n+        check(test, 10, 20);\n+        assertEquals(1, result.size());\n+        assertEquals(false, result.isSupported(DateTimeFieldType.hourOfDay()));\n+        assertEquals(true, result.isSupported(DateTimeFieldType.minuteOfHour()));\n+        assertEquals(DateTimeFieldType.minuteOfHour(), result.getFieldType(0));\n+    }\n+\n+    public void testWithout4() {\n+        Partial test = createHourMinPartial();\n+        Partial result = test.without(DateTimeFieldType.minuteOfHour());\n+        check(test, 10, 20);\n+        assertEquals(1, result.size());\n+        assertEquals(true, result.isSupported(DateTimeFieldType.hourOfDay()));\n+        assertEquals(false, result.isSupported(DateTimeFieldType.minuteOfHour()));\n+        assertEquals(DateTimeFieldType.hourOfDay(), result.getFieldType(0));\n+    }\n+\n+    public void testWithout5() {\n+        Partial test = new Partial(DateTimeFieldType.hourOfDay(), 12);\n+        Partial result = test.without(DateTimeFieldType.hourOfDay());\n+        assertEquals(0, result.size());\n+        assertEquals(false, result.isSupported(DateTimeFieldType.hourOfDay()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithField1() {\n+        Partial test = createHourMinPartial();\n+        Partial result = test.withField(DateTimeFieldType.hourOfDay(), 15);\n+        check(test, 10, 20);\n+        check(result, 15, 20);\n+    }\n+\n+    public void testWithField2() {\n+        Partial test = createHourMinPartial();\n+        try {\n+            test.withField(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20);\n+    }\n+\n+    public void testWithField3() {\n+        Partial test = createHourMinPartial();\n+        try {\n+            test.withField(DateTimeFieldType.dayOfMonth(), 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20);\n+    }\n+\n+    public void testWithField4() {\n+        Partial test = createHourMinPartial();\n+        Partial result = test.withField(DateTimeFieldType.hourOfDay(), 10);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithFieldAdded1() {\n+        Partial test = createHourMinPartial();\n+        Partial result = test.withFieldAdded(DurationFieldType.hours(), 6);\n+        \n+        assertEquals(createHourMinPartial(), test);\n+        check(test, 10, 20);\n+        check(result, 16, 20);\n+    }\n+\n+    public void testWithFieldAdded2() {\n+        Partial test = createHourMinPartial();\n+        try {\n+            test.withFieldAdded(null, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20);\n+    }\n+\n+    public void testWithFieldAdded3() {\n+        Partial test = createHourMinPartial();\n+        try {\n+            test.withFieldAdded(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20);\n+    }\n+\n+    public void testWithFieldAdded4() {\n+        Partial test = createHourMinPartial();\n+        Partial result = test.withFieldAdded(DurationFieldType.hours(), 0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testWithFieldAdded5() {\n+        Partial test = createHourMinPartial();\n+        try {\n+            test.withFieldAdded(DurationFieldType.days(), 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20);\n+    }\n+\n+    public void testWithFieldAdded6() {\n+        Partial test = createHourMinPartial();\n+        try {\n+            test.withFieldAdded(DurationFieldType.hours(), 16);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        check(test, 10, 20);\n+    }\n+\n+    public void testWithFieldAdded7() {\n+        Partial test = createHourMinPartial(23, 59, ISO_UTC);\n+        try {\n+            test.withFieldAdded(DurationFieldType.minutes(), 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        check(test, 23, 59);\n+        \n+        test = createHourMinPartial(23, 59, ISO_UTC);\n+        try {\n+            test.withFieldAdded(DurationFieldType.hours(), 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        check(test, 23, 59);\n+    }\n+\n+    public void testWithFieldAdded8() {\n+        Partial test = createHourMinPartial(0, 0, ISO_UTC);\n+        try {\n+            test.withFieldAdded(DurationFieldType.minutes(), -1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        check(test, 0, 0);\n+        \n+        test = createHourMinPartial(0, 0, ISO_UTC);\n+        try {\n+            test.withFieldAdded(DurationFieldType.hours(), -1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        check(test, 0, 0);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithFieldAddWrapped1() {\n+        Partial test = createHourMinPartial();\n+        Partial result = test.withFieldAddWrapped(DurationFieldType.hours(), 6);\n+        \n+        assertEquals(createHourMinPartial(), test);\n+        check(test, 10, 20);\n+        check(result, 16, 20);\n+    }\n+\n+    public void testWithFieldAddWrapped2() {\n+        Partial test = createHourMinPartial();\n+        try {\n+            test.withFieldAddWrapped(null, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20);\n+    }\n+\n+    public void testWithFieldAddWrapped3() {\n+        Partial test = createHourMinPartial();\n+        try {\n+            test.withFieldAddWrapped(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20);\n+    }\n+\n+    public void testWithFieldAddWrapped4() {\n+        Partial test = createHourMinPartial();\n+        Partial result = test.withFieldAddWrapped(DurationFieldType.hours(), 0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testWithFieldAddWrapped5() {\n+        Partial test = createHourMinPartial();\n+        try {\n+            test.withFieldAddWrapped(DurationFieldType.days(), 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20);\n+    }\n+\n+    public void testWithFieldAddWrapped6() {\n+        Partial test = createHourMinPartial();\n+        Partial result = test.withFieldAddWrapped(DurationFieldType.hours(), 16);\n+        \n+        assertEquals(createHourMinPartial(), test);\n+        check(test, 10, 20);\n+        check(result, 2, 20);\n+    }\n+\n+    public void testWithFieldAddWrapped7() {\n+        Partial test = createHourMinPartial(23, 59, ISO_UTC);\n+        Partial result = test.withFieldAddWrapped(DurationFieldType.minutes(), 1);\n+        check(test, 23, 59);\n+        check(result, 0, 0);\n+        \n+        test = createHourMinPartial(23, 59, ISO_UTC);\n+        result = test.withFieldAddWrapped(DurationFieldType.hours(), 1);\n+        check(test, 23, 59);\n+        check(result, 0, 59);\n+    }\n+\n+    public void testWithFieldAddWrapped8() {\n+        Partial test = createHourMinPartial(0, 0, ISO_UTC);\n+        Partial result = test.withFieldAddWrapped(DurationFieldType.minutes(), -1);\n+        check(test, 0, 0);\n+        check(result, 23, 59);\n+        \n+        test = createHourMinPartial(0, 0, ISO_UTC);\n+        result = test.withFieldAddWrapped(DurationFieldType.hours(), -1);\n+        check(test, 0, 0);\n+        check(result, 23, 0);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPlus_RP() {\n+        Partial test = createHourMinPartial(BUDDHIST_LONDON);\n+        Partial result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8));\n+        check(test, 10, 20);\n+        check(result, 15, 26);\n+        \n+        result = test.plus((ReadablePeriod) null);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMinus_RP() {\n+        Partial test = createHourMinPartial(BUDDHIST_LONDON);\n+        Partial result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));\n+        check(test, 10, 20);\n+        check(result, 9, 19);\n+        \n+        result = test.minus((ReadablePeriod) null);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateTime_RI() {\n+        Partial base = createHourMinPartial(COPTIC_PARIS);\n+        DateTime dt = new DateTime(0L); // LONDON zone\n+        assertEquals(\"1970-01-01T01:00:00.000+01:00\", dt.toString());\n+        \n+        DateTime test = base.toDateTime(dt);\n+        check(base, 10, 20);\n+        assertEquals(\"1970-01-01T01:00:00.000+01:00\", dt.toString());\n+        assertEquals(\"1970-01-01T10:20:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testToDateTime_nullRI() {\n+        Partial base = createHourMinPartial(1, 2, ISO_UTC);\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME2);\n+        \n+        DateTime test = base.toDateTime((ReadableInstant) null);\n+        check(base, 1, 2);\n+        assertEquals(\"1970-01-02T01:02:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testProperty() {\n+        Partial test = createHourMinPartial();\n+        assertNotNull(test.property(DateTimeFieldType.hourOfDay()));\n+        assertNotNull(test.property(DateTimeFieldType.minuteOfHour()));\n+        try {\n+            test.property(DateTimeFieldType.secondOfDay());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.property(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        Partial test = createHourMinPartial(COPTIC_PARIS);\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        Partial result = (Partial) ois.readObject();\n+        ois.close();\n+        \n+        assertEquals(test, result);\n+        assertTrue(Arrays.equals(test.getValues(), result.getValues()));\n+        assertTrue(Arrays.equals(test.getFields(), result.getFields()));\n+        assertEquals(test.getChronology(), result.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetFormatter1() {\n+        Partial test = new Partial(DateTimeFieldType.year(), 2005);\n+        assertEquals(\"2005\", test.getFormatter().print(test));\n+        \n+        test = test.with(DateTimeFieldType.monthOfYear(), 6);\n+        assertEquals(\"2005-06\", test.getFormatter().print(test));\n+        \n+        test = test.with(DateTimeFieldType.dayOfMonth(), 25);\n+        assertEquals(\"2005-06-25\", test.getFormatter().print(test));\n+        \n+        test = test.without(DateTimeFieldType.monthOfYear());\n+        assertEquals(\"2005--25\", test.getFormatter().print(test));\n+    }\n+\n+    public void testGetFormatter2() {\n+        Partial test = new Partial();\n+        assertEquals(null, test.getFormatter());\n+        \n+        test = test.with(DateTimeFieldType.era(), 1);\n+        assertEquals(null, test.getFormatter());\n+        \n+        test = test.with(DateTimeFieldType.halfdayOfDay(), 0);\n+        assertEquals(null, test.getFormatter());\n+    }\n+\n+    public void testGetFormatter3() {\n+        Partial test = new Partial(DateTimeFieldType.dayOfWeek(), 5);\n+        assertEquals(\"-W-5\", test.getFormatter().print(test));\n+        \n+        // contrast with testToString5\n+        test = test.with(DateTimeFieldType.dayOfMonth(), 13);\n+        assertEquals(\"---13\", test.getFormatter().print(test));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString1() {\n+        Partial test = createHourMinPartial();\n+        assertEquals(\"10:20\", test.toString());\n+    }\n+\n+    public void testToString2() {\n+        Partial test = new Partial();\n+        assertEquals(\"[]\", test.toString());\n+    }\n+\n+    public void testToString3() {\n+        Partial test = new Partial(DateTimeFieldType.year(), 2005);\n+        assertEquals(\"2005\", test.toString());\n+        \n+        test = test.with(DateTimeFieldType.monthOfYear(), 6);\n+        assertEquals(\"2005-06\", test.toString());\n+        \n+        test = test.with(DateTimeFieldType.dayOfMonth(), 25);\n+        assertEquals(\"2005-06-25\", test.toString());\n+        \n+        test = test.without(DateTimeFieldType.monthOfYear());\n+        assertEquals(\"2005--25\", test.toString());\n+    }\n+\n+    public void testToString4() {\n+        Partial test = new Partial(DateTimeFieldType.dayOfWeek(), 5);\n+        assertEquals(\"-W-5\", test.toString());\n+        \n+        test = test.with(DateTimeFieldType.dayOfMonth(), 13);\n+        assertEquals(\"[dayOfMonth=13, dayOfWeek=5]\", test.toString());\n+    }\n+\n+    public void testToString5() {\n+        Partial test = new Partial(DateTimeFieldType.era(), 1);\n+        assertEquals(\"[era=1]\", test.toString());\n+        \n+        test = test.with(DateTimeFieldType.halfdayOfDay(), 0);\n+        assertEquals(\"[era=1, halfdayOfDay=0]\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString_String() {\n+        Partial test = createHourMinPartial();\n+        assertEquals(\"\\ufffd\\ufffd\\ufffd\\ufffd 10\", test.toString(\"yyyy HH\"));\n+        assertEquals(\"10:20\", test.toString((String) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString_String_Locale() {\n+        Partial test = createHourMinPartial();\n+        assertEquals(\"10 20\", test.toString(\"H m\", Locale.ENGLISH));\n+        assertEquals(\"10:20\", test.toString(null, Locale.ENGLISH));\n+        assertEquals(\"10 20\", test.toString(\"H m\", null));\n+        assertEquals(\"10:20\", test.toString(null, null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString_DTFormatter() {\n+        Partial test = createHourMinPartial();\n+        assertEquals(\"\\ufffd\\ufffd\\ufffd\\ufffd 10\", test.toString(DateTimeFormat.forPattern(\"yyyy HH\")));\n+        assertEquals(\"10:20\", test.toString((DateTimeFormatter) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private Partial createHourMinPartial() {\n+        return createHourMinPartial(ISO_UTC);\n+    }\n+\n+    private Partial createHourMinPartial(Chronology chrono) {\n+        return createHourMinPartial(10, 20, chrono);\n+    }\n+\n+    private Partial createHourMinPartial2(Chronology chrono) {\n+        return createHourMinPartial(15, 20, chrono);\n+    }\n+\n+    private Partial createHourMinPartial(int hour, int min, Chronology chrono) {\n+        return new Partial(\n+            new DateTimeFieldType[] {DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour()},\n+            new int[] {hour, min},\n+            chrono);\n+    }\n+\n+    private Partial createTODPartial(Chronology chrono) {\n+        return new Partial(\n+            new DateTimeFieldType[] {\n+                    DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(),\n+                    DateTimeFieldType.secondOfMinute(), DateTimeFieldType.millisOfSecond()},\n+            new int[] {10, 20, 30, 40},\n+            chrono);\n+    }\n+\n+    private void check(Partial test, int hour, int min) {\n+        assertEquals(test.toString(), hour, test.get(DateTimeFieldType.hourOfDay()));\n+        assertEquals(test.toString(), min, test.get(DateTimeFieldType.minuteOfHour()));\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestPartial_Constructors.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Arrays;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * This class is a Junit unit test for Partial.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestPartial_Constructors extends TestCase {\n+\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    private static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);\n+    private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();\n+    private static final int OFFSET = 1;\n+    \n+    private long TEST_TIME_NOW =\n+            10L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 20L * DateTimeConstants.MILLIS_PER_MINUTE\n+            + 30L * DateTimeConstants.MILLIS_PER_SECOND\n+            + 40L;\n+            \n+    private long TEST_TIME1 =\n+        1L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 2L * DateTimeConstants.MILLIS_PER_MINUTE\n+        + 3L * DateTimeConstants.MILLIS_PER_SECOND\n+        + 4L;\n+        \n+    private long TEST_TIME2 =\n+        1L * DateTimeConstants.MILLIS_PER_DAY\n+        + 5L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 6L * DateTimeConstants.MILLIS_PER_MINUTE\n+        + 7L * DateTimeConstants.MILLIS_PER_SECOND\n+        + 8L;\n+        \n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestPartial_Constructors.class);\n+    }\n+\n+    public TestPartial_Constructors(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor\n+     */\n+    public void testConstructor() throws Throwable {\n+        Partial test = new Partial();\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(0, test.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor\n+     */\n+    public void testConstructor_Chrono() throws Throwable {\n+        Partial test = new Partial((Chronology) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(0, test.size());\n+        \n+        test = new Partial(GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(0, test.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor\n+     */\n+    public void testConstructor_Type_int() throws Throwable {\n+        Partial test = new Partial(DateTimeFieldType.dayOfYear(), 4);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1, test.size());\n+        assertEquals(4, test.getValue(0));\n+        assertEquals(4, test.get(DateTimeFieldType.dayOfYear()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear()));\n+    }\n+\n+    /**\n+     * Test constructor\n+     */\n+    public void testConstructorEx1_Type_int() throws Throwable {\n+        try {\n+            new Partial(null, 4);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            assertMessageContains(ex, \"must not be null\");\n+        }\n+    }\n+\n+    /**\n+     * Test constructor\n+     */\n+    public void testConstructorEx2_Type_int() throws Throwable {\n+        try {\n+            new Partial(DateTimeFieldType.dayOfYear(), 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor\n+     */\n+    public void testConstructor_Type_int_Chrono() throws Throwable {\n+        Partial test = new Partial(DateTimeFieldType.dayOfYear(), 4, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1, test.size());\n+        assertEquals(4, test.getValue(0));\n+        assertEquals(4, test.get(DateTimeFieldType.dayOfYear()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear()));\n+    }\n+\n+    /**\n+     * Test constructor\n+     */\n+    public void testConstructorEx_Type_int_Chrono() throws Throwable {\n+        try {\n+            new Partial(null, 4, ISO_UTC);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            assertMessageContains(ex, \"must not be null\");\n+        }\n+    }\n+\n+    /**\n+     * Test constructor\n+     */\n+    public void testConstructorEx2_Type_int_Chrono() throws Throwable {\n+        try {\n+            new Partial(DateTimeFieldType.dayOfYear(), 0, ISO_UTC);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor\n+     */\n+    public void testConstructor_TypeArray_intArray() throws Throwable {\n+        DateTimeFieldType[] types = new DateTimeFieldType[] {\n+            DateTimeFieldType.year(),\n+            DateTimeFieldType.dayOfYear()\n+        };\n+        int[] values = new int[] {2005, 33};\n+        Partial test = new Partial(types, values);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(2, test.size());\n+        assertEquals(2005, test.getValue(0));\n+        assertEquals(2005, test.get(DateTimeFieldType.year()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.year()));\n+        assertEquals(33, test.getValue(1));\n+        assertEquals(33, test.get(DateTimeFieldType.dayOfYear()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear()));\n+        assertEquals(true, Arrays.equals(test.getFieldTypes(), types));\n+        assertEquals(true, Arrays.equals(test.getValues(), values));\n+    }\n+\n+    /**\n+     * Test constructor\n+     */\n+    public void testConstructor2_TypeArray_intArray() throws Throwable {\n+        DateTimeFieldType[] types = new DateTimeFieldType[0];\n+        int[] values = new int[0];\n+        Partial test = new Partial(types, values);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(0, test.size());\n+    }\n+\n+    /**\n+     * Test constructor\n+     */\n+    public void testConstructorEx1_TypeArray_intArray() throws Throwable {\n+        try {\n+            new Partial((DateTimeFieldType[]) null, new int[] {1});\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            assertMessageContains(ex, \"must not be null\");\n+        }\n+    }\n+\n+    /**\n+     * Test constructor\n+     */\n+    public void testConstructorEx3_TypeArray_intArray() throws Throwable {\n+        try {\n+            new Partial(new DateTimeFieldType[] {DateTimeFieldType.dayOfYear()}, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            assertMessageContains(ex, \"must not be null\");\n+        }\n+    }\n+\n+    /**\n+     * Test constructor\n+     */\n+    public void testConstructorEx5_TypeArray_intArray() throws Throwable {\n+        try {\n+            new Partial(new DateTimeFieldType[] {DateTimeFieldType.dayOfYear()}, new int[2]);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            assertMessageContains(ex, \"same length\");\n+        }\n+    }\n+\n+    /**\n+     * Test constructor\n+     */\n+    public void testConstructorEx6_TypeArray_intArray() throws Throwable {\n+        try {\n+            new Partial(new DateTimeFieldType[] {null, DateTimeFieldType.dayOfYear()}, new int[2]);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            assertMessageContains(ex, \"contain null\");\n+        }\n+        try {\n+            new Partial(new DateTimeFieldType[] {DateTimeFieldType.dayOfYear(), null}, new int[2]);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            assertMessageContains(ex, \"contain null\");\n+        }\n+    }\n+\n+    /**\n+     * Test constructor\n+     */\n+    public void testConstructorEx7_TypeArray_intArray() throws Throwable {\n+        int[] values = new int[] {1, 1, 1};\n+        DateTimeFieldType[] types = new DateTimeFieldType[] {\n+            DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };\n+        try {\n+            new Partial(types, values);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n+        }\n+        \n+        types = new DateTimeFieldType[] {\n+            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };\n+        try {\n+            new Partial(types, values);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n+        }\n+        \n+        types = new DateTimeFieldType[] {\n+            DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\n+        try {\n+            new Partial(types, values);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n+        }\n+        \n+        types = new DateTimeFieldType[] {\n+            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() };\n+        try {\n+            new Partial(types, values);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n+        }\n+        \n+        types = new DateTimeFieldType[] {\n+            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() };\n+        try {\n+            new Partial(types, values);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n+        }\n+        \n+        types = new DateTimeFieldType[] {\n+            DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() };\n+        try {\n+            new Partial(types, values);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            assertMessageContains(ex, \"must be in order\", \"largest-smallest\");\n+        }\n+    }\n+\n+    /**\n+     * Test constructor\n+     */\n+    public void testConstructorEx8_TypeArray_intArray() throws Throwable {\n+        int[] values = new int[] {1, 1, 1};\n+        DateTimeFieldType[] types = new DateTimeFieldType[] {\n+            DateTimeFieldType.era(), DateTimeFieldType.year(), DateTimeFieldType.year() };\n+        try {\n+            new Partial(types, values);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            assertMessageContains(ex, \"must not\", \"duplicate\");\n+        }\n+        \n+        types = new DateTimeFieldType[] {\n+            DateTimeFieldType.era(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\n+        try {\n+            new Partial(types, values);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            assertMessageContains(ex, \"must not\", \"duplicate\");\n+        }\n+        \n+        types = new DateTimeFieldType[] {\n+            DateTimeFieldType.dayOfYear(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfMonth() };\n+        try {\n+            new Partial(types, values);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            assertMessageContains(ex, \"must not\", \"duplicate\");\n+        }\n+    }\n+\n+    /**\n+     * Test constructor\n+     */\n+    public void testConstructorEx9_TypeArray_intArray() throws Throwable {\n+        int[] values = new int[] {3, 0};\n+        DateTimeFieldType[] types = new DateTimeFieldType[] {\n+            DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfWeek()};\n+        try {\n+            new Partial(types, values);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor\n+     */\n+    public void testConstructor_TypeArray_intArray_Chrono() throws Throwable {\n+        DateTimeFieldType[] types = new DateTimeFieldType[] {\n+            DateTimeFieldType.year(),\n+            DateTimeFieldType.dayOfYear()\n+        };\n+        int[] values = new int[] {2005, 33};\n+        Partial test = new Partial(types, values, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(2, test.size());\n+        assertEquals(2005, test.getValue(0));\n+        assertEquals(2005, test.get(DateTimeFieldType.year()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.year()));\n+        assertEquals(33, test.getValue(1));\n+        assertEquals(33, test.get(DateTimeFieldType.dayOfYear()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear()));\n+        assertEquals(true, Arrays.equals(test.getFieldTypes(), types));\n+        assertEquals(true, Arrays.equals(test.getValues(), values));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor\n+     */\n+    public void testConstructor_Partial() throws Throwable {\n+        YearMonthDay ymd = new YearMonthDay(2005, 6, 25, GREGORIAN_PARIS);\n+        Partial test = new Partial(ymd);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(3, test.size());\n+        assertEquals(2005, test.getValue(0));\n+        assertEquals(2005, test.get(DateTimeFieldType.year()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.year()));\n+        assertEquals(6, test.getValue(1));\n+        assertEquals(6, test.get(DateTimeFieldType.monthOfYear()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear()));\n+        assertEquals(25, test.getValue(2));\n+        assertEquals(25, test.get(DateTimeFieldType.dayOfMonth()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth()));\n+    }\n+\n+    /**\n+     * Test constructor\n+     */\n+    public void testConstructorEx_Partial() throws Throwable {\n+        try {\n+            new Partial((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            assertMessageContains(ex, \"must not be null\");\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Checks if the exception message is valid.\n+     * \n+     * @param ex  the exception to check\n+     * @param str  the string to check\n+     */\n+    private void assertMessageContains(Exception ex, String str) {\n+        assertEquals(ex.getMessage() + \": \" + str, true, ex.getMessage().indexOf(str) >= 0);\n+    }\n+\n+    /**\n+     * Checks if the exception message is valid.\n+     * \n+     * @param ex  the exception to check\n+     * @param str1  the string to check\n+     * @param str2  the string to check\n+     */\n+    private void assertMessageContains(Exception ex, String str1, String str2) {\n+        assertEquals(ex.getMessage() + \": \" + str1 + \"/\" + str2, true,\n+            ex.getMessage().indexOf(str1) >= 0 &&\n+            ex.getMessage().indexOf(str2) >= 0 &&\n+            ex.getMessage().indexOf(str1) < ex.getMessage().indexOf(str2));\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestPartial_Match.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * This class is a Junit unit test for Partial.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestPartial_Match extends TestCase {\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    private static final int OFFSET = 1;\n+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+    private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);\n+    private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);\n+    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n+    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);\n+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n+    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);\n+    private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);\n+    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n+    \n+    private long TEST_TIME_NOW =\n+            10L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 20L * DateTimeConstants.MILLIS_PER_MINUTE\n+            + 30L * DateTimeConstants.MILLIS_PER_SECOND\n+            + 40L;\n+            \n+    private long TEST_TIME1 =\n+        1L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 2L * DateTimeConstants.MILLIS_PER_MINUTE\n+        + 3L * DateTimeConstants.MILLIS_PER_SECOND\n+        + 4L;\n+        \n+    private long TEST_TIME2 =\n+        1L * DateTimeConstants.MILLIS_PER_DAY\n+        + 5L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 6L * DateTimeConstants.MILLIS_PER_MINUTE\n+        + 7L * DateTimeConstants.MILLIS_PER_SECOND\n+        + 8L;\n+        \n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestPartial_Match.class);\n+    }\n+\n+    public TestPartial_Match(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsMatch_Instant() {\n+        // Year=2005, Month=7 (July), DayOfWeek=2 (Tuesday)\n+        Partial test = createYMDwPartial(ISO_UTC, 2005, 7, 2);\n+        DateTime instant = new DateTime(2005, 7, 5, 0, 0, 0, 0);\n+        assertEquals(true, test.isMatch(instant));\n+        \n+        instant = new DateTime(2005, 7, 4, 0, 0, 0, 0);\n+        assertEquals(false, test.isMatch(instant));\n+        \n+        instant = new DateTime(2005, 7, 6, 0, 0, 0, 0);\n+        assertEquals(false, test.isMatch(instant));\n+        \n+        instant = new DateTime(2005, 7, 12, 0, 0, 0, 0);\n+        assertEquals(true, test.isMatch(instant));\n+        \n+        instant = new DateTime(2005, 7, 19, 0, 0, 0, 0);\n+        assertEquals(true, test.isMatch(instant));\n+        \n+        instant = new DateTime(2005, 7, 26, 0, 0, 0, 0);\n+        assertEquals(true, test.isMatch(instant));\n+        \n+        instant = new DateTime(2005, 8, 2, 0, 0, 0, 0);\n+        assertEquals(false, test.isMatch(instant));\n+        \n+        instant = new DateTime(2006, 7, 5, 0, 0, 0, 0);\n+        assertEquals(false, test.isMatch(instant));\n+        \n+        instant = new DateTime(2005, 6, 5, 0, 0, 0, 0);\n+        assertEquals(false, test.isMatch(instant));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsMatch_Partial() {\n+        // Year=2005, Month=7 (July), DayOfWeek=2 (Tuesday)\n+        Partial test = createYMDwPartial(ISO_UTC, 2005, 7, 2);\n+        LocalDate partial = new LocalDate(2005, 7, 5);\n+        assertEquals(true, test.isMatch(partial));\n+        \n+        partial = new LocalDate(2005, 7, 4);\n+        assertEquals(false, test.isMatch(partial));\n+        \n+        partial = new LocalDate(2005, 7, 6);\n+        assertEquals(false, test.isMatch(partial));\n+        \n+        partial = new LocalDate(2005, 7, 12);\n+        assertEquals(true, test.isMatch(partial));\n+        \n+        partial = new LocalDate(2005, 7, 19);\n+        assertEquals(true, test.isMatch(partial));\n+        \n+        partial = new LocalDate(2005, 7, 26);\n+        assertEquals(true, test.isMatch(partial));\n+        \n+        partial = new LocalDate(2005, 8, 2);\n+        assertEquals(false, test.isMatch(partial));\n+        \n+        partial = new LocalDate(2006, 7, 5);\n+        assertEquals(false, test.isMatch(partial));\n+        \n+        partial = new LocalDate(2005, 6, 5);\n+        assertEquals(false, test.isMatch(partial));\n+        \n+        try {\n+            test.isMatch((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private Partial createYMDwPartial(Chronology chrono, int year, int month, int dow) {\n+        return new Partial(\n+            new DateTimeFieldType[] {\n+                    DateTimeFieldType.year(),\n+                    DateTimeFieldType.monthOfYear(),\n+                    DateTimeFieldType.dayOfWeek()},\n+            new int[] {year, month, dow},\n+            chrono);\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestPartial_Properties.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * This class is a Junit unit test for Partial.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestPartial_Properties extends TestCase {\n+\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    \n+    private DateTimeZone zone = null;\n+    private static final DateTimeFieldType[] TYPES = new DateTimeFieldType[] {\n+        DateTimeFieldType.hourOfDay(),\n+        DateTimeFieldType.minuteOfHour(),\n+        DateTimeFieldType.secondOfMinute(),\n+        DateTimeFieldType.millisOfSecond()\n+    };\n+    private static final int[] VALUES = new int[] {10, 20, 30, 40};\n+    private static final int[] VALUES1 = new int[] {1, 2, 3, 4};\n+    private static final int[] VALUES2 = new int[] {5, 6, 7, 8};\n+\n+//    private long TEST_TIME_NOW =\n+//        10L * DateTimeConstants.MILLIS_PER_HOUR\n+//        + 20L * DateTimeConstants.MILLIS_PER_MINUTE\n+//        + 30L * DateTimeConstants.MILLIS_PER_SECOND\n+//        + 40L;\n+//        \n+    private long TEST_TIME1 =\n+        1L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 2L * DateTimeConstants.MILLIS_PER_MINUTE\n+        + 3L * DateTimeConstants.MILLIS_PER_SECOND\n+        + 4L;\n+    private long TEST_TIME2 =\n+        1L * DateTimeConstants.MILLIS_PER_DAY\n+        + 5L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 6L * DateTimeConstants.MILLIS_PER_MINUTE\n+        + 7L * DateTimeConstants.MILLIS_PER_SECOND\n+        + 8L;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestPartial_Properties.class);\n+    }\n+\n+    public TestPartial_Properties(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeZone.setDefault(zone);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetHour() {\n+        Partial test = new Partial(TYPES, VALUES);\n+        assertSame(test.getChronology().hourOfDay(), test.property(DateTimeFieldType.hourOfDay()).getField());\n+        assertEquals(\"hourOfDay\", test.property(DateTimeFieldType.hourOfDay()).getName());\n+        assertEquals(\"Property[hourOfDay]\", test.property(DateTimeFieldType.hourOfDay()).toString());\n+        assertSame(test, test.property(DateTimeFieldType.hourOfDay()).getReadablePartial());\n+        assertSame(test, test.property(DateTimeFieldType.hourOfDay()).getPartial());\n+        assertEquals(10, test.property(DateTimeFieldType.hourOfDay()).get());\n+        assertEquals(\"10\", test.property(DateTimeFieldType.hourOfDay()).getAsString());\n+        assertEquals(\"10\", test.property(DateTimeFieldType.hourOfDay()).getAsText());\n+        assertEquals(\"10\", test.property(DateTimeFieldType.hourOfDay()).getAsText(Locale.FRENCH));\n+        assertEquals(\"10\", test.property(DateTimeFieldType.hourOfDay()).getAsShortText());\n+        assertEquals(\"10\", test.property(DateTimeFieldType.hourOfDay()).getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().hours(), test.property(DateTimeFieldType.hourOfDay()).getDurationField());\n+        assertEquals(test.getChronology().days(), test.property(DateTimeFieldType.hourOfDay()).getRangeDurationField());\n+        assertEquals(2, test.property(DateTimeFieldType.hourOfDay()).getMaximumTextLength(null));\n+        assertEquals(2, test.property(DateTimeFieldType.hourOfDay()).getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesHour() {\n+        Partial test = new Partial(TYPES, VALUES);\n+        assertEquals(0, test.property(DateTimeFieldType.hourOfDay()).getMinimumValue());\n+        assertEquals(0, test.property(DateTimeFieldType.hourOfDay()).getMinimumValueOverall());\n+        assertEquals(23, test.property(DateTimeFieldType.hourOfDay()).getMaximumValue());\n+        assertEquals(23, test.property(DateTimeFieldType.hourOfDay()).getMaximumValueOverall());\n+    }\n+\n+//    public void testPropertyAddHour() {\n+//        Partial test = new Partial(TYPES, VALUES);\n+//        Partial copy = test.property(DateTimeFieldType.hourOfDay()).addToCopy(9);\n+//        check(test, 10, 20, 30, 40);\n+//        check(copy, 19, 20, 30, 40);\n+//        \n+//        copy = test.property(DateTimeFieldType.hourOfDay()).addToCopy(0);\n+//        check(copy, 10, 20, 30, 40);\n+//        \n+//        copy = test.property(DateTimeFieldType.hourOfDay()).addToCopy(13);\n+//        check(copy, 23, 20, 30, 40);\n+//        \n+//        copy = test.property(DateTimeFieldType.hourOfDay()).addToCopy(14);\n+//        check(copy, 0, 20, 30, 40);\n+//        \n+//        copy = test.property(DateTimeFieldType.hourOfDay()).addToCopy(-10);\n+//        check(copy, 0, 20, 30, 40);\n+//        \n+//        copy = test.property(DateTimeFieldType.hourOfDay()).addToCopy(-11);\n+//        check(copy, 23, 20, 30, 40);\n+//    }\n+//\n+    public void testPropertyAddHour() {\n+        Partial test = new Partial(TYPES, VALUES);\n+        Partial copy = test.property(DateTimeFieldType.hourOfDay()).addToCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 19, 20, 30, 40);\n+        \n+        copy = test.property(DateTimeFieldType.hourOfDay()).addToCopy(0);\n+        check(copy, 10, 20, 30, 40);\n+        \n+        copy = test.property(DateTimeFieldType.hourOfDay()).addToCopy(13);\n+        check(copy, 23, 20, 30, 40);\n+        \n+        try {\n+            test.property(DateTimeFieldType.hourOfDay()).addToCopy(14);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+        \n+        copy = test.property(DateTimeFieldType.hourOfDay()).addToCopy(-10);\n+        check(copy, 0, 20, 30, 40);\n+        \n+        try {\n+            test.property(DateTimeFieldType.hourOfDay()).addToCopy(-11);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyAddWrapFieldHour() {\n+        Partial test = new Partial(TYPES, VALUES);\n+        Partial copy = test.property(DateTimeFieldType.hourOfDay()).addWrapFieldToCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 19, 20, 30, 40);\n+        \n+        copy = test.property(DateTimeFieldType.hourOfDay()).addWrapFieldToCopy(0);\n+        check(copy, 10, 20, 30, 40);\n+        \n+        copy = test.property(DateTimeFieldType.hourOfDay()).addWrapFieldToCopy(18);\n+        check(copy, 4, 20, 30, 40);\n+        \n+        copy = test.property(DateTimeFieldType.hourOfDay()).addWrapFieldToCopy(-15);\n+        check(copy, 19, 20, 30, 40);\n+    }\n+\n+    public void testPropertySetHour() {\n+        Partial test = new Partial(TYPES, VALUES);\n+        Partial copy = test.property(DateTimeFieldType.hourOfDay()).setCopy(12);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 12, 20, 30, 40);\n+        \n+        try {\n+            test.property(DateTimeFieldType.hourOfDay()).setCopy(24);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.property(DateTimeFieldType.hourOfDay()).setCopy(-1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextHour() {\n+        Partial test = new Partial(TYPES, VALUES);\n+        Partial copy = test.property(DateTimeFieldType.hourOfDay()).setCopy(\"12\");\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 12, 20, 30, 40);\n+    }\n+\n+    public void testPropertyWithMaximumValueHour() {\n+        Partial test = new Partial(TYPES, VALUES);\n+        Partial copy = test.property(DateTimeFieldType.hourOfDay()).withMaximumValue();\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 23, 20, 30, 40);\n+    }\n+\n+    public void testPropertyWithMinimumValueHour() {\n+        Partial test = new Partial(TYPES, VALUES);\n+        Partial copy = test.property(DateTimeFieldType.hourOfDay()).withMinimumValue();\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 0, 20, 30, 40);\n+    }\n+\n+    public void testPropertyCompareToHour() {\n+        Partial test1 = new Partial(TYPES, VALUES1);\n+        Partial test2 = new Partial(TYPES, VALUES2);\n+        assertEquals(true, test1.property(DateTimeFieldType.hourOfDay()).compareTo(test2) < 0);\n+        assertEquals(true, test2.property(DateTimeFieldType.hourOfDay()).compareTo(test1) > 0);\n+        assertEquals(true, test1.property(DateTimeFieldType.hourOfDay()).compareTo(test1) == 0);\n+        try {\n+            test1.property(DateTimeFieldType.hourOfDay()).compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.property(DateTimeFieldType.hourOfDay()).compareTo(dt2) < 0);\n+        assertEquals(true, test2.property(DateTimeFieldType.hourOfDay()).compareTo(dt1) > 0);\n+        assertEquals(true, test1.property(DateTimeFieldType.hourOfDay()).compareTo(dt1) == 0);\n+        try {\n+            test1.property(DateTimeFieldType.hourOfDay()).compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMinute() {\n+        Partial test = new Partial(TYPES, VALUES);\n+        assertSame(test.getChronology().minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour()).getField());\n+        assertEquals(\"minuteOfHour\", test.property(DateTimeFieldType.minuteOfHour()).getName());\n+        assertEquals(\"Property[minuteOfHour]\", test.property(DateTimeFieldType.minuteOfHour()).toString());\n+        assertSame(test, test.property(DateTimeFieldType.minuteOfHour()).getReadablePartial());\n+        assertSame(test, test.property(DateTimeFieldType.minuteOfHour()).getPartial());\n+        assertEquals(20, test.property(DateTimeFieldType.minuteOfHour()).get());\n+        assertEquals(\"20\", test.property(DateTimeFieldType.minuteOfHour()).getAsString());\n+        assertEquals(\"20\", test.property(DateTimeFieldType.minuteOfHour()).getAsText());\n+        assertEquals(\"20\", test.property(DateTimeFieldType.minuteOfHour()).getAsText(Locale.FRENCH));\n+        assertEquals(\"20\", test.property(DateTimeFieldType.minuteOfHour()).getAsShortText());\n+        assertEquals(\"20\", test.property(DateTimeFieldType.minuteOfHour()).getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().minutes(), test.property(DateTimeFieldType.minuteOfHour()).getDurationField());\n+        assertEquals(test.getChronology().hours(), test.property(DateTimeFieldType.minuteOfHour()).getRangeDurationField());\n+        assertEquals(2, test.property(DateTimeFieldType.minuteOfHour()).getMaximumTextLength(null));\n+        assertEquals(2, test.property(DateTimeFieldType.minuteOfHour()).getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesMinute() {\n+        Partial test = new Partial(TYPES, VALUES);\n+        assertEquals(0, test.property(DateTimeFieldType.minuteOfHour()).getMinimumValue());\n+        assertEquals(0, test.property(DateTimeFieldType.minuteOfHour()).getMinimumValueOverall());\n+        assertEquals(59, test.property(DateTimeFieldType.minuteOfHour()).getMaximumValue());\n+        assertEquals(59, test.property(DateTimeFieldType.minuteOfHour()).getMaximumValueOverall());\n+    }\n+\n+//    public void testPropertyAddMinute() {\n+//        Partial test = new Partial(TYPES, VALUES);\n+//        Partial copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(9);\n+//        check(test, 10, 20, 30, 40);\n+//        check(copy, 10, 29, 30, 40);\n+//        \n+//        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(39);\n+//        check(copy, 10, 59, 30, 40);\n+//        \n+//        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(40);\n+//        check(copy, 11, 0, 30, 40);\n+//        \n+//        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(1 * 60 + 45);\n+//        check(copy, 12, 5, 30, 40);\n+//        \n+//        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(13 * 60 + 39);\n+//        check(copy, 23, 59, 30, 40);\n+//        \n+//        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(13 * 60 + 40);\n+//        check(copy, 0, 0, 30, 40);\n+//        \n+//        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-9);\n+//        check(copy, 10, 11, 30, 40);\n+//        \n+//        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-19);\n+//        check(copy, 10, 1, 30, 40);\n+//        \n+//        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-20);\n+//        check(copy, 10, 0, 30, 40);\n+//        \n+//        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-21);\n+//        check(copy, 9, 59, 30, 40);\n+//        \n+//        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-(10 * 60 + 20));\n+//        check(copy, 0, 0, 30, 40);\n+//        \n+//        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-(10 * 60 + 21));\n+//        check(copy, 23, 59, 30, 40);\n+//    }\n+\n+    public void testPropertyAddMinute() {\n+        Partial test = new Partial(TYPES, VALUES);\n+        Partial copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 29, 30, 40);\n+        \n+        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(39);\n+        check(copy, 10, 59, 30, 40);\n+        \n+        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(40);\n+        check(copy, 11, 0, 30, 40);\n+        \n+        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(1 * 60 + 45);\n+        check(copy, 12, 5, 30, 40);\n+        \n+        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(13 * 60 + 39);\n+        check(copy, 23, 59, 30, 40);\n+        \n+        try {\n+            test.property(DateTimeFieldType.minuteOfHour()).addToCopy(13 * 60 + 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+        \n+        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-9);\n+        check(copy, 10, 11, 30, 40);\n+        \n+        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-19);\n+        check(copy, 10, 1, 30, 40);\n+        \n+        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-20);\n+        check(copy, 10, 0, 30, 40);\n+        \n+        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-21);\n+        check(copy, 9, 59, 30, 40);\n+        \n+        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-(10 * 60 + 20));\n+        check(copy, 0, 0, 30, 40);\n+        \n+        try {\n+            test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-(10 * 60 + 21));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyAddWrapFieldMinute() {\n+        Partial test = new Partial(TYPES, VALUES);\n+        Partial copy = test.property(DateTimeFieldType.minuteOfHour()).addWrapFieldToCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 29, 30, 40);\n+        \n+        copy = test.property(DateTimeFieldType.minuteOfHour()).addWrapFieldToCopy(49);\n+        check(copy, 10, 9, 30, 40);\n+        \n+        copy = test.property(DateTimeFieldType.minuteOfHour()).addWrapFieldToCopy(-47);\n+        check(copy, 10, 33, 30, 40);\n+    }\n+\n+    public void testPropertySetMinute() {\n+        Partial test = new Partial(TYPES, VALUES);\n+        Partial copy = test.property(DateTimeFieldType.minuteOfHour()).setCopy(12);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 12, 30, 40);\n+        \n+        try {\n+            test.property(DateTimeFieldType.minuteOfHour()).setCopy(60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.property(DateTimeFieldType.minuteOfHour()).setCopy(-1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextMinute() {\n+        Partial test = new Partial(TYPES, VALUES);\n+        Partial copy = test.property(DateTimeFieldType.minuteOfHour()).setCopy(\"12\");\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 12, 30, 40);\n+    }\n+\n+    public void testPropertyCompareToMinute() {\n+        Partial test1 = new Partial(TYPES, VALUES1);\n+        Partial test2 = new Partial(TYPES, VALUES2);\n+        assertEquals(true, test1.property(DateTimeFieldType.minuteOfHour()).compareTo(test2) < 0);\n+        assertEquals(true, test2.property(DateTimeFieldType.minuteOfHour()).compareTo(test1) > 0);\n+        assertEquals(true, test1.property(DateTimeFieldType.minuteOfHour()).compareTo(test1) == 0);\n+        try {\n+            test1.property(DateTimeFieldType.minuteOfHour()).compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.property(DateTimeFieldType.minuteOfHour()).compareTo(dt2) < 0);\n+        assertEquals(true, test2.property(DateTimeFieldType.minuteOfHour()).compareTo(dt1) > 0);\n+        assertEquals(true, test1.property(DateTimeFieldType.minuteOfHour()).compareTo(dt1) == 0);\n+        try {\n+            test1.property(DateTimeFieldType.minuteOfHour()).compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private void check(Partial test, int hour, int min, int sec, int milli) {\n+        assertEquals(hour, test.get(DateTimeFieldType.hourOfDay()));\n+        assertEquals(min, test.get(DateTimeFieldType.minuteOfHour()));\n+        assertEquals(sec, test.get(DateTimeFieldType.secondOfMinute()));\n+        assertEquals(milli, test.get(DateTimeFieldType.millisOfSecond()));\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestPeriodType.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * This class is a JUnit test for PeriodType.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestPeriodType extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestPeriodType.class);\n+    }\n+\n+    public TestPeriodType(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private void assertEqualsAfterSerialization(PeriodType type) throws Exception {\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(type);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        PeriodType result = (PeriodType) ois.readObject();\n+        ois.close();\n+        \n+        assertEquals(type, result);\n+    }\n+\n+    private void assertSameAfterSerialization(PeriodType type) throws Exception {\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(type);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        PeriodType result = (PeriodType) ois.readObject();\n+        ois.close();\n+        \n+        assertEquals(type, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testStandard() throws Exception {\n+        PeriodType type = PeriodType.standard();\n+        assertEquals(8, type.size());\n+        assertEquals(DurationFieldType.years(), type.getFieldType(0));\n+        assertEquals(DurationFieldType.months(), type.getFieldType(1));\n+        assertEquals(DurationFieldType.weeks(), type.getFieldType(2));\n+        assertEquals(DurationFieldType.days(), type.getFieldType(3));\n+        assertEquals(DurationFieldType.hours(), type.getFieldType(4));\n+        assertEquals(DurationFieldType.minutes(), type.getFieldType(5));\n+        assertEquals(DurationFieldType.seconds(), type.getFieldType(6));\n+        assertEquals(DurationFieldType.millis(), type.getFieldType(7));\n+        assertEquals(\"Standard\", type.getName());\n+        assertEquals(\"PeriodType[Standard]\", type.toString());\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type == PeriodType.standard());\n+        assertEquals(false, type.equals(PeriodType.millis()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.standard().hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n+        assertSameAfterSerialization(type);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testYearMonthDayTime() throws Exception {\n+        PeriodType type = PeriodType.yearMonthDayTime();\n+        assertEquals(7, type.size());\n+        assertEquals(DurationFieldType.years(), type.getFieldType(0));\n+        assertEquals(DurationFieldType.months(), type.getFieldType(1));\n+        assertEquals(DurationFieldType.days(), type.getFieldType(2));\n+        assertEquals(DurationFieldType.hours(), type.getFieldType(3));\n+        assertEquals(DurationFieldType.minutes(), type.getFieldType(4));\n+        assertEquals(DurationFieldType.seconds(), type.getFieldType(5));\n+        assertEquals(DurationFieldType.millis(), type.getFieldType(6));\n+        assertEquals(\"YearMonthDayTime\", type.getName());\n+        assertEquals(\"PeriodType[YearMonthDayTime]\", type.toString());\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type == PeriodType.yearMonthDayTime());\n+        assertEquals(false, type.equals(PeriodType.millis()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.yearMonthDayTime().hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n+        assertSameAfterSerialization(type);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testYearMonthDay() throws Exception {\n+        PeriodType type = PeriodType.yearMonthDay();\n+        assertEquals(3, type.size());\n+        assertEquals(DurationFieldType.years(), type.getFieldType(0));\n+        assertEquals(DurationFieldType.months(), type.getFieldType(1));\n+        assertEquals(DurationFieldType.days(), type.getFieldType(2));\n+        assertEquals(\"YearMonthDay\", type.getName());\n+        assertEquals(\"PeriodType[YearMonthDay]\", type.toString());\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type == PeriodType.yearMonthDay());\n+        assertEquals(false, type.equals(PeriodType.millis()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.yearMonthDay().hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n+        assertSameAfterSerialization(type);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testYearWeekDayTime() throws Exception {\n+        PeriodType type = PeriodType.yearWeekDayTime();\n+        assertEquals(7, type.size());\n+        assertEquals(DurationFieldType.years(), type.getFieldType(0));\n+        assertEquals(DurationFieldType.weeks(), type.getFieldType(1));\n+        assertEquals(DurationFieldType.days(), type.getFieldType(2));\n+        assertEquals(DurationFieldType.hours(), type.getFieldType(3));\n+        assertEquals(DurationFieldType.minutes(), type.getFieldType(4));\n+        assertEquals(DurationFieldType.seconds(), type.getFieldType(5));\n+        assertEquals(DurationFieldType.millis(), type.getFieldType(6));\n+        assertEquals(\"YearWeekDayTime\", type.getName());\n+        assertEquals(\"PeriodType[YearWeekDayTime]\", type.toString());\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type == PeriodType.yearWeekDayTime());\n+        assertEquals(false, type.equals(PeriodType.millis()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.yearWeekDayTime().hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n+        assertSameAfterSerialization(type);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testYearWeekDay() throws Exception {\n+        PeriodType type = PeriodType.yearWeekDay();\n+        assertEquals(3, type.size());\n+        assertEquals(DurationFieldType.years(), type.getFieldType(0));\n+        assertEquals(DurationFieldType.weeks(), type.getFieldType(1));\n+        assertEquals(DurationFieldType.days(), type.getFieldType(2));\n+        assertEquals(\"YearWeekDay\", type.getName());\n+        assertEquals(\"PeriodType[YearWeekDay]\", type.toString());\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type == PeriodType.yearWeekDay());\n+        assertEquals(false, type.equals(PeriodType.millis()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.yearWeekDay().hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n+        assertSameAfterSerialization(type);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testYearDayTime() throws Exception {\n+        PeriodType type = PeriodType.yearDayTime();\n+        assertEquals(6, type.size());\n+        assertEquals(DurationFieldType.years(), type.getFieldType(0));\n+        assertEquals(DurationFieldType.days(), type.getFieldType(1));\n+        assertEquals(DurationFieldType.hours(), type.getFieldType(2));\n+        assertEquals(DurationFieldType.minutes(), type.getFieldType(3));\n+        assertEquals(DurationFieldType.seconds(), type.getFieldType(4));\n+        assertEquals(DurationFieldType.millis(), type.getFieldType(5));\n+        assertEquals(\"YearDayTime\", type.getName());\n+        assertEquals(\"PeriodType[YearDayTime]\", type.toString());\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type == PeriodType.yearDayTime());\n+        assertEquals(false, type.equals(PeriodType.millis()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.yearDayTime().hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n+        assertSameAfterSerialization(type);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testYearDay() throws Exception {\n+        PeriodType type = PeriodType.yearDay();\n+        assertEquals(2, type.size());\n+        assertEquals(DurationFieldType.years(), type.getFieldType(0));\n+        assertEquals(DurationFieldType.days(), type.getFieldType(1));\n+        assertEquals(\"YearDay\", type.getName());\n+        assertEquals(\"PeriodType[YearDay]\", type.toString());\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type == PeriodType.yearDay());\n+        assertEquals(false, type.equals(PeriodType.millis()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.yearDay().hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n+        assertSameAfterSerialization(type);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testDayTime() throws Exception {\n+        PeriodType type = PeriodType.dayTime();\n+        assertEquals(5, type.size());\n+        assertEquals(DurationFieldType.days(), type.getFieldType(0));\n+        assertEquals(DurationFieldType.hours(), type.getFieldType(1));\n+        assertEquals(DurationFieldType.minutes(), type.getFieldType(2));\n+        assertEquals(DurationFieldType.seconds(), type.getFieldType(3));\n+        assertEquals(DurationFieldType.millis(), type.getFieldType(4));\n+        assertEquals(\"DayTime\", type.getName());\n+        assertEquals(\"PeriodType[DayTime]\", type.toString());\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type == PeriodType.dayTime());\n+        assertEquals(false, type.equals(PeriodType.millis()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.dayTime().hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n+        assertSameAfterSerialization(type);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTime() throws Exception {\n+        PeriodType type = PeriodType.time();\n+        assertEquals(4, type.size());\n+        assertEquals(DurationFieldType.hours(), type.getFieldType(0));\n+        assertEquals(DurationFieldType.minutes(), type.getFieldType(1));\n+        assertEquals(DurationFieldType.seconds(), type.getFieldType(2));\n+        assertEquals(DurationFieldType.millis(), type.getFieldType(3));\n+        assertEquals(\"Time\", type.getName());\n+        assertEquals(\"PeriodType[Time]\", type.toString());\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type == PeriodType.time());\n+        assertEquals(false, type.equals(PeriodType.millis()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.time().hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n+        assertSameAfterSerialization(type);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testYears() throws Exception {\n+        PeriodType type = PeriodType.years();\n+        assertEquals(1, type.size());\n+        assertEquals(DurationFieldType.years(), type.getFieldType(0));\n+        assertEquals(\"Years\", type.getName());\n+        assertEquals(\"PeriodType[Years]\", type.toString());\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type == PeriodType.years());\n+        assertEquals(false, type.equals(PeriodType.standard()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.years().hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.standard().hashCode());\n+        assertSameAfterSerialization(type);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMonths() throws Exception {\n+        PeriodType type = PeriodType.months();\n+        assertEquals(1, type.size());\n+        assertEquals(DurationFieldType.months(), type.getFieldType(0));\n+        assertEquals(\"Months\", type.getName());\n+        assertEquals(\"PeriodType[Months]\", type.toString());\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type == PeriodType.months());\n+        assertEquals(false, type.equals(PeriodType.standard()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.months().hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.standard().hashCode());\n+        assertSameAfterSerialization(type);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWeeks() throws Exception {\n+        PeriodType type = PeriodType.weeks();\n+        assertEquals(1, type.size());\n+        assertEquals(DurationFieldType.weeks(), type.getFieldType(0));\n+        assertEquals(\"Weeks\", type.getName());\n+        assertEquals(\"PeriodType[Weeks]\", type.toString());\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type == PeriodType.weeks());\n+        assertEquals(false, type.equals(PeriodType.standard()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.weeks().hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.standard().hashCode());\n+        assertSameAfterSerialization(type);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testDays() throws Exception {\n+        PeriodType type = PeriodType.days();\n+        assertEquals(1, type.size());\n+        assertEquals(DurationFieldType.days(), type.getFieldType(0));\n+        assertEquals(\"Days\", type.getName());\n+        assertEquals(\"PeriodType[Days]\", type.toString());\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type == PeriodType.days());\n+        assertEquals(false, type.equals(PeriodType.standard()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.days().hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.standard().hashCode());\n+        assertSameAfterSerialization(type);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testHours() throws Exception {\n+        PeriodType type = PeriodType.hours();\n+        assertEquals(1, type.size());\n+        assertEquals(DurationFieldType.hours(), type.getFieldType(0));\n+        assertEquals(\"Hours\", type.getName());\n+        assertEquals(\"PeriodType[Hours]\", type.toString());\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type == PeriodType.hours());\n+        assertEquals(false, type.equals(PeriodType.standard()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.hours().hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.standard().hashCode());\n+        assertSameAfterSerialization(type);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMinutes() throws Exception {\n+        PeriodType type = PeriodType.minutes();\n+        assertEquals(1, type.size());\n+        assertEquals(DurationFieldType.minutes(), type.getFieldType(0));\n+        assertEquals(\"Minutes\", type.getName());\n+        assertEquals(\"PeriodType[Minutes]\", type.toString());\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type == PeriodType.minutes());\n+        assertEquals(false, type.equals(PeriodType.standard()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.minutes().hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.standard().hashCode());\n+        assertSameAfterSerialization(type);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSeconds() throws Exception {\n+        PeriodType type = PeriodType.seconds();\n+        assertEquals(1, type.size());\n+        assertEquals(DurationFieldType.seconds(), type.getFieldType(0));\n+        assertEquals(\"Seconds\", type.getName());\n+        assertEquals(\"PeriodType[Seconds]\", type.toString());\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type == PeriodType.seconds());\n+        assertEquals(false, type.equals(PeriodType.standard()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.seconds().hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.standard().hashCode());\n+        assertSameAfterSerialization(type);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMillis() throws Exception {\n+        PeriodType type = PeriodType.millis();\n+        assertEquals(1, type.size());\n+        assertEquals(DurationFieldType.millis(), type.getFieldType(0));\n+        assertEquals(\"Millis\", type.getName());\n+        assertEquals(\"PeriodType[Millis]\", type.toString());\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type == PeriodType.millis());\n+        assertEquals(false, type.equals(PeriodType.standard()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.millis().hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.standard().hashCode());\n+        assertSameAfterSerialization(type);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields1() throws Exception {\n+        PeriodType type = PeriodType.forFields(new DurationFieldType[] {\n+            DurationFieldType.years(),\n+        });\n+        assertSame(PeriodType.years(), type);\n+        type = PeriodType.forFields(new DurationFieldType[] {\n+            DurationFieldType.months(),\n+        });\n+        assertSame(PeriodType.months(), type);\n+        type = PeriodType.forFields(new DurationFieldType[] {\n+                DurationFieldType.weeks(),\n+        });\n+        assertSame(PeriodType.weeks(), type);\n+        type = PeriodType.forFields(new DurationFieldType[] {\n+                DurationFieldType.days(),\n+        });\n+        assertSame(PeriodType.days(), type);\n+        type = PeriodType.forFields(new DurationFieldType[] {\n+                DurationFieldType.hours(),\n+        });\n+        assertSame(PeriodType.hours(), type);\n+        type = PeriodType.forFields(new DurationFieldType[] {\n+                DurationFieldType.minutes(),\n+        });\n+        assertSame(PeriodType.minutes(), type);\n+        type = PeriodType.forFields(new DurationFieldType[] {\n+                DurationFieldType.seconds(),\n+        });\n+        assertSame(PeriodType.seconds(), type);\n+        type = PeriodType.forFields(new DurationFieldType[] {\n+                DurationFieldType.millis(),\n+        });\n+        assertSame(PeriodType.millis(), type);\n+    }\n+\n+    public void testForFields2() throws Exception {\n+        DurationFieldType[] types = new DurationFieldType[] {\n+            DurationFieldType.years(),\n+            DurationFieldType.hours(),\n+        };\n+        PeriodType type = PeriodType.forFields(types);\n+        assertEquals(2, type.size());\n+        assertEquals(DurationFieldType.years(), type.getFieldType(0));\n+        assertEquals(DurationFieldType.hours(), type.getFieldType(1));\n+        assertEquals(\"StandardNoMonthsNoWeeksNoDaysNoMinutesNoSecondsNoMillis\", type.getName());\n+        assertEquals(\"PeriodType[StandardNoMonthsNoWeeksNoDaysNoMinutesNoSecondsNoMillis]\", type.toString());\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type == PeriodType.forFields(types));\n+        assertEquals(false, type.equals(PeriodType.millis()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.forFields(types).hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n+        assertSameAfterSerialization(type);\n+    }\n+\n+    public void testForFields3() throws Exception {\n+        DurationFieldType[] types = new DurationFieldType[] {\n+            DurationFieldType.months(),\n+            DurationFieldType.weeks(),\n+        };\n+        PeriodType type = PeriodType.forFields(types);\n+        assertEquals(2, type.size());\n+        assertEquals(DurationFieldType.months(), type.getFieldType(0));\n+        assertEquals(DurationFieldType.weeks(), type.getFieldType(1));\n+        assertEquals(\"StandardNoYearsNoDaysNoHoursNoMinutesNoSecondsNoMillis\", type.getName());\n+        assertEquals(\"PeriodType[StandardNoYearsNoDaysNoHoursNoMinutesNoSecondsNoMillis]\", type.toString());\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type == PeriodType.forFields(types));\n+        assertEquals(false, type.equals(PeriodType.millis()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.forFields(types).hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n+        assertSameAfterSerialization(type);\n+    }\n+\n+    public void testForFields4() throws Exception {\n+        DurationFieldType[] types = new DurationFieldType[] {\n+            DurationFieldType.weeks(),\n+            DurationFieldType.months(),\n+        };\n+        DurationFieldType[] types2 = new DurationFieldType[] {\n+            DurationFieldType.months(),\n+            DurationFieldType.weeks(),\n+        };\n+        PeriodType type = PeriodType.forFields(types);\n+        PeriodType type2 = PeriodType.forFields(types2);\n+        assertEquals(true, type == type2);\n+    }\n+\n+    public void testForFields5() throws Exception {\n+        DurationFieldType[] types = new DurationFieldType[] {\n+            DurationFieldType.centuries(),\n+            DurationFieldType.months(),\n+        };\n+        try {\n+            PeriodType.forFields(types);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        try {\n+            PeriodType.forFields(types);  // repeated for test coverage of cache\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testForFields6() throws Exception {\n+        DurationFieldType[] types = null;\n+        try {\n+            PeriodType.forFields(types);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        \n+        types = new DurationFieldType[0];\n+        try {\n+            PeriodType.forFields(types);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        \n+        types = new DurationFieldType[] {\n+            null,\n+            DurationFieldType.months(),\n+        };\n+        try {\n+            PeriodType.forFields(types);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        \n+        types = new DurationFieldType[] {\n+            DurationFieldType.months(),\n+            null,\n+        };\n+        try {\n+            PeriodType.forFields(types);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMaskYears() throws Exception {\n+        PeriodType type = PeriodType.standard().withYearsRemoved();\n+        assertEquals(7, type.size());\n+        assertEquals(DurationFieldType.months(), type.getFieldType(0));\n+        assertEquals(DurationFieldType.weeks(), type.getFieldType(1));\n+        assertEquals(DurationFieldType.days(), type.getFieldType(2));\n+        assertEquals(DurationFieldType.hours(), type.getFieldType(3));\n+        assertEquals(DurationFieldType.minutes(), type.getFieldType(4));\n+        assertEquals(DurationFieldType.seconds(), type.getFieldType(5));\n+        assertEquals(DurationFieldType.millis(), type.getFieldType(6));\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type.equals(PeriodType.standard().withYearsRemoved()));\n+        assertEquals(false, type.equals(PeriodType.millis()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.standard().withYearsRemoved().hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n+        assertEquals(\"StandardNoYears\", type.getName());\n+        assertEquals(\"PeriodType[StandardNoYears]\", type.toString());\n+        assertEqualsAfterSerialization(type);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMaskMonths() throws Exception {\n+        PeriodType type = PeriodType.standard().withMonthsRemoved();\n+        assertEquals(7, type.size());\n+        assertEquals(DurationFieldType.years(), type.getFieldType(0));\n+        assertEquals(DurationFieldType.weeks(), type.getFieldType(1));\n+        assertEquals(DurationFieldType.days(), type.getFieldType(2));\n+        assertEquals(DurationFieldType.hours(), type.getFieldType(3));\n+        assertEquals(DurationFieldType.minutes(), type.getFieldType(4));\n+        assertEquals(DurationFieldType.seconds(), type.getFieldType(5));\n+        assertEquals(DurationFieldType.millis(), type.getFieldType(6));\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type.equals(PeriodType.standard().withMonthsRemoved()));\n+        assertEquals(false, type.equals(PeriodType.millis()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.standard().withMonthsRemoved().hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n+        assertEquals(\"StandardNoMonths\", type.getName());\n+        assertEquals(\"PeriodType[StandardNoMonths]\", type.toString());\n+        assertEqualsAfterSerialization(type);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMaskWeeks() throws Exception {\n+        PeriodType type = PeriodType.standard().withWeeksRemoved();\n+        assertEquals(7, type.size());\n+        assertEquals(DurationFieldType.years(), type.getFieldType(0));\n+        assertEquals(DurationFieldType.months(), type.getFieldType(1));\n+        assertEquals(DurationFieldType.days(), type.getFieldType(2));\n+        assertEquals(DurationFieldType.hours(), type.getFieldType(3));\n+        assertEquals(DurationFieldType.minutes(), type.getFieldType(4));\n+        assertEquals(DurationFieldType.seconds(), type.getFieldType(5));\n+        assertEquals(DurationFieldType.millis(), type.getFieldType(6));\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type.equals(PeriodType.standard().withWeeksRemoved()));\n+        assertEquals(false, type.equals(PeriodType.millis()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.standard().withWeeksRemoved().hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n+        assertEquals(\"StandardNoWeeks\", type.getName());\n+        assertEquals(\"PeriodType[StandardNoWeeks]\", type.toString());\n+        assertEqualsAfterSerialization(type);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMaskDays() throws Exception {\n+        PeriodType type = PeriodType.standard().withDaysRemoved();\n+        assertEquals(7, type.size());\n+        assertEquals(DurationFieldType.years(), type.getFieldType(0));\n+        assertEquals(DurationFieldType.months(), type.getFieldType(1));\n+        assertEquals(DurationFieldType.weeks(), type.getFieldType(2));\n+        assertEquals(DurationFieldType.hours(), type.getFieldType(3));\n+        assertEquals(DurationFieldType.minutes(), type.getFieldType(4));\n+        assertEquals(DurationFieldType.seconds(), type.getFieldType(5));\n+        assertEquals(DurationFieldType.millis(), type.getFieldType(6));\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type.equals(PeriodType.standard().withDaysRemoved()));\n+        assertEquals(false, type.equals(PeriodType.millis()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.standard().withDaysRemoved().hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n+        assertEquals(\"StandardNoDays\", type.getName());\n+        assertEquals(\"PeriodType[StandardNoDays]\", type.toString());\n+        assertEqualsAfterSerialization(type);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMaskHours() throws Exception {\n+        PeriodType type = PeriodType.standard().withHoursRemoved();\n+        assertEquals(7, type.size());\n+        assertEquals(DurationFieldType.years(), type.getFieldType(0));\n+        assertEquals(DurationFieldType.months(), type.getFieldType(1));\n+        assertEquals(DurationFieldType.weeks(), type.getFieldType(2));\n+        assertEquals(DurationFieldType.days(), type.getFieldType(3));\n+        assertEquals(DurationFieldType.minutes(), type.getFieldType(4));\n+        assertEquals(DurationFieldType.seconds(), type.getFieldType(5));\n+        assertEquals(DurationFieldType.millis(), type.getFieldType(6));\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type.equals(PeriodType.standard().withHoursRemoved()));\n+        assertEquals(false, type.equals(PeriodType.millis()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.standard().withHoursRemoved().hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n+        assertEquals(\"StandardNoHours\", type.getName());\n+        assertEquals(\"PeriodType[StandardNoHours]\", type.toString());\n+        assertEqualsAfterSerialization(type);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMaskMinutes() throws Exception {\n+        PeriodType type = PeriodType.standard().withMinutesRemoved();\n+        assertEquals(7, type.size());\n+        assertEquals(DurationFieldType.years(), type.getFieldType(0));\n+        assertEquals(DurationFieldType.months(), type.getFieldType(1));\n+        assertEquals(DurationFieldType.weeks(), type.getFieldType(2));\n+        assertEquals(DurationFieldType.days(), type.getFieldType(3));\n+        assertEquals(DurationFieldType.hours(), type.getFieldType(4));\n+        assertEquals(DurationFieldType.seconds(), type.getFieldType(5));\n+        assertEquals(DurationFieldType.millis(), type.getFieldType(6));\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type.equals(PeriodType.standard().withMinutesRemoved()));\n+        assertEquals(false, type.equals(PeriodType.millis()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.standard().withMinutesRemoved().hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n+        assertEquals(\"StandardNoMinutes\", type.getName());\n+        assertEquals(\"PeriodType[StandardNoMinutes]\", type.toString());\n+        assertEqualsAfterSerialization(type);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMaskSeconds() throws Exception {\n+        PeriodType type = PeriodType.standard().withSecondsRemoved();\n+        assertEquals(7, type.size());\n+        assertEquals(DurationFieldType.years(), type.getFieldType(0));\n+        assertEquals(DurationFieldType.months(), type.getFieldType(1));\n+        assertEquals(DurationFieldType.weeks(), type.getFieldType(2));\n+        assertEquals(DurationFieldType.days(), type.getFieldType(3));\n+        assertEquals(DurationFieldType.hours(), type.getFieldType(4));\n+        assertEquals(DurationFieldType.minutes(), type.getFieldType(5));\n+        assertEquals(DurationFieldType.millis(), type.getFieldType(6));\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type.equals(PeriodType.standard().withSecondsRemoved()));\n+        assertEquals(false, type.equals(PeriodType.millis()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.standard().withSecondsRemoved().hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n+        assertEquals(\"StandardNoSeconds\", type.getName());\n+        assertEquals(\"PeriodType[StandardNoSeconds]\", type.toString());\n+        assertEqualsAfterSerialization(type);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMaskMillis() throws Exception {\n+        PeriodType type = PeriodType.standard().withMillisRemoved();\n+        assertEquals(7, type.size());\n+        assertEquals(DurationFieldType.years(), type.getFieldType(0));\n+        assertEquals(DurationFieldType.months(), type.getFieldType(1));\n+        assertEquals(DurationFieldType.weeks(), type.getFieldType(2));\n+        assertEquals(DurationFieldType.days(), type.getFieldType(3));\n+        assertEquals(DurationFieldType.hours(), type.getFieldType(4));\n+        assertEquals(DurationFieldType.minutes(), type.getFieldType(5));\n+        assertEquals(DurationFieldType.seconds(), type.getFieldType(6));\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type.equals(PeriodType.standard().withMillisRemoved()));\n+        assertEquals(false, type.equals(PeriodType.millis()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.standard().withMillisRemoved().hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n+        assertEquals(\"StandardNoMillis\", type.getName());\n+        assertEquals(\"PeriodType[StandardNoMillis]\", type.toString());\n+        assertEqualsAfterSerialization(type);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMaskHoursMinutesSeconds() throws Exception {\n+        PeriodType type = PeriodType.standard().withHoursRemoved().withMinutesRemoved().withSecondsRemoved();\n+        assertEquals(5, type.size());\n+        assertEquals(DurationFieldType.years(), type.getFieldType(0));\n+        assertEquals(DurationFieldType.months(), type.getFieldType(1));\n+        assertEquals(DurationFieldType.weeks(), type.getFieldType(2));\n+        assertEquals(DurationFieldType.days(), type.getFieldType(3));\n+        assertEquals(DurationFieldType.millis(), type.getFieldType(4));\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type.equals(PeriodType.standard().withHoursRemoved().withMinutesRemoved().withSecondsRemoved()));\n+        assertEquals(false, type.equals(PeriodType.millis()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.standard().withHoursRemoved().withMinutesRemoved().withSecondsRemoved().hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n+        assertEquals(\"StandardNoHoursNoMinutesNoSeconds\", type.getName());\n+        assertEquals(\"PeriodType[StandardNoHoursNoMinutesNoSeconds]\", type.toString());\n+        assertEqualsAfterSerialization(type);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMaskTwice1() throws Exception {\n+        PeriodType type = PeriodType.standard().withYearsRemoved();\n+        PeriodType type2 = type.withYearsRemoved();\n+        assertEquals(true, type == type2);\n+        \n+        type = PeriodType.standard().withMonthsRemoved();\n+        type2 = type.withMonthsRemoved();\n+        assertEquals(true, type == type2);\n+        \n+        type = PeriodType.standard().withWeeksRemoved();\n+        type2 = type.withWeeksRemoved();\n+        assertEquals(true, type == type2);\n+        \n+        type = PeriodType.standard().withDaysRemoved();\n+        type2 = type.withDaysRemoved();\n+        assertEquals(true, type == type2);\n+        \n+        type = PeriodType.standard().withHoursRemoved();\n+        type2 = type.withHoursRemoved();\n+        assertEquals(true, type == type2);\n+        \n+        type = PeriodType.standard().withMinutesRemoved();\n+        type2 = type.withMinutesRemoved();\n+        assertEquals(true, type == type2);\n+        \n+        type = PeriodType.standard().withSecondsRemoved();\n+        type2 = type.withSecondsRemoved();\n+        assertEquals(true, type == type2);\n+        \n+        type = PeriodType.standard().withMillisRemoved();\n+        type2 = type.withMillisRemoved();\n+        assertEquals(true, type == type2);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMaskTwice2() throws Exception {\n+        PeriodType type = PeriodType.dayTime();\n+        PeriodType type2 = type.withYearsRemoved();\n+        assertEquals(true, type == type2);\n+        \n+        type = PeriodType.dayTime();\n+        type2 = type.withMonthsRemoved();\n+        assertEquals(true, type == type2);\n+        \n+        type = PeriodType.dayTime();\n+        type2 = type.withWeeksRemoved();\n+        assertEquals(true, type == type2);\n+        \n+        type = PeriodType.millis();\n+        type2 = type.withDaysRemoved();\n+        assertEquals(true, type == type2);\n+        \n+        type = PeriodType.millis();\n+        type2 = type.withHoursRemoved();\n+        assertEquals(true, type == type2);\n+        \n+        type = PeriodType.millis();\n+        type2 = type.withMinutesRemoved();\n+        assertEquals(true, type == type2);\n+        \n+        type = PeriodType.millis();\n+        type2 = type.withSecondsRemoved();\n+        assertEquals(true, type == type2);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testEquals() throws Exception {\n+        PeriodType type = PeriodType.dayTime().withMillisRemoved();\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type.equals(PeriodType.dayTime().withMillisRemoved()));\n+        assertEquals(false, type.equals(null));\n+        assertEquals(false, type.equals(\"\"));\n+    }\n+\n+    public void testHashCode() throws Exception {\n+        PeriodType type = PeriodType.dayTime().withMillisRemoved();\n+        assertEquals(type.hashCode(), type.hashCode());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsSupported() throws Exception {\n+        PeriodType type = PeriodType.dayTime().withMillisRemoved();\n+        assertEquals(false, type.isSupported(DurationFieldType.years()));\n+        assertEquals(false, type.isSupported(DurationFieldType.months()));\n+        assertEquals(false, type.isSupported(DurationFieldType.weeks()));\n+        assertEquals(true, type.isSupported(DurationFieldType.days()));\n+        assertEquals(true, type.isSupported(DurationFieldType.hours()));\n+        assertEquals(true, type.isSupported(DurationFieldType.minutes()));\n+        assertEquals(true, type.isSupported(DurationFieldType.seconds()));\n+        assertEquals(false, type.isSupported(DurationFieldType.millis()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIndexOf() throws Exception {\n+        PeriodType type = PeriodType.dayTime().withMillisRemoved();\n+        assertEquals(-1, type.indexOf(DurationFieldType.years()));\n+        assertEquals(-1, type.indexOf(DurationFieldType.months()));\n+        assertEquals(-1, type.indexOf(DurationFieldType.weeks()));\n+        assertEquals(0, type.indexOf(DurationFieldType.days()));\n+        assertEquals(1, type.indexOf(DurationFieldType.hours()));\n+        assertEquals(2, type.indexOf(DurationFieldType.minutes()));\n+        assertEquals(3, type.indexOf(DurationFieldType.seconds()));\n+        assertEquals(-1, type.indexOf(DurationFieldType.millis()));\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestPeriod_Basics.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.math.BigInteger;\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.base.BasePeriod;\n+import org.joda.time.format.PeriodFormat;\n+import org.joda.time.format.PeriodFormatter;\n+\n+/**\n+ * This class is a Junit unit test for Duration.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestPeriod_Basics extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    //private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestPeriod_Basics.class);\n+    }\n+\n+    public TestPeriod_Basics(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetPeriodType() {\n+        Period test = new Period(0L);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+    }\n+\n+    public void testGetMethods() {\n+        Period test = new Period(0L);\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testValueIndexMethods() {\n+        Period test = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime());\n+        assertEquals(6, test.size());\n+        assertEquals(1, test.getValue(0));\n+        assertEquals(4, test.getValue(1));\n+        assertEquals(5, test.getValue(2));\n+        assertEquals(6, test.getValue(3));\n+        assertEquals(7, test.getValue(4));\n+        assertEquals(8, test.getValue(5));\n+        assertEquals(true, Arrays.equals(new int[] {1, 4, 5, 6, 7, 8}, test.getValues()));\n+    }\n+\n+    public void testTypeIndexMethods() {\n+        Period test = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime());\n+        assertEquals(6, test.size());\n+        assertEquals(DurationFieldType.years(), test.getFieldType(0));\n+        assertEquals(DurationFieldType.days(), test.getFieldType(1));\n+        assertEquals(DurationFieldType.hours(), test.getFieldType(2));\n+        assertEquals(DurationFieldType.minutes(), test.getFieldType(3));\n+        assertEquals(DurationFieldType.seconds(), test.getFieldType(4));\n+        assertEquals(DurationFieldType.millis(), test.getFieldType(5));\n+        assertEquals(true, Arrays.equals(new DurationFieldType[] {\n+            DurationFieldType.years(), DurationFieldType.days(), DurationFieldType.hours(),\n+            DurationFieldType.minutes(), DurationFieldType.seconds(), DurationFieldType.millis()},\n+            test.getFieldTypes()));\n+    }\n+\n+    public void testIsSupported() {\n+        Period test = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime());\n+        assertEquals(true, test.isSupported(DurationFieldType.years()));\n+        assertEquals(false, test.isSupported(DurationFieldType.months()));\n+        assertEquals(false, test.isSupported(DurationFieldType.weeks()));\n+        assertEquals(true, test.isSupported(DurationFieldType.days()));\n+        assertEquals(true, test.isSupported(DurationFieldType.hours()));\n+        assertEquals(true, test.isSupported(DurationFieldType.minutes()));\n+        assertEquals(true, test.isSupported(DurationFieldType.seconds()));\n+        assertEquals(true, test.isSupported(DurationFieldType.millis()));\n+    }        \n+\n+    public void testIndexOf() {\n+        Period test = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime());\n+        assertEquals(0, test.indexOf(DurationFieldType.years()));\n+        assertEquals(-1, test.indexOf(DurationFieldType.months()));\n+        assertEquals(-1, test.indexOf(DurationFieldType.weeks()));\n+        assertEquals(1, test.indexOf(DurationFieldType.days()));\n+        assertEquals(2, test.indexOf(DurationFieldType.hours()));\n+        assertEquals(3, test.indexOf(DurationFieldType.minutes()));\n+        assertEquals(4, test.indexOf(DurationFieldType.seconds()));\n+        assertEquals(5, test.indexOf(DurationFieldType.millis()));\n+    }\n+\n+    public void testGet() {\n+        Period test = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime());\n+        assertEquals(1, test.get(DurationFieldType.years()));\n+        assertEquals(0, test.get(DurationFieldType.months()));\n+        assertEquals(0, test.get(DurationFieldType.weeks()));\n+        assertEquals(4, test.get(DurationFieldType.days()));\n+        assertEquals(5, test.get(DurationFieldType.hours()));\n+        assertEquals(6, test.get(DurationFieldType.minutes()));\n+        assertEquals(7, test.get(DurationFieldType.seconds()));\n+        assertEquals(8, test.get(DurationFieldType.millis()));\n+    }\n+\n+    public void testEqualsHashCode() {\n+        Period test1 = new Period(123L);\n+        Period test2 = new Period(123L);\n+        assertEquals(true, test1.equals(test2));\n+        assertEquals(true, test2.equals(test1));\n+        assertEquals(true, test1.equals(test1));\n+        assertEquals(true, test2.equals(test2));\n+        assertEquals(true, test1.hashCode() == test2.hashCode());\n+        assertEquals(true, test1.hashCode() == test1.hashCode());\n+        assertEquals(true, test2.hashCode() == test2.hashCode());\n+        \n+        Period test3 = new Period(321L);\n+        assertEquals(false, test1.equals(test3));\n+        assertEquals(false, test2.equals(test3));\n+        assertEquals(false, test3.equals(test1));\n+        assertEquals(false, test3.equals(test2));\n+        assertEquals(false, test1.hashCode() == test3.hashCode());\n+        assertEquals(false, test2.hashCode() == test3.hashCode());\n+        \n+        assertEquals(false, test1.equals(\"Hello\"));\n+        assertEquals(true, test1.equals(new MockPeriod(123L)));\n+        assertEquals(false, test1.equals(new Period(123L, PeriodType.dayTime())));\n+    }\n+    \n+    class MockPeriod extends BasePeriod {\n+        public MockPeriod(long value) {\n+            super(value, null, null);\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        Period test = new Period(123L);\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        Period result = (Period) ois.readObject();\n+        ois.close();\n+        \n+        assertEquals(test, result);\n+    }\n+\n+//    //-----------------------------------------------------------------------\n+//    public void testAddTo1() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, 1);\n+//        expected = ISOChronology.getInstance().months().add(expected, 2);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+//        expected = ISOChronology.getInstance().days().add(expected, 4);\n+//        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+//        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+//        \n+//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+//        long added = test.addTo(TEST_TIME_NOW, 1);\n+//        assertEquals(expected, added);\n+//    }\n+//    \n+//    public void testAddTo2() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, -2);\n+//        expected = ISOChronology.getInstance().months().add(expected, -4);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+//        expected = ISOChronology.getInstance().days().add(expected, -8);\n+//        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+//        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+//        \n+//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+//        long added = test.addTo(TEST_TIME_NOW, -2);\n+//        assertEquals(expected, added);\n+//    }\n+//    \n+//    public void testAddTo3() {\n+//        long expected = TEST_TIME_NOW;\n+//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+//        long added = test.addTo(TEST_TIME_NOW, 0);\n+//        assertEquals(expected, added);\n+//    }\n+//    \n+//    public void testAddTo4() {\n+//        long expected = TEST_TIME_NOW + 100L;\n+//        Period test = new Period(100L);\n+//        long added = test.addTo(TEST_TIME_NOW, 1);\n+//        assertEquals(expected, added);\n+//    }\n+//    \n+//    //-----------------------------------------------------------------------\n+//    public void testAddToWithChronology1() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, 1);\n+//        expected = ISOChronology.getInstance().months().add(expected, 2);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+//        expected = ISOChronology.getInstance().days().add(expected, 4);\n+//        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+//        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+//        \n+//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+//        long added = test.addTo(TEST_TIME_NOW, 1, ISOChronology.getInstance());\n+//        assertEquals(expected, added);\n+//    }\n+//    \n+//    public void testAddToWithChronology2() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstanceUTC().years().add(expected, -2);\n+//        expected = ISOChronology.getInstanceUTC().months().add(expected, -4);\n+//        expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);\n+//        expected = ISOChronology.getInstanceUTC().days().add(expected, -8);\n+//        expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);\n+//        expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);\n+//        expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);\n+//        expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n+//        \n+//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n+//        long added = test.addTo(TEST_TIME_NOW, -2, ISOChronology.getInstanceUTC());  // local specified so use it\n+//        assertEquals(expected, added);\n+//    }\n+//    \n+//    public void testAddToWithChronology3() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, -2);\n+//        expected = ISOChronology.getInstance().months().add(expected, -4);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+//        expected = ISOChronology.getInstance().days().add(expected, -8);\n+//        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+//        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+//        \n+//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n+//        long added = test.addTo(TEST_TIME_NOW, -2, null);  // no chrono specified so use default\n+//        assertEquals(expected, added);\n+//    }\n+//    \n+//    //-----------------------------------------------------------------------\n+//    public void testAddToRI1() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, 1);\n+//        expected = ISOChronology.getInstance().months().add(expected, 2);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+//        expected = ISOChronology.getInstance().days().add(expected, 4);\n+//        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+//        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+//        \n+//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+//        DateTime added = test.addTo(new Instant(), 1);  // Instant has no time zone, use default\n+//        assertEquals(expected, added.getMillis());\n+//        assertEquals(ISOChronology.getInstance(), added.getChronology());\n+//    }\n+//    \n+//    public void testAddToRI2() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, -2);\n+//        expected = ISOChronology.getInstance().months().add(expected, -4);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+//        expected = ISOChronology.getInstance().days().add(expected, -8);\n+//        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+//        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+//        \n+//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n+//        DateTime added = test.addTo(new Instant(), -2);  // Instant has no time zone, use default\n+//        assertEquals(expected, added.getMillis());\n+//        assertEquals(ISOChronology.getInstance(), added.getChronology());\n+//    }\n+//    \n+//    public void testAddToRI3() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstanceUTC().years().add(expected, -2);\n+//        expected = ISOChronology.getInstanceUTC().months().add(expected, -4);\n+//        expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);\n+//        expected = ISOChronology.getInstanceUTC().days().add(expected, -8);\n+//        expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);\n+//        expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);\n+//        expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);\n+//        expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n+//        \n+//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n+//        DateTime added = test.addTo(new DateTime(ISOChronology.getInstanceUTC()), -2);  // DateTime has UTC time zone\n+//        assertEquals(expected, added.getMillis());\n+//        assertEquals(ISOChronology.getInstanceUTC(), added.getChronology());\n+//    }\n+//    \n+//    public void testAddToRI4() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance(PARIS).years().add(expected, -2);\n+//        expected = ISOChronology.getInstance(PARIS).months().add(expected, -4);\n+//        expected = ISOChronology.getInstance(PARIS).weeks().add(expected, -6);\n+//        expected = ISOChronology.getInstance(PARIS).days().add(expected, -8);\n+//        expected = ISOChronology.getInstance(PARIS).hours().add(expected, -10);\n+//        expected = ISOChronology.getInstance(PARIS).minutes().add(expected, -12);\n+//        expected = ISOChronology.getInstance(PARIS).seconds().add(expected, -14);\n+//        expected = ISOChronology.getInstance(PARIS).millis().add(expected, -16);\n+//        \n+//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n+//        DateTime added = test.addTo(new DateTime(PARIS), -2);  // DateTime has PARIS time zone\n+//        assertEquals(expected, added.getMillis());\n+//        assertEquals(ISOChronology.getInstance(PARIS), added.getChronology());\n+//    }\n+//    \n+//    public void testAddToRI5() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, -2);\n+//        expected = ISOChronology.getInstance().months().add(expected, -4);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+//        expected = ISOChronology.getInstance().days().add(expected, -8);\n+//        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+//        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+//        \n+//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n+//        DateTime added = test.addTo(null, -2);  // null has no time zone, use default\n+//        assertEquals(expected, added.getMillis());\n+//        assertEquals(ISOChronology.getInstance(), added.getChronology());\n+//    }\n+//    \n+//    //-----------------------------------------------------------------------\n+//    public void testAddIntoRWI1() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, 1);\n+//        expected = ISOChronology.getInstance().months().add(expected, 2);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+//        expected = ISOChronology.getInstance().days().add(expected, 4);\n+//        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+//        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+//        \n+//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+//        MutableDateTime mdt = new MutableDateTime();\n+//        test.addInto(mdt, 1);\n+//        assertEquals(expected, mdt.getMillis());\n+//    }\n+//    \n+//    public void testAddIntoRWI2() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, -2);\n+//        expected = ISOChronology.getInstance().months().add(expected, -4);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+//        expected = ISOChronology.getInstance().days().add(expected, -8);\n+//        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+//        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+//        \n+//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n+//        MutableDateTime mdt = new MutableDateTime();\n+//        test.addInto(mdt, -2);  // MutableDateTime has a chronology, use it\n+//        assertEquals(expected, mdt.getMillis());\n+//    }\n+//    \n+//    public void testAddIntoRWI3() {\n+//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+//        try {\n+//            test.addInto(null, 1);\n+//            fail();\n+//        } catch (IllegalArgumentException ex) {}\n+//    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+        assertEquals(\"P1Y2M3W4DT5H6M7.008S\", test.toString());\n+        \n+        test = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"PT0S\", test.toString());\n+        \n+        test = new Period(12345L);\n+        assertEquals(\"PT12.345S\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString_PeriodFormatter() {\n+        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+        assertEquals(\"1 year, 2 months, 3 weeks, 4 days, 5 hours, 6 minutes, 7 seconds and 8 milliseconds\", test.toString(PeriodFormat.getDefault()));\n+        \n+        test = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"0 milliseconds\", test.toString(PeriodFormat.getDefault()));\n+    }\n+\n+    public void testToString_nullPeriodFormatter() {\n+        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+        assertEquals(\"P1Y2M3W4DT5H6M7.008S\", test.toString((PeriodFormatter) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToPeriod() {\n+        Period test = new Period(123L);\n+        Period result = test.toPeriod();\n+        assertSame(test, result);\n+    }\n+\n+    public void testToMutablePeriod() {\n+        Period test = new Period(123L);\n+        MutablePeriod result = test.toMutablePeriod();\n+        assertEquals(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+//    public void testToDurationMillisFrom() {\n+//        Period test = new Period(123L);\n+//        assertEquals(123L, test.toDurationMillisFrom(0L, null));\n+//    }\n+\n+    public void testToDurationFrom() {\n+        Period test = new Period(123L);\n+        assertEquals(new Duration(123L), test.toDurationFrom(new Instant(0L)));\n+    }\n+\n+    public void testToDurationTo() {\n+        Period test = new Period(123L);\n+        assertEquals(new Duration(123L), test.toDurationTo(new Instant(123L)));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithPeriodType1() {\n+        Period test = new Period(123L);\n+        Period result = test.withPeriodType(PeriodType.standard());\n+        assertSame(test, result);\n+    }\n+\n+    public void testWithPeriodType2() {\n+        Period test = new Period(3123L);\n+        Period result = test.withPeriodType(PeriodType.dayTime());\n+        assertEquals(3, result.getSeconds());\n+        assertEquals(123, result.getMillis());\n+        assertEquals(PeriodType.dayTime(), result.getPeriodType());\n+    }\n+\n+    public void testWithPeriodType3() {\n+        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n+        try {\n+            test.withPeriodType(PeriodType.dayTime());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithPeriodType4() {\n+        Period test = new Period(3123L);\n+        Period result = test.withPeriodType(null);\n+        assertEquals(3, result.getSeconds());\n+        assertEquals(123, result.getMillis());\n+        assertEquals(PeriodType.standard(), result.getPeriodType());\n+    }\n+\n+    public void testWithPeriodType5() {\n+        Period test = new Period(1, 2, 0, 4, 5, 6, 7, 8, PeriodType.standard());\n+        Period result = test.withPeriodType(PeriodType.yearMonthDayTime());\n+        assertEquals(PeriodType.yearMonthDayTime(), result.getPeriodType());\n+        assertEquals(1, result.getYears());\n+        assertEquals(2, result.getMonths());\n+        assertEquals(0, result.getWeeks());\n+        assertEquals(4, result.getDays());\n+        assertEquals(5, result.getHours());\n+        assertEquals(6, result.getMinutes());\n+        assertEquals(7, result.getSeconds());\n+        assertEquals(8, result.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithFields1() {\n+        Period test1 = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+        Period test2 = new Period(0, 0, 0, 0, 0, 0, 0, 9, PeriodType.millis());\n+        Period result = test1.withFields(test2);\n+        \n+        assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 8), test1);\n+        assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 9, PeriodType.millis()), test2);\n+        assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 9), result);\n+    }\n+\n+    public void testWithFields2() {\n+        Period test1 = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+        Period test2 = null;\n+        Period result = test1.withFields(test2);\n+        \n+        assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 8), test1);\n+        assertSame(test1, result);\n+    }\n+\n+    public void testWithFields3() {\n+        Period test1 = new Period(0, 0, 0, 0, 0, 0, 0, 9, PeriodType.millis());\n+        Period test2 = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+        try {\n+            test1.withFields(test2);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 9, PeriodType.millis()), test1);\n+        assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 8), test2);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithField1() {\n+        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+        Period result = test.withField(DurationFieldType.years(), 6);\n+        \n+        assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 8), test);\n+        assertEquals(new Period(6, 2, 3, 4, 5, 6, 7, 8), result);\n+    }\n+\n+    public void testWithField2() {\n+        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+        try {\n+            test.withField(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithField3() {\n+        Period test = new Period(0, 0, 0, 0, 5, 6, 7, 8, PeriodType.time());\n+        try {\n+            test.withField(DurationFieldType.years(), 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithField4() {\n+        Period test = new Period(0, 0, 0, 0, 5, 6, 7, 8, PeriodType.time());\n+        Period result = test.withField(DurationFieldType.years(), 0);\n+        assertEquals(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithFieldAdded1() {\n+        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+        Period result = test.withFieldAdded(DurationFieldType.years(), 6);\n+        \n+        assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 8), test);\n+        assertEquals(new Period(7, 2, 3, 4, 5, 6, 7, 8), result);\n+    }\n+\n+    public void testWithFieldAdded2() {\n+        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+        try {\n+            test.withFieldAdded(null, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded3() {\n+        Period test = new Period(0, 0, 0, 0, 5, 6, 7, 8, PeriodType.time());\n+        try {\n+            test.withFieldAdded(DurationFieldType.years(), 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded4() {\n+        Period test = new Period(0, 0, 0, 0, 5, 6, 7, 8, PeriodType.time());\n+        Period result = test.withFieldAdded(DurationFieldType.years(), 0);\n+        assertEquals(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPeriodStatics() {\n+        Period test;\n+        test = Period.years(1);\n+        assertEquals(test, new Period(1, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()));\n+        test = Period.months(1);\n+        assertEquals(test, new Period(0, 1, 0, 0, 0, 0, 0, 0, PeriodType.standard()));\n+        test = Period.weeks(1);\n+        assertEquals(test, new Period(0, 0, 1, 0, 0, 0, 0, 0, PeriodType.standard()));\n+        test = Period.days(1);\n+        assertEquals(test, new Period(0, 0, 0, 1, 0, 0, 0, 0, PeriodType.standard()));\n+        test = Period.hours(1);\n+        assertEquals(test, new Period(0, 0, 0, 0, 1, 0, 0, 0, PeriodType.standard()));\n+        test = Period.minutes(1);\n+        assertEquals(test, new Period(0, 0, 0, 0, 0, 1, 0, 0, PeriodType.standard()));\n+        test = Period.seconds(1);\n+        assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 1, 0, PeriodType.standard()));\n+        test = Period.millis(1);\n+        assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.standard()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWith() {\n+        Period test;\n+        test = Period.years(5).withYears(1);\n+        assertEquals(test, new Period(1, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()));\n+        test = Period.months(5).withMonths(1);\n+        assertEquals(test, new Period(0, 1, 0, 0, 0, 0, 0, 0, PeriodType.standard()));\n+        test = Period.weeks(5).withWeeks(1);\n+        assertEquals(test, new Period(0, 0, 1, 0, 0, 0, 0, 0, PeriodType.standard()));\n+        test = Period.days(5).withDays(1);\n+        assertEquals(test, new Period(0, 0, 0, 1, 0, 0, 0, 0, PeriodType.standard()));\n+        test = Period.hours(5).withHours(1);\n+        assertEquals(test, new Period(0, 0, 0, 0, 1, 0, 0, 0, PeriodType.standard()));\n+        test = Period.minutes(5).withMinutes(1);\n+        assertEquals(test, new Period(0, 0, 0, 0, 0, 1, 0, 0, PeriodType.standard()));\n+        test = Period.seconds(5).withSeconds(1);\n+        assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 1, 0, PeriodType.standard()));\n+        test = Period.millis(5).withMillis(1);\n+        assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.standard()));\n+        \n+        test = new Period(0L, PeriodType.millis());\n+        try {\n+            test.withYears(1);\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPlus() {\n+        Period base = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+        Period baseDaysOnly = new Period(0, 0, 0, 10, 0, 0, 0, 0, PeriodType.days());\n+        \n+        Period test = base.plus((ReadablePeriod) null);\n+        assertSame(base, test);\n+        \n+        test = base.plus(Period.years(10));\n+        assertEquals(11, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        \n+        test = base.plus(Years.years(10));\n+        assertEquals(11, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        \n+        test = base.plus(Period.days(10));\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(14, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        \n+        test = baseDaysOnly.plus(Period.years(0));\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(10, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        \n+        test = baseDaysOnly.plus(baseDaysOnly);\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(20, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        \n+        try {\n+            baseDaysOnly.plus(Period.years(1));\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        \n+        try {\n+            Period.days(Integer.MAX_VALUE).plus(Period.days(1));\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+        \n+        try {\n+            Period.days(Integer.MIN_VALUE).plus(Period.days(-1));\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMinus() {\n+        Period base = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+        Period baseDaysOnly = new Period(0, 0, 0, 10, 0, 0, 0, 0, PeriodType.days());\n+        \n+        Period test = base.minus((ReadablePeriod) null);\n+        assertSame(base, test);\n+        \n+        test = base.minus(Period.years(10));\n+        assertEquals(-9, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        \n+        test = base.minus(Years.years(10));\n+        assertEquals(-9, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        \n+        test = base.minus(Period.days(10));\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(-6, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        \n+        test = baseDaysOnly.minus(Period.years(0));\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(10, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        \n+        test = baseDaysOnly.minus(baseDaysOnly);\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        \n+        try {\n+            baseDaysOnly.minus(Period.years(1));\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        \n+        try {\n+            Period.days(Integer.MAX_VALUE).minus(Period.days(-1));\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+        \n+        try {\n+            Period.days(Integer.MIN_VALUE).minus(Period.days(1));\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPlusFields() {\n+        Period test;\n+        test = Period.years(1).plusYears(1);\n+        assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test);\n+        test = Period.months(1).plusMonths(1);\n+        assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test);\n+        test = Period.weeks(1).plusWeeks(1);\n+        assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test);\n+        test = Period.days(1).plusDays(1);\n+        assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test);\n+        test = Period.hours(1).plusHours(1);\n+        assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test);\n+        test = Period.minutes(1).plusMinutes(1);\n+        assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test);\n+        test = Period.seconds(1).plusSeconds(1);\n+        assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test);\n+        test = Period.millis(1).plusMillis(1);\n+        assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test);\n+        \n+        test = new Period(0L, PeriodType.millis());\n+        try {\n+            test.plusYears(1);\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+    }\n+\n+    public void testPlusFieldsZero() {\n+        Period test, result;\n+        test = Period.years(1);\n+        result = test.plusYears(0);\n+        assertSame(test, result);\n+        test = Period.months(1);\n+        result = test.plusMonths(0);\n+        assertSame(test, result);\n+        test = Period.weeks(1);\n+        result = test.plusWeeks(0);\n+        assertSame(test, result);\n+        test = Period.days(1);\n+        result = test.plusDays(0);\n+        assertSame(test, result);\n+        test = Period.hours(1);\n+        result = test.plusHours(0);\n+        assertSame(test, result);\n+        test = Period.minutes(1);\n+        result = test.plusMinutes(0);\n+        assertSame(test, result);\n+        test = Period.seconds(1);\n+        result = test.plusSeconds(0);\n+        assertSame(test, result);\n+        test = Period.millis(1);\n+        result = test.plusMillis(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusFields() {\n+        Period test;\n+        test = Period.years(3).minusYears(1);\n+        assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test);\n+        test = Period.months(3).minusMonths(1);\n+        assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test);\n+        test = Period.weeks(3).minusWeeks(1);\n+        assertEquals(new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()), test);\n+        test = Period.days(3).minusDays(1);\n+        assertEquals(new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()), test);\n+        test = Period.hours(3).minusHours(1);\n+        assertEquals(new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()), test);\n+        test = Period.minutes(3).minusMinutes(1);\n+        assertEquals(new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()), test);\n+        test = Period.seconds(3).minusSeconds(1);\n+        assertEquals(new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()), test);\n+        test = Period.millis(3).minusMillis(1);\n+        assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()), test);\n+        \n+        test = new Period(0L, PeriodType.millis());\n+        try {\n+            test.minusYears(1);\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToStandardWeeks() {\n+        Period test = new Period(0, 0, 3, 4, 5, 6, 7, 8);\n+        assertEquals(3, test.toStandardWeeks().getWeeks());\n+        \n+        test = new Period(0, 0, 3, 7, 0, 0, 0, 0);\n+        assertEquals(4, test.toStandardWeeks().getWeeks());\n+        \n+        test = new Period(0, 0, 0, 6, 23, 59, 59, 1000);\n+        assertEquals(1, test.toStandardWeeks().getWeeks());\n+        \n+        test = new Period(0, 0, Integer.MAX_VALUE, 0, 0, 0, 0, 0);\n+        assertEquals(Integer.MAX_VALUE, test.toStandardWeeks().getWeeks());\n+        \n+        test = new Period(0, 0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);\n+        long intMax = Integer.MAX_VALUE;\n+        BigInteger expected = BigInteger.valueOf(intMax);\n+        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_SECOND));\n+        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_MINUTE));\n+        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_HOUR));\n+        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_DAY));\n+        expected = expected.divide(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_WEEK));\n+        assertTrue(expected.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0);\n+        assertEquals(expected.longValue(), test.toStandardWeeks().getWeeks());\n+        \n+        test = new Period(0, 0, Integer.MAX_VALUE, 7, 0, 0, 0, 0);\n+        try {\n+            test.toStandardWeeks();\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void testToStandardWeeks_years() {\n+        Period test = Period.years(1);\n+        try {\n+            test.toStandardWeeks();\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        \n+        test = Period.years(-1);\n+        try {\n+            test.toStandardWeeks();\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        \n+        test = Period.years(0);\n+        assertEquals(0, test.toStandardWeeks().getWeeks());\n+    }\n+\n+    public void testToStandardWeeks_months() {\n+        Period test = Period.months(1);\n+        try {\n+            test.toStandardWeeks();\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        \n+        test = Period.months(-1);\n+        try {\n+            test.toStandardWeeks();\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        \n+        test = Period.months(0);\n+        assertEquals(0, test.toStandardWeeks().getWeeks());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToStandardDays() {\n+        Period test = new Period(0, 0, 0, 4, 5, 6, 7, 8);\n+        assertEquals(4, test.toStandardDays().getDays());\n+        \n+        test = new Period(0, 0, 1, 4, 0, 0, 0, 0);\n+        assertEquals(11, test.toStandardDays().getDays());\n+        \n+        test = new Period(0, 0, 0, 0, 23, 59, 59, 1000);\n+        assertEquals(1, test.toStandardDays().getDays());\n+        \n+        test = new Period(0, 0, 0, Integer.MAX_VALUE, 0, 0, 0, 0);\n+        assertEquals(Integer.MAX_VALUE, test.toStandardDays().getDays());\n+        \n+        test = new Period(0, 0, 0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);\n+        long intMax = Integer.MAX_VALUE;\n+        BigInteger expected = BigInteger.valueOf(intMax);\n+        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_SECOND));\n+        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_MINUTE));\n+        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_HOUR));\n+        expected = expected.divide(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_DAY));\n+        assertTrue(expected.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0);\n+        assertEquals(expected.longValue(), test.toStandardDays().getDays());\n+        \n+        test = new Period(0, 0, 0, Integer.MAX_VALUE, 24, 0, 0, 0);\n+        try {\n+            test.toStandardDays();\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void testToStandardDays_years() {\n+        Period test = Period.years(1);\n+        try {\n+            test.toStandardDays();\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        \n+        test = Period.years(-1);\n+        try {\n+            test.toStandardDays();\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        \n+        test = Period.years(0);\n+        assertEquals(0, test.toStandardDays().getDays());\n+    }\n+\n+    public void testToStandardDays_months() {\n+        Period test = Period.months(1);\n+        try {\n+            test.toStandardDays();\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        \n+        test = Period.months(-1);\n+        try {\n+            test.toStandardDays();\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        \n+        test = Period.months(0);\n+        assertEquals(0, test.toStandardDays().getDays());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToStandardHours() {\n+        Period test = new Period(0, 0, 0, 0, 5, 6, 7, 8);\n+        assertEquals(5, test.toStandardHours().getHours());\n+        \n+        test = new Period(0, 0, 0, 1, 5, 0, 0, 0);\n+        assertEquals(29, test.toStandardHours().getHours());\n+        \n+        test = new Period(0, 0, 0, 0, 0, 59, 59, 1000);\n+        assertEquals(1, test.toStandardHours().getHours());\n+        \n+        test = new Period(0, 0, 0, 0, Integer.MAX_VALUE, 0, 0, 0);\n+        assertEquals(Integer.MAX_VALUE, test.toStandardHours().getHours());\n+        \n+        test = new Period(0, 0, 0, 0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);\n+        long intMax = Integer.MAX_VALUE;\n+        BigInteger expected = BigInteger.valueOf(intMax);\n+        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_SECOND));\n+        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_MINUTE));\n+        expected = expected.divide(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_HOUR));\n+        assertTrue(expected.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0);\n+        assertEquals(expected.longValue(), test.toStandardHours().getHours());\n+        \n+        test = new Period(0, 0, 0, 0, Integer.MAX_VALUE, 60, 0, 0);\n+        try {\n+            test.toStandardHours();\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void testToStandardHours_years() {\n+        Period test = Period.years(1);\n+        try {\n+            test.toStandardHours();\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        \n+        test = Period.years(-1);\n+        try {\n+            test.toStandardHours();\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        \n+        test = Period.years(0);\n+        assertEquals(0, test.toStandardHours().getHours());\n+    }\n+\n+    public void testToStandardHours_months() {\n+        Period test = Period.months(1);\n+        try {\n+            test.toStandardHours();\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        \n+        test = Period.months(-1);\n+        try {\n+            test.toStandardHours();\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        \n+        test = Period.months(0);\n+        assertEquals(0, test.toStandardHours().getHours());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToStandardMinutes() {\n+        Period test = new Period(0, 0, 0, 0, 0, 6, 7, 8);\n+        assertEquals(6, test.toStandardMinutes().getMinutes());\n+        \n+        test = new Period(0, 0, 0, 0, 1, 6, 0, 0);\n+        assertEquals(66, test.toStandardMinutes().getMinutes());\n+        \n+        test = new Period(0, 0, 0, 0, 0, 0, 59, 1000);\n+        assertEquals(1, test.toStandardMinutes().getMinutes());\n+        \n+        test = new Period(0, 0, 0, 0, 0, Integer.MAX_VALUE, 0, 0);\n+        assertEquals(Integer.MAX_VALUE, test.toStandardMinutes().getMinutes());\n+        \n+        test = new Period(0, 0, 0, 0, 0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE);\n+        long intMax = Integer.MAX_VALUE;\n+        BigInteger expected = BigInteger.valueOf(intMax);\n+        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_SECOND));\n+        expected = expected.divide(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_MINUTE));\n+        assertTrue(expected.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0);\n+        assertEquals(expected.longValue(), test.toStandardMinutes().getMinutes());\n+        \n+        test = new Period(0, 0, 0, 0, 0, Integer.MAX_VALUE, 60, 0);\n+        try {\n+            test.toStandardMinutes();\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void testToStandardMinutes_years() {\n+        Period test = Period.years(1);\n+        try {\n+            test.toStandardMinutes();\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        \n+        test = Period.years(-1);\n+        try {\n+            test.toStandardMinutes();\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        \n+        test = Period.years(0);\n+        assertEquals(0, test.toStandardMinutes().getMinutes());\n+    }\n+\n+    public void testToStandardMinutes_months() {\n+        Period test = Period.months(1);\n+        try {\n+            test.toStandardMinutes();\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        \n+        test = Period.months(-1);\n+        try {\n+            test.toStandardMinutes();\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        \n+        test = Period.months(0);\n+        assertEquals(0, test.toStandardMinutes().getMinutes());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToStandardSeconds() {\n+        Period test = new Period(0, 0, 0, 0, 0, 0, 7, 8);\n+        assertEquals(7, test.toStandardSeconds().getSeconds());\n+        \n+        test = new Period(0, 0, 0, 0, 0, 1, 3, 0);\n+        assertEquals(63, test.toStandardSeconds().getSeconds());\n+        \n+        test = new Period(0, 0, 0, 0, 0, 0, 0, 1000);\n+        assertEquals(1, test.toStandardSeconds().getSeconds());\n+        \n+        test = new Period(0, 0, 0, 0, 0, 0, Integer.MAX_VALUE, 0);\n+        assertEquals(Integer.MAX_VALUE, test.toStandardSeconds().getSeconds());\n+        \n+        test = new Period(0, 0, 0, 0, 0, 0, 20, Integer.MAX_VALUE);\n+        long expected = 20;\n+        expected += ((long) Integer.MAX_VALUE) / DateTimeConstants.MILLIS_PER_SECOND;\n+        assertEquals(expected, test.toStandardSeconds().getSeconds());\n+        \n+        test = new Period(0, 0, 0, 0, 0, 0, Integer.MAX_VALUE, 1000);\n+        try {\n+            test.toStandardSeconds();\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void testToStandardSeconds_years() {\n+        Period test = Period.years(1);\n+        try {\n+            test.toStandardSeconds();\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        \n+        test = Period.years(-1);\n+        try {\n+            test.toStandardSeconds();\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        \n+        test = Period.years(0);\n+        assertEquals(0, test.toStandardSeconds().getSeconds());\n+    }\n+\n+    public void testToStandardSeconds_months() {\n+        Period test = Period.months(1);\n+        try {\n+            test.toStandardSeconds();\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        \n+        test = Period.months(-1);\n+        try {\n+            test.toStandardSeconds();\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        \n+        test = Period.months(0);\n+        assertEquals(0, test.toStandardSeconds().getSeconds());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToStandardDuration() {\n+        Period test = new Period(0, 0, 0, 0, 0, 0, 0, 8);\n+        assertEquals(8, test.toStandardDuration().getMillis());\n+        \n+        test = new Period(0, 0, 0, 0, 0, 0, 1, 20);\n+        assertEquals(1020, test.toStandardDuration().getMillis());\n+        \n+        test = new Period(0, 0, 0, 0, 0, 0, 0, Integer.MAX_VALUE);\n+        assertEquals(Integer.MAX_VALUE, test.toStandardDuration().getMillis());\n+        \n+        test = new Period(0, 0, 0, 0, 0, 10, 20, Integer.MAX_VALUE);\n+        long expected = Integer.MAX_VALUE;\n+        expected += 10L * ((long) DateTimeConstants.MILLIS_PER_MINUTE);\n+        expected += 20L * ((long) DateTimeConstants.MILLIS_PER_SECOND);\n+        assertEquals(expected, test.toStandardDuration().getMillis());\n+        \n+        // proof that overflow does not occur\n+        BigInteger intMax = BigInteger.valueOf(Integer.MAX_VALUE);\n+        BigInteger exp = intMax;\n+        exp = exp.add(intMax.multiply(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_SECOND)));\n+        exp = exp.add(intMax.multiply(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_MINUTE)));\n+        exp = exp.add(intMax.multiply(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_HOUR)));\n+        exp = exp.add(intMax.multiply(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_DAY)));\n+        exp = exp.add(intMax.multiply(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_WEEK)));\n+        assertTrue(exp.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0);\n+//        test = new Period(0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);\n+//        try {\n+//            test.toStandardDuration();\n+//            fail();\n+//        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void testToStandardDuration_years() {\n+        Period test = Period.years(1);\n+        try {\n+            test.toStandardDuration();\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        \n+        test = Period.years(-1);\n+        try {\n+            test.toStandardDuration();\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        \n+        test = Period.years(0);\n+        assertEquals(0, test.toStandardDuration().getMillis());\n+    }\n+\n+    public void testToStandardDuration_months() {\n+        Period test = Period.months(1);\n+        try {\n+            test.toStandardDuration();\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        \n+        test = Period.months(-1);\n+        try {\n+            test.toStandardDuration();\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        \n+        test = Period.months(0);\n+        assertEquals(0, test.toStandardDuration().getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNormalizedStandard_yearMonth1() {\n+        Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0);\n+        Period result = test.normalizedStandard();\n+        assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test);\n+        assertEquals(new Period(2, 3, 0, 0, 0, 0, 0, 0), result);\n+    }\n+\n+    public void testNormalizedStandard_yearMonth2() {\n+        Period test = new Period(Integer.MAX_VALUE, 15, 0, 0, 0, 0, 0, 0);\n+        try {\n+            test.normalizedStandard();\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void testNormalizedStandard_weekDay1() {\n+        Period test = new Period(0, 0, 1, 12, 0, 0, 0, 0);\n+        Period result = test.normalizedStandard();\n+        assertEquals(new Period(0, 0, 1, 12, 0, 0, 0, 0), test);\n+        assertEquals(new Period(0, 0, 2, 5, 0, 0, 0, 0), result);\n+    }\n+\n+    public void testNormalizedStandard_weekDay2() {\n+        Period test = new Period(0, 0, Integer.MAX_VALUE, 7, 0, 0, 0, 0);\n+        try {\n+            test.normalizedStandard();\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void testNormalizedStandard_yearMonthWeekDay() {\n+        Period test = new Period(1, 15, 1, 12, 0, 0, 0, 0);\n+        Period result = test.normalizedStandard();\n+        assertEquals(new Period(1, 15, 1, 12, 0, 0, 0, 0), test);\n+        assertEquals(new Period(2, 3, 2, 5, 0, 0, 0, 0), result);\n+    }\n+\n+    public void testNormalizedStandard_yearMonthDay() {\n+        Period test = new Period(1, 15, 0, 36, 0, 0, 0, 0);\n+        Period result = test.normalizedStandard();\n+        assertEquals(new Period(1, 15, 0, 36, 0, 0, 0, 0), test);\n+        assertEquals(new Period(2, 3, 5, 1, 0, 0, 0, 0), result);\n+    }\n+\n+    public void testNormalizedStandard_negative() {\n+        Period test = new Period(0, 0, 0, 0, 2, -10, 0, 0);\n+        Period result = test.normalizedStandard();\n+        assertEquals(new Period(0, 0, 0, 0, 2, -10, 0, 0), test);\n+        assertEquals(new Period(0, 0, 0, 0, 1, 50, 0, 0), result);\n+    }\n+\n+    public void testNormalizedStandard_fullNegative() {\n+        Period test = new Period(0, 0, 0, 0, 1, -70, 0, 0);\n+        Period result = test.normalizedStandard();\n+        assertEquals(new Period(0, 0, 0, 0, 1, -70, 0, 0), test);\n+        assertEquals(new Period(0, 0, 0, 0, 0, -10, 0, 0), result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNormalizedStandard_periodType_yearMonth1() {\n+        Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0);\n+        Period result = test.normalizedStandard((PeriodType) null);\n+        assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test);\n+        assertEquals(new Period(2, 3, 0, 0, 0, 0, 0, 0), result);\n+    }\n+\n+    public void testNormalizedStandard_periodType_yearMonth2() {\n+        Period test = new Period(Integer.MAX_VALUE, 15, 0, 0, 0, 0, 0, 0);\n+        try {\n+            test.normalizedStandard((PeriodType) null);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void testNormalizedStandard_periodType_yearMonth3() {\n+        Period test = new Period(1, 15, 3, 4, 0, 0, 0, 0);\n+        try {\n+            test.normalizedStandard(PeriodType.dayTime());\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+    }\n+\n+    public void testNormalizedStandard_periodType_weekDay1() {\n+        Period test = new Period(0, 0, 1, 12, 0, 0, 0, 0);\n+        Period result = test.normalizedStandard((PeriodType) null);\n+        assertEquals(new Period(0, 0, 1, 12, 0, 0, 0, 0), test);\n+        assertEquals(new Period(0, 0, 2, 5, 0, 0, 0, 0), result);\n+    }\n+\n+    public void testNormalizedStandard_periodType_weekDay2() {\n+        Period test = new Period(0, 0, Integer.MAX_VALUE, 7, 0, 0, 0, 0);\n+        try {\n+            test.normalizedStandard((PeriodType) null);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void testNormalizedStandard_periodType_weekDay3() {\n+        Period test = new Period(0, 0, 1, 12, 0, 0, 0, 0);\n+        Period result = test.normalizedStandard(PeriodType.dayTime());\n+        assertEquals(new Period(0, 0, 1, 12, 0, 0, 0, 0), test);\n+        assertEquals(new Period(0, 0, 0, 19, 0, 0, 0, 0, PeriodType.dayTime()), result);\n+    }\n+\n+    public void testNormalizedStandard_periodType_yearMonthWeekDay() {\n+        Period test = new Period(1, 15, 1, 12, 0, 0, 0, 0);\n+        Period result = test.normalizedStandard(PeriodType.yearMonthDayTime());\n+        assertEquals(new Period(1, 15, 1, 12, 0, 0, 0, 0), test);\n+        assertEquals(new Period(2, 3, 0, 19, 0, 0, 0, 0, PeriodType.yearMonthDayTime()), result);\n+    }\n+\n+    public void testNormalizedStandard_periodType_yearMonthDay() {\n+        Period test = new Period(1, 15, 0, 36, 27, 0, 0, 0);\n+        Period result = test.normalizedStandard(PeriodType.yearMonthDayTime());\n+        assertEquals(new Period(1, 15, 0, 36, 27, 0, 0, 0), test);\n+        assertEquals(new Period(2, 3, 0, 37, 3, 0, 0, 0, PeriodType.yearMonthDayTime()), result);\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestPeriod_Constructors.java\n+/*\n+ *  Copyright 2001-2007 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * This class is a JUnit test for Duration.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestPeriod_Constructors extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestPeriod_Constructors.class);\n+    }\n+\n+    public TestPeriod_Constructors(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstants() throws Throwable {\n+        Period test = Period.ZERO;\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor1() throws Throwable {\n+        Period test = new Period();\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long1() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        Period test = new Period(length);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals((4 * 24) + 5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    public void testConstructor_long2() throws Throwable {\n+        long length =\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        Period test = new Period(length);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    public void testConstructor_long3() throws Throwable {\n+        long length =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        Period test = new Period(length);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        // only time fields are precise in AllType\n+        assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals((450 * 24) + 5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_PeriodType1() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        Period test = new Period(length, (PeriodType) null);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals((4 * 24) + 5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    public void testConstructor_long_PeriodType2() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        Period test = new Period(length, PeriodType.millis());\n+        assertEquals(PeriodType.millis(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(length, test.getMillis());\n+    }\n+\n+    public void testConstructor_long_PeriodType3() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        Period test = new Period(length, PeriodType.dayTime());\n+        assertEquals(PeriodType.dayTime(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals((4 * 24) + 5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    public void testConstructor_long_PeriodType4() throws Throwable {\n+        long length =\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        Period test = new Period(length, PeriodType.standard().withMillisRemoved());\n+        assertEquals(PeriodType.standard().withMillisRemoved(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_Chronology1() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        Period test = new Period(length, ISOChronology.getInstance());\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals((4 * 24) + 5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    public void testConstructor_long_Chronology2() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        Period test = new Period(length, ISOChronology.getInstanceUTC());\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    public void testConstructor_long_Chronology3() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        Period test = new Period(length, (Chronology) null);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals((4 * 24) + 5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_PeriodType_Chronology1() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        Period test = new Period(length, PeriodType.time().withMillisRemoved(), ISOChronology.getInstance());\n+        assertEquals(PeriodType.time().withMillisRemoved(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals((4 * 24) + 5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testConstructor_long_PeriodType_Chronology2() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        Period test = new Period(length, PeriodType.standard(), ISOChronology.getInstanceUTC());\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    public void testConstructor_long_PeriodType_Chronology3() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        Period test = new Period(length, PeriodType.standard(), (Chronology) null);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals((4 * 24) + 5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    public void testConstructor_long_PeriodType_Chronology4() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        Period test = new Period(length, (PeriodType) null, (Chronology) null);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals((4 * 24) + 5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (4ints)\n+     */\n+    public void testConstructor_4int1() throws Throwable {\n+        Period test = new Period(5, 6, 7, 8);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (8ints)\n+     */\n+    public void testConstructor_8int1() throws Throwable {\n+        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (8ints)\n+     */\n+    public void testConstructor_8int__PeriodType1() throws Throwable {\n+        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, null);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    public void testConstructor_8int__PeriodType2() throws Throwable {\n+        Period test = new Period(0, 0, 0, 0, 5, 6, 7, 8, PeriodType.dayTime());\n+        assertEquals(PeriodType.dayTime(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    public void testConstructor_8int__PeriodType3() throws Throwable {\n+        try {\n+            new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.dayTime());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_long1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Period test = new Period(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_long_long2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        Period test = new Period(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_long_PeriodType1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Period test = new Period(dt1.getMillis(), dt2.getMillis(), (PeriodType) null);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_long_long_PeriodType2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2004, 7, 10, 1, 1, 1, 1);\n+        Period test = new Period(dt1.getMillis(), dt2.getMillis(), PeriodType.dayTime());\n+        assertEquals(PeriodType.dayTime(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(31, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_long_long_PeriodType3() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2004, 6, 9, 1, 1, 1, 1);\n+        Period test = new Period(dt1.getMillis(), dt2.getMillis(), PeriodType.standard().withMillisRemoved());\n+        assertEquals(PeriodType.standard().withMillisRemoved(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testToPeriod_PeriodType3() {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10);\n+        DateTime dt2 = new DateTime(2005, 6, 9, 12, 14, 16, 18);\n+        Period test = new Period(dt1.getMillis(), dt2.getMillis(), PeriodType.yearWeekDayTime());\n+        \n+        assertEquals(PeriodType.yearWeekDayTime(), test.getPeriodType());\n+        assertEquals(1, test.getYears());  // tests using years and not weekyears\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_long_Chronology1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance());\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance());\n+        Period test = new Period(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance());\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_long_long_Chronology2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Period test = new Period(dt1.getMillis(), dt2.getMillis(), (Chronology) null);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_long_PeriodType_Chronology1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance());\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance());\n+        Period test = new Period(dt1.getMillis(), dt2.getMillis(), (PeriodType) null, CopticChronology.getInstance());\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_long_long_PeriodType_Chronology2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Period test = new Period(dt1.getMillis(), dt2.getMillis(), (PeriodType) null, null);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RI_RI1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Period test = new Period(dt1, dt2);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_RI_RI2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        Period test = new Period(dt1, dt2);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_RI_RI3() throws Throwable {\n+        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n+        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        Period test = new Period(dt1, dt2);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(3, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_RI_RI4() throws Throwable {\n+        DateTime dt1 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        DateTime dt2 = null;  // 2002-06-09T01:00+01:00\n+        Period test = new Period(dt1, dt2);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(-3, test.getYears());\n+        assertEquals(-1, test.getMonths());\n+        assertEquals(-1, test.getWeeks());\n+        assertEquals(-1, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(-1, test.getMinutes());\n+        assertEquals(-1, test.getSeconds());\n+        assertEquals(-1, test.getMillis());\n+    }\n+\n+    public void testConstructor_RI_RI5() throws Throwable {\n+        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n+        DateTime dt2 = null;  // 2002-06-09T01:00+01:00\n+        Period test = new Period(dt1, dt2);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RI_RI_PeriodType1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Period test = new Period(dt1, dt2, null);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_RI_RI_PeriodType2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2004, 7, 10, 1, 1, 1, 1);\n+        Period test = new Period(dt1, dt2, PeriodType.dayTime());\n+        assertEquals(PeriodType.dayTime(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(31, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_RI_RI_PeriodType3() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2004, 6, 9, 1, 1, 1, 1);\n+        Period test = new Period(dt1, dt2, PeriodType.standard().withMillisRemoved());\n+        assertEquals(PeriodType.standard().withMillisRemoved(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testConstructor_RI_RI_PeriodType4() throws Throwable {\n+        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n+        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        Period test = new Period(dt1, dt2, PeriodType.standard());\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(3, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_RI_RI_PeriodType5() throws Throwable {\n+        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n+        DateTime dt2 = null;  // 2002-06-09T01:00+01:00\n+        Period test = new Period(dt1, dt2, PeriodType.standard());\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RP_RP1() throws Throwable {\n+        YearMonthDay dt1 = new YearMonthDay(2004, 6, 9);\n+        YearMonthDay dt2 = new YearMonthDay(2005, 7, 10);\n+        Period test = new Period(dt1, dt2);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testConstructor_RP_RP2() throws Throwable {\n+        YearMonthDay dt1 = new YearMonthDay(2004, 6, 9);\n+        YearMonthDay dt2 = new YearMonthDay(2005, 5, 17);\n+        Period test = new Period(dt1, dt2);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(11, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testConstructor_RP_RP2Local() throws Throwable {\n+        LocalDate dt1 = new LocalDate(2004, 6, 9);\n+        LocalDate dt2 = new LocalDate(2005, 5, 17);\n+        Period test = new Period(dt1, dt2);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(11, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testConstructor_RP_RP3() throws Throwable {\n+        YearMonthDay dt1 = null;\n+        YearMonthDay dt2 = new YearMonthDay(2005, 7, 17);\n+        try {\n+            new Period(dt1, dt2);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_RP_RP4() throws Throwable {\n+        YearMonthDay dt1 = new YearMonthDay(2005, 7, 17);\n+        YearMonthDay dt2 = null;\n+        try {\n+            new Period(dt1, dt2);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_RP_RP5() throws Throwable {\n+        YearMonthDay dt1 = null;\n+        YearMonthDay dt2 = null;\n+        try {\n+            new Period(dt1, dt2);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_RP_RP6() throws Throwable {\n+        YearMonthDay dt1 = new YearMonthDay(2005, 7, 17);\n+        TimeOfDay dt2 = new TimeOfDay(10, 20, 30, 40);\n+        try {\n+            new Period(dt1, dt2);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_RP_RP7() throws Throwable {\n+        Partial dt1 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.monthOfYear(), 12);\n+        Partial dt2 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 14);\n+        try {\n+            new Period(dt1, dt2);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_RP_RP8() throws Throwable {\n+        Partial dt1 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 12);\n+        Partial dt2 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 14);\n+        try {\n+            new Period(dt1, dt2);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RP_RP_PeriodType1() throws Throwable {\n+        YearMonthDay dt1 = new YearMonthDay(2004, 6, 9);\n+        YearMonthDay dt2 = new YearMonthDay(2005, 7, 10);\n+        Period test = new Period(dt1, dt2, PeriodType.standard());\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testConstructor_RP_RP_PeriodType2() throws Throwable {\n+        YearMonthDay dt1 = new YearMonthDay(2004, 6, 9);\n+        YearMonthDay dt2 = new YearMonthDay(2005, 5, 17);\n+        Period test = new Period(dt1, dt2, PeriodType.yearMonthDay());\n+        assertEquals(PeriodType.yearMonthDay(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(11, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(8, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testConstructor_RP_RP_PeriodType2Local() throws Throwable {\n+        LocalDate dt1 = new LocalDate(2004, 6, 9);\n+        LocalDate dt2 = new LocalDate(2005, 5, 17);\n+        Period test = new Period(dt1, dt2, PeriodType.yearMonthDay());\n+        assertEquals(PeriodType.yearMonthDay(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(11, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(8, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testConstructor_RP_RP_PeriodType3() throws Throwable {\n+        YearMonthDay dt1 = null;\n+        YearMonthDay dt2 = new YearMonthDay(2005, 7, 17);\n+        try {\n+            new Period(dt1, dt2, PeriodType.standard());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_RP_RP_PeriodType4() throws Throwable {\n+        YearMonthDay dt1 = new YearMonthDay(2005, 7, 17);\n+        YearMonthDay dt2 = null;\n+        try {\n+            new Period(dt1, dt2);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_RP_RP_PeriodType5() throws Throwable {\n+        YearMonthDay dt1 = null;\n+        YearMonthDay dt2 = null;\n+        try {\n+            new Period(dt1, dt2, PeriodType.standard());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_RP_RP_PeriodType6() throws Throwable {\n+        YearMonthDay dt1 = new YearMonthDay(2005, 7, 17);\n+        TimeOfDay dt2 = new TimeOfDay(10, 20, 30, 40);\n+        try {\n+            new Period(dt1, dt2, PeriodType.standard());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_RP_RP_PeriodType7() throws Throwable {\n+        Partial dt1 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.monthOfYear(), 12);\n+        Partial dt2 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 14);\n+        try {\n+            new Period(dt1, dt2, PeriodType.standard());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_RP_RP_PeriodType8() throws Throwable {\n+        Partial dt1 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 12);\n+        Partial dt2 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 14);\n+        try {\n+            new Period(dt1, dt2, PeriodType.standard());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RI_RD1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Duration dur = new Interval(dt1, dt2).toDuration();\n+        Period test = new Period(dt1, dur);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_RI_RD2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        Duration dur = null;\n+        Period test = new Period(dt1, dur);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RI_RD_PeriodType1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Duration dur = new Interval(dt1, dt2).toDuration();\n+        Period test = new Period(dt1, dur, PeriodType.yearDayTime());\n+        assertEquals(PeriodType.yearDayTime(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(31, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_RI_RD_PeriodType2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        Duration dur = null;\n+        Period test = new Period(dt1, dur, (PeriodType) null);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RD_RI1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Duration dur = new Interval(dt1, dt2).toDuration();\n+        Period test = new Period(dur, dt2);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_RD_RI2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        Duration dur = null;\n+        Period test = new Period(dur, dt1);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RD_RI_PeriodType1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Duration dur = new Interval(dt1, dt2).toDuration();\n+        Period test = new Period(dur, dt2, PeriodType.yearDayTime());\n+        assertEquals(PeriodType.yearDayTime(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(31, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_RD_RI_PeriodType2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        Duration dur = null;\n+        Period test = new Period(dur, dt1, (PeriodType) null);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (Object)\n+     */\n+    public void testConstructor_Object1() throws Throwable {\n+        Period test = new Period(\"P1Y2M3D\");\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(3, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testConstructor_Object2() throws Throwable {\n+        Period test = new Period((Object) null);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testConstructor_Object3() throws Throwable {\n+        Period test = new Period(new Period(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.dayTime()));\n+        assertEquals(PeriodType.dayTime(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(2, test.getMinutes());\n+        assertEquals(3, test.getSeconds());\n+        assertEquals(4, test.getMillis());\n+    }\n+\n+    public void testConstructor_Object4() throws Throwable {\n+        Period base = new Period(1, 1, 0, 1, 1, 1, 1, 1, PeriodType.standard());\n+        Period test = new Period(base);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (Object)\n+     */\n+    public void testConstructor_Object_PeriodType1() throws Throwable {\n+        Period test = new Period(\"P1Y2M3D\", PeriodType.yearMonthDayTime());\n+        assertEquals(PeriodType.yearMonthDayTime(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(3, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testConstructor_Object_PeriodType2() throws Throwable {\n+        Period test = new Period((Object) null, PeriodType.yearMonthDayTime());\n+        assertEquals(PeriodType.yearMonthDayTime(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testConstructor_Object_PeriodType3() throws Throwable {\n+        Period test = new Period(new Period(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.dayTime()), PeriodType.yearMonthDayTime());\n+        assertEquals(PeriodType.yearMonthDayTime(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(2, test.getMinutes());\n+        assertEquals(3, test.getSeconds());\n+        assertEquals(4, test.getMillis());\n+    }\n+\n+    public void testConstructor_Object_PeriodType4() throws Throwable {\n+        Period test = new Period(new Period(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.dayTime()), (PeriodType) null);\n+        assertEquals(PeriodType.dayTime(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(2, test.getMinutes());\n+        assertEquals(3, test.getSeconds());\n+        assertEquals(4, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactoryYears() throws Throwable {\n+        Period test = Period.years(6);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(6, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testFactoryMonths() throws Throwable {\n+        Period test = Period.months(6);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(6, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testFactoryWeeks() throws Throwable {\n+        Period test = Period.weeks(6);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(6, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testFactoryDays() throws Throwable {\n+        Period test = Period.days(6);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(6, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testFactoryHours() throws Throwable {\n+        Period test = Period.hours(6);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(6, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testFactoryMinutes() throws Throwable {\n+        Period test = Period.minutes(6);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testFactorySeconds() throws Throwable {\n+        Period test = Period.seconds(6);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(6, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testFactoryMillis() throws Throwable {\n+        Period test = Period.millis(6);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(6, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactoryFieldDifference1() throws Throwable {\n+        YearMonthDay start = new YearMonthDay(2005, 4, 9);\n+        DateTimeFieldType[] types = new DateTimeFieldType[] {\n+            DateTimeFieldType.year(),\n+            DateTimeFieldType.monthOfYear(),\n+            DateTimeFieldType.dayOfMonth(),\n+        };\n+        Partial end = new Partial(types, new int[] {2004, 6, 7});\n+        Period test = Period.fieldDifference(start, end);\n+        assertEquals(PeriodType.yearMonthDay(), test.getPeriodType());\n+        assertEquals(-1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(-2, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testFactoryFieldDifference2() throws Throwable {\n+        YearMonthDay ymd = new YearMonthDay(2005, 4, 9);\n+        try {\n+            Period.fieldDifference(ymd, (ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            Period.fieldDifference((ReadablePartial) null, ymd);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testFactoryFieldDifference3() throws Throwable {\n+        YearMonthDay start = new YearMonthDay(2005, 4, 9);\n+        TimeOfDay endTime = new TimeOfDay(12, 30, 40, 0);\n+        try {\n+            Period.fieldDifference(start, endTime);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testFactoryFieldDifference4() throws Throwable {\n+        DateTimeFieldType[] types = new DateTimeFieldType[] {\n+            DateTimeFieldType.year(),\n+            DateTimeFieldType.monthOfYear(),\n+            DateTimeFieldType.dayOfWeek(),\n+        };\n+        YearMonthDay start = new YearMonthDay(2005, 4, 9);\n+        Partial end = new Partial(types, new int[] {1, 2, 3});\n+        try {\n+            Period.fieldDifference(start, end);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testFactoryFieldDifference5() throws Throwable {\n+        DateTimeFieldType[] types = new DateTimeFieldType[] {\n+            DateTimeFieldType.year(),\n+            DateTimeFieldType.dayOfMonth(),\n+            DateTimeFieldType.dayOfWeek(),\n+        };\n+        Partial start = new Partial(types, new int[] {1, 2, 3});\n+        Partial end = new Partial(types, new int[] {1, 2, 3});\n+        try {\n+            Period.fieldDifference(start, end);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestSeconds.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * This class is a Junit unit test for Seconds.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestSeconds extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestSeconds.class);\n+    }\n+\n+    public TestSeconds(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+    }\n+\n+    protected void tearDown() throws Exception {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstants() {\n+        assertEquals(0, Seconds.ZERO.getSeconds());\n+        assertEquals(1, Seconds.ONE.getSeconds());\n+        assertEquals(2, Seconds.TWO.getSeconds());\n+        assertEquals(3, Seconds.THREE.getSeconds());\n+        assertEquals(Integer.MAX_VALUE, Seconds.MAX_VALUE.getSeconds());\n+        assertEquals(Integer.MIN_VALUE, Seconds.MIN_VALUE.getSeconds());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_seconds_int() {\n+        assertSame(Seconds.ZERO, Seconds.seconds(0));\n+        assertSame(Seconds.ONE, Seconds.seconds(1));\n+        assertSame(Seconds.TWO, Seconds.seconds(2));\n+        assertSame(Seconds.THREE, Seconds.seconds(3));\n+        assertSame(Seconds.MAX_VALUE, Seconds.seconds(Integer.MAX_VALUE));\n+        assertSame(Seconds.MIN_VALUE, Seconds.seconds(Integer.MIN_VALUE));\n+        assertEquals(-1, Seconds.seconds(-1).getSeconds());\n+        assertEquals(4, Seconds.seconds(4).getSeconds());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_secondsBetween_RInstant() {\n+        DateTime start = new DateTime(2006, 6, 9, 12, 0, 3, 0, PARIS);\n+        DateTime end1 = new DateTime(2006, 6, 9, 12, 0, 6, 0, PARIS);\n+        DateTime end2 = new DateTime(2006, 6, 9, 12, 0, 9, 0, PARIS);\n+        \n+        assertEquals(3, Seconds.secondsBetween(start, end1).getSeconds());\n+        assertEquals(0, Seconds.secondsBetween(start, start).getSeconds());\n+        assertEquals(0, Seconds.secondsBetween(end1, end1).getSeconds());\n+        assertEquals(-3, Seconds.secondsBetween(end1, start).getSeconds());\n+        assertEquals(6, Seconds.secondsBetween(start, end2).getSeconds());\n+    }\n+\n+    public void testFactory_secondsBetween_RPartial() {\n+        LocalTime start = new LocalTime(12, 0, 3);\n+        LocalTime end1 = new LocalTime(12, 0, 6);\n+        TimeOfDay end2 = new TimeOfDay(12, 0, 9);\n+        \n+        assertEquals(3, Seconds.secondsBetween(start, end1).getSeconds());\n+        assertEquals(0, Seconds.secondsBetween(start, start).getSeconds());\n+        assertEquals(0, Seconds.secondsBetween(end1, end1).getSeconds());\n+        assertEquals(-3, Seconds.secondsBetween(end1, start).getSeconds());\n+        assertEquals(6, Seconds.secondsBetween(start, end2).getSeconds());\n+    }\n+\n+    public void testFactory_secondsIn_RInterval() {\n+        DateTime start = new DateTime(2006, 6, 9, 12, 0, 3, 0, PARIS);\n+        DateTime end1 = new DateTime(2006, 6, 9, 12, 0, 6, 0, PARIS);\n+        DateTime end2 = new DateTime(2006, 6, 9, 12, 0, 9, 0, PARIS);\n+        \n+        assertEquals(0, Seconds.secondsIn((ReadableInterval) null).getSeconds());\n+        assertEquals(3, Seconds.secondsIn(new Interval(start, end1)).getSeconds());\n+        assertEquals(0, Seconds.secondsIn(new Interval(start, start)).getSeconds());\n+        assertEquals(0, Seconds.secondsIn(new Interval(end1, end1)).getSeconds());\n+        assertEquals(6, Seconds.secondsIn(new Interval(start, end2)).getSeconds());\n+    }\n+\n+    public void testFactory_standardSecondsIn_RPeriod() {\n+        assertEquals(0, Seconds.standardSecondsIn((ReadablePeriod) null).getSeconds());\n+        assertEquals(0, Seconds.standardSecondsIn(Period.ZERO).getSeconds());\n+        assertEquals(1, Seconds.standardSecondsIn(new Period(0, 0, 0, 0, 0, 0, 1, 0)).getSeconds());\n+        assertEquals(123, Seconds.standardSecondsIn(Period.seconds(123)).getSeconds());\n+        assertEquals(-987, Seconds.standardSecondsIn(Period.seconds(-987)).getSeconds());\n+        assertEquals(2 * 24 * 60 * 60, Seconds.standardSecondsIn(Period.days(2)).getSeconds());\n+        try {\n+            Seconds.standardSecondsIn(Period.months(1));\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expeceted\n+        }\n+    }\n+\n+    public void testFactory_parseSeconds_String() {\n+        assertEquals(0, Seconds.parseSeconds((String) null).getSeconds());\n+        assertEquals(0, Seconds.parseSeconds(\"PT0S\").getSeconds());\n+        assertEquals(1, Seconds.parseSeconds(\"PT1S\").getSeconds());\n+        assertEquals(-3, Seconds.parseSeconds(\"PT-3S\").getSeconds());\n+        assertEquals(2, Seconds.parseSeconds(\"P0Y0M0DT2S\").getSeconds());\n+        assertEquals(2, Seconds.parseSeconds(\"PT0H2S\").getSeconds());\n+        try {\n+            Seconds.parseSeconds(\"P1Y1D\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expeceted\n+        }\n+        try {\n+            Seconds.parseSeconds(\"P1DT1S\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expeceted\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetMethods() {\n+        Seconds test = Seconds.seconds(20);\n+        assertEquals(20, test.getSeconds());\n+    }\n+\n+    public void testGetFieldType() {\n+        Seconds test = Seconds.seconds(20);\n+        assertEquals(DurationFieldType.seconds(), test.getFieldType());\n+    }\n+\n+    public void testGetPeriodType() {\n+        Seconds test = Seconds.seconds(20);\n+        assertEquals(PeriodType.seconds(), test.getPeriodType());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsGreaterThan() {\n+        assertEquals(true, Seconds.THREE.isGreaterThan(Seconds.TWO));\n+        assertEquals(false, Seconds.THREE.isGreaterThan(Seconds.THREE));\n+        assertEquals(false, Seconds.TWO.isGreaterThan(Seconds.THREE));\n+        assertEquals(true, Seconds.ONE.isGreaterThan(null));\n+        assertEquals(false, Seconds.seconds(-1).isGreaterThan(null));\n+    }\n+\n+    public void testIsLessThan() {\n+        assertEquals(false, Seconds.THREE.isLessThan(Seconds.TWO));\n+        assertEquals(false, Seconds.THREE.isLessThan(Seconds.THREE));\n+        assertEquals(true, Seconds.TWO.isLessThan(Seconds.THREE));\n+        assertEquals(false, Seconds.ONE.isLessThan(null));\n+        assertEquals(true, Seconds.seconds(-1).isLessThan(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        Seconds test = Seconds.seconds(20);\n+        assertEquals(\"PT20S\", test.toString());\n+        \n+        test = Seconds.seconds(-20);\n+        assertEquals(\"PT-20S\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        Seconds test = Seconds.THREE;\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        Seconds result = (Seconds) ois.readObject();\n+        ois.close();\n+        \n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToStandardWeeks() {\n+        Seconds test = Seconds.seconds(60 * 60 * 24 * 7 * 2);\n+        Weeks expected = Weeks.weeks(2);\n+        assertEquals(expected, test.toStandardWeeks());\n+    }\n+\n+    public void testToStandardDays() {\n+        Seconds test = Seconds.seconds(60 * 60 * 24 * 2);\n+        Days expected = Days.days(2);\n+        assertEquals(expected, test.toStandardDays());\n+    }\n+\n+    public void testToStandardHours() {\n+        Seconds test = Seconds.seconds(60 * 60 * 2);\n+        Hours expected = Hours.hours(2);\n+        assertEquals(expected, test.toStandardHours());\n+    }\n+\n+    public void testToStandardMinutes() {\n+        Seconds test = Seconds.seconds(60 * 2);\n+        Minutes expected = Minutes.minutes(2);\n+        assertEquals(expected, test.toStandardMinutes());\n+    }\n+\n+    public void testToStandardDuration() {\n+        Seconds test = Seconds.seconds(20);\n+        Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_SECOND);\n+        assertEquals(expected, test.toStandardDuration());\n+        \n+        expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_SECOND);\n+        assertEquals(expected, Seconds.MAX_VALUE.toStandardDuration());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPlus_int() {\n+        Seconds test2 = Seconds.seconds(2);\n+        Seconds result = test2.plus(3);\n+        assertEquals(2, test2.getSeconds());\n+        assertEquals(5, result.getSeconds());\n+        \n+        assertEquals(1, Seconds.ONE.plus(0).getSeconds());\n+        \n+        try {\n+            Seconds.MAX_VALUE.plus(1);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testPlus_Seconds() {\n+        Seconds test2 = Seconds.seconds(2);\n+        Seconds test3 = Seconds.seconds(3);\n+        Seconds result = test2.plus(test3);\n+        assertEquals(2, test2.getSeconds());\n+        assertEquals(3, test3.getSeconds());\n+        assertEquals(5, result.getSeconds());\n+        \n+        assertEquals(1, Seconds.ONE.plus(Seconds.ZERO).getSeconds());\n+        assertEquals(1, Seconds.ONE.plus((Seconds) null).getSeconds());\n+        \n+        try {\n+            Seconds.MAX_VALUE.plus(Seconds.ONE);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testMinus_int() {\n+        Seconds test2 = Seconds.seconds(2);\n+        Seconds result = test2.minus(3);\n+        assertEquals(2, test2.getSeconds());\n+        assertEquals(-1, result.getSeconds());\n+        \n+        assertEquals(1, Seconds.ONE.minus(0).getSeconds());\n+        \n+        try {\n+            Seconds.MIN_VALUE.minus(1);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testMinus_Seconds() {\n+        Seconds test2 = Seconds.seconds(2);\n+        Seconds test3 = Seconds.seconds(3);\n+        Seconds result = test2.minus(test3);\n+        assertEquals(2, test2.getSeconds());\n+        assertEquals(3, test3.getSeconds());\n+        assertEquals(-1, result.getSeconds());\n+        \n+        assertEquals(1, Seconds.ONE.minus(Seconds.ZERO).getSeconds());\n+        assertEquals(1, Seconds.ONE.minus((Seconds) null).getSeconds());\n+        \n+        try {\n+            Seconds.MIN_VALUE.minus(Seconds.ONE);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testMultipliedBy_int() {\n+        Seconds test = Seconds.seconds(2);\n+        assertEquals(6, test.multipliedBy(3).getSeconds());\n+        assertEquals(2, test.getSeconds());\n+        assertEquals(-6, test.multipliedBy(-3).getSeconds());\n+        assertSame(test, test.multipliedBy(1));\n+        \n+        Seconds halfMax = Seconds.seconds(Integer.MAX_VALUE / 2 + 1);\n+        try {\n+            halfMax.multipliedBy(2);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testDividedBy_int() {\n+        Seconds test = Seconds.seconds(12);\n+        assertEquals(6, test.dividedBy(2).getSeconds());\n+        assertEquals(12, test.getSeconds());\n+        assertEquals(4, test.dividedBy(3).getSeconds());\n+        assertEquals(3, test.dividedBy(4).getSeconds());\n+        assertEquals(2, test.dividedBy(5).getSeconds());\n+        assertEquals(2, test.dividedBy(6).getSeconds());\n+        assertSame(test, test.dividedBy(1));\n+        \n+        try {\n+            Seconds.ONE.dividedBy(0);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testNegated() {\n+        Seconds test = Seconds.seconds(12);\n+        assertEquals(-12, test.negated().getSeconds());\n+        assertEquals(12, test.getSeconds());\n+        \n+        try {\n+            Seconds.MIN_VALUE.negated();\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddToLocalDate() {\n+        Seconds test = Seconds.seconds(26);\n+        LocalDateTime date = new LocalDateTime(2006, 6, 1, 0, 0, 0, 0);\n+        LocalDateTime expected = new LocalDateTime(2006, 6, 1, 0, 0, 26, 0);\n+        assertEquals(expected, date.plus(test));\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestSerialization.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.GJChronology;\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.chrono.JulianChronology;\n+import org.joda.time.field.DelegatedDurationField;\n+import org.joda.time.field.MillisDurationField;\n+import org.joda.time.field.UnsupportedDateTimeField;\n+import org.joda.time.field.UnsupportedDurationField;\n+\n+/**\n+ * This class is a Junit unit test for serialization.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestSerialization extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+\n+    private static class MockDelegatedDurationField extends DelegatedDurationField implements Serializable {\n+        private static final long serialVersionUID = 1878496002811998493L;        \n+        public MockDelegatedDurationField() {\n+            super(MillisDurationField.INSTANCE);\n+        }\n+    }\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestSerialization.class);\n+    }\n+\n+    public TestSerialization(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerializedInstant() throws Exception {\n+        Instant test = new Instant();\n+        loadAndCompare(test, \"Instant.dat\", false);\n+        inlineCompare(test, false);\n+    }\n+\n+    public void testSerializedDateTime() throws Exception {\n+        DateTime test = new DateTime();\n+        loadAndCompare(test, \"DateTime.dat\", false);\n+        inlineCompare(test, false);\n+    }\n+\n+    public void testSerializedDateTimeProperty() throws Exception {\n+        DateTime.Property test = new DateTime().hourOfDay();\n+        loadAndCompare(test, \"DateTimeProperty.dat\", false);\n+        inlineCompare(test, false);\n+    }\n+\n+    public void testSerializedMutableDateTime() throws Exception {\n+        MutableDateTime test = new MutableDateTime();\n+        loadAndCompare(test, \"MutableDateTime.dat\", false);\n+        inlineCompare(test, false);\n+    }\n+\n+    public void testSerializedMutableDateTimeProperty() throws Exception {\n+        MutableDateTime.Property test = new MutableDateTime().hourOfDay();\n+        loadAndCompare(test, \"MutableDateTimeProperty.dat\", false);\n+        inlineCompare(test, false);\n+    }\n+\n+    public void testSerializedDateMidnight() throws Exception {\n+        DateMidnight test = new DateMidnight();\n+        loadAndCompare(test, \"DateMidnight.dat\", false);\n+        inlineCompare(test, false);\n+    }\n+\n+    public void testSerializedDateMidnightProperty() throws Exception {\n+        DateMidnight.Property test = new DateMidnight().monthOfYear();\n+        loadAndCompare(test, \"DateMidnightProperty.dat\", false);\n+        inlineCompare(test, false);\n+    }\n+\n+    public void testSerializedYearMonthDay() throws Exception {\n+        YearMonthDay test = new YearMonthDay();\n+        loadAndCompare(test, \"YearMonthDay.dat\", false);\n+        inlineCompare(test, false);\n+    }\n+\n+    public void testSerializedTimeOfDay() throws Exception {\n+        TimeOfDay test = new TimeOfDay();\n+        loadAndCompare(test, \"TimeOfDay.dat\", false);\n+        inlineCompare(test, false);\n+    }\n+\n+    public void testSerializedDateTimeZoneUTC() throws Exception {\n+        DateTimeZone test = DateTimeZone.UTC;\n+        loadAndCompare(test, \"DateTimeZoneUTC.dat\", true);\n+        inlineCompare(test, true);\n+    }\n+\n+    public void testSerializedDateTimeZone() throws Exception {\n+        // have to re-get the zone, as TestDateTimeZone may have\n+        // changed the cache, or a SoftReference may have got cleared\n+        DateTimeZone test = DateTimeZone.forID(\"Europe/Paris\");\n+        loadAndCompare(test, \"DateTimeZone.dat\", true);\n+        inlineCompare(test, true);\n+    }\n+\n+    public void testSerializedCopticChronology() throws Exception {\n+        CopticChronology test = CopticChronology.getInstance(LONDON);\n+        loadAndCompare(test, \"CopticChronology.dat\", true);\n+        inlineCompare(test, true);\n+    }\n+\n+    public void testSerializedISOChronology() throws Exception {\n+        ISOChronology test = ISOChronology.getInstance(PARIS);\n+        loadAndCompare(test, \"ISOChronology.dat\", true);\n+        inlineCompare(test, true);\n+    }\n+\n+    public void testSerializedGJChronology() throws Exception {\n+        GJChronology test = GJChronology.getInstance(TOKYO);\n+        loadAndCompare(test, \"GJChronology.dat\", true);\n+        inlineCompare(test, true);\n+    }\n+\n+    public void testSerializedGJChronologyChangedInternals() throws Exception {\n+        GJChronology test = GJChronology.getInstance(PARIS, 123L, 2);\n+        loadAndCompare(test, \"GJChronologyChangedInternals.dat\", true);\n+        inlineCompare(test, true);\n+    }\n+\n+    public void testSerializedGregorianChronology() throws Exception {\n+        GregorianChronology test = GregorianChronology.getInstance(PARIS);\n+        loadAndCompare(test, \"GregorianChronology.dat\", true);\n+        inlineCompare(test, true);\n+    }\n+\n+    public void testSerializedJulianChronology() throws Exception {\n+        JulianChronology test = JulianChronology.getInstance(PARIS);\n+        loadAndCompare(test, \"JulianChronology.dat\", true);\n+        inlineCompare(test, true);\n+    }\n+\n+    public void testSerializedBuddhistChronology() throws Exception {\n+        BuddhistChronology test = BuddhistChronology.getInstance(PARIS);\n+        loadAndCompare(test, \"BuddhistChronology.dat\", true);\n+        inlineCompare(test, true);\n+    }\n+\n+    public void testSerializedPeriodType() throws Exception {\n+        PeriodType test = PeriodType.dayTime();\n+        loadAndCompare(test, \"PeriodType.dat\", false);\n+        inlineCompare(test, false);\n+    }\n+\n+    public void testSerializedDateTimeFieldType() throws Exception {\n+        DateTimeFieldType test = DateTimeFieldType.clockhourOfDay();\n+        loadAndCompare(test, \"DateTimeFieldType.dat\", true);\n+        inlineCompare(test, true);\n+    }\n+\n+    public void testSerializedUnsupportedDateTimeField() throws Exception {\n+        UnsupportedDateTimeField test = UnsupportedDateTimeField.getInstance(\n+                DateTimeFieldType.year(),\n+                UnsupportedDurationField.getInstance(DurationFieldType.years()));\n+        loadAndCompare(test, \"UnsupportedDateTimeField.dat\", true);\n+        inlineCompare(test, true);\n+    }\n+\n+    private void loadAndCompare(Serializable test, String filename, boolean same) throws Exception {\n+        FileInputStream fis = new FileInputStream(\"src/testdata/\" + filename);\n+        ObjectInputStream ois = new ObjectInputStream(fis);\n+        Object obj = ois.readObject();\n+        ois.close();\n+        if (same) {\n+            assertSame(test, obj);\n+        } else {\n+            assertEquals(test, obj);\n+        }\n+    }\n+\n+    public void inlineCompare(Serializable test, boolean same) throws Exception {\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        Object obj = ois.readObject();\n+        ois.close();\n+        \n+        if (same) {\n+            assertSame(test, obj);\n+        } else {\n+            assertEquals(test, obj);\n+        }\n+    }\n+\n+//    //-----------------------------------------------------------------------\n+//    public void testStoreSerializedInstant() throws Exception {\n+//        Instant test = new Instant();\n+//        store(test, \"Instant.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedDateTime() throws Exception {\n+//        DateTime test = new DateTime();\n+//        store(test, \"DateTime.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedMutableDateTime() throws Exception {\n+//        MutableDateTime test = new MutableDateTime();\n+//        store(test, \"MutableDateTime.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedDateMidnight() throws Exception {\n+//        DateMidnight test = new DateMidnight();\n+//        store(test, \"DateMidnight.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedYearMonthDay() throws Exception {\n+//        YearMonthDay test = new YearMonthDay();\n+//        store(test, \"YearMonthDay.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedYearMonthDayProperty() throws Exception {\n+//        YearMonthDay.Property test = new YearMonthDay().monthOfYear();\n+//        store(test, \"YearMonthDayProperty.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedTimeOfDay() throws Exception {\n+//        TimeOfDay test = new TimeOfDay();\n+//        store(test, \"TimeOfDay.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedTimeOfDayProperty() throws Exception {\n+//        TimeOfDay.Property test = new TimeOfDay().hourOfDay();\n+//        store(test, \"TimeOfDayProperty.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedDateTimeZoneUTC() throws Exception {\n+//        DateTimeZone test = DateTimeZone.UTC;\n+//        store(test, \"DateTimeZoneUTC.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedDateTimeZone() throws Exception {\n+//        DateTimeZone test = PARIS;\n+//        store(test, \"DateTimeZone.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedCopticChronology() throws Exception {\n+//        CopticChronology test = CopticChronology.getInstance(LONDON);\n+//        store(test, \"CopticChronology.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedISOChronology() throws Exception {\n+//        ISOChronology test = ISOChronology.getInstance(PARIS);\n+//        store(test, \"ISOChronology.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedGJChronology() throws Exception {\n+//        GJChronology test = GJChronology.getInstance(TOKYO);\n+//        store(test, \"GJChronology.dat\");\n+//    }\n+//\n+//    // Format changed in v1.2 - min days in first week not deserialized in v1.0/1.1\n+//    public void testStoreSerializedGJChronologyChangedInternals() throws Exception {\n+//        GJChronology test = GJChronology.getInstance(PARIS, 123L, 2);\n+//        store(test, \"GJChronologyChangedInternals.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedGregorianChronology() throws Exception {\n+//        GregorianChronology test = GregorianChronology.getInstance(PARIS);\n+//        store(test, \"GregorianChronology.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedJulianChronology() throws Exception {\n+//        JulianChronology test = JulianChronology.getInstance(PARIS);\n+//        store(test, \"JulianChronology.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedBuddhistChronology() throws Exception {\n+//        BuddhistChronology test = BuddhistChronology.getInstance(PARIS);\n+//        store(test, \"BuddhistChronology.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedPeriodType() throws Exception {\n+//        PeriodType test = PeriodType.dayTime();\n+//        store(test, \"PeriodType.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedDateTimeFieldType() throws Exception {\n+//        DateTimeFieldType test = DateTimeFieldType.clockhourOfDay();\n+//        store(test, \"DateTimeFieldType.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedUnsupportedDateTimeField() throws Exception {\n+//        UnsupportedDateTimeField test = UnsupportedDateTimeField.getInstance(\n+//                DateTimeFieldType.year(),\n+//                UnsupportedDurationField.getInstance(DurationFieldType.years()));\n+//        store(test, \"UnsupportedDateTimeField.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedDurationFieldType() throws Exception {\n+//        DurationFieldType test = DurationFieldType.MINUTES_TYPE;\n+//        store(test, \"DurationFieldType.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedMillisDurationField() throws Exception {\n+//        MillisDurationField test = (MillisDurationField) MillisDurationField.INSTANCE;\n+//        store(test, \"MillisDurationField.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedDelegatedDurationField() throws Exception {\n+//        DelegatedDurationField test = new MockDelegatedDurationField();\n+//        store(test, \"DelegatedDurationField.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedUnsupportedDurationField() throws Exception {\n+//        UnsupportedDurationField test = UnsupportedDurationField.getInstance(DurationFieldType.eras());\n+//        store(test, \"UnsupportedDurationField.dat\");\n+//    }\n+//\n+    // format changed (properly defined) in v1.1\n+//    public void testStoreSerializedDateTimeProperty() throws Exception {\n+//        DateTime.Property test = new DateTime().hourOfDay();\n+//        store(test, \"DateTimeProperty.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedMutableDateTimeProperty() throws Exception {\n+//        MutableDateTime.Property test = new MutableDateTime().hourOfDay();\n+//        store(test, \"MutableDateTimeProperty.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedDateMidnightProperty() throws Exception {\n+//        DateMidnight.Property test = new DateMidnight().monthOfYear();\n+//        store(test, \"DateMidnightProperty.dat\");\n+//    }\n+\n+    private void store(Serializable test, String filename) throws Exception {\n+        FileOutputStream fos = new FileOutputStream(\"src/testdata/\" + filename);\n+        ObjectOutputStream oos = new ObjectOutputStream(fos);\n+        try {\n+            oos.writeObject(test);\n+        } finally {\n+            oos.close();\n+        }\n+        oos.close();\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestTimeOfDay_Basics.java\n+/*\n+ *  Copyright 2001-2009 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Arrays;\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n+\n+/**\n+ * This class is a Junit unit test for TimeOfDay.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestTimeOfDay_Basics extends TestCase {\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    private static final int OFFSET = 1;\n+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+    private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);\n+    private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);\n+    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n+    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);\n+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n+    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);\n+    private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);\n+    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n+    \n+    private long TEST_TIME_NOW =\n+            10L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 20L * DateTimeConstants.MILLIS_PER_MINUTE\n+            + 30L * DateTimeConstants.MILLIS_PER_SECOND\n+            + 40L;\n+            \n+    private long TEST_TIME1 =\n+        1L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 2L * DateTimeConstants.MILLIS_PER_MINUTE\n+        + 3L * DateTimeConstants.MILLIS_PER_SECOND\n+        + 4L;\n+        \n+    private long TEST_TIME2 =\n+        1L * DateTimeConstants.MILLIS_PER_DAY\n+        + 5L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 6L * DateTimeConstants.MILLIS_PER_MINUTE\n+        + 7L * DateTimeConstants.MILLIS_PER_SECOND\n+        + 8L;\n+        \n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestTimeOfDay_Basics.class);\n+    }\n+\n+    public TestTimeOfDay_Basics(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGet() {\n+        TimeOfDay test = new TimeOfDay();\n+        assertEquals(10 + OFFSET, test.get(DateTimeFieldType.hourOfDay()));\n+        assertEquals(20, test.get(DateTimeFieldType.minuteOfHour()));\n+        assertEquals(30, test.get(DateTimeFieldType.secondOfMinute()));\n+        assertEquals(40, test.get(DateTimeFieldType.millisOfSecond()));\n+        try {\n+            test.get(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.get(DateTimeFieldType.dayOfMonth());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testSize() {\n+        TimeOfDay test = new TimeOfDay();\n+        assertEquals(4, test.size());\n+    }\n+\n+    public void testGetFieldType() {\n+        TimeOfDay test = new TimeOfDay(COPTIC_PARIS);\n+        assertSame(DateTimeFieldType.hourOfDay(), test.getFieldType(0));\n+        assertSame(DateTimeFieldType.minuteOfHour(), test.getFieldType(1));\n+        assertSame(DateTimeFieldType.secondOfMinute(), test.getFieldType(2));\n+        assertSame(DateTimeFieldType.millisOfSecond(), test.getFieldType(3));\n+        try {\n+            test.getFieldType(-1);\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            test.getFieldType(5);\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testGetFieldTypes() {\n+        TimeOfDay test = new TimeOfDay(COPTIC_PARIS);\n+        DateTimeFieldType[] fields = test.getFieldTypes();\n+        assertSame(DateTimeFieldType.hourOfDay(), fields[0]);\n+        assertSame(DateTimeFieldType.minuteOfHour(), fields[1]);\n+        assertSame(DateTimeFieldType.secondOfMinute(), fields[2]);\n+        assertSame(DateTimeFieldType.millisOfSecond(), fields[3]);\n+        assertNotSame(test.getFieldTypes(), test.getFieldTypes());\n+    }\n+\n+    public void testGetField() {\n+        TimeOfDay test = new TimeOfDay(COPTIC_PARIS);\n+        assertSame(CopticChronology.getInstanceUTC().hourOfDay(), test.getField(0));\n+        assertSame(CopticChronology.getInstanceUTC().minuteOfHour(), test.getField(1));\n+        assertSame(CopticChronology.getInstanceUTC().secondOfMinute(), test.getField(2));\n+        assertSame(CopticChronology.getInstanceUTC().millisOfSecond(), test.getField(3));\n+        try {\n+            test.getField(-1);\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            test.getField(5);\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testGetFields() {\n+        TimeOfDay test = new TimeOfDay(COPTIC_PARIS);\n+        DateTimeField[] fields = test.getFields();\n+        assertSame(CopticChronology.getInstanceUTC().hourOfDay(), fields[0]);\n+        assertSame(CopticChronology.getInstanceUTC().minuteOfHour(), fields[1]);\n+        assertSame(CopticChronology.getInstanceUTC().secondOfMinute(), fields[2]);\n+        assertSame(CopticChronology.getInstanceUTC().millisOfSecond(), fields[3]);\n+        assertNotSame(test.getFields(), test.getFields());\n+    }\n+\n+    public void testGetValue() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS);\n+        assertEquals(10, test.getValue(0));\n+        assertEquals(20, test.getValue(1));\n+        assertEquals(30, test.getValue(2));\n+        assertEquals(40, test.getValue(3));\n+        try {\n+            test.getValue(-1);\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            test.getValue(5);\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testGetValues() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS);\n+        int[] values = test.getValues();\n+        assertEquals(10, values[0]);\n+        assertEquals(20, values[1]);\n+        assertEquals(30, values[2]);\n+        assertEquals(40, values[3]);\n+        assertNotSame(test.getValues(), test.getValues());\n+    }\n+\n+    public void testIsSupported() {\n+        TimeOfDay test = new TimeOfDay(COPTIC_PARIS);\n+        assertEquals(true, test.isSupported(DateTimeFieldType.hourOfDay()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfHour()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.secondOfMinute()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.millisOfSecond()));\n+        assertEquals(false, test.isSupported(DateTimeFieldType.dayOfMonth()));\n+    }\n+\n+    public void testEqualsHashCode() {\n+        TimeOfDay test1 = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS);\n+        TimeOfDay test2 = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS);\n+        assertEquals(true, test1.equals(test2));\n+        assertEquals(true, test2.equals(test1));\n+        assertEquals(true, test1.equals(test1));\n+        assertEquals(true, test2.equals(test2));\n+        assertEquals(true, test1.hashCode() == test2.hashCode());\n+        assertEquals(true, test1.hashCode() == test1.hashCode());\n+        assertEquals(true, test2.hashCode() == test2.hashCode());\n+        \n+        TimeOfDay test3 = new TimeOfDay(15, 20, 30, 40);\n+        assertEquals(false, test1.equals(test3));\n+        assertEquals(false, test2.equals(test3));\n+        assertEquals(false, test3.equals(test1));\n+        assertEquals(false, test3.equals(test2));\n+        assertEquals(false, test1.hashCode() == test3.hashCode());\n+        assertEquals(false, test2.hashCode() == test3.hashCode());\n+        \n+        assertEquals(false, test1.equals(\"Hello\"));\n+        assertEquals(true, test1.equals(new MockInstant()));\n+        assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE));\n+    }\n+\n+    class MockInstant extends MockPartial {\n+        public Chronology getChronology() {\n+            return CopticChronology.getInstanceUTC();\n+        }\n+        public DateTimeField[] getFields() {\n+            return new DateTimeField[] {\n+                CopticChronology.getInstanceUTC().hourOfDay(),\n+                CopticChronology.getInstanceUTC().minuteOfHour(),\n+                CopticChronology.getInstanceUTC().secondOfMinute(),\n+                CopticChronology.getInstanceUTC().millisOfSecond(),\n+            };\n+        }\n+        public int[] getValues() {\n+            return new int[] {10, 20, 30, 40};\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testCompareTo() {\n+        TimeOfDay test1 = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay test1a = new TimeOfDay(10, 20, 30, 40);\n+        assertEquals(0, test1.compareTo(test1a));\n+        assertEquals(0, test1a.compareTo(test1));\n+        assertEquals(0, test1.compareTo(test1));\n+        assertEquals(0, test1a.compareTo(test1a));\n+        \n+        TimeOfDay test2 = new TimeOfDay(10, 20, 35, 40);\n+        assertEquals(-1, test1.compareTo(test2));\n+        assertEquals(+1, test2.compareTo(test1));\n+        \n+        TimeOfDay test3 = new TimeOfDay(10, 20, 35, 40, GregorianChronology.getInstanceUTC());\n+        assertEquals(-1, test1.compareTo(test3));\n+        assertEquals(+1, test3.compareTo(test1));\n+        assertEquals(0, test3.compareTo(test2));\n+        \n+        DateTimeFieldType[] types = new DateTimeFieldType[] {\n+            DateTimeFieldType.hourOfDay(),\n+            DateTimeFieldType.minuteOfHour(),\n+            DateTimeFieldType.secondOfMinute(),\n+            DateTimeFieldType.millisOfSecond(),\n+        };\n+        int[] values = new int[] {10, 20, 30, 40};\n+        Partial p = new Partial(types, values);\n+        assertEquals(0, test1.compareTo(p));\n+        try {\n+            test1.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+//        try {\n+//            test1.compareTo(new Date());\n+//            fail();\n+//        } catch (ClassCastException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsEqual_TOD() {\n+        TimeOfDay test1 = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay test1a = new TimeOfDay(10, 20, 30, 40);\n+        assertEquals(true, test1.isEqual(test1a));\n+        assertEquals(true, test1a.isEqual(test1));\n+        assertEquals(true, test1.isEqual(test1));\n+        assertEquals(true, test1a.isEqual(test1a));\n+        \n+        TimeOfDay test2 = new TimeOfDay(10, 20, 35, 40);\n+        assertEquals(false, test1.isEqual(test2));\n+        assertEquals(false, test2.isEqual(test1));\n+        \n+        TimeOfDay test3 = new TimeOfDay(10, 20, 35, 40, GregorianChronology.getInstanceUTC());\n+        assertEquals(false, test1.isEqual(test3));\n+        assertEquals(false, test3.isEqual(test1));\n+        assertEquals(true, test3.isEqual(test2));\n+        \n+        try {\n+            new TimeOfDay(10, 20, 35, 40).isEqual(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsBefore_TOD() {\n+        TimeOfDay test1 = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay test1a = new TimeOfDay(10, 20, 30, 40);\n+        assertEquals(false, test1.isBefore(test1a));\n+        assertEquals(false, test1a.isBefore(test1));\n+        assertEquals(false, test1.isBefore(test1));\n+        assertEquals(false, test1a.isBefore(test1a));\n+        \n+        TimeOfDay test2 = new TimeOfDay(10, 20, 35, 40);\n+        assertEquals(true, test1.isBefore(test2));\n+        assertEquals(false, test2.isBefore(test1));\n+        \n+        TimeOfDay test3 = new TimeOfDay(10, 20, 35, 40, GregorianChronology.getInstanceUTC());\n+        assertEquals(true, test1.isBefore(test3));\n+        assertEquals(false, test3.isBefore(test1));\n+        assertEquals(false, test3.isBefore(test2));\n+        \n+        try {\n+            new TimeOfDay(10, 20, 35, 40).isBefore(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsAfter_TOD() {\n+        TimeOfDay test1 = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay test1a = new TimeOfDay(10, 20, 30, 40);\n+        assertEquals(false, test1.isAfter(test1a));\n+        assertEquals(false, test1a.isAfter(test1));\n+        assertEquals(false, test1.isAfter(test1));\n+        assertEquals(false, test1a.isAfter(test1a));\n+        \n+        TimeOfDay test2 = new TimeOfDay(10, 20, 35, 40);\n+        assertEquals(false, test1.isAfter(test2));\n+        assertEquals(true, test2.isAfter(test1));\n+        \n+        TimeOfDay test3 = new TimeOfDay(10, 20, 35, 40, GregorianChronology.getInstanceUTC());\n+        assertEquals(false, test1.isAfter(test3));\n+        assertEquals(true, test3.isAfter(test1));\n+        assertEquals(false, test3.isAfter(test2));\n+        \n+        try {\n+            new TimeOfDay(10, 20, 35, 40).isAfter(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testWithChronologyRetainFields_Chrono() {\n+        TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS);\n+        TimeOfDay test = base.withChronologyRetainFields(BUDDHIST_TOKYO);\n+        check(base, 10, 20, 30, 40);\n+        assertEquals(COPTIC_UTC, base.getChronology());\n+        check(test, 10, 20, 30, 40);\n+        assertEquals(BUDDHIST_UTC, test.getChronology());\n+    }\n+\n+    public void testWithChronologyRetainFields_sameChrono() {\n+        TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS);\n+        TimeOfDay test = base.withChronologyRetainFields(COPTIC_TOKYO);\n+        assertSame(base, test);\n+    }\n+\n+    public void testWithChronologyRetainFields_nullChrono() {\n+        TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS);\n+        TimeOfDay test = base.withChronologyRetainFields(null);\n+        check(base, 10, 20, 30, 40);\n+        assertEquals(COPTIC_UTC, base.getChronology());\n+        check(test, 10, 20, 30, 40);\n+        assertEquals(ISO_UTC, test.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithField1() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay result = test.withField(DateTimeFieldType.hourOfDay(), 15);\n+        \n+        assertEquals(new TimeOfDay(10, 20, 30, 40), test);\n+        assertEquals(new TimeOfDay(15, 20, 30, 40), result);\n+    }\n+\n+    public void testWithField2() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        try {\n+            test.withField(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithField3() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        try {\n+            test.withField(DateTimeFieldType.dayOfMonth(), 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithField4() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay result = test.withField(DateTimeFieldType.hourOfDay(), 10);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithFieldAdded1() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay result = test.withFieldAdded(DurationFieldType.hours(), 6);\n+        \n+        assertEquals(new TimeOfDay(10, 20, 30, 40), test);\n+        assertEquals(new TimeOfDay(16, 20, 30, 40), result);\n+    }\n+\n+    public void testWithFieldAdded2() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        try {\n+            test.withFieldAdded(null, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded3() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        try {\n+            test.withFieldAdded(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded4() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay result = test.withFieldAdded(DurationFieldType.hours(), 0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testWithFieldAdded5() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        try {\n+            test.withFieldAdded(DurationFieldType.days(), 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded6() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay result = test.withFieldAdded(DurationFieldType.hours(), 16);\n+        \n+        assertEquals(new TimeOfDay(10, 20, 30, 40), test);\n+        assertEquals(new TimeOfDay(2, 20, 30, 40), result);\n+    }\n+\n+    public void testWithFieldAdded7() {\n+        TimeOfDay test = new TimeOfDay(23, 59, 59, 999);\n+        TimeOfDay result = test.withFieldAdded(DurationFieldType.millis(), 1);\n+        assertEquals(new TimeOfDay(0, 0, 0, 0), result);\n+        \n+        test = new TimeOfDay(23, 59, 59, 999);\n+        result = test.withFieldAdded(DurationFieldType.seconds(), 1);\n+        assertEquals(new TimeOfDay(0, 0, 0, 999), result);\n+        \n+        test = new TimeOfDay(23, 59, 59, 999);\n+        result = test.withFieldAdded(DurationFieldType.minutes(), 1);\n+        assertEquals(new TimeOfDay(0, 0, 59, 999), result);\n+        \n+        test = new TimeOfDay(23, 59, 59, 999);\n+        result = test.withFieldAdded(DurationFieldType.hours(), 1);\n+        assertEquals(new TimeOfDay(0, 59, 59, 999), result);\n+    }\n+\n+    public void testWithFieldAdded8() {\n+        TimeOfDay test = new TimeOfDay(0, 0, 0, 0);\n+        TimeOfDay result = test.withFieldAdded(DurationFieldType.millis(), -1);\n+        assertEquals(new TimeOfDay(23, 59, 59, 999), result);\n+        \n+        test = new TimeOfDay(0, 0, 0, 0);\n+        result = test.withFieldAdded(DurationFieldType.seconds(), -1);\n+        assertEquals(new TimeOfDay(23, 59, 59, 0), result);\n+        \n+        test = new TimeOfDay(0, 0, 0, 0);\n+        result = test.withFieldAdded(DurationFieldType.minutes(), -1);\n+        assertEquals(new TimeOfDay(23, 59, 0, 0), result);\n+        \n+        test = new TimeOfDay(0, 0, 0, 0);\n+        result = test.withFieldAdded(DurationFieldType.hours(), -1);\n+        assertEquals(new TimeOfDay(23, 0, 0, 0), result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPlus_RP() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40, BuddhistChronology.getInstance());\n+        TimeOfDay result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8));\n+        TimeOfDay expected = new TimeOfDay(15, 26, 37, 48, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plus((ReadablePeriod) null);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusHours_int() {\n+        TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance());\n+        TimeOfDay result = test.plusHours(1);\n+        TimeOfDay expected = new TimeOfDay(2, 2, 3, 4, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plusHours(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusMinutes_int() {\n+        TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance());\n+        TimeOfDay result = test.plusMinutes(1);\n+        TimeOfDay expected = new TimeOfDay(1, 3, 3, 4, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plusMinutes(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusSeconds_int() {\n+        TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance());\n+        TimeOfDay result = test.plusSeconds(1);\n+        TimeOfDay expected = new TimeOfDay(1, 2, 4, 4, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plusSeconds(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusMillis_int() {\n+        TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance());\n+        TimeOfDay result = test.plusMillis(1);\n+        TimeOfDay expected = new TimeOfDay(1, 2, 3, 5, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plusMillis(0);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMinus_RP() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40, BuddhistChronology.getInstance());\n+        TimeOfDay result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));\n+        TimeOfDay expected = new TimeOfDay(9, 19, 29, 39, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minus((ReadablePeriod) null);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusHours_int() {\n+        TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance());\n+        TimeOfDay result = test.minusHours(1);\n+        TimeOfDay expected = new TimeOfDay(0, 2, 3, 4, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minusHours(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusMinutes_int() {\n+        TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance());\n+        TimeOfDay result = test.minusMinutes(1);\n+        TimeOfDay expected = new TimeOfDay(1, 1, 3, 4, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minusMinutes(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusSeconds_int() {\n+        TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance());\n+        TimeOfDay result = test.minusSeconds(1);\n+        TimeOfDay expected = new TimeOfDay(1, 2, 2, 4, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minusSeconds(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusMillis_int() {\n+        TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance());\n+        TimeOfDay result = test.minusMillis(1);\n+        TimeOfDay expected = new TimeOfDay(1, 2, 3, 3, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minusMillis(0);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToLocalTime() {\n+        TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_UTC);\n+        LocalTime test = base.toLocalTime();\n+        assertEquals(new LocalTime(10, 20, 30, 40, COPTIC_UTC), test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateTimeToday() {\n+        TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); // PARIS irrelevant\n+        DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        \n+        DateTime test = base.toDateTimeToday();\n+        check(base, 10, 20, 30, 40);\n+        DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON);\n+        expected = expected.hourOfDay().setCopy(10);\n+        expected = expected.minuteOfHour().setCopy(20);\n+        expected = expected.secondOfMinute().setCopy(30);\n+        expected = expected.millisOfSecond().setCopy(40);\n+        assertEquals(expected, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateTimeToday_Zone() {\n+        TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); // PARIS irrelevant\n+        DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        \n+        DateTime test = base.toDateTimeToday(TOKYO);\n+        check(base, 10, 20, 30, 40);\n+        DateTime expected = new DateTime(dt.getMillis(), COPTIC_TOKYO);\n+        expected = expected.hourOfDay().setCopy(10);\n+        expected = expected.minuteOfHour().setCopy(20);\n+        expected = expected.secondOfMinute().setCopy(30);\n+        expected = expected.millisOfSecond().setCopy(40);\n+        assertEquals(expected, test);\n+    }\n+\n+    public void testToDateTimeToday_nullZone() {\n+        TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); // PARIS irrelevant\n+        DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        \n+        DateTime test = base.toDateTimeToday((DateTimeZone) null);\n+        check(base, 10, 20, 30, 40);\n+        DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON);\n+        expected = expected.hourOfDay().setCopy(10);\n+        expected = expected.minuteOfHour().setCopy(20);\n+        expected = expected.secondOfMinute().setCopy(30);\n+        expected = expected.millisOfSecond().setCopy(40);\n+        assertEquals(expected, test);\n+    }\n+\n+    // Removed as too complex\n+//    /**\n+//     * Merges two partial together, taking account of the different chronologies.\n+//     *\n+//     * @param main  the main partial\n+//     * @param base  the partial to use as a base to merge on top of\n+//     * @param instant  the instant to start from and to use for missing fields\n+//     * @return the merged instant\n+//     */\n+//    public long merge(ReadablePartial main, ReadablePartial base, long instant) {\n+//        DateTimeZone zone = main.getChronology().getZone();\n+//        instant = base.getChronology().withZone(zone).set(base, instant);\n+//        return set(main, instant);\n+//    }\n+//\n+//    //-----------------------------------------------------------------------\n+//    /**\n+//     * Converts this object to a DateTime using a YearMonthDay to fill in the\n+//     * missing fields and using the default time zone.\n+//     * This instance is immutable and unaffected by this method call.\n+//     * <p>\n+//     * The resulting chronology is determined by the chronology of this\n+//     * TimeOfDay plus the time zone.\n+//     * <p>\n+//     * This method makes use of the chronology of the specified YearMonthDay\n+//     * in the calculation. This can be significant when mixing chronologies.\n+//     * If the YearMonthDay is in the same chronology as this instance the\n+//     * method will perform exactly as you might expect.\n+//     * <p>\n+//     * If the chronologies differ, then both this TimeOfDay and the YearMonthDay\n+//     * are converted to the destination chronology and then merged. As a result\n+//     * it may be the case that the year, monthOfYear and dayOfMonth fields on\n+//     * the result are different from the values returned by the methods on the\n+//     * YearMonthDay.\n+//     * <p>\n+//     * See {@link DateTime#withFields(ReadablePartial)} for an algorithm that\n+//     * ignores the chronology.\n+//     *\n+//     * @param date  the date to use, null means today\n+//     * @return the DateTime instance\n+//     */\n+//    public DateTime toDateTime(YearMonthDay date) {\n+//        return toDateTime(date, null);\n+//    }\n+//\n+//    /**\n+//     * Converts this object to a DateTime using a YearMonthDay to fill in the\n+//     * missing fields.\n+//     * This instance is immutable and unaffected by this method call.\n+//     * <p>\n+//     * The resulting chronology is determined by the chronology of this\n+//     * TimeOfDay plus the time zone.\n+//     * <p>\n+//     * This method makes use of the chronology of the specified YearMonthDay\n+//     * in the calculation. This can be significant when mixing chronologies.\n+//     * If the YearMonthDay is in the same chronology as this instance the\n+//     * method will perform exactly as you might expect.\n+//     * <p>\n+//     * If the chronologies differ, then both this TimeOfDay and the YearMonthDay\n+//     * are converted to the destination chronology and then merged. As a result\n+//     * it may be the case that the year, monthOfYear and dayOfMonth fields on\n+//     * the result are different from the values returned by the methods on the\n+//     * YearMonthDay.\n+//     * <p>\n+//     * See {@link DateTime#withFields(ReadablePartial)} for an algorithm that\n+//     * ignores the chronology and just assigns the fields.\n+//     *\n+//     * @param date  the date to use, null means today\n+//     * @param zone  the zone to get the DateTime in, null means default\n+//     * @return the DateTime instance\n+//     */\n+//    public DateTime toDateTime(YearMonthDay date, DateTimeZone zone) {\n+//        Chronology chrono = getChronology().withZone(zone);\n+//        if (date == null) {\n+//            DateTime dt = new DateTime(chrono);\n+//            return dt.withFields(this);\n+//        } else {\n+//            long millis = chrono.merge(this, date, DateTimeUtils.currentTimeMillis());\n+//            return new DateTime(millis, chrono);\n+//        }\n+//    }\n+//\n+//    //-----------------------------------------------------------------------\n+//    public void testToDateTime_YMD() {\n+//        TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); // PARIS irrelevant\n+//        YearMonthDay ymd = new YearMonthDay(new DateMidnight(2004, 6, 9), BUDDHIST_TOKYO);\n+//        \n+//        DateTime test = base.toDateTime(ymd);\n+//        check(base, 10, 20, 30, 40);\n+//        DateTime expected = new DateTime(ymd.toDateMidnight(LONDON), COPTIC_LONDON);\n+//        expected = expected.hourOfDay().setCopy(10);\n+//        expected = expected.minuteOfHour().setCopy(20);\n+//        expected = expected.secondOfMinute().setCopy(30);\n+//        expected = expected.millisOfSecond().setCopy(40);\n+//        assertEquals(expected, test);\n+//    }\n+//\n+//    public void testToDateTime_nullYMD() {\n+//        TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); // PARIS irrelevant\n+//        \n+//        DateTime test = base.toDateTime((YearMonthDay) null);\n+//        check(base, 10, 20, 30, 40);\n+//        DateTime expected = new DateTime(COPTIC_LONDON);\n+//        expected = expected.hourOfDay().setCopy(10);\n+//        expected = expected.minuteOfHour().setCopy(20);\n+//        expected = expected.secondOfMinute().setCopy(30);\n+//        expected = expected.millisOfSecond().setCopy(40);\n+//        assertEquals(expected, test);\n+//    }\n+//\n+//    //-----------------------------------------------------------------------\n+//    public void testToDateTime_YMD_Zone() {\n+//        TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); // PARIS irrelevant\n+//        YearMonthDay ymd = new YearMonthDay(new DateMidnight(2004, 6, 9), BUDDHIST_LONDON);\n+//        \n+//        DateTime test = base.toDateTime(ymd, TOKYO);\n+//        check(base, 10, 20, 30, 40);\n+//        DateTime expected = new DateTime(ymd.toDateMidnight(TOKYO), COPTIC_TOKYO);\n+//        expected = expected.hourOfDay().setCopy(10);\n+//        expected = expected.minuteOfHour().setCopy(20);\n+//        expected = expected.secondOfMinute().setCopy(30);\n+//        expected = expected.millisOfSecond().setCopy(40);\n+//        assertEquals(expected, test);\n+//    }\n+//\n+//    public void testToDateTime_YMD_nullZone() {\n+//        TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); // PARIS irrelevant\n+//        YearMonthDay ymd = new YearMonthDay(new DateMidnight(2004, 6, 9), BUDDHIST_LONDON);\n+//        \n+//        DateTime test = base.toDateTime(ymd, null);\n+//        check(base, 10, 20, 30, 40);\n+//        DateTime expected = new DateTime(ymd.toDateMidnight(LONDON), COPTIC_LONDON);\n+//        expected = expected.hourOfDay().setCopy(10);\n+//        expected = expected.minuteOfHour().setCopy(20);\n+//        expected = expected.secondOfMinute().setCopy(30);\n+//        expected = expected.millisOfSecond().setCopy(40);\n+//        assertEquals(expected, test);\n+//    }\n+//\n+//    public void testToDateTime_nullYMD_Zone() {\n+//        TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); // PARIS irrelevant\n+//        \n+//        DateTime test = base.toDateTime((YearMonthDay) null, TOKYO);\n+//        check(base, 10, 20, 30, 40);\n+//        DateTime expected = new DateTime(COPTIC_TOKYO);\n+//        expected = expected.hourOfDay().setCopy(10);\n+//        expected = expected.minuteOfHour().setCopy(20);\n+//        expected = expected.secondOfMinute().setCopy(30);\n+//        expected = expected.millisOfSecond().setCopy(40);\n+//        assertEquals(expected, test);\n+//    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateTime_RI() {\n+        TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS);\n+        DateTime dt = new DateTime(0L); // LONDON zone\n+        assertEquals(\"1970-01-01T01:00:00.000+01:00\", dt.toString());\n+        \n+        DateTime test = base.toDateTime(dt);\n+        check(base, 10, 20, 30, 40);\n+        assertEquals(\"1970-01-01T01:00:00.000+01:00\", dt.toString());\n+        assertEquals(\"1970-01-01T10:20:30.040+01:00\", test.toString());\n+    }\n+\n+    public void testToDateTime_nullRI() {\n+        TimeOfDay base = new TimeOfDay(1, 2, 3, 4);\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME2);\n+        \n+        DateTime test = base.toDateTime((ReadableInstant) null);\n+        check(base, 1, 2, 3, 4);\n+        assertEquals(\"1970-01-02T01:02:03.004+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithers() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        check(test.withHourOfDay(6), 6, 20, 30, 40);\n+        check(test.withMinuteOfHour(6), 10, 6, 30, 40);\n+        check(test.withSecondOfMinute(6), 10, 20, 6, 40);\n+        check(test.withMillisOfSecond(6), 10, 20, 30, 6);\n+        try {\n+            test.withHourOfDay(-1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.withHourOfDay(24);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testProperty() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay()));\n+        assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour()));\n+        assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute()));\n+        assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond()));\n+        try {\n+            test.property(DateTimeFieldType.millisOfDay());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.property(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS);\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        TimeOfDay result = (TimeOfDay) ois.readObject();\n+        ois.close();\n+        \n+        assertEquals(test, result);\n+        assertTrue(Arrays.equals(test.getValues(), result.getValues()));\n+        assertTrue(Arrays.equals(test.getFields(), result.getFields()));\n+        assertEquals(test.getChronology(), result.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        assertEquals(\"T10:20:30.040\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString_String() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        assertEquals(\"\\ufffd\\ufffd\\ufffd\\ufffd 10\", test.toString(\"yyyy HH\"));\n+        assertEquals(\"T10:20:30.040\", test.toString((String) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString_String_Locale() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        assertEquals(\"10 20\", test.toString(\"H m\", Locale.ENGLISH));\n+        assertEquals(\"T10:20:30.040\", test.toString(null, Locale.ENGLISH));\n+        assertEquals(\"10 20\", test.toString(\"H m\", null));\n+        assertEquals(\"T10:20:30.040\", test.toString(null, null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString_DTFormatter() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        assertEquals(\"\\ufffd\\ufffd\\ufffd\\ufffd 10\", test.toString(DateTimeFormat.forPattern(\"yyyy HH\")));\n+        assertEquals(\"T10:20:30.040\", test.toString((DateTimeFormatter) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private void check(TimeOfDay test, int hour, int min, int sec, int milli) {\n+        assertEquals(hour, test.getHourOfDay());\n+        assertEquals(min, test.getMinuteOfHour());\n+        assertEquals(sec, test.getSecondOfMinute());\n+        assertEquals(milli, test.getMillisOfSecond());\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestTimeOfDay_Constructors.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.GJChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.chrono.JulianChronology;\n+\n+/**\n+ * This class is a Junit unit test for TimeOfDay.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestTimeOfDay_Constructors extends TestCase {\n+\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final ISOChronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    private static final int OFFSET = 1;\n+    \n+    private long TEST_TIME_NOW =\n+            10L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 20L * DateTimeConstants.MILLIS_PER_MINUTE\n+            + 30L * DateTimeConstants.MILLIS_PER_SECOND\n+            + 40L;\n+            \n+    private long TEST_TIME1 =\n+        1L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 2L * DateTimeConstants.MILLIS_PER_MINUTE\n+        + 3L * DateTimeConstants.MILLIS_PER_SECOND\n+        + 4L;\n+        \n+    private long TEST_TIME2 =\n+        1L * DateTimeConstants.MILLIS_PER_DAY\n+        + 5L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 6L * DateTimeConstants.MILLIS_PER_MINUTE\n+        + 7L * DateTimeConstants.MILLIS_PER_SECOND\n+        + 8L;\n+        \n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestTimeOfDay_Constructors.class);\n+    }\n+\n+    public TestTimeOfDay_Constructors(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        java.util.TimeZone.setDefault(LONDON.toTimeZone());\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        java.util.TimeZone.setDefault(zone.toTimeZone());\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor ()\n+     */\n+    public void testConstantMidnight() throws Throwable {\n+        TimeOfDay test = TimeOfDay.MIDNIGHT;\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(0, test.getHourOfDay());\n+        assertEquals(0, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_FromCalendarFields() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n+        cal.set(Calendar.MILLISECOND, 7);\n+        TimeOfDay expected = new TimeOfDay(4, 5, 6, 7);\n+        assertEquals(expected, TimeOfDay.fromCalendarFields(cal));\n+        try {\n+            TimeOfDay.fromCalendarFields(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_FromDateFields_after1970() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n+        cal.set(Calendar.MILLISECOND, 7);\n+        TimeOfDay expected = new TimeOfDay(4, 5, 6, 7);\n+        assertEquals(expected, TimeOfDay.fromDateFields(cal.getTime()));\n+    }\n+\n+    public void testFactory_FromDateFields_before1970() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(1969, 1, 3, 4, 5, 6);\n+        cal.set(Calendar.MILLISECOND, 7);\n+        TimeOfDay expected = new TimeOfDay(4, 5, 6, 7);\n+        assertEquals(expected, TimeOfDay.fromDateFields(cal.getTime()));\n+    }\n+\n+    public void testFactory_FromDateFields_null() throws Exception {\n+        try {\n+            TimeOfDay.fromDateFields(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test factory (long)\n+     */\n+    public void testFactoryMillisOfDay_long1() throws Throwable {\n+        TimeOfDay test = TimeOfDay.fromMillisOfDay(TEST_TIME1);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    /**\n+     * Test factory (long, Chronology)\n+     */\n+    public void testFactoryMillisOfDay_long1_Chronology() throws Throwable {\n+        TimeOfDay test = TimeOfDay.fromMillisOfDay(TEST_TIME1, JulianChronology.getInstance());\n+        assertEquals(JulianChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(1, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    /**\n+     * Test factory (long, Chronology=null)\n+     */\n+    public void testFactoryMillisOfDay_long_nullChronology() throws Throwable {\n+        TimeOfDay test = TimeOfDay.fromMillisOfDay(TEST_TIME1, null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor ()\n+     */\n+    public void testConstructor() throws Throwable {\n+        TimeOfDay test = new TimeOfDay();\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10 + OFFSET, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    /**\n+     * Test constructor (DateTimeZone)\n+     */\n+    public void testConstructor_DateTimeZone() throws Throwable {\n+        DateTime dt = new DateTime(2005, 6, 8, 23, 59, 30, 40, LONDON);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        // 23:59 in London is 00:59 the following day in Paris\n+        \n+        TimeOfDay test = new TimeOfDay(LONDON);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(23, test.getHourOfDay());\n+        assertEquals(59, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+        \n+        test = new TimeOfDay(PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(0, test.getHourOfDay());\n+        assertEquals(59, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    /**\n+     * Test constructor (DateTimeZone=null)\n+     */\n+    public void testConstructor_nullDateTimeZone() throws Throwable {\n+        DateTime dt = new DateTime(2005, 6, 8, 23, 59, 30, 40, LONDON);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        // 23:59 in London is 00:59 the following day in Paris\n+        \n+        TimeOfDay test = new TimeOfDay((DateTimeZone) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(23, test.getHourOfDay());\n+        assertEquals(59, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    /**\n+     * Test constructor (Chronology)\n+     */\n+    public void testConstructor_Chronology() throws Throwable {\n+        TimeOfDay test = new TimeOfDay(JulianChronology.getInstance());\n+        assertEquals(JulianChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(10 + OFFSET, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    /**\n+     * Test constructor (Chronology=null)\n+     */\n+    public void testConstructor_nullChronology() throws Throwable {\n+        TimeOfDay test = new TimeOfDay((Chronology) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10 + OFFSET, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (long)\n+     */\n+    public void testConstructor_long1() throws Throwable {\n+        TimeOfDay test = new TimeOfDay(TEST_TIME1);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1 + OFFSET, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    /**\n+     * Test constructor (long)\n+     */\n+    public void testConstructor_long2() throws Throwable {\n+        TimeOfDay test = new TimeOfDay(TEST_TIME2);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(5 + OFFSET, test.getHourOfDay());\n+        assertEquals(6, test.getMinuteOfHour());\n+        assertEquals(7, test.getSecondOfMinute());\n+        assertEquals(8, test.getMillisOfSecond());\n+    }\n+\n+    /**\n+     * Test constructor (long, Chronology)\n+     */\n+    public void testConstructor_long1_Chronology() throws Throwable {\n+        TimeOfDay test = new TimeOfDay(TEST_TIME1, JulianChronology.getInstance());\n+        assertEquals(JulianChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(1 + OFFSET, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    /**\n+     * Test constructor (long, Chronology)\n+     */\n+    public void testConstructor_long2_Chronology() throws Throwable {\n+        TimeOfDay test = new TimeOfDay(TEST_TIME2, JulianChronology.getInstance());\n+        assertEquals(JulianChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(5 + OFFSET, test.getHourOfDay());\n+        assertEquals(6, test.getMinuteOfHour());\n+        assertEquals(7, test.getSecondOfMinute());\n+        assertEquals(8, test.getMillisOfSecond());\n+    }\n+\n+    /**\n+     * Test constructor (long, Chronology=null)\n+     */\n+    public void testConstructor_long_nullChronology() throws Throwable {\n+        TimeOfDay test = new TimeOfDay(TEST_TIME1, null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1 + OFFSET, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (Object)\n+     */\n+    public void testConstructor_Object1() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        TimeOfDay test = new TimeOfDay(date);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1 + OFFSET, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    /**\n+     * Test constructor (Object)\n+     */\n+    public void testConstructor_Object2() throws Throwable {\n+        Calendar cal = new GregorianCalendar();\n+        cal.setTime(new Date(TEST_TIME1));\n+        TimeOfDay test = new TimeOfDay(cal);\n+        assertEquals(GJChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(1 + OFFSET, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    /**\n+     * Test constructor (Object=null)\n+     */\n+    public void testConstructor_nullObject() throws Throwable {\n+        TimeOfDay test = new TimeOfDay((Object) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10 + OFFSET, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    /**\n+     * Test constructor (Object)\n+     */\n+    public void testConstructor_todObject() throws Throwable {\n+        TimeOfDay base = new TimeOfDay(10, 20, 30, 40, CopticChronology.getInstance(PARIS));\n+        TimeOfDay test = new TimeOfDay(base);\n+        assertEquals(CopticChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectString1() throws Throwable {\n+        TimeOfDay test = new TimeOfDay(\"10:20:30.040\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectString2() throws Throwable {\n+        TimeOfDay test = new TimeOfDay(\"10:20:30.040+04:00\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10 + OFFSET - 4, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectString3() throws Throwable {\n+        TimeOfDay test = new TimeOfDay(\"T10:20:30.040\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectString4() throws Throwable {\n+        TimeOfDay test = new TimeOfDay(\"T10:20:30.040+04:00\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10 + OFFSET - 4, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectString5() throws Throwable {\n+        TimeOfDay test = new TimeOfDay(\"10:20\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectString6() throws Throwable {\n+        TimeOfDay test = new TimeOfDay(\"10\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(0, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectStringEx1() throws Throwable {\n+        try {\n+            new TimeOfDay(\"1970-04-06\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectStringEx2() throws Throwable {\n+        try {\n+            new TimeOfDay(\"1970-04-06T+14:00\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectStringEx3() throws Throwable {\n+        try {\n+            new TimeOfDay(\"1970-04-06T10:20:30.040\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectStringEx4() throws Throwable {\n+        try {\n+            new TimeOfDay(\"1970-04-06T10:20:30.040+14:00\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (Object, Chronology)\n+     */\n+    public void testConstructor_Object_Chronology() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        TimeOfDay test = new TimeOfDay(date, JulianChronology.getInstance());\n+        assertEquals(JulianChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(1 + OFFSET, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    /**\n+     * Test constructor (Object, Chronology)\n+     */\n+    public void testConstructor2_Object_Chronology() throws Throwable {\n+        TimeOfDay test = new TimeOfDay(\"T10:20\");\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+        \n+        try {\n+            new TimeOfDay(\"T1020\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (Object=null, Chronology)\n+     */\n+    public void testConstructor_nullObject_Chronology() throws Throwable {\n+        TimeOfDay test = new TimeOfDay((Object) null, JulianChronology.getInstance());\n+        assertEquals(JulianChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(10 + OFFSET, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    /**\n+     * Test constructor (Object, Chronology=null)\n+     */\n+    public void testConstructor_Object_nullChronology() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        TimeOfDay test = new TimeOfDay(date, null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1 + OFFSET, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    /**\n+     * Test constructor (Object=null, Chronology=null)\n+     */\n+    public void testConstructor_nullObject_nullChronology() throws Throwable {\n+        TimeOfDay test = new TimeOfDay((Object) null, null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10 + OFFSET, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (int, int)\n+     */\n+    public void testConstructor_int_int() throws Throwable {\n+        TimeOfDay test = new TimeOfDay(10, 20);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+        try {\n+            new TimeOfDay(-1, 20);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(24, 20);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, -1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, Chronology)\n+     */\n+    public void testConstructor_int_int_Chronology() throws Throwable {\n+        TimeOfDay test = new TimeOfDay(10, 20, JulianChronology.getInstance());\n+        assertEquals(JulianChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+        try {\n+            new TimeOfDay(-1, 20, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(24, 20, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, -1, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 60, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, Chronology=null)\n+     */\n+    public void testConstructor_int_int_nullChronology() throws Throwable {\n+        TimeOfDay test = new TimeOfDay(10, 20, null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int)\n+     */\n+    public void testConstructor_int_int_int() throws Throwable {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+        try {\n+            new TimeOfDay(-1, 20, 30);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(24, 20, 30);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, -1, 30);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 60, 30);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 20, -1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 20, 60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, Chronology)\n+     */\n+    public void testConstructor_int_int_int_Chronology() throws Throwable {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, JulianChronology.getInstance());\n+        assertEquals(JulianChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+        try {\n+            new TimeOfDay(-1, 20, 30, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(24, 20, 30, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, -1, 30, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 60, 30, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 20, -1, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 20, 60, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, Chronology=null)\n+     */\n+    public void testConstructor_int_int_int_nullChronology() throws Throwable {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, int)\n+     */\n+    public void testConstructor_int_int_int_int() throws Throwable {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+        try {\n+            new TimeOfDay(-1, 20, 30, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(24, 20, 30, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, -1, 30, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 60, 30, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 20, -1, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 20, 60, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 20, 30, -1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 20, 30, 1000);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, int, Chronology)\n+     */\n+    public void testConstructor_int_int_int_int_Chronology() throws Throwable {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40, JulianChronology.getInstance());\n+        assertEquals(JulianChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+        try {\n+            new TimeOfDay(-1, 20, 30, 40, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(24, 20, 30, 40, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, -1, 30, 40, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 60, 30, 40, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 20, -1, 40, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 20, 60, 40, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 20, 30, -1, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 20, 30, 1000, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, int, Chronology=null)\n+     */\n+    public void testConstructor_int_int_int_int_nullChronology() throws Throwable {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40, null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestTimeOfDay_Properties.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * This class is a Junit unit test for TimeOfDay.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestTimeOfDay_Properties extends TestCase {\n+\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    \n+    private long TEST_TIME_NOW =\n+            10L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 20L * DateTimeConstants.MILLIS_PER_MINUTE\n+            + 30L * DateTimeConstants.MILLIS_PER_SECOND\n+            + 40L;\n+            \n+    private long TEST_TIME1 =\n+        1L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 2L * DateTimeConstants.MILLIS_PER_MINUTE\n+        + 3L * DateTimeConstants.MILLIS_PER_SECOND\n+        + 4L;\n+        \n+    private long TEST_TIME2 =\n+        1L * DateTimeConstants.MILLIS_PER_DAY\n+        + 5L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 6L * DateTimeConstants.MILLIS_PER_MINUTE\n+        + 7L * DateTimeConstants.MILLIS_PER_SECOND\n+        + 8L;\n+        \n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestTimeOfDay_Properties.class);\n+    }\n+\n+    public TestTimeOfDay_Properties(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetHour() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField());\n+        assertEquals(\"hourOfDay\", test.hourOfDay().getName());\n+        assertEquals(\"Property[hourOfDay]\", test.hourOfDay().toString());\n+        assertSame(test, test.hourOfDay().getReadablePartial());\n+        assertSame(test, test.hourOfDay().getTimeOfDay());\n+        assertEquals(10, test.hourOfDay().get());\n+        assertEquals(\"10\", test.hourOfDay().getAsString());\n+        assertEquals(\"10\", test.hourOfDay().getAsText());\n+        assertEquals(\"10\", test.hourOfDay().getAsText(Locale.FRENCH));\n+        assertEquals(\"10\", test.hourOfDay().getAsShortText());\n+        assertEquals(\"10\", test.hourOfDay().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField());\n+        assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField());\n+        assertEquals(2, test.hourOfDay().getMaximumTextLength(null));\n+        assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesHour() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        assertEquals(0, test.hourOfDay().getMinimumValue());\n+        assertEquals(0, test.hourOfDay().getMinimumValueOverall());\n+        assertEquals(23, test.hourOfDay().getMaximumValue());\n+        assertEquals(23, test.hourOfDay().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyAddHour() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay copy = test.hourOfDay().addToCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 19, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addToCopy(0);\n+        check(copy, 10, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addToCopy(13);\n+        check(copy, 23, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addToCopy(14);\n+        check(copy, 0, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addToCopy(-10);\n+        check(copy, 0, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addToCopy(-11);\n+        check(copy, 23, 20, 30, 40);\n+    }\n+\n+    public void testPropertyAddNoWrapHour() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay copy = test.hourOfDay().addNoWrapToCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 19, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addNoWrapToCopy(0);\n+        check(copy, 10, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addNoWrapToCopy(13);\n+        check(copy, 23, 20, 30, 40);\n+        \n+        try {\n+            test.hourOfDay().addNoWrapToCopy(14);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addNoWrapToCopy(-10);\n+        check(copy, 0, 20, 30, 40);\n+        \n+        try {\n+            test.hourOfDay().addNoWrapToCopy(-11);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyAddWrapFieldHour() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay copy = test.hourOfDay().addWrapFieldToCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 19, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addWrapFieldToCopy(0);\n+        check(copy, 10, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addWrapFieldToCopy(18);\n+        check(copy, 4, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addWrapFieldToCopy(-15);\n+        check(copy, 19, 20, 30, 40);\n+    }\n+\n+    public void testPropertySetHour() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay copy = test.hourOfDay().setCopy(12);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 12, 20, 30, 40);\n+        \n+        try {\n+            test.hourOfDay().setCopy(24);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.hourOfDay().setCopy(-1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextHour() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay copy = test.hourOfDay().setCopy(\"12\");\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 12, 20, 30, 40);\n+    }\n+\n+    public void testPropertyWithMaximumValueHour() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay copy = test.hourOfDay().withMaximumValue();\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 23, 20, 30, 40);\n+    }\n+\n+    public void testPropertyWithMinimumValueHour() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay copy = test.hourOfDay().withMinimumValue();\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 0, 20, 30, 40);\n+    }\n+\n+    public void testPropertyCompareToHour() {\n+        TimeOfDay test1 = new TimeOfDay(TEST_TIME1);\n+        TimeOfDay test2 = new TimeOfDay(TEST_TIME2);\n+        assertEquals(true, test1.hourOfDay().compareTo(test2) < 0);\n+        assertEquals(true, test2.hourOfDay().compareTo(test1) > 0);\n+        assertEquals(true, test1.hourOfDay().compareTo(test1) == 0);\n+        try {\n+            test1.hourOfDay().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.hourOfDay().compareTo(dt2) < 0);\n+        assertEquals(true, test2.hourOfDay().compareTo(dt1) > 0);\n+        assertEquals(true, test1.hourOfDay().compareTo(dt1) == 0);\n+        try {\n+            test1.hourOfDay().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMinute() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField());\n+        assertEquals(\"minuteOfHour\", test.minuteOfHour().getName());\n+        assertEquals(\"Property[minuteOfHour]\", test.minuteOfHour().toString());\n+        assertSame(test, test.minuteOfHour().getReadablePartial());\n+        assertSame(test, test.minuteOfHour().getTimeOfDay());\n+        assertEquals(20, test.minuteOfHour().get());\n+        assertEquals(\"20\", test.minuteOfHour().getAsString());\n+        assertEquals(\"20\", test.minuteOfHour().getAsText());\n+        assertEquals(\"20\", test.minuteOfHour().getAsText(Locale.FRENCH));\n+        assertEquals(\"20\", test.minuteOfHour().getAsShortText());\n+        assertEquals(\"20\", test.minuteOfHour().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField());\n+        assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField());\n+        assertEquals(2, test.minuteOfHour().getMaximumTextLength(null));\n+        assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesMinute() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        assertEquals(0, test.minuteOfHour().getMinimumValue());\n+        assertEquals(0, test.minuteOfHour().getMinimumValueOverall());\n+        assertEquals(59, test.minuteOfHour().getMaximumValue());\n+        assertEquals(59, test.minuteOfHour().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyAddMinute() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay copy = test.minuteOfHour().addToCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 29, 30, 40);\n+        \n+        copy = test.minuteOfHour().addToCopy(39);\n+        check(copy, 10, 59, 30, 40);\n+        \n+        copy = test.minuteOfHour().addToCopy(40);\n+        check(copy, 11, 0, 30, 40);\n+        \n+        copy = test.minuteOfHour().addToCopy(1 * 60 + 45);\n+        check(copy, 12, 5, 30, 40);\n+        \n+        copy = test.minuteOfHour().addToCopy(13 * 60 + 39);\n+        check(copy, 23, 59, 30, 40);\n+        \n+        copy = test.minuteOfHour().addToCopy(13 * 60 + 40);\n+        check(copy, 0, 0, 30, 40);\n+        \n+        copy = test.minuteOfHour().addToCopy(-9);\n+        check(copy, 10, 11, 30, 40);\n+        \n+        copy = test.minuteOfHour().addToCopy(-19);\n+        check(copy, 10, 1, 30, 40);\n+        \n+        copy = test.minuteOfHour().addToCopy(-20);\n+        check(copy, 10, 0, 30, 40);\n+        \n+        copy = test.minuteOfHour().addToCopy(-21);\n+        check(copy, 9, 59, 30, 40);\n+        \n+        copy = test.minuteOfHour().addToCopy(-(10 * 60 + 20));\n+        check(copy, 0, 0, 30, 40);\n+        \n+        copy = test.minuteOfHour().addToCopy(-(10 * 60 + 21));\n+        check(copy, 23, 59, 30, 40);\n+    }\n+\n+    public void testPropertyAddNoWrapMinute() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay copy = test.minuteOfHour().addNoWrapToCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 29, 30, 40);\n+        \n+        copy = test.minuteOfHour().addNoWrapToCopy(39);\n+        check(copy, 10, 59, 30, 40);\n+        \n+        copy = test.minuteOfHour().addNoWrapToCopy(40);\n+        check(copy, 11, 0, 30, 40);\n+        \n+        copy = test.minuteOfHour().addNoWrapToCopy(1 * 60 + 45);\n+        check(copy, 12, 5, 30, 40);\n+        \n+        copy = test.minuteOfHour().addNoWrapToCopy(13 * 60 + 39);\n+        check(copy, 23, 59, 30, 40);\n+        \n+        try {\n+            test.minuteOfHour().addNoWrapToCopy(13 * 60 + 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+        \n+        copy = test.minuteOfHour().addNoWrapToCopy(-9);\n+        check(copy, 10, 11, 30, 40);\n+        \n+        copy = test.minuteOfHour().addNoWrapToCopy(-19);\n+        check(copy, 10, 1, 30, 40);\n+        \n+        copy = test.minuteOfHour().addNoWrapToCopy(-20);\n+        check(copy, 10, 0, 30, 40);\n+        \n+        copy = test.minuteOfHour().addNoWrapToCopy(-21);\n+        check(copy, 9, 59, 30, 40);\n+        \n+        copy = test.minuteOfHour().addNoWrapToCopy(-(10 * 60 + 20));\n+        check(copy, 0, 0, 30, 40);\n+        \n+        try {\n+            test.minuteOfHour().addNoWrapToCopy(-(10 * 60 + 21));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyAddWrapFieldMinute() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay copy = test.minuteOfHour().addWrapFieldToCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 29, 30, 40);\n+        \n+        copy = test.minuteOfHour().addWrapFieldToCopy(49);\n+        check(copy, 10, 9, 30, 40);\n+        \n+        copy = test.minuteOfHour().addWrapFieldToCopy(-47);\n+        check(copy, 10, 33, 30, 40);\n+    }\n+\n+    public void testPropertySetMinute() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay copy = test.minuteOfHour().setCopy(12);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 12, 30, 40);\n+        \n+        try {\n+            test.minuteOfHour().setCopy(60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.minuteOfHour().setCopy(-1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextMinute() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay copy = test.minuteOfHour().setCopy(\"12\");\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 12, 30, 40);\n+    }\n+\n+    public void testPropertyCompareToMinute() {\n+        TimeOfDay test1 = new TimeOfDay(TEST_TIME1);\n+        TimeOfDay test2 = new TimeOfDay(TEST_TIME2);\n+        assertEquals(true, test1.minuteOfHour().compareTo(test2) < 0);\n+        assertEquals(true, test2.minuteOfHour().compareTo(test1) > 0);\n+        assertEquals(true, test1.minuteOfHour().compareTo(test1) == 0);\n+        try {\n+            test1.minuteOfHour().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.minuteOfHour().compareTo(dt2) < 0);\n+        assertEquals(true, test2.minuteOfHour().compareTo(dt1) > 0);\n+        assertEquals(true, test1.minuteOfHour().compareTo(dt1) == 0);\n+        try {\n+            test1.minuteOfHour().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetSecond() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        assertSame(test.getChronology().secondOfMinute(), test.secondOfMinute().getField());\n+        assertEquals(\"secondOfMinute\", test.secondOfMinute().getName());\n+        assertEquals(\"Property[secondOfMinute]\", test.secondOfMinute().toString());\n+        assertSame(test, test.secondOfMinute().getReadablePartial());\n+        assertSame(test, test.secondOfMinute().getTimeOfDay());\n+        assertEquals(30, test.secondOfMinute().get());\n+        assertEquals(\"30\", test.secondOfMinute().getAsString());\n+        assertEquals(\"30\", test.secondOfMinute().getAsText());\n+        assertEquals(\"30\", test.secondOfMinute().getAsText(Locale.FRENCH));\n+        assertEquals(\"30\", test.secondOfMinute().getAsShortText());\n+        assertEquals(\"30\", test.secondOfMinute().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().seconds(), test.secondOfMinute().getDurationField());\n+        assertEquals(test.getChronology().minutes(), test.secondOfMinute().getRangeDurationField());\n+        assertEquals(2, test.secondOfMinute().getMaximumTextLength(null));\n+        assertEquals(2, test.secondOfMinute().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesSecond() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        assertEquals(0, test.secondOfMinute().getMinimumValue());\n+        assertEquals(0, test.secondOfMinute().getMinimumValueOverall());\n+        assertEquals(59, test.secondOfMinute().getMaximumValue());\n+        assertEquals(59, test.secondOfMinute().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyAddSecond() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay copy = test.secondOfMinute().addToCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 39, 40);\n+        \n+        copy = test.secondOfMinute().addToCopy(29);\n+        check(copy, 10, 20, 59, 40);\n+        \n+        copy = test.secondOfMinute().addToCopy(30);\n+        check(copy, 10, 21, 0, 40);\n+        \n+        copy = test.secondOfMinute().addToCopy(39 * 60 + 29);\n+        check(copy, 10, 59, 59, 40);\n+        \n+        copy = test.secondOfMinute().addToCopy(39 * 60 + 30);\n+        check(copy, 11, 0, 0, 40);\n+        \n+        copy = test.secondOfMinute().addToCopy(13 * 60 * 60 + 39 * 60 + 30);\n+        check(copy, 0, 0, 0, 40);\n+        \n+        copy = test.secondOfMinute().addToCopy(-9);\n+        check(copy, 10, 20, 21, 40);\n+        \n+        copy = test.secondOfMinute().addToCopy(-30);\n+        check(copy, 10, 20, 0, 40);\n+        \n+        copy = test.secondOfMinute().addToCopy(-31);\n+        check(copy, 10, 19, 59, 40);\n+        \n+        copy = test.secondOfMinute().addToCopy(-(10 * 60 * 60 + 20 * 60 + 30));\n+        check(copy, 0, 0, 0, 40);\n+        \n+        copy = test.secondOfMinute().addToCopy(-(10 * 60 * 60 + 20 * 60 + 31));\n+        check(copy, 23, 59, 59, 40);\n+    }\n+\n+    public void testPropertyAddNoWrapSecond() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay copy = test.secondOfMinute().addNoWrapToCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 39, 40);\n+        \n+        copy = test.secondOfMinute().addNoWrapToCopy(29);\n+        check(copy, 10, 20, 59, 40);\n+        \n+        copy = test.secondOfMinute().addNoWrapToCopy(30);\n+        check(copy, 10, 21, 0, 40);\n+        \n+        copy = test.secondOfMinute().addNoWrapToCopy(39 * 60 + 29);\n+        check(copy, 10, 59, 59, 40);\n+        \n+        copy = test.secondOfMinute().addNoWrapToCopy(39 * 60 + 30);\n+        check(copy, 11, 0, 0, 40);\n+        \n+        try {\n+            test.secondOfMinute().addNoWrapToCopy(13 * 60 * 60 + 39 * 60 + 30);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+        \n+        copy = test.secondOfMinute().addNoWrapToCopy(-9);\n+        check(copy, 10, 20, 21, 40);\n+        \n+        copy = test.secondOfMinute().addNoWrapToCopy(-30);\n+        check(copy, 10, 20, 0, 40);\n+        \n+        copy = test.secondOfMinute().addNoWrapToCopy(-31);\n+        check(copy, 10, 19, 59, 40);\n+        \n+        copy = test.secondOfMinute().addNoWrapToCopy(-(10 * 60 * 60 + 20 * 60 + 30));\n+        check(copy, 0, 0, 0, 40);\n+        \n+        try {\n+            test.secondOfMinute().addNoWrapToCopy(-(10 * 60 * 60 + 20 * 60 + 31));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyAddWrapFieldSecond() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay copy = test.secondOfMinute().addWrapFieldToCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 39, 40);\n+        \n+        copy = test.secondOfMinute().addWrapFieldToCopy(49);\n+        check(copy, 10, 20, 19, 40);\n+        \n+        copy = test.secondOfMinute().addWrapFieldToCopy(-47);\n+        check(copy, 10, 20, 43, 40);\n+    }\n+\n+    public void testPropertySetSecond() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay copy = test.secondOfMinute().setCopy(12);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 12, 40);\n+        \n+        try {\n+            test.secondOfMinute().setCopy(60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.secondOfMinute().setCopy(-1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextSecond() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay copy = test.secondOfMinute().setCopy(\"12\");\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 12, 40);\n+    }\n+\n+    public void testPropertyCompareToSecond() {\n+        TimeOfDay test1 = new TimeOfDay(TEST_TIME1);\n+        TimeOfDay test2 = new TimeOfDay(TEST_TIME2);\n+        assertEquals(true, test1.secondOfMinute().compareTo(test2) < 0);\n+        assertEquals(true, test2.secondOfMinute().compareTo(test1) > 0);\n+        assertEquals(true, test1.secondOfMinute().compareTo(test1) == 0);\n+        try {\n+            test1.secondOfMinute().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.secondOfMinute().compareTo(dt2) < 0);\n+        assertEquals(true, test2.secondOfMinute().compareTo(dt1) > 0);\n+        assertEquals(true, test1.secondOfMinute().compareTo(dt1) == 0);\n+        try {\n+            test1.secondOfMinute().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMilli() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        assertSame(test.getChronology().millisOfSecond(), test.millisOfSecond().getField());\n+        assertEquals(\"millisOfSecond\", test.millisOfSecond().getName());\n+        assertEquals(\"Property[millisOfSecond]\", test.millisOfSecond().toString());\n+        assertSame(test, test.millisOfSecond().getReadablePartial());\n+        assertSame(test, test.millisOfSecond().getTimeOfDay());\n+        assertEquals(40, test.millisOfSecond().get());\n+        assertEquals(\"40\", test.millisOfSecond().getAsString());\n+        assertEquals(\"40\", test.millisOfSecond().getAsText());\n+        assertEquals(\"40\", test.millisOfSecond().getAsText(Locale.FRENCH));\n+        assertEquals(\"40\", test.millisOfSecond().getAsShortText());\n+        assertEquals(\"40\", test.millisOfSecond().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().millis(), test.millisOfSecond().getDurationField());\n+        assertEquals(test.getChronology().seconds(), test.millisOfSecond().getRangeDurationField());\n+        assertEquals(3, test.millisOfSecond().getMaximumTextLength(null));\n+        assertEquals(3, test.millisOfSecond().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesMilli() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        assertEquals(0, test.millisOfSecond().getMinimumValue());\n+        assertEquals(0, test.millisOfSecond().getMinimumValueOverall());\n+        assertEquals(999, test.millisOfSecond().getMaximumValue());\n+        assertEquals(999, test.millisOfSecond().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyAddMilli() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay copy = test.millisOfSecond().addToCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 30, 49);\n+        \n+        copy = test.millisOfSecond().addToCopy(959);\n+        check(copy, 10, 20, 30, 999);\n+        \n+        copy = test.millisOfSecond().addToCopy(960);\n+        check(copy, 10, 20, 31, 0);\n+        \n+        copy = test.millisOfSecond().addToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959);\n+        check(copy, 23, 59, 59, 999);\n+        \n+        copy = test.millisOfSecond().addToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960);\n+        check(copy, 0, 0, 0, 0);\n+        \n+        copy = test.millisOfSecond().addToCopy(-9);\n+        check(copy, 10, 20, 30, 31);\n+        \n+        copy = test.millisOfSecond().addToCopy(-40);\n+        check(copy, 10, 20, 30, 0);\n+        \n+        copy = test.millisOfSecond().addToCopy(-41);\n+        check(copy, 10, 20, 29, 999);\n+        \n+        copy = test.millisOfSecond().addToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40));\n+        check(copy, 0, 0, 0, 0);\n+        \n+        copy = test.millisOfSecond().addToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41));\n+        check(copy, 23, 59, 59, 999);\n+    }\n+\n+    public void testPropertyAddNoWrapMilli() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay copy = test.millisOfSecond().addNoWrapToCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 30, 49);\n+        \n+        copy = test.millisOfSecond().addNoWrapToCopy(959);\n+        check(copy, 10, 20, 30, 999);\n+        \n+        copy = test.millisOfSecond().addNoWrapToCopy(960);\n+        check(copy, 10, 20, 31, 0);\n+        \n+        copy = test.millisOfSecond().addNoWrapToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959);\n+        check(copy, 23, 59, 59, 999);\n+        \n+        try {\n+            test.millisOfSecond().addNoWrapToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+        \n+        copy = test.millisOfSecond().addNoWrapToCopy(-9);\n+        check(copy, 10, 20, 30, 31);\n+        \n+        copy = test.millisOfSecond().addNoWrapToCopy(-40);\n+        check(copy, 10, 20, 30, 0);\n+        \n+        copy = test.millisOfSecond().addNoWrapToCopy(-41);\n+        check(copy, 10, 20, 29, 999);\n+        \n+        copy = test.millisOfSecond().addNoWrapToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40));\n+        check(copy, 0, 0, 0, 0);\n+        \n+        try {\n+            test.millisOfSecond().addNoWrapToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyAddWrapFieldMilli() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay copy = test.millisOfSecond().addWrapFieldToCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 30, 49);\n+        \n+        copy = test.millisOfSecond().addWrapFieldToCopy(995);\n+        check(copy, 10, 20, 30, 35);\n+        \n+        copy = test.millisOfSecond().addWrapFieldToCopy(-47);\n+        check(copy, 10, 20, 30, 993);\n+    }\n+\n+    public void testPropertySetMilli() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay copy = test.millisOfSecond().setCopy(12);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 30, 12);\n+        \n+        try {\n+            test.millisOfSecond().setCopy(1000);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.millisOfSecond().setCopy(-1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextMilli() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay copy = test.millisOfSecond().setCopy(\"12\");\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 30, 12);\n+    }\n+\n+    public void testPropertyCompareToMilli() {\n+        TimeOfDay test1 = new TimeOfDay(TEST_TIME1);\n+        TimeOfDay test2 = new TimeOfDay(TEST_TIME2);\n+        assertEquals(true, test1.millisOfSecond().compareTo(test2) < 0);\n+        assertEquals(true, test2.millisOfSecond().compareTo(test1) > 0);\n+        assertEquals(true, test1.millisOfSecond().compareTo(test1) == 0);\n+        try {\n+            test1.millisOfSecond().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.millisOfSecond().compareTo(dt2) < 0);\n+        assertEquals(true, test2.millisOfSecond().compareTo(dt1) > 0);\n+        assertEquals(true, test1.millisOfSecond().compareTo(dt1) == 0);\n+        try {\n+            test1.millisOfSecond().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private void check(TimeOfDay test, int hour, int min, int sec, int milli) {\n+        assertEquals(hour, test.getHourOfDay());\n+        assertEquals(min, test.getMinuteOfHour());\n+        assertEquals(sec, test.getSecondOfMinute());\n+        assertEquals(milli, test.getMillisOfSecond());\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestWeeks.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * This class is a Junit unit test for Weeks.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestWeeks extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestWeeks.class);\n+    }\n+\n+    public TestWeeks(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+    }\n+\n+    protected void tearDown() throws Exception {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstants() {\n+        assertEquals(0, Weeks.ZERO.getWeeks());\n+        assertEquals(1, Weeks.ONE.getWeeks());\n+        assertEquals(2, Weeks.TWO.getWeeks());\n+        assertEquals(3, Weeks.THREE.getWeeks());\n+        assertEquals(Integer.MAX_VALUE, Weeks.MAX_VALUE.getWeeks());\n+        assertEquals(Integer.MIN_VALUE, Weeks.MIN_VALUE.getWeeks());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_weeks_int() {\n+        assertSame(Weeks.ZERO, Weeks.weeks(0));\n+        assertSame(Weeks.ONE, Weeks.weeks(1));\n+        assertSame(Weeks.TWO, Weeks.weeks(2));\n+        assertSame(Weeks.THREE, Weeks.weeks(3));\n+        assertSame(Weeks.MAX_VALUE, Weeks.weeks(Integer.MAX_VALUE));\n+        assertSame(Weeks.MIN_VALUE, Weeks.weeks(Integer.MIN_VALUE));\n+        assertEquals(-1, Weeks.weeks(-1).getWeeks());\n+        assertEquals(4, Weeks.weeks(4).getWeeks());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_weeksBetween_RInstant() {\n+        DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);\n+        DateTime end1 = new DateTime(2006, 6, 30, 12, 0, 0, 0, PARIS);\n+        DateTime end2 = new DateTime(2006, 7, 21, 12, 0, 0, 0, PARIS);\n+        \n+        assertEquals(3, Weeks.weeksBetween(start, end1).getWeeks());\n+        assertEquals(0, Weeks.weeksBetween(start, start).getWeeks());\n+        assertEquals(0, Weeks.weeksBetween(end1, end1).getWeeks());\n+        assertEquals(-3, Weeks.weeksBetween(end1, start).getWeeks());\n+        assertEquals(6, Weeks.weeksBetween(start, end2).getWeeks());\n+    }\n+\n+    public void testFactory_weeksBetween_RPartial() {\n+        LocalDate start = new LocalDate(2006, 6, 9);\n+        LocalDate end1 = new LocalDate(2006, 6, 30);\n+        YearMonthDay end2 = new YearMonthDay(2006, 7, 21);\n+        \n+        assertEquals(3, Weeks.weeksBetween(start, end1).getWeeks());\n+        assertEquals(0, Weeks.weeksBetween(start, start).getWeeks());\n+        assertEquals(0, Weeks.weeksBetween(end1, end1).getWeeks());\n+        assertEquals(-3, Weeks.weeksBetween(end1, start).getWeeks());\n+        assertEquals(6, Weeks.weeksBetween(start, end2).getWeeks());\n+    }\n+\n+    public void testFactory_weeksIn_RInterval() {\n+        DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);\n+        DateTime end1 = new DateTime(2006, 6, 30, 12, 0, 0, 0, PARIS);\n+        DateTime end2 = new DateTime(2006, 7, 21, 12, 0, 0, 0, PARIS);\n+        \n+        assertEquals(0, Weeks.weeksIn((ReadableInterval) null).getWeeks());\n+        assertEquals(3, Weeks.weeksIn(new Interval(start, end1)).getWeeks());\n+        assertEquals(0, Weeks.weeksIn(new Interval(start, start)).getWeeks());\n+        assertEquals(0, Weeks.weeksIn(new Interval(end1, end1)).getWeeks());\n+        assertEquals(6, Weeks.weeksIn(new Interval(start, end2)).getWeeks());\n+    }\n+\n+    public void testFactory_standardWeeksIn_RPeriod() {\n+        assertEquals(0, Weeks.standardWeeksIn((ReadablePeriod) null).getWeeks());\n+        assertEquals(0, Weeks.standardWeeksIn(Period.ZERO).getWeeks());\n+        assertEquals(1, Weeks.standardWeeksIn(new Period(0, 0, 1, 0, 0, 0, 0, 0)).getWeeks());\n+        assertEquals(123, Weeks.standardWeeksIn(Period.weeks(123)).getWeeks());\n+        assertEquals(-987, Weeks.standardWeeksIn(Period.weeks(-987)).getWeeks());\n+        assertEquals(1, Weeks.standardWeeksIn(Period.days(13)).getWeeks());\n+        assertEquals(2, Weeks.standardWeeksIn(Period.days(14)).getWeeks());\n+        assertEquals(2, Weeks.standardWeeksIn(Period.days(15)).getWeeks());\n+        try {\n+            Weeks.standardWeeksIn(Period.months(1));\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expeceted\n+        }\n+    }\n+\n+    public void testFactory_parseWeeks_String() {\n+        assertEquals(0, Weeks.parseWeeks((String) null).getWeeks());\n+        assertEquals(0, Weeks.parseWeeks(\"P0W\").getWeeks());\n+        assertEquals(1, Weeks.parseWeeks(\"P1W\").getWeeks());\n+        assertEquals(-3, Weeks.parseWeeks(\"P-3W\").getWeeks());\n+        assertEquals(2, Weeks.parseWeeks(\"P0Y0M2W\").getWeeks());\n+        assertEquals(2, Weeks.parseWeeks(\"P2WT0H0M\").getWeeks());\n+        try {\n+            Weeks.parseWeeks(\"P1Y1D\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expeceted\n+        }\n+        try {\n+            Weeks.parseWeeks(\"P1WT1H\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expeceted\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetMethods() {\n+        Weeks test = Weeks.weeks(20);\n+        assertEquals(20, test.getWeeks());\n+    }\n+\n+    public void testGetFieldType() {\n+        Weeks test = Weeks.weeks(20);\n+        assertEquals(DurationFieldType.weeks(), test.getFieldType());\n+    }\n+\n+    public void testGetPeriodType() {\n+        Weeks test = Weeks.weeks(20);\n+        assertEquals(PeriodType.weeks(), test.getPeriodType());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsGreaterThan() {\n+        assertEquals(true, Weeks.THREE.isGreaterThan(Weeks.TWO));\n+        assertEquals(false, Weeks.THREE.isGreaterThan(Weeks.THREE));\n+        assertEquals(false, Weeks.TWO.isGreaterThan(Weeks.THREE));\n+        assertEquals(true, Weeks.ONE.isGreaterThan(null));\n+        assertEquals(false, Weeks.weeks(-1).isGreaterThan(null));\n+    }\n+\n+    public void testIsLessThan() {\n+        assertEquals(false, Weeks.THREE.isLessThan(Weeks.TWO));\n+        assertEquals(false, Weeks.THREE.isLessThan(Weeks.THREE));\n+        assertEquals(true, Weeks.TWO.isLessThan(Weeks.THREE));\n+        assertEquals(false, Weeks.ONE.isLessThan(null));\n+        assertEquals(true, Weeks.weeks(-1).isLessThan(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        Weeks test = Weeks.weeks(20);\n+        assertEquals(\"P20W\", test.toString());\n+        \n+        test = Weeks.weeks(-20);\n+        assertEquals(\"P-20W\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        Weeks test = Weeks.THREE;\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        Weeks result = (Weeks) ois.readObject();\n+        ois.close();\n+        \n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToStandardDays() {\n+        Weeks test = Weeks.weeks(2);\n+        Days expected = Days.days(14);\n+        assertEquals(expected, test.toStandardDays());\n+        \n+        try {\n+            Weeks.MAX_VALUE.toStandardDays();\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testToStandardHours() {\n+        Weeks test = Weeks.weeks(2);\n+        Hours expected = Hours.hours(2 * 7 * 24);\n+        assertEquals(expected, test.toStandardHours());\n+        \n+        try {\n+            Weeks.MAX_VALUE.toStandardHours();\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testToStandardMinutes() {\n+        Weeks test = Weeks.weeks(2);\n+        Minutes expected = Minutes.minutes(2 * 7 * 24 * 60);\n+        assertEquals(expected, test.toStandardMinutes());\n+        \n+        try {\n+            Weeks.MAX_VALUE.toStandardMinutes();\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testToStandardSeconds() {\n+        Weeks test = Weeks.weeks(2);\n+        Seconds expected = Seconds.seconds(2 * 7 * 24 * 60 * 60);\n+        assertEquals(expected, test.toStandardSeconds());\n+        \n+        try {\n+            Weeks.MAX_VALUE.toStandardSeconds();\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testToStandardDuration() {\n+        Weeks test = Weeks.weeks(20);\n+        Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_WEEK);\n+        assertEquals(expected, test.toStandardDuration());\n+        \n+        expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_WEEK);\n+        assertEquals(expected, Weeks.MAX_VALUE.toStandardDuration());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPlus_int() {\n+        Weeks test2 = Weeks.weeks(2);\n+        Weeks result = test2.plus(3);\n+        assertEquals(2, test2.getWeeks());\n+        assertEquals(5, result.getWeeks());\n+        \n+        assertEquals(1, Weeks.ONE.plus(0).getWeeks());\n+        \n+        try {\n+            Weeks.MAX_VALUE.plus(1);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testPlus_Weeks() {\n+        Weeks test2 = Weeks.weeks(2);\n+        Weeks test3 = Weeks.weeks(3);\n+        Weeks result = test2.plus(test3);\n+        assertEquals(2, test2.getWeeks());\n+        assertEquals(3, test3.getWeeks());\n+        assertEquals(5, result.getWeeks());\n+        \n+        assertEquals(1, Weeks.ONE.plus(Weeks.ZERO).getWeeks());\n+        assertEquals(1, Weeks.ONE.plus((Weeks) null).getWeeks());\n+        \n+        try {\n+            Weeks.MAX_VALUE.plus(Weeks.ONE);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testMinus_int() {\n+        Weeks test2 = Weeks.weeks(2);\n+        Weeks result = test2.minus(3);\n+        assertEquals(2, test2.getWeeks());\n+        assertEquals(-1, result.getWeeks());\n+        \n+        assertEquals(1, Weeks.ONE.minus(0).getWeeks());\n+        \n+        try {\n+            Weeks.MIN_VALUE.minus(1);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testMinus_Weeks() {\n+        Weeks test2 = Weeks.weeks(2);\n+        Weeks test3 = Weeks.weeks(3);\n+        Weeks result = test2.minus(test3);\n+        assertEquals(2, test2.getWeeks());\n+        assertEquals(3, test3.getWeeks());\n+        assertEquals(-1, result.getWeeks());\n+        \n+        assertEquals(1, Weeks.ONE.minus(Weeks.ZERO).getWeeks());\n+        assertEquals(1, Weeks.ONE.minus((Weeks) null).getWeeks());\n+        \n+        try {\n+            Weeks.MIN_VALUE.minus(Weeks.ONE);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testMultipliedBy_int() {\n+        Weeks test = Weeks.weeks(2);\n+        assertEquals(6, test.multipliedBy(3).getWeeks());\n+        assertEquals(2, test.getWeeks());\n+        assertEquals(-6, test.multipliedBy(-3).getWeeks());\n+        assertSame(test, test.multipliedBy(1));\n+        \n+        Weeks halfMax = Weeks.weeks(Integer.MAX_VALUE / 2 + 1);\n+        try {\n+            halfMax.multipliedBy(2);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testDividedBy_int() {\n+        Weeks test = Weeks.weeks(12);\n+        assertEquals(6, test.dividedBy(2).getWeeks());\n+        assertEquals(12, test.getWeeks());\n+        assertEquals(4, test.dividedBy(3).getWeeks());\n+        assertEquals(3, test.dividedBy(4).getWeeks());\n+        assertEquals(2, test.dividedBy(5).getWeeks());\n+        assertEquals(2, test.dividedBy(6).getWeeks());\n+        assertSame(test, test.dividedBy(1));\n+        \n+        try {\n+            Weeks.ONE.dividedBy(0);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testNegated() {\n+        Weeks test = Weeks.weeks(12);\n+        assertEquals(-12, test.negated().getWeeks());\n+        assertEquals(12, test.getWeeks());\n+        \n+        try {\n+            Weeks.MIN_VALUE.negated();\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddToLocalDate() {\n+        Weeks test = Weeks.weeks(3);\n+        LocalDate date = new LocalDate(2006, 6, 1);\n+        LocalDate expected = new LocalDate(2006, 6, 22);\n+        assertEquals(expected, date.plus(test));\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestYearMonthDay_Basics.java\n+/*\n+ *  Copyright 2001-2009 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Arrays;\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n+\n+/**\n+ * This class is a Junit unit test for YearMonthDay.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestYearMonthDay_Basics extends TestCase {\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    private static final int OFFSET = 1;\n+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+    private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);\n+    private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);\n+    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n+    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);\n+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n+    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);\n+    private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);\n+    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n+    \n+    private long TEST_TIME_NOW =\n+            (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    private long TEST_TIME1 =\n+        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private long TEST_TIME2 =\n+        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestYearMonthDay_Basics.class);\n+    }\n+\n+    public TestYearMonthDay_Basics(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGet() {\n+        YearMonthDay test = new YearMonthDay();\n+        assertEquals(1970, test.get(DateTimeFieldType.year()));\n+        assertEquals(6, test.get(DateTimeFieldType.monthOfYear()));\n+        assertEquals(9, test.get(DateTimeFieldType.dayOfMonth()));\n+        try {\n+            test.get(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.get(DateTimeFieldType.hourOfDay());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testSize() {\n+        YearMonthDay test = new YearMonthDay();\n+        assertEquals(3, test.size());\n+    }\n+\n+    public void testGetFieldType() {\n+        YearMonthDay test = new YearMonthDay(COPTIC_PARIS);\n+        assertSame(DateTimeFieldType.year(), test.getFieldType(0));\n+        assertSame(DateTimeFieldType.monthOfYear(), test.getFieldType(1));\n+        assertSame(DateTimeFieldType.dayOfMonth(), test.getFieldType(2));\n+        try {\n+            test.getFieldType(-1);\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            test.getFieldType(3);\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testGetFieldTypes() {\n+        YearMonthDay test = new YearMonthDay(COPTIC_PARIS);\n+        DateTimeFieldType[] fields = test.getFieldTypes();\n+        assertSame(DateTimeFieldType.year(), fields[0]);\n+        assertSame(DateTimeFieldType.monthOfYear(), fields[1]);\n+        assertSame(DateTimeFieldType.dayOfMonth(), fields[2]);\n+        assertNotSame(test.getFieldTypes(), test.getFieldTypes());\n+    }\n+\n+    public void testGetField() {\n+        YearMonthDay test = new YearMonthDay(COPTIC_PARIS);\n+        assertSame(COPTIC_UTC.year(), test.getField(0));\n+        assertSame(COPTIC_UTC.monthOfYear(), test.getField(1));\n+        assertSame(COPTIC_UTC.dayOfMonth(), test.getField(2));\n+        try {\n+            test.getField(-1);\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            test.getField(3);\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testGetFields() {\n+        YearMonthDay test = new YearMonthDay(COPTIC_PARIS);\n+        DateTimeField[] fields = test.getFields();\n+        assertSame(COPTIC_UTC.year(), fields[0]);\n+        assertSame(COPTIC_UTC.monthOfYear(), fields[1]);\n+        assertSame(COPTIC_UTC.dayOfMonth(), fields[2]);\n+        assertNotSame(test.getFields(), test.getFields());\n+    }\n+\n+    public void testGetValue() {\n+        YearMonthDay test = new YearMonthDay();\n+        assertEquals(1970, test.getValue(0));\n+        assertEquals(6, test.getValue(1));\n+        assertEquals(9, test.getValue(2));\n+        try {\n+            test.getValue(-1);\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            test.getValue(3);\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testGetValues() {\n+        YearMonthDay test = new YearMonthDay();\n+        int[] values = test.getValues();\n+        assertEquals(1970, values[0]);\n+        assertEquals(6, values[1]);\n+        assertEquals(9, values[2]);\n+        assertNotSame(test.getValues(), test.getValues());\n+    }\n+\n+    public void testIsSupported() {\n+        YearMonthDay test = new YearMonthDay(COPTIC_PARIS);\n+        assertEquals(true, test.isSupported(DateTimeFieldType.year()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth()));\n+        assertEquals(false, test.isSupported(DateTimeFieldType.hourOfDay()));\n+    }\n+\n+    public void testEqualsHashCode() {\n+        YearMonthDay test1 = new YearMonthDay(1970, 6, 9, COPTIC_PARIS);\n+        YearMonthDay test2 = new YearMonthDay(1970, 6, 9, COPTIC_PARIS);\n+        assertEquals(true, test1.equals(test2));\n+        assertEquals(true, test2.equals(test1));\n+        assertEquals(true, test1.equals(test1));\n+        assertEquals(true, test2.equals(test2));\n+        assertEquals(true, test1.hashCode() == test2.hashCode());\n+        assertEquals(true, test1.hashCode() == test1.hashCode());\n+        assertEquals(true, test2.hashCode() == test2.hashCode());\n+        \n+        YearMonthDay test3 = new YearMonthDay(1971, 6, 9);\n+        assertEquals(false, test1.equals(test3));\n+        assertEquals(false, test2.equals(test3));\n+        assertEquals(false, test3.equals(test1));\n+        assertEquals(false, test3.equals(test2));\n+        assertEquals(false, test1.hashCode() == test3.hashCode());\n+        assertEquals(false, test2.hashCode() == test3.hashCode());\n+        \n+        assertEquals(false, test1.equals(\"Hello\"));\n+        assertEquals(true, test1.equals(new MockInstant()));\n+        assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE));\n+    }\n+    \n+    class MockInstant extends MockPartial {\n+        public Chronology getChronology() {\n+            return COPTIC_UTC;\n+        }\n+        public DateTimeField[] getFields() {\n+            return new DateTimeField[] {\n+                COPTIC_UTC.year(),\n+                COPTIC_UTC.monthOfYear(),\n+                COPTIC_UTC.dayOfMonth(),\n+            };\n+        }\n+        public int[] getValues() {\n+            return new int[] {1970, 6, 9};\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testCompareTo() {\n+        YearMonthDay test1 = new YearMonthDay(2005, 6, 2);\n+        YearMonthDay test1a = new YearMonthDay(2005, 6, 2);\n+        assertEquals(0, test1.compareTo(test1a));\n+        assertEquals(0, test1a.compareTo(test1));\n+        assertEquals(0, test1.compareTo(test1));\n+        assertEquals(0, test1a.compareTo(test1a));\n+        \n+        YearMonthDay test2 = new YearMonthDay(2005, 7, 2);\n+        assertEquals(-1, test1.compareTo(test2));\n+        assertEquals(+1, test2.compareTo(test1));\n+        \n+        YearMonthDay test3 = new YearMonthDay(2005, 7, 2, GregorianChronology.getInstanceUTC());\n+        assertEquals(-1, test1.compareTo(test3));\n+        assertEquals(+1, test3.compareTo(test1));\n+        assertEquals(0, test3.compareTo(test2));\n+        \n+        DateTimeFieldType[] types = new DateTimeFieldType[] {\n+            DateTimeFieldType.year(),\n+            DateTimeFieldType.monthOfYear(),\n+            DateTimeFieldType.dayOfMonth(),\n+        };\n+        int[] values = new int[] {2005, 6, 2};\n+        Partial p = new Partial(types, values);\n+        assertEquals(0, test1.compareTo(p));\n+        try {\n+            test1.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+//        try {\n+//            test1.compareTo(new Date());\n+//            fail();\n+//        } catch (ClassCastException ex) {}\n+        try {\n+            test1.compareTo(new TimeOfDay());\n+            fail();\n+        } catch (ClassCastException ex) {}\n+        Partial partial = new Partial()\n+            .with(DateTimeFieldType.centuryOfEra(), 1)\n+            .with(DateTimeFieldType.halfdayOfDay(), 0)\n+            .with(DateTimeFieldType.dayOfMonth(), 9);\n+        try {\n+            new YearMonthDay(1970, 6, 9).compareTo(partial);\n+            fail();\n+        } catch (ClassCastException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsEqual_YMD() {\n+        YearMonthDay test1 = new YearMonthDay(2005, 6, 2);\n+        YearMonthDay test1a = new YearMonthDay(2005, 6, 2);\n+        assertEquals(true, test1.isEqual(test1a));\n+        assertEquals(true, test1a.isEqual(test1));\n+        assertEquals(true, test1.isEqual(test1));\n+        assertEquals(true, test1a.isEqual(test1a));\n+        \n+        YearMonthDay test2 = new YearMonthDay(2005, 7, 2);\n+        assertEquals(false, test1.isEqual(test2));\n+        assertEquals(false, test2.isEqual(test1));\n+        \n+        YearMonthDay test3 = new YearMonthDay(2005, 7, 2, GregorianChronology.getInstanceUTC());\n+        assertEquals(false, test1.isEqual(test3));\n+        assertEquals(false, test3.isEqual(test1));\n+        assertEquals(true, test3.isEqual(test2));\n+        \n+        try {\n+            new YearMonthDay(2005, 7, 2).isEqual(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsBefore_YMD() {\n+        YearMonthDay test1 = new YearMonthDay(2005, 6, 2);\n+        YearMonthDay test1a = new YearMonthDay(2005, 6, 2);\n+        assertEquals(false, test1.isBefore(test1a));\n+        assertEquals(false, test1a.isBefore(test1));\n+        assertEquals(false, test1.isBefore(test1));\n+        assertEquals(false, test1a.isBefore(test1a));\n+        \n+        YearMonthDay test2 = new YearMonthDay(2005, 7, 2);\n+        assertEquals(true, test1.isBefore(test2));\n+        assertEquals(false, test2.isBefore(test1));\n+        \n+        YearMonthDay test3 = new YearMonthDay(2005, 7, 2, GregorianChronology.getInstanceUTC());\n+        assertEquals(true, test1.isBefore(test3));\n+        assertEquals(false, test3.isBefore(test1));\n+        assertEquals(false, test3.isBefore(test2));\n+        \n+        try {\n+            new YearMonthDay(2005, 7, 2).isBefore(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsAfter_YMD() {\n+        YearMonthDay test1 = new YearMonthDay(2005, 6, 2);\n+        YearMonthDay test1a = new YearMonthDay(2005, 6, 2);\n+        assertEquals(false, test1.isAfter(test1a));\n+        assertEquals(false, test1a.isAfter(test1));\n+        assertEquals(false, test1.isAfter(test1));\n+        assertEquals(false, test1a.isAfter(test1a));\n+        \n+        YearMonthDay test2 = new YearMonthDay(2005, 7, 2);\n+        assertEquals(false, test1.isAfter(test2));\n+        assertEquals(true, test2.isAfter(test1));\n+        \n+        YearMonthDay test3 = new YearMonthDay(2005, 7, 2, GregorianChronology.getInstanceUTC());\n+        assertEquals(false, test1.isAfter(test3));\n+        assertEquals(true, test3.isAfter(test1));\n+        assertEquals(false, test3.isAfter(test2));\n+        \n+        try {\n+            new YearMonthDay(2005, 7, 2).isAfter(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testWithChronologyRetainFields_Chrono() {\n+        YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS);\n+        YearMonthDay test = base.withChronologyRetainFields(BUDDHIST_TOKYO);\n+        check(base, 2005, 6, 9);\n+        assertEquals(COPTIC_UTC, base.getChronology());\n+        check(test, 2005, 6, 9);\n+        assertEquals(BUDDHIST_UTC, test.getChronology());\n+    }\n+\n+    public void testWithChronologyRetainFields_sameChrono() {\n+        YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS);\n+        YearMonthDay test = base.withChronologyRetainFields(COPTIC_TOKYO);\n+        assertSame(base, test);\n+    }\n+\n+    public void testWithChronologyRetainFields_nullChrono() {\n+        YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS);\n+        YearMonthDay test = base.withChronologyRetainFields(null);\n+        check(base, 2005, 6, 9);\n+        assertEquals(COPTIC_UTC, base.getChronology());\n+        check(test, 2005, 6, 9);\n+        assertEquals(ISO_UTC, test.getChronology());\n+    }\n+\n+    public void testWithChronologyRetainFields_invalidInNewChrono() {\n+        YearMonthDay base = new YearMonthDay(2005, 1, 31, ISO_UTC);\n+        try {\n+            base.withChronologyRetainFields(COPTIC_UTC);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithField1() {\n+        YearMonthDay test = new YearMonthDay(2004, 6, 9);\n+        YearMonthDay result = test.withField(DateTimeFieldType.year(), 2006);\n+        \n+        assertEquals(new YearMonthDay(2004, 6, 9), test);\n+        assertEquals(new YearMonthDay(2006, 6, 9), result);\n+    }\n+\n+    public void testWithField2() {\n+        YearMonthDay test = new YearMonthDay(2004, 6, 9);\n+        try {\n+            test.withField(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithField3() {\n+        YearMonthDay test = new YearMonthDay(2004, 6, 9);\n+        try {\n+            test.withField(DateTimeFieldType.hourOfDay(), 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithField4() {\n+        YearMonthDay test = new YearMonthDay(2004, 6, 9);\n+        YearMonthDay result = test.withField(DateTimeFieldType.year(), 2004);\n+        assertEquals(new YearMonthDay(2004, 6, 9), test);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithFieldAdded1() {\n+        YearMonthDay test = new YearMonthDay(2004, 6, 9);\n+        YearMonthDay result = test.withFieldAdded(DurationFieldType.years(), 6);\n+        \n+        assertEquals(new YearMonthDay(2004, 6, 9), test);\n+        assertEquals(new YearMonthDay(2010, 6, 9), result);\n+    }\n+\n+    public void testWithFieldAdded2() {\n+        YearMonthDay test = new YearMonthDay(2004, 6, 9);\n+        try {\n+            test.withFieldAdded(null, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded3() {\n+        YearMonthDay test = new YearMonthDay(2004, 6, 9);\n+        try {\n+            test.withFieldAdded(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded4() {\n+        YearMonthDay test = new YearMonthDay(2004, 6, 9);\n+        YearMonthDay result = test.withFieldAdded(DurationFieldType.years(), 0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testWithFieldAdded5() {\n+        YearMonthDay test = new YearMonthDay(2004, 6, 9);\n+        try {\n+            test.withFieldAdded(DurationFieldType.hours(), 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPlus_RP() {\n+        YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance());\n+        YearMonthDay result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8));\n+        YearMonthDay expected = new YearMonthDay(2003, 7, 7, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plus((ReadablePeriod) null);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusYears_int() {\n+        YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance());\n+        YearMonthDay result = test.plusYears(1);\n+        YearMonthDay expected = new YearMonthDay(2003, 5, 3, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plusYears(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusMonths_int() {\n+        YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance());\n+        YearMonthDay result = test.plusMonths(1);\n+        YearMonthDay expected = new YearMonthDay(2002, 6, 3, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plusMonths(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusDays_int() {\n+        YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance());\n+        YearMonthDay result = test.plusDays(1);\n+        YearMonthDay expected = new YearMonthDay(2002, 5, 4, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plusDays(0);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMinus_RP() {\n+        YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance());\n+        YearMonthDay result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));\n+        YearMonthDay expected = new YearMonthDay(2001, 4, 2, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minus((ReadablePeriod) null);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusYears_int() {\n+        YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance());\n+        YearMonthDay result = test.minusYears(1);\n+        YearMonthDay expected = new YearMonthDay(2001, 5, 3, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minusYears(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusMonths_int() {\n+        YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance());\n+        YearMonthDay result = test.minusMonths(1);\n+        YearMonthDay expected = new YearMonthDay(2002, 4, 3, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minusMonths(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusDays_int() {\n+        YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance());\n+        YearMonthDay result = test.minusDays(1);\n+        YearMonthDay expected = new YearMonthDay(2002, 5, 2, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minusDays(0);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToLocalDate() {\n+        YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_UTC);\n+        LocalDate test = base.toLocalDate();\n+        assertEquals(new LocalDate(2005, 6, 9, COPTIC_UTC), test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateTimeAtMidnight() {\n+        YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS);\n+        \n+        DateTime test = base.toDateTimeAtMidnight();\n+        check(base, 2005, 6, 9);\n+        assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateTimeAtMidnight_Zone() {\n+        YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS);\n+        \n+        DateTime test = base.toDateTimeAtMidnight(TOKYO);\n+        check(base, 2005, 6, 9);\n+        assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_TOKYO), test);\n+    }\n+\n+    public void testToDateTimeAtMidnight_nullZone() {\n+        YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS);\n+        \n+        DateTime test = base.toDateTimeAtMidnight((DateTimeZone) null);\n+        check(base, 2005, 6, 9);\n+        assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateTimeAtCurrentTime() {\n+        YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n+        DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        \n+        DateTime test = base.toDateTimeAtCurrentTime();\n+        check(base, 2005, 6, 9);\n+        DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON);\n+        expected = expected.year().setCopy(2005);\n+        expected = expected.monthOfYear().setCopy(6);\n+        expected = expected.dayOfMonth().setCopy(9);\n+        assertEquals(expected, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateTimeAtCurrentTime_Zone() {\n+        YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n+        DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        \n+        DateTime test = base.toDateTimeAtCurrentTime(TOKYO);\n+        check(base, 2005, 6, 9);\n+        DateTime expected = new DateTime(dt.getMillis(), COPTIC_TOKYO);\n+        expected = expected.year().setCopy(2005);\n+        expected = expected.monthOfYear().setCopy(6);\n+        expected = expected.dayOfMonth().setCopy(9);\n+        assertEquals(expected, test);\n+    }\n+\n+    public void testToDateTimeAtCurrentTime_nullZone() {\n+        YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n+        DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        \n+        DateTime test = base.toDateTimeAtCurrentTime((DateTimeZone) null);\n+        check(base, 2005, 6, 9);\n+        DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON);\n+        expected = expected.year().setCopy(2005);\n+        expected = expected.monthOfYear().setCopy(6);\n+        expected = expected.dayOfMonth().setCopy(9);\n+        assertEquals(expected, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateTime_TOD() {\n+        YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n+        TimeOfDay tod = new TimeOfDay(12, 13, 14, 15, BUDDHIST_TOKYO);\n+        \n+        DateTime test = base.toDateTime(tod);\n+        check(base, 2005, 6, 9);\n+        DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_LONDON);\n+        assertEquals(expected, test);\n+    }\n+\n+    public void testToDateTime_nullTOD() {\n+        YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n+        long now = new DateTime(2004, 5, 8, 12, 13, 14, 15, COPTIC_LONDON).getMillis();\n+        DateTimeUtils.setCurrentMillisFixed(now);\n+        \n+        DateTime test = base.toDateTime((TimeOfDay) null);\n+        check(base, 2005, 6, 9);\n+        DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_LONDON);\n+        assertEquals(expected, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateTime_TOD_Zone() {\n+        YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n+        TimeOfDay tod = new TimeOfDay(12, 13, 14, 15, BUDDHIST_TOKYO);\n+        \n+        DateTime test = base.toDateTime(tod, TOKYO);\n+        check(base, 2005, 6, 9);\n+        DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_TOKYO);\n+        assertEquals(expected, test);\n+    }\n+\n+    public void testToDateTime_TOD_nullZone() {\n+        YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n+        TimeOfDay tod = new TimeOfDay(12, 13, 14, 15, BUDDHIST_TOKYO);\n+        \n+        DateTime test = base.toDateTime(tod, null);\n+        check(base, 2005, 6, 9);\n+        DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_LONDON);\n+        assertEquals(expected, test);\n+    }\n+\n+    public void testToDateTime_nullTOD_Zone() {\n+        YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n+        long now = new DateTime(2004, 5, 8, 12, 13, 14, 15, COPTIC_TOKYO).getMillis();\n+        DateTimeUtils.setCurrentMillisFixed(now);\n+        \n+        DateTime test = base.toDateTime((TimeOfDay) null, TOKYO);\n+        check(base, 2005, 6, 9);\n+        DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_TOKYO);\n+        assertEquals(expected, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateMidnight() {\n+        YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS);\n+        \n+        DateMidnight test = base.toDateMidnight();\n+        check(base, 2005, 6, 9);\n+        assertEquals(new DateMidnight(2005, 6, 9, COPTIC_LONDON), test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateMidnight_Zone() {\n+        YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS);\n+        \n+        DateMidnight test = base.toDateMidnight(TOKYO);\n+        check(base, 2005, 6, 9);\n+        assertEquals(new DateMidnight(2005, 6, 9, COPTIC_TOKYO), test);\n+    }\n+\n+    public void testToDateMidnight_nullZone() {\n+        YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS);\n+        \n+        DateMidnight test = base.toDateMidnight((DateTimeZone) null);\n+        check(base, 2005, 6, 9);\n+        assertEquals(new DateMidnight(2005, 6, 9, COPTIC_LONDON), test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateTime_RI() {\n+        YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS);\n+        DateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7);\n+        \n+        DateTime test = base.toDateTime(dt);\n+        check(base, 2005, 6, 9);\n+        DateTime expected = dt;\n+        expected = expected.year().setCopy(2005);\n+        expected = expected.monthOfYear().setCopy(6);\n+        expected = expected.dayOfMonth().setCopy(9);\n+        assertEquals(expected, test);\n+    }\n+\n+    public void testToDateTime_nullRI() {\n+        YearMonthDay base = new YearMonthDay(2005, 6, 9);\n+        DateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        \n+        DateTime test = base.toDateTime((ReadableInstant) null);\n+        check(base, 2005, 6, 9);\n+        DateTime expected = dt;\n+        expected = expected.year().setCopy(2005);\n+        expected = expected.monthOfYear().setCopy(6);\n+        expected = expected.dayOfMonth().setCopy(9);\n+        assertEquals(expected, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToInterval() {\n+        YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n+        Interval test = base.toInterval();\n+        check(base, 2005, 6, 9);\n+        DateTime start = base.toDateTime(TimeOfDay.MIDNIGHT);\n+        DateTime end = start.plus(Period.days(1));\n+        Interval expected = new Interval(start, end);\n+        assertEquals(expected, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToInterval_Zone() {\n+        YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n+        Interval test = base.toInterval(TOKYO);\n+        check(base, 2005, 6, 9);\n+        DateTime start = base.toDateTime(TimeOfDay.MIDNIGHT, TOKYO);\n+        DateTime end = start.plus(Period.days(1));\n+        Interval expected = new Interval(start, end);\n+        assertEquals(expected, test);\n+    }\n+\n+    public void testToInterval_nullZone() {\n+        YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n+        Interval test = base.toInterval(null);\n+        check(base, 2005, 6, 9);\n+        DateTime start = base.toDateTime(TimeOfDay.MIDNIGHT, LONDON);\n+        DateTime end = start.plus(Period.days(1));\n+        Interval expected = new Interval(start, end);\n+        assertEquals(expected, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithers() {\n+        YearMonthDay test = new YearMonthDay(1970, 6, 9);\n+        check(test.withYear(2000), 2000, 6, 9);\n+        check(test.withMonthOfYear(2), 1970, 2, 9);\n+        check(test.withDayOfMonth(2), 1970, 6, 2);\n+        try {\n+            test.withMonthOfYear(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.withMonthOfYear(13);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testProperty() {\n+        YearMonthDay test = new YearMonthDay(2005, 6, 9);\n+        assertEquals(test.year(), test.property(DateTimeFieldType.year()));\n+        assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear()));\n+        assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth()));\n+        try {\n+            test.property(DateTimeFieldType.millisOfDay());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.property(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9, COPTIC_PARIS);\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        YearMonthDay result = (YearMonthDay) ois.readObject();\n+        ois.close();\n+        \n+        assertEquals(test, result);\n+        assertTrue(Arrays.equals(test.getValues(), result.getValues()));\n+        assertTrue(Arrays.equals(test.getFields(), result.getFields()));\n+        assertEquals(test.getChronology(), result.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        YearMonthDay test = new YearMonthDay(2002, 6, 9);\n+        assertEquals(\"2002-06-09\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString_String() {\n+        YearMonthDay test = new YearMonthDay(2002, 6, 9);\n+        assertEquals(\"2002 \\ufffd\\ufffd\", test.toString(\"yyyy HH\"));\n+        assertEquals(\"2002-06-09\", test.toString((String) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString_String_Locale() {\n+        YearMonthDay test = new YearMonthDay(2002, 6, 9);\n+        assertEquals(\"\\ufffd 9/6\", test.toString(\"EEE d/M\", Locale.ENGLISH));\n+        assertEquals(\"\\ufffd 9/6\", test.toString(\"EEE d/M\", Locale.FRENCH));\n+        assertEquals(\"2002-06-09\", test.toString(null, Locale.ENGLISH));\n+        assertEquals(\"\\ufffd 9/6\", test.toString(\"EEE d/M\", null));\n+        assertEquals(\"2002-06-09\", test.toString(null, null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString_DTFormatter() {\n+        YearMonthDay test = new YearMonthDay(2002, 6, 9);\n+        assertEquals(\"2002 \\ufffd\\ufffd\", test.toString(DateTimeFormat.forPattern(\"yyyy HH\")));\n+        assertEquals(\"2002-06-09\", test.toString((DateTimeFormatter) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private void check(YearMonthDay test, int hour, int min, int sec) {\n+        assertEquals(hour, test.getYear());\n+        assertEquals(min, test.getMonthOfYear());\n+        assertEquals(sec, test.getDayOfMonth());\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestYearMonthDay_Constructors.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * This class is a Junit unit test for YearMonthDay.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestYearMonthDay_Constructors extends TestCase {\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n+    private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();\n+    private static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);\n+    \n+    private long TEST_TIME_NOW =\n+            (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    private long TEST_TIME1 =\n+        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private long TEST_TIME2 =\n+        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestYearMonthDay_Constructors.class);\n+    }\n+\n+    public TestYearMonthDay_Constructors(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_FromCalendarFields() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n+        cal.set(Calendar.MILLISECOND, 7);\n+        YearMonthDay expected = new YearMonthDay(1970, 2, 3);\n+        assertEquals(expected, YearMonthDay.fromCalendarFields(cal));\n+        try {\n+            YearMonthDay.fromCalendarFields(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_FromDateFields() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n+        cal.set(Calendar.MILLISECOND, 7);\n+        YearMonthDay expected = new YearMonthDay(1970, 2, 3);\n+        assertEquals(expected, YearMonthDay.fromDateFields(cal.getTime()));\n+        try {\n+            YearMonthDay.fromDateFields(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor ()\n+     */\n+    public void testConstructor() throws Throwable {\n+        YearMonthDay test = new YearMonthDay();\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (DateTimeZone)\n+     */\n+    public void testConstructor_DateTimeZone() throws Throwable {\n+        DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        // 23:59 in London is 00:59 the following day in Paris\n+        \n+        YearMonthDay test = new YearMonthDay(LONDON);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(2005, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(8, test.getDayOfMonth());\n+        \n+        test = new YearMonthDay(PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(2005, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (DateTimeZone=null)\n+     */\n+    public void testConstructor_nullDateTimeZone() throws Throwable {\n+        DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        // 23:59 in London is 00:59 the following day in Paris\n+        \n+        YearMonthDay test = new YearMonthDay((DateTimeZone) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(2005, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(8, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (Chronology)\n+     */\n+    public void testConstructor_Chronology() throws Throwable {\n+        YearMonthDay test = new YearMonthDay(GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (Chronology=null)\n+     */\n+    public void testConstructor_nullChronology() throws Throwable {\n+        YearMonthDay test = new YearMonthDay((Chronology) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (long)\n+     */\n+    public void testConstructor_long1() throws Throwable {\n+        YearMonthDay test = new YearMonthDay(TEST_TIME1);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (long)\n+     */\n+    public void testConstructor_long2() throws Throwable {\n+        YearMonthDay test = new YearMonthDay(TEST_TIME2);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1971, test.getYear());\n+        assertEquals(5, test.getMonthOfYear());\n+        assertEquals(7, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (long, Chronology)\n+     */\n+    public void testConstructor_long1_Chronology() throws Throwable {\n+        YearMonthDay test = new YearMonthDay(TEST_TIME1, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (long, Chronology)\n+     */\n+    public void testConstructor_long2_Chronology() throws Throwable {\n+        YearMonthDay test = new YearMonthDay(TEST_TIME2, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1971, test.getYear());\n+        assertEquals(5, test.getMonthOfYear());\n+        assertEquals(7, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (long, Chronology=null)\n+     */\n+    public void testConstructor_long_nullChronology() throws Throwable {\n+        YearMonthDay test = new YearMonthDay(TEST_TIME1, null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_Object() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        YearMonthDay test = new YearMonthDay(date);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_nullObject() throws Throwable {\n+        YearMonthDay test = new YearMonthDay((Object) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_ObjectString1() throws Throwable {\n+        YearMonthDay test = new YearMonthDay(\"1972-12-03\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1972, test.getYear());\n+        assertEquals(12, test.getMonthOfYear());\n+        assertEquals(3, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_ObjectString2() throws Throwable {\n+        YearMonthDay test = new YearMonthDay(\"1972-12-03T+14:00\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1972, test.getYear());\n+        assertEquals(12, test.getMonthOfYear());\n+        assertEquals(2, test.getDayOfMonth());  // timezone\n+    }\n+\n+    public void testConstructor_ObjectString3() throws Throwable {\n+        YearMonthDay test = new YearMonthDay(\"1972-12-03T10:20:30.040\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1972, test.getYear());\n+        assertEquals(12, test.getMonthOfYear());\n+        assertEquals(3, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_ObjectString4() throws Throwable {\n+        YearMonthDay test = new YearMonthDay(\"1972-12-03T10:20:30.040+14:00\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1972, test.getYear());\n+        assertEquals(12, test.getMonthOfYear());\n+        assertEquals(2, test.getDayOfMonth());  // timezone\n+    }\n+\n+    public void testConstructor_ObjectString5() throws Throwable {\n+        YearMonthDay test = new YearMonthDay(\"10\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10, test.getYear());\n+        assertEquals(1, test.getMonthOfYear());\n+        assertEquals(1, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_ObjectStringEx1() throws Throwable {\n+        try {\n+            new YearMonthDay(\"T10:20:30.040\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testConstructor_ObjectStringEx2() throws Throwable {\n+        try {\n+            new YearMonthDay(\"T10:20:30.040+14:00\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testConstructor_ObjectStringEx3() throws Throwable {\n+        try {\n+            new YearMonthDay(\"10:20:30.040\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testConstructor_ObjectStringEx4() throws Throwable {\n+        try {\n+            new YearMonthDay(\"10:20:30.040+14:00\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (Object, Chronology)\n+     */\n+    public void testConstructor_Object_Chronology() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        YearMonthDay test = new YearMonthDay(date, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (Object=null, Chronology)\n+     */\n+    public void testConstructor_nullObject_Chronology() throws Throwable {\n+        YearMonthDay test = new YearMonthDay((Object) null, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (Object, Chronology=null)\n+     */\n+    public void testConstructor_Object_nullChronology() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        YearMonthDay test = new YearMonthDay(date, null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (Object=null, Chronology=null)\n+     */\n+    public void testConstructor_nullObject_nullChronology() throws Throwable {\n+        YearMonthDay test = new YearMonthDay((Object) null, null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (int, int, int)\n+     */\n+    public void testConstructor_int_int_int() throws Throwable {\n+        YearMonthDay test = new YearMonthDay(1970, 6, 9);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        try {\n+            new YearMonthDay(Integer.MIN_VALUE, 6, 9);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new YearMonthDay(Integer.MAX_VALUE, 6, 9);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new YearMonthDay(1970, 0, 9);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new YearMonthDay(1970, 13, 9);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new YearMonthDay(1970, 6, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new YearMonthDay(1970, 6, 31);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        new YearMonthDay(1970, 7, 31);\n+        try {\n+            new YearMonthDay(1970, 7, 32);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, Chronology)\n+     */\n+    public void testConstructor_int_int_int_Chronology() throws Throwable {\n+        YearMonthDay test = new YearMonthDay(1970, 6, 9, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        try {\n+            new YearMonthDay(Integer.MIN_VALUE, 6, 9, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new YearMonthDay(Integer.MAX_VALUE, 6, 9, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new YearMonthDay(1970, 0, 9, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new YearMonthDay(1970, 13, 9, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new YearMonthDay(1970, 6, 0, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new YearMonthDay(1970, 6, 31, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        new YearMonthDay(1970, 7, 31, GREGORIAN_PARIS);\n+        try {\n+            new YearMonthDay(1970, 7, 32, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, Chronology=null)\n+     */\n+    public void testConstructor_int_int_int_nullChronology() throws Throwable {\n+        YearMonthDay test = new YearMonthDay(1970, 6, 9, null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestYearMonthDay_Properties.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.LenientChronology;\n+import org.joda.time.chrono.StrictChronology;\n+\n+/**\n+ * This class is a Junit unit test for YearMonthDay.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestYearMonthDay_Properties extends TestCase {\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+\n+    private long TEST_TIME_NOW =\n+            (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    private long TEST_TIME1 =\n+        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private long TEST_TIME2 =\n+        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestYearMonthDay_Properties.class);\n+    }\n+\n+    public TestYearMonthDay_Properties(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetYear() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        assertSame(test.getChronology().year(), test.year().getField());\n+        assertEquals(\"year\", test.year().getName());\n+        assertEquals(\"Property[year]\", test.year().toString());\n+        assertSame(test, test.year().getReadablePartial());\n+        assertSame(test, test.year().getYearMonthDay());\n+        assertEquals(1972, test.year().get());\n+        assertEquals(\"1972\", test.year().getAsString());\n+        assertEquals(\"1972\", test.year().getAsText());\n+        assertEquals(\"1972\", test.year().getAsText(Locale.FRENCH));\n+        assertEquals(\"1972\", test.year().getAsShortText());\n+        assertEquals(\"1972\", test.year().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().years(), test.year().getDurationField());\n+        assertEquals(null, test.year().getRangeDurationField());\n+        assertEquals(9, test.year().getMaximumTextLength(null));\n+        assertEquals(9, test.year().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesYear() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        assertEquals(-292275054, test.year().getMinimumValue());\n+        assertEquals(-292275054, test.year().getMinimumValueOverall());\n+        assertEquals(292278993, test.year().getMaximumValue());\n+        assertEquals(292278993, test.year().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyAddYear() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        YearMonthDay copy = test.year().addToCopy(9);\n+        check(test, 1972, 6, 9);\n+        check(copy, 1981, 6, 9);\n+        \n+        copy = test.year().addToCopy(0);\n+        check(copy, 1972, 6, 9);\n+        \n+        copy = test.year().addToCopy(292277023 - 1972);\n+        check(copy, 292277023, 6, 9);\n+        \n+        try {\n+            test.year().addToCopy(292278993 - 1972 + 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 1972, 6, 9);\n+        \n+        copy = test.year().addToCopy(-1972);\n+        check(copy, 0, 6, 9);\n+        \n+        copy = test.year().addToCopy(-1973);\n+        check(copy, -1, 6, 9);\n+        \n+        try {\n+            test.year().addToCopy(-292275054 - 1972 - 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 1972, 6, 9);\n+    }\n+\n+    public void testPropertyAddWrapFieldYear() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        YearMonthDay copy = test.year().addWrapFieldToCopy(9);\n+        check(test, 1972, 6, 9);\n+        check(copy, 1981, 6, 9);\n+        \n+        copy = test.year().addWrapFieldToCopy(0);\n+        check(copy, 1972, 6, 9);\n+        \n+        copy = test.year().addWrapFieldToCopy(292278993 - 1972 + 1);\n+        check(copy, -292275054, 6, 9);\n+        \n+        copy = test.year().addWrapFieldToCopy(-292275054 - 1972 - 1);\n+        check(copy, 292278993, 6, 9);\n+    }\n+\n+    public void testPropertySetYear() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        YearMonthDay copy = test.year().setCopy(12);\n+        check(test, 1972, 6, 9);\n+        check(copy, 12, 6, 9);\n+    }\n+\n+    public void testPropertySetTextYear() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        YearMonthDay copy = test.year().setCopy(\"12\");\n+        check(test, 1972, 6, 9);\n+        check(copy, 12, 6, 9);\n+    }\n+\n+    public void testPropertyCompareToYear() {\n+        YearMonthDay test1 = new YearMonthDay(TEST_TIME1);\n+        YearMonthDay test2 = new YearMonthDay(TEST_TIME2);\n+        assertEquals(true, test1.year().compareTo(test2) < 0);\n+        assertEquals(true, test2.year().compareTo(test1) > 0);\n+        assertEquals(true, test1.year().compareTo(test1) == 0);\n+        try {\n+            test1.year().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.year().compareTo(dt2) < 0);\n+        assertEquals(true, test2.year().compareTo(dt1) > 0);\n+        assertEquals(true, test1.year().compareTo(dt1) == 0);\n+        try {\n+            test1.year().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMonth() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField());\n+        assertEquals(\"monthOfYear\", test.monthOfYear().getName());\n+        assertEquals(\"Property[monthOfYear]\", test.monthOfYear().toString());\n+        assertSame(test, test.monthOfYear().getReadablePartial());\n+        assertSame(test, test.monthOfYear().getYearMonthDay());\n+        assertEquals(6, test.monthOfYear().get());\n+        assertEquals(\"6\", test.monthOfYear().getAsString());\n+        assertEquals(\"June\", test.monthOfYear().getAsText());\n+        assertEquals(\"juin\", test.monthOfYear().getAsText(Locale.FRENCH));\n+        assertEquals(\"Jun\", test.monthOfYear().getAsShortText());\n+        assertEquals(\"juin\", test.monthOfYear().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField());\n+        assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField());\n+        assertEquals(9, test.monthOfYear().getMaximumTextLength(null));\n+        assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null));\n+        test = new YearMonthDay(1972, 7, 9);\n+        assertEquals(\"juillet\", test.monthOfYear().getAsText(Locale.FRENCH));\n+        assertEquals(\"juil.\", test.monthOfYear().getAsShortText(Locale.FRENCH));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesMonth() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        assertEquals(1, test.monthOfYear().getMinimumValue());\n+        assertEquals(1, test.monthOfYear().getMinimumValueOverall());\n+        assertEquals(12, test.monthOfYear().getMaximumValue());\n+        assertEquals(12, test.monthOfYear().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyAddMonth() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        YearMonthDay copy = test.monthOfYear().addToCopy(6);\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 12, 9);\n+        \n+        copy = test.monthOfYear().addToCopy(7);\n+        check(copy, 1973, 1, 9);\n+        \n+        copy = test.monthOfYear().addToCopy(-5);\n+        check(copy, 1972, 1, 9);\n+        \n+        copy = test.monthOfYear().addToCopy(-6);\n+        check(copy, 1971, 12, 9);\n+        \n+        test = new YearMonthDay(1972, 1, 31);\n+        copy = test.monthOfYear().addToCopy(1);\n+        check(copy, 1972, 2, 29);\n+        \n+        copy = test.monthOfYear().addToCopy(2);\n+        check(copy, 1972, 3, 31);\n+        \n+        copy = test.monthOfYear().addToCopy(3);\n+        check(copy, 1972, 4, 30);\n+        \n+        test = new YearMonthDay(1971, 1, 31);\n+        copy = test.monthOfYear().addToCopy(1);\n+        check(copy, 1971, 2, 28);\n+    }\n+\n+    public void testPropertyAddWrapFieldMonth() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        YearMonthDay copy = test.monthOfYear().addWrapFieldToCopy(4);\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 10, 9);\n+        \n+        copy = test.monthOfYear().addWrapFieldToCopy(8);\n+        check(copy, 1972, 2, 9);\n+        \n+        copy = test.monthOfYear().addWrapFieldToCopy(-8);\n+        check(copy, 1972, 10, 9);\n+        \n+        test = new YearMonthDay(1972, 1, 31);\n+        copy = test.monthOfYear().addWrapFieldToCopy(1);\n+        check(copy, 1972, 2, 29);\n+        \n+        copy = test.monthOfYear().addWrapFieldToCopy(2);\n+        check(copy, 1972, 3, 31);\n+        \n+        copy = test.monthOfYear().addWrapFieldToCopy(3);\n+        check(copy, 1972, 4, 30);\n+        \n+        test = new YearMonthDay(1971, 1, 31);\n+        copy = test.monthOfYear().addWrapFieldToCopy(1);\n+        check(copy, 1971, 2, 28);\n+    }\n+\n+    public void testPropertySetMonth() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        YearMonthDay copy = test.monthOfYear().setCopy(12);\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 12, 9);\n+        \n+        test = new YearMonthDay(1972, 1, 31);\n+        copy = test.monthOfYear().setCopy(2);\n+        check(copy, 1972, 2, 29);\n+        \n+        try {\n+            test.monthOfYear().setCopy(13);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.monthOfYear().setCopy(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextMonth() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        YearMonthDay copy = test.monthOfYear().setCopy(\"12\");\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 12, 9);\n+        \n+        copy = test.monthOfYear().setCopy(\"December\");\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 12, 9);\n+        \n+        copy = test.monthOfYear().setCopy(\"Dec\");\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 12, 9);\n+    }\n+\n+    public void testPropertyCompareToMonth() {\n+        YearMonthDay test1 = new YearMonthDay(TEST_TIME1);\n+        YearMonthDay test2 = new YearMonthDay(TEST_TIME2);\n+        assertEquals(true, test1.monthOfYear().compareTo(test2) < 0);\n+        assertEquals(true, test2.monthOfYear().compareTo(test1) > 0);\n+        assertEquals(true, test1.monthOfYear().compareTo(test1) == 0);\n+        try {\n+            test1.monthOfYear().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0);\n+        assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0);\n+        assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0);\n+        try {\n+            test1.monthOfYear().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetDay() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField());\n+        assertEquals(\"dayOfMonth\", test.dayOfMonth().getName());\n+        assertEquals(\"Property[dayOfMonth]\", test.dayOfMonth().toString());\n+        assertSame(test, test.dayOfMonth().getReadablePartial());\n+        assertSame(test, test.dayOfMonth().getYearMonthDay());\n+        assertEquals(9, test.dayOfMonth().get());\n+        assertEquals(\"9\", test.dayOfMonth().getAsString());\n+        assertEquals(\"9\", test.dayOfMonth().getAsText());\n+        assertEquals(\"9\", test.dayOfMonth().getAsText(Locale.FRENCH));\n+        assertEquals(\"9\", test.dayOfMonth().getAsShortText());\n+        assertEquals(\"9\", test.dayOfMonth().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField());\n+        assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField());\n+        assertEquals(2, test.dayOfMonth().getMaximumTextLength(null));\n+        assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesDay() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        assertEquals(1, test.dayOfMonth().getMinimumValue());\n+        assertEquals(1, test.dayOfMonth().getMinimumValueOverall());\n+        assertEquals(30, test.dayOfMonth().getMaximumValue());\n+        assertEquals(31, test.dayOfMonth().getMaximumValueOverall());\n+        test = new YearMonthDay(1972, 7, 9);\n+        assertEquals(31, test.dayOfMonth().getMaximumValue());\n+        test = new YearMonthDay(1972, 2, 9);\n+        assertEquals(29, test.dayOfMonth().getMaximumValue());\n+        test = new YearMonthDay(1971, 2, 9);\n+        assertEquals(28, test.dayOfMonth().getMaximumValue());\n+    }\n+\n+    public void testPropertyAddDay() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        YearMonthDay copy = test.dayOfMonth().addToCopy(9);\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 6, 18);\n+        \n+        copy = test.dayOfMonth().addToCopy(21);\n+        check(copy, 1972, 6, 30);\n+        \n+        copy = test.dayOfMonth().addToCopy(22);\n+        check(copy, 1972, 7, 1);\n+        \n+        copy = test.dayOfMonth().addToCopy(22 + 30);\n+        check(copy, 1972, 7, 31);\n+        \n+        copy = test.dayOfMonth().addToCopy(22 + 31);\n+        check(copy, 1972, 8, 1);\n+\n+        copy = test.dayOfMonth().addToCopy(21 + 31 + 31 + 30 + 31 + 30 + 31);\n+        check(copy, 1972, 12, 31);\n+        \n+        copy = test.dayOfMonth().addToCopy(22 + 31 + 31 + 30 + 31 + 30 + 31);\n+        check(copy, 1973, 1, 1);\n+        \n+        copy = test.dayOfMonth().addToCopy(-8);\n+        check(copy, 1972, 6, 1);\n+        \n+        copy = test.dayOfMonth().addToCopy(-9);\n+        check(copy, 1972, 5, 31);\n+        \n+        copy = test.dayOfMonth().addToCopy(-8 - 31 - 30 - 31 - 29 - 31);\n+        check(copy, 1972, 1, 1);\n+        \n+        copy = test.dayOfMonth().addToCopy(-9 - 31 - 30 - 31 - 29 - 31);\n+        check(copy, 1971, 12, 31);\n+    }\n+\n+    public void testPropertyAddWrapFieldDay() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        YearMonthDay copy = test.dayOfMonth().addWrapFieldToCopy(21);\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 6, 30);\n+        \n+        copy = test.dayOfMonth().addWrapFieldToCopy(22);\n+        check(copy, 1972, 6, 1);\n+        \n+        copy = test.dayOfMonth().addWrapFieldToCopy(-12);\n+        check(copy, 1972, 6, 27);\n+        \n+        test = new YearMonthDay(1972, 7, 9);\n+        copy = test.dayOfMonth().addWrapFieldToCopy(21);\n+        check(copy, 1972, 7, 30);\n+    \n+        copy = test.dayOfMonth().addWrapFieldToCopy(22);\n+        check(copy, 1972, 7, 31);\n+    \n+        copy = test.dayOfMonth().addWrapFieldToCopy(23);\n+        check(copy, 1972, 7, 1);\n+    \n+        copy = test.dayOfMonth().addWrapFieldToCopy(-12);\n+        check(copy, 1972, 7, 28);\n+    }\n+\n+    public void testPropertySetDay() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        YearMonthDay copy = test.dayOfMonth().setCopy(12);\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 6, 12);\n+        \n+        try {\n+            test.dayOfMonth().setCopy(31);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.dayOfMonth().setCopy(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextDay() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        YearMonthDay copy = test.dayOfMonth().setCopy(\"12\");\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 6, 12);\n+    }\n+\n+    public void testPropertyWithMaximumValueDayOfMonth() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        YearMonthDay copy = test.dayOfMonth().withMaximumValue();\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 6, 30);\n+    }\n+\n+    public void testPropertyWithMinimumValueDayOfMonth() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        YearMonthDay copy = test.dayOfMonth().withMinimumValue();\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 6, 1);\n+    }\n+\n+    public void testPropertyCompareToDay() {\n+        YearMonthDay test1 = new YearMonthDay(TEST_TIME1);\n+        YearMonthDay test2 = new YearMonthDay(TEST_TIME2);\n+        assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0);\n+        assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0);\n+        assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0);\n+        try {\n+            test1.dayOfMonth().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0);\n+        assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0);\n+        assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0);\n+        try {\n+            test1.dayOfMonth().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertyEquals() {\n+        YearMonthDay test1 = new YearMonthDay(2005, 11, 8);\n+        YearMonthDay test2 = new YearMonthDay(2005, 11, 9);\n+        YearMonthDay test3 = new YearMonthDay(2005, 11, 8, CopticChronology.getInstanceUTC());\n+        assertEquals(false, test1.dayOfMonth().equals(test1.year()));\n+        assertEquals(false, test1.dayOfMonth().equals(test1.monthOfYear()));\n+        assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));\n+        assertEquals(false, test1.dayOfMonth().equals(test2.year()));\n+        assertEquals(false, test1.dayOfMonth().equals(test2.monthOfYear()));\n+        assertEquals(false, test1.dayOfMonth().equals(test2.dayOfMonth()));\n+        \n+        assertEquals(false, test1.monthOfYear().equals(test1.year()));\n+        assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear()));\n+        assertEquals(false, test1.monthOfYear().equals(test1.dayOfMonth()));\n+        assertEquals(false, test1.monthOfYear().equals(test2.year()));\n+        assertEquals(true, test1.monthOfYear().equals(test2.monthOfYear()));\n+        assertEquals(false, test1.monthOfYear().equals(test2.dayOfMonth()));\n+        \n+        assertEquals(false, test1.dayOfMonth().equals(null));\n+        assertEquals(false, test1.dayOfMonth().equals(\"any\"));\n+        \n+        // chrono\n+        assertEquals(false, test1.dayOfMonth().equals(test3.dayOfMonth()));\n+    }\n+\n+    public void testPropertyHashCode() {\n+        YearMonthDay test1 = new YearMonthDay(2005, 11, 8);\n+        YearMonthDay test2 = new YearMonthDay(2005, 11, 9);\n+        assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());\n+        assertEquals(false, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());\n+        assertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode());\n+        assertEquals(true, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode());\n+    }\n+\n+    public void testPropertyEqualsHashCodeLenient() {\n+        YearMonthDay test1 = new YearMonthDay(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS));\n+        YearMonthDay test2 = new YearMonthDay(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS));\n+        assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth()));\n+        assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth()));\n+        assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));\n+        assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth()));\n+        assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());\n+        assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());\n+        assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());\n+    }\n+\n+    public void testPropertyEqualsHashCodeStrict() {\n+        YearMonthDay test1 = new YearMonthDay(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS));\n+        YearMonthDay test2 = new YearMonthDay(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS));\n+        assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth()));\n+        assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth()));\n+        assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));\n+        assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth()));\n+        assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());\n+        assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());\n+        assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private void check(YearMonthDay test, int year, int month, int day) {\n+        assertEquals(year, test.getYear());\n+        assertEquals(month, test.getMonthOfYear());\n+        assertEquals(day, test.getDayOfMonth());\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestYearMonth_Basics.java\n+/*\n+ *  Copyright 2001-2009 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Arrays;\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n+\n+/**\n+ * This class is a Junit unit test for YearMonth.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestYearMonth_Basics extends TestCase {\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+    private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);\n+    private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);\n+    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+//    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+//    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n+//    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);\n+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+//    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n+//    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);\n+    private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);\n+    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n+    \n+    private long TEST_TIME_NOW =\n+            (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+\n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestYearMonth_Basics.class);\n+    }\n+\n+    public TestYearMonth_Basics(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGet() {\n+        YearMonth test = new YearMonth();\n+        assertEquals(1970, test.get(DateTimeFieldType.year()));\n+        assertEquals(6, test.get(DateTimeFieldType.monthOfYear()));\n+        try {\n+            test.get(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.get(DateTimeFieldType.dayOfMonth());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testSize() {\n+        YearMonth test = new YearMonth();\n+        assertEquals(2, test.size());\n+    }\n+\n+    public void testGetFieldType() {\n+        YearMonth test = new YearMonth(COPTIC_PARIS);\n+        assertSame(DateTimeFieldType.year(), test.getFieldType(0));\n+        assertSame(DateTimeFieldType.monthOfYear(), test.getFieldType(1));\n+        try {\n+            test.getFieldType(-1);\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            test.getFieldType(2);\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testGetFieldTypes() {\n+        YearMonth test = new YearMonth(COPTIC_PARIS);\n+        DateTimeFieldType[] fields = test.getFieldTypes();\n+        assertEquals(2, fields.length);\n+        assertSame(DateTimeFieldType.year(), fields[0]);\n+        assertSame(DateTimeFieldType.monthOfYear(), fields[1]);\n+        assertNotSame(test.getFieldTypes(), test.getFieldTypes());\n+    }\n+\n+    public void testGetField() {\n+        YearMonth test = new YearMonth(COPTIC_PARIS);\n+        assertSame(COPTIC_UTC.year(), test.getField(0));\n+        assertSame(COPTIC_UTC.monthOfYear(), test.getField(1));\n+        try {\n+            test.getField(-1);\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            test.getField(2);\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testGetFields() {\n+        YearMonth test = new YearMonth(COPTIC_PARIS);\n+        DateTimeField[] fields = test.getFields();\n+        assertEquals(2, fields.length);\n+        assertSame(COPTIC_UTC.year(), fields[0]);\n+        assertSame(COPTIC_UTC.monthOfYear(), fields[1]);\n+        assertNotSame(test.getFields(), test.getFields());\n+    }\n+\n+    public void testGetValue() {\n+        YearMonth test = new YearMonth();\n+        assertEquals(1970, test.getValue(0));\n+        assertEquals(6, test.getValue(1));\n+        try {\n+            test.getValue(-1);\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            test.getValue(2);\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testGetValues() {\n+        YearMonth test = new YearMonth();\n+        int[] values = test.getValues();\n+        assertEquals(2, values.length);\n+        assertEquals(1970, values[0]);\n+        assertEquals(6, values[1]);\n+        assertNotSame(test.getValues(), test.getValues());\n+    }\n+\n+    public void testIsSupported() {\n+        YearMonth test = new YearMonth(COPTIC_PARIS);\n+        assertEquals(true, test.isSupported(DateTimeFieldType.year()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear()));\n+        assertEquals(false, test.isSupported(DateTimeFieldType.dayOfMonth()));\n+        assertEquals(false, test.isSupported(DateTimeFieldType.hourOfDay()));\n+    }\n+\n+    public void testEqualsHashCode() {\n+        YearMonth test1 = new YearMonth(1970, 6, COPTIC_PARIS);\n+        YearMonth test2 = new YearMonth(1970, 6, COPTIC_PARIS);\n+        assertEquals(true, test1.equals(test2));\n+        assertEquals(true, test2.equals(test1));\n+        assertEquals(true, test1.equals(test1));\n+        assertEquals(true, test2.equals(test2));\n+        assertEquals(true, test1.hashCode() == test2.hashCode());\n+        assertEquals(true, test1.hashCode() == test1.hashCode());\n+        assertEquals(true, test2.hashCode() == test2.hashCode());\n+        \n+        YearMonth test3 = new YearMonth(1971, 6);\n+        assertEquals(false, test1.equals(test3));\n+        assertEquals(false, test2.equals(test3));\n+        assertEquals(false, test3.equals(test1));\n+        assertEquals(false, test3.equals(test2));\n+        assertEquals(false, test1.hashCode() == test3.hashCode());\n+        assertEquals(false, test2.hashCode() == test3.hashCode());\n+        \n+        assertEquals(false, test1.equals(\"Hello\"));\n+        assertEquals(true, test1.equals(new MockYM()));\n+        assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE));\n+    }\n+    \n+    class MockYM extends MockPartial {\n+        public Chronology getChronology() {\n+            return COPTIC_UTC;\n+        }\n+        public DateTimeField[] getFields() {\n+            return new DateTimeField[] {\n+                COPTIC_UTC.year(),\n+                COPTIC_UTC.monthOfYear(),\n+            };\n+        }\n+        public int[] getValues() {\n+            return new int[] {1970, 6};\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testCompareTo() {\n+        YearMonth test1 = new YearMonth(2005, 6);\n+        YearMonth test1a = new YearMonth(2005, 6);\n+        assertEquals(0, test1.compareTo(test1a));\n+        assertEquals(0, test1a.compareTo(test1));\n+        assertEquals(0, test1.compareTo(test1));\n+        assertEquals(0, test1a.compareTo(test1a));\n+        \n+        YearMonth test2 = new YearMonth(2005, 7);\n+        assertEquals(-1, test1.compareTo(test2));\n+        assertEquals(+1, test2.compareTo(test1));\n+        \n+        YearMonth test3 = new YearMonth(2005, 7, GregorianChronology.getInstanceUTC());\n+        assertEquals(-1, test1.compareTo(test3));\n+        assertEquals(+1, test3.compareTo(test1));\n+        assertEquals(0, test3.compareTo(test2));\n+        \n+        DateTimeFieldType[] types = new DateTimeFieldType[] {\n+            DateTimeFieldType.year(),\n+            DateTimeFieldType.monthOfYear(),\n+        };\n+        int[] values = new int[] {2005, 6};\n+        Partial p = new Partial(types, values);\n+        assertEquals(0, test1.compareTo(p));\n+        try {\n+            test1.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+        try {\n+            test1.compareTo(new LocalTime());\n+            fail();\n+        } catch (ClassCastException ex) {}\n+        Partial partial = new Partial()\n+            .with(DateTimeFieldType.centuryOfEra(), 1)\n+            .with(DateTimeFieldType.halfdayOfDay(), 0)\n+            .with(DateTimeFieldType.dayOfMonth(), 9);\n+        try {\n+            new YearMonth(1970, 6).compareTo(partial);\n+            fail();\n+        } catch (ClassCastException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsEqual_YM() {\n+        YearMonth test1 = new YearMonth(2005, 6);\n+        YearMonth test1a = new YearMonth(2005, 6);\n+        assertEquals(true, test1.isEqual(test1a));\n+        assertEquals(true, test1a.isEqual(test1));\n+        assertEquals(true, test1.isEqual(test1));\n+        assertEquals(true, test1a.isEqual(test1a));\n+        \n+        YearMonth test2 = new YearMonth(2005, 7);\n+        assertEquals(false, test1.isEqual(test2));\n+        assertEquals(false, test2.isEqual(test1));\n+        \n+        YearMonth test3 = new YearMonth(2005, 7, GregorianChronology.getInstanceUTC());\n+        assertEquals(false, test1.isEqual(test3));\n+        assertEquals(false, test3.isEqual(test1));\n+        assertEquals(true, test3.isEqual(test2));\n+        \n+        try {\n+            new YearMonth(2005, 7).isEqual(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsBefore_YM() {\n+        YearMonth test1 = new YearMonth(2005, 6);\n+        YearMonth test1a = new YearMonth(2005, 6);\n+        assertEquals(false, test1.isBefore(test1a));\n+        assertEquals(false, test1a.isBefore(test1));\n+        assertEquals(false, test1.isBefore(test1));\n+        assertEquals(false, test1a.isBefore(test1a));\n+        \n+        YearMonth test2 = new YearMonth(2005, 7);\n+        assertEquals(true, test1.isBefore(test2));\n+        assertEquals(false, test2.isBefore(test1));\n+        \n+        YearMonth test3 = new YearMonth(2005, 7, GregorianChronology.getInstanceUTC());\n+        assertEquals(true, test1.isBefore(test3));\n+        assertEquals(false, test3.isBefore(test1));\n+        assertEquals(false, test3.isBefore(test2));\n+        \n+        try {\n+            new YearMonth(2005, 7).isBefore(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsAfter_YM() {\n+        YearMonth test1 = new YearMonth(2005, 6);\n+        YearMonth test1a = new YearMonth(2005, 6);\n+        assertEquals(false, test1.isAfter(test1a));\n+        assertEquals(false, test1a.isAfter(test1));\n+        assertEquals(false, test1.isAfter(test1));\n+        assertEquals(false, test1a.isAfter(test1a));\n+        \n+        YearMonth test2 = new YearMonth(2005, 7);\n+        assertEquals(false, test1.isAfter(test2));\n+        assertEquals(true, test2.isAfter(test1));\n+        \n+        YearMonth test3 = new YearMonth(2005, 7, GregorianChronology.getInstanceUTC());\n+        assertEquals(false, test1.isAfter(test3));\n+        assertEquals(true, test3.isAfter(test1));\n+        assertEquals(false, test3.isAfter(test2));\n+        \n+        try {\n+            new YearMonth(2005, 7).isAfter(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testWithChronologyRetainFields_Chrono() {\n+        YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS);\n+        YearMonth test = base.withChronologyRetainFields(BUDDHIST_TOKYO);\n+        check(base, 2005, 6);\n+        assertEquals(COPTIC_UTC, base.getChronology());\n+        check(test, 2005, 6);\n+        assertEquals(BUDDHIST_UTC, test.getChronology());\n+    }\n+\n+    public void testWithChronologyRetainFields_sameChrono() {\n+        YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS);\n+        YearMonth test = base.withChronologyRetainFields(COPTIC_TOKYO);\n+        assertSame(base, test);\n+    }\n+\n+    public void testWithChronologyRetainFields_nullChrono() {\n+        YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS);\n+        YearMonth test = base.withChronologyRetainFields(null);\n+        check(base, 2005, 6);\n+        assertEquals(COPTIC_UTC, base.getChronology());\n+        check(test, 2005, 6);\n+        assertEquals(ISO_UTC, test.getChronology());\n+    }\n+\n+    public void testWithChronologyRetainFields_invalidInNewChrono() {\n+        YearMonth base = new YearMonth(2005, 13, COPTIC_UTC);\n+        try {\n+            base.withChronologyRetainFields(ISO_UTC);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithField() {\n+        YearMonth test = new YearMonth(2004, 6);\n+        YearMonth result = test.withField(DateTimeFieldType.year(), 2006);\n+        \n+        assertEquals(new YearMonth(2004, 6), test);\n+        assertEquals(new YearMonth(2006, 6), result);\n+    }\n+\n+    public void testWithField_nullField() {\n+        YearMonth test = new YearMonth(2004, 6);\n+        try {\n+            test.withField(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithField_unknownField() {\n+        YearMonth test = new YearMonth(2004, 6);\n+        try {\n+            test.withField(DateTimeFieldType.hourOfDay(), 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithField_same() {\n+        YearMonth test = new YearMonth(2004, 6);\n+        YearMonth result = test.withField(DateTimeFieldType.year(), 2004);\n+        assertEquals(new YearMonth(2004, 6), test);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithFieldAdded() {\n+        YearMonth test = new YearMonth(2004, 6);\n+        YearMonth result = test.withFieldAdded(DurationFieldType.years(), 6);\n+        \n+        assertEquals(new YearMonth(2004, 6), test);\n+        assertEquals(new YearMonth(2010, 6), result);\n+    }\n+\n+    public void testWithFieldAdded_nullField_zero() {\n+        YearMonth test = new YearMonth(2004, 6);\n+        try {\n+            test.withFieldAdded(null, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded_nullField_nonZero() {\n+        YearMonth test = new YearMonth(2004, 6);\n+        try {\n+            test.withFieldAdded(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded_zero() {\n+        YearMonth test = new YearMonth(2004, 6);\n+        YearMonth result = test.withFieldAdded(DurationFieldType.years(), 0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testWithFieldAdded_unknownField() {\n+        YearMonth test = new YearMonth(2004, 6);\n+        try {\n+            test.withFieldAdded(DurationFieldType.hours(), 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPlus_RP() {\n+        YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance());\n+        YearMonth result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8));\n+        YearMonth expected = new YearMonth(2003, 7, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plus((ReadablePeriod) null);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusYears_int() {\n+        YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance());\n+        YearMonth result = test.plusYears(1);\n+        YearMonth expected = new YearMonth(2003, 5, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plusYears(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusMonths_int() {\n+        YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance());\n+        YearMonth result = test.plusMonths(1);\n+        YearMonth expected = new YearMonth(2002, 6, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plusMonths(0);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMinus_RP() {\n+        YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance());\n+        YearMonth result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));\n+        YearMonth expected = new YearMonth(2001, 4, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minus((ReadablePeriod) null);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusYears_int() {\n+        YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance());\n+        YearMonth result = test.minusYears(1);\n+        YearMonth expected = new YearMonth(2001, 5, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minusYears(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusMonths_int() {\n+        YearMonth test = new YearMonth(2002, 5, BuddhistChronology.getInstance());\n+        YearMonth result = test.minusMonths(1);\n+        YearMonth expected = new YearMonth(2002, 4, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minusMonths(0);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToLocalDate() {\n+        YearMonth base = new YearMonth(2005, 6, COPTIC_UTC);\n+        LocalDate test = base.toLocalDate(9);\n+        assertEquals(new LocalDate(2005, 6, 9, COPTIC_UTC), test);\n+        try {\n+            base.toLocalDate(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateTime_RI() {\n+        YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS);\n+        DateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7);\n+        \n+        DateTime test = base.toDateTime(dt);\n+        check(base, 2005, 6);\n+        DateTime expected = dt;\n+        expected = expected.year().setCopy(2005);\n+        expected = expected.monthOfYear().setCopy(6);\n+        assertEquals(expected, test);\n+    }\n+\n+    public void testToDateTime_nullRI() {\n+        YearMonth base = new YearMonth(2005, 6);\n+        DateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        \n+        DateTime test = base.toDateTime((ReadableInstant) null);\n+        check(base, 2005, 6);\n+        DateTime expected = dt;\n+        expected = expected.year().setCopy(2005);\n+        expected = expected.monthOfYear().setCopy(6);\n+        assertEquals(expected, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToInterval() {\n+        YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); // PARIS irrelevant\n+        Interval test = base.toInterval();\n+        check(base, 2005, 6);\n+        DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON);\n+        DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON);\n+        Interval expected = new Interval(start, end);\n+        assertEquals(expected, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToInterval_Zone() {\n+        YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); // PARIS irrelevant\n+        Interval test = base.toInterval(TOKYO);\n+        check(base, 2005, 6);\n+        DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_TOKYO);\n+        DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_TOKYO);\n+        Interval expected = new Interval(start, end);\n+        assertEquals(expected, test);\n+    }\n+\n+    public void testToInterval_nullZone() {\n+        YearMonth base = new YearMonth(2005, 6, COPTIC_PARIS); // PARIS irrelevant\n+        Interval test = base.toInterval(null);\n+        check(base, 2005, 6);\n+        DateTime start = new DateTime(2005, 6, 1, 0, 0, COPTIC_LONDON);\n+        DateTime end = new DateTime(2005, 7, 1, 0, 0, COPTIC_LONDON);\n+        Interval expected = new Interval(start, end);\n+        assertEquals(expected, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithers() {\n+        YearMonth test = new YearMonth(1970, 6);\n+        check(test.withYear(2000), 2000, 6);\n+        check(test.withMonthOfYear(2), 1970, 2);\n+        try {\n+            test.withMonthOfYear(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.withMonthOfYear(13);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testProperty() {\n+        YearMonth test = new YearMonth(2005, 6);\n+        assertEquals(test.year(), test.property(DateTimeFieldType.year()));\n+        assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear()));\n+        try {\n+            test.property(DateTimeFieldType.millisOfDay());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.property(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        YearMonth test = new YearMonth(1972, 6, COPTIC_PARIS);\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        YearMonth result = (YearMonth) ois.readObject();\n+        ois.close();\n+        \n+        assertEquals(test, result);\n+        assertTrue(Arrays.equals(test.getValues(), result.getValues()));\n+        assertTrue(Arrays.equals(test.getFields(), result.getFields()));\n+        assertEquals(test.getChronology(), result.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        YearMonth test = new YearMonth(2002, 6);\n+        assertEquals(\"2002-06\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString_String() {\n+        YearMonth test = new YearMonth(2002, 6);\n+        assertEquals(\"2002 \\ufffd\\ufffd\", test.toString(\"yyyy HH\"));\n+        assertEquals(\"2002-06\", test.toString((String) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString_String_Locale() {\n+        YearMonth test = new YearMonth(2002, 6);\n+        assertEquals(\"\\ufffd \\ufffd/6\", test.toString(\"EEE d/M\", Locale.ENGLISH));\n+        assertEquals(\"\\ufffd \\ufffd/6\", test.toString(\"EEE d/M\", Locale.FRENCH));\n+        assertEquals(\"2002-06\", test.toString(null, Locale.ENGLISH));\n+        assertEquals(\"\\ufffd \\ufffd/6\", test.toString(\"EEE d/M\", null));\n+        assertEquals(\"2002-06\", test.toString(null, null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString_DTFormatter() {\n+        YearMonth test = new YearMonth(2002, 6);\n+        assertEquals(\"2002 \\ufffd\\ufffd\", test.toString(DateTimeFormat.forPattern(\"yyyy HH\")));\n+        assertEquals(\"2002-06\", test.toString((DateTimeFormatter) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private void check(YearMonth test, int year, int month) {\n+        assertEquals(year, test.getYear());\n+        assertEquals(month, test.getMonthOfYear());\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java\n+/*\n+ *  Copyright 2001-2009 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * This class is a Junit unit test for YearMonth.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestYearMonth_Constructors extends TestCase {\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();\n+    private static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);\n+    \n+    private long TEST_TIME_NOW =\n+            (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    private long TEST_TIME1 =\n+        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private long TEST_TIME2 =\n+        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestYearMonth_Constructors.class);\n+    }\n+\n+    public TestYearMonth_Constructors(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_FromCalendarFields() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n+        cal.set(Calendar.MILLISECOND, 7);\n+        YearMonth expected = new YearMonth(1970, 2);\n+        assertEquals(expected, YearMonth.fromCalendarFields(cal));\n+        try {\n+            YearMonth.fromCalendarFields(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_FromDateFields() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n+        cal.set(Calendar.MILLISECOND, 7);\n+        YearMonth expected = new YearMonth(1970, 2);\n+        assertEquals(expected, YearMonth.fromDateFields(cal.getTime()));\n+        try {\n+            YearMonth.fromDateFields(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor ()\n+     */\n+    public void testConstructor() throws Throwable {\n+        YearMonth test = new YearMonth();\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+    }\n+\n+    /**\n+     * Test constructor (DateTimeZone)\n+     */\n+    public void testConstructor_DateTimeZone() throws Throwable {\n+        DateTime dt = new DateTime(2005, 6, 30, 23, 59, 0, 0, LONDON);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        // 23:59 in London is 00:59 the following day in Paris\n+        \n+        YearMonth test = new YearMonth(LONDON);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(2005, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        \n+        test = new YearMonth(PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(2005, test.getYear());\n+        assertEquals(7, test.getMonthOfYear());\n+    }\n+\n+    /**\n+     * Test constructor (DateTimeZone=null)\n+     */\n+    public void testConstructor_nullDateTimeZone() throws Throwable {\n+        DateTime dt = new DateTime(2005, 6, 30, 23, 59, 0, 0, LONDON);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        // 23:59 in London is 00:59 the following day in Paris\n+        \n+        YearMonth test = new YearMonth((DateTimeZone) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(2005, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+    }\n+\n+    /**\n+     * Test constructor (Chronology)\n+     */\n+    public void testConstructor_Chronology() throws Throwable {\n+        YearMonth test = new YearMonth(GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+    }\n+\n+    /**\n+     * Test constructor (Chronology=null)\n+     */\n+    public void testConstructor_nullChronology() throws Throwable {\n+        YearMonth test = new YearMonth((Chronology) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (long)\n+     */\n+    public void testConstructor_long1() throws Throwable {\n+        YearMonth test = new YearMonth(TEST_TIME1);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+    }\n+\n+    /**\n+     * Test constructor (long)\n+     */\n+    public void testConstructor_long2() throws Throwable {\n+        YearMonth test = new YearMonth(TEST_TIME2);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1971, test.getYear());\n+        assertEquals(5, test.getMonthOfYear());\n+    }\n+\n+    /**\n+     * Test constructor (long, Chronology)\n+     */\n+    public void testConstructor_long1_Chronology() throws Throwable {\n+        YearMonth test = new YearMonth(TEST_TIME1, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+    }\n+\n+    /**\n+     * Test constructor (long, Chronology)\n+     */\n+    public void testConstructor_long2_Chronology() throws Throwable {\n+        YearMonth test = new YearMonth(TEST_TIME2, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1971, test.getYear());\n+        assertEquals(5, test.getMonthOfYear());\n+    }\n+\n+    /**\n+     * Test constructor (long, Chronology=null)\n+     */\n+    public void testConstructor_long_nullChronology() throws Throwable {\n+        YearMonth test = new YearMonth(TEST_TIME1, null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_Object() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        YearMonth test = new YearMonth(date);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+    }\n+\n+    public void testConstructor_nullObject() throws Throwable {\n+        YearMonth test = new YearMonth((Object) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+    }\n+\n+    public void testConstructor_ObjectString1() throws Throwable {\n+        YearMonth test = new YearMonth(\"1972-12\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1972, test.getYear());\n+        assertEquals(12, test.getMonthOfYear());\n+    }\n+\n+    public void testConstructor_ObjectString2() throws Throwable {\n+        YearMonth test = new YearMonth(\"1972-12-01T+14:00\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1972, test.getYear());\n+        assertEquals(11, test.getMonthOfYear());  // timezone\n+    }\n+\n+    public void testConstructor_ObjectString3() throws Throwable {\n+        YearMonth test = new YearMonth(\"1972-12-03T10:20:30.040\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1972, test.getYear());\n+        assertEquals(12, test.getMonthOfYear());\n+    }\n+\n+    public void testConstructor_ObjectString4() throws Throwable {\n+        YearMonth test = new YearMonth(\"1972-12-01T10:20:30.040+14:00\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1972, test.getYear());\n+        assertEquals(11, test.getMonthOfYear());  // timezone\n+    }\n+\n+    public void testConstructor_ObjectString5() throws Throwable {\n+        YearMonth test = new YearMonth(\"10\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10, test.getYear());\n+        assertEquals(1, test.getMonthOfYear());\n+    }\n+\n+    public void testConstructor_ObjectStringEx1() throws Throwable {\n+        try {\n+            new YearMonth(\"T10:20:30.040\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testConstructor_ObjectStringEx2() throws Throwable {\n+        try {\n+            new YearMonth(\"T10:20:30.040+14:00\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testConstructor_ObjectStringEx3() throws Throwable {\n+        try {\n+            new YearMonth(\"10:20:30.040\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testConstructor_ObjectStringEx4() throws Throwable {\n+        try {\n+            new YearMonth(\"10:20:30.040+14:00\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (Object, Chronology)\n+     */\n+    public void testConstructor_Object_Chronology() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        YearMonth test = new YearMonth(date, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+    }\n+\n+    /**\n+     * Test constructor (Object=null, Chronology)\n+     */\n+    public void testConstructor_nullObject_Chronology() throws Throwable {\n+        YearMonth test = new YearMonth((Object) null, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+    }\n+\n+    /**\n+     * Test constructor (Object, Chronology=null)\n+     */\n+    public void testConstructor_Object_nullChronology() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        YearMonth test = new YearMonth(date, null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+    }\n+\n+    /**\n+     * Test constructor (Object=null, Chronology=null)\n+     */\n+    public void testConstructor_nullObject_nullChronology() throws Throwable {\n+        YearMonth test = new YearMonth((Object) null, null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (int, int)\n+     */\n+    public void testConstructor_int_int() throws Throwable {\n+        YearMonth test = new YearMonth(1970, 6);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        try {\n+            new YearMonth(Integer.MIN_VALUE, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new YearMonth(Integer.MAX_VALUE, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new YearMonth(1970, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new YearMonth(1970, 13);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (int, int, Chronology)\n+     */\n+    public void testConstructor_int_int_Chronology() throws Throwable {\n+        YearMonth test = new YearMonth(1970, 6, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        try {\n+            new YearMonth(Integer.MIN_VALUE, 6, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new YearMonth(Integer.MAX_VALUE, 6, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new YearMonth(1970, 0, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new YearMonth(1970, 13, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (int, int, Chronology=null)\n+     */\n+    public void testConstructor_int_int_nullChronology() throws Throwable {\n+        YearMonth test = new YearMonth(1970, 6, null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestYearMonth_Properties.java\n+/*\n+ *  Copyright 2001-2009 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.LenientChronology;\n+import org.joda.time.chrono.StrictChronology;\n+\n+/**\n+ * This class is a Junit unit test for YearMonth.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestYearMonth_Properties extends TestCase {\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+\n+    private long TEST_TIME_NOW =\n+            (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    private long TEST_TIME1 =\n+        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private long TEST_TIME2 =\n+        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestYearMonth_Properties.class);\n+    }\n+\n+    public TestYearMonth_Properties(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetYear() {\n+        YearMonth test = new YearMonth(1972, 6);\n+        assertSame(test.getChronology().year(), test.year().getField());\n+        assertEquals(\"year\", test.year().getName());\n+        assertEquals(\"Property[year]\", test.year().toString());\n+        assertSame(test, test.year().getReadablePartial());\n+        assertSame(test, test.year().getYearMonth());\n+        assertEquals(1972, test.year().get());\n+        assertEquals(\"1972\", test.year().getAsString());\n+        assertEquals(\"1972\", test.year().getAsText());\n+        assertEquals(\"1972\", test.year().getAsText(Locale.FRENCH));\n+        assertEquals(\"1972\", test.year().getAsShortText());\n+        assertEquals(\"1972\", test.year().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().years(), test.year().getDurationField());\n+        assertEquals(null, test.year().getRangeDurationField());\n+        assertEquals(9, test.year().getMaximumTextLength(null));\n+        assertEquals(9, test.year().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesYear() {\n+        YearMonth test = new YearMonth(1972, 6);\n+        assertEquals(-292275054, test.year().getMinimumValue());\n+        assertEquals(-292275054, test.year().getMinimumValueOverall());\n+        assertEquals(292278993, test.year().getMaximumValue());\n+        assertEquals(292278993, test.year().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyAddYear() {\n+        YearMonth test = new YearMonth(1972, 6);\n+        YearMonth copy = test.year().addToCopy(9);\n+        check(test, 1972, 6);\n+        check(copy, 1981, 6);\n+        \n+        copy = test.year().addToCopy(0);\n+        check(copy, 1972, 6);\n+        \n+        copy = test.year().addToCopy(292277023 - 1972);\n+        check(copy, 292277023, 6);\n+        \n+        try {\n+            test.year().addToCopy(292278993 - 1972 + 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 1972, 6);\n+        \n+        copy = test.year().addToCopy(-1972);\n+        check(copy, 0, 6);\n+        \n+        copy = test.year().addToCopy(-1973);\n+        check(copy, -1, 6);\n+        \n+        try {\n+            test.year().addToCopy(-292275054 - 1972 - 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 1972, 6);\n+    }\n+\n+    public void testPropertyAddWrapFieldYear() {\n+        YearMonth test = new YearMonth(1972, 6);\n+        YearMonth copy = test.year().addWrapFieldToCopy(9);\n+        check(test, 1972, 6);\n+        check(copy, 1981, 6);\n+        \n+        copy = test.year().addWrapFieldToCopy(0);\n+        check(copy, 1972, 6);\n+        \n+        copy = test.year().addWrapFieldToCopy(292278993 - 1972 + 1);\n+        check(copy, -292275054, 6);\n+        \n+        copy = test.year().addWrapFieldToCopy(-292275054 - 1972 - 1);\n+        check(copy, 292278993, 6);\n+    }\n+\n+    public void testPropertySetYear() {\n+        YearMonth test = new YearMonth(1972, 6);\n+        YearMonth copy = test.year().setCopy(12);\n+        check(test, 1972, 6);\n+        check(copy, 12, 6);\n+    }\n+\n+    public void testPropertySetTextYear() {\n+        YearMonth test = new YearMonth(1972, 6);\n+        YearMonth copy = test.year().setCopy(\"12\");\n+        check(test, 1972, 6);\n+        check(copy, 12, 6);\n+    }\n+\n+    public void testPropertyCompareToYear() {\n+        YearMonth test1 = new YearMonth(TEST_TIME1);\n+        YearMonth test2 = new YearMonth(TEST_TIME2);\n+        assertEquals(true, test1.year().compareTo(test2) < 0);\n+        assertEquals(true, test2.year().compareTo(test1) > 0);\n+        assertEquals(true, test1.year().compareTo(test1) == 0);\n+        try {\n+            test1.year().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.year().compareTo(dt2) < 0);\n+        assertEquals(true, test2.year().compareTo(dt1) > 0);\n+        assertEquals(true, test1.year().compareTo(dt1) == 0);\n+        try {\n+            test1.year().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMonth() {\n+        YearMonth test = new YearMonth(1972, 6);\n+        assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField());\n+        assertEquals(\"monthOfYear\", test.monthOfYear().getName());\n+        assertEquals(\"Property[monthOfYear]\", test.monthOfYear().toString());\n+        assertSame(test, test.monthOfYear().getReadablePartial());\n+        assertSame(test, test.monthOfYear().getYearMonth());\n+        assertEquals(6, test.monthOfYear().get());\n+        assertEquals(\"6\", test.monthOfYear().getAsString());\n+        assertEquals(\"June\", test.monthOfYear().getAsText());\n+        assertEquals(\"juin\", test.monthOfYear().getAsText(Locale.FRENCH));\n+        assertEquals(\"Jun\", test.monthOfYear().getAsShortText());\n+        assertEquals(\"juin\", test.monthOfYear().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField());\n+        assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField());\n+        assertEquals(9, test.monthOfYear().getMaximumTextLength(null));\n+        assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null));\n+        test = new YearMonth(1972, 7);\n+        assertEquals(\"juillet\", test.monthOfYear().getAsText(Locale.FRENCH));\n+        assertEquals(\"juil.\", test.monthOfYear().getAsShortText(Locale.FRENCH));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesMonth() {\n+        YearMonth test = new YearMonth(1972, 6);\n+        assertEquals(1, test.monthOfYear().getMinimumValue());\n+        assertEquals(1, test.monthOfYear().getMinimumValueOverall());\n+        assertEquals(12, test.monthOfYear().getMaximumValue());\n+        assertEquals(12, test.monthOfYear().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyAddMonth() {\n+        YearMonth test = new YearMonth(1972, 6);\n+        YearMonth copy = test.monthOfYear().addToCopy(6);\n+        check(test, 1972, 6);\n+        check(copy, 1972, 12);\n+        \n+        copy = test.monthOfYear().addToCopy(7);\n+        check(copy, 1973, 1);\n+        \n+        copy = test.monthOfYear().addToCopy(-5);\n+        check(copy, 1972, 1);\n+        \n+        copy = test.monthOfYear().addToCopy(-6);\n+        check(copy, 1971, 12);\n+    }\n+\n+    public void testPropertyAddWrapFieldMonth() {\n+        YearMonth test = new YearMonth(1972, 6);\n+        YearMonth copy = test.monthOfYear().addWrapFieldToCopy(4);\n+        check(test, 1972, 6);\n+        check(copy, 1972, 10);\n+        \n+        copy = test.monthOfYear().addWrapFieldToCopy(8);\n+        check(copy, 1972, 2);\n+        \n+        copy = test.monthOfYear().addWrapFieldToCopy(-8);\n+        check(copy, 1972, 10);\n+    }\n+\n+    public void testPropertySetMonth() {\n+        YearMonth test = new YearMonth(1972, 6);\n+        YearMonth copy = test.monthOfYear().setCopy(12);\n+        check(test, 1972, 6);\n+        check(copy, 1972, 12);\n+        \n+        try {\n+            test.monthOfYear().setCopy(13);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.monthOfYear().setCopy(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextMonth() {\n+        YearMonth test = new YearMonth(1972, 6);\n+        YearMonth copy = test.monthOfYear().setCopy(\"12\");\n+        check(test, 1972, 6);\n+        check(copy, 1972, 12);\n+        \n+        copy = test.monthOfYear().setCopy(\"December\");\n+        check(test, 1972, 6);\n+        check(copy, 1972, 12);\n+        \n+        copy = test.monthOfYear().setCopy(\"Dec\");\n+        check(test, 1972, 6);\n+        check(copy, 1972, 12);\n+    }\n+\n+    public void testPropertyCompareToMonth() {\n+        YearMonth test1 = new YearMonth(TEST_TIME1);\n+        YearMonth test2 = new YearMonth(TEST_TIME2);\n+        assertEquals(true, test1.monthOfYear().compareTo(test2) < 0);\n+        assertEquals(true, test2.monthOfYear().compareTo(test1) > 0);\n+        assertEquals(true, test1.monthOfYear().compareTo(test1) == 0);\n+        try {\n+            test1.monthOfYear().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0);\n+        assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0);\n+        assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0);\n+        try {\n+            test1.monthOfYear().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyEquals() {\n+        YearMonth test1 = new YearMonth(11, 11);\n+        YearMonth test2 = new YearMonth(11, 12);\n+        YearMonth test3 = new YearMonth(11, 11, CopticChronology.getInstanceUTC());\n+        assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear()));\n+        assertEquals(false, test1.monthOfYear().equals(test1.year()));\n+        assertEquals(false, test1.monthOfYear().equals(test2.monthOfYear()));\n+        assertEquals(false, test1.monthOfYear().equals(test2.year()));\n+        \n+        assertEquals(false, test1.year().equals(test1.monthOfYear()));\n+        assertEquals(true, test1.year().equals(test1.year()));\n+        assertEquals(false, test1.year().equals(test2.monthOfYear()));\n+        assertEquals(true, test1.year().equals(test2.year()));\n+        \n+        assertEquals(false, test1.monthOfYear().equals(null));\n+        assertEquals(false, test1.monthOfYear().equals(\"any\"));\n+        \n+        // chrono\n+        assertEquals(false, test1.monthOfYear().equals(test3.monthOfYear()));\n+    }\n+\n+    public void testPropertyHashCode() {\n+        YearMonth test1 = new YearMonth(2005, 11);\n+        YearMonth test2 = new YearMonth(2005, 12);\n+        assertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode());\n+        assertEquals(false, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode());\n+        assertEquals(true, test1.year().hashCode() == test1.year().hashCode());\n+        assertEquals(true, test1.year().hashCode() == test2.year().hashCode());\n+    }\n+\n+    public void testPropertyEqualsHashCodeLenient() {\n+        YearMonth test1 = new YearMonth(1970, 6, LenientChronology.getInstance(COPTIC_PARIS));\n+        YearMonth test2 = new YearMonth(1970, 6, LenientChronology.getInstance(COPTIC_PARIS));\n+        assertEquals(true, test1.monthOfYear().equals(test2.monthOfYear()));\n+        assertEquals(true, test2.monthOfYear().equals(test1.monthOfYear()));\n+        assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear()));\n+        assertEquals(true, test2.monthOfYear().equals(test2.monthOfYear()));\n+        assertEquals(true, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode());\n+        assertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode());\n+        assertEquals(true, test2.monthOfYear().hashCode() == test2.monthOfYear().hashCode());\n+    }\n+\n+    public void testPropertyEqualsHashCodeStrict() {\n+        YearMonth test1 = new YearMonth(1970, 6, StrictChronology.getInstance(COPTIC_PARIS));\n+        YearMonth test2 = new YearMonth(1970, 6, StrictChronology.getInstance(COPTIC_PARIS));\n+        assertEquals(true, test1.monthOfYear().equals(test2.monthOfYear()));\n+        assertEquals(true, test2.monthOfYear().equals(test1.monthOfYear()));\n+        assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear()));\n+        assertEquals(true, test2.monthOfYear().equals(test2.monthOfYear()));\n+        assertEquals(true, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode());\n+        assertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode());\n+        assertEquals(true, test2.monthOfYear().hashCode() == test2.monthOfYear().hashCode());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private void check(YearMonth test, int year, int month) {\n+        assertEquals(year, test.getYear());\n+        assertEquals(month, test.getMonthOfYear());\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestYears.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * This class is a Junit unit test for Years.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestYears extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestYears.class);\n+    }\n+\n+    public TestYears(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+    }\n+\n+    protected void tearDown() throws Exception {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstants() {\n+        assertEquals(0, Years.ZERO.getYears());\n+        assertEquals(1, Years.ONE.getYears());\n+        assertEquals(2, Years.TWO.getYears());\n+        assertEquals(3, Years.THREE.getYears());\n+        assertEquals(Integer.MAX_VALUE, Years.MAX_VALUE.getYears());\n+        assertEquals(Integer.MIN_VALUE, Years.MIN_VALUE.getYears());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_years_int() {\n+        assertSame(Years.ZERO, Years.years(0));\n+        assertSame(Years.ONE, Years.years(1));\n+        assertSame(Years.TWO, Years.years(2));\n+        assertSame(Years.THREE, Years.years(3));\n+        assertSame(Years.MAX_VALUE, Years.years(Integer.MAX_VALUE));\n+        assertSame(Years.MIN_VALUE, Years.years(Integer.MIN_VALUE));\n+        assertEquals(-1, Years.years(-1).getYears());\n+        assertEquals(4, Years.years(4).getYears());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_yearsBetween_RInstant() {\n+        DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);\n+        DateTime end1 = new DateTime(2009, 6, 9, 12, 0, 0, 0, PARIS);\n+        DateTime end2 = new DateTime(2012, 6, 9, 12, 0, 0, 0, PARIS);\n+        \n+        assertEquals(3, Years.yearsBetween(start, end1).getYears());\n+        assertEquals(0, Years.yearsBetween(start, start).getYears());\n+        assertEquals(0, Years.yearsBetween(end1, end1).getYears());\n+        assertEquals(-3, Years.yearsBetween(end1, start).getYears());\n+        assertEquals(6, Years.yearsBetween(start, end2).getYears());\n+    }\n+\n+    public void testFactory_yearsBetween_RPartial() {\n+        LocalDate start = new LocalDate(2006, 6, 9);\n+        LocalDate end1 = new LocalDate(2009, 6, 9);\n+        YearMonthDay end2 = new YearMonthDay(2012, 6, 9);\n+        \n+        assertEquals(3, Years.yearsBetween(start, end1).getYears());\n+        assertEquals(0, Years.yearsBetween(start, start).getYears());\n+        assertEquals(0, Years.yearsBetween(end1, end1).getYears());\n+        assertEquals(-3, Years.yearsBetween(end1, start).getYears());\n+        assertEquals(6, Years.yearsBetween(start, end2).getYears());\n+    }\n+\n+    public void testFactory_yearsIn_RInterval() {\n+        DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);\n+        DateTime end1 = new DateTime(2009, 6, 9, 12, 0, 0, 0, PARIS);\n+        DateTime end2 = new DateTime(2012, 6, 9, 12, 0, 0, 0, PARIS);\n+        \n+        assertEquals(0, Years.yearsIn((ReadableInterval) null).getYears());\n+        assertEquals(3, Years.yearsIn(new Interval(start, end1)).getYears());\n+        assertEquals(0, Years.yearsIn(new Interval(start, start)).getYears());\n+        assertEquals(0, Years.yearsIn(new Interval(end1, end1)).getYears());\n+        assertEquals(6, Years.yearsIn(new Interval(start, end2)).getYears());\n+    }\n+\n+    public void testFactory_parseYears_String() {\n+        assertEquals(0, Years.parseYears((String) null).getYears());\n+        assertEquals(0, Years.parseYears(\"P0Y\").getYears());\n+        assertEquals(1, Years.parseYears(\"P1Y\").getYears());\n+        assertEquals(-3, Years.parseYears(\"P-3Y\").getYears());\n+        assertEquals(2, Years.parseYears(\"P2Y0M\").getYears());\n+        assertEquals(2, Years.parseYears(\"P2YT0H0M\").getYears());\n+        try {\n+            Years.parseYears(\"P1M1D\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expeceted\n+        }\n+        try {\n+            Years.parseYears(\"P1YT1H\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expeceted\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetMethods() {\n+        Years test = Years.years(20);\n+        assertEquals(20, test.getYears());\n+    }\n+\n+    public void testGetFieldType() {\n+        Years test = Years.years(20);\n+        assertEquals(DurationFieldType.years(), test.getFieldType());\n+    }\n+\n+    public void testGetPeriodType() {\n+        Years test = Years.years(20);\n+        assertEquals(PeriodType.years(), test.getPeriodType());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsGreaterThan() {\n+        assertEquals(true, Years.THREE.isGreaterThan(Years.TWO));\n+        assertEquals(false, Years.THREE.isGreaterThan(Years.THREE));\n+        assertEquals(false, Years.TWO.isGreaterThan(Years.THREE));\n+        assertEquals(true, Years.ONE.isGreaterThan(null));\n+        assertEquals(false, Years.years(-1).isGreaterThan(null));\n+    }\n+\n+    public void testIsLessThan() {\n+        assertEquals(false, Years.THREE.isLessThan(Years.TWO));\n+        assertEquals(false, Years.THREE.isLessThan(Years.THREE));\n+        assertEquals(true, Years.TWO.isLessThan(Years.THREE));\n+        assertEquals(false, Years.ONE.isLessThan(null));\n+        assertEquals(true, Years.years(-1).isLessThan(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        Years test = Years.years(20);\n+        assertEquals(\"P20Y\", test.toString());\n+        \n+        test = Years.years(-20);\n+        assertEquals(\"P-20Y\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        Years test = Years.THREE;\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        Years result = (Years) ois.readObject();\n+        ois.close();\n+        \n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPlus_int() {\n+        Years test2 = Years.years(2);\n+        Years result = test2.plus(3);\n+        assertEquals(2, test2.getYears());\n+        assertEquals(5, result.getYears());\n+        \n+        assertEquals(1, Years.ONE.plus(0).getYears());\n+        \n+        try {\n+            Years.MAX_VALUE.plus(1);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testPlus_Years() {\n+        Years test2 = Years.years(2);\n+        Years test3 = Years.years(3);\n+        Years result = test2.plus(test3);\n+        assertEquals(2, test2.getYears());\n+        assertEquals(3, test3.getYears());\n+        assertEquals(5, result.getYears());\n+        \n+        assertEquals(1, Years.ONE.plus(Years.ZERO).getYears());\n+        assertEquals(1, Years.ONE.plus((Years) null).getYears());\n+        \n+        try {\n+            Years.MAX_VALUE.plus(Years.ONE);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testMinus_int() {\n+        Years test2 = Years.years(2);\n+        Years result = test2.minus(3);\n+        assertEquals(2, test2.getYears());\n+        assertEquals(-1, result.getYears());\n+        \n+        assertEquals(1, Years.ONE.minus(0).getYears());\n+        \n+        try {\n+            Years.MIN_VALUE.minus(1);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testMinus_Years() {\n+        Years test2 = Years.years(2);\n+        Years test3 = Years.years(3);\n+        Years result = test2.minus(test3);\n+        assertEquals(2, test2.getYears());\n+        assertEquals(3, test3.getYears());\n+        assertEquals(-1, result.getYears());\n+        \n+        assertEquals(1, Years.ONE.minus(Years.ZERO).getYears());\n+        assertEquals(1, Years.ONE.minus((Years) null).getYears());\n+        \n+        try {\n+            Years.MIN_VALUE.minus(Years.ONE);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testMultipliedBy_int() {\n+        Years test = Years.years(2);\n+        assertEquals(6, test.multipliedBy(3).getYears());\n+        assertEquals(2, test.getYears());\n+        assertEquals(-6, test.multipliedBy(-3).getYears());\n+        assertSame(test, test.multipliedBy(1));\n+        \n+        Years halfMax = Years.years(Integer.MAX_VALUE / 2 + 1);\n+        try {\n+            halfMax.multipliedBy(2);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testDividedBy_int() {\n+        Years test = Years.years(12);\n+        assertEquals(6, test.dividedBy(2).getYears());\n+        assertEquals(12, test.getYears());\n+        assertEquals(4, test.dividedBy(3).getYears());\n+        assertEquals(3, test.dividedBy(4).getYears());\n+        assertEquals(2, test.dividedBy(5).getYears());\n+        assertEquals(2, test.dividedBy(6).getYears());\n+        assertSame(test, test.dividedBy(1));\n+        \n+        try {\n+            Years.ONE.dividedBy(0);\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testNegated() {\n+        Years test = Years.years(12);\n+        assertEquals(-12, test.negated().getYears());\n+        assertEquals(12, test.getYears());\n+        \n+        try {\n+            Years.MIN_VALUE.negated();\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddToLocalDate() {\n+        Years test = Years.years(3);\n+        LocalDate date = new LocalDate(2006, 6, 1);\n+        LocalDate expected = new LocalDate(2009, 6, 1);\n+        assertEquals(expected, date.plus(test));\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/chrono/TestAll.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.chrono;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Entry point for all tests in this package.\n+ * \n+ * @version $Revision$ $Date$\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestAll extends TestCase {\n+\n+    public static boolean FAST = false;\n+\n+    public TestAll(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite();\n+        \n+        suite.addTest(TestBuddhistChronology.suite());\n+        suite.addTest(TestCopticChronology.suite());\n+        suite.addTest(TestEthiopicChronology.suite());\n+        suite.addTest(TestGJChronology.suite());\n+        suite.addTest(TestGregorianChronology.suite());\n+        suite.addTest(TestIslamicChronology.suite());\n+        suite.addTest(TestJulianChronology.suite());\n+        suite.addTest(TestISOChronology.suite());\n+        suite.addTest(TestLenientChronology.suite());\n+        \n+        return suite;\n+    }\n+\n+    public static void main(String args[]) {\n+        FAST = false;\n+        TestRunner.run(TestAll.suite());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/chrono/TestBuddhistChronology.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.chrono;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeField;\n+import org.joda.time.DateTimeUtils;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.Period;\n+\n+/**\n+ * This class is a Junit unit test for BuddhistChronology.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestBuddhistChronology extends TestCase {\n+\n+    private static int SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;\n+    \n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n+    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+    private static final Chronology JULIAN_UTC = JulianChronology.getInstanceUTC();\n+    private static final Chronology GJ_UTC = GJChronology.getInstanceUTC();\n+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+\n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestBuddhistChronology.class);\n+    }\n+\n+    public TestBuddhistChronology(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactoryUTC() {\n+        assertEquals(DateTimeZone.UTC, BuddhistChronology.getInstanceUTC().getZone());\n+        assertSame(BuddhistChronology.class, BuddhistChronology.getInstanceUTC().getClass());\n+    }\n+\n+    public void testFactory() {\n+        assertEquals(LONDON, BuddhistChronology.getInstance().getZone());\n+        assertSame(BuddhistChronology.class, BuddhistChronology.getInstance().getClass());\n+    }\n+\n+    public void testFactory_Zone() {\n+        assertEquals(TOKYO, BuddhistChronology.getInstance(TOKYO).getZone());\n+        assertEquals(PARIS, BuddhistChronology.getInstance(PARIS).getZone());\n+        assertEquals(LONDON, BuddhistChronology.getInstance(null).getZone());\n+        assertSame(BuddhistChronology.class, BuddhistChronology.getInstance(TOKYO).getClass());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testEquality() {\n+        assertSame(BuddhistChronology.getInstance(TOKYO), BuddhistChronology.getInstance(TOKYO));\n+        assertSame(BuddhistChronology.getInstance(LONDON), BuddhistChronology.getInstance(LONDON));\n+        assertSame(BuddhistChronology.getInstance(PARIS), BuddhistChronology.getInstance(PARIS));\n+        assertSame(BuddhistChronology.getInstanceUTC(), BuddhistChronology.getInstanceUTC());\n+        assertSame(BuddhistChronology.getInstance(), BuddhistChronology.getInstance(LONDON));\n+    }\n+\n+    public void testWithUTC() {\n+        assertSame(BuddhistChronology.getInstanceUTC(), BuddhistChronology.getInstance(LONDON).withUTC());\n+        assertSame(BuddhistChronology.getInstanceUTC(), BuddhistChronology.getInstance(TOKYO).withUTC());\n+        assertSame(BuddhistChronology.getInstanceUTC(), BuddhistChronology.getInstanceUTC().withUTC());\n+        assertSame(BuddhistChronology.getInstanceUTC(), BuddhistChronology.getInstance().withUTC());\n+    }\n+\n+    public void testWithZone() {\n+        assertSame(BuddhistChronology.getInstance(TOKYO), BuddhistChronology.getInstance(TOKYO).withZone(TOKYO));\n+        assertSame(BuddhistChronology.getInstance(LONDON), BuddhistChronology.getInstance(TOKYO).withZone(LONDON));\n+        assertSame(BuddhistChronology.getInstance(PARIS), BuddhistChronology.getInstance(TOKYO).withZone(PARIS));\n+        assertSame(BuddhistChronology.getInstance(LONDON), BuddhistChronology.getInstance(TOKYO).withZone(null));\n+        assertSame(BuddhistChronology.getInstance(PARIS), BuddhistChronology.getInstance().withZone(PARIS));\n+        assertSame(BuddhistChronology.getInstance(PARIS), BuddhistChronology.getInstanceUTC().withZone(PARIS));\n+    }\n+\n+    public void testToString() {\n+        assertEquals(\"BuddhistChronology[Europe/London]\", BuddhistChronology.getInstance(LONDON).toString());\n+        assertEquals(\"BuddhistChronology[Asia/Tokyo]\", BuddhistChronology.getInstance(TOKYO).toString());\n+        assertEquals(\"BuddhistChronology[Europe/London]\", BuddhistChronology.getInstance().toString());\n+        assertEquals(\"BuddhistChronology[UTC]\", BuddhistChronology.getInstanceUTC().toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testDurationFields() {\n+        assertEquals(\"eras\", BuddhistChronology.getInstance().eras().getName());\n+        assertEquals(\"centuries\", BuddhistChronology.getInstance().centuries().getName());\n+        assertEquals(\"years\", BuddhistChronology.getInstance().years().getName());\n+        assertEquals(\"weekyears\", BuddhistChronology.getInstance().weekyears().getName());\n+        assertEquals(\"months\", BuddhistChronology.getInstance().months().getName());\n+        assertEquals(\"weeks\", BuddhistChronology.getInstance().weeks().getName());\n+        assertEquals(\"days\", BuddhistChronology.getInstance().days().getName());\n+        assertEquals(\"halfdays\", GregorianChronology.getInstance().halfdays().getName());\n+        assertEquals(\"hours\", BuddhistChronology.getInstance().hours().getName());\n+        assertEquals(\"minutes\", BuddhistChronology.getInstance().minutes().getName());\n+        assertEquals(\"seconds\", BuddhistChronology.getInstance().seconds().getName());\n+        assertEquals(\"millis\", BuddhistChronology.getInstance().millis().getName());\n+        \n+        assertEquals(false, BuddhistChronology.getInstance().eras().isSupported());\n+        assertEquals(true, BuddhistChronology.getInstance().centuries().isSupported());\n+        assertEquals(true, BuddhistChronology.getInstance().years().isSupported());\n+        assertEquals(true, BuddhistChronology.getInstance().weekyears().isSupported());\n+        assertEquals(true, BuddhistChronology.getInstance().months().isSupported());\n+        assertEquals(true, BuddhistChronology.getInstance().weeks().isSupported());\n+        assertEquals(true, BuddhistChronology.getInstance().days().isSupported());\n+        assertEquals(true, BuddhistChronology.getInstance().halfdays().isSupported());\n+        assertEquals(true, BuddhistChronology.getInstance().hours().isSupported());\n+        assertEquals(true, BuddhistChronology.getInstance().minutes().isSupported());\n+        assertEquals(true, BuddhistChronology.getInstance().seconds().isSupported());\n+        assertEquals(true, BuddhistChronology.getInstance().millis().isSupported());\n+        \n+        assertEquals(false, BuddhistChronology.getInstance().centuries().isPrecise());\n+        assertEquals(false, BuddhistChronology.getInstance().years().isPrecise());\n+        assertEquals(false, BuddhistChronology.getInstance().weekyears().isPrecise());\n+        assertEquals(false, BuddhistChronology.getInstance().months().isPrecise());\n+        assertEquals(false, BuddhistChronology.getInstance().weeks().isPrecise());\n+        assertEquals(false, BuddhistChronology.getInstance().days().isPrecise());\n+        assertEquals(false, BuddhistChronology.getInstance().halfdays().isPrecise());\n+        assertEquals(true, BuddhistChronology.getInstance().hours().isPrecise());\n+        assertEquals(true, BuddhistChronology.getInstance().minutes().isPrecise());\n+        assertEquals(true, BuddhistChronology.getInstance().seconds().isPrecise());\n+        assertEquals(true, BuddhistChronology.getInstance().millis().isPrecise());\n+        \n+        assertEquals(false, BuddhistChronology.getInstanceUTC().centuries().isPrecise());\n+        assertEquals(false, BuddhistChronology.getInstanceUTC().years().isPrecise());\n+        assertEquals(false, BuddhistChronology.getInstanceUTC().weekyears().isPrecise());\n+        assertEquals(false, BuddhistChronology.getInstanceUTC().months().isPrecise());\n+        assertEquals(true, BuddhistChronology.getInstanceUTC().weeks().isPrecise());\n+        assertEquals(true, BuddhistChronology.getInstanceUTC().days().isPrecise());\n+        assertEquals(true, BuddhistChronology.getInstanceUTC().halfdays().isPrecise());\n+        assertEquals(true, BuddhistChronology.getInstanceUTC().hours().isPrecise());\n+        assertEquals(true, BuddhistChronology.getInstanceUTC().minutes().isPrecise());\n+        assertEquals(true, BuddhistChronology.getInstanceUTC().seconds().isPrecise());\n+        assertEquals(true, BuddhistChronology.getInstanceUTC().millis().isPrecise());\n+        \n+        DateTimeZone gmt = DateTimeZone.forID(\"Etc/GMT\");\n+        assertEquals(false, BuddhistChronology.getInstance(gmt).centuries().isPrecise());\n+        assertEquals(false, BuddhistChronology.getInstance(gmt).years().isPrecise());\n+        assertEquals(false, BuddhistChronology.getInstance(gmt).weekyears().isPrecise());\n+        assertEquals(false, BuddhistChronology.getInstance(gmt).months().isPrecise());\n+        assertEquals(true, BuddhistChronology.getInstance(gmt).weeks().isPrecise());\n+        assertEquals(true, BuddhistChronology.getInstance(gmt).days().isPrecise());\n+        assertEquals(true, BuddhistChronology.getInstance(gmt).halfdays().isPrecise());\n+        assertEquals(true, BuddhistChronology.getInstance(gmt).hours().isPrecise());\n+        assertEquals(true, BuddhistChronology.getInstance(gmt).minutes().isPrecise());\n+        assertEquals(true, BuddhistChronology.getInstance(gmt).seconds().isPrecise());\n+        assertEquals(true, BuddhistChronology.getInstance(gmt).millis().isPrecise());\n+    }\n+\n+    public void testDateFields() {\n+        assertEquals(\"era\", BuddhistChronology.getInstance().era().getName());\n+        assertEquals(\"centuryOfEra\", BuddhistChronology.getInstance().centuryOfEra().getName());\n+        assertEquals(\"yearOfCentury\", BuddhistChronology.getInstance().yearOfCentury().getName());\n+        assertEquals(\"yearOfEra\", BuddhistChronology.getInstance().yearOfEra().getName());\n+        assertEquals(\"year\", BuddhistChronology.getInstance().year().getName());\n+        assertEquals(\"monthOfYear\", BuddhistChronology.getInstance().monthOfYear().getName());\n+        assertEquals(\"weekyearOfCentury\", BuddhistChronology.getInstance().weekyearOfCentury().getName());\n+        assertEquals(\"weekyear\", BuddhistChronology.getInstance().weekyear().getName());\n+        assertEquals(\"weekOfWeekyear\", BuddhistChronology.getInstance().weekOfWeekyear().getName());\n+        assertEquals(\"dayOfYear\", BuddhistChronology.getInstance().dayOfYear().getName());\n+        assertEquals(\"dayOfMonth\", BuddhistChronology.getInstance().dayOfMonth().getName());\n+        assertEquals(\"dayOfWeek\", BuddhistChronology.getInstance().dayOfWeek().getName());\n+        \n+        assertEquals(true, BuddhistChronology.getInstance().era().isSupported());\n+        assertEquals(true, BuddhistChronology.getInstance().centuryOfEra().isSupported());\n+        assertEquals(true, BuddhistChronology.getInstance().yearOfCentury().isSupported());\n+        assertEquals(true, BuddhistChronology.getInstance().yearOfEra().isSupported());\n+        assertEquals(true, BuddhistChronology.getInstance().year().isSupported());\n+        assertEquals(true, BuddhistChronology.getInstance().monthOfYear().isSupported());\n+        assertEquals(true, BuddhistChronology.getInstance().weekyearOfCentury().isSupported());\n+        assertEquals(true, BuddhistChronology.getInstance().weekyear().isSupported());\n+        assertEquals(true, BuddhistChronology.getInstance().weekOfWeekyear().isSupported());\n+        assertEquals(true, BuddhistChronology.getInstance().dayOfYear().isSupported());\n+        assertEquals(true, BuddhistChronology.getInstance().dayOfMonth().isSupported());\n+        assertEquals(true, BuddhistChronology.getInstance().dayOfWeek().isSupported());\n+    }\n+\n+    public void testTimeFields() {\n+        assertEquals(\"halfdayOfDay\", BuddhistChronology.getInstance().halfdayOfDay().getName());\n+        assertEquals(\"clockhourOfHalfday\", BuddhistChronology.getInstance().clockhourOfHalfday().getName());\n+        assertEquals(\"hourOfHalfday\", BuddhistChronology.getInstance().hourOfHalfday().getName());\n+        assertEquals(\"clockhourOfDay\", BuddhistChronology.getInstance().clockhourOfDay().getName());\n+        assertEquals(\"hourOfDay\", BuddhistChronology.getInstance().hourOfDay().getName());\n+        assertEquals(\"minuteOfDay\", BuddhistChronology.getInstance().minuteOfDay().getName());\n+        assertEquals(\"minuteOfHour\", BuddhistChronology.getInstance().minuteOfHour().getName());\n+        assertEquals(\"secondOfDay\", BuddhistChronology.getInstance().secondOfDay().getName());\n+        assertEquals(\"secondOfMinute\", BuddhistChronology.getInstance().secondOfMinute().getName());\n+        assertEquals(\"millisOfDay\", BuddhistChronology.getInstance().millisOfDay().getName());\n+        assertEquals(\"millisOfSecond\", BuddhistChronology.getInstance().millisOfSecond().getName());\n+        \n+        assertEquals(true, BuddhistChronology.getInstance().halfdayOfDay().isSupported());\n+        assertEquals(true, BuddhistChronology.getInstance().clockhourOfHalfday().isSupported());\n+        assertEquals(true, BuddhistChronology.getInstance().hourOfHalfday().isSupported());\n+        assertEquals(true, BuddhistChronology.getInstance().clockhourOfDay().isSupported());\n+        assertEquals(true, BuddhistChronology.getInstance().hourOfDay().isSupported());\n+        assertEquals(true, BuddhistChronology.getInstance().minuteOfDay().isSupported());\n+        assertEquals(true, BuddhistChronology.getInstance().minuteOfHour().isSupported());\n+        assertEquals(true, BuddhistChronology.getInstance().secondOfDay().isSupported());\n+        assertEquals(true, BuddhistChronology.getInstance().secondOfMinute().isSupported());\n+        assertEquals(true, BuddhistChronology.getInstance().millisOfDay().isSupported());\n+        assertEquals(true, BuddhistChronology.getInstance().millisOfSecond().isSupported());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testEpoch() {\n+        DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, BUDDHIST_UTC);\n+        assertEquals(new DateTime(-543, 1, 1, 0, 0, 0, 0, JULIAN_UTC), epoch.withChronology(JULIAN_UTC));\n+    }\n+\n+    public void testEra() {\n+        assertEquals(1, BuddhistChronology.BE);\n+        try {\n+            new DateTime(-1, 13, 5, 0, 0, 0, 0, BUDDHIST_UTC);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testKeyYears() {\n+        DateTime bd = new DateTime(2513, 1, 1, 0, 0, 0, 0, BUDDHIST_UTC);\n+        DateTime jd = new DateTime(1970, 1, 1, 0, 0, 0, 0, GJ_UTC);\n+        assertEquals(jd, bd.withChronology(GJ_UTC));\n+        assertEquals(2513, bd.getYear());\n+        assertEquals(2513, bd.getYearOfEra());\n+        assertEquals(2513, bd.plus(Period.weeks(1)).getWeekyear());\n+        \n+        bd = new DateTime(2126, 1, 1, 0, 0, 0, 0, BUDDHIST_UTC);\n+        jd = new DateTime(1583, 1, 1, 0, 0, 0, 0, GJ_UTC);\n+        assertEquals(jd, bd.withChronology(GJ_UTC));\n+        assertEquals(2126, bd.getYear());\n+        assertEquals(2126, bd.getYearOfEra());\n+        assertEquals(2126, bd.plus(Period.weeks(1)).getWeekyear());\n+        \n+        bd = new DateTime(2125, 1, 1, 0, 0, 0, 0, BUDDHIST_UTC);\n+        jd = new DateTime(1582, 1, 1, 0, 0, 0, 0, GJ_UTC);\n+        assertEquals(jd, bd.withChronology(GJ_UTC));\n+        assertEquals(2125, bd.getYear());\n+        assertEquals(2125, bd.getYearOfEra());\n+        assertEquals(2125, bd.plus(Period.weeks(1)).getWeekyear());\n+        \n+        bd = new DateTime(544, 1, 1, 0, 0, 0, 0, BUDDHIST_UTC);\n+        jd = new DateTime(1, 1, 1, 0, 0, 0, 0, GJ_UTC);\n+        assertEquals(jd, bd.withChronology(GJ_UTC));\n+        assertEquals(544, bd.getYear());\n+        assertEquals(544, bd.getYearOfEra());\n+        assertEquals(544, bd.plus(Period.weeks(1)).getWeekyear());\n+        \n+        bd = new DateTime(543, 1, 1, 0, 0, 0, 0, BUDDHIST_UTC);\n+        jd = new DateTime(-1, 1, 1, 0, 0, 0, 0, GJ_UTC);\n+        assertEquals(jd, bd.withChronology(GJ_UTC));\n+        assertEquals(543, bd.getYear());\n+        assertEquals(543, bd.getYearOfEra());\n+        assertEquals(543, bd.plus(Period.weeks(1)).getWeekyear());\n+        \n+        bd = new DateTime(1, 1, 1, 0, 0, 0, 0, BUDDHIST_UTC);\n+        jd = new DateTime(-543, 1, 1, 0, 0, 0, 0, GJ_UTC);\n+        assertEquals(jd, bd.withChronology(GJ_UTC));\n+        assertEquals(1, bd.getYear());\n+        assertEquals(1, bd.getYearOfEra());\n+        assertEquals(1, bd.plus(Period.weeks(1)).getWeekyear());\n+    }\n+\n+    public void testCalendar() {\n+        if (TestAll.FAST) {\n+            return;\n+        }\n+        System.out.println(\"\\nTestBuddhistChronology.testCalendar\");\n+        DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, BUDDHIST_UTC);\n+        long millis = epoch.getMillis();\n+        long end = new DateTime(3000, 1, 1, 0, 0, 0, 0, ISO_UTC).getMillis();\n+        DateTimeField dayOfWeek = BUDDHIST_UTC.dayOfWeek();\n+        DateTimeField weekOfWeekyear = GJ_UTC.weekOfWeekyear();\n+        DateTimeField dayOfYear = BUDDHIST_UTC.dayOfYear();\n+        DateTimeField dayOfMonth = BUDDHIST_UTC.dayOfMonth();\n+        DateTimeField monthOfYear = BUDDHIST_UTC.monthOfYear();\n+        DateTimeField year = BUDDHIST_UTC.year();\n+        DateTimeField yearOfEra = BUDDHIST_UTC.yearOfEra();\n+        DateTimeField era = BUDDHIST_UTC.era();\n+        DateTimeField gjDayOfWeek = GJ_UTC.dayOfWeek();\n+        DateTimeField gjWeekOfWeekyear = GJ_UTC.weekOfWeekyear();\n+        DateTimeField gjDayOfYear = GJ_UTC.dayOfYear();\n+        DateTimeField gjDayOfMonth = GJ_UTC.dayOfMonth();\n+        DateTimeField gjMonthOfYear = GJ_UTC.monthOfYear();\n+        DateTimeField gjYear = GJ_UTC.year();\n+        DateTimeField gjYearOfEra = GJ_UTC.yearOfEra();\n+        DateTimeField gjEra = GJ_UTC.era();\n+        while (millis < end) {\n+            assertEquals(gjDayOfWeek.get(millis), dayOfWeek.get(millis));\n+            assertEquals(gjDayOfYear.get(millis), dayOfYear.get(millis));\n+            assertEquals(gjDayOfMonth.get(millis), dayOfMonth.get(millis));\n+            assertEquals(gjMonthOfYear.get(millis), monthOfYear.get(millis));\n+            assertEquals(gjWeekOfWeekyear.get(millis), weekOfWeekyear.get(millis));\n+            assertEquals(1, era.get(millis));\n+            int yearValue = gjYear.get(millis);\n+            if (yearValue <= 0) {\n+                yearValue++;\n+            }\n+            yearValue += 543;\n+            assertEquals(yearValue, year.get(millis));\n+            assertEquals(yearValue, yearOfEra.get(millis));\n+            millis += SKIP;\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/chrono/TestCopticChronology.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.chrono;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeField;\n+import org.joda.time.DateTimeUtils;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.DurationField;\n+import org.joda.time.DurationFieldType;\n+import org.joda.time.DateTime.Property;\n+\n+/**\n+ * This class is a Junit unit test for CopticChronology.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestCopticChronology extends TestCase {\n+\n+    private static final int MILLIS_PER_DAY = DateTimeConstants.MILLIS_PER_DAY;\n+\n+    private static long SKIP = 1 * MILLIS_PER_DAY;\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+    private static final Chronology JULIAN_UTC = JulianChronology.getInstanceUTC();\n+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+\n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * MILLIS_PER_DAY;\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        SKIP = 1 * MILLIS_PER_DAY;\n+        return new TestSuite(TestCopticChronology.class);\n+    }\n+\n+    public TestCopticChronology(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactoryUTC() {\n+        assertEquals(DateTimeZone.UTC, CopticChronology.getInstanceUTC().getZone());\n+        assertSame(CopticChronology.class, CopticChronology.getInstanceUTC().getClass());\n+    }\n+\n+    public void testFactory() {\n+        assertEquals(LONDON, CopticChronology.getInstance().getZone());\n+        assertSame(CopticChronology.class, CopticChronology.getInstance().getClass());\n+    }\n+\n+    public void testFactory_Zone() {\n+        assertEquals(TOKYO, CopticChronology.getInstance(TOKYO).getZone());\n+        assertEquals(PARIS, CopticChronology.getInstance(PARIS).getZone());\n+        assertEquals(LONDON, CopticChronology.getInstance(null).getZone());\n+        assertSame(CopticChronology.class, CopticChronology.getInstance(TOKYO).getClass());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testEquality() {\n+        assertSame(CopticChronology.getInstance(TOKYO), CopticChronology.getInstance(TOKYO));\n+        assertSame(CopticChronology.getInstance(LONDON), CopticChronology.getInstance(LONDON));\n+        assertSame(CopticChronology.getInstance(PARIS), CopticChronology.getInstance(PARIS));\n+        assertSame(CopticChronology.getInstanceUTC(), CopticChronology.getInstanceUTC());\n+        assertSame(CopticChronology.getInstance(), CopticChronology.getInstance(LONDON));\n+    }\n+\n+    public void testWithUTC() {\n+        assertSame(CopticChronology.getInstanceUTC(), CopticChronology.getInstance(LONDON).withUTC());\n+        assertSame(CopticChronology.getInstanceUTC(), CopticChronology.getInstance(TOKYO).withUTC());\n+        assertSame(CopticChronology.getInstanceUTC(), CopticChronology.getInstanceUTC().withUTC());\n+        assertSame(CopticChronology.getInstanceUTC(), CopticChronology.getInstance().withUTC());\n+    }\n+\n+    public void testWithZone() {\n+        assertSame(CopticChronology.getInstance(TOKYO), CopticChronology.getInstance(TOKYO).withZone(TOKYO));\n+        assertSame(CopticChronology.getInstance(LONDON), CopticChronology.getInstance(TOKYO).withZone(LONDON));\n+        assertSame(CopticChronology.getInstance(PARIS), CopticChronology.getInstance(TOKYO).withZone(PARIS));\n+        assertSame(CopticChronology.getInstance(LONDON), CopticChronology.getInstance(TOKYO).withZone(null));\n+        assertSame(CopticChronology.getInstance(PARIS), CopticChronology.getInstance().withZone(PARIS));\n+        assertSame(CopticChronology.getInstance(PARIS), CopticChronology.getInstanceUTC().withZone(PARIS));\n+    }\n+\n+    public void testToString() {\n+        assertEquals(\"CopticChronology[Europe/London]\", CopticChronology.getInstance(LONDON).toString());\n+        assertEquals(\"CopticChronology[Asia/Tokyo]\", CopticChronology.getInstance(TOKYO).toString());\n+        assertEquals(\"CopticChronology[Europe/London]\", CopticChronology.getInstance().toString());\n+        assertEquals(\"CopticChronology[UTC]\", CopticChronology.getInstanceUTC().toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testDurationFields() {\n+        assertEquals(\"eras\", CopticChronology.getInstance().eras().getName());\n+        assertEquals(\"centuries\", CopticChronology.getInstance().centuries().getName());\n+        assertEquals(\"years\", CopticChronology.getInstance().years().getName());\n+        assertEquals(\"weekyears\", CopticChronology.getInstance().weekyears().getName());\n+        assertEquals(\"months\", CopticChronology.getInstance().months().getName());\n+        assertEquals(\"weeks\", CopticChronology.getInstance().weeks().getName());\n+        assertEquals(\"days\", CopticChronology.getInstance().days().getName());\n+        assertEquals(\"halfdays\", CopticChronology.getInstance().halfdays().getName());\n+        assertEquals(\"hours\", CopticChronology.getInstance().hours().getName());\n+        assertEquals(\"minutes\", CopticChronology.getInstance().minutes().getName());\n+        assertEquals(\"seconds\", CopticChronology.getInstance().seconds().getName());\n+        assertEquals(\"millis\", CopticChronology.getInstance().millis().getName());\n+        \n+        assertEquals(false, CopticChronology.getInstance().eras().isSupported());\n+        assertEquals(true, CopticChronology.getInstance().centuries().isSupported());\n+        assertEquals(true, CopticChronology.getInstance().years().isSupported());\n+        assertEquals(true, CopticChronology.getInstance().weekyears().isSupported());\n+        assertEquals(true, CopticChronology.getInstance().months().isSupported());\n+        assertEquals(true, CopticChronology.getInstance().weeks().isSupported());\n+        assertEquals(true, CopticChronology.getInstance().days().isSupported());\n+        assertEquals(true, CopticChronology.getInstance().halfdays().isSupported());\n+        assertEquals(true, CopticChronology.getInstance().hours().isSupported());\n+        assertEquals(true, CopticChronology.getInstance().minutes().isSupported());\n+        assertEquals(true, CopticChronology.getInstance().seconds().isSupported());\n+        assertEquals(true, CopticChronology.getInstance().millis().isSupported());\n+        \n+        assertEquals(false, CopticChronology.getInstance().centuries().isPrecise());\n+        assertEquals(false, CopticChronology.getInstance().years().isPrecise());\n+        assertEquals(false, CopticChronology.getInstance().weekyears().isPrecise());\n+        assertEquals(false, CopticChronology.getInstance().months().isPrecise());\n+        assertEquals(false, CopticChronology.getInstance().weeks().isPrecise());\n+        assertEquals(false, CopticChronology.getInstance().days().isPrecise());\n+        assertEquals(false, CopticChronology.getInstance().halfdays().isPrecise());\n+        assertEquals(true, CopticChronology.getInstance().hours().isPrecise());\n+        assertEquals(true, CopticChronology.getInstance().minutes().isPrecise());\n+        assertEquals(true, CopticChronology.getInstance().seconds().isPrecise());\n+        assertEquals(true, CopticChronology.getInstance().millis().isPrecise());\n+        \n+        assertEquals(false, CopticChronology.getInstanceUTC().centuries().isPrecise());\n+        assertEquals(false, CopticChronology.getInstanceUTC().years().isPrecise());\n+        assertEquals(false, CopticChronology.getInstanceUTC().weekyears().isPrecise());\n+        assertEquals(false, CopticChronology.getInstanceUTC().months().isPrecise());\n+        assertEquals(true, CopticChronology.getInstanceUTC().weeks().isPrecise());\n+        assertEquals(true, CopticChronology.getInstanceUTC().days().isPrecise());\n+        assertEquals(true, CopticChronology.getInstanceUTC().halfdays().isPrecise());\n+        assertEquals(true, CopticChronology.getInstanceUTC().hours().isPrecise());\n+        assertEquals(true, CopticChronology.getInstanceUTC().minutes().isPrecise());\n+        assertEquals(true, CopticChronology.getInstanceUTC().seconds().isPrecise());\n+        assertEquals(true, CopticChronology.getInstanceUTC().millis().isPrecise());\n+        \n+        DateTimeZone gmt = DateTimeZone.forID(\"Etc/GMT\");\n+        assertEquals(false, CopticChronology.getInstance(gmt).centuries().isPrecise());\n+        assertEquals(false, CopticChronology.getInstance(gmt).years().isPrecise());\n+        assertEquals(false, CopticChronology.getInstance(gmt).weekyears().isPrecise());\n+        assertEquals(false, CopticChronology.getInstance(gmt).months().isPrecise());\n+        assertEquals(true, CopticChronology.getInstance(gmt).weeks().isPrecise());\n+        assertEquals(true, CopticChronology.getInstance(gmt).days().isPrecise());\n+        assertEquals(true, CopticChronology.getInstance(gmt).halfdays().isPrecise());\n+        assertEquals(true, CopticChronology.getInstance(gmt).hours().isPrecise());\n+        assertEquals(true, CopticChronology.getInstance(gmt).minutes().isPrecise());\n+        assertEquals(true, CopticChronology.getInstance(gmt).seconds().isPrecise());\n+        assertEquals(true, CopticChronology.getInstance(gmt).millis().isPrecise());\n+    }\n+\n+    public void testDateFields() {\n+        assertEquals(\"era\", CopticChronology.getInstance().era().getName());\n+        assertEquals(\"centuryOfEra\", CopticChronology.getInstance().centuryOfEra().getName());\n+        assertEquals(\"yearOfCentury\", CopticChronology.getInstance().yearOfCentury().getName());\n+        assertEquals(\"yearOfEra\", CopticChronology.getInstance().yearOfEra().getName());\n+        assertEquals(\"year\", CopticChronology.getInstance().year().getName());\n+        assertEquals(\"monthOfYear\", CopticChronology.getInstance().monthOfYear().getName());\n+        assertEquals(\"weekyearOfCentury\", CopticChronology.getInstance().weekyearOfCentury().getName());\n+        assertEquals(\"weekyear\", CopticChronology.getInstance().weekyear().getName());\n+        assertEquals(\"weekOfWeekyear\", CopticChronology.getInstance().weekOfWeekyear().getName());\n+        assertEquals(\"dayOfYear\", CopticChronology.getInstance().dayOfYear().getName());\n+        assertEquals(\"dayOfMonth\", CopticChronology.getInstance().dayOfMonth().getName());\n+        assertEquals(\"dayOfWeek\", CopticChronology.getInstance().dayOfWeek().getName());\n+        \n+        assertEquals(true, CopticChronology.getInstance().era().isSupported());\n+        assertEquals(true, CopticChronology.getInstance().centuryOfEra().isSupported());\n+        assertEquals(true, CopticChronology.getInstance().yearOfCentury().isSupported());\n+        assertEquals(true, CopticChronology.getInstance().yearOfEra().isSupported());\n+        assertEquals(true, CopticChronology.getInstance().year().isSupported());\n+        assertEquals(true, CopticChronology.getInstance().monthOfYear().isSupported());\n+        assertEquals(true, CopticChronology.getInstance().weekyearOfCentury().isSupported());\n+        assertEquals(true, CopticChronology.getInstance().weekyear().isSupported());\n+        assertEquals(true, CopticChronology.getInstance().weekOfWeekyear().isSupported());\n+        assertEquals(true, CopticChronology.getInstance().dayOfYear().isSupported());\n+        assertEquals(true, CopticChronology.getInstance().dayOfMonth().isSupported());\n+        assertEquals(true, CopticChronology.getInstance().dayOfWeek().isSupported());\n+    }\n+\n+    public void testTimeFields() {\n+        assertEquals(\"halfdayOfDay\", CopticChronology.getInstance().halfdayOfDay().getName());\n+        assertEquals(\"clockhourOfHalfday\", CopticChronology.getInstance().clockhourOfHalfday().getName());\n+        assertEquals(\"hourOfHalfday\", CopticChronology.getInstance().hourOfHalfday().getName());\n+        assertEquals(\"clockhourOfDay\", CopticChronology.getInstance().clockhourOfDay().getName());\n+        assertEquals(\"hourOfDay\", CopticChronology.getInstance().hourOfDay().getName());\n+        assertEquals(\"minuteOfDay\", CopticChronology.getInstance().minuteOfDay().getName());\n+        assertEquals(\"minuteOfHour\", CopticChronology.getInstance().minuteOfHour().getName());\n+        assertEquals(\"secondOfDay\", CopticChronology.getInstance().secondOfDay().getName());\n+        assertEquals(\"secondOfMinute\", CopticChronology.getInstance().secondOfMinute().getName());\n+        assertEquals(\"millisOfDay\", CopticChronology.getInstance().millisOfDay().getName());\n+        assertEquals(\"millisOfSecond\", CopticChronology.getInstance().millisOfSecond().getName());\n+        \n+        assertEquals(true, CopticChronology.getInstance().halfdayOfDay().isSupported());\n+        assertEquals(true, CopticChronology.getInstance().clockhourOfHalfday().isSupported());\n+        assertEquals(true, CopticChronology.getInstance().hourOfHalfday().isSupported());\n+        assertEquals(true, CopticChronology.getInstance().clockhourOfDay().isSupported());\n+        assertEquals(true, CopticChronology.getInstance().hourOfDay().isSupported());\n+        assertEquals(true, CopticChronology.getInstance().minuteOfDay().isSupported());\n+        assertEquals(true, CopticChronology.getInstance().minuteOfHour().isSupported());\n+        assertEquals(true, CopticChronology.getInstance().secondOfDay().isSupported());\n+        assertEquals(true, CopticChronology.getInstance().secondOfMinute().isSupported());\n+        assertEquals(true, CopticChronology.getInstance().millisOfDay().isSupported());\n+        assertEquals(true, CopticChronology.getInstance().millisOfSecond().isSupported());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testEpoch() {\n+        DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, COPTIC_UTC);\n+        assertEquals(new DateTime(284, 8, 29, 0, 0, 0, 0, JULIAN_UTC), epoch.withChronology(JULIAN_UTC));\n+    }\n+\n+    public void testEra() {\n+        assertEquals(1, CopticChronology.AM);\n+        try {\n+            new DateTime(-1, 13, 5, 0, 0, 0, 0, COPTIC_UTC);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Tests era, year, monthOfYear, dayOfMonth and dayOfWeek.\n+     */\n+    public void testCalendar() {\n+        if (TestAll.FAST) {\n+            return;\n+        }\n+        System.out.println(\"\\nTestCopticChronology.testCalendar\");\n+        DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, COPTIC_UTC);\n+        long millis = epoch.getMillis();\n+        long end = new DateTime(3000, 1, 1, 0, 0, 0, 0, ISO_UTC).getMillis();\n+        DateTimeField dayOfWeek = COPTIC_UTC.dayOfWeek();\n+        DateTimeField dayOfYear = COPTIC_UTC.dayOfYear();\n+        DateTimeField dayOfMonth = COPTIC_UTC.dayOfMonth();\n+        DateTimeField monthOfYear = COPTIC_UTC.monthOfYear();\n+        DateTimeField year = COPTIC_UTC.year();\n+        DateTimeField yearOfEra = COPTIC_UTC.yearOfEra();\n+        DateTimeField era = COPTIC_UTC.era();\n+        int expectedDOW = new DateTime(284, 8, 29, 0, 0, 0, 0, JULIAN_UTC).getDayOfWeek();\n+        int expectedDOY = 1;\n+        int expectedDay = 1;\n+        int expectedMonth = 1;\n+        int expectedYear = 1;\n+        while (millis < end) {\n+            int dowValue = dayOfWeek.get(millis);\n+            int doyValue = dayOfYear.get(millis);\n+            int dayValue = dayOfMonth.get(millis);\n+            int monthValue = monthOfYear.get(millis);\n+            int yearValue = year.get(millis);\n+            int yearOfEraValue = yearOfEra.get(millis);\n+            int monthLen = dayOfMonth.getMaximumValue(millis);\n+            if (monthValue < 1 || monthValue > 13) {\n+                fail(\"Bad month: \" + millis);\n+            }\n+            \n+            // test era\n+            assertEquals(1, era.get(millis));\n+            assertEquals(\"AM\", era.getAsText(millis));\n+            assertEquals(\"AM\", era.getAsShortText(millis));\n+            \n+            // test date\n+            assertEquals(expectedYear, yearValue);\n+            assertEquals(expectedYear, yearOfEraValue);\n+            assertEquals(expectedMonth, monthValue);\n+            assertEquals(expectedDay, dayValue);\n+            assertEquals(expectedDOW, dowValue);\n+            assertEquals(expectedDOY, doyValue);\n+            \n+            // test leap year\n+            assertEquals(yearValue % 4 == 3, year.isLeap(millis));\n+            \n+            // test month length\n+            if (monthValue == 13) {\n+                assertEquals(yearValue % 4 == 3, monthOfYear.isLeap(millis));\n+                if (yearValue % 4 == 3) {\n+                    assertEquals(6, monthLen);\n+                } else {\n+                    assertEquals(5, monthLen);\n+                }\n+            } else {\n+                assertEquals(30, monthLen);\n+            }\n+            \n+            // recalculate date\n+            expectedDOW = (((expectedDOW + 1) - 1) % 7) + 1;\n+            expectedDay++;\n+            expectedDOY++;\n+            if (expectedDay == 31 && expectedMonth < 13) {\n+                expectedDay = 1;\n+                expectedMonth++;\n+            } else if (expectedMonth == 13) {\n+                if (expectedYear % 4 == 3 && expectedDay == 7) {\n+                    expectedDay = 1;\n+                    expectedMonth = 1;\n+                    expectedYear++;\n+                    expectedDOY = 1;\n+                } else if (expectedYear % 4 != 3 && expectedDay == 6) {\n+                    expectedDay = 1;\n+                    expectedMonth = 1;\n+                    expectedYear++;\n+                    expectedDOY = 1;\n+                }\n+            }\n+            millis += SKIP;\n+        }\n+    }\n+\n+    public void testSampleDate() {\n+        DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, ISO_UTC).withChronology(COPTIC_UTC);\n+        assertEquals(CopticChronology.AM, dt.getEra());\n+        assertEquals(18, dt.getCenturyOfEra());  // TODO confirm\n+        assertEquals(20, dt.getYearOfCentury());\n+        assertEquals(1720, dt.getYearOfEra());\n+        \n+        assertEquals(1720, dt.getYear());\n+        Property fld = dt.year();\n+        assertEquals(false, fld.isLeap());\n+        assertEquals(0, fld.getLeapAmount());\n+        assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType());\n+        assertEquals(new DateTime(1721, 10, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1));\n+        \n+        assertEquals(10, dt.getMonthOfYear());\n+        fld = dt.monthOfYear();\n+        assertEquals(false, fld.isLeap());\n+        assertEquals(0, fld.getLeapAmount());\n+        assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType());\n+        assertEquals(1, fld.getMinimumValue());\n+        assertEquals(1, fld.getMinimumValueOverall());\n+        assertEquals(13, fld.getMaximumValue());\n+        assertEquals(13, fld.getMaximumValueOverall());\n+        assertEquals(new DateTime(1721, 1, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(4));\n+        assertEquals(new DateTime(1720, 1, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addWrapFieldToCopy(4));\n+        \n+        assertEquals(2, dt.getDayOfMonth());\n+        fld = dt.dayOfMonth();\n+        assertEquals(false, fld.isLeap());\n+        assertEquals(0, fld.getLeapAmount());\n+        assertEquals(null, fld.getLeapDurationField());\n+        assertEquals(1, fld.getMinimumValue());\n+        assertEquals(1, fld.getMinimumValueOverall());\n+        assertEquals(30, fld.getMaximumValue());\n+        assertEquals(30, fld.getMaximumValueOverall());\n+        assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1));\n+        \n+        assertEquals(DateTimeConstants.WEDNESDAY, dt.getDayOfWeek());\n+        fld = dt.dayOfWeek();\n+        assertEquals(false, fld.isLeap());\n+        assertEquals(0, fld.getLeapAmount());\n+        assertEquals(null, fld.getLeapDurationField());\n+        assertEquals(1, fld.getMinimumValue());\n+        assertEquals(1, fld.getMinimumValueOverall());\n+        assertEquals(7, fld.getMaximumValue());\n+        assertEquals(7, fld.getMaximumValueOverall());\n+        assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1));\n+        \n+        assertEquals(9 * 30 + 2, dt.getDayOfYear());\n+        fld = dt.dayOfYear();\n+        assertEquals(false, fld.isLeap());\n+        assertEquals(0, fld.getLeapAmount());\n+        assertEquals(null, fld.getLeapDurationField());\n+        assertEquals(1, fld.getMinimumValue());\n+        assertEquals(1, fld.getMinimumValueOverall());\n+        assertEquals(365, fld.getMaximumValue());\n+        assertEquals(366, fld.getMaximumValueOverall());\n+        assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1));\n+        \n+        assertEquals(0, dt.getHourOfDay());\n+        assertEquals(0, dt.getMinuteOfHour());\n+        assertEquals(0, dt.getSecondOfMinute());\n+        assertEquals(0, dt.getMillisOfSecond());\n+    }\n+\n+    public void testSampleDateWithZone() {\n+        DateTime dt = new DateTime(2004, 6, 9, 12, 0, 0, 0, PARIS).withChronology(COPTIC_UTC);\n+        assertEquals(CopticChronology.AM, dt.getEra());\n+        assertEquals(1720, dt.getYear());\n+        assertEquals(1720, dt.getYearOfEra());\n+        assertEquals(10, dt.getMonthOfYear());\n+        assertEquals(2, dt.getDayOfMonth());\n+        assertEquals(10, dt.getHourOfDay());  // PARIS is UTC+2 in summer (12-2=10)\n+        assertEquals(0, dt.getMinuteOfHour());\n+        assertEquals(0, dt.getSecondOfMinute());\n+        assertEquals(0, dt.getMillisOfSecond());\n+    }\n+\n+    public void testDurationYear() {\n+        // Leap 1723\n+        DateTime dt20 = new DateTime(1720, 10, 2, 0, 0, 0, 0, COPTIC_UTC);\n+        DateTime dt21 = new DateTime(1721, 10, 2, 0, 0, 0, 0, COPTIC_UTC);\n+        DateTime dt22 = new DateTime(1722, 10, 2, 0, 0, 0, 0, COPTIC_UTC);\n+        DateTime dt23 = new DateTime(1723, 10, 2, 0, 0, 0, 0, COPTIC_UTC);\n+        DateTime dt24 = new DateTime(1724, 10, 2, 0, 0, 0, 0, COPTIC_UTC);\n+        \n+        DurationField fld = dt20.year().getDurationField();\n+        assertEquals(COPTIC_UTC.years(), fld);\n+        assertEquals(1L * 365L * MILLIS_PER_DAY, fld.getMillis(1, dt20.getMillis()));\n+        assertEquals(2L * 365L * MILLIS_PER_DAY, fld.getMillis(2, dt20.getMillis()));\n+        assertEquals(3L * 365L * MILLIS_PER_DAY, fld.getMillis(3, dt20.getMillis()));\n+        assertEquals((4L * 365L + 1L) * MILLIS_PER_DAY, fld.getMillis(4, dt20.getMillis()));\n+        \n+        assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getMillis(1));\n+        assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 2, fld.getMillis(2));\n+        \n+        assertEquals(1L * 365L * MILLIS_PER_DAY, fld.getMillis(1L, dt20.getMillis()));\n+        assertEquals(2L * 365L * MILLIS_PER_DAY, fld.getMillis(2L, dt20.getMillis()));\n+        assertEquals(3L * 365L * MILLIS_PER_DAY, fld.getMillis(3L, dt20.getMillis()));\n+        assertEquals((4L * 365L + 1L) * MILLIS_PER_DAY, fld.getMillis(4L, dt20.getMillis()));\n+        \n+        assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getMillis(1L));\n+        assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 2, fld.getMillis(2L));\n+        \n+        assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getUnitMillis());\n+        \n+        assertEquals(0, fld.getValue(1L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis()));\n+        assertEquals(1, fld.getValue(1L * 365L * MILLIS_PER_DAY, dt20.getMillis()));\n+        assertEquals(1, fld.getValue(1L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis()));\n+        assertEquals(1, fld.getValue(2L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis()));\n+        assertEquals(2, fld.getValue(2L * 365L * MILLIS_PER_DAY, dt20.getMillis()));\n+        assertEquals(2, fld.getValue(2L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis()));\n+        assertEquals(2, fld.getValue(3L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis()));\n+        assertEquals(3, fld.getValue(3L * 365L * MILLIS_PER_DAY, dt20.getMillis()));\n+        assertEquals(3, fld.getValue(3L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis()));\n+        assertEquals(3, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY - 1L, dt20.getMillis()));\n+        assertEquals(4, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY, dt20.getMillis()));\n+        assertEquals(4, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY + 1L, dt20.getMillis()));\n+        \n+        assertEquals(dt21.getMillis(), fld.add(dt20.getMillis(), 1));\n+        assertEquals(dt22.getMillis(), fld.add(dt20.getMillis(), 2));\n+        assertEquals(dt23.getMillis(), fld.add(dt20.getMillis(), 3));\n+        assertEquals(dt24.getMillis(), fld.add(dt20.getMillis(), 4));\n+        \n+        assertEquals(dt21.getMillis(), fld.add(dt20.getMillis(), 1L));\n+        assertEquals(dt22.getMillis(), fld.add(dt20.getMillis(), 2L));\n+        assertEquals(dt23.getMillis(), fld.add(dt20.getMillis(), 3L));\n+        assertEquals(dt24.getMillis(), fld.add(dt20.getMillis(), 4L));\n+    }\n+\n+    public void testDurationMonth() {\n+        // Leap 1723\n+        DateTime dt11 = new DateTime(1723, 11, 2, 0, 0, 0, 0, COPTIC_UTC);\n+        DateTime dt12 = new DateTime(1723, 12, 2, 0, 0, 0, 0, COPTIC_UTC);\n+        DateTime dt13 = new DateTime(1723, 13, 2, 0, 0, 0, 0, COPTIC_UTC);\n+        DateTime dt01 = new DateTime(1724, 1, 2, 0, 0, 0, 0, COPTIC_UTC);\n+        \n+        DurationField fld = dt11.monthOfYear().getDurationField();\n+        assertEquals(COPTIC_UTC.months(), fld);\n+        assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1, dt11.getMillis()));\n+        assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2, dt11.getMillis()));\n+        assertEquals((2L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(3, dt11.getMillis()));\n+        assertEquals((3L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(4, dt11.getMillis()));\n+        \n+        assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1));\n+        assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2));\n+        assertEquals(13L * 30L * MILLIS_PER_DAY, fld.getMillis(13));\n+        \n+        assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1L, dt11.getMillis()));\n+        assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2L, dt11.getMillis()));\n+        assertEquals((2L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(3L, dt11.getMillis()));\n+        assertEquals((3L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(4L, dt11.getMillis()));\n+        \n+        assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1L));\n+        assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2L));\n+        assertEquals(13L * 30L * MILLIS_PER_DAY, fld.getMillis(13L));\n+        \n+        assertEquals(0, fld.getValue(1L * 30L * MILLIS_PER_DAY - 1L, dt11.getMillis()));\n+        assertEquals(1, fld.getValue(1L * 30L * MILLIS_PER_DAY, dt11.getMillis()));\n+        assertEquals(1, fld.getValue(1L * 30L * MILLIS_PER_DAY + 1L, dt11.getMillis()));\n+        assertEquals(1, fld.getValue(2L * 30L * MILLIS_PER_DAY - 1L, dt11.getMillis()));\n+        assertEquals(2, fld.getValue(2L * 30L * MILLIS_PER_DAY, dt11.getMillis()));\n+        assertEquals(2, fld.getValue(2L * 30L * MILLIS_PER_DAY + 1L, dt11.getMillis()));\n+        assertEquals(2, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY - 1L, dt11.getMillis()));\n+        assertEquals(3, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY, dt11.getMillis()));\n+        assertEquals(3, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY + 1L, dt11.getMillis()));\n+        assertEquals(3, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY - 1L, dt11.getMillis()));\n+        assertEquals(4, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY, dt11.getMillis()));\n+        assertEquals(4, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY + 1L, dt11.getMillis()));\n+        \n+        assertEquals(dt12.getMillis(), fld.add(dt11.getMillis(), 1));\n+        assertEquals(dt13.getMillis(), fld.add(dt11.getMillis(), 2));\n+        assertEquals(dt01.getMillis(), fld.add(dt11.getMillis(), 3));\n+        \n+        assertEquals(dt12.getMillis(), fld.add(dt11.getMillis(), 1L));\n+        assertEquals(dt13.getMillis(), fld.add(dt11.getMillis(), 2L));\n+        assertEquals(dt01.getMillis(), fld.add(dt11.getMillis(), 3L));\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/chrono/TestEthiopicChronology.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.chrono;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeField;\n+import org.joda.time.DateTimeUtils;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.DurationField;\n+import org.joda.time.DurationFieldType;\n+import org.joda.time.DateTime.Property;\n+\n+/**\n+ * This class is a Junit unit test for EthiopicChronology.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestEthiopicChronology extends TestCase {\n+\n+    private static final int MILLIS_PER_DAY = DateTimeConstants.MILLIS_PER_DAY;\n+\n+    private static long SKIP = 1 * MILLIS_PER_DAY;\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    private static final Chronology ETHIOPIC_UTC = EthiopicChronology.getInstanceUTC();\n+    private static final Chronology JULIAN_UTC = JulianChronology.getInstanceUTC();\n+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+\n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * MILLIS_PER_DAY;\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        SKIP = 1 * MILLIS_PER_DAY;\n+        return new TestSuite(TestEthiopicChronology.class);\n+    }\n+\n+    public TestEthiopicChronology(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactoryUTC() {\n+        assertEquals(DateTimeZone.UTC, EthiopicChronology.getInstanceUTC().getZone());\n+        assertSame(EthiopicChronology.class, EthiopicChronology.getInstanceUTC().getClass());\n+    }\n+\n+    public void testFactory() {\n+        assertEquals(LONDON, EthiopicChronology.getInstance().getZone());\n+        assertSame(EthiopicChronology.class, EthiopicChronology.getInstance().getClass());\n+    }\n+\n+    public void testFactory_Zone() {\n+        assertEquals(TOKYO, EthiopicChronology.getInstance(TOKYO).getZone());\n+        assertEquals(PARIS, EthiopicChronology.getInstance(PARIS).getZone());\n+        assertEquals(LONDON, EthiopicChronology.getInstance(null).getZone());\n+        assertSame(EthiopicChronology.class, EthiopicChronology.getInstance(TOKYO).getClass());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testEquality() {\n+        assertSame(EthiopicChronology.getInstance(TOKYO), EthiopicChronology.getInstance(TOKYO));\n+        assertSame(EthiopicChronology.getInstance(LONDON), EthiopicChronology.getInstance(LONDON));\n+        assertSame(EthiopicChronology.getInstance(PARIS), EthiopicChronology.getInstance(PARIS));\n+        assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstanceUTC());\n+        assertSame(EthiopicChronology.getInstance(), EthiopicChronology.getInstance(LONDON));\n+    }\n+\n+    public void testWithUTC() {\n+        assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance(LONDON).withUTC());\n+        assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance(TOKYO).withUTC());\n+        assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstanceUTC().withUTC());\n+        assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance().withUTC());\n+    }\n+\n+    public void testWithZone() {\n+        assertSame(EthiopicChronology.getInstance(TOKYO), EthiopicChronology.getInstance(TOKYO).withZone(TOKYO));\n+        assertSame(EthiopicChronology.getInstance(LONDON), EthiopicChronology.getInstance(TOKYO).withZone(LONDON));\n+        assertSame(EthiopicChronology.getInstance(PARIS), EthiopicChronology.getInstance(TOKYO).withZone(PARIS));\n+        assertSame(EthiopicChronology.getInstance(LONDON), EthiopicChronology.getInstance(TOKYO).withZone(null));\n+        assertSame(EthiopicChronology.getInstance(PARIS), EthiopicChronology.getInstance().withZone(PARIS));\n+        assertSame(EthiopicChronology.getInstance(PARIS), EthiopicChronology.getInstanceUTC().withZone(PARIS));\n+    }\n+\n+    public void testToString() {\n+        assertEquals(\"EthiopicChronology[Europe/London]\", EthiopicChronology.getInstance(LONDON).toString());\n+        assertEquals(\"EthiopicChronology[Asia/Tokyo]\", EthiopicChronology.getInstance(TOKYO).toString());\n+        assertEquals(\"EthiopicChronology[Europe/London]\", EthiopicChronology.getInstance().toString());\n+        assertEquals(\"EthiopicChronology[UTC]\", EthiopicChronology.getInstanceUTC().toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testDurationFields() {\n+        assertEquals(\"eras\", EthiopicChronology.getInstance().eras().getName());\n+        assertEquals(\"centuries\", EthiopicChronology.getInstance().centuries().getName());\n+        assertEquals(\"years\", EthiopicChronology.getInstance().years().getName());\n+        assertEquals(\"weekyears\", EthiopicChronology.getInstance().weekyears().getName());\n+        assertEquals(\"months\", EthiopicChronology.getInstance().months().getName());\n+        assertEquals(\"weeks\", EthiopicChronology.getInstance().weeks().getName());\n+        assertEquals(\"days\", EthiopicChronology.getInstance().days().getName());\n+        assertEquals(\"halfdays\", EthiopicChronology.getInstance().halfdays().getName());\n+        assertEquals(\"hours\", EthiopicChronology.getInstance().hours().getName());\n+        assertEquals(\"minutes\", EthiopicChronology.getInstance().minutes().getName());\n+        assertEquals(\"seconds\", EthiopicChronology.getInstance().seconds().getName());\n+        assertEquals(\"millis\", EthiopicChronology.getInstance().millis().getName());\n+        \n+        assertEquals(false, EthiopicChronology.getInstance().eras().isSupported());\n+        assertEquals(true, EthiopicChronology.getInstance().centuries().isSupported());\n+        assertEquals(true, EthiopicChronology.getInstance().years().isSupported());\n+        assertEquals(true, EthiopicChronology.getInstance().weekyears().isSupported());\n+        assertEquals(true, EthiopicChronology.getInstance().months().isSupported());\n+        assertEquals(true, EthiopicChronology.getInstance().weeks().isSupported());\n+        assertEquals(true, EthiopicChronology.getInstance().days().isSupported());\n+        assertEquals(true, EthiopicChronology.getInstance().halfdays().isSupported());\n+        assertEquals(true, EthiopicChronology.getInstance().hours().isSupported());\n+        assertEquals(true, EthiopicChronology.getInstance().minutes().isSupported());\n+        assertEquals(true, EthiopicChronology.getInstance().seconds().isSupported());\n+        assertEquals(true, EthiopicChronology.getInstance().millis().isSupported());\n+        \n+        assertEquals(false, EthiopicChronology.getInstance().centuries().isPrecise());\n+        assertEquals(false, EthiopicChronology.getInstance().years().isPrecise());\n+        assertEquals(false, EthiopicChronology.getInstance().weekyears().isPrecise());\n+        assertEquals(false, EthiopicChronology.getInstance().months().isPrecise());\n+        assertEquals(false, EthiopicChronology.getInstance().weeks().isPrecise());\n+        assertEquals(false, EthiopicChronology.getInstance().days().isPrecise());\n+        assertEquals(false, EthiopicChronology.getInstance().halfdays().isPrecise());\n+        assertEquals(true, EthiopicChronology.getInstance().hours().isPrecise());\n+        assertEquals(true, EthiopicChronology.getInstance().minutes().isPrecise());\n+        assertEquals(true, EthiopicChronology.getInstance().seconds().isPrecise());\n+        assertEquals(true, EthiopicChronology.getInstance().millis().isPrecise());\n+        \n+        assertEquals(false, EthiopicChronology.getInstanceUTC().centuries().isPrecise());\n+        assertEquals(false, EthiopicChronology.getInstanceUTC().years().isPrecise());\n+        assertEquals(false, EthiopicChronology.getInstanceUTC().weekyears().isPrecise());\n+        assertEquals(false, EthiopicChronology.getInstanceUTC().months().isPrecise());\n+        assertEquals(true, EthiopicChronology.getInstanceUTC().weeks().isPrecise());\n+        assertEquals(true, EthiopicChronology.getInstanceUTC().days().isPrecise());\n+        assertEquals(true, EthiopicChronology.getInstanceUTC().halfdays().isPrecise());\n+        assertEquals(true, EthiopicChronology.getInstanceUTC().hours().isPrecise());\n+        assertEquals(true, EthiopicChronology.getInstanceUTC().minutes().isPrecise());\n+        assertEquals(true, EthiopicChronology.getInstanceUTC().seconds().isPrecise());\n+        assertEquals(true, EthiopicChronology.getInstanceUTC().millis().isPrecise());\n+        \n+        DateTimeZone gmt = DateTimeZone.forID(\"Etc/GMT\");\n+        assertEquals(false, EthiopicChronology.getInstance(gmt).centuries().isPrecise());\n+        assertEquals(false, EthiopicChronology.getInstance(gmt).years().isPrecise());\n+        assertEquals(false, EthiopicChronology.getInstance(gmt).weekyears().isPrecise());\n+        assertEquals(false, EthiopicChronology.getInstance(gmt).months().isPrecise());\n+        assertEquals(true, EthiopicChronology.getInstance(gmt).weeks().isPrecise());\n+        assertEquals(true, EthiopicChronology.getInstance(gmt).days().isPrecise());\n+        assertEquals(true, EthiopicChronology.getInstance(gmt).halfdays().isPrecise());\n+        assertEquals(true, EthiopicChronology.getInstance(gmt).hours().isPrecise());\n+        assertEquals(true, EthiopicChronology.getInstance(gmt).minutes().isPrecise());\n+        assertEquals(true, EthiopicChronology.getInstance(gmt).seconds().isPrecise());\n+        assertEquals(true, EthiopicChronology.getInstance(gmt).millis().isPrecise());\n+    }\n+\n+    public void testDateFields() {\n+        assertEquals(\"era\", EthiopicChronology.getInstance().era().getName());\n+        assertEquals(\"centuryOfEra\", EthiopicChronology.getInstance().centuryOfEra().getName());\n+        assertEquals(\"yearOfCentury\", EthiopicChronology.getInstance().yearOfCentury().getName());\n+        assertEquals(\"yearOfEra\", EthiopicChronology.getInstance().yearOfEra().getName());\n+        assertEquals(\"year\", EthiopicChronology.getInstance().year().getName());\n+        assertEquals(\"monthOfYear\", EthiopicChronology.getInstance().monthOfYear().getName());\n+        assertEquals(\"weekyearOfCentury\", EthiopicChronology.getInstance().weekyearOfCentury().getName());\n+        assertEquals(\"weekyear\", EthiopicChronology.getInstance().weekyear().getName());\n+        assertEquals(\"weekOfWeekyear\", EthiopicChronology.getInstance().weekOfWeekyear().getName());\n+        assertEquals(\"dayOfYear\", EthiopicChronology.getInstance().dayOfYear().getName());\n+        assertEquals(\"dayOfMonth\", EthiopicChronology.getInstance().dayOfMonth().getName());\n+        assertEquals(\"dayOfWeek\", EthiopicChronology.getInstance().dayOfWeek().getName());\n+        \n+        assertEquals(true, EthiopicChronology.getInstance().era().isSupported());\n+        assertEquals(true, EthiopicChronology.getInstance().centuryOfEra().isSupported());\n+        assertEquals(true, EthiopicChronology.getInstance().yearOfCentury().isSupported());\n+        assertEquals(true, EthiopicChronology.getInstance().yearOfEra().isSupported());\n+        assertEquals(true, EthiopicChronology.getInstance().year().isSupported());\n+        assertEquals(true, EthiopicChronology.getInstance().monthOfYear().isSupported());\n+        assertEquals(true, EthiopicChronology.getInstance().weekyearOfCentury().isSupported());\n+        assertEquals(true, EthiopicChronology.getInstance().weekyear().isSupported());\n+        assertEquals(true, EthiopicChronology.getInstance().weekOfWeekyear().isSupported());\n+        assertEquals(true, EthiopicChronology.getInstance().dayOfYear().isSupported());\n+        assertEquals(true, EthiopicChronology.getInstance().dayOfMonth().isSupported());\n+        assertEquals(true, EthiopicChronology.getInstance().dayOfWeek().isSupported());\n+    }\n+\n+    public void testTimeFields() {\n+        assertEquals(\"halfdayOfDay\", EthiopicChronology.getInstance().halfdayOfDay().getName());\n+        assertEquals(\"clockhourOfHalfday\", EthiopicChronology.getInstance().clockhourOfHalfday().getName());\n+        assertEquals(\"hourOfHalfday\", EthiopicChronology.getInstance().hourOfHalfday().getName());\n+        assertEquals(\"clockhourOfDay\", EthiopicChronology.getInstance().clockhourOfDay().getName());\n+        assertEquals(\"hourOfDay\", EthiopicChronology.getInstance().hourOfDay().getName());\n+        assertEquals(\"minuteOfDay\", EthiopicChronology.getInstance().minuteOfDay().getName());\n+        assertEquals(\"minuteOfHour\", EthiopicChronology.getInstance().minuteOfHour().getName());\n+        assertEquals(\"secondOfDay\", EthiopicChronology.getInstance().secondOfDay().getName());\n+        assertEquals(\"secondOfMinute\", EthiopicChronology.getInstance().secondOfMinute().getName());\n+        assertEquals(\"millisOfDay\", EthiopicChronology.getInstance().millisOfDay().getName());\n+        assertEquals(\"millisOfSecond\", EthiopicChronology.getInstance().millisOfSecond().getName());\n+        \n+        assertEquals(true, EthiopicChronology.getInstance().halfdayOfDay().isSupported());\n+        assertEquals(true, EthiopicChronology.getInstance().clockhourOfHalfday().isSupported());\n+        assertEquals(true, EthiopicChronology.getInstance().hourOfHalfday().isSupported());\n+        assertEquals(true, EthiopicChronology.getInstance().clockhourOfDay().isSupported());\n+        assertEquals(true, EthiopicChronology.getInstance().hourOfDay().isSupported());\n+        assertEquals(true, EthiopicChronology.getInstance().minuteOfDay().isSupported());\n+        assertEquals(true, EthiopicChronology.getInstance().minuteOfHour().isSupported());\n+        assertEquals(true, EthiopicChronology.getInstance().secondOfDay().isSupported());\n+        assertEquals(true, EthiopicChronology.getInstance().secondOfMinute().isSupported());\n+        assertEquals(true, EthiopicChronology.getInstance().millisOfDay().isSupported());\n+        assertEquals(true, EthiopicChronology.getInstance().millisOfSecond().isSupported());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testEpoch() {\n+        DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ETHIOPIC_UTC);\n+        assertEquals(new DateTime(8, 8, 29, 0, 0, 0, 0, JULIAN_UTC), epoch.withChronology(JULIAN_UTC));\n+    }\n+\n+    public void testEra() {\n+        assertEquals(1, EthiopicChronology.EE);\n+        try {\n+            new DateTime(-1, 13, 5, 0, 0, 0, 0, ETHIOPIC_UTC);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Tests era, year, monthOfYear, dayOfMonth and dayOfWeek.\n+     */\n+    public void testCalendar() {\n+        if (TestAll.FAST) {\n+            return;\n+        }\n+        System.out.println(\"\\nTestEthiopicChronology.testCalendar\");\n+        DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ETHIOPIC_UTC);\n+        long millis = epoch.getMillis();\n+        long end = new DateTime(3000, 1, 1, 0, 0, 0, 0, ISO_UTC).getMillis();\n+        DateTimeField dayOfWeek = ETHIOPIC_UTC.dayOfWeek();\n+        DateTimeField dayOfYear = ETHIOPIC_UTC.dayOfYear();\n+        DateTimeField dayOfMonth = ETHIOPIC_UTC.dayOfMonth();\n+        DateTimeField monthOfYear = ETHIOPIC_UTC.monthOfYear();\n+        DateTimeField year = ETHIOPIC_UTC.year();\n+        DateTimeField yearOfEra = ETHIOPIC_UTC.yearOfEra();\n+        DateTimeField era = ETHIOPIC_UTC.era();\n+        int expectedDOW = new DateTime(8, 8, 29, 0, 0, 0, 0, JULIAN_UTC).getDayOfWeek();\n+        int expectedDOY = 1;\n+        int expectedDay = 1;\n+        int expectedMonth = 1;\n+        int expectedYear = 1;\n+        while (millis < end) {\n+            int dowValue = dayOfWeek.get(millis);\n+            int doyValue = dayOfYear.get(millis);\n+            int dayValue = dayOfMonth.get(millis);\n+            int monthValue = monthOfYear.get(millis);\n+            int yearValue = year.get(millis);\n+            int yearOfEraValue = yearOfEra.get(millis);\n+            int monthLen = dayOfMonth.getMaximumValue(millis);\n+            if (monthValue < 1 || monthValue > 13) {\n+                fail(\"Bad month: \" + millis);\n+            }\n+            \n+            // test era\n+            assertEquals(1, era.get(millis));\n+            assertEquals(\"EE\", era.getAsText(millis));\n+            assertEquals(\"EE\", era.getAsShortText(millis));\n+            \n+            // test date\n+            assertEquals(expectedYear, yearValue);\n+            assertEquals(expectedYear, yearOfEraValue);\n+            assertEquals(expectedMonth, monthValue);\n+            assertEquals(expectedDay, dayValue);\n+            assertEquals(expectedDOW, dowValue);\n+            assertEquals(expectedDOY, doyValue);\n+            \n+            // test leap year\n+            assertEquals(yearValue % 4 == 3, year.isLeap(millis));\n+            \n+            // test month length\n+            if (monthValue == 13) {\n+                assertEquals(yearValue % 4 == 3, monthOfYear.isLeap(millis));\n+                if (yearValue % 4 == 3) {\n+                    assertEquals(6, monthLen);\n+                } else {\n+                    assertEquals(5, monthLen);\n+                }\n+            } else {\n+                assertEquals(30, monthLen);\n+            }\n+            \n+            // recalculate date\n+            expectedDOW = (((expectedDOW + 1) - 1) % 7) + 1;\n+            expectedDay++;\n+            expectedDOY++;\n+            if (expectedDay == 31 && expectedMonth < 13) {\n+                expectedDay = 1;\n+                expectedMonth++;\n+            } else if (expectedMonth == 13) {\n+                if (expectedYear % 4 == 3 && expectedDay == 7) {\n+                    expectedDay = 1;\n+                    expectedMonth = 1;\n+                    expectedYear++;\n+                    expectedDOY = 1;\n+                } else if (expectedYear % 4 != 3 && expectedDay == 6) {\n+                    expectedDay = 1;\n+                    expectedMonth = 1;\n+                    expectedYear++;\n+                    expectedDOY = 1;\n+                }\n+            }\n+            millis += SKIP;\n+        }\n+    }\n+\n+    public void testSampleDate() {\n+        DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, ISO_UTC).withChronology(ETHIOPIC_UTC);\n+        assertEquals(EthiopicChronology.EE, dt.getEra());\n+        assertEquals(20, dt.getCenturyOfEra());  // TODO confirm\n+        assertEquals(96, dt.getYearOfCentury());\n+        assertEquals(1996, dt.getYearOfEra());\n+        \n+        assertEquals(1996, dt.getYear());\n+        Property fld = dt.year();\n+        assertEquals(false, fld.isLeap());\n+        assertEquals(0, fld.getLeapAmount());\n+        assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType());\n+        assertEquals(new DateTime(1997, 10, 2, 0, 0, 0, 0, ETHIOPIC_UTC), fld.addToCopy(1));\n+        \n+        assertEquals(10, dt.getMonthOfYear());\n+        fld = dt.monthOfYear();\n+        assertEquals(false, fld.isLeap());\n+        assertEquals(0, fld.getLeapAmount());\n+        assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType());\n+        assertEquals(1, fld.getMinimumValue());\n+        assertEquals(1, fld.getMinimumValueOverall());\n+        assertEquals(13, fld.getMaximumValue());\n+        assertEquals(13, fld.getMaximumValueOverall());\n+        assertEquals(new DateTime(1997, 1, 2, 0, 0, 0, 0, ETHIOPIC_UTC), fld.addToCopy(4));\n+        assertEquals(new DateTime(1996, 1, 2, 0, 0, 0, 0, ETHIOPIC_UTC), fld.addWrapFieldToCopy(4));\n+        \n+        assertEquals(2, dt.getDayOfMonth());\n+        fld = dt.dayOfMonth();\n+        assertEquals(false, fld.isLeap());\n+        assertEquals(0, fld.getLeapAmount());\n+        assertEquals(null, fld.getLeapDurationField());\n+        assertEquals(1, fld.getMinimumValue());\n+        assertEquals(1, fld.getMinimumValueOverall());\n+        assertEquals(30, fld.getMaximumValue());\n+        assertEquals(30, fld.getMaximumValueOverall());\n+        assertEquals(new DateTime(1996, 10, 3, 0, 0, 0, 0, ETHIOPIC_UTC), fld.addToCopy(1));\n+        \n+        assertEquals(DateTimeConstants.WEDNESDAY, dt.getDayOfWeek());\n+        fld = dt.dayOfWeek();\n+        assertEquals(false, fld.isLeap());\n+        assertEquals(0, fld.getLeapAmount());\n+        assertEquals(null, fld.getLeapDurationField());\n+        assertEquals(1, fld.getMinimumValue());\n+        assertEquals(1, fld.getMinimumValueOverall());\n+        assertEquals(7, fld.getMaximumValue());\n+        assertEquals(7, fld.getMaximumValueOverall());\n+        assertEquals(new DateTime(1996, 10, 3, 0, 0, 0, 0, ETHIOPIC_UTC), fld.addToCopy(1));\n+        \n+        assertEquals(9 * 30 + 2, dt.getDayOfYear());\n+        fld = dt.dayOfYear();\n+        assertEquals(false, fld.isLeap());\n+        assertEquals(0, fld.getLeapAmount());\n+        assertEquals(null, fld.getLeapDurationField());\n+        assertEquals(1, fld.getMinimumValue());\n+        assertEquals(1, fld.getMinimumValueOverall());\n+        assertEquals(365, fld.getMaximumValue());\n+        assertEquals(366, fld.getMaximumValueOverall());\n+        assertEquals(new DateTime(1996, 10, 3, 0, 0, 0, 0, ETHIOPIC_UTC), fld.addToCopy(1));\n+        \n+        assertEquals(0, dt.getHourOfDay());\n+        assertEquals(0, dt.getMinuteOfHour());\n+        assertEquals(0, dt.getSecondOfMinute());\n+        assertEquals(0, dt.getMillisOfSecond());\n+    }\n+\n+    public void testSampleDateWithZone() {\n+        DateTime dt = new DateTime(2004, 6, 9, 12, 0, 0, 0, PARIS).withChronology(ETHIOPIC_UTC);\n+        assertEquals(EthiopicChronology.EE, dt.getEra());\n+        assertEquals(1996, dt.getYear());\n+        assertEquals(1996, dt.getYearOfEra());\n+        assertEquals(10, dt.getMonthOfYear());\n+        assertEquals(2, dt.getDayOfMonth());\n+        assertEquals(10, dt.getHourOfDay());  // PARIS is UTC+2 in summer (12-2=10)\n+        assertEquals(0, dt.getMinuteOfHour());\n+        assertEquals(0, dt.getSecondOfMinute());\n+        assertEquals(0, dt.getMillisOfSecond());\n+    }\n+\n+    public void testDurationYear() {\n+        // Leap 1999, NotLeap 1996,97,98\n+        DateTime dt96 = new DateTime(1996, 10, 2, 0, 0, 0, 0, ETHIOPIC_UTC);\n+        DateTime dt97 = new DateTime(1997, 10, 2, 0, 0, 0, 0, ETHIOPIC_UTC);\n+        DateTime dt98 = new DateTime(1998, 10, 2, 0, 0, 0, 0, ETHIOPIC_UTC);\n+        DateTime dt99 = new DateTime(1999, 10, 2, 0, 0, 0, 0, ETHIOPIC_UTC);\n+        DateTime dt00 = new DateTime(2000, 10, 2, 0, 0, 0, 0, ETHIOPIC_UTC);\n+        \n+        DurationField fld = dt96.year().getDurationField();\n+        assertEquals(ETHIOPIC_UTC.years(), fld);\n+        assertEquals(1L * 365L * MILLIS_PER_DAY, fld.getMillis(1, dt96.getMillis()));\n+        assertEquals(2L * 365L * MILLIS_PER_DAY, fld.getMillis(2, dt96.getMillis()));\n+        assertEquals(3L * 365L * MILLIS_PER_DAY, fld.getMillis(3, dt96.getMillis()));\n+        assertEquals((4L * 365L + 1L) * MILLIS_PER_DAY, fld.getMillis(4, dt96.getMillis()));\n+        \n+        assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getMillis(1));\n+        assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 2, fld.getMillis(2));\n+        \n+        assertEquals(1L * 365L * MILLIS_PER_DAY, fld.getMillis(1L, dt96.getMillis()));\n+        assertEquals(2L * 365L * MILLIS_PER_DAY, fld.getMillis(2L, dt96.getMillis()));\n+        assertEquals(3L * 365L * MILLIS_PER_DAY, fld.getMillis(3L, dt96.getMillis()));\n+        assertEquals((4L * 365L + 1L) * MILLIS_PER_DAY, fld.getMillis(4L, dt96.getMillis()));\n+        \n+        assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getMillis(1L));\n+        assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 2, fld.getMillis(2L));\n+        \n+        assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getUnitMillis());\n+        \n+        assertEquals(0, fld.getValue(1L * 365L * MILLIS_PER_DAY - 1L, dt96.getMillis()));\n+        assertEquals(1, fld.getValue(1L * 365L * MILLIS_PER_DAY, dt96.getMillis()));\n+        assertEquals(1, fld.getValue(1L * 365L * MILLIS_PER_DAY + 1L, dt96.getMillis()));\n+        assertEquals(1, fld.getValue(2L * 365L * MILLIS_PER_DAY - 1L, dt96.getMillis()));\n+        assertEquals(2, fld.getValue(2L * 365L * MILLIS_PER_DAY, dt96.getMillis()));\n+        assertEquals(2, fld.getValue(2L * 365L * MILLIS_PER_DAY + 1L, dt96.getMillis()));\n+        assertEquals(2, fld.getValue(3L * 365L * MILLIS_PER_DAY - 1L, dt96.getMillis()));\n+        assertEquals(3, fld.getValue(3L * 365L * MILLIS_PER_DAY, dt96.getMillis()));\n+        assertEquals(3, fld.getValue(3L * 365L * MILLIS_PER_DAY + 1L, dt96.getMillis()));\n+        assertEquals(3, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY - 1L, dt96.getMillis()));\n+        assertEquals(4, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY, dt96.getMillis()));\n+        assertEquals(4, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY + 1L, dt96.getMillis()));\n+        \n+        assertEquals(dt97.getMillis(), fld.add(dt96.getMillis(), 1));\n+        assertEquals(dt98.getMillis(), fld.add(dt96.getMillis(), 2));\n+        assertEquals(dt99.getMillis(), fld.add(dt96.getMillis(), 3));\n+        assertEquals(dt00.getMillis(), fld.add(dt96.getMillis(), 4));\n+        \n+        assertEquals(dt97.getMillis(), fld.add(dt96.getMillis(), 1L));\n+        assertEquals(dt98.getMillis(), fld.add(dt96.getMillis(), 2L));\n+        assertEquals(dt99.getMillis(), fld.add(dt96.getMillis(), 3L));\n+        assertEquals(dt00.getMillis(), fld.add(dt96.getMillis(), 4L));\n+    }\n+\n+    public void testDurationMonth() {\n+        // Leap 1999, NotLeap 1996,97,98\n+        DateTime dt11 = new DateTime(1999, 11, 2, 0, 0, 0, 0, ETHIOPIC_UTC);\n+        DateTime dt12 = new DateTime(1999, 12, 2, 0, 0, 0, 0, ETHIOPIC_UTC);\n+        DateTime dt13 = new DateTime(1999, 13, 2, 0, 0, 0, 0, ETHIOPIC_UTC);\n+        DateTime dt01 = new DateTime(2000, 1, 2, 0, 0, 0, 0, ETHIOPIC_UTC);\n+        \n+        DurationField fld = dt11.monthOfYear().getDurationField();\n+        assertEquals(ETHIOPIC_UTC.months(), fld);\n+        assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1, dt11.getMillis()));\n+        assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2, dt11.getMillis()));\n+        assertEquals((2L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(3, dt11.getMillis()));\n+        assertEquals((3L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(4, dt11.getMillis()));\n+        \n+        assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1));\n+        assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2));\n+        assertEquals(13L * 30L * MILLIS_PER_DAY, fld.getMillis(13));\n+        \n+        assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1L, dt11.getMillis()));\n+        assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2L, dt11.getMillis()));\n+        assertEquals((2L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(3L, dt11.getMillis()));\n+        assertEquals((3L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(4L, dt11.getMillis()));\n+        \n+        assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1L));\n+        assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2L));\n+        assertEquals(13L * 30L * MILLIS_PER_DAY, fld.getMillis(13L));\n+        \n+        assertEquals(0, fld.getValue(1L * 30L * MILLIS_PER_DAY - 1L, dt11.getMillis()));\n+        assertEquals(1, fld.getValue(1L * 30L * MILLIS_PER_DAY, dt11.getMillis()));\n+        assertEquals(1, fld.getValue(1L * 30L * MILLIS_PER_DAY + 1L, dt11.getMillis()));\n+        assertEquals(1, fld.getValue(2L * 30L * MILLIS_PER_DAY - 1L, dt11.getMillis()));\n+        assertEquals(2, fld.getValue(2L * 30L * MILLIS_PER_DAY, dt11.getMillis()));\n+        assertEquals(2, fld.getValue(2L * 30L * MILLIS_PER_DAY + 1L, dt11.getMillis()));\n+        assertEquals(2, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY - 1L, dt11.getMillis()));\n+        assertEquals(3, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY, dt11.getMillis()));\n+        assertEquals(3, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY + 1L, dt11.getMillis()));\n+        assertEquals(3, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY - 1L, dt11.getMillis()));\n+        assertEquals(4, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY, dt11.getMillis()));\n+        assertEquals(4, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY + 1L, dt11.getMillis()));\n+        \n+        assertEquals(dt12.getMillis(), fld.add(dt11.getMillis(), 1));\n+        assertEquals(dt13.getMillis(), fld.add(dt11.getMillis(), 2));\n+        assertEquals(dt01.getMillis(), fld.add(dt11.getMillis(), 3));\n+        \n+        assertEquals(dt12.getMillis(), fld.add(dt11.getMillis(), 1L));\n+        assertEquals(dt13.getMillis(), fld.add(dt11.getMillis(), 2L));\n+        assertEquals(dt01.getMillis(), fld.add(dt11.getMillis(), 3L));\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/chrono/TestGJChronology.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.chrono;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateMidnight;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeUtils;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.DurationField;\n+import org.joda.time.DurationFieldType;\n+import org.joda.time.Instant;\n+import org.joda.time.Period;\n+import org.joda.time.TimeOfDay;\n+import org.joda.time.YearMonthDay;\n+\n+/**\n+ * This class is a Junit unit test for GJChronology.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestGJChronology extends TestCase {\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+\n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestGJChronology.class);\n+    }\n+\n+    public TestGJChronology(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactoryUTC() {\n+        assertEquals(DateTimeZone.UTC, GJChronology.getInstanceUTC().getZone());\n+        assertSame(GJChronology.class, GJChronology.getInstanceUTC().getClass());\n+    }\n+\n+    public void testFactory() {\n+        assertEquals(LONDON, GJChronology.getInstance().getZone());\n+        assertSame(GJChronology.class, GJChronology.getInstance().getClass());\n+    }\n+\n+    public void testFactory_Zone() {\n+        assertEquals(TOKYO, GJChronology.getInstance(TOKYO).getZone());\n+        assertEquals(PARIS, GJChronology.getInstance(PARIS).getZone());\n+        assertEquals(LONDON, GJChronology.getInstance(null).getZone());\n+        assertSame(GJChronology.class, GJChronology.getInstance(TOKYO).getClass());\n+    }\n+\n+    public void testFactory_Zone_long_int() {\n+        GJChronology chrono = GJChronology.getInstance(TOKYO, 0L, 2);\n+        assertEquals(TOKYO, chrono.getZone());\n+        assertEquals(new Instant(0L), chrono.getGregorianCutover());\n+        assertEquals(2, chrono.getMinimumDaysInFirstWeek());\n+        assertSame(GJChronology.class, GJChronology.getInstance(TOKYO, 0L, 2).getClass());\n+        \n+        try {\n+            GJChronology.getInstance(TOKYO, 0L, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            GJChronology.getInstance(TOKYO, 0L, 8);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testFactory_Zone_RI() {\n+        GJChronology chrono = GJChronology.getInstance(TOKYO, new Instant(0L));\n+        assertEquals(TOKYO, chrono.getZone());\n+        assertEquals(new Instant(0L), chrono.getGregorianCutover());\n+        assertSame(GJChronology.class, GJChronology.getInstance(TOKYO, new Instant(0L)).getClass());\n+        \n+        DateTime cutover = new DateTime(1582, 10, 15, 0, 0, 0, 0, DateTimeZone.UTC);\n+        chrono = GJChronology.getInstance(TOKYO, null);\n+        assertEquals(TOKYO, chrono.getZone());\n+        assertEquals(cutover.toInstant(), chrono.getGregorianCutover());\n+    }\n+\n+    public void testFactory_Zone_RI_int() {\n+        GJChronology chrono = GJChronology.getInstance(TOKYO, new Instant(0L), 2);\n+        assertEquals(TOKYO, chrono.getZone());\n+        assertEquals(new Instant(0L), chrono.getGregorianCutover());\n+        assertEquals(2, chrono.getMinimumDaysInFirstWeek());\n+        assertSame(GJChronology.class, GJChronology.getInstance(TOKYO, new Instant(0L), 2).getClass());\n+        \n+        DateTime cutover = new DateTime(1582, 10, 15, 0, 0, 0, 0, DateTimeZone.UTC);\n+        chrono = GJChronology.getInstance(TOKYO, null, 2);\n+        assertEquals(TOKYO, chrono.getZone());\n+        assertEquals(cutover.toInstant(), chrono.getGregorianCutover());\n+        assertEquals(2, chrono.getMinimumDaysInFirstWeek());\n+        \n+        try {\n+            GJChronology.getInstance(TOKYO, new Instant(0L), 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            GJChronology.getInstance(TOKYO, new Instant(0L), 8);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testEquality() {\n+        assertSame(GJChronology.getInstance(TOKYO), GJChronology.getInstance(TOKYO));\n+        assertSame(GJChronology.getInstance(LONDON), GJChronology.getInstance(LONDON));\n+        assertSame(GJChronology.getInstance(PARIS), GJChronology.getInstance(PARIS));\n+        assertSame(GJChronology.getInstanceUTC(), GJChronology.getInstanceUTC());\n+        assertSame(GJChronology.getInstance(), GJChronology.getInstance(LONDON));\n+    }\n+\n+    public void testWithUTC() {\n+        assertSame(GJChronology.getInstanceUTC(), GJChronology.getInstance(LONDON).withUTC());\n+        assertSame(GJChronology.getInstanceUTC(), GJChronology.getInstance(TOKYO).withUTC());\n+        assertSame(GJChronology.getInstanceUTC(), GJChronology.getInstanceUTC().withUTC());\n+        assertSame(GJChronology.getInstanceUTC(), GJChronology.getInstance().withUTC());\n+    }\n+\n+    public void testWithZone() {\n+        assertSame(GJChronology.getInstance(TOKYO), GJChronology.getInstance(TOKYO).withZone(TOKYO));\n+        assertSame(GJChronology.getInstance(LONDON), GJChronology.getInstance(TOKYO).withZone(LONDON));\n+        assertSame(GJChronology.getInstance(PARIS), GJChronology.getInstance(TOKYO).withZone(PARIS));\n+        assertSame(GJChronology.getInstance(LONDON), GJChronology.getInstance(TOKYO).withZone(null));\n+        assertSame(GJChronology.getInstance(PARIS), GJChronology.getInstance().withZone(PARIS));\n+        assertSame(GJChronology.getInstance(PARIS), GJChronology.getInstanceUTC().withZone(PARIS));\n+    }\n+\n+    public void testToString() {\n+        assertEquals(\"GJChronology[Europe/London]\", GJChronology.getInstance(LONDON).toString());\n+        assertEquals(\"GJChronology[Asia/Tokyo]\", GJChronology.getInstance(TOKYO).toString());\n+        assertEquals(\"GJChronology[Europe/London]\", GJChronology.getInstance().toString());\n+        assertEquals(\"GJChronology[UTC]\", GJChronology.getInstanceUTC().toString());\n+        assertEquals(\"GJChronology[UTC,cutover=1970-01-01]\", GJChronology.getInstance(DateTimeZone.UTC, 0L, 4).toString());\n+        assertEquals(\"GJChronology[UTC,cutover=1970-01-01T00:00:00.001Z,mdfw=2]\", GJChronology.getInstance(DateTimeZone.UTC, 1L, 2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testDurationFields() {\n+        assertEquals(\"eras\", GJChronology.getInstance().eras().getName());\n+        assertEquals(\"centuries\", GJChronology.getInstance().centuries().getName());\n+        assertEquals(\"years\", GJChronology.getInstance().years().getName());\n+        assertEquals(\"weekyears\", GJChronology.getInstance().weekyears().getName());\n+        assertEquals(\"months\", GJChronology.getInstance().months().getName());\n+        assertEquals(\"weeks\", GJChronology.getInstance().weeks().getName());\n+        assertEquals(\"halfdays\", GJChronology.getInstance().halfdays().getName());\n+        assertEquals(\"days\", GJChronology.getInstance().days().getName());\n+        assertEquals(\"hours\", GJChronology.getInstance().hours().getName());\n+        assertEquals(\"minutes\", GJChronology.getInstance().minutes().getName());\n+        assertEquals(\"seconds\", GJChronology.getInstance().seconds().getName());\n+        assertEquals(\"millis\", GJChronology.getInstance().millis().getName());\n+        \n+        assertEquals(false, GJChronology.getInstance().eras().isSupported());\n+        assertEquals(true, GJChronology.getInstance().centuries().isSupported());\n+        assertEquals(true, GJChronology.getInstance().years().isSupported());\n+        assertEquals(true, GJChronology.getInstance().weekyears().isSupported());\n+        assertEquals(true, GJChronology.getInstance().months().isSupported());\n+        assertEquals(true, GJChronology.getInstance().weeks().isSupported());\n+        assertEquals(true, GJChronology.getInstance().days().isSupported());\n+        assertEquals(true, GJChronology.getInstance().halfdays().isSupported());\n+        assertEquals(true, GJChronology.getInstance().hours().isSupported());\n+        assertEquals(true, GJChronology.getInstance().minutes().isSupported());\n+        assertEquals(true, GJChronology.getInstance().seconds().isSupported());\n+        assertEquals(true, GJChronology.getInstance().millis().isSupported());\n+        \n+        assertEquals(false, GJChronology.getInstance().centuries().isPrecise());\n+        assertEquals(false, GJChronology.getInstance().years().isPrecise());\n+        assertEquals(false, GJChronology.getInstance().weekyears().isPrecise());\n+        assertEquals(false, GJChronology.getInstance().months().isPrecise());\n+        assertEquals(false, GJChronology.getInstance().weeks().isPrecise());\n+        assertEquals(false, GJChronology.getInstance().days().isPrecise());\n+        assertEquals(false, GJChronology.getInstance().halfdays().isPrecise());\n+        assertEquals(true, GJChronology.getInstance().hours().isPrecise());\n+        assertEquals(true, GJChronology.getInstance().minutes().isPrecise());\n+        assertEquals(true, GJChronology.getInstance().seconds().isPrecise());\n+        assertEquals(true, GJChronology.getInstance().millis().isPrecise());\n+        \n+        assertEquals(false, GJChronology.getInstanceUTC().centuries().isPrecise());\n+        assertEquals(false, GJChronology.getInstanceUTC().years().isPrecise());\n+        assertEquals(false, GJChronology.getInstanceUTC().weekyears().isPrecise());\n+        assertEquals(false, GJChronology.getInstanceUTC().months().isPrecise());\n+        assertEquals(true, GJChronology.getInstanceUTC().weeks().isPrecise());\n+        assertEquals(true, GJChronology.getInstanceUTC().days().isPrecise());\n+        assertEquals(true, GJChronology.getInstanceUTC().halfdays().isPrecise());\n+        assertEquals(true, GJChronology.getInstanceUTC().hours().isPrecise());\n+        assertEquals(true, GJChronology.getInstanceUTC().minutes().isPrecise());\n+        assertEquals(true, GJChronology.getInstanceUTC().seconds().isPrecise());\n+        assertEquals(true, GJChronology.getInstanceUTC().millis().isPrecise());\n+        \n+        DateTimeZone gmt = DateTimeZone.forID(\"Etc/GMT\");\n+        assertEquals(false, GJChronology.getInstance(gmt).centuries().isPrecise());\n+        assertEquals(false, GJChronology.getInstance(gmt).years().isPrecise());\n+        assertEquals(false, GJChronology.getInstance(gmt).weekyears().isPrecise());\n+        assertEquals(false, GJChronology.getInstance(gmt).months().isPrecise());\n+        assertEquals(true, GJChronology.getInstance(gmt).weeks().isPrecise());\n+        assertEquals(true, GJChronology.getInstance(gmt).days().isPrecise());\n+        assertEquals(true, GJChronology.getInstance(gmt).halfdays().isPrecise());\n+        assertEquals(true, GJChronology.getInstance(gmt).hours().isPrecise());\n+        assertEquals(true, GJChronology.getInstance(gmt).minutes().isPrecise());\n+        assertEquals(true, GJChronology.getInstance(gmt).seconds().isPrecise());\n+        assertEquals(true, GJChronology.getInstance(gmt).millis().isPrecise());\n+    }\n+\n+    public void testDateFields() {\n+        assertEquals(\"era\", GJChronology.getInstance().era().getName());\n+        assertEquals(\"centuryOfEra\", GJChronology.getInstance().centuryOfEra().getName());\n+        assertEquals(\"yearOfCentury\", GJChronology.getInstance().yearOfCentury().getName());\n+        assertEquals(\"yearOfEra\", GJChronology.getInstance().yearOfEra().getName());\n+        assertEquals(\"year\", GJChronology.getInstance().year().getName());\n+        assertEquals(\"monthOfYear\", GJChronology.getInstance().monthOfYear().getName());\n+        assertEquals(\"weekyearOfCentury\", GJChronology.getInstance().weekyearOfCentury().getName());\n+        assertEquals(\"weekyear\", GJChronology.getInstance().weekyear().getName());\n+        assertEquals(\"weekOfWeekyear\", GJChronology.getInstance().weekOfWeekyear().getName());\n+        assertEquals(\"dayOfYear\", GJChronology.getInstance().dayOfYear().getName());\n+        assertEquals(\"dayOfMonth\", GJChronology.getInstance().dayOfMonth().getName());\n+        assertEquals(\"dayOfWeek\", GJChronology.getInstance().dayOfWeek().getName());\n+        \n+        assertEquals(true, GJChronology.getInstance().era().isSupported());\n+        assertEquals(true, GJChronology.getInstance().centuryOfEra().isSupported());\n+        assertEquals(true, GJChronology.getInstance().yearOfCentury().isSupported());\n+        assertEquals(true, GJChronology.getInstance().yearOfEra().isSupported());\n+        assertEquals(true, GJChronology.getInstance().year().isSupported());\n+        assertEquals(true, GJChronology.getInstance().monthOfYear().isSupported());\n+        assertEquals(true, GJChronology.getInstance().weekyearOfCentury().isSupported());\n+        assertEquals(true, GJChronology.getInstance().weekyear().isSupported());\n+        assertEquals(true, GJChronology.getInstance().weekOfWeekyear().isSupported());\n+        assertEquals(true, GJChronology.getInstance().dayOfYear().isSupported());\n+        assertEquals(true, GJChronology.getInstance().dayOfMonth().isSupported());\n+        assertEquals(true, GJChronology.getInstance().dayOfWeek().isSupported());\n+    }\n+\n+    public void testTimeFields() {\n+        assertEquals(\"halfdayOfDay\", GJChronology.getInstance().halfdayOfDay().getName());\n+        assertEquals(\"clockhourOfHalfday\", GJChronology.getInstance().clockhourOfHalfday().getName());\n+        assertEquals(\"hourOfHalfday\", GJChronology.getInstance().hourOfHalfday().getName());\n+        assertEquals(\"clockhourOfDay\", GJChronology.getInstance().clockhourOfDay().getName());\n+        assertEquals(\"hourOfDay\", GJChronology.getInstance().hourOfDay().getName());\n+        assertEquals(\"minuteOfDay\", GJChronology.getInstance().minuteOfDay().getName());\n+        assertEquals(\"minuteOfHour\", GJChronology.getInstance().minuteOfHour().getName());\n+        assertEquals(\"secondOfDay\", GJChronology.getInstance().secondOfDay().getName());\n+        assertEquals(\"secondOfMinute\", GJChronology.getInstance().secondOfMinute().getName());\n+        assertEquals(\"millisOfDay\", GJChronology.getInstance().millisOfDay().getName());\n+        assertEquals(\"millisOfSecond\", GJChronology.getInstance().millisOfSecond().getName());\n+        \n+        assertEquals(true, GJChronology.getInstance().halfdayOfDay().isSupported());\n+        assertEquals(true, GJChronology.getInstance().clockhourOfHalfday().isSupported());\n+        assertEquals(true, GJChronology.getInstance().hourOfHalfday().isSupported());\n+        assertEquals(true, GJChronology.getInstance().clockhourOfDay().isSupported());\n+        assertEquals(true, GJChronology.getInstance().hourOfDay().isSupported());\n+        assertEquals(true, GJChronology.getInstance().minuteOfDay().isSupported());\n+        assertEquals(true, GJChronology.getInstance().minuteOfHour().isSupported());\n+        assertEquals(true, GJChronology.getInstance().secondOfDay().isSupported());\n+        assertEquals(true, GJChronology.getInstance().secondOfMinute().isSupported());\n+        assertEquals(true, GJChronology.getInstance().millisOfDay().isSupported());\n+        assertEquals(true, GJChronology.getInstance().millisOfSecond().isSupported());\n+    }\n+\n+    public void testIllegalDates() {\n+        try {\n+            new DateTime(1582, 10, 5, 0, 0, 0, 0, GJChronology.getInstance(DateTimeZone.UTC));\n+            fail(\"Constructed illegal date\");\n+        } catch (IllegalArgumentException e) { /* good */ }\n+\n+        try {\n+            new DateTime(1582, 10, 14, 0, 0, 0, 0, GJChronology.getInstance(DateTimeZone.UTC));\n+            fail(\"Constructed illegal date\");\n+        } catch (IllegalArgumentException e) { /* good */ }\n+    }\n+\n+    public void testParseEquivalence() {\n+        testParse(\"1581-01-01T01:23:45.678\", 1581, 1, 1, 1, 23, 45, 678);\n+        testParse(\"1581-06-30\", 1581, 6, 30, 0, 0, 0, 0);\n+        testParse(\"1582-01-01T01:23:45.678\", 1582, 1, 1, 1, 23, 45, 678);\n+        testParse(\"1582-06-30T01:23:45.678\", 1582, 6, 30, 1, 23, 45, 678);\n+        testParse(\"1582-10-04\", 1582, 10, 4, 0, 0, 0, 0);\n+        testParse(\"1582-10-15\", 1582, 10, 15, 0, 0, 0, 0);\n+        testParse(\"1582-12-31\", 1582, 12, 31, 0, 0, 0, 0);\n+        testParse(\"1583-12-31\", 1583, 12, 31, 0, 0, 0, 0);\n+    }\n+\n+    private void testParse(String str,\n+                           int year, int month, int day,\n+                           int hour, int minute, int second, int millis) {\n+        assertEquals(new DateTime(str, GJChronology.getInstance(DateTimeZone.UTC)),\n+                     new DateTime(year, month, day, hour, minute, second, millis,\n+                                  GJChronology.getInstance(DateTimeZone.UTC)));\n+    }\n+\n+    public void testCutoverAddYears() {\n+        testAdd(\"1582-01-01\", DurationFieldType.years(), 1, \"1583-01-01\");\n+        testAdd(\"1582-02-15\", DurationFieldType.years(), 1, \"1583-02-15\");\n+        testAdd(\"1582-02-28\", DurationFieldType.years(), 1, \"1583-02-28\");\n+        testAdd(\"1582-03-01\", DurationFieldType.years(), 1, \"1583-03-01\");\n+        testAdd(\"1582-09-30\", DurationFieldType.years(), 1, \"1583-09-30\");\n+        testAdd(\"1582-10-01\", DurationFieldType.years(), 1, \"1583-10-01\");\n+        testAdd(\"1582-10-04\", DurationFieldType.years(), 1, \"1583-10-04\");\n+        testAdd(\"1582-10-15\", DurationFieldType.years(), 1, \"1583-10-15\");\n+        testAdd(\"1582-10-16\", DurationFieldType.years(), 1, \"1583-10-16\");\n+\n+        // Leap years...\n+        testAdd(\"1580-01-01\", DurationFieldType.years(), 4, \"1584-01-01\");\n+        testAdd(\"1580-02-29\", DurationFieldType.years(), 4, \"1584-02-29\");\n+        testAdd(\"1580-10-01\", DurationFieldType.years(), 4, \"1584-10-01\");\n+        testAdd(\"1580-10-10\", DurationFieldType.years(), 4, \"1584-10-10\");\n+        testAdd(\"1580-10-15\", DurationFieldType.years(), 4, \"1584-10-15\");\n+        testAdd(\"1580-12-31\", DurationFieldType.years(), 4, \"1584-12-31\");\n+    }\n+\n+    public void testCutoverAddWeekyears() {\n+        testAdd(\"1582-W01-1\", DurationFieldType.weekyears(), 1, \"1583-W01-1\");\n+        testAdd(\"1582-W39-1\", DurationFieldType.weekyears(), 1, \"1583-W39-1\");\n+        testAdd(\"1583-W45-1\", DurationFieldType.weekyears(), 1, \"1584-W45-1\");\n+\n+        // This test fails, but I'm not sure if its worth fixing. The date\n+        // falls after the cutover, but in the cutover year. The add operation\n+        // is performed completely within the gregorian calendar, with no\n+        // crossing of the cutover. As a result, no special correction is\n+        // applied. Since the full gregorian year of 1582 has a different week\n+        // numbers than the full julian year of 1582, the week number is off by\n+        // one after the addition.\n+        //\n+        //testAdd(\"1582-W42-1\", DurationFieldType.weekyears(), 1, \"1583-W42-1\");\n+\n+        // Leap years...\n+        testAdd(\"1580-W01-1\", DurationFieldType.weekyears(), 4, \"1584-W01-1\");\n+        testAdd(\"1580-W30-7\", DurationFieldType.weekyears(), 4, \"1584-W30-7\");\n+        testAdd(\"1580-W50-7\", DurationFieldType.weekyears(), 4, \"1584-W50-7\");\n+    }\n+\n+    public void testCutoverAddMonths() {\n+        testAdd(\"1582-01-01\", DurationFieldType.months(), 1, \"1582-02-01\");\n+        testAdd(\"1582-01-01\", DurationFieldType.months(), 6, \"1582-07-01\");\n+        testAdd(\"1582-01-01\", DurationFieldType.months(), 12, \"1583-01-01\");\n+        testAdd(\"1582-11-15\", DurationFieldType.months(), 1, \"1582-12-15\");\n+\n+        testAdd(\"1582-09-04\", DurationFieldType.months(), 2, \"1582-11-04\");\n+        testAdd(\"1582-09-05\", DurationFieldType.months(), 2, \"1582-11-05\");\n+        testAdd(\"1582-09-10\", DurationFieldType.months(), 2, \"1582-11-10\");\n+        testAdd(\"1582-09-15\", DurationFieldType.months(), 2, \"1582-11-15\");\n+\n+\n+        // Leap years...\n+        testAdd(\"1580-01-01\", DurationFieldType.months(), 48, \"1584-01-01\");\n+        testAdd(\"1580-02-29\", DurationFieldType.months(), 48, \"1584-02-29\");\n+        testAdd(\"1580-10-01\", DurationFieldType.months(), 48, \"1584-10-01\");\n+        testAdd(\"1580-10-10\", DurationFieldType.months(), 48, \"1584-10-10\");\n+        testAdd(\"1580-10-15\", DurationFieldType.months(), 48, \"1584-10-15\");\n+        testAdd(\"1580-12-31\", DurationFieldType.months(), 48, \"1584-12-31\");\n+    }\n+\n+    public void testCutoverAddWeeks() {\n+        testAdd(\"1582-01-01\", DurationFieldType.weeks(), 1, \"1582-01-08\");\n+        testAdd(\"1583-01-01\", DurationFieldType.weeks(), 1, \"1583-01-08\");\n+\n+        // Weeks are precise, and so cutover is not ignored.\n+        testAdd(\"1582-10-01\", DurationFieldType.weeks(), 2, \"1582-10-25\");\n+        testAdd(\"1582-W01-1\", DurationFieldType.weeks(), 51, \"1583-W01-1\");\n+    }\n+\n+    public void testCutoverAddDays() {\n+        testAdd(\"1582-10-03\", DurationFieldType.days(), 1, \"1582-10-04\");\n+        testAdd(\"1582-10-04\", DurationFieldType.days(), 1, \"1582-10-15\");\n+        testAdd(\"1582-10-15\", DurationFieldType.days(), 1, \"1582-10-16\");\n+\n+        testAdd(\"1582-09-30\", DurationFieldType.days(), 10, \"1582-10-20\");\n+        testAdd(\"1582-10-04\", DurationFieldType.days(), 10, \"1582-10-24\");\n+        testAdd(\"1582-10-15\", DurationFieldType.days(), 10, \"1582-10-25\");\n+    }\n+\n+    public void testYearEndAddDays() {\n+        testAdd(\"1582-11-05\", DurationFieldType.days(), 28, \"1582-12-03\");\n+        testAdd(\"1582-12-05\", DurationFieldType.days(), 28, \"1583-01-02\");\n+        \n+        testAdd(\"2005-11-05\", DurationFieldType.days(), 28, \"2005-12-03\");\n+        testAdd(\"2005-12-05\", DurationFieldType.days(), 28, \"2006-01-02\");\n+    }\n+\n+    public void testSubtractDays() {\n+        // This is a test for a bug in version 1.0. The dayOfMonth range\n+        // duration field did not match the monthOfYear duration field. This\n+        // caused an exception to be thrown when subtracting days.\n+        DateTime dt = new DateTime\n+            (1112306400000L, GJChronology.getInstance(DateTimeZone.forID(\"Europe/Berlin\")));\n+        YearMonthDay ymd = dt.toYearMonthDay();\n+        while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { \n+            ymd = ymd.minus(Period.days(1));\n+        }\n+    }\n+\n+    private void testAdd(String start, DurationFieldType type, int amt, String end) {\n+        DateTime dtStart = new DateTime(start, GJChronology.getInstance(DateTimeZone.UTC));\n+        DateTime dtEnd = new DateTime(end, GJChronology.getInstance(DateTimeZone.UTC));\n+        assertEquals(dtEnd, dtStart.withFieldAdded(type, amt));\n+        assertEquals(dtStart, dtEnd.withFieldAdded(type, -amt));\n+\n+        DurationField field = type.getField(GJChronology.getInstance(DateTimeZone.UTC));\n+        int diff = field.getDifference(dtEnd.getMillis(), dtStart.getMillis());\n+        assertEquals(amt, diff);\n+        \n+        if (type == DurationFieldType.years() ||\n+            type == DurationFieldType.months() ||\n+            type == DurationFieldType.days()) {\n+            YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n+            YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n+            assertEquals(ymdEnd, ymdStart.withFieldAdded(type, amt));\n+            assertEquals(ymdStart, ymdEnd.withFieldAdded(type, -amt));\n+        }\n+    }\n+\n+    public void testTimeOfDayAdd() {\n+        TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n+        TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n+        assertEquals(end, start.plusHours(22));\n+        assertEquals(start, end.minusHours(22));\n+        assertEquals(end, start.plusMinutes(22 * 60));\n+        assertEquals(start, end.minusMinutes(22 * 60));\n+    }\n+\n+    public void testMaximumValue() {\n+        DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n+        while (dt.getYear() < 1590) {\n+            dt = dt.plusDays(1);\n+            YearMonthDay ymd = dt.toYearMonthDay();\n+            assertEquals(dt.year().getMaximumValue(), ymd.year().getMaximumValue());\n+            assertEquals(dt.monthOfYear().getMaximumValue(), ymd.monthOfYear().getMaximumValue());\n+            assertEquals(dt.dayOfMonth().getMaximumValue(), ymd.dayOfMonth().getMaximumValue());\n+        }\n+    }\n+\n+    public void testPartialGetAsText() {\n+        GJChronology chrono = GJChronology.getInstance(TOKYO);\n+        assertEquals(\"January\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsText());\n+        assertEquals(\"Jan\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsShortText());\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/chrono/TestGregorianChronology.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.chrono;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateMidnight;\n+import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeUtils;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.YearMonthDay;\n+\n+/**\n+ * This class is a Junit unit test for GregorianChronology.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestGregorianChronology extends TestCase {\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+\n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestGregorianChronology.class);\n+    }\n+\n+    public TestGregorianChronology(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactoryUTC() {\n+        assertEquals(DateTimeZone.UTC, GregorianChronology.getInstanceUTC().getZone());\n+        assertSame(GregorianChronology.class, GregorianChronology.getInstanceUTC().getClass());\n+    }\n+\n+    public void testFactory() {\n+        assertEquals(LONDON, GregorianChronology.getInstance().getZone());\n+        assertSame(GregorianChronology.class, GregorianChronology.getInstance().getClass());\n+    }\n+\n+    public void testFactory_Zone() {\n+        assertEquals(TOKYO, GregorianChronology.getInstance(TOKYO).getZone());\n+        assertEquals(PARIS, GregorianChronology.getInstance(PARIS).getZone());\n+        assertEquals(LONDON, GregorianChronology.getInstance(null).getZone());\n+        assertSame(GregorianChronology.class, GregorianChronology.getInstance(TOKYO).getClass());\n+    }\n+\n+    public void testFactory_Zone_int() {\n+        GregorianChronology chrono = GregorianChronology.getInstance(TOKYO, 2);\n+        assertEquals(TOKYO, chrono.getZone());\n+        assertEquals(2, chrono.getMinimumDaysInFirstWeek());\n+        \n+        try {\n+            GregorianChronology.getInstance(TOKYO, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            GregorianChronology.getInstance(TOKYO, 8);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testEquality() {\n+        assertSame(GregorianChronology.getInstance(TOKYO), GregorianChronology.getInstance(TOKYO));\n+        assertSame(GregorianChronology.getInstance(LONDON), GregorianChronology.getInstance(LONDON));\n+        assertSame(GregorianChronology.getInstance(PARIS), GregorianChronology.getInstance(PARIS));\n+        assertSame(GregorianChronology.getInstanceUTC(), GregorianChronology.getInstanceUTC());\n+        assertSame(GregorianChronology.getInstance(), GregorianChronology.getInstance(LONDON));\n+    }\n+\n+    public void testWithUTC() {\n+        assertSame(GregorianChronology.getInstanceUTC(), GregorianChronology.getInstance(LONDON).withUTC());\n+        assertSame(GregorianChronology.getInstanceUTC(), GregorianChronology.getInstance(TOKYO).withUTC());\n+        assertSame(GregorianChronology.getInstanceUTC(), GregorianChronology.getInstanceUTC().withUTC());\n+        assertSame(GregorianChronology.getInstanceUTC(), GregorianChronology.getInstance().withUTC());\n+    }\n+\n+    public void testWithZone() {\n+        assertSame(GregorianChronology.getInstance(TOKYO), GregorianChronology.getInstance(TOKYO).withZone(TOKYO));\n+        assertSame(GregorianChronology.getInstance(LONDON), GregorianChronology.getInstance(TOKYO).withZone(LONDON));\n+        assertSame(GregorianChronology.getInstance(PARIS), GregorianChronology.getInstance(TOKYO).withZone(PARIS));\n+        assertSame(GregorianChronology.getInstance(LONDON), GregorianChronology.getInstance(TOKYO).withZone(null));\n+        assertSame(GregorianChronology.getInstance(PARIS), GregorianChronology.getInstance().withZone(PARIS));\n+        assertSame(GregorianChronology.getInstance(PARIS), GregorianChronology.getInstanceUTC().withZone(PARIS));\n+    }\n+\n+    public void testToString() {\n+        assertEquals(\"GregorianChronology[Europe/London]\", GregorianChronology.getInstance(LONDON).toString());\n+        assertEquals(\"GregorianChronology[Asia/Tokyo]\", GregorianChronology.getInstance(TOKYO).toString());\n+        assertEquals(\"GregorianChronology[Europe/London]\", GregorianChronology.getInstance().toString());\n+        assertEquals(\"GregorianChronology[UTC]\", GregorianChronology.getInstanceUTC().toString());\n+        assertEquals(\"GregorianChronology[UTC,mdfw=2]\", GregorianChronology.getInstance(DateTimeZone.UTC, 2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testDurationFields() {\n+        assertEquals(\"eras\", GregorianChronology.getInstance().eras().getName());\n+        assertEquals(\"centuries\", GregorianChronology.getInstance().centuries().getName());\n+        assertEquals(\"years\", GregorianChronology.getInstance().years().getName());\n+        assertEquals(\"weekyears\", GregorianChronology.getInstance().weekyears().getName());\n+        assertEquals(\"months\", GregorianChronology.getInstance().months().getName());\n+        assertEquals(\"weeks\", GregorianChronology.getInstance().weeks().getName());\n+        assertEquals(\"days\", GregorianChronology.getInstance().days().getName());\n+        assertEquals(\"halfdays\", GregorianChronology.getInstance().halfdays().getName());\n+        assertEquals(\"hours\", GregorianChronology.getInstance().hours().getName());\n+        assertEquals(\"minutes\", GregorianChronology.getInstance().minutes().getName());\n+        assertEquals(\"seconds\", GregorianChronology.getInstance().seconds().getName());\n+        assertEquals(\"millis\", GregorianChronology.getInstance().millis().getName());\n+        \n+        assertEquals(false, GregorianChronology.getInstance().eras().isSupported());\n+        assertEquals(true, GregorianChronology.getInstance().centuries().isSupported());\n+        assertEquals(true, GregorianChronology.getInstance().years().isSupported());\n+        assertEquals(true, GregorianChronology.getInstance().weekyears().isSupported());\n+        assertEquals(true, GregorianChronology.getInstance().months().isSupported());\n+        assertEquals(true, GregorianChronology.getInstance().weeks().isSupported());\n+        assertEquals(true, GregorianChronology.getInstance().days().isSupported());\n+        assertEquals(true, GregorianChronology.getInstance().halfdays().isSupported());\n+        assertEquals(true, GregorianChronology.getInstance().hours().isSupported());\n+        assertEquals(true, GregorianChronology.getInstance().minutes().isSupported());\n+        assertEquals(true, GregorianChronology.getInstance().seconds().isSupported());\n+        assertEquals(true, GregorianChronology.getInstance().millis().isSupported());\n+        \n+        assertEquals(false, GregorianChronology.getInstance().centuries().isPrecise());\n+        assertEquals(false, GregorianChronology.getInstance().years().isPrecise());\n+        assertEquals(false, GregorianChronology.getInstance().weekyears().isPrecise());\n+        assertEquals(false, GregorianChronology.getInstance().months().isPrecise());\n+        assertEquals(false, GregorianChronology.getInstance().weeks().isPrecise());\n+        assertEquals(false, GregorianChronology.getInstance().days().isPrecise());\n+        assertEquals(false, GregorianChronology.getInstance().halfdays().isPrecise());\n+        assertEquals(true, GregorianChronology.getInstance().hours().isPrecise());\n+        assertEquals(true, GregorianChronology.getInstance().minutes().isPrecise());\n+        assertEquals(true, GregorianChronology.getInstance().seconds().isPrecise());\n+        assertEquals(true, GregorianChronology.getInstance().millis().isPrecise());\n+        \n+        assertEquals(false, GregorianChronology.getInstanceUTC().centuries().isPrecise());\n+        assertEquals(false, GregorianChronology.getInstanceUTC().years().isPrecise());\n+        assertEquals(false, GregorianChronology.getInstanceUTC().weekyears().isPrecise());\n+        assertEquals(false, GregorianChronology.getInstanceUTC().months().isPrecise());\n+        assertEquals(true, GregorianChronology.getInstanceUTC().weeks().isPrecise());\n+        assertEquals(true, GregorianChronology.getInstanceUTC().days().isPrecise());\n+        assertEquals(true, GregorianChronology.getInstanceUTC().halfdays().isPrecise());\n+        assertEquals(true, GregorianChronology.getInstanceUTC().hours().isPrecise());\n+        assertEquals(true, GregorianChronology.getInstanceUTC().minutes().isPrecise());\n+        assertEquals(true, GregorianChronology.getInstanceUTC().seconds().isPrecise());\n+        assertEquals(true, GregorianChronology.getInstanceUTC().millis().isPrecise());\n+        \n+        DateTimeZone gmt = DateTimeZone.forID(\"Etc/GMT\");\n+        assertEquals(false, GregorianChronology.getInstance(gmt).centuries().isPrecise());\n+        assertEquals(false, GregorianChronology.getInstance(gmt).years().isPrecise());\n+        assertEquals(false, GregorianChronology.getInstance(gmt).weekyears().isPrecise());\n+        assertEquals(false, GregorianChronology.getInstance(gmt).months().isPrecise());\n+        assertEquals(true, GregorianChronology.getInstance(gmt).weeks().isPrecise());\n+        assertEquals(true, GregorianChronology.getInstance(gmt).days().isPrecise());\n+        assertEquals(true, GregorianChronology.getInstance(gmt).halfdays().isPrecise());\n+        assertEquals(true, GregorianChronology.getInstance(gmt).hours().isPrecise());\n+        assertEquals(true, GregorianChronology.getInstance(gmt).minutes().isPrecise());\n+        assertEquals(true, GregorianChronology.getInstance(gmt).seconds().isPrecise());\n+        assertEquals(true, GregorianChronology.getInstance(gmt).millis().isPrecise());\n+    }\n+\n+    public void testDateFields() {\n+        assertEquals(\"era\", GregorianChronology.getInstance().era().getName());\n+        assertEquals(\"centuryOfEra\", GregorianChronology.getInstance().centuryOfEra().getName());\n+        assertEquals(\"yearOfCentury\", GregorianChronology.getInstance().yearOfCentury().getName());\n+        assertEquals(\"yearOfEra\", GregorianChronology.getInstance().yearOfEra().getName());\n+        assertEquals(\"year\", GregorianChronology.getInstance().year().getName());\n+        assertEquals(\"monthOfYear\", GregorianChronology.getInstance().monthOfYear().getName());\n+        assertEquals(\"weekyearOfCentury\", GregorianChronology.getInstance().weekyearOfCentury().getName());\n+        assertEquals(\"weekyear\", GregorianChronology.getInstance().weekyear().getName());\n+        assertEquals(\"weekOfWeekyear\", GregorianChronology.getInstance().weekOfWeekyear().getName());\n+        assertEquals(\"dayOfYear\", GregorianChronology.getInstance().dayOfYear().getName());\n+        assertEquals(\"dayOfMonth\", GregorianChronology.getInstance().dayOfMonth().getName());\n+        assertEquals(\"dayOfWeek\", GregorianChronology.getInstance().dayOfWeek().getName());\n+        \n+        assertEquals(true, GregorianChronology.getInstance().era().isSupported());\n+        assertEquals(true, GregorianChronology.getInstance().centuryOfEra().isSupported());\n+        assertEquals(true, GregorianChronology.getInstance().yearOfCentury().isSupported());\n+        assertEquals(true, GregorianChronology.getInstance().yearOfEra().isSupported());\n+        assertEquals(true, GregorianChronology.getInstance().year().isSupported());\n+        assertEquals(true, GregorianChronology.getInstance().monthOfYear().isSupported());\n+        assertEquals(true, GregorianChronology.getInstance().weekyearOfCentury().isSupported());\n+        assertEquals(true, GregorianChronology.getInstance().weekyear().isSupported());\n+        assertEquals(true, GregorianChronology.getInstance().weekOfWeekyear().isSupported());\n+        assertEquals(true, GregorianChronology.getInstance().dayOfYear().isSupported());\n+        assertEquals(true, GregorianChronology.getInstance().dayOfMonth().isSupported());\n+        assertEquals(true, GregorianChronology.getInstance().dayOfWeek().isSupported());\n+    }\n+\n+    public void testTimeFields() {\n+        assertEquals(\"halfdayOfDay\", GregorianChronology.getInstance().halfdayOfDay().getName());\n+        assertEquals(\"clockhourOfHalfday\", GregorianChronology.getInstance().clockhourOfHalfday().getName());\n+        assertEquals(\"hourOfHalfday\", GregorianChronology.getInstance().hourOfHalfday().getName());\n+        assertEquals(\"clockhourOfDay\", GregorianChronology.getInstance().clockhourOfDay().getName());\n+        assertEquals(\"hourOfDay\", GregorianChronology.getInstance().hourOfDay().getName());\n+        assertEquals(\"minuteOfDay\", GregorianChronology.getInstance().minuteOfDay().getName());\n+        assertEquals(\"minuteOfHour\", GregorianChronology.getInstance().minuteOfHour().getName());\n+        assertEquals(\"secondOfDay\", GregorianChronology.getInstance().secondOfDay().getName());\n+        assertEquals(\"secondOfMinute\", GregorianChronology.getInstance().secondOfMinute().getName());\n+        assertEquals(\"millisOfDay\", GregorianChronology.getInstance().millisOfDay().getName());\n+        assertEquals(\"millisOfSecond\", GregorianChronology.getInstance().millisOfSecond().getName());\n+        \n+        assertEquals(true, GregorianChronology.getInstance().halfdayOfDay().isSupported());\n+        assertEquals(true, GregorianChronology.getInstance().clockhourOfHalfday().isSupported());\n+        assertEquals(true, GregorianChronology.getInstance().hourOfHalfday().isSupported());\n+        assertEquals(true, GregorianChronology.getInstance().clockhourOfDay().isSupported());\n+        assertEquals(true, GregorianChronology.getInstance().hourOfDay().isSupported());\n+        assertEquals(true, GregorianChronology.getInstance().minuteOfDay().isSupported());\n+        assertEquals(true, GregorianChronology.getInstance().minuteOfHour().isSupported());\n+        assertEquals(true, GregorianChronology.getInstance().secondOfDay().isSupported());\n+        assertEquals(true, GregorianChronology.getInstance().secondOfMinute().isSupported());\n+        assertEquals(true, GregorianChronology.getInstance().millisOfDay().isSupported());\n+        assertEquals(true, GregorianChronology.getInstance().millisOfSecond().isSupported());\n+    }\n+\n+    public void testMaximumValue() {\n+        YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n+        DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n+        Chronology chrono = GregorianChronology.getInstance();\n+        assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1));\n+        assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis()));\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/chrono/TestISOChronology.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.chrono;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateMidnight;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeFieldType;\n+import org.joda.time.DateTimeUtils;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.DurationField;\n+import org.joda.time.DurationFieldType;\n+import org.joda.time.IllegalFieldValueException;\n+import org.joda.time.Partial;\n+import org.joda.time.TimeOfDay;\n+import org.joda.time.YearMonthDay;\n+\n+/**\n+ * This class is a Junit unit test for ISOChronology.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestISOChronology extends TestCase {\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+\n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestISOChronology.class);\n+    }\n+\n+    public TestISOChronology(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactoryUTC() {\n+        assertEquals(DateTimeZone.UTC, ISOChronology.getInstanceUTC().getZone());\n+        assertSame(ISOChronology.class, ISOChronology.getInstanceUTC().getClass());\n+    }\n+\n+    public void testFactory() {\n+        assertEquals(LONDON, ISOChronology.getInstance().getZone());\n+        assertSame(ISOChronology.class, ISOChronology.getInstance().getClass());\n+    }\n+\n+    public void testFactory_Zone() {\n+        assertEquals(TOKYO, ISOChronology.getInstance(TOKYO).getZone());\n+        assertEquals(PARIS, ISOChronology.getInstance(PARIS).getZone());\n+        assertEquals(LONDON, ISOChronology.getInstance(null).getZone());\n+        assertSame(ISOChronology.class, ISOChronology.getInstance(TOKYO).getClass());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testEquality() {\n+        assertSame(ISOChronology.getInstance(TOKYO), ISOChronology.getInstance(TOKYO));\n+        assertSame(ISOChronology.getInstance(LONDON), ISOChronology.getInstance(LONDON));\n+        assertSame(ISOChronology.getInstance(PARIS), ISOChronology.getInstance(PARIS));\n+        assertSame(ISOChronology.getInstanceUTC(), ISOChronology.getInstanceUTC());\n+        assertSame(ISOChronology.getInstance(), ISOChronology.getInstance(LONDON));\n+    }\n+\n+    public void testWithUTC() {\n+        assertSame(ISOChronology.getInstanceUTC(), ISOChronology.getInstance(LONDON).withUTC());\n+        assertSame(ISOChronology.getInstanceUTC(), ISOChronology.getInstance(TOKYO).withUTC());\n+        assertSame(ISOChronology.getInstanceUTC(), ISOChronology.getInstanceUTC().withUTC());\n+        assertSame(ISOChronology.getInstanceUTC(), ISOChronology.getInstance().withUTC());\n+    }\n+\n+    public void testWithZone() {\n+        assertSame(ISOChronology.getInstance(TOKYO), ISOChronology.getInstance(TOKYO).withZone(TOKYO));\n+        assertSame(ISOChronology.getInstance(LONDON), ISOChronology.getInstance(TOKYO).withZone(LONDON));\n+        assertSame(ISOChronology.getInstance(PARIS), ISOChronology.getInstance(TOKYO).withZone(PARIS));\n+        assertSame(ISOChronology.getInstance(LONDON), ISOChronology.getInstance(TOKYO).withZone(null));\n+        assertSame(ISOChronology.getInstance(PARIS), ISOChronology.getInstance().withZone(PARIS));\n+        assertSame(ISOChronology.getInstance(PARIS), ISOChronology.getInstanceUTC().withZone(PARIS));\n+    }\n+\n+    public void testToString() {\n+        assertEquals(\"ISOChronology[Europe/London]\", ISOChronology.getInstance(LONDON).toString());\n+        assertEquals(\"ISOChronology[Asia/Tokyo]\", ISOChronology.getInstance(TOKYO).toString());\n+        assertEquals(\"ISOChronology[Europe/London]\", ISOChronology.getInstance().toString());\n+        assertEquals(\"ISOChronology[UTC]\", ISOChronology.getInstanceUTC().toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testDurationFields() {\n+        assertEquals(\"eras\", ISOChronology.getInstance().eras().getName());\n+        assertEquals(\"centuries\", ISOChronology.getInstance().centuries().getName());\n+        assertEquals(\"years\", ISOChronology.getInstance().years().getName());\n+        assertEquals(\"weekyears\", ISOChronology.getInstance().weekyears().getName());\n+        assertEquals(\"months\", ISOChronology.getInstance().months().getName());\n+        assertEquals(\"weeks\", ISOChronology.getInstance().weeks().getName());\n+        assertEquals(\"days\", ISOChronology.getInstance().days().getName());\n+        assertEquals(\"halfdays\", ISOChronology.getInstance().halfdays().getName());\n+        assertEquals(\"hours\", ISOChronology.getInstance().hours().getName());\n+        assertEquals(\"minutes\", ISOChronology.getInstance().minutes().getName());\n+        assertEquals(\"seconds\", ISOChronology.getInstance().seconds().getName());\n+        assertEquals(\"millis\", ISOChronology.getInstance().millis().getName());\n+        \n+        assertEquals(false, ISOChronology.getInstance().eras().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().centuries().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().years().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().weekyears().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().months().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().weeks().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().days().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().halfdays().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().hours().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().minutes().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().seconds().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().millis().isSupported());\n+        \n+        assertEquals(false, ISOChronology.getInstance().centuries().isPrecise());\n+        assertEquals(false, ISOChronology.getInstance().years().isPrecise());\n+        assertEquals(false, ISOChronology.getInstance().weekyears().isPrecise());\n+        assertEquals(false, ISOChronology.getInstance().months().isPrecise());\n+        assertEquals(false, ISOChronology.getInstance().weeks().isPrecise());\n+        assertEquals(false, ISOChronology.getInstance().days().isPrecise());\n+        assertEquals(false, ISOChronology.getInstance().halfdays().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance().hours().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance().minutes().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance().seconds().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance().millis().isPrecise());\n+        \n+        assertEquals(false, ISOChronology.getInstanceUTC().centuries().isPrecise());\n+        assertEquals(false, ISOChronology.getInstanceUTC().years().isPrecise());\n+        assertEquals(false, ISOChronology.getInstanceUTC().weekyears().isPrecise());\n+        assertEquals(false, ISOChronology.getInstanceUTC().months().isPrecise());\n+        assertEquals(true, ISOChronology.getInstanceUTC().weeks().isPrecise());\n+        assertEquals(true, ISOChronology.getInstanceUTC().days().isPrecise());\n+        assertEquals(true, ISOChronology.getInstanceUTC().halfdays().isPrecise());\n+        assertEquals(true, ISOChronology.getInstanceUTC().hours().isPrecise());\n+        assertEquals(true, ISOChronology.getInstanceUTC().minutes().isPrecise());\n+        assertEquals(true, ISOChronology.getInstanceUTC().seconds().isPrecise());\n+        assertEquals(true, ISOChronology.getInstanceUTC().millis().isPrecise());\n+        \n+        DateTimeZone gmt = DateTimeZone.forID(\"Etc/GMT\");\n+        assertEquals(false, ISOChronology.getInstance(gmt).centuries().isPrecise());\n+        assertEquals(false, ISOChronology.getInstance(gmt).years().isPrecise());\n+        assertEquals(false, ISOChronology.getInstance(gmt).weekyears().isPrecise());\n+        assertEquals(false, ISOChronology.getInstance(gmt).months().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance(gmt).weeks().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance(gmt).days().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance(gmt).halfdays().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance(gmt).hours().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance(gmt).minutes().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance(gmt).seconds().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance(gmt).millis().isPrecise());\n+        \n+        DateTimeZone offset = DateTimeZone.forOffsetHours(1);\n+        assertEquals(false, ISOChronology.getInstance(offset).centuries().isPrecise());\n+        assertEquals(false, ISOChronology.getInstance(offset).years().isPrecise());\n+        assertEquals(false, ISOChronology.getInstance(offset).weekyears().isPrecise());\n+        assertEquals(false, ISOChronology.getInstance(offset).months().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance(offset).weeks().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance(offset).days().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance(offset).halfdays().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance(offset).hours().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance(offset).minutes().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance(offset).seconds().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance(offset).millis().isPrecise());\n+    }\n+\n+    public void testDateFields() {\n+        assertEquals(\"era\", ISOChronology.getInstance().era().getName());\n+        assertEquals(\"centuryOfEra\", ISOChronology.getInstance().centuryOfEra().getName());\n+        assertEquals(\"yearOfCentury\", ISOChronology.getInstance().yearOfCentury().getName());\n+        assertEquals(\"yearOfEra\", ISOChronology.getInstance().yearOfEra().getName());\n+        assertEquals(\"year\", ISOChronology.getInstance().year().getName());\n+        assertEquals(\"monthOfYear\", ISOChronology.getInstance().monthOfYear().getName());\n+        assertEquals(\"weekyearOfCentury\", ISOChronology.getInstance().weekyearOfCentury().getName());\n+        assertEquals(\"weekyear\", ISOChronology.getInstance().weekyear().getName());\n+        assertEquals(\"weekOfWeekyear\", ISOChronology.getInstance().weekOfWeekyear().getName());\n+        assertEquals(\"dayOfYear\", ISOChronology.getInstance().dayOfYear().getName());\n+        assertEquals(\"dayOfMonth\", ISOChronology.getInstance().dayOfMonth().getName());\n+        assertEquals(\"dayOfWeek\", ISOChronology.getInstance().dayOfWeek().getName());\n+        \n+        assertEquals(true, ISOChronology.getInstance().era().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().centuryOfEra().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().yearOfCentury().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().yearOfEra().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().year().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().monthOfYear().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().weekyearOfCentury().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().weekyear().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().weekOfWeekyear().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().dayOfYear().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().dayOfMonth().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().dayOfWeek().isSupported());\n+    }\n+\n+    public void testTimeFields() {\n+        assertEquals(\"halfdayOfDay\", ISOChronology.getInstance().halfdayOfDay().getName());\n+        assertEquals(\"clockhourOfHalfday\", ISOChronology.getInstance().clockhourOfHalfday().getName());\n+        assertEquals(\"hourOfHalfday\", ISOChronology.getInstance().hourOfHalfday().getName());\n+        assertEquals(\"clockhourOfDay\", ISOChronology.getInstance().clockhourOfDay().getName());\n+        assertEquals(\"hourOfDay\", ISOChronology.getInstance().hourOfDay().getName());\n+        assertEquals(\"minuteOfDay\", ISOChronology.getInstance().minuteOfDay().getName());\n+        assertEquals(\"minuteOfHour\", ISOChronology.getInstance().minuteOfHour().getName());\n+        assertEquals(\"secondOfDay\", ISOChronology.getInstance().secondOfDay().getName());\n+        assertEquals(\"secondOfMinute\", ISOChronology.getInstance().secondOfMinute().getName());\n+        assertEquals(\"millisOfDay\", ISOChronology.getInstance().millisOfDay().getName());\n+        assertEquals(\"millisOfSecond\", ISOChronology.getInstance().millisOfSecond().getName());\n+        \n+        assertEquals(true, ISOChronology.getInstance().halfdayOfDay().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().clockhourOfHalfday().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().hourOfHalfday().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().clockhourOfDay().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().hourOfDay().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().minuteOfDay().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().minuteOfHour().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().secondOfDay().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().secondOfMinute().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().millisOfDay().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().millisOfSecond().isSupported());\n+    }\n+\n+    public void testMaxYear() {\n+        final ISOChronology chrono = ISOChronology.getInstanceUTC();\n+        final int maxYear = chrono.year().getMaximumValue();\n+\n+        DateTime start = new DateTime(maxYear, 1, 1, 0, 0, 0, 0, chrono);\n+        DateTime end = new DateTime(maxYear, 12, 31, 23, 59, 59, 999, chrono);\n+        assertTrue(start.getMillis() > 0);\n+        assertTrue(end.getMillis() > start.getMillis());\n+        assertEquals(maxYear, start.getYear());\n+        assertEquals(maxYear, end.getYear());\n+        long delta = end.getMillis() - start.getMillis();\n+        long expectedDelta = \n+            (start.year().isLeap() ? 366L : 365L) * DateTimeConstants.MILLIS_PER_DAY - 1;\n+        assertEquals(expectedDelta, delta);\n+\n+        assertEquals(start, new DateTime(maxYear + \"-01-01T00:00:00.000Z\", chrono));\n+        assertEquals(end, new DateTime(maxYear + \"-12-31T23:59:59.999Z\", chrono));\n+\n+        try {\n+            start.plusYears(1);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+        }\n+\n+        try {\n+            end.plusYears(1);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+        }\n+\n+        assertEquals(maxYear + 1, chrono.year().get(Long.MAX_VALUE));\n+    }\n+\n+    public void testMinYear() {\n+        final ISOChronology chrono = ISOChronology.getInstanceUTC();\n+        final int minYear = chrono.year().getMinimumValue();\n+\n+        DateTime start = new DateTime(minYear, 1, 1, 0, 0, 0, 0, chrono);\n+        DateTime end = new DateTime(minYear, 12, 31, 23, 59, 59, 999, chrono);\n+        assertTrue(start.getMillis() < 0);\n+        assertTrue(end.getMillis() > start.getMillis());\n+        assertEquals(minYear, start.getYear());\n+        assertEquals(minYear, end.getYear());\n+        long delta = end.getMillis() - start.getMillis();\n+        long expectedDelta = \n+            (start.year().isLeap() ? 366L : 365L) * DateTimeConstants.MILLIS_PER_DAY - 1;\n+        assertEquals(expectedDelta, delta);\n+\n+        assertEquals(start, new DateTime(minYear + \"-01-01T00:00:00.000Z\", chrono));\n+        assertEquals(end, new DateTime(minYear + \"-12-31T23:59:59.999Z\", chrono));\n+\n+        try {\n+            start.minusYears(1);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+        }\n+\n+        try {\n+            end.minusYears(1);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+        }\n+\n+        assertEquals(minYear - 1, chrono.year().get(Long.MIN_VALUE));\n+    }\n+\n+    public void testCutoverAddYears() {\n+        testAdd(\"1582-01-01\", DurationFieldType.years(), 1, \"1583-01-01\");\n+        testAdd(\"1582-02-15\", DurationFieldType.years(), 1, \"1583-02-15\");\n+        testAdd(\"1582-02-28\", DurationFieldType.years(), 1, \"1583-02-28\");\n+        testAdd(\"1582-03-01\", DurationFieldType.years(), 1, \"1583-03-01\");\n+        testAdd(\"1582-09-30\", DurationFieldType.years(), 1, \"1583-09-30\");\n+        testAdd(\"1582-10-01\", DurationFieldType.years(), 1, \"1583-10-01\");\n+        testAdd(\"1582-10-04\", DurationFieldType.years(), 1, \"1583-10-04\");\n+        testAdd(\"1582-10-15\", DurationFieldType.years(), 1, \"1583-10-15\");\n+        testAdd(\"1582-10-16\", DurationFieldType.years(), 1, \"1583-10-16\");\n+        testAdd(\"1580-01-01\", DurationFieldType.years(), 4, \"1584-01-01\");\n+        testAdd(\"1580-02-29\", DurationFieldType.years(), 4, \"1584-02-29\");\n+        testAdd(\"1580-10-01\", DurationFieldType.years(), 4, \"1584-10-01\");\n+        testAdd(\"1580-10-10\", DurationFieldType.years(), 4, \"1584-10-10\");\n+        testAdd(\"1580-10-15\", DurationFieldType.years(), 4, \"1584-10-15\");\n+        testAdd(\"1580-12-31\", DurationFieldType.years(), 4, \"1584-12-31\");\n+    }\n+\n+    public void testAddMonths() {\n+        testAdd(\"1582-01-01\", DurationFieldType.months(), 1, \"1582-02-01\");\n+        testAdd(\"1582-01-01\", DurationFieldType.months(), 6, \"1582-07-01\");\n+        testAdd(\"1582-01-01\", DurationFieldType.months(), 12, \"1583-01-01\");\n+        testAdd(\"1582-11-15\", DurationFieldType.months(), 1, \"1582-12-15\");\n+        testAdd(\"1582-09-04\", DurationFieldType.months(), 2, \"1582-11-04\");\n+        testAdd(\"1582-09-05\", DurationFieldType.months(), 2, \"1582-11-05\");\n+        testAdd(\"1582-09-10\", DurationFieldType.months(), 2, \"1582-11-10\");\n+        testAdd(\"1582-09-15\", DurationFieldType.months(), 2, \"1582-11-15\");\n+        testAdd(\"1580-01-01\", DurationFieldType.months(), 48, \"1584-01-01\");\n+        testAdd(\"1580-02-29\", DurationFieldType.months(), 48, \"1584-02-29\");\n+        testAdd(\"1580-10-01\", DurationFieldType.months(), 48, \"1584-10-01\");\n+        testAdd(\"1580-10-10\", DurationFieldType.months(), 48, \"1584-10-10\");\n+        testAdd(\"1580-10-15\", DurationFieldType.months(), 48, \"1584-10-15\");\n+        testAdd(\"1580-12-31\", DurationFieldType.months(), 48, \"1584-12-31\");\n+    }\n+\n+    private void testAdd(String start, DurationFieldType type, int amt, String end) {\n+        DateTime dtStart = new DateTime(start, ISOChronology.getInstanceUTC());\n+        DateTime dtEnd = new DateTime(end, ISOChronology.getInstanceUTC());\n+        assertEquals(dtEnd, dtStart.withFieldAdded(type, amt));\n+        assertEquals(dtStart, dtEnd.withFieldAdded(type, -amt));\n+\n+        DurationField field = type.getField(ISOChronology.getInstanceUTC());\n+        int diff = field.getDifference(dtEnd.getMillis(), dtStart.getMillis());\n+        assertEquals(amt, diff);\n+        \n+        if (type == DurationFieldType.years() ||\n+            type == DurationFieldType.months() ||\n+            type == DurationFieldType.days()) {\n+            YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n+            YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n+            assertEquals(ymdEnd, ymdStart.withFieldAdded(type, amt));\n+            assertEquals(ymdStart, ymdEnd.withFieldAdded(type, -amt));\n+        }\n+    }\n+\n+    public void testTimeOfDayAdd() {\n+        TimeOfDay start = new TimeOfDay(12, 30);\n+        TimeOfDay end = new TimeOfDay(10, 30);\n+        assertEquals(end, start.plusHours(22));\n+        assertEquals(start, end.minusHours(22));\n+        assertEquals(end, start.plusMinutes(22 * 60));\n+        assertEquals(start, end.minusMinutes(22 * 60));\n+    }\n+\n+    public void testPartialDayOfYearAdd() {\n+        Partial start = new Partial().with(DateTimeFieldType.year(), 2000).with(DateTimeFieldType.dayOfYear(), 366);\n+        Partial end = new Partial().with(DateTimeFieldType.year(), 2004).with(DateTimeFieldType.dayOfYear(), 366);\n+        assertEquals(end, start.withFieldAdded(DurationFieldType.days(), 365 + 365 + 365 + 366));\n+        assertEquals(start, end.withFieldAdded(DurationFieldType.days(), -(365 + 365 + 365 + 366)));\n+    }\n+\n+    public void testMaximumValue() {\n+        DateMidnight dt = new DateMidnight(1570, 1, 1);\n+        while (dt.getYear() < 1590) {\n+            dt = dt.plusDays(1);\n+            YearMonthDay ymd = dt.toYearMonthDay();\n+            assertEquals(dt.year().getMaximumValue(), ymd.year().getMaximumValue());\n+            assertEquals(dt.monthOfYear().getMaximumValue(), ymd.monthOfYear().getMaximumValue());\n+            assertEquals(dt.dayOfMonth().getMaximumValue(), ymd.dayOfMonth().getMaximumValue());\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/chrono/TestIslamicChronology.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.chrono;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeField;\n+import org.joda.time.DateTimeUtils;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.DurationFieldType;\n+import org.joda.time.DateTime.Property;\n+\n+/**\n+ * This class is a Junit unit test for IslamicChronology.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestIslamicChronology extends TestCase {\n+\n+    private static long SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    private static final Chronology ISLAMIC_UTC = IslamicChronology.getInstanceUTC();\n+    private static final Chronology JULIAN_UTC = JulianChronology.getInstanceUTC();\n+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+\n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;\n+        return new TestSuite(TestIslamicChronology.class);\n+    }\n+\n+    public TestIslamicChronology(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactoryUTC() {\n+        assertEquals(DateTimeZone.UTC, IslamicChronology.getInstanceUTC().getZone());\n+        assertSame(IslamicChronology.class, IslamicChronology.getInstanceUTC().getClass());\n+    }\n+\n+    public void testFactory() {\n+        assertEquals(LONDON, IslamicChronology.getInstance().getZone());\n+        assertSame(IslamicChronology.class, IslamicChronology.getInstance().getClass());\n+    }\n+\n+    public void testFactory_Zone() {\n+        assertEquals(TOKYO, IslamicChronology.getInstance(TOKYO).getZone());\n+        assertEquals(PARIS, IslamicChronology.getInstance(PARIS).getZone());\n+        assertEquals(LONDON, IslamicChronology.getInstance(null).getZone());\n+        assertSame(IslamicChronology.class, IslamicChronology.getInstance(TOKYO).getClass());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testEquality() {\n+        assertSame(IslamicChronology.getInstance(TOKYO), IslamicChronology.getInstance(TOKYO));\n+        assertSame(IslamicChronology.getInstance(LONDON), IslamicChronology.getInstance(LONDON));\n+        assertSame(IslamicChronology.getInstance(PARIS), IslamicChronology.getInstance(PARIS));\n+        assertSame(IslamicChronology.getInstanceUTC(), IslamicChronology.getInstanceUTC());\n+        assertSame(IslamicChronology.getInstance(), IslamicChronology.getInstance(LONDON));\n+    }\n+\n+    public void testWithUTC() {\n+        assertSame(IslamicChronology.getInstanceUTC(), IslamicChronology.getInstance(LONDON).withUTC());\n+        assertSame(IslamicChronology.getInstanceUTC(), IslamicChronology.getInstance(TOKYO).withUTC());\n+        assertSame(IslamicChronology.getInstanceUTC(), IslamicChronology.getInstanceUTC().withUTC());\n+        assertSame(IslamicChronology.getInstanceUTC(), IslamicChronology.getInstance().withUTC());\n+    }\n+\n+    public void testWithZone() {\n+        assertSame(IslamicChronology.getInstance(TOKYO), IslamicChronology.getInstance(TOKYO).withZone(TOKYO));\n+        assertSame(IslamicChronology.getInstance(LONDON), IslamicChronology.getInstance(TOKYO).withZone(LONDON));\n+        assertSame(IslamicChronology.getInstance(PARIS), IslamicChronology.getInstance(TOKYO).withZone(PARIS));\n+        assertSame(IslamicChronology.getInstance(LONDON), IslamicChronology.getInstance(TOKYO).withZone(null));\n+        assertSame(IslamicChronology.getInstance(PARIS), IslamicChronology.getInstance().withZone(PARIS));\n+        assertSame(IslamicChronology.getInstance(PARIS), IslamicChronology.getInstanceUTC().withZone(PARIS));\n+    }\n+\n+    public void testToString() {\n+        assertEquals(\"IslamicChronology[Europe/London]\", IslamicChronology.getInstance(LONDON).toString());\n+        assertEquals(\"IslamicChronology[Asia/Tokyo]\", IslamicChronology.getInstance(TOKYO).toString());\n+        assertEquals(\"IslamicChronology[Europe/London]\", IslamicChronology.getInstance().toString());\n+        assertEquals(\"IslamicChronology[UTC]\", IslamicChronology.getInstanceUTC().toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testDurationFields() {\n+        assertEquals(\"eras\", IslamicChronology.getInstance().eras().getName());\n+        assertEquals(\"centuries\", IslamicChronology.getInstance().centuries().getName());\n+        assertEquals(\"years\", IslamicChronology.getInstance().years().getName());\n+        assertEquals(\"weekyears\", IslamicChronology.getInstance().weekyears().getName());\n+        assertEquals(\"months\", IslamicChronology.getInstance().months().getName());\n+        assertEquals(\"weeks\", IslamicChronology.getInstance().weeks().getName());\n+        assertEquals(\"days\", IslamicChronology.getInstance().days().getName());\n+        assertEquals(\"halfdays\", IslamicChronology.getInstance().halfdays().getName());\n+        assertEquals(\"hours\", IslamicChronology.getInstance().hours().getName());\n+        assertEquals(\"minutes\", IslamicChronology.getInstance().minutes().getName());\n+        assertEquals(\"seconds\", IslamicChronology.getInstance().seconds().getName());\n+        assertEquals(\"millis\", IslamicChronology.getInstance().millis().getName());\n+        \n+        assertEquals(false, IslamicChronology.getInstance().eras().isSupported());\n+        assertEquals(true, IslamicChronology.getInstance().centuries().isSupported());\n+        assertEquals(true, IslamicChronology.getInstance().years().isSupported());\n+        assertEquals(true, IslamicChronology.getInstance().weekyears().isSupported());\n+        assertEquals(true, IslamicChronology.getInstance().months().isSupported());\n+        assertEquals(true, IslamicChronology.getInstance().weeks().isSupported());\n+        assertEquals(true, IslamicChronology.getInstance().days().isSupported());\n+        assertEquals(true, IslamicChronology.getInstance().halfdays().isSupported());\n+        assertEquals(true, IslamicChronology.getInstance().hours().isSupported());\n+        assertEquals(true, IslamicChronology.getInstance().minutes().isSupported());\n+        assertEquals(true, IslamicChronology.getInstance().seconds().isSupported());\n+        assertEquals(true, IslamicChronology.getInstance().millis().isSupported());\n+        \n+        assertEquals(false, IslamicChronology.getInstance().centuries().isPrecise());\n+        assertEquals(false, IslamicChronology.getInstance().years().isPrecise());\n+        assertEquals(false, IslamicChronology.getInstance().weekyears().isPrecise());\n+        assertEquals(false, IslamicChronology.getInstance().months().isPrecise());\n+        assertEquals(false, IslamicChronology.getInstance().weeks().isPrecise());\n+        assertEquals(false, IslamicChronology.getInstance().days().isPrecise());\n+        assertEquals(false, IslamicChronology.getInstance().halfdays().isPrecise());\n+        assertEquals(true, IslamicChronology.getInstance().hours().isPrecise());\n+        assertEquals(true, IslamicChronology.getInstance().minutes().isPrecise());\n+        assertEquals(true, IslamicChronology.getInstance().seconds().isPrecise());\n+        assertEquals(true, IslamicChronology.getInstance().millis().isPrecise());\n+        \n+        assertEquals(false, IslamicChronology.getInstanceUTC().centuries().isPrecise());\n+        assertEquals(false, IslamicChronology.getInstanceUTC().years().isPrecise());\n+        assertEquals(false, IslamicChronology.getInstanceUTC().weekyears().isPrecise());\n+        assertEquals(false, IslamicChronology.getInstanceUTC().months().isPrecise());\n+        assertEquals(true, IslamicChronology.getInstanceUTC().weeks().isPrecise());\n+        assertEquals(true, IslamicChronology.getInstanceUTC().days().isPrecise());\n+        assertEquals(true, IslamicChronology.getInstanceUTC().halfdays().isPrecise());\n+        assertEquals(true, IslamicChronology.getInstanceUTC().hours().isPrecise());\n+        assertEquals(true, IslamicChronology.getInstanceUTC().minutes().isPrecise());\n+        assertEquals(true, IslamicChronology.getInstanceUTC().seconds().isPrecise());\n+        assertEquals(true, IslamicChronology.getInstanceUTC().millis().isPrecise());\n+        \n+        DateTimeZone gmt = DateTimeZone.forID(\"Etc/GMT\");\n+        assertEquals(false, IslamicChronology.getInstance(gmt).centuries().isPrecise());\n+        assertEquals(false, IslamicChronology.getInstance(gmt).years().isPrecise());\n+        assertEquals(false, IslamicChronology.getInstance(gmt).weekyears().isPrecise());\n+        assertEquals(false, IslamicChronology.getInstance(gmt).months().isPrecise());\n+        assertEquals(true, IslamicChronology.getInstance(gmt).weeks().isPrecise());\n+        assertEquals(true, IslamicChronology.getInstance(gmt).days().isPrecise());\n+        assertEquals(true, IslamicChronology.getInstance(gmt).halfdays().isPrecise());\n+        assertEquals(true, IslamicChronology.getInstance(gmt).hours().isPrecise());\n+        assertEquals(true, IslamicChronology.getInstance(gmt).minutes().isPrecise());\n+        assertEquals(true, IslamicChronology.getInstance(gmt).seconds().isPrecise());\n+        assertEquals(true, IslamicChronology.getInstance(gmt).millis().isPrecise());\n+    }\n+\n+    public void testDateFields() {\n+        assertEquals(\"era\", IslamicChronology.getInstance().era().getName());\n+        assertEquals(\"centuryOfEra\", IslamicChronology.getInstance().centuryOfEra().getName());\n+        assertEquals(\"yearOfCentury\", IslamicChronology.getInstance().yearOfCentury().getName());\n+        assertEquals(\"yearOfEra\", IslamicChronology.getInstance().yearOfEra().getName());\n+        assertEquals(\"year\", IslamicChronology.getInstance().year().getName());\n+        assertEquals(\"monthOfYear\", IslamicChronology.getInstance().monthOfYear().getName());\n+        assertEquals(\"weekyearOfCentury\", IslamicChronology.getInstance().weekyearOfCentury().getName());\n+        assertEquals(\"weekyear\", IslamicChronology.getInstance().weekyear().getName());\n+        assertEquals(\"weekOfWeekyear\", IslamicChronology.getInstance().weekOfWeekyear().getName());\n+        assertEquals(\"dayOfYear\", IslamicChronology.getInstance().dayOfYear().getName());\n+        assertEquals(\"dayOfMonth\", IslamicChronology.getInstance().dayOfMonth().getName());\n+        assertEquals(\"dayOfWeek\", IslamicChronology.getInstance().dayOfWeek().getName());\n+        \n+        assertEquals(true, IslamicChronology.getInstance().era().isSupported());\n+        assertEquals(true, IslamicChronology.getInstance().centuryOfEra().isSupported());\n+        assertEquals(true, IslamicChronology.getInstance().yearOfCentury().isSupported());\n+        assertEquals(true, IslamicChronology.getInstance().yearOfEra().isSupported());\n+        assertEquals(true, IslamicChronology.getInstance().year().isSupported());\n+        assertEquals(true, IslamicChronology.getInstance().monthOfYear().isSupported());\n+        assertEquals(true, IslamicChronology.getInstance().weekyearOfCentury().isSupported());\n+        assertEquals(true, IslamicChronology.getInstance().weekyear().isSupported());\n+        assertEquals(true, IslamicChronology.getInstance().weekOfWeekyear().isSupported());\n+        assertEquals(true, IslamicChronology.getInstance().dayOfYear().isSupported());\n+        assertEquals(true, IslamicChronology.getInstance().dayOfMonth().isSupported());\n+        assertEquals(true, IslamicChronology.getInstance().dayOfWeek().isSupported());\n+    }\n+\n+    public void testTimeFields() {\n+        assertEquals(\"halfdayOfDay\", IslamicChronology.getInstance().halfdayOfDay().getName());\n+        assertEquals(\"clockhourOfHalfday\", IslamicChronology.getInstance().clockhourOfHalfday().getName());\n+        assertEquals(\"hourOfHalfday\", IslamicChronology.getInstance().hourOfHalfday().getName());\n+        assertEquals(\"clockhourOfDay\", IslamicChronology.getInstance().clockhourOfDay().getName());\n+        assertEquals(\"hourOfDay\", IslamicChronology.getInstance().hourOfDay().getName());\n+        assertEquals(\"minuteOfDay\", IslamicChronology.getInstance().minuteOfDay().getName());\n+        assertEquals(\"minuteOfHour\", IslamicChronology.getInstance().minuteOfHour().getName());\n+        assertEquals(\"secondOfDay\", IslamicChronology.getInstance().secondOfDay().getName());\n+        assertEquals(\"secondOfMinute\", IslamicChronology.getInstance().secondOfMinute().getName());\n+        assertEquals(\"millisOfDay\", IslamicChronology.getInstance().millisOfDay().getName());\n+        assertEquals(\"millisOfSecond\", IslamicChronology.getInstance().millisOfSecond().getName());\n+        \n+        assertEquals(true, IslamicChronology.getInstance().halfdayOfDay().isSupported());\n+        assertEquals(true, IslamicChronology.getInstance().clockhourOfHalfday().isSupported());\n+        assertEquals(true, IslamicChronology.getInstance().hourOfHalfday().isSupported());\n+        assertEquals(true, IslamicChronology.getInstance().clockhourOfDay().isSupported());\n+        assertEquals(true, IslamicChronology.getInstance().hourOfDay().isSupported());\n+        assertEquals(true, IslamicChronology.getInstance().minuteOfDay().isSupported());\n+        assertEquals(true, IslamicChronology.getInstance().minuteOfHour().isSupported());\n+        assertEquals(true, IslamicChronology.getInstance().secondOfDay().isSupported());\n+        assertEquals(true, IslamicChronology.getInstance().secondOfMinute().isSupported());\n+        assertEquals(true, IslamicChronology.getInstance().millisOfDay().isSupported());\n+        assertEquals(true, IslamicChronology.getInstance().millisOfSecond().isSupported());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testEpoch() {\n+        DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ISLAMIC_UTC);\n+        DateTime expectedEpoch = new DateTime(622, 7, 16, 0, 0, 0, 0, JULIAN_UTC);\n+        assertEquals(expectedEpoch.getMillis(), epoch.getMillis());\n+    }\n+\n+    public void testEra() {\n+        assertEquals(1, IslamicChronology.AH);\n+        try {\n+            new DateTime(-1, 13, 5, 0, 0, 0, 0, ISLAMIC_UTC);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFieldConstructor() {\n+        DateTime date = new DateTime(1364, 12, 6, 0, 0, 0, 0, ISLAMIC_UTC);\n+        DateTime expectedDate = new DateTime(1945, 11, 12, 0, 0, 0, 0, ISO_UTC);\n+        assertEquals(expectedDate.getMillis(), date.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Tests era, year, monthOfYear, dayOfMonth and dayOfWeek.\n+     */\n+    public void testCalendar() {\n+        if (TestAll.FAST) {\n+            return;\n+        }\n+        System.out.println(\"\\nTestIslamicChronology.testCalendar\");\n+        DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ISLAMIC_UTC);\n+        long millis = epoch.getMillis();\n+        long end = new DateTime(3000, 1, 1, 0, 0, 0, 0, ISO_UTC).getMillis();\n+        DateTimeField dayOfWeek = ISLAMIC_UTC.dayOfWeek();\n+        DateTimeField dayOfYear = ISLAMIC_UTC.dayOfYear();\n+        DateTimeField dayOfMonth = ISLAMIC_UTC.dayOfMonth();\n+        DateTimeField monthOfYear = ISLAMIC_UTC.monthOfYear();\n+        DateTimeField year = ISLAMIC_UTC.year();\n+        DateTimeField yearOfEra = ISLAMIC_UTC.yearOfEra();\n+        DateTimeField era = ISLAMIC_UTC.era();\n+        int expectedDOW = new DateTime(622, 7, 16, 0, 0, 0, 0, JULIAN_UTC).getDayOfWeek();\n+        int expectedDOY = 1;\n+        int expectedDay = 1;\n+        int expectedMonth = 1;\n+        int expectedYear = 1;\n+        while (millis < end) {\n+            int dowValue = dayOfWeek.get(millis);\n+            int doyValue = dayOfYear.get(millis);\n+            int dayValue = dayOfMonth.get(millis);\n+            int monthValue = monthOfYear.get(millis);\n+            int yearValue = year.get(millis);\n+            int yearOfEraValue = yearOfEra.get(millis);\n+            int dayOfYearLen = dayOfYear.getMaximumValue(millis);\n+            int monthLen = dayOfMonth.getMaximumValue(millis);\n+            if (monthValue < 1 || monthValue > 12) {\n+                fail(\"Bad month: \" + millis);\n+            }\n+            \n+            // test era\n+            assertEquals(1, era.get(millis));\n+            assertEquals(\"AH\", era.getAsText(millis));\n+            assertEquals(\"AH\", era.getAsShortText(millis));\n+            \n+            // test date\n+            assertEquals(expectedDOY, doyValue);\n+            assertEquals(expectedMonth, monthValue);\n+            assertEquals(expectedDay, dayValue);\n+            assertEquals(expectedDOW, dowValue);\n+            assertEquals(expectedYear, yearValue);\n+            assertEquals(expectedYear, yearOfEraValue);\n+            \n+            // test leap year\n+            boolean leap = ((11 * yearValue + 14) % 30) < 11;\n+            assertEquals(leap, year.isLeap(millis));\n+            \n+            // test month length\n+            switch (monthValue) {\n+                case 1:\n+                case 3:\n+                case 5:\n+                case 7:\n+                case 9:\n+                case 11:\n+                    assertEquals(30, monthLen);\n+                    break;\n+                case 2:\n+                case 4:\n+                case 6:\n+                case 8:\n+                case 10:\n+                    assertEquals(29, monthLen);\n+                    break;\n+                case 12:\n+                    assertEquals((leap ? 30 : 29), monthLen);\n+                    break;\n+            }\n+            \n+            // test year length\n+            assertEquals((leap ? 355 : 354), dayOfYearLen);\n+            \n+            // recalculate date\n+            expectedDOW = (((expectedDOW + 1) - 1) % 7) + 1;\n+            expectedDay++;\n+            expectedDOY++;\n+            if (expectedDay > monthLen) {\n+                expectedDay = 1;\n+                expectedMonth++;\n+                if (expectedMonth == 13) {\n+                    expectedMonth = 1;\n+                    expectedDOY = 1;\n+                    expectedYear++;\n+                }\n+            }\n+            millis += SKIP;\n+        }\n+    }\n+\n+    public void testSampleDate1() {\n+        DateTime dt = new DateTime(1945, 11, 12, 0, 0, 0, 0, ISO_UTC);\n+        dt = dt.withChronology(ISLAMIC_UTC);\n+        assertEquals(IslamicChronology.AH, dt.getEra());\n+        assertEquals(14, dt.getCenturyOfEra());  // TODO confirm\n+        assertEquals(64, dt.getYearOfCentury());\n+        assertEquals(1364, dt.getYearOfEra());\n+        \n+        assertEquals(1364, dt.getYear());\n+        Property fld = dt.year();\n+        assertEquals(false, fld.isLeap());\n+        assertEquals(0, fld.getLeapAmount());\n+        assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType());\n+        assertEquals(new DateTime(1365, 12, 6, 0, 0, 0, 0, ISLAMIC_UTC), fld.addToCopy(1));\n+        \n+        assertEquals(12, dt.getMonthOfYear());\n+        fld = dt.monthOfYear();\n+        assertEquals(false, fld.isLeap());\n+        assertEquals(0, fld.getLeapAmount());\n+        assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType());\n+        assertEquals(1, fld.getMinimumValue());\n+        assertEquals(1, fld.getMinimumValueOverall());\n+        assertEquals(12, fld.getMaximumValue());\n+        assertEquals(12, fld.getMaximumValueOverall());\n+        assertEquals(new DateTime(1365, 1, 6, 0, 0, 0, 0, ISLAMIC_UTC), fld.addToCopy(1));\n+        assertEquals(new DateTime(1364, 1, 6, 0, 0, 0, 0, ISLAMIC_UTC), fld.addWrapFieldToCopy(1));\n+        \n+        assertEquals(6, dt.getDayOfMonth());\n+        fld = dt.dayOfMonth();\n+        assertEquals(false, fld.isLeap());\n+        assertEquals(0, fld.getLeapAmount());\n+        assertEquals(null, fld.getLeapDurationField());\n+        assertEquals(1, fld.getMinimumValue());\n+        assertEquals(1, fld.getMinimumValueOverall());\n+        assertEquals(29, fld.getMaximumValue());\n+        assertEquals(30, fld.getMaximumValueOverall());\n+        assertEquals(new DateTime(1364, 12, 7, 0, 0, 0, 0, ISLAMIC_UTC), fld.addToCopy(1));\n+        \n+        assertEquals(DateTimeConstants.MONDAY, dt.getDayOfWeek());\n+        fld = dt.dayOfWeek();\n+        assertEquals(false, fld.isLeap());\n+        assertEquals(0, fld.getLeapAmount());\n+        assertEquals(null, fld.getLeapDurationField());\n+        assertEquals(1, fld.getMinimumValue());\n+        assertEquals(1, fld.getMinimumValueOverall());\n+        assertEquals(7, fld.getMaximumValue());\n+        assertEquals(7, fld.getMaximumValueOverall());\n+        assertEquals(new DateTime(1364, 12, 7, 0, 0, 0, 0, ISLAMIC_UTC), fld.addToCopy(1));\n+        \n+        assertEquals(6 * 30 + 5 * 29 + 6, dt.getDayOfYear());\n+        fld = dt.dayOfYear();\n+        assertEquals(false, fld.isLeap());\n+        assertEquals(0, fld.getLeapAmount());\n+        assertEquals(null, fld.getLeapDurationField());\n+        assertEquals(1, fld.getMinimumValue());\n+        assertEquals(1, fld.getMinimumValueOverall());\n+        assertEquals(354, fld.getMaximumValue());\n+        assertEquals(355, fld.getMaximumValueOverall());\n+        assertEquals(new DateTime(1364, 12, 7, 0, 0, 0, 0, ISLAMIC_UTC), fld.addToCopy(1));\n+        \n+        assertEquals(0, dt.getHourOfDay());\n+        assertEquals(0, dt.getMinuteOfHour());\n+        assertEquals(0, dt.getSecondOfMinute());\n+        assertEquals(0, dt.getMillisOfSecond());\n+    }\n+\n+    public void testSampleDate2() {\n+        DateTime dt = new DateTime(2005, 11, 26, 0, 0, 0, 0, ISO_UTC);\n+        dt = dt.withChronology(ISLAMIC_UTC);\n+        assertEquals(IslamicChronology.AH, dt.getEra());\n+        assertEquals(15, dt.getCenturyOfEra());  // TODO confirm\n+        assertEquals(26, dt.getYearOfCentury());\n+        assertEquals(1426, dt.getYearOfEra());\n+        \n+        assertEquals(1426, dt.getYear());\n+        Property fld = dt.year();\n+        assertEquals(true, fld.isLeap());\n+        assertEquals(1, fld.getLeapAmount());\n+        assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType());\n+        \n+        assertEquals(10, dt.getMonthOfYear());\n+        fld = dt.monthOfYear();\n+        assertEquals(false, fld.isLeap());\n+        assertEquals(0, fld.getLeapAmount());\n+        assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType());\n+        assertEquals(1, fld.getMinimumValue());\n+        assertEquals(1, fld.getMinimumValueOverall());\n+        assertEquals(12, fld.getMaximumValue());\n+        assertEquals(12, fld.getMaximumValueOverall());\n+        \n+        assertEquals(24, dt.getDayOfMonth());\n+        fld = dt.dayOfMonth();\n+        assertEquals(false, fld.isLeap());\n+        assertEquals(0, fld.getLeapAmount());\n+        assertEquals(null, fld.getLeapDurationField());\n+        assertEquals(1, fld.getMinimumValue());\n+        assertEquals(1, fld.getMinimumValueOverall());\n+        assertEquals(29, fld.getMaximumValue());\n+        assertEquals(30, fld.getMaximumValueOverall());\n+        \n+        assertEquals(DateTimeConstants.SATURDAY, dt.getDayOfWeek());\n+        fld = dt.dayOfWeek();\n+        assertEquals(false, fld.isLeap());\n+        assertEquals(0, fld.getLeapAmount());\n+        assertEquals(null, fld.getLeapDurationField());\n+        assertEquals(1, fld.getMinimumValue());\n+        assertEquals(1, fld.getMinimumValueOverall());\n+        assertEquals(7, fld.getMaximumValue());\n+        assertEquals(7, fld.getMaximumValueOverall());\n+        \n+        assertEquals(5 * 30 + 4 * 29 + 24, dt.getDayOfYear());\n+        fld = dt.dayOfYear();\n+        assertEquals(false, fld.isLeap());\n+        assertEquals(0, fld.getLeapAmount());\n+        assertEquals(null, fld.getLeapDurationField());\n+        assertEquals(1, fld.getMinimumValue());\n+        assertEquals(1, fld.getMinimumValueOverall());\n+        assertEquals(355, fld.getMaximumValue());\n+        assertEquals(355, fld.getMaximumValueOverall());\n+        \n+        assertEquals(0, dt.getHourOfDay());\n+        assertEquals(0, dt.getMinuteOfHour());\n+        assertEquals(0, dt.getSecondOfMinute());\n+        assertEquals(0, dt.getMillisOfSecond());\n+    }\n+\n+    public void testSampleDate3() {\n+        DateTime dt = new DateTime(1426, 12, 24, 0, 0, 0, 0, ISLAMIC_UTC);\n+        assertEquals(IslamicChronology.AH, dt.getEra());\n+        \n+        assertEquals(1426, dt.getYear());\n+        Property fld = dt.year();\n+        assertEquals(true, fld.isLeap());\n+        assertEquals(1, fld.getLeapAmount());\n+        assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType());\n+        \n+        assertEquals(12, dt.getMonthOfYear());\n+        fld = dt.monthOfYear();\n+        assertEquals(true, fld.isLeap());\n+        assertEquals(1, fld.getLeapAmount());\n+        assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType());\n+        assertEquals(1, fld.getMinimumValue());\n+        assertEquals(1, fld.getMinimumValueOverall());\n+        assertEquals(12, fld.getMaximumValue());\n+        assertEquals(12, fld.getMaximumValueOverall());\n+        \n+        assertEquals(24, dt.getDayOfMonth());\n+        fld = dt.dayOfMonth();\n+        assertEquals(false, fld.isLeap());\n+        assertEquals(0, fld.getLeapAmount());\n+        assertEquals(null, fld.getLeapDurationField());\n+        assertEquals(1, fld.getMinimumValue());\n+        assertEquals(1, fld.getMinimumValueOverall());\n+        assertEquals(30, fld.getMaximumValue());\n+        assertEquals(30, fld.getMaximumValueOverall());\n+        \n+        assertEquals(DateTimeConstants.TUESDAY, dt.getDayOfWeek());\n+        fld = dt.dayOfWeek();\n+        assertEquals(false, fld.isLeap());\n+        assertEquals(0, fld.getLeapAmount());\n+        assertEquals(null, fld.getLeapDurationField());\n+        assertEquals(1, fld.getMinimumValue());\n+        assertEquals(1, fld.getMinimumValueOverall());\n+        assertEquals(7, fld.getMaximumValue());\n+        assertEquals(7, fld.getMaximumValueOverall());\n+        \n+        assertEquals(6 * 30 + 5 * 29 + 24, dt.getDayOfYear());\n+        fld = dt.dayOfYear();\n+        assertEquals(false, fld.isLeap());\n+        assertEquals(0, fld.getLeapAmount());\n+        assertEquals(null, fld.getLeapDurationField());\n+        assertEquals(1, fld.getMinimumValue());\n+        assertEquals(1, fld.getMinimumValueOverall());\n+        assertEquals(355, fld.getMaximumValue());\n+        assertEquals(355, fld.getMaximumValueOverall());\n+        \n+        assertEquals(0, dt.getHourOfDay());\n+        assertEquals(0, dt.getMinuteOfHour());\n+        assertEquals(0, dt.getSecondOfMinute());\n+        assertEquals(0, dt.getMillisOfSecond());\n+    }\n+\n+    public void testSampleDateWithZone() {\n+        DateTime dt = new DateTime(2005, 11, 26, 12, 0, 0, 0, PARIS).withChronology(ISLAMIC_UTC);\n+        assertEquals(IslamicChronology.AH, dt.getEra());\n+        assertEquals(1426, dt.getYear());\n+        assertEquals(10, dt.getMonthOfYear());\n+        assertEquals(24, dt.getDayOfMonth());\n+        assertEquals(11, dt.getHourOfDay());  // PARIS is UTC+1 in summer (12-1=11)\n+        assertEquals(0, dt.getMinuteOfHour());\n+        assertEquals(0, dt.getSecondOfMinute());\n+        assertEquals(0, dt.getMillisOfSecond());\n+    }\n+\n+    public void test15BasedLeapYear() {\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(1));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(2));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(3));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(4));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(5));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(6));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(7));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(8));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(9));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(10));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(11));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(12));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(13));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(14));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(15));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(16));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(17));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(18));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(19));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(20));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(21));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(22));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(23));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(24));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(25));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(26));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(27));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(28));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(29));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(30));\n+    }\n+\n+    public void test16BasedLeapYear() {\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(1));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(2));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(3));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(4));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(5));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(6));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(7));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(8));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(9));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(10));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(11));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(12));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(13));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(14));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(15));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(16));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(17));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(18));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(19));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(20));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(21));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(22));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(23));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(24));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(25));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(26));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(27));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(28));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(29));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(30));\n+    }\n+\n+    public void testIndianBasedLeapYear() {\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(1));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(2));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(3));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(4));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(5));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(6));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(7));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(8));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(9));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(10));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(11));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(12));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(13));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(14));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(15));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(16));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(17));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(18));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(19));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(20));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(21));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(22));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(23));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(24));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(25));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(26));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(27));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(28));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(29));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(30));\n+    }\n+\n+    public void testHabashAlHasibBasedLeapYear() {\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(1));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(2));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(3));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(4));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(5));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(6));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(7));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(8));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(9));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(10));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(11));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(12));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(13));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(14));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(15));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(16));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(17));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(18));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(19));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(20));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(21));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(22));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(23));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(24));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(25));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(26));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(27));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(28));\n+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(29));\n+        assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(30));\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/chrono/TestJulianChronology.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.chrono;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeUtils;\n+import org.joda.time.DateTimeZone;\n+\n+/**\n+ * This class is a Junit unit test for JulianChronology.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestJulianChronology extends TestCase {\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+\n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestJulianChronology.class);\n+    }\n+\n+    public TestJulianChronology(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactoryUTC() {\n+        assertEquals(DateTimeZone.UTC, JulianChronology.getInstanceUTC().getZone());\n+        assertSame(JulianChronology.class, JulianChronology.getInstanceUTC().getClass());\n+    }\n+\n+    public void testFactory() {\n+        assertEquals(LONDON, JulianChronology.getInstance().getZone());\n+        assertSame(JulianChronology.class, JulianChronology.getInstance().getClass());\n+    }\n+\n+    public void testFactory_Zone() {\n+        assertEquals(TOKYO, JulianChronology.getInstance(TOKYO).getZone());\n+        assertEquals(PARIS, JulianChronology.getInstance(PARIS).getZone());\n+        assertEquals(LONDON, JulianChronology.getInstance(null).getZone());\n+        assertSame(JulianChronology.class, JulianChronology.getInstance(TOKYO).getClass());\n+    }\n+\n+    public void testFactory_Zone_int() {\n+        JulianChronology chrono = JulianChronology.getInstance(TOKYO, 2);\n+        assertEquals(TOKYO, chrono.getZone());\n+        assertEquals(2, chrono.getMinimumDaysInFirstWeek());\n+        \n+        try {\n+            JulianChronology.getInstance(TOKYO, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            JulianChronology.getInstance(TOKYO, 8);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testEquality() {\n+        assertSame(JulianChronology.getInstance(TOKYO), JulianChronology.getInstance(TOKYO));\n+        assertSame(JulianChronology.getInstance(LONDON), JulianChronology.getInstance(LONDON));\n+        assertSame(JulianChronology.getInstance(PARIS), JulianChronology.getInstance(PARIS));\n+        assertSame(JulianChronology.getInstanceUTC(), JulianChronology.getInstanceUTC());\n+        assertSame(JulianChronology.getInstance(), JulianChronology.getInstance(LONDON));\n+    }\n+\n+    public void testWithUTC() {\n+        assertSame(JulianChronology.getInstanceUTC(), JulianChronology.getInstance(LONDON).withUTC());\n+        assertSame(JulianChronology.getInstanceUTC(), JulianChronology.getInstance(TOKYO).withUTC());\n+        assertSame(JulianChronology.getInstanceUTC(), JulianChronology.getInstanceUTC().withUTC());\n+        assertSame(JulianChronology.getInstanceUTC(), JulianChronology.getInstance().withUTC());\n+    }\n+\n+    public void testWithZone() {\n+        assertSame(JulianChronology.getInstance(TOKYO), JulianChronology.getInstance(TOKYO).withZone(TOKYO));\n+        assertSame(JulianChronology.getInstance(LONDON), JulianChronology.getInstance(TOKYO).withZone(LONDON));\n+        assertSame(JulianChronology.getInstance(PARIS), JulianChronology.getInstance(TOKYO).withZone(PARIS));\n+        assertSame(JulianChronology.getInstance(LONDON), JulianChronology.getInstance(TOKYO).withZone(null));\n+        assertSame(JulianChronology.getInstance(PARIS), JulianChronology.getInstance().withZone(PARIS));\n+        assertSame(JulianChronology.getInstance(PARIS), JulianChronology.getInstanceUTC().withZone(PARIS));\n+    }\n+\n+    public void testToString() {\n+        assertEquals(\"JulianChronology[Europe/London]\", JulianChronology.getInstance(LONDON).toString());\n+        assertEquals(\"JulianChronology[Asia/Tokyo]\", JulianChronology.getInstance(TOKYO).toString());\n+        assertEquals(\"JulianChronology[Europe/London]\", JulianChronology.getInstance().toString());\n+        assertEquals(\"JulianChronology[UTC]\", JulianChronology.getInstanceUTC().toString());\n+        assertEquals(\"JulianChronology[UTC,mdfw=2]\", JulianChronology.getInstance(DateTimeZone.UTC, 2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testDurationFields() {\n+        assertEquals(\"eras\", JulianChronology.getInstance().eras().getName());\n+        assertEquals(\"centuries\", JulianChronology.getInstance().centuries().getName());\n+        assertEquals(\"years\", JulianChronology.getInstance().years().getName());\n+        assertEquals(\"weekyears\", JulianChronology.getInstance().weekyears().getName());\n+        assertEquals(\"months\", JulianChronology.getInstance().months().getName());\n+        assertEquals(\"weeks\", JulianChronology.getInstance().weeks().getName());\n+        assertEquals(\"days\", JulianChronology.getInstance().days().getName());\n+        assertEquals(\"halfdays\", JulianChronology.getInstance().halfdays().getName());\n+        assertEquals(\"hours\", JulianChronology.getInstance().hours().getName());\n+        assertEquals(\"minutes\", JulianChronology.getInstance().minutes().getName());\n+        assertEquals(\"seconds\", JulianChronology.getInstance().seconds().getName());\n+        assertEquals(\"millis\", JulianChronology.getInstance().millis().getName());\n+        \n+        assertEquals(false, JulianChronology.getInstance().eras().isSupported());\n+        assertEquals(true, JulianChronology.getInstance().centuries().isSupported());\n+        assertEquals(true, JulianChronology.getInstance().years().isSupported());\n+        assertEquals(true, JulianChronology.getInstance().weekyears().isSupported());\n+        assertEquals(true, JulianChronology.getInstance().months().isSupported());\n+        assertEquals(true, JulianChronology.getInstance().weeks().isSupported());\n+        assertEquals(true, JulianChronology.getInstance().days().isSupported());\n+        assertEquals(true, JulianChronology.getInstance().halfdays().isSupported());\n+        assertEquals(true, JulianChronology.getInstance().hours().isSupported());\n+        assertEquals(true, JulianChronology.getInstance().minutes().isSupported());\n+        assertEquals(true, JulianChronology.getInstance().seconds().isSupported());\n+        assertEquals(true, JulianChronology.getInstance().millis().isSupported());\n+        \n+        assertEquals(false, JulianChronology.getInstance().centuries().isPrecise());\n+        assertEquals(false, JulianChronology.getInstance().years().isPrecise());\n+        assertEquals(false, JulianChronology.getInstance().weekyears().isPrecise());\n+        assertEquals(false, JulianChronology.getInstance().months().isPrecise());\n+        assertEquals(false, JulianChronology.getInstance().weeks().isPrecise());\n+        assertEquals(false, JulianChronology.getInstance().days().isPrecise());\n+        assertEquals(false, JulianChronology.getInstance().halfdays().isPrecise());\n+        assertEquals(true, JulianChronology.getInstance().hours().isPrecise());\n+        assertEquals(true, JulianChronology.getInstance().minutes().isPrecise());\n+        assertEquals(true, JulianChronology.getInstance().seconds().isPrecise());\n+        assertEquals(true, JulianChronology.getInstance().millis().isPrecise());\n+        \n+        assertEquals(false, JulianChronology.getInstanceUTC().centuries().isPrecise());\n+        assertEquals(false, JulianChronology.getInstanceUTC().years().isPrecise());\n+        assertEquals(false, JulianChronology.getInstanceUTC().weekyears().isPrecise());\n+        assertEquals(false, JulianChronology.getInstanceUTC().months().isPrecise());\n+        assertEquals(true, JulianChronology.getInstanceUTC().weeks().isPrecise());\n+        assertEquals(true, JulianChronology.getInstanceUTC().days().isPrecise());\n+        assertEquals(true, JulianChronology.getInstanceUTC().halfdays().isPrecise());\n+        assertEquals(true, JulianChronology.getInstanceUTC().hours().isPrecise());\n+        assertEquals(true, JulianChronology.getInstanceUTC().minutes().isPrecise());\n+        assertEquals(true, JulianChronology.getInstanceUTC().seconds().isPrecise());\n+        assertEquals(true, JulianChronology.getInstanceUTC().millis().isPrecise());\n+        \n+        DateTimeZone gmt = DateTimeZone.forID(\"Etc/GMT\");\n+        assertEquals(false, JulianChronology.getInstance(gmt).centuries().isPrecise());\n+        assertEquals(false, JulianChronology.getInstance(gmt).years().isPrecise());\n+        assertEquals(false, JulianChronology.getInstance(gmt).weekyears().isPrecise());\n+        assertEquals(false, JulianChronology.getInstance(gmt).months().isPrecise());\n+        assertEquals(true, JulianChronology.getInstance(gmt).weeks().isPrecise());\n+        assertEquals(true, JulianChronology.getInstance(gmt).days().isPrecise());\n+        assertEquals(true, JulianChronology.getInstance(gmt).halfdays().isPrecise());\n+        assertEquals(true, JulianChronology.getInstance(gmt).hours().isPrecise());\n+        assertEquals(true, JulianChronology.getInstance(gmt).minutes().isPrecise());\n+        assertEquals(true, JulianChronology.getInstance(gmt).seconds().isPrecise());\n+        assertEquals(true, JulianChronology.getInstance(gmt).millis().isPrecise());\n+    }\n+\n+    public void testDateFields() {\n+        assertEquals(\"era\", JulianChronology.getInstance().era().getName());\n+        assertEquals(\"centuryOfEra\", JulianChronology.getInstance().centuryOfEra().getName());\n+        assertEquals(\"yearOfCentury\", JulianChronology.getInstance().yearOfCentury().getName());\n+        assertEquals(\"yearOfEra\", JulianChronology.getInstance().yearOfEra().getName());\n+        assertEquals(\"year\", JulianChronology.getInstance().year().getName());\n+        assertEquals(\"monthOfYear\", JulianChronology.getInstance().monthOfYear().getName());\n+        assertEquals(\"weekyearOfCentury\", JulianChronology.getInstance().weekyearOfCentury().getName());\n+        assertEquals(\"weekyear\", JulianChronology.getInstance().weekyear().getName());\n+        assertEquals(\"weekOfWeekyear\", JulianChronology.getInstance().weekOfWeekyear().getName());\n+        assertEquals(\"dayOfYear\", JulianChronology.getInstance().dayOfYear().getName());\n+        assertEquals(\"dayOfMonth\", JulianChronology.getInstance().dayOfMonth().getName());\n+        assertEquals(\"dayOfWeek\", JulianChronology.getInstance().dayOfWeek().getName());\n+        \n+        assertEquals(true, JulianChronology.getInstance().era().isSupported());\n+        assertEquals(true, JulianChronology.getInstance().centuryOfEra().isSupported());\n+        assertEquals(true, JulianChronology.getInstance().yearOfCentury().isSupported());\n+        assertEquals(true, JulianChronology.getInstance().yearOfEra().isSupported());\n+        assertEquals(true, JulianChronology.getInstance().year().isSupported());\n+        assertEquals(true, JulianChronology.getInstance().monthOfYear().isSupported());\n+        assertEquals(true, JulianChronology.getInstance().weekyearOfCentury().isSupported());\n+        assertEquals(true, JulianChronology.getInstance().weekyear().isSupported());\n+        assertEquals(true, JulianChronology.getInstance().weekOfWeekyear().isSupported());\n+        assertEquals(true, JulianChronology.getInstance().dayOfYear().isSupported());\n+        assertEquals(true, JulianChronology.getInstance().dayOfMonth().isSupported());\n+        assertEquals(true, JulianChronology.getInstance().dayOfWeek().isSupported());\n+    }\n+\n+    public void testTimeFields() {\n+        assertEquals(\"halfdayOfDay\", JulianChronology.getInstance().halfdayOfDay().getName());\n+        assertEquals(\"clockhourOfHalfday\", JulianChronology.getInstance().clockhourOfHalfday().getName());\n+        assertEquals(\"hourOfHalfday\", JulianChronology.getInstance().hourOfHalfday().getName());\n+        assertEquals(\"clockhourOfDay\", JulianChronology.getInstance().clockhourOfDay().getName());\n+        assertEquals(\"hourOfDay\", JulianChronology.getInstance().hourOfDay().getName());\n+        assertEquals(\"minuteOfDay\", JulianChronology.getInstance().minuteOfDay().getName());\n+        assertEquals(\"minuteOfHour\", JulianChronology.getInstance().minuteOfHour().getName());\n+        assertEquals(\"secondOfDay\", JulianChronology.getInstance().secondOfDay().getName());\n+        assertEquals(\"secondOfMinute\", JulianChronology.getInstance().secondOfMinute().getName());\n+        assertEquals(\"millisOfDay\", JulianChronology.getInstance().millisOfDay().getName());\n+        assertEquals(\"millisOfSecond\", JulianChronology.getInstance().millisOfSecond().getName());\n+        \n+        assertEquals(true, JulianChronology.getInstance().halfdayOfDay().isSupported());\n+        assertEquals(true, JulianChronology.getInstance().clockhourOfHalfday().isSupported());\n+        assertEquals(true, JulianChronology.getInstance().hourOfHalfday().isSupported());\n+        assertEquals(true, JulianChronology.getInstance().clockhourOfDay().isSupported());\n+        assertEquals(true, JulianChronology.getInstance().hourOfDay().isSupported());\n+        assertEquals(true, JulianChronology.getInstance().minuteOfDay().isSupported());\n+        assertEquals(true, JulianChronology.getInstance().minuteOfHour().isSupported());\n+        assertEquals(true, JulianChronology.getInstance().secondOfDay().isSupported());\n+        assertEquals(true, JulianChronology.getInstance().secondOfMinute().isSupported());\n+        assertEquals(true, JulianChronology.getInstance().millisOfDay().isSupported());\n+        assertEquals(true, JulianChronology.getInstance().millisOfSecond().isSupported());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/chrono/TestLenientChronology.java\n+/*\n+ *  Copyright 2001-2007 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.chrono;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.MockZone;\n+\n+/**\n+ *\n+ * @author Brian S O'Neill\n+ * @author Blair Martin\n+ */\n+public class TestLenientChronology extends TestCase {\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestLenientChronology.class);\n+    }\n+\n+    public TestLenientChronology(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+    }\n+\n+    protected void tearDown() throws Exception {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_setYear() {\n+        Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC());\n+        DateTime dt = new DateTime(2007, 1, 1, 0, 0 ,0, 0, zone);\n+        assertEquals(\"2007-01-01T00:00:00.000Z\", dt.toString());\n+        dt = dt.withYear(2008);\n+        assertEquals(\"2008-01-01T00:00:00.000Z\", dt.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_setMonthOfYear() {\n+        Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC());\n+        DateTime dt = new DateTime(2007, 1, 1, 0, 0 ,0, 0, zone);\n+        assertEquals(\"2007-01-01T00:00:00.000Z\", dt.toString());\n+        dt = dt.withMonthOfYear(13);\n+        assertEquals(\"2008-01-01T00:00:00.000Z\", dt.toString());\n+        dt = dt.withMonthOfYear(0);\n+        assertEquals(\"2007-12-01T00:00:00.000Z\", dt.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_setDayOfMonth() {\n+        Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC());\n+        DateTime dt = new DateTime(2007, 1, 1, 0, 0 ,0, 0, zone);\n+        assertEquals(\"2007-01-01T00:00:00.000Z\", dt.toString());\n+        dt = dt.withDayOfMonth(32);\n+        assertEquals(\"2007-02-01T00:00:00.000Z\", dt.toString());\n+        dt = dt.withDayOfMonth(0);\n+        assertEquals(\"2007-01-31T00:00:00.000Z\", dt.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_setHourOfDay() {\n+        Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC());\n+        DateTime dt = new DateTime(2007, 1, 1, 0, 0 ,0, 0, zone);\n+        assertEquals(\"2007-01-01T00:00:00.000Z\", dt.toString());\n+        dt = dt.withHourOfDay(24);\n+        assertEquals(\"2007-01-02T00:00:00.000Z\", dt.toString());\n+        dt = dt.withHourOfDay(-1);\n+        assertEquals(\"2007-01-01T23:00:00.000Z\", dt.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //------------------------ Bug ------------------------------------------\n+    //-----------------------------------------------------------------------\n+    public void testNearDstTransition() {\n+        // This is just a regression test. Test case provided by Blair Martin.\n+\n+        int hour = 23;\n+        DateTime dt;\n+\n+        dt = new DateTime(2006, 10, 29, hour, 0, 0, 0,\n+                          ISOChronology.getInstance(DateTimeZone.forID(\"America/Los_Angeles\")));\n+        assertEquals(hour, dt.getHourOfDay()); // OK - no LenientChronology\n+\n+        dt = new DateTime(2006, 10, 29, hour, 0, 0, 0,\n+                          LenientChronology.getInstance\n+                          (ISOChronology.getInstance(DateTimeZone.forOffsetHours(-8))));\n+        assertEquals(hour, dt.getHourOfDay()); // OK - no TZ ID\n+\n+        dt = new DateTime(2006, 10, 29, hour, 0, 0, 0,\n+                          LenientChronology.getInstance\n+                          (ISOChronology.getInstance(DateTimeZone.forID(\"America/Los_Angeles\"))));\n+\n+        assertEquals(hour, dt.getHourOfDay()); // Used to fail - hour was 22\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //------------------------ Bug [1755161] --------------------------------\n+    //-----------------------------------------------------------------------\n+    /** Mock zone simulating America/Grand_Turk cutover at midnight 2007-04-01 */\n+    private static long CUTOVER_TURK = 1175403600000L;\n+    private static int OFFSET_TURK = -18000000;  // -05:00\n+    private static final DateTimeZone MOCK_TURK = new MockZone(CUTOVER_TURK, OFFSET_TURK);\n+\n+    //-----------------------------------------------------------------------\n+    public void test_MockTurkIsCorrect() {\n+        DateTime pre = new DateTime(CUTOVER_TURK - 1L, MOCK_TURK);\n+        assertEquals(\"2007-03-31T23:59:59.999-05:00\", pre.toString());\n+        DateTime at = new DateTime(CUTOVER_TURK, MOCK_TURK);\n+        assertEquals(\"2007-04-01T01:00:00.000-04:00\", at.toString());\n+        DateTime post = new DateTime(CUTOVER_TURK + 1L, MOCK_TURK);\n+        assertEquals(\"2007-04-01T01:00:00.001-04:00\", post.toString());\n+    }\n+\n+    public void test_lenientChrononolgy_Chicago() {\n+        DateTimeZone zone = DateTimeZone.forID(\"America/Chicago\");\n+        Chronology lenient = LenientChronology.getInstance(ISOChronology.getInstance(zone));\n+        DateTime dt = new DateTime(2007, 3, 11, 2, 30, 0, 0, lenient);\n+        assertEquals(\"2007-03-11T03:30:00.000-05:00\", dt.toString());\n+    }\n+\n+    public void test_lenientChrononolgy_Turk() {\n+        Chronology lenient = LenientChronology.getInstance(ISOChronology.getInstance(MOCK_TURK));\n+        DateTime dt = new DateTime(2007, 4, 1, 0, 30, 0, 0, lenient);\n+        assertEquals(\"2007-04-01T01:30:00.000-04:00\", dt.toString());\n+    }\n+\n+    public void test_strictChrononolgy_Chicago() {\n+        DateTimeZone zone = DateTimeZone.forID(\"America/Chicago\");\n+        Chronology lenient = StrictChronology.getInstance(ISOChronology.getInstance(zone));\n+        try {\n+            new DateTime(2007, 3, 11, 2, 30, 0, 0, lenient);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void test_isoChrononolgy_Chicago() {\n+        DateTimeZone zone = DateTimeZone.forID(\"America/Chicago\");\n+        Chronology lenient = ISOChronology.getInstance(zone);\n+        try {\n+            new DateTime(2007, 3, 11, 2, 30, 0, 0, lenient);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/chrono/gj/MainTest.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.chrono.gj;\n+\n+import java.util.Random;\n+\n+import junit.framework.TestCase;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeField;\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.JulianChronology;\n+\n+/**\n+ * Tests either the Julian or Gregorian chronology from org.joda.time.chrono.gj\n+ * against the implementations in this package. It tests all the date fields\n+ * against their principal methods.\n+ * <p>\n+ * Randomly generated values are fed into the DateTimeField methods and the\n+ * results are compared between the two chronologies. If any result doesn't\n+ * match, an error report is generated and the program exits. Each time this\n+ * test program is run, the pseudo random number generator is seeded with the\n+ * same value. This ensures consistent results between test runs.\n+ * <p>\n+ * The main method accepts three optional arguments: iterations, mode, seed. By\n+ * default, iterations is set to 1,000,000. The test will take several minutes\n+ * to run, depending on the computer's performance. Every 5 seconds a progress\n+ * message is printed.\n+ * <p>\n+ * The mode can be either 'g' for proleptic gregorian (the default) or 'j' for\n+ * proleptic julian. To override the default random number generator seed, pass\n+ * in a third argument which accepts a long signed integer.\n+ *\n+ * @author Brian S O'Neill\n+ */\n+public class MainTest extends TestCase {\n+    public static final int GREGORIAN_MODE = 0;\n+    public static final int JULIAN_MODE = 1;\n+\n+    private static final long MILLIS_PER_YEAR = (long)365.2425 * 24 * 60 * 60 * 1000;\n+    private static final long _1000_YEARS = 1000 * MILLIS_PER_YEAR;\n+    private static final long _500_YEARS = 500 * MILLIS_PER_YEAR;\n+    private static final long MAX_MILLIS = (10000 - 1970) * MILLIS_PER_YEAR;\n+    private static final long MIN_MILLIS = (-10000 - 1970) * MILLIS_PER_YEAR;\n+\n+    // Show progess reports every 5 seconds.\n+    private static final long UPDATE_INTERVAL = 5000;\n+\n+    /**\n+     * Arguments: iterations [mode [seed]]\n+     */\n+    public static void main(String[] args) throws Exception {\n+        int iterations = 1000000;\n+        int mode = GREGORIAN_MODE;\n+        long seed = 1345435247779935L;\n+\n+        if (args.length > 0) {\n+            iterations = Integer.parseInt(args[0]);\n+            if (args.length > 1) {\n+                if (args[1].startsWith(\"g\")) {\n+                    mode = GREGORIAN_MODE;\n+                } else if (args[1].startsWith(\"j\")) {\n+                    mode = JULIAN_MODE;\n+                } else {\n+                    throw new IllegalArgumentException\n+                        (\"Unknown mode: \" + args[1]);\n+                }\n+                if (args.length > 2) {\n+                    seed = Long.parseLong(args[2]);\n+                }\n+            }\n+        }\n+\n+        new MainTest(iterations, mode, seed).testChronology();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private final int iIterations;\n+    private final int iMode;\n+    private final long iSeed;\n+    private final Chronology iTest;\n+    private final Chronology iActual;\n+\n+    /**\n+     * @param iterations number of test iterations to perform\n+     * @param mode GREGORIAN_MODE or JULIAN_MODE,0=Gregorian, 1=Julian\n+     * @param seed seed for random number generator\n+     */\n+    public MainTest(int iterations, int mode, long seed) {\n+        super(\"testChronology\");\n+        iIterations = iterations;\n+        iMode = mode;\n+        iSeed = seed;\n+        if (mode == GREGORIAN_MODE) {\n+            iTest = new TestGregorianChronology();\n+            iActual = GregorianChronology.getInstanceUTC();\n+        } else {\n+            iTest = new TestJulianChronology();\n+            iActual = JulianChronology.getInstanceUTC();\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Main junit test\n+     */\n+    public void testChronology() {\n+        int iterations = iIterations;\n+        long seed = iSeed;\n+        String modeStr;\n+        if (iMode == GREGORIAN_MODE) {\n+            modeStr = \"Gregorian\";\n+        } else {\n+            modeStr = \"Julian\";\n+        }\n+\n+        System.out.println(\"\\nTesting \" + modeStr + \" chronology over \" + iterations + \" iterations\");\n+\n+        Random rnd = new Random(seed);\n+        long updateMillis = System.currentTimeMillis() + UPDATE_INTERVAL;\n+\n+        for (int i=0; i<iterations; i++) {\n+            long now = System.currentTimeMillis();\n+            if (now >= updateMillis) {\n+                updateMillis = now + UPDATE_INTERVAL;\n+                double complete = ((int)((double)i / iterations * 1000.0)) / 10d;\n+                if (complete < 100) {\n+                    System.out.println(\"\" + complete + \"% complete (i=\" + i + \")\");\n+                }\n+            }\n+\n+            long millis = randomMillis(rnd);\n+            int value = rnd.nextInt(200) - 100;\n+            // millis2 is used for difference tests.\n+            long millis2 = millis + rnd.nextLong() % _1000_YEARS - _500_YEARS;\n+\n+            try {\n+                testFields(millis, value, millis2);\n+            } catch (RuntimeException e) {\n+                System.out.println(\"Failure index: \" + i);\n+                System.out.println(\"Test millis: \" + millis);\n+                System.out.println(\"Test value: \" + value);\n+                System.out.println(\"Test millis2: \" + millis2);\n+                fail(e.getMessage());\n+            }\n+        }\n+\n+        System.out.println(\"100% complete (i=\" + iterations + \")\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private void testFields(long millis, int value, long millis2) {\n+        testField(iTest.year(), iActual.year(), millis, value, millis2);\n+        testField(iTest.monthOfYear(), iActual.monthOfYear(), millis, value, millis2);\n+        testField(iTest.dayOfMonth(), iActual.dayOfMonth(), millis, value, millis2);\n+        testField(iTest.weekyear(), iActual.weekyear(), millis, value, millis2);\n+        testField(iTest.weekOfWeekyear(),\n+                  iActual.weekOfWeekyear(), millis, value, millis2);\n+        testField(iTest.dayOfWeek(), iActual.dayOfWeek(), millis, value, millis2);\n+        testField(iTest.dayOfYear(), iActual.dayOfYear(), millis, value, millis2);\n+    }\n+\n+    private void testField(DateTimeField fieldA, DateTimeField fieldB, long millis,\n+                           int value, long millis2)\n+    {\n+        int a, b;\n+        long x, y;\n+        boolean m, n;\n+\n+        // get test\n+        a = fieldA.get(millis);\n+        b = fieldB.get(millis);\n+        testValue(fieldA, fieldB, \"get\", millis, a, b);\n+\n+        // getMaximumValue test\n+        // Restrict this test to the fields that matter.\n+        Class fieldClass = fieldA.getClass();\n+        if (fieldClass == TestGJDayOfYearField.class ||\n+            fieldClass == TestGJDayOfMonthField.class ||\n+            fieldClass == TestGJWeekOfWeekyearField.class) {\n+            \n+            a = fieldA.getMaximumValue(millis);\n+            b = fieldB.getMaximumValue(millis);\n+            testValue(fieldA, fieldB, \"getMaximumValue\", millis, a, b);\n+        }\n+\n+        // set test\n+        a = getWrappedValue\n+            (value, fieldA.getMinimumValue(millis), fieldA.getMaximumValue(millis));\n+        b = getWrappedValue\n+            (value, fieldB.getMinimumValue(millis), fieldB.getMaximumValue(millis));\n+        if (iMode == JULIAN_MODE && a == 0\n+            && (fieldA.getName().equals(\"year\") || fieldA.getName().equals(\"weekyear\"))) {\n+            // Exclude setting Julian year of zero.\n+        } else {\n+            x = fieldA.set(millis, a);\n+            y = fieldB.set(millis, b);\n+            testMillis(fieldA, fieldB, \"set\", millis, x, y, a, b);\n+        }\n+\n+        // roundFloor test\n+        x = fieldA.roundFloor(millis);\n+        y = fieldB.roundFloor(millis);\n+        testMillis(fieldA, fieldB, \"roundFloor\", millis, x, y);\n+\n+        // roundCeiling test\n+        x = fieldA.roundCeiling(millis);\n+        y = fieldB.roundCeiling(millis);\n+        testMillis(fieldA, fieldB, \"roundCeiling\", millis, x, y);\n+\n+        // roundHalfFloor test\n+        x = fieldA.roundHalfFloor(millis);\n+        y = fieldB.roundHalfFloor(millis);\n+        testMillis(fieldA, fieldB, \"roundHalfFloor\", millis, x, y);\n+\n+        // roundHalfEven test\n+        x = fieldA.roundHalfEven(millis);\n+        y = fieldB.roundHalfEven(millis);\n+        testMillis(fieldA, fieldB, \"roundHalfEven\", millis, x, y);\n+\n+        // remainder test\n+        x = fieldA.remainder(millis);\n+        y = fieldB.remainder(millis);\n+        testMillis(fieldA, fieldB, \"remainder\", millis, x, y);\n+\n+        // add test\n+        x = fieldA.add(millis, value);\n+        y = fieldB.add(millis, value);\n+        testMillis(fieldA, fieldB, \"add\", millis, x, y);\n+\n+        // addWrapField test\n+        x = fieldA.addWrapField(millis, value);\n+        y = fieldB.addWrapField(millis, value);\n+        testMillis(fieldA, fieldB, \"addWrapField\", millis, x, y);\n+\n+        // getDifference test\n+        x = fieldA.getDifference(millis, millis2);\n+        y = fieldB.getDifference(millis, millis2);\n+        try {\n+            testValue(fieldA, fieldB, \"getDifference\", millis, x, y);\n+        } catch (RuntimeException e) {\n+            System.out.println(\"Test datetime 2: \" + makeDatetime(millis2));\n+            throw e;\n+        }\n+\n+        // isLeap test\n+        m = fieldA.isLeap(millis);\n+        n = fieldB.isLeap(millis);\n+        testBoolean(fieldA, fieldB, \"isLeap\", millis, m, n);\n+\n+        // getLeapAmount test\n+        a = fieldA.getLeapAmount(millis);\n+        b = fieldB.getLeapAmount(millis);\n+        testValue(fieldA, fieldB, \"getLeapAmount\", millis, a, b);\n+    }\n+\n+    private int getWrappedValue(int value, int minValue, int maxValue) {\n+        if (minValue >= maxValue) {\n+            throw new IllegalArgumentException(\"MIN > MAX\");\n+        }\n+\n+        int wrapRange = maxValue - minValue + 1;\n+        value -= minValue;\n+\n+        if (value >= 0) {\n+            return (value % wrapRange) + minValue;\n+        }\n+\n+        int remByRange = (-value) % wrapRange;\n+\n+        if (remByRange == 0) {\n+            return 0 + minValue;\n+        }\n+        return (wrapRange - remByRange) + minValue;\n+    }\n+\n+    private void testValue(DateTimeField fieldA, DateTimeField fieldB,\n+                           String method, long millis, long valueA, long valueB) {\n+        if (valueA != valueB) {\n+            failValue(fieldA, fieldB, method, millis, valueA, valueB);\n+        }\n+    }\n+\n+    private void testMillis(DateTimeField fieldA, DateTimeField fieldB,\n+                            String method, long millis, long millisA, long millisB) {\n+        if (millisA != millisB) {\n+            failMillis(fieldA, fieldB, method, millis, millisA, millisB);\n+        }\n+    }\n+\n+    private void testMillis(DateTimeField fieldA, DateTimeField fieldB,\n+                            String method, long millis, long millisA, long millisB,\n+                            int valueA, int valueB) {\n+        if (millisA != millisB) {\n+            failMillis(fieldA, fieldB, method, millis, millisA, millisB, valueA, valueB);\n+        }\n+    }\n+\n+    private void testBoolean(DateTimeField fieldA, DateTimeField fieldB,\n+                             String method, long millis, boolean boolA, boolean boolB) {\n+        if (boolA != boolB) {\n+            failBoolean(fieldA, fieldB, method, millis, boolA, boolB);\n+        }\n+    }\n+\n+    private void failValue(DateTimeField fieldA, DateTimeField fieldB,\n+                           String method, long millis, long valueA, long valueB) {\n+        System.out.println(\"Failure on \" + makeName(fieldA, fieldB) + \".\" + method);\n+        System.out.println(fieldA.getClass().getName() + \"\\n\\tvs. \"\n+                           + fieldB.getClass().getName());\n+        System.out.println(\"Datetime: \" + makeDatetime(millis));\n+        System.out.println(\"Millis from 1970: \" + millis);\n+        System.out.println(valueA + \" != \" + valueB);\n+        throw new RuntimeException();\n+    }\n+\n+    private void failMillis(DateTimeField fieldA, DateTimeField fieldB,\n+                            String method, long millis, long millisA, long millisB) {\n+        System.out.println(\"Failure on \" + makeName(fieldA, fieldB) + \".\" + method);\n+        System.out.println(fieldA.getClass().getName() + \"\\n\\tvs. \"\n+                           + fieldB.getClass().getName());\n+        System.out.println(\"Datetime: \" + makeDatetime(millis));\n+        System.out.println(\"Millis from 1970: \" + millis);\n+        System.out.println(makeDatetime(millisA) + \" != \" + makeDatetime(millisB));\n+        System.out.println(millisA + \" != \" + millisB);\n+        System.out.println(\"Original value as reported by first field: \" +\n+                           fieldA.get(millis));\n+        System.out.println(\"Original value as reported by second field: \" +\n+                           fieldB.get(millis));\n+        System.out.println(\"First new value as reported by first field: \" +\n+                           fieldA.get(millisA));\n+        System.out.println(\"First new value as reported by second field: \" +\n+                           fieldB.get(millisA));\n+        System.out.println(\"Second new value as reported by first field: \" +\n+                           fieldA.get(millisB));\n+        System.out.println(\"Second new value as reported by second field: \" +\n+                           fieldB.get(millisB));\n+        throw new RuntimeException();\n+    }\n+\n+    private void failMillis(DateTimeField fieldA, DateTimeField fieldB,\n+                            String method, long millis, long millisA, long millisB,\n+                            int valueA, int valueB) {\n+        System.out.println(\"Failure on \" + makeName(fieldA, fieldB) + \".\" + method);\n+        System.out.println(fieldA.getClass().getName() + \"\\n\\tvs. \"\n+                           + fieldB.getClass().getName());\n+        System.out.println(\"Datetime: \" + makeDatetime(millis));\n+        System.out.println(\"Millis from 1970: \" + millis);\n+        System.out.println(makeDatetime(millisA) + \" != \" + makeDatetime(millisB));\n+        System.out.println(millisA + \" != \" + millisB);\n+        System.out.println(\"Original value as reported by first field: \" +\n+                           fieldA.get(millis));\n+        System.out.println(\"Original value as reported by second field: \" +\n+                           fieldB.get(millis));\n+        System.out.println(\"First new value as reported by first field: \" +\n+                           fieldA.get(millisA));\n+        System.out.println(\"First new value as reported by second field: \" +\n+                           fieldB.get(millisA));\n+        System.out.println(\"Second new value as reported by first field: \" +\n+                           fieldA.get(millisB));\n+        System.out.println(\"Second new value as reported by second field: \" +\n+                           fieldB.get(millisB));\n+        System.out.println(\"Value to set for first field: \" + valueA);\n+        System.out.println(\"Value to set for second field: \" + valueB);\n+        throw new RuntimeException();\n+    }\n+\n+    private void failBoolean(DateTimeField fieldA, DateTimeField fieldB,\n+                             String method, long millis, boolean boolA, boolean boolB) {\n+        System.out.println(\"Failure on \" + makeName(fieldA, fieldB) + \".\" + method);\n+        System.out.println(fieldA.getClass().getName() + \"\\n\\tvs. \"\n+                           + fieldB.getClass().getName());\n+        System.out.println(\"Datetime: \" + makeDatetime(millis));\n+        System.out.println(\"Millis from 1970: \" + millis);\n+        System.out.println(boolA + \" != \" + boolB);\n+        throw new RuntimeException();\n+    }\n+\n+    private String makeName(DateTimeField fieldA, DateTimeField fieldB) {\n+        if (fieldA.getName().equals(fieldB.getName())) {\n+            return fieldA.getName();\n+        } else {\n+            return fieldA.getName() + \"/\" + fieldB.getName();\n+        }\n+    }\n+\n+    private String makeDatetime(long millis) {\n+        return makeDatetime(millis, iActual);\n+    }\n+\n+    private String makeDatetime(long millis, Chronology chrono) {\n+        return chrono.dayOfWeek().getAsShortText(millis) + \" \"\n+            + new DateTime(millis, chrono).toString() + \" / \" +\n+            chrono.weekyear().get(millis) + \"-W\" + chrono.weekOfWeekyear().get(millis) +\n+            \"-\" + chrono.dayOfWeek().get(millis);\n+    }\n+\n+    private String makeDate(long millis) {\n+        return makeDate(millis, iActual);\n+    }\n+\n+    private String makeDate(long millis, Chronology chrono) {\n+        return chrono.dayOfWeek().getAsShortText(millis) + \" \"\n+            + new DateTime(millis, chrono).toString(\"yyyy-MM-dd\") + \" / \" +\n+            chrono.weekyear().get(millis) + \"-W\" + chrono.weekOfWeekyear().get(millis) +\n+            \"-\" + chrono.dayOfWeek().get(millis);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private static long randomMillis(Random rnd) {\n+        long millis = rnd.nextLong();\n+        if (millis >= 0) {\n+            millis = millis % MAX_MILLIS;\n+        } else {\n+            millis = millis % -MIN_MILLIS;\n+        }\n+        return millis;\n+    }\n+\n+    private static void dump(Chronology chrono, long millis) {\n+        System.out.println(\"year:           \" + chrono.year().get(millis));\n+        System.out.println(\"monthOfYear:    \" + chrono.monthOfYear().get(millis));\n+        System.out.println(\"dayOfMonth:     \" + chrono.dayOfMonth().get(millis));\n+        System.out.println(\"weekyear:       \" + chrono.weekyear().get(millis));\n+        System.out.println(\"weekOfWeekyear: \" + chrono.weekOfWeekyear().get(millis));\n+        System.out.println(\"dayOfWeek:      \" + chrono.dayOfWeek().get(millis));\n+        System.out.println(\"dayOfYear:      \" + chrono.dayOfYear().get(millis));\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/chrono/gj/TestAll.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.chrono.gj;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Entry point for all tests in this package.\n+ * \n+ * @version $Revision$ $Date$\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestAll extends TestCase {\n+\n+    public TestAll(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite();\n+        suite.addTest(new MainTest(1000, 0, 1345435247779935L));\n+        suite.addTest(new MainTest(1000, 1, 1345435247779935L));\n+        return suite;\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = {\n+            TestAll.class.getName()\n+        };\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/chrono/gj/TestGJChronology.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.chrono.gj;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTimeField;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.DurationField;\n+import org.joda.time.chrono.BaseChronology;\n+\n+/**\n+ * A reference Gregorian/Julian chronology implementation, intended for testing\n+ * purposes only. Correctness is favored over performance. The key functions\n+ * for date calculations are based on ones provided in \"Calendrical\n+ * Calculations\", ISBN 0-521-77752-6.\n+ *\n+ * <p>In theory, this class can be used to test any other Gregorian/Julian\n+ * chronology as long as almost all datetime fields are implemented differently\n+ * between the two. Fields that would most likely be implemented the same are\n+ * not supported by this class.\n+ *\n+ * <p>Unsupported features\n+ * <ul>\n+ * <li>time zones\n+ * <li>time of day\n+ * <li>year of era\n+ * <li>year of century\n+ * <li>century of era\n+ * <li>era\n+ * </ul>\n+ *\n+ * @author Brian S O'Neill\n+ */\n+abstract class TestGJChronology extends BaseChronology {\n+    static final long MILLIS_PER_DAY = 24 * 60 * 60 * 1000;\n+\n+    /**\n+     * Divide with round-negative behavior.\n+     *\n+     * @param divisor must be positive\n+     */\n+    static long div(long dividend, long divisor) {\n+        if (divisor < 0) {\n+            throw new IllegalArgumentException(\"divisor must be positive: \" + divisor);\n+        }\n+        if (dividend >= 0) {\n+            return dividend / divisor;\n+        } else {\n+            return (dividend + 1) / divisor - 1;\n+        }\n+    }\n+\n+    /**\n+     * Modulus with round-negative behavior, result is always positive.\n+     *\n+     * @param divisor must be positive\n+     */\n+    static long mod(long dividend, long divisor) {\n+        if (divisor < 0) {\n+            throw new IllegalArgumentException(\"divisor must be positive: \" + divisor);\n+        }\n+        if (dividend >= 0) {\n+            return dividend % divisor;\n+        } else {\n+            return (dividend + 1) % divisor - 1 + divisor;\n+        }\n+    }\n+\n+    static long amod(long dividend, long divisor) {\n+        long mod = mod(dividend, divisor);\n+        return (mod == 0) ? divisor : mod;\n+    }\n+\n+    /** Milliseconds from 0001-01-01 to the epoch. */\n+    private final long iEpochMillis;\n+\n+    public TestGJChronology(int epochYear, int epochMonth, int epochDay) {\n+        iEpochMillis = fixedFromGJ(epochYear, epochMonth, epochDay) * MILLIS_PER_DAY;\n+    }\n+\n+    public DateTimeZone getZone() {\n+        return null;\n+    }\n+\n+    public Chronology withUTC() {\n+        return this;\n+    }\n+\n+    /**\n+     * Unsupported.\n+     */\n+    public Chronology withZone(DateTimeZone zone) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    long getTimeOnlyMillis(long millis) {\n+        return mod(millis, MILLIS_PER_DAY);\n+    }\n+\n+    long getDateOnlyMillis(long millis) {\n+        return millis - mod(millis, MILLIS_PER_DAY);\n+    }\n+\n+    public DurationField days() {\n+        return dayOfWeek().getDurationField();\n+    }\n+\n+    public DateTimeField dayOfWeek() {\n+        return new TestGJDayOfWeekField(this);\n+    }\n+\n+    public DateTimeField dayOfMonth() {\n+        return new TestGJDayOfMonthField(this); \n+    }\n+\n+    public DateTimeField dayOfYear() {\n+        return new TestGJDayOfYearField(this);\n+    }\n+\n+    public DurationField weeks() {\n+        return weekOfWeekyear().getDurationField();\n+    }\n+\n+    public DateTimeField weekOfWeekyear() {\n+        return new TestGJWeekOfWeekyearField(this);\n+    }\n+\n+    public DurationField weekyears() {\n+        return weekyear().getDurationField();\n+    }\n+\n+    public DateTimeField weekyear() {\n+        return new TestGJWeekyearField(this);\n+    }\n+\n+    public DurationField months() {\n+        return monthOfYear().getDurationField();\n+    }\n+\n+    public DateTimeField monthOfYear() {\n+        return new TestGJMonthOfYearField(this);\n+    }\n+\n+    public DurationField years() {\n+        return year().getDurationField();\n+    }\n+\n+    public DateTimeField year() {\n+        return new TestGJYearField(this);\n+    }\n+\n+    abstract long millisPerYear();\n+\n+    abstract long millisPerMonth();\n+\n+    abstract boolean isLeapYear(int year);\n+\n+    /**\n+     * @return days from 0001-01-01\n+     */\n+    abstract long fixedFromGJ(int year, int monthOfYear, int dayOfMonth);\n+\n+    /**\n+     * @param date days from 0001-01-01\n+     * @return gj year\n+     */\n+    abstract int gjYearFromFixed(long date);\n+\n+    /**\n+     * @param date days from 0001-01-01\n+     * @return gj year, monthOfYear, dayOfMonth\n+     */\n+    abstract int[] gjFromFixed(long date);\n+\n+    abstract long fixedFromISO(int weekyear, int weekOfWeekyear, int dayOfWeek);\n+\n+    /**\n+     * @param date days from 0001-01-01\n+     * @return iso weekyear, weekOfWeekyear, dayOfWeek (1=Monday to 7)\n+     */\n+    abstract int[] isoFromFixed(long date);\n+\n+    /**\n+     * @param millis milliseconds from epoch\n+     * @return days from 0001-01-01\n+     */\n+    long fixedFromMillis(long millis) {\n+        return div(millis + iEpochMillis, MILLIS_PER_DAY);\n+    }\n+\n+    /**\n+     * @param fixed days from 0001-01-01\n+     * @return milliseconds from epoch\n+     */\n+    long millisFromFixed(long fixed) {\n+        return fixed * MILLIS_PER_DAY - iEpochMillis;\n+    }\n+\n+    /**\n+     * @return milliseconds from epoch\n+     */\n+    long millisFromGJ(int year, int monthOfYear, int dayOfMonth) {\n+        return millisFromFixed(fixedFromGJ(year, monthOfYear, dayOfMonth));\n+    }\n+\n+    /**\n+     * @param millis milliseconds from epoch\n+     * @return gj year\n+     */\n+    int gjYearFromMillis(long millis) {\n+        return gjYearFromFixed(fixedFromMillis(millis));\n+    }\n+\n+    /**\n+     * @param millis milliseconds from epoch\n+     * @return gj year, monthOfYear, dayOfMonth\n+     */\n+    int[] gjFromMillis(long millis) {\n+        return gjFromFixed(fixedFromMillis(millis));\n+    }\n+\n+    /**\n+     * @return milliseconds from epoch\n+     */\n+    long millisFromISO(int weekyear, int weekOfWeekyear, int dayOfWeek) {\n+        return millisFromFixed(fixedFromISO(weekyear, weekOfWeekyear, dayOfWeek));\n+    }\n+\n+    /**\n+     * @param millis milliseconds from epoch\n+     * @return iso weekyear, weekOfWeekyear, dayOfWeek (1=Monday to 7)\n+     */\n+    int[] isoFromMillis(long millis) {\n+        return isoFromFixed(fixedFromMillis(millis));\n+    }\n+\n+    /**\n+     * @param date days from 0001-01-01\n+     * @param weekday 0=Sunday, 1=Monday, 2=Tuesday ... 6=Saturday, 7=Sunday\n+     * @param date days from 0001-01-01, on or before weekday\n+     */\n+    long weekdayOnOrBefore(long date, int weekday) {\n+        return date - mod(date - mod(weekday, 7), 7);\n+    }\n+\n+    long weekdayOnOrAfter(long date, int weekday) {\n+        return weekdayOnOrBefore(date + 6, weekday);\n+    }\n+\n+    long weekdayNearest(long date, int weekday) {\n+        return weekdayOnOrBefore(date + 3, weekday);\n+    }\n+\n+    long weekdayBefore(long date, int weekday) {\n+        return weekdayOnOrBefore(date - 1, weekday);\n+    }\n+\n+    long weekdayAfter(long date, int weekday) {\n+        return weekdayOnOrBefore(date + 7, weekday);\n+    }\n+\n+    long nthWeekday(int n, int weekday,\n+                    int year, int monthOfYear, int dayOfMonth)\n+    {\n+        if (n > 0) {\n+            return 7 * n + weekdayBefore\n+                (fixedFromGJ(year, monthOfYear, dayOfMonth), weekday);\n+        } else {\n+            return 7 * n + weekdayAfter\n+                (fixedFromGJ(year, monthOfYear, dayOfMonth), weekday);\n+        }\n+    }\n+\n+    long firstWeekday(int weekday, int year, int monthOfYear, int dayOfMonth) {\n+        return nthWeekday(1, weekday, year, monthOfYear, dayOfMonth);\n+    }\n+\n+    long lastWeekday(int weekday, int year, int monthOfYear, int dayOfMonth) {\n+        return nthWeekday(-1, weekday, year, monthOfYear, dayOfMonth);\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/chrono/gj/TestGJDateTimeField.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.chrono.gj;\n+\n+import org.joda.time.DateTimeFieldType;\n+import org.joda.time.field.ImpreciseDateTimeField;\n+\n+/**\n+ * \n+ * @author Brian S O'Neill\n+ */\n+abstract class TestGJDateTimeField extends ImpreciseDateTimeField {\n+    protected final TestGJChronology iChronology;\n+\n+    public TestGJDateTimeField(DateTimeFieldType type, long unitMillis, TestGJChronology chrono) {\n+        super(type, unitMillis);\n+        iChronology = chrono;\n+    }\n+\n+    public boolean isLenient() {\n+        return false;\n+    }\n+\n+    public long add(long instant, int value) {\n+        return add(instant, (long)value);\n+    }\n+\n+    public abstract long add(long instant, long value);\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/chrono/gj/TestGJDayOfMonthField.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.chrono.gj;\n+\n+import org.joda.time.DateTimeFieldType;\n+import org.joda.time.DurationField;\n+\n+/**\n+ * \n+ * @author Brian S O'Neill\n+ */\n+class TestGJDayOfMonthField extends TestGJDateTimeField {\n+    public TestGJDayOfMonthField(TestGJChronology chrono) {\n+        super(DateTimeFieldType.dayOfMonth(), TestGJChronology.MILLIS_PER_DAY, chrono);\n+    }\n+\n+    public int get(long millis) {\n+        return iChronology.gjFromMillis(millis)[2];\n+    }\n+\n+    public long set(long millis, int value) {\n+        int[] ymd = iChronology.gjFromMillis(millis);\n+        return iChronology.getTimeOnlyMillis(millis)\n+            + iChronology.millisFromGJ(ymd[0], ymd[1], value);\n+    }\n+\n+    public long add(long millis, long value) {\n+        return millis + value * TestGJChronology.MILLIS_PER_DAY;\n+    }\n+\n+    public DurationField getRangeDurationField() {\n+        return iChronology.months();\n+    }\n+\n+    public int getMinimumValue() {\n+        return 1;\n+    }\n+\n+    public int getMaximumValue() {\n+        return 31;\n+    }\n+\n+    public int getMaximumValue(long millis) {\n+        int[] lengths = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n+        if (iChronology.year().isLeap(millis)) {\n+            lengths[2] = 29;\n+        }\n+        return lengths[iChronology.monthOfYear().get(millis)];\n+    }\n+\n+    public long roundFloor(long millis) {\n+        return iChronology.getDateOnlyMillis(millis);\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/chrono/gj/TestGJDayOfWeekField.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.chrono.gj;\n+\n+import org.joda.time.DateTimeFieldType;\n+import org.joda.time.DurationField;\n+\n+/**\n+ * \n+ * @author Brian S O'Neill\n+ */\n+class TestGJDayOfWeekField extends TestGJDateTimeField {\n+    public TestGJDayOfWeekField(TestGJChronology chrono) {\n+        super(DateTimeFieldType.dayOfWeek(), TestGJChronology.MILLIS_PER_DAY, chrono);\n+    }\n+\n+    public int get(long millis) {\n+        int dayOfWeek = (int) TestGJChronology.mod(iChronology.fixedFromMillis(millis), 7);\n+        if (dayOfWeek == 0) {\n+            dayOfWeek = 7;\n+        }\n+        return dayOfWeek;\n+    }\n+\n+    public long set(long millis, int value) {\n+        return add(millis, (long) value - get(millis));\n+    }\n+\n+    public long add(long millis, long value) {\n+        return millis + value * TestGJChronology.MILLIS_PER_DAY;\n+    }\n+\n+    public DurationField getRangeDurationField() {\n+        return iChronology.weeks();\n+    }\n+\n+    public int getMinimumValue() {\n+        return 1;\n+    }\n+\n+    public int getMaximumValue() {\n+        return 7;\n+    }\n+\n+    public long roundFloor(long millis) {\n+        return iChronology.getDateOnlyMillis(millis);\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/chrono/gj/TestGJDayOfYearField.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.chrono.gj;\n+\n+import org.joda.time.DateTimeFieldType;\n+import org.joda.time.DurationField;\n+\n+/**\n+ * \n+ * @author Brian S O'Neill\n+ */\n+class TestGJDayOfYearField extends TestGJDateTimeField {\n+    public TestGJDayOfYearField(TestGJChronology chrono) {\n+        super(DateTimeFieldType.dayOfYear(), TestGJChronology.MILLIS_PER_DAY, chrono);\n+    }\n+\n+    public int get(long millis) {\n+        int year = iChronology.gjYearFromMillis(millis);\n+        return (int)(iChronology.fixedFromMillis(millis)\n+                     - iChronology.fixedFromGJ(year, 1, 1)) + 1;\n+    }\n+\n+    public long set(long millis, int value) {\n+        return add(millis, (long) value - get(millis));\n+    }\n+\n+    public long add(long millis, long value) {\n+        return millis + value * TestGJChronology.MILLIS_PER_DAY;\n+    }\n+\n+    public DurationField getRangeDurationField() {\n+        return iChronology.years();\n+    }\n+\n+    public int getMinimumValue() {\n+        return 1;\n+    }\n+\n+    public int getMaximumValue() {\n+        return 366;\n+    }\n+\n+    public int getMaximumValue(long millis) {\n+        return iChronology.year().isLeap(millis) ? 366 : 365;\n+    }\n+\n+    public long roundFloor(long millis) {\n+        return iChronology.getDateOnlyMillis(millis);\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/chrono/gj/TestGJMonthOfYearField.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.chrono.gj;\n+\n+import org.joda.time.DateTimeFieldType;\n+import org.joda.time.DurationField;\n+\n+/**\n+ * \n+ * @author Brian S O'Neill\n+ */\n+class TestGJMonthOfYearField extends TestGJDateTimeField {\n+    public TestGJMonthOfYearField(TestGJChronology chrono) {\n+        super(DateTimeFieldType.monthOfYear(), chrono.millisPerMonth(), chrono);\n+    }\n+\n+    public int get(long millis) {\n+        return iChronology.gjFromMillis(millis)[1];\n+    }\n+\n+    public long set(long millis, int value) {\n+        long timeOnlyMillis = iChronology.getTimeOnlyMillis(millis);\n+        int[] ymd = iChronology.gjFromMillis(millis);\n+        // First set to start of month...\n+        millis = iChronology.millisFromGJ(ymd[0], value, 1);\n+        // ...and use dayOfMonth field to check range.\n+        int maxDay = iChronology.dayOfMonth().getMaximumValue(millis);\n+        if (ymd[2] > maxDay) {\n+            ymd[2] = maxDay;\n+        }\n+        return timeOnlyMillis + iChronology.millisFromGJ(ymd[0], value, ymd[2]);\n+    }\n+\n+    public long add(long millis, long value) {\n+        int newYear = iChronology.year().get(millis)\n+            + (int)TestGJChronology.div(value, 12);\n+        int newMonth = get(millis) + (int)TestGJChronology.mod(value, 12);\n+        if (newMonth > 12) {\n+            newYear++;\n+            newMonth -= 12;\n+        }\n+        int newDay = iChronology.dayOfMonth().get(millis);\n+        millis = iChronology.getTimeOnlyMillis(millis) \n+            + iChronology.millisFromGJ(newYear, newMonth, newDay);\n+        while (get(millis) != newMonth) {\n+            millis = iChronology.dayOfYear().add(millis, -1);\n+        }\n+        return millis;\n+    }\n+\n+    public boolean isLeap(long millis) {\n+        int[] ymd = iChronology.gjFromMillis(millis);\n+        return ymd[1] == 2 && iChronology.isLeapYear(ymd[0]);\n+    }\n+\n+    public int getLeapAmount(long millis) {\n+        return isLeap(millis) ? 1 : 0;\n+    }\n+\n+    public DurationField getLeapDurationField() {\n+        return iChronology.days();\n+    }\n+\n+    public DurationField getRangeDurationField() {\n+        return iChronology.years();\n+    }\n+\n+    public int getMinimumValue() {\n+        return 1;\n+    }\n+\n+    public int getMaximumValue() {\n+        return 12;\n+    }\n+\n+    public long roundFloor(long millis) {\n+        int[] ymd = iChronology.gjFromMillis(millis);\n+        return iChronology.millisFromGJ(ymd[0], ymd[1], 1);\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/chrono/gj/TestGJWeekOfWeekyearField.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.chrono.gj;\n+\n+import org.joda.time.DateTimeFieldType;\n+import org.joda.time.DurationField;\n+\n+/**\n+ * \n+ * @author Brian S O'Neill\n+ */\n+class TestGJWeekOfWeekyearField extends TestGJDateTimeField {\n+    public TestGJWeekOfWeekyearField(TestGJChronology chrono) {\n+        super(DateTimeFieldType.weekOfWeekyear(),\n+              (long)(TestGJChronology.MILLIS_PER_DAY * 7), chrono);\n+    }\n+\n+    public int get(long millis) {\n+        return iChronology.isoFromMillis(millis)[1];\n+    }\n+\n+    public long set(long millis, int value) {\n+        int[] wwd = iChronology.isoFromMillis(millis);\n+        return iChronology.getTimeOnlyMillis(millis)\n+            + iChronology.millisFromISO(wwd[0], value, wwd[2]);\n+    }\n+\n+    public long add(long millis, long value) {\n+        return iChronology.dayOfYear().add(millis, value * 7);\n+    }\n+\n+    public DurationField getRangeDurationField() {\n+        return iChronology.weeks();\n+    }\n+\n+    public int getMinimumValue() {\n+        return 1;\n+    }\n+\n+    public int getMaximumValue() {\n+        return 53;\n+    }\n+\n+    public int getMaximumValue(long millis) {\n+        // Move millis to end of weekyear.\n+        millis = iChronology.weekyear().roundFloor(millis);\n+        millis = iChronology.weekyear().add(millis, 1);\n+        millis = iChronology.dayOfYear().add(millis, -1);\n+        return get(millis);\n+    }\n+\n+    public long roundFloor(long millis) {\n+        int[] wwd = iChronology.isoFromMillis(millis);\n+        return iChronology.millisFromISO(wwd[0], wwd[1], 1);\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/chrono/gj/TestGJWeekyearField.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.chrono.gj;\n+\n+import org.joda.time.DateTimeFieldType;\n+import org.joda.time.DurationField;\n+\n+/**\n+ * \n+ * @author Brian S O'Neill\n+ */\n+class TestGJWeekyearField extends TestGJDateTimeField {\n+    public TestGJWeekyearField(TestGJChronology chrono) {\n+        super(DateTimeFieldType.weekyear(), chrono.millisPerYear(), chrono);\n+    }\n+\n+    public int get(long millis) {\n+        return iChronology.isoFromMillis(millis)[0];\n+    }\n+\n+    public long set(long millis, int value) {\n+        int[] wwd = iChronology.isoFromMillis(millis);\n+        millis = iChronology.getTimeOnlyMillis(millis)\n+            + iChronology.millisFromISO(value, wwd[1], wwd[2]);\n+        if (wwd[1] == 53) {\n+            int[] wwd2 = iChronology.isoFromMillis(millis);\n+            if (wwd2[0] != value) {\n+                // Set year doesn't have 53 weeks, so back off a week.\n+                millis = iChronology.dayOfYear().add(millis, -7);\n+            }\n+        }\n+        return millis;\n+    }\n+\n+    public long add(long millis, long value) {\n+        return set(millis, (int)(get(millis) + value));\n+    }\n+\n+    public boolean isLeap(long millis) {\n+        return iChronology.weekOfWeekyear().getMaximumValue(millis) > 52;\n+    }\n+\n+    public int getLeapAmount(long millis) {\n+        return iChronology.weekOfWeekyear().getMaximumValue(millis) - 52;\n+    } \n+\n+    public DurationField getLeapDurationField() {\n+        return iChronology.weeks();\n+    }\n+\n+    public DurationField getRangeDurationField() {\n+        return null;\n+    }\n+\n+    public int getMinimumValue() {\n+        return -100000000;\n+    }\n+\n+    public int getMaximumValue() {\n+        return 100000000;\n+    }\n+\n+    public long roundFloor(long millis) {\n+        return iChronology.millisFromISO(get(millis), 1, 1);\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/chrono/gj/TestGJYearField.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.chrono.gj;\n+\n+import org.joda.time.DateTimeFieldType;\n+import org.joda.time.DurationField;\n+\n+/**\n+ * \n+ * @author Brian S O'Neill\n+ */\n+class TestGJYearField extends TestGJDateTimeField {\n+    public TestGJYearField(TestGJChronology chrono) {\n+        super(DateTimeFieldType.year(), chrono.millisPerYear(), chrono);\n+    }\n+\n+    public int get(long millis) {\n+        return iChronology.gjYearFromMillis(millis);\n+    }\n+\n+    public long set(long millis, int value) {\n+        int[] ymd = iChronology.gjFromMillis(millis);\n+        millis = iChronology.getTimeOnlyMillis(millis)\n+            + iChronology.millisFromGJ(value, ymd[1], ymd[2]);\n+        if (ymd[1] == 2 && ymd[2] == 29 && !iChronology.isLeapYear(value)) {\n+            millis = iChronology.dayOfYear().add(millis, -1);\n+        }\n+        return millis;\n+    }\n+\n+    public long add(long millis, long value) {\n+        return set(millis, (int)(get(millis) + value));\n+    }\n+\n+    public boolean isLeap(long millis) {\n+        return iChronology.isLeapYear(get(millis));\n+    }\n+\n+    public int getLeapAmount(long millis) {\n+        return isLeap(millis) ? 1 : 0;\n+    }\n+\n+    public DurationField getLeapDurationField() {\n+        return iChronology.days();\n+    }\n+\n+    public DurationField getRangeDurationField() {\n+        return null;\n+    }\n+\n+    public int getMinimumValue() {\n+        return -100000000;\n+    }\n+\n+    public int getMaximumValue() {\n+        return 100000000;\n+    }\n+\n+    public long roundFloor(long millis) {\n+        return iChronology.millisFromGJ(get(millis), 1, 1);\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/chrono/gj/TestGregorianChronology.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.chrono.gj;\n+\n+/**\n+ * A reference Gregorian chronology implementation, intended for testing\n+ * purposes only. Correctness is favored over performance. The key functions\n+ * for date calculations are based on ones provided in \"Calendrical\n+ * Calculations\", ISBN 0-521-77752-6.\n+ *\n+ * @author Brian S O'Neill\n+ */\n+public final class TestGregorianChronology extends TestGJChronology {\n+    /**\n+     * Constructs with an epoch of 1970-01-01.\n+     */\n+    public TestGregorianChronology() {\n+        super(1970, 1, 1);\n+    }\n+\n+    public TestGregorianChronology(int epochYear, int epochMonth, int epochDay) {\n+        super(epochYear, epochMonth, epochDay);\n+    }\n+\n+    public String toString() {\n+        return \"TestGregorianChronology\";\n+    }\n+\n+    long millisPerYear() {\n+        return (long)(365.2425 * MILLIS_PER_DAY);\n+    }\n+\n+    long millisPerMonth() {\n+        return (long)(365.2425 * MILLIS_PER_DAY / 12);\n+    }\n+\n+    boolean isLeapYear(int year) {\n+        if (mod(year, 4) == 0) {\n+            int t = (int)mod(year, 400);\n+            if (t != 100 && t != 200 && t != 300) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * @return days from 0001-01-01\n+     */\n+    long fixedFromGJ(int year, int monthOfYear, int dayOfMonth) {\n+        long year_m1 = year - 1;\n+        long f = 365 * year_m1 + div(year_m1, 4) - div(year_m1, 100)\n+            + div(year_m1, 400) + div(367 * monthOfYear - 362, 12) + dayOfMonth;\n+        if (monthOfYear > 2) {\n+            f += isLeapYear(year) ? -1 : -2;\n+        }\n+        return f;\n+    }\n+\n+    /**\n+     * @param date days from 0001-01-01\n+     * @return gj year\n+     */\n+    int gjYearFromFixed(long date) {\n+        long d0 = date - 1;\n+        long n400 = div(d0, 146097);\n+        long d1 = mod(d0, 146097);\n+        long n100 = div(d1, 36524);\n+        long d2 = mod(d1, 36524);\n+        long n4 = div(d2, 1461);\n+        long d3 = mod(d2, 1461);\n+        long n1 = div(d3, 365);\n+        long year = 400 * n400 + 100 * n100 + 4 * n4 + n1;\n+        if (!(n100 == 4 || n1 == 4)) {\n+            year += 1;\n+        }\n+\n+        int year_i = (int)year;\n+        if (year_i == year) {\n+            return year_i;\n+        } else {\n+            throw new RuntimeException(\"year cannot be cast to an int: \" + year);\n+        }\n+    }\n+\n+    /**\n+     * @param date days from 0001-01-01\n+     * @return gj year, monthOfYear, dayOfMonth\n+     */\n+    int[] gjFromFixed(long date) {\n+        int year = gjYearFromFixed(date);\n+        long priorDays = date - fixedFromGJ(year, 1, 1);\n+        long correction;\n+        if (date < fixedFromGJ(year, 3, 1)) {\n+            correction = 0;\n+        } else if (isLeapYear(year)) {\n+            correction = 1;\n+        } else {\n+            correction = 2;\n+        }\n+        int monthOfYear = (int)div(12 * (priorDays + correction) + 373, 367);\n+        int day = (int)(date - fixedFromGJ(year, monthOfYear, 1) + 1);\n+\n+        return new int[]{year, monthOfYear, day};\n+    }\n+\n+    long fixedFromISO(int weekyear, int weekOfWeekyear, int dayOfWeek) {\n+        return nthWeekday(weekOfWeekyear, 0, weekyear - 1, 12, 28) + dayOfWeek;\n+    }\n+\n+    /**\n+     * @param date days from 0001-01-01\n+     * @return iso weekyear, weekOfWeekyear, dayOfWeek (1=Monday to 7)\n+     */\n+    int[] isoFromFixed(long date) {\n+        int weekyear = gjYearFromFixed(date - 3);\n+        if (date >= fixedFromISO(weekyear + 1, 1, 1)) {\n+            weekyear += 1;\n+        }\n+        int weekOfWeekyear = (int)(div(date - fixedFromISO(weekyear, 1, 1), 7) + 1);\n+        int dayOfWeek = (int)amod(date, 7);\n+        return new int[]{weekyear, weekOfWeekyear, dayOfWeek};\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/chrono/gj/TestJulianChronology.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.chrono.gj;\n+\n+import org.joda.time.DateTimeField;\n+\n+/**\n+ * A reference Julian chronology implementation, intended for testing purposes\n+ * only. Correctness is favored over performance. The key functions for date\n+ * calculations are based on ones provided in \"Calendrical Calculations\", ISBN\n+ * 0-521-77752-6.\n+ *\n+ * @author Brian S O'Neill\n+ */\n+public final class TestJulianChronology extends TestGJChronology {\n+\n+    private static final long JULIAN_EPOCH;\n+\n+    static {\n+        // Constant as defined in book.\n+        JULIAN_EPOCH = new TestGregorianChronology().fixedFromGJ(0, 12, 30);\n+    }\n+\n+    /**\n+     * Constructs with an epoch of 1969-12-19.\n+     */\n+    public TestJulianChronology() {\n+        super(1969, 12, 19);\n+    }\n+\n+    public TestJulianChronology(int epochYear, int epochMonth, int epochDay) {\n+        super(epochYear, epochMonth, epochDay);\n+    }\n+\n+    public DateTimeField dayOfMonth() {\n+        return new TestJulianDayOfMonthField(this); \n+    }\n+\n+    public DateTimeField weekyear() {\n+        return new TestJulianWeekyearField(this);\n+    }\n+\n+    public DateTimeField monthOfYear() {\n+        return new TestJulianMonthOfYearField(this);\n+    }\n+\n+    public DateTimeField year() {\n+        return new TestJulianYearField(this);\n+    }\n+\n+    public String toString() {\n+        return \"TestJulianChronology\";\n+    }\n+\n+    long millisPerYear() {\n+        return (long)(365.25 * MILLIS_PER_DAY);\n+    }\n+\n+    long millisPerMonth() {\n+        return (long)(365.25 * MILLIS_PER_DAY / 12);\n+    }\n+\n+    boolean isLeapYear(int year) {\n+        if (year == 0) {\n+            throw new IllegalArgumentException(\"Illegal year: \" + year);\n+        }\n+        return mod(year, 4) == (year > 0 ? 0 : 3);\n+    }\n+\n+    /**\n+     * @return days from 0001-01-01\n+     */\n+    long fixedFromGJ(int year, int monthOfYear, int dayOfMonth) {\n+        if (year == 0) {\n+            throw new IllegalArgumentException(\"Illegal year: \" + year);\n+        }\n+        int y = (year < 0) ? year + 1 : year;\n+        long y_m1 = y - 1;\n+        long f = JULIAN_EPOCH - 1 + 365 * y_m1 + div(y_m1, 4)\n+            + div(367 * monthOfYear - 362, 12) + dayOfMonth;\n+        if (monthOfYear > 2) {\n+            f += isLeapYear(year) ? -1 : -2;\n+        }\n+        return f;\n+    }\n+\n+    /**\n+     * @param date days from 0001-01-01\n+     * @return gj year\n+     */\n+    int gjYearFromFixed(long date) {\n+        return gjFromFixed(date)[0];\n+    }\n+\n+    /**\n+     * @param date days from 0001-01-01\n+     * @return gj year, monthOfYear, dayOfMonth\n+     */\n+    int[] gjFromFixed(long date) {\n+        long approx = div(4 * (date - JULIAN_EPOCH) + 1464, 1461);\n+        long year = (approx <= 0) ? approx - 1 : approx;\n+        int year_i = (int)year;\n+        if (year_i != year) {\n+            throw new RuntimeException(\"year cannot be cast to an int: \" + year);\n+        }\n+        long priorDays = date - fixedFromGJ(year_i, 1, 1);\n+        long correction;\n+        if (date < fixedFromGJ(year_i, 3, 1)) {\n+            correction = 0;\n+        } else if (isLeapYear(year_i)) {\n+            correction = 1;\n+        } else {\n+            correction = 2;\n+        }\n+        int monthOfYear = (int)div(12 * (priorDays + correction) + 373, 367);\n+        int day = (int)(date - fixedFromGJ(year_i, monthOfYear, 1) + 1);\n+\n+        return new int[]{year_i, monthOfYear, day};\n+    }\n+\n+    long fixedFromISO(int weekyear, int weekOfWeekyear, int dayOfWeek) {\n+        if (weekyear == 0) {\n+            throw new IllegalArgumentException(\"Illegal weekyear: \" + weekyear);\n+        }\n+        if (weekyear == 1) {\n+            weekyear = -1;\n+        } else {\n+            weekyear--;\n+        }\n+        return nthWeekday(weekOfWeekyear, 0, weekyear, 12, 28) + dayOfWeek;\n+    }\n+\n+    /**\n+     * @param date days from 0001-01-01\n+     * @return iso weekyear, weekOfWeekyear, dayOfWeek (1=Monday to 7)\n+     */\n+    int[] isoFromFixed(long date) {\n+        int weekyear = gjYearFromFixed(date - 3);\n+        int nextWeekyear;\n+        if (weekyear == -1) {\n+            nextWeekyear = 1;\n+        } else {\n+            nextWeekyear = weekyear + 1;\n+        }\n+        if (date >= fixedFromISO(nextWeekyear, 1, 1)) {\n+            weekyear = nextWeekyear;\n+        }\n+        int weekOfWeekyear = (int)(div(date - fixedFromISO(weekyear, 1, 1), 7) + 1);\n+        int dayOfWeek = (int)amod(date, 7);\n+        return new int[]{weekyear, weekOfWeekyear, dayOfWeek};\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/chrono/gj/TestJulianDayOfMonthField.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.chrono.gj;\n+\n+/**\n+ * \n+ * @author Brian S O'Neill\n+ */\n+class TestJulianDayOfMonthField extends TestGJDayOfMonthField {\n+    public TestJulianDayOfMonthField(TestJulianChronology chrono) {\n+        super(chrono);\n+    }\n+\n+    public long getRangeMillis() {\n+        return iChronology.millisPerMonth();\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/chrono/gj/TestJulianMonthOfYearField.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.chrono.gj;\n+\n+/**\n+ * \n+ * @author Brian S O'Neill\n+ */\n+class TestJulianMonthOfYearField extends TestGJMonthOfYearField {\n+    public TestJulianMonthOfYearField(TestJulianChronology chrono) {\n+        super(chrono);\n+    }\n+\n+    public int get(long millis) {\n+        return iChronology.gjFromMillis(millis)[1];\n+    }\n+\n+    public long add(long millis, long value) {\n+        int year = iChronology.year().get(millis);\n+        int newYear = year + (int)TestGJChronology.div(value, 12);\n+        if (year < 0) {\n+            if (newYear >= 0) {\n+                newYear++;\n+            }\n+        } else {\n+            if (newYear <= 0) {\n+                newYear--;\n+            }\n+        }\n+        int newMonth = get(millis) + (int)TestGJChronology.mod(value, 12);\n+        if (newMonth > 12) {\n+            if (newYear == -1) {\n+                newYear = 1;\n+            } else {\n+                newYear++;\n+            }\n+            newMonth -= 12;\n+        }\n+        int newDay = iChronology.dayOfMonth().get(millis);\n+        millis = iChronology.getTimeOnlyMillis(millis) \n+            + iChronology.millisFromGJ(newYear, newMonth, newDay);\n+        while (get(millis) != newMonth) {\n+            millis = iChronology.dayOfYear().add(millis, -1);\n+        }\n+        return millis;\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/chrono/gj/TestJulianWeekyearField.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.chrono.gj;\n+\n+import org.joda.time.field.FieldUtils;\n+\n+/**\n+ * \n+ * @author Brian S O'Neill\n+ */\n+class TestJulianWeekyearField extends TestGJWeekyearField {\n+    public TestJulianWeekyearField(TestJulianChronology chrono) {\n+        super(chrono);\n+    }\n+\n+    public long addWrapField(long millis, int value) {\n+        int weekyear = get(millis);\n+        int wrapped = FieldUtils.getWrappedValue\n+            (weekyear, value, getMinimumValue(), getMaximumValue());\n+        return add(millis, (long) wrapped - weekyear);\n+    }\n+\n+    public long add(long millis, long value) {\n+        int weekyear = get(millis);\n+        int newWeekyear = weekyear + FieldUtils.safeToInt(value);\n+        if (weekyear < 0) {\n+            if (newWeekyear >= 0) {\n+                newWeekyear++;\n+            }\n+        } else {\n+            if (newWeekyear <= 0) {\n+                newWeekyear--;\n+            }\n+        }\n+        return set(millis, newWeekyear);\n+    }\n+\n+    public int getMinimumValue() {\n+        return -100000000;\n+    }\n+\n+    public int getMaximumValue() {\n+        return 100000000;\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/chrono/gj/TestJulianYearField.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.chrono.gj;\n+\n+import org.joda.time.field.FieldUtils;\n+\n+/**\n+ * \n+ * @author Brian S O'Neill\n+ */\n+class TestJulianYearField extends TestGJYearField {\n+    public TestJulianYearField(TestJulianChronology chrono) {\n+        super(chrono);\n+    }\n+\n+    public long addWrapField(long millis, int value) {\n+        int year = get(millis);\n+        int wrapped = FieldUtils.getWrappedValue\n+            (year, value, getMinimumValue(), getMaximumValue());\n+        return add(millis, (long) wrapped - year);\n+    }\n+\n+    public long add(long millis, long value) {\n+        int year = get(millis);\n+        int newYear = year + FieldUtils.safeToInt(value);\n+        if (year < 0) {\n+            if (newYear >= 0) {\n+                newYear++;\n+            }\n+        } else {\n+            if (newYear <= 0) {\n+                newYear--;\n+            }\n+        }\n+        return set(millis, newYear);\n+    }\n+\n+    public int getMinimumValue() {\n+        return -100000000;\n+    }\n+\n+    public int getMaximumValue() {\n+        return 100000000;\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/convert/MockBadChronology.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.convert;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.chrono.BaseChronology;\n+\n+/**\n+ * A basic mock testing class for an unknown calendar.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+class MockBadChronology extends BaseChronology {\n+    \n+    MockBadChronology() {\n+        super();\n+    }\n+\n+    public Chronology withZone(DateTimeZone zone) {\n+        return null;\n+    }\n+    \n+    public DateTimeZone getZone() {\n+        return null;\n+    }\n+    public Chronology withUTC() {\n+        return null;\n+    }\n+    public String toString() {\n+        return null;\n+    }\n+    \n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/convert/MockUnknownCalendar.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.convert;\n+\n+import java.util.Calendar;\n+import java.util.TimeZone;\n+\n+/**\n+ * A basic mock testing class for an unknown calendar.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+class MockUnknownCalendar extends Calendar {\n+    \n+    private long millis;\n+    private TimeZone zone;\n+    \n+    MockUnknownCalendar(long millis) {\n+        this.millis = millis;\n+    }\n+    MockUnknownCalendar(TimeZone zone) {\n+        this.zone = zone;\n+    }\n+    \n+    public long getTimeInMillis() {\n+        return millis;\n+    }\n+    public TimeZone getTimeZone() {\n+        return zone;\n+    }\n+\n+    protected void computeTime() {\n+    }\n+    protected void computeFields() {\n+    }\n+    public void add(int field, int amount) {\n+    }\n+    public void roll(int field, boolean up) {\n+    }\n+    public int getMinimum(int field) {\n+        return 0;\n+    }\n+    public int getMaximum(int field) {\n+        return 0;\n+    }\n+    public int getGreatestMinimum(int field) {\n+        return 0;\n+    }\n+    public int getLeastMaximum(int field) {\n+        return 0;\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/convert/MockUnknownTimeZone.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.convert;\n+\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+/**\n+ * A basic mock testing class for an unknown time zone.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+class MockUnknownTimeZone extends TimeZone {\n+    \n+    MockUnknownTimeZone() {\n+        super();\n+    }\n+    \n+    public String getID() {\n+        return \"!!!\";\n+    }\n+    public String getDisplayName(boolean daylight, int style, Locale locale) {\n+        return \"!!!\";\n+    }\n+\n+    public int getOffset(int era, int year, int month, int day, int dayOfWeek, int milliseconds) {\n+        return 0;\n+    }\n+    public void setRawOffset(int offsetMillis) {\n+    }\n+    public int getRawOffset() {\n+        return 0;\n+    }\n+    public boolean useDaylightTime() {\n+        return false;\n+    }\n+    public boolean inDaylightTime(Date date) {\n+        return false;\n+    }\n+    \n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/convert/MockZeroNullIntegerConverter.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.convert;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.format.DateTimeFormatter;\n+\n+/**\n+ * A basic mock testing class for a converter.\n+ * This converter returns zero and null for an Integer input.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class MockZeroNullIntegerConverter implements InstantConverter {\n+    \n+    public static final InstantConverter INSTANCE = new MockZeroNullIntegerConverter();\n+\n+    public long getInstantMillis(Object object, Chronology chrono) {\n+        return 0;\n+    }\n+\n+    public long getInstantMillis(Object object, Chronology chrono, DateTimeFormatter parser) {\n+        return 0;\n+    }\n+\n+    public Chronology getChronology(Object object, DateTimeZone zone) {\n+        return null;\n+    }\n+\n+    public Chronology getChronology(Object object, Chronology chrono) {\n+        return null;\n+    }\n+\n+    public Class getSupportedType() {\n+        return Integer.class;\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/convert/TestAll.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.convert;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Entry point for all tests in this package.\n+ * \n+ * @version $Revision$ $Date$\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestAll extends TestCase {\n+\n+    public TestAll(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite();\n+        suite.addTest(TestConverterManager.suite());\n+        suite.addTest(TestConverterSet.suite());\n+        \n+        suite.addTest(TestCalendarConverter.suite());\n+        suite.addTest(TestDateConverter.suite());\n+        suite.addTest(TestLongConverter.suite());\n+        suite.addTest(TestNullConverter.suite());\n+        suite.addTest(TestReadableDurationConverter.suite());\n+        suite.addTest(TestReadableIntervalConverter.suite());\n+        suite.addTest(TestReadableInstantConverter.suite());\n+        suite.addTest(TestReadablePartialConverter.suite());\n+        suite.addTest(TestReadablePeriodConverter.suite());\n+        suite.addTest(TestStringConverter.suite());\n+        return suite;\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = {\n+            TestAll.class.getName()\n+        };\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/convert/TestCalendarConverter.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.convert;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.TimeOfDay;\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.GJChronology;\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.chrono.JulianChronology;\n+\n+/**\n+ * This class is a Junit unit test for CalendarConverter.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestCalendarConverter extends TestCase {\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone MOSCOW = DateTimeZone.forID(\"Europe/Moscow\");\n+    private static Chronology JULIAN;\n+    private static Chronology ISO;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestCalendarConverter.class);\n+    }\n+\n+    public TestCalendarConverter(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        JULIAN = JulianChronology.getInstance();\n+        ISO = ISOChronology.getInstance();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSingleton() throws Exception {\n+        Class cls = CalendarConverter.class;\n+        assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(cls.getModifiers()));\n+        \n+        Constructor con = cls.getDeclaredConstructor((Class[]) null);\n+        assertEquals(1, cls.getDeclaredConstructors().length);\n+        assertEquals(true, Modifier.isProtected(con.getModifiers()));\n+        \n+        Field fld = cls.getDeclaredField(\"INSTANCE\");\n+        assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSupportedType() throws Exception {\n+        assertEquals(Calendar.class, CalendarConverter.INSTANCE.getSupportedType());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetInstantMillis_Object_Chronology() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar();\n+        cal.setTime(new Date(123L));\n+        assertEquals(123L, CalendarConverter.INSTANCE.getInstantMillis(cal, JULIAN));\n+        assertEquals(123L, cal.getTime().getTime());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetChronology_Object_Zone() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone(\"Europe/Paris\"));\n+        assertEquals(GJChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, MOSCOW));\n+        \n+        cal = new GregorianCalendar(TimeZone.getTimeZone(\"Europe/Moscow\"));\n+        assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (DateTimeZone) null));\n+        \n+        cal = new GregorianCalendar(TimeZone.getTimeZone(\"Europe/Moscow\"));\n+        cal.setGregorianChange(new Date(0L));\n+        assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, MOSCOW));\n+        \n+        cal = new GregorianCalendar(TimeZone.getTimeZone(\"Europe/Moscow\"));\n+        cal.setGregorianChange(new Date(Long.MAX_VALUE));\n+        assertEquals(JulianChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, PARIS));\n+        \n+        cal = new GregorianCalendar(TimeZone.getTimeZone(\"Europe/Moscow\"));\n+        cal.setGregorianChange(new Date(Long.MIN_VALUE));\n+        assertEquals(GregorianChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, PARIS));\n+        \n+        Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone(\"Europe/Moscow\"));\n+        assertEquals(ISOChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(uc, PARIS));\n+        \n+        try {\n+            Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n+            bc.setTimeZone(TimeZone.getTimeZone(\"Europe/Moscow\"));\n+            assertEquals(BuddhistChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(bc, PARIS));\n+        } catch (ClassNotFoundException ex) {\n+            // ignore\n+        }\n+    }\n+\n+    public void testGetChronology_Object_nullChronology() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone(\"Europe/Paris\"));\n+        assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null));\n+        \n+        cal = new GregorianCalendar(TimeZone.getTimeZone(\"Europe/Moscow\"));\n+        cal.setGregorianChange(new Date(0L));\n+        assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null));\n+        \n+        cal = new GregorianCalendar(TimeZone.getTimeZone(\"Europe/Moscow\"));\n+        cal.setGregorianChange(new Date(Long.MAX_VALUE));\n+        assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null));\n+        \n+        cal = new GregorianCalendar(TimeZone.getTimeZone(\"Europe/Moscow\"));\n+        cal.setGregorianChange(new Date(Long.MIN_VALUE));\n+        assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null));\n+        \n+        cal = new GregorianCalendar(new MockUnknownTimeZone());\n+        assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null));\n+        \n+        Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone(\"Europe/Moscow\"));\n+        assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc, (Chronology) null));\n+        \n+        try {\n+            Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n+            bc.setTimeZone(TimeZone.getTimeZone(\"Europe/Moscow\"));\n+            assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc, (Chronology) null));\n+        } catch (ClassNotFoundException ex) {\n+            // ignore\n+        }\n+    }\n+\n+    public void testGetChronology_Object_Chronology() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone(\"Europe/Paris\"));\n+        assertEquals(JULIAN, CalendarConverter.INSTANCE.getChronology(cal, JULIAN));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetPartialValues() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar();\n+        cal.setTime(new Date(12345678L));\n+        TimeOfDay tod = new TimeOfDay();\n+        int[] expected = ISO.get(tod, 12345678L);\n+        int[] actual = CalendarConverter.INSTANCE.getPartialValues(tod, cal, ISO);\n+        assertEquals(true, Arrays.equals(expected, actual));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        assertEquals(\"Converter[java.util.Calendar]\", CalendarConverter.INSTANCE.toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/convert/TestConverterManager.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.convert;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.security.AllPermission;\n+import java.security.CodeSource;\n+import java.security.Permission;\n+import java.security.PermissionCollection;\n+import java.security.Permissions;\n+import java.security.Policy;\n+import java.security.ProtectionDomain;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.Duration;\n+import org.joda.time.ReadablePartial;\n+import org.joda.time.ReadablePeriod;\n+import org.joda.time.Period;\n+import org.joda.time.PeriodType;\n+import org.joda.time.Interval;\n+import org.joda.time.JodaTimePermission;\n+import org.joda.time.ReadWritablePeriod;\n+import org.joda.time.ReadWritableInterval;\n+import org.joda.time.ReadableDateTime;\n+import org.joda.time.ReadableDuration;\n+import org.joda.time.ReadableInstant;\n+import org.joda.time.ReadableInterval;\n+import org.joda.time.TimeOfDay;\n+import org.joda.time.format.DateTimeFormatter;\n+\n+/**\n+ * This class is a JUnit test for ConverterManager.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestConverterManager extends TestCase {\n+    private static final boolean OLD_JDK;\n+    static {\n+        String str = System.getProperty(\"java.version\");\n+        boolean old = true;\n+        if (str.length() > 3 &&\n+            str.charAt(0) == '1' &&\n+            str.charAt(1) == '.' &&\n+            (str.charAt(2) == '4' || str.charAt(2) == '5' || str.charAt(2) == '6')) {\n+            old = false;\n+        }\n+        OLD_JDK = old;\n+    }\n+\n+    private static final Policy RESTRICT;\n+    private static final Policy ALLOW;\n+    static {\n+        // don't call Policy.getPolicy()\n+        RESTRICT = new Policy() {\n+            public PermissionCollection getPermissions(CodeSource codesource) {\n+                Permissions p = new Permissions();\n+                p.add(new AllPermission());  // enable everything\n+                return p;\n+            }\n+            public void refresh() {\n+            }\n+            public boolean implies(ProtectionDomain domain, Permission permission) {\n+                if (permission instanceof JodaTimePermission) {\n+                    return false;\n+                }\n+                return true;\n+//                return super.implies(domain, permission);\n+            }\n+        };\n+        ALLOW = new Policy() {\n+            public PermissionCollection getPermissions(CodeSource codesource) {\n+                Permissions p = new Permissions();\n+                p.add(new AllPermission());  // enable everything\n+                return p;\n+            }\n+            public void refresh() {\n+            }\n+        };\n+    }\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestConverterManager.class);\n+    }\n+\n+    public TestConverterManager(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSingleton() throws Exception {\n+        Class cls = ConverterManager.class;\n+        assertEquals(true, Modifier.isPublic(cls.getModifiers()));\n+        \n+        Constructor con = cls.getDeclaredConstructor((Class[]) null);\n+        assertEquals(1, cls.getDeclaredConstructors().length);\n+        assertEquals(true, Modifier.isProtected(con.getModifiers()));\n+        \n+        Field fld = cls.getDeclaredField(\"INSTANCE\");\n+        assertEquals(true, Modifier.isPrivate(fld.getModifiers()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetInstantConverter() {\n+        InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n+        assertEquals(Long.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getInstantConverter(new DateTime());\n+        assertEquals(ReadableInstant.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getInstantConverter(\"\");\n+        assertEquals(String.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getInstantConverter(new Date());\n+        assertEquals(Date.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getInstantConverter(new GregorianCalendar());\n+        assertEquals(Calendar.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getInstantConverter(null);\n+        assertEquals(null, c.getSupportedType());\n+        \n+        try {\n+            ConverterManager.getInstance().getInstantConverter(Boolean.TRUE);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testGetInstantConverterRemovedNull() {\n+        try {\n+            ConverterManager.getInstance().removeInstantConverter(NullConverter.INSTANCE);\n+            try {\n+                ConverterManager.getInstance().getInstantConverter(null);\n+                fail();\n+            } catch (IllegalArgumentException ex) {}\n+        } finally {\n+            ConverterManager.getInstance().addInstantConverter(NullConverter.INSTANCE);\n+        }\n+        assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n+    }\n+\n+    public void testGetInstantConverterOKMultipleMatches() {\n+        InstantConverter c = new InstantConverter() {\n+            public long getInstantMillis(Object object, Chronology chrono) {return 0;}\n+            public Chronology getChronology(Object object, DateTimeZone zone) {return null;}\n+            public Chronology getChronology(Object object, Chronology chrono) {return null;}\n+            public Class getSupportedType() {return ReadableDateTime.class;}\n+        };\n+        try {\n+            ConverterManager.getInstance().addInstantConverter(c);\n+            InstantConverter ok = ConverterManager.getInstance().getInstantConverter(new DateTime());\n+            // ReadableDateTime and ReadableInstant both match, but RI discarded as less specific\n+            assertEquals(ReadableDateTime.class, ok.getSupportedType());\n+        } finally {\n+            ConverterManager.getInstance().removeInstantConverter(c);\n+        }\n+        assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n+    }\n+\n+    public void testGetInstantConverterBadMultipleMatches() {\n+        InstantConverter c = new InstantConverter() {\n+            public long getInstantMillis(Object object, Chronology chrono) {return 0;}\n+            public Chronology getChronology(Object object, DateTimeZone zone) {return null;}\n+            public Chronology getChronology(Object object, Chronology chrono) {return null;}\n+            public Class getSupportedType() {return Serializable.class;}\n+        };\n+        try {\n+            ConverterManager.getInstance().addInstantConverter(c);\n+            try {\n+                ConverterManager.getInstance().getInstantConverter(new DateTime());\n+                fail();\n+            } catch (IllegalStateException ex) {\n+                // Serializable and ReadableInstant both match, so cannot pick\n+            }\n+        } finally {\n+            ConverterManager.getInstance().removeInstantConverter(c);\n+        }\n+        assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetInstantConverters() {\n+        InstantConverter[] array = ConverterManager.getInstance().getInstantConverters();\n+        assertEquals(6, array.length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddInstantConverter1() {\n+        InstantConverter c = new InstantConverter() {\n+            public long getInstantMillis(Object object, Chronology chrono) {return 0;}\n+            public Chronology getChronology(Object object, DateTimeZone zone) {return null;}\n+            public Chronology getChronology(Object object, Chronology chrono) {return null;}\n+            public Class getSupportedType() {return Boolean.class;}\n+        };\n+        try {\n+            InstantConverter removed = ConverterManager.getInstance().addInstantConverter(c);\n+            assertEquals(null, removed);\n+            assertEquals(Boolean.class, ConverterManager.getInstance().getInstantConverter(Boolean.TRUE).getSupportedType());\n+            assertEquals(7, ConverterManager.getInstance().getInstantConverters().length);\n+        } finally {\n+            ConverterManager.getInstance().removeInstantConverter(c);\n+        }\n+        assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n+    }\n+\n+    public void testAddInstantConverter2() {\n+        InstantConverter c = new InstantConverter() {\n+            public long getInstantMillis(Object object, Chronology chrono) {return 0;}\n+            public Chronology getChronology(Object object, DateTimeZone zone) {return null;}\n+            public Chronology getChronology(Object object, Chronology chrono) {return null;}\n+            public Class getSupportedType() {return String.class;}\n+        };\n+        try {\n+            InstantConverter removed = ConverterManager.getInstance().addInstantConverter(c);\n+            assertEquals(StringConverter.INSTANCE, removed);\n+            assertEquals(String.class, ConverterManager.getInstance().getInstantConverter(\"\").getSupportedType());\n+            assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n+        } finally {\n+            ConverterManager.getInstance().addInstantConverter(StringConverter.INSTANCE);\n+        }\n+        assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n+    }\n+\n+    public void testAddInstantConverter3() {\n+        InstantConverter removed = ConverterManager.getInstance().addInstantConverter(StringConverter.INSTANCE);\n+        assertEquals(null, removed);\n+        assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n+    }\n+\n+    public void testAddInstantConverter4() {\n+        InstantConverter removed = ConverterManager.getInstance().addInstantConverter(null);\n+        assertEquals(null, removed);\n+        assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n+    }\n+\n+    public void testAddInstantConverterSecurity() {\n+        if (OLD_JDK) {\n+            return;\n+        }\n+        try {\n+            Policy.setPolicy(RESTRICT);\n+            System.setSecurityManager(new SecurityManager());\n+            ConverterManager.getInstance().addInstantConverter(StringConverter.INSTANCE);\n+            fail();\n+        } catch (SecurityException ex) {\n+            // ok\n+        } finally {\n+            System.setSecurityManager(null);\n+            Policy.setPolicy(ALLOW);\n+        }\n+        assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testRemoveInstantConverter1() {\n+        try {\n+            InstantConverter removed = ConverterManager.getInstance().removeInstantConverter(StringConverter.INSTANCE);\n+            assertEquals(StringConverter.INSTANCE, removed);\n+            assertEquals(5, ConverterManager.getInstance().getInstantConverters().length);\n+        } finally {\n+            ConverterManager.getInstance().addInstantConverter(StringConverter.INSTANCE);\n+        }\n+        assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n+    }\n+\n+    public void testRemoveInstantConverter2() {\n+        InstantConverter c = new InstantConverter() {\n+            public long getInstantMillis(Object object, Chronology chrono) {return 0;}\n+            public Chronology getChronology(Object object, DateTimeZone zone) {return null;}\n+            public Chronology getChronology(Object object, Chronology chrono) {return null;}\n+            public Class getSupportedType() {return Boolean.class;}\n+        };\n+        InstantConverter removed = ConverterManager.getInstance().removeInstantConverter(c);\n+        assertEquals(null, removed);\n+        assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n+    }\n+\n+    public void testRemoveInstantConverter3() {\n+        InstantConverter removed = ConverterManager.getInstance().removeInstantConverter(null);\n+        assertEquals(null, removed);\n+        assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n+    }\n+\n+    public void testRemoveInstantConverterSecurity() {\n+        if (OLD_JDK) {\n+            return;\n+        }\n+        try {\n+            Policy.setPolicy(RESTRICT);\n+            System.setSecurityManager(new SecurityManager());\n+            ConverterManager.getInstance().removeInstantConverter(StringConverter.INSTANCE);\n+            fail();\n+        } catch (SecurityException ex) {\n+            // ok\n+        } finally {\n+            System.setSecurityManager(null);\n+            Policy.setPolicy(ALLOW);\n+        }\n+        assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    private static final int PARTIAL_SIZE = 7;\n+    \n+    public void testGetPartialConverter() {\n+        PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n+        assertEquals(Long.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n+        assertEquals(ReadablePartial.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getPartialConverter(new DateTime());\n+        assertEquals(ReadableInstant.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getPartialConverter(\"\");\n+        assertEquals(String.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getPartialConverter(new Date());\n+        assertEquals(Date.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getPartialConverter(new GregorianCalendar());\n+        assertEquals(Calendar.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getPartialConverter(null);\n+        assertEquals(null, c.getSupportedType());\n+        \n+        try {\n+            ConverterManager.getInstance().getPartialConverter(Boolean.TRUE);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testGetPartialConverterRemovedNull() {\n+        try {\n+            ConverterManager.getInstance().removePartialConverter(NullConverter.INSTANCE);\n+            try {\n+                ConverterManager.getInstance().getPartialConverter(null);\n+                fail();\n+            } catch (IllegalArgumentException ex) {}\n+        } finally {\n+            ConverterManager.getInstance().addPartialConverter(NullConverter.INSTANCE);\n+        }\n+        assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n+    }\n+\n+    public void testGetPartialConverterOKMultipleMatches() {\n+        PartialConverter c = new PartialConverter() {\n+            public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono) {return null;}\n+            public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono, DateTimeFormatter parser) {return null;}\n+            public Chronology getChronology(Object object, DateTimeZone zone) {return null;}\n+            public Chronology getChronology(Object object, Chronology chrono) {return null;}\n+            public Class getSupportedType() {return ReadableDateTime.class;}\n+        };\n+        try {\n+            ConverterManager.getInstance().addPartialConverter(c);\n+            PartialConverter ok = ConverterManager.getInstance().getPartialConverter(new DateTime());\n+            // ReadableDateTime and ReadablePartial both match, but RI discarded as less specific\n+            assertEquals(ReadableDateTime.class, ok.getSupportedType());\n+        } finally {\n+            ConverterManager.getInstance().removePartialConverter(c);\n+        }\n+        assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n+    }\n+\n+    public void testGetPartialConverterBadMultipleMatches() {\n+        PartialConverter c = new PartialConverter() {\n+            public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono) {return null;}\n+            public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono, DateTimeFormatter parser) {return null;}\n+            public Chronology getChronology(Object object, DateTimeZone zone) {return null;}\n+            public Chronology getChronology(Object object, Chronology chrono) {return null;}\n+            public Class getSupportedType() {return Serializable.class;}\n+        };\n+        try {\n+            ConverterManager.getInstance().addPartialConverter(c);\n+            try {\n+                ConverterManager.getInstance().getPartialConverter(new DateTime());\n+                fail();\n+            } catch (IllegalStateException ex) {\n+                // Serializable and ReadablePartial both match, so cannot pick\n+            }\n+        } finally {\n+            ConverterManager.getInstance().removePartialConverter(c);\n+        }\n+        assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetPartialConverters() {\n+        PartialConverter[] array = ConverterManager.getInstance().getPartialConverters();\n+        assertEquals(PARTIAL_SIZE, array.length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddPartialConverter1() {\n+        PartialConverter c = new PartialConverter() {\n+            public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono) {return null;}\n+            public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono, DateTimeFormatter parser) {return null;}\n+            public Chronology getChronology(Object object, DateTimeZone zone) {return null;}\n+            public Chronology getChronology(Object object, Chronology chrono) {return null;}\n+            public Class getSupportedType() {return Boolean.class;}\n+        };\n+        try {\n+            PartialConverter removed = ConverterManager.getInstance().addPartialConverter(c);\n+            assertEquals(null, removed);\n+            assertEquals(Boolean.class, ConverterManager.getInstance().getPartialConverter(Boolean.TRUE).getSupportedType());\n+            assertEquals(PARTIAL_SIZE + 1, ConverterManager.getInstance().getPartialConverters().length);\n+        } finally {\n+            ConverterManager.getInstance().removePartialConverter(c);\n+        }\n+        assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n+    }\n+\n+    public void testAddPartialConverter2() {\n+        PartialConverter c = new PartialConverter() {\n+            public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono) {return null;}\n+            public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono, DateTimeFormatter parser) {return null;}\n+            public Chronology getChronology(Object object, DateTimeZone zone) {return null;}\n+            public Chronology getChronology(Object object, Chronology chrono) {return null;}\n+            public Class getSupportedType() {return String.class;}\n+        };\n+        try {\n+            PartialConverter removed = ConverterManager.getInstance().addPartialConverter(c);\n+            assertEquals(StringConverter.INSTANCE, removed);\n+            assertEquals(String.class, ConverterManager.getInstance().getPartialConverter(\"\").getSupportedType());\n+            assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n+        } finally {\n+            ConverterManager.getInstance().addPartialConverter(StringConverter.INSTANCE);\n+        }\n+        assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n+    }\n+\n+    public void testAddPartialConverter3() {\n+        PartialConverter removed = ConverterManager.getInstance().addPartialConverter(StringConverter.INSTANCE);\n+        assertEquals(null, removed);\n+        assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n+    }\n+\n+    public void testAddPartialConverter4() {\n+        PartialConverter removed = ConverterManager.getInstance().addPartialConverter(null);\n+        assertEquals(null, removed);\n+        assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n+    }\n+\n+    public void testAddPartialConverterSecurity() {\n+        if (OLD_JDK) {\n+            return;\n+        }\n+        try {\n+            Policy.setPolicy(RESTRICT);\n+            System.setSecurityManager(new SecurityManager());\n+            ConverterManager.getInstance().addPartialConverter(StringConverter.INSTANCE);\n+            fail();\n+        } catch (SecurityException ex) {\n+            // ok\n+        } finally {\n+            System.setSecurityManager(null);\n+            Policy.setPolicy(ALLOW);\n+        }\n+        assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testRemovePartialConverter1() {\n+        try {\n+            PartialConverter removed = ConverterManager.getInstance().removePartialConverter(StringConverter.INSTANCE);\n+            assertEquals(StringConverter.INSTANCE, removed);\n+            assertEquals(PARTIAL_SIZE - 1, ConverterManager.getInstance().getPartialConverters().length);\n+        } finally {\n+            ConverterManager.getInstance().addPartialConverter(StringConverter.INSTANCE);\n+        }\n+        assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n+    }\n+\n+    public void testRemovePartialConverter2() {\n+        PartialConverter c = new PartialConverter() {\n+            public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono) {return null;}\n+            public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono, DateTimeFormatter parser) {return null;}\n+            public Chronology getChronology(Object object, DateTimeZone zone) {return null;}\n+            public Chronology getChronology(Object object, Chronology chrono) {return null;}\n+            public Class getSupportedType() {return Boolean.class;}\n+        };\n+        PartialConverter removed = ConverterManager.getInstance().removePartialConverter(c);\n+        assertEquals(null, removed);\n+        assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n+    }\n+\n+    public void testRemovePartialConverter3() {\n+        PartialConverter removed = ConverterManager.getInstance().removePartialConverter(null);\n+        assertEquals(null, removed);\n+        assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n+    }\n+\n+    public void testRemovePartialConverterSecurity() {\n+        if (OLD_JDK) {\n+            return;\n+        }\n+        try {\n+            Policy.setPolicy(RESTRICT);\n+            System.setSecurityManager(new SecurityManager());\n+            ConverterManager.getInstance().removeInstantConverter(StringConverter.INSTANCE);\n+            fail();\n+        } catch (SecurityException ex) {\n+            // ok\n+        } finally {\n+            System.setSecurityManager(null);\n+            Policy.setPolicy(ALLOW);\n+        }\n+        assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    private static int DURATION_SIZE = 5;\n+    \n+    public void testGetDurationConverter() {\n+        DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n+        assertEquals(Long.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getDurationConverter(new Duration(123L));\n+        assertEquals(ReadableDuration.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getDurationConverter(new Interval(0L, 1000L));\n+        assertEquals(ReadableInterval.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getDurationConverter(\"\");\n+        assertEquals(String.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getDurationConverter(null);\n+        assertEquals(null, c.getSupportedType());\n+        \n+        try {\n+            ConverterManager.getInstance().getDurationConverter(Boolean.TRUE);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testGetDurationConverterRemovedNull() {\n+        try {\n+            ConverterManager.getInstance().removeDurationConverter(NullConverter.INSTANCE);\n+            try {\n+                ConverterManager.getInstance().getDurationConverter(null);\n+                fail();\n+            } catch (IllegalArgumentException ex) {}\n+        } finally {\n+            ConverterManager.getInstance().addDurationConverter(NullConverter.INSTANCE);\n+        }\n+        assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetDurationConverters() {\n+        DurationConverter[] array = ConverterManager.getInstance().getDurationConverters();\n+        assertEquals(DURATION_SIZE, array.length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddDurationConverter1() {\n+        DurationConverter c = new DurationConverter() {\n+            public long getDurationMillis(Object object) {return 0;}\n+            public Class getSupportedType() {return Boolean.class;}\n+        };\n+        try {\n+            DurationConverter removed = ConverterManager.getInstance().addDurationConverter(c);\n+            assertEquals(null, removed);\n+            assertEquals(Boolean.class, ConverterManager.getInstance().getDurationConverter(Boolean.TRUE).getSupportedType());\n+            assertEquals(DURATION_SIZE + 1, ConverterManager.getInstance().getDurationConverters().length);\n+        } finally {\n+            ConverterManager.getInstance().removeDurationConverter(c);\n+        }\n+        assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length);\n+    }\n+\n+    public void testAddDurationConverter2() {\n+        DurationConverter c = new DurationConverter() {\n+            public long getDurationMillis(Object object) {return 0;}\n+            public Class getSupportedType() {return String.class;}\n+        };\n+        try {\n+            DurationConverter removed = ConverterManager.getInstance().addDurationConverter(c);\n+            assertEquals(StringConverter.INSTANCE, removed);\n+            assertEquals(String.class, ConverterManager.getInstance().getDurationConverter(\"\").getSupportedType());\n+            assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length);\n+        } finally {\n+            ConverterManager.getInstance().addDurationConverter(StringConverter.INSTANCE);\n+        }\n+        assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length);\n+    }\n+\n+    public void testAddDurationConverter3() {\n+        DurationConverter removed = ConverterManager.getInstance().addDurationConverter(null);\n+        assertEquals(null, removed);\n+        assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length);\n+    }\n+\n+    public void testAddDurationConverterSecurity() {\n+        if (OLD_JDK) {\n+            return;\n+        }\n+        try {\n+            Policy.setPolicy(RESTRICT);\n+            System.setSecurityManager(new SecurityManager());\n+            ConverterManager.getInstance().addDurationConverter(StringConverter.INSTANCE);\n+            fail();\n+        } catch (SecurityException ex) {\n+            // ok\n+        } finally {\n+            System.setSecurityManager(null);\n+            Policy.setPolicy(ALLOW);\n+        }\n+        assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testRemoveDurationConverter1() {\n+        try {\n+            DurationConverter removed = ConverterManager.getInstance().removeDurationConverter(StringConverter.INSTANCE);\n+            assertEquals(StringConverter.INSTANCE, removed);\n+            assertEquals(DURATION_SIZE - 1, ConverterManager.getInstance().getDurationConverters().length);\n+        } finally {\n+            ConverterManager.getInstance().addDurationConverter(StringConverter.INSTANCE);\n+        }\n+        assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length);\n+    }\n+\n+    public void testRemoveDurationConverter2() {\n+        DurationConverter c = new DurationConverter() {\n+            public long getDurationMillis(Object object) {return 0;}\n+            public Class getSupportedType() {return Boolean.class;}\n+        };\n+        DurationConverter removed = ConverterManager.getInstance().removeDurationConverter(c);\n+        assertEquals(null, removed);\n+        assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length);\n+    }\n+\n+    public void testRemoveDurationConverter3() {\n+        DurationConverter removed = ConverterManager.getInstance().removeDurationConverter(null);\n+        assertEquals(null, removed);\n+        assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length);\n+    }\n+\n+    public void testRemoveDurationConverterSecurity() {\n+        if (OLD_JDK) {\n+            return;\n+        }\n+        try {\n+            Policy.setPolicy(RESTRICT);\n+            System.setSecurityManager(new SecurityManager());\n+            ConverterManager.getInstance().removeDurationConverter(StringConverter.INSTANCE);\n+            fail();\n+        } catch (SecurityException ex) {\n+            // ok\n+        } finally {\n+            System.setSecurityManager(null);\n+            Policy.setPolicy(ALLOW);\n+        }\n+        assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    private static int PERIOD_SIZE = 5;\n+    \n+    public void testGetPeriodConverter() {\n+        PeriodConverter c = ConverterManager.getInstance().getPeriodConverter(new Period(1, 2, 3, 4, 5, 6, 7, 8));\n+        assertEquals(ReadablePeriod.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getPeriodConverter(new Duration(123L));\n+        assertEquals(ReadableDuration.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getPeriodConverter(new Interval(0L, 1000L));\n+        assertEquals(ReadableInterval.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getPeriodConverter(\"\");\n+        assertEquals(String.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getPeriodConverter(null);\n+        assertEquals(null, c.getSupportedType());\n+        \n+        try {\n+            ConverterManager.getInstance().getPeriodConverter(Boolean.TRUE);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testGetPeriodConverterRemovedNull() {\n+        try {\n+            ConverterManager.getInstance().removePeriodConverter(NullConverter.INSTANCE);\n+            try {\n+                ConverterManager.getInstance().getPeriodConverter(null);\n+                fail();\n+            } catch (IllegalArgumentException ex) {}\n+        } finally {\n+            ConverterManager.getInstance().addPeriodConverter(NullConverter.INSTANCE);\n+        }\n+        assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetPeriodConverters() {\n+        PeriodConverter[] array = ConverterManager.getInstance().getPeriodConverters();\n+        assertEquals(PERIOD_SIZE, array.length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddPeriodConverter1() {\n+        PeriodConverter c = new PeriodConverter() {\n+            public void setInto(ReadWritablePeriod duration, Object object, Chronology c) {}\n+            public PeriodType getPeriodType(Object object) {return null;}\n+            public Class getSupportedType() {return Boolean.class;}\n+        };\n+        try {\n+            PeriodConverter removed = ConverterManager.getInstance().addPeriodConverter(c);\n+            assertEquals(null, removed);\n+            assertEquals(Boolean.class, ConverterManager.getInstance().getPeriodConverter(Boolean.TRUE).getSupportedType());\n+            assertEquals(PERIOD_SIZE + 1, ConverterManager.getInstance().getPeriodConverters().length);\n+        } finally {\n+            ConverterManager.getInstance().removePeriodConverter(c);\n+        }\n+        assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length);\n+    }\n+\n+    public void testAddPeriodConverter2() {\n+        PeriodConverter c = new PeriodConverter() {\n+            public void setInto(ReadWritablePeriod duration, Object object, Chronology c) {}\n+            public PeriodType getPeriodType(Object object) {return null;}\n+            public Class getSupportedType() {return String.class;}\n+        };\n+        try {\n+            PeriodConverter removed = ConverterManager.getInstance().addPeriodConverter(c);\n+            assertEquals(StringConverter.INSTANCE, removed);\n+            assertEquals(String.class, ConverterManager.getInstance().getPeriodConverter(\"\").getSupportedType());\n+            assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length);\n+        } finally {\n+            ConverterManager.getInstance().addPeriodConverter(StringConverter.INSTANCE);\n+        }\n+        assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length);\n+    }\n+\n+    public void testAddPeriodConverter3() {\n+        PeriodConverter removed = ConverterManager.getInstance().addPeriodConverter(null);\n+        assertEquals(null, removed);\n+        assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length);\n+    }\n+\n+    public void testAddPeriodConverterSecurity() {\n+        if (OLD_JDK) {\n+            return;\n+        }\n+        try {\n+            Policy.setPolicy(RESTRICT);\n+            System.setSecurityManager(new SecurityManager());\n+            ConverterManager.getInstance().addPeriodConverter(StringConverter.INSTANCE);\n+            fail();\n+        } catch (SecurityException ex) {\n+            // ok\n+        } finally {\n+            System.setSecurityManager(null);\n+            Policy.setPolicy(ALLOW);\n+        }\n+        assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testRemovePeriodConverter1() {\n+        try {\n+            PeriodConverter removed = ConverterManager.getInstance().removePeriodConverter(StringConverter.INSTANCE);\n+            assertEquals(StringConverter.INSTANCE, removed);\n+            assertEquals(PERIOD_SIZE - 1, ConverterManager.getInstance().getPeriodConverters().length);\n+        } finally {\n+            ConverterManager.getInstance().addPeriodConverter(StringConverter.INSTANCE);\n+        }\n+        assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length);\n+    }\n+\n+    public void testRemovePeriodConverter2() {\n+        PeriodConverter c = new PeriodConverter() {\n+            public void setInto(ReadWritablePeriod duration, Object object, Chronology c) {}\n+            public PeriodType getPeriodType(Object object) {return null;}\n+            public Class getSupportedType() {return Boolean.class;}\n+        };\n+        PeriodConverter removed = ConverterManager.getInstance().removePeriodConverter(c);\n+        assertEquals(null, removed);\n+        assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length);\n+    }\n+\n+    public void testRemovePeriodConverter3() {\n+        PeriodConverter removed = ConverterManager.getInstance().removePeriodConverter(null);\n+        assertEquals(null, removed);\n+        assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length);\n+    }\n+\n+    public void testRemovePeriodConverterSecurity() {\n+        if (OLD_JDK) {\n+            return;\n+        }\n+        try {\n+            Policy.setPolicy(RESTRICT);\n+            System.setSecurityManager(new SecurityManager());\n+            ConverterManager.getInstance().removePeriodConverter(StringConverter.INSTANCE);\n+            fail();\n+        } catch (SecurityException ex) {\n+            // ok\n+        } finally {\n+            System.setSecurityManager(null);\n+            Policy.setPolicy(ALLOW);\n+        }\n+        assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    private static int INTERVAL_SIZE = 3;\n+\n+    public void testGetIntervalConverter() {\n+        IntervalConverter c = ConverterManager.getInstance().getIntervalConverter(new Interval(0L, 1000L));\n+        assertEquals(ReadableInterval.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getIntervalConverter(\"\");\n+        assertEquals(String.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getIntervalConverter(null);\n+        assertEquals(null, c.getSupportedType());\n+        \n+        try {\n+            ConverterManager.getInstance().getIntervalConverter(Boolean.TRUE);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            ConverterManager.getInstance().getIntervalConverter(new Long(0));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testGetIntervalConverterRemovedNull() {\n+        try {\n+            ConverterManager.getInstance().removeIntervalConverter(NullConverter.INSTANCE);\n+            try {\n+                ConverterManager.getInstance().getIntervalConverter(null);\n+                fail();\n+            } catch (IllegalArgumentException ex) {}\n+        } finally {\n+            ConverterManager.getInstance().addIntervalConverter(NullConverter.INSTANCE);\n+        }\n+        assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetIntervalConverters() {\n+        IntervalConverter[] array = ConverterManager.getInstance().getIntervalConverters();\n+        assertEquals(INTERVAL_SIZE, array.length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddIntervalConverter1() {\n+        IntervalConverter c = new IntervalConverter() {\n+            public boolean isReadableInterval(Object object, Chronology chrono) {return false;}\n+            public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) {}\n+            public Class getSupportedType() {return Boolean.class;}\n+        };\n+        try {\n+            IntervalConverter removed = ConverterManager.getInstance().addIntervalConverter(c);\n+            assertEquals(null, removed);\n+            assertEquals(Boolean.class, ConverterManager.getInstance().getIntervalConverter(Boolean.TRUE).getSupportedType());\n+            assertEquals(INTERVAL_SIZE + 1, ConverterManager.getInstance().getIntervalConverters().length);\n+        } finally {\n+            ConverterManager.getInstance().removeIntervalConverter(c);\n+        }\n+        assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length);\n+    }\n+\n+    public void testAddIntervalConverter2() {\n+        IntervalConverter c = new IntervalConverter() {\n+            public boolean isReadableInterval(Object object, Chronology chrono) {return false;}\n+            public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) {}\n+            public Class getSupportedType() {return String.class;}\n+        };\n+        try {\n+            IntervalConverter removed = ConverterManager.getInstance().addIntervalConverter(c);\n+            assertEquals(StringConverter.INSTANCE, removed);\n+            assertEquals(String.class, ConverterManager.getInstance().getIntervalConverter(\"\").getSupportedType());\n+            assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length);\n+        } finally {\n+            ConverterManager.getInstance().addIntervalConverter(StringConverter.INSTANCE);\n+        }\n+        assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length);\n+    }\n+\n+    public void testAddIntervalConverter3() {\n+        IntervalConverter removed = ConverterManager.getInstance().addIntervalConverter(null);\n+        assertEquals(null, removed);\n+        assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length);\n+    }\n+\n+    public void testAddIntervalConverterSecurity() {\n+        if (OLD_JDK) {\n+            return;\n+        }\n+        try {\n+            Policy.setPolicy(RESTRICT);\n+            System.setSecurityManager(new SecurityManager());\n+            ConverterManager.getInstance().addIntervalConverter(StringConverter.INSTANCE);\n+            fail();\n+        } catch (SecurityException ex) {\n+            // ok\n+        } finally {\n+            System.setSecurityManager(null);\n+            Policy.setPolicy(ALLOW);\n+        }\n+        assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testRemoveIntervalConverter1() {\n+        try {\n+            IntervalConverter removed = ConverterManager.getInstance().removeIntervalConverter(StringConverter.INSTANCE);\n+            assertEquals(StringConverter.INSTANCE, removed);\n+            assertEquals(INTERVAL_SIZE - 1, ConverterManager.getInstance().getIntervalConverters().length);\n+        } finally {\n+            ConverterManager.getInstance().addIntervalConverter(StringConverter.INSTANCE);\n+        }\n+        assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length);\n+    }\n+\n+    public void testRemoveIntervalConverter2() {\n+        IntervalConverter c = new IntervalConverter() {\n+            public boolean isReadableInterval(Object object, Chronology chrono) {return false;}\n+            public void setInto(ReadWritableInterval interval, Object object, Chronology chrono) {}\n+            public Class getSupportedType() {return Boolean.class;}\n+        };\n+        IntervalConverter removed = ConverterManager.getInstance().removeIntervalConverter(c);\n+        assertEquals(null, removed);\n+        assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length);\n+    }\n+\n+    public void testRemoveIntervalConverter3() {\n+        IntervalConverter removed = ConverterManager.getInstance().removeIntervalConverter(null);\n+        assertEquals(null, removed);\n+        assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length);\n+    }\n+\n+    public void testRemoveIntervalConverterSecurity() {\n+        if (OLD_JDK) {\n+            return;\n+        }\n+        try {\n+            Policy.setPolicy(RESTRICT);\n+            System.setSecurityManager(new SecurityManager());\n+            ConverterManager.getInstance().removeIntervalConverter(StringConverter.INSTANCE);\n+            fail();\n+        } catch (SecurityException ex) {\n+            // ok\n+        } finally {\n+            System.setSecurityManager(null);\n+            Policy.setPolicy(ALLOW);\n+        }\n+        assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        assertEquals(\"ConverterManager[6 instant,7 partial,5 duration,5 period,3 interval]\", ConverterManager.getInstance().toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/convert/TestConverterSet.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.convert;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+import java.util.Calendar;\n+import java.util.GregorianCalendar;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateMidnight;\n+import org.joda.time.DateTime;\n+import org.joda.time.ReadWritableDateTime;\n+import org.joda.time.ReadWritableInstant;\n+import org.joda.time.ReadableDateTime;\n+import org.joda.time.ReadableInstant;\n+\n+/**\n+ * This class is a JUnit test for ConverterSet.\n+ * Mostly for coverage.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestConverterSet extends TestCase {\n+\n+    private static final Converter c1 = new Converter() {\n+        public Class getSupportedType() {return Boolean.class;}\n+    };\n+    private static final Converter c2 = new Converter() {\n+        public Class getSupportedType() {return Character.class;}\n+    };\n+    private static final Converter c3 = new Converter() {\n+        public Class getSupportedType() {return Byte.class;}\n+    };\n+    private static final Converter c4 = new Converter() {\n+        public Class getSupportedType() {return Short.class;}\n+    };\n+    private static final Converter c4a = new Converter() {\n+        public Class getSupportedType() {return Short.class;}\n+    };\n+    private static final Converter c5 = new Converter() {\n+        public Class getSupportedType() {return Integer.class;}\n+    };\n+    \n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestConverterSet.class);\n+    }\n+\n+    public TestConverterSet(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testClass() throws Exception {\n+        Class cls = ConverterSet.class;\n+        assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(cls.getModifiers()));\n+        \n+        assertEquals(1, cls.getDeclaredConstructors().length);\n+        Constructor con = cls.getDeclaredConstructors()[0];\n+        assertEquals(false, Modifier.isPublic(con.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(con.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(con.getModifiers()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testBigHashtable() {\n+        Converter[] array = new Converter[] {\n+            c1, c2, c3, c4,\n+        };\n+        ConverterSet set = new ConverterSet(array);\n+        set.select(Boolean.class);\n+        set.select(Character.class);\n+        set.select(Byte.class);\n+        set.select(Short.class);\n+        set.select(Integer.class);\n+        set.select(Long.class);\n+        set.select(Float.class);\n+        set.select(Double.class);\n+        set.select(null);\n+        set.select(Calendar.class);\n+        set.select(GregorianCalendar.class);\n+        set.select(DateTime.class);\n+        set.select(DateMidnight.class);\n+        set.select(ReadableInstant.class);\n+        set.select(ReadableDateTime.class);\n+        set.select(ReadWritableInstant.class);  // 16\n+        set.select(ReadWritableDateTime.class);\n+        set.select(DateTime.class);\n+        assertEquals(4, set.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddNullRemoved1() {\n+        Converter[] array = new Converter[] {\n+            c1, c2, c3, c4,\n+        };\n+        ConverterSet set = new ConverterSet(array);\n+        ConverterSet result = set.add(c5, null);\n+        assertEquals(4, set.size());\n+        assertEquals(5, result.size());\n+    }\n+\n+    public void testAddNullRemoved2() {\n+        Converter[] array = new Converter[] {\n+            c1, c2, c3, c4,\n+        };\n+        ConverterSet set = new ConverterSet(array);\n+        ConverterSet result = set.add(c4, null);\n+        assertSame(set, result);\n+    }\n+\n+    public void testAddNullRemoved3() {\n+        Converter[] array = new Converter[] {\n+            c1, c2, c3, c4,\n+        };\n+        ConverterSet set = new ConverterSet(array);\n+        ConverterSet result = set.add(c4a, null);\n+        assertTrue(set != result);\n+        assertEquals(4, set.size());\n+        assertEquals(4, result.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testRemoveNullRemoved1() {\n+        Converter[] array = new Converter[] {\n+            c1, c2, c3, c4,\n+        };\n+        ConverterSet set = new ConverterSet(array);\n+        ConverterSet result = set.remove(c3, null);\n+        assertEquals(4, set.size());\n+        assertEquals(3, result.size());\n+    }\n+\n+    public void testRemoveNullRemoved2() {\n+        Converter[] array = new Converter[] {\n+            c1, c2, c3, c4,\n+        };\n+        ConverterSet set = new ConverterSet(array);\n+        ConverterSet result = set.remove(c5, null);\n+        assertSame(set, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testRemoveBadIndex1() {\n+        Converter[] array = new Converter[] {\n+            c1, c2, c3, c4,\n+        };\n+        ConverterSet set = new ConverterSet(array);\n+        try {\n+            set.remove(200, null);\n+            fail();\n+        } catch (IndexOutOfBoundsException ex) {}\n+        assertEquals(4, set.size());\n+    }\n+\n+    public void testRemoveBadIndex2() {\n+        Converter[] array = new Converter[] {\n+            c1, c2, c3, c4,\n+        };\n+        ConverterSet set = new ConverterSet(array);\n+        try {\n+            set.remove(-1, null);\n+            fail();\n+        } catch (IndexOutOfBoundsException ex) {}\n+        assertEquals(4, set.size());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/convert/TestDateConverter.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.convert;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+import java.util.Date;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.TimeOfDay;\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.chrono.JulianChronology;\n+\n+/**\n+ * This class is a Junit unit test for DateConverter.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestDateConverter extends TestCase {\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static Chronology ISO;\n+    private static Chronology JULIAN;\n+    private static Chronology COPTIC;\n+    \n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestDateConverter.class);\n+    }\n+\n+    public TestDateConverter(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        JULIAN = JulianChronology.getInstance();\n+        COPTIC = CopticChronology.getInstance();\n+        ISO = ISOChronology.getInstance();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSingleton() throws Exception {\n+        Class cls = DateConverter.class;\n+        assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(cls.getModifiers()));\n+        \n+        Constructor con = cls.getDeclaredConstructor((Class[]) null);\n+        assertEquals(1, cls.getDeclaredConstructors().length);\n+        assertEquals(true, Modifier.isProtected(con.getModifiers()));\n+        \n+        Field fld = cls.getDeclaredField(\"INSTANCE\");\n+        assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSupportedType() throws Exception {\n+        assertEquals(Date.class, DateConverter.INSTANCE.getSupportedType());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetInstantMillis_Object_Chronology() throws Exception {\n+        Date date = new Date(123L);\n+        long millis = DateConverter.INSTANCE.getInstantMillis(date, JULIAN);\n+        assertEquals(123L, millis);\n+        assertEquals(123L, DateConverter.INSTANCE.getInstantMillis(date, (Chronology) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetChronology_Object_Zone() throws Exception {\n+        assertEquals(ISO_PARIS, DateConverter.INSTANCE.getChronology(new Date(123L), PARIS));\n+        assertEquals(ISO, DateConverter.INSTANCE.getChronology(new Date(123L), (DateTimeZone) null));\n+    }\n+\n+    public void testGetChronology_Object_Chronology() throws Exception {\n+        assertEquals(JULIAN, DateConverter.INSTANCE.getChronology(new Date(123L), JULIAN));\n+        assertEquals(ISO, DateConverter.INSTANCE.getChronology(new Date(123L), (Chronology) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetPartialValues() throws Exception {\n+        TimeOfDay tod = new TimeOfDay();\n+        int[] expected = COPTIC.get(tod, 12345678L);\n+        int[] actual = DateConverter.INSTANCE.getPartialValues(tod, new Date(12345678L), COPTIC);\n+        assertEquals(true, Arrays.equals(expected, actual));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        assertEquals(\"Converter[java.util.Date]\", DateConverter.INSTANCE.toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/convert/TestLongConverter.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.convert;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.TimeOfDay;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.chrono.JulianChronology;\n+\n+/**\n+ * This class is a Junit unit test for LongConverter.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestLongConverter extends TestCase {\n+\n+    private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static Chronology JULIAN;\n+    private static Chronology ISO;\n+    \n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestLongConverter.class);\n+    }\n+\n+    public TestLongConverter(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        JULIAN = JulianChronology.getInstance();\n+        ISO = ISOChronology.getInstance();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSingleton() throws Exception {\n+        Class cls = LongConverter.class;\n+        assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(cls.getModifiers()));\n+        \n+        Constructor con = cls.getDeclaredConstructor((Class[]) null);\n+        assertEquals(1, cls.getDeclaredConstructors().length);\n+        assertEquals(true, Modifier.isProtected(con.getModifiers()));\n+        \n+        Field fld = cls.getDeclaredField(\"INSTANCE\");\n+        assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSupportedType() throws Exception {\n+        assertEquals(Long.class, LongConverter.INSTANCE.getSupportedType());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetInstantMillis_Object_Chronology() throws Exception {\n+        assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n+        assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetChronology_Object_Zone() throws Exception {\n+        assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n+        assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n+    }\n+\n+    public void testGetChronology_Object_Chronology() throws Exception {\n+        assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n+        assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetPartialValues() throws Exception {\n+        TimeOfDay tod = new TimeOfDay();\n+        int[] expected = ISOChronology.getInstance().get(tod, 12345678L);\n+        int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n+        assertEquals(true, Arrays.equals(expected, actual));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetDurationMillis_Object() throws Exception {\n+        assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        assertEquals(\"Converter[java.lang.Long]\", LongConverter.INSTANCE.toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/convert/TestNullConverter.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.convert;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeUtils;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.MutableInterval;\n+import org.joda.time.MutablePeriod;\n+import org.joda.time.PeriodType;\n+import org.joda.time.TimeOfDay;\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.GJChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.chrono.JulianChronology;\n+\n+/**\n+ * This class is a Junit unit test for NullConverter.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestNullConverter extends TestCase {\n+\n+    private long TEST_TIME_NOW =\n+            20 * DateTimeConstants.MILLIS_PER_DAY\n+            + 10L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 20L * DateTimeConstants.MILLIS_PER_MINUTE\n+            + 30L * DateTimeConstants.MILLIS_PER_SECOND\n+            + 40L;\n+            \n+    private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static Chronology ISO;\n+    private static Chronology JULIAN;\n+    \n+    private DateTimeZone zone = null;\n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestNullConverter.class);\n+    }\n+\n+    public TestNullConverter(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(DateTimeZone.forID(\"Europe/London\"));\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+        \n+        ISO = ISOChronology.getInstance();\n+        JULIAN = JulianChronology.getInstance();\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSingleton() throws Exception {\n+        Class cls = NullConverter.class;\n+        assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(cls.getModifiers()));\n+        \n+        Constructor con = cls.getDeclaredConstructor((Class[]) null);\n+        assertEquals(1, cls.getDeclaredConstructors().length);\n+        assertEquals(true, Modifier.isProtected(con.getModifiers()));\n+        \n+        Field fld = cls.getDeclaredField(\"INSTANCE\");\n+        assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSupportedType() throws Exception {\n+        assertEquals(null, NullConverter.INSTANCE.getSupportedType());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetInstantMillis_Object_Chronology() throws Exception {\n+        assertEquals(TEST_TIME_NOW, NullConverter.INSTANCE.getInstantMillis(null, JULIAN));\n+        assertEquals(TEST_TIME_NOW, NullConverter.INSTANCE.getInstantMillis(null, (Chronology) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetChronology_Object_Zone() throws Exception {\n+        assertEquals(ISO_PARIS, NullConverter.INSTANCE.getChronology(null, PARIS));\n+        assertEquals(ISO, NullConverter.INSTANCE.getChronology(null, (DateTimeZone) null));\n+    }\n+\n+    public void testGetChronology_Object_Chronology() throws Exception {\n+        assertEquals(JULIAN, NullConverter.INSTANCE.getChronology(null, JULIAN));\n+        assertEquals(ISO, NullConverter.INSTANCE.getChronology(null, (Chronology) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetPartialValues() throws Exception {\n+        TimeOfDay tod = new TimeOfDay();\n+        int[] expected = new int[] {10 + 1, 20, 30, 40}; // now\n+        int[] actual = NullConverter.INSTANCE.getPartialValues(tod, null, ISOChronology.getInstance());\n+        assertEquals(true, Arrays.equals(expected, actual));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetDurationMillis_Object() throws Exception {\n+        assertEquals(0L, NullConverter.INSTANCE.getDurationMillis(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetPeriodType_Object() throws Exception {\n+        assertEquals(PeriodType.standard(),\n+            NullConverter.INSTANCE.getPeriodType(null));\n+    }\n+\n+    public void testSetInto_Object() throws Exception {\n+        MutablePeriod m = new MutablePeriod(PeriodType.millis());\n+        NullConverter.INSTANCE.setInto(m, null, null);\n+        assertEquals(0L, m.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsReadableInterval_Object_Chronology() throws Exception {\n+        assertEquals(false, NullConverter.INSTANCE.isReadableInterval(null, null));\n+    }\n+\n+    public void testSetInto_Object_Chronology1() throws Exception {\n+        MutableInterval m = new MutableInterval(1000L, 2000L, GJChronology.getInstance());\n+        NullConverter.INSTANCE.setInto(m, null, null);\n+        assertEquals(TEST_TIME_NOW, m.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, m.getEndMillis());\n+        assertEquals(ISOChronology.getInstance(), m.getChronology());\n+    }\n+\n+    public void testSetInto_Object_Chronology2() throws Exception {\n+        MutableInterval m = new MutableInterval(1000L, 2000L, GJChronology.getInstance());\n+        NullConverter.INSTANCE.setInto(m, null, CopticChronology.getInstance());\n+        assertEquals(TEST_TIME_NOW, m.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, m.getEndMillis());\n+        assertEquals(CopticChronology.getInstance(), m.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        assertEquals(\"Converter[null]\", NullConverter.INSTANCE.toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/convert/TestReadableDurationConverter.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.convert;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.Duration;\n+import org.joda.time.PeriodType;\n+import org.joda.time.MutablePeriod;\n+import org.joda.time.ReadableDuration;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.chrono.JulianChronology;\n+\n+/**\n+ * This class is a Junit unit test for ReadableDurationConverter.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestReadableDurationConverter extends TestCase {\n+\n+    private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static Chronology JULIAN;\n+    private static Chronology ISO;\n+    \n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestReadableDurationConverter.class);\n+    }\n+\n+    public TestReadableDurationConverter(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        JULIAN = JulianChronology.getInstance();\n+        ISO = ISOChronology.getInstance();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSingleton() throws Exception {\n+        Class cls = ReadableDurationConverter.class;\n+        assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(cls.getModifiers()));\n+        \n+        Constructor con = cls.getDeclaredConstructor((Class[]) null);\n+        assertEquals(1, cls.getDeclaredConstructors().length);\n+        assertEquals(true, Modifier.isProtected(con.getModifiers()));\n+        \n+        Field fld = cls.getDeclaredField(\"INSTANCE\");\n+        assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSupportedType() throws Exception {\n+        assertEquals(ReadableDuration.class, ReadableDurationConverter.INSTANCE.getSupportedType());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetDurationMillis_Object() throws Exception {\n+        assertEquals(123L, ReadableDurationConverter.INSTANCE.getDurationMillis(new Duration(123L)));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetPeriodType_Object() throws Exception {\n+        assertEquals(PeriodType.standard(),\n+            ReadableDurationConverter.INSTANCE.getPeriodType(new Duration(123L)));\n+    }\n+\n+    public void testSetInto_Object() throws Exception {\n+        MutablePeriod m = new MutablePeriod(PeriodType.yearMonthDayTime());\n+        ReadableDurationConverter.INSTANCE.setInto(m, new Duration(\n+            3L * DateTimeConstants.MILLIS_PER_DAY +\n+            4L * DateTimeConstants.MILLIS_PER_MINUTE + 5L\n+        ), null);\n+        assertEquals(0, m.getYears());\n+        assertEquals(0, m.getMonths());\n+        assertEquals(0, m.getWeeks());\n+        assertEquals(0, m.getDays());\n+        assertEquals(3 * 24, m.getHours());\n+        assertEquals(4, m.getMinutes());\n+        assertEquals(0, m.getSeconds());\n+        assertEquals(5, m.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        assertEquals(\"Converter[org.joda.time.ReadableDuration]\", ReadableDurationConverter.INSTANCE.toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/convert/TestReadableInstantConverter.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.convert;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.Instant;\n+import org.joda.time.MutableDateTime;\n+import org.joda.time.ReadableInstant;\n+import org.joda.time.TimeOfDay;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.chrono.JulianChronology;\n+\n+/**\n+ * This class is a Junit unit test for ReadableInstantConverter.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestReadableInstantConverter extends TestCase {\n+\n+    private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static Chronology JULIAN;\n+    private static Chronology ISO;\n+    \n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestReadableInstantConverter.class);\n+    }\n+\n+    public TestReadableInstantConverter(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        JULIAN = JulianChronology.getInstance();\n+        ISO = ISOChronology.getInstance();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSingleton() throws Exception {\n+        Class cls = ReadableInstantConverter.class;\n+        assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(cls.getModifiers()));\n+        \n+        Constructor con = cls.getDeclaredConstructor((Class[]) null);\n+        assertEquals(1, cls.getDeclaredConstructors().length);\n+        assertEquals(true, Modifier.isProtected(con.getModifiers()));\n+        \n+        Field fld = cls.getDeclaredField(\"INSTANCE\");\n+        assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSupportedType() throws Exception {\n+        assertEquals(ReadableInstant.class, ReadableInstantConverter.INSTANCE.getSupportedType());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetInstantMillis_Object_Chronology() throws Exception {\n+        assertEquals(123L, ReadableInstantConverter.INSTANCE.getInstantMillis(new Instant(123L), JULIAN));\n+        assertEquals(123L, ReadableInstantConverter.INSTANCE.getInstantMillis(new DateTime(123L), JULIAN));\n+        assertEquals(123L, ReadableInstantConverter.INSTANCE.getInstantMillis(new Instant(123L), (Chronology) null));\n+        assertEquals(123L, ReadableInstantConverter.INSTANCE.getInstantMillis(new DateTime(123L), (Chronology) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetChronology_Object_Zone() throws Exception {\n+        assertEquals(ISO_PARIS, ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L), PARIS));\n+        assertEquals(ISO_PARIS, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), PARIS));\n+        assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L), DateTimeZone.getDefault()));\n+        assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), DateTimeZone.getDefault()));\n+        assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L), (DateTimeZone) null));\n+        assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), (DateTimeZone) null));\n+        \n+        assertEquals(ISO_PARIS, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L, new MockBadChronology()), PARIS));\n+        \n+        MutableDateTime mdt = new MutableDateTime() {\n+            public Chronology getChronology() {\n+                return null; // bad\n+            }\n+        };\n+        assertEquals(ISO_PARIS, ReadableInstantConverter.INSTANCE.getChronology(mdt, PARIS));\n+    }\n+\n+    public void testGetChronology_Object_nullChronology() throws Exception {\n+        assertEquals(ISO.withUTC(), ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L), (Chronology) null));\n+        assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), (Chronology) null));\n+        \n+        MutableDateTime mdt = new MutableDateTime() {\n+            public Chronology getChronology() {\n+                return null; // bad\n+            }\n+        };\n+        assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(mdt, (Chronology) null));\n+    }\n+\n+    public void testGetChronology_Object_Chronology() throws Exception {\n+        assertEquals(JULIAN, ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L), JULIAN));\n+        assertEquals(JULIAN, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), JULIAN));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetPartialValues() throws Exception {\n+        TimeOfDay tod = new TimeOfDay();\n+        int[] expected = ISOChronology.getInstance().get(tod, 12345678L);\n+        int[] actual = ReadableInstantConverter.INSTANCE.getPartialValues(tod, new Instant(12345678L), ISOChronology.getInstance());\n+        assertEquals(true, Arrays.equals(expected, actual));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        assertEquals(\"Converter[org.joda.time.ReadableInstant]\", ReadableInstantConverter.INSTANCE.toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/convert/TestReadableIntervalConverter.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.convert;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.Interval;\n+import org.joda.time.MutableInterval;\n+import org.joda.time.MutablePeriod;\n+import org.joda.time.PeriodType;\n+import org.joda.time.ReadableInterval;\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.GJChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.chrono.JulianChronology;\n+\n+/**\n+ * This class is a JUnit test for ReadableIntervalConverter.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestReadableIntervalConverter extends TestCase {\n+\n+    private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static Chronology JULIAN;\n+    private static Chronology ISO;\n+    \n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestReadableIntervalConverter.class);\n+    }\n+\n+    public TestReadableIntervalConverter(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        JULIAN = JulianChronology.getInstance();\n+        ISO = ISOChronology.getInstance();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSingleton() throws Exception {\n+        Class cls = ReadableIntervalConverter.class;\n+        assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(cls.getModifiers()));\n+        \n+        Constructor con = cls.getDeclaredConstructor((Class[]) null);\n+        assertEquals(1, cls.getDeclaredConstructors().length);\n+        assertEquals(true, Modifier.isProtected(con.getModifiers()));\n+        \n+        Field fld = cls.getDeclaredField(\"INSTANCE\");\n+        assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSupportedType() throws Exception {\n+        assertEquals(ReadableInterval.class, ReadableIntervalConverter.INSTANCE.getSupportedType());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetDurationMillis_Object() throws Exception {\n+        Interval i = new Interval(100L, 223L);\n+        assertEquals(123L, ReadableIntervalConverter.INSTANCE.getDurationMillis(i));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetPeriodType_Object() throws Exception {\n+        Interval i = new Interval(100L, 223L);\n+        assertEquals(PeriodType.standard(),\n+            ReadableIntervalConverter.INSTANCE.getPeriodType(i));\n+    }\n+\n+    public void testSetIntoPeriod_Object1() throws Exception {\n+        Interval i = new Interval(100L, 223L);\n+        MutablePeriod m = new MutablePeriod(PeriodType.millis());\n+        ReadableIntervalConverter.INSTANCE.setInto(m, i, null);\n+        assertEquals(0, m.getYears());\n+        assertEquals(0, m.getMonths());\n+        assertEquals(0, m.getWeeks());\n+        assertEquals(0, m.getDays());\n+        assertEquals(0, m.getHours());\n+        assertEquals(0, m.getMinutes());\n+        assertEquals(0, m.getSeconds());\n+        assertEquals(123, m.getMillis());\n+    }\n+\n+    public void testSetIntoPeriod_Object2() throws Exception {\n+        Interval i = new Interval(100L, 223L);\n+        MutablePeriod m = new MutablePeriod(PeriodType.millis());\n+        ReadableIntervalConverter.INSTANCE.setInto(m, i, CopticChronology.getInstance());\n+        assertEquals(0, m.getYears());\n+        assertEquals(0, m.getMonths());\n+        assertEquals(0, m.getWeeks());\n+        assertEquals(0, m.getDays());\n+        assertEquals(0, m.getHours());\n+        assertEquals(0, m.getMinutes());\n+        assertEquals(0, m.getSeconds());\n+        assertEquals(123, m.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsReadableInterval_Object_Chronology() throws Exception {\n+        Interval i = new Interval(1234L, 5678L);\n+        assertEquals(true, ReadableIntervalConverter.INSTANCE.isReadableInterval(i, null));\n+    }\n+\n+    public void testSetIntoInterval_Object1() throws Exception {\n+        Interval i = new Interval(0L, 123L, CopticChronology.getInstance());\n+        MutableInterval m = new MutableInterval(-1000L, 1000L, BuddhistChronology.getInstance());\n+        ReadableIntervalConverter.INSTANCE.setInto(m, i, null);\n+        assertEquals(0L, m.getStartMillis());\n+        assertEquals(123L, m.getEndMillis());\n+        assertEquals(CopticChronology.getInstance(), m.getChronology());\n+    }\n+\n+    public void testSetIntoInterval_Object2() throws Exception {\n+        Interval i = new Interval(0L, 123L, CopticChronology.getInstance());\n+        MutableInterval m = new MutableInterval(-1000L, 1000L, BuddhistChronology.getInstance());\n+        ReadableIntervalConverter.INSTANCE.setInto(m, i, GJChronology.getInstance());\n+        assertEquals(0L, m.getStartMillis());\n+        assertEquals(123L, m.getEndMillis());\n+        assertEquals(GJChronology.getInstance(), m.getChronology());\n+    }\n+\n+    public void testSetIntoInterval_Object3() throws Exception {\n+        MutableInterval i = new MutableInterval(0L, 123L) {\n+            public Chronology getChronology() {\n+                return null; // bad\n+            }\n+        };\n+        MutableInterval m = new MutableInterval(-1000L, 1000L, BuddhistChronology.getInstance());\n+        ReadableIntervalConverter.INSTANCE.setInto(m, i, GJChronology.getInstance());\n+        assertEquals(0L, m.getStartMillis());\n+        assertEquals(123L, m.getEndMillis());\n+        assertEquals(GJChronology.getInstance(), m.getChronology());\n+    }\n+\n+    public void testSetIntoInterval_Object4() throws Exception {\n+        MutableInterval i = new MutableInterval(0L, 123L) {\n+            public Chronology getChronology() {\n+                return null; // bad\n+            }\n+        };\n+        MutableInterval m = new MutableInterval(-1000L, 1000L, BuddhistChronology.getInstance());\n+        ReadableIntervalConverter.INSTANCE.setInto(m, i, null);\n+        assertEquals(0L, m.getStartMillis());\n+        assertEquals(123L, m.getEndMillis());\n+        assertEquals(ISOChronology.getInstance(), m.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        assertEquals(\"Converter[org.joda.time.ReadableInterval]\", ReadableIntervalConverter.INSTANCE.toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/convert/TestReadablePartialConverter.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.convert;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTimeField;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.ReadablePartial;\n+import org.joda.time.TimeOfDay;\n+import org.joda.time.YearMonthDay;\n+import org.joda.time.base.BasePartial;\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.chrono.JulianChronology;\n+\n+/**\n+ * This class is a Junit unit test for ReadablePartialConverter.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestReadablePartialConverter extends TestCase {\n+\n+    private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static Chronology JULIAN;\n+    private static Chronology ISO;\n+    private static Chronology BUDDHIST;\n+    \n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestReadablePartialConverter.class);\n+    }\n+\n+    public TestReadablePartialConverter(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        JULIAN = JulianChronology.getInstance();\n+        ISO = ISOChronology.getInstance();\n+        BUDDHIST = BuddhistChronology.getInstance();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSingleton() throws Exception {\n+        Class cls = ReadablePartialConverter.class;\n+        assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(cls.getModifiers()));\n+        \n+        Constructor con = cls.getDeclaredConstructor((Class[]) null);\n+        assertEquals(1, cls.getDeclaredConstructors().length);\n+        assertEquals(true, Modifier.isProtected(con.getModifiers()));\n+        \n+        Field fld = cls.getDeclaredField(\"INSTANCE\");\n+        assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSupportedType() throws Exception {\n+        assertEquals(ReadablePartial.class, ReadablePartialConverter.INSTANCE.getSupportedType());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetChronology_Object_Zone() throws Exception {\n+        assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n+        assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n+        assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n+    }\n+\n+    public void testGetChronology_Object_Chronology() throws Exception {\n+        assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n+        assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n+        assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetPartialValues() throws Exception {\n+        TimeOfDay tod = new TimeOfDay();\n+        int[] expected = new int[] {1, 2, 3, 4};\n+        int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n+        assertEquals(true, Arrays.equals(expected, actual));\n+        \n+        try {\n+            ReadablePartialConverter.INSTANCE.getPartialValues(tod, new YearMonthDay(2005, 6, 9), JULIAN);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            ReadablePartialConverter.INSTANCE.getPartialValues(tod, new MockTOD(), JULIAN);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    static class MockTOD extends BasePartial {\n+        protected DateTimeField getField(int index, Chronology chrono) {\n+            switch (index) {\n+                case 0:\n+                return chrono.hourOfDay();\n+                case 1:\n+                return chrono.minuteOfHour();\n+                case 2:\n+                return chrono.year();\n+                case 3:\n+                return chrono.era();\n+            }\n+            return null;\n+        }\n+        public int size() {\n+            return 4;\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        assertEquals(\"Converter[org.joda.time.ReadablePartial]\", ReadablePartialConverter.INSTANCE.toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/convert/TestReadablePeriodConverter.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.convert;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.PeriodType;\n+import org.joda.time.MutablePeriod;\n+import org.joda.time.ReadablePeriod;\n+import org.joda.time.Period;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.chrono.JulianChronology;\n+\n+/**\n+ * This class is a Junit unit test for ReadablePeriodConverter.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestReadablePeriodConverter extends TestCase {\n+\n+    private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static Chronology JULIAN;\n+    private static Chronology ISO;\n+    \n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestReadablePeriodConverter.class);\n+    }\n+\n+    public TestReadablePeriodConverter(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        JULIAN = JulianChronology.getInstance();\n+        ISO = ISOChronology.getInstance();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSingleton() throws Exception {\n+        Class cls = ReadablePeriodConverter.class;\n+        assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(cls.getModifiers()));\n+        \n+        Constructor con = cls.getDeclaredConstructor((Class[]) null);\n+        assertEquals(1, cls.getDeclaredConstructors().length);\n+        assertEquals(true, Modifier.isProtected(con.getModifiers()));\n+        \n+        Field fld = cls.getDeclaredField(\"INSTANCE\");\n+        assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSupportedType() throws Exception {\n+        assertEquals(ReadablePeriod.class, ReadablePeriodConverter.INSTANCE.getSupportedType());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetPeriodType_Object() throws Exception {\n+        assertEquals(PeriodType.standard(),\n+            ReadablePeriodConverter.INSTANCE.getPeriodType(new Period(123L, PeriodType.standard())));\n+        assertEquals(PeriodType.yearMonthDayTime(),\n+            ReadablePeriodConverter.INSTANCE.getPeriodType(new Period(123L, PeriodType.yearMonthDayTime())));\n+    }\n+\n+    public void testSetInto_Object() throws Exception {\n+        MutablePeriod m = new MutablePeriod(PeriodType.yearMonthDayTime());\n+        ReadablePeriodConverter.INSTANCE.setInto(m, new Period(0, 0, 0, 3, 0, 4, 0, 5), null);\n+        assertEquals(0, m.getYears());\n+        assertEquals(0, m.getMonths());\n+        assertEquals(0, m.getWeeks());\n+        assertEquals(3, m.getDays());\n+        assertEquals(0, m.getHours());\n+        assertEquals(4, m.getMinutes());\n+        assertEquals(0, m.getSeconds());\n+        assertEquals(5, m.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        assertEquals(\"Converter[org.joda.time.ReadablePeriod]\", ReadablePeriodConverter.INSTANCE.toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/convert/TestStringConverter.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.convert;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.MutableInterval;\n+import org.joda.time.MutablePeriod;\n+import org.joda.time.PeriodType;\n+import org.joda.time.TimeOfDay;\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.chrono.JulianChronology;\n+\n+/**\n+ * This class is a Junit unit test for StringConverter.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestStringConverter extends TestCase {\n+\n+    private static final DateTimeZone ONE_HOUR = DateTimeZone.forOffsetHours(1);\n+    private static final DateTimeZone SIX = DateTimeZone.forOffsetHours(6);\n+    private static final DateTimeZone SEVEN = DateTimeZone.forOffsetHours(7);\n+    private static final DateTimeZone EIGHT = DateTimeZone.forOffsetHours(8);\n+    private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final Chronology ISO_EIGHT = ISOChronology.getInstance(EIGHT);\n+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n+    private static Chronology ISO;\n+    private static Chronology JULIAN;\n+    \n+    private DateTimeZone zone = null;\n+    private Locale locale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestStringConverter.class);\n+    }\n+\n+    public TestStringConverter(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        zone = DateTimeZone.getDefault();\n+        locale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        Locale.setDefault(Locale.UK);\n+        \n+        JULIAN = JulianChronology.getInstance();\n+        ISO = ISOChronology.getInstance();\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeZone.setDefault(zone);\n+        Locale.setDefault(locale);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSingleton() throws Exception {\n+        Class cls = StringConverter.class;\n+        assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(cls.getModifiers()));\n+        \n+        Constructor con = cls.getDeclaredConstructor((Class[]) null);\n+        assertEquals(1, cls.getDeclaredConstructors().length);\n+        assertEquals(true, Modifier.isProtected(con.getModifiers()));\n+        \n+        Field fld = cls.getDeclaredField(\"INSTANCE\");\n+        assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSupportedType() throws Exception {\n+        assertEquals(String.class, StringConverter.INSTANCE.getSupportedType());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetInstantMillis_Object() throws Exception {\n+        DateTime dt = new DateTime(2004, 6, 9, 12, 24, 48, 501, EIGHT);\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-06-09T12:24:48.501+08:00\", ISO_EIGHT));\n+        \n+        dt = new DateTime(2004, 1, 1, 0, 0, 0, 0, EIGHT);\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004T+08:00\", ISO_EIGHT));\n+        \n+        dt = new DateTime(2004, 6, 1, 0, 0, 0, 0, EIGHT);\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-06T+08:00\", ISO_EIGHT));\n+        \n+        dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, EIGHT);\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-06-09T+08:00\", ISO_EIGHT));\n+        \n+        dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, EIGHT);\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-161T+08:00\", ISO_EIGHT));\n+        \n+        dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, EIGHT);\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-W24-3T+08:00\", ISO_EIGHT));\n+        \n+        dt = new DateTime(2004, 6, 7, 0, 0, 0, 0, EIGHT);\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-W24T+08:00\", ISO_EIGHT));\n+        \n+        dt = new DateTime(2004, 6, 9, 12, 0, 0, 0, EIGHT);\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-06-09T12+08:00\", ISO_EIGHT));\n+        \n+        dt = new DateTime(2004, 6, 9, 12, 24, 0, 0, EIGHT);\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-06-09T12:24+08:00\", ISO_EIGHT));\n+        \n+        dt = new DateTime(2004, 6, 9, 12, 24, 48, 0, EIGHT);\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-06-09T12:24:48+08:00\", ISO_EIGHT));\n+        \n+        dt = new DateTime(2004, 6, 9, 12, 30, 0, 0, EIGHT);\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-06-09T12.5+08:00\", ISO_EIGHT));\n+        \n+        dt = new DateTime(2004, 6, 9, 12, 24, 30, 0, EIGHT);\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-06-09T12:24.5+08:00\", ISO_EIGHT));\n+        \n+        dt = new DateTime(2004, 6, 9, 12, 24, 48, 500, EIGHT);\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-06-09T12:24:48.5+08:00\", ISO_EIGHT));\n+        \n+        dt = new DateTime(2004, 6, 9, 12, 24, 48, 501);\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-06-09T12:24:48.501\", ISO));\n+    }\n+\n+    public void testGetInstantMillis_Object_Zone() throws Exception {\n+        DateTime dt = new DateTime(2004, 6, 9, 12, 24, 48, 501, PARIS);\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-06-09T12:24:48.501+02:00\", ISO_PARIS));\n+        \n+        dt = new DateTime(2004, 6, 9, 12, 24, 48, 501, PARIS);\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-06-09T12:24:48.501\", ISO_PARIS));\n+        \n+        dt = new DateTime(2004, 6, 9, 12, 24, 48, 501, LONDON);\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-06-09T12:24:48.501+01:00\", ISO_LONDON));\n+        \n+        dt = new DateTime(2004, 6, 9, 12, 24, 48, 501, LONDON);\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-06-09T12:24:48.501\", ISO_LONDON));\n+    }\n+\n+    public void testGetInstantMillis_Object_Chronology() throws Exception {\n+        DateTime dt = new DateTime(2004, 6, 9, 12, 24, 48, 501, JulianChronology.getInstance(LONDON));\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-06-09T12:24:48.501+01:00\", JULIAN));\n+    }\n+\n+    public void testGetInstantMillisInvalid() {\n+        try {\n+            StringConverter.INSTANCE.getInstantMillis(\"\", (Chronology) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            StringConverter.INSTANCE.getInstantMillis(\"X\", (Chronology) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetChronology_Object_Zone() throws Exception {\n+        assertEquals(ISOChronology.getInstance(PARIS), StringConverter.INSTANCE.getChronology(\"2004-06-09T12:24:48.501+01:00\", PARIS));\n+        assertEquals(ISOChronology.getInstance(PARIS), StringConverter.INSTANCE.getChronology(\"2004-06-09T12:24:48.501\", PARIS));\n+        assertEquals(ISOChronology.getInstance(LONDON), StringConverter.INSTANCE.getChronology(\"2004-06-09T12:24:48.501+01:00\", (DateTimeZone) null));\n+        assertEquals(ISOChronology.getInstance(LONDON), StringConverter.INSTANCE.getChronology(\"2004-06-09T12:24:48.501\", (DateTimeZone) null));\n+    }\n+\n+    public void testGetChronology_Object_Chronology() throws Exception {\n+        assertEquals(JulianChronology.getInstance(LONDON), StringConverter.INSTANCE.getChronology(\"2004-06-09T12:24:48.501+01:00\", JULIAN));\n+        assertEquals(JulianChronology.getInstance(LONDON), StringConverter.INSTANCE.getChronology(\"2004-06-09T12:24:48.501\", JULIAN));\n+        assertEquals(ISOChronology.getInstance(LONDON), StringConverter.INSTANCE.getChronology(\"2004-06-09T12:24:48.501+01:00\", (Chronology) null));\n+        assertEquals(ISOChronology.getInstance(LONDON), StringConverter.INSTANCE.getChronology(\"2004-06-09T12:24:48.501\", (Chronology) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetPartialValues() throws Exception {\n+        TimeOfDay tod = new TimeOfDay();\n+        int[] expected = new int[] {3, 4, 5, 6};\n+        int[] actual = StringConverter.INSTANCE.getPartialValues(tod, \"T03:04:05.006\", ISOChronology.getInstance());\n+        assertEquals(true, Arrays.equals(expected, actual));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetDateTime() throws Exception {\n+        DateTime base = new DateTime(2004, 6, 9, 12, 24, 48, 501, PARIS);\n+        DateTime test = new DateTime(base.toString(), PARIS);\n+        assertEquals(base, test);\n+    }\n+\n+    public void testGetDateTime1() throws Exception {\n+        DateTime test = new DateTime(\"2004-06-09T12:24:48.501+01:00\");\n+        assertEquals(2004, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(12, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(48, test.getSecondOfMinute());\n+        assertEquals(501, test.getMillisOfSecond());\n+        assertEquals(LONDON, test.getZone());\n+    }\n+\n+    public void testGetDateTime2() throws Exception {\n+        DateTime test = new DateTime(\"2004-06-09T12:24:48.501\");\n+        assertEquals(2004, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(12, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(48, test.getSecondOfMinute());\n+        assertEquals(501, test.getMillisOfSecond());\n+        assertEquals(LONDON, test.getZone());\n+    }\n+\n+    public void testGetDateTime3() throws Exception {\n+        DateTime test = new DateTime(\"2004-06-09T12:24:48.501+02:00\", PARIS);\n+        assertEquals(2004, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(12, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(48, test.getSecondOfMinute());\n+        assertEquals(501, test.getMillisOfSecond());\n+        assertEquals(PARIS, test.getZone());\n+    }\n+\n+    public void testGetDateTime4() throws Exception {\n+        DateTime test = new DateTime(\"2004-06-09T12:24:48.501\", PARIS);\n+        assertEquals(2004, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(12, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(48, test.getSecondOfMinute());\n+        assertEquals(501, test.getMillisOfSecond());\n+        assertEquals(PARIS, test.getZone());\n+    }\n+\n+    public void testGetDateTime5() throws Exception {\n+        DateTime test = new DateTime(\"2004-06-09T12:24:48.501+02:00\", JulianChronology.getInstance(PARIS));\n+        assertEquals(2004, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(12, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(48, test.getSecondOfMinute());\n+        assertEquals(501, test.getMillisOfSecond());\n+        assertEquals(PARIS, test.getZone());\n+    }\n+\n+    public void testGetDateTime6() throws Exception {\n+        DateTime test = new DateTime(\"2004-06-09T12:24:48.501\", JulianChronology.getInstance(PARIS));\n+        assertEquals(2004, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(12, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(48, test.getSecondOfMinute());\n+        assertEquals(501, test.getMillisOfSecond());\n+        assertEquals(PARIS, test.getZone());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetDurationMillis_Object1() throws Exception {\n+        long millis = StringConverter.INSTANCE.getDurationMillis(\"PT12.345S\");\n+        assertEquals(12345, millis);\n+        \n+        millis = StringConverter.INSTANCE.getDurationMillis(\"pt12.345s\");\n+        assertEquals(12345, millis);\n+        \n+        millis = StringConverter.INSTANCE.getDurationMillis(\"pt12s\");\n+        assertEquals(12000, millis);\n+        \n+        millis = StringConverter.INSTANCE.getDurationMillis(\"pt12.s\");\n+        assertEquals(12000, millis);\n+        \n+        millis = StringConverter.INSTANCE.getDurationMillis(\"pt-12.32s\");\n+        assertEquals(-12320, millis);\n+        \n+        millis = StringConverter.INSTANCE.getDurationMillis(\"pt12.3456s\");\n+        assertEquals(12345, millis);\n+    }\n+\n+    public void testGetDurationMillis_Object2() throws Exception {\n+        try {\n+            StringConverter.INSTANCE.getDurationMillis(\"P2Y6M9DXYZ\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            StringConverter.INSTANCE.getDurationMillis(\"PTS\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            StringConverter.INSTANCE.getDurationMillis(\"XT0S\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            StringConverter.INSTANCE.getDurationMillis(\"PX0S\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            StringConverter.INSTANCE.getDurationMillis(\"PT0X\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            StringConverter.INSTANCE.getDurationMillis(\"PTXS\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            StringConverter.INSTANCE.getDurationMillis(\"PT0.0.0S\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            StringConverter.INSTANCE.getDurationMillis(\"PT0-00S\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetPeriodType_Object() throws Exception {\n+        assertEquals(PeriodType.standard(),\n+            StringConverter.INSTANCE.getPeriodType(\"P2Y6M9D\"));\n+    }\n+\n+    public void testSetIntoPeriod_Object1() throws Exception {\n+        MutablePeriod m = new MutablePeriod(PeriodType.yearMonthDayTime());\n+        StringConverter.INSTANCE.setInto(m, \"P2Y6M9DT12H24M48S\", null);\n+        assertEquals(2, m.getYears());\n+        assertEquals(6, m.getMonths());\n+        assertEquals(9, m.getDays());\n+        assertEquals(12, m.getHours());\n+        assertEquals(24, m.getMinutes());\n+        assertEquals(48, m.getSeconds());\n+        assertEquals(0, m.getMillis());\n+    }\n+\n+    public void testSetIntoPeriod_Object2() throws Exception {\n+        MutablePeriod m = new MutablePeriod(PeriodType.yearWeekDayTime());\n+        StringConverter.INSTANCE.setInto(m, \"P2Y4W3DT12H24M48S\", null);\n+        assertEquals(2, m.getYears());\n+        assertEquals(4, m.getWeeks());\n+        assertEquals(3, m.getDays());\n+        assertEquals(12, m.getHours());\n+        assertEquals(24, m.getMinutes());\n+        assertEquals(48, m.getSeconds());\n+        assertEquals(0, m.getMillis());\n+    }        \n+\n+    public void testSetIntoPeriod_Object3() throws Exception {\n+        MutablePeriod m = new MutablePeriod(PeriodType.yearWeekDayTime());\n+        StringConverter.INSTANCE.setInto(m, \"P2Y4W3DT12H24M48.034S\", null);\n+        assertEquals(2, m.getYears());\n+        assertEquals(4, m.getWeeks());\n+        assertEquals(3, m.getDays());\n+        assertEquals(12, m.getHours());\n+        assertEquals(24, m.getMinutes());\n+        assertEquals(48, m.getSeconds());\n+        assertEquals(34, m.getMillis());\n+    }        \n+\n+    public void testSetIntoPeriod_Object4() throws Exception {\n+        MutablePeriod m = new MutablePeriod(PeriodType.yearWeekDayTime());\n+        StringConverter.INSTANCE.setInto(m, \"P2Y4W3DT12H24M.056S\", null);\n+        assertEquals(2, m.getYears());\n+        assertEquals(4, m.getWeeks());\n+        assertEquals(3, m.getDays());\n+        assertEquals(12, m.getHours());\n+        assertEquals(24, m.getMinutes());\n+        assertEquals(0, m.getSeconds());\n+        assertEquals(56, m.getMillis());\n+    }        \n+\n+    public void testSetIntoPeriod_Object5() throws Exception {\n+        MutablePeriod m = new MutablePeriod(PeriodType.yearWeekDayTime());\n+        StringConverter.INSTANCE.setInto(m, \"P2Y4W3DT12H24M56.S\", null);\n+        assertEquals(2, m.getYears());\n+        assertEquals(4, m.getWeeks());\n+        assertEquals(3, m.getDays());\n+        assertEquals(12, m.getHours());\n+        assertEquals(24, m.getMinutes());\n+        assertEquals(56, m.getSeconds());\n+        assertEquals(0, m.getMillis());\n+    }        \n+\n+    public void testSetIntoPeriod_Object6() throws Exception {\n+        MutablePeriod m = new MutablePeriod(PeriodType.yearWeekDayTime());\n+        StringConverter.INSTANCE.setInto(m, \"P2Y4W3DT12H24M56.1234567S\", null);\n+        assertEquals(2, m.getYears());\n+        assertEquals(4, m.getWeeks());\n+        assertEquals(3, m.getDays());\n+        assertEquals(12, m.getHours());\n+        assertEquals(24, m.getMinutes());\n+        assertEquals(56, m.getSeconds());\n+        assertEquals(123, m.getMillis());\n+    }        \n+\n+    public void testSetIntoPeriod_Object7() throws Exception {\n+        MutablePeriod m = new MutablePeriod(1, 0, 1, 1, 1, 1, 1, 1, PeriodType.yearWeekDayTime());\n+        StringConverter.INSTANCE.setInto(m, \"P2Y4W3D\", null);\n+        assertEquals(2, m.getYears());\n+        assertEquals(4, m.getWeeks());\n+        assertEquals(3, m.getDays());\n+        assertEquals(0, m.getHours());\n+        assertEquals(0, m.getMinutes());\n+        assertEquals(0, m.getSeconds());\n+        assertEquals(0, m.getMillis());\n+    }        \n+\n+    public void testSetIntoPeriod_Object8() throws Exception {\n+        MutablePeriod m = new MutablePeriod();\n+        try {\n+            StringConverter.INSTANCE.setInto(m, \"\", null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        try {\n+            StringConverter.INSTANCE.setInto(m, \"PXY\", null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        try {\n+            StringConverter.INSTANCE.setInto(m, \"PT0SXY\", null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            StringConverter.INSTANCE.setInto(m, \"P2Y4W3DT12H24M48SX\", null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsReadableInterval_Object_Chronology() throws Exception {\n+        assertEquals(false, StringConverter.INSTANCE.isReadableInterval(\"\", null));\n+    }\n+\n+    public void testSetIntoInterval_Object_Chronology1() throws Exception {\n+        MutableInterval m = new MutableInterval(-1000L, 1000L);\n+        StringConverter.INSTANCE.setInto(m, \"2004-06-09/P1Y2M\", null);\n+        assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0), m.getStart());\n+        assertEquals(new DateTime(2005, 8, 9, 0, 0, 0, 0), m.getEnd());\n+        assertEquals(ISOChronology.getInstance(), m.getChronology());\n+    }\n+\n+    public void testSetIntoInterval_Object_Chronology2() throws Exception {\n+        MutableInterval m = new MutableInterval(-1000L, 1000L);\n+        StringConverter.INSTANCE.setInto(m, \"P1Y2M/2004-06-09\", null);\n+        assertEquals(new DateTime(2003, 4, 9, 0, 0, 0, 0), m.getStart());\n+        assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0), m.getEnd());\n+        assertEquals(ISOChronology.getInstance(), m.getChronology());\n+    }\n+\n+    public void testSetIntoInterval_Object_Chronology3() throws Exception {\n+        MutableInterval m = new MutableInterval(-1000L, 1000L);\n+        StringConverter.INSTANCE.setInto(m, \"2003-08-09/2004-06-09\", null);\n+        assertEquals(new DateTime(2003, 8, 9, 0, 0, 0, 0), m.getStart());\n+        assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0), m.getEnd());\n+        assertEquals(ISOChronology.getInstance(), m.getChronology());\n+    }\n+\n+    public void testSetIntoInterval_Object_Chronology4() throws Exception {\n+        MutableInterval m = new MutableInterval(-1000L, 1000L);\n+        StringConverter.INSTANCE.setInto(m, \"2004-06-09T+06:00/P1Y2M\", null);\n+        assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, SIX).withChronology(null), m.getStart());\n+        assertEquals(new DateTime(2005, 8, 9, 0, 0, 0, 0, SIX).withChronology(null), m.getEnd());\n+        assertEquals(ISOChronology.getInstance(), m.getChronology());\n+    }\n+\n+    public void testSetIntoInterval_Object_Chronology5() throws Exception {\n+        MutableInterval m = new MutableInterval(-1000L, 1000L);\n+        StringConverter.INSTANCE.setInto(m, \"P1Y2M/2004-06-09T+06:00\", null);\n+        assertEquals(new DateTime(2003, 4, 9, 0, 0, 0, 0, SIX).withChronology(null), m.getStart());\n+        assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, SIX).withChronology(null), m.getEnd());\n+        assertEquals(ISOChronology.getInstance(), m.getChronology());\n+    }\n+\n+    public void testSetIntoInterval_Object_Chronology6() throws Exception {\n+        MutableInterval m = new MutableInterval(-1000L, 1000L);\n+        StringConverter.INSTANCE.setInto(m, \"2003-08-09T+06:00/2004-06-09T+07:00\", null);\n+        assertEquals(new DateTime(2003, 8, 9, 0, 0, 0, 0, SIX).withChronology(null), m.getStart());\n+        assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, SEVEN).withChronology(null), m.getEnd());\n+        assertEquals(ISOChronology.getInstance(), m.getChronology());\n+    }\n+\n+    public void testSetIntoInterval_Object_Chronology7() throws Exception {\n+        MutableInterval m = new MutableInterval(-1000L, 1000L);\n+        StringConverter.INSTANCE.setInto(m, \"2003-08-09/2004-06-09\", BuddhistChronology.getInstance());\n+        assertEquals(new DateTime(2003, 8, 9, 0, 0, 0, 0, BuddhistChronology.getInstance()), m.getStart());\n+        assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, BuddhistChronology.getInstance()), m.getEnd());\n+        assertEquals(BuddhistChronology.getInstance(), m.getChronology());\n+    }\n+\n+    public void testSetIntoInterval_Object_Chronology8() throws Exception {\n+        MutableInterval m = new MutableInterval(-1000L, 1000L);\n+        StringConverter.INSTANCE.setInto(m, \"2003-08-09T+06:00/2004-06-09T+07:00\", BuddhistChronology.getInstance(EIGHT));\n+        assertEquals(new DateTime(2003, 8, 9, 0, 0, 0, 0, BuddhistChronology.getInstance(SIX)).withZone(EIGHT), m.getStart());\n+        assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, BuddhistChronology.getInstance(SEVEN)).withZone(EIGHT), m.getEnd());\n+        assertEquals(BuddhistChronology.getInstance(EIGHT), m.getChronology());\n+    }\n+\n+    public void testSetIntoIntervalEx_Object_Chronology1() throws Exception {\n+        MutableInterval m = new MutableInterval(-1000L, 1000L);\n+        try {\n+            StringConverter.INSTANCE.setInto(m, \"\", null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testSetIntoIntervalEx_Object_Chronology2() throws Exception {\n+        MutableInterval m = new MutableInterval(-1000L, 1000L);\n+        try {\n+            StringConverter.INSTANCE.setInto(m, \"/\", null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testSetIntoIntervalEx_Object_Chronology3() throws Exception {\n+        MutableInterval m = new MutableInterval(-1000L, 1000L);\n+        try {\n+            StringConverter.INSTANCE.setInto(m, \"P1Y/\", null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testSetIntoIntervalEx_Object_Chronology4() throws Exception {\n+        MutableInterval m = new MutableInterval(-1000L, 1000L);\n+        try {\n+            StringConverter.INSTANCE.setInto(m, \"/P1Y\", null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testSetIntoIntervalEx_Object_Chronology5() throws Exception {\n+        MutableInterval m = new MutableInterval(-1000L, 1000L);\n+        try {\n+            StringConverter.INSTANCE.setInto(m, \"P1Y/P2Y\", null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        assertEquals(\"Converter[java.lang.String]\", StringConverter.INSTANCE.toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/field/TestAll.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.field;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Entry point for all tests in this package.\n+ * \n+ * @version $Id$\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestAll extends TestCase {\n+\n+    public TestAll(String testName) {\n+        super(testName);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = {\n+            TestAll.class.getName()\n+        };\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite();\n+        \n+        suite.addTest(TestFieldUtils.suite());\n+\n+        suite.addTest(TestBaseDateTimeField.suite());\n+        suite.addTest(TestOffsetDateTimeField.suite());\n+        suite.addTest(TestPreciseDurationDateTimeField.suite());\n+        suite.addTest(TestPreciseDateTimeField.suite());\n+        \n+        suite.addTest(TestMillisDurationField.suite());\n+        suite.addTest(TestPreciseDurationField.suite());\n+        suite.addTest(TestScaledDurationField.suite());\n+        suite.addTest(TestUnsupportedDateTimeField.suite());\n+        return suite;\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/field/TestBaseDateTimeField.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.field;\n+\n+import java.util.Arrays;\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTimeField;\n+import org.joda.time.DateTimeFieldType;\n+import org.joda.time.DurationField;\n+import org.joda.time.DurationFieldType;\n+import org.joda.time.TimeOfDay;\n+import org.joda.time.base.BasePartial;\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * This class is a Junit unit test for BaseDateTimeField.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestBaseDateTimeField extends TestCase {\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestBaseDateTimeField.class);\n+    }\n+\n+    public TestBaseDateTimeField(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+    }\n+\n+    protected void tearDown() throws Exception {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_constructor() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(DateTimeFieldType.secondOfMinute(), field.getType());\n+        try {\n+            field = new MockBaseDateTimeField(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void test_getType() {\n+        BaseDateTimeField field = new MockBaseDateTimeField(DateTimeFieldType.secondOfDay());\n+        assertEquals(DateTimeFieldType.secondOfDay(), field.getType());\n+    }\n+\n+    public void test_getName() {\n+        BaseDateTimeField field = new MockBaseDateTimeField(DateTimeFieldType.secondOfDay());\n+        assertEquals(\"secondOfDay\", field.getName());\n+    }\n+\n+    public void test_toString() {\n+        BaseDateTimeField field = new MockBaseDateTimeField(DateTimeFieldType.secondOfDay());\n+        assertEquals(\"DateTimeField[secondOfDay]\", field.toString());\n+    }\n+\n+    public void test_isSupported() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(true, field.isSupported());\n+    }\n+\n+    public void test_get() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(0, field.get(0));\n+        assertEquals(1, field.get(60));\n+        assertEquals(2, field.get(123));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getAsText_long_Locale() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(\"29\", field.getAsText(60L * 29, Locale.ENGLISH));\n+        assertEquals(\"29\", field.getAsText(60L * 29, null));\n+    }\n+\n+    public void test_getAsText_long() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(\"29\", field.getAsText(60L * 29));\n+    }\n+\n+    public void test_getAsText_RP_int_Locale() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(\"20\", field.getAsText(new TimeOfDay(12, 30, 40, 50), 20, Locale.ENGLISH));\n+        assertEquals(\"20\", field.getAsText(new TimeOfDay(12, 30, 40, 50), 20, null));\n+    }\n+\n+    public void test_getAsText_RP_Locale() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(\"40\", field.getAsText(new TimeOfDay(12, 30, 40, 50), Locale.ENGLISH));\n+        assertEquals(\"40\", field.getAsText(new TimeOfDay(12, 30, 40, 50), null));\n+    }\n+\n+    public void test_getAsText_int_Locale() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(\"80\", field.getAsText(80, Locale.ENGLISH));\n+        assertEquals(\"80\", field.getAsText(80, null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getAsShortText_long_Locale() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(\"29\", field.getAsShortText(60L * 29, Locale.ENGLISH));\n+        assertEquals(\"29\", field.getAsShortText(60L * 29, null));\n+    }\n+\n+    public void test_getAsShortText_long() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(\"29\", field.getAsShortText(60L * 29));\n+    }\n+\n+    public void test_getAsShortText_RP_int_Locale() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(\"20\", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), 20, Locale.ENGLISH));\n+        assertEquals(\"20\", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), 20, null));\n+    }\n+\n+    public void test_getAsShortText_RP_Locale() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(\"40\", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), Locale.ENGLISH));\n+        assertEquals(\"40\", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), null));\n+    }\n+\n+    public void test_getAsShortText_int_Locale() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(\"80\", field.getAsShortText(80, Locale.ENGLISH));\n+        assertEquals(\"80\", field.getAsShortText(80, null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_add_long_int() {\n+        MockCountingDurationField.add_int = 0;\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(61, field.add(1L, 1));\n+        assertEquals(1, MockCountingDurationField.add_int);\n+    }\n+\n+    public void test_add_long_long() {\n+        MockCountingDurationField.add_long = 0;\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(61, field.add(1L, 1L));\n+        assertEquals(1, MockCountingDurationField.add_long);\n+    }\n+\n+    public void test_add_RP_int_intarray_int() {\n+        int[] values = new int[] {10, 20, 30, 40};\n+        int[] expected = new int[] {10, 20, 30, 40};\n+        BaseDateTimeField field = new MockStandardBaseDateTimeField();\n+        int[] result = field.add(new TimeOfDay(), 2, values, 0);\n+        assertEquals(true, Arrays.equals(expected, result));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 31, 40};\n+        result = field.add(new TimeOfDay(), 2, values, 1);\n+        assertEquals(true, Arrays.equals(expected, result));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 21, 0, 40};\n+        result = field.add(new TimeOfDay(), 2, values, 30);\n+        assertEquals(true, Arrays.equals(expected, result));\n+        \n+        values = new int[] {23, 59, 30, 40};\n+        try {\n+            field.add(new TimeOfDay(), 2, values, 30);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 29, 40};\n+        result = field.add(new TimeOfDay(), 2, values, -1);\n+        assertEquals(true, Arrays.equals(expected, result));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 19, 59, 40};\n+        result = field.add(new TimeOfDay(), 2, values, -31);\n+        assertEquals(true, Arrays.equals(expected, result));\n+        \n+        values = new int[] {0, 0, 30, 40};\n+        try {\n+            field.add(new TimeOfDay(), 2, values, -31);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        values = new int[] {0, 0};\n+        try {\n+            field.add(new MockPartial(), 0, values, 1000);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        values = new int[] {1, 0};\n+        try {\n+            field.add(new MockPartial(), 0, values, -1000);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_addWrapField_long_int() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(1029, field.addWrapField(60L * 29, 0));\n+        assertEquals(1059, field.addWrapField(60L * 29, 30));\n+        assertEquals(1000, field.addWrapField(60L * 29, 31));\n+    }\n+\n+    public void test_addWrapField_RP_int_intarray_int() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        int[] values = new int[] {10, 20, 30, 40};\n+        int[] expected = new int[] {10, 20, 30, 40};\n+        int[] result = field.addWrapField(new TimeOfDay(), 2, values, 0);\n+        assertEquals(true, Arrays.equals(result, expected));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 59, 40};\n+        result = field.addWrapField(new TimeOfDay(), 2, values, 29);\n+        assertEquals(true, Arrays.equals(result, expected));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 0, 40};\n+        result = field.addWrapField(new TimeOfDay(), 2, values, 30);\n+        assertEquals(true, Arrays.equals(result, expected));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 1, 40};\n+        result = field.addWrapField(new TimeOfDay(), 2, values, 31);\n+        assertEquals(true, Arrays.equals(result, expected));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getDifference_long_long() {\n+        MockCountingDurationField.difference_long = 0;\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(30, field.getDifference(0L, 0L));\n+        assertEquals(1, MockCountingDurationField.difference_long);\n+    }\n+\n+    public void test_getDifferenceAsLong_long_long() {\n+        MockCountingDurationField.difference_long = 0;\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(30, field.getDifferenceAsLong(0L, 0L));\n+        assertEquals(1, MockCountingDurationField.difference_long);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_set_long_int() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(1000, field.set(0L, 0));\n+        assertEquals(1029, field.set(0L, 29));\n+    }\n+\n+    public void test_set_RP_int_intarray_int() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        int[] values = new int[] {10, 20, 30, 40};\n+        int[] expected = new int[] {10, 20, 30, 40};\n+        int[] result = field.set(new TimeOfDay(), 2, values, 30);\n+        assertEquals(true, Arrays.equals(result, expected));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 29, 40};\n+        result = field.set(new TimeOfDay(), 2, values, 29);\n+        assertEquals(true, Arrays.equals(result, expected));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 30, 40};\n+        try {\n+            field.set(new TimeOfDay(), 2, values, 60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(true, Arrays.equals(values, expected));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 30, 40};\n+        try {\n+            field.set(new TimeOfDay(), 2, values, -1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(true, Arrays.equals(values, expected));\n+    }\n+\n+    public void test_set_long_String_Locale() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(1000, field.set(0L, \"0\", null));\n+        assertEquals(1029, field.set(0L, \"29\", Locale.ENGLISH));\n+    }\n+\n+    public void test_set_long_String() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(1000, field.set(0L, \"0\"));\n+        assertEquals(1029, field.set(0L, \"29\"));\n+    }\n+\n+    public void test_set_RP_int_intarray_String_Locale() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        int[] values = new int[] {10, 20, 30, 40};\n+        int[] expected = new int[] {10, 20, 30, 40};\n+        int[] result = field.set(new TimeOfDay(), 2, values, \"30\", null);\n+        assertEquals(true, Arrays.equals(result, expected));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 29, 40};\n+        result = field.set(new TimeOfDay(), 2, values, \"29\", Locale.ENGLISH);\n+        assertEquals(true, Arrays.equals(result, expected));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 30, 40};\n+        try {\n+            field.set(new TimeOfDay(), 2, values, \"60\", null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(true, Arrays.equals(values, expected));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 30, 40};\n+        try {\n+            field.set(new TimeOfDay(), 2, values, \"-1\", null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(true, Arrays.equals(values, expected));\n+    }\n+\n+    public void test_convertText() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(0, field.convertText(\"0\", null));\n+        assertEquals(29, field.convertText(\"29\", null));\n+        try {\n+            field.convertText(\"2A\", null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            field.convertText(null, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //------------------------------------------------------------------------\n+//    public abstract DurationField getDurationField();\n+//\n+//    public abstract DurationField getRangeDurationField();\n+\n+    public void test_isLeap_long() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(false, field.isLeap(0L));\n+    }\n+\n+    public void test_getLeapAmount_long() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(0, field.getLeapAmount(0L));\n+    }\n+\n+    public void test_getLeapDurationField() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(null, field.getLeapDurationField());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getMinimumValue() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(0, field.getMinimumValue());\n+    }\n+\n+    public void test_getMinimumValue_long() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(0, field.getMinimumValue(0L));\n+    }\n+\n+    public void test_getMinimumValue_RP() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(0, field.getMinimumValue(new TimeOfDay()));\n+    }\n+\n+    public void test_getMinimumValue_RP_intarray() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(0, field.getMinimumValue(new TimeOfDay(), new int[4]));\n+    }\n+\n+    public void test_getMaximumValue() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(59, field.getMaximumValue());\n+    }\n+\n+    public void test_getMaximumValue_long() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(59, field.getMaximumValue(0L));\n+    }\n+\n+    public void test_getMaximumValue_RP() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(59, field.getMaximumValue(new TimeOfDay()));\n+    }\n+\n+    public void test_getMaximumValue_RP_intarray() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(59, field.getMaximumValue(new TimeOfDay(), new int[4]));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getMaximumTextLength_Locale() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(2, field.getMaximumTextLength(Locale.ENGLISH));\n+\n+        field = new MockBaseDateTimeField() {\n+            public int getMaximumValue() {\n+                return 5;\n+            }\n+        };\n+        assertEquals(1, field.getMaximumTextLength(Locale.ENGLISH));\n+        \n+        field = new MockBaseDateTimeField() {\n+            public int getMaximumValue() {\n+                return 555;\n+            }\n+        };\n+        assertEquals(3, field.getMaximumTextLength(Locale.ENGLISH));\n+        \n+        field = new MockBaseDateTimeField() {\n+            public int getMaximumValue() {\n+                return 5555;\n+            }\n+        };\n+        assertEquals(4, field.getMaximumTextLength(Locale.ENGLISH));\n+        \n+        field = new MockBaseDateTimeField() {\n+            public int getMaximumValue() {\n+                return -1;\n+            }\n+        };\n+        assertEquals(2, field.getMaximumTextLength(Locale.ENGLISH));\n+    }\n+\n+    public void test_getMaximumShortTextLength_Locale() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(2, field.getMaximumShortTextLength(Locale.ENGLISH));\n+    }\n+\n+    //------------------------------------------------------------------------\n+    public void test_roundFloor_long() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(0L, field.roundFloor(0L));\n+        assertEquals(0L, field.roundFloor(29L));\n+        assertEquals(0L, field.roundFloor(30L));\n+        assertEquals(0L, field.roundFloor(31L));\n+        assertEquals(60L, field.roundFloor(60L));\n+    }\n+\n+    public void test_roundCeiling_long() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(0L, field.roundCeiling(0L));\n+        assertEquals(60L, field.roundCeiling(29L));\n+        assertEquals(60L, field.roundCeiling(30L));\n+        assertEquals(60L, field.roundCeiling(31L));\n+        assertEquals(60L, field.roundCeiling(60L));\n+    }\n+\n+    public void test_roundHalfFloor_long() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(0L, field.roundHalfFloor(0L));\n+        assertEquals(0L, field.roundHalfFloor(29L));\n+        assertEquals(0L, field.roundHalfFloor(30L));\n+        assertEquals(60L, field.roundHalfFloor(31L));\n+        assertEquals(60L, field.roundHalfFloor(60L));\n+    }\n+\n+    public void test_roundHalfCeiling_long() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(0L, field.roundHalfCeiling(0L));\n+        assertEquals(0L, field.roundHalfCeiling(29L));\n+        assertEquals(60L, field.roundHalfCeiling(30L));\n+        assertEquals(60L, field.roundHalfCeiling(31L));\n+        assertEquals(60L, field.roundHalfCeiling(60L));\n+    }\n+\n+    public void test_roundHalfEven_long() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(0L, field.roundHalfEven(0L));\n+        assertEquals(0L, field.roundHalfEven(29L));\n+        assertEquals(0L, field.roundHalfEven(30L));\n+        assertEquals(60L, field.roundHalfEven(31L));\n+        assertEquals(60L, field.roundHalfEven(60L));\n+        assertEquals(60L, field.roundHalfEven(89L));\n+        assertEquals(120L, field.roundHalfEven(90L));\n+        assertEquals(120L, field.roundHalfEven(91L));\n+    }\n+\n+    public void test_remainder_long() {\n+        BaseDateTimeField field = new MockBaseDateTimeField();\n+        assertEquals(0L, field.remainder(0L));\n+        assertEquals(29L, field.remainder(29L));\n+        assertEquals(30L, field.remainder(30L));\n+        assertEquals(31L, field.remainder(31L));\n+        assertEquals(0L, field.remainder(60L));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    static class MockBaseDateTimeField extends BaseDateTimeField {\n+        protected MockBaseDateTimeField() {\n+            super(DateTimeFieldType.secondOfMinute());\n+        }\n+        protected MockBaseDateTimeField(DateTimeFieldType type) {\n+            super(type);\n+        }\n+        public int get(long instant) {\n+            return (int) (instant / 60L);\n+        }\n+        public long set(long instant, int value) {\n+            return 1000 + value;\n+        }\n+        public DurationField getDurationField() {\n+            return new MockCountingDurationField(DurationFieldType.seconds());\n+        }\n+        public DurationField getRangeDurationField() {\n+            return new MockCountingDurationField(DurationFieldType.minutes());\n+        }\n+        public int getMinimumValue() {\n+            return 0;\n+        }\n+        public int getMaximumValue() {\n+            return 59;\n+        }\n+        public long roundFloor(long instant) {\n+            return (instant / 60L) * 60L;\n+        }\n+        public boolean isLenient() {\n+            return false;\n+        }\n+    }\n+\n+    static class MockStandardBaseDateTimeField extends MockBaseDateTimeField {\n+        protected MockStandardBaseDateTimeField() {\n+            super();\n+        }\n+        public DurationField getDurationField() {\n+            return ISOChronology.getInstanceUTC().seconds();\n+        }\n+        public DurationField getRangeDurationField() {\n+            return ISOChronology.getInstanceUTC().minutes();\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    static class MockCountingDurationField extends BaseDurationField {\n+        static int add_int = 0;\n+        static int add_long = 0;\n+        static int difference_long = 0;\n+        \n+        protected MockCountingDurationField(DurationFieldType type) {\n+            super(type);\n+        }\n+        public boolean isPrecise() {\n+            return false;\n+        }\n+        public long getUnitMillis() {\n+            return 0;\n+        }\n+        public long getValueAsLong(long duration, long instant) {\n+            return 0;\n+        }\n+        public long getMillis(int value, long instant) {\n+            return 0;\n+        }\n+        public long getMillis(long value, long instant) {\n+            return 0;\n+        }\n+        public long add(long instant, int value) {\n+            add_int++;\n+            return instant + (value * 60L);\n+        }\n+        public long add(long instant, long value) {\n+            add_long++;\n+            return instant + (value * 60L);\n+        }\n+        public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {\n+            difference_long++;\n+            return 30;\n+        }\n+    }\n+\n+    static class MockPartial extends BasePartial {\n+        protected DateTimeField getField(int index, Chronology chrono) {\n+            if (index == 0) {\n+                return ISOChronology.getInstanceUTC().minuteOfHour();\n+            }\n+            if (index == 1) {\n+                return ISOChronology.getInstanceUTC().millisOfSecond();\n+            }\n+            return null;\n+        }\n+        public int size() {\n+            return 2;\n+        }\n+        \n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/field/TestFieldUtils.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.field;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * \n+ *\n+ * @author Brian S O'Neill\n+ */\n+public class TestFieldUtils extends TestCase {\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestFieldUtils.class);\n+    }\n+\n+    public TestFieldUtils(String name) {\n+        super(name);\n+    }\n+\n+    public void testSafeAddInt() {\n+        assertEquals(0, FieldUtils.safeAdd(0, 0));\n+\n+        assertEquals(5, FieldUtils.safeAdd(2, 3));\n+        assertEquals(-1, FieldUtils.safeAdd(2, -3));\n+        assertEquals(1, FieldUtils.safeAdd(-2, 3));\n+        assertEquals(-5, FieldUtils.safeAdd(-2, -3));\n+\n+        assertEquals(Integer.MAX_VALUE - 1, FieldUtils.safeAdd(Integer.MAX_VALUE, -1));\n+        assertEquals(Integer.MIN_VALUE + 1, FieldUtils.safeAdd(Integer.MIN_VALUE, 1));\n+\n+        assertEquals(-1, FieldUtils.safeAdd(Integer.MIN_VALUE, Integer.MAX_VALUE));\n+        assertEquals(-1, FieldUtils.safeAdd(Integer.MAX_VALUE, Integer.MIN_VALUE));\n+\n+        try {\n+            FieldUtils.safeAdd(Integer.MAX_VALUE, 1);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+\n+        try {\n+            FieldUtils.safeAdd(Integer.MAX_VALUE, 100);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+\n+        try {\n+            FieldUtils.safeAdd(Integer.MAX_VALUE, Integer.MAX_VALUE);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+\n+        try {\n+            FieldUtils.safeAdd(Integer.MIN_VALUE, -1);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+\n+        try {\n+            FieldUtils.safeAdd(Integer.MIN_VALUE, -100);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+\n+        try {\n+            FieldUtils.safeAdd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+    }\n+\n+    public void testSafeAddLong() {\n+        assertEquals(0L, FieldUtils.safeAdd(0L, 0L));\n+\n+        assertEquals(5L, FieldUtils.safeAdd(2L, 3L));\n+        assertEquals(-1L, FieldUtils.safeAdd(2L, -3L));\n+        assertEquals(1L, FieldUtils.safeAdd(-2L, 3L));\n+        assertEquals(-5L, FieldUtils.safeAdd(-2L, -3L));\n+\n+        assertEquals(Long.MAX_VALUE - 1, FieldUtils.safeAdd(Long.MAX_VALUE, -1L));\n+        assertEquals(Long.MIN_VALUE + 1, FieldUtils.safeAdd(Long.MIN_VALUE, 1L));\n+\n+        assertEquals(-1, FieldUtils.safeAdd(Long.MIN_VALUE, Long.MAX_VALUE));\n+        assertEquals(-1, FieldUtils.safeAdd(Long.MAX_VALUE, Long.MIN_VALUE));\n+\n+        try {\n+            FieldUtils.safeAdd(Long.MAX_VALUE, 1L);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+\n+        try {\n+            FieldUtils.safeAdd(Long.MAX_VALUE, 100L);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+\n+        try {\n+            FieldUtils.safeAdd(Long.MAX_VALUE, Long.MAX_VALUE);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+\n+        try {\n+            FieldUtils.safeAdd(Long.MIN_VALUE, -1L);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+\n+        try {\n+            FieldUtils.safeAdd(Long.MIN_VALUE, -100L);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+\n+        try {\n+            FieldUtils.safeAdd(Long.MIN_VALUE, Long.MIN_VALUE);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+    }\n+\n+    public void testSafeSubtractLong() {\n+        assertEquals(0L, FieldUtils.safeSubtract(0L, 0L));\n+\n+        assertEquals(-1L, FieldUtils.safeSubtract(2L, 3L));\n+        assertEquals(5L, FieldUtils.safeSubtract(2L, -3L));\n+        assertEquals(-5L, FieldUtils.safeSubtract(-2L, 3L));\n+        assertEquals(1L, FieldUtils.safeSubtract(-2L, -3L));\n+\n+        assertEquals(Long.MAX_VALUE - 1, FieldUtils.safeSubtract(Long.MAX_VALUE, 1L));\n+        assertEquals(Long.MIN_VALUE + 1, FieldUtils.safeSubtract(Long.MIN_VALUE, -1L));\n+\n+        assertEquals(0, FieldUtils.safeSubtract(Long.MIN_VALUE, Long.MIN_VALUE));\n+        assertEquals(0, FieldUtils.safeSubtract(Long.MAX_VALUE, Long.MAX_VALUE));\n+\n+        try {\n+            FieldUtils.safeSubtract(Long.MIN_VALUE, 1L);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+\n+        try {\n+            FieldUtils.safeSubtract(Long.MIN_VALUE, 100L);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+\n+        try {\n+            FieldUtils.safeSubtract(Long.MIN_VALUE, Long.MAX_VALUE);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+\n+        try {\n+            FieldUtils.safeSubtract(Long.MAX_VALUE, -1L);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+\n+        try {\n+            FieldUtils.safeSubtract(Long.MAX_VALUE, -100L);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+\n+        try {\n+            FieldUtils.safeSubtract(Long.MAX_VALUE, Long.MIN_VALUE);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/field/TestMillisDurationField.java\n+/*\n+ *  Copyright 2001-2009 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.field;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DurationField;\n+import org.joda.time.DurationFieldType;\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * This class is a Junit unit test for PeriodFormatterBuilder.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestMillisDurationField extends TestCase {\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestMillisDurationField.class);\n+    }\n+\n+    public TestMillisDurationField(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+    }\n+\n+    protected void tearDown() throws Exception {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getType() {\n+        assertEquals(DurationFieldType.millis(), MillisDurationField.INSTANCE.getType());\n+    }\n+\n+    public void test_getName() {\n+        assertEquals(\"millis\", MillisDurationField.INSTANCE.getName());\n+    }\n+    \n+    public void test_isSupported() {\n+        assertEquals(true, MillisDurationField.INSTANCE.isSupported());\n+    }\n+\n+    public void test_isPrecise() {\n+        assertEquals(true, MillisDurationField.INSTANCE.isPrecise());\n+    }\n+\n+    public void test_getUnitMillis() {\n+        assertEquals(1, MillisDurationField.INSTANCE.getUnitMillis());\n+    }\n+\n+    public void test_toString() {\n+        assertEquals(\"DurationField[millis]\", MillisDurationField.INSTANCE.toString());\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void test_getValue_long() {\n+        assertEquals(0, MillisDurationField.INSTANCE.getValue(0L));\n+        assertEquals(1234, MillisDurationField.INSTANCE.getValue(1234L));\n+        assertEquals(-1234, MillisDurationField.INSTANCE.getValue(-1234L));\n+        try {\n+            MillisDurationField.INSTANCE.getValue(((long) (Integer.MAX_VALUE)) + 1L);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void test_getValueAsLong_long() {\n+        assertEquals(0L, MillisDurationField.INSTANCE.getValueAsLong(0L));\n+        assertEquals(1234L, MillisDurationField.INSTANCE.getValueAsLong(1234L));\n+        assertEquals(-1234L, MillisDurationField.INSTANCE.getValueAsLong(-1234L));\n+        assertEquals(((long) (Integer.MAX_VALUE)) + 1L, MillisDurationField.INSTANCE.getValueAsLong(((long) (Integer.MAX_VALUE)) + 1L));\n+    }\n+\n+    public void test_getValue_long_long() {\n+        assertEquals(0, MillisDurationField.INSTANCE.getValue(0L, 567L));\n+        assertEquals(1234, MillisDurationField.INSTANCE.getValue(1234L, 567L));\n+        assertEquals(-1234, MillisDurationField.INSTANCE.getValue(-1234L, 567L));\n+        try {\n+            MillisDurationField.INSTANCE.getValue(((long) (Integer.MAX_VALUE)) + 1L, 567L);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void test_getValueAsLong_long_long() {\n+        assertEquals(0L, MillisDurationField.INSTANCE.getValueAsLong(0L, 567L));\n+        assertEquals(1234L, MillisDurationField.INSTANCE.getValueAsLong(1234L, 567L));\n+        assertEquals(-1234L, MillisDurationField.INSTANCE.getValueAsLong(-1234L, 567L));\n+        assertEquals(((long) (Integer.MAX_VALUE)) + 1L, MillisDurationField.INSTANCE.getValueAsLong(((long) (Integer.MAX_VALUE)) + 1L, 567L));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getMillis_int() {\n+        assertEquals(0, MillisDurationField.INSTANCE.getMillis(0));\n+        assertEquals(1234, MillisDurationField.INSTANCE.getMillis(1234));\n+        assertEquals(-1234, MillisDurationField.INSTANCE.getMillis(-1234));\n+    }\n+\n+    public void test_getMillis_long() {\n+        assertEquals(0L, MillisDurationField.INSTANCE.getMillis(0L));\n+        assertEquals(1234L, MillisDurationField.INSTANCE.getMillis(1234L));\n+        assertEquals(-1234L, MillisDurationField.INSTANCE.getMillis(-1234L));\n+    }\n+\n+    public void test_getMillis_int_long() {\n+        assertEquals(0, MillisDurationField.INSTANCE.getMillis(0, 567L));\n+        assertEquals(1234, MillisDurationField.INSTANCE.getMillis(1234, 567L));\n+        assertEquals(-1234, MillisDurationField.INSTANCE.getMillis(-1234, 567L));\n+    }\n+\n+    public void test_getMillis_long_long() {\n+        assertEquals(0L, MillisDurationField.INSTANCE.getMillis(0L, 567L));\n+        assertEquals(1234L, MillisDurationField.INSTANCE.getMillis(1234L, 567L));\n+        assertEquals(-1234L, MillisDurationField.INSTANCE.getMillis(-1234L, 567L));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_add_long_int() {\n+        assertEquals(567L, MillisDurationField.INSTANCE.add(567L, 0));\n+        assertEquals(567L + 1234L, MillisDurationField.INSTANCE.add(567L, 1234));\n+        assertEquals(567L - 1234L, MillisDurationField.INSTANCE.add(567L, -1234));\n+        try {\n+            MillisDurationField.INSTANCE.add(Long.MAX_VALUE, 1);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void test_add_long_long() {\n+        assertEquals(567L, MillisDurationField.INSTANCE.add(567L, 0L));\n+        assertEquals(567L + 1234L, MillisDurationField.INSTANCE.add(567L, 1234L));\n+        assertEquals(567L - 1234L, MillisDurationField.INSTANCE.add(567L, -1234L));\n+        try {\n+            MillisDurationField.INSTANCE.add(Long.MAX_VALUE, 1L);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getDifference_long_int() {\n+        assertEquals(567, MillisDurationField.INSTANCE.getDifference(567L, 0L));\n+        assertEquals(567 - 1234, MillisDurationField.INSTANCE.getDifference(567L, 1234L));\n+        assertEquals(567 + 1234, MillisDurationField.INSTANCE.getDifference(567L, -1234L));\n+        try {\n+            MillisDurationField.INSTANCE.getDifference(Long.MAX_VALUE, 1L);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void test_getDifferenceAsLong_long_long() {\n+        assertEquals(567L, MillisDurationField.INSTANCE.getDifferenceAsLong(567L, 0L));\n+        assertEquals(567L - 1234L, MillisDurationField.INSTANCE.getDifferenceAsLong(567L, 1234L));\n+        assertEquals(567L + 1234L, MillisDurationField.INSTANCE.getDifferenceAsLong(567L, -1234L));\n+        try {\n+            MillisDurationField.INSTANCE.getDifferenceAsLong(Long.MAX_VALUE, -1L);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_compareTo() {\n+        assertEquals(0, MillisDurationField.INSTANCE.compareTo(MillisDurationField.INSTANCE));\n+        assertEquals(-1, MillisDurationField.INSTANCE.compareTo(ISOChronology.getInstance().seconds()));\n+        DurationField dummy = new PreciseDurationField(DurationFieldType.seconds(), 0);\n+        assertEquals(1, MillisDurationField.INSTANCE.compareTo(dummy));\n+//        try {\n+//            MillisDurationField.INSTANCE.compareTo(\"\");\n+//            fail();\n+//        } catch (ClassCastException ex) {}\n+        try {\n+            MillisDurationField.INSTANCE.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        DurationField test = MillisDurationField.INSTANCE;\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        DurationField result = (DurationField) ois.readObject();\n+        ois.close();\n+        \n+        assertSame(test, result);\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/field/TestOffsetDateTimeField.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.field;\n+\n+import java.util.Arrays;\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTimeFieldType;\n+import org.joda.time.DurationField;\n+import org.joda.time.DurationFieldType;\n+import org.joda.time.TimeOfDay;\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * This class is a Junit unit test for PreciseDateTimeField.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestOffsetDateTimeField extends TestCase {\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestOffsetDateTimeField.class);\n+    }\n+\n+    public TestOffsetDateTimeField(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+    }\n+\n+    protected void tearDown() throws Exception {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_constructor1() {\n+        OffsetDateTimeField field = new OffsetDateTimeField(\n+            ISOChronology.getInstance().secondOfMinute(), 3\n+        );\n+        assertEquals(DateTimeFieldType.secondOfMinute(), field.getType());\n+        assertEquals(3, field.getOffset());\n+        \n+        try {\n+            field = new OffsetDateTimeField(null, 3);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        try {\n+            field = new OffsetDateTimeField(ISOChronology.getInstance().secondOfMinute(), 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        try {\n+            field = new OffsetDateTimeField(UnsupportedDateTimeField.getInstance(\n+                DateTimeFieldType.secondOfMinute(), UnsupportedDurationField.getInstance(DurationFieldType.seconds())), 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void test_constructor2() {\n+        OffsetDateTimeField field = new OffsetDateTimeField(\n+            ISOChronology.getInstance().secondOfMinute(), DateTimeFieldType.secondOfDay(), 3\n+        );\n+        assertEquals(DateTimeFieldType.secondOfDay(), field.getType());\n+        assertEquals(3, field.getOffset());\n+        \n+        try {\n+            field = new OffsetDateTimeField(null, DateTimeFieldType.secondOfDay(), 3);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        try {\n+            field = new OffsetDateTimeField(ISOChronology.getInstance().secondOfMinute(), null, 3);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        try {\n+            field = new OffsetDateTimeField(ISOChronology.getInstance().secondOfMinute(), DateTimeFieldType.secondOfDay(), 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void test_getType() {\n+        OffsetDateTimeField field = new OffsetDateTimeField(\n+            ISOChronology.getInstance().secondOfMinute(), 3\n+        );\n+        assertEquals(DateTimeFieldType.secondOfMinute(), field.getType());\n+    }\n+\n+    public void test_getName() {\n+        OffsetDateTimeField field = new OffsetDateTimeField(\n+            ISOChronology.getInstance().secondOfMinute(), 3\n+        );\n+        assertEquals(\"secondOfMinute\", field.getName());\n+    }\n+\n+    public void test_toString() {\n+        OffsetDateTimeField field = new OffsetDateTimeField(\n+            ISOChronology.getInstance().secondOfMinute(), 3\n+        );\n+        assertEquals(\"DateTimeField[secondOfMinute]\", field.toString());\n+    }\n+\n+    public void test_isSupported() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(true, field.isSupported());\n+    }\n+\n+    public void test_isLenient() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(false, field.isLenient());\n+    }\n+\n+    public void test_getOffset() {\n+        OffsetDateTimeField field = new OffsetDateTimeField(\n+            ISOChronology.getInstance().secondOfMinute(), 5\n+        );\n+        assertEquals(5, field.getOffset());\n+    }\n+\n+    public void test_get() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(0 + 3, field.get(0));\n+        assertEquals(6 + 3, field.get(6000));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getAsText_long_Locale() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(\"32\", field.getAsText(1000L * 29, Locale.ENGLISH));\n+        assertEquals(\"32\", field.getAsText(1000L * 29, null));\n+    }\n+\n+    public void test_getAsText_long() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(\"32\", field.getAsText(1000L * 29));\n+    }\n+\n+    public void test_getAsText_RP_int_Locale() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(\"20\", field.getAsText(new TimeOfDay(12, 30, 40, 50), 20, Locale.ENGLISH));\n+        assertEquals(\"20\", field.getAsText(new TimeOfDay(12, 30, 40, 50), 20, null));\n+    }\n+\n+    public void test_getAsText_RP_Locale() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(\"40\", field.getAsText(new TimeOfDay(12, 30, 40, 50), Locale.ENGLISH));\n+        assertEquals(\"40\", field.getAsText(new TimeOfDay(12, 30, 40, 50), null));\n+    }\n+\n+    public void test_getAsText_int_Locale() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(\"80\", field.getAsText(80, Locale.ENGLISH));\n+        assertEquals(\"80\", field.getAsText(80, null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getAsShortText_long_Locale() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(\"32\", field.getAsShortText(1000L * 29, Locale.ENGLISH));\n+        assertEquals(\"32\", field.getAsShortText(1000L * 29, null));\n+    }\n+\n+    public void test_getAsShortText_long() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(\"32\", field.getAsShortText(1000L * 29));\n+    }\n+\n+    public void test_getAsShortText_RP_int_Locale() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(\"20\", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), 20, Locale.ENGLISH));\n+        assertEquals(\"20\", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), 20, null));\n+    }\n+\n+    public void test_getAsShortText_RP_Locale() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(\"40\", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), Locale.ENGLISH));\n+        assertEquals(\"40\", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), null));\n+    }\n+\n+    public void test_getAsShortText_int_Locale() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(\"80\", field.getAsShortText(80, Locale.ENGLISH));\n+        assertEquals(\"80\", field.getAsShortText(80, null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_add_long_int() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(1001, field.add(1L, 1));\n+    }\n+\n+    public void test_add_long_long() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(1001, field.add(1L, 1L));\n+    }\n+\n+    public void test_add_RP_int_intarray_int() {\n+        int[] values = new int[] {10, 20, 30, 40};\n+        int[] expected = new int[] {10, 20, 30, 40};\n+        OffsetDateTimeField field = new MockStandardDateTimeField();\n+        int[] result = field.add(new TimeOfDay(), 2, values, 0);\n+        assertEquals(true, Arrays.equals(expected, result));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 31, 40};\n+        result = field.add(new TimeOfDay(), 2, values, 1);\n+        assertEquals(true, Arrays.equals(expected, result));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 62, 40};\n+        result = field.add(new TimeOfDay(), 2, values, 32);\n+        assertEquals(true, Arrays.equals(expected, result));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 21, 3, 40};\n+        result = field.add(new TimeOfDay(), 2, values, 33);\n+        assertEquals(true, Arrays.equals(expected, result));\n+        \n+        values = new int[] {23, 59, 30, 40};\n+        try {\n+            field.add(new TimeOfDay(), 2, values, 33);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 29, 40};\n+        result = field.add(new TimeOfDay(), 2, values, -1);\n+        assertEquals(true, Arrays.equals(expected, result));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 19, 59, 40};\n+        result = field.add(new TimeOfDay(), 2, values, -31);\n+        assertEquals(true, Arrays.equals(expected, result));\n+        \n+        values = new int[] {0, 0, 30, 40};\n+        try {\n+            field.add(new TimeOfDay(), 2, values, -31);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_addWrapField_long_int() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(29 * 1000L, field.addWrapField(1000L * 29, 0));\n+        assertEquals(59 * 1000L, field.addWrapField(1000L * 29, 30));\n+        assertEquals(0L, field.addWrapField(1000L * 29, 31));\n+    }\n+\n+    public void test_addWrapField_RP_int_intarray_int() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        int[] values = new int[] {10, 20, 30, 40};\n+        int[] expected = new int[] {10, 20, 30, 40};\n+        int[] result = field.addWrapField(new TimeOfDay(), 2, values, 0);\n+        assertEquals(true, Arrays.equals(result, expected));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 59, 40};\n+        result = field.addWrapField(new TimeOfDay(), 2, values, 29);\n+        assertEquals(true, Arrays.equals(result, expected));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 3, 40};\n+        result = field.addWrapField(new TimeOfDay(), 2, values, 33);\n+        assertEquals(true, Arrays.equals(result, expected));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getDifference_long_long() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(-21, field.getDifference(20000L, 41000L));\n+    }\n+\n+    public void test_getDifferenceAsLong_long_long() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(-21L, field.getDifferenceAsLong(20000L, 41000L));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_set_long_int() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(3120L, field.set(2120L, 6));\n+        assertEquals(26120L, field.set(120L, 29));\n+        assertEquals(57120L, field.set(2120L, 60));\n+    }\n+\n+    public void test_set_RP_int_intarray_int() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        int[] values = new int[] {10, 20, 30, 40};\n+        int[] expected = new int[] {10, 20, 30, 40};\n+        int[] result = field.set(new TimeOfDay(), 2, values, 30);\n+        assertEquals(true, Arrays.equals(result, expected));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 29, 40};\n+        result = field.set(new TimeOfDay(), 2, values, 29);\n+        assertEquals(true, Arrays.equals(result, expected));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 30, 40};\n+        try {\n+            field.set(new TimeOfDay(), 2, values, 63);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(true, Arrays.equals(values, expected));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 30, 40};\n+        try {\n+            field.set(new TimeOfDay(), 2, values, 2);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(true, Arrays.equals(values, expected));\n+    }\n+\n+    public void test_set_long_String_Locale() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(3050L, field.set(50L, \"6\", null));\n+        assertEquals(26050L, field.set(50L, \"29\", Locale.ENGLISH));\n+    }\n+\n+    public void test_set_long_String() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(3050L, field.set(50L, \"6\"));\n+        assertEquals(26050L, field.set(50L, \"29\"));\n+    }\n+\n+    public void test_set_RP_int_intarray_String_Locale() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        int[] values = new int[] {10, 20, 30, 40};\n+        int[] expected = new int[] {10, 20, 30, 40};\n+        int[] result = field.set(new TimeOfDay(), 2, values, \"30\", null);\n+        assertEquals(true, Arrays.equals(result, expected));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 29, 40};\n+        result = field.set(new TimeOfDay(), 2, values, \"29\", Locale.ENGLISH);\n+        assertEquals(true, Arrays.equals(result, expected));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 30, 40};\n+        try {\n+            field.set(new TimeOfDay(), 2, values, \"63\", null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(true, Arrays.equals(values, expected));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 30, 40};\n+        try {\n+            field.set(new TimeOfDay(), 2, values, \"2\", null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(true, Arrays.equals(values, expected));\n+    }\n+\n+    public void test_convertText() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(0, field.convertText(\"0\", null));\n+        assertEquals(29, field.convertText(\"29\", null));\n+        try {\n+            field.convertText(\"2A\", null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            field.convertText(null, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //------------------------------------------------------------------------\n+//    public abstract DurationField getDurationField();\n+//\n+//    public abstract DurationField getRangeDurationField();\n+\n+    public void test_isLeap_long() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(false, field.isLeap(0L));\n+    }\n+\n+    public void test_getLeapAmount_long() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(0, field.getLeapAmount(0L));\n+    }\n+\n+    public void test_getLeapDurationField() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(null, field.getLeapDurationField());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getMinimumValue() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(3, field.getMinimumValue());\n+    }\n+\n+    public void test_getMinimumValue_long() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(3, field.getMinimumValue(0L));\n+    }\n+\n+    public void test_getMinimumValue_RP() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(3, field.getMinimumValue(new TimeOfDay()));\n+    }\n+\n+    public void test_getMinimumValue_RP_intarray() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(3, field.getMinimumValue(new TimeOfDay(), new int[4]));\n+    }\n+\n+    public void test_getMaximumValue() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(62, field.getMaximumValue());\n+    }\n+\n+    public void test_getMaximumValue_long() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(62, field.getMaximumValue(0L));\n+    }\n+\n+    public void test_getMaximumValue_RP() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(62, field.getMaximumValue(new TimeOfDay()));\n+    }\n+\n+    public void test_getMaximumValue_RP_intarray() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(62, field.getMaximumValue(new TimeOfDay(), new int[4]));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getMaximumTextLength_Locale() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(2, field.getMaximumTextLength(Locale.ENGLISH));\n+    }\n+\n+    public void test_getMaximumShortTextLength_Locale() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(2, field.getMaximumShortTextLength(Locale.ENGLISH));\n+    }\n+\n+    //------------------------------------------------------------------------\n+    public void test_roundFloor_long() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(-2000L, field.roundFloor(-1001L));\n+        assertEquals(-1000L, field.roundFloor(-1000L));\n+        assertEquals(-1000L, field.roundFloor(-999L));\n+        assertEquals(-1000L, field.roundFloor(-1L));\n+        assertEquals(0L, field.roundFloor(0L));\n+        assertEquals(0L, field.roundFloor(1L));\n+        assertEquals(0L, field.roundFloor(499L));\n+        assertEquals(0L, field.roundFloor(500L));\n+        assertEquals(0L, field.roundFloor(501L));\n+        assertEquals(1000L, field.roundFloor(1000L));\n+    }\n+\n+    public void test_roundCeiling_long() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(-1000L, field.roundCeiling(-1001L));\n+        assertEquals(-1000L, field.roundCeiling(-1000L));\n+        assertEquals(0L, field.roundCeiling(-999L));\n+        assertEquals(0L, field.roundCeiling(-1L));\n+        assertEquals(0L, field.roundCeiling(0L));\n+        assertEquals(1000L, field.roundCeiling(1L));\n+        assertEquals(1000L, field.roundCeiling(499L));\n+        assertEquals(1000L, field.roundCeiling(500L));\n+        assertEquals(1000L, field.roundCeiling(501L));\n+        assertEquals(1000L, field.roundCeiling(1000L));\n+    }\n+\n+    public void test_roundHalfFloor_long() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(0L, field.roundHalfFloor(0L));\n+        assertEquals(0L, field.roundHalfFloor(499L));\n+        assertEquals(0L, field.roundHalfFloor(500L));\n+        assertEquals(1000L, field.roundHalfFloor(501L));\n+        assertEquals(1000L, field.roundHalfFloor(1000L));\n+    }\n+\n+    public void test_roundHalfCeiling_long() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(0L, field.roundHalfCeiling(0L));\n+        assertEquals(0L, field.roundHalfCeiling(499L));\n+        assertEquals(1000L, field.roundHalfCeiling(500L));\n+        assertEquals(1000L, field.roundHalfCeiling(501L));\n+        assertEquals(1000L, field.roundHalfCeiling(1000L));\n+    }\n+\n+    public void test_roundHalfEven_long() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(0L, field.roundHalfEven(0L));\n+        assertEquals(0L, field.roundHalfEven(499L));\n+        assertEquals(0L, field.roundHalfEven(500L));\n+        assertEquals(1000L, field.roundHalfEven(501L));\n+        assertEquals(1000L, field.roundHalfEven(1000L));\n+        assertEquals(1000L, field.roundHalfEven(1499L));\n+        assertEquals(2000L, field.roundHalfEven(1500L));\n+        assertEquals(2000L, field.roundHalfEven(1501L));\n+    }\n+\n+    public void test_remainder_long() {\n+        OffsetDateTimeField field = new MockOffsetDateTimeField();\n+        assertEquals(0L, field.remainder(0L));\n+        assertEquals(499L, field.remainder(499L));\n+        assertEquals(500L, field.remainder(500L));\n+        assertEquals(501L, field.remainder(501L));\n+        assertEquals(0L, field.remainder(1000L));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    static class MockOffsetDateTimeField extends OffsetDateTimeField {\n+        protected MockOffsetDateTimeField() {\n+            super(ISOChronology.getInstance().secondOfMinute(), 3);\n+        }\n+    }\n+\n+    static class MockStandardDateTimeField extends MockOffsetDateTimeField {\n+        protected MockStandardDateTimeField() {\n+            super();\n+        }\n+        public DurationField getDurationField() {\n+            return ISOChronology.getInstanceUTC().seconds();\n+        }\n+        public DurationField getRangeDurationField() {\n+            return ISOChronology.getInstanceUTC().minutes();\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/field/TestPreciseDateTimeField.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.field;\n+\n+import java.util.Arrays;\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTimeFieldType;\n+import org.joda.time.DurationField;\n+import org.joda.time.DurationFieldType;\n+import org.joda.time.TimeOfDay;\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * This class is a Junit unit test for PreciseDateTimeField.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestPreciseDateTimeField extends TestCase {\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestPreciseDateTimeField.class);\n+    }\n+\n+    public TestPreciseDateTimeField(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+    }\n+\n+    protected void tearDown() throws Exception {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_constructor() {\n+        BaseDateTimeField field = new PreciseDateTimeField(\n+            DateTimeFieldType.secondOfMinute(),\n+            ISOChronology.getInstanceUTC().millis(),\n+            ISOChronology.getInstanceUTC().hours()\n+        );\n+        assertEquals(DateTimeFieldType.secondOfMinute(), field.getType());\n+        try {\n+            field = new PreciseDateTimeField(null, null, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            field = new PreciseDateTimeField(\n+                DateTimeFieldType.minuteOfHour(),\n+                new MockImpreciseDurationField(DurationFieldType.minutes()),\n+                ISOChronology.getInstanceUTC().hours());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            field = new PreciseDateTimeField(\n+                DateTimeFieldType.minuteOfHour(),\n+                ISOChronology.getInstanceUTC().hours(),\n+                new MockImpreciseDurationField(DurationFieldType.minutes()));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            field = new PreciseDateTimeField(\n+                DateTimeFieldType.minuteOfHour(),\n+                ISOChronology.getInstanceUTC().hours(),\n+                ISOChronology.getInstanceUTC().hours());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            field = new PreciseDateTimeField(\n+                DateTimeFieldType.minuteOfHour(),\n+                new MockZeroDurationField(DurationFieldType.minutes()),\n+                ISOChronology.getInstanceUTC().hours());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void test_getType() {\n+        BaseDateTimeField field = new PreciseDateTimeField(\n+            DateTimeFieldType.secondOfDay(),\n+            ISOChronology.getInstanceUTC().millis(),\n+            ISOChronology.getInstanceUTC().hours()\n+        );\n+        assertEquals(DateTimeFieldType.secondOfDay(), field.getType());\n+    }\n+\n+    public void test_getName() {\n+        BaseDateTimeField field = new PreciseDateTimeField(\n+            DateTimeFieldType.secondOfDay(),\n+            ISOChronology.getInstanceUTC().millis(),\n+            ISOChronology.getInstanceUTC().hours()\n+        );\n+        assertEquals(\"secondOfDay\", field.getName());\n+    }\n+\n+    public void test_toString() {\n+        BaseDateTimeField field = new PreciseDateTimeField(\n+            DateTimeFieldType.secondOfDay(),\n+            ISOChronology.getInstanceUTC().millis(),\n+            ISOChronology.getInstanceUTC().hours()\n+        );\n+        assertEquals(\"DateTimeField[secondOfDay]\", field.toString());\n+    }\n+\n+    public void test_isSupported() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(true, field.isSupported());\n+    }\n+\n+    public void test_getRange() {\n+        PreciseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(60, field.getRange());\n+    }\n+\n+    public void test_get() {\n+        PreciseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(0, field.get(0));\n+        assertEquals(1, field.get(60));\n+        assertEquals(2, field.get(123));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getAsText_long_Locale() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(\"29\", field.getAsText(60L * 29, Locale.ENGLISH));\n+        assertEquals(\"29\", field.getAsText(60L * 29, null));\n+    }\n+\n+    public void test_getAsText_long() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(\"29\", field.getAsText(60L * 29));\n+    }\n+\n+    public void test_getAsText_RP_int_Locale() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(\"20\", field.getAsText(new TimeOfDay(12, 30, 40, 50), 20, Locale.ENGLISH));\n+        assertEquals(\"20\", field.getAsText(new TimeOfDay(12, 30, 40, 50), 20, null));\n+    }\n+\n+    public void test_getAsText_RP_Locale() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(\"40\", field.getAsText(new TimeOfDay(12, 30, 40, 50), Locale.ENGLISH));\n+        assertEquals(\"40\", field.getAsText(new TimeOfDay(12, 30, 40, 50), null));\n+    }\n+\n+    public void test_getAsText_int_Locale() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(\"80\", field.getAsText(80, Locale.ENGLISH));\n+        assertEquals(\"80\", field.getAsText(80, null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getAsShortText_long_Locale() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(\"29\", field.getAsShortText(60L * 29, Locale.ENGLISH));\n+        assertEquals(\"29\", field.getAsShortText(60L * 29, null));\n+    }\n+\n+    public void test_getAsShortText_long() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(\"29\", field.getAsShortText(60L * 29));\n+    }\n+\n+    public void test_getAsShortText_RP_int_Locale() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(\"20\", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), 20, Locale.ENGLISH));\n+        assertEquals(\"20\", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), 20, null));\n+    }\n+\n+    public void test_getAsShortText_RP_Locale() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(\"40\", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), Locale.ENGLISH));\n+        assertEquals(\"40\", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), null));\n+    }\n+\n+    public void test_getAsShortText_int_Locale() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(\"80\", field.getAsShortText(80, Locale.ENGLISH));\n+        assertEquals(\"80\", field.getAsShortText(80, null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_add_long_int() {\n+        MockCountingDurationField.add_int = 0;\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(61, field.add(1L, 1));\n+        assertEquals(1, MockCountingDurationField.add_int);\n+    }\n+\n+    public void test_add_long_long() {\n+        MockCountingDurationField.add_long = 0;\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(61, field.add(1L, 1L));\n+        assertEquals(1, MockCountingDurationField.add_long);\n+    }\n+\n+    public void test_add_RP_int_intarray_int() {\n+        int[] values = new int[] {10, 20, 30, 40};\n+        int[] expected = new int[] {10, 20, 30, 40};\n+        BaseDateTimeField field = new MockStandardDateTimeField();\n+        int[] result = field.add(new TimeOfDay(), 2, values, 0);\n+        assertEquals(true, Arrays.equals(expected, result));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 31, 40};\n+        result = field.add(new TimeOfDay(), 2, values, 1);\n+        assertEquals(true, Arrays.equals(expected, result));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 21, 0, 40};\n+        result = field.add(new TimeOfDay(), 2, values, 30);\n+        assertEquals(true, Arrays.equals(expected, result));\n+        \n+        values = new int[] {23, 59, 30, 40};\n+        try {\n+            field.add(new TimeOfDay(), 2, values, 30);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 29, 40};\n+        result = field.add(new TimeOfDay(), 2, values, -1);\n+        assertEquals(true, Arrays.equals(expected, result));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 19, 59, 40};\n+        result = field.add(new TimeOfDay(), 2, values, -31);\n+        assertEquals(true, Arrays.equals(expected, result));\n+        \n+        values = new int[] {0, 0, 30, 40};\n+        try {\n+            field.add(new TimeOfDay(), 2, values, -31);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_addWrapField_long_int() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(29 * 60L, field.addWrapField(60L * 29, 0));\n+        assertEquals(59 * 60L, field.addWrapField(60L * 29, 30));\n+        assertEquals(0 * 60L, field.addWrapField(60L * 29, 31));\n+    }\n+\n+    public void test_addWrapField_RP_int_intarray_int() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        int[] values = new int[] {10, 20, 30, 40};\n+        int[] expected = new int[] {10, 20, 30, 40};\n+        int[] result = field.addWrapField(new TimeOfDay(), 2, values, 0);\n+        assertEquals(true, Arrays.equals(result, expected));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 59, 40};\n+        result = field.addWrapField(new TimeOfDay(), 2, values, 29);\n+        assertEquals(true, Arrays.equals(result, expected));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 0, 40};\n+        result = field.addWrapField(new TimeOfDay(), 2, values, 30);\n+        assertEquals(true, Arrays.equals(result, expected));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 1, 40};\n+        result = field.addWrapField(new TimeOfDay(), 2, values, 31);\n+        assertEquals(true, Arrays.equals(result, expected));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getDifference_long_long() {\n+        MockCountingDurationField.difference_long = 0;\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(30, field.getDifference(0L, 0L));\n+        assertEquals(1, MockCountingDurationField.difference_long);\n+    }\n+\n+    public void test_getDifferenceAsLong_long_long() {\n+        MockCountingDurationField.difference_long = 0;\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(30, field.getDifferenceAsLong(0L, 0L));\n+        assertEquals(1, MockCountingDurationField.difference_long);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_set_long_int() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(0, field.set(120L, 0));\n+        assertEquals(29 * 60, field.set(120L, 29));\n+    }\n+\n+    public void test_set_RP_int_intarray_int() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        int[] values = new int[] {10, 20, 30, 40};\n+        int[] expected = new int[] {10, 20, 30, 40};\n+        int[] result = field.set(new TimeOfDay(), 2, values, 30);\n+        assertEquals(true, Arrays.equals(result, expected));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 29, 40};\n+        result = field.set(new TimeOfDay(), 2, values, 29);\n+        assertEquals(true, Arrays.equals(result, expected));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 30, 40};\n+        try {\n+            field.set(new TimeOfDay(), 2, values, 60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(true, Arrays.equals(values, expected));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 30, 40};\n+        try {\n+            field.set(new TimeOfDay(), 2, values, -1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(true, Arrays.equals(values, expected));\n+    }\n+\n+    public void test_set_long_String_Locale() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(0, field.set(0L, \"0\", null));\n+        assertEquals(29 * 60, field.set(0L, \"29\", Locale.ENGLISH));\n+    }\n+\n+    public void test_set_long_String() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(0, field.set(0L, \"0\"));\n+        assertEquals(29 * 60, field.set(0L, \"29\"));\n+    }\n+\n+    public void test_set_RP_int_intarray_String_Locale() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        int[] values = new int[] {10, 20, 30, 40};\n+        int[] expected = new int[] {10, 20, 30, 40};\n+        int[] result = field.set(new TimeOfDay(), 2, values, \"30\", null);\n+        assertEquals(true, Arrays.equals(result, expected));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 29, 40};\n+        result = field.set(new TimeOfDay(), 2, values, \"29\", Locale.ENGLISH);\n+        assertEquals(true, Arrays.equals(result, expected));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 30, 40};\n+        try {\n+            field.set(new TimeOfDay(), 2, values, \"60\", null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(true, Arrays.equals(values, expected));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 30, 40};\n+        try {\n+            field.set(new TimeOfDay(), 2, values, \"-1\", null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(true, Arrays.equals(values, expected));\n+    }\n+\n+    public void test_convertText() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(0, field.convertText(\"0\", null));\n+        assertEquals(29, field.convertText(\"29\", null));\n+        try {\n+            field.convertText(\"2A\", null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            field.convertText(null, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //------------------------------------------------------------------------\n+//    public abstract DurationField getDurationField();\n+//\n+//    public abstract DurationField getRangeDurationField();\n+\n+    public void test_isLeap_long() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(false, field.isLeap(0L));\n+    }\n+\n+    public void test_getLeapAmount_long() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(0, field.getLeapAmount(0L));\n+    }\n+\n+    public void test_getLeapDurationField() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(null, field.getLeapDurationField());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getMinimumValue() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(0, field.getMinimumValue());\n+    }\n+\n+    public void test_getMinimumValue_long() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(0, field.getMinimumValue(0L));\n+    }\n+\n+    public void test_getMinimumValue_RP() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(0, field.getMinimumValue(new TimeOfDay()));\n+    }\n+\n+    public void test_getMinimumValue_RP_intarray() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(0, field.getMinimumValue(new TimeOfDay(), new int[4]));\n+    }\n+\n+    public void test_getMaximumValue() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(59, field.getMaximumValue());\n+    }\n+\n+    public void test_getMaximumValue_long() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(59, field.getMaximumValue(0L));\n+    }\n+\n+    public void test_getMaximumValue_RP() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(59, field.getMaximumValue(new TimeOfDay()));\n+    }\n+\n+    public void test_getMaximumValue_RP_intarray() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(59, field.getMaximumValue(new TimeOfDay(), new int[4]));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getMaximumTextLength_Locale() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(2, field.getMaximumTextLength(Locale.ENGLISH));\n+    }\n+\n+    public void test_getMaximumShortTextLength_Locale() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(2, field.getMaximumShortTextLength(Locale.ENGLISH));\n+    }\n+\n+    //------------------------------------------------------------------------\n+    public void test_roundFloor_long() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(-120L, field.roundFloor(-61L));\n+        assertEquals(-60L, field.roundFloor(-60L));\n+        assertEquals(-60L, field.roundFloor(-59L));\n+        assertEquals(-60L, field.roundFloor(-1L));\n+        assertEquals(0L, field.roundFloor(0L));\n+        assertEquals(0L, field.roundFloor(1L));\n+        assertEquals(0L, field.roundFloor(29L));\n+        assertEquals(0L, field.roundFloor(30L));\n+        assertEquals(0L, field.roundFloor(31L));\n+        assertEquals(60L, field.roundFloor(60L));\n+    }\n+\n+    public void test_roundCeiling_long() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(-60L, field.roundCeiling(-61L));\n+        assertEquals(-60L, field.roundCeiling(-60L));\n+        assertEquals(0L, field.roundCeiling(-59L));\n+        assertEquals(0L, field.roundCeiling(-1L));\n+        assertEquals(0L, field.roundCeiling(0L));\n+        assertEquals(60L, field.roundCeiling(1L));\n+        assertEquals(60L, field.roundCeiling(29L));\n+        assertEquals(60L, field.roundCeiling(30L));\n+        assertEquals(60L, field.roundCeiling(31L));\n+        assertEquals(60L, field.roundCeiling(60L));\n+    }\n+\n+    public void test_roundHalfFloor_long() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(0L, field.roundHalfFloor(0L));\n+        assertEquals(0L, field.roundHalfFloor(29L));\n+        assertEquals(0L, field.roundHalfFloor(30L));\n+        assertEquals(60L, field.roundHalfFloor(31L));\n+        assertEquals(60L, field.roundHalfFloor(60L));\n+    }\n+\n+    public void test_roundHalfCeiling_long() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(0L, field.roundHalfCeiling(0L));\n+        assertEquals(0L, field.roundHalfCeiling(29L));\n+        assertEquals(60L, field.roundHalfCeiling(30L));\n+        assertEquals(60L, field.roundHalfCeiling(31L));\n+        assertEquals(60L, field.roundHalfCeiling(60L));\n+    }\n+\n+    public void test_roundHalfEven_long() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(0L, field.roundHalfEven(0L));\n+        assertEquals(0L, field.roundHalfEven(29L));\n+        assertEquals(0L, field.roundHalfEven(30L));\n+        assertEquals(60L, field.roundHalfEven(31L));\n+        assertEquals(60L, field.roundHalfEven(60L));\n+        assertEquals(60L, field.roundHalfEven(89L));\n+        assertEquals(120L, field.roundHalfEven(90L));\n+        assertEquals(120L, field.roundHalfEven(91L));\n+    }\n+\n+    public void test_remainder_long() {\n+        BaseDateTimeField field = new MockPreciseDateTimeField();\n+        assertEquals(0L, field.remainder(0L));\n+        assertEquals(29L, field.remainder(29L));\n+        assertEquals(30L, field.remainder(30L));\n+        assertEquals(31L, field.remainder(31L));\n+        assertEquals(0L, field.remainder(60L));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    static class MockPreciseDateTimeField extends PreciseDateTimeField {\n+        protected MockPreciseDateTimeField() {\n+            super(DateTimeFieldType.secondOfMinute(),\n+                new MockCountingDurationField(DurationFieldType.seconds(), 60),\n+                new MockCountingDurationField(DurationFieldType.minutes(), 60 * 60));\n+        }\n+        protected MockPreciseDateTimeField(\n+                DateTimeFieldType type, DurationField dur, DurationField range) {\n+            super(type, dur, range);\n+        }\n+    }\n+\n+    static class MockStandardDateTimeField extends MockPreciseDateTimeField {\n+        protected MockStandardDateTimeField() {\n+            super();\n+        }\n+        public DurationField getDurationField() {\n+            return ISOChronology.getInstanceUTC().seconds();\n+        }\n+        public DurationField getRangeDurationField() {\n+            return ISOChronology.getInstanceUTC().minutes();\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    static class MockCountingDurationField extends BaseDurationField {\n+        static int add_int = 0;\n+        static int add_long = 0;\n+        static int difference_long = 0;\n+        int unit;\n+        \n+        protected MockCountingDurationField(DurationFieldType type, int unit) {\n+            super(type);\n+            this.unit = unit;\n+        }\n+        public boolean isPrecise() {\n+            return true;\n+        }\n+        public long getUnitMillis() {\n+            return unit;\n+        }\n+        public long getValueAsLong(long duration, long instant) {\n+            return 0;\n+        }\n+        public long getMillis(int value, long instant) {\n+            return 0;\n+        }\n+        public long getMillis(long value, long instant) {\n+            return 0;\n+        }\n+        public long add(long instant, int value) {\n+            add_int++;\n+            return instant + (value * 60L);\n+        }\n+        public long add(long instant, long value) {\n+            add_long++;\n+            return instant + (value * 60L);\n+        }\n+        public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {\n+            difference_long++;\n+            return 30;\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    static class MockZeroDurationField extends BaseDurationField {\n+        protected MockZeroDurationField(DurationFieldType type) {\n+            super(type);\n+        }\n+        public boolean isPrecise() {\n+            return true;\n+        }\n+        public long getUnitMillis() {\n+            return 0;  // this is zero\n+        }\n+        public long getValueAsLong(long duration, long instant) {\n+            return 0;\n+        }\n+        public long getMillis(int value, long instant) {\n+            return 0;\n+        }\n+        public long getMillis(long value, long instant) {\n+            return 0;\n+        }\n+        public long add(long instant, int value) {\n+            return 0;\n+        }\n+        public long add(long instant, long value) {\n+            return 0;\n+        }\n+        public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {\n+            return 0;\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    static class MockImpreciseDurationField extends BaseDurationField {\n+        protected MockImpreciseDurationField(DurationFieldType type) {\n+            super(type);\n+        }\n+        public boolean isPrecise() {\n+            return false;  // this is false\n+        }\n+        public long getUnitMillis() {\n+            return 0;\n+        }\n+        public long getValueAsLong(long duration, long instant) {\n+            return 0;\n+        }\n+        public long getMillis(int value, long instant) {\n+            return 0;\n+        }\n+        public long getMillis(long value, long instant) {\n+            return 0;\n+        }\n+        public long add(long instant, int value) {\n+            return 0;\n+        }\n+        public long add(long instant, long value) {\n+            return 0;\n+        }\n+        public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {\n+            return 0;\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/field/TestPreciseDurationDateTimeField.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.field;\n+\n+import java.util.Arrays;\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTimeFieldType;\n+import org.joda.time.DurationField;\n+import org.joda.time.DurationFieldType;\n+import org.joda.time.TimeOfDay;\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * This class is a Junit unit test for PreciseDurationDateTimeField.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestPreciseDurationDateTimeField extends TestCase {\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestPreciseDurationDateTimeField.class);\n+    }\n+\n+    public TestPreciseDurationDateTimeField(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+    }\n+\n+    protected void tearDown() throws Exception {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_constructor() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(DateTimeFieldType.secondOfMinute(), field.getType());\n+        try {\n+            field = new MockPreciseDurationDateTimeField(null, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            field = new MockPreciseDurationDateTimeField(\n+                DateTimeFieldType.minuteOfHour(),\n+                new MockImpreciseDurationField(DurationFieldType.minutes()));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            field = new MockPreciseDurationDateTimeField(\n+                DateTimeFieldType.minuteOfHour(),\n+                new MockZeroDurationField(DurationFieldType.minutes()));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void test_getType() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField(\n+            DateTimeFieldType.secondOfDay(), new MockCountingDurationField(DurationFieldType.minutes()));\n+        assertEquals(DateTimeFieldType.secondOfDay(), field.getType());\n+    }\n+\n+    public void test_getName() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField(\n+            DateTimeFieldType.secondOfDay(), new MockCountingDurationField(DurationFieldType.minutes()));\n+        assertEquals(\"secondOfDay\", field.getName());\n+    }\n+\n+    public void test_toString() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField(\n+            DateTimeFieldType.secondOfDay(), new MockCountingDurationField(DurationFieldType.minutes()));\n+        assertEquals(\"DateTimeField[secondOfDay]\", field.toString());\n+    }\n+\n+    public void test_isSupported() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(true, field.isSupported());\n+    }\n+\n+    public void test_isLenient() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(false, field.isLenient());\n+    }\n+\n+    public void test_get() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(0, field.get(0));\n+        assertEquals(1, field.get(60));\n+        assertEquals(2, field.get(123));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getAsText_long_Locale() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(\"29\", field.getAsText(60L * 29, Locale.ENGLISH));\n+        assertEquals(\"29\", field.getAsText(60L * 29, null));\n+    }\n+\n+    public void test_getAsText_long() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(\"29\", field.getAsText(60L * 29));\n+    }\n+\n+    public void test_getAsText_RP_int_Locale() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(\"20\", field.getAsText(new TimeOfDay(12, 30, 40, 50), 20, Locale.ENGLISH));\n+        assertEquals(\"20\", field.getAsText(new TimeOfDay(12, 30, 40, 50), 20, null));\n+    }\n+\n+    public void test_getAsText_RP_Locale() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(\"40\", field.getAsText(new TimeOfDay(12, 30, 40, 50), Locale.ENGLISH));\n+        assertEquals(\"40\", field.getAsText(new TimeOfDay(12, 30, 40, 50), null));\n+    }\n+\n+    public void test_getAsText_int_Locale() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(\"80\", field.getAsText(80, Locale.ENGLISH));\n+        assertEquals(\"80\", field.getAsText(80, null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getAsShortText_long_Locale() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(\"29\", field.getAsShortText(60L * 29, Locale.ENGLISH));\n+        assertEquals(\"29\", field.getAsShortText(60L * 29, null));\n+    }\n+\n+    public void test_getAsShortText_long() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(\"29\", field.getAsShortText(60L * 29));\n+    }\n+\n+    public void test_getAsShortText_RP_int_Locale() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(\"20\", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), 20, Locale.ENGLISH));\n+        assertEquals(\"20\", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), 20, null));\n+    }\n+\n+    public void test_getAsShortText_RP_Locale() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(\"40\", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), Locale.ENGLISH));\n+        assertEquals(\"40\", field.getAsShortText(new TimeOfDay(12, 30, 40, 50), null));\n+    }\n+\n+    public void test_getAsShortText_int_Locale() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(\"80\", field.getAsShortText(80, Locale.ENGLISH));\n+        assertEquals(\"80\", field.getAsShortText(80, null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_add_long_int() {\n+        MockCountingDurationField.add_int = 0;\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(61, field.add(1L, 1));\n+        assertEquals(1, MockCountingDurationField.add_int);\n+    }\n+\n+    public void test_add_long_long() {\n+        MockCountingDurationField.add_long = 0;\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(61, field.add(1L, 1L));\n+        assertEquals(1, MockCountingDurationField.add_long);\n+    }\n+\n+    public void test_add_RP_int_intarray_int() {\n+        int[] values = new int[] {10, 20, 30, 40};\n+        int[] expected = new int[] {10, 20, 30, 40};\n+        BaseDateTimeField field = new MockStandardBaseDateTimeField();\n+        int[] result = field.add(new TimeOfDay(), 2, values, 0);\n+        assertEquals(true, Arrays.equals(expected, result));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 31, 40};\n+        result = field.add(new TimeOfDay(), 2, values, 1);\n+        assertEquals(true, Arrays.equals(expected, result));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 21, 0, 40};\n+        result = field.add(new TimeOfDay(), 2, values, 30);\n+        assertEquals(true, Arrays.equals(expected, result));\n+        \n+        values = new int[] {23, 59, 30, 40};\n+        try {\n+            field.add(new TimeOfDay(), 2, values, 30);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 29, 40};\n+        result = field.add(new TimeOfDay(), 2, values, -1);\n+        assertEquals(true, Arrays.equals(expected, result));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 19, 59, 40};\n+        result = field.add(new TimeOfDay(), 2, values, -31);\n+        assertEquals(true, Arrays.equals(expected, result));\n+        \n+        values = new int[] {0, 0, 30, 40};\n+        try {\n+            field.add(new TimeOfDay(), 2, values, -31);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_addWrapField_long_int() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(29 * 60L, field.addWrapField(60L * 29, 0));\n+        assertEquals(59 * 60L, field.addWrapField(60L * 29, 30));\n+        assertEquals(0 * 60L, field.addWrapField(60L * 29, 31));\n+    }\n+\n+    public void test_addWrapField_RP_int_intarray_int() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        int[] values = new int[] {10, 20, 30, 40};\n+        int[] expected = new int[] {10, 20, 30, 40};\n+        int[] result = field.addWrapField(new TimeOfDay(), 2, values, 0);\n+        assertEquals(true, Arrays.equals(result, expected));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 59, 40};\n+        result = field.addWrapField(new TimeOfDay(), 2, values, 29);\n+        assertEquals(true, Arrays.equals(result, expected));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 0, 40};\n+        result = field.addWrapField(new TimeOfDay(), 2, values, 30);\n+        assertEquals(true, Arrays.equals(result, expected));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 1, 40};\n+        result = field.addWrapField(new TimeOfDay(), 2, values, 31);\n+        assertEquals(true, Arrays.equals(result, expected));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getDifference_long_long() {\n+        MockCountingDurationField.difference_long = 0;\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(30, field.getDifference(0L, 0L));\n+        assertEquals(1, MockCountingDurationField.difference_long);\n+    }\n+\n+    public void test_getDifferenceAsLong_long_long() {\n+        MockCountingDurationField.difference_long = 0;\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(30, field.getDifferenceAsLong(0L, 0L));\n+        assertEquals(1, MockCountingDurationField.difference_long);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_set_long_int() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(0, field.set(120L, 0));\n+        assertEquals(29 * 60, field.set(120L, 29));\n+    }\n+\n+    public void test_set_RP_int_intarray_int() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        int[] values = new int[] {10, 20, 30, 40};\n+        int[] expected = new int[] {10, 20, 30, 40};\n+        int[] result = field.set(new TimeOfDay(), 2, values, 30);\n+        assertEquals(true, Arrays.equals(result, expected));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 29, 40};\n+        result = field.set(new TimeOfDay(), 2, values, 29);\n+        assertEquals(true, Arrays.equals(result, expected));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 30, 40};\n+        try {\n+            field.set(new TimeOfDay(), 2, values, 60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(true, Arrays.equals(values, expected));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 30, 40};\n+        try {\n+            field.set(new TimeOfDay(), 2, values, -1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(true, Arrays.equals(values, expected));\n+    }\n+\n+    public void test_set_long_String_Locale() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(0, field.set(0L, \"0\", null));\n+        assertEquals(29 * 60, field.set(0L, \"29\", Locale.ENGLISH));\n+    }\n+\n+    public void test_set_long_String() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(0, field.set(0L, \"0\"));\n+        assertEquals(29 * 60, field.set(0L, \"29\"));\n+    }\n+\n+    public void test_set_RP_int_intarray_String_Locale() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        int[] values = new int[] {10, 20, 30, 40};\n+        int[] expected = new int[] {10, 20, 30, 40};\n+        int[] result = field.set(new TimeOfDay(), 2, values, \"30\", null);\n+        assertEquals(true, Arrays.equals(result, expected));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 29, 40};\n+        result = field.set(new TimeOfDay(), 2, values, \"29\", Locale.ENGLISH);\n+        assertEquals(true, Arrays.equals(result, expected));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 30, 40};\n+        try {\n+            field.set(new TimeOfDay(), 2, values, \"60\", null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(true, Arrays.equals(values, expected));\n+        \n+        values = new int[] {10, 20, 30, 40};\n+        expected = new int[] {10, 20, 30, 40};\n+        try {\n+            field.set(new TimeOfDay(), 2, values, \"-1\", null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(true, Arrays.equals(values, expected));\n+    }\n+\n+    public void test_convertText() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(0, field.convertText(\"0\", null));\n+        assertEquals(29, field.convertText(\"29\", null));\n+        try {\n+            field.convertText(\"2A\", null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            field.convertText(null, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //------------------------------------------------------------------------\n+//    public abstract DurationField getDurationField();\n+//\n+//    public abstract DurationField getRangeDurationField();\n+\n+    public void test_isLeap_long() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(false, field.isLeap(0L));\n+    }\n+\n+    public void test_getLeapAmount_long() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(0, field.getLeapAmount(0L));\n+    }\n+\n+    public void test_getLeapDurationField() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(null, field.getLeapDurationField());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getMinimumValue() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(0, field.getMinimumValue());\n+    }\n+\n+    public void test_getMinimumValue_long() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(0, field.getMinimumValue(0L));\n+    }\n+\n+    public void test_getMinimumValue_RP() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(0, field.getMinimumValue(new TimeOfDay()));\n+    }\n+\n+    public void test_getMinimumValue_RP_intarray() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(0, field.getMinimumValue(new TimeOfDay(), new int[4]));\n+    }\n+\n+    public void test_getMaximumValue() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(59, field.getMaximumValue());\n+    }\n+\n+    public void test_getMaximumValue_long() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(59, field.getMaximumValue(0L));\n+    }\n+\n+    public void test_getMaximumValue_RP() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(59, field.getMaximumValue(new TimeOfDay()));\n+    }\n+\n+    public void test_getMaximumValue_RP_intarray() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(59, field.getMaximumValue(new TimeOfDay(), new int[4]));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getMaximumTextLength_Locale() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(2, field.getMaximumTextLength(Locale.ENGLISH));\n+\n+        field = new MockPreciseDurationDateTimeField() {\n+            public int getMaximumValue() {\n+                return 5;\n+            }\n+        };\n+        assertEquals(1, field.getMaximumTextLength(Locale.ENGLISH));\n+        \n+        field = new MockPreciseDurationDateTimeField() {\n+            public int getMaximumValue() {\n+                return 555;\n+            }\n+        };\n+        assertEquals(3, field.getMaximumTextLength(Locale.ENGLISH));\n+        \n+        field = new MockPreciseDurationDateTimeField() {\n+            public int getMaximumValue() {\n+                return 5555;\n+            }\n+        };\n+        assertEquals(4, field.getMaximumTextLength(Locale.ENGLISH));\n+        \n+        field = new MockPreciseDurationDateTimeField() {\n+            public int getMaximumValue() {\n+                return -1;\n+            }\n+        };\n+        assertEquals(2, field.getMaximumTextLength(Locale.ENGLISH));\n+    }\n+\n+    public void test_getMaximumShortTextLength_Locale() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(2, field.getMaximumShortTextLength(Locale.ENGLISH));\n+    }\n+\n+    //------------------------------------------------------------------------\n+    public void test_roundFloor_long() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(-120L, field.roundFloor(-61L));\n+        assertEquals(-60L, field.roundFloor(-60L));\n+        assertEquals(-60L, field.roundFloor(-59L));\n+        assertEquals(-60L, field.roundFloor(-1L));\n+        assertEquals(0L, field.roundFloor(0L));\n+        assertEquals(0L, field.roundFloor(1L));\n+        assertEquals(0L, field.roundFloor(29L));\n+        assertEquals(0L, field.roundFloor(30L));\n+        assertEquals(0L, field.roundFloor(31L));\n+        assertEquals(60L, field.roundFloor(60L));\n+    }\n+\n+    public void test_roundCeiling_long() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(-60L, field.roundCeiling(-61L));\n+        assertEquals(-60L, field.roundCeiling(-60L));\n+        assertEquals(0L, field.roundCeiling(-59L));\n+        assertEquals(0L, field.roundCeiling(-1L));\n+        assertEquals(0L, field.roundCeiling(0L));\n+        assertEquals(60L, field.roundCeiling(1L));\n+        assertEquals(60L, field.roundCeiling(29L));\n+        assertEquals(60L, field.roundCeiling(30L));\n+        assertEquals(60L, field.roundCeiling(31L));\n+        assertEquals(60L, field.roundCeiling(60L));\n+    }\n+\n+    public void test_roundHalfFloor_long() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(0L, field.roundHalfFloor(0L));\n+        assertEquals(0L, field.roundHalfFloor(29L));\n+        assertEquals(0L, field.roundHalfFloor(30L));\n+        assertEquals(60L, field.roundHalfFloor(31L));\n+        assertEquals(60L, field.roundHalfFloor(60L));\n+    }\n+\n+    public void test_roundHalfCeiling_long() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(0L, field.roundHalfCeiling(0L));\n+        assertEquals(0L, field.roundHalfCeiling(29L));\n+        assertEquals(60L, field.roundHalfCeiling(30L));\n+        assertEquals(60L, field.roundHalfCeiling(31L));\n+        assertEquals(60L, field.roundHalfCeiling(60L));\n+    }\n+\n+    public void test_roundHalfEven_long() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(0L, field.roundHalfEven(0L));\n+        assertEquals(0L, field.roundHalfEven(29L));\n+        assertEquals(0L, field.roundHalfEven(30L));\n+        assertEquals(60L, field.roundHalfEven(31L));\n+        assertEquals(60L, field.roundHalfEven(60L));\n+        assertEquals(60L, field.roundHalfEven(89L));\n+        assertEquals(120L, field.roundHalfEven(90L));\n+        assertEquals(120L, field.roundHalfEven(91L));\n+    }\n+\n+    public void test_remainder_long() {\n+        BaseDateTimeField field = new MockPreciseDurationDateTimeField();\n+        assertEquals(0L, field.remainder(0L));\n+        assertEquals(29L, field.remainder(29L));\n+        assertEquals(30L, field.remainder(30L));\n+        assertEquals(31L, field.remainder(31L));\n+        assertEquals(0L, field.remainder(60L));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    static class MockPreciseDurationDateTimeField extends PreciseDurationDateTimeField {\n+        protected MockPreciseDurationDateTimeField() {\n+            super(DateTimeFieldType.secondOfMinute(),\n+                new MockCountingDurationField(DurationFieldType.seconds()));\n+        }\n+        protected MockPreciseDurationDateTimeField(DateTimeFieldType type, DurationField dur) {\n+            super(type, dur);\n+        }\n+        public int get(long instant) {\n+            return (int) (instant / 60L);\n+        }\n+        public DurationField getRangeDurationField() {\n+            return new MockCountingDurationField(DurationFieldType.minutes());\n+        }\n+        public int getMaximumValue() {\n+            return 59;\n+        }\n+    }\n+\n+    static class MockStandardBaseDateTimeField extends MockPreciseDurationDateTimeField {\n+        protected MockStandardBaseDateTimeField() {\n+            super();\n+        }\n+        public DurationField getDurationField() {\n+            return ISOChronology.getInstanceUTC().seconds();\n+        }\n+        public DurationField getRangeDurationField() {\n+            return ISOChronology.getInstanceUTC().minutes();\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    static class MockCountingDurationField extends BaseDurationField {\n+        static int add_int = 0;\n+        static int add_long = 0;\n+        static int difference_long = 0;\n+        \n+        protected MockCountingDurationField(DurationFieldType type) {\n+            super(type);\n+        }\n+        public boolean isPrecise() {\n+            return true;\n+        }\n+        public long getUnitMillis() {\n+            return 60;\n+        }\n+        public long getValueAsLong(long duration, long instant) {\n+            return 0;\n+        }\n+        public long getMillis(int value, long instant) {\n+            return 0;\n+        }\n+        public long getMillis(long value, long instant) {\n+            return 0;\n+        }\n+        public long add(long instant, int value) {\n+            add_int++;\n+            return instant + (value * 60L);\n+        }\n+        public long add(long instant, long value) {\n+            add_long++;\n+            return instant + (value * 60L);\n+        }\n+        public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {\n+            difference_long++;\n+            return 30;\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    static class MockZeroDurationField extends BaseDurationField {\n+        protected MockZeroDurationField(DurationFieldType type) {\n+            super(type);\n+        }\n+        public boolean isPrecise() {\n+            return true;\n+        }\n+        public long getUnitMillis() {\n+            return 0;  // this is zero\n+        }\n+        public long getValueAsLong(long duration, long instant) {\n+            return 0;\n+        }\n+        public long getMillis(int value, long instant) {\n+            return 0;\n+        }\n+        public long getMillis(long value, long instant) {\n+            return 0;\n+        }\n+        public long add(long instant, int value) {\n+            return 0;\n+        }\n+        public long add(long instant, long value) {\n+            return 0;\n+        }\n+        public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {\n+            return 0;\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    static class MockImpreciseDurationField extends BaseDurationField {\n+        protected MockImpreciseDurationField(DurationFieldType type) {\n+            super(type);\n+        }\n+        public boolean isPrecise() {\n+            return false;  // this is false\n+        }\n+        public long getUnitMillis() {\n+            return 0;\n+        }\n+        public long getValueAsLong(long duration, long instant) {\n+            return 0;\n+        }\n+        public long getMillis(int value, long instant) {\n+            return 0;\n+        }\n+        public long getMillis(long value, long instant) {\n+            return 0;\n+        }\n+        public long add(long instant, int value) {\n+            return 0;\n+        }\n+        public long add(long instant, long value) {\n+            return 0;\n+        }\n+        public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {\n+            return 0;\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/field/TestPreciseDurationField.java\n+/*\n+ *  Copyright 2001-2009 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.field;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DurationField;\n+import org.joda.time.DurationFieldType;\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * This class is a Junit unit test for PreciseDurationField.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestPreciseDurationField extends TestCase {\n+    \n+    private static final long LONG_INTEGER_MAX = Integer.MAX_VALUE;\n+    private static final int INTEGER_MAX = Integer.MAX_VALUE;\n+    private static final long LONG_MAX = Long.MAX_VALUE;\n+    \n+    private PreciseDurationField iField;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestPreciseDurationField.class);\n+    }\n+\n+    public TestPreciseDurationField(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        iField = new PreciseDurationField(DurationFieldType.seconds(), 1000);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        iField = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_constructor() {\n+        try {\n+            new PreciseDurationField(null, 10);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getType() {\n+        assertEquals(DurationFieldType.seconds(), iField.getType());\n+    }\n+\n+    public void test_getName() {\n+        assertEquals(\"seconds\", iField.getName());\n+    }\n+    \n+    public void test_isSupported() {\n+        assertEquals(true, iField.isSupported());\n+    }\n+\n+    public void test_isPrecise() {\n+        assertEquals(true, iField.isPrecise());\n+    }\n+\n+    public void test_getUnitMillis() {\n+        assertEquals(1000, iField.getUnitMillis());\n+    }\n+\n+    public void test_toString() {\n+        assertEquals(\"DurationField[seconds]\", iField.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getValue_long() {\n+        assertEquals(0, iField.getValue(0L));\n+        assertEquals(12345, iField.getValue(12345678L));\n+        assertEquals(-1, iField.getValue(-1234L));\n+        assertEquals(INTEGER_MAX, iField.getValue(LONG_INTEGER_MAX * 1000L + 999L));\n+        try {\n+            iField.getValue(LONG_INTEGER_MAX * 1000L + 1000L);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void test_getValueAsLong_long() {\n+        assertEquals(0L, iField.getValueAsLong(0L));\n+        assertEquals(12345L, iField.getValueAsLong(12345678L));\n+        assertEquals(-1L, iField.getValueAsLong(-1234L));\n+        assertEquals(LONG_INTEGER_MAX + 1L, iField.getValueAsLong(LONG_INTEGER_MAX * 1000L + 1000L));\n+    }\n+\n+    public void test_getValue_long_long() {\n+        assertEquals(0, iField.getValue(0L, 567L));\n+        assertEquals(12345, iField.getValue(12345678L, 567L));\n+        assertEquals(-1, iField.getValue(-1234L, 567L));\n+        assertEquals(INTEGER_MAX, iField.getValue(LONG_INTEGER_MAX * 1000L + 999L, 567L));\n+        try {\n+            iField.getValue(LONG_INTEGER_MAX * 1000L + 1000L, 567L);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void test_getValueAsLong_long_long() {\n+        assertEquals(0L, iField.getValueAsLong(0L, 567L));\n+        assertEquals(12345L, iField.getValueAsLong(12345678L, 567L));\n+        assertEquals(-1L, iField.getValueAsLong(-1234L, 567L));\n+        assertEquals(LONG_INTEGER_MAX + 1L, iField.getValueAsLong(LONG_INTEGER_MAX * 1000L + 1000L, 567L));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getMillis_int() {\n+        assertEquals(0, iField.getMillis(0));\n+        assertEquals(1234000L, iField.getMillis(1234));\n+        assertEquals(-1234000L, iField.getMillis(-1234));\n+        assertEquals(LONG_INTEGER_MAX * 1000L, iField.getMillis(INTEGER_MAX));\n+    }\n+\n+    public void test_getMillis_long() {\n+        assertEquals(0L, iField.getMillis(0L));\n+        assertEquals(1234000L, iField.getMillis(1234L));\n+        assertEquals(-1234000L, iField.getMillis(-1234L));\n+        try {\n+            iField.getMillis(LONG_MAX);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void test_getMillis_int_long() {\n+        assertEquals(0L, iField.getMillis(0, 567L));\n+        assertEquals(1234000L, iField.getMillis(1234, 567L));\n+        assertEquals(-1234000L, iField.getMillis(-1234, 567L));\n+        assertEquals(LONG_INTEGER_MAX * 1000L, iField.getMillis(INTEGER_MAX, 567L));\n+    }\n+\n+    public void test_getMillis_long_long() {\n+        assertEquals(0L, iField.getMillis(0L, 567L));\n+        assertEquals(1234000L, iField.getMillis(1234L, 567L));\n+        assertEquals(-1234000L, iField.getMillis(-1234L, 567L));\n+        try {\n+            iField.getMillis(LONG_MAX, 567L);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_add_long_int() {\n+        assertEquals(567L, iField.add(567L, 0));\n+        assertEquals(567L + 1234000L, iField.add(567L, 1234));\n+        assertEquals(567L - 1234000L, iField.add(567L, -1234));\n+        try {\n+            iField.add(LONG_MAX, 1);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void test_add_long_long() {\n+        assertEquals(567L, iField.add(567L, 0L));\n+        assertEquals(567L + 1234000L, iField.add(567L, 1234L));\n+        assertEquals(567L - 1234000L, iField.add(567L, -1234L));\n+        try {\n+            iField.add(LONG_MAX, 1L);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+        try {\n+            iField.add(1L, LONG_MAX);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getDifference_long_int() {\n+        assertEquals(0, iField.getDifference(1L, 0L));\n+        assertEquals(567, iField.getDifference(567000L, 0L));\n+        assertEquals(567 - 1234, iField.getDifference(567000L, 1234000L));\n+        assertEquals(567 + 1234, iField.getDifference(567000L, -1234000L));\n+        try {\n+            iField.getDifference(LONG_MAX, -1L);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void test_getDifferenceAsLong_long_long() {\n+        assertEquals(0L, iField.getDifferenceAsLong(1L, 0L));\n+        assertEquals(567L, iField.getDifferenceAsLong(567000L, 0L));\n+        assertEquals(567L - 1234L, iField.getDifferenceAsLong(567000L, 1234000L));\n+        assertEquals(567L + 1234L, iField.getDifferenceAsLong(567000L, -1234000L));\n+        try {\n+            iField.getDifferenceAsLong(LONG_MAX, -1L);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_equals() {\n+        assertEquals(true, iField.equals(iField));\n+        assertEquals(false, iField.equals(ISOChronology.getInstance().minutes()));\n+        DurationField dummy = new PreciseDurationField(DurationFieldType.seconds(), 0);\n+        assertEquals(false, iField.equals(dummy));\n+        dummy = new PreciseDurationField(DurationFieldType.seconds(), 1000);\n+        assertEquals(true, iField.equals(dummy));\n+        dummy = new PreciseDurationField(DurationFieldType.millis(), 1000);\n+        assertEquals(false, iField.equals(dummy));\n+        assertEquals(false, iField.equals(\"\"));\n+        assertEquals(false, iField.equals(null));\n+    }\n+\n+    public void test_hashCode() {\n+        assertEquals(true, iField.hashCode() == iField.hashCode());\n+        assertEquals(false, iField.hashCode() == ISOChronology.getInstance().minutes().hashCode());\n+        DurationField dummy = new PreciseDurationField(DurationFieldType.seconds(), 0);\n+        assertEquals(false, iField.hashCode() == dummy.hashCode());\n+        dummy = new PreciseDurationField(DurationFieldType.seconds(), 1000);\n+        assertEquals(true, iField.hashCode() == dummy.hashCode());\n+        dummy = new PreciseDurationField(DurationFieldType.millis(), 1000);\n+        assertEquals(false, iField.hashCode() == dummy.hashCode());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_compareTo() {\n+        assertEquals(0, iField.compareTo(iField));\n+        assertEquals(-1, iField.compareTo(ISOChronology.getInstance().minutes()));\n+        DurationField dummy = new PreciseDurationField(DurationFieldType.seconds(), 0);\n+        assertEquals(1, iField.compareTo(dummy));\n+//        try {\n+//            iField.compareTo(\"\");\n+//            fail();\n+//        } catch (ClassCastException ex) {}\n+        try {\n+            iField.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        DurationField test = iField;\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        DurationField result = (DurationField) ois.readObject();\n+        ois.close();\n+        \n+        assertEquals(test, result);\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/field/TestScaledDurationField.java\n+/*\n+ *  Copyright 2001-2009 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.field;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DurationField;\n+import org.joda.time.DurationFieldType;\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * This class is a Junit unit test for PreciseDurationField.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestScaledDurationField extends TestCase {\n+    \n+    private static final long LONG_INTEGER_MAX = Integer.MAX_VALUE;\n+    private static final int INTEGER_MAX = Integer.MAX_VALUE;\n+    private static final long LONG_MAX = Long.MAX_VALUE;\n+    \n+    private ScaledDurationField iField;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestScaledDurationField.class);\n+    }\n+\n+    public TestScaledDurationField(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DurationField base = MillisDurationField.INSTANCE;\n+        iField = new ScaledDurationField(base, DurationFieldType.minutes(), 90);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        iField = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_constructor() {\n+        try {\n+            new ScaledDurationField(null, DurationFieldType.minutes(), 10);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new ScaledDurationField(MillisDurationField.INSTANCE, null, 10);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void test_getScalar() {\n+        assertEquals(90, iField.getScalar());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getType() {\n+        assertEquals(DurationFieldType.minutes(), iField.getType());\n+    }\n+\n+    public void test_getName() {\n+        assertEquals(\"minutes\", iField.getName());\n+    }\n+    \n+    public void test_isSupported() {\n+        assertEquals(true, iField.isSupported());\n+    }\n+\n+    public void test_isPrecise() {\n+        assertEquals(true, iField.isPrecise());\n+    }\n+\n+    public void test_getUnitMillis() {\n+        assertEquals(90, iField.getUnitMillis());\n+    }\n+\n+    public void test_toString() {\n+        assertEquals(\"DurationField[minutes]\", iField.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getValue_long() {\n+        assertEquals(0, iField.getValue(0L));\n+        assertEquals(12345678 / 90, iField.getValue(12345678L));\n+        assertEquals(-1234 / 90, iField.getValue(-1234L));\n+        assertEquals(INTEGER_MAX / 90, iField.getValue(LONG_INTEGER_MAX));\n+        try {\n+            iField.getValue(LONG_INTEGER_MAX + 1L);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void test_getValueAsLong_long() {\n+        assertEquals(0L, iField.getValueAsLong(0L));\n+        assertEquals(12345678L / 90, iField.getValueAsLong(12345678L));\n+        assertEquals(-1234 / 90L, iField.getValueAsLong(-1234L));\n+        assertEquals(LONG_INTEGER_MAX + 1L, iField.getValueAsLong(LONG_INTEGER_MAX * 90L + 90L));\n+    }\n+\n+    public void test_getValue_long_long() {\n+        assertEquals(0, iField.getValue(0L, 567L));\n+        assertEquals(12345678 / 90, iField.getValue(12345678L, 567L));\n+        assertEquals(-1234 / 90, iField.getValue(-1234L, 567L));\n+        assertEquals(INTEGER_MAX / 90, iField.getValue(LONG_INTEGER_MAX, 567L));\n+        try {\n+            iField.getValue(LONG_INTEGER_MAX + 1L, 567L);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void test_getValueAsLong_long_long() {\n+        assertEquals(0L, iField.getValueAsLong(0L, 567L));\n+        assertEquals(12345678 / 90L, iField.getValueAsLong(12345678L, 567L));\n+        assertEquals(-1234 / 90L, iField.getValueAsLong(-1234L, 567L));\n+        assertEquals(LONG_INTEGER_MAX + 1L, iField.getValueAsLong(LONG_INTEGER_MAX * 90L + 90L, 567L));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getMillis_int() {\n+        assertEquals(0, iField.getMillis(0));\n+        assertEquals(1234L * 90L, iField.getMillis(1234));\n+        assertEquals(-1234L * 90L, iField.getMillis(-1234));\n+        assertEquals(LONG_INTEGER_MAX * 90L, iField.getMillis(INTEGER_MAX));\n+    }\n+\n+    public void test_getMillis_long() {\n+        assertEquals(0L, iField.getMillis(0L));\n+        assertEquals(1234L * 90L, iField.getMillis(1234L));\n+        assertEquals(-1234L * 90L, iField.getMillis(-1234L));\n+        try {\n+            iField.getMillis(LONG_MAX);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void test_getMillis_int_long() {\n+        assertEquals(0L, iField.getMillis(0, 567L));\n+        assertEquals(1234L * 90L, iField.getMillis(1234, 567L));\n+        assertEquals(-1234L * 90L, iField.getMillis(-1234, 567L));\n+        assertEquals(LONG_INTEGER_MAX * 90L, iField.getMillis(INTEGER_MAX, 567L));\n+    }\n+\n+    public void test_getMillis_long_long() {\n+        assertEquals(0L, iField.getMillis(0L, 567L));\n+        assertEquals(1234L * 90L, iField.getMillis(1234L, 567L));\n+        assertEquals(-1234L * 90L, iField.getMillis(-1234L, 567L));\n+        try {\n+            iField.getMillis(LONG_MAX, 567L);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_add_long_int() {\n+        assertEquals(567L, iField.add(567L, 0));\n+        assertEquals(567L + 1234L * 90L, iField.add(567L, 1234));\n+        assertEquals(567L - 1234L * 90L, iField.add(567L, -1234));\n+        try {\n+            iField.add(LONG_MAX, 1);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void test_add_long_long() {\n+        assertEquals(567L, iField.add(567L, 0L));\n+        assertEquals(567L + 1234L * 90L, iField.add(567L, 1234L));\n+        assertEquals(567L - 1234L * 90L, iField.add(567L, -1234L));\n+        try {\n+            iField.add(LONG_MAX, 1L);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+        try {\n+            iField.add(1L, LONG_MAX);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getDifference_long_int() {\n+        assertEquals(0, iField.getDifference(1L, 0L));\n+        assertEquals(567, iField.getDifference(567L * 90L, 0L));\n+        assertEquals(567 - 1234, iField.getDifference(567L * 90L, 1234L * 90L));\n+        assertEquals(567 + 1234, iField.getDifference(567L * 90L, -1234L * 90L));\n+        try {\n+            iField.getDifference(LONG_MAX, -1L);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void test_getDifferenceAsLong_long_long() {\n+        assertEquals(0L, iField.getDifferenceAsLong(1L, 0L));\n+        assertEquals(567L, iField.getDifferenceAsLong(567L * 90L, 0L));\n+        assertEquals(567L - 1234L, iField.getDifferenceAsLong(567L * 90L, 1234L * 90L));\n+        assertEquals(567L + 1234L, iField.getDifferenceAsLong(567L * 90L, -1234L * 90L));\n+        try {\n+            iField.getDifferenceAsLong(LONG_MAX, -1L);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_equals() {\n+        assertEquals(true, iField.equals(iField));\n+        assertEquals(false, iField.equals(ISOChronology.getInstance().minutes()));\n+        DurationField dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 2);\n+        assertEquals(false, iField.equals(dummy));\n+        dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 90);\n+        assertEquals(true, iField.equals(dummy));\n+        dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.millis(), 90);\n+        assertEquals(false, iField.equals(dummy));\n+        assertEquals(false, iField.equals(\"\"));\n+        assertEquals(false, iField.equals(null));\n+    }\n+\n+    public void test_hashCode() {\n+        assertEquals(iField.hashCode(), iField.hashCode());\n+        assertEquals(false, iField.hashCode() == ISOChronology.getInstance().minutes().hashCode());\n+        DurationField dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 2);\n+        assertEquals(false, iField.hashCode() == dummy.hashCode());\n+        dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 90);\n+        assertEquals(true, iField.hashCode() == dummy.hashCode());\n+        dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.millis(), 90);\n+        assertEquals(false, iField.hashCode() == dummy.hashCode());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_compareTo() {\n+        assertEquals(0, iField.compareTo(iField));\n+        assertEquals(-1, iField.compareTo(ISOChronology.getInstance().minutes()));\n+        DurationField dummy = new PreciseDurationField(DurationFieldType.minutes(), 0);\n+        assertEquals(1, iField.compareTo(dummy));\n+//        try {\n+//            iField.compareTo(\"\");\n+//            fail();\n+//        } catch (ClassCastException ex) {}\n+        try {\n+            iField.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        DurationField test = iField;\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        DurationField result = (DurationField) ois.readObject();\n+        ois.close();\n+        \n+        assertEquals(test, result);\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.field;\n+\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTimeField;\n+import org.joda.time.DateTimeFieldType;\n+import org.joda.time.DurationFieldType;\n+import org.joda.time.LocalTime;\n+import org.joda.time.ReadablePartial;\n+\n+/**\n+ * This class is a JUnit test to test only the UnsupportedDateTimeField class.\n+ * This set of test cases exercises everything described in the Javadoc for this\n+ * class.\n+ * \n+ * @author Jeremy R. Rickard\n+ */\n+public class TestUnsupportedDateTimeField extends TestCase {\n+\n+    private DurationFieldType weeks;\n+    private DurationFieldType months;\n+    private DateTimeFieldType dateTimeFieldTypeOne;\n+    private ReadablePartial localTime;\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestUnsupportedDateTimeField.class);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        weeks = DurationFieldType.weeks();\n+        months = DurationFieldType.months();\n+        dateTimeFieldTypeOne = DateTimeFieldType.centuryOfEra();\n+        localTime = new LocalTime();\n+    }\n+\n+    /**\n+     * Passing null values into UnsupportedDateTimeField.getInstance() should\n+     * throw an IllegalArguementsException\n+     */\n+    public void testNullValuesToGetInstanceThrowsException() {\n+\n+        try {\n+            UnsupportedDateTimeField.getInstance(null, null);\n+            assertTrue(false);\n+        } catch (IllegalArgumentException e) {\n+            assertTrue(true);\n+        }\n+    }\n+\n+    /**\n+     * \n+     * This test exercises the logic in UnsupportedDateTimeField.getInstance. If\n+     * getInstance() is invoked twice with: - the same DateTimeFieldType -\n+     * different duration fields\n+     * \n+     * Then the field returned in the first invocation should not be equal to\n+     * the field returned by the second invocation. In otherwords, the generated\n+     * instance should be the same for a unique pairing of\n+     * DateTimeFieldType/DurationField\n+     */\n+    public void testDifferentDurationReturnDifferentObjects() {\n+\n+        /**\n+         * The fields returned by getInstance should be the same when the\n+         * duration is the same for both method calls.\n+         */\n+        DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(\n+                dateTimeFieldTypeOne, UnsupportedDurationField\n+                        .getInstance(weeks));\n+        DateTimeField fieldTwo = UnsupportedDateTimeField.getInstance(\n+                dateTimeFieldTypeOne, UnsupportedDurationField\n+                        .getInstance(weeks));\n+        assertSame(fieldOne, fieldTwo);\n+\n+        /**\n+         * The fields returned by getInstance should NOT be the same when the\n+         * duration is the same for both method calls.\n+         */\n+        DateTimeField fieldThree = UnsupportedDateTimeField.getInstance(\n+                dateTimeFieldTypeOne, UnsupportedDurationField\n+                        .getInstance(months));\n+        assertNotSame(fieldOne, fieldThree);\n+    }\n+\n+    /**\n+     * The getName() method should return the same value as the getName() method\n+     * of the DateTimeFieldType that was used to create the instance.\n+     * \n+     */\n+    public void testPublicGetNameMethod() {\n+        DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(\n+                dateTimeFieldTypeOne, UnsupportedDurationField\n+                        .getInstance(weeks));\n+\n+        assertSame(fieldOne.getName(), dateTimeFieldTypeOne.getName());\n+    }\n+\n+    /**\n+     * As this is an unsupported date/time field, some normal methods will\n+     * always return false, as they are not supported. Verify that each method\n+     * correctly returns null.\n+     */\n+    public void testAlwaysFalseReturnTypes() {\n+        DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(\n+                dateTimeFieldTypeOne, UnsupportedDurationField\n+                        .getInstance(weeks));\n+        assertFalse(fieldOne.isLenient());\n+        assertFalse(fieldOne.isSupported());\n+    }\n+\n+    /**\n+     * According to the JavaDocs, there are two methods that should always\n+     * return null. * getRangeDurationField() * getLeapDurationField()\n+     * \n+     * Ensure that these are in fact null.\n+     */\n+\n+    public void testMethodsThatShouldAlwaysReturnNull() {\n+        DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(\n+                dateTimeFieldTypeOne, UnsupportedDurationField\n+                        .getInstance(weeks));\n+\n+        assertNull(fieldOne.getLeapDurationField());\n+        assertNull(fieldOne.getRangeDurationField());\n+    }\n+\n+    /**\n+     * As this is an unsupported date/time field, many normal methods are\n+     * unsupported and throw an UnsupportedOperationException. Verify that each\n+     * method correctly throws this exception. * add(ReadablePartial instant,\n+     * int fieldIndex, int[] values, int valueToAdd) * addWrapField(long\n+     * instant, int value) * addWrapField(ReadablePartial instant, int\n+     * fieldIndex, int[] values, int valueToAdd) *\n+     * addWrapPartial(ReadablePartial instant, int fieldIndex, int[] values, int\n+     * valueToAdd) * get(long instant) * getAsShortText(int fieldValue, Locale\n+     * locale) * getAsShortText(long instant) * getAsShortText(long instant,\n+     * Locale locale) * getAsShortText(ReadablePartial partial, int fieldValue,\n+     * Locale locale) * getAsShortText(ReadablePartial partial, Locale locale) *\n+     * getAsText(int fieldValue, Locale locale) * getAsText(long instant) *\n+     * getAsText(long instant, Locale locale) * getAsText(ReadablePartial\n+     * partial, int fieldValue, Locale locale) * getAsText(ReadablePartial\n+     * partial, Locale locale) * getLeapAmount(long instant) *\n+     * getMaximumShortTextLength(Locale locale) * getMaximumTextLength(Locale\n+     * locale) * getMaximumValue() * getMaximumValue(long instant) *\n+     * getMaximumValue(ReadablePartial instant) *\n+     * getMaximumValue(ReadablePartial instant, int[] values) *\n+     * getMinimumValue() * getMinimumValue(long instant) *\n+     * getMinimumValue(ReadablePartial instant) *\n+     * getMinimumValue(ReadablePartial instant, int[] values) * isLeap(long\n+     * instant) * remainder(long instant) * roundCeiling(long instant) *\n+     * roundFloor(long instant) * roundHalfCeiling(long instant) *\n+     * roundHalfEven(long instant) * roundHalfFloor(long instant) * set(long\n+     * instant, int value) * set(long instant, String text) * set(long instant,\n+     * String text, Locale locale) * set(ReadablePartial instant, int\n+     * fieldIndex, int[] values, int newValue) * set(ReadablePartial instant,\n+     * int fieldIndex, int[] values, String text, Locale locale)\n+     */\n+    public void testUnsupportedMethods() {\n+        DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(\n+                dateTimeFieldTypeOne, UnsupportedDurationField\n+                        .getInstance(weeks));\n+\n+        // add(ReadablePartial instant, int fieldIndex, int[] values, int\n+        // valueToAdd)\n+        try {\n+            fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100);\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+        // addWrapField(long instant, int value)\n+        try {\n+            fieldOne.addWrapField(100000L, 250);\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+        // addWrapField(ReadablePartial instant, int fieldIndex, int[] values,\n+        // int valueToAdd)\n+        try {\n+            fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100);\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+        // addWrapPartial(ReadablePartial instant, int fieldIndex, int[] values,\n+        // int valueToAdd)\n+        try {\n+            fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100);\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+        // UnsupportedDateTimeField.get(long instant)\n+        try {\n+            fieldOne.get(1000L);\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        // UnsupportedDateTimeField.getAsShortText(int fieldValue,\n+        // Locale locale)\n+        try {\n+            fieldOne.getAsShortText(0, Locale.getDefault());\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        // UnsupportedDateTimeField.getAsShortText(long instant)\n+        try {\n+            fieldOne.getAsShortText(100000L);\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        // UnsupportedDateTimeField.getAsShortText(long instant, Locale locale)\n+        try {\n+            fieldOne.getAsShortText(100000L, Locale.getDefault());\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        // UnsupportedDateTimeField.getAsShortText(ReadablePartial partial,\n+        // int fieldValue,\n+        // Locale locale)\n+        try {\n+            fieldOne.getAsShortText(localTime, 0, Locale.getDefault());\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        // UnsupportedDateTimeField.getAsShortText(ReadablePartial partial,\n+        // Locale locale)\n+        try {\n+            fieldOne.getAsShortText(localTime, Locale.getDefault());\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        // UnsupportedDateTimeField.getAsText(int fieldValue,\n+        // Locale locale)\n+        try {\n+            fieldOne.getAsText(0, Locale.getDefault());\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        // UnsupportedDateTimeField.getAsText(long instant)\n+        try {\n+            fieldOne.getAsText(1000L);\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        // UnsupportedDateTimeField.getAsText(long instant, Locale locale)\n+        try {\n+            fieldOne.getAsText(1000L, Locale.getDefault());\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        // UnsupportedDateTimeField.getAsText(ReadablePartial partial,\n+        // int fieldValue,\n+        // Locale locale)\n+        try {\n+            fieldOne.getAsText(localTime, 0, Locale.getDefault());\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        // UnsupportedDateTimeField.getAsText(ReadablePartial partial,\n+        // Locale locale)\n+        try {\n+            fieldOne.getAsText(localTime, Locale.getDefault());\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        // UnsupportedDateTimeField.getLeapAmount(long instant) is unsupported\n+        // and should always thrown an UnsupportedOperationException\n+        try {\n+            fieldOne.getLeapAmount(System.currentTimeMillis());\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        // UnsupportedDateTimeField.getMaximumShortTextLength(Locale locale)\n+        // is unsupported and should always thrown an\n+        // UnsupportedOperationException\n+        try {\n+            fieldOne.getMaximumShortTextLength(Locale.getDefault());\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        // UnsupportedDateTimeField.getMaximumTextLength(Locale locale)\n+        // is unsupported and should always thrown an\n+        // UnsupportedOperationException\n+        try {\n+            fieldOne.getMaximumTextLength(Locale.getDefault());\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        // UnsupportedDateTimeField.getMaximumValue() is unsupported\n+        // and should always thrown an UnsupportedOperationException\n+        try {\n+            fieldOne.getMaximumValue();\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        // UnsupportedDateTimeField.getMaximumValue(long instant)\n+        // is unsupported and should always thrown an\n+        // UnsupportedOperationException\n+        try {\n+            fieldOne.getMaximumValue(1000000L);\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        // UnsupportedDateTimeField.getMaximumValue(ReadablePartial instant)\n+        // is unsupported and should always thrown an\n+        // UnsupportedOperationException\n+        try {\n+            fieldOne.getMaximumValue(localTime);\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        // UnsupportedDateTimeField.getMaximumValue(ReadablePartial instant,\n+        // int[] values)\n+        // is unsupported and should always thrown an\n+        // UnsupportedOperationException\n+        try {\n+            fieldOne.getMaximumValue(localTime, new int[] { 0 });\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        // UnsupportedDateTimeField.getMinumumValue() is unsupported\n+        // and should always thrown an UnsupportedOperationException\n+        try {\n+            fieldOne.getMinimumValue();\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        // UnsupportedDateTimeField.getMinumumValue(long instant) is unsupported\n+        // and should always thrown an UnsupportedOperationException\n+        try {\n+            fieldOne.getMinimumValue(10000000L);\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        // UnsupportedDateTimeField.getMinumumValue(ReadablePartial instant)\n+        // is unsupported and should always thrown an\n+        // UnsupportedOperationException\n+        try {\n+            fieldOne.getMinimumValue(localTime);\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        // UnsupportedDateTimeField.getMinumumValue(ReadablePartial instant,\n+        // int[] values) is unsupported\n+        // and should always thrown an UnsupportedOperationException\n+        try {\n+            fieldOne.getMinimumValue(localTime, new int[] { 0 });\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        // UnsupportedDateTimeField.isLeap(long instant) is unsupported and\n+        // should always thrown an UnsupportedOperationException\n+        try {\n+            fieldOne.isLeap(System.currentTimeMillis());\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        // UnsupportedDateTimeField.remainder(long instant) is unsupported and\n+        // should always thrown an UnsupportedOperationException\n+        try {\n+            fieldOne.remainder(1000000L);\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        // UnsupportedDateTimeField.roundCeiling(long instant) is unsupported\n+        // and\n+        // should always thrown an UnsupportedOperationException\n+        try {\n+            fieldOne.roundCeiling(1000000L);\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        // UnsupportedDateTimeField.roundFloor(long instant) is unsupported and\n+        // should always thrown an UnsupportedOperationException\n+        try {\n+            fieldOne.roundFloor(1000000L);\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        // UnsupportedDateTimeField.roundHalfCeiling(long instant) is\n+        // unsupported and\n+        // should always thrown an UnsupportedOperationException\n+        try {\n+            fieldOne.roundHalfCeiling(1000000L);\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        // UnsupportedDateTimeField.roundHalfEven(long instant) is unsupported\n+        // and\n+        // should always thrown an UnsupportedOperationException\n+        try {\n+            fieldOne.roundHalfEven(1000000L);\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        // UnsupportedDateTimeField.roundHalfFloor(long instant) is unsupported\n+        // and\n+        // should always thrown an UnsupportedOperationException\n+        try {\n+            fieldOne.roundHalfFloor(1000000L);\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        // UnsupportedDateTimeField.set(long instant, int value) is unsupported\n+        // and\n+        // should always thrown an UnsupportedOperationException\n+        try {\n+            fieldOne.set(1000000L, 1000);\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        // UnsupportedDateTimeField.set(long instant, String test) is\n+        // unsupported and\n+        // should always thrown an UnsupportedOperationException\n+        try {\n+            fieldOne.set(1000000L, \"Unsupported Operation\");\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        // UnsupportedDateTimeField.set(long instant, String text, Locale\n+        // locale)\n+        // is unsupported and should always thrown an\n+        // UnsupportedOperationException\n+        try {\n+            fieldOne\n+                    .set(1000000L, \"Unsupported Operation\", Locale.getDefault());\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        // UnsupportedDateTimeField.set(ReadablePartial instant,\n+        // int fieldIndex,\n+        // int[] values,\n+        // int newValue) is unsupported and\n+        // should always thrown an UnsupportedOperationException\n+        try {\n+            fieldOne.set(localTime, 0, new int[] { 0 }, 10000);\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        // UnsupportedDateTimeField.set(ReadablePartial instant,\n+        // int fieldIndex,\n+        // int[] values,\n+        // String text,\n+        // Locale locale) is unsupported and\n+        // should always thrown an UnsupportedOperationException\n+        try {\n+            fieldOne.set(localTime, 0, new int[] { 0 },\n+                    \"Unsupported Operation\", Locale.getDefault());\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+    }\n+\n+    /**\n+     * As this is an unsupported date/time field, many normal methods are\n+     * unsupported. Some delegate and can possibly throw an\n+     * UnsupportedOperationException or have a valid return. Verify that each\n+     * method correctly throws this exception when appropriate and delegates\n+     * correctly based on the Duration used to get the instance.\n+     */\n+    public void testDelegatedMethods() {\n+        DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(\n+                dateTimeFieldTypeOne, UnsupportedDurationField\n+                        .getInstance(weeks));\n+        PreciseDurationField hoursDuration = new PreciseDurationField(\n+                DurationFieldType.hours(), 10L);\n+        DateTimeField fieldTwo = UnsupportedDateTimeField.getInstance(\n+                dateTimeFieldTypeOne, hoursDuration);\n+\n+        // UnsupportedDateTimeField.add(long instant, int value) should\n+        // throw an UnsupportedOperationException when the duration does\n+        // not support the operation, otherwise it delegates to the duration.\n+        // First\n+        // try it with an UnsupportedDurationField, then a PreciseDurationField.\n+        try {\n+            fieldOne.add(System.currentTimeMillis(), 100);\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+        try {\n+            long currentTime = System.currentTimeMillis();\n+            long firstComputation = hoursDuration.add(currentTime, 100);\n+            long secondComputation = fieldTwo.add(currentTime,\n+                    100);\n+            assertEquals(firstComputation,secondComputation);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(false);\n+        }\n+\n+        // UnsupportedDateTimeField.add(long instant, long value) should\n+        // throw an UnsupportedOperationException when the duration does\n+        // not support the operation, otherwise it delegates to the duration.\n+        // First\n+        // try it with an UnsupportedDurationField, then a PreciseDurationField.\n+        try {\n+            fieldOne.add(System.currentTimeMillis(), 1000L);\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        try {\n+            long currentTime = System.currentTimeMillis();\n+            long firstComputation = hoursDuration.add(currentTime, 1000L);\n+            long secondComputation = fieldTwo.add(currentTime,\n+                    1000L);\n+            assertTrue(firstComputation == secondComputation);\n+            assertEquals(firstComputation,secondComputation);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(false);\n+        }\n+\n+        // UnsupportedDateTimeField.getDifference(long minuendInstant,\n+        // long subtrahendInstant)\n+        // should throw an UnsupportedOperationException when the duration does\n+        // not support the operation, otherwise return the result from the\n+        // delegated call.\n+        try {\n+            fieldOne.getDifference(100000L, 1000L);\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        try {\n+            int firstDifference = hoursDuration.getDifference(100000L, 1000L);\n+            int secondDifference = fieldTwo.getDifference(100000L, 1000L);\n+            assertEquals(firstDifference,secondDifference);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(false);\n+        }\n+\n+        // UnsupportedDateTimeField.getDifferenceAsLong(long minuendInstant,\n+        // long subtrahendInstant)\n+        // should throw an UnsupportedOperationException when the duration does\n+        // not support the operation, otherwise return the result from the\n+        // delegated call.\n+        try {\n+            fieldOne.getDifferenceAsLong(100000L, 1000L);\n+            assertTrue(false);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(true);\n+        }\n+\n+        try {\n+            long firstDifference = hoursDuration.getDifference(100000L, 1000L);\n+            long secondDifference = fieldTwo.getDifference(100000L, 1000L);\n+            assertEquals(firstDifference,secondDifference);\n+        } catch (UnsupportedOperationException e) {\n+            assertTrue(false);\n+        }\n+    }\n+\n+    /**\n+    * The toString method should return a suitable debug message (not null).\n+    * Ensure that the toString method returns a string with length greater than\n+    * 0 (and not null)\n+    * \n+    */\n+    public void testToString() {\n+        DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(\n+                dateTimeFieldTypeOne, UnsupportedDurationField\n+                        .getInstance(weeks));\n+\n+        String debugMessage = fieldOne.toString();\n+        assertNotNull(debugMessage);\n+        assertTrue(debugMessage.length() > 0);\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/format/TestAll.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.format;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Entry point for all tests in this package.\n+ * \n+ * @version $Revision$ $Date$\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestAll extends TestCase {\n+\n+    public TestAll(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite();\n+        \n+        suite.addTest(TestDateTimeFormatter.suite());\n+        suite.addTest(TestDateTimeFormat.suite());\n+        suite.addTest(TestDateTimeFormatStyle.suite());\n+        suite.addTest(TestISODateTimeFormat.suite());\n+        suite.addTest(TestISODateTimeFormat_Fields.suite());\n+        suite.addTest(TestISODateTimeFormatParsing.suite());\n+        suite.addTest(TestDateTimeFormatterBuilder.suite());\n+        \n+        suite.addTest(TestPeriodFormatter.suite());\n+        suite.addTest(TestPeriodFormat.suite());\n+        suite.addTest(TestISOPeriodFormat.suite());\n+        suite.addTest(TestISOPeriodFormatParsing.suite());\n+        suite.addTest(TestPeriodFormatParsing.suite());\n+        suite.addTest(TestPeriodFormatterBuilder.suite());\n+\n+        suite.addTest(TestTextFields.suite());\n+\n+        return suite;\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = {\n+            TestAll.class.getName()\n+        };\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/format/TestDateTimeFormat.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.format;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeFieldType;\n+import org.joda.time.DateTimeUtils;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.chrono.GJChronology;\n+\n+/**\n+ * This class is a Junit unit test for DateTime Formating.\n+ *\n+ * @author Stephen Colebourne\n+ * @author Fredrik Borgh\n+ */\n+public class TestDateTimeFormat extends TestCase {\n+\n+    private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    private static final DateTimeZone NEWYORK = DateTimeZone.forID(\"America/New_York\");\n+\n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestDateTimeFormat.class);\n+    }\n+\n+    public TestDateTimeFormat(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSubclassableConstructor() {\n+        DateTimeFormat f = new DateTimeFormat() {\n+            // test constructor is protected\n+        };\n+        assertNotNull(f);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_era() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"G\").withLocale(Locale.UK);\n+        assertEquals(dt.toString(), \"AD\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"AD\", f.print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(dt.toString(), \"AD\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_centuryOfEra() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"C\").withLocale(Locale.UK);\n+        assertEquals(dt.toString(), \"20\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"20\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"20\", f.print(dt));\n+        \n+        dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(dt.toString(), \"1\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_yearOfEra() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"Y\").withLocale(Locale.UK);\n+        assertEquals(dt.toString(), \"2004\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"2004\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"2004\", f.print(dt));\n+        \n+        dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(dt.toString(), \"124\", f.print(dt));  // 124th year of BCE\n+    }        \n+\n+    public void testFormat_yearOfEra_twoDigit() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"YY\").withLocale(Locale.UK);\n+        assertEquals(dt.toString(), \"04\", f.print(dt));\n+        \n+        dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(dt.toString(), \"23\", f.print(dt));\n+        \n+        // current time set to 2002-06-09\n+        f = f.withZoneUTC();\n+        DateTime expect = null;\n+        expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC);\n+        assertEquals(expect, f.parseDateTime(\"04\"));\n+        \n+        expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC);\n+        assertEquals(expect, f.parseDateTime(\"22\"));\n+        \n+        expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC);\n+        assertEquals(expect, f.parseDateTime(\"21\"));\n+\n+        // Added tests to ensure single sign digit parse fails properly\n+        try {\n+            f.parseDateTime(\"-\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+\n+        try {\n+            f.parseDateTime(\"+\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+\n+        // Added tests for pivot year setting\n+        f = f.withPivotYear(new Integer(2050));\n+        expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC);\n+        assertEquals(expect, f.parseDateTime(\"00\"));\n+\n+        expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC);\n+        assertEquals(expect, f.parseDateTime(\"99\"));\n+\n+        // Added tests to ensure two digit parsing is lenient for DateTimeFormat\n+        f = DateTimeFormat.forPattern(\"YY\").withLocale(Locale.UK);\n+        f = f.withZoneUTC();\n+        f.parseDateTime(\"5\");\n+        f.parseDateTime(\"005\");\n+        f.parseDateTime(\"+50\");\n+        f.parseDateTime(\"-50\");\n+    }\n+\n+    public void testFormat_yearOfEraParse() {\n+        Chronology chrono = GJChronology.getInstanceUTC();\n+\n+        DateTimeFormatter f = DateTimeFormat\n+            .forPattern(\"YYYY-MM GG\")\n+            .withChronology(chrono)\n+            .withLocale(Locale.UK);\n+\n+        DateTime dt = new DateTime(2005, 10, 1, 0, 0, 0, 0, chrono);\n+        assertEquals(dt, f.parseDateTime(\"2005-10 AD\"));\n+        assertEquals(dt, f.parseDateTime(\"2005-10 CE\"));\n+\n+        dt = new DateTime(-2005, 10, 1, 0, 0, 0, 0, chrono);\n+        assertEquals(dt, f.parseDateTime(\"2005-10 BC\"));\n+        assertEquals(dt, f.parseDateTime(\"2005-10 BCE\"));\n+    }        \n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_year() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"y\").withLocale(Locale.UK);\n+        assertEquals(dt.toString(), \"2004\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"2004\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"2004\", f.print(dt));\n+        \n+        dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(dt.toString(), \"-123\", f.print(dt));\n+\n+        // Added tests to ensure single sign digit parse fails properly\n+        try {\n+            f.parseDateTime(\"-\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+\n+        try {\n+            f.parseDateTime(\"+\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testFormat_year_twoDigit() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"yy\").withLocale(Locale.UK);\n+        assertEquals(dt.toString(), \"04\", f.print(dt));\n+        \n+        dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(dt.toString(), \"23\", f.print(dt));\n+        \n+        // current time set to 2002-06-09\n+        f = f.withZoneUTC();\n+        DateTime expect = null;\n+        expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC);\n+        assertEquals(expect, f.parseDateTime(\"04\"));\n+        \n+        expect = new DateTime(1922, 1, 1, 0, 0, 0, 0, UTC);\n+        assertEquals(expect, f.parseDateTime(\"22\"));\n+        \n+        expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC);\n+        assertEquals(expect, f.parseDateTime(\"21\"));\n+\n+        // Added tests to ensure single sign digit parse fails properly\n+        try {\n+            f.parseDateTime(\"-\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+\n+        try {\n+            f.parseDateTime(\"+\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+\n+        // Added tests for pivot year setting\n+        f = f.withPivotYear(new Integer(2050));\n+        expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC);\n+        assertEquals(expect, f.parseDateTime(\"00\"));\n+\n+        expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC);\n+        assertEquals(expect, f.parseDateTime(\"99\"));\n+\n+        // Added tests to ensure two digit parsing is strict by default for\n+        // DateTimeFormatterBuilder\n+        f = new DateTimeFormatterBuilder().appendTwoDigitYear(2000).toFormatter();\n+        f = f.withZoneUTC();\n+        try {\n+            f.parseDateTime(\"5\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            f.parseDateTime(\"005\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            f.parseDateTime(\"+50\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            f.parseDateTime(\"-50\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+\n+        // Added tests to ensure two digit parsing is lenient for DateTimeFormat\n+        f = DateTimeFormat.forPattern(\"yy\").withLocale(Locale.UK);\n+        f = f.withZoneUTC();\n+        f.parseDateTime(\"5\");\n+        f.parseDateTime(\"005\");\n+        f.parseDateTime(\"+50\");\n+        f.parseDateTime(\"-50\");\n+\n+        // Added tests for lenient two digit parsing\n+        f = new DateTimeFormatterBuilder().appendTwoDigitYear(2000, true).toFormatter();\n+        f = f.withZoneUTC();\n+        expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC);\n+        assertEquals(expect, f.parseDateTime(\"04\"));\n+\n+        expect = new DateTime(4, 1, 1, 0, 0, 0, 0, UTC);\n+        assertEquals(expect, f.parseDateTime(\"+04\"));\n+\n+        expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC);\n+        assertEquals(expect, f.parseDateTime(\"-04\"));\n+\n+        expect = new DateTime(4, 1, 1, 0, 0, 0, 0, UTC);\n+        assertEquals(expect, f.parseDateTime(\"4\"));\n+\n+        expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC);\n+        assertEquals(expect, f.parseDateTime(\"-4\"));\n+\n+        expect = new DateTime(4, 1, 1, 0, 0, 0, 0, UTC);\n+        assertEquals(expect, f.parseDateTime(\"004\"));\n+\n+        expect = new DateTime(4, 1, 1, 0, 0, 0, 0, UTC);\n+        assertEquals(expect, f.parseDateTime(\"+004\"));\n+\n+        expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC);\n+        assertEquals(expect, f.parseDateTime(\"-004\"));\n+\n+        expect = new DateTime(3004, 1, 1, 0, 0, 0, 0, UTC);\n+        assertEquals(expect, f.parseDateTime(\"3004\"));\n+\n+        expect = new DateTime(3004, 1, 1, 0, 0, 0, 0, UTC);\n+        assertEquals(expect, f.parseDateTime(\"+3004\"));\n+\n+        expect = new DateTime(-3004, 1, 1, 0, 0, 0, 0, UTC);\n+        assertEquals(expect, f.parseDateTime(\"-3004\"));\n+\n+        try {\n+            f.parseDateTime(\"-\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+\n+        try {\n+            f.parseDateTime(\"+\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testFormat_year_long() {\n+        DateTime dt = new DateTime(278004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"yyyy\");\n+        assertEquals(dt.toString(), \"278004\", f.print(dt));\n+        \n+        // for coverage\n+        f = DateTimeFormat.forPattern(\"yyyyMMdd\");\n+        assertEquals(dt.toString(), \"2780040609\", f.print(dt));\n+        \n+        // for coverage\n+        f = DateTimeFormat.forPattern(\"yyyyddMM\");\n+        assertEquals(dt.toString(), \"2780040906\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_weekyear() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"x\").withLocale(Locale.UK);\n+        assertEquals(dt.toString(), \"2004\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"2004\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"2004\", f.print(dt));\n+        \n+        dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(dt.toString(), \"-123\", f.print(dt));\n+    }\n+\n+    public void testFormat_weekyearOfEra_twoDigit() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"xx\").withLocale(Locale.UK);\n+        assertEquals(dt.toString(), \"04\", f.print(dt));\n+        \n+        dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(dt.toString(), \"23\", f.print(dt));\n+        \n+        // current time set to 2002-06-09\n+        f = f.withZoneUTC();\n+        DateTime expect = null;\n+        expect = new DateTime(2003, 12, 29, 0, 0, 0, 0, UTC);\n+        assertEquals(expect, f.parseDateTime(\"04\"));\n+        \n+        expect = new DateTime(1922, 1, 2, 0, 0, 0, 0, UTC);\n+        assertEquals(expect, f.parseDateTime(\"22\"));\n+        \n+        expect = new DateTime(2021, 1, 4, 0, 0, 0, 0, UTC);\n+        assertEquals(expect, f.parseDateTime(\"21\"));\n+\n+        // Added tests to ensure single sign digit parse fails properly\n+        try {\n+            f.parseDateTime(\"-\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+\n+        try {\n+            f.parseDateTime(\"+\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+\n+        // Added tests for pivot year setting\n+        f = f.withPivotYear(new Integer(2050));\n+        expect = new DateTime(2000, 1, 3, 0, 0, 0, 0, DateTimeZone.UTC);\n+        assertEquals(expect, f.parseDateTime(\"00\"));\n+\n+        expect = new DateTime(2098, 12, 29, 0, 0, 0, 0, DateTimeZone.UTC);\n+        assertEquals(expect, f.parseDateTime(\"99\"));\n+\n+        // Added tests to ensure two digit parsing is strict by default for\n+        // DateTimeFormatterBuilder\n+        f = new DateTimeFormatterBuilder().appendTwoDigitWeekyear(2000).toFormatter();\n+        f = f.withZoneUTC();\n+        try {\n+            f.parseDateTime(\"5\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            f.parseDateTime(\"005\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            f.parseDateTime(\"+50\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            f.parseDateTime(\"-50\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+\n+        // Added tests to ensure two digit parsing is lenient for DateTimeFormat\n+        f = DateTimeFormat.forPattern(\"xx\").withLocale(Locale.UK);\n+        f = f.withZoneUTC();\n+        f.parseDateTime(\"5\");\n+        f.parseDateTime(\"005\");\n+        f.parseDateTime(\"+50\");\n+        f.parseDateTime(\"-50\");\n+\n+        // Added tests for lenient two digit parsing\n+        f = new DateTimeFormatterBuilder().appendTwoDigitWeekyear(2000, true).toFormatter();\n+        f = f.withZoneUTC();\n+        expect = new DateTime(2003, 12, 29, 0, 0, 0, 0, UTC);\n+        assertEquals(expect, f.parseDateTime(\"04\"));\n+\n+        expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC);\n+        assertEquals(expect, f.parseDateTime(\"+04\"));\n+\n+        expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC);\n+        assertEquals(expect, f.parseDateTime(\"-04\"));\n+\n+        expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC);\n+        assertEquals(expect, f.parseDateTime(\"4\"));\n+\n+        expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC);\n+        assertEquals(expect, f.parseDateTime(\"-4\"));\n+\n+        expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC);\n+        assertEquals(expect, f.parseDateTime(\"004\"));\n+\n+        expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC);\n+        assertEquals(expect, f.parseDateTime(\"+004\"));\n+\n+        expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC);\n+        assertEquals(expect, f.parseDateTime(\"-004\"));\n+\n+        expect = new DateTime(3004, 1, 2, 0, 0, 0, 0, UTC);\n+        assertEquals(expect, f.parseDateTime(\"3004\"));\n+\n+        expect = new DateTime(3004, 1, 2, 0, 0, 0, 0, UTC);\n+        assertEquals(expect, f.parseDateTime(\"+3004\"));\n+\n+        expect = new DateTime(-3004, 1, 4, 0, 0, 0, 0, UTC);\n+        assertEquals(expect, f.parseDateTime(\"-3004\"));\n+\n+        try {\n+            f.parseDateTime(\"-\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+\n+        try {\n+            f.parseDateTime(\"+\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_weekOfWeekyear() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"w\").withLocale(Locale.UK);\n+        assertEquals(dt.toString(), \"24\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"24\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"24\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_dayOfWeek() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"e\").withLocale(Locale.UK);\n+        assertEquals(dt.toString(), \"3\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"3\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"3\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_dayOfWeekShortText() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"E\").withLocale(Locale.UK);\n+        assertEquals(dt.toString(), \"Wed\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"Wed\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"Wed\", f.print(dt));\n+        \n+        f = f.withLocale(Locale.FRENCH);\n+        assertEquals(dt.toString(), \"mer.\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_dayOfWeekText() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"EEEE\").withLocale(Locale.UK);\n+        assertEquals(dt.toString(), \"Wednesday\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"Wednesday\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"Wednesday\", f.print(dt));\n+        \n+        f = f.withLocale(Locale.FRENCH);\n+        assertEquals(dt.toString(), \"mercredi\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_dayOfYearText() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"D\").withLocale(Locale.UK);\n+        assertEquals(dt.toString(), \"161\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"161\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"161\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_monthOfYear() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"M\").withLocale(Locale.UK);\n+        assertEquals(dt.toString(), \"6\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"6\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"6\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_monthOfYearShortText() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"MMM\").withLocale(Locale.UK);\n+        assertEquals(dt.toString(), \"Jun\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"Jun\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"Jun\", f.print(dt));\n+        \n+        f = f.withLocale(Locale.FRENCH);\n+        assertEquals(dt.toString(), \"juin\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_monthOfYearText() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"MMMM\").withLocale(Locale.UK);\n+        assertEquals(dt.toString(), \"June\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"June\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"June\", f.print(dt));\n+        \n+        f = f.withLocale(Locale.FRENCH);\n+        assertEquals(dt.toString(), \"juin\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_dayOfMonth() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"d\").withLocale(Locale.UK);\n+        assertEquals(dt.toString(), \"9\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"9\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"9\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_halfdayOfDay() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"a\").withLocale(Locale.UK);\n+        assertEquals(dt.toString(), \"AM\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"AM\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"PM\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_hourOfHalfday() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"K\").withLocale(Locale.UK);\n+        assertEquals(dt.toString(), \"10\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"6\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"7\", f.print(dt));\n+        \n+        dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, UTC);\n+        assertEquals(dt.toString(), \"0\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_clockhourOfHalfday() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"h\").withLocale(Locale.UK);\n+        assertEquals(dt.toString(), \"10\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"6\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"7\", f.print(dt));\n+        \n+        dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, UTC);\n+        assertEquals(dt.toString(), \"12\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_hourOfDay() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"H\").withLocale(Locale.UK);\n+        assertEquals(dt.toString(), \"10\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"6\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"19\", f.print(dt));\n+        \n+        dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, UTC);\n+        assertEquals(dt.toString(), \"0\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_clockhourOfDay() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"k\").withLocale(Locale.UK);\n+        assertEquals(dt.toString(), \"10\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"6\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"19\", f.print(dt));\n+        \n+        dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, UTC);\n+        assertEquals(dt.toString(), \"24\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_minute() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"m\").withLocale(Locale.UK);\n+        assertEquals(dt.toString(), \"20\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"20\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"20\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_second() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"s\").withLocale(Locale.UK);\n+        assertEquals(dt.toString(), \"30\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"30\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"30\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_fractionOfSecond() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"SSS\").withLocale(Locale.UK);\n+        assertEquals(dt.toString(), \"040\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"040\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"040\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_fractionOfSecondLong() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"SSSSSS\").withLocale(Locale.UK);\n+        assertEquals(dt.toString(), \"040000\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"040000\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"040000\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_zoneText() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"z\").withLocale(Locale.UK);\n+        assertEquals(dt.toString(), \"UTC\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"EDT\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"JST\", f.print(dt));\n+    }\n+\n+    public void testFormat_zoneLongText() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"zzzz\").withLocale(Locale.UK);\n+        assertEquals(dt.toString(), \"Coordinated Universal Time\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"Eastern Daylight Time\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"Japan Standard Time\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_zoneAmount() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"Z\").withLocale(Locale.UK);\n+        assertEquals(dt.toString(), \"+0000\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"-0400\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"+0900\", f.print(dt));\n+    }\n+\n+    public void testFormat_zoneAmountColon() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"ZZ\").withLocale(Locale.UK);\n+        assertEquals(dt.toString(), \"+00:00\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"-04:00\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"+09:00\", f.print(dt));\n+    }\n+\n+    public void testFormat_zoneAmountID() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"ZZZ\").withLocale(Locale.UK);\n+        assertEquals(dt.toString(), \"UTC\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"America/New_York\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"Asia/Tokyo\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_other() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"'Hello' ''\");\n+        assertEquals(\"Hello '\", f.print(dt));\n+    }\n+\n+    public void testFormat_invalid() {\n+        try {\n+            DateTimeFormat.forPattern(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateTimeFormat.forPattern(\"\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateTimeFormat.forPattern(\"A\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateTimeFormat.forPattern(\"dd/mm/AA\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testFormat_samples() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"yyyy-MM-dd HH.mm.ss\");\n+        assertEquals(\"2004-06-09 10.20.30\", f.print(dt));\n+    }\n+\n+    public void testFormat_shortBasicParse() {\n+        // Tests special two digit parse to make sure it properly switches\n+        // between lenient and strict parsing.\n+\n+        DateTime dt = new DateTime(2004, 3, 9, 0, 0, 0, 0);\n+\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"yyMMdd\");\n+        assertEquals(dt, f.parseDateTime(\"040309\"));\n+        try {\n+            assertEquals(dt, f.parseDateTime(\"20040309\"));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+\n+        f = DateTimeFormat.forPattern(\"yy/MM/dd\");\n+        assertEquals(dt, f.parseDateTime(\"04/03/09\"));\n+        assertEquals(dt, f.parseDateTime(\"2004/03/09\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParse_pivotYear() {\n+        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"dd.MM.yy\").withPivotYear(2050).withZoneUTC();\n+        \n+        DateTime date = dateFormatter.parseDateTime(\"25.12.15\");\n+        assertEquals(date.getYear(), 2015);\n+        \n+        date = dateFormatter.parseDateTime(\"25.12.00\");\n+        assertEquals(date.getYear(), 2000);\n+        \n+        date = dateFormatter.parseDateTime(\"25.12.99\");\n+        assertEquals(date.getYear(), 2099);\n+    }\n+\n+    public void testParse_pivotYear_ignored4DigitYear() {\n+        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"dd.MM.yyyy\").withPivotYear(2050).withZoneUTC();\n+        \n+        DateTime date = dateFormatter.parseDateTime(\"25.12.15\");\n+        assertEquals(date.getYear(), 15);\n+        \n+        date = dateFormatter.parseDateTime(\"25.12.00\");\n+        assertEquals(date.getYear(), 0);\n+        \n+        date = dateFormatter.parseDateTime(\"25.12.99\");\n+        assertEquals(date.getYear(), 99);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormatParse_textMonthJanShort_UK() {\n+        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"dd MMM yyyy\")\n+            .withLocale(Locale.UK).withZoneUTC();\n+        \n+        String str = new DateTime(2007, 1, 23, 0, 0, 0, 0, UTC).toString(dateFormatter);\n+        assertEquals(str, \"23 Jan 2007\");\n+        DateTime date = dateFormatter.parseDateTime(str);\n+        check(date, 2007, 1, 23);\n+    }\n+\n+    public void testFormatParse_textMonthJanShortLowerCase_UK() {\n+        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"dd MMM yyyy\")\n+            .withLocale(Locale.UK).withZoneUTC();\n+        DateTime date = dateFormatter.parseDateTime(\"23 jan 2007\");\n+        check(date, 2007, 1, 23);\n+    }\n+\n+    public void testFormatParse_textMonthJanShortUpperCase_UK() {\n+        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"dd MMM yyyy\")\n+            .withLocale(Locale.UK).withZoneUTC();\n+        DateTime date = dateFormatter.parseDateTime(\"23 JAN 2007\");\n+        check(date, 2007, 1, 23);\n+    }\n+\n+    public void testParse_textMonthJanLong_UK() {\n+        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"dd MMM yyyy\")\n+            .withLocale(Locale.UK).withZoneUTC();\n+        \n+        DateTime date = dateFormatter.parseDateTime(\"23 January 2007\");\n+        check(date, 2007, 1, 23);\n+    }\n+\n+    public void testFormatParse_textMonthJanLongLowerCase_UK() {\n+        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"dd MMM yyyy\")\n+            .withLocale(Locale.UK).withZoneUTC();\n+        DateTime date = dateFormatter.parseDateTime(\"23 january 2007\");\n+        check(date, 2007, 1, 23);\n+    }\n+\n+    public void testFormatParse_textMonthJanLongUpperCase_UK() {\n+        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"dd MMM yyyy\")\n+            .withLocale(Locale.UK).withZoneUTC();\n+        DateTime date = dateFormatter.parseDateTime(\"23 JANUARY 2007\");\n+        check(date, 2007, 1, 23);\n+    }\n+\n+    public void testFormatParse_textMonthJanShort_France() {\n+        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"dd MMM yyyy\")\n+            .withLocale(Locale.FRANCE).withZoneUTC();\n+        \n+        String str = new DateTime(2007, 1, 23, 0, 0, 0, 0, UTC).toString(dateFormatter);\n+        assertEquals(\"23 janv. 2007\", str);\n+        DateTime date = dateFormatter.parseDateTime(str);\n+        check(date, 2007, 1, 23);\n+    }\n+\n+    public void testFormatParse_textMonthJanLong_France() {\n+        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"dd MMM yyyy\")\n+            .withLocale(Locale.FRANCE).withZoneUTC();\n+        \n+        DateTime date = dateFormatter.parseDateTime(\"23 janvier 2007\");\n+        check(date, 2007, 1, 23);\n+    }\n+\n+    public void testFormatParse_textMonthApr_France() {\n+        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"dd MMM yyyy\")\n+            .withLocale(Locale.FRANCE).withZoneUTC();\n+        \n+        String str = new DateTime(2007, 2, 23, 0, 0, 0, 0, UTC).toString(dateFormatter);\n+        assertEquals(\"23 f\\u00E9vr. 2007\", str);  // e acute\n+        DateTime date = dateFormatter.parseDateTime(str);\n+        check(date, 2007, 2, 23);\n+    }\n+\n+    public void testFormatParse_textMonthAtEnd_France() {\n+        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"dd MMM\")\n+            .withLocale(Locale.FRANCE).withZoneUTC();\n+        \n+        String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter);\n+        assertEquals(\"23 juin\", str);\n+        DateTime date = dateFormatter.parseDateTime(str);\n+        check(date, 1970, 6, 23);\n+    }\n+\n+    public void testFormatParse_textMonthApr_Korean() {\n+        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"EEEE, d MMMM yyyy HH:mm\")\n+            .withLocale(Locale.KOREAN).withZoneUTC();\n+        \n+        String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter);\n+        DateTime date = dateFormatter.parseDateTime(str);\n+        assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormatParse_textHalfdayAM_UK() {\n+        DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder()\n+            .appendLiteral('$')\n+            .appendClockhourOfHalfday(2)\n+            .appendLiteral('-')\n+            .appendHalfdayOfDayText()\n+            .appendLiteral('-')\n+            .appendYear(4, 4)\n+            .toFormatter()\n+            .withLocale(Locale.UK).withZoneUTC();\n+        \n+        String str = new DateTime(2007, 6, 23, 18, 0, 0, 0, UTC).toString(dateFormatter);\n+        assertEquals(\"$06-PM-2007\", str);\n+        DateTime date = dateFormatter.parseDateTime(str);\n+        check(date, 2007, 1, 1);\n+    }\n+\n+    public void testFormatParse_textHalfdayAM_France() {\n+        DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder()\n+            .appendLiteral('$')\n+            .appendClockhourOfHalfday(2)\n+            .appendLiteral('-')\n+            .appendHalfdayOfDayText()\n+            .appendLiteral('-')\n+            .appendYear(4, 4)\n+            .toFormatter()\n+            .withLocale(Locale.FRANCE).withZoneUTC();\n+        \n+        String str = new DateTime(2007, 6, 23, 18, 0, 0, 0, UTC).toString(dateFormatter);\n+        assertEquals(\"$06-PM-2007\", str);\n+        DateTime date = dateFormatter.parseDateTime(str);\n+        check(date, 2007, 1, 1);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormatParse_textEraAD_UK() {\n+        DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder()\n+            .appendLiteral('$')\n+            .appendEraText()\n+            .appendYear(4, 4)\n+            .toFormatter()\n+            .withLocale(Locale.UK).withZoneUTC();\n+        \n+        String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter);\n+        assertEquals(\"$AD2007\", str);\n+        DateTime date = dateFormatter.parseDateTime(str);\n+        check(date, 2007, 1, 1);\n+    }\n+\n+    public void testFormatParse_textEraAD_France() {\n+        DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder()\n+            .appendLiteral('$')\n+            .appendEraText()\n+            .appendYear(4, 4)\n+            .toFormatter()\n+            .withLocale(Locale.FRANCE).withZoneUTC();\n+        \n+        String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter);\n+        assertEquals(\"$ap. J.-C.2007\", str);\n+        DateTime date = dateFormatter.parseDateTime(str);\n+        check(date, 2007, 1, 1);\n+    }\n+\n+    public void testFormatParse_textEraBC_France() {\n+        DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder()\n+            .appendLiteral('$')\n+            .appendEraText()\n+            .appendYear(4, 4)\n+            .toFormatter()\n+            .withLocale(Locale.FRANCE).withZoneUTC();\n+        \n+        String str = new DateTime(-1, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter);\n+        assertEquals(\"$BC-0001\", str);\n+        DateTime date = dateFormatter.parseDateTime(str);\n+        check(date, -1, 1, 1);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormatParse_textYear_UK() {\n+        DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder()\n+            .appendLiteral('$')\n+            .appendText(DateTimeFieldType.year())\n+            .toFormatter()\n+            .withLocale(Locale.UK).withZoneUTC();\n+        \n+        String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter);\n+        assertEquals(\"$2007\", str);\n+        try {\n+            dateFormatter.parseDateTime(str);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testFormatParse_textYear_France() {\n+        DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder()\n+            .appendLiteral('$')\n+            .appendText(DateTimeFieldType.year())\n+            .toFormatter()\n+            .withLocale(Locale.FRANCE).withZoneUTC();\n+        \n+        String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter);\n+        assertEquals(\"$2007\", str);\n+        try {\n+            dateFormatter.parseDateTime(str);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormatParse_textAdjoiningHelloWorld_UK() {\n+        DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder()\n+            .appendLiteral('$')\n+            .appendDayOfMonth(2)\n+            .appendMonthOfYearShortText()\n+            .appendLiteral(\"HelloWorld\")\n+            .toFormatter()\n+            .withLocale(Locale.UK).withZoneUTC();\n+        \n+        String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter);\n+        assertEquals(\"$23JunHelloWorld\", str);\n+        dateFormatter.parseDateTime(str);\n+    }\n+\n+    public void testFormatParse_textAdjoiningMonthDOW_UK() {\n+        DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder()\n+            .appendLiteral('$')\n+            .appendDayOfMonth(2)\n+            .appendMonthOfYearShortText()\n+            .appendDayOfWeekShortText()\n+            .toFormatter()\n+            .withLocale(Locale.UK).withZoneUTC();\n+        \n+        String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter);\n+        assertEquals(\"$23JunSat\", str);\n+        dateFormatter.parseDateTime(str);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormatParse_zoneId_noColon() {\n+        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"HH:mm Z\").withZoneUTC();\n+        String str = new DateTime(2007, 6, 23, 1, 2, 0, 0, UTC).toString(dateFormatter);\n+        assertEquals(\"01:02 +0000\", str);\n+        DateTime parsed = dateFormatter.parseDateTime(str);\n+        assertEquals(1, parsed.getHourOfDay());\n+        assertEquals(2, parsed.getMinuteOfHour());\n+    }\n+\n+    public void testFormatParse_zoneId_noColon_parseZ() {\n+        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"HH:mm Z\").withZoneUTC();\n+        DateTime parsed = dateFormatter.parseDateTime(\"01:02 Z\");\n+        assertEquals(1, parsed.getHourOfDay());\n+        assertEquals(2, parsed.getMinuteOfHour());\n+    }\n+\n+    public void testFormatParse_zoneId_colon() {\n+        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"HH:mm ZZ\").withZoneUTC();\n+        String str = new DateTime(2007, 6, 23, 1, 2, 0, 0, UTC).toString(dateFormatter);\n+        assertEquals(\"01:02 +00:00\", str);\n+        DateTime parsed = dateFormatter.parseDateTime(str);\n+        assertEquals(1, parsed.getHourOfDay());\n+        assertEquals(2, parsed.getMinuteOfHour());\n+    }\n+\n+    public void testFormatParse_zoneId_colon_parseZ() {\n+        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"HH:mm ZZ\").withZoneUTC();\n+        DateTime parsed = dateFormatter.parseDateTime(\"01:02 Z\");\n+        assertEquals(1, parsed.getHourOfDay());\n+        assertEquals(2, parsed.getMinuteOfHour());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private void check(DateTime test, int hour, int min, int sec) {\n+        assertEquals(hour, test.getYear());\n+        assertEquals(min, test.getMonthOfYear());\n+        assertEquals(sec, test.getDayOfMonth());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/format/TestDateTimeFormatStyle.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.format;\n+\n+import java.text.DateFormat;\n+import java.util.Locale;\n+import java.util.SimpleTimeZone;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeUtils;\n+import org.joda.time.DateTimeZone;\n+\n+/**\n+ * This class is a Junit unit test for DateTimeFormat styles.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestDateTimeFormatStyle extends TestCase {\n+\n+    private static final Locale UK = Locale.UK;\n+    private static final Locale US = Locale.US;\n+    private static final Locale FRANCE = Locale.FRANCE;\n+    private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    private static final DateTimeZone NEWYORK = DateTimeZone.forID(\"America/New_York\");\n+\n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestDateTimeFormatStyle.class);\n+    }\n+\n+    public TestDateTimeFormatStyle(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForStyle_stringLengths() {\n+        try {\n+            DateTimeFormat.forStyle(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateTimeFormat.forStyle(\"\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateTimeFormat.forStyle(\"S\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateTimeFormat.forStyle(\"SSS\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testForStyle_invalidStrings() {\n+        try {\n+            DateTimeFormat.forStyle(\"AA\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateTimeFormat.forStyle(\"--\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateTimeFormat.forStyle(\"ss\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForStyle_shortDate() throws Exception {\n+        DateTimeFormatter f = DateTimeFormat.shortDate();\n+        DateTimeFormatter g = DateTimeFormat.forStyle(\"S-\");\n+        assertSame(g, f);\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0);\n+        String expect = DateFormat.getDateInstance(DateFormat.SHORT, UK).format(dt.toDate());\n+        assertEquals(expect, f.print(dt));\n+        expect = DateFormat.getDateInstance(DateFormat.SHORT, US).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(US).print(dt));\n+        expect = DateFormat.getDateInstance(DateFormat.SHORT, FRANCE).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(FRANCE).print(dt));\n+        \n+        DateTime date = new DateTime(\n+                DateFormat.getDateInstance(DateFormat.SHORT, FRANCE).parse(expect));\n+        assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect));\n+    }\n+\n+    public void testForStyle_shortTime() throws Exception {\n+        DateTimeFormatter f = DateTimeFormat.shortTime();\n+        DateTimeFormatter g = DateTimeFormat.forStyle(\"-S\");\n+        assertSame(g, f);\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0);\n+        String expect = DateFormat.getTimeInstance(DateFormat.SHORT, UK).format(dt.toDate());\n+        assertEquals(expect, f.print(dt));\n+        expect = DateFormat.getTimeInstance(DateFormat.SHORT, US).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(US).print(dt));\n+        expect = DateFormat.getTimeInstance(DateFormat.SHORT, FRANCE).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(FRANCE).print(dt));\n+        \n+        if (TimeZone.getDefault() instanceof SimpleTimeZone) {\n+            // skip test, as it needs historical time zone info\n+        } else {\n+            DateTime date = new DateTime(\n+                DateFormat.getTimeInstance(DateFormat.SHORT, FRANCE).parse(expect));\n+            assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect));\n+        }\n+    }\n+\n+    public void testForStyle_shortDateTime() throws Exception {\n+        DateTimeFormatter f = DateTimeFormat.shortDateTime();\n+        DateTimeFormatter g = DateTimeFormat.forStyle(\"SS\");\n+        assertSame(g, f);\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0);\n+        String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, UK).format(dt.toDate());\n+        assertEquals(expect, f.print(dt));\n+        expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, US).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(US).print(dt));\n+        expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(FRANCE).print(dt));\n+        \n+        DateTime date = new DateTime(\n+            DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, FRANCE).parse(expect));\n+        assertEquals(date, f.withLocale(FRANCE).parseDateTime(expect));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForStyle_mediumDate() throws Exception {\n+        DateTimeFormatter f = DateTimeFormat.mediumDate();\n+        DateTimeFormatter g = DateTimeFormat.forStyle(\"M-\");\n+        assertSame(g, f);\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0);\n+        String expect = DateFormat.getDateInstance(DateFormat.MEDIUM, UK).format(dt.toDate());\n+        assertEquals(expect, f.print(dt));\n+        expect = DateFormat.getDateInstance(DateFormat.MEDIUM, US).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(US).print(dt));\n+        expect = DateFormat.getDateInstance(DateFormat.MEDIUM, FRANCE).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(FRANCE).print(dt));\n+    }\n+\n+    public void testForStyle_mediumTime() throws Exception {\n+        DateTimeFormatter f = DateTimeFormat.mediumTime();\n+        DateTimeFormatter g = DateTimeFormat.forStyle(\"-M\");\n+        assertSame(g, f);\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0);\n+        String expect = DateFormat.getTimeInstance(DateFormat.MEDIUM, UK).format(dt.toDate());\n+        assertEquals(expect, f.print(dt));\n+        expect = DateFormat.getTimeInstance(DateFormat.MEDIUM, US).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(US).print(dt));\n+        expect = DateFormat.getTimeInstance(DateFormat.MEDIUM, FRANCE).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(FRANCE).print(dt));\n+    }\n+\n+    public void testForStyle_mediumDateTime() throws Exception {\n+        DateTimeFormatter f = DateTimeFormat.mediumDateTime();\n+        DateTimeFormatter g = DateTimeFormat.forStyle(\"MM\");\n+        assertSame(g, f);\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0);\n+        String expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, UK).format(dt.toDate());\n+        assertEquals(expect, f.print(dt));\n+        expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, US).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(US).print(dt));\n+        expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM, FRANCE).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(FRANCE).print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForStyle_longDate() throws Exception {\n+        DateTimeFormatter f = DateTimeFormat.longDate();\n+        DateTimeFormatter g = DateTimeFormat.forStyle(\"L-\");\n+        assertSame(g, f);\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0);\n+        String expect = DateFormat.getDateInstance(DateFormat.LONG, UK).format(dt.toDate());\n+        assertEquals(expect, f.print(dt));\n+        expect = DateFormat.getDateInstance(DateFormat.LONG, US).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(US).print(dt));\n+        expect = DateFormat.getDateInstance(DateFormat.LONG, FRANCE).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(FRANCE).print(dt));\n+    }\n+\n+    public void testForStyle_longTime() throws Exception {\n+        DateTimeFormatter f = DateTimeFormat.longTime();\n+        DateTimeFormatter g = DateTimeFormat.forStyle(\"-L\");\n+        assertSame(g, f);\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0);\n+        String expect = DateFormat.getTimeInstance(DateFormat.LONG, UK).format(dt.toDate());\n+        assertEquals(expect, f.print(dt));\n+        expect = DateFormat.getTimeInstance(DateFormat.LONG, US).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(US).print(dt));\n+        expect = DateFormat.getTimeInstance(DateFormat.LONG, FRANCE).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(FRANCE).print(dt));\n+    }\n+\n+    public void testForStyle_longDateTime() throws Exception {\n+        DateTimeFormatter f = DateTimeFormat.longDateTime();\n+        DateTimeFormatter g = DateTimeFormat.forStyle(\"LL\");\n+        assertSame(g, f);\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0);\n+        String expect = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, UK).format(dt.toDate());\n+        assertEquals(expect, f.print(dt));\n+        expect = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, US).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(US).print(dt));\n+        expect = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, FRANCE).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(FRANCE).print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForStyle_fullDate() throws Exception {\n+        DateTimeFormatter f = DateTimeFormat.fullDate();\n+        DateTimeFormatter g = DateTimeFormat.forStyle(\"F-\");\n+        assertSame(g, f);\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0);\n+        String expect = DateFormat.getDateInstance(DateFormat.FULL, UK).format(dt.toDate());\n+        assertEquals(expect, f.print(dt));\n+        expect = DateFormat.getDateInstance(DateFormat.FULL, US).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(US).print(dt));\n+        expect = DateFormat.getDateInstance(DateFormat.FULL, FRANCE).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(FRANCE).print(dt));\n+    }\n+\n+    public void testForStyle_fullTime() throws Exception {\n+        DateTimeFormatter f = DateTimeFormat.fullTime();\n+        DateTimeFormatter g = DateTimeFormat.forStyle(\"-F\");\n+        assertSame(g, f);\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0);\n+        String expect = DateFormat.getTimeInstance(DateFormat.FULL, UK).format(dt.toDate());\n+        assertEquals(expect, f.print(dt));\n+        expect = DateFormat.getTimeInstance(DateFormat.FULL, US).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(US).print(dt));\n+        expect = DateFormat.getTimeInstance(DateFormat.FULL, FRANCE).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(FRANCE).print(dt));\n+    }\n+\n+    public void testForStyle_fullDateTime() throws Exception {\n+        DateTimeFormatter f = DateTimeFormat.fullDateTime();\n+        DateTimeFormatter g = DateTimeFormat.forStyle(\"FF\");\n+        assertSame(g, f);\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0);\n+        String expect = DateFormat.getDateTimeInstance(DateFormat.FULL, DateFormat.FULL, UK).format(dt.toDate());\n+        assertEquals(expect, f.print(dt));\n+        expect = DateFormat.getDateTimeInstance(DateFormat.FULL, DateFormat.FULL, US).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(US).print(dt));\n+        expect = DateFormat.getDateTimeInstance(DateFormat.FULL, DateFormat.FULL, FRANCE).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(FRANCE).print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForStyle_shortMediumDateTime() throws Exception {\n+        DateTimeFormatter f = DateTimeFormat.forStyle(\"SM\");\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0);\n+        String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, UK).format(dt.toDate());\n+        assertEquals(expect, f.print(dt));\n+        expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, US).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(US).print(dt));\n+        expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, FRANCE).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(FRANCE).print(dt));\n+    }\n+\n+    public void testForStyle_shortLongDateTime() throws Exception {\n+        DateTimeFormatter f = DateTimeFormat.forStyle(\"SL\");\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0);\n+        String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.LONG, UK).format(dt.toDate());\n+        assertEquals(expect, f.print(dt));\n+        expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.LONG, US).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(US).print(dt));\n+        expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.LONG, FRANCE).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(FRANCE).print(dt));\n+    }\n+\n+    public void testForStyle_shortFullDateTime() throws Exception {\n+        DateTimeFormatter f = DateTimeFormat.forStyle(\"SF\");\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0);\n+        String expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.FULL, UK).format(dt.toDate());\n+        assertEquals(expect, f.print(dt));\n+        expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.FULL, US).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(US).print(dt));\n+        expect = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.FULL, FRANCE).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(FRANCE).print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForStyle_mediumShortDateTime() throws Exception {\n+        DateTimeFormatter f = DateTimeFormat.forStyle(\"MS\");\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0);\n+        String expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.SHORT, UK).format(dt.toDate());\n+        assertEquals(expect, f.print(dt));\n+        expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.SHORT, US).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(US).print(dt));\n+        expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.SHORT, FRANCE).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(FRANCE).print(dt));\n+    }\n+\n+    public void testForStyle_mediumLongDateTime() throws Exception {\n+        DateTimeFormatter f = DateTimeFormat.forStyle(\"ML\");\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0);\n+        String expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.LONG, UK).format(dt.toDate());\n+        assertEquals(expect, f.print(dt));\n+        expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.LONG, US).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(US).print(dt));\n+        expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.LONG, FRANCE).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(FRANCE).print(dt));\n+    }\n+\n+    public void testForStyle_mediumFullDateTime() throws Exception {\n+        DateTimeFormatter f = DateTimeFormat.forStyle(\"MF\");\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0);\n+        String expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.FULL, UK).format(dt.toDate());\n+        assertEquals(expect, f.print(dt));\n+        expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.FULL, US).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(US).print(dt));\n+        expect = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.FULL, FRANCE).format(dt.toDate());\n+        assertEquals(expect, f.withLocale(FRANCE).print(dt));\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/format/TestDateTimeFormatter.java\n+/*\n+ *  Copyright 2001-2009 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.format;\n+\n+import java.io.CharArrayWriter;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeUtils;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.LocalDate;\n+import org.joda.time.LocalDateTime;\n+import org.joda.time.LocalTime;\n+import org.joda.time.MutableDateTime;\n+import org.joda.time.ReadablePartial;\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * This class is a Junit unit test for DateTime Formating.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestDateTimeFormatter extends TestCase {\n+\n+    private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    private static final DateTimeZone NEWYORK = DateTimeZone.forID(\"America/New_York\");\n+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n+\n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+    private DateTimeFormatter f = null;\n+    private DateTimeFormatter g = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestDateTimeFormatter.class);\n+    }\n+\n+    public TestDateTimeFormatter(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+        f = new DateTimeFormatterBuilder()\n+                .appendDayOfWeekShortText()\n+                .appendLiteral(' ')\n+                .append(ISODateTimeFormat.dateTimeNoMillis())\n+                .toFormatter();\n+        g = ISODateTimeFormat.dateTimeNoMillis();\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+        f = null;\n+        g = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPrint_simple() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"Wed 2004-06-09T10:20:30Z\", f.print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"Wed 2004-06-09T12:20:30+02:00\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(\"Wed 2004-06-09T06:20:30-04:00\", f.print(dt));\n+        \n+        dt = dt.withChronology(BUDDHIST_PARIS);\n+        assertEquals(\"Wed 2547-06-09T12:20:30+02:00\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPrint_locale() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"mer. 2004-06-09T10:20:30Z\", f.withLocale(Locale.FRENCH).print(dt));\n+        assertEquals(\"Wed 2004-06-09T10:20:30Z\", f.withLocale(null).print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPrint_zone() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"Wed 2004-06-09T06:20:30-04:00\", f.withZone(NEWYORK).print(dt));\n+        assertEquals(\"Wed 2004-06-09T12:20:30+02:00\", f.withZone(PARIS).print(dt));\n+        assertEquals(\"Wed 2004-06-09T10:20:30Z\", f.withZone(null).print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(\"Wed 2004-06-09T06:20:30-04:00\", f.withZone(NEWYORK).print(dt));\n+        assertEquals(\"Wed 2004-06-09T12:20:30+02:00\", f.withZone(PARIS).print(dt));\n+        assertEquals(\"Wed 2004-06-09T10:20:30Z\", f.withZoneUTC().print(dt));\n+        assertEquals(\"Wed 2004-06-09T06:20:30-04:00\", f.withZone(null).print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPrint_chrono() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"Wed 2004-06-09T12:20:30+02:00\", f.withChronology(ISO_PARIS).print(dt));\n+        assertEquals(\"Wed 2547-06-09T12:20:30+02:00\", f.withChronology(BUDDHIST_PARIS).print(dt));\n+        assertEquals(\"Wed 2004-06-09T10:20:30Z\", f.withChronology(null).print(dt));\n+        \n+        dt = dt.withChronology(BUDDHIST_PARIS);\n+        assertEquals(\"Wed 2004-06-09T12:20:30+02:00\", f.withChronology(ISO_PARIS).print(dt));\n+        assertEquals(\"Wed 2547-06-09T12:20:30+02:00\", f.withChronology(BUDDHIST_PARIS).print(dt));\n+        assertEquals(\"Wed 2004-06-09T10:20:30Z\", f.withChronology(ISO_UTC).print(dt));\n+        assertEquals(\"Wed 2547-06-09T12:20:30+02:00\", f.withChronology(null).print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPrint_bufferMethods() throws Exception {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        StringBuffer buf = new StringBuffer();\n+        f.printTo(buf, dt);\n+        assertEquals(\"Wed 2004-06-09T10:20:30Z\", buf.toString());\n+        \n+        buf = new StringBuffer();\n+        f.printTo(buf, dt.getMillis());\n+        assertEquals(\"Wed 2004-06-09T11:20:30+01:00\", buf.toString());\n+        \n+        buf = new StringBuffer();\n+        ISODateTimeFormat.yearMonthDay().printTo(buf, dt.toYearMonthDay());\n+        assertEquals(\"2004-06-09\", buf.toString());\n+        \n+        buf = new StringBuffer();\n+        try {\n+            ISODateTimeFormat.yearMonthDay().printTo(buf, (ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPrint_writerMethods() throws Exception {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        CharArrayWriter out = new CharArrayWriter();\n+        f.printTo(out, dt);\n+        assertEquals(\"Wed 2004-06-09T10:20:30Z\", out.toString());\n+        \n+        out = new CharArrayWriter();\n+        f.printTo(out, dt.getMillis());\n+        assertEquals(\"Wed 2004-06-09T11:20:30+01:00\", out.toString());\n+        \n+        out = new CharArrayWriter();\n+        ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay());\n+        assertEquals(\"2004-06-09\", out.toString());\n+        \n+        out = new CharArrayWriter();\n+        try {\n+            ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPrint_appendableMethods() throws Exception {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        StringBuilder buf = new StringBuilder();\n+        f.printTo(buf, dt);\n+        assertEquals(\"Wed 2004-06-09T10:20:30Z\", buf.toString());\n+        \n+        buf = new StringBuilder();\n+        f.printTo(buf, dt.getMillis());\n+        assertEquals(\"Wed 2004-06-09T11:20:30+01:00\", buf.toString());\n+        \n+        buf = new StringBuilder();\n+        ISODateTimeFormat.yearMonthDay().printTo(buf, dt.toLocalDate());\n+        assertEquals(\"2004-06-09\", buf.toString());\n+        \n+        buf = new StringBuilder();\n+        try {\n+            ISODateTimeFormat.yearMonthDay().printTo(buf, (ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPrint_chrono_and_zone() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"Wed 2004-06-09T10:20:30Z\",\n+                f.withChronology(null).withZone(null).print(dt));\n+        assertEquals(\"Wed 2004-06-09T12:20:30+02:00\",\n+                f.withChronology(ISO_PARIS).withZone(null).print(dt));\n+        assertEquals(\"Wed 2004-06-09T12:20:30+02:00\",\n+                f.withChronology(ISO_PARIS).withZone(PARIS).print(dt));\n+        assertEquals(\"Wed 2004-06-09T06:20:30-04:00\",\n+                f.withChronology(ISO_PARIS).withZone(NEWYORK).print(dt));\n+        assertEquals(\"Wed 2004-06-09T06:20:30-04:00\",\n+                f.withChronology(null).withZone(NEWYORK).print(dt));\n+        \n+        dt = dt.withChronology(ISO_PARIS);\n+        assertEquals(\"Wed 2004-06-09T12:20:30+02:00\",\n+                f.withChronology(null).withZone(null).print(dt));\n+        assertEquals(\"Wed 2004-06-09T12:20:30+02:00\",\n+                f.withChronology(ISO_PARIS).withZone(null).print(dt));\n+        assertEquals(\"Wed 2004-06-09T12:20:30+02:00\",\n+                f.withChronology(ISO_PARIS).withZone(PARIS).print(dt));\n+        assertEquals(\"Wed 2004-06-09T06:20:30-04:00\",\n+                f.withChronology(ISO_PARIS).withZone(NEWYORK).print(dt));\n+        assertEquals(\"Wed 2004-06-09T06:20:30-04:00\",\n+                f.withChronology(null).withZone(NEWYORK).print(dt));\n+        \n+        dt = dt.withChronology(BUDDHIST_PARIS);\n+        assertEquals(\"Wed 2547-06-09T12:20:30+02:00\",\n+                f.withChronology(null).withZone(null).print(dt));\n+        assertEquals(\"Wed 2004-06-09T12:20:30+02:00\",\n+                f.withChronology(ISO_PARIS).withZone(null).print(dt));\n+        assertEquals(\"Wed 2004-06-09T12:20:30+02:00\",\n+                f.withChronology(ISO_PARIS).withZone(PARIS).print(dt));\n+        assertEquals(\"Wed 2004-06-09T06:20:30-04:00\",\n+                f.withChronology(ISO_PARIS).withZone(NEWYORK).print(dt));\n+        assertEquals(\"Wed 2547-06-09T06:20:30-04:00\",\n+                f.withChronology(null).withZone(NEWYORK).print(dt));\n+    }\n+\n+    public void testWithGetLocale() {\n+        DateTimeFormatter f2 = f.withLocale(Locale.FRENCH);\n+        assertEquals(Locale.FRENCH, f2.getLocale());\n+        assertSame(f2, f2.withLocale(Locale.FRENCH));\n+        \n+        f2 = f.withLocale(null);\n+        assertEquals(null, f2.getLocale());\n+        assertSame(f2, f2.withLocale(null));\n+    }\n+\n+    public void testWithGetZone() {\n+        DateTimeFormatter f2 = f.withZone(PARIS);\n+        assertEquals(PARIS, f2.getZone());\n+        assertSame(f2, f2.withZone(PARIS));\n+        \n+        f2 = f.withZone(null);\n+        assertEquals(null, f2.getZone());\n+        assertSame(f2, f2.withZone(null));\n+    }\n+\n+    public void testWithGetChronology() {\n+        DateTimeFormatter f2 = f.withChronology(BUDDHIST_PARIS);\n+        assertEquals(BUDDHIST_PARIS, f2.getChronology());\n+        assertSame(f2, f2.withChronology(BUDDHIST_PARIS));\n+        \n+        f2 = f.withChronology(null);\n+        assertEquals(null, f2.getChronology());\n+        assertSame(f2, f2.withChronology(null));\n+    }\n+\n+    public void testWithGetPivotYear() {\n+        DateTimeFormatter f2 = f.withPivotYear(13);\n+        assertEquals(new Integer(13), f2.getPivotYear());\n+        assertSame(f2, f2.withPivotYear(13));\n+        \n+        f2 = f.withPivotYear(new Integer(14));\n+        assertEquals(new Integer(14), f2.getPivotYear());\n+        assertSame(f2, f2.withPivotYear(new Integer(14)));\n+        \n+        f2 = f.withPivotYear(null);\n+        assertEquals(null, f2.getPivotYear());\n+        assertSame(f2, f2.withPivotYear(null));\n+    }\n+\n+    public void testWithGetOffsetParsedMethods() {\n+        DateTimeFormatter f2 = f;\n+        assertEquals(false, f2.isOffsetParsed());\n+        assertEquals(null, f2.getZone());\n+        \n+        f2 = f.withOffsetParsed();\n+        assertEquals(true, f2.isOffsetParsed());\n+        assertEquals(null, f2.getZone());\n+        \n+        f2 = f2.withZone(PARIS);\n+        assertEquals(false, f2.isOffsetParsed());\n+        assertEquals(PARIS, f2.getZone());\n+        \n+        f2 = f2.withOffsetParsed();\n+        assertEquals(true, f2.isOffsetParsed());\n+        assertEquals(null, f2.getZone());\n+        \n+        f2 = f.withOffsetParsed();\n+        assertNotSame(f, f2);\n+        DateTimeFormatter f3 = f2.withOffsetParsed();\n+        assertSame(f2, f3);\n+    }\n+\n+    public void testPrinterParserMethods() {\n+        DateTimeFormatter f2 = new DateTimeFormatter(f.getPrinter(), f.getParser());\n+        assertEquals(f.getPrinter(), f2.getPrinter());\n+        assertEquals(f.getParser(), f2.getParser());\n+        assertEquals(true, f2.isPrinter());\n+        assertEquals(true, f2.isParser());\n+        assertNotNull(f2.print(0L));\n+        assertNotNull(f2.parseDateTime(\"Thu 1970-01-01T00:00:00Z\"));\n+        \n+        f2 = new DateTimeFormatter(f.getPrinter(), null);\n+        assertEquals(f.getPrinter(), f2.getPrinter());\n+        assertEquals(null, f2.getParser());\n+        assertEquals(true, f2.isPrinter());\n+        assertEquals(false, f2.isParser());\n+        assertNotNull(f2.print(0L));\n+        try {\n+            f2.parseDateTime(\"Thu 1970-01-01T00:00:00Z\");\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        \n+        f2 = new DateTimeFormatter(null, f.getParser());\n+        assertEquals(null, f2.getPrinter());\n+        assertEquals(f.getParser(), f2.getParser());\n+        assertEquals(false, f2.isPrinter());\n+        assertEquals(true, f2.isParser());\n+        try {\n+            f2.print(0L);\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        assertNotNull(f2.parseDateTime(\"Thu 1970-01-01T00:00:00Z\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseLocalDate_simple() {\n+        assertEquals(new LocalDate(2004, 6, 9), g.parseLocalDate(\"2004-06-09T10:20:30Z\"));\n+        assertEquals(new LocalDate(2004, 6, 9), g.parseLocalDate(\"2004-06-09T10:20:30+18:00\"));\n+        assertEquals(new LocalDate(2004, 6, 9), g.parseLocalDate(\"2004-06-09T10:20:30-18:00\"));\n+        assertEquals(new LocalDate(2004, 6, 9, BUDDHIST_PARIS),\n+                g.withChronology(BUDDHIST_PARIS).parseLocalDate(\"2004-06-09T10:20:30Z\"));\n+        try {\n+            g.parseDateTime(\"ABC\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseLocalTime_simple() {\n+        assertEquals(new LocalTime(10, 20, 30), g.parseLocalTime(\"2004-06-09T10:20:30Z\"));\n+        assertEquals(new LocalTime(10, 20, 30), g.parseLocalTime(\"2004-06-09T10:20:30+18:00\"));\n+        assertEquals(new LocalTime(10, 20, 30), g.parseLocalTime(\"2004-06-09T10:20:30-18:00\"));\n+        assertEquals(new LocalTime(10, 20, 30, 0, BUDDHIST_PARIS),\n+                g.withChronology(BUDDHIST_PARIS).parseLocalTime(\"2004-06-09T10:20:30Z\"));\n+        try {\n+            g.parseDateTime(\"ABC\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseLocalDateTime_simple() {\n+        assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30), g.parseLocalDateTime(\"2004-06-09T10:20:30Z\"));\n+        assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30), g.parseLocalDateTime(\"2004-06-09T10:20:30+18:00\"));\n+        assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30), g.parseLocalDateTime(\"2004-06-09T10:20:30-18:00\"));\n+        assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30, 0, BUDDHIST_PARIS),\n+                g.withChronology(BUDDHIST_PARIS).parseLocalDateTime(\"2004-06-09T10:20:30Z\"));\n+        try {\n+            g.parseDateTime(\"ABC\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseDateTime_simple() {\n+        DateTime expect = null;\n+        expect = new DateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n+        assertEquals(expect, g.parseDateTime(\"2004-06-09T10:20:30Z\"));\n+        \n+        try {\n+            g.parseDateTime(\"ABC\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testParseDateTime_zone() {\n+        DateTime expect = null;\n+        expect = new DateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n+        assertEquals(expect, g.withZone(LONDON).parseDateTime(\"2004-06-09T10:20:30Z\"));\n+        \n+        expect = new DateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n+        assertEquals(expect, g.withZone(null).parseDateTime(\"2004-06-09T10:20:30Z\"));\n+        \n+        expect = new DateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);\n+        assertEquals(expect, g.withZone(PARIS).parseDateTime(\"2004-06-09T10:20:30Z\"));\n+    }\n+\n+    public void testParseDateTime_zone2() {\n+        DateTime expect = null;\n+        expect = new DateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n+        assertEquals(expect, g.withZone(LONDON).parseDateTime(\"2004-06-09T06:20:30-04:00\"));\n+        \n+        expect = new DateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n+        assertEquals(expect, g.withZone(null).parseDateTime(\"2004-06-09T06:20:30-04:00\"));\n+        \n+        expect = new DateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);\n+        assertEquals(expect, g.withZone(PARIS).parseDateTime(\"2004-06-09T06:20:30-04:00\"));\n+    }\n+\n+    public void testParseDateTime_zone3() {\n+        DateTimeFormatter h = new DateTimeFormatterBuilder()\n+        .append(ISODateTimeFormat.date())\n+        .appendLiteral('T')\n+        .append(ISODateTimeFormat.timeElementParser())\n+        .toFormatter();\n+        \n+        DateTime expect = null;\n+        expect = new DateTime(2004, 6, 9, 10, 20, 30, 0, LONDON);\n+        assertEquals(expect, h.withZone(LONDON).parseDateTime(\"2004-06-09T10:20:30\"));\n+        \n+        expect = new DateTime(2004, 6, 9, 10, 20, 30, 0, LONDON);\n+        assertEquals(expect, h.withZone(null).parseDateTime(\"2004-06-09T10:20:30\"));\n+        \n+        expect = new DateTime(2004, 6, 9, 10, 20, 30, 0, PARIS);\n+        assertEquals(expect, h.withZone(PARIS).parseDateTime(\"2004-06-09T10:20:30\"));\n+    }\n+\n+    public void testParseDateTime_simple_precedence() {\n+        DateTime expect = null;\n+        // use correct day of week\n+        expect = new DateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n+        assertEquals(expect, f.parseDateTime(\"Wed 2004-06-09T10:20:30Z\"));\n+        \n+        // use wrong day of week\n+        expect = new DateTime(2004, 6, 7, 11, 20, 30, 0, LONDON);\n+        // DayOfWeek takes precedence, because week < month in length\n+        assertEquals(expect, f.parseDateTime(\"Mon 2004-06-09T10:20:30Z\"));\n+    }\n+\n+    public void testParseDateTime_offsetParsed() {\n+        DateTime expect = null;\n+        expect = new DateTime(2004, 6, 9, 10, 20, 30, 0, UTC);\n+        assertEquals(expect, g.withOffsetParsed().parseDateTime(\"2004-06-09T10:20:30Z\"));\n+        \n+        expect = new DateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4));\n+        assertEquals(expect, g.withOffsetParsed().parseDateTime(\"2004-06-09T06:20:30-04:00\"));\n+        \n+        expect = new DateTime(2004, 6, 9, 10, 20, 30, 0, UTC);\n+        assertEquals(expect, g.withZone(PARIS).withOffsetParsed().parseDateTime(\"2004-06-09T10:20:30Z\"));\n+        expect = new DateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);\n+        assertEquals(expect, g.withOffsetParsed().withZone(PARIS).parseDateTime(\"2004-06-09T10:20:30Z\"));\n+    }\n+\n+    public void testParseDateTime_chrono() {\n+        DateTime expect = null;\n+        expect = new DateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);\n+        assertEquals(expect, g.withChronology(ISO_PARIS).parseDateTime(\"2004-06-09T10:20:30Z\"));\n+        \n+        expect = new DateTime(2004, 6, 9, 11, 20, 30, 0,LONDON);\n+        assertEquals(expect, g.withChronology(null).parseDateTime(\"2004-06-09T10:20:30Z\"));\n+        \n+        expect = new DateTime(2547, 6, 9, 12, 20, 30, 0, BUDDHIST_PARIS);\n+        assertEquals(expect, g.withChronology(BUDDHIST_PARIS).parseDateTime(\"2547-06-09T10:20:30Z\"));\n+        \n+        expect = new DateTime(2004, 6, 9, 10, 29, 51, 0, BUDDHIST_PARIS); // zone is +00:09:21 in 1451\n+        assertEquals(expect, g.withChronology(BUDDHIST_PARIS).parseDateTime(\"2004-06-09T10:20:30Z\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseMutableDateTime_simple() {\n+        MutableDateTime expect = null;\n+        expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n+        assertEquals(expect, g.parseMutableDateTime(\"2004-06-09T10:20:30Z\"));\n+        \n+        try {\n+            g.parseMutableDateTime(\"ABC\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testParseMutableDateTime_zone() {\n+        MutableDateTime expect = null;\n+        expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n+        assertEquals(expect, g.withZone(LONDON).parseMutableDateTime(\"2004-06-09T10:20:30Z\"));\n+        \n+        expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n+        assertEquals(expect, g.withZone(null).parseMutableDateTime(\"2004-06-09T10:20:30Z\"));\n+        \n+        expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);\n+        assertEquals(expect, g.withZone(PARIS).parseMutableDateTime(\"2004-06-09T10:20:30Z\"));\n+    }\n+\n+    public void testParseMutableDateTime_zone2() {\n+        MutableDateTime expect = null;\n+        expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n+        assertEquals(expect, g.withZone(LONDON).parseMutableDateTime(\"2004-06-09T06:20:30-04:00\"));\n+        \n+        expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n+        assertEquals(expect, g.withZone(null).parseMutableDateTime(\"2004-06-09T06:20:30-04:00\"));\n+        \n+        expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);\n+        assertEquals(expect, g.withZone(PARIS).parseMutableDateTime(\"2004-06-09T06:20:30-04:00\"));\n+    }\n+\n+    public void testParseMutableDateTime_zone3() {\n+        DateTimeFormatter h = new DateTimeFormatterBuilder()\n+        .append(ISODateTimeFormat.date())\n+        .appendLiteral('T')\n+        .append(ISODateTimeFormat.timeElementParser())\n+        .toFormatter();\n+        \n+        MutableDateTime expect = null;\n+        expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, LONDON);\n+        assertEquals(expect, h.withZone(LONDON).parseMutableDateTime(\"2004-06-09T10:20:30\"));\n+        \n+        expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, LONDON);\n+        assertEquals(expect, h.withZone(null).parseMutableDateTime(\"2004-06-09T10:20:30\"));\n+        \n+        expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, PARIS);\n+        assertEquals(expect, h.withZone(PARIS).parseMutableDateTime(\"2004-06-09T10:20:30\"));\n+    }\n+\n+    public void testParseMutableDateTime_simple_precedence() {\n+        MutableDateTime expect = null;\n+        // use correct day of week\n+        expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n+        assertEquals(expect, f.parseDateTime(\"Wed 2004-06-09T10:20:30Z\"));\n+        \n+        // use wrong day of week\n+        expect = new MutableDateTime(2004, 6, 7, 11, 20, 30, 0, LONDON);\n+        // DayOfWeek takes precedence, because week < month in length\n+        assertEquals(expect, f.parseDateTime(\"Mon 2004-06-09T10:20:30Z\"));\n+    }\n+\n+    public void testParseMutableDateTime_offsetParsed() {\n+        MutableDateTime expect = null;\n+        expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC);\n+        assertEquals(expect, g.withOffsetParsed().parseMutableDateTime(\"2004-06-09T10:20:30Z\"));\n+        \n+        expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4));\n+        assertEquals(expect, g.withOffsetParsed().parseMutableDateTime(\"2004-06-09T06:20:30-04:00\"));\n+        \n+        expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC);\n+        assertEquals(expect, g.withZone(PARIS).withOffsetParsed().parseMutableDateTime(\"2004-06-09T10:20:30Z\"));\n+        expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);\n+        assertEquals(expect, g.withOffsetParsed().withZone(PARIS).parseMutableDateTime(\"2004-06-09T10:20:30Z\"));\n+    }\n+\n+    public void testParseMutableDateTime_chrono() {\n+        MutableDateTime expect = null;\n+        expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);\n+        assertEquals(expect, g.withChronology(ISO_PARIS).parseMutableDateTime(\"2004-06-09T10:20:30Z\"));\n+        \n+        expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0,LONDON);\n+        assertEquals(expect, g.withChronology(null).parseMutableDateTime(\"2004-06-09T10:20:30Z\"));\n+        \n+        expect = new MutableDateTime(2547, 6, 9, 12, 20, 30, 0, BUDDHIST_PARIS);\n+        assertEquals(expect, g.withChronology(BUDDHIST_PARIS).parseMutableDateTime(\"2547-06-09T10:20:30Z\"));\n+        \n+        expect = new MutableDateTime(2004, 6, 9, 10, 29, 51, 0, BUDDHIST_PARIS); // zone is +00:09:21 in 1451\n+        assertEquals(expect, g.withChronology(BUDDHIST_PARIS).parseMutableDateTime(\"2004-06-09T10:20:30Z\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseInto_simple() {\n+        MutableDateTime expect = null;\n+        expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n+        MutableDateTime result = new MutableDateTime(0L);\n+        assertEquals(20, g.parseInto(result, \"2004-06-09T10:20:30Z\", 0));\n+        assertEquals(expect, result);\n+        \n+        try {\n+            g.parseInto(null, \"2004-06-09T10:20:30Z\", 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        assertEquals(~0, g.parseInto(result, \"ABC\", 0));\n+        assertEquals(~10, g.parseInto(result, \"2004-06-09\", 0));\n+        assertEquals(~13, g.parseInto(result, \"XX2004-06-09T\", 2));\n+    }\n+\n+    public void testParseInto_zone() {\n+        MutableDateTime expect = null;\n+        MutableDateTime result = null;\n+        expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n+        result = new MutableDateTime(0L);\n+        assertEquals(20, g.withZone(LONDON).parseInto(result, \"2004-06-09T10:20:30Z\", 0));\n+        assertEquals(expect, result);\n+        \n+        expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n+        result = new MutableDateTime(0L);\n+        assertEquals(20, g.withZone(null).parseInto(result, \"2004-06-09T10:20:30Z\", 0));\n+        assertEquals(expect, result);\n+        \n+        expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);\n+        result = new MutableDateTime(0L);\n+        assertEquals(20, g.withZone(PARIS).parseInto(result, \"2004-06-09T10:20:30Z\", 0));\n+        assertEquals(expect, result);\n+    }\n+\n+    public void testParseInto_zone2() {\n+        MutableDateTime expect = null;\n+        MutableDateTime result = null;\n+        expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n+        result = new MutableDateTime(0L);\n+        assertEquals(25, g.withZone(LONDON).parseInto(result, \"2004-06-09T06:20:30-04:00\", 0));\n+        assertEquals(expect, result);\n+        \n+        expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n+        assertEquals(25, g.withZone(null).parseInto(result, \"2004-06-09T06:20:30-04:00\", 0));\n+        assertEquals(expect, result);\n+        \n+        expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);\n+        assertEquals(25, g.withZone(PARIS).parseInto(result, \"2004-06-09T06:20:30-04:00\", 0));\n+        assertEquals(expect, result);\n+    }\n+\n+    public void testParseInto_zone3() {\n+        DateTimeFormatter h = new DateTimeFormatterBuilder()\n+        .append(ISODateTimeFormat.date())\n+        .appendLiteral('T')\n+        .append(ISODateTimeFormat.timeElementParser())\n+        .toFormatter();\n+        \n+        MutableDateTime expect = null;\n+        MutableDateTime result = null;\n+        expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, LONDON);\n+        result = new MutableDateTime(0L);\n+        assertEquals(19, h.withZone(LONDON).parseInto(result, \"2004-06-09T10:20:30\", 0));\n+        assertEquals(expect, result);\n+        \n+        expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, LONDON);\n+        result = new MutableDateTime(0L);\n+        assertEquals(19, h.withZone(null).parseInto(result, \"2004-06-09T10:20:30\", 0));\n+        assertEquals(expect, result);\n+        \n+        expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, PARIS);\n+        result = new MutableDateTime(0L);\n+        assertEquals(19, h.withZone(PARIS).parseInto(result, \"2004-06-09T10:20:30\", 0));\n+        assertEquals(expect, result);\n+    }\n+\n+    public void testParseInto_simple_precedence() {\n+        MutableDateTime expect = null;\n+        MutableDateTime result = null;\n+        expect = new MutableDateTime(2004, 6, 7, 11, 20, 30, 0, LONDON);\n+        result = new MutableDateTime(0L);\n+        // DayOfWeek takes precedence, because week < month in length\n+        assertEquals(24, f.parseInto(result, \"Mon 2004-06-09T10:20:30Z\", 0));\n+        assertEquals(expect, result);\n+    }\n+\n+    public void testParseInto_offsetParsed() {\n+        MutableDateTime expect = null;\n+        MutableDateTime result = null;\n+        expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC);\n+        result = new MutableDateTime(0L);\n+        assertEquals(20, g.withOffsetParsed().parseInto(result, \"2004-06-09T10:20:30Z\", 0));\n+        assertEquals(expect, result);\n+        \n+        expect = new MutableDateTime(2004, 6, 9, 6, 20, 30, 0, DateTimeZone.forOffsetHours(-4));\n+        result = new MutableDateTime(0L);\n+        assertEquals(25, g.withOffsetParsed().parseInto(result, \"2004-06-09T06:20:30-04:00\", 0));\n+        assertEquals(expect, result);\n+        \n+        expect = new MutableDateTime(2004, 6, 9, 10, 20, 30, 0, UTC);\n+        result = new MutableDateTime(0L);\n+        assertEquals(20, g.withZone(PARIS).withOffsetParsed().parseInto(result, \"2004-06-09T10:20:30Z\", 0));\n+        assertEquals(expect, result);\n+        expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);\n+        result = new MutableDateTime(0L);\n+        assertEquals(20, g.withOffsetParsed().withZone(PARIS).parseInto(result, \"2004-06-09T10:20:30Z\", 0));\n+        assertEquals(expect, result);\n+    }\n+\n+    public void testParseInto_chrono() {\n+        MutableDateTime expect = null;\n+        MutableDateTime result = null;\n+        expect = new MutableDateTime(2004, 6, 9, 12, 20, 30, 0, PARIS);\n+        result = new MutableDateTime(0L);\n+        assertEquals(20, g.withChronology(ISO_PARIS).parseInto(result, \"2004-06-09T10:20:30Z\", 0));\n+        assertEquals(expect, result);\n+        \n+        expect = new MutableDateTime(2004, 6, 9, 11, 20, 30, 0, LONDON);\n+        result = new MutableDateTime(0L);\n+        assertEquals(20, g.withChronology(null).parseInto(result, \"2004-06-09T10:20:30Z\", 0));\n+        assertEquals(expect, result);\n+        \n+        expect = new MutableDateTime(2547, 6, 9, 12, 20, 30, 0, BUDDHIST_PARIS);\n+        result = new MutableDateTime(0L);\n+        assertEquals(20, g.withChronology(BUDDHIST_PARIS).parseInto(result, \"2547-06-09T10:20:30Z\", 0));\n+        assertEquals(expect, result);\n+        \n+        expect = new MutableDateTime(2004, 6, 9, 10, 29, 51, 0, BUDDHIST_PARIS);\n+        result = new MutableDateTime(0L);\n+        assertEquals(20, g.withChronology(BUDDHIST_PARIS).parseInto(result, \"2004-06-09T10:20:30Z\", 0));\n+        assertEquals(expect, result);\n+    }\n+\n+    public void testParseMillis_fractionOfSecondLong() {\n+        DateTimeFormatter f = new DateTimeFormatterBuilder()\n+            .appendSecondOfDay(2).appendLiteral('.').appendFractionOfSecond(1, 9)\n+                .toFormatter().withZoneUTC();\n+        assertEquals(10512, f.parseMillis(\"10.5123456\"));\n+        assertEquals(10512, f.parseMillis(\"10.512999\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    // Ensure time zone name switches properly at the zone DST transition.\n+    public void testZoneNameNearTransition() {\n+        DateTime inDST_1  = new DateTime(2005, 10, 30, 1, 0, 0, 0, NEWYORK);\n+        DateTime inDST_2  = new DateTime(2005, 10, 30, 1, 59, 59, 999, NEWYORK);\n+        DateTime onDST    = new DateTime(2005, 10, 30, 2, 0, 0, 0, NEWYORK);\n+        DateTime outDST   = new DateTime(2005, 10, 30, 2, 0, 0, 1, NEWYORK);\n+        DateTime outDST_2 = new DateTime(2005, 10, 30, 2, 0, 1, 0, NEWYORK);\n+\n+        DateTimeFormatter fmt = DateTimeFormat.forPattern(\"yyy-MM-dd HH:mm:ss.S zzzz\");\n+        assertEquals(\"2005-10-30 01:00:00.0 Eastern Daylight Time\", fmt.print(inDST_1));\n+        assertEquals(\"2005-10-30 01:59:59.9 Eastern Daylight Time\", fmt.print(inDST_2));\n+        assertEquals(\"2005-10-30 02:00:00.0 Eastern Standard Time\", fmt.print(onDST));\n+        assertEquals(\"2005-10-30 02:00:00.0 Eastern Standard Time\", fmt.print(outDST));\n+        assertEquals(\"2005-10-30 02:00:01.0 Eastern Standard Time\", fmt.print(outDST_2));\n+    }\n+\n+    // Ensure time zone name switches properly at the zone DST transition.\n+    public void testZoneShortNameNearTransition() {\n+        DateTime inDST_1  = new DateTime(2005, 10, 30, 1, 0, 0, 0, NEWYORK);\n+        DateTime inDST_2  = new DateTime(2005, 10, 30, 1, 59, 59, 999, NEWYORK);\n+        DateTime onDST    = new DateTime(2005, 10, 30, 2, 0, 0, 0, NEWYORK);\n+        DateTime outDST   = new DateTime(2005, 10, 30, 2, 0, 0, 1, NEWYORK);\n+        DateTime outDST_2 = new DateTime(2005, 10, 30, 2, 0, 1, 0, NEWYORK);\n+\n+        DateTimeFormatter fmt = DateTimeFormat.forPattern(\"yyy-MM-dd HH:mm:ss.S z\");\n+        assertEquals(\"2005-10-30 01:00:00.0 EDT\", fmt.print(inDST_1));\n+        assertEquals(\"2005-10-30 01:59:59.9 EDT\", fmt.print(inDST_2));\n+        assertEquals(\"2005-10-30 02:00:00.0 EST\", fmt.print(onDST));\n+        assertEquals(\"2005-10-30 02:00:00.0 EST\", fmt.print(outDST));\n+        assertEquals(\"2005-10-30 02:00:01.0 EST\", fmt.print(outDST_2));\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.format;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeFieldType;\n+\n+/**\n+ * This class is a Junit unit test for DateTimeFormatterBuilder.\n+ *\n+ * @author Stephen Colebourne\n+ * @author Brian S O'Neill\n+ */\n+public class TestDateTimeFormatterBuilder extends TestCase {\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestDateTimeFormatterBuilder.class);\n+    }\n+\n+    public TestDateTimeFormatterBuilder(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+    }\n+\n+    protected void tearDown() throws Exception {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_toFormatter() {\n+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n+        try {\n+            bld.toFormatter();\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        bld.appendLiteral('X');\n+        assertNotNull(bld.toFormatter());\n+    }\n+\n+    public void test_toPrinter() {\n+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n+        try {\n+            bld.toPrinter();\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        bld.appendLiteral('X');\n+        assertNotNull(bld.toPrinter());\n+    }\n+\n+    public void test_toParser() {\n+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n+        try {\n+            bld.toParser();\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        bld.appendLiteral('X');\n+        assertNotNull(bld.toParser());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_canBuildFormatter() {\n+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n+        assertEquals(false, bld.canBuildFormatter());\n+        bld.appendLiteral('X');\n+        assertEquals(true, bld.canBuildFormatter());\n+    }\n+\n+    public void test_canBuildPrinter() {\n+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n+        assertEquals(false, bld.canBuildPrinter());\n+        bld.appendLiteral('X');\n+        assertEquals(true, bld.canBuildPrinter());\n+    }\n+\n+    public void test_canBuildParser() {\n+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n+        assertEquals(false, bld.canBuildParser());\n+        bld.appendLiteral('X');\n+        assertEquals(true, bld.canBuildParser());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_append_Formatter() {\n+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n+        bld.appendLiteral('Y');\n+        DateTimeFormatter f = bld.toFormatter();\n+        \n+        DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder();\n+        bld2.appendLiteral('X');\n+        bld2.append(f);\n+        bld2.appendLiteral('Z');\n+        assertEquals(\"XYZ\", bld2.toFormatter().print(0L));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_append_Printer() {\n+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n+        bld.appendLiteral('Y');\n+        DateTimePrinter p = bld.toPrinter();\n+        \n+        DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder();\n+        bld2.appendLiteral('X');\n+        bld2.append(p);\n+        bld2.appendLiteral('Z');\n+        assertEquals(\"XYZ\", bld2.toFormatter().print(0L));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_appendFixedDecimal() {\n+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n+        bld.appendFixedDecimal(DateTimeFieldType.year(), 4);\n+        DateTimeFormatter f = bld.toFormatter();\n+\n+        assertEquals(\"2007\", f.print(new DateTime(\"2007-01-01\")));\n+        assertEquals(\"0123\", f.print(new DateTime(\"123-01-01\")));\n+        assertEquals(\"0001\", f.print(new DateTime(\"1-2-3\")));\n+        assertEquals(\"99999\", f.print(new DateTime(\"99999-2-3\")));\n+        assertEquals(\"-0099\", f.print(new DateTime(\"-99-2-3\")));\n+        assertEquals(\"0000\", f.print(new DateTime(\"0-2-3\")));\n+\n+        assertEquals(2001, f.parseDateTime(\"2001\").getYear());\n+        try {\n+            f.parseDateTime(\"-2001\");\n+            fail();\n+        } catch (IllegalArgumentException e) {\n+        }\n+        try {\n+            f.parseDateTime(\"200\");\n+            fail();\n+        } catch (IllegalArgumentException e) {\n+        }\n+        try {\n+            f.parseDateTime(\"20016\");\n+            fail();\n+        } catch (IllegalArgumentException e) {\n+        }\n+\n+        bld = new DateTimeFormatterBuilder();\n+        bld.appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2);\n+        bld.appendLiteral(':');\n+        bld.appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2);\n+        bld.appendLiteral(':');\n+        bld.appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2);\n+        f = bld.toFormatter();\n+\n+        assertEquals(\"01:02:34\", f.print(new DateTime(\"T1:2:34\")));\n+\n+        DateTime dt = f.parseDateTime(\"01:02:34\");\n+        assertEquals(1, dt.getHourOfDay());\n+        assertEquals(2, dt.getMinuteOfHour());\n+        assertEquals(34, dt.getSecondOfMinute());\n+\n+        try {\n+            f.parseDateTime(\"0145:02:34\");\n+            fail();\n+        } catch (IllegalArgumentException e) {\n+        }\n+        try {\n+            f.parseDateTime(\"01:0:34\");\n+            fail();\n+        } catch (IllegalArgumentException e) {\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_appendFixedSignedDecimal() {\n+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n+        bld.appendFixedSignedDecimal(DateTimeFieldType.year(), 4);\n+        DateTimeFormatter f = bld.toFormatter();\n+\n+        assertEquals(\"2007\", f.print(new DateTime(\"2007-01-01\")));\n+        assertEquals(\"0123\", f.print(new DateTime(\"123-01-01\")));\n+        assertEquals(\"0001\", f.print(new DateTime(\"1-2-3\")));\n+        assertEquals(\"99999\", f.print(new DateTime(\"99999-2-3\")));\n+        assertEquals(\"-0099\", f.print(new DateTime(\"-99-2-3\")));\n+        assertEquals(\"0000\", f.print(new DateTime(\"0-2-3\")));\n+\n+        assertEquals(2001, f.parseDateTime(\"2001\").getYear());\n+        assertEquals(-2001, f.parseDateTime(\"-2001\").getYear());\n+        assertEquals(2001, f.parseDateTime(\"+2001\").getYear());\n+        try {\n+            f.parseDateTime(\"20016\");\n+            fail();\n+        } catch (IllegalArgumentException e) {\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/format/TestISODateTimeFormat.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.format;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeFieldType;\n+import org.joda.time.DateTimeUtils;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.Partial;\n+\n+/**\n+ * This class is a Junit unit test for ISODateTimeFormat.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestISODateTimeFormat extends TestCase {\n+\n+    private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+\n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestISODateTimeFormat.class);\n+    }\n+\n+    public TestISODateTimeFormat(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSubclassableConstructor() {\n+        ISODateTimeFormat f = new ISODateTimeFormat() {\n+            // test constructor is protected\n+        };\n+        assertNotNull(f);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_date() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-06-09\", ISODateTimeFormat.date().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-06-09\", ISODateTimeFormat.date().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-06-09\", ISODateTimeFormat.date().print(dt));\n+    }\n+\n+    public void testFormat_date_partial() {\n+        Partial dt = new Partial(\n+                new DateTimeFieldType[] {DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth()},\n+                new int[] {2004, 6, 9});\n+        assertEquals(\"2004-06-09\", ISODateTimeFormat.date().print(dt));\n+    }\n+\n+    public void testFormat_time() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"10:20:30.040Z\", ISODateTimeFormat.time().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"11:20:30.040+01:00\", ISODateTimeFormat.time().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"12:20:30.040+02:00\", ISODateTimeFormat.time().print(dt));\n+    }\n+\n+    public void testFormat_time_partial() {\n+        Partial dt = new Partial(\n+                new DateTimeFieldType[] {DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(),\n+                        DateTimeFieldType.secondOfMinute(), DateTimeFieldType.millisOfSecond()},\n+                new int[] {10, 20, 30, 40});\n+        assertEquals(\"10:20:30.040\", ISODateTimeFormat.time().print(dt));\n+    }\n+\n+    public void testFormat_timeNoMillis() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"10:20:30Z\", ISODateTimeFormat.timeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"11:20:30+01:00\", ISODateTimeFormat.timeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"12:20:30+02:00\", ISODateTimeFormat.timeNoMillis().print(dt));\n+    }\n+\n+    public void testFormat_timeNoMillis_partial() {\n+        Partial dt = new Partial(\n+                new DateTimeFieldType[] {DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(),\n+                        DateTimeFieldType.secondOfMinute(), DateTimeFieldType.millisOfSecond()},\n+                new int[] {10, 20, 30, 40});\n+        assertEquals(\"10:20:30\", ISODateTimeFormat.timeNoMillis().print(dt));\n+    }\n+\n+    public void testFormat_tTime() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"T10:20:30.040Z\", ISODateTimeFormat.tTime().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"T11:20:30.040+01:00\", ISODateTimeFormat.tTime().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"T12:20:30.040+02:00\", ISODateTimeFormat.tTime().print(dt));\n+    }\n+\n+    public void testFormat_tTimeNoMillis() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"T10:20:30Z\", ISODateTimeFormat.tTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"T11:20:30+01:00\", ISODateTimeFormat.tTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"T12:20:30+02:00\", ISODateTimeFormat.tTimeNoMillis().print(dt));\n+    }\n+\n+    public void testFormat_dateTime() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-06-09T10:20:30.040Z\", ISODateTimeFormat.dateTime().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-06-09T11:20:30.040+01:00\", ISODateTimeFormat.dateTime().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-06-09T12:20:30.040+02:00\", ISODateTimeFormat.dateTime().print(dt));\n+        \n+//        dt = dt.withZone(LONDON);\n+//        assertEquals(\"2004-06-09T11:20:30.040+01:00\", ISODateTimeFormat.getInstance(PARIS).dateTime().print(dt));\n+//        \n+//        dt = dt.withZone(LONDON);\n+//        assertEquals(\"2004-06-09T12:20:30.040+02:00\", ISODateTimeFormat.dateTime().print(dt.getMillis(), PARIS));\n+//        \n+//        dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, CopticChronology.getInstance());\n+//        assertEquals(\"2288-02-19T10:20:30.040Z\", ISODateTimeFormat.dateTime().print(dt));\n+//        \n+//        dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, CopticChronology.getInstance());\n+//        assertEquals(\"2004-06-09T10:20:30.040Z\", ISODateTimeFormat.getInstance(CopticChronology.getInstance()).dateTime().print(dt));\n+    }\n+\n+    public void testFormat_dateTimeNoMillis() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-06-09T10:20:30Z\", ISODateTimeFormat.dateTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-06-09T11:20:30+01:00\", ISODateTimeFormat.dateTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-06-09T12:20:30+02:00\", ISODateTimeFormat.dateTimeNoMillis().print(dt));\n+    }\n+\n+    public void testFormat_ordinalDate() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-161\", ISODateTimeFormat.ordinalDate().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-161\", ISODateTimeFormat.ordinalDate().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-161\", ISODateTimeFormat.ordinalDate().print(dt));\n+    }\n+\n+    public void testFormat_ordinalDateTime() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-161T10:20:30.040Z\", ISODateTimeFormat.ordinalDateTime().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-161T11:20:30.040+01:00\", ISODateTimeFormat.ordinalDateTime().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-161T12:20:30.040+02:00\", ISODateTimeFormat.ordinalDateTime().print(dt));\n+    }\n+\n+    public void testFormat_ordinalDateTimeNoMillis() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-161T10:20:30Z\", ISODateTimeFormat.ordinalDateTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-161T11:20:30+01:00\", ISODateTimeFormat.ordinalDateTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-161T12:20:30+02:00\", ISODateTimeFormat.ordinalDateTimeNoMillis().print(dt));\n+    }\n+\n+    public void testFormat_weekDate() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-W24-3\", ISODateTimeFormat.weekDate().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-W24-3\", ISODateTimeFormat.weekDate().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-W24-3\", ISODateTimeFormat.weekDate().print(dt));\n+    }\n+\n+    public void testFormat_weekDateTime() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-W24-3T10:20:30.040Z\", ISODateTimeFormat.weekDateTime().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-W24-3T11:20:30.040+01:00\", ISODateTimeFormat.weekDateTime().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-W24-3T12:20:30.040+02:00\", ISODateTimeFormat.weekDateTime().print(dt));\n+    }\n+\n+    public void testFormat_weekDateTimeNoMillis() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-W24-3T10:20:30Z\", ISODateTimeFormat.weekDateTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-W24-3T11:20:30+01:00\", ISODateTimeFormat.weekDateTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-W24-3T12:20:30+02:00\", ISODateTimeFormat.weekDateTimeNoMillis().print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_basicDate() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"20040609\", ISODateTimeFormat.basicDate().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"20040609\", ISODateTimeFormat.basicDate().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"20040609\", ISODateTimeFormat.basicDate().print(dt));\n+    }\n+\n+    public void testFormat_basicTime() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"102030.040Z\", ISODateTimeFormat.basicTime().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"112030.040+0100\", ISODateTimeFormat.basicTime().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"122030.040+0200\", ISODateTimeFormat.basicTime().print(dt));\n+    }\n+\n+    public void testFormat_basicTimeNoMillis() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"102030Z\", ISODateTimeFormat.basicTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"112030+0100\", ISODateTimeFormat.basicTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"122030+0200\", ISODateTimeFormat.basicTimeNoMillis().print(dt));\n+    }\n+\n+    public void testFormat_basicTTime() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"T102030.040Z\", ISODateTimeFormat.basicTTime().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"T112030.040+0100\", ISODateTimeFormat.basicTTime().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"T122030.040+0200\", ISODateTimeFormat.basicTTime().print(dt));\n+    }\n+\n+    public void testFormat_basicTTimeNoMillis() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"T102030Z\", ISODateTimeFormat.basicTTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"T112030+0100\", ISODateTimeFormat.basicTTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"T122030+0200\", ISODateTimeFormat.basicTTimeNoMillis().print(dt));\n+    }\n+\n+    public void testFormat_basicDateTime() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"20040609T102030.040Z\", ISODateTimeFormat.basicDateTime().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"20040609T112030.040+0100\", ISODateTimeFormat.basicDateTime().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"20040609T122030.040+0200\", ISODateTimeFormat.basicDateTime().print(dt));\n+    }\n+\n+    public void testFormat_basicDateTimeNoMillis() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"20040609T102030Z\", ISODateTimeFormat.basicDateTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"20040609T112030+0100\", ISODateTimeFormat.basicDateTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"20040609T122030+0200\", ISODateTimeFormat.basicDateTimeNoMillis().print(dt));\n+    }\n+\n+    public void testFormat_basicOrdinalDate() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004161\", ISODateTimeFormat.basicOrdinalDate().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004161\", ISODateTimeFormat.basicOrdinalDate().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004161\", ISODateTimeFormat.basicOrdinalDate().print(dt));\n+    }\n+\n+    public void testFormat_basicOrdinalDateTime() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004161T102030.040Z\", ISODateTimeFormat.basicOrdinalDateTime().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004161T112030.040+0100\", ISODateTimeFormat.basicOrdinalDateTime().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004161T122030.040+0200\", ISODateTimeFormat.basicOrdinalDateTime().print(dt));\n+    }\n+\n+    public void testFormat_basicOrdinalDateTimeNoMillis() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004161T102030Z\", ISODateTimeFormat.basicOrdinalDateTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004161T112030+0100\", ISODateTimeFormat.basicOrdinalDateTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004161T122030+0200\", ISODateTimeFormat.basicOrdinalDateTimeNoMillis().print(dt));\n+    }\n+\n+    public void testFormat_basicWeekDate() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004W243\", ISODateTimeFormat.basicWeekDate().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004W243\", ISODateTimeFormat.basicWeekDate().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004W243\", ISODateTimeFormat.basicWeekDate().print(dt));\n+    }\n+\n+    public void testFormat_basicWeekDateTime() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004W243T102030.040Z\", ISODateTimeFormat.basicWeekDateTime().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004W243T112030.040+0100\", ISODateTimeFormat.basicWeekDateTime().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004W243T122030.040+0200\", ISODateTimeFormat.basicWeekDateTime().print(dt));\n+    }\n+\n+    public void testFormat_basicWeekDateTimeNoMillis() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004W243T102030Z\", ISODateTimeFormat.basicWeekDateTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004W243T112030+0100\", ISODateTimeFormat.basicWeekDateTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004W243T122030+0200\", ISODateTimeFormat.basicWeekDateTimeNoMillis().print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_year() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004\", ISODateTimeFormat.year().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004\", ISODateTimeFormat.year().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004\", ISODateTimeFormat.year().print(dt));\n+    }\n+\n+    public void testFormat_yearMonth() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-06\", ISODateTimeFormat.yearMonth().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-06\", ISODateTimeFormat.yearMonth().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-06\", ISODateTimeFormat.yearMonth().print(dt));\n+    }\n+\n+    public void testFormat_yearMonthDay() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-06-09\", ISODateTimeFormat.yearMonthDay().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-06-09\", ISODateTimeFormat.yearMonthDay().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-06-09\", ISODateTimeFormat.yearMonthDay().print(dt));\n+    }\n+\n+    public void testFormat_weekyear() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004\", ISODateTimeFormat.weekyear().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004\", ISODateTimeFormat.weekyear().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004\", ISODateTimeFormat.weekyear().print(dt));\n+    }\n+\n+    public void testFormat_weekyearWeek() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-W24\", ISODateTimeFormat.weekyearWeek().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-W24\", ISODateTimeFormat.weekyearWeek().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-W24\", ISODateTimeFormat.weekyearWeek().print(dt));\n+    }\n+\n+    public void testFormat_weekyearWeekDay() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-W24-3\", ISODateTimeFormat.weekyearWeekDay().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-W24-3\", ISODateTimeFormat.weekyearWeekDay().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-W24-3\", ISODateTimeFormat.weekyearWeekDay().print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_hour() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"10\", ISODateTimeFormat.hour().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"11\", ISODateTimeFormat.hour().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"12\", ISODateTimeFormat.hour().print(dt));\n+    }\n+\n+    public void testFormat_hourMinute() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"10:20\", ISODateTimeFormat.hourMinute().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"11:20\", ISODateTimeFormat.hourMinute().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"12:20\", ISODateTimeFormat.hourMinute().print(dt));\n+    }\n+\n+    public void testFormat_hourMinuteSecond() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"10:20:30\", ISODateTimeFormat.hourMinuteSecond().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"11:20:30\", ISODateTimeFormat.hourMinuteSecond().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"12:20:30\", ISODateTimeFormat.hourMinuteSecond().print(dt));\n+    }\n+\n+    public void testFormat_hourMinuteSecondMillis() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"10:20:30.040\", ISODateTimeFormat.hourMinuteSecondMillis().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"11:20:30.040\", ISODateTimeFormat.hourMinuteSecondMillis().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"12:20:30.040\", ISODateTimeFormat.hourMinuteSecondMillis().print(dt));\n+    }\n+\n+    public void testFormat_hourMinuteSecondFraction() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"10:20:30.040\", ISODateTimeFormat.hourMinuteSecondFraction().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"11:20:30.040\", ISODateTimeFormat.hourMinuteSecondFraction().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"12:20:30.040\", ISODateTimeFormat.hourMinuteSecondFraction().print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_dateHour() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-06-09T10\", ISODateTimeFormat.dateHour().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-06-09T11\", ISODateTimeFormat.dateHour().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-06-09T12\", ISODateTimeFormat.dateHour().print(dt));\n+    }\n+\n+    public void testFormat_dateHourMinute() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-06-09T10:20\", ISODateTimeFormat.dateHourMinute().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-06-09T11:20\", ISODateTimeFormat.dateHourMinute().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-06-09T12:20\", ISODateTimeFormat.dateHourMinute().print(dt));\n+    }\n+\n+    public void testFormat_dateHourMinuteSecond() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-06-09T10:20:30\", ISODateTimeFormat.dateHourMinuteSecond().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-06-09T11:20:30\", ISODateTimeFormat.dateHourMinuteSecond().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-06-09T12:20:30\", ISODateTimeFormat.dateHourMinuteSecond().print(dt));\n+    }\n+\n+    public void testFormat_dateHourMinuteSecondMillis() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-06-09T10:20:30.040\", ISODateTimeFormat.dateHourMinuteSecondMillis().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-06-09T11:20:30.040\", ISODateTimeFormat.dateHourMinuteSecondMillis().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-06-09T12:20:30.040\", ISODateTimeFormat.dateHourMinuteSecondMillis().print(dt));\n+    }\n+\n+    public void testFormat_dateHourMinuteSecondFraction() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-06-09T10:20:30.040\", ISODateTimeFormat.dateHourMinuteSecondFraction().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-06-09T11:20:30.040\", ISODateTimeFormat.dateHourMinuteSecondFraction().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-06-09T12:20:30.040\", ISODateTimeFormat.dateHourMinuteSecondFraction().print(dt));\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/format/TestISODateTimeFormatParsing.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.format;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+\n+/**\n+ * This class is a Junit unit test for ISODateTimeFormat parsing.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestISODateTimeFormatParsing extends TestCase {\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestISODateTimeFormatParsing.class);\n+    }\n+\n+    public TestISODateTimeFormatParsing(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(DateTimeZone.forID(\"Europe/London\"));\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_dateParser() {\n+        DateTimeFormatter parser = ISODateTimeFormat.dateParser();\n+        assertParse(parser, true, \"2006-06-09\");\n+        assertParse(parser, true, \"2006-W27-3\");\n+        assertParse(parser, true, \"2006-123\");\n+        assertParse(parser, true, \"2006-06-09T+02:00\");\n+        assertParse(parser, true, \"2006-W27-3T+02:00\");\n+        assertParse(parser, true, \"2006-123T+02:00\");\n+        \n+        assertParse(parser, false, \"2006-06-09T10:20:30.040\");\n+        assertParse(parser, false, \"2006-W27-3T10:20:30.040\");\n+        assertParse(parser, false, \"2006-123T10:20:30.040\");\n+        assertParse(parser, false, \"2006-06-09T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"2006-W27-3T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"2006-123T10:20:30.040+02:00\");\n+        \n+        assertParse(parser, false, \"T10:20:30.040\");\n+        assertParse(parser, false, \"T10.5\");\n+        assertParse(parser, false, \"T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"T10.5+02:00\");\n+        \n+        assertParse(parser, false, \"10:20:30.040\");\n+        assertParse(parser, false, \"10.5\");\n+        assertParse(parser, false, \"10:20:30.040+02:00\");\n+        assertParse(parser, false, \"10.5+02:00\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_localDateParser() {\n+        DateTimeFormatter parser = ISODateTimeFormat.localDateParser();\n+        assertEquals(DateTimeZone.UTC, parser.getZone());\n+        assertParse(parser, true, \"2006-06-09\");\n+        assertParse(parser, true, \"2006-W27-3\");\n+        assertParse(parser, true, \"2006-123\");\n+        assertParse(parser, false, \"2006-06-09T+02:00\");\n+        assertParse(parser, false, \"2006-W27-3T+02:00\");\n+        assertParse(parser, false, \"2006-123T+02:00\");\n+        \n+        assertParse(parser, false, \"2006-06-09T10:20:30.040\");\n+        assertParse(parser, false, \"2006-W27-3T10:20:30.040\");\n+        assertParse(parser, false, \"2006-123T10:20:30.040\");\n+        assertParse(parser, false, \"2006-06-09T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"2006-W27-3T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"2006-123T10:20:30.040+02:00\");\n+        \n+        assertParse(parser, false, \"T10:20:30.040\");\n+        assertParse(parser, false, \"T10.5\");\n+        assertParse(parser, false, \"T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"T10.5+02:00\");\n+        \n+        assertParse(parser, false, \"10:20:30.040\");\n+        assertParse(parser, false, \"10.5\");\n+        assertParse(parser, false, \"10:20:30.040+02:00\");\n+        assertParse(parser, false, \"10.5+02:00\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_dateElementParser() {\n+        DateTimeFormatter parser = ISODateTimeFormat.dateElementParser();\n+        assertParse(parser, \"2006-06-09\", new DateTime(2006, 6, 9, 0, 0, 0, 0));\n+        assertParse(parser, \"2006-06-9\", new DateTime(2006, 6, 9, 0, 0, 0, 0));\n+        assertParse(parser, \"2006-6-09\", new DateTime(2006, 6, 9, 0, 0, 0, 0));\n+        assertParse(parser, \"2006-6-9\", new DateTime(2006, 6, 9, 0, 0, 0, 0));\n+        assertParse(parser, true, \"2006-W27-3\");\n+        assertParse(parser, true, \"2006-123\");\n+        assertParse(parser, false, \"2006-06-09T+02:00\");\n+        assertParse(parser, false, \"2006-W27-3T+02:00\");\n+        assertParse(parser, false, \"2006-123T+02:00\");\n+        \n+        assertParse(parser, false, \"2006-06-09T10:20:30.040\");\n+        assertParse(parser, false, \"2006-W27-3T10:20:30.040\");\n+        assertParse(parser, false, \"2006-123T10:20:30.040\");\n+        assertParse(parser, false, \"2006-06-09T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"2006-W27-3T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"2006-123T10:20:30.040+02:00\");\n+        \n+        assertParse(parser, false, \"T10:20:30.040\");\n+        assertParse(parser, false, \"T10.5\");\n+        assertParse(parser, false, \"T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"T10.5+02:00\");\n+        \n+        assertParse(parser, false, \"10:20:30.040\");\n+        assertParse(parser, false, \"10.5\");\n+        assertParse(parser, false, \"10:20:30.040+02:00\");\n+        assertParse(parser, false, \"10.5+02:00\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_timeParser() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.timeParser();\n+        assertParse(parser, false, \"2006-06-09\");\n+        assertParse(parser, false, \"2006-W27-3\");\n+        assertParse(parser, false, \"2006-123\");\n+        assertParse(parser, false, \"2006-06-09T+02:00\");\n+        assertParse(parser, false, \"2006-W27-3T+02:00\");\n+        assertParse(parser, false, \"2006-123T+02:00\");\n+        \n+        assertParse(parser, false, \"2006-06-09T10:20:30.040\");\n+        assertParse(parser, false, \"2006-W27-3T10:20:30.040\");\n+        assertParse(parser, false, \"2006-123T10:20:30.040\");\n+        assertParse(parser, false, \"2006-06-09T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"2006-W27-3T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"2006-123T10:20:30.040+02:00\");\n+        \n+        assertParse(parser, \"T10:20:30.040000000\", new DateTime(1970, 1, 1, 10, 20, 30, 40));\n+        assertParse(parser, \"T10:20:30.004\", new DateTime(1970, 1, 1, 10, 20, 30, 4));\n+        assertParse(parser, \"T10:20:30.040\", new DateTime(1970, 1, 1, 10, 20, 30, 40));\n+        assertParse(parser, \"T10:20:30.400\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"T10.5\", new DateTime(1970, 1, 1, 10, 30, 0, 0));\n+        assertParse(parser, \"T10:20:30.040+02:00\", new DateTime(1970, 1, 1, 8, 20, 30, 40));\n+        assertParse(parser, \"T10.5+02:00\", new DateTime(1970, 1, 1, 8, 30, 0, 0));\n+        \n+        assertParse(parser, true, \"10:20:30.040\");\n+        assertParse(parser, true, \"10.5\");\n+        assertParse(parser, true, \"10:20:30.040+02:00\");\n+        assertParse(parser, true, \"10.5+02:00\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_localTimeParser() {\n+        DateTimeFormatter parser = ISODateTimeFormat.localTimeParser();\n+        assertEquals(DateTimeZone.UTC, parser.getZone());\n+        assertParse(parser, false, \"2006-06-09\");\n+        assertParse(parser, false, \"2006-W27-3\");\n+        assertParse(parser, false, \"2006-123\");\n+        assertParse(parser, false, \"2006-06-09T+02:00\");\n+        assertParse(parser, false, \"2006-W27-3T+02:00\");\n+        assertParse(parser, false, \"2006-123T+02:00\");\n+        \n+        assertParse(parser, false, \"2006-06-09T10:20:30.040\");\n+        assertParse(parser, false, \"2006-W27-3T10:20:30.040\");\n+        assertParse(parser, false, \"2006-123T10:20:30.040\");\n+        assertParse(parser, false, \"2006-06-09T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"2006-W27-3T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"2006-123T10:20:30.040+02:00\");\n+        \n+        assertParse(parser, true, \"T10:20:30.040\");\n+        assertParse(parser, true, \"T10.5\");\n+        assertParse(parser, false, \"T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"T10.5+02:00\");\n+        \n+        assertParse(parser, true, \"10:20:30.040\");\n+        assertParse(parser, true, \"10.5\");\n+        assertParse(parser, false, \"10:20:30.040+02:00\");\n+        assertParse(parser, false, \"10.5+02:00\");\n+        \n+        assertParse(parser, true, \"00:00:10.512345678\");\n+        assertEquals(10512, parser.parseMillis(\"00:00:10.512345678\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_timeElementParser() {\n+        DateTimeFormatter parser = ISODateTimeFormat.timeElementParser();\n+        assertParse(parser, false, \"2006-06-09\");\n+        assertParse(parser, false, \"2006-W27-3\");\n+        assertParse(parser, false, \"2006-123\");\n+        assertParse(parser, false, \"2006-06-09T+02:00\");\n+        assertParse(parser, false, \"2006-W27-3T+02:00\");\n+        assertParse(parser, false, \"2006-123T+02:00\");\n+        \n+        assertParse(parser, false, \"2006-06-09T10:20:30.040\");\n+        assertParse(parser, false, \"2006-W27-3T10:20:30.040\");\n+        assertParse(parser, false, \"2006-123T10:20:30.040\");\n+        assertParse(parser, false, \"2006-06-09T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"2006-W27-3T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"2006-123T10:20:30.040+02:00\");\n+        \n+        assertParse(parser, false, \"T10:20:30.040\");\n+        assertParse(parser, false, \"T10.5\");\n+        assertParse(parser, false, \"T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"T10.5+02:00\");\n+        \n+        assertParse(parser, true, \"10:20:30.040\");\n+        assertParse(parser, true, \"10.5\");\n+        assertParse(parser, false, \"10:20:30.040+02:00\");\n+        assertParse(parser, false, \"10.5+02:00\");\n+        \n+        assertParse(parser, true, \"00:00:10.512345678\");\n+        // result is offset by London DST in 1970-01-01\n+        assertEquals(10512, parser.parseMillis(\"00:00:10.512345678\") + DateTimeZone.getDefault().getOffset(0L));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_dateTimeParser() {\n+        DateTimeFormatter parser = ISODateTimeFormat.dateTimeParser();\n+        assertParse(parser, true, \"2006-06-09\");\n+        assertParse(parser, true, \"2006-W27-3\");\n+        assertParse(parser, true, \"2006-123\");\n+        assertParse(parser, true, \"2006-06-09T+02:00\");\n+        assertParse(parser, true, \"2006-W27-3T+02:00\");\n+        assertParse(parser, true, \"2006-123T+02:00\");\n+        \n+        assertParse(parser, true, \"2006-06-09T10:20:30.040\");\n+        assertParse(parser, true, \"2006-W27-3T10:20:30.040\");\n+        assertParse(parser, true, \"2006-123T10:20:30.040\");\n+        assertParse(parser, true, \"2006-06-09T10:20:30.040+02:00\");\n+        assertParse(parser, true, \"2006-W27-3T10:20:30.040+02:00\");\n+        assertParse(parser, true, \"2006-123T10:20:30.040+02:00\");\n+        \n+        assertParse(parser, true, \"T10:20:30.040\");\n+        assertParse(parser, true, \"T10.5\");\n+        assertParse(parser, true, \"T10:20:30.040+02:00\");\n+        assertParse(parser, true, \"T10.5+02:00\");\n+        \n+        assertParse(parser, false, \"10:20:30.040\");\n+        assertParse(parser, false, \"10.5\");\n+        assertParse(parser, false, \"10:20:30.040+02:00\");\n+        assertParse(parser, false, \"10.5+02:00\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_dateOptionalTimeParser() {\n+        DateTimeFormatter parser = ISODateTimeFormat.dateOptionalTimeParser();\n+        assertParse(parser, true, \"2006-06-09\");\n+        assertParse(parser, true, \"2006-W27-3\");\n+        assertParse(parser, true, \"2006-123\");\n+        assertParse(parser, true, \"2006-06-09T+02:00\");\n+        assertParse(parser, true, \"2006-W27-3T+02:00\");\n+        assertParse(parser, true, \"2006-123T+02:00\");\n+        \n+        assertParse(parser, true, \"2006-06-09T10:20:30.040\");\n+        assertParse(parser, true, \"2006-W27-3T10:20:30.040\");\n+        assertParse(parser, true, \"2006-123T10:20:30.040\");\n+        assertParse(parser, true, \"2006-06-09T10:20:30.040+02:00\");\n+        assertParse(parser, true, \"2006-W27-3T10:20:30.040+02:00\");\n+        assertParse(parser, true, \"2006-123T10:20:30.040+02:00\");\n+        \n+        assertParse(parser, false, \"T10:20:30.040\");\n+        assertParse(parser, false, \"T10.5\");\n+        assertParse(parser, false, \"T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"T10.5+02:00\");\n+        \n+        assertParse(parser, false, \"10:20:30.040\");\n+        assertParse(parser, false, \"10.5\");\n+        assertParse(parser, false, \"10:20:30.040+02:00\");\n+        assertParse(parser, false, \"10.5+02:00\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_localDateOptionalTimeParser() {\n+        DateTimeFormatter parser = ISODateTimeFormat.localDateOptionalTimeParser();\n+        assertEquals(DateTimeZone.UTC, parser.getZone());\n+        assertParse(parser, true, \"2006-06-09\");\n+        assertParse(parser, true, \"2006-W27-3\");\n+        assertParse(parser, true, \"2006-123\");\n+        assertParse(parser, false, \"2006-06-09T+02:00\");\n+        assertParse(parser, false, \"2006-W27-3T+02:00\");\n+        assertParse(parser, false, \"2006-123T+02:00\");\n+        \n+        assertParse(parser, true, \"2006-06-09T10:20:30.040\");\n+        assertParse(parser, true, \"2006-W27-3T10:20:30.040\");\n+        assertParse(parser, true, \"2006-123T10:20:30.040\");\n+        assertParse(parser, false, \"2006-06-09T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"2006-W27-3T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"2006-123T10:20:30.040+02:00\");\n+        \n+        assertParse(parser, false, \"T10:20:30.040\");\n+        assertParse(parser, false, \"T10.5\");\n+        assertParse(parser, false, \"T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"T10.5+02:00\");\n+        \n+        assertParse(parser, false, \"10:20:30.040\");\n+        assertParse(parser, false, \"10.5\");\n+        assertParse(parser, false, \"10:20:30.040+02:00\");\n+        assertParse(parser, false, \"10.5+02:00\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    public void test_date() {\n+        DateTimeFormatter parser = ISODateTimeFormat.date();\n+        assertParse(parser, \"2006-02-04\", new DateTime(2006, 2, 4, 0, 0, 0, 0));\n+        assertParse(parser, \"2006-2-04\", new DateTime(2006, 2, 4, 0, 0, 0, 0));\n+        assertParse(parser, \"2006-02-4\", new DateTime(2006, 2, 4, 0, 0, 0, 0));\n+        assertParse(parser, \"2006-2-4\", new DateTime(2006, 2, 4, 0, 0, 0, 0));\n+        assertParse(parser, false, \"2006-02-\");\n+        assertParse(parser, false, \"2006-02\");\n+        assertParse(parser, false, \"2006--4\");\n+        assertParse(parser, false, \"2006-1\");\n+        assertParse(parser, false, \"2006\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_time() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.time();\n+        assertParse(parser, \"10:20:30.400999999Z\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"10:20:30.400Z\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"10:20:30.40Z\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"10:20:30.4Z\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"5:6:7.8Z\", new DateTime(1970, 1, 1, 5, 6, 7, 800));\n+        assertParse(parser, false, \"10:20.400Z\");\n+        assertParse(parser, false, \"10:2.400Z\");\n+        assertParse(parser, false, \"10.400Z\");\n+        assertParse(parser, false, \"1.400Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_timeNoMillis() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.timeNoMillis();\n+        assertParse(parser, \"10:20:30Z\", new DateTime(1970, 1, 1, 10, 20, 30, 0));\n+        assertParse(parser, \"5:6:7Z\", new DateTime(1970, 1, 1, 5, 6, 7, 0));\n+        assertParse(parser, false, \"10:20Z\");\n+        assertParse(parser, false, \"10:2Z\");\n+        assertParse(parser, false, \"10Z\");\n+        assertParse(parser, false, \"1Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_tTime() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.tTime();\n+        assertParse(parser, \"T10:20:30.400999999Z\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"T10:20:30.400Z\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"T10:20:30.40Z\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"T10:20:30.4Z\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"T5:6:7.8Z\", new DateTime(1970, 1, 1, 5, 6, 7, 800));\n+        assertParse(parser, false, \"T10:20.400Z\");\n+        assertParse(parser, false, \"T102.400Z\");\n+        assertParse(parser, false, \"T10.400Z\");\n+        assertParse(parser, false, \"T1.400Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_tTimeNoMillis() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.tTimeNoMillis();\n+        assertParse(parser, \"T10:20:30Z\", new DateTime(1970, 1, 1, 10, 20, 30, 0));\n+        assertParse(parser, \"T5:6:7Z\", new DateTime(1970, 1, 1, 5, 6, 7, 0));\n+        assertParse(parser, false, \"T10:20Z\");\n+        assertParse(parser, false, \"T10:2Z\");\n+        assertParse(parser, false, \"T10Z\");\n+        assertParse(parser, false, \"T1Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_dateTime() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.dateTime();\n+        assertParse(parser, \"2006-02-04T10:20:30.400999999Z\", new DateTime(2006, 2, 4, 10, 20, 30, 400));\n+        assertParse(parser, \"2006-02-04T10:20:30.400Z\", new DateTime(2006, 2, 4, 10, 20, 30, 400));\n+        assertParse(parser, \"2006-02-04T10:20:30.40Z\", new DateTime(2006, 2, 4, 10, 20, 30, 400));\n+        assertParse(parser, \"2006-02-04T10:20:30.4Z\", new DateTime(2006, 2, 4, 10, 20, 30, 400));\n+        assertParse(parser, \"2006-02-4T10:20:30.400Z\", new DateTime(2006, 2, 4, 10, 20, 30, 400));\n+        assertParse(parser, \"2006-2-04T10:20:30.400Z\", new DateTime(2006, 2, 4, 10, 20, 30, 400));\n+        assertParse(parser, \"2006-2-4T10:20:30.400Z\", new DateTime(2006, 2, 4, 10, 20, 30, 400));\n+        assertParse(parser, \"2006-02-04T5:6:7.800Z\", new DateTime(2006, 2, 4, 5, 6, 7, 800));\n+        assertParse(parser, false, \"2006-02-T10:20:30.400Z\");\n+        assertParse(parser, false, \"2006-12T10:20:30.400Z\");\n+        assertParse(parser, false, \"2006-1T10:20:30.400Z\");\n+        assertParse(parser, false, \"2006T10:20:30.400Z\");\n+        assertParse(parser, false, \"200T10:20:30.400Z\");\n+        assertParse(parser, false, \"20T10:20:30.400Z\");\n+        assertParse(parser, false, \"2T10:20:30.400Z\");\n+        assertParse(parser, false, \"2006-02-04T10:20.400Z\");\n+        assertParse(parser, false, \"2006-02-04T10:2.400Z\");\n+        assertParse(parser, false, \"2006-02-04T10.400Z\");\n+        assertParse(parser, false, \"2006-02-04T1.400Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_dateTimeNoMillis() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.dateTimeNoMillis();\n+        assertParse(parser, \"2006-02-04T10:20:30Z\", new DateTime(2006, 2, 4, 10, 20, 30, 0));\n+        assertParse(parser, \"2006-02-4T10:20:30Z\", new DateTime(2006, 2, 4, 10, 20, 30, 0));\n+        assertParse(parser, \"2006-2-04T10:20:30Z\", new DateTime(2006, 2, 4, 10, 20, 30, 0));\n+        assertParse(parser, \"2006-2-4T10:20:30Z\", new DateTime(2006, 2, 4, 10, 20, 30, 0));\n+        assertParse(parser, \"2006-02-04T5:6:7Z\", new DateTime(2006, 2, 4, 5, 6, 7, 0));\n+        assertParse(parser, false, \"2006-02-T10:20:30Z\");\n+        assertParse(parser, false, \"2006-12T10:20:30Z\");\n+        assertParse(parser, false, \"2006-1T10:20:30Z\");\n+        assertParse(parser, false, \"2006T10:20:30Z\");\n+        assertParse(parser, false, \"200T10:20:30Z\");\n+        assertParse(parser, false, \"20T10:20:30Z\");\n+        assertParse(parser, false, \"2T10:20:30Z\");\n+        assertParse(parser, false, \"2006-02-04T10:20Z\");\n+        assertParse(parser, false, \"2006-02-04T10:2Z\");\n+        assertParse(parser, false, \"2006-02-04T10Z\");\n+        assertParse(parser, false, \"2006-02-04T1Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_ordinalDate() {\n+        DateTimeFormatter parser = ISODateTimeFormat.ordinalDate();\n+        assertParse(parser, \"2006-123\", new DateTime(2006, 1, 1, 0, 0, 0, 0).withDayOfYear(123));\n+        assertParse(parser, \"2006-12\", new DateTime(2006, 1, 1, 0, 0, 0, 0).withDayOfYear(12));\n+        assertParse(parser, \"2006-1\", new DateTime(2006, 1, 1, 0, 0, 0, 0).withDayOfYear(1));\n+        assertParse(parser, false, \"2006-\");\n+        assertParse(parser, false, \"2006\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_ordinalDateTime() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.ordinalDateTime();\n+        assertParse(parser, \"2006-123T10:20:30.400999999Z\", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123));\n+        assertParse(parser, \"2006-123T10:20:30.400Z\", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123));\n+        assertParse(parser, \"2006-123T10:20:30.40Z\", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123));\n+        assertParse(parser, \"2006-123T10:20:30.4Z\", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123));\n+        assertParse(parser, \"2006-12T10:20:30.400Z\", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(12));\n+        assertParse(parser, \"2006-1T10:20:30.400Z\", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(1));\n+        assertParse(parser, \"2006-123T5:6:7.800Z\", new DateTime(2006, 1, 1, 5, 6, 7, 800).withDayOfYear(123));\n+        assertParse(parser, false, \"2006-T10:20:30.400Z\");\n+        assertParse(parser, false, \"2006T10:20:30.400Z\");\n+        assertParse(parser, false, \"2006-123T10:20.400Z\");\n+        assertParse(parser, false, \"2006-123T10:2.400Z\");\n+        assertParse(parser, false, \"2006-123T10.400Z\");\n+        assertParse(parser, false, \"2006-123T1.400Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_ordinalDateTimeNoMillis() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.ordinalDateTimeNoMillis();\n+        assertParse(parser, \"2006-123T10:20:30Z\", new DateTime(2006, 1, 1, 10, 20, 30, 0).withDayOfYear(123));\n+        assertParse(parser, \"2006-12T10:20:30Z\", new DateTime(2006, 1, 1, 10, 20, 30, 0).withDayOfYear(12));\n+        assertParse(parser, \"2006-1T10:20:30Z\", new DateTime(2006, 1, 1, 10, 20, 30, 0).withDayOfYear(1));\n+        assertParse(parser, \"2006-123T5:6:7Z\", new DateTime(2006, 1, 1, 5, 6, 7, 0).withDayOfYear(123));\n+        assertParse(parser, false, \"2006-T10:20:30Z\");\n+        assertParse(parser, false, \"2006T10:20:30Z\");\n+        assertParse(parser, false, \"2006-123T10:20Z\");\n+        assertParse(parser, false, \"2006-123T10:2Z\");\n+        assertParse(parser, false, \"2006-123T10Z\");\n+        assertParse(parser, false, \"2006-123T1Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_weekDate() {\n+        DateTimeFormatter parser = ISODateTimeFormat.weekDate();\n+        assertParse(parser, \"2006-W27-3\", new DateTime(2006, 6, 1, 0, 0, 0, 0).withWeekOfWeekyear(27).withDayOfWeek(3));\n+        assertParse(parser, \"2006-W2-3\", new DateTime(2006, 6, 1, 0, 0, 0, 0).withWeekOfWeekyear(2).withDayOfWeek(3));\n+        assertParse(parser, false, \"2006-W-3\");\n+        assertParse(parser, false, \"2006-W27-\");\n+        assertParse(parser, false, \"2006-W27\");\n+        assertParse(parser, false, \"2006-W2\");\n+        assertParse(parser, false, \"2006-W\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_weekDateTime() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.weekDateTime();\n+        assertParse(parser, \"2006-W27-3T10:20:30.400999999Z\", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3));\n+        assertParse(parser, \"2006-W27-3T10:20:30.400Z\", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3));\n+        assertParse(parser, \"2006-W27-3T10:20:30.40Z\", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3));\n+        assertParse(parser, \"2006-W27-3T10:20:30.4Z\", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3));\n+        assertParse(parser, \"2006-W2-3T10:20:30.400Z\", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(2).withDayOfWeek(3));\n+        assertParse(parser, \"2006-W27-3T5:6:7.800Z\", new DateTime(2006, 6, 1, 5, 6, 7, 800).withWeekOfWeekyear(27).withDayOfWeek(3));\n+        assertParse(parser, false, \"2006-W27-T10:20:30.400Z\");\n+        assertParse(parser, false, \"2006-W27T10:20:30.400Z\");\n+        assertParse(parser, false, \"2006-W2T10:20:30.400Z\");\n+        assertParse(parser, false, \"2006-W-3T10:20:30.400Z\");\n+        assertParse(parser, false, \"2006-W27-3T10:20.400Z\");\n+        assertParse(parser, false, \"2006-W27-3T10:2.400Z\");\n+        assertParse(parser, false, \"2006-W27-3T10.400Z\");\n+        assertParse(parser, false, \"2006-W27-3T1.400Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_weekDateTimeNoMillis() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.weekDateTimeNoMillis();\n+        assertParse(parser, \"2006-W27-3T10:20:30Z\", new DateTime(2006, 6, 1, 10, 20, 30, 0).withWeekOfWeekyear(27).withDayOfWeek(3));\n+        assertParse(parser, \"2006-W2-3T10:20:30Z\", new DateTime(2006, 6, 1, 10, 20, 30, 0).withWeekOfWeekyear(2).withDayOfWeek(3));\n+        assertParse(parser, \"2006-W27-3T5:6:7Z\", new DateTime(2006, 6, 1, 5, 6, 7, 0).withWeekOfWeekyear(27).withDayOfWeek(3));\n+        assertParse(parser, false, \"2006-W27-T10:20:30Z\");\n+        assertParse(parser, false, \"2006-W27T10:20:30Z\");\n+        assertParse(parser, false, \"2006-W2T10:20:30Z\");\n+        assertParse(parser, false, \"2006-W-3T10:20:30Z\");\n+        assertParse(parser, false, \"2006-W27-3T10:20Z\");\n+        assertParse(parser, false, \"2006-W27-3T10:2Z\");\n+        assertParse(parser, false, \"2006-W27-3T10Z\");\n+        assertParse(parser, false, \"2006-W27-3T1Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    public void test_basicDate() {\n+        DateTimeFormatter parser = ISODateTimeFormat.basicDate();\n+        assertParse(parser, \"20060204\", new DateTime(2006, 2, 4, 0, 0, 0, 0));\n+        assertParse(parser, false, \"2006024\");\n+        assertParse(parser, false, \"200602\");\n+        assertParse(parser, false, \"20061\");\n+        assertParse(parser, false, \"2006\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_basicTime() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.basicTime();\n+        assertParse(parser, \"102030.400999999Z\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"102030.400Z\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"102030.40Z\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"102030.4Z\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, false, \"10203.400Z\");\n+        assertParse(parser, false, \"1020.400Z\");\n+        assertParse(parser, false, \"102.400Z\");\n+        assertParse(parser, false, \"10.400Z\");\n+        assertParse(parser, false, \"1.400Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_basicTimeNoMillis() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.basicTimeNoMillis();\n+        assertParse(parser, \"102030Z\", new DateTime(1970, 1, 1, 10, 20, 30, 0));\n+        assertParse(parser, false, \"10203Z\");\n+        assertParse(parser, false, \"1020Z\");\n+        assertParse(parser, false, \"102Z\");\n+        assertParse(parser, false, \"10Z\");\n+        assertParse(parser, false, \"1Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_basicTTime() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.basicTTime();\n+        assertParse(parser, \"T102030.400999999Z\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"T102030.400Z\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"T102030.40Z\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"T102030.4Z\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, false, \"T10203.400Z\");\n+        assertParse(parser, false, \"T1020.400Z\");\n+        assertParse(parser, false, \"T102.400Z\");\n+        assertParse(parser, false, \"T10.400Z\");\n+        assertParse(parser, false, \"T1.400Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_basicTTimeNoMillis() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.basicTTimeNoMillis();\n+        assertParse(parser, \"T102030Z\", new DateTime(1970, 1, 1, 10, 20, 30, 0));\n+        assertParse(parser, false, \"T10203Z\");\n+        assertParse(parser, false, \"T1020Z\");\n+        assertParse(parser, false, \"T102Z\");\n+        assertParse(parser, false, \"T10Z\");\n+        assertParse(parser, false, \"T1Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_basicDateTime() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.basicDateTime();\n+        assertParse(parser, \"20061204T102030.400999999Z\", new DateTime(2006, 12, 4, 10, 20, 30, 400));\n+        assertParse(parser, \"20061204T102030.400Z\", new DateTime(2006, 12, 4, 10, 20, 30, 400));\n+        assertParse(parser, \"20061204T102030.40Z\", new DateTime(2006, 12, 4, 10, 20, 30, 400));\n+        assertParse(parser, \"20061204T102030.4Z\", new DateTime(2006, 12, 4, 10, 20, 30, 400));\n+        assertParse(parser, false, \"2006120T102030.400Z\");\n+        assertParse(parser, false, \"200612T102030.400Z\");\n+        assertParse(parser, false, \"20061T102030.400Z\");\n+        assertParse(parser, false, \"2006T102030.400Z\");\n+        assertParse(parser, false, \"200T102030.400Z\");\n+        assertParse(parser, false, \"20T102030.400Z\");\n+        assertParse(parser, false, \"2T102030.400Z\");\n+        assertParse(parser, false, \"20061204T10203.400Z\");\n+        assertParse(parser, false, \"20061204T1020.400Z\");\n+        assertParse(parser, false, \"20061204T102.400Z\");\n+        assertParse(parser, false, \"20061204T10.400Z\");\n+        assertParse(parser, false, \"20061204T1.400Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_basicDateTimeNoMillis() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.basicDateTimeNoMillis();\n+        assertParse(parser, \"20061204T102030Z\", new DateTime(2006, 12, 4, 10, 20, 30, 0));\n+        assertParse(parser, false, \"2006120T102030Z\");\n+        assertParse(parser, false, \"200612T102030Z\");\n+        assertParse(parser, false, \"20061T102030Z\");\n+        assertParse(parser, false, \"2006T102030Z\");\n+        assertParse(parser, false, \"200T102030Z\");\n+        assertParse(parser, false, \"20T102030Z\");\n+        assertParse(parser, false, \"2T102030Z\");\n+        assertParse(parser, false, \"20061204T10203Z\");\n+        assertParse(parser, false, \"20061204T1020Z\");\n+        assertParse(parser, false, \"20061204T102Z\");\n+        assertParse(parser, false, \"20061204T10Z\");\n+        assertParse(parser, false, \"20061204T1Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_basicOrdinalDate() {\n+        DateTimeFormatter parser = ISODateTimeFormat.basicOrdinalDate();\n+        assertParse(parser, \"2006123\", new DateTime(2006, 1, 1, 0, 0, 0, 0).withDayOfYear(123));\n+        assertParse(parser, false, \"200612\");\n+        assertParse(parser, false, \"20061\");\n+        assertParse(parser, false, \"2006\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_basicOrdinalDateTime() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.basicOrdinalDateTime();\n+        assertParse(parser, \"2006123T102030.400999999Z\", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123));\n+        assertParse(parser, \"2006123T102030.400Z\", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123));\n+        assertParse(parser, \"2006123T102030.40Z\", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123));\n+        assertParse(parser, \"2006123T102030.4Z\", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123));\n+        assertParse(parser, false, \"200612T102030.400Z\");\n+        assertParse(parser, false, \"20061T102030.400Z\");\n+        assertParse(parser, false, \"2006T102030.400Z\");\n+        assertParse(parser, false, \"200T102030.400Z\");\n+        assertParse(parser, false, \"20T102030.400Z\");\n+        assertParse(parser, false, \"2T102030.400Z\");\n+        assertParse(parser, false, \"2006123T10203.400Z\");\n+        assertParse(parser, false, \"2006123T1020.400Z\");\n+        assertParse(parser, false, \"2006123T102.400Z\");\n+        assertParse(parser, false, \"2006123T10.400Z\");\n+        assertParse(parser, false, \"2006123T1.400Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_basicOrdinalDateTimeNoMillis() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.basicOrdinalDateTimeNoMillis();\n+        assertParse(parser, \"2006123T102030Z\", new DateTime(2006, 1, 1, 10, 20, 30, 0).withDayOfYear(123));\n+        assertParse(parser, false, \"200612T102030Z\");\n+        assertParse(parser, false, \"20061T102030Z\");\n+        assertParse(parser, false, \"2006T102030Z\");\n+        assertParse(parser, false, \"200T102030Z\");\n+        assertParse(parser, false, \"20T102030Z\");\n+        assertParse(parser, false, \"2T102030Z\");\n+        assertParse(parser, false, \"2006123T10203Z\");\n+        assertParse(parser, false, \"2006123T1020Z\");\n+        assertParse(parser, false, \"2006123T102Z\");\n+        assertParse(parser, false, \"2006123T10Z\");\n+        assertParse(parser, false, \"2006123T1Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_basicWeekDate() {\n+        DateTimeFormatter parser = ISODateTimeFormat.basicWeekDate();\n+        assertParse(parser, \"2006W273\", new DateTime(2006, 6, 1, 0, 0, 0, 0).withWeekOfWeekyear(27).withDayOfWeek(3));\n+        assertParse(parser, false, \"2006W27\");\n+        assertParse(parser, false, \"2006W2\");\n+        assertParse(parser, false, \"2006W\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_basicWeekDateTime() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.basicWeekDateTime();\n+        assertParse(parser, \"2006W273T102030.400999999Z\", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3));\n+        assertParse(parser, \"2006W273T102030.400Z\", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3));\n+        assertParse(parser, \"2006W273T102030.40Z\", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3));\n+        assertParse(parser, \"2006W273T102030.4Z\", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3));\n+        assertParse(parser, false, \"2006W27T102030.400Z\");\n+        assertParse(parser, false, \"2006W2T102030.400Z\");\n+        assertParse(parser, false, \"2006W273T10203.400Z\");\n+        assertParse(parser, false, \"2006W273T1020.400Z\");\n+        assertParse(parser, false, \"2006W273T102.400Z\");\n+        assertParse(parser, false, \"2006W273T10.400Z\");\n+        assertParse(parser, false, \"2006W273T1.400Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_basicWeekDateTimeNoMillis() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.basicWeekDateTimeNoMillis();\n+        assertParse(parser, \"2006W273T102030Z\", new DateTime(2006, 6, 1, 10, 20, 30, 0).withWeekOfWeekyear(27).withDayOfWeek(3));\n+        assertParse(parser, false, \"2006W27T102030Z\");\n+        assertParse(parser, false, \"2006W2T102030Z\");\n+        assertParse(parser, false, \"2006W273T10203Z\");\n+        assertParse(parser, false, \"2006W273T1020Z\");\n+        assertParse(parser, false, \"2006W273T102Z\");\n+        assertParse(parser, false, \"2006W273T10Z\");\n+        assertParse(parser, false, \"2006W273T1Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    public void test_hourMinute() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.hourMinute();\n+        assertParse(parser, \"10:20\", new DateTime(1970, 1, 1, 10, 20, 0, 0));\n+        assertParse(parser, \"5:6\", new DateTime(1970, 1, 1, 5, 6, 0, 0));\n+        assertParse(parser, false, \"10:20:30.400999999\");\n+        assertParse(parser, false, \"10:20:30.400\");\n+        assertParse(parser, false, \"10:20:30\");\n+        assertParse(parser, false, \"10:20.400\");\n+        assertParse(parser, false, \"10:2.400\");\n+        assertParse(parser, false, \"10.400\");\n+        assertParse(parser, false, \"1.400\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_hourMinuteSecond() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.hourMinuteSecond();\n+        assertParse(parser, \"10:20:30\", new DateTime(1970, 1, 1, 10, 20, 30, 0));\n+        assertParse(parser, \"5:6:7\", new DateTime(1970, 1, 1, 5, 6, 7, 0));\n+        assertParse(parser, false, \"10:20:30.400999999\");\n+        assertParse(parser, false, \"10:20:30.400\");\n+        assertParse(parser, false, \"10:20:30.4\");\n+        assertParse(parser, false, \"10:20.400\");\n+        assertParse(parser, false, \"10:2.400\");\n+        assertParse(parser, false, \"10.400\");\n+        assertParse(parser, false, \"1.400\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_hourMinuteSecondMillis() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.hourMinuteSecondMillis();\n+        assertParse(parser, \"10:20:30.400\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"10:20:30.40\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"10:20:30.4\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"5:6:7.8\", new DateTime(1970, 1, 1, 5, 6, 7, 800));\n+        assertParse(parser, false, \"10:20:30.400999999\");\n+        assertParse(parser, false, \"10:20.400\");\n+        assertParse(parser, false, \"10:2.400\");\n+        assertParse(parser, false, \"10.400\");\n+        assertParse(parser, false, \"1.400\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_hourMinuteSecondFraction() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.hourMinuteSecondFraction();\n+        assertParse(parser, \"10:20:30.400999999\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"10:20:30.400\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"10:20:30.40\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"10:20:30.4\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"5:6:7.8\", new DateTime(1970, 1, 1, 5, 6, 7, 800));\n+        assertParse(parser, false, \"10:20.400\");\n+        assertParse(parser, false, \"10:2.400\");\n+        assertParse(parser, false, \"10.400\");\n+        assertParse(parser, false, \"1.400\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    private void assertParse(DateTimeFormatter parser, boolean expected, String str) {\n+        if (expected) {\n+            parser.parseMillis(str);\n+        } else {\n+            try {\n+                parser.parseMillis(str);\n+                fail();\n+            } catch (IllegalArgumentException ex) {\n+                // expected\n+            }\n+        }\n+    }\n+\n+    private void assertParse(DateTimeFormatter parser, String str, DateTime expected) {\n+        DateTime dt = parser.parseDateTime(str);\n+        assertEquals(expected, dt);\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/format/TestISODateTimeFormat_Fields.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.format;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTimeFieldType;\n+import org.joda.time.Partial;\n+\n+/**\n+ * This class is a Junit unit test for ISODateTimeFormat.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestISODateTimeFormat_Fields extends TestCase {\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestISODateTimeFormat_Fields.class);\n+    }\n+\n+    public TestISODateTimeFormat_Fields(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+    }\n+\n+    protected void tearDown() throws Exception {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_null() {\n+        try {\n+            ISODateTimeFormat.forFields((Collection) null, true, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_empty() {\n+        try {\n+            ISODateTimeFormat.forFields(new ArrayList(), true, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    public void testForFields_calBased_YMD() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.year(),\n+                DateTimeFieldType.monthOfYear(),\n+                DateTimeFieldType.dayOfMonth(),\n+        };\n+        int[] values = new int[] {2005, 6, 25};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"2005-06-25\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"2005-06-25\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"20050625\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"20050625\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_calBased_YMD_unmodifiable() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.year(),\n+                DateTimeFieldType.monthOfYear(),\n+                DateTimeFieldType.dayOfMonth(),\n+        };\n+        int[] values = new int[] {2005, 6, 25};\n+        List types = Collections.unmodifiableList(new ArrayList(Arrays.asList(fields)));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"2005-06-25\", f.print(new Partial(fields, values)));\n+        assertEquals(3, types.size());\n+        \n+        types = Arrays.asList(fields);\n+        f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"2005-06-25\", f.print(new Partial(fields, values)));\n+        assertEquals(3, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_calBased_YMD_duplicates() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.year(),\n+                DateTimeFieldType.monthOfYear(),\n+                DateTimeFieldType.dayOfMonth(),\n+        };\n+        DateTimeFieldType[] dupFields = new DateTimeFieldType[] {\n+                DateTimeFieldType.year(),\n+                DateTimeFieldType.monthOfYear(),\n+                DateTimeFieldType.dayOfMonth(),\n+                DateTimeFieldType.monthOfYear(),\n+        };\n+        int[] values = new int[] {2005, 6, 25};\n+        List types = new ArrayList(Arrays.asList(dupFields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"2005-06-25\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = Arrays.asList(dupFields);\n+        f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"2005-06-25\", f.print(new Partial(fields, values)));\n+        assertEquals(4, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_calBased_Y() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.year(),\n+        };\n+        int[] values = new int[] {2005};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"2005\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"2005\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"2005\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"2005\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_calBased_M() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.monthOfYear(),\n+        };\n+        int[] values = new int[] {6};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"--06\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"--06\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"--06\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"--06\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_calBased_D() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.dayOfMonth(),\n+        };\n+        int[] values = new int[] {25};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"---25\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"---25\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"---25\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"---25\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_calBased_YM() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.year(),\n+                DateTimeFieldType.monthOfYear(),\n+        };\n+        int[] values = new int[] {2005, 6};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"2005-06\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"2005-06\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"2005-06\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"2005-06\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_calBased_MD() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.monthOfYear(),\n+                DateTimeFieldType.dayOfMonth(),\n+        };\n+        int[] values = new int[] {6, 25};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"--06-25\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"--06-25\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"--0625\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"--0625\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_calBased_YD() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.year(),\n+                DateTimeFieldType.dayOfMonth(),\n+        };\n+        int[] values = new int[] {2005, 25};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"2005--25\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"2005--25\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, true, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, false, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    public void testForFields_weekBased_YWD() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.weekyear(),\n+                DateTimeFieldType.weekOfWeekyear(),\n+                DateTimeFieldType.dayOfWeek(),\n+        };\n+        int[] values = new int[] {2005, 8, 5};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"2005-W08-5\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"2005-W08-5\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"2005W085\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"2005W085\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_weekBased_Y() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.weekyear(),\n+        };\n+        int[] values = new int[] {2005};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"2005\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"2005\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"2005\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"2005\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_weekBased_W() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.weekOfWeekyear(),\n+        };\n+        int[] values = new int[] {8};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"-W08\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"-W08\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"-W08\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"-W08\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_weekBased_D() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.dayOfWeek(),\n+        };\n+        int[] values = new int[] {5};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"-W-5\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"-W-5\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"-W-5\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"-W-5\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_weekBased_YW() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.weekyear(),\n+                DateTimeFieldType.weekOfWeekyear(),\n+        };\n+        int[] values = new int[] {2005, 8};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"2005-W08\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"2005-W08\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"2005W08\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"2005W08\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_weekBased_WD() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.weekOfWeekyear(),\n+                DateTimeFieldType.dayOfWeek(),\n+        };\n+        int[] values = new int[] {8, 5};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"-W08-5\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"-W08-5\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"-W085\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"-W085\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_weekBased_YD() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.weekyear(),\n+                DateTimeFieldType.dayOfWeek(),\n+        };\n+        int[] values = new int[] {2005, 5};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"2005-W-5\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"2005W-5\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, true, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, false, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    public void testForFields_ordinalBased_YD() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.year(),\n+                DateTimeFieldType.dayOfYear(),\n+        };\n+        int[] values = new int[] {2005, 177};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"2005-177\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"2005-177\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"2005177\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"2005177\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_ordinalBased_Y() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.year(),\n+        };\n+        int[] values = new int[] {2005};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"2005\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"2005\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"2005\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"2005\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_ordinalBased_D() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.dayOfYear(),\n+        };\n+        int[] values = new int[] {177};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"-177\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"-177\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"-177\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"-177\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    public void testForFields_time_HMSm() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.hourOfDay(),\n+                DateTimeFieldType.minuteOfHour(),\n+                DateTimeFieldType.secondOfMinute(),\n+                DateTimeFieldType.millisOfSecond(),\n+        };\n+        int[] values = new int[] {10, 20, 30, 40};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"10:20:30.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"10:20:30.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"102030.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"102030.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_time_HMS() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.hourOfDay(),\n+                DateTimeFieldType.minuteOfHour(),\n+                DateTimeFieldType.secondOfMinute(),\n+        };\n+        int[] values = new int[] {10, 20, 30};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"10:20:30\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"10:20:30\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"102030\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"102030\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_time_HM() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.hourOfDay(),\n+                DateTimeFieldType.minuteOfHour(),\n+        };\n+        int[] values = new int[] {10, 20};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"10:20\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"10:20\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"1020\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"1020\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_time_H() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.hourOfDay(),\n+        };\n+        int[] values = new int[] {10};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"10\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"10\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"10\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"10\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_time_MSm() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.minuteOfHour(),\n+                DateTimeFieldType.secondOfMinute(),\n+                DateTimeFieldType.millisOfSecond(),\n+        };\n+        int[] values = new int[] {20, 30, 40};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"-20:30.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"-20:30.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"-2030.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"-2030.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_time_MS() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.minuteOfHour(),\n+                DateTimeFieldType.secondOfMinute(),\n+        };\n+        int[] values = new int[] {20, 30};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"-20:30\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"-20:30\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"-2030\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"-2030\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_time_M() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.minuteOfHour(),\n+        };\n+        int[] values = new int[] {20};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"-20\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"-20\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"-20\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"-20\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_time_Sm() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.secondOfMinute(),\n+                DateTimeFieldType.millisOfSecond(),\n+        };\n+        int[] values = new int[] {30, 40};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"--30.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"--30.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"--30.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"--30.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_time_S() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.secondOfMinute(),\n+        };\n+        int[] values = new int[] {30};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"--30\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"--30\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"--30\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"--30\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_time_m() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.millisOfSecond(),\n+        };\n+        int[] values = new int[] {40};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"---.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"---.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, true, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, false, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_time_Hm() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.hourOfDay(),\n+                DateTimeFieldType.millisOfSecond(),\n+        };\n+        int[] values = new int[] {10, 40};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"10--.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"10--.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, true, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, false, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_time_HS() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.hourOfDay(),\n+                DateTimeFieldType.secondOfMinute(),\n+        };\n+        int[] values = new int[] {10, 30};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"10-30\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"10-30\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, true, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, false, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_time_Mm() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.minuteOfHour(),\n+                DateTimeFieldType.millisOfSecond(),\n+        };\n+        int[] values = new int[] {20, 40};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"-20-.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"-20-.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, true, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, false, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_time_HSm() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.hourOfDay(),\n+                DateTimeFieldType.secondOfMinute(),\n+                DateTimeFieldType.millisOfSecond(),\n+        };\n+        int[] values = new int[] {10, 30, 40};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"10-30.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"10-30.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, true, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, false, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_time_HMm() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.hourOfDay(),\n+                DateTimeFieldType.minuteOfHour(),\n+                DateTimeFieldType.millisOfSecond(),\n+        };\n+        int[] values = new int[] {10, 20, 40};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"10:20-.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"1020-.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, true, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, false, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    public void testForFields_datetime_YMDH() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.year(),\n+                DateTimeFieldType.monthOfYear(),\n+                DateTimeFieldType.dayOfMonth(),\n+                DateTimeFieldType.hourOfDay(),\n+        };\n+        int[] values = new int[] {2005, 6, 25, 12};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"2005-06-25T12\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"2005-06-25T12\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"20050625T12\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"20050625T12\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_datetime_DH() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.dayOfMonth(),\n+                DateTimeFieldType.hourOfDay(),\n+        };\n+        int[] values = new int[] {25, 12};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"---25T12\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"---25T12\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"---25T12\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"---25T12\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_datetime_YH() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.year(),\n+                DateTimeFieldType.hourOfDay(),\n+        };\n+        int[] values = new int[] {2005, 12};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"2005T12\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"2005T12\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, true, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, false, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_datetime_DM() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.dayOfMonth(),\n+                DateTimeFieldType.minuteOfHour(),\n+        };\n+        int[] values = new int[] {25, 20};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"---25T-20\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"---25T-20\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, true, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, false, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/format/TestISOPeriodFormat.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.format;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeUtils;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.Period;\n+import org.joda.time.PeriodType;\n+\n+/**\n+ * This class is a Junit unit test for ISOPeriodFormat.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestISOPeriodFormat extends TestCase {\n+    \n+    private static final Period PERIOD = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+    private static final Period EMPTY_PERIOD = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+    private static final Period YEAR_DAY_PERIOD = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime());\n+    private static final Period EMPTY_YEAR_DAY_PERIOD = new Period(0, 0, 0, 0, 0, 0, 0, 0, PeriodType.yearDayTime());\n+    private static final Period TIME_PERIOD = new Period(0, 0, 0, 0, 5, 6, 7, 8);\n+    private static final Period DATE_PERIOD = new Period(1, 2, 3, 4, 0, 0, 0, 0);\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+\n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestISOPeriodFormat.class);\n+    }\n+\n+    public TestISOPeriodFormat(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSubclassableConstructor() {\n+        ISOPeriodFormat f = new ISOPeriodFormat() {\n+            // test constructor is protected\n+        };\n+        assertNotNull(f);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormatStandard() {\n+        Period p = new Period(1, 2, 3, 4, 5, 6 ,7, 8);\n+        assertEquals(\"P1Y2M3W4DT5H6M7.008S\", ISOPeriodFormat.standard().print(p));\n+        p = new Period(1, 2, 3, 4, 5, 6 ,7, 0);\n+        assertEquals(\"P1Y2M3W4DT5H6M7S\", ISOPeriodFormat.standard().print(p));\n+        \n+        p = new Period(0);\n+        assertEquals(\"PT0S\", ISOPeriodFormat.standard().print(p));\n+        p = new Period(0, PeriodType.standard().withMillisRemoved().withSecondsRemoved());\n+        assertEquals(\"PT0M\", ISOPeriodFormat.standard().print(p));\n+        \n+        assertEquals(\"P1Y4DT5H6M7.008S\", ISOPeriodFormat.standard().print(YEAR_DAY_PERIOD));\n+        assertEquals(\"PT0S\", ISOPeriodFormat.standard().print(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(\"P1Y2M3W4D\", ISOPeriodFormat.standard().print(DATE_PERIOD));\n+        assertEquals(\"PT5H6M7.008S\", ISOPeriodFormat.standard().print(TIME_PERIOD));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormatAlternate() {\n+        Period p = new Period(1, 2, 3, 4, 5, 6 ,7, 8);\n+        assertEquals(\"P00010204T050607.008\", ISOPeriodFormat.alternate().print(p));\n+        p = new Period(1, 2, 3, 4, 5, 6 ,7, 0);\n+        assertEquals(\"P00010204T050607\", ISOPeriodFormat.alternate().print(p));\n+        \n+        p = new Period(0);\n+        assertEquals(\"P00000000T000000\", ISOPeriodFormat.alternate().print(p));\n+        p = new Period(0, PeriodType.standard().withMillisRemoved().withSecondsRemoved());\n+        assertEquals(\"P00000000T000000\", ISOPeriodFormat.alternate().print(p));\n+        \n+        assertEquals(\"P00010004T050607.008\", ISOPeriodFormat.alternate().print(YEAR_DAY_PERIOD));\n+        assertEquals(\"P00000000T000000\", ISOPeriodFormat.alternate().print(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(\"P00010204T000000\", ISOPeriodFormat.alternate().print(DATE_PERIOD));\n+        assertEquals(\"P00000000T050607.008\", ISOPeriodFormat.alternate().print(TIME_PERIOD));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormatAlternateExtended() {\n+        Period p = new Period(1, 2, 3, 4, 5, 6 ,7, 8);\n+        assertEquals(\"P0001-02-04T05:06:07.008\", ISOPeriodFormat.alternateExtended().print(p));\n+        p = new Period(1, 2, 3, 4, 5, 6 ,7, 0);\n+        assertEquals(\"P0001-02-04T05:06:07\", ISOPeriodFormat.alternateExtended().print(p));\n+        \n+        p = new Period(0);\n+        assertEquals(\"P0000-00-00T00:00:00\", ISOPeriodFormat.alternateExtended().print(p));\n+        p = new Period(0, PeriodType.standard().withMillisRemoved().withSecondsRemoved());\n+        assertEquals(\"P0000-00-00T00:00:00\", ISOPeriodFormat.alternateExtended().print(p));\n+        \n+        assertEquals(\"P0001-00-04T05:06:07.008\", ISOPeriodFormat.alternateExtended().print(YEAR_DAY_PERIOD));\n+        assertEquals(\"P0000-00-00T00:00:00\", ISOPeriodFormat.alternateExtended().print(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(\"P0001-02-04T00:00:00\", ISOPeriodFormat.alternateExtended().print(DATE_PERIOD));\n+        assertEquals(\"P0000-00-00T05:06:07.008\", ISOPeriodFormat.alternateExtended().print(TIME_PERIOD));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormatAlternateWithWeeks() {\n+        Period p = new Period(1, 2, 3, 4, 5, 6 ,7, 8);\n+        assertEquals(\"P0001W0304T050607.008\", ISOPeriodFormat.alternateWithWeeks().print(p));\n+        p = new Period(1, 2, 3, 4, 5, 6 ,7, 0);\n+        assertEquals(\"P0001W0304T050607\", ISOPeriodFormat.alternateWithWeeks().print(p));\n+        \n+        p = new Period(0);\n+        assertEquals(\"P0000W0000T000000\", ISOPeriodFormat.alternateWithWeeks().print(p));\n+        p = new Period(0, PeriodType.standard().withMillisRemoved().withSecondsRemoved());\n+        assertEquals(\"P0000W0000T000000\", ISOPeriodFormat.alternateWithWeeks().print(p));\n+        \n+        assertEquals(\"P0001W0004T050607.008\", ISOPeriodFormat.alternateWithWeeks().print(YEAR_DAY_PERIOD));\n+        assertEquals(\"P0000W0000T000000\", ISOPeriodFormat.alternateWithWeeks().print(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(\"P0001W0304T000000\", ISOPeriodFormat.alternateWithWeeks().print(DATE_PERIOD));\n+        assertEquals(\"P0000W0000T050607.008\", ISOPeriodFormat.alternateWithWeeks().print(TIME_PERIOD));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormatAlternateExtendedWithWeeks() {\n+        Period p = new Period(1, 2, 3, 4, 5, 6 ,7, 8);\n+        assertEquals(\"P0001-W03-04T05:06:07.008\", ISOPeriodFormat.alternateExtendedWithWeeks().print(p));\n+        p = new Period(1, 2, 3, 4, 5, 6 ,7, 0);\n+        assertEquals(\"P0001-W03-04T05:06:07\", ISOPeriodFormat.alternateExtendedWithWeeks().print(p));\n+        \n+        p = new Period(0);\n+        assertEquals(\"P0000-W00-00T00:00:00\", ISOPeriodFormat.alternateExtendedWithWeeks().print(p));\n+        p = new Period(0, PeriodType.standard().withMillisRemoved().withSecondsRemoved());\n+        assertEquals(\"P0000-W00-00T00:00:00\", ISOPeriodFormat.alternateExtendedWithWeeks().print(p));\n+        \n+        assertEquals(\"P0001-W00-04T05:06:07.008\", ISOPeriodFormat.alternateExtendedWithWeeks().print(YEAR_DAY_PERIOD));\n+        assertEquals(\"P0000-W00-00T00:00:00\", ISOPeriodFormat.alternateExtendedWithWeeks().print(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(\"P0001-W03-04T00:00:00\", ISOPeriodFormat.alternateExtendedWithWeeks().print(DATE_PERIOD));\n+        assertEquals(\"P0000-W00-00T05:06:07.008\", ISOPeriodFormat.alternateExtendedWithWeeks().print(TIME_PERIOD));\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/format/TestISOPeriodFormatParsing.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.format;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeUtils;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.Period;\n+import org.joda.time.PeriodType;\n+\n+/**\n+ * This class is a Junit unit test for ISOPeriodFormat.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestISOPeriodFormatParsing extends TestCase {\n+\n+    private static final Period PERIOD = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+    private static final Period EMPTY_PERIOD = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+    private static final Period YEAR_DAY_PERIOD = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime());\n+    private static final Period EMPTY_YEAR_DAY_PERIOD = new Period(0, 0, 0, 0, 0, 0, 0, 0, PeriodType.yearDayTime());\n+    private static final Period TIME_PERIOD = new Period(0, 0, 0, 0, 5, 6, 7, 8);\n+    private static final Period DATE_PERIOD = new Period(1, 2, 3, 4, 0, 0, 0, 0);\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+\n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    // 2002-06-09\n+    private long TEST_TIME_NOW = (y2002days + 31L + 28L + 31L + 30L + 31L + 9L - 1L) * DateTimeConstants.MILLIS_PER_DAY;\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestISOPeriodFormatParsing.class);\n+    }\n+\n+    public TestISOPeriodFormatParsing(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseStandard1() {\n+        PeriodFormatter parser = ISOPeriodFormat.standard();\n+        Period p = parser.parsePeriod(\"P1Y2M3W4DT5H6M7.008S\");\n+        assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 8), p);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseStandard2() {\n+        PeriodFormatter parser = ISOPeriodFormat.standard();\n+        Period p = parser.parsePeriod(\"P0Y0M0W0DT5H6M7.008S\");\n+        assertEquals(new Period(0, 0, 0, 0, 5, 6, 7, 8), p);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseStandard3() {\n+        PeriodFormatter parser = ISOPeriodFormat.standard();\n+        Period p = parser.parsePeriod(\"P0DT5H6M7.008S\");\n+        assertEquals(new Period(0, 0, 0, 0, 5, 6, 7, 8), p);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseStandard4() {\n+        PeriodFormatter parser = ISOPeriodFormat.standard();\n+        Period p = parser.parsePeriod(\"P2Y3DT5H6M7.008S\");\n+        assertEquals(new Period(2, 0, 0, 3, 5, 6, 7, 8), p);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseStandard5() {\n+        PeriodFormatter parser = ISOPeriodFormat.standard();\n+        Period p = parser.parsePeriod(\"P2YT5H6M7.008S\");\n+        assertEquals(new Period(2, 0, 0, 0, 5, 6, 7, 8), p);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseStandard6() {\n+        PeriodFormatter parser = ISOPeriodFormat.standard();\n+        Period p = parser.parsePeriod(\"PT5H6M7.008S\");\n+        assertEquals(new Period(0, 0, 0, 0, 5, 6, 7, 8), p);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseStandard7() {\n+        PeriodFormatter parser = ISOPeriodFormat.standard();\n+        Period p = parser.parsePeriod(\"P1Y2M3W4D\");\n+        assertEquals(new Period(1, 2, 3, 4, 0, 0, 0, 0), p);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseStandard8() {\n+        PeriodFormatter parser = ISOPeriodFormat.standard();\n+        Period p = parser.parsePeriod(\"PT5H6M7S\");\n+        assertEquals(new Period(0, 0, 0, 0, 5, 6, 7, 0), p);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseStandard9() {\n+        PeriodFormatter parser = ISOPeriodFormat.standard();\n+        Period p = parser.parsePeriod(\"PT0S\");\n+        assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 0), p);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseStandard10() {\n+        PeriodFormatter parser = ISOPeriodFormat.standard();\n+        Period p = parser.parsePeriod(\"P0D\");\n+        assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 0), p);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseStandard11() {\n+        PeriodFormatter parser = ISOPeriodFormat.standard();\n+        Period p = parser.parsePeriod(\"P0Y\");\n+        assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 0), p);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseStandardFail1() {\n+        PeriodFormatter parser = ISOPeriodFormat.standard();\n+        try {\n+            parser.parsePeriod(\"P1Y2S\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseStandardFail2() {\n+        PeriodFormatter parser = ISOPeriodFormat.standard();\n+        try {\n+            parser.parsePeriod(\"PS\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseStandardFail3() {\n+        PeriodFormatter parser = ISOPeriodFormat.standard();\n+        try {\n+            parser.parsePeriod(\"PTS\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseStandardFail4() {\n+        PeriodFormatter parser = ISOPeriodFormat.standard();\n+        try {\n+            parser.parsePeriod(\"PXS\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/format/TestPeriodFormat.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.format;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeUtils;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.Period;\n+import org.joda.time.PeriodType;\n+\n+/**\n+ * This class is a Junit unit test for PeriodFormat.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestPeriodFormat extends TestCase {\n+    \n+    private static final Period PERIOD = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+    private static final Period EMPTY_PERIOD = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+    private static final Period YEAR_DAY_PERIOD = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime());\n+    private static final Period EMPTY_YEAR_DAY_PERIOD = new Period(0, 0, 0, 0, 0, 0, 0, 0, PeriodType.yearDayTime());\n+    private static final Period TIME_PERIOD = new Period(0, 0, 0, 0, 5, 6, 7, 8);\n+    private static final Period DATE_PERIOD = new Period(1, 2, 3, 4, 0, 0, 0, 0);\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+\n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestPeriodFormat.class);\n+    }\n+\n+    public TestPeriodFormat(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSubclassableConstructor() {\n+        PeriodFormat f = new PeriodFormat() {\n+            // test constructor is protected\n+        };\n+        assertNotNull(f);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormatStandard() {\n+        Period p = new Period(0, 0, 0, 1, 5, 6 ,7, 8);\n+        assertEquals(\"1 day, 5 hours, 6 minutes, 7 seconds and 8 milliseconds\", PeriodFormat.getDefault().print(p));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormatOneField() {\n+        Period p = Period.days(2);\n+        assertEquals(\"2 days\", PeriodFormat.getDefault().print(p));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormatTwoFields() {\n+        Period p = Period.days(2).withHours(5);\n+        assertEquals(\"2 days and 5 hours\", PeriodFormat.getDefault().print(p));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseOneField() {\n+        Period p = Period.days(2);\n+        assertEquals(p, PeriodFormat.getDefault().parsePeriod(\"2 days\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseTwoFields() {\n+        Period p = Period.days(2).withHours(5);\n+        assertEquals(p, PeriodFormat.getDefault().parsePeriod(\"2 days and 5 hours\"));\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/format/TestPeriodFormatParsing.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.format;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeUtils;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.Period;\n+import org.joda.time.PeriodType;\n+\n+/**\n+ * This class is a Junit unit test for PeriodFormat.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestPeriodFormatParsing extends TestCase {\n+\n+    private static final Period PERIOD = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+    private static final Period EMPTY_PERIOD = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+    private static final Period YEAR_DAY_PERIOD = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime());\n+    private static final Period EMPTY_YEAR_DAY_PERIOD = new Period(0, 0, 0, 0, 0, 0, 0, 0, PeriodType.yearDayTime());\n+    private static final Period TIME_PERIOD = new Period(0, 0, 0, 0, 5, 6, 7, 8);\n+    private static final Period DATE_PERIOD = new Period(1, 2, 3, 4, 0, 0, 0, 0);\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+\n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    // 2002-06-09\n+    private long TEST_TIME_NOW = (y2002days + 31L + 28L + 31L + 30L + 31L + 9L - 1L) * DateTimeConstants.MILLIS_PER_DAY;\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestPeriodFormatParsing.class);\n+    }\n+\n+    public TestPeriodFormatParsing(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseStandard1() {\n+        PeriodFormatter parser = PeriodFormat.getDefault();\n+        Period p = parser.parsePeriod(\"6 years, 3 months and 2 days\");\n+        assertEquals(new Period(6, 3, 0, 2, 0, 0, 0, 0), p);\n+    }\n+\n+    public void testParseCustom1() {\n+        PeriodFormatter formatter = new PeriodFormatterBuilder()\n+            .printZeroAlways()\n+            .appendHours()\n+            .appendSuffix(\":\")\n+            .minimumPrintedDigits(2)\n+            .appendMinutes()\n+            .toFormatter();\n+\n+        Period p;\n+\n+        p = new Period(47, 55, 0, 0);\n+        assertEquals(\"47:55\", formatter.print(p));\n+        assertEquals(p, formatter.parsePeriod(\"47:55\"));\n+        assertEquals(p, formatter.parsePeriod(\"047:055\"));\n+\n+        p = new Period(7, 5, 0, 0);\n+        assertEquals(\"7:05\", formatter.print(p));\n+        assertEquals(p, formatter.parsePeriod(\"7:05\"));\n+        assertEquals(p, formatter.parsePeriod(\"7:5\"));\n+        assertEquals(p, formatter.parsePeriod(\"07:05\"));\n+\n+        p = new Period(0, 5, 0, 0);\n+        assertEquals(\"0:05\", formatter.print(p));\n+        assertEquals(p, formatter.parsePeriod(\"0:05\"));\n+        assertEquals(p, formatter.parsePeriod(\"0:5\"));\n+        assertEquals(p, formatter.parsePeriod(\"00:005\"));\n+        assertEquals(p, formatter.parsePeriod(\"0:005\"));\n+\n+        p = new Period(0, 0, 0, 0);\n+        assertEquals(\"0:00\", formatter.print(p));\n+        assertEquals(p, formatter.parsePeriod(\"0:00\"));\n+        assertEquals(p, formatter.parsePeriod(\"0:0\"));\n+        assertEquals(p, formatter.parsePeriod(\"00:00\"));\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/format/TestPeriodFormatter.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.format;\n+\n+import java.io.CharArrayWriter;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeUtils;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.MutablePeriod;\n+import org.joda.time.Period;\n+import org.joda.time.PeriodType;\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * This class is a Junit unit test for Period Formating.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestPeriodFormatter extends TestCase {\n+\n+    private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    private static final DateTimeZone NEWYORK = DateTimeZone.forID(\"America/New_York\");\n+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n+\n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+    private PeriodFormatter f = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestPeriodFormatter.class);\n+    }\n+\n+    public TestPeriodFormatter(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+        f = ISOPeriodFormat.standard();\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+        f = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPrint_simple() {\n+        Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+        assertEquals(\"P1Y2M3W4DT5H6M7.008S\", f.print(p));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPrint_bufferMethods() throws Exception {\n+        Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+        StringBuffer buf = new StringBuffer();\n+        f.printTo(buf, p);\n+        assertEquals(\"P1Y2M3W4DT5H6M7.008S\", buf.toString());\n+        \n+        buf = new StringBuffer();\n+        try {\n+            f.printTo(buf, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPrint_writerMethods() throws Exception {\n+        Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+        CharArrayWriter out = new CharArrayWriter();\n+        f.printTo(out, p);\n+        assertEquals(\"P1Y2M3W4DT5H6M7.008S\", out.toString());\n+        \n+        out = new CharArrayWriter();\n+        try {\n+            f.printTo(out, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithGetLocaleMethods() {\n+        PeriodFormatter f2 = f.withLocale(Locale.FRENCH);\n+        assertEquals(Locale.FRENCH, f2.getLocale());\n+        assertSame(f2, f2.withLocale(Locale.FRENCH));\n+        \n+        f2 = f.withLocale(null);\n+        assertEquals(null, f2.getLocale());\n+        assertSame(f2, f2.withLocale(null));\n+    }\n+\n+    public void testWithGetParseTypeMethods() {\n+        PeriodFormatter f2 = f.withParseType(PeriodType.dayTime());\n+        assertEquals(PeriodType.dayTime(), f2.getParseType());\n+        assertSame(f2, f2.withParseType(PeriodType.dayTime()));\n+        \n+        f2 = f.withParseType(null);\n+        assertEquals(null, f2.getParseType());\n+        assertSame(f2, f2.withParseType(null));\n+    }\n+\n+    public void testPrinterParserMethods() {\n+        Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+        PeriodFormatter f2 = new PeriodFormatter(f.getPrinter(), f.getParser());\n+        assertEquals(f.getPrinter(), f2.getPrinter());\n+        assertEquals(f.getParser(), f2.getParser());\n+        assertEquals(true, f2.isPrinter());\n+        assertEquals(true, f2.isParser());\n+        assertNotNull(f2.print(p));\n+        assertNotNull(f2.parsePeriod(\"P1Y2M3W4DT5H6M7.008S\"));\n+        \n+        f2 = new PeriodFormatter(f.getPrinter(), null);\n+        assertEquals(f.getPrinter(), f2.getPrinter());\n+        assertEquals(null, f2.getParser());\n+        assertEquals(true, f2.isPrinter());\n+        assertEquals(false, f2.isParser());\n+        assertNotNull(f2.print(p));\n+        try {\n+            assertNotNull(f2.parsePeriod(\"P1Y2M3W4DT5H6M7.008S\"));\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        \n+        f2 = new PeriodFormatter(null, f.getParser());\n+        assertEquals(null, f2.getPrinter());\n+        assertEquals(f.getParser(), f2.getParser());\n+        assertEquals(false, f2.isPrinter());\n+        assertEquals(true, f2.isParser());\n+        try {\n+            f2.print(p);\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        assertNotNull(f2.parsePeriod(\"P1Y2M3W4DT5H6M7.008S\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParsePeriod_simple() {\n+        Period expect = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+        assertEquals(expect, f.parsePeriod(\"P1Y2M3W4DT5H6M7.008S\"));\n+        \n+        try {\n+            f.parsePeriod(\"ABC\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testParsePeriod_parseType() {\n+        Period expect = new Period(0, 0, 0, 4, 5, 6, 7, 8, PeriodType.dayTime());\n+        assertEquals(expect, f.withParseType(PeriodType.dayTime()).parsePeriod(\"P4DT5H6M7.008S\"));\n+        try {\n+            f.withParseType(PeriodType.dayTime()).parsePeriod(\"P3W4DT5H6M7.008S\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseMutablePeriod_simple() {\n+        MutablePeriod expect = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        assertEquals(expect, f.parseMutablePeriod(\"P1Y2M3W4DT5H6M7.008S\"));\n+        \n+        try {\n+            f.parseMutablePeriod(\"ABC\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseInto_simple() {\n+        MutablePeriod expect = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        MutablePeriod result = new MutablePeriod();\n+        assertEquals(20, f.parseInto(result, \"P1Y2M3W4DT5H6M7.008S\", 0));\n+        assertEquals(expect, result);\n+        \n+        try {\n+            f.parseInto(null, \"P1Y2M3W4DT5H6M7.008S\", 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        assertEquals(~0, f.parseInto(result, \"ABC\", 0));\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.format;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeUtils;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.Period;\n+import org.joda.time.PeriodType;\n+\n+/**\n+ * This class is a Junit unit test for PeriodFormatterBuilder.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestPeriodFormatterBuilder extends TestCase {\n+    \n+    private static final Period PERIOD = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+    private static final Period EMPTY_PERIOD = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+    private static final Period YEAR_DAY_PERIOD = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime());\n+    private static final Period EMPTY_YEAR_DAY_PERIOD = new Period(0, 0, 0, 0, 0, 0, 0, 0, PeriodType.yearDayTime());\n+    private static final Period TIME_PERIOD = new Period(0, 0, 0, 0, 5, 6, 7, 8);\n+    private static final Period DATE_PERIOD = new Period(1, 2, 3, 4, 0, 0, 0, 0);\n+\n+    //private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    //private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+\n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+    \n+    private PeriodFormatterBuilder builder;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestPeriodFormatterBuilder.class);\n+    }\n+\n+    public TestPeriodFormatterBuilder(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+        \n+        builder = new PeriodFormatterBuilder();\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToFormatterPrinterParser() {\n+        builder.appendYears();\n+        assertNotNull(builder.toFormatter());\n+        assertNotNull(builder.toPrinter());\n+        assertNotNull(builder.toParser());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormatYears() {\n+        PeriodFormatter f = builder.appendYears().toFormatter();\n+        assertEquals(\"1\", f.print(PERIOD));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"0\", f.print(p));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+    }\n+\n+    public void testFormatMonths() {\n+        PeriodFormatter f = builder.appendMonths().toFormatter();\n+        assertEquals(\"2\", f.print(PERIOD));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"0\", f.print(p));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+    }\n+\n+    public void testFormatWeeks() {\n+        PeriodFormatter f = builder.appendWeeks().toFormatter();\n+        assertEquals(\"3\", f.print(PERIOD));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"0\", f.print(p));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+    }\n+\n+    public void testFormatDays() {\n+        PeriodFormatter f = builder.appendDays().toFormatter();\n+        assertEquals(\"4\", f.print(PERIOD));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"0\", f.print(p));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+    }\n+\n+    public void testFormatHours() {\n+        PeriodFormatter f = builder.appendHours().toFormatter();\n+        assertEquals(\"5\", f.print(PERIOD));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"0\", f.print(p));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+    }\n+\n+    public void testFormatMinutes() {\n+        PeriodFormatter f = builder.appendMinutes().toFormatter();\n+        assertEquals(\"6\", f.print(PERIOD));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"0\", f.print(p));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+    }\n+\n+    public void testFormatSeconds() {\n+        PeriodFormatter f = builder.appendSeconds().toFormatter();\n+        assertEquals(\"7\", f.print(PERIOD));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"0\", f.print(p));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+    }\n+\n+    public void testFormatSecondsWithMillis() {\n+        PeriodFormatter f = builder.appendSecondsWithMillis().toFormatter();\n+        Period p = new Period(0, 0, 0, 0, 0, 0, 7, 0);\n+        assertEquals(\"7.000\", f.print(p));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+        \n+        p = new Period(0, 0, 0, 0, 0, 0, 7, 1);\n+        assertEquals(\"7.001\", f.print(p));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+        \n+        p = new Period(0, 0, 0, 0, 0, 0, 7, 999);\n+        assertEquals(\"7.999\", f.print(p));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+        \n+        p = new Period(0, 0, 0, 0, 0, 0, 7, 1000);\n+        assertEquals(\"8.000\", f.print(p));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+        \n+        p = new Period(0, 0, 0, 0, 0, 0, 7, 1001);\n+        assertEquals(\"8.001\", f.print(p));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+        \n+        p = new Period(0, 0, 0, 0, 0, 0, 7, -1);\n+        assertEquals(\"6.999\", f.print(p));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+        \n+        p = new Period(0, 0, 0, 0, 0, 0, -7, 1);\n+        assertEquals(\"-6.999\", f.print(p));\n+        assertEquals(6, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+        \n+        p = new Period(0, 0, 0, 0, 0, 0, -7, -1);\n+        assertEquals(\"-7.001\", f.print(p));\n+        assertEquals(6, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+        \n+        p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"0.000\", f.print(p));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+    }\n+\n+    public void testFormatSecondsWithOptionalMillis() {\n+        PeriodFormatter f = builder.appendSecondsWithOptionalMillis().toFormatter();\n+        Period p = new Period(0, 0, 0, 0, 0, 0, 7, 0);\n+        assertEquals(\"7\", f.print(p));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+        \n+        p = new Period(0, 0, 0, 0, 0, 0, 7, 1);\n+        assertEquals(\"7.001\", f.print(p));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+        \n+        p = new Period(0, 0, 0, 0, 0, 0, 7, 999);\n+        assertEquals(\"7.999\", f.print(p));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+        \n+        p = new Period(0, 0, 0, 0, 0, 0, 7, 1000);\n+        assertEquals(\"8\", f.print(p));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+        \n+        p = new Period(0, 0, 0, 0, 0, 0, 7, 1001);\n+        assertEquals(\"8.001\", f.print(p));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+        \n+        p = new Period(0, 0, 0, 0, 0, 0, 7, -1);\n+        assertEquals(\"6.999\", f.print(p));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+        \n+        p = new Period(0, 0, 0, 0, 0, 0, -7, 1);\n+        assertEquals(\"-6.999\", f.print(p));\n+        assertEquals(6, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+        \n+        p = new Period(0, 0, 0, 0, 0, 0, -7, -1);\n+        assertEquals(\"-7.001\", f.print(p));\n+        assertEquals(6, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+        \n+        p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"0\", f.print(p));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+    }\n+\n+    public void testFormatMillis() {\n+        PeriodFormatter f = builder.appendMillis().toFormatter();\n+        assertEquals(\"8\", f.print(PERIOD));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"0\", f.print(p));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+    }\n+\n+    public void testFormatMillis3Digit() {\n+        PeriodFormatter f = builder.appendMillis3Digit().toFormatter();\n+        assertEquals(\"008\", f.print(PERIOD));\n+        assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"000\", f.print(p));\n+        assertEquals(3, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormatPrefixSimple1() {\n+        PeriodFormatter f = builder.appendPrefix(\"Years:\").appendYears().toFormatter();\n+        assertEquals(\"Years:1\", f.print(PERIOD));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"Years:0\", f.print(p));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+    }\n+\n+    public void testFormatPrefixSimple2() {\n+        PeriodFormatter f = builder.appendPrefix(\"Hours:\").appendHours().toFormatter();\n+        assertEquals(\"Hours:5\", f.print(PERIOD));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"Hours:0\", f.print(p));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+    }\n+\n+    public void testFormatPrefixSimple3() {\n+        try {\n+            builder.appendPrefix(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testFormatPrefixPlural1() {\n+        PeriodFormatter f = builder.appendPrefix(\"Year:\", \"Years:\").appendYears().toFormatter();\n+        assertEquals(\"Year:1\", f.print(PERIOD));\n+        assertEquals(6, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"Years:0\", f.print(p));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+    }\n+\n+    public void testFormatPrefixPlural2() {\n+        PeriodFormatter f = builder.appendPrefix(\"Hour:\", \"Hours:\").appendHours().toFormatter();\n+        assertEquals(\"Hours:5\", f.print(PERIOD));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"Hours:0\", f.print(p));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+    }\n+\n+    public void testFormatPrefixPlural3() {\n+        try {\n+            builder.appendPrefix(null, \"\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            builder.appendPrefix(\"\", null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            builder.appendPrefix(null, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormatSuffixSimple1() {\n+        PeriodFormatter f = builder.appendYears().appendSuffix(\" years\").toFormatter();\n+        assertEquals(\"1 years\", f.print(PERIOD));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"0 years\", f.print(p));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+    }\n+\n+    public void testFormatSuffixSimple2() {\n+        PeriodFormatter f = builder.appendHours().appendSuffix(\" hours\").toFormatter();\n+        assertEquals(\"5 hours\", f.print(PERIOD));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"0 hours\", f.print(p));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+    }\n+\n+    public void testFormatSuffixSimple3() {\n+        try {\n+            builder.appendSuffix(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testFormatSuffixSimple4() {\n+        try {\n+            builder.appendSuffix(\" hours\");\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    public void testFormatSuffixPlural1() {\n+        PeriodFormatter f = builder.appendYears().appendSuffix(\" year\", \" years\").toFormatter();\n+        assertEquals(\"1 year\", f.print(PERIOD));\n+        assertEquals(6, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"0 years\", f.print(p));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+    }\n+\n+    public void testFormatSuffixPlural2() {\n+        PeriodFormatter f = builder.appendHours().appendSuffix(\" hour\", \" hours\").toFormatter();\n+        assertEquals(\"5 hours\", f.print(PERIOD));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"0 hours\", f.print(p));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+    }\n+\n+    public void testFormatSuffixPlural3() {\n+        try {\n+            builder.appendSuffix(null, \"\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            builder.appendSuffix(\"\", null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            builder.appendSuffix(null, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testFormatSuffixPlural4() {\n+        try {\n+            builder.appendSuffix(\" hour\", \" hours\");\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormatPrefixSuffix() {\n+        PeriodFormatter f = builder.appendPrefix(\"P\").appendYears().appendSuffix(\"Y\").toFormatter();\n+        assertEquals(\"P1Y\", f.print(PERIOD));\n+        assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"P0Y\", f.print(p));\n+        assertEquals(3, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormatSeparatorSimple() {\n+        PeriodFormatter f = builder.appendYears().appendSeparator(\"T\").appendHours().toFormatter();\n+        assertEquals(\"1T5\", f.print(PERIOD));\n+        assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        assertEquals(\"5\", f.print(TIME_PERIOD));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null));\n+        \n+        assertEquals(\"1\", f.print(DATE_PERIOD));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null));\n+    }\n+\n+    public void testFormatSeparatorComplex() {\n+        PeriodFormatter f = builder\n+            .appendYears().appendSeparator(\", \", \" and \")\n+            .appendHours().appendSeparator(\", \", \" and \")\n+            .appendMinutes().appendSeparator(\", \", \" and \")\n+            .toFormatter();\n+        assertEquals(\"1, 5 and 6\", f.print(PERIOD));\n+        assertEquals(10, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(3, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        assertEquals(\"5 and 6\", f.print(TIME_PERIOD));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null));\n+        assertEquals(2, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null));\n+        \n+        assertEquals(\"1\", f.print(DATE_PERIOD));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null));\n+    }\n+\n+    public void testFormatSeparatorIfFieldsAfter() {\n+        PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter(\"T\").appendHours().toFormatter();\n+        assertEquals(\"1T5\", f.print(PERIOD));\n+        assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        assertEquals(\"T5\", f.print(TIME_PERIOD));\n+        assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null));\n+        \n+        assertEquals(\"1\", f.print(DATE_PERIOD));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null));\n+    }\n+\n+    public void testFormatSeparatorIfFieldsBefore() {\n+        PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsBefore(\"T\").appendHours().toFormatter();\n+        assertEquals(\"1T5\", f.print(PERIOD));\n+        assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        assertEquals(\"5\", f.print(TIME_PERIOD));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null));\n+        \n+        assertEquals(\"1T\", f.print(DATE_PERIOD));\n+        assertEquals(2, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormatLiteral() {\n+        PeriodFormatter f = builder.appendLiteral(\"HELLO\").toFormatter();\n+        assertEquals(\"HELLO\", f.print(PERIOD));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(0, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+    }\n+\n+    public void testFormatAppendFormatter() {\n+        PeriodFormatter base = builder.appendYears().appendLiteral(\"-\").toFormatter();\n+        PeriodFormatter f = new PeriodFormatterBuilder().append(base).appendYears().toFormatter();\n+        assertEquals(\"1-1\", f.print(PERIOD));\n+        assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+    }\n+\n+    public void testFormatMinDigits() {\n+        PeriodFormatter f = new PeriodFormatterBuilder().minimumPrintedDigits(4).appendYears().toFormatter();\n+        assertEquals(\"0001\", f.print(PERIOD));\n+        assertEquals(4, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormatPrintZeroDefault() {\n+        PeriodFormatter f =\n+            new PeriodFormatterBuilder()\n+                .appendYears().appendLiteral(\"-\")\n+                .appendMonths().appendLiteral(\"-\")\n+                .appendWeeks().appendLiteral(\"-\")\n+                .appendDays().toFormatter();\n+        assertEquals(\"1-2-3-4\", f.print(PERIOD));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        assertEquals(\"---0\", f.print(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(4, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n+        \n+        assertEquals(\"1---4\", f.print(YEAR_DAY_PERIOD));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null));\n+        assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n+        \n+        assertEquals(\"---0\", f.print(EMPTY_PERIOD));\n+        assertEquals(4, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null));\n+        \n+        // test only last instance of same field is output\n+        f = new PeriodFormatterBuilder()\n+                .appendYears().appendLiteral(\"-\")\n+                .appendYears().toFormatter();\n+        assertEquals(\"-0\", f.print(EMPTY_PERIOD));\n+        assertEquals(2, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null));\n+    }\n+\n+    public void testFormatPrintZeroRarelyLast() {\n+        PeriodFormatter f =\n+            new PeriodFormatterBuilder()\n+                .printZeroRarelyLast()\n+                .appendYears().appendLiteral(\"-\")\n+                .appendMonths().appendLiteral(\"-\")\n+                .appendWeeks().appendLiteral(\"-\")\n+                .appendDays().toFormatter();\n+        assertEquals(\"1-2-3-4\", f.print(PERIOD));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        assertEquals(\"---0\", f.print(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(4, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n+        \n+        assertEquals(\"1---4\", f.print(YEAR_DAY_PERIOD));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null));\n+        assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n+        \n+        assertEquals(\"---0\", f.print(EMPTY_PERIOD));\n+        assertEquals(4, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null));\n+    }\n+\n+    public void testFormatPrintZeroRarelyFirst() {\n+        PeriodFormatter f =\n+            new PeriodFormatterBuilder()\n+                .printZeroRarelyFirst()\n+                .appendYears().appendLiteral(\"-\")\n+                .appendMonths().appendLiteral(\"-\")\n+                .appendWeeks().appendLiteral(\"-\")\n+                .appendDays().toFormatter();\n+        assertEquals(\"1-2-3-4\", f.print(PERIOD));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        assertEquals(\"0---\", f.print(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(4, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n+        \n+        assertEquals(\"1---4\", f.print(YEAR_DAY_PERIOD));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null));\n+        assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n+        \n+        assertEquals(\"0---\", f.print(EMPTY_PERIOD));\n+        assertEquals(4, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null));\n+    }\n+\n+    public void testFormatPrintZeroRarelyFirstYears() {\n+        PeriodFormatter f = new PeriodFormatterBuilder()\n+            .printZeroRarelyFirst()\n+            .appendYears().toFormatter();\n+        assertEquals(\"0\", f.print(EMPTY_PERIOD));\n+    }\n+\n+    public void testFormatPrintZeroRarelyFirstMonths() {\n+        PeriodFormatter f = new PeriodFormatterBuilder()\n+            .printZeroRarelyFirst()\n+            .appendMonths().toFormatter();\n+        assertEquals(\"0\", f.print(EMPTY_PERIOD));\n+    }\n+\n+    public void testFormatPrintZeroRarelyFirstWeeks() {\n+        PeriodFormatter f = new PeriodFormatterBuilder()\n+            .printZeroRarelyFirst()\n+            .appendWeeks().toFormatter();\n+        assertEquals(\"0\", f.print(EMPTY_PERIOD));\n+    }\n+\n+    public void testFormatPrintZeroRarelyFirstDays() {\n+        PeriodFormatter f = new PeriodFormatterBuilder()\n+            .printZeroRarelyFirst()\n+            .appendDays().toFormatter();\n+        assertEquals(\"0\", f.print(EMPTY_PERIOD));\n+    }\n+\n+    public void testFormatPrintZeroRarelyFirstHours() {\n+        PeriodFormatter f = new PeriodFormatterBuilder()\n+            .printZeroRarelyFirst()\n+            .appendHours().toFormatter();\n+        assertEquals(\"0\", f.print(EMPTY_PERIOD));\n+    }\n+\n+    public void testFormatPrintZeroRarelyFirstMinutes() {\n+        PeriodFormatter f = new PeriodFormatterBuilder()\n+            .printZeroRarelyFirst()\n+            .appendMinutes().toFormatter();\n+        assertEquals(\"0\", f.print(EMPTY_PERIOD));\n+    }\n+\n+    public void testFormatPrintZeroRarelyFirstSeconds() {\n+        PeriodFormatter f = new PeriodFormatterBuilder()\n+            .printZeroRarelyFirst()\n+            .appendSeconds().toFormatter();\n+        assertEquals(\"0\", f.print(EMPTY_PERIOD));\n+    }\n+\n+    public void testFormatPrintZeroIfSupported() {\n+        PeriodFormatter f =\n+            new PeriodFormatterBuilder()\n+                .printZeroIfSupported()\n+                .appendYears().appendLiteral(\"-\")\n+                .appendMonths().appendLiteral(\"-\")\n+                .appendWeeks().appendLiteral(\"-\")\n+                .appendDays().toFormatter();\n+        assertEquals(\"1-2-3-4\", f.print(PERIOD));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        assertEquals(\"0---0\", f.print(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null));\n+        assertEquals(2, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n+        \n+        assertEquals(\"1---4\", f.print(YEAR_DAY_PERIOD));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null));\n+        assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n+        \n+        assertEquals(\"0-0-0-0\", f.print(EMPTY_PERIOD));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null));\n+        assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null));\n+    }\n+\n+    public void testFormatPrintZeroAlways() {\n+        PeriodFormatter f =\n+            new PeriodFormatterBuilder()\n+                .printZeroAlways()\n+                .appendYears().appendLiteral(\"-\")\n+                .appendMonths().appendLiteral(\"-\")\n+                .appendWeeks().appendLiteral(\"-\")\n+                .appendDays().toFormatter();\n+        assertEquals(\"1-2-3-4\", f.print(PERIOD));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        assertEquals(\"0-0-0-0\", f.print(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null));\n+        assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n+        \n+        assertEquals(\"1-0-0-4\", f.print(YEAR_DAY_PERIOD));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null));\n+        assertEquals(4, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n+        \n+        assertEquals(\"0-0-0-0\", f.print(EMPTY_PERIOD));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null));\n+        assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null));\n+    }\n+\n+    public void testFormatPrintZeroNever() {\n+        PeriodFormatter f =\n+            new PeriodFormatterBuilder()\n+                .printZeroNever()\n+                .appendYears().appendLiteral(\"-\")\n+                .appendMonths().appendLiteral(\"-\")\n+                .appendWeeks().appendLiteral(\"-\")\n+                .appendDays().toFormatter();\n+        assertEquals(\"1-2-3-4\", f.print(PERIOD));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        assertEquals(\"---\", f.print(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(3, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null));\n+        assertEquals(0, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n+        \n+        assertEquals(\"1---4\", f.print(YEAR_DAY_PERIOD));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null));\n+        assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n+        \n+        assertEquals(\"---\", f.print(EMPTY_PERIOD));\n+        assertEquals(3, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null));\n+        assertEquals(0, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormatAppend_PrinterParser_null_null() {\n+        try {\n+            new PeriodFormatterBuilder().append(null, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testFormatAppend_PrinterParser_Printer_null() {\n+        PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral(\"-\").toPrinter();\n+        PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).appendMonths();\n+        assertNotNull(bld.toPrinter());\n+        assertNull(bld.toParser());\n+        \n+        PeriodFormatter f = bld.toFormatter();\n+        assertEquals(\"1-2\", f.print(PERIOD));\n+        try {\n+            f.parsePeriod(\"1-2\");\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+    }\n+\n+    public void testFormatAppend_PrinterParser_null_Parser() {\n+        PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral(\"-\").toParser();\n+        PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(null, parser).appendMonths();\n+        assertNull(bld.toPrinter());\n+        assertNotNull(bld.toParser());\n+        \n+        PeriodFormatter f = bld.toFormatter();\n+        try {\n+            f.print(PERIOD);\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod(\"1-2\"));\n+    }\n+\n+    public void testFormatAppend_PrinterParser_PrinterParser() {\n+        PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral(\"-\").toPrinter();\n+        PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral(\"-\").toParser();\n+        PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths();\n+        assertNotNull(bld.toPrinter());\n+        assertNotNull(bld.toParser());\n+        \n+        PeriodFormatter f = bld.toFormatter();\n+        assertEquals(\"1-2\", f.print(PERIOD));\n+        assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod(\"1-2\"));\n+    }\n+\n+    public void testFormatAppend_PrinterParser_Printer_null_null_Parser() {\n+        PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral(\"-\").toPrinter();\n+        PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral(\"-\").toParser();\n+        PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).append(null, parser);\n+        assertNull(bld.toPrinter());\n+        assertNull(bld.toParser());\n+        \n+        try {\n+            bld.toFormatter();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    public void testFormatAppend_PrinterParserThenClear() {\n+        PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral(\"-\").toPrinter();\n+        PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral(\"-\").toParser();\n+        PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).append(null, parser);\n+        assertNull(bld.toPrinter());\n+        assertNull(bld.toParser());\n+        bld.clear();\n+        bld.appendMonths();\n+        assertNotNull(bld.toPrinter());\n+        assertNotNull(bld.toParser());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/format/TestTextFields.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.format;\n+\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.MutableDateTime;\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * Makes sure that text fields are correct for English.\n+ *\n+ * @author Brian S O'Neill\n+ */\n+public class TestTextFields extends TestCase {\n+\n+    private static final DateTimeZone[] ZONES = {\n+        DateTimeZone.UTC,\n+        DateTimeZone.forID(\"Europe/Paris\"),\n+        DateTimeZone.forID(\"Europe/London\"),\n+        DateTimeZone.forID(\"Asia/Tokyo\"),\n+        DateTimeZone.forID(\"America/Los_Angeles\"),\n+    };\n+\n+    private static final String[] MONTHS = {\n+        null,\n+        \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n+        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n+    };\n+\n+    private static final String[] WEEKDAYS = {\n+        null,\n+        \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"\n+    };\n+\n+    private static final String[] HALFDAYS = {\n+        \"AM\", \"PM\"\n+    };\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestTextFields.class);\n+    }\n+\n+    public TestTextFields(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(ZONES[0]);\n+        Locale.setDefault(Locale.ENGLISH);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMonthNames_monthStart() {\n+        DateTimeFormatter printer = DateTimeFormat.forPattern(\"MMMM\");\n+        for (int i=0; i<ZONES.length; i++) {\n+            for (int month=1; month<=12; month++) {\n+                DateTime dt = new DateTime(2004, month, 1, 1, 20, 30, 40, ZONES[i]);\n+                String monthText = printer.print(dt);\n+                assertEquals(MONTHS[month], monthText);\n+            }\n+        }\n+    }\n+\n+    public void testMonthNames_monthMiddle() {\n+        DateTimeFormatter printer = DateTimeFormat.forPattern(\"MMMM\");\n+        for (int i=0; i<ZONES.length; i++) {\n+            for (int month=1; month<=12; month++) {\n+                DateTime dt = new DateTime(2004, month, 15, 12, 20, 30, 40, ZONES[i]);\n+                String monthText = printer.print(dt);\n+                assertEquals(MONTHS[month], monthText);\n+            }\n+        }\n+    }\n+\n+    public void testMonthNames_monthEnd() {\n+        DateTimeFormatter printer = DateTimeFormat.forPattern(\"MMMM\");\n+        for (int i=0; i<ZONES.length; i++) {\n+            Chronology chrono = ISOChronology.getInstance(ZONES[i]);\n+            for (int month=1; month<=12; month++) {\n+                DateTime dt = new DateTime(2004, month, 1, 23, 20, 30, 40, chrono);\n+                int lastDay = chrono.dayOfMonth().getMaximumValue(dt.getMillis());\n+                dt = new DateTime(2004, month, lastDay, 23, 20, 30, 40, chrono);\n+                String monthText = printer.print(dt);\n+                assertEquals(MONTHS[month], monthText);\n+            }\n+        }\n+    }\n+\n+    public void testWeekdayNames() {\n+        DateTimeFormatter printer = DateTimeFormat.forPattern(\"EEEE\");\n+        for (int i=0; i<ZONES.length; i++) {\n+            MutableDateTime mdt = new MutableDateTime(2004, 1, 1, 1, 20, 30, 40, ZONES[i]);\n+            for (int day=1; day<=366; day++) {\n+                mdt.setDayOfYear(day);\n+                int weekday = mdt.getDayOfWeek();\n+                String weekdayText = printer.print(mdt);\n+                assertEquals(WEEKDAYS[weekday], weekdayText);\n+            }\n+        }\n+    }\n+\n+    public void testHalfdayNames() {\n+        DateTimeFormatter printer = DateTimeFormat.forPattern(\"a\");\n+        for (int i=0; i<ZONES.length; i++) {\n+            Chronology chrono = ISOChronology.getInstance(ZONES[i]);\n+            MutableDateTime mdt = new MutableDateTime(2004, 5, 30, 0, 20, 30, 40, chrono);\n+            for (int hour=0; hour<24; hour++) {\n+                mdt.setHourOfDay(hour);\n+                int halfday = mdt.get(chrono.halfdayOfDay());\n+                String halfdayText = printer.print(mdt);\n+                assertEquals(HALFDAYS[halfday], halfdayText);\n+            }\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/tz/TestAll.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.tz;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Entry point for all tests in this package.\n+ * \n+ * @version $Revision$ $Date$\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestAll extends TestCase {\n+\n+    public TestAll(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite();\n+        suite.addTest(TestUTCProvider.suite());\n+        suite.addTest(TestBuilder.suite());\n+        suite.addTest(TestCompiler.suite());\n+        suite.addTest(TestFixedDateTimeZone.suite());\n+        return suite;\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = {\n+            TestAll.class.getName()\n+        };\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/tz/TestBuilder.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.tz;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.format.DateTimeFormatter;\n+import org.joda.time.format.DateTimeFormatterBuilder;\n+\n+/**\n+ * Test cases for DateTimeZoneBuilder.\n+ *\n+ * @author Brian S O'Neill\n+ */\n+public class TestBuilder extends TestCase {\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestBuilder.class);\n+    }\n+\n+    static final DateTimeFormatter OFFSET_FORMATTER = new DateTimeFormatterBuilder()\n+        .appendTimeZoneOffset(null, true, 2, 4)\n+        .toFormatter();\n+\n+    // Each row is {transition, nameKey, standardOffset, offset}\n+    static final String[][] AMERICA_LOS_ANGELES_DATA = {\n+        {null,                            \"LMT\", \"-07:52:58\", \"-07:52:58\"},\n+        {\"1883-11-18T19:52:58.000Z\",      \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1918-03-31T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1918-10-27T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1919-03-30T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1919-10-26T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1942-02-09T02:00:00.000-08:00\", \"PWT\", \"-08:00\", \"-07:00\"},\n+        {\"1945-08-14T23:00:00.000Z\",      \"PPT\", \"-08:00\", \"-07:00\"},\n+        {\"1945-09-30T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1948-03-14T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1949-01-01T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1950-04-30T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1950-09-24T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1951-04-29T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1951-09-30T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1952-04-27T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1952-09-28T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1953-04-26T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1953-09-27T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1954-04-25T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1954-09-26T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1955-04-24T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1955-09-25T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1956-04-29T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1956-09-30T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1957-04-28T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1957-09-29T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1958-04-27T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1958-09-28T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1959-04-26T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1959-09-27T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1960-04-24T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1960-09-25T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1961-04-30T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1961-09-24T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1962-04-29T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1962-10-28T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1963-04-28T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1963-10-27T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1964-04-26T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1964-10-25T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1965-04-25T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1965-10-31T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1966-04-24T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1966-10-30T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1967-04-30T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1967-10-29T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1968-04-28T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1968-10-27T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1969-04-27T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1969-10-26T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1970-04-26T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1970-10-25T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1971-04-25T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1971-10-31T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1972-04-30T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1972-10-29T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1973-04-29T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1973-10-28T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1974-01-06T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1974-10-27T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1975-02-23T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1975-10-26T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1976-04-25T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1976-10-31T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1977-04-24T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1977-10-30T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1978-04-30T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1978-10-29T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1979-04-29T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1979-10-28T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1980-04-27T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1980-10-26T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1981-04-26T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1981-10-25T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1982-04-25T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1982-10-31T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1983-04-24T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1983-10-30T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1984-04-29T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1984-10-28T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1985-04-28T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1985-10-27T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1986-04-27T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1986-10-26T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1987-04-05T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1987-10-25T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1988-04-03T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1988-10-30T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1989-04-02T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1989-10-29T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1990-04-01T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1990-10-28T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1991-04-07T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1991-10-27T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1992-04-05T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1992-10-25T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1993-04-04T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1993-10-31T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1994-04-03T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1994-10-30T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1995-04-02T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1995-10-29T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1996-04-07T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1996-10-27T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1997-04-06T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1997-10-26T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1998-04-05T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1998-10-25T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1999-04-04T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1999-10-31T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"2000-04-02T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"2000-10-29T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+    };\n+\n+    static DateTimeZoneBuilder buildAmericaLosAngelesBuilder() {\n+        return new DateTimeZoneBuilder()\n+            .addCutover(-2147483648, 'w', 1, 1, 0, false, 0)\n+            .setStandardOffset(-28378000)\n+            .setFixedSavings(\"LMT\", 0)\n+            .addCutover(1883, 'w', 11, 18, 0, false, 43200000)\n+            .setStandardOffset(-28800000)\n+            .addRecurringSavings(\"PDT\", 3600000, 1918, 1919, 'w',  3, -1, 7, false, 7200000)\n+            .addRecurringSavings(\"PST\",       0, 1918, 1919, 'w', 10, -1, 7, false, 7200000)\n+            .addRecurringSavings(\"PWT\", 3600000, 1942, 1942, 'w',  2,  9, 0, false, 7200000)\n+            .addRecurringSavings(\"PPT\", 3600000, 1945, 1945, 'u',  8, 14, 0, false, 82800000)\n+            .addRecurringSavings(\"PST\",       0, 1945, 1945, 'w',  9, 30, 0, false, 7200000)\n+            .addRecurringSavings(\"PDT\", 3600000, 1948, 1948, 'w',  3, 14, 0, false, 7200000)\n+            .addRecurringSavings(\"PST\",       0, 1949, 1949, 'w',  1,  1, 0, false, 7200000)\n+            .addRecurringSavings(\"PDT\", 3600000, 1950, 1966, 'w',  4, -1, 7, false, 7200000)\n+            .addRecurringSavings(\"PST\",       0, 1950, 1961, 'w',  9, -1, 7, false, 7200000)\n+            .addRecurringSavings(\"PST\",       0, 1962, 1966, 'w', 10, -1, 7, false, 7200000)\n+            .addRecurringSavings(\"PST\",       0, 1967, 2147483647, 'w', 10, -1, 7, false, 7200000)\n+            .addRecurringSavings(\"PDT\", 3600000, 1967, 1973, 'w', 4, -1,  7, false, 7200000)\n+            .addRecurringSavings(\"PDT\", 3600000, 1974, 1974, 'w', 1,  6,  0, false, 7200000)\n+            .addRecurringSavings(\"PDT\", 3600000, 1975, 1975, 'w', 2, 23,  0, false, 7200000)\n+            .addRecurringSavings(\"PDT\", 3600000, 1976, 1986, 'w', 4, -1,  7, false, 7200000)\n+            .addRecurringSavings(\"PDT\", 3600000, 1987, 2147483647, 'w', 4, 1, 7, true, 7200000);\n+    }\n+\n+    static DateTimeZone buildAmericaLosAngeles() {\n+        return buildAmericaLosAngelesBuilder().toDateTimeZone(\"America/Los_Angeles\", true);\n+    }\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+\n+    public TestBuilder(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+    }\n+\n+    public void testID() {\n+        DateTimeZone tz = buildAmericaLosAngeles();\n+        assertEquals(\"America/Los_Angeles\", tz.getID());\n+        assertEquals(false, tz.isFixed());\n+    }\n+\n+    public void testForwardTransitions() {\n+        DateTimeZone tz = buildAmericaLosAngeles();\n+        testForwardTransitions(tz, AMERICA_LOS_ANGELES_DATA);\n+    }\n+\n+    static void testForwardTransitions(DateTimeZone tz, String[][] data) {\n+        long instant = Long.MIN_VALUE;\n+        for (int i=0; i<data.length; i++) {\n+            String[] row = data[i];\n+            long expectedInstant = instant;\n+            if (row[0] != null) {\n+                instant = tz.nextTransition(instant);\n+                expectedInstant = new DateTime(row[0]).getMillis();\n+            }\n+\n+            String expectedKey = row[1];\n+            int expectedStandardOffset = -(int) OFFSET_FORMATTER.parseMillis(row[2]);\n+            int expectedOffset = -(int) OFFSET_FORMATTER.parseMillis(row[3]);\n+\n+            assertEquals(expectedInstant, instant);\n+            assertEquals(expectedKey, tz.getNameKey(instant));\n+            assertEquals(expectedStandardOffset, tz.getStandardOffset(instant));\n+            assertEquals(expectedOffset, tz.getOffset(instant));\n+\n+            // Sample a few instants between transitions.\n+            if (i < data.length - 1) {\n+                long nextInstant = new DateTime(data[i + 1][0]).getMillis();\n+                long span = (nextInstant - instant) / 10;\n+                for (int j=1; j<10; j++) {\n+                    long between = instant + j * span;\n+                    assertEquals(expectedKey, tz.getNameKey(between));\n+                    assertEquals(expectedStandardOffset, tz.getStandardOffset(between));\n+                    assertEquals(expectedOffset, tz.getOffset(between));\n+                }\n+            }\n+        }\n+    }\n+\n+    public void testReverseTransitions() {\n+        DateTimeZone tz = buildAmericaLosAngeles();\n+        testReverseTransitions(tz, AMERICA_LOS_ANGELES_DATA);\n+    }\n+\n+    static void testReverseTransitions(DateTimeZone tz, String[][] data) {\n+        long instant = new DateTime(data[data.length - 1][0]).getMillis();\n+        for (int i=data.length; --i>=1; ) {\n+            String[] row = data[i];\n+            String[] prevRow = data[i - 1];\n+            instant = tz.previousTransition(instant);\n+\n+            long expectedInstant = new DateTime(row[0]).getMillis() - 1;\n+            String expectedKey = prevRow[1];\n+            int expectedStandardOffset = -(int) OFFSET_FORMATTER.parseMillis(prevRow[2]);\n+            int expectedOffset = -(int) OFFSET_FORMATTER.parseMillis(prevRow[3]);\n+\n+            assertEquals(expectedInstant, instant);\n+            assertEquals(expectedKey, tz.getNameKey(instant));\n+            assertEquals(expectedStandardOffset, tz.getStandardOffset(instant));\n+            assertEquals(expectedOffset, tz.getOffset(instant));\n+        }\n+    }\n+\n+    public void testSerialization() throws IOException {\n+        DateTimeZone tz = testSerialization\n+            (buildAmericaLosAngelesBuilder(), \"America/Los_Angeles\");\n+\n+        assertEquals(false, tz.isFixed());\n+        testForwardTransitions(tz, AMERICA_LOS_ANGELES_DATA);\n+        testReverseTransitions(tz, AMERICA_LOS_ANGELES_DATA);\n+    }\n+\n+    static DateTimeZone testSerialization(DateTimeZoneBuilder builder, String id)\n+        throws IOException\n+    {\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        builder.writeTo(\"America/Los_Angeles\", out);\n+        ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray());\n+        DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);\n+        assertEquals(id, tz.getID());\n+        return tz;\n+    }\n+\n+    public void testFixed() throws IOException {\n+        DateTimeZoneBuilder builder = new DateTimeZoneBuilder()\n+            .setStandardOffset(3600000)\n+            .setFixedSavings(\"LMT\", 0);\n+        DateTimeZone tz = builder.toDateTimeZone(\"Test\", true);\n+\n+        for (int i=0; i<2; i++) {\n+            assertEquals(\"Test\", tz.getID());\n+            assertEquals(true, tz.isFixed());\n+            assertEquals(3600000, tz.getOffset(0));\n+            assertEquals(3600000, tz.getStandardOffset(0));\n+            assertEquals(0, tz.nextTransition(0));\n+            assertEquals(0, tz.previousTransition(0));\n+\n+            tz = testSerialization(builder, \"Test\");\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/tz/TestCompiler.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.tz;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.StringTokenizer;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear;\n+\n+/**\n+ * Test cases for ZoneInfoCompiler.\n+ *\n+ * @author Brian S O'Neill\n+ */\n+public class TestCompiler extends TestCase {\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestCompiler.class);\n+    }\n+\n+    static final String AMERICA_LOS_ANGELES_FILE =\n+        \"# Rules for building just America/Los_Angeles time zone.\\n\" + \n+        \"\\n\" + \n+        \"Rule    US  1918    1919    -   Mar lastSun 2:00    1:00    D\\n\" + \n+        \"Rule    US  1918    1919    -   Oct lastSun 2:00    0   S\\n\" + \n+        \"Rule    US  1942    only    -   Feb 9   2:00    1:00    W # War\\n\" + \n+        \"Rule    US  1945    only    -   Aug 14  23:00u  1:00    P # Peace\\n\" + \n+        \"Rule    US  1945    only    -   Sep 30  2:00    0   S\\n\" + \n+        \"Rule    US  1967    max -   Oct lastSun 2:00    0   S\\n\" + \n+        \"Rule    US  1967    1973    -   Apr lastSun 2:00    1:00    D\\n\" + \n+        \"Rule    US  1974    only    -   Jan 6   2:00    1:00    D\\n\" + \n+        \"Rule    US  1975    only    -   Feb 23  2:00    1:00    D\\n\" + \n+        \"Rule    US  1976    1986    -   Apr lastSun 2:00    1:00    D\\n\" + \n+        \"Rule    US  1987    max -   Apr Sun>=1  2:00    1:00    D\\n\" + \n+        \"\\n\" + \n+        \"Rule    CA  1948    only    -   Mar 14  2:00    1:00    D\\n\" + \n+        \"Rule    CA  1949    only    -   Jan  1  2:00    0   S\\n\" + \n+        \"Rule    CA  1950    1966    -   Apr lastSun 2:00    1:00    D\\n\" + \n+        \"Rule    CA  1950    1961    -   Sep lastSun 2:00    0   S\\n\" + \n+        \"Rule    CA  1962    1966    -   Oct lastSun 2:00    0   S\\n\" + \n+        \"\\n\" + \n+        \"Zone America/Los_Angeles -7:52:58 - LMT 1883 Nov 18 12:00\\n\" + \n+        \"            -8:00   US  P%sT    1946\\n\" + \n+        \"            -8:00   CA  P%sT    1967\\n\" + \n+        \"            -8:00   US  P%sT\";\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+\n+    public TestCompiler(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+    }\n+\n+    public void testCompile() throws Exception {\n+        Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE);\n+        DateTimeZone tz = provider.getZone(\"America/Los_Angeles\");\n+\n+        assertEquals(\"America/Los_Angeles\", tz.getID());\n+        assertEquals(false, tz.isFixed());\n+        TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA);\n+        TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA);\n+    }\n+\n+    private Provider compileAndLoad(String data) throws Exception {\n+        File tempDir = createDataFile(data);\n+        File destDir = makeTempDir();\n+\n+        ZoneInfoCompiler.main(new String[] {\n+            \"-src\", tempDir.getAbsolutePath(),\n+            \"-dst\", destDir.getAbsolutePath(),\n+            \"tzdata\"\n+        });\n+\n+        // Mark all files to be deleted on exit.\n+        deleteOnExit(destDir);\n+\n+        return new ZoneInfoProvider(destDir);\n+    }\n+\n+    private File createDataFile(String data) throws IOException {\n+        File tempDir = makeTempDir();\n+\n+        File tempFile = new File(tempDir, \"tzdata\");\n+        tempFile.deleteOnExit();\n+\n+        InputStream in = new ByteArrayInputStream(data.getBytes(\"UTF-8\"));\n+\n+        FileOutputStream out = new FileOutputStream(tempFile);\n+        byte[] buf = new byte[1000];\n+        int amt;\n+        while ((amt = in.read(buf)) > 0) {\n+            out.write(buf, 0, amt);\n+        }\n+        out.close();\n+        in.close();\n+\n+        return tempDir;\n+    }\n+\n+    private File makeTempDir() {\n+        File tempDir = new File(System.getProperty(\"java.io.tmpdir\"));\n+        tempDir = new File(tempDir, \"joda-test-\" + (new java.util.Random().nextInt() & 0xffffff));\n+        tempDir.mkdirs();\n+        tempDir.deleteOnExit();\n+        return tempDir;\n+    }\n+\n+    private void deleteOnExit(File tempFile) {\n+        tempFile.deleteOnExit();\n+        if (tempFile.isDirectory()) {\n+            File[] files = tempFile.listFiles();\n+            for (int i=0; i<files.length; i++) {\n+                deleteOnExit(files[i]);\n+            }\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_2400_fromDay() {\n+        StringTokenizer st = new StringTokenizer(\"Apr Sun>=1  24:00\");\n+        DateTimeOfYear test = new DateTimeOfYear(st);\n+        assertEquals(4, test.iMonthOfYear);  // Apr\n+        assertEquals(2, test.iDayOfMonth);   // 2nd\n+        assertEquals(1, test.iDayOfWeek);    // Mon\n+        assertEquals(0, test.iMillisOfDay);  // 00:00\n+        assertEquals(true, test.iAdvanceDayOfWeek);\n+    }\n+\n+    public void test_2400_last() {\n+        StringTokenizer st = new StringTokenizer(\"Mar lastSun 24:00\");\n+        DateTimeOfYear test = new DateTimeOfYear(st);\n+        assertEquals(4, test.iMonthOfYear);  // Apr\n+        assertEquals(1, test.iDayOfMonth);   // 1st\n+        assertEquals(1, test.iDayOfWeek);    // Mon\n+        assertEquals(0, test.iMillisOfDay);  // 00:00\n+        assertEquals(false, test.iAdvanceDayOfWeek);\n+    }\n+\n+    public void test_Amman_2003() {\n+        DateTimeZone zone = DateTimeZone.forID(\"Asia/Amman\");\n+        DateTime dt = new DateTime(2003, 3, 1, 0, 0, zone);\n+        long next = zone.nextTransition(dt.getMillis());\n+        assertEquals(next, new DateTime(2003, 3, 28, 0, 0, DateTimeZone.forOffsetHours(2)).getMillis());\n+    }\n+\n+    public void test_Amman_2004() {\n+        DateTimeZone zone = DateTimeZone.forID(\"Asia/Amman\");\n+        DateTime dt = new DateTime(2004, 3, 1, 0, 0, zone);\n+        long next = zone.nextTransition(dt.getMillis());\n+        assertEquals(next, new DateTime(2004, 3, 26, 0, 0, DateTimeZone.forOffsetHours(2)).getMillis());\n+    }\n+\n+    public void test_Amman_2005() {\n+        DateTimeZone zone = DateTimeZone.forID(\"Asia/Amman\");\n+        DateTime dt = new DateTime(2005, 3, 1, 0, 0, zone);\n+        long next = zone.nextTransition(dt.getMillis());\n+        assertEquals(next, new DateTime(2005, 4, 1, 0, 0, DateTimeZone.forOffsetHours(2)).getMillis());\n+    }\n+\n+    public void test_Amman_2006() {\n+        DateTimeZone zone = DateTimeZone.forID(\"Asia/Amman\");\n+        DateTime dt = new DateTime(2006, 3, 1, 0, 0, zone);\n+        long next = zone.nextTransition(dt.getMillis());\n+        assertEquals(next, new DateTime(2006, 3, 31, 0, 0, DateTimeZone.forOffsetHours(2)).getMillis());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/tz/TestFixedDateTimeZone.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.tz;\n+\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTimeZone;\n+\n+/**\n+ * Test cases for FixedDateTimeZone.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestFixedDateTimeZone extends TestCase {\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestFixedDateTimeZone.class);\n+    }\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+\n+    public TestFixedDateTimeZone(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+    }\n+\n+    public void testEquals() throws Exception {\n+        FixedDateTimeZone zone1 = new FixedDateTimeZone(\"A\", \"B\", 1, 5);\n+        FixedDateTimeZone zone1b = new FixedDateTimeZone(\"A\", \"B\", 1, 5);\n+        FixedDateTimeZone zone2 = new FixedDateTimeZone(\"A\", \"C\", 1, 5);\n+        FixedDateTimeZone zone3 = new FixedDateTimeZone(\"A\", \"B\", 2, 5);\n+        FixedDateTimeZone zone4 = new FixedDateTimeZone(\"A\", \"B\", 1, 6);\n+        \n+        assertEquals(true, zone1.equals(zone1));\n+        assertEquals(true, zone1.equals(zone1b));\n+        assertEquals(true, zone1.equals(zone2));  // second arg ignored\n+        assertEquals(false, zone1.equals(zone3));\n+        assertEquals(false, zone1.equals(zone4));\n+    }\n+\n+    public void testHashCode() throws Exception {\n+        FixedDateTimeZone zone1 = new FixedDateTimeZone(\"A\", \"B\", 1, 5);\n+        FixedDateTimeZone zone1b = new FixedDateTimeZone(\"A\", \"B\", 1, 5);\n+        FixedDateTimeZone zone2 = new FixedDateTimeZone(\"A\", \"C\", 1, 5);\n+        FixedDateTimeZone zone3 = new FixedDateTimeZone(\"A\", \"B\", 2, 5);\n+        FixedDateTimeZone zone4 = new FixedDateTimeZone(\"A\", \"B\", 1, 6);\n+        \n+        assertEquals(true, zone1.hashCode() == zone1.hashCode());\n+        assertEquals(true, zone1.hashCode() == zone1b.hashCode());\n+        assertEquals(true, zone1.hashCode() == zone2.hashCode());  // second arg ignored\n+        assertEquals(false, zone1.hashCode() == zone3.hashCode());\n+        assertEquals(false, zone1.hashCode() == zone4.hashCode());\n+    }\n+\n+    public void testToTimeZone1() throws Exception {\n+        FixedDateTimeZone zone = new FixedDateTimeZone(\"+00:01\", \"+00:01\", 60000, 60000);\n+        java.util.TimeZone tz = zone.toTimeZone();\n+        \n+        assertEquals(60000, tz.getRawOffset());\n+        assertEquals(60000, getOffset(tz, 1167638400000L));\n+        assertEquals(60000, getOffset(tz, 1185951600000L));\n+    }\n+\n+    public void testToTimeZone2() throws Exception {\n+        FixedDateTimeZone zone = new FixedDateTimeZone(\"A\", \"B\", 1, 5);\n+        java.util.TimeZone tz = zone.toTimeZone();\n+        \n+        assertEquals(1, tz.getRawOffset());\n+        assertEquals(1, getOffset(tz, 1167638400000L));\n+        assertEquals(1, getOffset(tz, 1185951600000L));\n+    }\n+\n+    /** Make test compile on JDK 1.3. */\n+    private int getOffset(TimeZone zone, long millis) {\n+        Date date = new Date(millis);\n+        if (zone.inDaylightTime(date)) {\n+            return zone.getRawOffset() + 3600000;\n+        }\n+        return zone.getRawOffset();\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/tz/TestUTCProvider.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.tz;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+import java.util.Set;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTimeZone;\n+\n+/**\n+ * This class is a JUnit test for UTCProvider.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestUTCProvider extends TestCase {\n+\n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestUTCProvider.class);\n+    }\n+\n+    public TestUTCProvider(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testClass() throws Exception {\n+        Class cls = UTCProvider.class;\n+        assertEquals(true, Modifier.isPublic(cls.getModifiers()));\n+        \n+        Constructor con = cls.getDeclaredConstructor((Class[]) null);\n+        assertEquals(1, cls.getDeclaredConstructors().length);\n+        assertEquals(true, Modifier.isPublic(con.getModifiers()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetAvailableIDs() throws Exception {\n+        Provider p = new UTCProvider();\n+        Set set = p.getAvailableIDs();\n+        assertEquals(1, set.size());\n+        assertEquals(\"UTC\", set.iterator().next());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetZone_String() throws Exception {\n+        Provider p = new UTCProvider();\n+        assertSame(DateTimeZone.UTC, p.getZone(\"UTC\"));\n+        assertEquals(null, p.getZone(null));\n+        assertEquals(null, p.getZone(\"Europe/London\"));\n+        assertEquals(null, p.getZone(\"Blah\"));\n+    }\n+\n+}", "timestamp": 1281313168, "metainfo": ""}