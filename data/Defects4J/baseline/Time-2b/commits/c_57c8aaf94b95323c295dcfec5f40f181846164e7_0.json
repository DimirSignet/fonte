{"sha": "57c8aaf94b95323c295dcfec5f40f181846164e7", "log": "Duraton.toPeriod(), new Period(long), new MutablePeriod(long) [3264409] Fixed to obey Javadoc. Previously, they didn't obey the Javadoc if the default time-zone had no daylight savings.  ", "commit": "\n--- a/JodaTime/src/main/java/org/joda/time/MutablePeriod.java\n+++ b/JodaTime/src/main/java/org/joda/time/MutablePeriod.java\n      * @param duration  the duration, in milliseconds\n      */\n     public MutablePeriod(long duration) {\n-        super(duration, null, null);\n+        super(duration);\n     }\n \n     /**\n--- a/JodaTime/src/main/java/org/joda/time/Period.java\n+++ b/JodaTime/src/main/java/org/joda/time/Period.java\n      * @param duration  the duration, in milliseconds\n      */\n     public Period(long duration) {\n-        super(duration, null, null);\n+        super(duration);\n     }\n \n     /**\n--- a/JodaTime/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/JodaTime/src/main/java/org/joda/time/base/BasePeriod.java\n import org.joda.time.ReadableInstant;\n import org.joda.time.ReadablePartial;\n import org.joda.time.ReadablePeriod;\n+import org.joda.time.chrono.ISOChronology;\n import org.joda.time.convert.ConverterManager;\n import org.joda.time.convert.PeriodConverter;\n import org.joda.time.field.FieldUtils;\n     }\n \n     /**\n+     * Creates a period from the given millisecond duration with the standard period type\n+     * and ISO rules, ensuring that the calculation is performed with the time-only period type.\n+     * <p>\n+     * The calculation uses the hour, minute, second and millisecond fields.\n+     *\n+     * @param duration  the duration, in milliseconds\n+     */\n+    protected BasePeriod(long duration) {\n+        super();\n+        // bug [3264409]\n+        iType = PeriodType.time();\n+        int[] values = ISOChronology.getInstanceUTC().get(this, duration);\n+        iType = PeriodType.standard();\n+        iValues = new int[8];\n+        System.arraycopy(values, 0, iValues, 4, 4);\n+    }\n+\n+    /**\n      * Creates a period from the given millisecond duration, which is only really\n      * suitable for durations less than one day.\n      * <p>\n--- a/JodaTime/src/test/java/org/joda/time/TestDuration_Basics.java\n+++ b/JodaTime/src/test/java/org/joda/time/TestDuration_Basics.java\n \n     //-----------------------------------------------------------------------\n     public void testToPeriod() {\n-        long length =\n-            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n-            5L * DateTimeConstants.MILLIS_PER_HOUR +\n-            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n-            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n-        Duration test = new Duration(length);\n-        Period result = test.toPeriod();\n-        assertEquals(new Period(test), result);\n-        assertEquals(new Period(test.getMillis()), result);\n+        DateTimeZone zone = DateTimeZone.getDefault();\n+        try {\n+            DateTimeZone.setDefault(DateTimeZone.forID(\"Europe/Paris\"));\n+            long length =\n+                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+                5L * DateTimeConstants.MILLIS_PER_HOUR +\n+                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+            Duration dur = new Duration(length);\n+            Period test = dur.toPeriod();\n+            assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n+            assertEquals(0, test.getMonths());\n+            assertEquals(0, test.getWeeks());\n+            assertEquals(0, test.getDays());\n+            assertEquals((450 * 24) + 5, test.getHours());\n+            assertEquals(6, test.getMinutes());\n+            assertEquals(7, test.getSeconds());\n+            assertEquals(8, test.getMillis());\n+        } finally {\n+            DateTimeZone.setDefault(zone);\n+        }\n+    }\n+\n+    public void testToPeriod_fixedZone() throws Throwable {\n+        DateTimeZone zone = DateTimeZone.getDefault();\n+        try {\n+            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n+            long length =\n+                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+                5L * DateTimeConstants.MILLIS_PER_HOUR +\n+                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+            Duration dur = new Duration(length);\n+            Period test = dur.toPeriod();\n+            assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n+            assertEquals(0, test.getMonths());\n+            assertEquals(0, test.getWeeks());\n+            assertEquals(0, test.getDays());\n+            assertEquals((450 * 24) + 5, test.getHours());\n+            assertEquals(6, test.getMinutes());\n+            assertEquals(7, test.getSeconds());\n+            assertEquals(8, test.getMillis());\n+        } finally {\n+            DateTimeZone.setDefault(zone);\n+        }\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/java/org/joda/time/TestPeriod_Constructors.java\n+++ b/JodaTime/src/test/java/org/joda/time/TestPeriod_Constructors.java\n         assertEquals(8, test.getMillis());\n     }\n \n+    public void testConstructor_long_fixedZone() throws Throwable {\n+        DateTimeZone zone = DateTimeZone.getDefault();\n+        try {\n+            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n+            long length =\n+                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+                5L * DateTimeConstants.MILLIS_PER_HOUR +\n+                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+            Period test = new Period(length);\n+            assertEquals(PeriodType.standard(), test.getPeriodType());\n+            // only time fields are precise in AllType\n+            assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n+            assertEquals(0, test.getMonths());\n+            assertEquals(0, test.getWeeks());\n+            assertEquals(0, test.getDays());\n+            assertEquals((450 * 24) + 5, test.getHours());\n+            assertEquals(6, test.getMinutes());\n+            assertEquals(7, test.getSeconds());\n+            assertEquals(8, test.getMillis());\n+        } finally {\n+            DateTimeZone.setDefault(zone);\n+        }\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testConstructor_long_PeriodType1() throws Throwable {\n         long length = 4 * DateTimeConstants.MILLIS_PER_DAY +", "timestamp": 1301617379, "metainfo": ""}