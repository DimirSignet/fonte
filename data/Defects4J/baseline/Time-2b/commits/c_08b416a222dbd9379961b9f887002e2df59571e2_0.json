{"sha": "08b416a222dbd9379961b9f887002e2df59571e2", "log": "Add getAsString() to property classes   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java\n+++ b/JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Gets a value from the partial instant.\n+     * Gets the value of this property from the instant.\n+     * <p>\n+     * For example, the following two lines of code are equivalent:\n+     * <pre>\n+     * partial.getDayOfMonth();\n+     * partial.dayOfMonth().get();\n+     * </pre>\n      * \n      * @return the current value\n      */\n     public abstract int get();\n \n     /**\n-     * Gets a text value from the partial instant.\n-     * \n-     * @param locale  optional locale to use for selecting a text symbol\n+     * Gets the value of this property from the instant as a string.\n+     * <p>\n+     * This method returns the value converted to a <code>String</code>\n+     * using <code>Integer.toString</code>. This method does NOT return\n+     * textual descriptions such as 'Monday' or 'January'.\n+     * See {@link #getAsText()} and {@link #getAsShortText()} for those.\n+     * \n+     * @return the current value\n+     * @see DateTimeField#get\n+     */\n+    public String getAsString() {\n+        return Integer.toString(get());\n+    }\n+\n+    /**\n+     * Gets the textual value of this property from the instant as a\n+     * string in the default locale.\n+     * <p>\n+     * This method returns the value converted to a <code>String</code>\n+     * returning the appropriate textual description wherever possible.\n+     * Thus, a day of week of 1 would return 'Monday' in English.\n+     * \n      * @return the current text value\n      * @see DateTimeField#getAsText\n      */\n+    public final String getAsText() {\n+        return getAsText(null);\n+    }\n+\n+    /**\n+     * Gets the textual value of this property from the instant as a\n+     * string in the specified locale.\n+     * <p>\n+     * This method returns the value converted to a <code>String</code>\n+     * returning the appropriate textual description wherever possible.\n+     * Thus, a day of week of 1 would return 'Monday' in English.\n+     * \n+     * @param locale  locale to use for selecting a text symbol, null means default\n+     * @return the current text value\n+     * @see DateTimeField#getAsText\n+     */\n     public String getAsText(Locale locale) {\n         return getField().getAsText(getReadablePartial(), get(), locale);\n     }\n \n     /**\n-     * Gets a text value from the partial instant.\n-     * \n-     * @return the current text value\n-     * @see DateTimeField#getAsText\n-     */\n-    public String getAsText() {\n-        return getAsText(null);\n-    }\n-\n-    /**\n-     * Gets a short text value from the partial instant.\n-     * \n-     * @param locale  optional locale to use for selecting a text symbol\n+     * Gets the short textual value of this property from the instant as a\n+     * string in the default locale.\n+     * <p>\n+     * This method returns the value converted to a <code>String</code>\n+     * returning the appropriate textual description wherever possible.\n+     * Thus, a day of week of 1 would return 'Mon' in English.\n+     * \n      * @return the current text value\n      * @see DateTimeField#getAsShortText\n      */\n+    public final String getAsShortText() {\n+        return getAsShortText(null);\n+    }\n+\n+    /**\n+     * Gets the short textual value of this property from the instant as a\n+     * string in the specified locale.\n+     * <p>\n+     * This method returns the value converted to a <code>String</code>\n+     * returning the appropriate textual description wherever possible.\n+     * Thus, a day of week of 1 would return 'Mon' in English.\n+     * \n+     * @param locale  locale to use for selecting a text symbol, null means default\n+     * @return the current text value\n+     * @see DateTimeField#getAsShortText\n+     */\n     public String getAsShortText(Locale locale) {\n         return getField().getAsShortText(getReadablePartial(), get(), locale);\n-    }\n-\n-    /**\n-     * Gets a short text value from the partial instant.\n-     * \n-     * @return the current text value\n-     * @see DateTimeField#getAsShortText\n-     */\n-    public String getAsShortText() {\n-        return getAsShortText(null);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java\n+++ b/JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Gets a value from the instant.\n+     * Gets the value of this property from the instant.\n+     * <p>\n+     * For example, the following two lines of code are equivalent:\n+     * <pre>\n+     * datetime.getDayOfMonth();\n+     * datetime.dayOfMonth().get();\n+     * </pre>\n      * \n      * @return the current value\n      * @see DateTimeField#get\n     }\n \n     /**\n-     * Gets a text value from the instant.\n-     * \n-     * @param locale  optional locale to use for selecting a text symbol\n+     * Gets the value of this property from the instant as a string.\n+     * <p>\n+     * This method returns the value converted to a <code>String</code>\n+     * using <code>Integer.toString</code>. This method does NOT return\n+     * textual descriptions such as 'Monday' or 'January'.\n+     * See {@link #getAsText()} and {@link #getAsShortText()} for those.\n+     * \n+     * @return the current value\n+     * @see DateTimeField#get\n+     */\n+    public String getAsString() {\n+        return Integer.toString(get());\n+    }\n+\n+    /**\n+     * Gets the textual value of this property from the instant as a\n+     * string in the default locale.\n+     * <p>\n+     * This method returns the value converted to a <code>String</code>\n+     * returning the appropriate textual description wherever possible.\n+     * Thus, a day of week of 1 would return 'Monday' in English.\n+     * \n      * @return the current text value\n      * @see DateTimeField#getAsText\n      */\n+    public final String getAsText() {\n+        return getAsText(null);\n+    }\n+\n+    /**\n+     * Gets the textual value of this property from the instant as a\n+     * string in the specified locale.\n+     * <p>\n+     * This method returns the value converted to a <code>String</code>\n+     * returning the appropriate textual description wherever possible.\n+     * Thus, a day of week of 1 would return 'Monday' in English.\n+     * \n+     * @param locale  locale to use for selecting a text symbol, null means default\n+     * @return the current text value\n+     * @see DateTimeField#getAsText\n+     */\n     public String getAsText(Locale locale) {\n         return getField().getAsText(getMillis(), locale);\n     }\n \n     /**\n-     * Gets a text value from the instant.\n-     * \n-     * @return the current text value\n-     * @see DateTimeField#getAsText\n-     */\n-    public final String getAsText() {\n-        return getAsText(null);\n-    }\n-\n-    /**\n-     * Gets a short text value from the instant.\n-     * \n-     * @param locale  optional locale to use for selecting a text symbol\n+     * Gets the short textual value of this property from the instant as a\n+     * string in the default locale.\n+     * <p>\n+     * This method returns the value converted to a <code>String</code>\n+     * returning the appropriate textual description wherever possible.\n+     * Thus, a day of week of 1 would return 'Mon' in English.\n+     * \n      * @return the current text value\n      * @see DateTimeField#getAsShortText\n      */\n+    public final String getAsShortText() {\n+        return getAsShortText(null);\n+    }\n+\n+    /**\n+     * Gets the short textual value of this property from the instant as a\n+     * string in the specified locale.\n+     * <p>\n+     * This method returns the value converted to a <code>String</code>\n+     * returning the appropriate textual description wherever possible.\n+     * Thus, a day of week of 1 would return 'Mon' in English.\n+     * \n+     * @param locale  locale to use for selecting a text symbol, null means default\n+     * @return the current text value\n+     * @see DateTimeField#getAsShortText\n+     */\n     public String getAsShortText(Locale locale) {\n         return getField().getAsShortText(getMillis(), locale);\n-    }\n-\n-    /**\n-     * Gets a short text value from the instant.\n-     * \n-     * @return the current text value\n-     * @see DateTimeField#getAsShortText\n-     */\n-    public final String getAsShortText() {\n-        return getAsShortText(null);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java\n         assertEquals(\"Property[monthOfYear]\", test.monthOfYear().toString());\n         assertSame(test, test.monthOfYear().getDateMidnight());\n         assertEquals(6, test.monthOfYear().get());\n+        assertEquals(\"6\", test.monthOfYear().getAsString());\n         assertEquals(\"June\", test.monthOfYear().getAsText());\n         assertEquals(\"juin\", test.monthOfYear().getAsText(Locale.FRENCH));\n         assertEquals(\"Jun\", test.monthOfYear().getAsShortText());\n         assertEquals(\"Property[dayOfWeek]\", test.dayOfWeek().toString());\n         assertSame(test, test.dayOfWeek().getDateMidnight());\n         assertEquals(3, test.dayOfWeek().get());\n+        assertEquals(\"3\", test.dayOfWeek().getAsString());\n         assertEquals(\"Wednesday\", test.dayOfWeek().getAsText());\n         assertEquals(\"mercredi\", test.dayOfWeek().getAsText(Locale.FRENCH));\n         assertEquals(\"Wed\", test.dayOfWeek().getAsShortText());\n--- a/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java\n         assertEquals(\"Property[era]\", test.era().toString());\n         assertSame(test, test.era().getDateTime());\n         assertEquals(1, test.era().get());\n+        assertEquals(\"1\", test.era().getAsString());\n         assertEquals(\"AD\", test.era().getAsText());\n         assertEquals(\"ap. J.-C.\", test.era().getAsText(Locale.FRENCH));\n         assertEquals(\"AD\", test.era().getAsShortText());\n         assertEquals(\"Property[yearOfEra]\", test.yearOfEra().toString());\n         assertSame(test, test.yearOfEra().getDateTime());\n         assertEquals(2004, test.yearOfEra().get());\n+        assertEquals(\"2004\", test.yearOfEra().getAsString());\n         assertEquals(\"2004\", test.yearOfEra().getAsText());\n         assertEquals(\"2004\", test.yearOfEra().getAsText(Locale.FRENCH));\n         assertEquals(\"2004\", test.yearOfEra().getAsShortText());\n         assertEquals(\"Property[centuryOfEra]\", test.centuryOfEra().toString());\n         assertSame(test, test.centuryOfEra().getDateTime());\n         assertEquals(20, test.centuryOfEra().get());\n+        assertEquals(\"20\", test.centuryOfEra().getAsString());\n         assertEquals(\"20\", test.centuryOfEra().getAsText());\n         assertEquals(\"20\", test.centuryOfEra().getAsText(Locale.FRENCH));\n         assertEquals(\"20\", test.centuryOfEra().getAsShortText());\n         assertEquals(\"Property[yearOfCentury]\", test.yearOfCentury().toString());\n         assertSame(test, test.yearOfCentury().getDateTime());\n         assertEquals(4, test.yearOfCentury().get());\n+        assertEquals(\"4\", test.yearOfCentury().getAsString());\n         assertEquals(\"4\", test.yearOfCentury().getAsText());\n         assertEquals(\"4\", test.yearOfCentury().getAsText(Locale.FRENCH));\n         assertEquals(\"4\", test.yearOfCentury().getAsShortText());\n         assertEquals(\"Property[weekyear]\", test.weekyear().toString());\n         assertSame(test, test.weekyear().getDateTime());\n         assertEquals(2004, test.weekyear().get());\n+        assertEquals(\"2004\", test.weekyear().getAsString());\n         assertEquals(\"2004\", test.weekyear().getAsText());\n         assertEquals(\"2004\", test.weekyear().getAsText(Locale.FRENCH));\n         assertEquals(\"2004\", test.weekyear().getAsShortText());\n         assertEquals(\"Property[year]\", test.year().toString());\n         assertSame(test, test.year().getDateTime());\n         assertEquals(2004, test.year().get());\n+        assertEquals(\"2004\", test.year().getAsString());\n         assertEquals(\"2004\", test.year().getAsText());\n         assertEquals(\"2004\", test.year().getAsText(Locale.FRENCH));\n         assertEquals(\"2004\", test.year().getAsShortText());\n         assertEquals(\"Property[monthOfYear]\", test.monthOfYear().toString());\n         assertSame(test, test.monthOfYear().getDateTime());\n         assertEquals(6, test.monthOfYear().get());\n+        assertEquals(\"6\", test.monthOfYear().getAsString());\n         assertEquals(\"June\", test.monthOfYear().getAsText());\n         assertEquals(\"juin\", test.monthOfYear().getAsText(Locale.FRENCH));\n         assertEquals(\"Jun\", test.monthOfYear().getAsShortText());\n         assertEquals(\"Property[dayOfMonth]\", test.dayOfMonth().toString());\n         assertSame(test, test.dayOfMonth().getDateTime());\n         assertEquals(9, test.dayOfMonth().get());\n+        assertEquals(\"9\", test.dayOfMonth().getAsString());\n         assertEquals(\"9\", test.dayOfMonth().getAsText());\n         assertEquals(\"9\", test.dayOfMonth().getAsText(Locale.FRENCH));\n         assertEquals(\"9\", test.dayOfMonth().getAsShortText());\n         assertEquals(\"Property[dayOfYear]\", test.dayOfYear().toString());\n         assertSame(test, test.dayOfYear().getDateTime());\n         assertEquals(161, test.dayOfYear().get());\n+        assertEquals(\"161\", test.dayOfYear().getAsString());\n         assertEquals(\"161\", test.dayOfYear().getAsText());\n         assertEquals(\"161\", test.dayOfYear().getAsText(Locale.FRENCH));\n         assertEquals(\"161\", test.dayOfYear().getAsShortText());\n         assertEquals(\"Property[weekOfWeekyear]\", test.weekOfWeekyear().toString());\n         assertSame(test, test.weekOfWeekyear().getDateTime());\n         assertEquals(24, test.weekOfWeekyear().get());\n+        assertEquals(\"24\", test.weekOfWeekyear().getAsString());\n         assertEquals(\"24\", test.weekOfWeekyear().getAsText());\n         assertEquals(\"24\", test.weekOfWeekyear().getAsText(Locale.FRENCH));\n         assertEquals(\"24\", test.weekOfWeekyear().getAsShortText());\n         assertEquals(\"Property[dayOfWeek]\", test.dayOfWeek().toString());\n         assertSame(test, test.dayOfWeek().getDateTime());\n         assertEquals(3, test.dayOfWeek().get());\n+        assertEquals(\"3\", test.dayOfWeek().getAsString());\n         assertEquals(\"Wednesday\", test.dayOfWeek().getAsText());\n         assertEquals(\"mercredi\", test.dayOfWeek().getAsText(Locale.FRENCH));\n         assertEquals(\"Wed\", test.dayOfWeek().getAsShortText());\n         assertEquals(\"Property[hourOfDay]\", test.hourOfDay().toString());\n         assertSame(test, test.hourOfDay().getDateTime());\n         assertEquals(13, test.hourOfDay().get());\n+        assertEquals(\"13\", test.hourOfDay().getAsString());\n         assertEquals(\"13\", test.hourOfDay().getAsText());\n         assertEquals(\"13\", test.hourOfDay().getAsText(Locale.FRENCH));\n         assertEquals(\"13\", test.hourOfDay().getAsShortText());\n         assertEquals(\"Property[minuteOfHour]\", test.minuteOfHour().toString());\n         assertSame(test, test.minuteOfHour().getDateTime());\n         assertEquals(23, test.minuteOfHour().get());\n+        assertEquals(\"23\", test.minuteOfHour().getAsString());\n         assertEquals(\"23\", test.minuteOfHour().getAsText());\n         assertEquals(\"23\", test.minuteOfHour().getAsText(Locale.FRENCH));\n         assertEquals(\"23\", test.minuteOfHour().getAsShortText());\n         assertEquals(\"Property[minuteOfDay]\", test.minuteOfDay().toString());\n         assertSame(test, test.minuteOfDay().getDateTime());\n         assertEquals(803, test.minuteOfDay().get());\n+        assertEquals(\"803\", test.minuteOfDay().getAsString());\n         assertEquals(\"803\", test.minuteOfDay().getAsText());\n         assertEquals(\"803\", test.minuteOfDay().getAsText(Locale.FRENCH));\n         assertEquals(\"803\", test.minuteOfDay().getAsShortText());\n         assertEquals(\"Property[secondOfMinute]\", test.secondOfMinute().toString());\n         assertSame(test, test.secondOfMinute().getDateTime());\n         assertEquals(43, test.secondOfMinute().get());\n+        assertEquals(\"43\", test.secondOfMinute().getAsString());\n         assertEquals(\"43\", test.secondOfMinute().getAsText());\n         assertEquals(\"43\", test.secondOfMinute().getAsText(Locale.FRENCH));\n         assertEquals(\"43\", test.secondOfMinute().getAsShortText());\n         assertEquals(\"Property[secondOfDay]\", test.secondOfDay().toString());\n         assertSame(test, test.secondOfDay().getDateTime());\n         assertEquals(48223, test.secondOfDay().get());\n+        assertEquals(\"48223\", test.secondOfDay().getAsString());\n         assertEquals(\"48223\", test.secondOfDay().getAsText());\n         assertEquals(\"48223\", test.secondOfDay().getAsText(Locale.FRENCH));\n         assertEquals(\"48223\", test.secondOfDay().getAsShortText());\n         assertEquals(\"Property[millisOfSecond]\", test.millisOfSecond().toString());\n         assertSame(test, test.millisOfSecond().getDateTime());\n         assertEquals(53, test.millisOfSecond().get());\n+        assertEquals(\"53\", test.millisOfSecond().getAsString());\n         assertEquals(\"53\", test.millisOfSecond().getAsText());\n         assertEquals(\"53\", test.millisOfSecond().getAsText(Locale.FRENCH));\n         assertEquals(\"53\", test.millisOfSecond().getAsShortText());\n         assertEquals(\"Property[millisOfDay]\", test.millisOfDay().toString());\n         assertSame(test, test.millisOfDay().getDateTime());\n         assertEquals(48223053, test.millisOfDay().get());\n+        assertEquals(\"48223053\", test.millisOfDay().getAsString());\n         assertEquals(\"48223053\", test.millisOfDay().getAsText());\n         assertEquals(\"48223053\", test.millisOfDay().getAsText(Locale.FRENCH));\n         assertEquals(\"48223053\", test.millisOfDay().getAsShortText());\n--- a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java\n+++ b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java\n         assertSame(test, test.hourOfDay().getReadablePartial());\n         assertSame(test, test.hourOfDay().getTimeOfDay());\n         assertEquals(10, test.hourOfDay().get());\n+        assertEquals(\"10\", test.hourOfDay().getAsString());\n         assertEquals(\"10\", test.hourOfDay().getAsText());\n         assertEquals(\"10\", test.hourOfDay().getAsText(Locale.FRENCH));\n         assertEquals(\"10\", test.hourOfDay().getAsShortText());\n         assertSame(test, test.minuteOfHour().getReadablePartial());\n         assertSame(test, test.minuteOfHour().getTimeOfDay());\n         assertEquals(20, test.minuteOfHour().get());\n+        assertEquals(\"20\", test.minuteOfHour().getAsString());\n         assertEquals(\"20\", test.minuteOfHour().getAsText());\n         assertEquals(\"20\", test.minuteOfHour().getAsText(Locale.FRENCH));\n         assertEquals(\"20\", test.minuteOfHour().getAsShortText());\n         assertSame(test, test.secondOfMinute().getReadablePartial());\n         assertSame(test, test.secondOfMinute().getTimeOfDay());\n         assertEquals(30, test.secondOfMinute().get());\n+        assertEquals(\"30\", test.secondOfMinute().getAsString());\n         assertEquals(\"30\", test.secondOfMinute().getAsText());\n         assertEquals(\"30\", test.secondOfMinute().getAsText(Locale.FRENCH));\n         assertEquals(\"30\", test.secondOfMinute().getAsShortText());\n         assertSame(test, test.millisOfSecond().getReadablePartial());\n         assertSame(test, test.millisOfSecond().getTimeOfDay());\n         assertEquals(40, test.millisOfSecond().get());\n+        assertEquals(\"40\", test.millisOfSecond().getAsString());\n         assertEquals(\"40\", test.millisOfSecond().getAsText());\n         assertEquals(\"40\", test.millisOfSecond().getAsText(Locale.FRENCH));\n         assertEquals(\"40\", test.millisOfSecond().getAsShortText());\n--- a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java\n+++ b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java\n         assertSame(test, test.year().getReadablePartial());\n         assertSame(test, test.year().getYearMonthDay());\n         assertEquals(1972, test.year().get());\n+        assertEquals(\"1972\", test.year().getAsString());\n         assertEquals(\"1972\", test.year().getAsText());\n         assertEquals(\"1972\", test.year().getAsText(Locale.FRENCH));\n         assertEquals(\"1972\", test.year().getAsShortText());\n         assertSame(test, test.monthOfYear().getReadablePartial());\n         assertSame(test, test.monthOfYear().getYearMonthDay());\n         assertEquals(6, test.monthOfYear().get());\n+        assertEquals(\"6\", test.monthOfYear().getAsString());\n         assertEquals(\"June\", test.monthOfYear().getAsText());\n         assertEquals(\"juin\", test.monthOfYear().getAsText(Locale.FRENCH));\n         assertEquals(\"Jun\", test.monthOfYear().getAsShortText());\n         assertSame(test, test.dayOfMonth().getReadablePartial());\n         assertSame(test, test.dayOfMonth().getYearMonthDay());\n         assertEquals(9, test.dayOfMonth().get());\n+        assertEquals(\"9\", test.dayOfMonth().getAsString());\n         assertEquals(\"9\", test.dayOfMonth().getAsText());\n         assertEquals(\"9\", test.dayOfMonth().getAsText(Locale.FRENCH));\n         assertEquals(\"9\", test.dayOfMonth().getAsShortText());", "timestamp": 1116042300, "metainfo": ""}