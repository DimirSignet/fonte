{"sha": "b89707e61489ca36c1e02819a24c3bba57f3f59e", "log": "Add static factory methods to Duration [1909376]  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/Duration.java\n+++ b/JodaTime/src/java/org/joda/time/Duration.java\n     /** Serialization version */\n     private static final long serialVersionUID = 2471658376918L;\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Create a duration with the specified number of days assuming that\n+     * there are the standard number of milliseconds in a day.\n+     * <p>\n+     * This method assumes that there are 24 hours in a day,\n+     * 60 minutes in an hour, 60 seconds in a minute and 1000 milliseconds in\n+     * a second. This will be true for most days, however days with Daylight\n+     * Savings changes will not have 24 hours, so use this method with care.\n+     * <p>\n+     * A Duration is a representation of an amount of time. If you want to express\n+     * the concepts of 'days' you should consider using the {@link Days} class.\n+     *\n+     * @param days  the number of standard days in this duration\n+     * @return the duration, never null\n+     * @throws ArithmeticException if the days value is too large\n+     */\n+    public static Duration standardDays(long days) {\n+        if (days == 0) {\n+            return ZERO;\n+        }\n+        return new Duration(FieldUtils.safeMultiply(days, DateTimeConstants.MILLIS_PER_DAY));\n+    }\n+\n+    /**\n+     * Create a duration with the specified number of hours assuming that\n+     * there are the standard number of milliseconds in an hour.\n+     * <p>\n+     * This method assumes that there are 60 minutes in an hour,\n+     * 60 seconds in a minute and 1000 milliseconds in a second.\n+     * All currently supplied chronologies use this definition.\n+     * <p>\n+     * A Duration is a representation of an amount of time. If you want to express\n+     * the concepts of 'hours' you should consider using the {@link Hours} class.\n+     *\n+     * @param hours  the number of standard hours in this duration\n+     * @return the duration, never null\n+     * @throws ArithmeticException if the hours value is too large\n+     */\n+    public static Duration standardHours(long hours) {\n+        if (hours == 0) {\n+            return ZERO;\n+        }\n+        return new Duration(FieldUtils.safeMultiply(hours, DateTimeConstants.MILLIS_PER_HOUR));\n+    }\n+\n+    /**\n+     * Create a duration with the specified number of minutes assuming that\n+     * there are the standard number of milliseconds in a minute.\n+     * <p>\n+     * This method assumes that there are 60 seconds in a minute and\n+     * 1000 milliseconds in a second.\n+     * All currently supplied chronologies use this definition.\n+     * <p>\n+     * A Duration is a representation of an amount of time. If you want to express\n+     * the concepts of 'minutes' you should consider using the {@link Minutes} class.\n+     *\n+     * @param minutes  the number of standard minutes in this duration\n+     * @return the duration, never null\n+     * @throws ArithmeticException if the minutes value is too large\n+     */\n+    public static Duration standardMinutes(long minutes) {\n+        if (minutes == 0) {\n+            return ZERO;\n+        }\n+        return new Duration(FieldUtils.safeMultiply(minutes, DateTimeConstants.MILLIS_PER_MINUTE));\n+    }\n+\n+    /**\n+     * Create a duration with the specified number of seconds assuming that\n+     * there are the standard number of milliseconds in a second.\n+     * <p>\n+     * This method assumes that there are 1000 milliseconds in a second.\n+     * All currently supplied chronologies use this definition.\n+     * <p>\n+     * A Duration is a representation of an amount of time. If you want to express\n+     * the concepts of 'seconds' you should consider using the {@link Seconds} class.\n+     *\n+     * @param seconds  the number of standard seconds in this duration\n+     * @return the duration, never null\n+     * @throws ArithmeticException if the seconds value is too large\n+     */\n+    public static Duration standardSeconds(long seconds) {\n+        if (seconds == 0) {\n+            return ZERO;\n+        }\n+        return new Duration(FieldUtils.safeMultiply(seconds, DateTimeConstants.MILLIS_PER_SECOND));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Creates a duration from the given millisecond duration.\n      *\n--- a/JodaTime/src/test/org/joda/time/TestDuration_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestDuration_Constructors.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testFactory_standardDays_long() throws Throwable {\n+        Duration test = Duration.standardDays(1);\n+        assertEquals(24L * 60L * 60L * 1000L, test.getMillis());\n+        \n+        test = Duration.standardDays(2);\n+        assertEquals(2L * 24L * 60L * 60L * 1000L, test.getMillis());\n+        \n+        test = Duration.standardDays(0);\n+        assertSame(Duration.ZERO, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_standardHours_long() throws Throwable {\n+        Duration test = Duration.standardHours(1);\n+        assertEquals(60L * 60L * 1000L, test.getMillis());\n+        \n+        test = Duration.standardHours(2);\n+        assertEquals(2L * 60L * 60L * 1000L, test.getMillis());\n+        \n+        test = Duration.standardHours(0);\n+        assertSame(Duration.ZERO, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_standardMinutes_long() throws Throwable {\n+        Duration test = Duration.standardMinutes(1);\n+        assertEquals(60L * 1000L, test.getMillis());\n+        \n+        test = Duration.standardMinutes(2);\n+        assertEquals(2L * 60L * 1000L, test.getMillis());\n+        \n+        test = Duration.standardMinutes(0);\n+        assertSame(Duration.ZERO, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_standardSeconds_long() throws Throwable {\n+        Duration test = Duration.standardSeconds(1);\n+        assertEquals(1000L, test.getMillis());\n+        \n+        test = Duration.standardSeconds(2);\n+        assertEquals(2L * 1000L, test.getMillis());\n+        \n+        test = Duration.standardSeconds(0);\n+        assertSame(Duration.ZERO, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testConstructor_long1() throws Throwable {\n         long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n                 5 * DateTimeConstants.MILLIS_PER_HOUR +", "timestamp": 1205601196, "metainfo": ""}