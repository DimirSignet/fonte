{"sha": "8d109fe1a999a11b4557536dd96f9210460a5936", "log": "Adding zero no longer changes the offset during DST overlap  Fixes #77", "commit": "\n--- a/src/main/java/org/joda/time/MutableDateTime.java\n+++ b/src/main/java/org/joda/time/MutableDateTime.java\n /*\n- *  Copyright 2001-2010 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n                 instant = iRoundingField.roundHalfEven(instant);\n                 break;\n         }\n-\n         super.setMillis(instant);\n     }\n \n         if (type == null) {\n             throw new IllegalArgumentException(\"Field must not be null\");\n         }\n-        setMillis(type.getField(getChronology()).add(getMillis(), amount));\n+        if (amount != 0) {\n+            setMillis(type.getField(getChronology()).add(getMillis(), amount));\n+        }\n     }\n \n     //-----------------------------------------------------------------------\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addYears(final int years) {\n-        setMillis(getChronology().years().add(getMillis(), years));\n+        if (years != 0) {\n+            setMillis(getChronology().years().add(getMillis(), years));\n+        }\n     }\n \n     //-----------------------------------------------------------------------\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addWeekyears(final int weekyears) {\n-        setMillis(getChronology().weekyears().add(getMillis(), weekyears));\n+        if (weekyears != 0) {\n+            setMillis(getChronology().weekyears().add(getMillis(), weekyears));\n+        }\n     }\n \n     //-----------------------------------------------------------------------\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addMonths(final int months) {\n-        setMillis(getChronology().months().add(getMillis(), months));\n+        if (months != 0) {\n+            setMillis(getChronology().months().add(getMillis(), months));\n+        }\n     }\n \n     //-----------------------------------------------------------------------\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addWeeks(final int weeks) {\n-        setMillis(getChronology().weeks().add(getMillis(), weeks));\n+        if (weeks != 0) {\n+            setMillis(getChronology().weeks().add(getMillis(), weeks));\n+        }\n     }\n \n     //-----------------------------------------------------------------------\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addDays(final int days) {\n-        setMillis(getChronology().days().add(getMillis(), days));\n+        if (days != 0) {\n+            setMillis(getChronology().days().add(getMillis(), days));\n+        }\n     }\n \n     //-----------------------------------------------------------------------\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addHours(final int hours) {\n-        setMillis(getChronology().hours().add(getMillis(), hours));\n+        if (hours != 0) {\n+            setMillis(getChronology().hours().add(getMillis(), hours));\n+        }\n     }\n     \n     //-----------------------------------------------------------------------\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addMinutes(final int minutes) {\n-        setMillis(getChronology().minutes().add(getMillis(), minutes));\n+        if (minutes != 0) {\n+            setMillis(getChronology().minutes().add(getMillis(), minutes));\n+        }\n     }\n \n     //-----------------------------------------------------------------------\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addSeconds(final int seconds) {\n-        setMillis(getChronology().seconds().add(getMillis(), seconds));\n+        if (seconds != 0) {\n+            setMillis(getChronology().seconds().add(getMillis(), seconds));\n+        }\n     }\n \n     //-----------------------------------------------------------------------\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addMillis(final int millis) {\n-        setMillis(getChronology().millis().add(getMillis(), millis));\n+        if (millis != 0) {\n+            setMillis(getChronology().millis().add(getMillis(), millis));\n+        }\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/test/java/org/joda/time/TestMutableDateTime_Adds.java\n+++ b/src/test/java/org/joda/time/TestMutableDateTime_Adds.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n         assertEquals(2010, test.getYear());\n     }\n \n+    public void testAdd_DurationFieldType_int_dstOverlapSummer_addZero() {\n+        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n+        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n+        test.add(DurationFieldType.years(), 0);\n+        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n+    }\n+\n+    public void testAdd_DurationFieldType_int_dstOverlapWinter_addZero() {\n+        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n+        test.addHours(1);\n+        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n+        test.add(DurationFieldType.years(), 0);\n+        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n+    }\n+\n     public void testAdd_DurationFieldType_int2() {\n         MutableDateTime test = new MutableDateTime(TEST_TIME1);\n         try {\n         assertEquals(\"2010-06-09T05:06:07.008+01:00\", test.toString());\n     }\n \n+    public void testAddYears_int_dstOverlapSummer_addZero() {\n+        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n+        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n+        test.addYears(0);\n+        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n+    }\n+\n+    public void testAddYears_int_dstOverlapWinter_addZero() {\n+        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n+        test.addHours(1);\n+        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n+        test.addYears(0);\n+        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testAddMonths_int1() {\n         MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n         assertEquals(\"2002-12-09T05:06:07.008Z\", test.toString());\n     }\n \n+    public void testAddMonths_int_dstOverlapSummer_addZero() {\n+        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n+        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n+        test.addMonths(0);\n+        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n+    }\n+\n+    public void testAddMonths_int_dstOverlapWinter_addZero() {\n+        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n+        test.addHours(1);\n+        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n+        test.addMonths(0);\n+        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testAddDays_int1() {\n         MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n         assertEquals(\"2002-06-26T05:06:07.008+01:00\", test.toString());\n     }\n \n+    public void testAddDays_int_dstOverlapSummer_addZero() {\n+        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n+        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n+        test.addDays(0);\n+        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n+    }\n+\n+    public void testAddDays_int_dstOverlapWinter_addZero() {\n+        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n+        test.addHours(1);\n+        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n+        test.addDays(0);\n+        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testAddWeekyears_int1() {\n         MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n         assertEquals(\"2002-01-13T05:06:07.008Z\", test.toString());\n     }\n \n+    public void testAddWeeks_int_dstOverlapSummer_addZero() {\n+        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n+        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n+        test.addWeeks(0);\n+        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n+    }\n+\n+    public void testAddWeeks_int_dstOverlapWinter_addZero() {\n+        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n+        test.addHours(1);\n+        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n+        test.addWeeks(0);\n+        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testAddHours_int1() {\n         MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n         assertEquals(\"2002-06-09T18:06:07.008+01:00\", test.toString());\n     }\n \n+    public void testAddHours_int_dstOverlapSummer_addZero() {\n+        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n+        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n+        test.addHours(0);\n+        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n+    }\n+\n+    public void testAddHours_int_dstOverlapWinter_addZero() {\n+        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n+        test.addHours(1);\n+        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n+        test.addHours(0);\n+        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testAddMinutes_int1() {\n         MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n         assertEquals(\"2002-06-09T05:19:07.008+01:00\", test.toString());\n     }\n \n+    public void testAddMinutes_int_dstOverlapSummer_addZero() {\n+        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n+        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n+        test.addMinutes(0);\n+        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n+    }\n+\n+    public void testAddMinutes_int_dstOverlapWinter_addZero() {\n+        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n+        test.addHours(1);\n+        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n+        test.addMinutes(0);\n+        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testAddSeconds_int1() {\n         MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n         assertEquals(\"2002-06-09T05:06:20.008+01:00\", test.toString());\n     }\n \n+    public void testAddSeconds_int_dstOverlapSummer_addZero() {\n+        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n+        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n+        test.addSeconds(0);\n+        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n+    }\n+\n+    public void testAddSeconds_int_dstOverlapWinter_addZero() {\n+        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n+        test.addHours(1);\n+        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n+        test.addSeconds(0);\n+        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testAddMillis_int1() {\n         MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n         assertEquals(\"2002-06-09T05:06:07.021+01:00\", test.toString());\n     }\n \n+    public void testAddMillis_int_dstOverlapSummer_addZero() {\n+        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n+        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n+        test.addMillis(0);\n+        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n+    }\n+\n+    public void testAddMillis_int_dstOverlapWinter_addZero() {\n+        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n+        test.addHours(1);\n+        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n+        test.addMillis(0);\n+        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n+    }\n+\n }\n--- a/src/test/java/org/joda/time/TestMutableDateTime_Sets.java\n+++ b/src/test/java/org/joda/time/TestMutableDateTime_Sets.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         assertEquals(\"2002-12-09T05:06:07.008Z\", test.toString());\n     }\n \n+    public void testSetMonthOfYear_int_dstOverlapSummer_addZero() {\n+        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n+        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n+        test.setMonthOfYear(10);\n+        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n+    }\n+\n+    public void testSetMonthOfYear_int_dstOverlapWinter_addZero() {\n+        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n+        test.addHours(1);\n+        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n+        test.setMonthOfYear(10);\n+        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n+    }\n+\n     public void testSetMonthOfYear_int2() {\n         MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n         try {\n         assertEquals(\"2002-06-09T05:06:07.008+01:00\", test.toString());\n     }\n \n+    public void testSetDayOfMonth_int_dstOverlapSummer_addZero() {\n+        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n+        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n+        test.setDayOfMonth(30);\n+        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n+    }\n+\n+    public void testSetDayOfMonth_int_dstOverlapWinter_addZero() {\n+        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n+        test.addHours(1);\n+        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n+        test.setDayOfMonth(30);\n+        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testSetDayOfYear_int1() {\n         MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n         assertEquals(\"2002-01-03T05:06:07.008Z\", test.toString());\n     }\n \n+    public void testSetDayOfYear_int_dstOverlapSummer_addZero() {\n+        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n+        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n+        test.setDayOfYear(303);\n+        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n+    }\n+\n+    public void testSetDayOfYear_int_dstOverlapWinter_addZero() {\n+        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n+        test.addHours(1);\n+        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n+        test.setDayOfYear(303);\n+        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n+    }\n+\n     public void testSetDayOfYear_int2() {\n         MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n         try {", "timestamp": 1385555795, "metainfo": ""}